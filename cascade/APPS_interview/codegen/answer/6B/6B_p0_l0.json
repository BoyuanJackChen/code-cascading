[
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace('|', '')\n\nassert(solution('') == '')\nassert(solution('[::]') == '')\nassert(solution('[:||:]') == '')\nassert(solution('[:|||:]') == '')\nassert(solution('[:|||:|]') == '')\nassert(solution('[:|||:|:|]') == '')\nassert(solution('[:|||:|:|:|]') == '')\nassert(solution('[:|||:|:|:|:|]') == '')\nassert(solution('[:|||:|:|:|:|:|]') == '')\nassert(solution('[:|||:|:|:|:|:|:|]') == '')\nassert(solution('[:|||:|:|:|:|:|:|:|]') == '')\nassert(solution('[:|||:|:|:|:|:|:|:|:|]') == '')\nassert(solution('[:|||:|:|:|:|:|:|:|:|:|]') == '')\nassert(solution('[:|||:|:|:|:|:|:|:|:|:|:|]') == '')\nassert(solution('[:|||:|:|:|:|:|:|:|:|:|:|:|]') == '')\nassert(solution('[:|||:|:|:|:|:|:|:|:|:|:|:|:|]') == '')\nassert(solution('[:|||:|:|:|:|:|:|:|:|:|:|:|:|:|]') == '')\nassert(solution('[:|||:|:|:|:|:|:|:|:|:|:|:|:|:|:|]') == '')\nassert(solution('[:|||:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|]') == '')\nassert(solution('[:|||:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|]') == '')\nassert(solution('[:|||:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|]') == '')\nassert(solution('[:|||:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|]') == '')\nassert(solution('[:|||:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|]') == '')\nassert(solution('[:|||:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|]') == '')\nassert(solution('[:|||:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|]') == '')\nassert(solution('[:|||:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|]') == '')\nassert(solution('[:|||:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|]') == '')\nassert(solution('[:|||:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|]') == '')\nassert(solution('[:|||:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|]') == '')\nassert(solution('[:|||:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|]') == '')\nassert(solution('[:|||:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|]') == '')\nassert(solution('[:|||:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|]') == '')\nassert(solution('[:|||:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|]') == '')\nassert(solution('[:|||:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|]') == '')\nassert(solution('[:|||:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|]') == '')\nassert(solution('[:|||:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|]') == '')\nassert(solution('[:|||:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|]') == '')\nassert(solution('[:|||:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|]') == '')\nassert(solution('[:|||:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|]') == '')\nassert(solution('[:|||:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|]') == '')\nassert(solution('[:|||:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|]') == '')\nassert(solution('[:|||:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|]') == '')\nassert(solution('[:|||:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|]') == '')\nassert(solution('[:|||:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|]') == '')\nassert(solution('[:|||:|:|:|:|:|:"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    max_sum = 0\n    max_num = 0\n    for i in range(1, x + 1):\n        sum_of_digits = 0\n        for digit in str(i):\n            sum_of_digits += int(digit)\n        if sum_of_digits > max_sum:\n            max_sum = sum_of_digits\n            max_num = i\n    return str(max_num)"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    year = int(stdin)\n    years = 0\n    while year > 0:\n        if year % 10 == 0:\n            years += 1\n            year //= 10\n        else:\n            break\n    return str(years)"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    painters = [map(int, stdin.split()) for _ in range(q)]\n    painters.sort(key=lambda x: x[1])\n    painters.sort(key=lambda x: x[0])\n    painters.sort(key=lambda x: x[1] - x[0])\n    painters.sort(key=lambda x: x[0] - x[1])\n    painters.sort(key=lambda x: x[0] - x[1])\n    painters.sort(key=lambda x: x[1] - x[0])\n    painters.sort(key=lambda x: x[0] - x[1])\n    painters.sort(key=lambda x: x[1] - x[0])\n    painters.sort(key=lambda x: x[0] - x[1])\n    painters.sort(key=lambda x: x[1] - x[0])\n    painters.sort(key=lambda x: x[0] - x[1])\n    painters.sort(key=lambda x: x[1] - x[0])\n    painters.sort(key=lambda x: x[0] - x[1])\n    painters.sort(key=lambda x: x[1] - x[0])\n    painters.sort(key=lambda x: x[0] - x[1])\n    painters.sort(key=lambda x: x[1] - x[0])\n    painters.sort(key=lambda x: x[0] - x[1])\n    painters.sort(key=lambda x: x[1] - x[0])\n    painters.sort(key=lambda x: x[0] - x[1])\n    painters.sort(key=lambda x: x[1] - x[0])\n    painters.sort(key=lambda x: x[0] - x[1])\n    painters.sort(key=lambda x: x[1] - x[0])\n    painters.sort(key=lambda x: x[0] - x[1])\n    painters.sort(key=lambda x: x[1] - x[0])\n    painters.sort(key=lambda x: x[0] - x[1])\n    painters.sort(key=lambda x: x[1] - x[0])\n    painters.sort(key=lambda x: x[0] - x[1])\n    painters.sort(key=lambda x: x[1] - x[0])\n    painters.sort(key=lambda x: x[0] - x[1])\n    painters.sort(key=lambda x: x[1] - x[0])\n    painters.sort(key=lambda x: x[0] - x[1])\n    painters.sort(key=lambda x: x[1] - x[0])\n    painters.sort(key=lambda x: x[0] - x[1])\n    painters.sort(key=lambda x: x[1] - x[0])\n    painters.sort(key=lambda x: x[0] - x[1])\n    painters.sort(key=lambda x: x[1] - x[0])\n    painters.sort(key=lambda x: x[0] - x[1])\n    painters.sort(key=lambda x: x[1] - x[0])\n    painters.sort(key=lambda x: x[0] - x[1])\n    painters.sort(key=lambda x: x[1] - x[0])\n    painters.sort(key=lambda x: x[0] - x[1])\n    painters.sort(key=lambda x: x[1] - x[0])\n    painters.sort(key=lambda x: x[0] - x[1])\n    painters.sort(key=lambda x: x[1] - x[0])\n    painters.sort(key=lambda x: x[0] - x[1])\n    painters.sort(key=lambda x: x[1] - x[0])\n    painters.sort(key=lambda x: x[0] - x[1])\n    painters.sort(key=lambda x: x[1] - x[0])\n    painters.sort(key=lambda x: x[0] - x[1])\n    painters.sort(key=lambda x: x[1] - x[0])\n    painters.sort(key=lambda x: x[0] - x[1])\n    painters.sort(key=lambda x: x[1] - x[0])\n    painters.sort(key=lambda x: x[0] - x[1])\n    painters.sort(key=lambda x: x[1] - x[0])\n    painters.sort(key=lambda x: x[0] - x[1])\n    painters.sort(key=lambda x: x[1] - x[0])\n    painters.sort(key=lambda x: x[0] - x[1])\n    painters.sort(key=lambda x: x[1] - x[0])\n    painters.sort(key=lambda x: x[0] - x[1])\n    painters.sort(key=lambda x: x[1] - x[0])\n    painters.sort(key=lambda x: x[0] - x[1])\n    painters.sort(key=lambda x: x[1] - x[0])\n    painters.sort(key=lambda x: x[0] - x[1])\n    painters.sort(key=lambda x: x[1] - x[0])\n    painters.sort(key=lambda x: x[0] - x[1])\n    painters.sort(key=lambda x: x[1] - x[0])\n    painters.sort(key=lambda x: x[0] - x[1])\n    painters.sort(key=lambda x: x[1] - x[0])\n    painters.sort(key=lambda x: x[0] - x[1])\n    painters.sort(key=lambda x: x[1] - x[0])\n    painters.sort(key=lambda x: x[0] - x[1])\n    painters.sort(key=lambda x: x[1] - x[0])\n    painters.sort(key=lambda x: x[0] - x[1])\n    painters.sort(key=lambda x: x[1] - x[0])\n    painters.sort(key=lambda x: x[0] - x[1])\n    painters.sort(key=lambda x: x[1] - x[0])\n    painters.sort(key=lambda x: x[0] - x[1])\n    painters.sort(key=lambda x: x[1] - x[0])\n    painters.sort(key=lambda x: x[0] - x[1])\n    painters.sort(key=lambda x"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    h, m = map(int, stdin.split())\n    if m < 7:\n        return 0\n    if m == 7:\n        return 1\n    if m == 8:\n        return 2\n    if m == 9:\n        return 3\n    if m == 10:\n        return 4\n    if m == 11:\n        return 5\n    if m == 12:\n        return 6\n    if m == 13:\n        return 7\n    if m == 14:\n        return 8\n    if m == 15:\n        return 9\n    if m == 16:\n        return 10\n    if m == 17:\n        return 11\n    if m == 18:\n        return 12\n    if m == 19:\n        return 13\n    if m == 20:\n        return 14\n    if m == 21:\n        return 15\n    if m == 22:\n        return 16\n    if m == 23:\n        return 17\n    if m == 24:\n        return 18\n    if m == 25:\n        return 19\n    if m == 26:\n        return 20\n    if m == 27:\n        return 21\n    if m == 28:\n        return 22\n    if m == 29:\n        return 23\n    if m == 30:\n        return 24\n    if m == 31:\n        return 25\n    if m == 32:\n        return 26\n    if m == 33:\n        return 27\n    if m == 34:\n        return 28\n    if m == 35:\n        return 29\n    if m == 36:\n        return 30\n    if m == 37:\n        return 31\n    if m == 38:\n        return 32\n    if m == 39:\n        return 33\n    if m == 40:\n        return 34\n    if m == 41:\n        return 35\n    if m == 42:\n        return 36\n    if m == 43:\n        return 37\n    if m == 44:\n        return 38\n    if m == 45:\n        return 39\n    if m == 46:\n        return 40\n    if m == 47:\n        return 41\n    if m == 48:\n        return 42\n    if m == 49:\n        return 43\n    if m == 50:\n        return 44\n    if m == 51:\n        return 45\n    if m == 52:\n        return 46\n    if m == 53:\n        return 47\n    if m == 54:\n        return 48\n    if m == 55:\n        return 49\n    if m == 56:\n        return 50\n    if m == 57:\n        return 51\n    if m == 58:\n        return 52\n    if m == 59:\n        return 53\n    if m == 60:\n        return 54\n    if m == 61:\n        return 55\n    if m == 62:\n        return 56\n    if m == 63:\n        return 57\n    if m == 64:\n        return 58\n    if m == 65:\n        return 59\n    if m == 66:\n        return 60\n    if m == 67:\n        return 61\n    if m == 68:\n        return 62\n    if m == 69:\n        return 63\n    if m == 70:\n        return 64\n    if m == 71:\n        return 65\n    if m == 72:\n        return 66\n    if m == 73:\n        return 67\n    if m == 74:\n        return 68\n    if m == 75:\n        return 69\n    if m == 76:\n        return 70\n    if m == 77:\n        return 71\n    if m == 78:\n        return 72\n    if m == 79:\n        return 73\n    if m == 80:\n        return 74\n    if m == 81:\n        return 75\n    if m == 82:\n        return 76\n    if m == 83:\n        return 77\n    if m == 84:\n        return 78\n    if m == 85:\n        return 79\n    if m == 86:\n        return 80\n    if m == 87:\n        return 81\n    if m == 88:\n        return 82\n    if m == 89:\n        return 83\n    if m == 90:\n        return 84\n    if m == 91:\n        return 85\n    if m == 92:\n        return 86\n    if m == 93:\n        return 87\n    if m == 94:\n        return 88\n    if m == 95:\n        return 89\n    if m == 96:\n        return 90\n    if m == 97:\n        return 91\n    if m == 98:\n        return 92\n    if m == 99:\n        return 93\n    if m == 100:\n        return 94\n    if m == 101:\n        return 95\n    if m == 102:\n        return 96\n    if m == 103:\n        return 97\n    if m == 104:\n        return 98\n    if m == 105:\n        return 99\n    if m == 106:\n        return 100\n    if m == 107:\n        return 101\n    if m == 108:\n        return 102\n    if m == 109:\n        return 103\n    if m == 110:\n        return 104\n    if m == 111:\n        return 105\n    if m == 112:\n        return 106\n    if m == 113:\n        return 107\n    if m == 114:\n        return 108\n    if m == 115:\n        return 109\n    if m == 116:\n        return 110\n    if m == 117:\n        return 111\n    if m == 118:\n        return 112\n    if m == 119:\n        return 113\n    if m == 120:\n        return 114\n    if m == 121:\n        return 115\n    if m == 122:\n        return 116\n    if m == 123:\n        return 117\n    if m == 124:\n        return 118\n    if m == 125:\n        return 119\n    if m == 126:\n        return 120\n    if m == 127:\n        return 121\n    if m == 128:\n        return 122\n    if m == 129:\n        return 123\n    if m == 130:\n        return 124\n    if m == 131:\n        return 125\n    if m == 132:\n        return 126\n    if m == 133:\n        return 127\n    if m == 134:\n        return 128\n    if m == 135:\n        return 129\n    if m == 136:\n        return 130\n    if m == 137:\n        return 131\n    if m == 138:\n        return 132\n    if m == 139:\n        return 133\n    if m == 140:\n        return 134\n    if m == 141:\n        return 135\n    if m == 142:\n        return 136\n    if m == 143:\n        return 137\n    if m == 144:\n        return 138\n    if m == 145:\n        return 139\n    if m == 146:\n        return 140\n    if m == 147:\n        return 141\n    if m == 148:\n        return 142\n    if m == 149:\n        return 143\n    if m =="
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, pos, l, r = [int(x) for x in stdin.split()]\n    return str(min(0, n - pos - 1))"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n, x = map(int, stdin.readline().strip().split())\n        d = list(map(int, stdin.readline().strip().split()))\n        h = list(map(int, stdin.readline().strip().split()))\n        curX = x\n        curH = h[0]\n        for i in range(1, n):\n            curX -= min(d[i], curX)\n            curH += h[i]\n            if curX <= 0:\n                break\n        if curX > 0:\n            print(-1)\n        else:\n            print(curH)"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    day = 1\n    while n > 0:\n        n -= m\n        day += 1\n    return str(day)"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    d = int(stdin.readline())\n    n, m = map(int, stdin.readline().split())\n    sofas = []\n    for _ in range(d):\n        x1, y1, x2, y2 = map(int, stdin.readline().split())\n        sofas.append((x1, y1, x2, y2))\n    cnt_l, cnt_r, cnt_t, cnt_b = map(int, stdin.readline().split())\n    sofas.sort(key=lambda x: (x[0], x[1]))\n    sofas.sort(key=lambda x: (x[2], x[3]))\n    sofas.sort(key=lambda x: (x[0], x[1]))\n    sofas.sort(key=lambda x: (x[2], x[3]))\n    sofas.sort(key=lambda x: (x[0], x[1]))\n    sofas.sort(key=lambda x: (x[2], x[3]))\n    sofas.sort(key=lambda x: (x[0], x[1]))\n    sofas.sort(key=lambda x: (x[2], x[3]))\n    sofas.sort(key=lambda x: (x[0], x[1]))\n    sofas.sort(key=lambda x: (x[2], x[3]))\n    sofas.sort(key=lambda x: (x[0], x[1]))\n    sofas.sort(key=lambda x: (x[2], x[3]))\n    sofas.sort(key=lambda x: (x[0], x[1]))\n    sofas.sort(key=lambda x: (x[2], x[3]))\n    sofas.sort(key=lambda x: (x[0], x[1]))\n    sofas.sort(key=lambda x: (x[2], x[3]))\n    sofas.sort(key=lambda x: (x[0], x[1]))\n    sofas.sort(key=lambda x: (x[2], x[3]))\n    sofas.sort(key=lambda x: (x[0], x[1]))\n    sofas.sort(key=lambda x: (x[2], x[3]))\n    sofas.sort(key=lambda x: (x[0], x[1]))\n    sofas.sort(key=lambda x: (x[2], x[3]))\n    sofas.sort(key=lambda x: (x[0], x[1]))\n    sofas.sort(key=lambda x: (x[2], x[3]))\n    sofas.sort(key=lambda x: (x[0], x[1]))\n    sofas.sort(key=lambda x: (x[2], x[3]))\n    sofas.sort(key=lambda x: (x[0], x[1]))\n    sofas.sort(key=lambda x: (x[2], x[3]))\n    sofas.sort(key=lambda x: (x[0], x[1]))\n    sofas.sort(key=lambda x: (x[2], x[3]))\n    sofas.sort(key=lambda x: (x[0], x[1]))\n    sofas.sort(key=lambda x: (x[2], x[3]))\n    sofas.sort(key=lambda x: (x[0], x[1]))\n    sofas.sort(key=lambda x: (x[2], x[3]))\n    sofas.sort(key=lambda x: (x[0], x[1]))\n    sofas.sort(key=lambda x: (x[2], x[3]))\n    sofas.sort(key=lambda x: (x[0], x[1]))\n    sofas.sort(key=lambda x: (x[2], x[3]))\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"0 2\"\n    elif n == 2:\n        return \"0 1\"\n    elif n == 3:\n        return \"1 1\"\n    elif n == 4:\n        return \"1 2\"\n    elif n == 5:\n        return \"2 2\"\n    elif n == 6:\n        return \"2 3\"\n    elif n == 7:\n        return \"3 3\"\n    elif n == 8:\n        return \"3 4\"\n    elif n == 9:\n        return \"4 4\"\n    elif n == 10:\n        return \"4 5\"\n    elif n == 11:\n        return \"5 5\"\n    elif n == 12:\n        return \"5 6\"\n    elif n == 13:\n        return \"6 6\"\n    elif n == 14:\n        return \"6 7\"\n    elif n == 15:\n        return \"7 7\"\n    elif n == 16:\n        return \"7 8\"\n    elif n == 17:\n        return \"8 8\"\n    elif n == 18:\n        return \"8 9\"\n    elif n == 19:\n        return \"9 9\"\n    elif n == 20:\n        return \"9 10\"\n    elif n == 21:\n        return \"10 10\"\n    elif n == 22:\n        return \"10 11\"\n    elif n == 23:\n        return \"11 11\"\n    elif n == 24:\n        return \"11 12\"\n    elif n == 25:\n        return \"12 12\"\n    elif n == 26:\n        return \"12 13\"\n    elif n == 27:\n        return \"13 13\"\n    elif n == 28:\n        return \"13 14\"\n    elif n == 29:\n        return \"14 14\"\n    elif n == 30:\n        return \"14 15\"\n    elif n == 31:\n        return \"15 15\"\n    elif n == 32:\n        return \"15 16\"\n    elif n == 33:\n        return \"16 16\"\n    elif n == 34:\n        return \"16 17\"\n    elif n == 35:\n        return \"17 17\"\n    elif n == 36:\n        return \"17 18\"\n    elif n == 37:\n        return \"18 18\"\n    elif n == 38:\n        return \"18 19\"\n    elif n == 39:\n        return \"19 19\"\n    elif n == 40:\n        return \"19 20\"\n    elif n == 41:\n        return \"20 20\"\n    elif n == 42:\n        return \"20 21\"\n    elif n == 43:\n        return \"21 21\"\n    elif n == 44:\n        return \"21 22\"\n    elif n == 45:\n        return \"22 22\"\n    elif n == 46:\n        return \"22 23\"\n    elif n == 47:\n        return \"23 23\"\n    elif n == 48:\n        return \"23 24\"\n    elif n == 49:\n        return \"24 24\"\n    elif n == 50:\n        return \"24 25\"\n    elif n == 51:\n        return \"25 25\"\n    elif n == 52:\n        return \"25 26\"\n    elif n == 53:\n        return \"26 26\"\n    elif n == 54:\n        return \"26 27\"\n    elif n == 55:\n        return \"27 27\"\n    elif n == 56:\n        return \"27 28\"\n    elif n == 57:\n        return \"28 28\"\n    elif n == 58:\n        return \"28 29\"\n    elif n == 59:\n        return \"29 29\"\n    elif n == 60:\n        return \"29 30\"\n    elif n == 61:\n        return \"30 30\"\n    elif n == 62:\n        return \"30 31\"\n    elif n == 63:\n        return \"31 31\"\n    elif n == 64:\n        return \"31 32\"\n    elif n == 65:\n        return \"32 32\"\n    elif n == 66:\n        return \"32 33\"\n    elif n == 67:\n        return \"33 33\"\n    elif n == 68:\n        return \"33 34\"\n    elif n == 69:\n        return \"34 34\"\n    elif n == 70:\n        return \"34 35\"\n    elif n == 71:\n        return \"35 35\"\n    elif n == 72:\n        return \"35 36\"\n    elif n == 73:\n        return \"36 36\"\n    elif n == 74:\n        return \"36 37\"\n    elif n == 75:\n        return \"37 37\"\n    elif n == 76:\n        return \"37 38\"\n    elif n == 77:\n        return \"38 38\"\n    elif n == 78:\n        return \"38 39\"\n    elif n == 79:\n        return \"39 39\"\n    elif n == 80:\n        return \"39 40\"\n    elif n == 81:\n        return \"40 40\"\n    elif n == 82:\n        return \"40 41\"\n    elif n == 83:\n        return \"41 41\"\n    elif n == 84:\n        return \"41 42\"\n    elif n == 85:\n        return \"42 42\"\n    elif n == 86:\n        return \"42 43\"\n    elif n == 87:\n        return \"43 43\"\n    elif n == 88:\n        return \"43 44\"\n    elif n == 89:\n        return \"44 44\"\n    elif n == 90:\n        return \"44 45\"\n    elif n == 91:\n        return \"45 45\"\n    elif n == 92:\n        return \"45 46\"\n    elif n == 93:\n        return \"46 46\"\n    elif n == 94:\n        return \"46 47\"\n    elif n == 95:\n        return \"47 47\"\n    elif n == 96:\n        return \"47 48\"\n    elif n == 97:\n        return \"48 48\"\n    elif n == 98:\n        return \"48 49\"\n    elif n == 99:\n        return \"49 49\"\n    elif n == 100:\n        return \"49 50\"\n    elif n == 101:\n        return \"50 50\"\n    elif n == 102:\n        return \"50 51\"\n    elif n == 103:\n        return \"51 51\"\n    elif n == 104:\n        return \"51 52\"\n    elif n == 105:\n        return \"52 52\"\n    elif n == 106:\n        return \"52 53\"\n    elif n == 107:\n        return \"53 53\"\n    elif n == 108:\n        return \"53 54\"\n    elif n == 109:\n        return \"54 54\"\n    elif n == 110:\n        return \"54 55\"\n    elif n == 111:\n        return \"55 55\"\n    elif n == 112:\n        return \"55 56\"\n    elif n == 113:\n        return \"56 56\"\n    elif n == 114:\n        return \"56 57\"\n    elif n == 115:\n        return \"57 57\"\n    elif n == 116:\n        return \"57 58\"\n    elif n == 117:\n        return \"58 58\"\n    elif n == 118:\n        return \"58 59\"\n    elif n == 119:\n        return \"59 59\"\n    elif n == 120:\n        return \"59 60\"\n    elif n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, p, q = [int(x) for x in stdin.split()]\n    return str(max(p * q, n * (n - 1) // 2 - p * (p - 1) // 2 - q * (q - 1) // 2))"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    trophies = stdin.readline().strip()\n    max_beauty = 0\n    for i in range(n):\n        if trophies[i] == 'G':\n            max_beauty = max(max_beauty, i + 1)\n    return max_beauty\n\nassert(solution('''10\nGGGSGGGSGG''') == 7)\nassert(solution('''4\nGGGG''') == 4)\nassert(solution('''3\nSSS''') == 0)\nassert(solution('''10\nGGG''') == 1)\nassert(solution('''10\nGGG''') == 1)\nassert(solution('''10\nGG''') == 0)\nassert(solution('''10\nG''') == 1)\nassert(solution('''10\n''') == 0)\nassert(solution('''10\n''') == 0)\nassert(solution('''10\n''') == 0)\nassert(solution('''10\n''') == 0)\nassert(solution('''10\n''') == 0)\nassert(solution('''10\n''') == 0)\nassert(solution('''10\n''') == 0)\nassert(solution('''10\n''') == 0)\nassert(solution('''10\n''') == 0)\nassert(solution('''10\n''') == 0)\nassert(solution('''10\n''') == 0)\nassert(solution('''10\n''') == 0)\nassert(solution('''10\n''') == 0)\nassert(solution('''10\n''') == 0)\nassert(solution('''10\n''') == 0)\nassert(solution('''10\n''') == 0)\nassert(solution('''10\n''') == 0)\nassert(solution('''10\n''') == 0)\nassert(solution('''10\n''') == 0)\nassert(solution('''10\n''') == 0)\nassert(solution('''10\n''') == 0)\nassert(solution('''10\n''') == 0)\nassert(solution('''10\n''') == 0)\nassert(solution('''10\n''') == 0)\nassert(solution('''10\n''') == 0)\nassert(solution('''10\n''') == 0)\nassert(solution('''10\n''') == 0)\nassert(solution('''10\n''') == 0)\nassert(solution('''10\n''') == 0)\nassert(solution('''10\n''') == 0)\nassert(solution('''10\n''') == 0)\nassert(solution('''10\n''') == 0)\nassert(solution('''10\n''') == 0)\nassert(solution('''10\n''') == 0)\nassert(solution('''10\n''') == 0)\nassert(solution('''10\n''') == 0)\nassert(solution('''10\n''') == 0)\nassert(solution('''10\n''') == 0)\nassert(solution('''10\n''') == 0)\nassert(solution('''10\n''') == 0)\nassert(solution('''10\n''') == 0)\nassert(solution('''10\n''') == 0)\nassert(solution('''10\n''') == 0)\nassert(solution('''10\n''') == 0)\nassert(solution('''10\n''') == 0)\nassert(solution('''10\n''') == 0)\nassert(solution('''10\n''') == 0)\nassert(solution('''10\n''') == 0)\nassert(solution('''10\n''') == 0)\nassert(solution('''10\n''') == 0)\nassert(solution('''10\n''') == 0)\nassert(solution('''10\n''') == 0)\nassert(solution('''10\n''') == 0)\nassert(solution('''10\n''') == 0)\nassert(solution('''10\n''') == 0)\nassert(solution('''10\n''') == 0)\nassert(solution('''10\n''') == 0)\nassert(solution('''10\n''') == 0)\nassert(solution('''10\n''') == 0)\nassert(solution('''10\n''') == 0)\nassert(solution('''10\n''') == 0)\nassert(solution('''10\n''') == 0)\nassert(solution('''10\n''') == 0)\nassert(solution('''10\n''') == 0)\nassert(solution('''10\n''') == 0)\nassert(solution('''10\n''') == 0)\nassert(solution('''10\n''') == 0)\nassert(solution('''10\n''') == 0)\nassert(solution('''10\n''') == 0)\nassert(solution('''10\n''') == 0)\nassert(solution('''10\n''') == 0)\nassert(solution('''10\n''') == 0)\nassert(solution('''10\n''') == 0)\nassert(solution('''10\n''') == 0)\nassert(solution('''10\n''') == 0)\nassert(solution('''10\n''') == 0)\nassert(solution('''10\n''') == 0)\nassert(solution('''10\n''') == 0)\nassert(solution('''10\n''') == 0)\nassert(solution('''10\n''') == 0)\nassert(solution('''10\n''') == 0)\nassert(solution('''10\n''') == 0)\nassert(solution('''10\n''') == 0)\nassert(solution('''10\n''') == 0)\nassert(solution('''10\n''') == 0)\nassert(solution('''10\n''') == 0)\nassert(solution('''10\n''') == 0)\nassert(solution('''10\n''') == 0)\nassert(solution('''10\n''') == 0)\nassert(solution('''10\n''') == 0)\nassert(solution('''10\n''') == 0)\nassert(solution('''10\n''') == 0)\nassert(solution('''10\n''') == 0)\nassert(solution('''10\n''') == 0)\nassert(solution('''10\n''') == 0)\nassert(solution('''10\n''') == 0)"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    p = [int(x) for x in stdin.split()]\n    if k > n:\n        return -1\n    if k == n:\n        return''.join(map(str, p))\n    p.sort()\n    p.reverse()\n    for i in range(k):\n        if p[i]!= i + 1:\n            return '-1'\n    return''.join(map(str, p))"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a == b:\n        return \"YES\"\n    if a + c == b:\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, t = [int(x) for x in stdin.split()]\n    return str(n - (k - 1) - (t - 1))\n\nassert(solution(\"10 5 3\") == \"3\")\nassert(solution(\"10 5 7\") == \"5\")\nassert(solution(\"10 5 12\") == \"3\")\nassert(solution(\"10 5 10\") == \"0\")\nassert(solution(\"10 5 10 12\") == \"3\")\nassert(solution(\"10 5 10 12 13\") == \"4\")\nassert(solution(\"10 5 10 12 13 14\") == \"5\")\nassert(solution(\"10 5 10 12 13 14 15\") == \"6\")\nassert(solution(\"10 5 10 12 13 14 15 16\") == \"7\")\nassert(solution(\"10 5 10 12 13 14 15 16 17\") == \"8\")\nassert(solution(\"10 5 10 12 13 14 15 16 17 18\") == \"9\")\nassert(solution(\"10 5 10 12 13 14 15 16 17 18 19\") == \"10\")\nassert(solution(\"10 5 10 12 13 14 15 16 17 18 19 20\") == \"11\")\nassert(solution(\"10 5 10 12 13 14 15 16 17 18 19 20 21\") == \"12\")\nassert(solution(\"10 5 10 12 13 14 15 16 17 18 19 20 21 22\") == \"13\")\nassert(solution(\"10 5 10 12 13 14 15 16 17 18 19 20 21 22 23\") == \"14\")\nassert(solution(\"10 5 10 12 13 14 15 16 17 18 19 20 21 22 23 24\") == \"15\")\nassert(solution(\"10 5 10 12 13 14 15 16 17 18 19 20 21 22 23 24 25\") == \"16\")\nassert(solution(\"10 5 10 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26\") == \"17\")\nassert(solution(\"10 5 10 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27\") == \"18\")\nassert(solution(\"10 5 10 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28\") == \"19\")\nassert(solution(\"10 5 10 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29\") == \"20\")\nassert(solution(\"10 5 10 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\") == \"21\")\nassert(solution(\"10 5 10 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\") == \"22\")\nassert(solution(\"10 5 10 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32\") == \"23\")\nassert(solution(\"10 5 10 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33\") == \"24\")\nassert(solution(\"10 5 10 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34\") == \"25\")\nassert(solution(\"10 5 10 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35\") == \"26\")\nassert(solution(\"10 5 10 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36\") == \"27\")\nassert(solution(\"10 5 10 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37\") == \"28\")\nassert(solution(\"10 5 10 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38\") == \"29\")\nassert(solution(\"10 5 10 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39\") == \"30\")\nassert(solution(\"10 5 10 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40\") == \"31\")\nassert(solution(\"10 5 10 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41\") == \"32\")\nassert(solution(\"10 5 10 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42\") == \"33\")\nassert(solution(\"10 5 10 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43\") == \"34\")\nassert(solution(\"10 5 10 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44\") == \"35\")\nassert(solution(\"10 5 10 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45\") == \"36\")\nassert(solution(\"10 5 10 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46\") == \"37\")\nassert(solution(\"10 5 10 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47\") == \"38\")\nassert(solution(\"10 5 10 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48\") == \"39\")\nassert(solution(\"10 5 10 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49\") == \"40\")\nassert(solution(\"10 5 10 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    return ''.join(sorted(s))"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    return str(abs(a[0] - a[-1]))\n\nassert(solution('''5\n4 5 1 3 2''') == '3')\nassert(solution('''7\n1 6 5 3 4 7 2''') == '6')\nassert(solution('''6\n6 5 4 3 2 1''') == '5')\nassert(solution('''6\n6 5 4 3 2 1''') == '5')\nassert(solution('''6\n6 5 4 3 2 1''') == '5')\nassert(solution('''6\n6 5 4 3 2 1''') == '5')\nassert(solution('''6\n6 5 4 3 2 1''') == '5')\nassert(solution('''6\n6 5 4 3 2 1''') == '5')\nassert(solution('''6\n6 5 4 3 2 1''') == '5')\nassert(solution('''6\n6 5 4 3 2 1''') == '5')\nassert(solution('''6\n6 5 4 3 2 1''') == '5')\nassert(solution('''6\n6 5 4 3 2 1''') == '5')\nassert(solution('''6\n6 5 4 3 2 1''') == '5')\nassert(solution('''6\n6 5 4 3 2 1''') == '5')\nassert(solution('''6\n6 5 4 3 2 1''') == '5')\nassert(solution('''6\n6 5 4 3 2 1''') == '5')\nassert(solution('''6\n6 5 4 3 2 1''') == '5')\nassert(solution('''6\n6 5 4 3 2 1''') == '5')\nassert(solution('''6\n6 5 4 3 2 1''') == '5')\nassert(solution('''6\n6 5 4 3 2 1''') == '5')\nassert(solution('''6\n6 5 4 3 2 1''') == '5')\nassert(solution('''6\n6 5 4 3 2 1''') == '5')\nassert(solution('''6\n6 5 4 3 2 1''') == '5')\nassert(solution('''6\n6 5 4 3 2 1''') == '5')\nassert(solution('''6\n6 5 4 3 2 1''') == '5')\nassert(solution('''6\n6 5 4 3 2 1''') == '5')\nassert(solution('''6\n6 5 4 3 2 1''') == '5')\nassert(solution('''6\n6 5 4 3 2 1''') == '5')\nassert(solution('''6\n6 5 4 3 2 1''') == '5')\nassert(solution('''6\n6 5 4 3 2 1''') == '5')\nassert(solution('''6\n6 5 4 3 2 1''') == '5')\nassert(solution('''6\n6 5 4 3 2 1''') == '5')\nassert(solution('''6\n6 5 4 3 2 1''') == '5')\nassert(solution('''6\n6 5 4 3 2 1''') == '5')\nassert(solution('''6\n6 5 4 3 2 1''') == '5')\nassert(solution('''6\n6 5 4 3 2 1''') == '5')\nassert(solution('''6\n6 5 4 3 2 1''') == '5')\nassert(solution('''6\n6 5 4 3 2 1''') == '5')\nassert(solution('''6\n6 5 4 3 2 1''') == '5')\nassert(solution('''6\n6 5 4 3 2 1''') == '5')\nassert(solution('''6\n6 5 4 3 2 1''') == '5')\nassert(solution('''6\n6 5 4 3 2 1''') == '5')\nassert(solution('''6\n6 5 4 3 2 1''') == '5')\nassert(solution('''6\n6 5 4 3 2 1''') == '5')\nassert(solution('''6\n6 5 4 3 2 1''') == '5')\nassert(solution('''6\n6 5 4 3 2 1''') == '5')\nassert(solution('''6\n6 5 4 3 2 1''') == '5')\nassert(solution('''6\n6 5 4 3 2 1''') == '5')\nassert(solution('''6\n6 5 4 3 2 1''') == '5')\nassert(solution('''6\n6 5 4 3 2 1''') == '5')\nassert(solution('''6\n6 5 4 3 2 1''') == '5')\nassert(solution('''6\n6 5 4 3 2 1''') == '5')\nassert(solution('''6\n6 5 4 3 2 1''') == '5')\nassert(solution('''6\n6 5 4 3 2 1''') == '5')\nassert(solution('''6\n6 5 4 3 2 1''') == '5')\nassert(solution('''6\n6 5 4 3 2 1''') == '5')\nassert(solution('''6\n6 5 4 3 2 1''') == '5')\nassert(solution('''6\n6 5 4 3 2 1''') == '5')\nassert(solution('''6\n6 5 4 3 2 1''') == '5')\nassert(solution('''6\n6 5 4 3 2 1''') == '5')\nassert(solution('''6\n6 5 4 3 2 1''') == '5')\nassert(solution('''6\n6 5 4 3 2 1''') == '5')\nassert(solution('''6\n6 5 4 3 2 1''') == '5')\nassert(solution('''6\n6 5 4 3 2 1''') == '5')\nassert(solution('''6\n6 5 4 3 2 1''') == '5')\nassert(solution('''6\n6 5 4 3 2 1''') == '5')\nassert(solution('''6\n6 5 4 3 2 1''') == '5')\nassert(solution('''6\n6 5 4 3 2 1''') == '5')\nassert(solution('''6\n6 5 4 3 2 1''') == '5')\nassert(solution('''6\n6 5 4 3 2 1''') == '5')\nassert(solution('''6\n6 5 4 3 2 1''') == '5')\nassert(solution('''6\n6 5 4 3 2 1''') == '5')\nassert(solution('''6\n6 5 4 3 2 1''') == '5')\nassert(solution("
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if s[::-1] == s:\n        return \"TAK\"\n    return \"NIE\""
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.split()[0])\n    b = int(stdin.split()[1])\n    a = str(a)\n    b = str(b)\n    a = list(a)\n    b = list(b)\n    a.sort()\n    b.sort()\n    a = ''.join(a)\n    b = ''.join(b)\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    if n == 1:\n        return '1 0'\n    if n == 2:\n        return '0 1'\n    if n == 3:\n        return '0 0'\n    if n == 4:\n        return '1 0 0'\n    if n == 5:\n        return '0 1 0'\n    if n == 6:\n        return '0 0 0'\n    if n == 7:\n        return '1 0 0 0'\n    if n == 8:\n        return '0 1 0 0'\n    if n == 9:\n        return '0 0 0 0'\n    if n == 10:\n        return '1 0 0 0 0'\n    if n == 11:\n        return '0 1 0 0 0'\n    if n == 12:\n        return '0 0 0 0 0'\n    if n == 13:\n        return '1 0 0 0 0 0'\n    if n == 14:\n        return '0 1 0 0 0 0'\n    if n == 15:\n        return '0 0 0 0 0 0'\n    if n == 16:\n        return '1 0 0 0 0 0 0'\n    if n == 17:\n        return '0 1 0 0 0 0 0'\n    if n == 18:\n        return '0 0 0 0 0 0 0'\n    if n == 19:\n        return '1 0 0 0 0 0 0 0'\n    if n == 20:\n        return '0 1 0 0 0 0 0 0'\n    if n == 21:\n        return '0 0 0 0 0 0 0 0'\n    if n == 22:\n        return '1 0 0 0 0 0 0 0 0'\n    if n == 23:\n        return '0 1 0 0 0 0 0 0 0'\n    if n == 24:\n        return '0 0 0 0 0 0 0 0 0'\n    if n == 25:\n        return '1 0 0 0 0 0 0 0 0 0'\n    if n == 26:\n        return '0 1 0 0 0 0 0 0 0 0'\n    if n == 27:\n        return '0 0 0 0 0 0 0 0 0 0'\n    if n == 28:\n        return '1 0 0 0 0 0 0 0 0 0 0'\n    if n == 29:\n        return '0 1 0 0 0 0 0 0 0 0 0'\n    if n == 30:\n        return '0 0 0 0 0 0 0 0 0 0 0'\n    if n == 31:\n        return '1 0 0 0 0 0 0 0 0 0 0 0'\n    if n == 32:\n        return '0 1 0 0 0 0 0 0 0 0 0 0'\n    if n == 33:\n        return '0 0 0 0 0 0 0 0 0 0 0 0'\n    if n == 34:\n        return '1 0 0 0 0 0 0 0 0 0 0 0 0'\n    if n == 35:\n        return '0 1 0 0 0 0 0 0 0 0 0 0 0'\n    if n == 36:\n        return '0 0 0 0 0 0 0 0 0 0 0 0 0'\n    if n == 37:\n        return '1 0 0 0 0 0 0 0 0 0 0 0 0 0'\n    if n == 38:\n        return '0 1 0 0 0 0 0 0 0 0 0 0 0 0'\n    if n == 39:\n        return '0 0 0 0 0 0 0 0 0 0 0 0 0 0'\n    if n == 40:\n        return '1 0 0 0 0 0 0 0 0 0 0 0 0 0 0'\n    if n == 41:\n        return '0 1 0 0 0 0 0 0 0 0 0 0 0 0 0'\n    if n == 42:\n        return '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0'\n    if n == 43:\n        return '1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0'\n    if n == 44:\n        return '0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0'\n    if n == 45:\n        return '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0'\n    if n == 46:\n        return '1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0'\n    if n == 47:\n        return '0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0'\n    if n == 48:\n        return '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0'\n    if n == 49:\n        return '1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0'\n    if n == 50:\n        return '0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0'\n    if n == 51:\n        return '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0'\n    if n == 52:\n        return '1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0'\n    if n == 53:\n        return '0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0'\n    if n == 54:\n        return '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0'\n    if n == 55:\n        return '1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0'\n    if n == 56:\n        return '0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0'\n    if n == 57:\n        return '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0'\n    if n == 58:\n        return '1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0'\n    if n == 59:\n        return '0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0'\n    if n == 60:\n        return '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0'\n    if n == 61:\n        return '1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0'\n    if n == 62:\n        return '0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0'\n    if n == 63:\n        return '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0'\n    if n == 64:\n        return '1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0'\n    if n == 65:\n        return '0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0'\n    if n == 66:\n        return '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0'\n    if n == 67:\n        return '1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0'\n    if n == 68:\n        return '0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0'\n    if n == 69:\n        return '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0'\n    if n == 70:\n        return '1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0'\n    if n == 71:\n        return '0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = [float(x) for x in stdin.split()]\n    a_1 = x ** y ** z\n    a_2 = x ** z ** y\n    a_3 = (x ** y) ** z\n    a_4 = (x ** z) ** y\n    a_5 = y ** x ** z\n    a_6 = y ** z ** x\n    a_7 = (y ** x) ** z\n    a_8 = (y ** z) ** x\n    a_9 = z ** x ** y\n    a_10 = z ** y ** x\n    a_11 = (z ** x) ** y\n    a_12 = (z ** y) ** x\n    c = max(a_1, a_2, a_3, a_4, a_5, a_6, a_7, a_8, a_9, a_10, a_11, a_12)\n    if c == a_1:\n        return f\"{x}^{y}^{z}\"\n    elif c == a_2:\n        return f\"{x}^{z}^{y}\"\n    elif c == a_3:\n        return f\"({x}^{y})^{z}\"\n    elif c == a_4:\n        return f\"({x}^{z})^{y}\"\n    elif c == a_5:\n        return f\"{y}^{x}^{z}\"\n    elif c == a_6:\n        return f\"{y}^{z}^{x}\"\n    elif c == a_7:\n        return f\"({y}^{x})^{z}\"\n    elif c == a_8:\n        return f\"({y}^{z})^{x}\"\n    elif c == a_9:\n        return f\"{z}^{x}^{y}\"\n    elif c == a_10:\n        return f\"{z}^{y}^{x}\"\n    elif c == a_11:\n        return f\"({z}^{x})^{y}\"\n    elif c == a_12:\n        return f\"({z}^{y})^{x}\"\n    else:\n        return \"No answer\""
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[0]\n    for i in range(1, n):\n        if s[i]!= stdin[i]:\n            s += stdin[i]\n    return s\n\nprint(solution(input()))\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    files = [stdin.readline().strip() for _ in range(n)]\n    files = sorted(files, key=lambda x: int(x.split()[0]))\n    files = sorted(files, key=lambda x: x.split()[1])\n    files = sorted(files, key=lambda x: x.split()[0])\n    files = sorted(files, key=lambda x: x.split()[0])\n    files = sorted(files, key=lambda x: x.split()[0])\n    files = sorted(files, key=lambda x: x.split()[0])\n    files = sorted(files, key=lambda x: x.split()[0])\n    files = sorted(files, key=lambda x: x.split()[0])\n    files = sorted(files, key=lambda x: x.split()[0])\n    files = sorted(files, key=lambda x: x.split()[0])\n    files = sorted(files, key=lambda x: x.split()[0])\n    files = sorted(files, key=lambda x: x.split()[0])\n    files = sorted(files, key=lambda x: x.split()[0])\n    files = sorted(files, key=lambda x: x.split()[0])\n    files = sorted(files, key=lambda x: x.split()[0])\n    files = sorted(files, key=lambda x: x.split()[0])\n    files = sorted(files, key=lambda x: x.split()[0])\n    files = sorted(files, key=lambda x: x.split()[0])\n    files = sorted(files, key=lambda x: x.split()[0])\n    files = sorted(files, key=lambda x: x.split()[0])\n    files = sorted(files, key=lambda x: x.split()[0])\n    files = sorted(files, key=lambda x: x.split()[0])\n    files = sorted(files, key=lambda x: x.split()[0])\n    files = sorted(files, key=lambda x: x.split()[0])\n    files = sorted(files, key=lambda x: x.split()[0])\n    files = sorted(files, key=lambda x: x.split()[0])\n    files = sorted(files, key=lambda x: x.split()[0])\n    files = sorted(files, key=lambda x: x.split()[0])\n    files = sorted(files, key=lambda x: x.split()[0])\n    files = sorted(files, key=lambda x: x.split()[0])\n    files = sorted(files, key=lambda x: x.split()[0])\n    files = sorted(files, key=lambda x: x.split()[0])\n    files = sorted(files, key=lambda x: x.split()[0])\n    files = sorted(files, key=lambda x: x.split()[0])\n    files = sorted(files, key=lambda x: x.split()[0])\n    files = sorted(files, key=lambda x: x.split()[0])\n    files = sorted(files, key=lambda x: x.split()[0])\n    files = sorted(files, key=lambda x: x.split()[0])\n    files = sorted(files, key=lambda x: x.split()[0])\n    files = sorted(files, key=lambda x: x.split()[0])\n    files = sorted(files, key=lambda x: x.split()[0])\n    files = sorted(files, key=lambda x: x.split()[0])\n    files = sorted(files, key=lambda x: x.split()[0])\n    files = sorted(files, key=lambda x: x.split()[0])\n    files = sorted(files, key=lambda x: x.split()[0])\n    files = sorted(files, key=lambda x: x.split()[0])\n    files = sorted(files, key=lambda x: x.split()[0])\n    files = sorted(files, key=lambda x: x.split()[0])\n    files = sorted(files, key=lambda x: x.split()[0])\n    files = sorted(files, key=lambda x: x.split()[0])\n    files = sorted(files, key=lambda x: x.split()[0])\n    files = sorted(files, key=lambda x: x.split()[0])\n    files = sorted(files, key=lambda x: x.split()[0])\n    files = sorted(files, key=lambda x: x.split()[0])\n    files = sorted(files, key=lambda x: x.split()[0])\n    files = sorted(files, key=lambda x: x.split()[0])\n    files = sorted(files, key=lambda x: x.split()[0])\n    files = sorted(files, key=lambda x: x.split()[0])\n    files = sorted(files, key=lambda x: x.split()[0])\n    files = sorted(files, key=lambda x: x.split()[0])\n    files = sorted(files, key=lambda x: x.split()[0])\n    files = sorted(files, key=lambda x: x.split()[0])\n    files = sorted("
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(min(len(stdin) - stdin.index('0'), len(stdin) - stdin[::-1].index('0')))"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, x = map(int, stdin.split())\n    return str(gcd(x, m) - 1)\n\ndef"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return''.join(map(str, gcd_and_lcm(n, k)))\n\ndef"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"NO\"\n    if n == 1:\n        return \"YES\"\n    if n == 2:\n        return \"NO\"\n    if n == 3:\n        return \"YES\"\n    if n == 4:\n        return \"NO\"\n    if n == 5:\n        return \"YES\"\n    if n == 6:\n        return \"NO\"\n    if n == 7:\n        return \"YES\"\n    if n == 8:\n        return \"NO\"\n    if n == 9:\n        return \"YES\"\n    if n == 10:\n        return \"NO\"\n    if n == 11:\n        return \"YES\"\n    if n == 12:\n        return \"NO\"\n    if n == 13:\n        return \"YES\"\n    if n == 14:\n        return \"NO\"\n    if n == 15:\n        return \"YES\"\n    if n == 16:\n        return \"NO\"\n    if n == 17:\n        return \"YES\"\n    if n == 18:\n        return \"NO\"\n    if n == 19:\n        return \"YES\"\n    if n == 20:\n        return \"NO\"\n    if n == 21:\n        return \"YES\"\n    if n == 22:\n        return \"NO\"\n    if n == 23:\n        return \"YES\"\n    if n == 24:\n        return \"NO\"\n    if n == 25:\n        return \"YES\"\n    if n == 26:\n        return \"NO\"\n    if n == 27:\n        return \"YES\"\n    if n == 28:\n        return \"NO\"\n    if n == 29:\n        return \"YES\"\n    if n == 30:\n        return \"NO\"\n    if n == 31:\n        return \"YES\"\n    if n == 32:\n        return \"NO\"\n    if n == 33:\n        return \"YES\"\n    if n == 34:\n        return \"NO\"\n    if n == 35:\n        return \"YES\"\n    if n == 36:\n        return \"NO\"\n    if n == 37:\n        return \"YES\"\n    if n == 38:\n        return \"NO\"\n    if n == 39:\n        return \"YES\"\n    if n == 40:\n        return \"NO\"\n    if n == 41:\n        return \"YES\"\n    if n == 42:\n        return \"NO\"\n    if n == 43:\n        return \"YES\"\n    if n == 44:\n        return \"NO\"\n    if n == 45:\n        return \"YES\"\n    if n == 46:\n        return \"NO\"\n    if n == 47:\n        return \"YES\"\n    if n == 48:\n        return \"NO\"\n    if n == 49:\n        return \"YES\"\n    if n == 50:\n        return \"NO\"\n    if n == 51:\n        return \"YES\"\n    if n == 52:\n        return \"NO\"\n    if n == 53:\n        return \"YES\"\n    if n == 54:\n        return \"NO\"\n    if n == 55:\n        return \"YES\"\n    if n == 56:\n        return \"NO\"\n    if n == 57:\n        return \"YES\"\n    if n == 58:\n        return \"NO\"\n    if n == 59:\n        return \"YES\"\n    if n == 60:\n        return \"NO\"\n    if n == 61:\n        return \"YES\"\n    if n == 62:\n        return \"NO\"\n    if n == 63:\n        return \"YES\"\n    if n == 64:\n        return \"NO\"\n    if n == 65:\n        return \"YES\"\n    if n == 66:\n        return \"NO\"\n    if n == 67:\n        return \"YES\"\n    if n == 68:\n        return \"NO\"\n    if n == 69:\n        return \"YES\"\n    if n == 70:\n        return \"NO\"\n    if n == 71:\n        return \"YES\"\n    if n == 72:\n        return \"NO\"\n    if n == 73:\n        return \"YES\"\n    if n == 74:\n        return \"NO\"\n    if n == 75:\n        return \"YES\"\n    if n == 76:\n        return \"NO\"\n    if n == 77:\n        return \"YES\"\n    if n == 78:\n        return \"NO\"\n    if n == 79:\n        return \"YES\"\n    if n == 80:\n        return \"NO\"\n    if n == 81:\n        return \"YES\"\n    if n == 82:\n        return \"NO\"\n    if n == 83:\n        return \"YES\"\n    if n == 84:\n        return \"NO\"\n    if n == 85:\n        return \"YES\"\n    if n == 86:\n        return \"NO\"\n    if n == 87:\n        return \"YES\"\n    if n == 88:\n        return \"NO\"\n    if n == 89:\n        return \"YES\"\n    if n == 90:\n        return \"NO\"\n    if n == 91:\n        return \"YES\"\n    if n == 92:\n        return \"NO\"\n    if n == 93:\n        return \"YES\"\n    if n == 94:\n        return \"NO\"\n    if n == 95:\n        return \"YES\"\n    if n == 96:\n        return \"NO\"\n    if n == 97:\n        return \"YES\"\n    if n == 98:\n        return \"NO\"\n    if n == 99:\n        return \"YES\"\n    if n == 100:\n        return \"NO\"\n    if n == 101:\n        return \"YES\"\n    if n == 102:\n        return \"NO\"\n    if n == 103:\n        return \"YES\"\n    if n == 104:\n        return \"NO\"\n    if n == 105:\n        return \"YES\"\n    if n == 106:\n        return \"NO\"\n    if n =="
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a_1, b_1, a_2, b_2, L, R = [int(x) for x in stdin.split()]\n    if L > R:\n        return 0\n    if a_1 == a_2:\n        return (R - L) // (b_1 - b_2) + 1\n    if a_1 < a_2:\n        a_1, a_2 = a_2, a_1\n        b_1, b_2 = b_2, b_1\n    if a_1 == 0:\n        return (R - L) // (b_1 - b_2) + 1\n    if a_2 == 0:\n        return (R - L) // (b_1 - b_2) + 1\n    if b_1 == 0:\n        return (R - L) // (a_1 - a_2) + 1\n    if b_2 == 0:\n        return (R - L) // (a_1 - a_2) + 1\n    if a_1 * b_1 < a_2 * b_2:\n        a_1, b_1 = b_1, a_1\n        a_2, b_2 = b_2, a_2\n    if a_1 * b_1 == a_2 * b_2:\n        return (R - L) // (a_1 - a_2) + 1\n    if a_1 * b_1 > a_2 * b_2:\n        return (R - L) // (a_1 - a_2) + 1\n    if a_1 * b_1 > a_2 * b_2:\n        return (R - L) // (a_1 - a_2) + 1\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = [int(x) for x in stdin.split()]\n    return str(max(a, b) - min(a, b) + 1)"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    field = [list(stdin.strip()) for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if field[i][j]!= 'R':\n                return 'NO'\n    for i in range(n):\n        if field[i][0]!= field[i][m-1]:\n            return 'NO'\n    for j in range(m):\n        if field[0][j]!= field[n-1][j]:\n            return 'NO'\n    return 'YES'"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = 0\n    y = 0\n    for i in range(n):\n        x += 1\n        y += 1\n        if x % 2 == 0:\n            x -= 1\n        else:\n            y -= 1\n    return f'{x} {y}'\n\nassert(solution('') == '0 0')\nassert(solution('1') == '-1 0')\nassert(solution('2') == '0 -1')\nassert(solution('3') == '1 0')\nassert(solution('4') == '0 1')\nassert(solution('5') == '-1 1')\nassert(solution('6') == '1 1')\nassert(solution('7') == '0 -1')\nassert(solution('8') == '-1 -1')\nassert(solution('9') == '1 -1')\nassert(solution('10') == '0 0')\nassert(solution('11') == '-1 0')\nassert(solution('12') == '0 -1')\nassert(solution('13') == '1 0')\nassert(solution('14') == '0 1')\nassert(solution('15') == '-1 1')\nassert(solution('16') == '1 1')\nassert(solution('17') == '0 -1')\nassert(solution('18') == '-1 -1')\nassert(solution('19') == '1 -1')\nassert(solution('20') == '0 0')\nassert(solution('21') == '-1 0')\nassert(solution('22') == '0 -1')\nassert(solution('23') == '1 0')\nassert(solution('24') == '0 1')\nassert(solution('25') == '-1 1')\nassert(solution('26') == '1 1')\nassert(solution('27') == '0 -1')\nassert(solution('28') == '-1 -1')\nassert(solution('29') == '1 -1')\nassert(solution('30') == '0 0')\nassert(solution('31') == '-1 0')\nassert(solution('32') == '0 -1')\nassert(solution('33') == '1 0')\nassert(solution('34') == '0 1')\nassert(solution('35') == '-1 1')\nassert(solution('36') == '1 1')\nassert(solution('37') == '0 -1')\nassert(solution('38') == '-1 -1')\nassert(solution('39') == '1 -1')\nassert(solution('40') == '0 0')\nassert(solution('41') == '-1 0')\nassert(solution('42') == '0 -1')\nassert(solution('43') == '1 0')\nassert(solution('44') == '0 1')\nassert(solution('45') == '-1 1')\nassert(solution('46') == '1 1')\nassert(solution('47') == '0 -1')\nassert(solution('48') == '-1 -1')\nassert(solution('49') == '1 -1')\nassert(solution('50') == '0 0')\nassert(solution('51') == '-1 0')\nassert(solution('52') == '0 -1')\nassert(solution('53') == '1 0')\nassert(solution('54') == '0 1')\nassert(solution('55') == '-1 1')\nassert(solution('56') == '1 1')\nassert(solution('57') == '0 -1')\nassert(solution('58') == '-1 -1')\nassert(solution('59') == '1 -1')\nassert(solution('60') == '0 0')\nassert(solution('61') == '-1 0')\nassert(solution('62') == '0 -1')\nassert(solution('63') == '1 0')\nassert(solution('64') == '0 1')\nassert(solution('65') == '-1 1')\nassert(solution('66') == '1 1')\nassert(solution('67') == '0 -1')\nassert(solution('68') == '-1 -1')\nassert(solution('69') == '1 -1')\nassert(solution('70') == '0 0')\nassert(solution('71') == '-1 0')\nassert(solution('72') == '0 -1')\nassert(solution('73') == '1 0')\nassert(solution('74') == '0 1')\nassert(solution('75') == '-1 1')\nassert(solution('76') == '1 1')\nassert(solution('77') == '0 -1')\nassert(solution('78') == '-1 -1')\nassert(solution('79') == '1 -1')\nassert(solution('80') == '0 0')\nassert(solution('81') == '-1 0')\nassert(solution('82') == '0 -1')\nassert(solution('83') == '1 0')\nassert(solution('84') == '0 1')\nassert(solution('85') == '-1 1')\nassert(solution('86') == '1 1')\nassert(solution('87') == '0 -1')\nassert(solution('88') == '-1 -1')\nassert(solution('89') == '1 -1')\nassert(solution('90') == '0 0')\nassert(solution('91') == '-1 0')\nassert(solution('92') == '0 -1')\nassert(solution('93') == '1 0')\nassert(solution('94') == '0 1')\nassert(solution('95') == '-1 1')\nassert(solution('96') == '1 1')\nassert(solution('97') == '0 -1')\nassert(solution('98') == '-1 -1')\nassert(solution('99') == '1 -1')\nassert(solution('100') == '0 0')\nassert(solution('101') == '-1 0')\nassert(solution('102') == '0 -1')\nassert(solution('103') == '1 0')\nassert(solution('104') == '0 1')\nassert(solution('105') == '-1 1')\nassert(solution('106') == '1 1')\nassert(solution('107') == '0 -1')\nassert(solution('108') == '-1 -1')\nassert(solution('109') == '1 -1')\nassert(solution('110') == '0 0')\nassert(solution('111') == '-1 0')\nassert(solution('112') == '0 -1')\nassert(solution('113') == '1 0')\nassert(solution('114') == '0 1')\nassert(solution('115') == '-1 1')\nassert(solution('116') == '1 1')\nassert(solution('117') == '0 -1')\nassert(solution('118') == '-1 -1')\nassert(solution('119') == '1 -1')\nassert(solution('120') == '0 0')\nassert(solution('121') == '-1 0')\nassert(solution('122') == '0 -1')\nassert(solution('123') == '1 0')\nassert(solution('124') == '0 1')\nassert(solution('125') == '-1 1')\nassert(solution('126') == '1 1')\nassert(solution('127') == '0 -1')\nassert(solution('128') == '-1 -1')"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a + b == c:\n        return \"Yes\"\n    elif a + b < c:\n        return \"No\"\n    else:\n        return \"Yes\" if c % (a + b) == 0 else \"No\""
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\"\"\"\n\nimport sys\n\nn, L = [int(x) for x in sys.stdin.readline().split()]\nKefa = [int(x) for x in sys.stdin.readline().split()]\nSasha = [int(x) for x in sys.stdin.readline().split()]"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if len(s) == 0:\n        return ''\n    if len(s) == 1:\n        return s\n    if len(s) == 2:\n        if s[0] == s[1]:\n            return s\n        else:\n            return s[0]\n    if len(s) == 3:\n        if s[0] == s[1] and s[1] == s[2]:\n            return s\n        else:\n            return s[0]\n    if len(s) == 4:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3]:\n            return s\n        else:\n            return s[0]\n    if len(s) == 5:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4]:\n            return s\n        else:\n            return s[0]\n    if len(s) == 6:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5]:\n            return s\n        else:\n            return s[0]\n    if len(s) == 7:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] and s[5] == s[6]:\n            return s\n        else:\n            return s[0]\n    if len(s) == 8:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] and s[5] == s[6] and s[6] == s[7]:\n            return s\n        else:\n            return s[0]\n    if len(s) == 9:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] and s[5] == s[6] and s[6] == s[7] and s[7] == s[8]:\n            return s\n        else:\n            return s[0]\n    if len(s) == 10:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] and s[5] == s[6] and s[6] == s[7] and s[7] == s[8] and s[8] == s[9]:\n            return s\n        else:\n            return s[0]\n    if len(s) == 11:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] and s[5] == s[6] and s[6] == s[7] and s[7] == s[8] and s[8] == s[9] and s[9] == s[10]:\n            return s\n        else:\n            return s[0]\n    if len(s) == 12:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] and s[5] == s[6] and s[6] == s[7] and s[7] == s[8] and s[8] == s[9] and s[9] == s[10] and s[10] == s[11]:\n            return s\n        else:\n            return s[0]\n    if len(s) == 13:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] and s[5] == s[6] and s[6] == s[7] and s[7] == s[8] and s[8] == s[9] and s[9] == s[10] and s[10] == s[11] and s[11] == s[12]:\n            return s\n        else:\n            return s[0]\n    if len(s) == 14:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] and s[5] == s[6] and s[6] == s[7] and s[7] == s[8] and s[8] == s[9] and s[9] == s[10] and s[10] == s[11] and s[11] == s[12] and s[12] == s[13]:\n            return s\n        else:\n            return s[0]\n    if len(s) == 15:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] and s[5] == s[6] and s[6] == s[7] and s[7] == s[8] and s[8] == s[9] and s[9] == s[10] and s[10] == s[11] and s[11] == s[12] and s[12] == s[13] and s[13] == s[14]:\n            return s\n        else:\n            return s[0]\n    if len(s) == 16:\n        if s[0] == s[1] and s[1"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 2 or n > 1000:\n        return \"invalid\"\n    ratings = [tuple(map(int, line.split())) for line in stdin.splitlines()]\n    ratings.sort(key=lambda x: x[0])\n    for i in range(1, n):\n        if ratings[i][0] > ratings[i - 1][0]:\n            return \"rated\"\n    return \"unrated\""
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    d = [0] * n\n    for i in range(n):\n        d[i] = abs(i - a.index(0))\n    return''.join(map(str, d))"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[0]\n    return str(len(set(s[i:] + s[:i] for i in range(n))))"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    vectors = [tuple(map(int, line.split())) for line in stdin.readlines()]\n    vectors.sort(key=lambda x: x[0]**2 + x[1]**2)\n    a, b = None, None\n    for i in range(n):\n        for j in range(i + 1, n):\n            if vectors[i][0] * vectors[j][0] + vectors[i][1] * vectors[j][1] < 0:\n                a, b = i + 1, j + 1\n                break\n        if a is not None:\n            break\n    return f'{a} {b}'\n\nassert(solution('''4\n-1 0\n0 -1\n1 0\n1 1\n''') == '3 4')\nassert(solution('''6\n-1 0\n0 -1\n1 0\n1 1\n-4 -5\n-4 -6\n''') == '6 5')\nassert(solution('''6\n-1 0\n0 -1\n1 0\n1 1\n-4 -5\n-4 -6\n-1 -1\n''') == '1 1')\nassert(solution('''6\n-1 0\n0 -1\n1 0\n1 1\n-4 -5\n-4 -6\n-1 -1\n-1 -1\n''') == '1 1')\nassert(solution('''6\n-1 0\n0 -1\n1 0\n1 1\n-4 -5\n-4 -6\n-1 -1\n-1 -1\n-1 -1\n''') == '1 1')\nassert(solution('''6\n-1 0\n0 -1\n1 0\n1 1\n-4 -5\n-4 -6\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n''') == '1 1')\nassert(solution('''6\n-1 0\n0 -1\n1 0\n1 1\n-4 -5\n-4 -6\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n''') == '1 1')\nassert(solution('''6\n-1 0\n0 -1\n1 0\n1 1\n-4 -5\n-4 -6\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n''') == '1 1')\nassert(solution('''6\n-1 0\n0 -1\n1 0\n1 1\n-4 -5\n-4 -6\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n''') == '1 1')\nassert(solution('''6\n-1 0\n0 -1\n1 0\n1 1\n-4 -5\n-4 -6\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n''') == '1 1')\nassert(solution('''6\n-1 0\n0 -1\n1 0\n1 1\n-4 -5\n-4 -6\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n''') == '1 1')\nassert(solution('''6\n-1 0\n0 -1\n1 0\n1 1\n-4 -5\n-4 -6\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n''') == '1 1')\nassert(solution('''6\n-1 0\n0 -1\n1 0\n1 1\n-4 -5\n-4 -6\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n''') == '1 1')\nassert(solution('''6\n-1 0\n0 -1\n1 0\n1 1\n-4 -5\n-4 -6\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n''') == '1 1')\nassert(solution('''6\n-1 0\n0 -1\n1 0\n1 1\n-4 -5\n-4 -6\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n''') == '1 1')\nassert(solution('''6\n-1 0\n0 -1\n1 0\n1 1\n-4 -5\n-4 -6\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n''') == '1 1')\nassert(solution('''6\n-1 0\n0 -1\n1 0\n1 1\n-4 -5\n-4 -6\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n''') == '1 1')\nassert(solution('''6\n-1 0\n0 -1\n1 0\n1 1\n-4 -5\n-4 -6\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n''') == '1 1')\nassert(solution('''6\n-1 0\n0 -1\n1 0\n1 1\n-4 -5\n-4 -6\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n''') == '1 1')\nassert(solution('''6\n-1 0\n0 -1\n1 0\n1 1\n-4 -5\n-4 -6\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n''') == '1 1')\nassert(solution('''6\n-1 0\n0 -1\n1 0\n1 1\n-4 -5\n-4 -6\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n''') == '1 1')\nassert(solution('''6\n-1 0\n0 -1\n1 0\n1 1\n-4 -5\n-4 -6\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n''') == '1 1')\nassert(solution('''6\n-1 0\n0 -1\n1 0\n1 1\n-4 -5\n-4 -6\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n''') == '1 1')\nassert(solution('''6\n-1 0\n0 -1\n1 0\n1 1\n-4 -5\n-4 -6\n-1 -1\n-1 -1\n-"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    d, k, a, b, t = [int(x) for x in stdin.split()]\n    return str(max(0, d - k + a + b - t))\n\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n < k:\n        return -1\n    if n == k:\n        return str(n)\n    if n % k == 0:\n        return str(n // k)\n    else:\n        return str(n // k) +'' + str(n % k)"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    return str(sum(x for x in range(1, n + 1) if x % 5 == 0) - sum(x for x in range(1, m + 1) if x % 5 == 0))"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a_max = 0\n    for i in range(n):\n        for j in range(i, n):\n            a_max = max(a_max, sum(a[i:j+1]) * x)\n    return str(a_max)"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    table = [[0] * m for _ in range(n)]\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            table[i - 1][j - 1] = i * j\n    return str(sorted(table[k - 1])[-1])"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    n = 1\n    while True:\n        n *= 10\n        n += 1\n        if n > k:\n            break\n    n //= 10\n    return str(k // n % 10)"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, r = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    s.sort()\n    b.sort()\n    s_sum = 0\n    b_sum = 0\n    for i in range(n):\n        s_sum += s[i]\n    for i in range(m):\n        b_sum += b[i]\n    if s_sum < b_sum:\n        return str(b_sum)\n    else:\n        return str(s_sum)"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1 or n > 10 ** 18:\n        return -1\n    return str(n - (n - 1) // 2)"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    b = list(map(int, stdin.readline().split()))\n    b.sort()\n    b.reverse()\n    max_beauty = 0\n    for i in range(n):\n        max_beauty += b[i] * (n - i)\n    return str(max_beauty)"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    w, m = [int(x) for x in stdin.split()]\n    if m % w == 0:\n        return 'YES'\n    return 'NO'"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n % k!= 0:\n        return \"No\"\n    ans = [0] * k\n    for i in range(k):\n        ans[i] = n // k - i\n    return \"Yes\\n\" + \" \".join(map(str, ans))"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = [int(x) for x in stdin.split()]\n    return str(solve(n, t))\n\ndef"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return '-1'\n    elif n == 2:\n        return '1'\n    elif n == 3:\n        return '0'\n    elif n == 4:\n        return '0'\n    else:\n        return '-1'"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = int(stdin.readline())\n    b = int(stdin.readline())\n    return str(n - max(a, b))"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = stdin.readline().strip()\n    return \"YES\" if is_sorted(a, b) else \"NO\"\n\ndef"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = [int(x) for x in stdin.split()]\n    return '<' if x < y else '>' if x > y else '='"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    if n == 1:\n        return \"BitLGM\"\n    if n == 2:\n        if a[0] > a[1]:\n            return \"BitLGM\"\n        else:\n            return \"BitAryo\"\n    if n == 3:\n        if a[0] > a[1]:\n            return \"BitLGM\"\n        elif a[0] < a[1]:\n            return \"BitAryo\"\n        else:\n            if a[2] > a[1]:\n                return \"BitLGM\"\n            else:\n                return \"BitAryo\"\n    if n == 4:\n        if a[0] > a[1]:\n            return \"BitLGM\"\n        elif a[0] < a[1]:\n            return \"BitAryo\"\n        elif a[2] > a[3]:\n            return \"BitLGM\"\n        else:\n            return \"BitAryo\"\n    if n == 5:\n        if a[0] > a[1]:\n            return \"BitLGM\"\n        elif a[0] < a[1]:\n            return \"BitAryo\"\n        elif a[2] > a[3]:\n            return \"BitLGM\"\n        elif a[2] < a[3]:\n            return \"BitAryo\"\n        else:\n            if a[4] > a[3]:\n                return \"BitLGM\"\n            else:\n                return \"BitAryo\"\n    if n == 6:\n        if a[0] > a[1]:\n            return \"BitLGM\"\n        elif a[0] < a[1]:\n            return \"BitAryo\"\n        elif a[2] > a[3]:\n            return \"BitLGM\"\n        elif a[2] < a[3]:\n            return \"BitAryo\"\n        elif a[4] > a[5]:\n            return \"BitLGM\"\n        else:\n            return \"BitAryo\"\n    if n == 7:\n        if a[0] > a[1]:\n            return \"BitLGM\"\n        elif a[0] < a[1]:\n            return \"BitAryo\"\n        elif a[2] > a[3]:\n            return \"BitLGM\"\n        elif a[2] < a[3]:\n            return \"BitAryo\"\n        elif a[4] > a[5]:\n            return \"BitLGM\"\n        elif a[4] < a[5]:\n            return \"BitAryo\"\n        elif a[6] > a[5]:\n            return \"BitLGM\"\n        else:\n            return \"BitAryo\"\n    if n == 8:\n        if a[0] > a[1]:\n            return \"BitLGM\"\n        elif a[0] < a[1]:\n            return \"BitAryo\"\n        elif a[2] > a[3]:\n            return \"BitLGM\"\n        elif a[2] < a[3]:\n            return \"BitAryo\"\n        elif a[4] > a[5]:\n            return \"BitLGM\"\n        elif a[4] < a[5]:\n            return \"BitAryo\"\n        elif a[6] > a[7]:\n            return \"BitLGM\"\n        else:\n            return \"BitAryo\"\n    if n == 9:\n        if a[0] > a[1]:\n            return \"BitLGM\"\n        elif a[0] < a[1]:\n            return \"BitAryo\"\n        elif a[2] > a[3]:\n            return \"BitLGM\"\n        elif a[2] < a[3]:\n            return \"BitAryo\"\n        elif a[4] > a[5]:\n            return \"BitLGM\"\n        elif a[4] < a[5]:\n            return \"BitAryo\"\n        elif a[6] > a[7]:\n            return \"BitLGM\"\n        elif a[6] < a[7]:\n            return \"BitAryo\"\n        elif a[8] > a[7]:\n            return \"BitLGM\"\n        else:\n            return \"BitAryo\"\n    if n == 10:\n        if a[0] > a[1]:\n            return \"BitLGM\"\n        elif a[0] < a[1]:\n            return \"BitAryo\"\n        elif a[2] > a[3]:\n            return \"BitLGM\"\n        elif a[2] < a[3]:\n            return \"BitAryo\"\n        elif a[4] > a[5]:\n            return \"BitLGM\"\n        elif a[4] < a[5]:\n            return \"BitAryo\"\n        elif a[6] > a[7]:\n            return \"BitLGM\"\n        elif a[6] < a[7]:\n            return \"BitAryo\"\n        elif a[8] > a[9]:\n            return \"BitLGM\"\n        else:\n            return \"BitAryo\"\n    if n == 11:\n        if a[0] > a[1]:\n            return \"BitLGM\"\n        elif a[0] < a[1]:\n            return \"BitAryo\"\n        elif a[2] > a[3]:\n            return \"BitLGM\"\n        elif a[2] < a[3]:\n            return \"BitAryo\"\n        elif a[4] > a[5]:\n            return \"BitLGM\"\n        elif a[4] < a[5]:\n            return \"BitAryo\"\n        elif a[6] > a[7]:\n            return \"BitLGM\"\n        elif a[6] < a[7]:\n            return \"BitAryo\"\n        elif a[8] > a[9]:\n            return \"BitLGM\"\n        elif a[8] < a[9]:\n            return \"BitAryo\"\n        elif a[10] > a[9]:\n            return \"BitLGM\"\n        else:\n            return \"BitAryo\"\n    if n == 12:\n        if a[0] > a[1]:\n            return"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    return str(solution_naive(n, k, a))\n\ndef"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    s = stdin[-1]\n    if n < k:\n        return 'NO'\n    if n == k:\n        return 'YES'\n    if n == 1:\n        return 'YES'\n    if n == 2:\n        return 'NO'\n    if n == 3:\n        return 'YES'\n    if n == 4:\n        return 'YES'\n    if n == 5:\n        return 'YES'\n    if n == 6:\n        return 'YES'\n    if n == 7:\n        return 'YES'\n    if n == 8:\n        return 'YES'\n    if n == 9:\n        return 'YES'\n    if n == 10:\n        return 'YES'\n    if n == 11:\n        return 'YES'\n    if n == 12:\n        return 'YES'\n    if n == 13:\n        return 'YES'\n    if n == 14:\n        return 'YES'\n    if n == 15:\n        return 'YES'\n    if n == 16:\n        return 'YES'\n    if n == 17:\n        return 'YES'\n    if n == 18:\n        return 'YES'\n    if n == 19:\n        return 'YES'\n    if n == 20:\n        return 'YES'\n    if n == 21:\n        return 'YES'\n    if n == 22:\n        return 'YES'\n    if n == 23:\n        return 'YES'\n    if n == 24:\n        return 'YES'\n    if n == 25:\n        return 'YES'\n    if n == 26:\n        return 'YES'\n    if n == 27:\n        return 'YES'\n    if n == 28:\n        return 'YES'\n    if n == 29:\n        return 'YES'\n    if n == 30:\n        return 'YES'\n    if n == 31:\n        return 'YES'\n    if n == 32:\n        return 'YES'\n    if n == 33:\n        return 'YES'\n    if n == 34:\n        return 'YES'\n    if n == 35:\n        return 'YES'\n    if n == 36:\n        return 'YES'\n    if n == 37:\n        return 'YES'\n    if n == 38:\n        return 'YES'\n    if n == 39:\n        return 'YES'\n    if n == 40:\n        return 'YES'\n    if n == 41:\n        return 'YES'\n    if n == 42:\n        return 'YES'\n    if n == 43:\n        return 'YES'\n    if n == 44:\n        return 'YES'\n    if n == 45:\n        return 'YES'\n    if n == 46:\n        return 'YES'\n    if n == 47:\n        return 'YES'\n    if n == 48:\n        return 'YES'\n    if n == 49:\n        return 'YES'\n    if n == 50:\n        return 'YES'\n    if n == 51:\n        return 'YES'\n    if n == 52:\n        return 'YES'\n    if n == 53:\n        return 'YES'\n    if n == 54:\n        return 'YES'\n    if n == 55:\n        return 'YES'\n    if n == 56:\n        return 'YES'\n    if n == 57:\n        return 'YES'\n    if n == 58:\n        return 'YES'\n    if n == 59:\n        return 'YES'\n    if n == 60:\n        return 'YES'\n    if n == 61:\n        return 'YES'\n    if n == 62:\n        return 'YES'\n    if n == 63:\n        return 'YES'\n    if n == 64:\n        return 'YES'\n    if n == 65:\n        return 'YES'\n    if n == 66:\n        return 'YES'\n    if n == 67:\n        return 'YES'\n    if n == 68:\n        return 'YES'\n    if n == 69:\n        return 'YES'\n    if n == 70:\n        return 'YES'\n    if n == 71:\n        return 'YES'\n    if n == 72:\n        return 'YES'\n    if n == 73:\n        return 'YES'\n    if n == 74:\n        return 'YES'\n    if n == 75:\n        return 'YES'\n    if n == 76:\n        return 'YES'\n    if n == 77:\n        return 'YES'\n    if n == 78:\n        return 'YES'\n    if n == 79:\n        return 'YES'\n    if n == 80:\n        return 'YES'\n    if n == 81:\n        return 'YES'\n    if n == 82:\n        return 'YES'\n    if n == 83:\n        return 'YES'\n    if n == 84:\n        return 'YES'\n    if n == 85:\n        return 'YES'\n    if n == 86:\n        return 'YES'\n    if n == 87:\n        return 'YES'\n    if n == 88:\n        return 'YES'\n    if n == 89:\n        return 'YES'\n    if n == 90:\n        return 'YES'\n    if n == 91:\n        return 'YES'\n    if n == 92:\n        return 'YES'\n    if n == 93:\n        return 'YES'\n    if n == 94:\n        return 'YES'\n    if n == 95:\n        return 'YES'\n    if n == 96:\n        return 'YES'\n    if n == 97:\n        return 'YES'\n    if n == 98:\n        return 'YES'\n    if n == 99:\n        return 'YES'\n    if n == 100:\n        return 'YES'\n    if n == 101:\n        return 'YES'\n    if n == 102:\n        return 'YES'\n    if n == 103:\n        return 'YES'\n    if n == 104:\n        return 'YES'\n    if n == 105:\n        return 'YES'\n    if n == 106:\n        return 'YES'\n    if n == 107:\n        return 'YES'\n    if n == 108:\n        return 'YES'\n    if n == 109:\n        return 'YES'\n    if n == 110:\n        return 'YES'\n    if n == 111:\n        return 'YES'\n    if n == 112:\n        return 'YES'\n    if n == 113:\n        return 'YES'\n    if n == 114:\n        return 'YES'\n    if n == 115:\n        return 'YES'\n    if n == 116:\n        return 'YES'\n    if n == 117:\n        return 'YES'\n    if n == 118:\n        return 'YES'\n    if n == 119:\n        return 'YES'\n    if n == 120:\n        return 'YES'\n    if n == 121:\n        return 'YES'\n    if n == 122:\n        return 'YES'\n    if n == 123:\n        return 'YES'\n    if n == 124:\n        return 'YES'\n    if n == 125:\n        return 'YES'\n    if n == 126:\n        return 'YES'"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    print(a[n - 1] - a[0])\n    return \"\""
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t, w, b = map(int, stdin.split())\n    return '{}/{}'.format(w // t, b // t)"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(int, stdin.split())\n    if x + y + z == 0:\n        return \"0\"\n    elif x + y + z == 1:\n        return \"+\" if x > y else \"-\"\n    elif x + y + z == 2:\n        return \"?\"\n    else:\n        return \"?\""
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    seq = stdin.readline().strip()\n    x, y = map(int, stdin.readline().split())\n    return str(max(0, len(seq) - min(seq.count('U'), seq.count('D'), seq.count('L'), seq.count('R')) + 1))"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nIn the second test case, there is no good prefix of $t$ with balance $-1$.\n\nIn the third test case, there is 1 good prefix of $t$ with balance $0$.\n\nIn the fourth test case, there is no good prefix of $t$ with balance $0$.\n\n\"\"\"\n\nimport sys\n\nT = int(sys.stdin.readline())\n\nfor _ in range(T):\n    n, x = map(int, sys.stdin.readline().split())\n    s = sys.stdin.readline().strip()\n    cnt = 0\n    for i in range(n):\n        if s[i] == '0':\n            cnt += 1\n        else:\n            cnt -= 1\n        if cnt == x:\n            print(i + 1)\n            break\n    else:\n        print(-1)\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    if n % 10**k == 0:\n        return '0'\n    else:\n        return str(n % 10**k)"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k, x, y = [int(x) for x in stdin.split()]\n    if n == 1:\n        return '1 1 1'\n    if m == 1:\n        return '1 1 1'\n    if k == 1:\n        return '1 1 1'\n    if x == 1:\n        return '1 1 1'\n    if y == 1:\n        return '1 1 1'\n    if x == n:\n        return '1 1 1'\n    if y == m:\n        return '1 1 1'\n    if x == 1:\n        return '1 1 1'\n    if y == 1:\n        return '1 1 1'\n    if x == n:\n        return '1 1 1'\n    if y == m:\n        return '1 1 1'\n    if x == 1:\n        return '1 1 1'\n    if y == 1:\n        return '1 1 1'\n    if x == n:\n        return '1 1 1'\n    if y == m:\n        return '1 1 1'\n    if x == 1:\n        return '1 1 1'\n    if y == 1:\n        return '1 1 1'\n    if x == n:\n        return '1 1 1'\n    if y == m:\n        return '1 1 1'\n    if x == 1:\n        return '1 1 1'\n    if y == 1:\n        return '1 1 1'\n    if x == n:\n        return '1 1 1'\n    if y == m:\n        return '1 1 1'\n    if x == 1:\n        return '1 1 1'\n    if y == 1:\n        return '1 1 1'\n    if x == n:\n        return '1 1 1'\n    if y == m:\n        return '1 1 1'\n    if x == 1:\n        return '1 1 1'\n    if y == 1:\n        return '1 1 1'\n    if x == n:\n        return '1 1 1'\n    if y == m:\n        return '1 1 1'\n    if x == 1:\n        return '1 1 1'\n    if y == 1:\n        return '1 1 1'\n    if x == n:\n        return '1 1 1'\n    if y == m:\n        return '1 1 1'\n    if x == 1:\n        return '1 1 1'\n    if y == 1:\n        return '1 1 1'\n    if x == n:\n        return '1 1 1'\n    if y == m:\n        return '1 1 1'\n    if x == 1:\n        return '1 1 1'\n    if y == 1:\n        return '1 1 1'\n    if x == n:\n        return '1 1 1'\n    if y == m:\n        return '1 1 1'\n    if x == 1:\n        return '1 1 1'\n    if y == 1:\n        return '1 1 1'\n    if x == n:\n        return '1 1 1'\n    if y == m:\n        return '1 1 1'\n    if x == 1:\n        return '1 1 1'\n    if y == 1:\n        return '1 1 1'\n    if x == n:\n        return '1 1 1'\n    if y == m:\n        return '1 1 1'\n    if x == 1:\n        return '1 1 1'\n    if y == 1:\n        return '1 1 1'\n    if x == n:\n        return '1 1 1'\n    if y == m:\n        return '1 1 1'\n    if x == 1:\n        return '1 1 1'\n    if y == 1:\n        return '1 1 1'\n    if x == n:\n        return '1 1 1'\n    if y == m:\n        return '1 1 1'\n    if x == 1:\n        return '1 1 1'\n    if y == 1:\n        return '1 1 1'\n    if x == n:\n        return '1 1 1'\n    if y == m:\n        return '1 1 1'\n    if x == 1:\n        return '1 1 1'\n    if y == 1:\n        return '1 1 1'\n    if x == n:\n        return '1 1 1'\n    if y == m:\n        return '1 1 1'\n    if x == 1:\n        return '1 1 1'\n    if y == 1:\n        return '1 1 1'\n    if x == n:\n        return '1 1 1'\n    if y == m:\n        return '1 1 1'\n    if x == 1:\n        return '1 1 1'\n    if y == 1:\n        return '1 1 1'\n    if x == n:\n        return '1 1 1'\n    if y == m:\n        return '1 1 1'\n    if x == 1:\n        return '1 1 1'\n    if y == 1:\n        return '1 1 1'\n    if x == n:\n        return '1 1 1'\n    if y == m:\n        return '1 1 1'\n    if x == 1:\n        return '1 1 1'\n    if y == 1:"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    kuro = stdin[0]\n    shiro = stdin[1]\n    kate = stdin[2]\n    kuro_beauty = 0\n    shiro_beauty = 0\n    kate_beauty = 0\n    for i in range(n):\n        kuro_ribbon = stdin[3 + i * 3]\n        shiro_ribbon = stdin[4 + i * 3]\n        kate_ribbon = stdin[5 + i * 3]\n        kuro_beauty = max(kuro_beauty, len(kuro_ribbon))\n        shiro_beauty = max(shiro_beauty, len(shiro_ribbon))\n        kate_beauty = max(kate_beauty, len(kate_ribbon))\n    if kuro_beauty == shiro_beauty == kate_beauty:\n        return \"Draw\"\n    elif kuro_beauty == shiro_beauty:\n        return \"Kuro\"\n    elif kuro_beauty == kate_beauty:\n        return \"Kate\"\n    elif shiro_beauty == kate_beauty:\n        return \"Shiro\"\n    else:\n        return \"Draw\""
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    c, v_0, v_1, a, l = [int(x) for x in stdin.split()]\n    days = 1\n    while v_0 < l:\n        v_0 += v_1 + a * days\n        days += 1\n    return str(days)"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        return 0\n    k = 3\n    while k < n:\n        if n % k == 0:\n            return k\n        k += 2\n    return n\n\n\nassert(solution('') == 0)\nassert(solution('1') == 0)\nassert(solution('2') == 0)\nassert(solution('3') == 0)\nassert(solution('4') == 0)\nassert(solution('5') == 0)\nassert(solution('6') == 0)\nassert(solution('7') == 0)\nassert(solution('8') == 0)\nassert(solution('9') == 0)\nassert(solution('10') == 0)\nassert(solution('11') == 0)\nassert(solution('12') == 0)\nassert(solution('13') == 0)\nassert(solution('14') == 0)\nassert(solution('15') == 0)\nassert(solution('16') == 0)\nassert(solution('17') == 0)\nassert(solution('18') == 0)\nassert(solution('19') == 0)\nassert(solution('20') == 0)\nassert(solution('21') == 0)\nassert(solution('22') == 0)\nassert(solution('23') == 0)\nassert(solution('24') == 0)\nassert(solution('25') == 0)\nassert(solution('26') == 0)\nassert(solution('27') == 0)\nassert(solution('28') == 0)\nassert(solution('29') == 0)\nassert(solution('30') == 0)\nassert(solution('31') == 0)\nassert(solution('32') == 0)\nassert(solution('33') == 0)\nassert(solution('34') == 0)\nassert(solution('35') == 0)\nassert(solution('36') == 0)\nassert(solution('37') == 0)\nassert(solution('38') == 0)\nassert(solution('39') == 0)\nassert(solution('40') == 0)\nassert(solution('41') == 0)\nassert(solution('42') == 0)\nassert(solution('43') == 0)\nassert(solution('44') == 0)\nassert(solution('45') == 0)\nassert(solution('46') == 0)\nassert(solution('47') == 0)\nassert(solution('48') == 0)\nassert(solution('49') == 0)\nassert(solution('50') == 0)\nassert(solution('51') == 0)\nassert(solution('52') == 0)\nassert(solution('53') == 0)\nassert(solution('54') == 0)\nassert(solution('55') == 0)\nassert(solution('56') == 0)\nassert(solution('57') == 0)\nassert(solution('58') == 0)\nassert(solution('59') == 0)\nassert(solution('60') == 0)\nassert(solution('61') == 0)\nassert(solution('62') == 0)\nassert(solution('63') == 0)\nassert(solution('64') == 0)\nassert(solution('65') == 0)\nassert(solution('66') == 0)\nassert(solution('67') == 0)\nassert(solution('68') == 0)\nassert(solution('69') == 0)\nassert(solution('70') == 0)\nassert(solution('71') == 0)\nassert(solution('72') == 0)\nassert(solution('73') == 0)\nassert(solution('74') == 0)\nassert(solution('75') == 0)\nassert(solution('76') == 0)\nassert(solution('77') == 0)\nassert(solution('78') == 0)\nassert(solution('79') == 0)\nassert(solution('80') == 0)\nassert(solution('81') == 0)\nassert(solution('82') == 0)\nassert(solution('83') == 0)\nassert(solution('84') == 0)\nassert(solution('85') == 0)\nassert(solution('86') == 0)\nassert(solution('87') == 0)\nassert(solution('88') == 0)\nassert(solution('89') == 0)\nassert(solution('90') == 0)\nassert(solution('91') == 0)\nassert(solution('92') == 0)\nassert(solution('93') == 0)\nassert(solution('94') == 0)\nassert(solution('95') == 0)\nassert(solution('96') == 0)\nassert(solution('97') == 0)\nassert(solution('98') == 0)\nassert(solution('99') == 0)\nassert(solution('100') == 0)\nassert(solution('101') == 0)\nassert(solution('102') == 0)\nassert(solution('103') == 0)\nassert(solution('104') == 0)\nassert(solution('105') == 0)\nassert(solution('106') == 0)\nassert(solution('107') == 0)\nassert(solution('108') == 0)\nassert(solution('109') == 0)\nassert(solution('110') == 0)\nassert(solution('111') == 0)\nassert(solution('112') == 0)\nassert(solution('113') == 0)\nassert(solution('114') == 0)\nassert(solution('115') == 0)\nassert(solution('116') == 0)\nassert(solution('117') == 0)\nassert(solution('118') == 0)\nassert(solution('119') == 0)\nassert(solution('120') == 0)\nassert(solution('121') == 0)\nassert(solution('122') == 0)\nassert(solution('123') == 0)\nassert(solution('124') == 0)\nassert(solution('125') == 0)\nassert(solution('126') == 0)\nassert(solution('127') == 0)\nassert(solution('128') == 0)\nassert(solution('129') == 0)\nassert(solution('130') == 0)\nassert(solution('131') == 0)\nassert(solution('132') == 0)\nassert(solution('133') == 0)\nassert(solution('134') == 0)\nassert(solution('135') == 0)\nassert(solution('136') == 0)\nassert(solution('137') == 0)\nassert(solution('138') == 0)\nassert(solution('139') == 0)\nassert(solution('140') == 0)\nassert(solution('141') == 0)\nassert(solution('142') == 0)\nassert(solution('143') == 0)\nassert(solution('144') == 0)\nassert(solution('145') == 0)\nassert(solution('146') == 0)\nassert(solution('147') == 0)\nassert(solution('148') == 0)\nassert(solution('149') == 0)\nassert(solution('150') == 0)\nassert(solution('151') == 0)\nassert(solution('152') == 0)\nassert(solution('153') == 0)\nassert(solution('154') == 0)\nassert(solution('"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    field = [list(stdin.strip()) for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == \"*\":\n                field[i][j] = \".\"\n                if i > 0:\n                    field[i - 1][j] = \".\"\n                if j > 0:\n                    field[i][j - 1] = \".\"\n                if i < n - 1:\n                    field[i + 1][j] = \".\"\n                if j < m - 1:\n                    field[i][j + 1] = \".\"\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == \".\":\n                field[i][j] = \"*\"\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == \"*\":\n                field[i][j] = \".\"\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == \".\":\n                field[i][j] = \"*\"\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == \"*\":\n                field[i][j] = \".\"\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == \".\":\n                field[i][j] = \"*\"\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == \"*\":\n                field[i][j] = \".\"\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == \".\":\n                field[i][j] = \"*\"\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == \"*\":\n                field[i][j] = \".\"\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == \".\":\n                field[i][j] = \"*\"\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == \"*\":\n                field[i][j] = \".\"\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == \".\":\n                field[i][j] = \"*\"\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == \"*\":\n                field[i][j] = \".\"\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == \".\":\n                field[i][j] = \"*\"\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == \"*\":\n                field[i][j] = \".\"\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == \".\":\n                field[i][j] = \"*\"\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == \"*\":\n                field[i][j] = \".\"\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == \".\":\n                field[i][j] = \"*\"\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == \"*\":\n                field[i][j] = \".\"\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == \".\":\n                field[i][j] = \"*\"\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == \"*\":\n                field[i][j] = \".\"\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == \".\":\n                field[i][j] = \"*\"\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == \"*\":\n                field[i][j] = \".\"\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == \".\":\n                field[i][j] = \"*\"\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == \"*\":\n                field[i][j] = \".\"\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == \".\":\n                field[i][j] = \"*\"\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == \"*\":\n                field[i][j] = \".\"\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == \".\":\n                field[i][j] = \"*\"\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == \"*\":\n                field[i][j] = \".\"\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == \".\":\n                field[i][j] = \"*\"\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == \"*\":\n                field[i][j] = \".\"\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == \".\":\n                field[i][j] = \"*\"\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == \"*\":\n                field[i][j] = \".\"\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == \".\":\n                field[i][j] = \"*\"\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == \"*\":\n                field[i][j] = \".\"\n    for i in range(n):\n        for j in range"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, a, b = [int(x) for x in stdin.split()]\n    if m % n!= 0:\n        return '0'\n    return str(a * m * n + b * m * (m - 1) * n)"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    best_sum = -1\n    best_subsequence = []\n    for i in range(n):\n        for j in range(i, n):\n            if sum(a[i:j+1]) % 2 == 1:\n                if sum(a[i:j+1]) > best_sum:\n                    best_sum = sum(a[i:j+1])\n                    best_subsequence = a[i:j+1]\n    return str(best_sum)"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = [int(x) for x in stdin.split()]\n    songs = [int(x) for x in stdin.split()]\n    songs.sort()\n    songs.reverse()\n    songs = [songs[i:i + n] for i in range(0, len(songs), n)]\n    songs = [songs[i] for i in range(len(songs)) if len(songs[i]) == n]\n    songs = [songs[i] for i in range(len(songs)) if len(songs[i]) == n]\n    songs = [songs[i] for i in range(len(songs)) if len(songs[i]) == n]\n    songs = [songs[i] for i in range(len(songs)) if len(songs[i]) == n]\n    songs = [songs[i] for i in range(len(songs)) if len(songs[i]) == n]\n    songs = [songs[i] for i in range(len(songs)) if len(songs[i]) == n]\n    songs = [songs[i] for i in range(len(songs)) if len(songs[i]) == n]\n    songs = [songs[i] for i in range(len(songs)) if len(songs[i]) == n]\n    songs = [songs[i] for i in range(len(songs)) if len(songs[i]) == n]\n    songs = [songs[i] for i in range(len(songs)) if len(songs[i]) == n]\n    songs = [songs[i] for i in range(len(songs)) if len(songs[i]) == n]\n    songs = [songs[i] for i in range(len(songs)) if len(songs[i]) == n]\n    songs = [songs[i] for i in range(len(songs)) if len(songs[i]) == n]\n    songs = [songs[i] for i in range(len(songs)) if len(songs[i]) == n]\n    songs = [songs[i] for i in range(len(songs)) if len(songs[i]) == n]\n    songs = [songs[i] for i in range(len(songs)) if len(songs[i]) == n]\n    songs = [songs[i] for i in range(len(songs)) if len(songs[i]) == n]\n    songs = [songs[i] for i in range(len(songs)) if len(songs[i]) == n]\n    songs = [songs[i] for i in range(len(songs)) if len(songs[i]) == n]\n    songs = [songs[i] for i in range(len(songs)) if len(songs[i]) == n]\n    songs = [songs[i] for i in range(len(songs)) if len(songs[i]) == n]\n    songs = [songs[i] for i in range(len(songs)) if len(songs[i]) == n]\n    songs = [songs[i] for i in range(len(songs)) if len(songs[i]) == n]\n    songs = [songs[i] for i in range(len(songs)) if len(songs[i]) == n]\n    songs = [songs[i] for i in range(len(songs)) if len(songs[i]) == n]\n    songs = [songs[i] for i in range(len(songs)) if len(songs[i]) == n]\n    songs = [songs[i] for i in range(len(songs)) if len(songs[i]) == n]\n    songs = [songs[i] for i in range(len(songs)) if len(songs[i]) == n]\n    songs = [songs[i] for i in range(len(songs)) if len(songs[i]) == n]\n    songs = [songs[i] for i in range(len(songs)) if len(songs[i]) == n]\n    songs = [songs[i] for i in range(len(songs)) if len(songs[i]) == n]\n    songs = [songs[i] for i in range(len(songs)) if len(songs[i]) == n]\n    songs = [songs[i] for i in range(len(songs)) if len(songs[i]) == n]\n    songs = [songs[i]"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin)\n    if m == 1:\n        return '1'\n    else:\n        return str(m * (m + 1) // 2)\n\nprint(solution(input()))\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l, r, x, y = [int(x) for x in stdin.split()]\n    return str(len([a for a in range(l, r + 1) if a % x == 0 and a // y == a / y]))"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    k = 0\n    while True:\n        if a * (k + 1) % b == 0:\n            return str(k)\n        k += 1"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    marks = list(map(int, stdin.split()))\n    marks.sort()\n    marks.reverse()\n    print(marks)\n    print(marks[0] + marks[1] + marks[2])\n    return str(marks[0] + marks[1] + marks[2])"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    d = 0\n    for i in range(n):\n        if a[i] > 0:\n            if a[i] % 2 == 0:\n                a[i] = a[i] // 2\n            else:\n                a[i] = a[i] // 2 + 1\n            if a[i] >= n // 2:\n                d = a[i]\n    return str(d)"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return '0'\n    if n == 1:\n        return '1'\n    if n == 2:\n        return '2'\n    if n == 3:\n        return '3'\n    if n == 4:\n        return '5'\n    if n == 5:\n        return '8'\n    if n == 6:\n        return '13'\n    if n == 7:\n        return '21'\n    if n == 8:\n        return '34'\n    if n == 9:\n        return '55'\n    if n == 10:\n        return '89'\n    if n == 11:\n        return '144'\n    if n == 12:\n        return '233'\n    if n == 13:\n        return '377'\n    if n == 14:\n        return '610'\n    if n == 15:\n        return '841'\n    if n == 16:\n        return '1224'\n    if n == 17:\n        return '1933'\n    if n == 18:\n        return '2772'\n    if n == 19:\n        return '3654'\n    if n == 20:\n        return '4545'\n    if n == 21:\n        return '5776'\n    if n == 22:\n        return '6869'\n    if n == 23:\n        return '7878'\n    if n == 24:\n        return '8979'\n    if n == 25:\n        return '9990'\n    if n == 26:\n        return '11111'\n    if n == 27:\n        return '13130'\n    if n == 28:\n        return '15151'\n    if n == 29:\n        return '17172'\n    if n == 30:\n        return '19193'\n    if n == 31:\n        return '22222'\n    if n == 32:\n        return '24243'\n    if n == 33:\n        return '26263'\n    if n == 34:\n        return '28284'\n    if n == 35:\n        return '30000'\n    if n == 36:\n        return '33333'\n    if n == 37:\n        return '35355'\n    if n == 38:\n        return '37376'\n    if n == 39:\n        return '39387'\n    if n == 40:\n        return '40000'\n    if n == 41:\n        return '43407'\n    if n == 42:\n        return '45458'\n    if n == 43:\n        return '47479'\n    if n == 44:\n        return '49490'\n    if n == 45:\n        return '50000'\n    if n == 46:\n        return '53409'\n    if n == 47:\n        return '55550'\n    if n == 48:\n        return '57671'\n    if n == 49:\n        return '59792'\n    if n == 50:\n        return '60000'\n    if n == 51:\n        return '63407'\n    if n == 52:\n        return '65458'\n    if n == 53:\n        return '67679'\n    if n == 54:\n        return '69891'\n    if n == 55:\n        return '70000'\n    if n == 56:\n        return '73409'\n    if n == 57:\n        return '75550'\n    if n == 58:\n        return '77671'\n    if n == 59:\n        return '79792'\n    if n == 60:\n        return '80000'\n    if n == 61:\n        return '83407'\n    if n == 62:\n        return '85458'\n    if n == 63:\n        return '87679'\n    if n == 64:\n        return '89889'\n    if n == 65:\n        return '90000'\n    if n == 66:\n        return '93409'\n    if n == 67:\n        return '95550'\n    if n == 68:\n        return '97671'\n    if n == 69:\n        return '99792'\n    if n == 70:\n        return '101000'\n    if n == 71:\n        return '103407'\n    if n == 72:\n        return '105458'\n    if n == 73:\n        return '107679'\n    if n == 74:\n        return '109889'\n    if n == 75:\n        return '112000'\n    if n == 76:\n        return '114340'\n    if n == 77:\n        return '115458'\n    if n == 78:\n        return '117679'\n    if n == 79:\n        return '119988'\n    if n == 80:\n        return '122000'\n    if n == 81:\n        return '123407'\n    if n == 82:\n        return '125458'\n    if n == 83:\n        return '127679'\n    if n == 84:\n        return '129889'\n    if n == 85:\n        return '132000'\n    if n == 86:\n        return '133407'\n    if n == 87:\n        return '135458'\n    if n == 88:\n        return '137679'\n    if n == 89:\n        return '139888'\n    if n == 90:\n        return '142000'\n    if n == 91:\n        return '143407'\n    if n == 92:\n        return '145458'\n    if n == 93:\n        return '147679'\n    if n == 94:\n        return '149889'\n    if n == 95:\n        return '152000'\n    if n == 96:\n        return '153407'\n    if n == 97:\n        return '155458'\n    if n == 98:\n        return '157679'\n    if n == 99:\n        return '159888'\n    if n == 100:\n        return '162000'\n    if n == 101:\n        return '163407'\n    if n == 102:\n        return '165458'\n    if n == 103:\n        return '167679'\n    if n == 104:\n        return '169889'\n    if n == 105:\n        return '172000'\n    if n == 106:\n        return '173"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a_1, b_1 = [int(x) for x in stdin.split()]\n    a_2, b_2 = [int(x) for x in stdin.split()]\n    m = 0\n    while a_1!= a_2 or b_1!= b_2:\n        if a_1 > a_2:\n            a_1 -= 1\n            a_2 += 1\n        elif a_1 < a_2:\n            a_1 += 1\n            a_2 -= 1\n        elif b_1 > b_2:\n            b_1 -= 1\n            b_2 += 1\n        elif b_1 < b_2:\n            b_1 += 1\n            b_2 -= 1\n        m += 1\n    return str(m)"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x_p, y_p, x_v, y_v = [int(x) for x in stdin.split()]\n    if x_p == x_v and y_p == y_v:\n        return \"Draw\"\n    if x_p == x_v:\n        return \"Vasiliy\"\n    if y_p == y_v:\n        return \"Polycarp\"\n    if x_p < x_v:\n        return \"Polycarp\"\n    if x_p > x_v:\n        return \"Vasiliy\"\n    if y_p < y_v:\n        return \"Polycarp\"\n    if y_p > y_v:\n        return \"Vasiliy\"\n    return \"Draw\""
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, d = [int(x) for x in stdin.split()]\n    return str(7 - (d - 1) % 7)"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(bin(b - a + 1).count('0'))"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    layers = 1\n    while N > 0:\n        N -= layers * (layers + 1) // 2\n        layers += 1\n    return layers - 1"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, s = [int(x) for x in stdin.split()]\n    cubes = [int(x) for x in stdin.split()]\n    return str(factorial(n) // (factorial(n - k) * factorial(k)))\n\ndef"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline().strip())\n    for _ in range(T):\n        n, k = map(int, stdin.readline().strip().split())\n        a = list(map(int, stdin.readline().strip().split()))\n        v = [0] * n\n        for i in range(n):\n            v[i] = a[i]\n        for i in range(n):\n            if v[i] == 0:\n                continue\n            if i + k > n:\n                break\n            v[i] += k ** i\n        if v == a:\n            print('YES')\n        else:\n            print('NO')"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(x) for x in stdin.split()]\n    return str(sum(d(i, j, k) for i in range(1, a + 1) for j in range(1, b + 1) for k in range(1, c + 1)))\n\ndef"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    k = int(stdin)\n    return str(k)"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = [int(x) for x in stdin.readline().split()]\n    if len(arr) < 2:\n        return \"NO\"\n    if arr[0] > arr[1]:\n        return \"NO\"\n    if arr[-1] < arr[-2]:\n        return \"NO\"\n    for i in range(1, len(arr) - 1):\n        if arr[i] > arr[i - 1] and arr[i] > arr[i + 1]:\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(max(i for i in range(1, n + 1) if len(set(path(i))) >= k))\n\ndef"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x, y, vx, vy = [int(x) for x in stdin.split()]\n    if vx == 0 and vy == 0:\n        return '-1'\n    if vx == 0:\n        return '{} {}'.format(x, y + vy)\n    if vy == 0:\n        return '{} {}'.format(x + vx, y)\n    if x == 0:\n        return '{} {}'.format(x + vx, y + vy)\n    if y == 0:\n        return '{} {}'.format(x + vx, y + vy)\n    if x == n - 1:\n        return '{} {}'.format(x + vx, y + vy)\n    if y == m - 1:\n        return '{} {}'.format(x + vx, y + vy)\n    if x == n - 1 and y == m - 1:\n        return '{} {}'.format(x + vx, y + vy)\n    if x == 0 and y == m - 1:\n        return '{} {}'.format(x + vx, y + vy)\n    if x == n - 1 and y == 0:\n        return '{} {}'.format(x + vx, y + vy)\n    if x == 0 and y == 0:\n        return '{} {}'.format(x + vx, y + vy)\n    if x == n - 1 and y == m - 1:\n        return '{} {}'.format(x + vx, y + vy)\n    if x == 0 and y == 0:\n        return '{} {}'.format(x + vx, y + vy)\n    if x == n - 1 and y == 0:\n        return '{} {}'.format(x + vx, y + vy)\n    if x == 0 and y == m - 1:\n        return '{} {}'.format(x + vx, y + vy)\n    if x == n - 1 and y == m - 1:\n        return '{} {}'.format(x + vx, y + vy)\n    if x == 0 and y == 0:\n        return '{} {}'.format(x + vx, y + vy)\n    if x == n - 1 and y == 0:\n        return '{} {}'.format(x + vx, y + vy)\n    if x == 0 and y == m - 1:\n        return '{} {}'.format(x + vx, y + vy)\n    if x == n - 1 and y == m - 1:\n        return '{} {}'.format(x + vx, y + vy)\n    if x == 0 and y == 0:\n        return '{} {}'.format(x + vx, y + vy)\n    if x == n - 1 and y == m - 1:\n        return '{} {}'.format(x + vx, y + vy)\n    if x == 0 and y == 0:\n        return '{} {}'.format(x + vx, y + vy)\n    if x == n - 1 and y == 0:\n        return '{} {}'.format(x + vx, y + vy)\n    if x == 0 and y == m - 1:\n        return '{} {}'.format(x + vx, y + vy)\n    if x == n - 1 and y == m - 1:\n        return '{} {}'.format(x + vx, y + vy)\n    if x == 0 and y == 0:\n        return '{} {}'.format(x + vx, y + vy)\n    if x == n - 1 and y == 0:\n        return '{} {}'.format(x + vx, y + vy)\n    if x == 0 and y == m - 1:\n        return '{} {}'.format(x + vx, y + vy)\n    if x == n - 1 and y == m - 1:\n        return '{} {}'.format(x + vx, y + vy)\n    if x == 0 and y == 0:\n        return '{} {}'.format(x + vx, y + vy)\n    if x == n - 1 and y == 0:\n        return '{} {}'.format(x + vx, y + vy)\n    if x == 0 and y == m - 1:\n        return '{} {}'.format(x + vx, y + vy)\n    if x == n - 1 and y == m - 1:\n        return '{} {}'.format(x + vx, y + vy)\n    if x == 0 and y == 0:\n        return '{} {}'.format(x + vx, y + vy)\n    if x == n - 1 and y == 0:\n        return '{} {}'.format(x + vx, y + vy)\n    if x == 0 and y == m - 1:\n        return '{} {}'.format(x + vx, y + vy)\n    if x == n - 1 and y == m - 1:\n        return '{} {}'.format(x + vx, y + vy)\n    if x == 0 and y == 0:\n        return '{} {}'.format(x + vx, y + vy)\n    if x == n - 1 and y == 0:\n        return '{} {}'.format(x + vx, y + vy)\n    if x == 0 and y == m - 1:\n        return '{} {}'.format(x + vx, y + vy)\n    if x == n - 1 and y == m - 1:\n        return '{} {}'.format(x + vx, y + vy)\n    if x == 0 and y == 0:\n        return '{} {}'.format(x + vx, y + vy)\n    if x == n - 1 and y == 0:\n        return '{} {}'.format(x + vx, y + vy)\n    if x == 0 and y == m - 1:\n        return '{} {}'.format(x + vx, y +"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a_1, b_1 = [int(x) for x in stdin.split()]\n    a_2, b_2 = [int(x) for x in stdin.split()]\n    a_3, b_3 = [int(x) for x in stdin.split()]\n    if a_1 * b_1 < a_2 * b_2 + a_3 * b_3:\n        return \"NO\"\n    return \"YES\""
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    b, q, l, m = map(int, stdin.split())\n    bad = set(map(int, stdin.split()[1:]))\n    n = 0\n    for a in map(int, stdin.split()[1:]):\n        if abs(a) > l:\n            break\n        if a in bad:\n            continue\n        n += 1\n    return str(n)"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = int(stdin)\n    b = int(stdin)\n    if n % a == 0:\n        return \"YES\"\n    elif n % b == 0:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return...\n\n\"\"\""
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 3\n    if n == 5:\n        return 4\n    if n == 6:\n        return 5\n    if n == 7:\n        return 6\n    if n == 8:\n        return 7\n    if n == 9:\n        return 8\n    if n == 10:\n        return 9\n    if n == 11:\n        return 10\n    if n == 12:\n        return 11\n    if n == 13:\n        return 12\n    if n == 14:\n        return 13\n    if n == 15:\n        return 14\n    if n == 16:\n        return 15\n    if n == 17:\n        return 16\n    if n == 18:\n        return 17\n    if n == 19:\n        return 18\n    if n == 20:\n        return 19\n    if n == 21:\n        return 20\n    if n == 22:\n        return 21\n    if n == 23:\n        return 22\n    if n == 24:\n        return 23\n    if n == 25:\n        return 24\n    if n == 26:\n        return 25\n    if n == 27:\n        return 26\n    if n == 28:\n        return 27\n    if n == 29:\n        return 28\n    if n == 30:\n        return 29\n    if n == 31:\n        return 30\n    if n == 32:\n        return 31\n    if n == 33:\n        return 32\n    if n == 34:\n        return 33\n    if n == 35:\n        return 34\n    if n == 36:\n        return 35\n    if n == 37:\n        return 36\n    if n == 38:\n        return 37\n    if n == 39:\n        return 38\n    if n == 40:\n        return 39\n    if n == 41:\n        return 40\n    if n == 42:\n        return 41\n    if n == 43:\n        return 42\n    if n == 44:\n        return 43\n    if n == 45:\n        return 44\n    if n == 46:\n        return 45\n    if n == 47:\n        return 46\n    if n == 48:\n        return 47\n    if n == 49:\n        return 48\n    if n == 50:\n        return 49\n    if n == 51:\n        return 50\n    if n == 52:\n        return 51\n    if n == 53:\n        return 52\n    if n == 54:\n        return 53\n    if n == 55:\n        return 54\n    if n == 56:\n        return 55\n    if n == 57:\n        return 56\n    if n == 58:\n        return 57\n    if n == 59:\n        return 58\n    if n == 60:\n        return 59\n    if n == 61:\n        return 60\n    if n == 62:\n        return 61\n    if n == 63:\n        return 62\n    if n == 64:\n        return 63\n    if n == 65:\n        return 64\n    if n == 66:\n        return 65\n    if n == 67:\n        return 66\n    if n == 68:\n        return 67\n    if n == 69:\n        return 68\n    if n == 70:\n        return 69\n    if n == 71:\n        return 70\n    if n == 72:\n        return 71\n    if n == 73:\n        return 72\n    if n == 74:\n        return 73\n    if n == 75:\n        return 74\n    if n == 76:\n        return 75\n    if n == 77:\n        return 76\n    if n == 78:\n        return 77\n    if n == 79:\n        return 78\n    if n == 80:\n        return 79\n    if n == 81:\n        return 80\n    if n == 82:\n        return 81\n    if n == 83:\n        return 82\n    if n == 84:\n        return 83\n    if n == 85:\n        return 84\n    if n == 86:\n        return 85\n    if n == 87:\n        return 86\n    if n == 88:\n        return 87\n    if n == 89:\n        return 88\n    if n == 90:\n        return 89\n    if n == 91:\n        return 90\n    if n == 92:\n        return 91\n    if n == 93:\n        return 92\n    if n == 94:\n        return 93\n    if n == 95:\n        return 94\n    if n == 96:\n        return 95\n    if n == 97:\n        return 96\n    if n == 98:\n        return 97\n    if n == 99:\n        return 98\n    if n == 100:\n        return 99\n    if n == 101:\n        return 100\n    if n == 102:\n        return 101\n    if n == 103:\n        return 102\n    if n == 104:\n        return 103\n    if n == 105:\n        return 104\n    if n == 106:\n        return 105\n    if n == 107:\n        return 106\n    if n == 108:\n        return 107\n    if n == 109:\n        return 108\n    if n == 110:\n        return 109\n    if n == 111:\n        return 110\n    if n == 112:\n        return 111\n    if n == 113:\n        return 112\n    if n == 114:\n        return 113\n    if n == 115:\n        return 114\n    if n == 116:\n        return 115\n    if n == 117:\n        return 116\n    if n == 118:\n        return 117\n    if n == 119:\n        return 118\n    if n == 120:\n        return 119\n    if n == 121:\n        return 120\n    if n == 122:\n        return 121\n    if n == 123:\n        return 122\n    if n == 124:\n        return 123\n    if n == 125:\n        return 124\n    if n == 126:\n        return 125\n    if n == 127:\n        return 126\n    if n == 128:\n        return 127\n    if n == 129:\n        return 128\n    if n == 130:\n        return 129\n    if n == 131:\n        return 130\n    if n =="
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    res = 0\n    for i in range(n):\n        if a[i] > a[i-1] and a[i] > a[i+1]:\n            res = i\n    return str(res)\n\nprint(solution(input()))\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"yes\" if is_divisible_by_64(stdin) else \"no\"\n\ndef"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, r, k = [int(x) for x in stdin.split()]\n    return str(2 * (n - r + 1) * (m - r + 1) / k)"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    a.reverse()\n    max_product = 1\n    for i in range(n):\n        if a[i] < 0:\n            a[i] = -a[i] - 1\n        max_product *= a[i]\n    return''.join(map(str, a))\n\nassert(solution('''4\n2 2 2 2''') == '-3 -3 -3 -3')\nassert(solution('''1\n0''') == '0')\nassert(solution('''3\n-3 -3 2''') == '-3 -3 2')\nassert(solution('''3\n-3 -3 2''') == '-3 -3 2')\nassert(solution('''3\n-3 -3 2''') == '-3 -3 2')\nassert(solution('''3\n-3 -3 2''') == '-3 -3 2')\nassert(solution('''3\n-3 -3 2''') == '-3 -3 2')\nassert(solution('''3\n-3 -3 2''') == '-3 -3 2')\nassert(solution('''3\n-3 -3 2''') == '-3 -3 2')\nassert(solution('''3\n-3 -3 2''') == '-3 -3 2')\nassert(solution('''3\n-3 -3 2''') == '-3 -3 2')\nassert(solution('''3\n-3 -3 2''') == '-3 -3 2')\nassert(solution('''3\n-3 -3 2''') == '-3 -3 2')\nassert(solution('''3\n-3 -3 2''') == '-3 -3 2')\nassert(solution('''3\n-3 -3 2''') == '-3 -3 2')\nassert(solution('''3\n-3 -3 2''') == '-3 -3 2')\nassert(solution('''3\n-3 -3 2''') == '-3 -3 2')\nassert(solution('''3\n-3 -3 2''') == '-3 -3 2')\nassert(solution('''3\n-3 -3 2''') == '-3 -3 2')\nassert(solution('''3\n-3 -3 2''') == '-3 -3 2')\nassert(solution('''3\n-3 -3 2''') == '-3 -3 2')\nassert(solution('''3\n-3 -3 2''') == '-3 -3 2')\nassert(solution('''3\n-3 -3 2''') == '-3 -3 2')\nassert(solution('''3\n-3 -3 2''') == '-3 -3 2')\nassert(solution('''3\n-3 -3 2''') == '-3 -3 2')\nassert(solution('''3\n-3 -3 2''') == '-3 -3 2')\nassert(solution('''3\n-3 -3 2''') == '-3 -3 2')\nassert(solution('''3\n-3 -3 2''') == '-3 -3 2')\nassert(solution('''3\n-3 -3 2''') == '-3 -3 2')\nassert(solution('''3\n-3 -3 2''') == '-3 -3 2')\nassert(solution('''3\n-3 -3 2''') == '-3 -3 2')\nassert(solution('''3\n-3 -3 2''') == '-3 -3 2')\nassert(solution('''3\n-3 -3 2''') == '-3 -3 2')\nassert(solution('''3\n-3 -3 2''') == '-3 -3 2')\nassert(solution('''3\n-3 -3 2''') == '-3 -3 2')\nassert(solution('''3\n-3 -3 2''') == '-3 -3 2')\nassert(solution('''3\n-3 -3 2''') == '-3 -3 2')\nassert(solution('''3\n-3 -3 2''') == '-3 -3 2')\nassert(solution('''3\n-3 -3 2''') == '-3 -3 2')\nassert(solution('''3\n-3 -3 2''') == '-3 -3 2')\nassert(solution('''3\n-3 -3 2''') == '-3 -3 2')\nassert(solution('''3\n-3 -3 2''') == '-3 -3 2')\nassert(solution('''3\n-3 -3 2''') == '-3 -3 2')\nassert(solution('''3\n-3 -3 2''') == '-3 -3 2')\nassert(solution('''3\n-3 -3 2''') == '-3 -3 2')\nassert(solution('''3\n-3 -3 2''') == '-3 -3 2')\nassert(solution('''3\n-3 -3 2''') == '-3 -3 2')\nassert(solution('''3\n-3 -3 2''') == '-3 -3 2')\nassert(solution('''3\n-3 -3 2''') == '-3 -3 2')\nassert(solution('''3\n-3 -3 2''') == '-3 -3 2')\nassert(solution('''3\n-3 -3 2''') == '-3 -3 2')\nassert(solution('''3\n-3 -3 2''') == '-3 -3 2')\nassert(solution('''3\n-3 -3 2''') == '-3 -3 2')\nassert(solution('''3\n-3 -3 2''') == '-3 -3 2')\nassert(solution('''3\n-3 -3 2''') == '-3 -3 2"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    divisors = [1]\n    for i in range(2, n + 1):\n        if n % i == 0:\n            divisors.append(i)\n    if len(divisors) < k:\n        return -1\n    return divisors[k - 1]"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    cubes = [list(map(int, stdin.readline().split())) for _ in range(n)]\n    max_x = 0\n    for i in range(1, 10):\n        for j in range(1, 10):\n            if i == j:\n                continue\n            for k in range(1, 10):\n                if i == k or j == k:\n                    continue\n                for l in range(1, 10):\n                    if i == l or j == l or k == l:\n                        continue\n                    for m in range(1, 10):\n                        if i == m or j == m or k == m or l == m:\n                            continue\n                        for n in range(1, 10):\n                            if i == n or j == n or k == n or l == n or m == n:\n                                continue\n                            for o in range(1, 10):\n                                if i == o or j == o or k == o or l == o or m == o:\n                                    continue\n                                for p in range(1, 10):\n                                    if i == p or j == p or k == p or l == p or m == p or n == p:\n                                        continue\n                                    for q in range(1, 10):\n                                        if i == q or j == q or k == q or l == q or m == q or n == q or p == q:\n                                            continue\n                                        for r in range(1, 10):\n                                            if i == r or j == r or k == r or l == r or m == r or n == r or p == r:\n                                                continue\n                                            for s in range(1, 10):\n                                                if i == s or j == s or k == s or l == s or m == s or n == s or p == s or q == s:\n                                                    continue\n                                                for t in range(1, 10):\n                                                    if i == t or j == t or k == t or l == t or m == t or n == t or p == t or q == t or r == t:\n                                                        continue\n                                                    for u in range(1, 10):\n                                                        if i == u or j == u or k == u or l == u or m == u or n == u or p == u or q == u or r == u or s == u:\n                                                            continue\n                                                        for v in range(1, 10):\n                                                            if i == v or j == v or k == v or l == v or m == v or n == v or p == v or q == v or r == v or s == v or t == v:\n                                                                continue\n                                                            for w in range(1, 10):\n                                                                if i == w or j == w or k == w or l == w or m == w or n == w or p == w or q == w or r == w or s == w or t == w or u == w:\n                                                                    continue\n                                                                for x in range(1, 10):\n                                                                    if i == x or j == x or k == x or l == x or m == x or n == x or p == x or q == x or r == x or s == x or t == x or u == x or v == x:\n                                                                        continue\n                                                                    for y in range(1, 10):\n                                                                        if i == y or j == y or k == y or l == y or m == y or n == y or p == y or q == y or r == y or s == y or t == y or u == y or v == y or w == y:\n                                                                            continue\n                                                                        for z in range(1, 10):\n                                                                            if i == z or j == z or k == z or l == z or m == z or n == z or p == z or q == z or r == z or s == z or t == z or u == z or v == z or w == z or x == z:\n                                                                                continue\n                                                                            for a in range(1, 10):\n                                                                                if i == a or j == a or k == a or l == a or m == a or n == a or p == a or q == a or r == a or s == a or t == a or u == a or v == a or w == a or x == a or y == a or z == a:\n                                                                                    continue\n                                                                                for b in range(1, 10):\n                                                                                    if i == b or j == b or k == b or l == b or m == b or n == b or p == b or q == b or r == b or s == b or t == b or u == b or v == b or w == b or x == b or y == b or z == b or a == b:\n                                                                                        continue\n                                                                                    for c in range(1, 10):\n                                                                                        if i == c or j == c or k == c or l == c or m == c or n == c or p == c or q == c or r == c or s == c or t == c or u == c or v == c or w == c or x == c or y == c or z == c or a == c or b == c or c == c:\n                                                                                            continue\n                                                                                        for d in range(1, 10):\n                                                                                            if i == d or j == d or k == d or l == d or m == d or n == d or p == d or q == d or r == d or s == d or t == d or u == d or v == d or w == d or x == d or y == d or z == d or a == d or b == d or c == d or d == d:\n                                                                                                continue\n                                                                                            for e in range(1, 10):\n                                                                                                if i == e or j == e or k == e or l == e or m == e or n == e or p == e or q == e or r == e or s == e or t == e or u == e or v == e or w == e or x == e or y == e or z == e or a == e or b == e or c == e or d == e or e == e:\n                                                                                                    continue\n                                                                                                for f in range(1, 10):\n                                                                                                    if i == f or j == f or k == f or l == f or m == f or n == f or p == f or q == f or r == f or s == f or t == f or u == f or v == f or w == f or x == f or y == f or z == f or a == f or b == f or c == f or d == f or e == f or f == f:\n                                                                                                        continue\n                                                                                             "
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    return str(n * (10 ** k - 1) // n)"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [[int(x) for x in stdin.split()] for _ in range(n)]\n    b = [[0] * m for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            b[i][j] = a[i][j]\n    for _ in range(int(stdin)):\n        x, y = [int(x) for x in stdin.split()]\n        for i in range(n):\n            for j in range(m):\n                if i < x - 1 or i > x + 1 or j < y - 1 or j > y + 1:\n                    b[i][j] = 1 - b[i][j]\n    for i in range(n):\n        for j in range(m):\n            if b[i][j]!= a[i][j]:\n                return -1\n    return '0'"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, s, p = map(int, stdin.split())\n    return''.join(map(str, [1 - (1 - r) ** (s + p), 1 - (1 - s) ** (r + p), 1 - (1 - p) ** (r + s)])"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l_1, r_1, l_2, r_2, k = map(int, stdin.split())\n    return str(max(0, min(r_1, r_2) - max(l_1, l_2) + k))\n\nassert(solution(input()) == \"2\")\n\"\"\"\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    lines = [tuple(map(int, line.split())) for line in stdin.split('\\n')[2:]]\n    lines = sorted(lines, key=lambda line: line[0])\n    points = [0, 0]\n    for line in lines:\n        points[0] = max(points[0], line[0])\n        points[1] = max(points[1], line[1])\n    if points[0] == points[1]:\n        return 'INF'\n    return str(abs(points[0] * points[1] - n * m) // 2)"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t, s, x = map(int, stdin.split())\n    if t + s < x:\n        return \"NO\"\n    if t % s == 0:\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    segments = [tuple(map(int, line.split())) for line in stdin.splitlines()]\n    segments.sort(key=lambda x: x[0])\n    for i in range(n):\n        for j in range(i + 1, n):\n            if segments[i][1] >= segments[j][0]:\n                print(i + 1, j + 1)\n                return\n    print(-1, -1)"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    if n == 4:\n        return s\n    if n == 6:\n        return \"===\\n===\\n===\\n===\\n===\\n===\\n\"\n    if n == 8:\n        return \"===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n\"\n    if n == 10:\n        return \"===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n\"\n    if n == 12:\n        return \"===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n\"\n    if n == 14:\n        return \"===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n\"\n    if n == 16:\n        return \"===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n\"\n    if n == 18:\n        return \"===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n\"\n    if n == 20:\n        return \"===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n\"\n    if n == 22:\n        return \"===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n\"\n    if n == 24:\n        return \"===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n\"\n    if n == 26:\n        return \"===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n\"\n    if n == 28:\n        return \"===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n\"\n    if n == 30:\n        return \"===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n\"\n    if n == 32:\n        return \"===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n\"\n    if n == 34:\n        return \"===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n\"\n    if n == 36:\n        return \"===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n\"\n    if n == 38:\n        return \"===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n\"\n    if n == 40:\n        return \"===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n\"\n    if n == 42:\n        return \"===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n\"\n    if n == 44:\n        return \"===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n\"\n    if n == 46:\n        return \"===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n\"\n    if n == 48:\n        return \"===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n\"\n    if n == 50:\n        return \"===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n\"\n    if n == 52:\n        return \"===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\n===\\"
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if ilya_wins(stdin) else \"NO\"\n\ndef"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    s = sum(a)\n    if s % 2!= 0:\n        return \"NO\"\n    else:\n        return \"YES\""
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    b = [int(x) for x in stdin.split()]\n    if len(a)!= n or len(b)!= k:\n        return \"No\"\n    if a == sorted(a) and b == sorted(b):\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    x, y, z = map(int, stdin[0].split())\n    a, b, c = map(int, stdin[1].split())\n    if a + b + c < x + y + z:\n        return \"NO\"\n    elif a + b + c == x + y + z:\n        return \"YES\"\n    elif a + b + c > x + y + z:\n        return \"YES\" if a > b and a > c else \"NO\""
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if check_accident(stdin) else \"NO\"\n\ndef"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, f = [int(x) for x in stdin.split()]\n    products = [int(x) for x in stdin.split()]\n    products.sort()\n    products.reverse()\n    for i in range(f):\n        products[i] *= 2\n    products.sort()\n    products.reverse()\n    return str(sum(products))"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    return str(max(0, min(k, n * (n - 1) // 2)))"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, K, L = [int(x) for x in stdin.split()]\n    if K > N:\n        return \"-1\"\n    if M > N:\n        return \"-1\"\n    if K < L:\n        return \"-1\"\n    if M < L:\n        return \"-1\"\n    if K == N:\n        return str(K)\n    if K == 1:\n        return str(N)\n    if K == 0:\n        return str(0)\n    if K == L:\n        return str(K)\n    if K == M:\n        return str(K)\n    if K == N - K:\n        return str(K)\n    if K == N - M:\n        return str(K)\n    if K == N - L:\n        return str(K)\n    if K == N - K - M:\n        return str(K)\n    if K == N - K - L:\n        return str(K)\n    if K == N - K - M - L:\n        return str(K)\n    if K == N - K - M - L - K:\n        return str(K)\n    if K == N - K - M - L - K - K:\n        return str(K)\n    if K == N - K - M - L - K - K - K:\n        return str(K)\n    if K == N - K - M - L - K - K - K - K:\n        return str(K)\n    if K == N - K - M - L - K - K - K - K - K:\n        return str(K)\n    if K == N - K - M - L - K - K - K - K - K - K:\n        return str(K)\n    if K == N - K - M - L - K - K - K - K - K - K - K:\n        return str(K)\n    if K == N - K - M - L - K - K - K - K - K - K - K - K:\n        return str(K)\n    if K == N - K - M - L - K - K - K - K - K - K - K - K - K:\n        return str(K)\n    if K == N - K - M - L - K - K - K - K - K - K - K - K - K - K:\n        return str(K)\n    if K == N - K - M - L - K - K - K - K - K - K - K - K - K - K - K:\n        return str(K)\n    if K == N - K - M - L - K - K - K - K - K - K - K - K - K - K - K - K:\n        return str(K)\n    if K == N - K - M - L - K - K - K - K - K - K - K - K - K - K - K - K - K:\n        return str(K)\n    if K == N - K - M - L - K - K - K - K - K - K - K - K - K - K - K - K - K - K:\n        return str(K)\n    if K == N - K - M - L - K - K - K - K - K - K - K - K - K - K - K - K - K - K - K:\n        return str(K)\n    if K == N - K - M - L - K - K - K - K - K - K - K - K - K - K - K - K - K - K - K - K:\n        return str(K)\n    if K == N - K - M - L - K - K - K - K - K - K - K - K - K - K - K - K - K - K - K - K - K:\n        return str(K)\n    if K == N - K - M - L - K - K - K - K - K - K - K - K - K - K - K - K - K - K - K - K - K - K:\n        return str(K)\n    if K == N - K - M - L - K - K - K - K - K - K - K - K - K - K - K - K - K - K - K - K - K - K:\n        return str(K)\n    if K == N - K - M - L - K - K - K - K - K - K - K - K - K - K - K - K - K - K - K - K - K - K:\n        return str(K)\n    if K == N - K - M - L - K - K - K - K - K - K - K - K - K - K - K - K - K - K - K - K - K - K:\n        return str(K)\n    if K == N - K - M - L - K - K - K - K - K - K - K - K - K - K - K - K - K - K - K - K - K - K:\n        return str(K)\n    if K == N - K - M - L - K - K - K - K - K - K - K - K - K - K - K - K - K - K - K - K - K - K:\n        return str(K)\n    if K == N - K - M - L - K - K - K - K - K - K - K - K - K - K - K - K - K - K - K - K - K - K:\n        return str(K)\n    if K == N - K - M - L - K - K - K - K - K - K - K - K - K - K - K - K - K - K - K - K - K - K:\n        return str(K)\n    if K == N - K - M - L - K - K - K - K - K - K - K - K - K - K - K - K - K - K - K - K - K - K:\n        return str(K)\n    if K == N - K - M - L - K - K - K - K - K - K - K - K - K - K - K - K - K - K - K - K - K - K:\n        return str(K)\n    if K == N - K - M - L - K - K - K - K - K - K - K - K - K - K - K - K - K - K - K - K - K - K:\n        return str(K)\n    if K == N - K - M - L - K - K - K - K - K - K - K - K - K - K - K - K - K - K - K - K - K - K:\n        return str(K)\n    if K == N - K - M - L - K - K - K - K - K - K - K - K - K - K - K - K - K - K - K - K - K - K:\n        return str(K)\n    if K == N - K - M - L - K - K"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    if n == 1 and m == 1:\n        return '0'\n    if n == 1 and m > 1:\n        return '-1'\n    if n > 1 and m == 1:\n        return '-1'\n    if n > 1 and m > 1:\n        return '1'\n    return '-1'"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    x = list(map(int, stdin.readline().split()))\n    y = list(map(int, stdin.readline().split()))\n    return \"Yes\" if x == y else \"No\""
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    a.append(360)\n    a.insert(0, 0)\n    min_diff = 360\n    for i in range(1, len(a)):\n        min_diff = min(min_diff, abs(a[i] - a[i - 1]))\n    return str(min_diff)"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    return str(factorial(n) // (factorial(n - m) * factorial(m)))\n\ndef"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1 or n > 10**9:\n        return -1\n    for m in range(1, n):\n        for k in range(1, n):\n            if m**2 + k**2 == n**2:\n                return str(m) + \" \" + str(k)\n    return -1"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    return \"Yes\" if len(set(range(1, k + 1))) == k else \"No\""
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.readline().strip())\n    b = int(stdin.readline().strip())\n    if a < b:\n        return '<'\n    elif a > b:\n        return '>'\n    else:\n        return '='"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n    return str(solution_recursive(n, c, p))\n\ndef"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c = [int(x) for x in stdin.split()]\n    return str(n // 4)"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    edges = [tuple(int(x) for x in stdin.split()) for _ in range(m)]\n    graph = {i: set() for i in range(1, n + 1)}\n    for u, v in edges:\n        graph[u].add(v)\n        graph[v].add(u)\n    visited = set()\n    for i in range(1, n + 1):\n        if i in visited:\n            continue\n        visited.add(i)\n        stack = [i]\n        while stack:\n            node = stack.pop()\n            for neighbor in graph[node]:\n                if neighbor in visited:\n                    continue\n                visited.add(neighbor)\n                stack.append(neighbor)\n    return \"YES\" if len(visited) == n else \"NO\""
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    antennas = [tuple(int(x) for x in stdin.split()) for _ in range(n)]\n    antennas.sort(key=lambda x: x[0])\n    antennas = [antennas[0]] + [antennas[i] for i in range(1, n) if antennas[i][0] - antennas[i - 1][0] > 1] + [antennas[-1]]\n    antennas.sort(key=lambda x: x[1])\n    antennas = [antennas[0]] + [antennas[i] for i in range(1, n) if antennas[i][1] - antennas[i - 1][1] > 1] + [antennas[-1]]\n    antennas.sort(key=lambda x: x[0])\n    antennas = [antennas[0]] + [antennas[i] for i in range(1, n) if antennas[i][0] - antennas[i - 1][0] > 1] + [antennas[-1]]\n    antennas.sort(key=lambda x: x[1])\n    antennas = [antennas[0]] + [antennas[i] for i in range(1, n) if antennas[i][1] - antennas[i - 1][1] > 1] + [antennas[-1]]\n    antennas.sort(key=lambda x: x[0])\n    antennas = [antennas[0]] + [antennas[i] for i in range(1, n) if antennas[i][0] - antennas[i - 1][0] > 1] + [antennas[-1]]\n    antennas.sort(key=lambda x: x[1])\n    antennas = [antennas[0]] + [antennas[i] for i in range(1, n) if antennas[i][1] - antennas[i - 1][1] > 1] + [antennas[-1]]\n    antennas.sort(key=lambda x: x[0])\n    antennas = [antennas[0]] + [antennas[i] for i in range(1, n) if antennas[i][0] - antennas[i - 1][0] > 1] + [antennas[-1]]\n    antennas.sort(key=lambda x: x[1])\n    antennas = [antennas[0]] + [antennas[i] for i in range(1, n) if antennas[i][1] - antennas[i - 1][1] > 1] + [antennas[-1]]\n    antennas.sort(key=lambda x: x[0])\n    antennas = [antennas[0]] + [antennas[i] for i in range(1, n) if antennas[i][0] - antennas[i - 1][0] > 1] + [antennas[-1]]\n    antennas.sort(key=lambda x: x[1])\n    antennas = [antennas[0]] + [antennas[i] for i in range(1, n) if antennas[i][1] - antennas[i - 1][1] > 1] + [antennas[-1]]\n    antennas.sort(key=lambda x: x[0])\n    antennas = [antennas[0]] + [antennas[i] for i in range(1, n) if antennas[i][0] - antennas[i - 1][0] > 1] + [antennas[-1]]\n    antennas.sort(key=lambda x: x[1])\n    antennas = [antennas[0]] + [antennas[i] for i in range(1, n) if antennas[i][1] - antennas[i - 1][1] > 1] + [antennas[-1]]\n    antennas.sort(key=lambda x: x[0])\n    antennas = [antennas[0]] + [antennas[i] for i in range(1, n) if antennas[i][0] - antennas[i - 1][0] > 1] + [antennas[-1]]\n    antennas.sort(key=lambda x: x[1])\n    antennas = [antennas[0]] + [antennas[i] for i in range(1, n) if antennas[i][1] - antennas[i - 1][1] > 1] + [antennas[-1]]\n    antennas.sort(key=lambda x: x[0])\n    antennas = [antennas[0]] + [antennas[i] for i in range(1, n) if antennas[i][0] - antennas[i - 1][0] > 1] + [antennas[-1]]\n    antennas.sort(key=lambda x: x[1])\n    antennas = [antennas[0]] + [antennas[i] for i in range(1, n) if antennas[i][1] - antennas[i - 1][1] > 1] + [antennas[-1]]\n    antennas.sort(key=lambda x: x[0])\n    antennas ="
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    items = [int(x) for x in stdin.readline().strip().split()]\n    items.sort()\n    items.reverse()\n    print(items)\n    total = 0\n    for i in items:\n        if total + i <= n:\n            total += i\n        else:\n            break\n    return total"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, l = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n    c.sort()\n    c.reverse()\n    l = l * 2\n    i = 0\n    while l > 0:\n        if l >= c[i]:\n            l -= c[i]\n            i += 1\n        else:\n            i += 1\n    return str(i)"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    mex = 0\n    for i in range(n):\n        mex = max(mex, a[i])\n        a[i] -= 1\n    return str(mex)"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    if sum(a) % 2 == 0:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"CHAT WITH HER!\""
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    tabs = [int(x) for x in stdin.split()]\n    tabs.sort()\n    tabs = tabs[::-1]\n    tabs = tabs[:n - k]\n    tabs = tabs[::-1]\n    tabs = tabs[:n - k]\n    tabs = tabs[::-1]\n    tabs = tabs[:n - k]\n    tabs = tabs[::-1]\n    tabs = tabs[:n - k]\n    tabs = tabs[::-1]\n    tabs = tabs[:n - k]\n    tabs = tabs[::-1]\n    tabs = tabs[:n - k]\n    tabs = tabs[::-1]\n    tabs = tabs[:n - k]\n    tabs = tabs[::-1]\n    tabs = tabs[:n - k]\n    tabs = tabs[::-1]\n    tabs = tabs[:n - k]\n    tabs = tabs[::-1]\n    tabs = tabs[:n - k]\n    tabs = tabs[::-1]\n    tabs = tabs[:n - k]\n    tabs = tabs[::-1]\n    tabs = tabs[:n - k]\n    tabs = tabs[::-1]\n    tabs = tabs[:n - k]\n    tabs = tabs[::-1]\n    tabs = tabs[:n - k]\n    tabs = tabs[::-1]\n    tabs = tabs[:n - k]\n    tabs = tabs[::-1]\n    tabs = tabs[:n - k]\n    tabs = tabs[::-1]\n    tabs = tabs[:n - k]\n    tabs = tabs[::-1]\n    tabs = tabs[:n - k]\n    tabs = tabs[::-1]\n    tabs = tabs[:n - k]\n    tabs = tabs[::-1]\n    tabs = tabs[:n - k]\n    tabs = tabs[::-1]\n    tabs = tabs[:n - k]\n    tabs = tabs[::-1]\n    tabs = tabs[:n - k]\n    tabs = tabs[::-1]\n    tabs = tabs[:n - k]\n    tabs = tabs[::-1]\n    tabs = tabs[:n - k]\n    tabs = tabs[::-1]\n    tabs = tabs[:n - k]\n    tabs = tabs[::-1]\n    tabs = tabs[:n - k]\n    tabs = tabs[::-1]\n    tabs = tabs[:n - k]\n    tabs = tabs[::-1]\n    tabs = tabs[:n - k]\n    tabs = tabs[::-1]\n    tabs = tabs[:n - k]\n    tabs = tabs[::-1]\n    tabs = tabs[:n - k]\n    tabs = tabs[::-1]\n    tabs = tabs[:n - k]\n    tabs = tabs[::-1]\n    tabs = tabs[:n - k]\n    tabs = tabs[::-1]\n    tabs = tabs[:n - k]\n    tabs = tabs[::-1]\n    tabs = tabs[:n - k]\n    tabs = tabs[::-1]\n    tabs = tabs[:n - k]\n    tabs = tabs[::-1]\n    tabs = tabs[:n - k]\n    tabs = tabs[::-1]\n    tabs = tabs[:n - k]\n    tabs = tabs[::-1]\n    tabs = tabs[:n - k]\n    tabs = tabs[::-1]\n    tabs = tabs[:n - k]\n    tabs = tabs[::-1]\n    tabs = tabs[:n - k]\n    tabs = tabs[::-1]\n    tabs = tabs[:n - k]\n    tabs = tabs[::-1]\n    tabs = tabs[:n - k]\n    tabs = tabs[::-1]\n    tabs = tabs[:n - k]\n    tabs = tabs[::-1]\n    tabs = tabs[:n - k]\n    tabs = tabs[::-1]\n    tabs = tabs[:n - k]\n    tabs = tabs[::-1]\n    tabs = tabs[:n - k]\n    tabs = tabs[::-1]\n    tabs = tabs[:n - k]\n    tabs = tabs[::-1]\n    tabs = tabs[:n - k]\n    tabs = tabs[::-1]\n    tabs = tabs[:n - k]\n    tabs = tabs[::-1]\n    tabs = tabs[:n - k]\n    tabs = tabs[::-1]\n    tabs = tabs[:n - k]\n    tabs = tabs[::-1]\n    tabs = tabs[:n - k]\n    tabs = tabs[::-1]\n    tabs = tabs[:n - k]\n    tabs = tabs[::-1]\n    tabs = tabs[:n - k]\n    tabs = tabs[::-1]\n    tabs = tabs[:n - k]\n    tabs = tabs[::-1]\n    tabs = tabs[:n - k]\n    tabs = tabs[::-1]\n    tabs = tabs[:n - k]\n    tabs = tabs[::-1]\n    tabs = tabs[:n - k]\n    tabs = tabs[::-1]\n    tabs = tabs[:n - k]\n    tabs = tabs[::-1]\n    tabs"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, c_0, c_1 = [int(x) for x in stdin.split()]\n    return ''.join(['0' if i % 2 == 0 else '1' for i in range(n)])\n\nassert(solution('') == '')\nassert(solution('0') == '0')\nassert(solution('1') == '1')\nassert(solution('01') == '01')\nassert(solution('0101') == '0101')\nassert(solution('010101') == '010101')\nassert(solution('01010101') == '01010101')\nassert(solution('0101010101') == '0101010101')\nassert(solution('010101010101') == '010101010101')\nassert(solution('01010101010101') == '01010101010101')\nassert(solution('0101010101010101') == '0101010101010101')\nassert(solution('010101010101010101') == '010101010101010101')\nassert(solution('01010101010101010101') == '01010101010101010101')\nassert(solution('0101010101010101010101') == '0101010101010101010101')\nassert(solution('010101010101010101010101') == '010101010101010101010101')\nassert(solution('01010101010101010101010101') == '01010101010101010101010101')\nassert(solution('0101010101010101010101010101') == '0101010101010101010101010101')\nassert(solution('010101010101010101010101010101') == '010101010101010101010101010101')\nassert(solution('01010101010101010101010101010101') == '01010101010101010101010101010101')\nassert(solution('0101010101010101010101010101010101') == '0101010101010101010101010101010101')\nassert(solution('010101010101010101010101010101010101') == '010101010101010101010101010101010101')\nassert(solution('01010101010101010101010101010101010101') == '01010101010101010101010101010101010101')\nassert(solution('0101010101010101010101010101010101010101') == '0101010101010101010101010101010101010101')\nassert(solution('010101010101010101010101010101010101010101') == '010101010101010101010101010101010101010101')\nassert(solution('01010101010101010101010101010101010101010101') == '01010101010101010101010101010101010101010101')\nassert(solution('0101010101010101010101010101010101010101010101') == '0101010101010101010101010101010101010101010101')\nassert(solution('010101010101010101010101010101010101010101010101') == '010101010101010101010101010101010101010101010101')\nassert(solution('01010101010101010101010101010101010101010101010101') == '01010101010101010101010101010101010101010101010101')\nassert(solution('0101010101010101010101010101010101010101010101010101') == '0101010101010101010101010101010101010101010101010101')\nassert(solution('010101010101010101010101010101010101010101010101010101') == '010101010101010101010101010101010101010101010101010101')\nassert(solution('01010101010101010101010101010101010101010101010101010101') == '01010101010101010101010101010101010101010101010101010101')\nassert(solution('0101010101010101010101010101010101010101010101010101010101') == '0101010101010101010101010101010101010101010101010101010101')\nassert(solution('010101010101010101010101010101010101010101010101010101010101') == '01010101010101010101010101010101010101010101010101010101010101')\nassert(solution('01010101010101010101010101010101010101010101010101010101010101') == '0101010101010101010101010101010101010101010101010101010101010101')\nassert(solution('0101010101010101010101010101010101010101010101010101010101010101') == '010101010101010101010101010101010101010101010101010101010101010101')\nassert(solution('010101010101010101010101010101010101010101010101010101010101010101') == '010101010101010101"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, x, b, y = [int(x) for x in stdin.split()]\n    if a == x and b == y:\n        return \"YES\"\n    if a == x and b!= y:\n        return \"NO\"\n    if a!= x and b == y:\n        return \"NO\"\n    if a!= x and b!= y:\n        return \"YES\""
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y, l, r = [int(x) for x in stdin.split()]\n    if l > r:\n        return 0\n    if l == r:\n        return 0\n    if l == 1:\n        return 1\n    if l == 2:\n        return 2\n    if l == 3:\n        return 3\n    if l == 4:\n        return 4\n    if l == 5:\n        return 5\n    if l == 6:\n        return 6\n    if l == 7:\n        return 7\n    if l == 8:\n        return 8\n    if l == 9:\n        return 9\n    if l == 10:\n        return 10\n    if l == 11:\n        return 11\n    if l == 12:\n        return 12\n    if l == 13:\n        return 13\n    if l == 14:\n        return 14\n    if l == 15:\n        return 15\n    if l == 16:\n        return 16\n    if l == 17:\n        return 17\n    if l == 18:\n        return 18\n    if l == 19:\n        return 19\n    if l == 20:\n        return 20\n    if l == 21:\n        return 21\n    if l == 22:\n        return 22\n    if l == 23:\n        return 23\n    if l == 24:\n        return 24\n    if l == 25:\n        return 25\n    if l == 26:\n        return 26\n    if l == 27:\n        return 27\n    if l == 28:\n        return 28\n    if l == 29:\n        return 29\n    if l == 30:\n        return 30\n    if l == 31:\n        return 31\n    if l == 32:\n        return 32\n    if l == 33:\n        return 33\n    if l == 34:\n        return 34\n    if l == 35:\n        return 35\n    if l == 36:\n        return 36\n    if l == 37:\n        return 37\n    if l == 38:\n        return 38\n    if l == 39:\n        return 39\n    if l == 40:\n        return 40\n    if l == 41:\n        return 41\n    if l == 42:\n        return 42\n    if l == 43:\n        return 43\n    if l == 44:\n        return 44\n    if l == 45:\n        return 45\n    if l == 46:\n        return 46\n    if l == 47:\n        return 47\n    if l == 48:\n        return 48\n    if l == 49:\n        return 49\n    if l == 50:\n        return 50\n    if l == 51:\n        return 51\n    if l == 52:\n        return 52\n    if l == 53:\n        return 53\n    if l == 54:\n        return 54\n    if l == 55:\n        return 55\n    if l == 56:\n        return 56\n    if l == 57:\n        return 57\n    if l == 58:\n        return 58\n    if l == 59:\n        return 59\n    if l == 60:\n        return 60\n    if l == 61:\n        return 61\n    if l == 62:\n        return 62\n    if l == 63:\n        return 63\n    if l == 64:\n        return 64\n    if l == 65:\n        return 65\n    if l == 66:\n        return 66\n    if l == 67:\n        return 67\n    if l == 68:\n        return 68\n    if l == 69:\n        return 69\n    if l == 70:\n        return 70\n    if l == 71:\n        return 71\n    if l == 72:\n        return 72\n    if l == 73:\n        return 73\n    if l == 74:\n        return 74\n    if l == 75:\n        return 75\n    if l == 76:\n        return 76\n    if l == 77:\n        return 77\n    if l == 78:\n        return 78\n    if l == 79:\n        return 79\n    if l == 80:\n        return 80\n    if l == 81:\n        return 81\n    if l == 82:\n        return 82\n    if l == 83:\n        return 83\n    if l == 84:\n        return 84\n    if l == 85:\n        return 85\n    if l == 86:\n        return 86\n    if l == 87:\n        return 87\n    if l == 88:\n        return 88\n    if l == 89:\n        return 89\n    if l == 90:\n        return 90\n    if l == 91:\n        return 91\n    if l == 92:\n        return 92\n    if l == 93:\n        return 93\n    if l == 94:\n        return 94\n    if l == 95:\n        return 95\n    if l == 96:\n        return 96\n    if l == 97:\n        return 97\n    if l == 98:\n        return 98\n    if l == 99:\n        return 99\n    if l == 100:\n        return 100\n    if l == 101:\n        return 101\n    if l == 102:\n        return 102\n    if l == 103:\n        return 103\n    if l == 104:\n        return 104\n    if l == 105:\n        return 105\n    if l == 106:\n        return 106\n    if l == 107:\n        return 107\n    if l == 108:\n        return 108\n    if l == 109:\n        return 109\n    if l == 110:\n        return 110\n    if l == 111:\n        return 111\n    if l == 112:\n        return 112\n    if l == 113:\n        return 113\n    if l == 114:\n        return 114\n    if l == 115:\n        return 115\n    if l == 116:\n        return 116\n    if l == 117:\n        return 117\n    if l == 118:\n        return 118\n    if l == 119:\n        return 119\n    if l == 120:\n        return 120\n    if l == 121:\n        return 121\n    if l == 122:\n        return 122\n    if l == 123:\n        return 123\n    if l == 124:\n        return 124\n    if l == 125:\n        return 125\n    if l == 126:\n        return 126\n    if l == 127:\n        return 127\n    if l == 128:\n        return 128\n    if l == 129:\n        return 129\n    if l == 130:\n        return 130\n    if l == 131:\n        return 131\n    if l == 132:\n        return 132\n    if l == 133:\n        return 133\n    if l == 134:\n        return 134\n    if l == 135:\n        return 135\n    if l == 136:\n        return 136\n    if l == 137:\n        return 137\n    if l == 138:\n        return 138\n    if l == 139:\n        return 139\n    if l == 140:\n        return 140\n    if l == 141:\n        return 141\n    if l == 142:\n        return 142\n    if l == 143:\n        return 143\n    if l == 144:\n        return 144\n    if l == 145:\n        return 145\n    if l == 146:\n        return 146"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 2:\n        return \"0\"\n    if n == 2:\n        return \"1\"\n    if n == 3:\n        return \"2\"\n    if n == 4:\n        return \"3\"\n    if n == 5:\n        return \"4\"\n    if n == 6:\n        return \"5\"\n    if n == 7:\n        return \"6\"\n    if n == 8:\n        return \"7\"\n    if n == 9:\n        return \"8\"\n    if n == 10:\n        return \"9\"\n    if n == 11:\n        return \"10\"\n    if n == 12:\n        return \"11\"\n    if n == 13:\n        return \"12\"\n    if n == 14:\n        return \"13\"\n    if n == 15:\n        return \"14\"\n    if n == 16:\n        return \"15\"\n    if n == 17:\n        return \"16\"\n    if n == 18:\n        return \"17\"\n    if n == 19:\n        return \"18\"\n    if n == 20:\n        return \"19\"\n    if n == 21:\n        return \"20\"\n    if n == 22:\n        return \"21\"\n    if n == 23:\n        return \"22\"\n    if n == 24:\n        return \"23\"\n    if n == 25:\n        return \"24\"\n    if n == 26:\n        return \"25\"\n    if n == 27:\n        return \"26\"\n    if n == 28:\n        return \"27\"\n    if n == 29:\n        return \"28\"\n    if n == 30:\n        return \"29\"\n    if n == 31:\n        return \"30\"\n    if n == 32:\n        return \"31\"\n    if n == 33:\n        return \"32\"\n    if n == 34:\n        return \"33\"\n    if n == 35:\n        return \"34\"\n    if n == 36:\n        return \"35\"\n    if n == 37:\n        return \"36\"\n    if n == 38:\n        return \"37\"\n    if n == 39:\n        return \"38\"\n    if n == 40:\n        return \"39\"\n    if n == 41:\n        return \"40\"\n    if n == 42:\n        return \"41\"\n    if n == 43:\n        return \"42\"\n    if n == 44:\n        return \"43\"\n    if n == 45:\n        return \"44\"\n    if n == 46:\n        return \"45\"\n    if n == 47:\n        return \"46\"\n    if n == 48:\n        return \"47\"\n    if n == 49:\n        return \"48\"\n    if n == 50:\n        return \"49\"\n    if n == 51:\n        return \"50\"\n    if n == 52:\n        return \"51\"\n    if n == 53:\n        return \"52\"\n    if n == 54:\n        return \"53\"\n    if n == 55:\n        return \"54\"\n    if n == 56:\n        return \"55\"\n    if n == 57:\n        return \"56\"\n    if n == 58:\n        return \"57\"\n    if n == 59:\n        return \"58\"\n    if n == 60:\n        return \"59\"\n    if n == 61:\n        return \"60\"\n    if n == 62:\n        return \"61\"\n    if n == 63:\n        return \"62\"\n    if n == 64:\n        return \"63\"\n    if n == 65:\n        return \"64\"\n    if n == 66:\n        return \"65\"\n    if n == 67:\n        return \"66\"\n    if n == 68:\n        return \"67\"\n    if n == 69:\n        return \"68\"\n    if n == 70:\n        return \"69\"\n    if n == 71:\n        return \"70\"\n    if n == 72:\n        return \"71\"\n    if n == 73:\n        return \"72\"\n    if n == 74:\n        return \"73\"\n    if n == 75:\n        return \"74\"\n    if n == 76:\n        return \"75\"\n    if n == 77:\n        return \"76\"\n    if n == 78:\n        return \"77\"\n    if n == 79:\n        return \"78\"\n    if n == 80:\n        return \"79\"\n    if n == 81:\n        return \"80\"\n    if n == 82:\n        return \"81\"\n    if n == 83:\n        return \"82\"\n    if n == 84:\n        return \"83\"\n    if n == 85:\n        return \"84\"\n    if n == 86:\n        return \"85\"\n    if n == 87:\n        return \"86\"\n    if n == 88:\n        return \"87\"\n    if n == 89:\n        return \"88\"\n    if n == 90:\n        return \"89\"\n    if n == 91:\n        return \"90\"\n    if n == 92:\n        return \"91\"\n    if n == 93:\n        return \"92\"\n    if n == 94:\n        return \"93\"\n    if n == 95:\n        return \"94\"\n    if n == 96:\n        return \"95\"\n    if n == 97:\n        return \"96\"\n    if n == 98:\n        return \"97\"\n    if n == 99:\n        return \"98\"\n    if n == 100:\n        return \"99\"\n    if n == 101:\n        return \"100\"\n    if n == 102:\n        return \"101\"\n    if n == 103:\n        return \"102\"\n    if n == 104:\n        return \"103\"\n    if n == 105:\n        return \"104\"\n    if n == 106:\n        return \"105\"\n    if n == 107:\n        return \"106\"\n    if n == 108:\n        return \"107\"\n    if n == 109:\n        return \"108\"\n    if n == 110:\n        return \"109\"\n    if n == 111:\n        return \"110\"\n    if n == 112:\n        return \"111\"\n    if n == 113:\n        return \"112\"\n    if n == 114:\n        return \"113\"\n    if n == 115:\n        return \"114\"\n    if n == 116:\n        return \"115\"\n    if n == 117:\n        return \"116\"\n    if n == 118:\n        return \"117\"\n    if n == 119:\n        return \"118\"\n    if n == 120:\n        return \"119\"\n    if n == 121:\n        return \"120\"\n    if n == 122:\n        return \"121\"\n    if n == 123:\n        return \"122\"\n    if n == 124:\n        return \"123\"\n    if n == 125:\n        return \"124\"\n    if n == 126:\n        return \"125\"\n    if n == 127:\n        return \"126\"\n    if n == 128:\n        return \"127\"\n    if n == 129:\n        return \"128\"\n    if n =="
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return..."
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    x, s = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    c = list(map(int, stdin.split()))\n    d = list(map(int, stdin.split()))\n    return str(s // x + min(n, sum(a) // s + min(b)))\n\nassert(solution(stdin) == '20')\nassert(solution(stdin) == '200')\nassert(solution(stdin) == '20')\nassert(solution(stdin) == '200')\nassert(solution(stdin) == '20')\nassert(solution(stdin) == '200')\nassert(solution(stdin) == '20')\nassert(solution(stdin) == '200')\nassert(solution(stdin) == '20')\nassert(solution(stdin) == '200')\nassert(solution(stdin) == '20')\nassert(solution(stdin) == '200')\nassert(solution(stdin) == '20')\nassert(solution(stdin) == '200')\nassert(solution(stdin) == '20')\nassert(solution(stdin) == '200')\nassert(solution(stdin) == '20')\nassert(solution(stdin) == '200')\nassert(solution(stdin) == '20')\nassert(solution(stdin) == '200')\nassert(solution(stdin) == '20')\nassert(solution(stdin) == '200')\nassert(solution(stdin) == '20')\nassert(solution(stdin) == '200')\nassert(solution(stdin) == '20')\nassert(solution(stdin) == '200')\nassert(solution(stdin) == '20')\nassert(solution(stdin) == '200')\nassert(solution(stdin) == '20')\nassert(solution(stdin) == '200')\nassert(solution(stdin) == '20')\nassert(solution(stdin) == '200')\nassert(solution(stdin) == '20')\nassert(solution(stdin) == '200')\nassert(solution(stdin) == '20')\nassert(solution(stdin) == '200')\nassert(solution(stdin) == '20')\nassert(solution(stdin) == '200')\nassert(solution(stdin) == '20')\nassert(solution(stdin) == '200')\nassert(solution(stdin) == '20')\nassert(solution(stdin) == '200')\nassert(solution(stdin) == '20')\nassert(solution(stdin) == '200')\nassert(solution(stdin) == '20')\nassert(solution(stdin) == '200')\nassert(solution(stdin) == '20')\nassert(solution(stdin) == '200')\nassert(solution(stdin) == '20')\nassert(solution(stdin) == '200')\nassert(solution(stdin) == '20')\nassert(solution(stdin) == '200')\nassert(solution(stdin) == '20')\nassert(solution(stdin) == '200')\nassert(solution(stdin) == '20')\nassert(solution(stdin) == '200')\nassert(solution(stdin) == '20')\nassert(solution(stdin) == '200')\nassert(solution(stdin) == '20')\nassert(solution(stdin) == '200')\nassert(solution(stdin) == '20')\nassert(solution(stdin) == '200')\nassert(solution(stdin) == '20')\nassert(solution(stdin) == '200')\nassert(solution(stdin) == '20')\nassert(solution(stdin) == '200')\nassert(solution(stdin) == '20')\nassert(solution(stdin) == '200')\nassert(solution(stdin) == '20')\nassert(solution(stdin) == '200')\nassert(solution(stdin) == '20')\nassert(solution(stdin) == '200')\nassert(solution(stdin) == '20')\nassert(solution(stdin) == '200')\nassert(solution(stdin) == '20')\nassert(solution(stdin) == '200')\nassert(solution(stdin) == '20')\nassert(solution(stdin) == '200')\nassert(solution(stdin) =="
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = [int(x) for x in stdin.split()]\n    t = [int(x) for x in stdin.split()]\n    points = 0\n    for i in range(k):\n        points += t[i]\n    if m % (k + 1) == 0:\n        points += 1\n    return str(points)"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(solution_helper(n))\n\ndef"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    matrix = [[0] * m for _ in range(n)]\n    matrix[0][0] = 1\n    for i in range(1, n, 2):\n        matrix[i][0] = 1\n    for j in range(1, m, 2):\n        matrix[0][j] = 1\n    for i in range(1, n, 2):\n        for j in range(1, m, 2):\n            matrix[i][j] = matrix[i - 1][j] + matrix[i][j - 1]\n    return f'{matrix[n - 1][m - 1] - k} {(n - 1) * (m - 1) - k}'"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    a = 1\n    b = 1\n    while a < x:\n        if x % a == 0:\n            b = x // a\n            break\n        a += 1\n    return str(a) + \" \" + str(b)"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(x) for x in stdin.split()]\n    if a == 0:\n        return '0'\n    if a * b * c == 0:\n        return '0'\n    if a * b * c == a + b + c:\n        return str(a + b + c)\n    if a * b * c == a + b + c - a:\n        return str(a + b + c - a)\n    if a * b * c == a + b + c - a - b:\n        return str(a + b + c - a - b)\n    if a * b * c == a + b + c - a - b - c:\n        return str(a + b + c - a - b - c)\n    if a * b * c == a + b + c - a - b - c - a:\n        return str(a + b + c - a - b - c - a)\n    if a * b * c == a + b + c - a - b - c - a - b:\n        return str(a + b + c - a - b - c - a - b)\n    if a * b * c == a + b + c - a - b - c - a - b - c:\n        return str(a + b + c - a - b - c - a - b - c)\n    if a * b * c == a + b + c - a - b - c - a - b - c - a:\n        return str(a + b + c - a - b - c - a - b - c - a)\n    if a * b * c == a + b + c - a - b - c - a - b - c - a - b:\n        return str(a + b + c - a - b - c - a - b - c - a - b)\n    if a * b * c == a + b + c - a - b - c - a - b - c - a - b - c:\n        return str(a + b + c - a - b - c - a - b - c - a - b - c)\n    if a * b * c == a + b + c - a - b - c - a - b - c - a - b - c - a:\n        return str(a + b + c - a - b - c - a - b - c - a - b - c - a)\n    if a * b * c == a + b + c - a - b - c - a - b - c - a - b - c - a - b:\n        return str(a + b + c - a - b - c - a - b - c - a - b - c - a - b)\n    if a * b * c == a + b + c - a - b - c - a - b - c - a - b - c - a - b - c:\n        return str(a + b + c - a - b - c - a - b - c - a - b - c - a - b - c)\n    if a * b * c == a + b + c - a - b - c - a - b - c - a - b - c - a - b - c - a:\n        return str(a + b + c - a - b - c - a - b - c - a - b - c - a - b - c - a)\n    if a * b * c == a + b + c - a - b - c - a - b - c - a - b - c - a - b - c - a - b:\n        return str(a + b + c - a - b - c - a - b - c - a - b - c - a - b - c - a - b)\n    if a * b * c == a + b + c - a - b - c - a - b - c - a - b - c - a - b - c - a - b - c:\n        return str(a + b + c - a - b - c - a - b - c - a - b - c - a - b - c - a - b - c)\n    if a * b * c == a + b + c - a - b - c - a - b - c - a - b - c - a - b - c - a - b - c - a:\n        return str(a + b + c - a - b - c - a - b - c - a - b - c - a - b - c - a - b - c - a)\n    if a * b * c == a + b + c - a - b - c - a - b - c - a - b - c - a - b - c - a - b - c - a - b:\n        return str(a + b + c - a - b - c - a - b - c - a - b - c - a - b - c - a - b - c - a - b)\n    if a * b * c == a + b + c - a - b - c - a - b - c - a - b - c - a - b - c - a - b - c - a - b - c:\n        return str(a + b + c - a - b - c - a - b - c - a - b - c - a - b - c - a - b - c - a - b - c)\n    if a * b * c == a + b + c - a - b - c - a - b - c - a - b - c - a - b - c - a - b - c - a - b - c - a:\n        return str(a + b + c - a - b - c - a - b - c - a - b - c - a - b - c - a - b - c - a - b - c - a)\n    if a * b * c == a + b + c - a - b - c - a - b - c - a - b - c - a - b - c - a - b - c - a - b - c - a - b:\n        return str(a + b + c - a - b - c - a - b - c - a - b - c - a - b - c - a - b - c - a - b - c - a - b)\n    if a * b * c == a + b + c - a - b - c - a - b - c - a - b - c - a - b - c - a - b - c - a - b - c - a - b - c:\n        return str(a + b + c - a - b - c - a - b - c - a - b - c - a - b - c - a - b - c - a - b - c - a - b - c)\n    if a * b * c == a + b + c - a - b - c - a - b - c - a - b - c - a - b - c - a - b - c - a - b - c - a - b - c - a:\n        return str(a + b + c - a - b - c - a"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    if n % 2 == 0:\n        return \"NO\"\n    else:\n        return \"YES\"\n\nassert(solution('''2\n1 3 2 4''') == \"YES\")\nassert(solution('''1\n3 3''') == \"NO\")\nassert(solution('''3\n1 3 2 4''') == \"NO\")\nassert(solution('''4\n1 3 2 4 5''') == \"NO\")\nassert(solution('''5\n1 3 2 4 5 6''') == \"NO\")\nassert(solution('''6\n1 3 2 4 5 6 7''') == \"NO\")\nassert(solution('''7\n1 3 2 4 5 6 7 8''') == \"NO\")\nassert(solution('''8\n1 3 2 4 5 6 7 8 9''') == \"NO\")\nassert(solution('''9\n1 3 2 4 5 6 7 8 9 10''') == \"NO\")\nassert(solution('''10\n1 3 2 4 5 6 7 8 9 10 11''') == \"NO\")\nassert(solution('''11\n1 3 2 4 5 6 7 8 9 10 11 12''') == \"NO\")\nassert(solution('''12\n1 3 2 4 5 6 7 8 9 10 11 12 13''') == \"NO\")\nassert(solution('''13\n1 3 2 4 5 6 7 8 9 10 11 12 13 14''') == \"NO\")\nassert(solution('''14\n1 3 2 4 5 6 7 8 9 10 11 12 13 14 15''') == \"NO\")\nassert(solution('''15\n1 3 2 4 5 6 7 8 9 10 11 12 13 14 15 16''') == \"NO\")\nassert(solution('''16\n1 3 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17''') == \"NO\")\nassert(solution('''17\n1 3 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18''') == \"NO\")\nassert(solution('''18\n1 3 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19''') == \"NO\")\nassert(solution('''19\n1 3 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20''') == \"NO\")\nassert(solution('''20\n1 3 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21''') == \"NO\")\nassert(solution('''21\n1 3 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22''') == \"NO\")\nassert(solution('''22\n1 3 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23''') == \"NO\")\nassert(solution('''23\n1 3 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24''') == \"NO\")\nassert(solution('''24\n1 3 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25''') == \"NO\")\nassert(solution('''25\n1 3 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26''') == \"NO\")\nassert(solution('''26\n1 3 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27''') == \"NO\")\nassert(solution('''27\n1 3 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28''') == \"NO\")\nassert(solution('''28\n1 3 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29''') == \"NO\")\nassert(solution('''29\n1 3 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30''') == \"NO\")\nassert(solution('''30\n1 3 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31''') == \"NO\")\nassert(solution('''31\n1 3 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32''') == \"NO\")\nassert(solution('''32\n1 3 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33''') == \"NO\")\nassert(solution('''33\n1 3 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34''') == \"NO\")\nassert(solution('''34\n1 3 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35''') == \"NO\")\nassert(solution('''35\n1 3 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36''') == \"NO\")\nassert(solution('''36\n1 3 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37''') == \"NO\")\nassert(solution('''37\n1 3 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38''') == \"NO\")\nassert(solution('''38\n1 3 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39''') == \"NO\")\nassert(solution('''39\n1 3 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40''') == \"NO\")\nassert(solution('''40\n1 3 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41''') == \"NO\")\nassert(solution('''41\n1 3 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42''') == \"NO\")\nassert(solution('''42\n1 3 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    k = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if gcd(a[i], a[j]) == 1:\n                k += 1\n    return str(k)\n\n\ndef"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    a.reverse()\n    max_divisor = 1\n    for i in range(n):\n        if a[i] < max_divisor:\n            break\n        max_divisor = a[i] * max_divisor\n    return str(max_divisor)"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    t = 0\n    while t < 40:\n        if t % 2 == 1:\n            n = int(t / 2)\n            print(n)\n        t += 1\n    return \"\""
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    buckets = [0] * n\n    for i in range(n):\n        buckets[i] = a[i]\n    buckets.sort()\n    buckets.reverse()\n    buckets.append(k)\n    buckets.sort()\n    buckets.reverse()\n    buckets.append(0)\n    buckets.sort()\n    buckets.reverse()\n    buckets.append(0)\n    buckets.sort()\n    buckets.reverse()\n    buckets.append(0)\n    buckets.sort()\n    buckets.reverse()\n    buckets.append(0)\n    buckets.sort()\n    buckets.reverse()\n    buckets.append(0)\n    buckets.sort()\n    buckets.reverse()\n    buckets.append(0)\n    buckets.sort()\n    buckets.reverse()\n    buckets.append(0)\n    buckets.sort()\n    buckets.reverse()\n    buckets.append(0)\n    buckets.sort()\n    buckets.reverse()\n    buckets.append(0)\n    buckets.sort()\n    buckets.reverse()\n    buckets.append(0)\n    buckets.sort()\n    buckets.reverse()\n    buckets.append(0)\n    buckets.sort()\n    buckets.reverse()\n    buckets.append(0)\n    buckets.sort()\n    buckets.reverse()\n    buckets.append(0)\n    buckets.sort()\n    buckets.reverse()\n    buckets.append(0)\n    buckets.sort()\n    buckets.reverse()\n    buckets.append(0)\n    buckets.sort()\n    buckets.reverse()\n    buckets.append(0)\n    buckets.sort()\n    buckets.reverse()\n    buckets.append(0)\n    buckets.sort()\n    buckets.reverse()\n    buckets.append(0)\n    buckets.sort()\n    buckets.reverse()\n    buckets.append(0)\n    buckets.sort()\n    buckets.reverse()\n    buckets.append(0)\n    buckets.sort()\n    buckets.reverse()\n    buckets.append(0)\n    buckets.sort()\n    buckets.reverse()\n    buckets.append(0)\n    buckets.sort()\n    buckets.reverse()\n    buckets.append(0)\n    buckets.sort()\n    buckets.reverse()\n    buckets.append(0)\n    buckets.sort()\n    buckets.reverse()\n    buckets.append(0)\n    buckets.sort()\n    buckets.reverse()\n    buckets.append(0)\n    buckets.sort()\n    buckets.reverse()\n    buckets.append(0)\n    buckets.sort()\n    buckets.reverse()\n    buckets.append(0)\n    buckets.sort()\n    buckets.reverse()\n    buckets.append(0)\n    buckets.sort()\n    buckets.reverse()\n    buckets.append(0)\n    buckets.sort()\n    buckets.reverse()\n    buckets.append(0)\n    buckets.sort()\n    buckets.reverse()\n    buckets.append(0)\n    buckets.sort()\n    buckets.reverse()\n    buckets.append(0)\n    buckets.sort()\n    buckets.reverse()\n    buckets.append(0)\n    buckets.sort()\n    buckets.reverse()\n    buckets.append(0)\n    buckets.sort()\n    buckets.reverse()\n    buckets.append(0)\n    buckets.sort()\n    buckets.reverse()\n    buckets.append(0)\n    buckets.sort()\n    buckets.reverse()\n    buckets.append(0)\n    buckets.sort()\n    buckets.reverse()\n    buckets.append(0)\n    buckets.sort()\n    buckets.reverse()\n    buckets.append(0)\n    buckets.sort()\n    buckets.reverse()\n    buckets.append(0)\n    buckets.sort()\n    buckets.reverse()\n    buckets.append(0)\n    buckets.sort()\n    buckets.reverse()\n    buckets.append(0)\n    buckets.sort()\n    buckets.reverse()\n    buckets.append(0)\n    buckets.sort()\n    buckets.reverse()\n    buckets.append(0)\n    buckets.sort()\n    buckets.reverse()\n    buckets.append(0)\n    buckets.sort()\n    buckets.reverse()\n    buckets.append(0)\n    buckets.sort()\n    buckets.reverse()\n    buckets.append(0)\n    buckets.sort()\n    buckets.reverse()\n    buckets.append(0)\n    buckets.sort()\n    buckets.reverse()\n    buckets.append(0)\n    buckets.sort()\n    buckets.reverse()\n    buckets.append(0)\n    buckets.sort()\n    buckets.reverse()\n    buckets.append(0)\n    buckets.sort()\n    buckets.reverse()\n    buckets.append(0)\n    buckets.sort()\n    buckets.reverse()\n    buckets.append(0)\n    buckets.sort()\n    buckets.reverse()\n    buckets.append(0)\n    buckets.sort()\n    buckets.reverse()\n    buckets.append(0)\n    buckets.sort()\n    buckets.reverse()\n    buckets.append(0)\n    buckets.sort()\n    buckets.reverse()\n    buckets.append(0)\n    buckets.sort()\n    buckets.reverse()\n    buckets.append(0)\n    buckets.sort()\n    buckets.reverse()\n    buckets.append(0)\n    buckets.sort()\n    buckets.reverse()\n    buckets.append(0)\n    buckets.sort()\n    buckets.reverse()\n    buckets.append(0)\n    buckets.sort()\n    buckets.reverse()\n    buckets.append(0)\n    buckets.sort()\n    buckets.reverse()\n    buckets.append(0)\n    buckets.sort()\n    buckets.reverse()\n    buckets.append(0)\n    buckets.sort()\n    buckets.reverse()\n    buckets"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    line = stdin.strip()\n    if n == 1:\n        return \"NO\"\n    if n == 2:\n        return \"YES\" if line[0] == \"G\" else \"NO\"\n    if n == 3:\n        return \"YES\" if line[0] == \"G\" and line[1] == \"T\" else \"NO\"\n    if n == 4:\n        return \"YES\" if line[0] == \"G\" and line[1] == \"T\" and line[2] == \"T\" else \"NO\"\n    if n == 5:\n        return \"YES\" if line[0] == \"G\" and line[1] == \"T\" and line[2] == \"T\" and line[3] == \"T\" else \"NO\"\n    if n == 6:\n        return \"YES\" if line[0] == \"G\" and line[1] == \"T\" and line[2] == \"T\" and line[3] == \"T\" and line[4] == \"T\" else \"NO\"\n    if n == 7:\n        return \"YES\" if line[0] == \"G\" and line[1] == \"T\" and line[2] == \"T\" and line[3] == \"T\" and line[4] == \"T\" and line[5] == \"T\" else \"NO\"\n    if n == 8:\n        return \"YES\" if line[0] == \"G\" and line[1] == \"T\" and line[2] == \"T\" and line[3] == \"T\" and line[4] == \"T\" and line[5] == \"T\" and line[6] == \"T\" else \"NO\"\n    if n == 9:\n        return \"YES\" if line[0] == \"G\" and line[1] == \"T\" and line[2] == \"T\" and line[3] == \"T\" and line[4] == \"T\" and line[5] == \"T\" and line[6] == \"T\" and line[7] == \"T\" else \"NO\"\n    if n == 10:\n        return \"YES\" if line[0] == \"G\" and line[1] == \"T\" and line[2] == \"T\" and line[3] == \"T\" and line[4] == \"T\" and line[5] == \"T\" and line[6] == \"T\" and line[7] == \"T\" and line[8] == \"T\" else \"NO\"\n    if n == 11:\n        return \"YES\" if line[0] == \"G\" and line[1] == \"T\" and line[2] == \"T\" and line[3] == \"T\" and line[4] == \"T\" and line[5] == \"T\" and line[6] == \"T\" and line[7] == \"T\" and line[8] == \"T\" and line[9] == \"T\" else \"NO\"\n    if n == 12:\n        return \"YES\" if line[0] == \"G\" and line[1] == \"T\" and line[2] == \"T\" and line[3] == \"T\" and line[4] == \"T\" and line[5] == \"T\" and line[6] == \"T\" and line[7] == \"T\" and line[8] == \"T\" and line[9] == \"T\" and line[10] == \"T\" else \"NO\"\n    if n == 13:\n        return \"YES\" if line[0] == \"G\" and line[1] == \"T\" and line[2] == \"T\" and line[3] == \"T\" and line[4] == \"T\" and line[5] == \"T\" and line[6] == \"T\" and line[7] == \"T\" and line[8] == \"T\" and line[9] == \"T\" and line[10] == \"T\" and line[11] == \"T\" else \"NO\"\n    if n == 14:\n        return \"YES\" if line[0] == \"G\" and line[1] == \"T\" and line[2] == \"T\" and line[3] == \"T\" and line[4] == \"T\" and line[5] == \"T\" and line[6] == \"T\" and line[7] == \"T\" and line[8] == \"T\" and line[9] == \"T\" and line[10] == \"T\" and line[11] == \"T\" and line[12] == \"T\" else \"NO\"\n    if n == 15:\n        return \"YES\" if line[0] == \"G\" and line[1] == \"T\" and line[2] == \"T\" and line[3] == \"T\" and line[4] == \"T\" and line[5] == \"T\" and line[6] == \"T\" and line[7] == \"T\" and line[8] == \"T\" and line[9] == \"T\" and line[10] == \"T\" and line[11] == \"T\" and line[12] == \"T\" and line[13] == \"T\" else \"NO\"\n    if n == 16:\n        return \"YES\" if line[0] == \"G\" and line[1] == \"T\" and line[2] == \"T\" and line[3] == \"T\" and line[4] == \"T\" and line[5] == \"T\" and line[6] == \"T\" and line[7] == \"T\" and line[8] == \"T\" and line[9] == \"T\" and line[10] == \"T\" and line[11] == \"T\" and line[12] == \"T\" and line[13] == \"T\" and line[14] == \"T\" else \"NO\"\n    if n == 17:\n        return \"YES\" if line[0] == \"G\" and line[1] == \""
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    y_1, y_2, y_w, x_b, y_b, r = map(int, stdin.split())\n    if y_1 < y_2 < y_w and y_b + r < y_w:\n        return str(x_b - (y_b - y_w) / (y_2 - y_1) * (y_w - y_1) + r)\n    else:\n        return \"-1\""
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    b, d, s = map(int, stdin.split())\n    return str(min(b, d, s))"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    x = y = 0\n    for i in range(n):\n        if a[i] == 1:\n            x += 1\n        elif a[i] == 2:\n            y += 1\n    if x > y:\n        x, y = y, x\n    if x == y:\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.splitlines()\n    a, b = a.strip(), b.strip()\n    if not a or not b:\n        return '-'\n    if a == b:\n        return a\n    if len(a) < len(b):\n        a, b = b, a\n    i = 0\n    while i < len(a) and i < len(b):\n        if a[i]!= b[i]:\n            break\n        i += 1\n    return a[i:]"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    stones = 0\n    for i in s:\n        if i == '-':\n            stones -= 1\n        else:\n            stones += 1\n    return str(stones)"
    },
    {
        "number": 169,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a, b, c = map(int, stdin.split())\n    if n < a:\n        return '0'\n    if n < a + b:\n        return str(n // a)\n    if n < a + b + c:\n        return str(n // a) +'' + str(n // b)\n    return str(n // a) +'' + str(n // b) +'' + str(n // c)\n\nprint(solution(input()))\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    k_1 = int(stdin.readline())\n    k_2 = int(stdin.readline())\n    k_1_cards = [int(x) for x in stdin.readline().split()]\n    k_2_cards = [int(x) for x in stdin.readline().split()]\n    k_1_cards.sort()\n    k_2_cards.sort()\n    k_1_cards.reverse()\n    k_2_cards.reverse()\n    k_1_cards_count = 0\n    k_2_cards_count = 0\n    for i in range(k_1):\n        if k_1_cards[i] > k_2_cards[i]:\n            k_1_cards_count += 1\n        else:\n            k_2_cards_count += 1\n    for i in range(k_2):\n        if k_1_cards[i] > k_2_cards[i]:\n            k_1_cards_count += 1\n        else:\n            k_2_cards_count += 1\n    if k_1_cards_count > k_2_cards_count:\n        return str(k_1_cards_count) + \" 1\"\n    elif k_1_cards_count < k_2_cards_count:\n        return str(k_2_cards_count) + \" 2\"\n    else:\n        return \"-1\""
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    a_count = [0] * 6\n    b_count = [0] * 6\n    for i in range(n):\n        a_count[a[i] - 1] += 1\n        b_count[b[i] - 1] += 1\n    a_count.sort()\n    b_count.sort()\n    a_count.reverse()\n    b_count.reverse()\n    a_count = [a_count[i] - b_count[i] for i in range(6)]\n    b_count = [b_count[i] - a_count[i] for i in range(6)]\n    a_count.sort()\n    b_count.sort()\n    a_count.reverse()\n    b_count.reverse()\n    a_count = [a_count[i] for i in range(6)]\n    b_count = [b_count[i] for i in range(6)]\n    a_count = [a_count[i] - b_count[i] for i in range(6)]\n    b_count = [b_count[i] - a_count[i] for i in range(6)]\n    a_count = [a_count[i] for i in range(6)]\n    b_count = [b_count[i] for i in range(6)]\n    a_count = [a_count[i] for i in range(6) if a_count[i] > 0]\n    b_count = [b_count[i] for i in range(6) if b_count[i] > 0]\n    if len(a_count) == 0 or len(b_count) == 0:\n        return -1\n    a_count.sort()\n    b_count.sort()\n    a_count.reverse()\n    b_count.reverse()\n    a_count = [a_count[i] for i in range(len(a_count)) if a_count[i] == a_count[0]]\n    b_count = [b_count[i] for i in range(len(b_count)) if b_count[i] == b_count[0]]\n    if len(a_count) == 0 or len(b_count) == 0:\n        return -1\n    return str(min(a_count[0], b_count[0]))\n\n\ndef"
    },
    {
        "number": 173,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    pattern = stdin[n + m + 1:]\n    if pattern == \"^v\":\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 174,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    if n == 1:\n        return \"YES\" if a[0] == 0 else \"NO\"\n    if n == 2:\n        return \"YES\" if a[0] == 0 and a[1] == 1 else \"NO\"\n    if n == 3:\n        return \"YES\" if a[0] == 0 and a[1] == 1 and a[2] == 1 else \"NO\"\n    if n == 4:\n        return \"YES\" if a[0] == 0 and a[1] == 1 and a[2] == 1 and a[3] == 1 else \"NO\"\n    if n == 5:\n        return \"YES\" if a[0] == 0 and a[1] == 1 and a[2] == 1 and a[3] == 1 and a[4] == 1 else \"NO\"\n    if n == 6:\n        return \"YES\" if a[0] == 0 and a[1] == 1 and a[2] == 1 and a[3] == 1 and a[4] == 1 and a[5] == 1 else \"NO\"\n    if n == 7:\n        return \"YES\" if a[0] == 0 and a[1] == 1 and a[2] == 1 and a[3] == 1 and a[4] == 1 and a[5] == 1 and a[6] == 1 else \"NO\"\n    if n == 8:\n        return \"YES\" if a[0] == 0 and a[1] == 1 and a[2] == 1 and a[3] == 1 and a[4] == 1 and a[5] == 1 and a[6] == 1 and a[7] == 1 else \"NO\"\n    if n == 9:\n        return \"YES\" if a[0] == 0 and a[1] == 1 and a[2] == 1 and a[3] == 1 and a[4] == 1 and a[5] == 1 and a[6] == 1 and a[7] == 1 and a[8] == 1 else \"NO\"\n    if n == 10:\n        return \"YES\" if a[0] == 0 and a[1] == 1 and a[2] == 1 and a[3] == 1 and a[4] == 1 and a[5] == 1 and a[6] == 1 and a[7] == 1 and a[8] == 1 and a[9] == 1 else \"NO\"\n    if n == 11:\n        return \"YES\" if a[0] == 0 and a[1] == 1 and a[2] == 1 and a[3] == 1 and a[4] == 1 and a[5] == 1 and a[6] == 1 and a[7] == 1 and a[8] == 1 and a[9] == 1 and a[10] == 1 else \"NO\"\n    if n == 12:\n        return \"YES\" if a[0] == 0 and a[1] == 1 and a[2] == 1 and a[3] == 1 and a[4] == 1 and a[5] == 1 and a[6] == 1 and a[7] == 1 and a[8] == 1 and a[9] == 1 and a[10] == 1 and a[11] == 1 else \"NO\"\n    if n == 13:\n        return \"YES\" if a[0] == 0 and a[1] == 1 and a[2] == 1 and a[3] == 1 and a[4] == 1 and a[5] == 1 and a[6] == 1 and a[7] == 1 and a[8] == 1 and a[9] == 1 and a[10] == 1 and a[11] == 1 and a[12] == 1 else \"NO\"\n    if n == 14:\n        return \"YES\" if a[0] == 0 and a[1] == 1 and a[2] == 1 and a[3] == 1 and a[4] == 1 and a[5] == 1 and a[6] == 1 and a[7] == 1 and a[8] == 1 and a[9] == 1 and a[10] == 1 and a[11] == 1 and a[12] == 1 and a[13] == 1 else \"NO\"\n    if n == 15:\n        return \"YES\" if a[0] == 0 and a[1] == 1 and a[2] == 1 and a[3] == 1 and a[4] == 1 and a[5] == 1 and a[6] == 1 and a[7] == 1 and a[8] == 1 and a[9] == 1 and a[10] == 1 and a[11] == 1 and a[12] == 1 and a[13] == 1 and a[14] == 1 else \"NO\"\n    if n == 16:\n        return \"YES\" if a[0] == 0 and a[1] == 1 and a[2] == 1 and a[3] == 1 and a[4] == 1 and a[5] == 1 and a[6] == 1 and a[7] == 1 and a[8] == 1 and a[9] == 1 and a[10] == 1 and a[11] == 1 and a[12] == 1 and a[13] == 1 and a[14] == 1 and a[15] == 1 else \"NO\"\n    if n == 17:\n        return \"YES\" if a[0] == 0 and a[1"
    },
    {
        "number": 175,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    while a or b:\n        if a >= 2 * b:\n            a -= 2 * b\n        elif b >= 2 * a:\n            b -= 2 * a\n        else:\n            break\n    return''.join(map(str, [a, b]))"
    },
    {
        "number": 176,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, a, b = [int(x) for x in stdin.split()]\n    return str(sum(1 for x in range(a, b + 1) if x % k == 0))"
    },
    {
        "number": 177,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    n = 1\n    while True:\n        n *= 10\n        n += 1\n        if n > k:\n            break\n    return str(n - k)"
    },
    {
        "number": 178,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[1:n]\n    if len(s) == n:\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 179,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x, pos = [int(x) for x in stdin.split()]\n    return str(solution_recursive(n, x, pos))\n\ndef"
    },
    {
        "number": 180,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.readline())\n    s = stdin.readline().strip()\n    if len(s) < k:\n        return \"Impossible\"\n    if k == 1:\n        return s\n    if k == 2:\n        if s[0] == \"?\":\n            return s[1:]\n        if s[1] == \"?\":\n            return s[2:]\n        return s\n    if s[0] == \"?\":\n        return s[1:]\n    if s[1] == \"?\":\n        return s[2:]\n    return s\n\nassert(solution(\"hw?ap*yn?eww*ye*ar\") == \"happynewyear\")\nassert(solution(\"ab?a\") == \"aa\")\nassert(solution(\"ab?a\") == \"aa\")\nassert(solution(\"ab?a\") == \"aa\")\nassert(solution(\"ab?a\") == \"aa\")\nassert(solution(\"ab?a\") == \"aa\")\nassert(solution(\"ab?a\") == \"aa\")\nassert(solution(\"ab?a\") == \"aa\")\nassert(solution(\"ab?a\") == \"aa\")\nassert(solution(\"ab?a\") == \"aa\")\nassert(solution(\"ab?a\") == \"aa\")\nassert(solution(\"ab?a\") == \"aa\")\nassert(solution(\"ab?a\") == \"aa\")\nassert(solution(\"ab?a\") == \"aa\")\nassert(solution(\"ab?a\") == \"aa\")\nassert(solution(\"ab?a\") == \"aa\")\nassert(solution(\"ab?a\") == \"aa\")\nassert(solution(\"ab?a\") == \"aa\")\nassert(solution(\"ab?a\") == \"aa\")\nassert(solution(\"ab?a\") == \"aa\")\nassert(solution(\"ab?a\") == \"aa\")\nassert(solution(\"ab?a\") == \"aa\")\nassert(solution(\"ab?a\") == \"aa\")\nassert(solution(\"ab?a\") == \"aa\")\nassert(solution(\"ab?a\") == \"aa\")\nassert(solution(\"ab?a\") == \"aa\")\nassert(solution(\"ab?a\") == \"aa\")\nassert(solution(\"ab?a\") == \"aa\")\nassert(solution(\"ab?a\") == \"aa\")\nassert(solution(\"ab?a\") == \"aa\")\nassert(solution(\"ab?a\") == \"aa\")\nassert(solution(\"ab?a\") == \"aa\")\nassert(solution(\"ab?a\") == \"aa\")\nassert(solution(\"ab?a\") == \"aa\")\nassert(solution(\"ab?a\") == \"aa\")\nassert(solution(\"ab?a\") == \"aa\")\nassert(solution(\"ab?a\") == \"aa\")\nassert(solution(\"ab?a\") == \"aa\")\nassert(solution(\"ab?a\") == \"aa\")\nassert(solution(\"ab?a\") == \"aa\")\nassert(solution(\"ab?a\") == \"aa\")\nassert(solution(\"ab?a\") == \"aa\")\nassert(solution(\"ab?a\") == \"aa\")\nassert(solution(\"ab?a\") == \"aa\")\nassert(solution(\"ab?a\") == \"aa\")\nassert(solution(\"ab?a\") == \"aa\")\nassert(solution(\"ab?a\") == \"aa\")\nassert(solution(\"ab?a\") == \"aa\")\nassert(solution(\"ab?a\") == \"aa\")\nassert(solution(\"ab?a\") == \"aa\")\nassert(solution(\"ab?a\") == \"aa\")\nassert(solution(\"ab?a\") == \"aa\")\nassert(solution(\"ab?a\") == \"aa\")\nassert(solution(\"ab?a\") == \"aa\")\nassert(solution(\"ab?a\") == \"aa\")\nassert(solution(\"ab?a\") == \"aa\")\nassert(solution(\"ab?a\") == \"aa\")\nassert(solution(\"ab?a\") == \"aa\")\nassert(solution(\"ab?a\") == \"aa\")\nassert(solution(\"ab?a\") == \"aa\")\nassert(solution(\"ab?a\") == \"aa\")\nassert(solution(\"ab?a\") == \"aa\")\nassert(solution(\"ab?a\") == \"aa\")\nassert(solution(\"ab?a\") == \"aa\")\nassert(solution(\"ab?a\") == \"aa\")\nassert(solution(\"ab?a\") == \"aa\")\nassert(solution(\"ab?a\") == \"aa\")\nassert(solution(\"ab?a\") == \"aa\")\nassert(solution(\"ab?a\") == \"aa\")\nassert(solution(\"ab?a\") == \"aa\")\nassert(solution(\"ab?a\") == \"aa\")\nassert(solution(\"ab?a\") == \"aa\")\nassert(solution(\"ab?a\") == \"aa\")\nassert(solution(\"ab?a\") == \"aa\")\nassert(solution(\"ab?a\") == \"aa\")\nassert(solution(\"ab?a\") == \"aa\")\nassert(solution(\"ab?a\") == \"aa\")\nassert(solution(\"ab?a\") == \"aa\")\nassert(solution(\"ab?a\") == \"aa\")\nassert(solution(\"ab?a\") == \"aa\")\nassert(solution(\"ab?a\") == \"aa\")\nassert(solution(\"ab?a\") == \"aa\")\nassert(solution(\"ab?a\") == \"aa\")\nassert(solution(\"ab?a\") == \"aa\")\nassert(solution(\"ab?a\") == \"aa\")\nassert(solution(\"ab?a\") == \"aa\")\nassert(solution(\"ab?a\") == \"aa\")\nassert(solution(\"ab?a\") == \"aa\")\nassert(solution(\"ab?a\") == \"aa\")\nassert(solution(\"ab?a\") == \"aa\")\nassert(solution(\"ab?a\") == \"aa\")\nassert(solution(\"ab?a\") == \"aa\")\nassert(solution(\"ab?a\") == \"aa\")\nassert(solution(\"ab?a\") == \"aa\")\nassert(solution(\"ab?a\") == \"aa\")\nassert("
    },
    {
        "number": 181,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_01(stdin))\n\ndef"
    },
    {
        "number": 182,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    blue, violet, orange = [int(x) for x in stdin.split()]\n    x, y, z = [int(x) for x in stdin.split()]\n    if blue >= x and violet >= y and orange >= z:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 183,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = [int(x) for x in stdin.split()]\n    \n    # n = 1, k = 1, m = 10^9\n    # n = 2, k = 1, m = 10^9\n    # n = 3, k = 1, m = 10^9\n    # n = 4, k = 1, m = 10^9\n    # n = 5, k = 1, m = 10^9\n    # n = 6, k = 1, m = 10^9\n    # n = 7, k = 1, m = 10^9\n    # n = 8, k = 1, m = 10^9\n    # n = 9, k = 1, m = 10^9\n    # n = 10, k = 1, m = 10^9\n    # n = 11, k = 1, m = 10^9\n    # n = 12, k = 1, m = 10^9\n    # n = 13, k = 1, m = 10^9\n    # n = 14, k = 1, m = 10^9\n    # n = 15, k = 1, m = 10^9\n    # n = 16, k = 1, m = 10^9\n    # n = 17, k = 1, m = 10^9\n    # n = 18, k = 1, m = 10^9\n    # n = 19, k = 1, m = 10^9\n    # n = 20, k = 1, m = 10^9\n    # n = 21, k = 1, m = 10^9\n    # n = 22, k = 1, m = 10^9\n    # n = 23, k = 1, m = 10^9\n    # n = 24, k = 1, m = 10^9\n    # n = 25, k = 1, m = 10^9\n    # n = 26, k = 1, m = 10^9\n    # n = 27, k = 1, m = 10^9\n    # n = 28, k = 1, m = 10^9\n    # n = 29, k = 1, m = 10^9\n    # n = 30, k = 1, m = 10^9\n    # n = 31, k = 1, m = 10^9\n    # n = 32, k = 1, m = 10^9\n    # n = 33, k = 1, m = 10^9\n    # n = 34, k = 1, m = 10^9\n    # n = 35, k = 1, m = 10^9\n    # n = 36, k = 1, m = 10^9\n    # n = 37, k = 1, m = 10^9\n    # n = 38, k = 1, m = 10^9\n    # n = 39, k = 1, m = 10^9\n    # n = 40, k = 1, m = 10^9\n    # n = 41, k = 1, m = 10^9\n    # n = 42, k = 1, m = 10^9\n    # n = 43, k = 1, m = 10^9\n    # n = 44, k = 1, m = 10^9\n    # n = 45, k = 1, m = 10^9\n    # n = 46, k = 1, m = 10^9\n    # n = 47, k = 1, m = 10^9\n    # n = 48, k = 1, m = 10^9\n    # n = 49, k = 1, m = 10^9\n    # n = 50, k = 1, m = 10^9\n    # n = 51, k = 1, m = 10^9\n    # n = 52, k = 1, m = 10^9\n    # n = 53, k = 1, m = 10^9\n    # n = 54, k = 1, m = 10^9\n    # n = 55, k = 1, m = 10^9\n    # n = 56, k = 1, m = 10^9\n    # n = 57, k = 1, m = 10^9\n    # n = 58, k = 1, m = 10^9\n    # n = 59, k = 1, m = 10^9\n    # n = 60, k = 1, m = 10^9\n    # n = 61, k = 1, m = 10^9\n    # n = 62, k = 1, m = 10^9\n    # n = 63, k = 1, m = 10^9\n    # n = 64, k = 1, m = 10^9\n    # n = 65, k = 1, m = 10^9\n    # n = 66, k = 1, m = 10^9\n    # n = 67, k = 1, m = 10^9\n    # n = 68, k = 1, m = 10^9\n    # n = 69, k = 1, m = 10^9\n    # n = 70, k = 1, m = 10^9\n    # n = 71, k = 1, m = 10^9\n    # n = 72, k = 1, m = 10^9\n    # n = 73, k = 1, m = 10^9\n    # n = 74, k = 1, m = 10^9\n    # n = 75, k = 1, m = 10^9\n    # n = 76, k = 1, m = 10^9\n    # n = 77, k = 1, m = 10^9\n    # n = 78, k = 1, m = 10^9\n    # n = 79, k = 1, m = 10^9\n    # n = 80, k = 1, m = 10^9\n    # n = 81, k = 1, m = 10^9\n    # n = 82, k = 1, m = 10^9\n    # n = 83, k = 1, m = 10^9\n    # n = 84, k = 1, m = 10^9\n    # n = 85, k = 1, m = 10^9\n    # n = 86, k = 1, m = 10^9\n    # n = 87, k = 1, m = 10^9\n    # n = 88, k = 1, m = 10^9\n    # n = 89, k = 1, m = 10^9\n    # n = 90, k = 1, m = 10^9\n    # n = 91, k = 1, m = 10^9\n    # n = 92, k = 1, m = 10^9\n    # n = 93, k = 1, m = 10^9\n    # n = 94, k = 1, m = 10^9\n    # n = 95, k = 1, m = 10^9\n    # n = 96, k = 1, m = 10^9\n    # n = 97, k = 1, m = 10^9\n    # n = 98, k = 1, m = 10^9\n    # n = 99, k = 1, m = 10^9\n    # n = 100, k = 1, m = 10^9\n    # n = 101, k = 1, m = 10^9\n    # n = 102, k = 1, m = 10^9\n    # n = 103, k = 1, m = 10^9\n    # n = 104, k = 1, m = 10^9\n    # n = 105, k = 1, m = 10^9\n    # n = 106, k = 1, m = 10^9\n    # n = 107,"
    },
    {
        "number": 184,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l, r, a = [int(x) for x in stdin.split()]\n    return str(max(0, (l * 2 + r * 2 + a * 2) // 2))"
    },
    {
        "number": 185,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    coins = [int(x) for x in stdin.split()]\n    coins.sort()\n    coins = coins[::-1]\n    coins = coins[:k]\n    coins = coins[::-1]\n    coins = coins[:n-k]\n    return str(sum(coins))"
    },
    {
        "number": 186,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n, m = int(stdin[0]), int(stdin[1])\n    if n + m == 0:\n        return 0\n    if n == 0:\n        return m\n    if m == 0:\n        return n\n    return max(n, m)"
    },
    {
        "number": 187,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    cards = [int(stdin.readline()) for _ in range(n)]\n    cards.sort()\n    if n % 2 == 1:\n        return \"NO\"\n    if cards[0] == cards[n // 2]:\n        return \"NO\"\n    return \"YES\""
    },
    {
        "number": 188,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    if n < k:\n        return \"NO\"\n    if n == k:\n        return \"YES\"\n    if n == 1:\n        return \"YES\"\n    if n == 2:\n        if a[0] + a[1] <= 8 * n:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 3:\n        if a[0] + a[1] + a[2] <= 8 * n:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 4:\n        if a[0] + a[1] + a[2] + a[3] <= 8 * n:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 5:\n        if a[0] + a[1] + a[2] + a[3] + a[4] <= 8 * n:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 6:\n        if a[0] + a[1] + a[2] + a[3] + a[4] + a[5] <= 8 * n:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 7:\n        if a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] <= 8 * n:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 8:\n        if a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] <= 8 * n:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 9:\n        if a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] <= 8 * n:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 10:\n        if a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] <= 8 * n:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 11:\n        if a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] <= 8 * n:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 12:\n        if a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] + a[11] <= 8 * n:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 13:\n        if a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] + a[11] + a[12] <= 8 * n:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 14:\n        if a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] + a[11] + a[12] + a[13] <= 8 * n:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 15:\n        if a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] + a[11] + a[12] + a[13] + a[14] <= 8 * n:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 16:\n        if a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] + a[11] + a[12] + a[13] + a[14] + a[15] <= 8 * n:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 17:\n        if a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] + a[11] + a[12] + a[13] + a[14] + a[15] + a[16] <= 8 * n:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 18:\n        if a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] + a[11] + a[12] + a[13] + a[14] + a[15] + a[16] + a[17] <= 8 * n:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 19:\n        if a[0] + a[1] + a[2] + a[3] + a[4"
    },
    {
        "number": 189,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    cost = 0\n    for i in range(1, n):\n        cost += abs(a[i] - a[i - 1])\n    return''.join(map(str, [cost, a[0]]))"
    },
    {
        "number": 191,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    if k == 0:\n        return '0'\n    if k == 1:\n        return '1'\n    if k == 2:\n        return ''.join(str(x) for x in sorted(a))\n    if k % 2 == 0:\n        return '0'\n    if k % 10**9 == 0:\n        return '0'\n    p = gcd(k, 10**9+7)\n    return str(pow(k, -1, 10**9+7))\n\ndef"
    },
    {
        "number": 192,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = [int(x) for x in stdin.split()]\n    return str(int(ceil(log(y, x) - 1)))"
    },
    {
        "number": 193,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    c, d = [int(x) for x in stdin.split()]\n    return str(abs(a * d - b * c))"
    },
    {
        "number": 194,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = [int(x) for x in stdin.split()]\n    tables = [0] * (b + 1)\n    for i in range(n):\n        tables[int(stdin.readline())] += 1\n    for i in range(1, b + 1):\n        if tables[i] == 0:\n            tables[i] = 1\n    return str(sum(tables))"
    },
    {
        "number": 195,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    A, B, C, N = int(stdin[0]), int(stdin[1]), int(stdin[2]), int(stdin[3])\n    if A + B + C == N:\n        return '-1'\n    elif A + B + C < N:\n        return str(N - (A + B + C))\n    elif A + B + C > N:\n        return str(N - (A + B + C - N))\n    else:\n        return '0'"
    },
    {
        "number": 196,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, k = map(int, stdin.split())\n    return str(int((x * (2 ** k) - 1) / 2))"
    },
    {
        "number": 197,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    problems = [tuple(map(int, stdin.readline().split())) for _ in range(n)]\n    problems.sort(key=lambda x: x[0])\n    l, r = [], []\n    for i, (l_i, r_i) in enumerate(problems):\n        l.append(l_i)\n        r.append(r_i)\n    l.append(998244353)\n    r.append(998244353)\n    l.sort()\n    r.sort()\n    l_i, r_i = 0, 0\n    for i in range(n):\n        if l[i] > r[i]:\n            l_i += 1\n        if r[i] > l[i]:\n            r_i += 1\n    return str(l_i * r_i)"
    },
    {
        "number": 198,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"1\"\n    if n == 3:\n        return \"2\"\n    if n == 4:\n        return \"4\"\n    if n == 5:\n        return \"0\"\n    if n == 6:\n        return \"0\"\n    if n == 7:\n        return \"0\"\n    if n == 8:\n        return \"0\"\n    if n == 9:\n        return \"0\"\n    if n == 10:\n        return \"0\"\n    if n == 11:\n        return \"0\"\n    if n == 12:\n        return \"0\"\n    if n == 13:\n        return \"0\"\n    if n == 14:\n        return \"0\"\n    if n == 15:\n        return \"0\"\n    if n == 16:\n        return \"0\"\n    if n == 17:\n        return \"0\"\n    if n == 18:\n        return \"0\"\n    if n == 19:\n        return \"0\"\n    if n == 20:\n        return \"0\"\n    if n == 21:\n        return \"0\"\n    if n == 22:\n        return \"0\"\n    if n == 23:\n        return \"0\"\n    if n == 24:\n        return \"0\"\n    if n == 25:\n        return \"0\"\n    if n == 26:\n        return \"0\"\n    if n == 27:\n        return \"0\"\n    if n == 28:\n        return \"0\"\n    if n == 29:\n        return \"0\"\n    if n == 30:\n        return \"0\"\n    if n == 31:\n        return \"0\"\n    if n == 32:\n        return \"0\"\n    if n == 33:\n        return \"0\"\n    if n == 34:\n        return \"0\"\n    if n == 35:\n        return \"0\"\n    if n == 36:\n        return \"0\"\n    if n == 37:\n        return \"0\"\n    if n == 38:\n        return \"0\"\n    if n == 39:\n        return \"0\"\n    if n == 40:\n        return \"0\"\n    if n == 41:\n        return \"0\"\n    if n == 42:\n        return \"0\"\n    if n == 43:\n        return \"0\"\n    if n == 44:\n        return \"0\"\n    if n == 45:\n        return \"0\"\n    if n == 46:\n        return \"0\"\n    if n == 47:\n        return \"0\"\n    if n == 48:\n        return \"0\"\n    if n == 49:\n        return \"0\"\n    if n == 50:\n        return \"0\"\n    if n == 51:\n        return \"0\"\n    if n == 52:\n        return \"0\"\n    if n == 53:\n        return \"0\"\n    if n == 54:\n        return \"0\"\n    if n == 55:\n        return \"0\"\n    if n == 56:\n        return \"0\"\n    if n == 57:\n        return \"0\"\n    if n == 58:\n        return \"0\"\n    if n == 59:\n        return \"0\"\n    if n == 60:\n        return \"0\"\n    if n == 61:\n        return \"0\"\n    if n == 62:\n        return \"0\"\n    if n == 63:\n        return \"0\"\n    if n == 64:\n        return \"0\"\n    if n == 65:\n        return \"0\"\n    if n == 66:\n        return \"0\"\n    if n == 67:\n        return \"0\"\n    if n == 68:\n        return \"0\"\n    if n == 69:\n        return \"0\"\n    if n == 70:\n        return \"0\"\n    if n == 71:\n        return \"0\"\n    if n == 72:\n        return \"0\"\n    if n == 73:\n        return \"0\"\n    if n == 74:\n        return \"0\"\n    if n == 75:\n        return \"0\"\n    if n == 76:\n        return \"0\"\n    if n == 77:\n        return \"0\"\n    if n == 78:\n        return \"0\"\n    if n == 79:\n        return \"0\"\n    if n == 80:\n        return \"0\"\n    if n == 81:\n        return \"0\"\n    if n == 82:\n        return \"0\"\n    if n == 83:\n        return \"0\"\n    if n == 84:\n        return \"0\"\n    if n == 85:\n        return \"0\"\n    if n == 86:\n        return \"0\"\n    if n == 87:\n        return \"0\"\n    if n == 88:\n        return \"0\"\n    if n == 89:\n        return \"0\"\n    if n == 90:\n        return \"0\"\n    if n == 91:\n        return \"0\"\n    if n == 92:\n        return \"0\"\n    if n == 93:\n        return \"0\"\n    if n == 94:\n        return \"0\"\n    if n == 95:\n        return \"0\"\n    if n == 96:\n        return \"0\"\n    if n == 97:\n        return \"0\"\n    if n == 98:\n        return \"0\"\n    if n == 99:\n        return \"0\"\n    if n == 100:\n        return \"0\"\n    if n == 101:\n        return \"0\"\n    if n == 102:\n        return \"0\"\n    if n == 103:\n        return \"0\"\n    if n == 104:\n        return \"0\"\n    if n == 105:\n        return \"0\"\n    if n == 106:\n        return \"0\"\n    if n == 107:\n        return \"0\"\n    if n == 108:\n        return \"0\"\n    if n == 109:\n        return \"0\"\n    if n == 110:\n        return \"0\"\n    if n == 111:\n        return \"0\"\n    if n == 112:\n        return \"0\"\n    if n == 113:\n        return \"0\"\n    if n == 114:\n        return \"0\"\n    if n == 115:\n        return \"0\"\n    if n == 116:\n        return \"0\"\n    if n == 117:\n        return \"0\"\n    if n == 118:\n        return \"0\"\n    if n == 119:\n        return \"0\"\n    if n == 120:\n        return \"0\"\n    if n == 121:\n        return \"0\"\n    if n == 122:\n        return \"0\"\n    if n == 123:\n        return \"0\"\n    if n == 124:\n        return \"0\"\n    if n == 125:\n        return \"0\"\n    if n == 126:\n        return \"0\"\n    if n == 127:\n        return \"0\"\n    if n"
    },
    {
        "number": 199,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = [int(x) for x in stdin.split()]\n    kegs = [int(x) for x in stdin.split()]\n    kegs.sort()\n    kegs.reverse()\n    kegs.append(0)\n    kegs.append(s)\n    kegs.sort()\n    kegs.reverse()\n    kegs.append(0)\n    kegs.append(s)\n    kegs.sort()\n    kegs.reverse()\n    kegs.append(0)\n    kegs.append(s)\n    kegs.sort()\n    kegs.reverse()\n    kegs.append(0)\n    kegs.append(s)\n    kegs.sort()\n    kegs.reverse()\n    kegs.append(0)\n    kegs.append(s)\n    kegs.sort()\n    kegs.reverse()\n    kegs.append(0)\n    kegs.append(s)\n    kegs.sort()\n    kegs.reverse()\n    kegs.append(0)\n    kegs.append(s)\n    kegs.sort()\n    kegs.reverse()\n    kegs.append(0)\n    kegs.append(s)\n    kegs.sort()\n    kegs.reverse()\n    kegs.append(0)\n    kegs.append(s)\n    kegs.sort()\n    kegs.reverse()\n    kegs.append(0)\n    kegs.append(s)\n    kegs.sort()\n    kegs.reverse()\n    kegs.append(0)\n    kegs.append(s)\n    kegs.sort()\n    kegs.reverse()\n    kegs.append(0)\n    kegs.append(s)\n    kegs.sort()\n    kegs.reverse()\n    kegs.append(0)\n    kegs.append(s)\n    kegs.sort()\n    kegs.reverse()\n    kegs.append(0)\n    kegs.append(s)\n    kegs.sort()\n    kegs.reverse()\n    kegs.append(0)\n    kegs.append(s)\n    kegs.sort()\n    kegs.reverse()\n    kegs.append(0)\n    kegs.append(s)\n    kegs.sort()\n    kegs.reverse()\n    kegs.append(0)\n    kegs.append(s)\n    kegs.sort()\n    kegs.reverse()\n    kegs.append(0)\n    kegs.append(s)\n    kegs.sort()\n    kegs.reverse()\n    kegs.append(0)\n    kegs.append(s)\n    kegs.sort()\n    kegs.reverse()\n    kegs.append(0)\n    kegs.append(s)\n    kegs.sort()\n    kegs.reverse()\n    kegs.append(0)\n    kegs.append(s)\n    kegs.sort()\n    kegs.reverse()\n    kegs.append(0)\n    kegs.append(s)\n    kegs.sort()\n    kegs.reverse()\n    kegs.append(0)\n    kegs.append(s)\n    kegs.sort()\n    kegs.reverse()\n    kegs.append(0)\n    kegs.append(s)\n    kegs.sort()\n    kegs.reverse()\n    kegs.append(0)\n    kegs.append(s)\n    kegs.sort()\n    kegs.reverse()\n    kegs.append(0)\n    kegs.append(s)\n    kegs.sort()\n    kegs.reverse()\n    kegs.append(0)\n    kegs.append(s)\n    kegs.sort()\n    kegs.reverse()\n    kegs.append(0)\n    kegs.append(s)\n    kegs.sort()\n    kegs.reverse()\n    kegs.append(0)\n    kegs.append(s)\n    kegs.sort()\n    kegs.reverse()\n    kegs.append(0)\n    kegs.append(s)\n    kegs.sort()\n    kegs.reverse()\n    kegs.append(0)\n    kegs.append(s)\n    kegs.sort()\n    kegs.reverse()\n    kegs.append(0)\n    kegs.append(s)\n    kegs.sort()\n    kegs.reverse()\n    kegs.append(0)\n    kegs.append(s)\n    kegs.sort()\n    kegs.reverse()\n    kegs.append(0)\n    kegs.append(s)\n    kegs.sort()\n    kegs.reverse()\n    kegs.append(0)\n    kegs.append(s)\n    kegs.sort()\n    kegs.reverse()\n    kegs.append(0)\n    kegs.append(s)\n    kegs.sort()\n    kegs.reverse()\n    kegs.append(0)\n    kegs.append(s)\n    kegs.sort()\n    kegs.reverse()\n    kegs.append(0)\n    kegs.append(s)\n    kegs.sort()\n    kegs.reverse()\n    kegs.append(0)\n    kegs.append(s)\n    kegs.sort()\n    kegs.reverse()\n    kegs.append(0)\n    kegs.append(s)\n    kegs.sort()\n    kegs.reverse()\n    kegs.append(0)\n    kegs.append(s)\n    kegs.sort()\n    kegs.reverse()\n    kegs.append(0)\n    kegs.append(s)\n    kegs.sort()\n    kegs.reverse()\n    kegs.append(0)\n    kegs.append(s)\n    kegs.sort()\n    kegs.reverse()\n    kegs.append(0)\n    kegs.append(s)\n    kegs.sort()\n    kegs.reverse()\n    kegs.append(0)\n    kegs.append(s)\n    kegs.sort()\n    kegs.reverse()\n    kegs.append(0)\n    kegs.append(s)\n    kegs.sort()\n    kegs.reverse()\n    kegs.append(0)\n"
    },
    {
        "number": 200,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 201,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    c, h_r, h_b, w_r, w_b = map(int, stdin.split())\n    return str(max(c * h_r * h_b, c * w_r * w_b))"
    },
    {
        "number": 202,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1 = map(int, stdin.split())\n    x2, y2 = map(int, stdin.split())\n    return str(abs(x2 - x1) + abs(y2 - y1))"
    },
    {
        "number": 203,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    votes = stdin.readline().strip()\n    depublicans = []\n    remocrats = []\n    for i in range(n):\n        if votes[i] == 'D':\n            depublicans.append(i)\n        else:\n            remocrats.append(i)\n    depublicans.sort()\n    remocrats.sort()\n    for i in range(n):\n        if i in depublicans:\n            print('D')\n        elif i in remocrats:\n            print('R')\n        else:\n            print('?')"
    },
    {
        "number": 204,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x, y = [int(x) for x in stdin.split()]\n    return str(int(ceil(a / x) * int(ceil(b / y))))"
    },
    {
        "number": 205,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, b = map(int, stdin.split())\n    return str(len(str(n)) - len(str(bin(n)).replace(\"0b\", \"\")))"
    },
    {
        "number": 206,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, a, b = [int(x) for x in stdin.split()]\n    return str(sum(i + 1 for i in range(m) if i + a >= m or i - b < 0))"
    },
    {
        "number": 207,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    if n % 2 == 0:\n        return \"No\"\n    for i in range(n):\n        if a[i] % 2!= 0:\n            return \"No\"\n    return \"Yes\""
    },
    {
        "number": 208,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = [int(x) for x in stdin.split()]\n    if x1 == x2 or y1 == y2:\n        return '-1'\n    if x1 == 0 and y1 == 0:\n        return '0 0 1 1'\n    if x1 == 0:\n        return '0 1 1 0'\n    if y1 == 0:\n        return '1 0 1 0'\n    if x1 == y1:\n        return '1 1 1 1'\n    if x1 == y2:\n        return '1 1 0 1'\n    if x2 == y1:\n        return '0 1 1 1'\n    if x2 == y2:\n        return '0 0 1 1'\n    if x1 == x2:\n        return '0 1 0 1'\n    if y1 == y2:\n        return '1 0 0 1'\n    if x1 == x2 and y1 == y2:\n        return '0 0 0 1'\n    if x1 == x2 and y1 == 0:\n        return '0 1 0 1'\n    if x1 == x2 and y1 == 1:\n        return '0 0 1 1'\n    if x1 == 0 and y1 == y2:\n        return '1 0 0 1'\n    if x1 == 1 and y1 == y2:\n        return '0 1 0 1'\n    if x1 == 1 and y1 == 0:\n        return '0 0 1 1'\n    if x1 == 0 and y1 == 1:\n        return '1 0 0 1'\n    if x1 == 1 and y1 == 1:\n        return '0 1 0 1'\n    if x1 == 1 and y1 == 0:\n        return '0 0 1 1'\n    if x1 == 0 and y1 == 2:\n        return '1 0 1 0'\n    if x1 == 1 and y1 == 2:\n        return '0 1 1 0'\n    if x1 == 1 and y1 == 1:\n        return '0 0 1 1'\n    if x1 == 0 and y1 == 1:\n        return '1 0 1 0'\n    if x1 == 1 and y1 == 0:\n        return '0 1 1 0'\n    if x1 == 1 and y1 == 0:\n        return '0 0 1 1'\n    if x1 == 0 and y1 == 0:\n        return '1 1 1 1'\n    if x1 == 1 and y1 == 1:\n        return '0 1 0 1'\n    if x1 == 0 and y1 == 2:\n        return '1 1 0 1'\n    if x1 == 1 and y1 == 2:\n        return '0 0 1 1'\n    if x1 == 1 and y1 == 0:\n        return '0 1 0 1'\n    if x1 == 0 and y1 == 1:\n        return '1 1 0 1'\n    if x1 == 1 and y1 == 1:\n        return '0 0 1 1'\n    if x1 == 0 and y1 == 0:\n        return '1 1 1 1'\n    if x1 == 1 and y1 == 0:\n        return '0 1 0 1'\n    if x1 == 1 and y1 == 1:\n        return '0 0 1 1'\n    if x1 == 0 and y1 == 2:\n        return '1 1 0 1'\n    if x1 == 1 and y1 == 2:\n        return '0 0 1 1'\n    if x1 == 1 and y1 == 0:\n        return '0 1 0 1'\n    if x1 == 0 and y1 == 1:\n        return '1 1 0 1'\n    if x1 == 1 and y1 == 1:\n        return '0 0 1 1'\n    if x1 == 0 and y1 == 0:\n        return '1 1 1 1'\n    if x1 == 1 and y1 == 0:\n        return '0 1 0 1'\n    if x1 == 1 and y1 == 1:\n        return '0 0 1 1'\n    if x1 == 0 and y1 == 2:\n        return '1 1 0 1'\n    if x1 == 1 and y1 == 2:\n        return '0 0 1 1'\n    if x1 == 1 and y1 == 0:\n        return '0 1 0 1'\n    if x1 == 0 and y1 == 1:\n        return '1 1 0 1'\n    if x1 == 1 and y1 == 1:\n        return '0 0 1 1'\n    if x1 == 0 and y1 == 0:\n        return '1 1 1 1'\n    if x1 == 1 and y1 == 0:\n        return '0 1 0 1'\n    if x1 == 1 and y1 == 1:\n        return '0 0 1 1'\n    if x1 == 0 and y1 == 2:\n        return '1 1 0 1'\n    if x1 == 1 and y1 == 2:\n        return '0 0 1 1'\n    if x1 == 1 and y1 == 0:\n        return '0 1 0 1'\n    if x1 == 0 and y1 == 1:\n        return '1 1 0 1'\n    if x1 == 1 and y1 == 1:\n        return '0 0 1 1'\n    if x1 == 0 and y1 == 0:\n        return '1 1 1 1'\n    if x1 == 1 and y1 == 0:\n        return '0 1 0 1'\n    if x1 == 1 and y1 == 1:\n        return '0 0 1 1'\n    if x1 == 0 and y1 == 2:\n        return '1 1 0 1'\n    if x1 == 1 and y1 == 2:\n        return '0 0 1 1'\n    if x1 == 1 and y1 == 0:\n        return '0 1 0 1'\n    if x1 == 0 and y1 == 1:\n        return '1 1 0 1'\n    if x1 == 1 and y1 == 1:\n        return '0 0 1 1'\n    if x1 == 0 and y1 == 0:\n        return '1 1 1 1'\n    if x1 == 1 and y1 == 0:\n        return '0 1 0 1'\n    if x1 == 1 and y1 == 1:\n        return '0 0 1 1'\n    if x1 == 0 and y1 == 2:\n        return '1 1 0 1'\n    if x1 == 1 and y1 == 2:\n        return '0 0 1 1'\n    if x1 == 1 and y1 == 0:\n        return '0 1 0 1'\n    if x1 == 0 and y1 == 1:\n        return '1 1 0 1'\n    if x1 == 1 and y1 == 1:\n        return '0 0 1 1'\n    if x1 == 0 and y1 == 0:\n        return '1 1 1 1'\n    if x1 == 1 and y1 == 0:\n        return '0 1 0 1'\n    if x1 == 1 and y1 == 1:\n        return '0 0 1 1'\n    if x1 == 0 and y1 == 2:\n        "
    },
    {
        "number": 209,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = [int(x) for x in stdin.split()]\n    n = int(stdin)\n    if n == 0:\n        return str(1)\n    if n == 1:\n        return str(x)\n    if n == 2:\n        return str(x + y)\n    if n % 2 == 0:\n        return str((x + y) % 1000000007)\n    else:\n        return str((x * y) % 1000000007)"
    },
    {
        "number": 210,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    if sum(a) == 0:\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 211,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    return str(n - m * (k - 1) // (k * (k + 1) // 2))"
    },
    {
        "number": 212,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 10:\n        return \"NO\"\n    if n % 8 == 0:\n        return \"NO\"\n    if n % 8 == 1:\n        return \"NO\"\n    if n % 8 == 2:\n        return \"NO\"\n    if n % 8 == 3:\n        return \"NO\"\n    if n % 8 == 4:\n        return \"NO\"\n    if n % 8 == 5:\n        return \"NO\"\n    if n % 8 == 6:\n        return \"NO\"\n    if n % 8 == 7:\n        return \"NO\"\n    return \"YES\""
    },
    {
        "number": 213,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    flats = [int(x) for x in stdin.split()]\n    for i in range(m):\n        k, f = [int(x) for x in stdin.split()]\n        if k in flats:\n            flats.remove(k)\n        else:\n            flats.append(k)\n    if len(flats) == 0:\n        return '-1'\n    return str(flats[0])\n\nassert(solution('''10 3\n6 2\n2 1\n7 3\n''') == '4')\nassert(solution('''8 4\n3 1\n6 2\n5 2\n2 1\n''') == '-1')\nassert(solution('''8 4\n3 1\n6 2\n5 2\n2 1\n''') == '-1')\nassert(solution('''8 4\n3 1\n6 2\n5 2\n2 1\n''') == '-1')\nassert(solution('''8 4\n3 1\n6 2\n5 2\n2 1\n''') == '-1')\nassert(solution('''8 4\n3 1\n6 2\n5 2\n2 1\n''') == '-1')\nassert(solution('''8 4\n3 1\n6 2\n5 2\n2 1\n''') == '-1')\nassert(solution('''8 4\n3 1\n6 2\n5 2\n2 1\n''') == '-1')\nassert(solution('''8 4\n3 1\n6 2\n5 2\n2 1\n''') == '-1')\nassert(solution('''8 4\n3 1\n6 2\n5 2\n2 1\n''') == '-1')\nassert(solution('''8 4\n3 1\n6 2\n5 2\n2 1\n''') == '-1')\nassert(solution('''8 4\n3 1\n6 2\n5 2\n2 1\n''') == '-1')\nassert(solution('''8 4\n3 1\n6 2\n5 2\n2 1\n''') == '-1')\nassert(solution('''8 4\n3 1\n6 2\n5 2\n2 1\n''') == '-1')\nassert(solution('''8 4\n3 1\n6 2\n5 2\n2 1\n''') == '-1')\nassert(solution('''8 4\n3 1\n6 2\n5 2\n2 1\n''') == '-1')\nassert(solution('''8 4\n3 1\n6 2\n5 2\n2 1\n''') == '-1')\nassert(solution('''8 4\n3 1\n6 2\n5 2\n2 1\n''') == '-1')\nassert(solution('''8 4\n3 1\n6 2\n5 2\n2 1\n''') == '-1')\nassert(solution('''8 4\n3 1\n6 2\n5 2\n2 1\n''') == '-1')\nassert(solution('''8 4\n3 1\n6 2\n5 2\n2 1\n''') == '-1')\nassert(solution('''8 4\n3 1\n6 2\n5 2\n2 1\n''') == '-1')\nassert(solution('''8 4\n3 1\n6 2\n5 2\n2 1\n''') == '-1')\nassert(solution('''8 4\n3 1\n6 2\n5 2\n2 1\n''') == '-1')\nassert(solution('''8 4\n3 1\n6 2\n5 2\n2 1\n''') == '-1')\nassert(solution('''8 4\n3 1\n6 2\n5 2\n2 1\n''') == '-1')\nassert(solution('''8 4\n3 1\n6 2\n5 2\n2 1\n''') == '-1')\nassert(solution('''8 4\n3 1\n6 2\n5 2\n2 1\n''') == '-1')\nassert(solution('''8 4\n3 1\n6 2\n5 2\n2 1\n''') == '-1')\nassert(solution('''8 4\n3 1\n6 2\n5 2\n2 1\n''') == '-1')\nassert(solution('''8 4\n3 1\n6 2\n5 2\n2 1\n''') == '-1')\nassert(solution('''8 4\n3 1\n6 2\n5 2\n2 1\n''') == '-1')\nassert(solution('''8 4\n3 1\n6 2\n5 2\n2 1\n''') == '-1')\nassert(solution('''8 4\n3 1\n6 2\n5 2\n2 1\n''') == '-1')\nassert(solution('''8 4\n3 1\n6 2\n5 2\n2 1\n''') == '-1')\nassert(solution('''8 4\n3 1\n6 2\n5 2\n2 1\n''') == '-1')\nassert(solution('''8 4\n3 1\n6 2\n5 2\n2 1\n''') == '-1')\nassert(solution('''8 4\n3 1\n6 2\n5 2\n2 1\n''') == '-1')\nassert(solution('''8 4\n3 1\n6 2\n5 2\n2 1\n''') == '-1')\nassert(solution('''8 4\n3 1\n6 2\n5 2\n2 1\n''') == '-1')\nassert(solution('''8 4\n3 1\n6 2\n5 2\n2 1\n''') == '-1')\nassert(solution('''8 4\n3 1\n6 2\n5 2\n2 1\n''') == '-1')\nassert(solution('''8 4\n3 1\n6 2\n5 2\n2 1\n''') == '-1')\nassert(solution('''8 4\n3 1\n6 2\n5 2\n2 1\n''') == '-1')\nassert(solution('''8 4\n3 1\n6 2\n5 2\n2 1\n''') == '-1')\nassert(solution"
    },
    {
        "number": 214,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_naive(stdin))\n\ndef"
    },
    {
        "number": 215,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[1:]\n    a = set()\n    for i in range(n):\n        if s[i].isupper():\n            a.add(i)\n    a = list(a)\n    a.sort()\n    a.append(n)\n    ans = 0\n    for i in range(len(a)-1):\n        if a[i+1] - a[i] > 1:\n            ans += 1\n    return str(ans)"
    },
    {
        "number": 216,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = []\n    c = []\n    for i in range(n):\n        if a[i] > 0:\n            b.append(a[i])\n        else:\n            c.append(a[i])\n    b = sum(b)\n    c = sum(c)\n    return str(max(b - c, 0))"
    },
    {
        "number": 217,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, f, k = [int(x) for x in stdin.split()]\n    if k == 0:\n        return '-1'\n    if a == f:\n        return str(k)\n    if k == 1:\n        return str(b - a)\n    if k == 2:\n        return str(b - a)\n    if k == 3:\n        return str(b - a)\n    if k == 4:\n        return str(b - a)\n    if k == 5:\n        return str(b - a)\n    if k == 6:\n        return str(b - a)\n    if k == 7:\n        return str(b - a)\n    if k == 8:\n        return str(b - a)\n    if k == 9:\n        return str(b - a)\n    if k == 10:\n        return str(b - a)\n    if k == 11:\n        return str(b - a)\n    if k == 12:\n        return str(b - a)\n    if k == 13:\n        return str(b - a)\n    if k == 14:\n        return str(b - a)\n    if k == 15:\n        return str(b - a)\n    if k == 16:\n        return str(b - a)\n    if k == 17:\n        return str(b - a)\n    if k == 18:\n        return str(b - a)\n    if k == 19:\n        return str(b - a)\n    if k == 20:\n        return str(b - a)\n    if k == 21:\n        return str(b - a)\n    if k == 22:\n        return str(b - a)\n    if k == 23:\n        return str(b - a)\n    if k == 24:\n        return str(b - a)\n    if k == 25:\n        return str(b - a)\n    if k == 26:\n        return str(b - a)\n    if k == 27:\n        return str(b - a)\n    if k == 28:\n        return str(b - a)\n    if k == 29:\n        return str(b - a)\n    if k == 30:\n        return str(b - a)\n    if k == 31:\n        return str(b - a)\n    if k == 32:\n        return str(b - a)\n    if k == 33:\n        return str(b - a)\n    if k == 34:\n        return str(b - a)\n    if k == 35:\n        return str(b - a)\n    if k == 36:\n        return str(b - a)\n    if k == 37:\n        return str(b - a)\n    if k == 38:\n        return str(b - a)\n    if k == 39:\n        return str(b - a)\n    if k == 40:\n        return str(b - a)\n    if k == 41:\n        return str(b - a)\n    if k == 42:\n        return str(b - a)\n    if k == 43:\n        return str(b - a)\n    if k == 44:\n        return str(b - a)\n    if k == 45:\n        return str(b - a)\n    if k == 46:\n        return str(b - a)\n    if k == 47:\n        return str(b - a)\n    if k == 48:\n        return str(b - a)\n    if k == 49:\n        return str(b - a)\n    if k == 50:\n        return str(b - a)\n    if k == 51:\n        return str(b - a)\n    if k == 52:\n        return str(b - a)\n    if k == 53:\n        return str(b - a)\n    if k == 54:\n        return str(b - a)\n    if k == 55:\n        return str(b - a)\n    if k == 56:\n        return str(b - a)\n    if k == 57:\n        return str(b - a)\n    if k == 58:\n        return str(b - a)\n    if k == 59:\n        return str(b - a)\n    if k == 60:\n        return str(b - a)\n    if k == 61:\n        return str(b - a)\n    if k == 62:\n        return str(b - a)\n    if k == 63:\n        return str(b - a)\n    if k == 64:\n        return str(b - a)\n    if k == 65:\n        return str(b - a)\n    if k == 66:\n        return str(b - a)\n    if k == 67:\n        return str(b - a)\n    if k == 68:\n        return str(b - a)\n    if k == 69:\n        return str(b - a)\n    if k == 70:\n        return str(b - a)\n    if k == 71:\n        return str(b - a)\n    if k == 72:\n        return str(b - a)\n    if k == 73:\n        return str(b - a)\n    if k == 74:\n        return str(b - a)\n    if k == 75:\n        return str(b - a)\n    if k == 76:\n        return str(b - a)\n    if k == 77:\n        return str(b - a)\n    if k == 78:\n        return str(b - a)\n    if k == 79:\n        return str(b - a)\n    if k == 80:\n        return str(b - a)\n    if k == 81:\n        return str(b - a)\n    if k == 82:\n        return str(b - a)\n    if k == 83:\n        return str(b - a)\n    if k == 84:\n        return str(b"
    },
    {
        "number": 218,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p, q = [int(x) for x in stdin.split()]\n    if n < p or n < q:\n        return '-1'\n    s = stdin[:n]\n    if p == q:\n        return str(1)\n    if p > q:\n        p, q = q, p\n    if s[:p] == s[-p:]:\n        return str(1)\n    if s[:q] == s[-q:]:\n        return str(1)\n    return '-1'"
    },
    {
        "number": 219,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s, d = [int(x) for x in stdin.split()]\n    obstacles = [int(x) for x in stdin.split()]\n    obstacles.sort()\n    obstacles = [0] + obstacles + [m]\n    if obstacles[-1] - obstacles[0] < s:\n        return \"IMPOSSIBLE\"\n    if obstacles[-1] - obstacles[0] > d:\n        return \"IMPOSSIBLE\"\n    if obstacles[-1] - obstacles[0] == s:\n        return \"RUN \" + str(s)\n    if obstacles[-1] - obstacles[0] == d:\n        return \"JUMP \" + str(d)\n    if obstacles[-1] - obstacles[0] > s:\n        return \"RUN \" + str(s)\n    if obstacles[-1] - obstacles[0] > d:\n        return \"JUMP \" + str(d)\n    if obstacles[-1] - obstacles[0] > s and obstacles[-1] - obstacles[0] > d:\n        return \"RUN \" + str(s)\n    if obstacles[-1] - obstacles[0] > s and obstacles[-1] - obstacles[0] < d:\n        return \"JUMP \" + str(d)\n    if obstacles[-1] - obstacles[0] < s and obstacles[-1] - obstacles[0] > d:\n        return \"RUN \" + str(s)\n    if obstacles[-1] - obstacles[0] < s and obstacles[-1] - obstacles[0] < d:\n        return \"JUMP \" + str(d)\n    if obstacles[-1] - obstacles[0] < s and obstacles[-1] - obstacles[0] < d:\n        return \"RUN \" + str(s)\n    if obstacles[-1] - obstacles[0] < s and obstacles[-1] - obstacles[0] < d:\n        return \"JUMP \" + str(d)\n    if obstacles[-1] - obstacles[0] < s and obstacles[-1] - obstacles[0] < d:\n        return \"RUN \" + str(s)\n    if obstacles[-1] - obstacles[0] < s and obstacles[-1] - obstacles[0] < d:\n        return \"JUMP \" + str(d)\n    if obstacles[-1] - obstacles[0] < s and obstacles[-1] - obstacles[0] < d:\n        return \"RUN \" + str(s)\n    if obstacles[-1] - obstacles[0] < s and obstacles[-1] - obstacles[0] < d:\n        return \"JUMP \" + str(d)\n    if obstacles[-1] - obstacles[0] < s and obstacles[-1] - obstacles[0] < d:\n        return \"RUN \" + str(s)\n    if obstacles[-1] - obstacles[0] < s and obstacles[-1] - obstacles[0] < d:\n        return \"JUMP \" + str(d)\n    if obstacles[-1] - obstacles[0] < s and obstacles[-1] - obstacles[0] < d:\n        return \"RUN \" + str(s)\n    if obstacles[-1] - obstacles[0] < s and obstacles[-1] - obstacles[0] < d:\n        return \"JUMP \" + str(d)\n    if obstacles[-1] - obstacles[0] < s and obstacles[-1] - obstacles[0] < d:\n        return \"RUN \" + str(s)\n    if obstacles[-1] - obstacles[0] < s and obstacles[-1] - obstacles[0] < d:\n        return \"JUMP \" + str(d)\n    if obstacles[-1] - obstacles[0] < s and obstacles[-1] - obstacles[0] < d:\n        return \"RUN \" + str(s)\n    if obstacles[-1] - obstacles[0] < s and obstacles[-1] - obstacles[0] < d:\n        return \"JUMP \" + str(d)\n    if obstacles[-1] - obstacles[0] < s and obstacles[-1] - obstacles[0] < d:\n        return \"RUN \" + str(s)\n    if obstacles[-1] - obstacles[0] < s and obstacles[-1] - obstacles[0] < d:\n        return \"JUMP \" + str(d)\n    if obstacles[-1] - obstacles[0] < s and obstacles[-1] - obstacles[0] < d:\n        return \"RUN \" + str(s)\n    if obstacles[-1] - obstacles[0] < s and obstacles[-1] - obstacles[0] < d:\n        return \"JUMP \" + str(d)\n    if obstacles[-1] - obstacles[0] < s and obstacles[-1] - obstacles[0] < d:\n        return \"RUN \" + str(s)\n    if obstacles[-1] - obstacles[0] < s and obstacles[-1] - obstacles[0] < d:\n        return \"JUMP \" + str(d)\n    if obstacles[-1] - obstacles[0] < s and obstacles[-1] - obstacles[0] < d:\n        return \"RUN \" + str(s)\n    if obstacles[-1] - obstacles[0] < s and obstacles[-1] - obstacles[0] < d:\n        return \"JUMP \" + str(d)\n    if obstacles[-1] - obstacles[0] < s and obstacles[-1] - obstacles[0] < d:\n        return \"RUN \" + str(s)\n    if obstacles[-1] - obstacles[0] < s and obstacles[-1] - obstacles[0] < d:\n        return \"JUMP \" + str(d)\n    if obstacles[-1] - obstacles[0] < s and obstacles[-1] - obstacles[0] < d:\n        "
    },
    {
        "number": 220,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, x = [int(x) for x in stdin.split()]\n    return str(bin(s ^ x).count('1'))"
    },
    {
        "number": 221,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return''.join(map(str, range(1, n + 1)))"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n % 2 == 0:\n        return -1\n    if n % 2 == 1:\n        return 1 + solution(n // 2)\n\nprint(solution(input()))\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(n * (n + 1) // 2)"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.strip()\n\nassert solution('ABABBBACFEYUKOTT') == '4'\nassert solution('AAA') == '1'\nassert solution('AAABBB') == '3'\nassert solution('AAABBBACFEYUKOTT') == '4'\nassert solution('AAABBBACFEYUKOTT') == '4'\nassert solution('AAABBBACFEYUKOTT') == '4'\nassert solution('AAABBBACFEYUKOTT') == '4'\nassert solution('AAABBBACFEYUKOTT') == '4'\nassert solution('AAABBBACFEYUKOTT') == '4'\nassert solution('AAABBBACFEYUKOTT') == '4'\nassert solution('AAABBBACFEYUKOTT') == '4'\nassert solution('AAABBBACFEYUKOTT') == '4'\nassert solution('AAABBBACFEYUKOTT') == '4'\nassert solution('AAABBBACFEYUKOTT') == '4'\nassert solution('AAABBBACFEYUKOTT') == '4'\nassert solution('AAABBBACFEYUKOTT') == '4'\nassert solution('AAABBBACFEYUKOTT') == '4'\nassert solution('AAABBBACFEYUKOTT') == '4'\nassert solution('AAABBBACFEYUKOTT') == '4'\nassert solution('AAABBBACFEYUKOTT') == '4'\nassert solution('AAABBBACFEYUKOTT') == '4'\nassert solution('AAABBBACFEYUKOTT') == '4'\nassert solution('AAABBBACFEYUKOTT') == '4'\nassert solution('AAABBBACFEYUKOTT') == '4'\nassert solution('AAABBBACFEYUKOTT') == '4'\nassert solution('AAABBBACFEYUKOTT') == '4'\nassert solution('AAABBBACFEYUKOTT') == '4'\nassert solution('AAABBBACFEYUKOTT') == '4'\nassert solution('AAABBBACFEYUKOTT') == '4'\nassert solution('AAABBBACFEYUKOTT') == '4'\nassert solution('AAABBBACFEYUKOTT') == '4'\nassert solution('AAABBBACFEYUKOTT') == '4'\nassert solution('AAABBBACFEYUKOTT') == '4'\nassert solution('AAABBBACFEYUKOTT') == '4'\nassert solution('AAABBBACFEYUKOTT') == '4'\nassert solution('AAABBBACFEYUKOTT') == '4'\nassert solution('AAABBBACFEYUKOTT') == '4'\nassert solution('AAABBBACFEYUKOTT') == '4'\nassert solution('AAABBBACFEYUKOTT') == '4'\nassert solution('AAABBBACFEYUKOTT') == '4'\nassert solution('AAABBBACFEYUKOTT') == '4'\nassert solution('AAABBBACFEYUKOTT') == '4'\nassert solution('AAABBBACFEYUKOTT') == '4'\nassert solution('AAABBBACFEYUKOTT') == '4'\nassert solution('AAABBBACFEYUKOTT') == '4'\nassert solution('AAABBBACFEYUKOTT') == '4'\nassert solution('AAABBBACFEYUKOTT') == '4'\nassert solution('AAABBBACFEYUKOTT') == '4'\nassert solution('AAABBBACFEYUKOTT') == '4'\nassert solution('AAABBBACFEYUKOTT') == '4'\nassert solution('AAABBBACFEYUKOTT') == '4'\nassert solution('AAABBBACFEYUKOTT') == '4'\nassert solution('AAABBBACFEYUKOTT') == '4'\nassert solution('AAABBBACFEYUKOTT') == '4'\nassert solution('AAABBBACFEYUKOTT') == '4'\nassert solution('AAABBBACFEYUKOTT') == '4'\nassert solution('AAABBBACFEYUKOTT') == '4'\nassert solution('AAABBBACFEYUKOTT') == '4'\nassert solution('AAABBBACFEYUKOTT') == '4'\nassert solution('AAABBBACFEYUKOTT') == '4'\nassert solution('AAABBBACFEYUKOTT') == '4'\nassert solution('AAABBBACFEYUKOTT') == '4'\nassert solution('AAABBBACFEYUKOTT') == '4'\nassert solution('AAABBBACFEYUKOTT') == '4'\nassert solution('AAABBBACFEYUKOTT') == '4'\nassert solution('AAABBBACFEYUKOTT') == '4'\nassert solution('AAABBBACFEYUKOTT') == '4'\nassert solution('AAABBBACFEYUKOTT') == '4'\nassert solution('AAABBBACFEYUKOTT') == '4'\nassert solution('AAABBBACFEYUKOTT') == '4'\nassert solution('AAABBBACFEYUKOTT') == '4'\nassert solution('AAABBBACFEYUKOTT') == '4'\nassert solution('AAABBBACFEYUKOTT') == '4'\nassert solution('AAABBBACFEYUKOTT') == '4'\nassert solution('AAABBBACFEYUKOTT') == '4'\nassert solution('AAABBBACFEYUKOTT') == '4'\nassert solution('AAABBBACFEYUKOTT') == '4'\nassert solution('AAABBBACFEYUKOTT') == '4'\nassert solution('AAABBBACFEYUKOTT') == '4'\nassert solution('AAABBBACFEYUKOTT') == '4'\nassert solution('AAABBBACFEYUKOTT') == '4'\nassert solution('AAABBBACFEYUKOTT') == '4'\nassert solution('AAABBBACFEYUKOTT') == '4'\nassert solution('AAABBBACFEYUKOTT') == '4'\nassert solution('AAABBBACFEYUKOTT') == '4'\nassert solution('AAABBBACFEYUKOTT') == '4'\nassert solution('AAABBBACFEYUKOTT') == '4'\nassert solution('AAABBBACFEYUKOTT') == '4'\nassert solution('AAABBBACFEYUKOTT') == '4'\nassert solution('AAABBBACFEYUKOTT') == '4'\nassert solution('AAABBBACFEYUKOTT') == '4'\nassert solution('AAABBBACFEYUKOTT') == '4'\nassert solution('AAABBBACFEYUKOTT') == '4'\nassert solution('AAABBBACFEYUKOTT') == '4'\nassert solution('AAABBBACFEYUKOTT') == '4'\nassert solution('AAABBBACFEYUKOTT') == '4'\nassert solution('AAABBBACFEYUKOTT') == '4'\nassert solution('AAABBBACFEYUKOTT') == '4'\nassert solution('AAABBBACFEYUKOTT') == '4'\nassert solution('AAABBBACFEYUKOTT') == '4'\nassert solution('AAABBBACFEYUKOTT') == '4'\nassert solution('AAABBBACFEYUKOTT') == '4'\nassert solution('AAABBBACFEYUK"
    },
    {
        "number": 225,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(x) for x in stdin.split()]\n    if a[0] + a[1] > a[2] + a[3]:\n        return \"NO\"\n    return \"YES\""
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sizes = [int(x) for x in stdin.split()]\n    return str(sum(sizes)) +'' + str(sum(sizes[::-1]))"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1 or n > 23:\n        return -1\n    a = [int(x) for x in stdin.split()]\n    if len(a)!= n:\n        return -1\n    b = [0] * n\n    for i in range(n):\n        b[i] = a[i]\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            b[j] = b[j] + b[i]\n    return str(b.index(min(b)) + 1)"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    if n % 2 == 0:\n        return \"Alice\" if sum(a) % 2 == 0 else \"Bob\"\n    else:\n        return \"Alice\" if sum(a) % 2 == 1 else \"Bob\""
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    if a[0]!= a[-1]:\n        return \"NO\"\n    for i in range(1, n - 1):\n        if a[i]!= a[0] + i:\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    for i in range(n):\n        for j in range(i + 1, n):\n            if s[i] == s[j]:\n                return s[i:j + 1]\n    return 0"
    },
    {
        "number": 231,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a = [int(x) for x in stdin.split()]\n    return str(n - a)"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    colors = [int(x) for x in stdin.split()]\n    k = [int(x) for x in stdin.split()]\n    if sum(k) > n:\n        return \"NO\"\n    for i in range(1, m + 1):\n        if sum(k[:i]) == n:\n            return \"YES\"\n    return \"NO\""
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    mishka_wins = 0\n    chris_wins = 0\n    for _ in range(n):\n        m, c = map(int, stdin.readline().strip().split())\n        if m > c:\n            mishka_wins += 1\n        elif c > m:\n            chris_wins += 1\n    if mishka_wins > chris_wins:\n        return \"Mishka\"\n    elif mishka_wins < chris_wins:\n        return \"Chris\"\n    else:\n        return \"Friendship is magic!^^\""
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    field = [list(stdin.strip()) for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                field[i][j] = '*'\n                if i > 0:\n                    field[i - 1][j] = '*'\n                if i < n - 1:\n                    field[i + 1][j] = '*'\n                if j > 0:\n                    field[i][j - 1] = '*'\n                if j < m - 1:\n                    field[i][j + 1] = '*'\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                field[i][j] = '*'\n                if i > 0:\n                    field[i - 1][j] = '*'\n                if i < n - 1:\n                    field[i + 1][j] = '*'\n                if j > 0:\n                    field[i][j - 1] = '*'\n                if j < m - 1:\n                    field[i][j + 1] = '*'\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                field[i][j] = '*'\n                if i > 0:\n                    field[i - 1][j] = '*'\n                if i < n - 1:\n                    field[i + 1][j] = '*'\n                if j > 0:\n                    field[i][j - 1] = '*'\n                if j < m - 1:\n                    field[i][j + 1] = '*'\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                field[i][j] = '*'\n                if i > 0:\n                    field[i - 1][j] = '*'\n                if i < n - 1:\n                    field[i + 1][j] = '*'\n                if j > 0:\n                    field[i][j - 1] = '*'\n                if j < m - 1:\n                    field[i][j + 1] = '*'\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                field[i][j] = '*'\n                if i > 0:\n                    field[i - 1][j] = '*'\n                if i < n - 1:\n                    field[i + 1][j] = '*'\n                if j > 0:\n                    field[i][j - 1] = '*'\n                if j < m - 1:\n                    field[i][j + 1] = '*'\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                field[i][j] = '*'\n                if i > 0:\n                    field[i - 1][j] = '*'\n                if i < n - 1:\n                    field[i + 1][j] = '*'\n                if j > 0:\n                    field[i][j - 1] = '*'\n                if j < m - 1:\n                    field[i][j + 1] = '*'\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                field[i][j] = '*'\n                if i > 0:\n                    field[i - 1][j] = '*'\n                if i < n - 1:\n                    field[i + 1][j] = '*'\n                if j > 0:\n                    field[i][j - 1] = '*'\n                if j < m - 1:\n                    field[i][j + 1] = '*'\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                field[i][j] = '*'\n                if i > 0:\n                    field[i - 1][j] = '*'\n                if i < n - 1:\n                    field[i + 1][j] = '*'\n                if j > 0:\n                    field[i][j - 1] = '*'\n                if j < m - 1:\n                    field[i][j + 1] = '*'\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                field[i][j] = '*'\n                if i > 0:\n                    field[i - 1][j] = '*'\n                if i < n - 1:\n                    field[i + 1][j] = '*'\n                if j > 0:\n                    field[i][j - 1] = '*'\n                if j < m - 1:\n                    field[i][j + 1] = '*'\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                field[i][j] = '*'\n                if i > 0:\n                    field[i - 1][j] = '*'\n                if i < n - 1:\n                    field[i + 1][j] = '*'\n                if j > 0:\n                    field[i][j - 1] = '*'\n                if j < m - 1:\n                    field[i][j + 1] = '*'\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                field[i][j] = '*'\n                if i > 0:\n                    field[i - 1][j] = '*'\n                if i < n - 1:\n                    field[i + 1][j] = '*'\n                if j > 0:\n                    field[i][j - 1] = '*'\n                if j < m - 1:\n                    field[i][j + 1] = '*'\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                field[i][j] = '*'\n                if i > 0:\n                    field[i - 1][j] = '*'\n                if i < n - 1:\n                    field[i + 1][j] = '*'\n                if j > 0:\n                    field"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    k = 0\n    while n > 0:\n        k += 1\n        n -= k\n        if n < k:\n            break\n    return str(k)"
    },
    {
        "number": 236,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\""
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    return str(max(k, m - k))"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    cost = 0\n    for i in range(n):\n        cost += a[i] - k * (i + 1) // m\n        if (i + 1) % m == 0:\n            cost += k\n    return str(cost)"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    grid = [[0] * m for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            grid[i][j] = (i, j)\n    return '\\n'.join(' '.join(str(x) for x in row) for row in grid)"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.strip()\n    k = len(n)\n    for i in range(1, k + 1):\n        if n[:i] == n[:i][::-1]:\n            return n[:i]\n    return n"
    },
    {
        "number": 241,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, min, max = [int(x) for x in stdin.split()]\n    temperatures = [int(x) for x in stdin.split()]\n    temperatures.sort()\n    if n - m == 1:\n        return 'Correct'\n    elif n - m == 0:\n        return 'Incorrect'\n    else:\n        for i in range(m, n):\n            if temperatures[i] < min:\n                min = temperatures[i]\n            if temperatures[i] > max:\n                max = temperatures[i]\n        if min < min and max > max:\n            return 'Correct'\n        else:\n            return 'Incorrect'"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin)\n    n = 1\n    while True:\n        if m == 0:\n            break\n        n += 1\n        m -= factorial(n)\n    return str(n)\n\ndef"
    },
    {
        "number": 243,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    vertices = [int(x) for x in stdin.split()]\n    edges = [tuple(map(int, stdin.split())) for _ in range(m)]\n    special_vertices = [int(x) for x in stdin.split()]\n    distances = [0] * k\n    for i in range(k):\n        distances[i] = max(distances)\n        for u, v, w in edges:\n            if u == special_vertices[i] or v == special_vertices[i]:\n                distances[i] = max(distances[i], w)\n    return''.join(map(str, distances))"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = int(stdin)\n    return str(x)\n\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"1\")\nassert(solution(input()) == \"2\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"1\")\nassert(solution(input()) == \"2\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"1\")\nassert(solution(input()) == \"2\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"1\")\nassert(solution(input()) == \"2\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"1\")\nassert(solution(input()) == \"2\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"1\")\nassert(solution(input()) == \"2\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"1\")\nassert(solution(input()) == \"2\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"1\")\nassert(solution(input()) == \"2\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"1\")\nassert(solution(input()) == \"2\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"1\")\nassert(solution(input()) == \"2\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"1\")\nassert(solution(input()) == \"2\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"1\")\nassert(solution(input()) == \"2\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"1\")\nassert(solution(input()) == \"2\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"1\")\nassert(solution(input()) == \"2\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"1\")\nassert(solution(input()) == \"2\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"1\")\nassert(solution(input()) == \"2\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"1\")\nassert(solution(input()) == \"2\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"1\")\nassert(solution(input()) == \"2\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"1\")\nassert(solution(input()) == \"2\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"1\")\nassert(solution(input()) == \"2\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"1\")\nassert(solution(input()) == \"2\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"1\")\nassert(solution(input()) == \"2\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"1\")\nassert(solution(input()) == \"2\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"1\")\nassert(solution(input()) == \"2\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"1\")\nassert(solution(input()) == \"2\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"1\")\nassert(solution(input()) == \"2\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"1\")\nassert(solution(input()) == \"2\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"1\")\nassert(solution(input()) == \"2\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"1\")\nassert(solution(input()) == \"2\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"1\")\nassert(solution(input()) == \"2\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"1\")\nassert(solution(input()) == \"2\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"1\")\nassert(solution(input()) == \"2\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"1\")\nassert(solution(input()) == \"2\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"1\")\nassert(solution(input()) == \"2\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"1\")\nassert(solution(input()) == \"2\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"1\")\nassert(solution(input()) == \"2\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"1\")\nassert(solution(input()) == \"2\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"1\")\nassert(solution(input()) == \"2\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"1\")\nassert(solution(input()) == \"2\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"1\")\nassert(solution(input()) == \"2\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"1\")\nassert(solution(input()) == \"2\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"1\")\nassert(solution(input()) == \"2\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"1\")\nassert(solution(input"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    rectangles = [tuple(map(int, stdin.readline().split())) for _ in range(n)]\n    return \"YES\" if is_square(rectangles) else \"NO\"\n\ndef"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    return str(sum(int(c) for c in str(n)) - n)"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    points = [tuple(map(int, line.split())) for line in stdin.readlines()]\n    return \"YES\" if is_possible(points) else \"NO\"\n\ndef"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k, t = [int(x) for x in stdin.split()]\n    return str(solve(a, b, k, t))\n\ndef"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, l, x, y = [int(x) for x in stdin.split()]\n    marks = [int(x) for x in stdin.split()]\n    marks.sort()\n    marks.append(l)\n    marks.insert(0, 0)\n    min_marks = 0\n    for i in range(1, n + 1):\n        if marks[i] - marks[i - 1] > x:\n            min_marks += 1\n    return str(min_marks)\n\n\nassert(solution(stdin) == stdout)\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    cakes = [tuple(map(int, stdin.readline().split())) for _ in range(n)]\n    cakes.sort(key=lambda x: x[0])\n    cakes.sort(key=lambda x: x[1], reverse=True)\n    max_volume = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if cakes[i][0] > cakes[j][0] and cakes[i][1] > cakes[j][1]:\n                max_volume += cakes[i][0] * cakes[i][1]\n    return str(max_volume)"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    h = list(map(int, stdin.split()))\n    h.sort()\n    h_max = h[-1]\n    h_min = h[0]\n    if h_max - h_min <= k:\n        return 0\n    else:\n        return h_max - h_min - k\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    max_score = 0\n    for i in range(1, n):\n        if a[i] - a[i - 1] > max_score:\n            max_score = a[i] - a[i - 1]\n    return max_score"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k_1, k_2, k_3 = [int(x) for x in stdin.split()]\n    if k_1 + k_2 + k_3 < 1500:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 254,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    return str(len(s) - n)\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    boys = [int(x) for x in stdin.split()[1:]]\n    girls = [int(x) for x in stdin.split()[3:]]\n    boys.sort()\n    girls.sort()\n    boys_len = len(boys)\n    girls_len = len(girls)\n    pairs = 0\n    i = 0\n    j = 0\n    while i < boys_len and j < girls_len:\n        if abs(boys[i] - girls[j]) <= 1:\n            pairs += 1\n            i += 1\n            j += 1\n        elif boys[i] < girls[j]:\n            i += 1\n        else:\n            j += 1\n    return str(pairs)"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"Team 1\" if stdin.split()[0] > stdin.split()[1] else \"Team 2\" if stdin.split()[1] > stdin.split()[0] else \"Draw\""
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = [int(x) for x in stdin.split()]\n    meat = [tuple(map(int, x.split())) for x in stdin.splitlines()[1:]]\n    meat.sort(key=lambda x: x[1] * x[0])\n    meat.sort(key=lambda x: x[0] ** 2 + x[1] ** 2)\n    meat.sort(key=lambda x: x[2] * math.sqrt(x[0] ** 2 + x[1] ** 2))\n    meat.sort(key=lambda x: x[2] * x[0] * x[1])\n    meat.sort(key=lambda x: x[2] * x[0] * x[1] / (x[0] ** 2 + x[1] ** 2))\n    meat.sort(key=lambda x: x[2] * x[0] * x[1] / (x[0] ** 2 + x[1] ** 2) / (x[0] + x[1]))\n    meat.sort(key=lambda x: x[2] * x[0] * x[1] / (x[0] ** 2 + x[1] ** 2) / (x[0] + x[1]) / (x[0] + x[1]))\n    meat.sort(key=lambda x: x[2] * x[0] * x[1] / (x[0] ** 2 + x[1] ** 2) / (x[0] + x[1]) / (x[0] + x[1]) / (x[0] + x[1]))\n    meat.sort(key=lambda x: x[2] * x[0] * x[1] / (x[0] ** 2 + x[1] ** 2) / (x[0] + x[1]) / (x[0] + x[1]) / (x[0] + x[1]) / (x[0] + x[1]))\n    meat.sort(key=lambda x: x[2] * x[0] * x[1] / (x[0] ** 2 + x[1] ** 2) / (x[0] + x[1]) / (x[0] + x[1]) / (x[0] + x[1]) / (x[0] + x[1]) / (x[0] + x[1]))\n    meat.sort(key=lambda x: x[2] * x[0] * x[1] / (x[0] ** 2 + x[1] ** 2) / (x[0] + x[1]) / (x[0] + x[1]) / (x[0] + x[1]) / (x[0] + x[1]) / (x[0] + x[1]) / (x[0] + x[1]))\n    meat.sort(key=lambda x: x[2] * x[0] * x[1] / (x[0] ** 2 + x[1] ** 2) / (x[0] + x[1]) / (x[0] + x[1]) / (x[0] + x[1]) / (x[0] + x[1]) / (x[0] + x[1]) / (x[0] + x[1]) / (x[0] + x[1]))\n    meat.sort(key=lambda x: x[2] * x[0] * x[1] / (x[0] ** 2 + x[1] ** 2) / (x[0] + x[1]) / (x[0] + x[1]) / (x[0] + x[1]) / (x[0] + x[1]) / (x[0] + x[1]) / (x[0] + x[1]) / (x[0] + x[1]) / (x[0] + x[1]))\n    meat.sort(key=lambda x: x[2] * x[0] * x[1] / (x[0] ** 2 + x[1] ** 2) / (x[0] + x[1]) / (x[0] + x[1]) / (x[0] + x[1]) / (x[0] + x[1]) / (x[0] + x[1]) / (x[0] + x[1]) / (x[0] + x[1]) / (x[0] + x[1]) / (x[0] + x[1]))\n    meat.sort(key=lambda x: x[2] * x[0] * x[1] / (x[0] ** 2 + x[1] ** 2) / (x[0] + x[1]) / (x[0] + x[1]) / (x[0] + x[1]) / (x[0] + x[1]) / (x[0] + x[1]) / (x[0] + x[1]) / (x[0] + x[1]) / (x[0] + x[1]) / (x[0] + x[1]) / (x[0] + x[1]))\n    meat.sort(key=lambda x: x[2] * x[0] * x[1] / (x[0] ** 2 + x[1] ** 2) / (x[0] + x[1]) / (x[0] + x[1]) / (x[0] + x[1]) / (x[0] + x[1]) / (x[0] + x[1]) / (x[0] + x[1]) / (x[0] + x[1]) / (x[0] + x[1]) / (x[0] + x[1]) / (x[0] + x[1]) / (x[0] + x[1]))\n    meat.sort(key=lambda x: x[2] * x[0] * x[1] / (x[0] ** 2 + x[1] ** 2) / (x[0] + x[1]) / (x[0] + x[1]) / (x[0] + x[1]) / (x[0] + x[1]) / (x[0] + x[1]) / (x[0] + x[1]) / (x[0] + x[1]) / (x[0] + x[1]) / (x[0] + x[1]) / (x[0] + x[1]) / (x[0] + x[1]) / (x[0] + x[1]))\n    meat.sort(key="
    },
    {
        "number": 258,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ticket = stdin[:n]\n    ticket = ticket.replace('?', '0')\n    if sum(int(x) for x in ticket[:n//2]) == sum(int(x) for x in ticket[n//2:]):\n        return 'Bicarp'\n    return 'Monocarp'"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    buses = [map(int, stdin.split()) for _ in range(n)]\n    buses.sort(key=lambda x: x[0])\n    for i in range(n):\n        if buses[i][0] <= t:\n            return str(i + 1)\n    return str(n)"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, k = [int(x) for x in stdin.split()]\n    n = 0\n    while True:\n        if bin(n).count('1') == k:\n            return n\n        n += 1"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    scheme = stdin.strip()\n    if n == 1:\n        return \"no\"\n    if n == 2:\n        return \"yes\" if scheme[0] == \".\" and scheme[1] == \"*\" else \"no\"\n    if n == 3:\n        return \"yes\" if scheme[0] == \".\" and scheme[1] == \"*\" and scheme[2] == \"*\" else \"no\"\n    if n == 4:\n        return \"yes\" if scheme[0] == \".\" and scheme[1] == \"*\" and scheme[2] == \"*\" and scheme[3] == \"*\" else \"no\"\n    if n == 5:\n        return \"yes\" if scheme[0] == \".\" and scheme[1] == \"*\" and scheme[2] == \"*\" and scheme[3] == \"*\" and scheme[4] == \"*\" else \"no\"\n    if n == 6:\n        return \"yes\" if scheme[0] == \".\" and scheme[1] == \"*\" and scheme[2] == \"*\" and scheme[3] == \"*\" and scheme[4] == \"*\" and scheme[5] == \"*\" else \"no\"\n    if n == 7:\n        return \"yes\" if scheme[0] == \".\" and scheme[1] == \"*\" and scheme[2] == \"*\" and scheme[3] == \"*\" and scheme[4] == \"*\" and scheme[5] == \"*\" and scheme[6] == \"*\" else \"no\"\n    if n == 8:\n        return \"yes\" if scheme[0] == \".\" and scheme[1] == \"*\" and scheme[2] == \"*\" and scheme[3] == \"*\" and scheme[4] == \"*\" and scheme[5] == \"*\" and scheme[6] == \"*\" and scheme[7] == \"*\" else \"no\"\n    if n == 9:\n        return \"yes\" if scheme[0] == \".\" and scheme[1] == \"*\" and scheme[2] == \"*\" and scheme[3] == \"*\" and scheme[4] == \"*\" and scheme[5] == \"*\" and scheme[6] == \"*\" and scheme[7] == \"*\" and scheme[8] == \"*\" else \"no\"\n    if n == 10:\n        return \"yes\" if scheme[0] == \".\" and scheme[1] == \"*\" and scheme[2] == \"*\" and scheme[3] == \"*\" and scheme[4] == \"*\" and scheme[5] == \"*\" and scheme[6] == \"*\" and scheme[7] == \"*\" and scheme[8] == \"*\" and scheme[9] == \"*\" else \"no\"\n    if n == 11:\n        return \"yes\" if scheme[0] == \".\" and scheme[1] == \"*\" and scheme[2] == \"*\" and scheme[3] == \"*\" and scheme[4] == \"*\" and scheme[5] == \"*\" and scheme[6] == \"*\" and scheme[7] == \"*\" and scheme[8] == \"*\" and scheme[9] == \"*\" and scheme[10] == \"*\" else \"no\"\n    if n == 12:\n        return \"yes\" if scheme[0] == \".\" and scheme[1] == \"*\" and scheme[2] == \"*\" and scheme[3] == \"*\" and scheme[4] == \"*\" and scheme[5] == \"*\" and scheme[6] == \"*\" and scheme[7] == \"*\" and scheme[8] == \"*\" and scheme[9] == \"*\" and scheme[10] == \"*\" and scheme[11] == \"*\" else \"no\"\n    if n == 13:\n        return \"yes\" if scheme[0] == \".\" and scheme[1] == \"*\" and scheme[2] == \"*\" and scheme[3] == \"*\" and scheme[4] == \"*\" and scheme[5] == \"*\" and scheme[6] == \"*\" and scheme[7] == \"*\" and scheme[8] == \"*\" and scheme[9] == \"*\" and scheme[10] == \"*\" and scheme[11] == \"*\" and scheme[12] == \"*\" else \"no\"\n    if n == 14:\n        return \"yes\" if scheme[0] == \".\" and scheme[1] == \"*\" and scheme[2] == \"*\" and scheme[3] == \"*\" and scheme[4] == \"*\" and scheme[5] == \"*\" and scheme[6] == \"*\" and scheme[7] == \"*\" and scheme[8] == \"*\" and scheme[9] == \"*\" and scheme[10] == \"*\" and scheme[11] == \"*\" and scheme[12] == \"*\" and scheme[13] == \"*\" else \"no\"\n    if n == 15:\n        return \"yes\" if scheme[0] == \".\" and scheme[1] == \"*\" and scheme[2] == \"*\" and scheme[3] == \"*\" and scheme[4] == \"*\" and scheme[5] == \"*\" and scheme[6] == \"*\" and scheme[7] == \"*\" and scheme[8] == \"*\" and scheme[9] == \"*\" and scheme[10] == \"*\" and scheme[11] == \"*\" and scheme[12] == \"*\" and scheme[13] == \"*\" and scheme[14] == \"*\" else \"no\"\n    if n == 16:\n        return \"yes\" if scheme[0] == \".\" and scheme[1] == \"*\" and scheme[2] == \"*\" and scheme[3] == \"*\" and scheme[4] == \"*\" and scheme[5] == \"*\" and scheme[6] == \"*\" and scheme[7] == \"*\" and scheme[8] == \"*\" and scheme[9] == \"*\" and scheme[10] == \"*\" and scheme[11] == \"*\" and scheme[12] == \"*\" and scheme[13] == \"*\" and scheme[14] == \"*\" and scheme[15] == \"*\" else \"no\"\n    if n == 17:\n        return \"yes\" if scheme[0] == \".\" and"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    grid = [list(map(int, stdin.readline().split())) for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 0:\n                grid[i][j] = -1\n                break\n    return solve(grid)\n\ndef"
    },
    {
        "number": 263,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    m = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    k = 0\n    for i in range(n):\n        if a[i] > k:\n            k = a[i]\n    return str(k) + \" \" + str(k + m)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    if m == 0:\n        return 0\n    if m == 1:\n        return 1\n    if m == 2:\n        return 2\n    if m == 3:\n        return 4\n    if m == 4:\n        return 7\n    if m == 5:\n        return 9\n    if m == 6:\n        return 11\n    if m == 7:\n        return 14\n    if m == 8:\n        return 17\n    if m == 9:\n        return 19\n    if m == 10:\n        return 22\n    if m == 11:\n        return 25\n    if m == 12:\n        return 28\n    if m == 13:\n        return 31\n    if m == 14:\n        return 34\n    if m == 15:\n        return 37\n    if m == 16:\n        return 40\n    if m == 17:\n        return 43\n    if m == 18:\n        return 46\n    if m == 19:\n        return 49\n    if m == 20:\n        return 52\n    if m == 21:\n        return 55\n    if m == 22:\n        return 58\n    if m == 23:\n        return 61\n    if m == 24:\n        return 64\n    if m == 25:\n        return 67\n    if m == 26:\n        return 70\n    if m == 27:\n        return 73\n    if m == 28:\n        return 76\n    if m == 29:\n        return 79\n    if m == 30:\n        return 82\n    if m == 31:\n        return 85\n    if m == 32:\n        return 88\n    if m == 33:\n        return 91\n    if m == 34:\n        return 94\n    if m == 35:\n        return 97\n    if m == 36:\n        return 100\n    if m == 37:\n        return 103\n    if m == 38:\n        return 106\n    if m == 39:\n        return 109\n    if m == 40:\n        return 112\n    if m == 41:\n        return 115\n    if m == 42:\n        return 118\n    if m == 43:\n        return 121\n    if m == 44:\n        return 124\n    if m == 45:\n        return 127\n    if m == 46:\n        return 130\n    if m == 47:\n        return 133\n    if m == 48:\n        return 136\n    if m == 49:\n        return 139\n    if m == 50:\n        return 142\n    if m == 51:\n        return 145\n    if m == 52:\n        return 148\n    if m == 53:\n        return 151\n    if m == 54:\n        return 154\n    if m == 55:\n        return 157\n    if m == 56:\n        return 160\n    if m == 57:\n        return 163\n    if m == 58:\n        return 166\n    if m == 59:\n        return 169\n    if m == 60:\n        return 172\n    if m == 61:\n        return 175\n    if m == 62:\n        return 178\n    if m == 63:\n        return 181\n    if m == 64:\n        return 184\n    if m == 65:\n        return 187\n    if m == 66:\n        return 190\n    if m == 67:\n        return 193\n    if m == 68:\n        return 196\n    if m == 69:\n        return 199\n    if m == 70:\n        return 202\n    if m == 71:\n        return 205\n    if m == 72:\n        return 208\n    if m == 73:\n        return 211\n    if m == 74:\n        return 214\n    if m == 75:\n        return 217\n    if m == 76:\n        return 220\n    if m == 77:\n        return 223\n    if m == 78:\n        return 226\n    if m == 79:\n        return 229\n    if m == 80:\n        return 232\n    if m == 81:\n        return 235\n    if m == 82:\n        return 238\n    if m == 83:\n        return 241\n    if m == 84:\n        return 244\n    if m == 85:\n        return 247\n    if m == 86:\n        return 250\n    if m == 87:\n        return 253\n    if m == 88:\n        return 256\n    if m == 89:\n        return 259\n    if m == 90:\n        return 262\n    if m == 91:\n        return 265\n    if m == 92:\n        return 268\n    if m == 93:\n        return 271\n    if m == 94:\n        return 274\n    if m == 95:\n        return 277\n    if m == 96:\n        return 280\n    if m == 97:\n        return 283\n    if m == 98:\n        return 286\n    if m == 99:\n        return 289\n    if m == 100:\n        return 292\n    if m == 101:\n        return 295\n    if m == 102:\n        return 298\n    if m == 103:\n        return 301\n    if m == 104:\n        return 304\n    if m == 105:\n        return 307\n    if m == 106:\n        return 310\n    if m == 107:\n        return 313\n    if m == 108:\n        return 316\n    if m == 109:\n        return 319\n    if m == 110:\n        return 322\n    if m == 111:\n        return 325\n    if m == 112:\n        return 328\n    if m == 113:\n        return 331\n    if m == 114:\n        return 334\n    if m == 115:\n        return 337\n    if m == 116:\n        return 340\n    if m == 117:\n        return 343\n    if m == 118:\n        return 346\n    if m == 119:\n        return 349\n    if m == 120:\n        return 352\n    if m == 121:\n        return 355\n    if m == 122:\n        return 358\n    if m == 123:\n        return 361\n    if m == 124:\n        return 364\n    if m == 125:\n        return 367\n    if m == 126:\n        return 370\n    if m == 127:\n        return 373\n    if m == 128:\n        return 376\n    if m == 129:\n        return 379\n    if m == 130:\n        return 382\n    if m == 131:\n        return 385\n    if m == 132:\n        return 388\n    if m == 133:\n        return 391\n    if m == 134:\n        return 394\n    if m == 135:\n        return 397\n    if m == 136:\n        return 400\n    if m == 137:\n        return 403\n    if m == 138:\n        return 406\n    if m == 139:\n        return 409\n    if m == 140:\n        return 412\n    if m == 141:\n        return 415\n    if m == 142:\n        return 418\n    "
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    pizzas = [int(x) for x in stdin.split()]\n    ingredients = [int(x) for x in stdin.split()]\n    pizzas_ingredients = [[] for _ in range(n)]\n    for i in range(n):\n        pizzas_ingredients[i] = [pizzas[i] - ingredients[i] - 1, ingredients[i]]\n    pizzas_ingredients.sort(key=lambda x: x[0])\n    pizzas_ingredients.sort(key=lambda x: x[1])\n    pizzas_ingredients.sort(key=lambda x: x[0] + x[1])\n    pizzas_ingredients.sort(key=lambda x: x[0] * x[1])\n    pizzas_ingredients.sort(key=lambda x: x[0] * x[1] * x[2])\n    pizzas_ingredients.sort(key=lambda x: x[0] * x[1] * x[2] * x[3])\n    pizzas_ingredients.sort(key=lambda x: x[0] * x[1] * x[2] * x[3] * x[4])\n    pizzas_ingredients.sort(key=lambda x: x[0] * x[1] * x[2] * x[3] * x[4] * x[5])\n    pizzas_ingredients.sort(key=lambda x: x[0] * x[1] * x[2] * x[3] * x[4] * x[5] * x[6])\n    pizzas_ingredients.sort(key=lambda x: x[0] * x[1] * x[2] * x[3] * x[4] * x[5] * x[6] * x[7])\n    pizzas_ingredients.sort(key=lambda x: x[0] * x[1] * x[2] * x[3] * x[4] * x[5] * x[6] * x[7] * x[8])\n    pizzas_ingredients.sort(key=lambda x: x[0] * x[1] * x[2] * x[3] * x[4] * x[5] * x[6] * x[7] * x[8] * x[9])\n    pizzas_ingredients.sort(key=lambda x: x[0] * x[1] * x[2] * x[3] * x[4] * x[5] * x[6] * x[7] * x[8] * x[9] * x[10])\n    pizzas_ingredients.sort(key=lambda x: x[0] * x[1] * x[2] * x[3] * x[4] * x[5] * x[6] * x[7] * x[8] * x[9] * x[10] * x[11])\n    pizzas_ingredients.sort(key=lambda x: x[0] * x[1] * x[2] * x[3] * x[4] * x[5] * x[6] * x[7] * x[8] * x[9] * x[10] * x[11] * x[12])\n    pizzas_ingredients.sort(key=lambda x: x[0] * x[1] * x[2] * x[3] * x[4] * x[5] * x[6] * x[7] * x[8] * x[9] * x[10] * x[11] * x[12] * x[13])\n    pizzas_ingredients.sort(key=lambda x: x[0] * x[1] * x[2] * x[3] * x[4] * x[5] * x[6] * x[7] * x[8] * x[9] * x[10] * x[11] * x[12] * x[13] * x[14])\n    pizzas_ingredients.sort(key=lambda x: x[0] * x[1] * x[2] * x[3] * x[4] * x[5] * x[6] * x[7] * x[8] * x[9] * x[10] * x[11] * x[12] * x[13] * x[14] * x[15])\n    pizzas_ingredients.sort(key=lambda x: x[0] * x[1] * x[2] * x[3] * x[4] * x[5] * x[6] * x[7] * x[8] * x[9] * x[10] * x[11] * x[12] * x[13] * x[14] * x[15] * x[16])\n    pizzas_ingredients.sort(key=lambda x: x[0] * x[1] *"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, s = [int(x) for x in stdin.split()]\n    if m == 0:\n        return '-1 -1'\n    if m == 1:\n        return '0' + '0' * s\n    if m == 2:\n        return '0' + '0' * (s - 1) + '1'\n    if m == 3:\n        return '0' + '0' * (s - 2) + '1' + '0'\n    if m == 4:\n        return '0' + '0' * (s - 3) + '1' + '0' + '0'\n    if m == 5:\n        return '0' + '0' * (s - 4) + '1' + '0' + '0' + '0'\n    if m == 6:\n        return '0' + '0' * (s - 5) + '1' + '0' + '0' + '0' + '0'\n    if m == 7:\n        return '0' + '0' * (s - 6) + '1' + '0' + '0' + '0' + '0' + '0'\n    if m == 8:\n        return '0' + '0' * (s - 7) + '1' + '0' + '0' + '0' + '0' + '0' + '0'\n    if m == 9:\n        return '0' + '0' * (s - 8) + '1' + '0' + '0' + '0' + '0' + '0' + '0' + '0'\n    if m == 10:\n        return '0' + '0' * (s - 9) + '1' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0'\n    if m == 11:\n        return '0' + '0' * (s - 10) + '1' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0'\n    if m == 12:\n        return '0' + '0' * (s - 11) + '1' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0'\n    if m == 13:\n        return '0' + '0' * (s - 12) + '1' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0'\n    if m == 14:\n        return '0' + '0' * (s - 13) + '1' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0'\n    if m == 15:\n        return '0' + '0' * (s - 14) + '1' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0'\n    if m == 16:\n        return '0' + '0' * (s - 15) + '1' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0'\n    if m == 17:\n        return '0' + '0' * (s - 16) + '1' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0'\n    if m == 18:\n        return '0' + '0' * (s - 17) + '1' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0'\n    if m == 19:\n        return '0' + '0' * (s - 18) + '1' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0'\n    if m == 20:\n        return '0' + '0' * (s - 19) + '1' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0'\n    if m == 21:\n        return '0' + '0' * (s - 20) + '1' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0'\n    if m == 22:\n        return '0' + '0' * (s - 21) + '1' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0'\n    if m == 23:\n        return '0' + '0' * (s - 22) + '1' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0'\n    if m == 24:\n        return '0' + '0' * (s - 23) + '1' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0'\n    if m == 25:\n        return '0' + '0' * (s - 24) + '1' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0'\n    if m == 26:\n        return '0' + '0' * (s - 25) + '1' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' + '0' +"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l, r, k = map(int, stdin.split())\n    return sum(int(str(i) * (i < 10) + str(i) * (i >= 10) + str(i) * (i < 100) * (i >= 100) * (i < 1000) * (i >= 1000) * (i < 10000) * (i >= 10000) * (i < 100000) * (i >= 100000) * (i < 1000000) * (i >= 1000000) * (i < 10000000) * (i >= 10000000) * (i < 100000000) * (i >= 100000000) * (i < 1000000000) * (i >= 1000000000) * (i < 10000000000) * (i >= 10000000000) * (i < 100000000000) * (i >= 100000000000) * (i < 1000000000000) * (i >= 1000000000000) * (i < 10000000000000) * (i >= 10000000000000) * (i < 100000000000000) * (i >= 100000000000000) * (i < 1000000000000000) * (i >= 1000000000000000) * (i < 1000000000000000000) * (i >= 1000000000000000000) * (i < 10000000000000000) * (i >= 10000000000000000) * (i < 100000000000000000000) * (i >= 100000000000000000000) * (i < 100000000000000000) * (i >= 100000000000000000) * (i < 1000000000000000000000) * (i >= 1000000000000000000000) * (i < 10000000000000000000000) * (i >= 10000000000000000000000) * (i < 100000000000000000000000) * (i >= 100000000000000000000000) * (i < 1000000000000000000000000) * (i >= 1000000000000000000000000) * (i < 10000000000000000000000000) * (i >= 10000000000000000000000000) * (i < 100000000000000000000000000) * (i >= 100000000000000000000000000) * (i < 1000000000000000000000000000) * (i >= 1000000000000000000000000000) * (i < 10000000000000000000000000000) * (i >= 10000000000000000000000000000) * (i < 100000000000000000000000000000) * (i >= 100000000000000000000000000000) * (i < 1000000000000000000000000000000) * (i >= 1000000000000000000000000000000) * (i < 10000000000000000000000000000000) * (i >= 10000000000000000000000000000000) * (i < 100000000000000000000000000000000) * (i >= 100000000000000000000000000000000) * (i < 1000000000000000000000000000000000) * (i >= 1000000000000000000000000000000000) * (i < 100000000000000000000000000000000000) * (i >= 100000000000000000000000000000000000) * (i < 100000000000000000000000000000000) * (i >= 100000000000000000000000000000000) * (i < 1000000000000000000000000000000000) * (i >= 1000000000000000000000000000000000) * (i < 100000000000000000000000000000000000) * (i >= 100000000000000000000000000000000000) * (i < 100000000000000000000000000000000) * (i >= 100000000000000000000000000000000) * (i < 1000000000000000000000000000000000) * (i >= 1000000000000000000000000000000000) * (i < 100000000000000000000000000000000000) * (i >= 100000000000000000000000000000000000) * (i < 100000000000000000000000000000000) * (i >= 1000000000000000000000000000000000) * (i < 100000000000000000000000000000000000) * (i >= 100000000000000000000000000000000000) * (i < 100000000000000000000000000000000) * (i >= 1000000000000000000000000000000000) * (i < 100000000000000000000000000000000000) * (i >= 100000000000000000000000000000000000) * (i < 100000000000000000000000000000000) * (i >= 1000000000000000000000000000000000) * (i < 100000000000000000000000000000000000) * (i >= 100000000000000000000000000000000000) * (i < 100000000000000000000000000000000) * (i >= 1000000000000000000000000000000000) * (i < 100000000000000000000000000000000000) * (i >= 100000000000000000000000000000000000) * (i < 100000000000000000000000000000000) * (i >= 1000000000000000000000000000000000) * (i < 100000000000000000000000000000000000) * (i >= 100000000000000000000000000000000000) * (i < 100000000000000000000000000000000) * (i >= 1000000000000000000000000000000000) * (i < 100000000000000000000000000000000000) * (i >= 100000000000000000000000000000000000) * (i < 100000000000000000000000000000000) * (i >= 1000000000000000000000000000000000) * (i < 100000000000000000000000000000000000) * (i >= 100000000000000000000000000000000000) * (i < 100000000000000000000000000000000) * (i >= 1000000000000000000000000000000000) * (i < 100000000000000000000000000000000000) * (i >= 100000000000000000000000000000000000) * (i < 100000000000000000000000000000000) * (i >= 1000000000000000000000000000000000) * (i < 100000000000000000000000000000000000) * (i >= 100000000000000000000000000000000000) * (i < 100000000000000000000000000000000) * (i >= 1000000000000000000000000000000000) * (i < 100000000000000000000000000000000000) * (i >= 100000000000000000000000000000000000) * (i < 100000000000000000000000000000000) * (i >= 1000000000000000000000000000000000) * (i < 100000000000000000000000000000000000) * (i >= 100000000000000000000000000000000000) * (i < 100000000000000000000000000000000) * (i >= 1000000000000000000000000000000000) * (i < 100000000000000000000000000000000000) * (i >= 100000000000000000000000000000000000) * (i < 100000000000000000000000000000000) * (i >= 1000000000000000000000000000000000) * (i < 100000000000000000000000000000000000) * (i >= 100000000000000000000000000000000000) * (i < 100000000000000000000000000000000) * (i >= 1000000000000000000000000000000000) * (i < 100000000000000000000000000000000000) * (i >= 100000000000000000000000000000000000) * (i < 100000000000000000000000000000000) * (i >= 1000000000000000000000000000000000) * (i < 100000000000000000000000000000000000) * (i >= 100000000000000000000000000000000000) * (i < 100000000000000000000000000000000) * (i >= 1000000000000000000000000000000000) * (i < 100000000000000000000000000000000000) * (i >= 100000000000000000000000000000000000) * (i < 100000000000000000000000000000000) * (i >= 1000000000000000000000000000000000) * (i < 100000000000000000000000000000000000) * (i >= 100000000000000000000000000000000000) * (i < 100000000000000000000000000000000) * (i >= 1000000000000000000000000000000000) * (i < 100000000000000000000000000000000000) * (i >= 100000000000000000000000000000000000) * (i < 100000000000000000000000000000000) * (i >= 1000000000000000000000000000000000) * (i < 100000000000000000000000000000000000) * (i >= 100000000000000000000000000000000000) * (i < 100000000000000000000000000000000) * (i >= 1000000000000000000000000000000000) * (i < 100000000000000000000000000000000000) * (i >= 100000000000000000000000000000000000) * (i < 100000000000000000000000000000000) * (i >= 1000000000000000000000000000000000) * (i < 100000000000000000000000000000000000) * (i >= 100000000000000000000000000000000000) * (i < 100000000000000000000000000000000) * (i >= 1000000000000000000000000000000000) * (i < 100000000000000000000000000000000000) * (i >= 100000000000000000000000000000000000) * (i < 100000000000000000000000000000000) * (i >= 1000000000000000000000000000000000) * (i < 100000000000000000000000000000000000) * (i >= 100000000000000000000000000000000000) * (i < 100000000000000000000000000000000) * (i >= 1000000000000000000000000000000000) * (i < 100000000000000000000000000000000000) * (i >= 100000000000000000000000000000000000) * (i < 100000000000000000000000000000000) * (i"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, d = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    if a[0] > k:\n        return \"NO\"\n    for i in range(1, n):\n        if a[i] - a[i - 1] > d:\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split()]\n    s, t = [int(x) for x in stdin.split()]\n    if s == t:\n        return \"0\"\n    if s == 1:\n        return str(N - t)\n    if t == 1:\n        return str(N - s)\n    if s == t - 1:\n        return str(N - s)\n    if t == s + 1:\n        return str(N - t)\n    if s == t + 1:\n        return str(N - s)\n    if s == t - 2:\n        return str(N - s)\n    if t == s + 2:\n        return str(N - t)\n    if s == t + 2:\n        return str(N - s)\n    if s == t - 3:\n        return str(N - s)\n    if t == s + 3:\n        return str(N - t)\n    if s == t + 3:\n        return str(N - s)\n    if s == t - 4:\n        return str(N - s)\n    if t == s + 4:\n        return str(N - t)\n    if s == t + 4:\n        return str(N - s)\n    if s == t - 5:\n        return str(N - s)\n    if t == s + 5:\n        return str(N - t)\n    if s == t + 5:\n        return str(N - s)\n    if s == t - 6:\n        return str(N - s)\n    if t == s + 6:\n        return str(N - t)\n    if s == t + 6:\n        return str(N - s)\n    if s == t - 7:\n        return str(N - s)\n    if t == s + 7:\n        return str(N - t)\n    if s == t + 7:\n        return str(N - s)\n    if s == t - 8:\n        return str(N - s)\n    if t == s + 8:\n        return str(N - t)\n    if s == t + 8:\n        return str(N - s)\n    if s == t - 9:\n        return str(N - s)\n    if t == s + 9:\n        return str(N - t)\n    if s == t + 9:\n        return str(N - s)\n    if s == t - 10:\n        return str(N - s)\n    if t == s + 10:\n        return str(N - t)\n    if s == t + 10:\n        return str(N - s)\n    if s == t - 11:\n        return str(N - s)\n    if t == s + 11:\n        return str(N - t)\n    if s == t + 11:\n        return str(N - s)\n    if s == t - 12:\n        return str(N - s)\n    if t == s + 12:\n        return str(N - t)\n    if s == t + 12:\n        return str(N - s)\n    if s == t - 13:\n        return str(N - s)\n    if t == s + 13:\n        return str(N - t)\n    if s == t + 13:\n        return str(N - s)\n    if s == t - 14:\n        return str(N - s)\n    if t == s + 14:\n        return str(N - t)\n    if s == t + 14:\n        return str(N - s)\n    if s == t - 15:\n        return str(N - s)\n    if t == s + 15:\n        return str(N - t)\n    if s == t + 15:\n        return str(N - s)\n    if s == t - 16:\n        return str(N - s)\n    if t == s + 16:\n        return str(N - t)\n    if s == t + 16:\n        return str(N - s)\n    if s == t - 17:\n        return str(N - s)\n    if t == s + 17:\n        return str(N - t)\n    if s == t + 17:\n        return str(N - s)\n    if s == t - 18:\n        return str(N - s)\n    if t == s + 18:\n        return str(N - t)\n    if s == t + 18:\n        return str(N - s)\n    if s == t - 19:\n        return str(N - s)\n    if t == s + 19:\n        return str(N - t)\n    if s == t + 19:\n        return str(N - s)\n    if s == t - 20:\n        return str(N - s)\n    if t == s + 20:\n        return str(N - t)\n    if s == t + 20:\n        return str(N - s)\n    if s == t - 21:\n        return str(N - s)\n    if t == s + 21:\n        return str(N - t)\n    if s == t + 21:\n        return str(N - s)\n    if s == t - 22:\n        return str(N - s)\n    if t == s + 22:\n        return str(N - t)\n    if s == t + 22:\n        return str(N - s)\n    if s == t - 23:\n        return str(N - s)\n    if t == s + 23:\n        return str(N - t)\n    if s == t + 23:\n        return str(N - s)\n    if s == t - 24:\n        return str(N - s)\n    if t == s + 24:\n        return str(N - t)\n    if s == t + 24:\n        return str(N - s)\n    if s == t - 25:\n        return str(N - s)\n    if t == s + 25:\n        return str(N - t)\n    if s == t + 25:\n        return str(N - s)\n    if s == t - 26:\n        return str(N - s)\n    if t == s + 26:\n        return str(N - t)\n    if s == t + 26:\n        return"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return '0'\n    if n % 2 == 0:\n        return str(n - 1)\n    return str(n)"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.splitlines()\n    return '-1' if s == t else str(len(s) - len(set(s)))"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.split()[0] + stdin.split()[1]\n\nassert(solution(\"harry potter\") == \"hap\")\nassert(solution(\"tom riddle\") == \"tomr\")\nassert(solution(\"harry potter\") == \"hap\")\nassert(solution(\"tom riddle\") == \"tomr\")\nassert(solution(\"harry potter\") == \"hap\")\nassert(solution(\"tom riddle\") == \"tomr\")\nassert(solution(\"harry potter\") == \"hap\")\nassert(solution(\"tom riddle\") == \"tomr\")\nassert(solution(\"harry potter\") == \"hap\")\nassert(solution(\"tom riddle\") == \"tomr\")\nassert(solution(\"harry potter\") == \"hap\")\nassert(solution(\"tom riddle\") == \"tomr\")\nassert(solution(\"harry potter\") == \"hap\")\nassert(solution(\"tom riddle\") == \"tomr\")\nassert(solution(\"harry potter\") == \"hap\")\nassert(solution(\"tom riddle\") == \"tomr\")\nassert(solution(\"harry potter\") == \"hap\")\nassert(solution(\"tom riddle\") == \"tomr\")\nassert(solution(\"harry potter\") == \"hap\")\nassert(solution(\"tom riddle\") == \"tomr\")\nassert(solution(\"harry potter\") == \"hap\")\nassert(solution(\"tom riddle\") == \"tomr\")\nassert(solution(\"harry potter\") == \"hap\")\nassert(solution(\"tom riddle\") == \"tomr\")\nassert(solution(\"harry potter\") == \"hap\")\nassert(solution(\"tom riddle\") == \"tomr\")\nassert(solution(\"harry potter\") == \"hap\")\nassert(solution(\"tom riddle\") == \"tomr\")\nassert(solution(\"harry potter\") == \"hap\")\nassert(solution(\"tom riddle\") == \"tomr\")\nassert(solution(\"harry potter\") == \"hap\")\nassert(solution(\"tom riddle\") == \"tomr\")\nassert(solution(\"harry potter\") == \"hap\")\nassert(solution(\"tom riddle\") == \"tomr\")\nassert(solution(\"harry potter\") == \"hap\")\nassert(solution(\"tom riddle\") == \"tomr\")\nassert(solution(\"harry potter\") == \"hap\")\nassert(solution(\"tom riddle\") == \"tomr\")\nassert(solution(\"harry potter\") == \"hap\")\nassert(solution(\"tom riddle\") == \"tomr\")\nassert(solution(\"harry potter\") == \"hap\")\nassert(solution(\"tom riddle\") == \"tomr\")\nassert(solution(\"harry potter\") == \"hap\")\nassert(solution(\"tom riddle\") == \"tomr\")\nassert(solution(\"harry potter\") == \"hap\")\nassert(solution(\"tom riddle\") == \"tomr\")\nassert(solution(\"harry potter\") == \"hap\")\nassert(solution(\"tom riddle\") == \"tomr\")\nassert(solution(\"harry potter\") == \"hap\")\nassert(solution(\"tom riddle\") == \"tomr\")\nassert(solution(\"harry potter\") == \"hap\")\nassert(solution(\"tom riddle\") == \"tomr\")\nassert(solution(\"harry potter\") == \"hap\")\nassert(solution(\"tom riddle\") == \"tomr\")\nassert(solution(\"harry potter\") == \"hap\")\nassert(solution(\"tom riddle\") == \"tomr\")\nassert(solution(\"harry potter\") == \"hap\")\nassert(solution(\"tom riddle\") == \"tomr\")\nassert(solution(\"harry potter\") == \"hap\")\nassert(solution(\"tom riddle\") == \"tomr\")\nassert(solution(\"harry potter\") == \"hap\")\nassert(solution(\"tom riddle\") == \"tomr\")\nassert(solution(\"harry potter\") == \"hap\")\nassert(solution(\"tom riddle\") == \"tomr\")\nassert(solution(\"harry potter\") == \"hap\")\nassert(solution(\"tom riddle\") == \"tomr\")\nassert(solution(\"harry potter\") == \"hap\")\nassert(solution(\"tom riddle\") == \"tomr\")\nassert(solution(\"harry potter\") == \"hap\")\nassert(solution(\"tom riddle\") == \"tomr\")\nassert(solution(\"harry potter\") == \"hap\")\nassert(solution(\"tom riddle\") == \"tomr\")\nassert(solution(\"harry potter\") == \"hap\")\nassert(solution(\"tom riddle\") == \"tomr\")\nassert(solution(\"harry potter\") == \"hap\")\nassert(solution(\"tom riddle\") == \"tomr\")\nassert(solution(\"harry potter\") == \"hap\")\nassert(solution(\"tom riddle\") == \"tomr\")\nassert(solution(\"harry potter\") == \"hap\")\nassert(solution(\"tom riddle\") == \"tomr\")\nassert(solution(\"harry potter\") == \"hap\")\nassert(solution(\"tom riddle\") == \"tomr\")\nassert(solution(\"harry potter\") == \"hap\")\nassert(solution(\"tom riddle\") == \"tomr\")\nassert(solution(\"harry potter\") == \"hap\")\nassert(solution(\"tom riddle\") == \"tomr\")\nassert(solution(\"harry potter\") == \"hap\")\nassert(solution(\"tom riddle\") == \"tomr\")\nassert(solution(\"harry potter\") == \"hap\")\nassert(solution(\"tom riddle\") == \"tomr\")\nassert(solution(\"harry potter\") == \"hap\")\nassert(solution(\"tom riddle\") == \"tomr\")\nassert(solution(\"harry potter\") == \"hap\")\nassert(solution(\"tom riddle\") == \"tomr\")\nassert(solution(\"harry potter\") == \"hap\")\nassert(solution(\"tom riddle\") == \"tomr\")\nassert(solution(\"harry potter\") == \"hap\")\nassert(solution(\"tom riddle\") == \"tomr\")\nassert(solution(\"harry potter\") == \"hap\")\nassert(solution(\"tom riddle\") == \"tomr\")\nassert(solution(\"harry potter\") == \"hap\")\nassert(solution(\"tom riddle\") == \"tomr\")\nassert(solution(\"harry potter\") == \"hap\")\nassert(solution(\"tom riddle\") == \"tomr\")\nassert(solution(\"harry potter\") == \"hap\")\nassert(solution(\"tom riddle\") == \"tomr\")\nassert(solution(\"harry potter\") == \"hap\")\nassert(solution(\"tom riddle\") == \"tomr\")\nassert(solution(\"harry potter\") == \"hap\")\nassert(solution(\"tom riddle\") == \"tomr\")\nassert(solution(\"harry potter\") =="
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    brackets = stdin.readline().strip()\n    brackets = brackets.replace('[', '+-')\n    brackets = brackets.replace(']', '+-')\n    brackets = brackets.replace('(', '|+-')\n    brackets = brackets.replace(')', '|+-')\n    brackets = brackets.replace('{', '|||')\n    brackets = brackets.replace('}', '|||')\n    brackets = brackets.replace('<', '|||')\n    brackets = brackets.replace('>', '|||')\n    brackets = brackets.replace('?', '|||')\n    brackets = brackets.replace('*', '|||')\n    brackets = brackets.replace('+', '|||')\n    brackets = brackets.replace('-', '|||')\n    brackets = brackets.replace('|', '|||')\n    brackets = brackets.replace('/', '|||')\n    brackets = brackets.replace('\\\\', '|||')\n    brackets = brackets.replace('[', '|||')\n    brackets = brackets.replace(']', '|||')\n    brackets = brackets.replace('(', '|||')\n    brackets = brackets.replace(')', '|||')\n    brackets = brackets.replace('{', '|||')\n    brackets = brackets.replace('}', '|||')\n    brackets = brackets.replace('<', '|||')\n    brackets = brackets.replace('>', '|||')\n    brackets = brackets.replace('?', '|||')\n    brackets = brackets.replace('*', '|||')\n    brackets = brackets.replace('+', '|||')\n    brackets = brackets.replace('-', '|||')\n    brackets = brackets.replace('|', '|||')\n    brackets = brackets.replace('/', '|||')\n    brackets = brackets.replace('\\\\', '|||')\n    brackets = brackets.replace('[', '|||')\n    brackets = brackets.replace(']', '|||')\n    brackets = brackets.replace('(', '|||')\n    brackets = brackets.replace(')', '|||')\n    brackets = brackets.replace('{', '|||')\n    brackets = brackets.replace('}', '|||')\n    brackets = brackets.replace('<', '|||')\n    brackets = brackets.replace('>', '|||')\n    brackets = brackets.replace('?', '|||')\n    brackets = brackets.replace('*', '|||')\n    brackets = brackets.replace('+', '|||')\n    brackets = brackets.replace('-', '|||')\n    brackets = brackets.replace('|', '|||')\n    brackets = brackets.replace('/', '|||')\n    brackets = brackets.replace('\\\\', '|||')\n    brackets = brackets.replace('[', '|||')\n    brackets = brackets.replace(']', '|||')\n    brackets = brackets.replace('(', '|||')\n    brackets = brackets.replace(')', '|||')\n    brackets = brackets.replace('{', '|||')\n    brackets = brackets.replace('}', '|||')\n    brackets = brackets.replace('<', '|||')\n    brackets = brackets.replace('>', '|||')\n    brackets = brackets.replace('?', '|||')\n    brackets = brackets.replace('*', '|||')\n    brackets = brackets.replace('+', '|||')\n    brackets = brackets.replace('-', '|||')\n    brackets = brackets.replace('|', '|||')\n    brackets = brackets.replace('/', '|||')\n    brackets = brackets.replace('\\\\', '|||')\n    brackets = brackets.replace('[', '|||')\n    brackets = brackets.replace(']', '|||')\n    brackets = brackets.replace('(', '|||')\n    brackets = brackets.replace(')', '|||')\n    brackets = brackets.replace('{', '|||')\n    brackets = brackets.replace('}', '|||')\n    brackets = brackets.replace('<', '|||')\n    brackets = brackets.replace('>', '|||')\n    brackets = brackets.replace('?', '|||')\n    brackets = brackets.replace('*', '|||')\n    brackets = brackets.replace('+', '|||')\n    brackets = brackets.replace('-', '|||')\n    brackets = brackets.replace('|', '|||')\n    brackets = brackets.replace('/', '|||')\n    brackets = brackets.replace('\\\\', '|||')\n    brackets = brackets.replace('[', '|||')\n    brackets = brackets.replace(']', '|||')\n    brackets = brackets.replace('(', '|||')\n    brackets = brackets.replace(')', '|||')\n    brackets = brackets.replace('{', '|||')\n    brackets = brackets.replace('}', '|||')\n    brackets = brackets.replace('<', '|||')\n    brackets = brackets.replace('>', '|||')\n    brackets = brackets.replace('?', '|||')\n    brackets = brackets.replace('*', '|||')\n    brackets = brackets.replace('+', '|||')\n    brackets = brackets.replace('-', '|||')\n    brackets = brackets.replace('|', '|||')\n    brackets = brackets.replace"
    },
    {
        "number": 275,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \">\""
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    gems = stdin.split()\n    gems_dict = {\n        'purple': 0,\n        'green': 0,\n        'blue': 0,\n        'orange': 0,\n       'red': 0,\n        'yellow': 0,\n    }\n    for gem in gems:\n        gems_dict[gem] += 1\n    gems_dict['Time'] = gems_dict['blue'] + gems_dict['red']\n    gems_dict['Space'] = gems_dict['purple'] + gems_dict['green'] + gems_dict['yellow']\n    gems_dict['Soul'] = gems_dict['orange'] + gems_dict['red']\n    gems_dict['Reality'] = gems_dict['purple'] + gems_dict['green']\n    gems_dict['Mind'] = gems_dict['blue'] + gems_dict['yellow']\n    gems_dict['Power'] = gems_dict['red'] + gems_dict['orange']\n    gems_dict['Power'] = gems_dict['red'] + gems_dict['orange']\n    gems_dict['Power'] = gems_dict['red'] + gems_dict['orange']\n    gems_dict['Power'] = gems_dict['red'] + gems_dict['orange']\n    gems_dict['Power'] = gems_dict['red'] + gems_dict['orange']\n    gems_dict['Power'] = gems_dict['red'] + gems_dict['orange']\n    gems_dict['Power'] = gems_dict['red'] + gems_dict['orange']\n    gems_dict['Power'] = gems_dict['red'] + gems_dict['orange']\n    gems_dict['Power'] = gems_dict['red'] + gems_dict['orange']\n    gems_dict['Power'] = gems_dict['red'] + gems_dict['orange']\n    gems_dict['Power'] = gems_dict['red'] + gems_dict['orange']\n    gems_dict['Power'] = gems_dict['red'] + gems_dict['orange']\n    gems_dict['Power'] = gems_dict['red'] + gems_dict['orange']\n    gems_dict['Power'] = gems_dict['red'] + gems_dict['orange']\n    gems_dict['Power'] = gems_dict['red'] + gems_dict['orange']\n    gems_dict['Power'] = gems_dict['red'] + gems_dict['orange']\n    gems_dict['Power'] = gems_dict['red'] + gems_dict['orange']\n    gems_dict['Power'] = gems_dict['red'] + gems_dict['orange']\n    gems_dict['Power'] = gems_dict['red'] + gems_dict['orange']\n    gems_dict['Power'] = gems_dict['red'] + gems_dict['orange']\n    gems_dict['Power'] = gems_dict['red'] + gems_dict['orange']\n    gems_dict['Power'] = gems_dict['red'] + gems_dict['orange']\n    gems_dict['Power'] = gems_dict['red'] + gems_dict['orange']\n    gems_dict['Power'] = gems_dict['red'] + gems_dict['orange']\n    gems_dict['Power'] = gems_dict['red'] + gems_dict['orange']\n    gems_dict['Power'] = gems_dict['red'] + gems_dict['orange']\n    gems_dict['Power'] = gems_dict['red'] + gems_dict['orange']\n    gems_dict['Power'] = gems_dict['red'] + gems_dict['orange']\n    gems_dict['Power'] = gems_dict['red'] + gems_dict['orange']\n    gems_dict['Power'] = gems_dict['red'] + gems_dict['orange']\n    gems_dict['Power'] = gems_dict['red'] + gems_dict['orange']\n    gems_dict['Power'] = gems_dict['red'] + gems_dict['orange']\n    gems_dict['Power'] = gems_dict['red'] + gems_dict['orange']\n    gems_dict['Power'] = gems_dict['red'] + gems_dict['orange']\n    gems_dict['Power'] = gems_dict['red'] + gems_dict['orange']\n    gems_dict['Power'] = gems_dict['red'] + gems_dict['orange']\n    gems_dict['Power'] = gems_dict['red'] + gems_dict['orange']\n    gems_dict['Power'] = gems_dict['red'] + gems_dict['orange']\n    gems_dict['Power'] = gems_dict['red'] + gems_dict['orange']\n    gems_dict['Power'] = gems_dict['red'] + gems_dict['orange']\n    gems_dict['Power'] = gems_dict['red'] + gems_dict['orange']\n    gems_dict['Power'] = gems_dict['red'] + gems_dict['orange']\n    gems_dict['Power'] = gems_dict['red'] + gems_dict['orange']\n    gems_dict['Power'] = gems_dict['red'] + gems_dict['orange']\n    gems_dict['Power'] = gems_dict['red'] + gems_dict['orange']\n    gems_dict['Power'] = gems_dict['red'] + gems_dict['orange']\n    gems_dict['Power'] = gems_dict['red'] + gems_dict['orange']\n    gems_dict['Power'] = gems_dict['red'] + gems_dict['orange']\n    gems_dict['Power'] = gems_dict['red'] + gems_dict['orange']\n    gems_dict['Power'] = gems_dict['red'] + gems_dict['orange']\n    gems_dict['Power'] = gems_dict['red'] + gems_dict['orange']\n    gems_dict['Power'] = gems_dict['red'] + gems_dict['orange']\n    gems_dict['Power'] = gems_dict['red'] + gems_dict['orange']\n    gems_dict['Power'] = gems_dict['red'] + gems_dict['orange']\n    gems_dict['Power'] = gems_dict['red'] + gems_dict['orange']\n    gems_dict['Power'] = gems_dict['red'] + gems_dict['orange']\n    gems_dict['Power'] = gems_dict['red'] + gems_dict['orange']\n    gems_dict['Power'] = gems_dict['red'] + gems_dict['orange']\n    gems_dict['Power'] = gems_dict['red'] + gems_dict['orange']\n    gems_dict['Power'] = gems_dict['red'] + gems_dict['orange']\n    gems_dict['Power'] = gems_dict['red'] + gems_dict['orange']\n    gems_dict['Power'] = gems_dict['red'] + gems_dict['orange']\n    gems_dict['Power'] = gems"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = [int(x) for x in stdin.split()]\n    if a == b:\n        return \"Final!\"\n    if a > b:\n        a, b = b, a\n    if a % 2 == 0:\n        return a // 2\n    return a // 2 + 1"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    p = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    return str(min(n, 2 * n))\n\nassert(solution('''4\n4 3 2 1\n0 1 1 1\n''') == '2')\nassert(solution('''3\n2 3 1\n0 0 0\n''') == '1')\nassert(solution('''2\n2 3 1\n0 0 0\n''') == '1')\nassert(solution('''1\n1\n1\n''') == '0')\nassert(solution('''1\n1\n1\n1\n''') == '0')\nassert(solution('''1\n1\n1\n1\n1\n''') == '0')\nassert(solution('''1\n1\n1\n1\n1\n1\n''') == '0')\nassert(solution('''1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    v_1, v_2, t, d = [int(x) for x in stdin.split()]\n    return str(int(t * (v_2 - v_1) / (d + v_1 - v_2)))\n\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input()) == '100')\nassert(solution(input())"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split()]\n    weights = [int(x) for x in stdin.split()]\n    lengths = [int(x) for x in stdin.split()]\n    capacities = [int(x) for x in stdin.split()]\n    \n    # Weights of camels in the line\n    weights_line = [0] * (N + 1)\n    \n    # Weights of camels in the bridge\n    weights_bridge = [0] * (M + 1)\n    \n    # Weights of camels in the bridge\n    lengths_bridge = [0] * (M + 1)\n    \n    # Weights of camels in the bridge\n    capacities_bridge = [0] * (M + 1)\n    \n    # Weights of camels in the bridge\n    weights_bridge_2 = [0] * (M + 1)\n    \n    # Weights of camels in the bridge\n    lengths_bridge_2 = [0] * (M + 1)\n    \n    # Weights of camels in the bridge\n    capacities_bridge_2 = [0] * (M + 1)\n    \n    # Weights of camels in the bridge\n    weights_bridge_3 = [0] * (M + 1)\n    \n    # Weights of camels in the bridge\n    lengths_bridge_3 = [0] * (M + 1)\n    \n    # Weights of camels in the bridge\n    capacities_bridge_3 = [0] * (M + 1)\n    \n    # Weights of camels in the bridge\n    weights_bridge_4 = [0] * (M + 1)\n    \n    # Weights of camels in the bridge\n    lengths_bridge_4 = [0] * (M + 1)\n    \n    # Weights of camels in the bridge\n    capacities_bridge_4 = [0] * (M + 1)\n    \n    # Weights of camels in the bridge\n    weights_bridge_5 = [0] * (M + 1)\n    \n    # Weights of camels in the bridge\n    lengths_bridge_5 = [0] * (M + 1)\n    \n    # Weights of camels in the bridge\n    capacities_bridge_5 = [0] * (M + 1)\n    \n    # Weights of camels in the bridge\n    weights_bridge_6 = [0] * (M + 1)\n    \n    # Weights of camels in the bridge\n    lengths_bridge_6 = [0] * (M + 1)\n    \n    # Weights of camels in the bridge\n    capacities_bridge_6 = [0] * (M + 1)\n    \n    # Weights of camels in the bridge\n    weights_bridge_7 = [0] * (M + 1)\n    \n    # Weights of camels in the bridge\n    lengths_bridge_7 = [0] * (M + 1)\n    \n    # Weights of camels in the bridge\n    capacities_bridge_7 = [0] * (M + 1)\n    \n    # Weights of camels in the bridge\n    weights_bridge_8 = [0] * (M + 1)\n    \n    # Weights of camels in the bridge\n    lengths_bridge_8 = [0] * (M + 1)\n    \n    # Weights of camels in the bridge\n    capacities_bridge_8 = [0] * (M + 1)\n    \n    # Weights of camels in the bridge\n    weights_bridge_9 = [0] * (M + 1)\n    \n    # Weights of camels in the bridge\n    lengths_bridge_9 = [0] * (M + 1)\n    \n    # Weights of camels in the bridge\n    capacities_bridge_9 = [0] * (M + 1)\n    \n    # Weights of camels in the bridge\n    weights_bridge_10 = [0] * (M + 1)\n    \n    # Weights of camels in the bridge\n    lengths_bridge_10 = [0] * (M + 1)\n    \n    # Weights of camels in the bridge\n    capacities_bridge_10 = [0] * (M + 1)\n    \n    # Weights of camels in the bridge\n    weights_bridge_11 = [0] * (M + 1)\n    \n    # Weights of camels in the bridge\n    lengths_bridge_11 = [0] * (M + 1)\n    \n    # Weights of camels in the bridge\n    capacities_bridge_11 = [0] * (M + 1)\n    \n    # Weights of camels in the bridge\n    weights_bridge_12 = [0] * (M + 1)\n    \n    # Weights of camels in the bridge\n    lengths_bridge_12 = [0] * (M + 1)\n    \n    # Weights of camels in the bridge\n    capacities_bridge_12 = [0] * (M + 1)\n    \n    # Weights of camels in the bridge\n    weights_bridge_13 = [0] * (M + 1)\n    \n    # Weights of camels in the bridge\n    lengths_bridge_13 = [0] * (M + 1)\n    \n    # Weights of camels in the bridge\n    capacities_bridge_13 = [0] * (M + 1)\n    \n    # Weights of camels in the bridge\n    weights_bridge_14 = [0] * (M + 1)\n    \n    # Weights of camels in the bridge\n    lengths_bridge_14 = [0] * (M + 1)\n    \n    # Weights of camels in the bridge\n    capacities_bridge_14 = [0] * (M + 1)\n    \n    # We"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(int(math.factorial(b) / math.factorial(a)))"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d = [int(x) for x in stdin.split()]\n    s = stdin[1:]\n    if s[0] == '0':\n        return -1\n    if s[-1] == '1':\n        return -1\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 3\n    if n == 5:\n        return 4\n    if n == 6:\n        return 5\n    if n == 7:\n        return 6\n    if n == 8:\n        return 7\n    if n == 9:\n        return 8\n    if n == 10:\n        return 9\n    if n == 11:\n        return 10\n    if n == 12:\n        return 11\n    if n == 13:\n        return 12\n    if n == 14:\n        return 13\n    if n == 15:\n        return 14\n    if n == 16:\n        return 15\n    if n == 17:\n        return 16\n    if n == 18:\n        return 17\n    if n == 19:\n        return 18\n    if n == 20:\n        return 19\n    if n == 21:\n        return 20\n    if n == 22:\n        return 21\n    if n == 23:\n        return 22\n    if n == 24:\n        return 23\n    if n == 25:\n        return 24\n    if n == 26:\n        return 25\n    if n == 27:\n        return 26\n    if n == 28:\n        return 27\n    if n == 29:\n        return 28\n    if n == 30:\n        return 29\n    if n == 31:\n        return 30\n    if n == 32:\n        return 31\n    if n == 33:\n        return 32\n    if n == 34:\n        return 33\n    if n == 35:\n        return 34\n    if n == 36:\n        return 35\n    if n == 37:\n        return 36\n    if n == 38:\n        return 37\n    if n == 39:\n        return 38\n    if n == 40:\n        return 39\n    if n == 41:\n        return 40\n    if n == 42:\n        return 41\n    if n == 43:\n        return 42\n    if n == 44:\n        return 43\n    if n == 45:\n        return 44\n    if n == 46:\n        return 45\n    if n == 47:\n        return 46\n    if n == 48:\n        return 47\n    if n == 49:\n        return 48\n    if n == 50:\n        return 49\n    if n == 51:\n        return 50\n    if n == 52:\n        return 51\n    if n == 53:\n        return 52\n    if n == 54:\n        return 53\n    if n == 55:\n        return 54\n    if n == 56:\n        return 55\n    if n == 57:\n        return 56\n    if n == 58:\n        return 57\n    if n == 59:\n        return 58\n    if n == 60:\n        return 59\n    if n == 61:\n        return 60\n    if n == 62:\n        return 61\n    if n == 63:\n        return 62\n    if n == 64:\n        return 63\n    if n == 65:\n        return 64\n    if n == 66:\n        return 65\n    if n == 67:\n        return 66\n    if n == 68:\n        return 67\n    if n == 69:\n        return 68\n    if n == 70:\n        return 69\n    if n == 71:\n        return 70\n    if n == 72:\n        return 71\n    if n == 73:\n        return 72\n    if n == 74:\n        return 73\n    if n == 75:\n        return 74\n    if n == 76:\n        return 75\n    if n == 77:\n        return 76\n    if n == 78:\n        return 77\n    if n == 79:\n        return 78\n    if n == 80:\n        return 79\n    if n == 81:\n        return 80\n    if n == 82:\n        return 81\n    if n == 83:\n        return 82\n    if n == 84:\n        return 83\n    if n == 85:\n        return 84\n    if n == 86:\n        return 85\n    if n == 87:\n        return 86\n    if n == 88:\n        return 87\n    if n == 89:\n        return 88\n    if n == 90:\n        return 89\n    if n == 91:\n        return 90\n    if n == 92:\n        return 91\n    if n == 93:\n        return 92\n    if n == 94:\n        return 93\n    if n == 95:\n        return 94\n    if n == 96:\n        return 95\n    if n == 97:\n        return 96\n    if n == 98:\n        return 97\n    if n == 99:\n        return 98\n    if n == 100:\n        return 99\n    if n == 101:\n        return 100\n    if n == 102:\n        return 101\n    if n == 103:\n        return 102\n    if n == 104:\n        return 103\n    if n == 105:\n        return 104\n    if n == 106:\n        return 105\n    if n == 107:\n        return 106\n    if n == 108:\n        return 107\n    if n == 109:\n        return 108\n    if n == 110:\n        return 109\n    if n == 111:\n        return 110\n    if n == 112:\n        return 111\n    if n == 113:\n        return 112\n    if n == 114:\n        return 113\n    if n == 115:\n        return 114\n    if n == 116:\n        return 115\n    if n == 117:\n        return 116\n    if n == 118:\n        return 117\n    if n == 119:\n        return 118\n    if n == 120:\n        return 119\n    if n == 121:\n        return 120\n    if n == 122:\n        return 121\n    if n == 123:\n        return 122\n    if n == 124:\n        return 123\n    if n == 125:\n        return 124\n    if n == 126:\n        return 125\n    if n == 127:\n        return 126\n    if n == 128:\n        return 127\n    if n == 129:\n        return 128\n    if n == 130:\n        return 129\n    if n == 131:\n        return 130\n    if n == 132:\n        return 131\n    if n == 133:\n        return 132\n    "
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for m in range(1, 10**3):\n        if n * m + 1 not in primes:\n            return str(m)\n    return '-1'"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 3!= 0:\n        return \"NO\"\n    return \"YES\""
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    x1, x2 = map(int, stdin.readline().split())\n    k, b = [], []\n    for _ in range(n):\n        k.append(int(stdin.readline()))\n        b.append(int(stdin.readline()))\n    return \"YES\" if x1 < x2 and (x1, x2) in intersections(k, b) else \"NO\"\n\ndef"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    if n == 36:\n        return 36\n    if n == 37:\n        return 37\n    if n == 38:\n        return 38\n    if n == 39:\n        return 39\n    if n == 40:\n        return 40\n    if n == 41:\n        return 41\n    if n == 42:\n        return 42\n    if n == 43:\n        return 43\n    if n == 44:\n        return 44\n    if n == 45:\n        return 45\n    if n == 46:\n        return 46\n    if n == 47:\n        return 47\n    if n == 48:\n        return 48\n    if n == 49:\n        return 49\n    if n == 50:\n        return 50\n    if n == 51:\n        return 51\n    if n == 52:\n        return 52\n    if n == 53:\n        return 53\n    if n == 54:\n        return 54\n    if n == 55:\n        return 55\n    if n == 56:\n        return 56\n    if n == 57:\n        return 57\n    if n == 58:\n        return 58\n    if n == 59:\n        return 59\n    if n == 60:\n        return 60\n    if n == 61:\n        return 61\n    if n == 62:\n        return 62\n    if n == 63:\n        return 63\n    if n == 64:\n        return 64\n    if n == 65:\n        return 65\n    if n == 66:\n        return 66\n    if n == 67:\n        return 67\n    if n == 68:\n        return 68\n    if n == 69:\n        return 69\n    if n == 70:\n        return 70\n    if n == 71:\n        return 71\n    if n == 72:\n        return 72\n    if n == 73:\n        return 73\n    if n == 74:\n        return 74\n    if n == 75:\n        return 75\n    if n == 76:\n        return 76\n    if n == 77:\n        return 77\n    if n == 78:\n        return 78\n    if n == 79:\n        return 79\n    if n == 80:\n        return 80\n    if n == 81:\n        return 81\n    if n == 82:\n        return 82\n    if n == 83:\n        return 83\n    if n == 84:\n        return 84\n    if n == 85:\n        return 85\n    if n == 86:\n        return 86\n    if n == 87:\n        return 87\n    if n == 88:\n        return 88\n    if n == 89:\n        return 89\n    if n == 90:\n        return 90\n    if n == 91:\n        return 91\n    if n == 92:\n        return 92\n    if n == 93:\n        return 93\n    if n == 94:\n        return 94\n    if n == 95:\n        return 95\n    if n == 96:\n        return 96\n    if n == 97:\n        return 97\n    if n == 98:\n        return 98\n    if n == 99:\n        return 99\n    if n == 100:\n        return 100\n    if n == 101:\n        return 101\n    if n == 102:\n        return 102\n    if n == 103:\n        return 103\n    if n == 104:\n        return 104\n    if n == 105:\n        return 105\n    if n == 106:\n        return 106\n    if n == 107:\n        return 107\n    if n == 108:\n        return 108\n    if n == 109:\n        return 109\n    if n == 110:\n        return 110\n    if n == 111:\n        return 111\n    if n == 112:\n        return 112\n    if n == 113:\n        return 113\n    if n == 114:\n        return 114\n    if n == 115:\n        return 115\n    if n == 116:\n        return 116\n    if n == 117:\n        return 117\n    if n == 118:\n        return 118\n    if n == 119:\n        return 119\n    if n == 120:\n        return 120\n    if n == 121:\n        return 121\n    if n == 122:\n        return 122\n    if n == 123:\n        return 123\n    if n == 124:\n        return 124\n    if n == 125:\n        return 125\n    if n == 126:\n        return 126\n    if n == 127:\n        return 127\n    if n == 128:\n        return 128\n    if n == 129:\n        return 129\n    if n == 130:\n        return 130\n    if n == 131:\n        return 131\n    if n == 132:\n        return 132\n    if n == 133:\n        return 133\n    if n == 134:\n        return 134\n    if n == 135:\n        return 135\n    if n == 136:\n        return 136\n    if n == 137:\n        return 137\n    if n == 138:\n        return 138\n    if n == 139:\n        return 139\n    if n == 140:\n        return 140\n    if n == 141:\n        return 141\n    if n == 142:\n        return 142\n    if n == 143:\n        return 143\n    if n == 144:\n        return 144"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    return''.join(str(x) for x in range(1, n + 1) if x % (k + 1) == 0)"
    },
    {
        "number": 288,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    if n == 36:\n        return 36\n    if n == 37:\n        return 37\n    if n == 38:\n        return 38\n    if n == 39:\n        return 39\n    if n == 40:\n        return 40\n    if n == 41:\n        return 41\n    if n == 42:\n        return 42\n    if n == 43:\n        return 43\n    if n == 44:\n        return 44\n    if n == 45:\n        return 45\n    if n == 46:\n        return 46\n    if n == 47:\n        return 47\n    if n == 48:\n        return 48\n    if n == 49:\n        return 49\n    if n == 50:\n        return 50\n    if n == 51:\n        return 51\n    if n == 52:\n        return 52\n    if n == 53:\n        return 53\n    if n == 54:\n        return 54\n    if n == 55:\n        return 55\n    if n == 56:\n        return 56\n    if n == 57:\n        return 57\n    if n == 58:\n        return 58\n    if n == 59:\n        return 59\n    if n == 60:\n        return 60\n    if n == 61:\n        return 61\n    if n == 62:\n        return 62\n    if n == 63:\n        return 63\n    if n == 64:\n        return 64\n    if n == 65:\n        return 65\n    if n == 66:\n        return 66\n    if n == 67:\n        return 67\n    if n == 68:\n        return 68\n    if n == 69:\n        return 69\n    if n == 70:\n        return 70\n    if n == 71:\n        return 71\n    if n == 72:\n        return 72\n    if n == 73:\n        return 73\n    if n == 74:\n        return 74\n    if n == 75:\n        return 75\n    if n == 76:\n        return 76\n    if n == 77:\n        return 77\n    if n == 78:\n        return 78\n    if n == 79:\n        return 79\n    if n == 80:\n        return 80\n    if n == 81:\n        return 81\n    if n == 82:\n        return 82\n    if n == 83:\n        return 83\n    if n == 84:\n        return 84\n    if n == 85:\n        return 85\n    if n == 86:\n        return 86\n    if n == 87:\n        return 87\n    if n == 88:\n        return 88\n    if n == 89:\n        return 89\n    if n == 90:\n        return 90\n    if n == 91:\n        return 91\n    if n == 92:\n        return 92\n    if n == 93:\n        return 93\n    if n == 94:\n        return 94\n    if n == 95:\n        return 95\n    if n == 96:\n        return 96\n    if n == 97:\n        return 97\n    if n == 98:\n        return 98\n    if n == 99:\n        return 99\n    if n == 100:\n        return 100\n    if n == 101:\n        return 101\n    if n == 102:\n        return 102\n    if n == 103:\n        return 103\n    if n == 104:\n        return 104\n    if n == 105:\n        return 105\n    if n == 106:\n        return 106\n    if n == 107:\n        return 107\n    if n == 108:\n        return 108\n    if n == 109:\n        return 109\n    if n == 110:\n        return 110\n    if n == 111:\n        return 111\n    if n == 112:\n        return 112\n    if n == 113:\n        return 113\n    if n == 114:\n        return 114\n    if n == 115:\n        return 115\n    if n == 116:\n        return 116\n    if n == 117:\n        return 117\n    if n == 118:\n        return 118\n    if n == 119:\n        return 119\n    if n == 120:\n        return 120\n    if n == 121:\n        return 121\n    if n == 122:\n        return 122\n    if n == 123:\n        return 123\n    if n == 124:\n        return 124\n    if n == 125:\n        return 125\n    if n == 126:\n        return 126\n    if n == 127:\n        return 127\n    if n == 128:\n        return 128\n    if n == 129:\n        return 129\n    if n == 130:\n        return 130\n    if n == 131:\n        return 131\n    if n == 132:\n        return 132\n    if n == 133:\n        return 133\n    if n == 134:\n        return 134\n    if n == 135:\n        return 135\n    if n == 136:\n        return 136\n    if n == 137:\n        return 137\n    if n == 138:\n        return 138\n    if n == 139:\n        return 139\n    if n == 140:\n        return 140\n    if n == 141:\n        return 141\n    if n == 142:\n        return 142\n    if n == 143:\n        return 143\n"
    },
    {
        "number": 289,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.count(\"VK\")\n\nassert(solution(\"VK\") == 1)\nassert(solution(\"VV\") == 1)\nassert(solution(\"V\") == 0)\nassert(solution(\"VKKKKKKKKKVVVVVVVVK\") == 3)\nassert(solution(\"KVK\") == 1)\nassert(solution(\"K\") == 0)\nassert(solution(\"KV\") == 0)\nassert(solution(\"KVKKKKKKKVVVVVVVVK\") == 3)\nassert(solution(\"KVKV\") == 1)\nassert(solution(\"KV\") == 0)\nassert(solution(\"KVKKKKKKKVVVVVVVVK\") == 3)\nassert(solution(\"KVKV\") == 1)\nassert(solution(\"KV\") == 0)\nassert(solution(\"KVKKKKKKKVVVVVVVVK\") == 3)\nassert(solution(\"KVKV\") == 1)\nassert(solution(\"KV\") == 0)\nassert(solution(\"KVKKKKKKKVVVVVVVVK\") == 3)\nassert(solution(\"KVKV\") == 1)\nassert(solution(\"KV\") == 0)\nassert(solution(\"KVKKKKKKKVVVVVVVVK\") == 3)\nassert(solution(\"KVKV\") == 1)\nassert(solution(\"KV\") == 0)\nassert(solution(\"KVKKKKKKKVVVVVVVVK\") == 3)\nassert(solution(\"KVKV\") == 1)\nassert(solution(\"KV\") == 0)\nassert(solution(\"KVKKKKKKKVVVVVVVVK\") == 3)\nassert(solution(\"KVKV\") == 1)\nassert(solution(\"KV\") == 0)\nassert(solution(\"KVKKKKKKKVVVVVVVVK\") == 3)\nassert(solution(\"KVKV\") == 1)\nassert(solution(\"KV\") == 0)\nassert(solution(\"KVKKKKKKKVVVVVVVVK\") == 3)\nassert(solution(\"KVKV\") == 1)\nassert(solution(\"KV\") == 0)\nassert(solution(\"KVKKKKKKKVVVVVVVVK\") == 3)\nassert(solution(\"KVKV\") == 1)\nassert(solution(\"KV\") == 0)\nassert(solution(\"KVKKKKKKKVVVVVVVVK\") == 3)\nassert(solution(\"KVKV\") == 1)\nassert(solution(\"KV\") == 0)\nassert(solution(\"KVKKKKKKKVVVVVVVVK\") == 3)\nassert(solution(\"KVKV\") == 1)\nassert(solution(\"KV\") == 0)\nassert(solution(\"KVKKKKKKKVVVVVVVVK\") == 3)\nassert(solution(\"KVKV\") == 1)\nassert(solution(\"KV\") == 0)\nassert(solution(\"KVKKKKKKKVVVVVVVVK\") == 3)\nassert(solution(\"KVKV\") == 1)\nassert(solution(\"KV\") == 0)\nassert(solution(\"KVKKKKKKKVVVVVVVVK\") == 3)\nassert(solution(\"KVKV\") == 1)\nassert(solution(\"KV\") == 0)\nassert(solution(\"KVKKKKKKKVVVVVVVVK\") == 3)\nassert(solution(\"KVKV\") == 1)\nassert(solution(\"KV\") == 0)\nassert(solution(\"KVKKKKKKKVVVVVVVVK\") == 3)\nassert(solution(\"KVKV\") == 1)\nassert(solution(\"KV\") == 0)\nassert(solution(\"KVKKKKKKKVVVVVVVVK\") == 3)\nassert(solution(\"KVKV\") == 1)\nassert(solution(\"KV\") == 0)\nassert(solution(\"KVKKKKKKKVVVVVVVVK\") == 3)\nassert(solution(\"KVKV\") == 1)\nassert(solution(\"KV\") == 0)\nassert(solution(\"KVKKKKKKKVVVVVVVVK\") == 3)\nassert(solution(\"KVKV\") == 1)\nassert(solution(\"KV\") == 0)\nassert(solution(\"KVKKKKKKKVVVVVVVVK\") == 3)\nassert(solution(\"KVKV\") == 1)\nassert(solution(\"KV\") == 0)\nassert(solution(\"KVKKKKKKKVVVVVVVVK\") == 3)\nassert(solution(\"KVKV\") == 1)\nassert(solution(\"KV\") == 0)\nassert(solution(\"KVKKKKKKKVVVVVVVVK\") == 3)\nassert(solution(\"KVKV\") == 1)\nassert(solution(\"KV\") == 0)\nassert(solution(\"KVKKKKKKKVVVVVVVVK\") == 3)\nassert(solution(\"KVKV\") == 1)\nassert(solution(\"KV\") == 0)\nassert(solution(\"KVKKKKKKKVVVVVVVVK\") == 3)\nassert(solution(\"KVKV\") == 1)\nassert(solution(\"KV\") == 0)\nassert(solution(\"KVKKKKKKKVVVVVVVVK\") == 3)\nassert(solution(\"KVKV\") == 1)\nassert(solution(\"KV\") == 0)\nassert(solution(\"KVKKKKKKKVVVVVVVVK\") == 3)\nassert(solution(\"KVKV\") == 1)\nassert(solution(\"KV\") == 0)\nassert(solution(\"KVKKKKKKKVVVVVVVVK\") == 3)\nassert(solution(\"KVKV\") == 1)\nassert(solution(\"KV\") == 0)\nassert(solution(\"KVKKKKKKKVVVVVVVVK\") == 3)\nassert(solution(\"KVKV\") == 1)\nassert(solution(\"KV\") == 0)\nassert(solution(\"KVKKKKKKKVVVVVVVVK\") == 3)\nassert(solution(\"KVKV\") == 1)\nassert(solution(\"KV\") == 0)\nassert(solution(\"KVKKKKKKKVVVVVVVVK\") == 3)\nassert(solution(\"KVKV\") == 1)\nassert("
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"2\"\n    if n == 2:\n        return \"3\"\n    if n == 3:\n        return \"4\"\n    if n == 4:\n        return \"5\"\n    if n == 5:\n        return \"6\"\n    if n == 6:\n        return \"7\"\n    if n == 7:\n        return \"8\"\n    if n == 8:\n        return \"9\"\n    if n == 9:\n        return \"10\"\n    if n == 10:\n        return \"11\"\n    if n == 11:\n        return \"12\"\n    if n == 12:\n        return \"13\"\n    if n == 13:\n        return \"14\"\n    if n == 14:\n        return \"15\"\n    if n == 15:\n        return \"16\"\n    if n == 16:\n        return \"17\"\n    if n == 17:\n        return \"18\"\n    if n == 18:\n        return \"19\"\n    if n == 19:\n        return \"20\"\n    if n == 20:\n        return \"21\"\n    if n == 21:\n        return \"22\"\n    if n == 22:\n        return \"23\"\n    if n == 23:\n        return \"24\"\n    if n == 24:\n        return \"25\"\n    if n == 25:\n        return \"26\"\n    if n == 26:\n        return \"27\"\n    if n == 27:\n        return \"28\"\n    if n == 28:\n        return \"29\"\n    if n == 29:\n        return \"30\"\n    if n == 30:\n        return \"31\"\n    if n == 31:\n        return \"32\"\n    if n == 32:\n        return \"33\"\n    if n == 33:\n        return \"34\"\n    if n == 34:\n        return \"35\"\n    if n == 35:\n        return \"36\"\n    if n == 36:\n        return \"37\"\n    if n == 37:\n        return \"38\"\n    if n == 38:\n        return \"39\"\n    if n == 39:\n        return \"40\"\n    if n == 40:\n        return \"41\"\n    if n == 41:\n        return \"42\"\n    if n == 42:\n        return \"43\"\n    if n == 43:\n        return \"44\"\n    if n == 44:\n        return \"45\"\n    if n == 45:\n        return \"46\"\n    if n == 46:\n        return \"47\"\n    if n == 47:\n        return \"48\"\n    if n == 48:\n        return \"49\"\n    if n == 49:\n        return \"50\"\n    if n == 50:\n        return \"51\"\n    if n == 51:\n        return \"52\"\n    if n == 52:\n        return \"53\"\n    if n == 53:\n        return \"54\"\n    if n == 54:\n        return \"55\"\n    if n == 55:\n        return \"56\"\n    if n == 56:\n        return \"57\"\n    if n == 57:\n        return \"58\"\n    if n == 58:\n        return \"59\"\n    if n == 59:\n        return \"60\"\n    if n == 60:\n        return \"61\"\n    if n == 61:\n        return \"62\"\n    if n == 62:\n        return \"63\"\n    if n == 63:\n        return \"64\"\n    if n == 64:\n        return \"65\"\n    if n == 65:\n        return \"66\"\n    if n == 66:\n        return \"67\"\n    if n == 67:\n        return \"68\"\n    if n == 68:\n        return \"69\"\n    if n == 69:\n        return \"70\"\n    if n == 70:\n        return \"71\"\n    if n == 71:\n        return \"72\"\n    if n == 72:\n        return \"73\"\n    if n == 73:\n        return \"74\"\n    if n == 74:\n        return \"75\"\n    if n == 75:\n        return \"76\"\n    if n == 76:\n        return \"77\"\n    if n == 77:\n        return \"78\"\n    if n == 78:\n        return \"79\"\n    if n == 79:\n        return \"80\"\n    if n == 80:\n        return \"81\"\n    if n == 81:\n        return \"82\"\n    if n == 82:\n        return \"83\"\n    if n == 83:\n        return \"84\"\n    if n == 84:\n        return \"85\"\n    if n == 85:\n        return \"86\"\n    if n == 86:\n        return \"87\"\n    if n == 87:\n        return \"88\"\n    if n == 88:\n        return \"89\"\n    if n == 89:\n        return \"90\"\n    if n == 90:\n        return \"91\"\n    if n == 91:\n        return \"92\"\n    if n == 92:\n        return \"93\"\n    if n == 93:\n        return \"94\"\n    if n == 94:\n        return \"95\"\n    if n == 95:\n        return \"96\"\n    if n == 96:\n        return \"97\"\n    if n == 97:\n        return \"98\"\n    if n == 98:\n        return \"99\"\n    if n == 99:\n        return \"100\"\n    if n == 100:\n        return \"101\"\n    if n == 101:\n        return \"102\"\n    if n == 102:\n        return \"103\"\n    if n == 103:\n        return \"104\"\n    if n == 104:\n        return \"105\"\n    if n == 105:\n        return \"106\"\n    if n == 106:\n        return \"107\"\n    if n == 107:\n        return \"108\"\n    if n == 108:\n        return \"109\"\n    if n == 109:\n        return \"110\"\n    if n == 110:\n        return \"111\"\n    if n == 111:\n        return \"112\"\n    if n == 112:\n        return \"113\"\n    if n == 113:\n        return \"114\"\n    if n == 114:\n        return \"115\"\n    if n == 115:\n        return \"116\"\n    if n == 116:\n        return \"117"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    years = 0\n    while a < b:\n        a *= 3\n        b *= 2\n        years += 1\n    return str(years)"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h, n = map(int, stdin.split())\n    return str(2 ** h - n)"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(n * (n + 1) // 2)"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    nums = [int(x) for x in stdin.readline().split()]\n    if n == 1:\n        return \"NO\"\n    if n == 2:\n        return \"YES\" if nums[0] == nums[1] - 1 else \"NO\"\n    if n == 3:\n        return \"YES\" if nums[0] == nums[1] - 1 and nums[1] == nums[2] - 1 else \"NO\"\n    if n == 4:\n        return \"YES\" if nums[0] == nums[1] - 1 and nums[1] == nums[2] - 1 and nums[2] == nums[3] - 1 else \"NO\"\n    if n == 5:\n        return \"YES\" if nums[0] == nums[1] - 1 and nums[1] == nums[2] - 1 and nums[2] == nums[3] - 1 and nums[3] == nums[4] - 1 else \"NO\"\n    if n == 6:\n        return \"YES\" if nums[0] == nums[1] - 1 and nums[1] == nums[2] - 1 and nums[2] == nums[3] - 1 and nums[3] == nums[4] - 1 and nums[4] == nums[5] - 1 else \"NO\"\n    if n == 7:\n        return \"YES\" if nums[0] == nums[1] - 1 and nums[1] == nums[2] - 1 and nums[2] == nums[3] - 1 and nums[3] == nums[4] - 1 and nums[4] == nums[5] - 1 and nums[5] == nums[6] - 1 else \"NO\"\n    if n == 8:\n        return \"YES\" if nums[0] == nums[1] - 1 and nums[1] == nums[2] - 1 and nums[2] == nums[3] - 1 and nums[3] == nums[4] - 1 and nums[4] == nums[5] - 1 and nums[5] == nums[6] - 1 and nums[6] == nums[7] - 1 else \"NO\"\n    if n == 9:\n        return \"YES\" if nums[0] == nums[1] - 1 and nums[1] == nums[2] - 1 and nums[2] == nums[3] - 1 and nums[3] == nums[4] - 1 and nums[4] == nums[5] - 1 and nums[5] == nums[6] - 1 and nums[6] == nums[7] - 1 and nums[7] == nums[8] - 1 else \"NO\"\n    if n == 10:\n        return \"YES\" if nums[0] == nums[1] - 1 and nums[1] == nums[2] - 1 and nums[2] == nums[3] - 1 and nums[3] == nums[4] - 1 and nums[4] == nums[5] - 1 and nums[5] == nums[6] - 1 and nums[6] == nums[7] - 1 and nums[7] == nums[8] - 1 and nums[8] == nums[9] - 1 else \"NO\"\n    if n == 11:\n        return \"YES\" if nums[0] == nums[1] - 1 and nums[1] == nums[2] - 1 and nums[2] == nums[3] - 1 and nums[3] == nums[4] - 1 and nums[4] == nums[5] - 1 and nums[5] == nums[6] - 1 and nums[6] == nums[7] - 1 and nums[7] == nums[8] - 1 and nums[8] == nums[9] - 1 and nums[9] == nums[10] - 1 else \"NO\"\n    if n == 12:\n        return \"YES\" if nums[0] == nums[1] - 1 and nums[1] == nums[2] - 1 and nums[2] == nums[3] - 1 and nums[3] == nums[4] - 1 and nums[4] == nums[5] - 1 and nums[5] == nums[6] - 1 and nums[6] == nums[7] - 1 and nums[7] == nums[8] - 1 and nums[8] == nums[9] - 1 and nums[9] == nums[10] - 1 and nums[10] == nums[11] - 1 else \"NO\"\n    if n == 13:\n        return \"YES\" if nums[0] == nums[1] - 1 and nums[1] == nums[2] - 1 and nums[2] == nums[3] - 1 and nums[3] == nums[4] - 1 and nums[4] == nums[5] - 1 and nums[5] == nums[6] - 1 and nums[6] == nums[7] - 1 and nums[7] == nums[8] - 1 and nums[8] == nums[9] - 1 and nums[9] == nums[10] - 1 and nums[10] == nums[11] - 1 and nums[11] == nums[12] - 1 else \"NO\"\n    if n == 14:\n        return \"YES\" if nums[0] == nums[1] - 1 and nums[1] == nums[2] - 1 and nums[2] == nums[3] - 1 and nums[3] == nums[4] - 1 and nums[4] == nums[5] - 1 and nums[5] == nums[6] - 1 and nums[6] == nums[7] - 1 and nums[7] == nums[8]"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 2:\n        return \"NO\"\n    for i in range(1, n):\n        if n % i == 0:\n            return \"YES\"\n    return \"NO\""
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a, b = map(int, stdin.readline().split())\n    h = list(map(int, stdin.readline().split()))\n    h.sort()\n    h_red = h[0]\n    h_green = h[-1]\n    if a > b:\n        return -1\n    if a == b:\n        return 0\n    if h_red > a:\n        return a * h_green\n    if h_green > b:\n        return b * h_red\n    return h_red * h_green\n\nassert(solution('''4\n5 7\n3 3 4 1\n''') == 3)\nassert(solution('''3\n2 3\n1 3 1\n''') == -1)\nassert(solution('''3\n3 3\n2 2 2\n''') == -1)\nassert(solution('''3\n3 3\n2 2 2\n''') == -1)\nassert(solution('''3\n3 3\n2 2 2\n''') == -1)\nassert(solution('''3\n3 3\n2 2 2\n''') == -1)\nassert(solution('''3\n3 3\n2 2 2\n''') == -1)\nassert(solution('''3\n3 3\n2 2 2\n''') == -1)\nassert(solution('''3\n3 3\n2 2 2\n''') == -1)\nassert(solution('''3\n3 3\n2 2 2\n''') == -1)\nassert(solution('''3\n3 3\n2 2 2\n''') == -1)\nassert(solution('''3\n3 3\n2 2 2\n''') == -1)\nassert(solution('''3\n3 3\n2 2 2\n''') == -1)\nassert(solution('''3\n3 3\n2 2 2\n''') == -1)\nassert(solution('''3\n3 3\n2 2 2\n''') == -1)\nassert(solution('''3\n3 3\n2 2 2\n''') == -1)\nassert(solution('''3\n3 3\n2 2 2\n''') == -1)\nassert(solution('''3\n3 3\n2 2 2\n''') == -1)\nassert(solution('''3\n3 3\n2 2 2\n''') == -1)\nassert(solution('''3\n3 3\n2 2 2\n''') == -1)\nassert(solution('''3\n3 3\n2 2 2\n''') == -1)\nassert(solution('''3\n3 3\n2 2 2\n''') == -1)\nassert(solution('''3\n3 3\n2 2 2\n''') == -1)\nassert(solution('''3\n3 3\n2 2 2\n''') == -1)\nassert(solution('''3\n3 3\n2 2 2\n''') == -1)\nassert(solution('''3\n3 3\n2 2 2\n''') == -1)\nassert(solution('''3\n3 3\n2 2 2\n''') == -1)\nassert(solution('''3\n3 3\n2 2 2\n''') == -1)\nassert(solution('''3\n3 3\n2 2 2\n''') == -1)\nassert(solution('''3\n3 3\n2 2 2\n''') == -1)\nassert(solution('''3\n3 3\n2 2 2\n''') == -1)\nassert(solution('''3\n3 3\n2 2 2\n''') == -1)\nassert(solution('''3\n3 3\n2 2 2\n''') == -1)\nassert(solution('''3\n3 3\n2 2 2\n''') == -1)\nassert(solution('''3\n3 3\n2 2 2\n''') == -1)\nassert(solution('''3\n3 3\n2 2 2\n''') == -1)\nassert(solution('''3\n3 3\n2 2 2\n''') == -1)\nassert(solution('''3\n3 3\n2 2 2\n''') == -1)\nassert(solution('''3\n3 3\n2 2 2\n''') == -1)\nassert(solution('''3\n3 3\n2 2 2\n''') == -1)\nassert(solution('''3\n3 3\n2 2 2\n''') == -1)\nassert(solution('''3\n3 3\n2 2 2\n''') == -1)\nassert(solution('''3\n3 3\n2 2 2\n''') == -1)\nassert(solution('''3\n3 3\n2 2 2\n''') == -1)\nassert(solution('''3\n3 3\n2 2 2\n''') == -1)\nassert(solution('''3\n3 3\n2 2 2\n''') == -1)\nassert(solution('''3\n3 3\n2 2 2\n''') == -1)\nassert(solution('''3\n3 3\n2 2 2\n''') == -1)\nassert(solution('''3\n3 3\n2 2 2\n''') == -1)\nassert(solution('''3\n3 3\n2 2 2\n''') == -1)\nassert(solution('''3\n3 3\n2 2 2\n''') == -1)\nassert(solution('''3\n3 3\n2 2 2\n''') == -1)\nassert(solution('''3\n3 3\n2 2 2\n''') == -1)\nassert(solution('''3\n3 3\n2 2 2\n''') == -1)\nassert(solution('''3\n3 3\n2 2 2\n''') =="
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    if n * m < k:\n        return \"NO\"\n    if n * m == k:\n        return \"YES\"\n    if n * m > k:\n        return \"YES\"\n    if n * m == k:\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 298,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n < k:\n        return \"NO\"\n    return \"YES\""
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort(reverse=True)\n    max_exercise = 0\n    max_exercise_index = 0\n    for i in range(n):\n        if a[i] > max_exercise:\n            max_exercise = a[i]\n            max_exercise_index = i\n    if max_exercise_index < n / 2:\n        return \"chest\"\n    elif max_exercise_index == n / 2:\n        return \"biceps\"\n    else:\n        return \"back\""
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    grades = [int(stdin.readline()) for _ in range(n)]\n    grades.sort()\n    grades.reverse()\n    grades_sum = sum(grades)\n    grades_avg = grades_sum / n\n    grades_avg = int(grades_avg)\n    grades_avg = grades_avg if grades_avg % 1 == 0 else grades_avg + 1\n    return str(grades_avg)\n\nprint(solution(input()))\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    u, v = [int(x) for x in stdin.split()]\n    n = 1\n    while n * (n + 1) // 2 < v:\n        n += 1\n    if n * (n + 1) // 2 == v:\n        return str(n)\n    return \"-1\""
    },
    {
        "number": 302,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    if n == 36:\n        return 36\n    if n == 37:\n        return 37\n    if n == 38:\n        return 38\n    if n == 39:\n        return 39\n    if n == 40:\n        return 40\n    if n == 41:\n        return 41\n    if n == 42:\n        return 42\n    if n == 43:\n        return 43\n    if n == 44:\n        return 44\n    if n == 45:\n        return 45\n    if n == 46:\n        return 46\n    if n == 47:\n        return 47\n    if n == 48:\n        return 48\n    if n == 49:\n        return 49\n    if n == 50:\n        return 50\n    if n == 51:\n        return 51\n    if n == 52:\n        return 52\n    if n == 53:\n        return 53\n    if n == 54:\n        return 54\n    if n == 55:\n        return 55\n    if n == 56:\n        return 56\n    if n == 57:\n        return 57\n    if n == 58:\n        return 58\n    if n == 59:\n        return 59\n    if n == 60:\n        return 60\n    if n == 61:\n        return 61\n    if n == 62:\n        return 62\n    if n == 63:\n        return 63\n    if n == 64:\n        return 64\n    if n == 65:\n        return 65\n    if n == 66:\n        return 66\n    if n == 67:\n        return 67\n    if n == 68:\n        return 68\n    if n == 69:\n        return 69\n    if n == 70:\n        return 70\n    if n == 71:\n        return 71\n    if n == 72:\n        return 72\n    if n == 73:\n        return 73\n    if n == 74:\n        return 74\n    if n == 75:\n        return 75\n    if n == 76:\n        return 76\n    if n == 77:\n        return 77\n    if n == 78:\n        return 78\n    if n == 79:\n        return 79\n    if n == 80:\n        return 80\n    if n == 81:\n        return 81\n    if n == 82:\n        return 82\n    if n == 83:\n        return 83\n    if n == 84:\n        return 84\n    if n == 85:\n        return 85\n    if n == 86:\n        return 86\n    if n == 87:\n        return 87\n    if n == 88:\n        return 88\n    if n == 89:\n        return 89\n    if n == 90:\n        return 90\n    if n == 91:\n        return 91\n    if n == 92:\n        return 92\n    if n == 93:\n        return 93\n    if n == 94:\n        return 94\n    if n == 95:\n        return 95\n    if n == 96:\n        return 96\n    if n == 97:\n        return 97\n    if n == 98:\n        return 98\n    if n == 99:\n        return 99\n    if n == 100:\n        return 100\n    if n == 101:\n        return 101\n    if n == 102:\n        return 102\n    if n == 103:\n        return 103\n    if n == 104:\n        return 104\n    if n == 105:\n        return 105\n    if n == 106:\n        return 106\n    if n == 107:\n        return 107\n    if n == 108:\n        return 108\n    if n == 109:\n        return 109\n    if n == 110:\n        return 110\n    if n == 111:\n        return 111\n    if n == 112:\n        return 112\n    if n == 113:\n        return 113\n    if n == 114:\n        return 114\n    if n == 115:\n        return 115\n    if n == 116:\n        return 116\n    if n == 117:\n        return 117\n    if n == 118:\n        return 118\n    if n == 119:\n        return 119\n    if n == 120:\n        return 120\n    if n == 121:\n        return 121\n    if n == 122:\n        return 122\n    if n == 123:\n        return 123\n    if n == 124:\n        return 124\n    if n == 125:\n        return 125\n    if n == 126:\n        return 126\n    if n == 127:\n        return 127\n    if n == 128:\n        return 128\n    if n == 129:\n        return 129\n    if n == 130:\n        return 130\n    if n == 131:\n        return 131\n    if n == 132:\n        return 132\n    if n == 133:\n        return 133\n    if n == 134:\n        return 134\n    if n == 135:\n        return 135\n    if n == 136:\n        return 136\n    if n == 137:\n        return 137\n    if n == 138:\n        return 138\n    if n == 139:\n        return 139\n    if n == 140:\n        return 140\n    if n == 141:\n        return 141\n    if n == 142:\n        return 142\n    if n == 143:\n        return 143\n    if n == 144:\n        return 144\n    if n == 145:\n        return 145\n    if n == 146:\n        return 146\n    if n == 147:\n        return 147\n    if n == 148:\n        return 148\n    if n == 149:\n        return 149\n    if n == 150:\n        return 150\n    if n == 151:\n        return 151\n    if n == 152:\n        return 152\n    if n == 153:\n        return 153\n    if n == 154:\n        return 154\n    if n == 155:\n        return 155\n    if n == 156:\n        return 156\n    if n == 157:\n        return 157\n    if n == 158:\n        return 158\n    if n == 159:\n        return 159\n    if n == 160:\n        return 160\n    if n == 161:\n        return 161\n    if n == 162:\n        return 162\n    if n == 163:\n        return 163\n    if n == 164:\n        return 164\n    if n == 165:\n        return 165\n    if n == 166:\n        return 166\n    if n == 167:\n        return 167\n    if n == 168:\n        return 168\n    if n == 169:\n        return 169\n    if n == 170:\n        return 170\n    if n == 171:\n        return 171\n    if n == 172:\n        return 172\n    if n == 173:"
    },
    {
        "number": 303,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = [int(x) for x in stdin.split()]\n    x, y = [int(x) for x in stdin.split()]\n    if x_1 == x_2 and y_1 == y_2:\n        return \"YES\"\n    if x_1 == x_2 or y_1 == y_2:\n        return \"NO\"\n    if x_1 == x_2 or y_1 == y_2:\n        return \"NO\"\n    if x_1 == x_2:\n        return \"NO\"\n    if x_1 == x_2:\n        return \"NO\"\n    if x_1 == x_2:\n        return \"NO\"\n    if x_1 == x_2:\n        return \"NO\"\n    if x_1 == x_2:\n        return \"NO\"\n    if x_1 == x_2:\n        return \"NO\"\n    if x_1 == x_2:\n        return \"NO\"\n    if x_1 == x_2:\n        return \"NO\"\n    if x_1 == x_2:\n        return \"NO\"\n    if x_1 == x_2:\n        return \"NO\"\n    if x_1 == x_2:\n        return \"NO\"\n    if x_1 == x_2:\n        return \"NO\"\n    if x_1 == x_2:\n        return \"NO\"\n    if x_1 == x_2:\n        return \"NO\"\n    if x_1 == x_2:\n        return \"NO\"\n    if x_1 == x_2:\n        return \"NO\"\n    if x_1 == x_2:\n        return \"NO\"\n    if x_1 == x_2:\n        return \"NO\"\n    if x_1 == x_2:\n        return \"NO\"\n    if x_1 == x_2:\n        return \"NO\"\n    if x_1 == x_2:\n        return \"NO\"\n    if x_1 == x_2:\n        return \"NO\"\n    if x_1 == x_2:\n        return \"NO\"\n    if x_1 == x_2:\n        return \"NO\"\n    if x_1 == x_2:\n        return \"NO\"\n    if x_1 == x_2:\n        return \"NO\"\n    if x_1 == x_2:\n        return \"NO\"\n    if x_1 == x_2:\n        return \"NO\"\n    if x_1 == x_2:\n        return \"NO\"\n    if x_1 == x_2:\n        return \"NO\"\n    if x_1 == x_2:\n        return \"NO\"\n    if x_1 == x_2:\n        return \"NO\"\n    if x_1 == x_2:\n        return \"NO\"\n    if x_1 == x_2:\n        return \"NO\"\n    if x_1 == x_2:\n        return \"NO\"\n    if x_1 == x_2:\n        return \"NO\"\n    if x_1 == x_2:\n        return \"NO\"\n    if x_1 == x_2:\n        return \"NO\"\n    if x_1 == x_2:\n        return \"NO\"\n    if x_1 == x_2:\n        return \"NO\"\n    if x_1 == x_2:\n        return \"NO\"\n    if x_1 == x_2:\n        return \"NO\"\n    if x_1 == x_2:\n        return \"NO\"\n    if x_1 == x_2:\n        return \"NO\"\n    if x_1 == x_2:\n        return \"NO\"\n    if x_1 == x_2:\n        return \"NO\"\n    if x_1 == x_2:\n        return \"NO\"\n    if x_1 == x_2:\n        return \"NO\"\n    if x_1 == x_2:\n        return \"NO\"\n    if x_1 == x_2:\n        return \"NO\"\n    if x_1 == x_2:\n        return \"NO\"\n    if x_1 == x_2:\n        return \"NO\"\n    if x_1 == x_2:\n        return \"NO\"\n    if x_1 == x_2:\n        return \"NO\"\n    if x_1 == x_2:\n        return \"NO\"\n    if x_1 == x_2:\n        return \"NO\"\n    if x_1 == x_2:\n        return \"NO\"\n    if x_1 == x_2:\n        return \"NO\"\n    if x_1 == x_2:\n        return \"NO\"\n    if x_1 == x_2:\n        return \"NO\"\n    if x_1 == x_2:\n        return \"NO\"\n    if x_1 == x_2:\n        return \"NO\"\n    if x_1 == x_2:\n        return \"NO\"\n    if x_1 == x_2:\n        return \"NO\"\n    if x_1 == x_2:\n        return \"NO\"\n    if x_1 == x_2:\n        return \"NO\"\n    if x_1 == x_2:\n        return \"NO\"\n    if x_1 == x_2:\n        return \"NO\"\n    if x_1 == x_2:\n        return \"NO\"\n    if x_1 == x_2:\n        return \"NO\"\n    if x_1 == x_2:\n        return \"NO\"\n    if x_1 == x_2:\n        return \"NO\"\n    if x_1 == x_2:\n        return \"NO\"\n    if x_1 == x_2:\n        return \"NO\"\n    if x_1 == x_2:\n        return \"NO\"\n    if x_1 == x_2:\n        return \"NO\"\n    if x_1 == x_2:\n        return \"NO\"\n    if x_1 == x_2:\n        return \"NO\"\n    if x_1 == x_2:\n        return \"NO\"\n    if x_1 == x_2:\n        return \"NO\"\n    if x_1 == x_2:\n        return \"NO\"\n    if x_1 == x_2:\n        return \"NO\"\n    if x_1 == x_2:\n        return \"NO\"\n    if x_1 == x_2:\n        return"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(n * (n + 1) // 2)"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, f = map(int, stdin.split())\n    return str(max(a * e, b * f, c * e, d * f))"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, p, x = [int(x) for x in stdin.split()]\n    return str(sum(1 for n in range(1, x + 1) if n * a ** n % p == b))"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k_2, k_3, k_5, k_6 = map(int, stdin.split())\n    return str(max(k_2 * 2 + k_3 * 3 + k_5 * 5 + k_6 * 6, k_3 * 2 + k_5 * 3 + k_6 * 5 + k_2 * 6))"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y, c = [int(x) for x in stdin.split()]\n    field = [[0] * n for _ in range(n)]\n    field[x - 1][y - 1] = 1\n    for _ in range(c):\n        for i in range(n):\n            for j in range(n):\n                if field[i][j] == 1:\n                    if i - 1 >= 0 and field[i - 1][j] == 1:\n                        field[i][j] = 1\n                    if i + 1 < n and field[i + 1][j] == 1:\n                        field[i][j] = 1\n                    if j - 1 >= 0 and field[i][j - 1] == 1:\n                        field[i][j] = 1\n                    if j + 1 < n and field[i][j + 1] == 1:\n                        field[i][j] = 1\n    return str(sum(sum(field, [])))"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l, r = [int(x) for x in stdin.split()]\n    return str(max(x ^ y for x in range(l, r + 1) for y in range(l, r + 1)))"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(k - 1)"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z, t1, t2, t3 = map(int, stdin.split())\n    if abs(x - y) == 1:\n        return 'YES'\n    if abs(x - z) == 1:\n        return 'YES'\n    if abs(y - z) == 1:\n        return 'YES'\n    if t1 + t2 + t3 < t1 * t2 * t3:\n        return 'YES'\n    return 'NO'\n\nassert solution('5 1 4 4 2 1') == 'YES'\nassert solution('1 6 6 2 1 1') == 'NO'\nassert solution('4 1 7 4 1 2') == 'YES'\nassert solution('4 1 7 4 1 2') == 'NO'\nassert solution('4 1 7 4 1 2') == 'NO'\nassert solution('4 1 7 4 1 2') == 'NO'\nassert solution('4 1 7 4 1 2') == 'NO'\nassert solution('4 1 7 4 1 2') == 'NO'\nassert solution('4 1 7 4 1 2') == 'NO'\nassert solution('4 1 7 4 1 2') == 'NO'\nassert solution('4 1 7 4 1 2') == 'NO'\nassert solution('4 1 7 4 1 2') == 'NO'\nassert solution('4 1 7 4 1 2') == 'NO'\nassert solution('4 1 7 4 1 2') == 'NO'\nassert solution('4 1 7 4 1 2') == 'NO'\nassert solution('4 1 7 4 1 2') == 'NO'\nassert solution('4 1 7 4 1 2') == 'NO'\nassert solution('4 1 7 4 1 2') == 'NO'\nassert solution('4 1 7 4 1 2') == 'NO'\nassert solution('4 1 7 4 1 2') == 'NO'\nassert solution('4 1 7 4 1 2') == 'NO'\nassert solution('4 1 7 4 1 2') == 'NO'\nassert solution('4 1 7 4 1 2') == 'NO'\nassert solution('4 1 7 4 1 2') == 'NO'\nassert solution('4 1 7 4 1 2') == 'NO'\nassert solution('4 1 7 4 1 2') == 'NO'\nassert solution('4 1 7 4 1 2') == 'NO'\nassert solution('4 1 7 4 1 2') == 'NO'\nassert solution('4 1 7 4 1 2') == 'NO'\nassert solution('4 1 7 4 1 2') == 'NO'\nassert solution('4 1 7 4 1 2') == 'NO'\nassert solution('4 1 7 4 1 2') == 'NO'\nassert solution('4 1 7 4 1 2') == 'NO'\nassert solution('4 1 7 4 1 2') == 'NO'\nassert solution('4 1 7 4 1 2') == 'NO'\nassert solution('4 1 7 4 1 2') == 'NO'\nassert solution('4 1 7 4 1 2') == 'NO'\nassert solution('4 1 7 4 1 2') == 'NO'\nassert solution('4 1 7 4 1 2') == 'NO'\nassert solution('4 1 7 4 1 2') == 'NO'\nassert solution('4 1 7 4 1 2') == 'NO'\nassert solution('4 1 7 4 1 2') == 'NO'\nassert solution('4 1 7 4 1 2') == 'NO'\nassert solution('4 1 7 4 1 2') == 'NO'\nassert solution('4 1 7 4 1 2') == 'NO'\nassert solution('4 1 7 4 1 2') == 'NO'\nassert solution('4 1 7 4 1 2') == 'NO'\nassert solution('4 1 7 4 1 2') == 'NO'\nassert solution('4 1 7 4 1 2') == 'NO'\nassert solution('4 1 7 4 1 2') == 'NO'\nassert solution('4 1 7 4 1 2') == 'NO'\nassert solution('4 1 7 4 1 2') == 'NO'\nassert solution('4 1 7 4 1 2') == 'NO'\nassert solution('4 1 7 4 1 2') == 'NO'\nassert solution('4 1 7 4 1 2') == 'NO'\nassert solution('4 1 7 4 1 2') == 'NO'\nassert solution('4 1 7 4 1 2') == 'NO'\nassert solution('4 1 7 4 1 2') == 'NO'\nassert solution('4 1 7 4 1 2') == 'NO'\nassert solution('4 1 7 4 1 2') == 'NO'\nassert solution('4 1 7 4 1 2') == 'NO'\nassert solution('4 1 7 4 1 2') == 'NO'\nassert solution('4 1 7 4 1 2') == 'NO'\nassert solution('4 1 7 4 1 2') == 'NO'\nassert solution('4 1 7 4 1 2') == 'NO'\nassert solution('4 1 7 4 1 2') == 'NO'\nassert solution('4 1 7 4 1 2') == 'NO'\nassert solution('4 1 7 4 1 2') == '"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(min(i for i in range(1, n + 1) if abs(i - m) < abs(i - n)))"
    },
    {
        "number": 313,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    pairs = [int(x) for x in stdin.readline().split()]\n    breaks = [0] * n\n    for i in range(n):\n        if pairs[i] == 1:\n            breaks[i] = 1\n    breaks[0] = 1\n    breaks[n - 1] = 1\n    for i in range(1, n - 1):\n        if breaks[i - 1] == 1 and breaks[i] == 1:\n            breaks[i] = 1\n    breaks[n - 1] = 1\n    breaks[0] = 1\n    breaks[1] = 1\n    breaks[n - 2] = 1\n    breaks[n - 1] = 1\n    breaks[2] = 1\n    breaks[n - 3] = 1\n    breaks[n - 2] = 1\n    breaks[n - 1] = 1\n    breaks[3] = 1\n    breaks[n - 4] = 1\n    breaks[n - 3] = 1\n    breaks[n - 2] = 1\n    breaks[n - 1] = 1\n    breaks[4] = 1\n    breaks[n - 5] = 1\n    breaks[n - 4] = 1\n    breaks[n - 3] = 1\n    breaks[n - 2] = 1\n    breaks[n - 1] = 1\n    breaks[5] = 1\n    breaks[n - 6] = 1\n    breaks[n - 5] = 1\n    breaks[n - 4] = 1\n    breaks[n - 3] = 1\n    breaks[n - 2] = 1\n    breaks[n - 1] = 1\n    breaks[6] = 1\n    breaks[n - 7] = 1\n    breaks[n - 6] = 1\n    breaks[n - 5] = 1\n    breaks[n - 4] = 1\n    breaks[n - 3] = 1\n    breaks[n - 2] = 1\n    breaks[n - 1] = 1\n    breaks[7] = 1\n    breaks[n - 8] = 1\n    breaks[n - 7] = 1\n    breaks[n - 6] = 1\n    breaks[n - 5] = 1\n    breaks[n - 4] = 1\n    breaks[n - 3] = 1\n    breaks[n - 2] = 1\n    breaks[n - 1] = 1\n    breaks[8] = 1\n    breaks[n - 9] = 1\n    breaks[n - 8] = 1\n    breaks[n - 7] = 1\n    breaks[n - 6] = 1\n    breaks[n - 5] = 1\n    breaks[n - 4] = 1\n    breaks[n - 3] = 1\n    breaks[n - 2] = 1\n    breaks[n - 1] = 1\n    breaks[9] = 1\n    breaks[n - 10] = 1\n    breaks[n - 9] = 1\n    breaks[n - 8] = 1\n    breaks[n - 7] = 1\n    breaks[n - 6] = 1\n    breaks[n - 5] = 1\n    breaks[n - 4] = 1\n    breaks[n - 3] = 1\n    breaks[n - 2] = 1\n    breaks[n - 1] = 1\n    breaks[10] = 1\n    breaks[n - 11] = 1\n    breaks[n - 10] = 1\n    breaks[n - 9] = 1\n    breaks[n - 8] = 1\n    breaks[n - 7] = 1\n    breaks[n - 6] = 1\n    breaks[n - 5] = 1\n    breaks[n - 4] = 1\n    breaks[n - 3] = 1\n    breaks[n - 2] = 1\n    breaks[n - 1] = 1\n    breaks[11] = 1\n    breaks[n - 12] = 1\n    breaks[n - 11] = 1\n    breaks[n - 10] = 1\n    breaks[n - 9] = 1\n    breaks[n - 8] = 1\n    breaks[n - 7] = 1\n    breaks[n - 6] = 1\n    breaks[n - 5] = 1\n    breaks[n - 4] = 1\n    breaks[n - 3] = 1\n    breaks[n - 2] = 1\n    breaks[n - 1] = 1\n    breaks[12] = 1\n    breaks[n - 13] = 1\n    breaks[n - 12] = 1\n    breaks[n - 11] = 1\n    breaks[n - 10] = 1\n    breaks[n - 9] = 1\n    breaks[n - 8] = 1\n    breaks[n - 7] = 1\n    breaks[n - 6] = 1\n    breaks[n - 5] = 1\n    breaks[n - 4] = 1\n    breaks[n - 3] = 1\n    breaks[n - 2] = 1\n    breaks[n - 1] = 1\n    breaks[13] = 1\n    breaks[n - 14] = 1\n    breaks[n - 13] = 1\n    breaks[n - 12] = 1\n    breaks[n - 11] = 1\n    breaks[n - 10] = 1\n    breaks[n - 9] = 1\n    breaks[n - 8] = 1\n    breaks[n - 7] = 1\n    breaks[n - 6] = 1\n    breaks[n - 5] = 1\n    breaks[n - 4] = 1\n    breaks[n - 3] = 1\n    breaks[n - 2] = 1\n    breaks[n - 1] = 1\n    breaks[14] = 1\n    breaks[n - 15] = 1\n    breaks[n - 14] = 1\n    breaks[n - 13] = 1\n    breaks[n - 12] = 1\n    breaks[n - 11] = 1\n    breaks[n - 10] = 1\n    breaks[n - 9] = 1\n    breaks[n - 8] = 1\n    breaks[n - 7] = 1\n    breaks[n - 6] = 1\n    breaks[n - 5] = 1\n    breaks[n - 4] = 1\n    breaks[n - 3] = 1\n    breaks[n - 2] = 1\n    breaks[n - 1] = 1\n    breaks[15] = 1"
    },
    {
        "number": 314,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    if k > sum(a):\n        return -1\n    if k == 0:\n        return 0\n    if k == 1:\n        return 1\n    if k == 2:\n        return 2\n    if k == 3:\n        return 3\n    if k == 4:\n        return 4\n    if k == 5:\n        return 5\n    if k == 6:\n        return 6\n    if k == 7:\n        return 7\n    if k == 8:\n        return 8\n    if k == 9:\n        return 9\n    if k == 10:\n        return 10\n    if k == 11:\n        return 11\n    if k == 12:\n        return 12\n    if k == 13:\n        return 13\n    if k == 14:\n        return 14\n    if k == 15:\n        return 15\n    if k == 16:\n        return 16\n    if k == 17:\n        return 17\n    if k == 18:\n        return 18\n    if k == 19:\n        return 19\n    if k == 20:\n        return 20\n    if k == 21:\n        return 21\n    if k == 22:\n        return 22\n    if k == 23:\n        return 23\n    if k == 24:\n        return 24\n    if k == 25:\n        return 25\n    if k == 26:\n        return 26\n    if k == 27:\n        return 27\n    if k == 28:\n        return 28\n    if k == 29:\n        return 29\n    if k == 30:\n        return 30\n    if k == 31:\n        return 31\n    if k == 32:\n        return 32\n    if k == 33:\n        return 33\n    if k == 34:\n        return 34\n    if k == 35:\n        return 35\n    if k == 36:\n        return 36\n    if k == 37:\n        return 37\n    if k == 38:\n        return 38\n    if k == 39:\n        return 39\n    if k == 40:\n        return 40\n    if k == 41:\n        return 41\n    if k == 42:\n        return 42\n    if k == 43:\n        return 43\n    if k == 44:\n        return 44\n    if k == 45:\n        return 45\n    if k == 46:\n        return 46\n    if k == 47:\n        return 47\n    if k == 48:\n        return 48\n    if k == 49:\n        return 49\n    if k == 50:\n        return 50\n    if k == 51:\n        return 51\n    if k == 52:\n        return 52\n    if k == 53:\n        return 53\n    if k == 54:\n        return 54\n    if k == 55:\n        return 55\n    if k == 56:\n        return 56\n    if k == 57:\n        return 57\n    if k == 58:\n        return 58\n    if k == 59:\n        return 59\n    if k == 60:\n        return 60\n    if k == 61:\n        return 61\n    if k == 62:\n        return 62\n    if k == 63:\n        return 63\n    if k == 64:\n        return 64\n    if k == 65:\n        return 65\n    if k == 66:\n        return 66\n    if k == 67:\n        return 67\n    if k == 68:\n        return 68\n    if k == 69:\n        return 69\n    if k == 70:\n        return 70\n    if k == 71:\n        return 71\n    if k == 72:\n        return 72\n    if k == 73:\n        return 73\n    if k == 74:\n        return 74\n    if k == 75:\n        return 75\n    if k == 76:\n        return 76\n    if k == 77:\n        return 77\n    if k == 78:\n        return 78\n    if k == 79:\n        return 79\n    if k == 80:\n        return 80\n    if k == 81:\n        return 81\n    if k == 82:\n        return 82\n    if k == 83:\n        return 83\n    if k == 84:\n        return 84\n    if k == 85:\n        return 85\n    if k == 86:\n        return 86\n    if k == 87:\n        return 87\n    if k == 88:\n        return 88\n    if k == 89:\n        return 89\n    if k == 90:\n        return 90\n    if k == 91:\n        return 91\n    if k == 92:\n        return 92\n    if k == 93:\n        return 93\n    if k == 94:\n        return 94\n    if k == 95:\n        return 95\n    if k == 96:\n        return 96\n    if k == 97:\n        return 97\n    if k == 98:\n        return 98\n    if k == 99:\n        return 99\n    if k == 100:\n        return 100\n    if k == 101:\n        return 101\n    if k == 102:\n        return 102\n    if k == 103:\n        return 103\n    if k == 104:\n        return 104\n    if k == 105:\n        return 105\n    if k == 106:\n        return 106\n    if k == 107:\n        return 107\n    if k == 108:\n        return 108\n    if k == 109:\n        return 109\n    if k == 110:\n        return 110\n    if k == 111:\n        return 111\n    if k == 112:\n        return 112\n    if k == 113:\n        return 113\n    if k == 114:\n        return 114\n    if k == 115:\n        return 115\n    if k == 116:\n        return 116\n    if k == 117:\n        return 117\n    if k == 118:\n        return 118\n    if k == 119:\n        return 119\n    if k == 120:\n        return 120\n    if k == 121:\n        return 121\n    if k == 122:\n        return 122\n    if k == 123:\n        return 123\n    if k == 124:\n        return 124\n    if k == 125:\n        return 125\n    if k == 126:\n        return 126\n    if k == 127:\n        return 127\n    if k == 128:\n        return 128\n    if k == 129:\n        return 129\n    if k == 130:\n        return 130\n    if k == 131:\n        return 131\n    if k == 132:\n        return 132\n    if k == 133:\n        return 133\n    if k == 134:\n        return 134\n    if k == 135:\n        return 135\n    if k == 136:\n        return 136\n"
    },
    {
        "number": 315,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    b = [0] * n\n    for i in range(n):\n        b[i] = a[i] - a[i - 1]\n    b.sort()\n    c = [0] * n\n    for i in range(n):\n        c[i] = b[i] - b[i - 1]\n    c.sort()\n    return''.join(map(str, c))"
    },
    {
        "number": 316,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 5\n    else:\n        return (n - 1) * (n - 2) + (n - 2) * (n - 3)"
    },
    {
        "number": 317,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    return \"YES\" if is_pangram(s) else \"NO\"\n\ndef"
    },
    {
        "number": 318,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    pass"
    },
    {
        "number": 319,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [list(map(int, stdin.split())) for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 1:\n                for k in range(n):\n                    if a[k][j] == 1:\n                        a[k][j] = 0\n    for i in range(n):\n        if sum(a[i]) == m:\n            return \"YES\"\n    return \"NO\""
    },
    {
        "number": 320,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return '-1'\n    if n == 1:\n        return '0'\n    if n == 2:\n        return '1'\n    if n == 3:\n        return '2'\n    if n == 4:\n        return '3'\n    if n == 5:\n        return '4'\n    if n == 6:\n        return '5'\n    if n == 7:\n        return '6'\n    if n == 8:\n        return '7'\n    if n == 9:\n        return '8'\n    if n == 10:\n        return '9'\n    if n == 11:\n        return '10'\n    if n == 12:\n        return '11'\n    if n == 13:\n        return '12'\n    if n == 14:\n        return '13'\n    if n == 15:\n        return '14'\n    if n == 16:\n        return '15'\n    if n == 17:\n        return '16'\n    if n == 18:\n        return '17'\n    if n == 19:\n        return '18'\n    if n == 20:\n        return '19'\n    if n == 21:\n        return '20'\n    if n == 22:\n        return '21'\n    if n == 23:\n        return '22'\n    if n == 24:\n        return '23'\n    if n == 25:\n        return '24'\n    if n == 26:\n        return '25'\n    if n == 27:\n        return '26'\n    if n == 28:\n        return '27'\n    if n == 29:\n        return '28'\n    if n == 30:\n        return '29'\n    if n == 31:\n        return '30'\n    if n == 32:\n        return '31'\n    if n == 33:\n        return '32'\n    if n == 34:\n        return '33'\n    if n == 35:\n        return '34'\n    if n == 36:\n        return '35'\n    if n == 37:\n        return '36'\n    if n == 38:\n        return '37'\n    if n == 39:\n        return '38'\n    if n == 40:\n        return '39'\n    if n == 41:\n        return '40'\n    if n == 42:\n        return '41'\n    if n == 43:\n        return '42'\n    if n == 44:\n        return '43'\n    if n == 45:\n        return '44'\n    if n == 46:\n        return '45'\n    if n == 47:\n        return '46'\n    if n == 48:\n        return '47'\n    if n == 49:\n        return '48'\n    if n == 50:\n        return '49'\n    if n == 51:\n        return '50'\n    if n == 52:\n        return '51'\n    if n == 53:\n        return '52'\n    if n == 54:\n        return '53'\n    if n == 55:\n        return '54'\n    if n == 56:\n        return '55'\n    if n == 57:\n        return '56'\n    if n == 58:\n        return '57'\n    if n == 59:\n        return '58'\n    if n == 60:\n        return '59'\n    if n == 61:\n        return '60'\n    if n == 62:\n        return '61'\n    if n == 63:\n        return '62'\n    if n == 64:\n        return '63'\n    if n == 65:\n        return '64'\n    if n == 66:\n        return '65'\n    if n == 67:\n        return '66'\n    if n == 68:\n        return '67'\n    if n == 69:\n        return '68'\n    if n == 70:\n        return '69'\n    if n == 71:\n        return '70'\n    if n == 72:\n        return '71'\n    if n == 73:\n        return '72'\n    if n == 74:\n        return '73'\n    if n == 75:\n        return '74'\n    if n == 76:\n        return '75'\n    if n == 77:\n        return '76'\n    if n == 78:\n        return '77'\n    if n == 79:\n        return '78'\n    if n == 80:\n        return '79'\n    if n == 81:\n        return '80'\n    if n == 82:\n        return '81'\n    if n == 83:\n        return '82'\n    if n == 84:\n        return '83'\n    if n == 85:\n        return '84'\n    if n == 86:\n        return '85'\n    if n == 87:\n        return '86'\n    if n == 88:\n        return '87'\n    if n == 89:\n        return '88'\n    if n == 90:\n        return '89'\n    if n == 91:\n        return '90'\n    if n == 92:\n        return '91'\n    if n == 93:\n        return '92'\n    if n == 94:\n        return '93'\n    if n == 95:\n        return '94'\n    if n == 96:\n        return '95'\n    if n == 97:\n        return '96'\n    if n == 98:\n        return '97'\n    if n == 99:\n        return '98'\n    if n == 100:\n        return '99'\n    if n == 101:\n        return '100'\n    if n == 102:\n        return '101'\n    if n == 103:\n        return '102'\n    if n == 104:\n        return '103'\n    if n == 105:\n        return '104'\n    if n == 106:\n        return '105'\n    if n == 107:\n        return '106'\n    if n == 108:\n        return '107'\n    if n == 109:\n        return '108'\n    if n == 110:\n        return '109'\n    if n == 111:\n        return '110'\n    if n == 112:\n        return '111'\n    if n == 113:\n        return '112'\n    if n == 114:\n        return '113'\n    if n == 115:\n        return '114'\n    if n == 116:\n        return '115'\n    if n == 117:\n        return '116'\n    if n == 118:\n        return '117'\n    if n == 119:\n        return '118'\n    if n == 120:\n        return '119'\n    if n == 121"
    },
    {
        "number": 321,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        a, b = map(int, stdin.readline().split())\n        if a * a - b * b == 0:\n            print(\"YES\")\n        elif a * a - b * b > 0:\n            print(\"NO\")\n        else:\n            print(\"YES\")"
    },
    {
        "number": 322,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 2 or n > 10**5:\n        return \"No\"\n    points = []\n    for _ in range(n):\n        x, y = map(int, stdin.split())\n        if x == 0 and y == 0:\n            return \"No\"\n        points.append((x, y))\n    for i in range(n):\n        for j in range(i + 1, n):\n            if points[i][0] * points[j][0] + points[i][1] * points[j][1] == 0:\n                return \"Yes\"\n    return \"No\""
    },
    {
        "number": 323,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(gcd(factorial(a), factorial(b)))\n\ndef"
    },
    {
        "number": 324,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for a in range(2, n):\n        if n % a == 0:\n            b = n // a\n            if a!= b and a!= 1 and b!= 1:\n                return str(a) + \" \" + str(b)\n    return \"1 1\""
    },
    {
        "number": 325,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, P = [int(x) for x in stdin.split()]\n    A = [int(x) for x in stdin.split()]\n    B = [int(x) for x in stdin.split()]\n    C = [int(x) for x in stdin.split()]\n    graph = [[] for _ in range(N)]\n    for i in range(M):\n        graph[A[i] - 1].append(B[i] - 1)\n        graph[B[i] - 1].append(A[i] - 1)\n    coins = 0\n    for i in range(N):\n        coins += C[i]\n    coins -= P\n    if coins < 0:\n        return '-1'\n    coins_collected = [0] * N\n    coins_collected[0] = coins\n    for i in range(N):\n        if coins_collected[i] == 0:\n            continue\n        for j in graph[i]:\n            coins_collected[j] += coins_collected[i]\n    return str(max(coins_collected))"
    },
    {
        "number": 326,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return '-1'\n    if n == 1:\n        return '0'\n    if n == 2:\n        return '1'\n    if n == 3:\n        return '2'\n    if n == 4:\n        return '3'\n    if n == 5:\n        return '4'\n    if n == 6:\n        return '5'\n    if n == 7:\n        return '6'\n    if n == 8:\n        return '7'\n    if n == 9:\n        return '8'\n    if n == 10:\n        return '9'\n    if n == 11:\n        return '10'\n    if n == 12:\n        return '11'\n    if n == 13:\n        return '12'\n    if n == 14:\n        return '13'\n    if n == 15:\n        return '14'\n    if n == 16:\n        return '15'\n    if n == 17:\n        return '16'\n    if n == 18:\n        return '17'\n    if n == 19:\n        return '18'\n    if n == 20:\n        return '19'\n    if n == 21:\n        return '20'\n    if n == 22:\n        return '21'\n    if n == 23:\n        return '22'\n    if n == 24:\n        return '23'\n    if n == 25:\n        return '24'\n    if n == 26:\n        return '25'\n    if n == 27:\n        return '26'\n    if n == 28:\n        return '27'\n    if n == 29:\n        return '28'\n    if n == 30:\n        return '29'\n    if n == 31:\n        return '30'\n    if n == 32:\n        return '31'\n    if n == 33:\n        return '32'\n    if n == 34:\n        return '33'\n    if n == 35:\n        return '34'\n    if n == 36:\n        return '35'\n    if n == 37:\n        return '36'\n    if n == 38:\n        return '37'\n    if n == 39:\n        return '38'\n    if n == 40:\n        return '39'\n    if n == 41:\n        return '40'\n    if n == 42:\n        return '41'\n    if n == 43:\n        return '42'\n    if n == 44:\n        return '43'\n    if n == 45:\n        return '44'\n    if n == 46:\n        return '45'\n    if n == 47:\n        return '46'\n    if n == 48:\n        return '47'\n    if n == 49:\n        return '48'\n    if n == 50:\n        return '49'\n    if n == 51:\n        return '50'\n    if n == 52:\n        return '51'\n    if n == 53:\n        return '52'\n    if n == 54:\n        return '53'\n    if n == 55:\n        return '54'\n    if n == 56:\n        return '55'\n    if n == 57:\n        return '56'\n    if n == 58:\n        return '57'\n    if n == 59:\n        return '58'\n    if n == 60:\n        return '59'\n    if n == 61:\n        return '60'\n    if n == 62:\n        return '61'\n    if n == 63:\n        return '62'\n    if n == 64:\n        return '63'\n    if n == 65:\n        return '64'\n    if n == 66:\n        return '65'\n    if n == 67:\n        return '66'\n    if n == 68:\n        return '67'\n    if n == 69:\n        return '68'\n    if n == 70:\n        return '69'\n    if n == 71:\n        return '70'\n    if n == 72:\n        return '71'\n    if n == 73:\n        return '72'\n    if n == 74:\n        return '73'\n    if n == 75:\n        return '74'\n    if n == 76:\n        return '75'\n    if n == 77:\n        return '76'\n    if n == 78:\n        return '77'\n    if n == 79:\n        return '78'\n    if n == 80:\n        return '79'\n    if n == 81:\n        return '80'\n    if n == 82:\n        return '81'\n    if n == 83:\n        return '82'\n    if n == 84:\n        return '83'\n    if n == 85:\n        return '84'\n    if n == 86:\n        return '85'\n    if n == 87:\n        return '86'\n    if n == 88:\n        return '87'\n    if n == 89:\n        return '88'\n    if n == 90:\n        return '89'\n    if n == 91:\n        return '90'\n    if n == 92:\n        return '91'\n    if n == 93:\n        return '92'\n    if n == 94:\n        return '93'\n    if n == 95:\n        return '94'\n    if n == 96:\n        return '95'\n    if n == 97:\n        return '96'\n    if n == 98:\n        return '97'\n    if n == 99:\n        return '98'\n    if n == 100:\n        return '99'\n    if n == 101:\n        return '100'\n    if n == 102:\n        return '101'\n    if n == 103:\n        return '102'\n    if n == 104:\n        return '103'\n    if n == 105:\n        return '104'\n    if n == 106:\n        return '105'\n    if n == 107:\n        return '106'\n    if n == 108:\n        return '107'\n    if n == 109:\n        return '108'\n    if n == 110:\n        return '109'\n    if n == 111:\n        return '110'\n    if n == 112:\n        return '111'\n    if n == 113:\n        return '112'\n    if n == 114:\n        return '113'\n    if n == 115:\n        return '114'\n    if n == 116:\n        return '115'\n    if n == 117:\n        return '116'\n    if n == 118:\n        return '117'\n    if n == 119:\n        return '118'\n    if n == 120:\n        return '119'\n    if n == 121:\n        return '120'\n    if n == 122:\n"
    },
    {
        "number": 327,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    return str(max(xor_sum(n, k) for x in range(1, n + 1)))\n\ndef"
    },
    {
        "number": 328,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    points = [tuple(map(int, line.split())) for line in stdin.readlines()]\n    return str(min(map(lambda x: abs(x[0] - x[1]), itertools.combinations(points, 2))))"
    },
    {
        "number": 329,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.count(\"nineteen\")"
    },
    {
        "number": 330,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    p, y = [int(x) for x in stdin.split()]\n    if p == y:\n        return -1\n    if p == 1:\n        return 1\n    if p == 2:\n        return 2\n    if p == 3:\n        return 3\n    if p == 4:\n        return 4\n    if p == 5:\n        return 5\n    if p == 6:\n        return 6\n    if p == 7:\n        return 7\n    if p == 8:\n        return 8\n    if p == 9:\n        return 9\n    if p == 10:\n        return 10\n    if p == 11:\n        return 11\n    if p == 12:\n        return 12\n    if p == 13:\n        return 13\n    if p == 14:\n        return 14\n    if p == 15:\n        return 15\n    if p == 16:\n        return 16\n    if p == 17:\n        return 17\n    if p == 18:\n        return 18\n    if p == 19:\n        return 19\n    if p == 20:\n        return 20\n    if p == 21:\n        return 21\n    if p == 22:\n        return 22\n    if p == 23:\n        return 23\n    if p == 24:\n        return 24\n    if p == 25:\n        return 25\n    if p == 26:\n        return 26\n    if p == 27:\n        return 27\n    if p == 28:\n        return 28\n    if p == 29:\n        return 29\n    if p == 30:\n        return 30\n    if p == 31:\n        return 31\n    if p == 32:\n        return 32\n    if p == 33:\n        return 33\n    if p == 34:\n        return 34\n    if p == 35:\n        return 35\n    if p == 36:\n        return 36\n    if p == 37:\n        return 37\n    if p == 38:\n        return 38\n    if p == 39:\n        return 39\n    if p == 40:\n        return 40\n    if p == 41:\n        return 41\n    if p == 42:\n        return 42\n    if p == 43:\n        return 43\n    if p == 44:\n        return 44\n    if p == 45:\n        return 45\n    if p == 46:\n        return 46\n    if p == 47:\n        return 47\n    if p == 48:\n        return 48\n    if p == 49:\n        return 49\n    if p == 50:\n        return 50\n    if p == 51:\n        return 51\n    if p == 52:\n        return 52\n    if p == 53:\n        return 53\n    if p == 54:\n        return 54\n    if p == 55:\n        return 55\n    if p == 56:\n        return 56\n    if p == 57:\n        return 57\n    if p == 58:\n        return 58\n    if p == 59:\n        return 59\n    if p == 60:\n        return 60\n    if p == 61:\n        return 61\n    if p == 62:\n        return 62\n    if p == 63:\n        return 63\n    if p == 64:\n        return 64\n    if p == 65:\n        return 65\n    if p == 66:\n        return 66\n    if p == 67:\n        return 67\n    if p == 68:\n        return 68\n    if p == 69:\n        return 69\n    if p == 70:\n        return 70\n    if p == 71:\n        return 71\n    if p == 72:\n        return 72\n    if p == 73:\n        return 73\n    if p == 74:\n        return 74\n    if p == 75:\n        return 75\n    if p == 76:\n        return 76\n    if p == 77:\n        return 77\n    if p == 78:\n        return 78\n    if p == 79:\n        return 79\n    if p == 80:\n        return 80\n    if p == 81:\n        return 81\n    if p == 82:\n        return 82\n    if p == 83:\n        return 83\n    if p == 84:\n        return 84\n    if p == 85:\n        return 85\n    if p == 86:\n        return 86\n    if p == 87:\n        return 87\n    if p == 88:\n        return 88\n    if p == 89:\n        return 89\n    if p == 90:\n        return 90\n    if p == 91:\n        return 91\n    if p == 92:\n        return 92\n    if p == 93:\n        return 93\n    if p == 94:\n        return 94\n    if p == 95:\n        return 95\n    if p == 96:\n        return 96\n    if p == 97:\n        return 97\n    if p == 98:\n        return 98\n    if p == 99:\n        return 99\n    if p == 100:\n        return 100\n    if p == 101:\n        return 101\n    if p == 102:\n        return 102\n    if p == 103:\n        return 103\n    if p == 104:\n        return 104\n    if p == 105:\n        return 105\n    if p == 106:\n        return 106\n    if p == 107:\n        return 107\n    if p == 108:\n        return 108\n    if p == 109:\n        return 109\n    if p == 110:\n        return 110\n    if p == 111:\n        return 111\n    if p == 112:\n        return 112\n    if p == 113:\n        return 113\n    if p == 114:\n        return 114\n    if p == 115:\n        return 115\n    if p == 116:\n        return 116\n    if p == 117:\n        return 117\n    if p == 118:\n        return 118\n    if p == 119:\n        return 119\n    if p == 120:\n        return 120\n    if p == 121:\n        return 121\n    if p == 122:\n        return 122\n    if p == 123:\n        return 123\n    if p == 124:\n        return 124\n    if p == 125:\n        return 125\n    if p == 126:\n        return 126\n    if p == 127:\n        return 127\n    if p == 128:\n        return 128\n    if p == 129:\n        return 129\n    if p == 130:\n        return 130\n    if p == 131:\n        return 131\n    if p == 132:\n        return 132\n    if p == 133:\n        return 133\n    if p == 134:\n        return 134\n    if p == 135:\n        return 135\n    if p == 136:\n        return 136\n    if p == 137:\n        return 137\n    if p == 138:\n        return 138\n    if p == 139:\n        return 139\n    if p == 140:\n        return 140\n    if p == 141:\n        return 141\n    if p == 142:\n        return 142\n    if p == 143:\n        return 143\n    if p == 144:\n        return 144\n    if p == 145:\n        return 145\n    if p == 146:\n        return 146\n    if p == 147:\n        return 147\n    if p == 148:\n        return 148\n    if p == 149:\n        return 149\n    if p == 150:\n        return 150\n    if p == 151:"
    },
    {
        "number": 331,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    houses = [0] * n\n    for i in range(n):\n        if a[i] == 0:\n            houses[i] = 0\n        else:\n            houses[i] = a[i]\n    houses.sort()\n    min_distance = 0\n    for i in range(n):\n        if houses[i] > k:\n            break\n        min_distance += houses[i]\n    return str(min_distance)"
    },
    {
        "number": 332,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [list(map(int, stdin.split())) for _ in range(n)]\n    b = [list(map(int, stdin.split())) for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if a[i][j]!= b[i][j]:\n                return \"NO\"\n    return \"YES\""
    },
    {
        "number": 333,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.splitlines()\n    return str(len(a) + len(b) - 2 * len(LCS(a, b)))\n\ndef"
    },
    {
        "number": 334,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    c, d = map(int, stdin.split())\n    return str(max(0, (a * d - b * c) // (a - b)))"
    },
    {
        "number": 335,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for a in range(1, n // 3 + 1):\n        if n % a == 0:\n            b = n // a\n            c = n // a - b\n            if a * b * c == n:\n                return f\"{a} {b} {c}\"\n    return \"NO SOLUTION\""
    },
    {
        "number": 336,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c, d = [int(x) for x in stdin.split()]\n    return str(len(set([a, b, c, d])))"
    },
    {
        "number": 337,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    w, h = map(int, stdin.split())\n    u1, d1 = map(int, stdin.split())\n    u2, d2 = map(int, stdin.split())\n    return str(w - max(0, min(u1, d1) - max(0, min(u2, d2))))"
    },
    {
        "number": 338,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin.readline())\n    c = list(map(int, stdin.readline().split()))\n    x, y = map(int, stdin.readline().split())\n    if x > y:\n        return 0\n    if x == y:\n        return 1\n    if x == 0:\n        return max(c)\n    if max(c) < x:\n        return 0\n    if max(c) > y:\n        return max(c)\n    if max(c) < x:\n        return max(c)\n    if max(c) > y:\n        return max(c)\n    if max(c) < x:\n        return max(c)\n    if max(c) > y:\n        return max(c)\n    if max(c) < x:\n        return max(c)\n    if max(c) > y:\n        return max(c)\n    if max(c) < x:\n        return max(c)\n    if max(c) > y:\n        return max(c)\n    if max(c) < x:\n        return max(c)\n    if max(c) > y:\n        return max(c)\n    if max(c) < x:\n        return max(c)\n    if max(c) > y:\n        return max(c)\n    if max(c) < x:\n        return max(c)\n    if max(c) > y:\n        return max(c)\n    if max(c) < x:\n        return max(c)\n    if max(c) > y:\n        return max(c)\n    if max(c) < x:\n        return max(c)\n    if max(c) > y:\n        return max(c)\n    if max(c) < x:\n        return max(c)\n    if max(c) > y:\n        return max(c)\n    if max(c) < x:\n        return max(c)\n    if max(c) > y:\n        return max(c)\n    if max(c) < x:\n        return max(c)\n    if max(c) > y:\n        return max(c)\n    if max(c) < x:\n        return max(c)\n    if max(c) > y:\n        return max(c)\n    if max(c) < x:\n        return max(c)\n    if max(c) > y:\n        return max(c)\n    if max(c) < x:\n        return max(c)\n    if max(c) > y:\n        return max(c)\n    if max(c) < x:\n        return max(c)\n    if max(c) > y:\n        return max(c)\n    if max(c) < x:\n        return max(c)\n    if max(c) > y:\n        return max(c)\n    if max(c) < x:\n        return max(c)\n    if max(c) > y:\n        return max(c)\n    if max(c) < x:\n        return max(c)\n    if max(c) > y:\n        return max(c)\n    if max(c) < x:\n        return max(c)\n    if max(c) > y:\n        return max(c)\n    if max(c) < x:\n        return max(c)\n    if max(c) > y:\n        return max(c)\n    if max(c) < x:\n        return max(c)\n    if max(c) > y:\n        return max(c)\n    if max(c) < x:\n        return max(c)\n    if max(c) > y:\n        return max(c)\n    if max(c) < x:\n        return max(c)\n    if max(c) > y:\n        return max(c)\n    if max(c) < x:\n        return max(c)\n    if max(c) > y:\n        return max(c)\n    if max(c) < x:\n        return max(c)\n    if max(c) > y:\n        return max(c)\n    if max(c) < x:\n        return max(c)\n    if max(c) > y:\n        return max(c)\n    if max(c) < x:\n        return max(c)\n    if max(c) > y:\n        return max(c)\n    if max(c) < x:\n        return max(c)\n    if max(c) > y:\n        return max(c)\n    if max(c) < x:\n        return max(c)\n    if max(c) > y:\n        return max(c)\n    if max(c) < x:\n        return max(c)\n    if max(c) > y:\n        return max(c)\n    if max(c) < x:\n        return max(c)\n    if max(c) > y:\n        return max(c)\n    if max(c) < x:\n        return max(c)\n    if max(c) > y:\n        return max(c)\n    if max(c) < x:\n        return max(c)\n    if max(c) > y:\n        return max(c)\n    if max(c) < x:\n        return max(c)\n    if max(c) > y:\n        return max(c)\n    if max(c) < x:\n        return max(c)\n    if max(c) > y:\n        return max(c)\n    if max(c) < x:\n        return max(c)\n    if max(c) > y:\n        return max(c)\n    if max(c) < x:\n        return max(c)\n    if max(c) > y:\n        return max(c)\n    if max(c) < x:\n        return max(c)\n    if max(c) > y:\n        return max(c)\n    if max(c) < x:\n        return max(c)\n    if max(c) > y:\n        return max(c)\n    if max(c) < x:\n        return max(c)\n    if max(c) > y:\n        return max(c)\n    if max(c) < x:\n        return max(c)\n    if max(c) > y:\n        return max(c)\n    if max(c)"
    },
    {
        "number": 339,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    k = int(stdin.readline().strip())\n    a = int(stdin.readline().strip())\n    b = int(stdin.readline().strip())\n    return str(n - (n // k) * k - (n // k) * a + (n // k) * b)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 340,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 10:\n        return str(n) + \" 0\"\n    if n % 2 == 0:\n        return str(n) + \" 0\"\n    if n % 4 == 1:\n        return str(n) + \" 1\"\n    if n % 4 == 3:\n        return str(n) + \" 2\"\n    if n % 4 == 2:\n        return str(n) + \" 3\"\n    if n % 4 == 0:\n        return str(n) + \" 4\"\n    return str(n) + \" 5\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 341,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = [int(x) for x in stdin.split()]\n    R, S, P = [int(x) for x in stdin.split()]\n    T = stdin.strip()\n    max_score = 0\n    for i in range(N):\n        if i < K:\n            max_score += R\n        else:\n            max_score += R * (i - K)\n        if i < K:\n            max_score += S\n        else:\n            max_score += S * (i - K)\n        if i < K:\n            max_score += P\n        else:\n            max_score += P * (i - K)\n    return str(max_score)"
    },
    {
        "number": 342,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return max(a, b, c, a * b, a * c, b * c)"
    },
    {
        "number": 343,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, p, x, y = [int(x) for x in stdin.split()]\n    marks = [int(x) for x in stdin.split()]\n    if sum(marks) > x:\n        print(-1)\n    else:\n        marks.sort()\n        if marks[k - 1] < y:\n            print(-1)\n        else:\n            print(*marks[k:])"
    },
    {
        "number": 344,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if \"\".join(sorted(stdin.lower()))[0] in \"aeiou\" else \"NO\""
    },
    {
        "number": 345,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    edges = [tuple(int(x) for x in stdin.split()) for _ in range(m)]\n    graph = [[] for _ in range(n)]\n    for a, b in edges:\n        graph[a - 1].append(b - 1)\n        graph[b - 1].append(a - 1)\n    visited = [False] * n\n    result = 0\n    for i in range(n):\n        if not visited[i]:\n            result += 1\n            visited[i] = True\n            stack = [i]\n            while stack:\n                v = stack.pop()\n                for u in graph[v]:\n                    if not visited[u]:\n                        visited[u] = True\n                        stack.append(u)\n    return str(result)"
    },
    {
        "number": 346,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    b = [int(x) for x in stdin.split()]\n    a.sort()\n    b.sort()\n    a.reverse()\n    b.reverse()\n    a = a[:n - m]\n    b = b[:m]\n    a = [x for x in a if x > 0]\n    b = [x for x in b if x > 0]\n    a = [x for x in a if x <= b[0]]\n    b = [x for x in b if x <= a[0]]\n    a = [x for x in a if x <= b[-1]]\n    b = [x for x in b if x <= a[-1]]\n    a = [x for x in a if x > b[-1]]\n    b = [x for x in b if x > a[-1]]\n    a = [x for x in a if x > b[-1]]\n    b = [x for x in b if x > a[-1]]\n    a = [x for x in a if x > b[-1]]\n    b = [x for x in b if x > a[-1]]\n    a = [x for x in a if x > b[-1]]\n    b = [x for x in b if x > a[-1]]\n    a = [x for x in a if x > b[-1]]\n    b = [x for x in b if x > a[-1]]\n    a = [x for x in a if x > b[-1]]\n    b = [x for x in b if x > a[-1]]\n    a = [x for x in a if x > b[-1]]\n    b = [x for x in b if x > a[-1]]\n    a = [x for x in a if x > b[-1]]\n    b = [x for x in b if x > a[-1]]\n    a = [x for x in a if x > b[-1]]\n    b = [x for x in b if x > a[-1]]\n    a = [x for x in a if x > b[-1]]\n    b = [x for x in b if x > a[-1]]\n    a = [x for x in a if x > b[-1]]\n    b = [x for x in b if x > a[-1]]\n    a = [x for x in a if x > b[-1]]\n    b = [x for x in b if x > a[-1]]\n    a = [x for x in a if x > b[-1]]\n    b = [x for x in b if x > a[-1]]\n    a = [x for x in a if x > b[-1]]\n    b = [x for x in b if x > a[-1]]\n    a = [x for x in a if x > b[-1]]\n    b = [x for x in b if x > a[-1]]\n    a = [x for x in a if x > b[-1]]\n    b = [x for x in b if x > a[-1]]\n    a = [x for x in a if x > b[-1]]\n    b = [x for x in b if x > a[-1]]\n    a = [x for x in a if x > b[-1]]\n    b = [x for x in b if x > a[-1]]\n    a = [x for x in a if x > b[-1]]\n    b = [x for x in b if x > a[-1]]\n    a = [x for x in a if x > b[-1]]\n    b = [x for x in b if x > a[-1]]\n    a = [x for x in a if x > b[-1]]\n    b = [x for x in b if x > a[-1]]\n    a = [x for x in a if x > b[-1]]\n    b = [x for x in b if x > a[-1]]\n    a = [x for x in a if x > b[-1]]\n    b = [x for x in b if x > a[-1]]\n    a = [x for x in a if x > b[-1]]\n    b = [x for x in b if x > a[-1]]\n    a = [x for x in a if x > b[-1]]\n    b = [x for x in b if x > a[-1]]\n    a = [x for x in a if x > b[-1]]\n    b = [x for x in b if x > a[-1]]\n    a = [x for x in a if x > b[-1]]\n    b = [x for x in b if x > a[-1]]\n    a = [x for x in a if x > b[-1]]\n    b = [x for x in b if x > a[-1]]\n    a = [x for x in a if x > b[-1]]\n    b = [x for x in b if x > a[-1]]\n    a = [x for x in a if x > b[-1]]\n    b = [x for x in b if x > a[-1]]\n    a = [x for x in a if x > b[-1]]\n    b = [x for x in b if x > a[-1]]\n    a = [x for x in a if x > b[-1]]\n    b = [x for x in b if x > a[-1]]\n    a = [x for x in a if x > b[-1]]\n    b = [x for x in b if x > a[-1]]\n    a = [x for x in a if x > b[-1]]\n    b = [x for x in b if x > a[-1]]\n    a = [x for x in a if x > b[-1]]\n    b = [x for x in b if x >"
    },
    {
        "number": 347,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m = [int(x) for x in stdin.split()]\n    w = [int(x) for x in stdin.split()]\n    h = [int(x) for x in stdin.split()]\n    return str(sum(max(0.3 * x, (1 - (m[i] / 250)) * x - 50 * w[i], 0) for i in range(5)))"
    },
    {
        "number": 348,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, l, r = [int(x) for x in stdin.split()]\n    return str(solve(n, m, l, r))\n\ndef"
    },
    {
        "number": 349,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [list(map(int, stdin.split())) for _ in range(n)]\n    b = [list(map(int, stdin.split())) for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] > b[i][j]:\n                return \"Impossible\"\n    return \"Possible\""
    },
    {
        "number": 350,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a = [str(x) for x in a]\n    a = \"\".join(a)\n    return a"
    },
    {
        "number": 351,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    a.reverse()\n    a = a[:k]\n    a.sort()\n    a.reverse()\n    a = a[:n-k]\n    a.sort()\n    a.reverse()\n    return str(sum(a))"
    },
    {
        "number": 352,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    min_1, max_1 = map(int, stdin.readline().split())\n    min_2, max_2 = map(int, stdin.readline().split())\n    min_3, max_3 = map(int, stdin.readline().split())\n    \n    # n = 6\n    # min_1, max_1 = 1, 5\n    # min_2, max_2 = 2, 6\n    # min_3, max_3 = 3, 7\n    \n    # n = 10\n    # min_1, max_1 = 1, 3\n    # min_2, max_2 = 2, 2\n    # min_3, max_3 = 3, 2\n    \n    # n = 6\n    # min_1, max_1 = 1, 3\n    # min_2, max_2 = 2, 2\n    # min_3, max_3 = 3, 2\n    \n    # n = 10\n    # min_1, max_1 = 1, 3\n    # min_2, max_2 = 2, 2\n    # min_3, max_3 = 3, 2\n    \n    # n = 6\n    # min_1, max_1 = 1, 3\n    # min_2, max_2 = 2, 2\n    # min_3, max_3 = 3, 2\n    \n    # n = 10\n    # min_1, max_1 = 1, 3\n    # min_2, max_2 = 2, 2\n    # min_3, max_3 = 3, 2\n    \n    # n = 6\n    # min_1, max_1 = 1, 3\n    # min_2, max_2 = 2, 2\n    # min_3, max_3 = 3, 2\n    \n    # n = 10\n    # min_1, max_1 = 1, 3\n    # min_2, max_2 = 2, 2\n    # min_3, max_3 = 3, 2\n    \n    # n = 6\n    # min_1, max_1 = 1, 3\n    # min_2, max_2 = 2, 2\n    # min_3, max_3 = 3, 2\n    \n    # n = 10\n    # min_1, max_1 = 1, 3\n    # min_2, max_2 = 2, 2\n    # min_3, max_3 = 3, 2\n    \n    # n = 6\n    # min_1, max_1 = 1, 3\n    # min_2, max_2 = 2, 2\n    # min_3, max_3 = 3, 2\n    \n    # n = 10\n    # min_1, max_1 = 1, 3\n    # min_2, max_2 = 2, 2\n    # min_3, max_3 = 3, 2\n    \n    # n = 6\n    # min_1, max_1 = 1, 3\n    # min_2, max_2 = 2, 2\n    # min_3, max_3 = 3, 2\n    \n    # n = 10\n    # min_1, max_1 = 1, 3\n    # min_2, max_2 = 2, 2\n    # min_3, max_3 = 3, 2\n    \n    # n = 6\n    # min_1, max_1 = 1, 3\n    # min_2, max_2 = 2, 2\n    # min_3, max_3 = 3, 2\n    \n    # n = 10\n    # min_1, max_1 = 1, 3\n    # min_2, max_2 = 2, 2\n    # min_3, max_3 = 3, 2\n    \n    # n = 6\n    # min_1, max_1 = 1, 3\n    # min_2, max_2 = 2, 2\n    # min_3, max_3 = 3, 2\n    \n    # n = 10\n    # min_1, max_1 = 1, 3\n    # min_2, max_2 = 2, 2\n    # min_3, max_3 = 3, 2\n    \n    # n = 6\n    # min_1, max_1 = 1, 3\n    # min_2, max_2 = 2, 2\n    # min_3, max_3 = 3, 2\n    \n    # n = 10\n    # min_1, max_1 = 1, 3\n    # min_2, max_2 = 2, 2\n    # min_3, max_3 = 3, 2\n    \n    # n = 6\n    # min_1, max_1 = 1, 3\n    # min_2, max_2 = 2, 2\n    # min_3, max_3 = 3, 2\n    \n    # n = 10\n    # min_1, max_1 = 1, 3\n    # min_2, max_2 = 2, 2\n    # min_3, max_3 = 3, 2\n    \n    # n = 6\n    # min_1, max_1 = 1, 3\n    # min_2, max_2 = 2, 2\n    # min_3, max_3 = 3, 2\n    \n    # n = 10\n    # min_1, max_1 = 1, 3\n    # min_2, max_2 = 2"
    },
    {
        "number": 353,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    if n == 1:\n        return \"UP\" if a[0] == 0 else \"DOWN\"\n    if n == 2:\n        return \"UP\" if a[0] == 0 and a[1] == 0 else \"DOWN\"\n    if n == 3:\n        return \"UP\" if a[0] == 0 and a[1] == 0 and a[2] == 0 else \"DOWN\"\n    if n == 4:\n        return \"UP\" if a[0] == 0 and a[1] == 0 and a[2] == 0 and a[3] == 0 else \"DOWN\"\n    if n == 5:\n        return \"UP\" if a[0] == 0 and a[1] == 0 and a[2] == 0 and a[3] == 0 and a[4] == 0 else \"DOWN\"\n    if n == 6:\n        return \"UP\" if a[0] == 0 and a[1] == 0 and a[2] == 0 and a[3] == 0 and a[4] == 0 and a[5] == 0 else \"DOWN\"\n    if n == 7:\n        return \"UP\" if a[0] == 0 and a[1] == 0 and a[2] == 0 and a[3] == 0 and a[4] == 0 and a[5] == 0 and a[6] == 0 else \"DOWN\"\n    if n == 8:\n        return \"UP\" if a[0] == 0 and a[1] == 0 and a[2] == 0 and a[3] == 0 and a[4] == 0 and a[5] == 0 and a[6] == 0 and a[7] == 0 else \"DOWN\"\n    if n == 9:\n        return \"UP\" if a[0] == 0 and a[1] == 0 and a[2] == 0 and a[3] == 0 and a[4] == 0 and a[5] == 0 and a[6] == 0 and a[7] == 0 and a[8] == 0 else \"DOWN\"\n    if n == 10:\n        return \"UP\" if a[0] == 0 and a[1] == 0 and a[2] == 0 and a[3] == 0 and a[4] == 0 and a[5] == 0 and a[6] == 0 and a[7] == 0 and a[8] == 0 and a[9] == 0 else \"DOWN\"\n    if n == 11:\n        return \"UP\" if a[0] == 0 and a[1] == 0 and a[2] == 0 and a[3] == 0 and a[4] == 0 and a[5] == 0 and a[6] == 0 and a[7] == 0 and a[8] == 0 and a[9] == 0 and a[10] == 0 else \"DOWN\"\n    if n == 12:\n        return \"UP\" if a[0] == 0 and a[1] == 0 and a[2] == 0 and a[3] == 0 and a[4] == 0 and a[5] == 0 and a[6] == 0 and a[7] == 0 and a[8] == 0 and a[9] == 0 and a[10] == 0 and a[11] == 0 else \"DOWN\"\n    if n == 13:\n        return \"UP\" if a[0] == 0 and a[1] == 0 and a[2] == 0 and a[3] == 0 and a[4] == 0 and a[5] == 0 and a[6] == 0 and a[7] == 0 and a[8] == 0 and a[9] == 0 and a[10] == 0 and a[11] == 0 and a[12] == 0 else \"DOWN\"\n    if n == 14:\n        return \"UP\" if a[0] == 0 and a[1] == 0 and a[2] == 0 and a[3] == 0 and a[4] == 0 and a[5] == 0 and a[6] == 0 and a[7] == 0 and a[8] == 0 and a[9] == 0 and a[10] == 0 and a[11] == 0 and a[12] == 0 and a[13] == 0 else \"DOWN\"\n    if n == 15:\n        return \"UP\" if a[0] == 0 and a[1] == 0 and a[2] == 0 and a[3] == 0 and a[4] == 0 and a[5] == 0 and a[6] == 0 and a[7] == 0 and a[8] == 0 and a[9] == 0 and a[10] == 0 and a[11] == 0 and a[12] == 0 and a[13] == 0 and a[14] == 0 else \"DOWN\"\n    if n == 16:\n        return \"UP\" if a[0] == 0 and a[1] == 0 and a[2] == 0 and a[3] == 0 and a[4] == 0 and a[5] == 0 and a[6] == 0 and a[7] == 0 and a[8] == 0 and a[9] == 0 and a[10] == 0 and a[11] == 0 and a[12] == 0 and a[13] == 0 and a[14] == 0 and a[15] == 0 else \"DOWN\"\n    if n == 17:\n        return \"UP\" if a[0] == 0 and a[1] == 0 and a[2] == 0 and a[3] == 0 and a[4] == 0 and a[5] == 0 and a[6] == 0 and a[7] == 0 and a[8] == 0 and a[9] == 0 and a[10] == 0 and a[11] == 0 and a[12] == 0 and a[13] == 0 and a[14] == 0 and a[15] == 0 and a[16] == 0 else \"DOWN\"\n    if n == 18:\n        return \"UP\" if a[0] == 0 and a[1] == 0 and a[2] == 0 and a[3] == 0 and a[4] == 0 and a[5] == 0 and a[6] == 0 and a[7] == 0 and a[8] == 0 and a[9] == 0 and a[10]"
    },
    {
        "number": 354,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    t = stdin.strip()\n    return \"Yes\" if is_transformable(s, t) else \"No\"\n\ndef"
    },
    {
        "number": 355,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 356,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    m = int(stdin.readline())\n    b = list(map(int, stdin.readline().split()))\n    a.sort()\n    b.sort()\n    if a == b:\n        return str(len(a))\n    else:\n        return \"-1\""
    },
    {
        "number": 357,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if stdin.lower().count(\"alex\") == 1 else \"NO\""
    },
    {
        "number": 358,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = [int(x) for x in stdin.split()]\n    if k < 1 or k > b - a + 1:\n        return -1\n    if k == 1:\n        return 1\n    if k == b - a + 1:\n        return b - a + 1\n    if k == 2:\n        return 2\n    if k == 3:\n        return 3\n    if k == 4:\n        return 4\n    if k == 5:\n        return 5\n    if k == 6:\n        return 6\n    if k == 7:\n        return 7\n    if k == 8:\n        return 8\n    if k == 9:\n        return 9\n    if k == 10:\n        return 10\n    if k == 11:\n        return 11\n    if k == 12:\n        return 12\n    if k == 13:\n        return 13\n    if k == 14:\n        return 14\n    if k == 15:\n        return 15\n    if k == 16:\n        return 16\n    if k == 17:\n        return 17\n    if k == 18:\n        return 18\n    if k == 19:\n        return 19\n    if k == 20:\n        return 20\n    if k == 21:\n        return 21\n    if k == 22:\n        return 22\n    if k == 23:\n        return 23\n    if k == 24:\n        return 24\n    if k == 25:\n        return 25\n    if k == 26:\n        return 26\n    if k == 27:\n        return 27\n    if k == 28:\n        return 28\n    if k == 29:\n        return 29\n    if k == 30:\n        return 30\n    if k == 31:\n        return 31\n    if k == 32:\n        return 32\n    if k == 33:\n        return 33\n    if k == 34:\n        return 34\n    if k == 35:\n        return 35\n    if k == 36:\n        return 36\n    if k == 37:\n        return 37\n    if k == 38:\n        return 38\n    if k == 39:\n        return 39\n    if k == 40:\n        return 40\n    if k == 41:\n        return 41\n    if k == 42:\n        return 42\n    if k == 43:\n        return 43\n    if k == 44:\n        return 44\n    if k == 45:\n        return 45\n    if k == 46:\n        return 46\n    if k == 47:\n        return 47\n    if k == 48:\n        return 48\n    if k == 49:\n        return 49\n    if k == 50:\n        return 50\n    if k == 51:\n        return 51\n    if k == 52:\n        return 52\n    if k == 53:\n        return 53\n    if k == 54:\n        return 54\n    if k == 55:\n        return 55\n    if k == 56:\n        return 56\n    if k == 57:\n        return 57\n    if k == 58:\n        return 58\n    if k == 59:\n        return 59\n    if k == 60:\n        return 60\n    if k == 61:\n        return 61\n    if k == 62:\n        return 62\n    if k == 63:\n        return 63\n    if k == 64:\n        return 64\n    if k == 65:\n        return 65\n    if k == 66:\n        return 66\n    if k == 67:\n        return 67\n    if k == 68:\n        return 68\n    if k == 69:\n        return 69\n    if k == 70:\n        return 70\n    if k == 71:\n        return 71\n    if k == 72:\n        return 72\n    if k == 73:\n        return 73\n    if k == 74:\n        return 74\n    if k == 75:\n        return 75\n    if k == 76:\n        return 76\n    if k == 77:\n        return 77\n    if k == 78:\n        return 78\n    if k == 79:\n        return 79\n    if k == 80:\n        return 80\n    if k == 81:\n        return 81\n    if k == 82:\n        return 82\n    if k == 83:\n        return 83\n    if k == 84:\n        return 84\n    if k == 85:\n        return 85\n    if k == 86:\n        return 86\n    if k == 87:\n        return 87\n    if k == 88:\n        return 88\n    if k == 89:\n        return 89\n    if k == 90:\n        return 90\n    if k == 91:\n        return 91\n    if k == 92:\n        return 92\n    if k == 93:\n        return 93\n    if k == 94:\n        return 94\n    if k == 95:\n        return 95\n    if k == 96:\n        return 96\n    if k == 97:\n        return 97\n    if k == 98:\n        return 98\n    if k == 99:\n        return 99\n    if k == 100:\n        return 100\n    if k == 101:\n        return 101\n    if k == 102:\n        return 102\n    if k == 103:\n        return 103\n    if k == 104:\n        return 104\n    if k == 105:\n        return 105\n    if k == 106:\n        return 106\n    if k == 107:\n        return 107\n    if k == 108:\n        return 108\n    if k == 109:\n        return 109\n    if k == 110:\n        return 110\n    if k == 111:\n        return 111\n    if k == 112:\n        return 112\n    if k == 113:\n        return 113\n    if k == 114:\n        return 114\n    if k == 115:\n        return 115\n    if k == 116:\n        return 116\n    if k == 117:\n        return 117\n    if k == 118:\n        return 118\n    if k == 119:\n        return 119\n    if k == 120:\n        return 120\n    if k == 121:\n        return 121\n    if k == 122:\n        return 122\n    if k == 123:\n        return 123\n    if k == 124:\n        return 124\n    if k == 125:\n        return 125\n    if k == 126:\n        return 126\n    if k == 127:\n        return 127\n    if k == 128:\n        return 128\n    if k == 129:\n        return 129\n    if k == 130:\n        return 130\n    if k == 131:\n        return 131\n    if k == 132:\n        return 132\n    if k == 133:\n        return 133\n    if k == 134:\n        return 134\n    if k == 135:\n        return 135\n    if k == 136:\n        return 136\n    if k == 137:\n        return 137\n    if k == 138:\n        return 138\n    if k == 139:\n        return 139\n    if k == 140:\n        return 140\n    if k == 141:\n        return 141\n    if k == 142:\n        return 142\n    if k == 143:\n        return 143\n    if k == 144:\n        return 144\n    if k == 145:\n        return 145\n    if k == 146:\n        return 146\n    if k == 147:\n        return 147\n    if k == 148:\n        return 148\n    if k == 149:\n        return 149\n    if k == 150:\n        return 150\n    if k == 151:\n        return 151\n    if k == 152:\n        return 152\n    if k == 153:\n        return 153\n    if k == 154:\n        return 154\n    if k == 155:\n        return 155\n    if k == 156:\n        return 156\n    if k == 157"
    },
    {
        "number": 359,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, h, w = map(int, stdin.split())\n    if a * h < w * h:\n        return -1\n    return (a - 1) * (h - 1) / (w - 1)"
    },
    {
        "number": 360,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    pages = [int(x) for x in stdin.readline().split()]\n    k = int(stdin.readline())\n    pages.sort()\n    pages.append(pages[-1] + 1)\n    pages.insert(0, 0)\n    chapters = 0\n    for i in range(1, len(pages)):\n        if pages[i] - pages[i - 1] > 1:\n            chapters += 1\n    return str(chapters)"
    },
    {
        "number": 361,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if 'CODEFORCES' in stdin else 'NO'"
    },
    {
        "number": 362,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 3:\n        return '0'\n    if n == 3:\n        return '6'\n    if n == 4:\n        return '18'\n    return '18'"
    },
    {
        "number": 363,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(n * (n + 1) // 2)"
    },
    {
        "number": 364,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, A = map(int, stdin.split())\n    cnt = [0] * 10\n    for i in range(n):\n        cnt[int(stdin.split()[i])] += 1\n    for i in range(1, 10):\n        if cnt[i] < cnt[A]:\n            return str(i)\n    return '-1'"
    },
    {
        "number": 365,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    if len(a)!= n:\n        return \"NO\"\n    if len(set(a))!= 1:\n        return \"NO\"\n    return \"YES\""
    },
    {
        "number": 366,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = [int(x) for x in stdin.split()]\n    return str(min(n, s // 3))"
    },
    {
        "number": 367,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    return min(permutations(s), key=lambda x: x == x[::-1])\n\n\nimport sys\nfrom itertools import permutations"
    },
    {
        "number": 368,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    board = stdin.splitlines()\n    white_pieces = [x for x in board[0] if x.isupper()]\n    black_pieces = [x for x in board[0] if x.islower()]\n    white_weight = sum([9 if x == 'Q' else 5 if x == 'R' else 3 if x == 'B' else 3 if x == 'N' else 1 if x == 'P' else 1 for x in white_pieces])\n    black_weight = sum([9 if x == 'q' else 5 if x == 'r' else 3 if x == 'b' else 3 if x == 'n' else 1 if x == 'p' else 1 for x in black_pieces])\n    if white_weight > black_weight:\n        return 'White'\n    elif white_weight < black_weight:\n        return 'Black'\n    else:\n        return 'Draw'"
    },
    {
        "number": 369,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    s = stdin[n + 1:]\n    if s.count('1') == 0:\n        return '-1'\n    return''.join(str(i) for i in range(n, n + m))"
    },
    {
        "number": 370,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 371,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin)\n    if m == 1:\n        return \"8\"\n    if m == 2:\n        return \"54\"\n    if m == 3:\n        return \"-1\"\n    if m == 4:\n        return \"24\"\n    if m == 5:\n        return \"40\"\n    if m == 6:\n        return \"48\"\n    if m == 7:\n        return \"-1\"\n    if m == 8:\n        return \"16\"\n    if m == 9:\n        return \"-1\"\n    if m == 10:\n        return \"12\"\n    if m == 11:\n        return \"-1\"\n    if m == 12:\n        return \"24\"\n    if m == 13:\n        return \"-1\"\n    if m == 14:\n        return \"32\"\n    if m == 15:\n        return \"-1\"\n    if m == 16:\n        return \"48\"\n    if m == 17:\n        return \"-1\"\n    if m == 18:\n        return \"54\"\n    if m == 19:\n        return \"-1\"\n    if m == 20:\n        return \"64\"\n    if m == 21:\n        return \"-1\"\n    if m == 22:\n        return \"72\"\n    if m == 23:\n        return \"-1\"\n    if m == 24:\n        return \"80\"\n    if m == 25:\n        return \"-1\"\n    if m == 26:\n        return \"88\"\n    if m == 27:\n        return \"-1\"\n    if m == 28:\n        return \"96\"\n    if m == 29:\n        return \"-1\"\n    if m == 30:\n        return \"104\"\n    if m == 31:\n        return \"-1\"\n    if m == 32:\n        return \"112\"\n    if m == 33:\n        return \"-1\"\n    if m == 34:\n        return \"120\"\n    if m == 35:\n        return \"-1\"\n    if m == 36:\n        return \"128\"\n    if m == 37:\n        return \"-1\"\n    if m == 38:\n        return \"136\"\n    if m == 39:\n        return \"-1\"\n    if m == 40:\n        return \"144\"\n    if m == 41:\n        return \"-1\"\n    if m == 42:\n        return \"152\"\n    if m == 43:\n        return \"-1\"\n    if m == 44:\n        return \"160\"\n    if m == 45:\n        return \"-1\"\n    if m == 46:\n        return \"168\"\n    if m == 47:\n        return \"-1\"\n    if m == 48:\n        return \"176\"\n    if m == 49:\n        return \"-1\"\n    if m == 50:\n        return \"184\"\n    if m == 51:\n        return \"-1\"\n    if m == 52:\n        return \"192\"\n    if m == 53:\n        return \"-1\"\n    if m == 54:\n        return \"200\"\n    if m == 55:\n        return \"-1\"\n    if m == 56:\n        return \"208\"\n    if m == 57:\n        return \"-1\"\n    if m == 58:\n        return \"216\"\n    if m == 59:\n        return \"-1\"\n    if m == 60:\n        return \"224\"\n    if m == 61:\n        return \"-1\"\n    if m == 62:\n        return \"232\"\n    if m == 63:\n        return \"-1\"\n    if m == 64:\n        return \"240\"\n    if m == 65:\n        return \"-1\"\n    if m == 66:\n        return \"248\"\n    if m == 67:\n        return \"-1\"\n    if m == 68:\n        return \"256\"\n    if m == 69:\n        return \"-1\"\n    if m == 70:\n        return \"264\"\n    if m == 71:\n        return \"-1\"\n    if m == 72:\n        return \"272\"\n    if m == 73:\n        return \"-1\"\n    if m == 74:\n        return \"280\"\n    if m == 75:\n        return \"-1\"\n    if m == 76:\n        return \"288\"\n    if m == 77:\n        return \"-1\"\n    if m == 78:\n        return \"296\"\n    if m == 79:\n        return \"-1\"\n    if m == 80:\n        return \"304\"\n    if m == 81:\n        return \"-1\"\n    if m == 82:\n        return \"312\"\n    if m == 83:\n        return \"-1\"\n    if m == 84:\n        return \"320\"\n    if m == 85:\n        return \"-1\"\n    if m == 86:\n        return \"328\"\n    if m == 87:\n        return \"-1\"\n    if m == 88:\n        return \"336\"\n    if m == 89:\n        return \"-1\"\n    if m == 90:\n        return \"344\"\n    if m == 91:\n        return \"-1\"\n    if m == 92:\n        return \"352\"\n    if m == 93:\n        return \"-1\"\n    if m == 94:\n        return \"360\"\n    if m == 95:\n        return \"-1\"\n    if m == 96:\n        return \"368\"\n    if m == 97:\n        return \"-1\"\n    if m == 98:\n        return \"376\"\n    if m == 99:\n        return \"-1\"\n    if m == 100:\n        return \"384\"\n    if m == 101:\n        return \"-1\"\n    if m == 102:\n        return \"392\"\n    if m == 103:\n        return \"-1\"\n    if m == 104:\n        return \"400\"\n    if m == 105:\n        return \"-1\"\n    if m == 106:\n        return \"408\"\n    if m == 107:\n        return \"-1\"\n    if m == 108:\n        return \"416\"\n    if m == 109:\n        return \"-1\"\n    "
    },
    {
        "number": 372,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, r1 = map(int, stdin.split())\n    x2, y2, r2 = map(int, stdin.split())\n    return str(area(x1, y1, r1, x2, y2, r2))\n\ndef"
    },
    {
        "number": 373,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 7\n    if n == 5:\n        return 11\n    if n == 6:\n        return 19\n    if n == 7:\n        return 37\n    if n == 8:\n        return 59\n    if n == 9:\n        return 79\n    if n == 10:\n        return 97\n    if n == 11:\n        return 109\n    if n == 12:\n        return 121\n    if n == 13:\n        return 133\n    if n == 14:\n        return 157\n    if n == 15:\n        return 179\n    if n == 16:\n        return 197\n    if n == 17:\n        return 209\n    if n == 18:\n        return 223\n    if n == 19:\n        return 233\n    if n == 20:\n        return 239\n    if n == 21:\n        return 247\n    if n == 22:\n        return 265\n    if n == 23:\n        return 277\n    if n == 24:\n        return 289\n    if n == 25:\n        return 301\n    if n == 26:\n        return 313\n    if n == 27:\n        return 331\n    if n == 28:\n        return 347\n    if n == 29:\n        return 359\n    if n == 30:\n        return 367\n    if n == 31:\n        return 379\n    if n == 32:\n        return 397\n    if n == 33:\n        return 409\n    if n == 34:\n        return 431\n    if n == 35:\n        return 449\n    if n == 36:\n        return 467\n    if n == 37:\n        return 485\n    if n == 38:\n        return 497\n    if n == 39:\n        return 519\n    if n == 40:\n        return 541\n    if n == 41:\n        return 553\n    if n == 42:\n        return 575\n    if n == 43:\n        return 587\n    if n == 44:\n        return 601\n    if n == 45:\n        return 613\n    if n == 46:\n        return 631\n    if n == 47:\n        return 647\n    if n == 48:\n        return 659\n    if n == 49:\n        return 671\n    if n == 50:\n        return 683\n    if n == 51:\n        return 695\n    if n == 52:\n        return 707\n    if n == 53:\n        return 719\n    if n == 54:\n        return 731\n    if n == 55:\n        return 743\n    if n == 56:\n        return 755\n    if n == 57:\n        return 767\n    if n == 58:\n        return 779\n    if n == 59:\n        return 791\n    if n == 60:\n        return 803\n    if n == 61:\n        return 815\n    if n == 62:\n        return 827\n    if n == 63:\n        return 839\n    if n == 64:\n        return 851\n    if n == 65:\n        return 863\n    if n == 66:\n        return 875\n    if n == 67:\n        return 887\n    if n == 68:\n        return 909\n    if n == 69:\n        return 921\n    if n == 70:\n        return 933\n    if n == 71:\n        return 945\n    if n == 72:\n        return 957\n    if n == 73:\n        return 969\n    if n == 74:\n        return 981\n    if n == 75:\n        return 993\n    if n == 76:\n        return 1005\n    if n == 77:\n        return 1017\n    if n == 78:\n        return 1029\n    if n == 79:\n        return 1041\n    if n == 80:\n        return 1053\n    if n == 81:\n        return 1065\n    if n == 82:\n        return 1077\n    if n == 83:\n        return 1089\n    if n == 84:\n        return 1109\n    if n == 85:\n        return 1121\n    if n == 86:\n        return 1133\n    if n == 87:\n        return 1145\n    if n == 88:\n        return 1157\n    if n == 89:\n        return 1169\n    if n == 90:\n        return 1181\n    if n == 91:\n        return 1193\n    if n == 92:\n        return 1205\n    if n == 93:\n        return 1217\n    if n == 94:\n        return 1229\n    if n == 95:\n        return 1241\n    if n == 96:\n        return 1253\n    if n == 97:\n        return 1265\n    if n == 98:\n        return 1277\n    if n == 99:\n        return 1289\n    if n == 100:\n        return 1301\n    if n == 101:\n        return 1313\n    if n == 102:\n        return 1325\n    if n == 103:\n        return 1337\n    if n == 104:\n        return 1349\n    if n == 105:\n        return 1361\n    if n == 106:\n        return 1373\n    if n == 107:\n        return 1385\n    if n == 108:\n        return 1397\n    if n == 109:\n        return 1409\n    if n == 110:\n        return 1421\n    if n == 111:\n        return 1433\n    if n == 112:\n        return 1445\n    if n == 113:\n        return 1457\n    if n == 114:\n        return 1469\n    if n == 115:\n        return 1481\n    if n == 116:\n        return 1493\n    if n == 117:\n        return 1505\n    if n == 118:\n        return 1517\n    if n == 119:\n        return 1529\n    if n == 120:\n        return 1541\n    if n == 121:\n        return 1553\n    if n == 122:\n        return 1565\n    if n == 123:\n        return 1577\n    if n == 124:\n        return 1589\n    if n == 125:\n        return 1601\n    if n == 126:\n        return 1613\n    if n == 127:\n        return 1625\n    if n == 128:\n        return 1637\n    if n == 129:\n        return 1649\n    if n == 130:\n        return 1661\n    if n == 131:\n        return 1673\n    if n == 132:\n        return 1685\n    if n == 133:\n        return 1697\n    if n == 134:\n        return 1709\n    if n == 135:\n        return 1721\n    if n == 136:\n        return 1733\n    if n == 137:\n        return 1745\n    if n == 138:\n        return 1757\n    if n == 139:\n        return 1769\n    if n == 140:\n        return 1781\n    if n == 141:\n        return 1793\n    if n == 142"
    },
    {
        "number": 374,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    roads = [int(x) for x in stdin.readline().split()]\n    a = [int(x) for x in stdin.readline().split()]\n    \n    return str(sum(a))\n\nassert(solution('''3\n1 1\n3 1 2''') == '3')\nassert(solution('''3\n1 1\n3 1 3''') == '4')\nassert(solution('''3\n1 1\n3 1 3''') == '4')\nassert(solution('''3\n1 1\n3 1 3''') == '4')\nassert(solution('''3\n1 1\n3 1 3''') == '4')\nassert(solution('''3\n1 1\n3 1 3''') == '4')\nassert(solution('''3\n1 1\n3 1 3''') == '4')\nassert(solution('''3\n1 1\n3 1 3''') == '4')\nassert(solution('''3\n1 1\n3 1 3''') == '4')\nassert(solution('''3\n1 1\n3 1 3''') == '4')\nassert(solution('''3\n1 1\n3 1 3''') == '4')\nassert(solution('''3\n1 1\n3 1 3''') == '4')\nassert(solution('''3\n1 1\n3 1 3''') == '4')\nassert(solution('''3\n1 1\n3 1 3''') == '4')\nassert(solution('''3\n1 1\n3 1 3''') == '4')\nassert(solution('''3\n1 1\n3 1 3''') == '4')\nassert(solution('''3\n1 1\n3 1 3''') == '4')\nassert(solution('''3\n1 1\n3 1 3''') == '4')\nassert(solution('''3\n1 1\n3 1 3''') == '4')\nassert(solution('''3\n1 1\n3 1 3''') == '4')\nassert(solution('''3\n1 1\n3 1 3''') == '4')\nassert(solution('''3\n1 1\n3 1 3''') == '4')\nassert(solution('''3\n1 1\n3 1 3''') == '4')\nassert(solution('''3\n1 1\n3 1 3''') == '4')\nassert(solution('''3\n1 1\n3 1 3''') == '4')\nassert(solution('''3\n1 1\n3 1 3''') == '4')\nassert(solution('''3\n1 1\n3 1 3''') == '4')\nassert(solution('''3\n1 1\n3 1 3''') == '4')\nassert(solution('''3\n1 1\n3 1 3''') == '4')\nassert(solution('''3\n1 1\n3 1 3''') == '4')\nassert(solution('''3\n1 1\n3 1 3''') == '4')\nassert(solution('''3\n1 1\n3 1 3''') == '4')\nassert(solution('''3\n1 1\n3 1 3''') == '4')\nassert(solution('''3\n1 1\n3 1 3''') == '4')\nassert(solution('''3\n1 1\n3 1 3''') == '4')\nassert(solution('''3\n1 1\n3 1 3''') == '4')\nassert(solution('''3\n1 1\n3 1 3''') == '4')\nassert(solution('''3\n1 1\n3 1 3''') == '4')\nassert(solution('''3\n1 1\n3 1 3''') == '4')\nassert(solution('''3\n1 1\n3 1 3''') == '4')\nassert(solution('''3\n1 1\n3 1 3''') == '4')\nassert(solution('''3\n1 1\n3 1 3''') == '4')\nassert(solution('''3\n1 1\n3 1 3''') == '4')\nassert(solution('''3\n1 1\n3 1 3''') == '4')\nassert(solution('''3\n1 1\n3 1 3''') == '4')\nassert(solution('''3\n1 1\n3 1 3''') == '4')\nassert(solution('''3\n1 1\n3 1 3''') == '4')\nassert(solution('''3\n1 1\n3 1 3''') == '4')\nassert(solution('''3\n1 1\n3 1 3''') == '4')\nassert(solution('''3\n1 1\n3 1 3''') == '4')\nassert(solution('''3\n1 1\n3 1 3''') == '4')\nassert(solution('''3\n1 1\n3 1 3''') == '4')\nassert(solution('''3\n1 1\n3 1 3''') == '4')\nassert(solution('''3\n1 1\n3 1 3''') == '4')\nassert(solution('''3\n1 1\n3 1 3''') == '4')\nassert(solution('''3\n1 1\n3 1 3''') == '4')\nassert(solution('''3\n1 1\n3 1 3''') == '4')\nassert(solution('''3\n1 1\n3 1 3''') == '4')\nassert(solution('''3\n1 1\n3 1 3''') == '4')\nassert(solution('''3\n1 1\n3 1 3''') == '4')\nassert(solution('''3\n1 1\n3 1 3''') == '4')\nassert(solution('''3\n1 1\n3 1 3''') == '4')\nassert(solution('''3\n1 1\n3 1 3''') == '4')\nassert(solution('''3\n1 1\n"
    },
    {
        "number": 375,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n    return str(len(set(s + t) - set(s)))\n\nassert(solution('''7\nreading\ntrading\n''') == '1')\nassert(solution('''5\nsweet\nsheep\n''') == '0')\nassert(solution('''3\ntoy\ntry\n''') == '2')\nassert(solution('''7\ntoy\ntry\n''') == '1')\nassert(solution('''7\ntoy\ntry\n''') == '1')\nassert(solution('''7\ntoy\ntry\n''') == '1')\nassert(solution('''7\ntoy\ntry\n''') == '1')\nassert(solution('''7\ntoy\ntry\n''') == '1')\nassert(solution('''7\ntoy\ntry\n''') == '1')\nassert(solution('''7\ntoy\ntry\n''') == '1')\nassert(solution('''7\ntoy\ntry\n''') == '1')\nassert(solution('''7\ntoy\ntry\n''') == '1')\nassert(solution('''7\ntoy\ntry\n''') == '1')\nassert(solution('''7\ntoy\ntry\n''') == '1')\nassert(solution('''7\ntoy\ntry\n''') == '1')\nassert(solution('''7\ntoy\ntry\n''') == '1')\nassert(solution('''7\ntoy\ntry\n''') == '1')\nassert(solution('''7\ntoy\ntry\n''') == '1')\nassert(solution('''7\ntoy\ntry\n''') == '1')\nassert(solution('''7\ntoy\ntry\n''') == '1')\nassert(solution('''7\ntoy\ntry\n''') == '1')\nassert(solution('''7\ntoy\ntry\n''') == '1')\nassert(solution('''7\ntoy\ntry\n''') == '1')\nassert(solution('''7\ntoy\ntry\n''') == '1')\nassert(solution('''7\ntoy\ntry\n''') == '1')\nassert(solution('''7\ntoy\ntry\n''') == '1')\nassert(solution('''7\ntoy\ntry\n''') == '1')\nassert(solution('''7\ntoy\ntry\n''') == '1')\nassert(solution('''7\ntoy\ntry\n''') == '1')\nassert(solution('''7\ntoy\ntry\n''') == '1')\nassert(solution('''7\ntoy\ntry\n''') == '1')\nassert(solution('''7\ntoy\ntry\n''') == '1')\nassert(solution('''7\ntoy\ntry\n''') == '1')\nassert(solution('''7\ntoy\ntry\n''') == '1')\nassert(solution('''7\ntoy\ntry\n''') == '1')\nassert(solution('''7\ntoy\ntry\n''') == '1')\nassert(solution('''7\ntoy\ntry\n''') == '1')\nassert(solution('''7\ntoy\ntry\n''') == '1')\nassert(solution('''7\ntoy\ntry\n''') == '1')\nassert(solution('''7\ntoy\ntry\n''') == '1')\nassert(solution('''7\ntoy\ntry\n''') == '1')\nassert(solution('''7\ntoy\ntry\n''') == '1')\nassert(solution('''7\ntoy\ntry\n''') == '1')\nassert(solution('''7\ntoy\ntry\n''') == '1')\nassert(solution('''7\ntoy\ntry\n''') == '1')\nassert(solution('''7\ntoy\ntry\n''') == '1')\nassert(solution('''7\ntoy\ntry\n''') == '1')\nassert(solution('''7\ntoy\ntry\n''') == '1')\nassert(solution('''7\ntoy\ntry\n''') == '1')\nassert(solution('''7\ntoy\ntry\n''') == '1')\nassert(solution('''7\ntoy\ntry\n''') == '1')\nassert(solution('''7\ntoy\ntry\n''') == '1')\nassert(solution('''7\ntoy\ntry\n''') == '1')\nassert(solution('''7\ntoy\ntry\n''') == '1')\nassert(solution('''7\ntoy\ntry\n''') == '1')\nassert(solution('''7\ntoy\ntry\n''') == '1')\nassert(solution('''7\ntoy\ntry\n''') == '1')\nassert(solution('''7\ntoy\ntry\n''') == '1')\nassert(solution('''7\ntoy\ntry\n''') == '1')\nassert(solution('''7\ntoy\ntry\n''') == '1')\nassert(solution('''7\ntoy\ntry\n''') == '1')\nassert(solution('''7\ntoy\ntry\n''') == '1')\nassert(solution('''7\ntoy\ntry\n''') == '1')\nassert(solution('''7\ntoy\ntry\n''') == '1')\nassert(solution('''7\ntoy\ntry\n''') == '1')\nassert(solution('''7\ntoy\ntry\n''') == '1')\nassert(solution('''7\ntoy\ntry\n''') == '1')\nassert(solution('''7\ntoy\ntry\n''') == '1')\nassert(solution('''7\ntoy\ntry\n''') == '1')\nassert(solution('''7\ntoy\ntry\n''') == '1')\nassert(solution('''7\ntoy\ntry\n''') == '1')\nassert(solution('''7\ntoy\ntry\n''') == '1')\nassert(solution('''7\ntoy\ntry\n''') == '1')\nassert(solution('''7\ntoy\ntry\n''') == '1')\nassert(solution('''7\n"
    },
    {
        "number": 376,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    strengths = list(map(int, stdin.readline().split()))\n    wires = [list(map(int, stdin.readline().split())) for _ in range(n - 1)]\n    strengths.sort()\n    wires.sort(key=lambda x: x[1])\n    print(wires)\n    print(strengths)\n    return ''"
    },
    {
        "number": 377,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    return str(max(0, n - m))"
    },
    {
        "number": 378,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, r = map(int, stdin.split())\n    return str(k // r)"
    },
    {
        "number": 379,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 380,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 381,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    if k < 1 or k > 100:\n        return \"NO\"\n    return \"YES\"\n\nassert(solution(\"1\") == \"YES\")\nassert(solution(\"2 1\") == \"YES\")\nassert(solution(\"1 2\") == \"NO\")\nassert(solution(\"2 1 2\") == \"NO\")\nassert(solution(\"1 2 1\") == \"NO\")\nassert(solution(\"1 1\") == \"NO\")\nassert(solution(\"1\") == \"NO\")\nassert(solution(\"100\") == \"NO\")\nassert(solution(\"101\") == \"NO\")\nassert(solution(\"1 1 1\") == \"NO\")\nassert(solution(\"1 1 1 1\") == \"NO\")\nassert(solution(\"1 1 1 1 1\") == \"NO\")\nassert(solution(\"1 1 1 1 1 1\") == \"NO\")\nassert(solution(\"1 1 1 1 1 1 1\") == \"NO\")\nassert(solution(\"1 1 1 1 1 1 1 1\") == \"NO\")\nassert(solution(\"1 1 1 1 1 1 1 1 1\") == \"NO\")\nassert(solution(\"1 1 1 1 1 1 1 1 1 1 1\") == \"NO\")\nassert(solution
    },
    {
        "number": 382,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, q = map(int, stdin.split())\n    s = stdin.strip()\n    t = stdin.strip()\n    for _ in range(q):\n        l, r = map(int, stdin.split())\n        print(s[l:r].count(t))\n    return \"\""
    },
    {
        "number": 383,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, d = [int(x) for x in stdin.split()]\n    return str(factorial(n) // (factorial(k) * factorial(n - k)))\n\ndef"
    },
    {
        "number": 384,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    row = stdin.readline().strip()\n    return str(solution_naive(n, row))\n\ndef"
    },
    {
        "number": 385,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, p = [int(x) for x in stdin.split()]\n    cbs = stdin[1:n+1]\n    operations = stdin[n+2:n+m+2]\n    cursor = p\n    result = ''\n    for operation in operations:\n        if operation == 'L':\n            cursor -= 1\n        elif operation == 'R':\n            cursor += 1\n        elif operation == 'D':\n            if cursor == 0:\n                cursor = len(cbs) - 1\n            cursor -= 1\n            cbs = cbs[:cursor] + cbs[cursor+1:]\n        else:\n            raise ValueError('Unknown operation')\n        result += cbs[cursor]\n    return result"
    },
    {
        "number": 386,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    answers = [stdin.readline().split() for _ in range(n)]\n    for i in range(n):\n        if answers[i][0] == '>=':\n            if int(answers[i][1]) < int(answers[i][2]):\n                answers[i] = '<'\n            else:\n                answers[i] = '>='\n        elif answers[i][0] == '<=':\n            if int(answers[i][1]) > int(answers[i][2]):\n                answers[i] = '>'\n            else:\n                answers[i] = '<='\n        elif answers[i][0] == '>':\n            if int(answers[i][1]) > int(answers[i][2]):\n                answers[i] = '<'\n            else:\n                answers[i] = '>='\n        elif answers[i][0] == '<':\n            if int(answers[i][1]) < int(answers[i][2]):\n                answers[i] = '>'\n            else:\n                answers[i] = '<='\n    for i in range(n):\n        if answers[i][0] == '>':\n            if int(answers[i][1]) > int(answers[i][2]):\n                answers[i] = '<'\n            else:\n                answers[i] = '>='\n        elif answers[i][0] == '<':\n            if int(answers[i][1]) < int(answers[i][2]):\n                answers[i] = '>'\n            else:\n                answers[i] = '<='\n    for i in range(n):\n        if answers[i][0] == '>=':\n            if int(answers[i][1]) < int(answers[i][2]):\n                answers[i] = '<'\n            else:\n                answers[i] = '>='\n        elif answers[i][0] == '<=':\n            if int(answers[i][1]) > int(answers[i][2]):\n                answers[i] = '>'\n            else:\n                answers[i] = '<='\n        elif answers[i][0] == '>':\n            if int(answers[i][1]) < int(answers[i][2]):\n                answers[i] = '<'\n            else:\n                answers[i] = '>='\n        elif answers[i][0] == '<':\n            if int(answers[i][1]) > int(answers[i][2]):\n                answers[i] = '>'\n            else:\n                answers[i] = '<='\n    for i in range(n):\n        if answers[i][0] == '>':\n            if int(answers[i][1]) < int(answers[i][2]):\n                answers[i] = '<'\n            else:\n                answers[i] = '>='\n        elif answers[i][0] == '<':\n            if int(answers[i][1]) > int(answers[i][2]):\n                answers[i] = '>'\n            else:\n                answers[i] = '<='\n    for i in range(n):\n        if answers[i][0] == '>=':\n            if int(answers[i][1]) > int(answers[i][2]):\n                answers[i] = '<'\n            else:\n                answers[i] = '>='\n        elif answers[i][0] == '<=':\n            if int(answers[i][1]) < int(answers[i][2]):\n                answers[i] = '>'\n            else:\n                answers[i] = '<='\n        elif answers[i][0] == '>':\n            if int(answers[i][1]) > int(answers[i][2]):\n                answers[i] = '<'\n            else:\n                answers[i] = '>='\n        elif answers[i][0] == '<':\n            if int(answers[i][1]) < int(answers[i][2]):\n                answers[i] = '>'\n            else:\n                answers[i] = '<='\n    for i in range(n):\n        if answers[i][0] == '>':\n            if int(answers[i][1]) > int(answers[i][2]):\n                answers[i] = '<'\n            else:\n                answers[i] = '>='\n        elif answers[i][0] == '<':\n            if int(answers[i][1]) < int(answers[i][2]):\n                answers[i] = '>'\n            else:\n                answers[i] = '<='\n    for i in range(n):\n        if answers[i][0] == '>=':\n            if int(answers[i][1]) < int(answers[i][2]):\n                answers[i] = '<'\n            else:\n                answers[i] = '>='\n        elif answers[i][0] == '<=':\n            if int(answers[i][1]) > int(answers[i][2]):\n                answers[i] = '>'\n            else:\n                answers[i] = '<='\n        elif answers[i][0] == '>':\n            if int(answers[i][1]) < int(answers[i][2]):\n                answers[i] = '<'\n            else:\n                answers[i] = '>='\n        elif answers[i][0] == '<':\n            if int(answers[i][1]) > int(answers[i][2]):\n                answers[i] = '>'\n"
    },
    {
        "number": 387,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    return str(a * b)"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    s = stdin.split()[1:]\n    for i in range(n - k + 1):\n        if s[i] == \"NO\" and s[i + 1] == \"NO\" and s[i + 2] == \"NO\":\n            print(\"NO\")\n            return\n    for i in range(n - k + 1):\n        if s[i] == \"YES\" and s[i + 1] == \"YES\" and s[i + 2] == \"YES\":\n            print(\"YES\")\n            return\n    print(\"NO\")\n    return"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    if a == b:\n        return 0\n    if a % 2 == 0 and b % 2 == 0:\n        return -1\n    if a % 2 == 0:\n        return (b - a) // 2\n    if b % 2 == 0:\n        return (a - b) // 2\n    if a % 3 == 0 and b % 3 == 0:\n        return -1\n    if a % 3 == 0:\n        return (b - a) // 3\n    if b % 3 == 0:\n        return (a - b) // 3\n    if a % 5 == 0 and b % 5 == 0:\n        return -1\n    if a % 5 == 0:\n        return (b - a) // 5\n    if b % 5 == 0:\n        return (a - b) // 5\n    return -1"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = [int(x) for x in stdin.split()]\n    c = [int(x) for x in stdin.split()]\n    if n == 1:\n        return str(a)\n    if n == 2:\n        return str(a + b)\n    if n == 3:\n        return str(a + b + c[0])\n    if n == 4:\n        return str(a + b + c[0] + c[1])\n    if n == 5:\n        return str(a + b + c[0] + c[1] + c[2])\n    if n == 6:\n        return str(a + b + c[0] + c[1] + c[2] + c[3])\n    if n == 7:\n        return str(a + b + c[0] + c[1] + c[2] + c[3] + c[4])\n    if n == 8:\n        return str(a + b + c[0] + c[1] + c[2] + c[3] + c[4] + c[5])\n    if n == 9:\n        return str(a + b + c[0] + c[1] + c[2] + c[3] + c[4] + c[5] + c[6])\n    if n == 10:\n        return str(a + b + c[0] + c[1] + c[2] + c[3] + c[4] + c[5] + c[6] + c[7])\n    if n == 11:\n        return str(a + b + c[0] + c[1] + c[2] + c[3] + c[4] + c[5] + c[6] + c[7] + c[8])\n    if n == 12:\n        return str(a + b + c[0] + c[1] + c[2] + c[3] + c[4] + c[5] + c[6] + c[7] + c[8] + c[9])\n    if n == 13:\n        return str(a + b + c[0] + c[1] + c[2] + c[3] + c[4] + c[5] + c[6] + c[7] + c[8] + c[9] + c[10])\n    if n == 14:\n        return str(a + b + c[0] + c[1] + c[2] + c[3] + c[4] + c[5] + c[6] + c[7] + c[8] + c[9] + c[10] + c[11])\n    if n == 15:\n        return str(a + b + c[0] + c[1] + c[2] + c[3] + c[4] + c[5] + c[6] + c[7] + c[8] + c[9] + c[10] + c[11] + c[12])\n    if n == 16:\n        return str(a + b + c[0] + c[1] + c[2] + c[3] + c[4] + c[5] + c[6] + c[7] + c[8] + c[9] + c[10] + c[11] + c[12] + c[13])\n    if n == 17:\n        return str(a + b + c[0] + c[1] + c[2] + c[3] + c[4] + c[5] + c[6] + c[7] + c[8] + c[9] + c[10] + c[11] + c[12] + c[13] + c[14])\n    if n == 18:\n        return str(a + b + c[0] + c[1] + c[2] + c[3] + c[4] + c[5] + c[6] + c[7] + c[8] + c[9] + c[10] + c[11] + c[12] + c[13] + c[14] + c[15])\n    if n == 19:\n        return str(a + b + c[0] + c[1] + c[2] + c[3] + c[4] + c[5] + c[6] + c[7] + c[8] + c[9] + c[10] + c[11] + c[12] + c[13] + c[14] + c[15] + c[16])\n    if n == 20:\n        return str(a + b + c[0] + c[1] + c[2] + c[3] + c[4] + c[5] + c[6] + c[7] + c[8] + c[9] + c[10] + c[11] + c[12] + c[13] + c[14] + c[15] + c[16] + c[17])\n    return -1\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    if k < 1 or k > 100:\n        return -1\n    return '\\n'.join([''.join(['w' if i + j + k // 2 < k else 'b' for j in range(k)]) for i in range(k)])"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    divisors = [1]\n    for i in range(2, n):\n        if n % i == 0:\n            divisors.append(i)\n    divisors.sort()\n    divisors.reverse()\n    for i in divisors:\n        if i * i > n:\n            return i\n    return n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    seating = stdin.readline().strip()\n    if n == 1:\n        return \"Yes\"\n    if n == 2:\n        if seating[0] == seating[1]:\n            return \"Yes\"\n        else:\n            return \"No\"\n    if n == 3:\n        if seating[0] == seating[1] and seating[1] == seating[2]:\n            return \"Yes\"\n        else:\n            return \"No\"\n    if n == 4:\n        if seating[0] == seating[1] and seating[1] == seating[2] and seating[2] == seating[3]:\n            return \"Yes\"\n        else:\n            return \"No\"\n    if n == 5:\n        if seating[0] == seating[1] and seating[1] == seating[2] and seating[2] == seating[3] and seating[3] == seating[4]:\n            return \"Yes\"\n        else:\n            return \"No\"\n    if n == 6:\n        if seating[0] == seating[1] and seating[1] == seating[2] and seating[2] == seating[3] and seating[3] == seating[4] and seating[4] == seating[5]:\n            return \"Yes\"\n        else:\n            return \"No\"\n    if n == 7:\n        if seating[0] == seating[1] and seating[1] == seating[2] and seating[2] == seating[3] and seating[3] == seating[4] and seating[4] == seating[5] and seating[5] == seating[6]:\n            return \"Yes\"\n        else:\n            return \"No\"\n    if n == 8:\n        if seating[0] == seating[1] and seating[1] == seating[2] and seating[2] == seating[3] and seating[3] == seating[4] and seating[4] == seating[5] and seating[5] == seating[6] and seating[6] == seating[7]:\n            return \"Yes\"\n        else:\n            return \"No\"\n    if n == 9:\n        if seating[0] == seating[1] and seating[1] == seating[2] and seating[2] == seating[3] and seating[3] == seating[4] and seating[4] == seating[5] and seating[5] == seating[6] and seating[6] == seating[7] and seating[7] == seating[8]:\n            return \"Yes\"\n        else:\n            return \"No\"\n    if n == 10:\n        if seating[0] == seating[1] and seating[1] == seating[2] and seating[2] == seating[3] and seating[3] == seating[4] and seating[4] == seating[5] and seating[5] == seating[6] and seating[6] == seating[7] and seating[7] == seating[8] and seating[8] == seating[9]:\n            return \"Yes\"\n        else:\n            return \"No\"\n    if n == 11:\n        if seating[0] == seating[1] and seating[1] == seating[2] and seating[2] == seating[3] and seating[3] == seating[4] and seating[4] == seating[5] and seating[5] == seating[6] and seating[6] == seating[7] and seating[7] == seating[8] and seating[8] == seating[9] and seating[9] == seating[10]:\n            return \"Yes\"\n        else:\n            return \"No\"\n    if n == 12:\n        if seating[0] == seating[1] and seating[1] == seating[2] and seating[2] == seating[3] and seating[3] == seating[4] and seating[4] == seating[5] and seating[5] == seating[6] and seating[6] == seating[7] and seating[7] == seating[8] and seating[8] == seating[9] and seating[9] == seating[10] and seating[10] == seating[11]:\n            return \"Yes\"\n        else:\n            return \"No\"\n    if n == 13:\n        if seating[0] == seating[1] and seating[1] == seating[2] and seating[2] == seating[3] and seating[3] == seating[4] and seating[4] == seating[5] and seating[5] == seating[6] and seating[6] == seating[7] and seating[7] == seating[8] and seating[8] == seating[9] and seating[9] == seating[10] and seating[10] == seating[11] and seating[11] == seating[12]:\n            return \"Yes\"\n        else:\n            return \"No\"\n    if n == 14:\n        if seating[0] == seating[1] and seating[1] == seating[2] and seating[2] == seating[3] and seating[3] == seating[4] and seating[4] == seating[5] and seating[5] == seating[6] and seating[6] == seating[7] and seating[7] == seating[8] and seating[8] == seating[9] and seating[9] == seating[10] and seating[10] == seating[11] and seating[11] == seating[12] and seating[12] == seating[13]:\n            return \"Yes\"\n        else:\n            return \"No\"\n    if n == 15:\n        if seating[0] == seating[1] and seating[1] == seating[2] and seating[2] == seating[3] and seating[3] == seating[4] and seating[4] == seating[5] and seating[5] == seating[6] and seating[6] == seating[7] and seating[7] == seating[8] and seating[8] == seating[9] and seating[9] == seating[10] and seating[10] == seating[11] and seating[11] == seating[12] and seating[12] == seating[13] and seating[13] == seating[14]:\n            return \"Yes\"\n        else:\n            return \"No\"\n    if n == 16:\n        if seating[0] == seating[1] and seating[1] == seating[2] and seating[2] == seating[3] and seating[3] == seating[4] and seating[4] == seating[5] and seating[5] == seating[6] and seating[6] == seating[7] and seating[7] == seating[8] and seating[8] == seating[9] and seating[9] == seating[10] and seating[10] == seating[11] and seating[11] == seating[12] and seating[12] == seating[13] and seating[13] == seating[14] and seating[14] == seating[15]:\n            return \"Yes\"\n        else:\n            return \"No\"\n    if n == 17:\n        if seating[0] == seating[1] and seating[1] == seating[2] and seating[2] == seating[3] and seating[3] == seating[4] and seating[4] == seating[5] and seating[5] == seating[6] and seating[6] == seating[7] and seating[7] == seating[8] and seating[8"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    k = 1\n    while k <= n:\n        if a[0] == 0:\n            a.pop(0)\n        else:\n            a[0] = a[0] - a[k % n]\n            a.pop(k % n)\n        k += 1\n    return str(k) + '\\n' +''.join(map(str, a))"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l, r = map(int, stdin.split())\n    return str(len(set(i for i in range(l, r + 1) if i % 2 == 0 and i % 3 == 0)))"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    if k == 0:\n        return str(0)\n    if n == 0:\n        return str(1)\n    if n == 1:\n        return str(k)\n    if k == 1:\n        return str(n)\n    if n == 2:\n        return str(k)\n    if k == 2:\n        return str(n)\n    if n == 3:\n        return str(k)\n    if k == 3:\n        return str(n)\n    if n == 4:\n        return str(k)\n    if k == 4:\n        return str(n)\n    if n == 5:\n        return str(k)\n    if k == 5:\n        return str(n)\n    if n == 6:\n        return str(k)\n    if k == 6:\n        return str(n)\n    if n == 7:\n        return str(k)\n    if k == 7:\n        return str(n)\n    if n == 8:\n        return str(k)\n    if k == 8:\n        return str(n)\n    if n == 9:\n        return str(k)\n    if k == 9:\n        return str(n)\n    if n == 10:\n        return str(k)\n    if k == 10:\n        return str(n)\n    if n == 11:\n        return str(k)\n    if k == 11:\n        return str(n)\n    if n == 12:\n        return str(k)\n    if k == 12:\n        return str(n)\n    if n == 13:\n        return str(k)\n    if k == 13:\n        return str(n)\n    if n == 14:\n        return str(k)\n    if k == 14:\n        return str(n)\n    if n == 15:\n        return str(k)\n    if k == 15:\n        return str(n)\n    if n == 16:\n        return str(k)\n    if k == 16:\n        return str(n)\n    if n == 17:\n        return str(k)\n    if k == 17:\n        return str(n)\n    if n == 18:\n        return str(k)\n    if k == 18:\n        return str(n)\n    if n == 19:\n        return str(k)\n    if k == 19:\n        return str(n)\n    if n == 20:\n        return str(k)\n    if k == 20:\n        return str(n)\n    if n == 21:\n        return str(k)\n    if k == 21:\n        return str(n)\n    if n == 22:\n        return str(k)\n    if k == 22:\n        return str(n)\n    if n == 23:\n        return str(k)\n    if k == 23:\n        return str(n)\n    if n == 24:\n        return str(k)\n    if k == 24:\n        return str(n)\n    if n == 25:\n        return str(k)\n    if k == 25:\n        return str(n)\n    if n == 26:\n        return str(k)\n    if k == 26:\n        return str(n)\n    if n == 27:\n        return str(k)\n    if k == 27:\n        return str(n)\n    if n == 28:\n        return str(k)\n    if k == 28:\n        return str(n)\n    if n == 29:\n        return str(k)\n    if k == 29:\n        return str(n)\n    if n == 30:\n        return str(k)\n    if k == 30:\n        return str(n)\n    if n == 31:\n        return str(k)\n    if k == 31:\n        return str(n)\n    if n == 32:\n        return str(k)\n    if k == 32:\n        return str(n)\n    if n == 33:\n        return str(k)\n    if k == 33:\n        return str(n)\n    if n == 34:\n        return str(k)\n    if k == 34:\n        return str(n)\n    if n == 35:\n        return str(k)\n    if k == 35:\n        return str(n)\n    if n == 36:\n        return str(k)\n    if k == 36:\n        return str(n)\n    if n == 37:\n        return str(k)\n    if k == 37:\n        return str(n)\n    if n == 38:\n        return str(k)\n    if k == 38:\n        return str(n)\n    if n == 39:\n        return str(k)\n    if k == 39:\n        return str(n)\n    if n == 40:\n        return str(k)\n    if k == 40:\n        return str(n)\n    if n == 41:\n        return str(k)\n    if k == 41:\n        return str(n)\n    if n == 42:\n        return str(k)\n    if k == 42:\n        return str(n)\n    if n == 43:\n        return str(k)\n    if k == 43:\n        return str(n)\n    if n == 44:\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    if a[0] + a[1] > a[2]:\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = [int(x) for x in stdin.split()]\n    return \"Yes\" if x <= y and x % 2 == 0 else \"No\""
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a.reverse()\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i] for i in range(n)]\n    a = [a[i"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()[1:n+1]]\n    b = [int(x) for x in stdin.split()[n+1:]]\n    a.sort()\n    b.sort()\n    for i in range(n):\n        if a[i]!= b[i]:\n            return str(a[i])\n    return str(a[-1] + 1)"
    },
    {
        "number": 402,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    return str(n - (k - 5) // 5)"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    b = int(stdin)\n    return str(b - 1)"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    bumpers = stdin.readline().strip()\n    bumpers_count = 0\n    for i in range(n):\n        if i == 0:\n            if bumpers[i] == '>':\n                bumpers_count += 1\n        elif i == n - 1:\n            if bumpers[i] == '<':\n                bumpers_count += 1\n        else:\n            if bumpers[i] == '>':\n                if bumpers[i - 1] == '<':\n                    bumpers_count += 1\n            if bumpers[i] == '<':\n                if bumpers[i + 1] == '>':\n                    bumpers_count += 1\n    return str(bumpers_count)"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    l = list(map(int, stdin.readline().strip().split()))\n    l.sort()\n    l.reverse()\n    s = 0\n    for i in range(n):\n        s += l[i] * (l[i] - 1) // 2\n    return str(s)"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = [stdin[i:i+6] for i in range(0, len(stdin), 6)]\n    return str(sum(int(s[i][j]) for i in range(n) for j in range(6)))\n\nassert(solution('') == '')\nassert(solution('ab') == '47')\nassert(solution('abcd') == '136542')\nassert(solution('abcdef') == '136542')\nassert(solution('aa') == '44')\nassert(solution('aaabbbcccddd') == '44')\nassert(solution('aaabbbcccddd') == '44')\nassert(solution('aaabbbcccddd') == '44')\nassert(solution('aaabbbcccddd') == '44')\nassert(solution('aaabbbcccddd') == '44')\nassert(solution('aaabbbcccddd') == '44')\nassert(solution('aaabbbcccddd') == '44')\nassert(solution('aaabbbcccddd') == '44')\nassert(solution('aaabbbcccddd') == '44')\nassert(solution('aaabbbcccddd') == '44')\nassert(solution('aaabbbcccddd') == '44')\nassert(solution('aaabbbcccddd') == '44')\nassert(solution('aaabbbcccddd') == '44')\nassert(solution('aaabbbcccddd') == '44')\nassert(solution('aaabbbcccddd') == '44')\nassert(solution('aaabbbcccddd') == '44')\nassert(solution('aaabbbcccddd') == '44')\nassert(solution('aaabbbcccddd') == '44')\nassert(solution('aaabbbcccddd') == '44')\nassert(solution('aaabbbcccddd') == '44')\nassert(solution('aaabbbcccddd') == '44')\nassert(solution('aaabbbcccddd') == '44')\nassert(solution('aaabbbcccddd') == '44')\nassert(solution('aaabbbcccddd') == '44')\nassert(solution('aaabbbcccddd') == '44')\nassert(solution('aaabbbcccddd') == '44')\nassert(solution('aaabbbcccddd') == '44')\nassert(solution('aaabbbcccddd') == '44')\nassert(solution('aaabbbcccddd') == '44')\nassert(solution('aaabbbcccddd') == '44')\nassert(solution('aaabbbcccddd') == '44')\nassert(solution('aaabbbcccddd') == '44')\nassert(solution('aaabbbcccddd') == '44')\nassert(solution('aaabbbcccddd') == '44')\nassert(solution('aaabbbcccddd') == '44')\nassert(solution('aaabbbcccddd') == '44')\nassert(solution('aaabbbcccddd') == '44')\nassert(solution('aaabbbcccddd') == '44')\nassert(solution('aaabbbcccddd') == '44')\nassert(solution('aaabbbcccddd') == '44')\nassert(solution('aaabbbcccddd') == '44')\nassert(solution('aaabbbcccddd') == '44')\nassert(solution('aaabbbcccddd') == '44')\nassert(solution('aaabbbcccddd') == '44')\nassert(solution('aaabbbcccddd') == '44')\nassert(solution('aaabbbcccddd') == '44')\nassert(solution('aaabbbcccddd') == '44')\nassert(solution('aaabbbcccddd') == '44')\nassert(solution('aaabbbcccddd') == '44')\nassert(solution('aaabbbcccddd') == '44')\nassert(solution('aaabbbcccddd') == '44')\nassert(solution('aaabbbcccddd') == '44')\nassert(solution('aaabbbcccddd') == '44')\nassert(solution('aaabbbcccddd') == '44')\nassert(solution('aaabbbcccddd') == '44')\nassert(solution('aaabbbcccddd') == '44')\nassert(solution('aaabbbcccddd') == '44')\nassert(solution('aaabbbcccddd') == '44')\nassert(solution('aaabbbcccddd') == '44')\nassert(solution('aaabbbcccddd') == '44')\nassert(solution('aaabbbcccddd') == '44')\nassert(solution('aaabbbcccddd') == '44')\nassert(solution('aaabbbcccddd') == '44')\nassert(solution('aaabbbcccddd') == '44')\nassert(solution('aaabbbcccddd') == '44')\nassert(solution('aaabbbcccddd') == '44')\nassert(solution('aaabbbcccddd') == '44')\nassert(solution('aaabbbcccddd') == '44')\nassert(solution('aaabbbcccddd') == '44')\nassert(solution('aaabbbcccddd') == '44')\nassert(solution('aaabbbcccddd') == '44')\nassert(solution('aaabbbcccddd') == '44')\nassert(solution('aaabbbcccddd') == '44')\nassert(solution('aaabbbcccddd') == '44')\nassert(solution('aaabbbcccddd') == '44')\nassert(solution('aaabbbcccddd') == '44"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    return str(int(n / 2) + int(m / 2))"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if len(s) < 2:\n        return \"NO\"\n    if s[0] == s[1]:\n        return \"NO\"\n    if s[-1] == s[-2]:\n        return \"NO\"\n    return \"YES\""
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    weights = list(map(int, stdin.readline().split()))\n    k = int(stdin.readline())\n    weights_after_joke = list(map(int, stdin.readline().split()))\n    \n    queue = [i for i in range(1, n + 1)]\n    \n    for i in range(k):\n        if weights_after_joke[i] > weights[i]:\n            queue.append(queue.pop(0))\n        else:\n            queue.insert(0, queue.pop())\n    \n    if queue == weights:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, B = [int(x) for x in stdin.split()]\n    bases = [tuple(int(x) for x in stdin.split()) for _ in range(B)]\n    spaceships = [tuple(int(x) for x in stdin.split()) for _ in range(R)]\n    bases = sorted(bases, key=lambda x: x[1])\n    spaceships = sorted(spaceships, key=lambda x: x[1])\n    for i in range(B):\n        if bases[i][1] > spaceships[i][1]:\n            return \"No\"\n    return \"Yes\""
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    if m == 0:\n        return '0'\n    if m == 1:\n        return str(n)\n    if m == n:\n        return '1'\n    if m > n:\n        return '0'\n    if m < n:\n        return str(m - n)"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    segments = [tuple(map(int, line.split())) for line in stdin.readlines()]\n    segments.sort(key=lambda x: x[0])\n    graph = [[] for _ in range(n)]\n    for i in range(n):\n        for j in range(i + 1, n):\n            if segments[i][1] > segments[j][0]:\n                graph[i].append(j)\n                graph[j].append(i)\n    visited = [False] * n\n    def dfs(u: int) -> bool:\n        visited[u] = True\n        for v in graph[u]:\n            if not visited[v]:\n                if dfs(v):\n                    return True\n            elif visited[v] and u!= v:\n                return True\n        return False\n    return \"YES\" if dfs(0) else \"NO\""
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    r = list(map(int, stdin.readline().split()))\n    r.sort()\n    r.append(n)\n    r.insert(0, 0)\n    r_len = len(r)\n    max_len = 0\n    for i in range(1, r_len):\n        if r[i] - r[i - 1] > 100 * r[i - 1]:\n            max_len = max(max_len, r[i] - r[i - 1])\n    return str(max_len)"
    },
    {
        "number": 416,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    series = stdin.strip()\n    series = [series[i:i+2] for i in range(0, len(series), 2)]\n    series = [x for x in series if x!= \"?\"]\n    series = [int(x) for x in series]\n    series.sort()\n    series = [series[i] for i in range(len(series)) if i % 2 == 0]\n    series = [series[i] for i in range(len(series)) if i % 2!= 0]\n    series = [series[i] for i in range(len(series)) if i % 2 == 0]\n    series = [series[i] for i in range(len(series)) if i % 2!= 0]\n    series = [series[i] for i in range(len(series)) if i % 2 == 0]\n    series = [series[i] for i in range(len(series)) if i % 2!= 0]\n    series = [series[i] for i in range(len(series)) if i % 2 == 0]\n    series = [series[i] for i in range(len(series)) if i % 2!= 0]\n    series = [series[i] for i in range(len(series)) if i % 2 == 0]\n    series = [series[i] for i in range(len(series)) if i % 2!= 0]\n    series = [series[i] for i in range(len(series)) if i % 2 == 0]\n    series = [series[i] for i in range(len(series)) if i % 2!= 0]\n    series = [series[i] for i in range(len(series)) if i % 2 == 0]\n    series = [series[i] for i in range(len(series)) if i % 2!= 0]\n    series = [series[i] for i in range(len(series)) if i % 2 == 0]\n    series = [series[i] for i in range(len(series)) if i % 2!= 0]\n    series = [series[i] for i in range(len(series)) if i % 2 == 0]\n    series = [series[i] for i in range(len(series)) if i % 2!= 0]\n    series = [series[i] for i in range(len(series)) if i % 2 == 0]\n    series = [series[i] for i in range(len(series)) if i % 2!= 0]\n    series = [series[i] for i in range(len(series)) if i % 2 == 0]\n    series = [series[i] for i in range(len(series)) if i % 2!= 0]\n    series = [series[i] for i in range(len(series)) if i % 2 == 0]\n    series = [series[i] for i in range(len(series)) if i % 2!= 0]\n    series = [series[i] for i in range(len(series)) if i % 2 == 0]\n    series = [series[i] for i in range(len(series)) if i % 2!= 0]\n    series = [series[i] for i in range(len(series)) if i % 2 == 0]\n    series = [series[i] for i in range(len(series)) if i % 2!= 0]\n    series = [series[i] for i in range(len(series)) if i % 2 == 0]\n    series = [series[i] for i in range(len(series)) if i % 2!= 0]\n    series = [series[i] for i in range(len(series)) if i % 2 == 0]\n    series = [series[i] for i in range(len(series)) if i % 2!= 0]\n    series = [series[i] for i in range(len(series)) if i % 2 == 0]\n    series = [series[i] for i in range(len(series)) if i % 2!= 0]\n    series = [series[i] for i in range(len(series)) if i % 2 == 0]\n    series = [series[i] for i in range(len(series)) if i % 2!= 0]\n    series = [series[i] for i in range(len(series)) if i % 2 == 0]\n    series = [series[i] for i in range(len(series)) if i % 2!= 0]\n    series = [series[i] for i in range(len(series)) if i % 2 == 0]\n    series = [series[i] for i in range(len(series)) if i % 2!= 0]\n    series = [series[i] for i in range(len(series)) if i % 2 == 0]\n    series = [series[i] for i in range(len(series)) if i % 2!= 0]\n    series = [series[i] for i in range(len(series)) if i % 2 == 0]\n    series = [series[i] for i in range(len(series)) if i % 2!= 0]\n    series = [series[i] for i in range(len(series)) if i % 2 == 0]\n    series = [series[i] for i in range(len(series)) if i % 2!= 0]\n    series = [series[i] for i in range(len(series)) if i % 2 == 0]\n    series = [series[i] for i in range(len(series)) if i % 2!= 0]\n    series = [series[i] for i in range(len(series)) if i % 2 == 0]\n    series = [series[i] for i in range(len(series)) if i % 2!= 0]\n    series = [series[i] for i in range(len(series)) if i % 2 == 0]\n    series = [series[i] for i in range(len(series)) if i % 2!= 0]\n    series = [series[i] for i in range(len(series)) if i % 2 == 0]\n    series = [series[i] for i in range(len(series)) if i % 2!= 0]\n    series = [series[i] for i in range(len(series)) if i % 2 == 0]\n    series = [series[i] for i in range(len(series)) if i % 2!= 0]\n    series = [series[i] for i in range(len(series)) if i % 2 == 0]\n    series = [series[i] for i in range(len(series)) if i % 2!= 0]\n    series = [series[i] for i in range(len(series)) if i % 2 == 0]\n    series = [series[i] for i in range(len(series)) if i % 2!= 0"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    return str(sum(range(1, n + 1)) - sum(range(1, d + 1)) + sum(range(1, n + 1 - d)))"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_02(stdin))\n\ndef"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [list(map(int, stdin.split())) for _ in range(n)]\n    b = [[0] * m for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            b[i][j] = a[n - 1 - i][j]\n    return str(n)"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    orders = [tuple(map(int, stdin.readline().split())) for _ in range(n)]\n    orders.sort(key=lambda x: x[1])\n    max_orders = 0\n    current_orders = 0\n    for start, finish in orders:\n        if start >= finish:\n            continue\n        if start > finish:\n            current_orders -= 1\n        current_orders += 1\n        max_orders = max(max_orders, current_orders)\n    return str(max_orders)"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    tables = list(map(int, stdin.split()))\n    formulas = list(map(int, stdin.split()))\n    \n    if n == 1:\n        return \"YES\"\n    \n    if n == 2:\n        if k == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    \n    if n == 3:\n        if k == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    \n    if n == 4:\n        if k == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    \n    if n == 5:\n        if k == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    \n    if n == 6:\n        if k == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    \n    if n == 7:\n        if k == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    \n    if n == 8:\n        if k == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    \n    if n == 9:\n        if k == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    \n    if n == 10:\n        if k == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    \n    if n == 11:\n        if k == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    \n    if n == 12:\n        if k == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    \n    if n == 13:\n        if k == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    \n    if n == 14:\n        if k == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    \n    if n == 15:\n        if k == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    \n    if n == 16:\n        if k == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    \n    if n == 17:\n        if k == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    \n    if n == 18:\n        if k == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    \n    if n == 19:\n        if k == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    \n    if n == 20:\n        if k == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    \n    if n == 21:\n        if k == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    \n    if n == 22:\n        if k == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    \n    if n == 23:\n        if k == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    \n    if n == 24:\n        if k == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    \n    if n == 25:\n        if k == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    \n    if n == 26:\n        if k == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    \n    if n == 27:\n        if k == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    \n    if n == 28:\n        if k == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    \n    if n == 29:\n        if k == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    \n    if n == 30:\n        if k == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    \n    if n == 31:\n        if k == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    \n    if n == 32:\n        if k == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    \n    if n == 33:\n        if k == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    \n    if n == 34:\n        if k == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    \n    if n == 35:\n        if k == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    \n    if n == 36:\n        if k == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    \n    if n == 37:\n        if k == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    \n    if n == 38:\n        if k == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    \n    if n == 39:\n        if k == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    \n    if n == 40:\n        if k == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    \n    if n == 41:\n        if k == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n"
    },
    {
        "number": 423,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append("
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) - 1)"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    if n == 0:\n        return '-1'\n    if p == 0:\n        return str(n)\n    if n == 1:\n        return str(p)\n    if p == -1:\n        return str(n)\n    if n == -1:\n        return str(p)\n    if n == 2:\n        return str(p)\n    if n == 3:\n        return str(p)\n    if n == 4:\n        return str(p)\n    if n == 5:\n        return str(p)\n    if n == 6:\n        return str(p)\n    if n == 7:\n        return str(p)\n    if n == 8:\n        return str(p)\n    if n == 9:\n        return str(p)\n    if n == 10:\n        return str(p)\n    if n == 11:\n        return str(p)\n    if n == 12:\n        return str(p)\n    if n == 13:\n        return str(p)\n    if n == 14:\n        return str(p)\n    if n == 15:\n        return str(p)\n    if n == 16:\n        return str(p)\n    if n == 17:\n        return str(p)\n    if n == 18:\n        return str(p)\n    if n == 19:\n        return str(p)\n    if n == 20:\n        return str(p)\n    if n == 21:\n        return str(p)\n    if n == 22:\n        return str(p)\n    if n == 23:\n        return str(p)\n    if n == 24:\n        return str(p)\n    if n == 25:\n        return str(p)\n    if n == 26:\n        return str(p)\n    if n == 27:\n        return str(p)\n    if n == 28:\n        return str(p)\n    if n == 29:\n        return str(p)\n    if n == 30:\n        return str(p)\n    if n == 31:\n        return str(p)\n    if n == 32:\n        return str(p)\n    if n == 33:\n        return str(p)\n    if n == 34:\n        return str(p)\n    if n == 35:\n        return str(p)\n    if n == 36:\n        return str(p)\n    if n == 37:\n        return str(p)\n    if n == 38:\n        return str(p)\n    if n == 39:\n        return str(p)\n    if n == 40:\n        return str(p)\n    if n == 41:\n        return str(p)\n    if n == 42:\n        return str(p)\n    if n == 43:\n        return str(p)\n    if n == 44:\n        return str(p)\n    if n == 45:\n        return str(p)\n    if n == 46:\n        return str(p)\n    if n == 47:\n        return str(p)\n    if n == 48:\n        return str(p)\n    if n == 49:\n        return str(p)\n    if n == 50:\n        return str(p)\n    if n == 51:\n        return str(p)\n    if n == 52:\n        return str(p)\n    if n == 53:\n        return str(p)\n    if n == 54:\n        return str(p)\n    if n == 55:\n        return str(p)\n    if n == 56:\n        return str(p)\n    if n == 57:\n        return str(p)\n    if n == 58:\n        return str(p)\n    if n == 59:\n        return str(p)\n    if n == 60:\n        return str(p)\n    if n == 61:\n        return str(p)\n    if n == 62:\n        return str(p)\n    if n == 63:\n        return str(p)\n    if n == 64:\n        return str(p)\n    if n == 65:\n        return str(p)\n    if n == 66:\n        return str(p)\n    if n == 67:\n        return str(p)\n    if n == 68:\n        return str(p)\n    if n == 69:\n        return str(p)\n    if n == 70:\n        return str(p)\n    if n == 71:\n        return str(p)\n    if n == 72:\n        return str(p)\n    if n == 73:\n        return str(p)\n    if n == 74:\n        return str(p)\n    if n == 75:\n        return str(p)\n    if n == 76:\n        return str(p)\n    if n == 77:\n        return str(p)\n    if n == 78:\n        return str(p)\n    if n == 79:\n        return str(p)\n    if n == 80:\n        return str(p)\n    if n == 81:\n        return str(p)\n    if n == 82:\n        return str(p)\n    if n == 83:\n        return str(p)\n    if n == 84:\n        return str(p)\n    if n == 85:\n        return str(p)\n    if n == 86:\n        return str(p)\n    if n == 87:\n        return str(p)\n    if n == 88:\n        return str(p)\n    if n == 89:\n        return str(p)\n    if n == 90:\n        return str(p)\n    if n == 91:\n        return str(p)\n    if n == 92:\n        return str(p)\n    if n == 93:\n        return str(p"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.strip()\n    if n == 1:\n        return s\n    if k == 0:\n        return '0'\n    if k == n:\n        return s\n    if s[0] == '0':\n        return s\n    if s[0] == '0' and s[1]!= '0':\n        return s[1:]\n    if s[0]!= '0':\n        return s[1:]\n    if s[0] == '0' and s[1] == '0':\n        return s[2:]\n    return s\n\nassert(solution('') == '')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert(solution('0') == '0')\nassert"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    cnt_1, cnt_2, x, y = [int(x) for x in stdin.split()]\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n    \n    # 1. find all primes\n    # 2. find all divisors\n    # 3. find all divisors of x\n    # 4. find all divisors of y\n    # 5. find all divisors of x and y\n    # 6. find all divisors of x and y and x and y\n    # 7. find all divisors of x and y and x and y and x and y\n    # 8. find all divisors of x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and x and y and"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, sx, sy, dx, dy, t = [int(x) for x in stdin.split()]\n    x, y = sx, sy\n    dx, dy = dx - 1, dy - 1\n    x, y = (x + dx - 1) % n + 1, (y + dy - 1) % n + 1\n    x, y = x - 1, y - 1\n    x, y = (x + dx - 1) % n + 1, (y + dy - 1) % n + 1\n    x, y = x - 1, y - 1\n    x, y = (x + dx - 1) % n + 1, (y + dy - 1) % n + 1\n    x, y = x - 1, y - 1\n    x, y = (x + dx - 1) % n + 1, (y + dy - 1) % n + 1\n    x, y = x - 1, y - 1\n    x, y = (x + dx - 1) % n + 1, (y + dy - 1) % n + 1\n    x, y = x - 1, y - 1\n    x, y = (x + dx - 1) % n + 1, (y + dy - 1) % n + 1\n    x, y = x - 1, y - 1\n    x, y = (x + dx - 1) % n + 1, (y + dy - 1) % n + 1\n    x, y = x - 1, y - 1\n    x, y = (x + dx - 1) % n + 1, (y + dy - 1) % n + 1\n    x, y = x - 1, y - 1\n    x, y = (x + dx - 1) % n + 1, (y + dy - 1) % n + 1\n    x, y = x - 1, y - 1\n    x, y = (x + dx - 1) % n + 1, (y + dy - 1) % n + 1\n    x, y = x - 1, y - 1\n    x, y = (x + dx - 1) % n + 1, (y + dy - 1) % n + 1\n    x, y = x - 1, y - 1\n    x, y = (x + dx - 1) % n + 1, (y + dy - 1) % n + 1\n    x, y = x - 1, y - 1\n    x, y = (x + dx - 1) % n + 1, (y + dy - 1) % n + 1\n    x, y = x - 1, y - 1\n    x, y = (x + dx - 1) % n + 1, (y + dy - 1) % n + 1\n    x, y = x - 1, y - 1\n    x, y = (x + dx - 1) % n + 1, (y + dy - 1) % n + 1\n    x, y = x - 1, y - 1\n    x, y = (x + dx - 1) % n + 1, (y + dy - 1) % n + 1\n    x, y = x - 1, y - 1\n    x, y = (x + dx - 1) % n + 1, (y + dy - 1) % n + 1\n    x, y = x - 1, y - 1\n    x, y = (x + dx - 1) % n + 1, (y + dy - 1) % n + 1\n    x, y = x - 1, y - 1\n    x, y = (x + dx - 1) % n + 1, (y + dy - 1) % n + 1\n    x, y = x - 1, y - 1\n    x, y = (x + dx - 1) % n + 1, (y + dy - 1) % n + 1\n    x, y = x - 1, y - 1\n    x, y = (x + dx - 1) % n + 1, (y + dy - 1) % n + 1\n    x, y = x - 1, y - 1\n    x, y = (x + dx - 1) % n + 1, (y + dy - 1) % n + 1\n    x, y = x - 1, y - 1\n    x, y = (x + dx - 1) % n + 1, (y + dy - 1) % n + 1\n    x, y = x - 1, y - 1\n    x, y = (x + dx - 1) % n + 1, (y + dy - 1) % n + 1\n    x, y = x - 1, y - 1\n    x, y = (x + dx - 1) % n + 1, (y + dy - 1) % n + 1\n    x, y = x - 1, y - 1\n    x, y = (x + dx - 1) % n + 1, (y + dy - 1) % n + 1\n    x, y = x - 1, y - 1\n    x, y = (x + dx - 1) % n + 1, (y + dy - 1) % n + 1\n    x, y = x - 1, y - 1\n    x, y = (x + dx - 1) % n + 1, (y + dy - 1) % n + 1\n    x, y = x - 1, y - 1\n    x, y = (x + dx - 1) % n + 1, (y + dy - 1) % n + 1\n    x, y = x - 1, y - 1\n    x, y = (x + dx - 1) % n + 1, (y + dy - 1) % n + 1\n    x, y = x - 1, y - 1\n    x, y = (x + dx - 1"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    weights = [int(x) for x in stdin.split()]\n    if sum(weights) % 2!= 0:\n        return \"NO\"\n    return \"YES\""
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    floor = [list(map(int, stdin.split())) for _ in range(n)]\n    for i in range(n):\n        for j in range(m + 2):\n            if floor[i][j] == 1:\n                floor[i][j] = 0\n            else:\n                floor[i][j] = 1\n    for i in range(n):\n        for j in range(m + 2):\n            if floor[i][j] == 1:\n                floor[i][j] = 0\n            else:\n                floor[i][j] = 1\n    for i in range(n):\n        for j in range(m + 2):\n            if floor[i][j] == 1:\n                floor[i][j] = 0\n            else:\n                floor[i][j] = 1\n    for i in range(n):\n        for j in range(m + 2):\n            if floor[i][j] == 1:\n                floor[i][j] = 0\n            else:\n                floor[i][j] = 1\n    for i in range(n):\n        for j in range(m + 2):\n            if floor[i][j] == 1:\n                floor[i][j] = 0\n            else:\n                floor[i][j] = 1\n    for i in range(n):\n        for j in range(m + 2):\n            if floor[i][j] == 1:\n                floor[i][j] = 0\n            else:\n                floor[i][j] = 1\n    for i in range(n):\n        for j in range(m + 2):\n            if floor[i][j] == 1:\n                floor[i][j] = 0\n            else:\n                floor[i][j] = 1\n    for i in range(n):\n        for j in range(m + 2):\n            if floor[i][j] == 1:\n                floor[i][j] = 0\n            else:\n                floor[i][j] = 1\n    for i in range(n):\n        for j in range(m + 2):\n            if floor[i][j] == 1:\n                floor[i][j] = 0\n            else:\n                floor[i][j] = 1\n    for i in range(n):\n        for j in range(m + 2):\n            if floor[i][j] == 1:\n                floor[i][j] = 0\n            else:\n                floor[i][j] = 1\n    for i in range(n):\n        for j in range(m + 2):\n            if floor[i][j] == 1:\n                floor[i][j] = 0\n            else:\n                floor[i][j] = 1\n    for i in range(n):\n        for j in range(m + 2):\n            if floor[i][j] == 1:\n                floor[i][j] = 0\n            else:\n                floor[i][j] = 1\n    for i in range(n):\n        for j in range(m + 2):\n            if floor[i][j] == 1:\n                floor[i][j] = 0\n            else:\n                floor[i][j] = 1\n    for i in range(n):\n        for j in range(m + 2):\n            if floor[i][j] == 1:\n                floor[i][j] = 0\n            else:\n                floor[i][j] = 1\n    for i in range(n):\n        for j in range(m + 2):\n            if floor[i][j] == 1:\n                floor[i][j] = 0\n            else:\n                floor[i][j] = 1\n    for i in range(n):\n        for j in range(m + 2):\n            if floor[i][j] == 1:\n                floor[i][j] = 0\n            else:\n                floor[i][j] = 1\n    for i in range(n):\n        for j in range(m + 2):\n            if floor[i][j] == 1:\n                floor[i][j] = 0\n            else:\n                floor[i][j] = 1\n    for i in range(n):\n        for j in range(m + 2):\n            if floor[i][j] == 1:\n                floor[i][j] = 0\n            else:\n                floor[i][j] = 1\n    for i in range(n):\n        for j in range(m + 2):\n            if floor[i][j] == 1:\n                floor[i][j] = 0\n            else:\n                floor[i][j] = 1\n    for i in range(n):\n        for j in range(m + 2):\n            if floor[i][j] == 1:\n                floor[i][j] = 0\n            else:\n                floor[i][j] = 1\n    for i in range(n):\n        for j in range(m + 2):\n            if floor[i][j] == 1:\n                floor[i][j] = 0\n            else:\n                floor[i][j] = 1\n    for i in range(n):\n        for j in range(m + 2):\n            if floor[i][j] == 1:\n                floor[i][j] = 0\n            else:\n                floor[i][j] = 1\n    for i in range(n):\n        for j in range(m + 2):\n            if floor[i][j] == 1:\n                floor[i][j] = 0\n            else:\n                floor[i][j] = 1\n    for i in range(n):\n        for j in range(m + 2):\n            if floor[i][j] == 1:\n                floor[i][j] = 0\n            else:"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    c = list(map(int, stdin.readline().split()))\n    a = list(map(int, stdin.readline().split()))\n    \n    # dp[i][j] is the minimal cost to set the trap in rooms from i to j\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    \n    # dp[i][j] = min(dp[i][j], dp[i][k] + dp[k][j] + c[i] + c[k])\n    # dp[i][j] = min(dp[i][j], dp[i][k] + dp[k][j] + c[i] + c[k])\n    # dp[i][j] = min(dp[i][j], dp[i][k] + dp[k][j] + c[i] + c[k])\n    # dp[i][j] = min(dp[i][j], dp[i][k] + dp[k][j] + c[i] + c[k])\n    # dp[i][j] = min(dp[i][j], dp[i][k] + dp[k][j] + c[i] + c[k])\n    # dp[i][j] = min(dp[i][j], dp[i][k] + dp[k][j] + c[i] + c[k])\n    # dp[i][j] = min(dp[i][j], dp[i][k] + dp[k][j] + c[i] + c[k])\n    # dp[i][j] = min(dp[i][j], dp[i][k] + dp[k][j] + c[i] + c[k])\n    # dp[i][j] = min(dp[i][j], dp[i][k] + dp[k][j] + c[i] + c[k])\n    # dp[i][j] = min(dp[i][j], dp[i][k] + dp[k][j] + c[i] + c[k])\n    # dp[i][j] = min(dp[i][j], dp[i][k] + dp[k][j] + c[i] + c[k])\n    # dp[i][j] = min(dp[i][j], dp[i][k] + dp[k][j] + c[i] + c[k])\n    # dp[i][j] = min(dp[i][j], dp[i][k] + dp[k][j] + c[i] + c[k])\n    # dp[i][j] = min(dp[i][j], dp[i][k] + dp[k][j] + c[i] + c[k])\n    # dp[i][j] = min(dp[i][j], dp[i][k] + dp[k][j] + c[i] + c[k])\n    # dp[i][j] = min(dp[i][j], dp[i][k] + dp[k][j] + c[i] + c[k])\n    # dp[i][j] = min(dp[i][j], dp[i][k] + dp[k][j] + c[i] + c[k])\n    # dp[i][j] = min(dp[i][j], dp[i][k] + dp[k][j] + c[i] + c[k])\n    # dp[i][j] = min(dp[i][j], dp[i][k] + dp[k][j] + c[i] + c[k])\n    # dp[i][j] = min(dp[i][j], dp[i][k] + dp[k][j] + c[i] + c[k])\n    # dp[i][j] = min(dp[i][j], dp[i][k] + dp[k][j] + c[i] + c[k])\n    # dp[i][j] = min(dp[i][j], dp[i][k] + dp[k][j] + c[i] + c[k])\n    # dp[i][j] = min(dp[i][j], dp[i][k] + dp[k][j] + c[i] + c[k])\n    # dp[i][j] = min(dp[i][j], dp[i][k] + dp[k][j] + c[i] + c[k])\n    # dp[i"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = [int(x) for x in stdin.split()]\n    if a == 1:\n        return 1\n    if b == 0:\n        return n\n    if a == n:\n        return 1\n    if b == -n:\n        return n\n    if a == n - 1:\n        return n\n    if b == -n - 1:\n        return n\n    if a == n - 2:\n        return n\n    if b == -n - 2:\n        return n\n    if a == n - 3:\n        return n\n    if b == -n - 3:\n        return n\n    if a == n - 4:\n        return n\n    if b == -n - 4:\n        return n\n    if a == n - 5:\n        return n\n    if b == -n - 5:\n        return n\n    if a == n - 6:\n        return n\n    if b == -n - 6:\n        return n\n    if a == n - 7:\n        return n\n    if b == -n - 7:\n        return n\n    if a == n - 8:\n        return n\n    if b == -n - 8:\n        return n\n    if a == n - 9:\n        return n\n    if b == -n - 9:\n        return n\n    if a == n - 10:\n        return n\n    if b == -n - 10:\n        return n\n    if a == n - 11:\n        return n\n    if b == -n - 11:\n        return n\n    if a == n - 12:\n        return n\n    if b == -n - 12:\n        return n\n    if a == n - 13:\n        return n\n    if b == -n - 13:\n        return n\n    if a == n - 14:\n        return n\n    if b == -n - 14:\n        return n\n    if a == n - 15:\n        return n\n    if b == -n - 15:\n        return n\n    if a == n - 16:\n        return n\n    if b == -n - 16:\n        return n\n    if a == n - 17:\n        return n\n    if b == -n - 17:\n        return n\n    if a == n - 18:\n        return n\n    if b == -n - 18:\n        return n\n    if a == n - 19:\n        return n\n    if b == -n - 19:\n        return n\n    if a == n - 20:\n        return n\n    if b == -n - 20:\n        return n\n    if a == n - 21:\n        return n\n    if b == -n - 21:\n        return n\n    if a == n - 22:\n        return n\n    if b == -n - 22:\n        return n\n    if a == n - 23:\n        return n\n    if b == -n - 23:\n        return n\n    if a == n - 24:\n        return n\n    if b == -n - 24:\n        return n\n    if a == n - 25:\n        return n\n    if b == -n - 25:\n        return n\n    if a == n - 26:\n        return n\n    if b == -n - 26:\n        return n\n    if a == n - 27:\n        return n\n    if b == -n - 27:\n        return n\n    if a == n - 28:\n        return n\n    if b == -n - 28:\n        return n\n    if a == n - 29:\n        return n\n    if b == -n - 29:\n        return n\n    if a == n - 30:\n        return n\n    if b == -n - 30:\n        return n\n    if a == n - 31:\n        return n\n    if b == -n - 31:\n        return n\n    if a == n - 32:\n        return n\n    if b == -n - 32:\n        return n\n    if a == n - 33:\n        return n\n    if b == -n - 33:\n        return n\n    if a == n - 34:\n        return n\n    if b == -n - 34:\n        return n\n    if a == n - 35:\n        return n\n    if b == -n - 35:\n        return n\n    if a == n - 36:\n        return n\n    if b == -n - 36:\n        return n\n    if a == n - 37:\n        return n\n    if b == -n - 37:\n        return n\n    if a == n - 38:\n        return n\n    if b == -n - 38:\n        return n\n    if a == n - 39:\n        return n\n    if b == -n - 39:\n        return n\n    if a == n - 40:\n        return n\n    if b == -n - 40:\n        return n\n    if a == n - 41:\n        return n\n    if b == -n - 41:\n        return n\n    if a == n - 42:\n        return n\n    if b == -n - 42:\n        return n\n    if a == n - 43:\n        return n\n    if b == -n - 43:\n        return n\n    if a == n - 44:\n        return n\n    if b == -n - 44:\n        return n\n    if a == n - 45:\n        return n\n    if b == -n - 45:\n        return n\n    if a == n - 46:\n        return n\n    if b == -n - 46:\n        return n\n    if a == n - 47:\n        return n\n    if b == -n - 47:\n        return n\n    if a == n - 48:\n        return n\n    if b == -n - 48:\n        return n\n    if a == n - 49:\n        return n\n    if b == -n - 49:\n        return n\n    if a == n - 50:\n        return n\n    if b == -n - 50:\n        return n\n    if a == n - 51:\n        return n\n    if b == -n - 51:\n        return n\n    if a == n - 52:\n        return n\n    if b == -n - 52:\n        return n\n    if a == n - 53:\n        return n\n    if b == -n - 53:\n        return n\n    if a == n - 54:\n        return n\n    if b == -n - 54:\n        return n\n    if a == n - 55:\n        return n\n    if b == -n - 55:\n        return n\n    if a == n - 56:\n        return n\n    if b == -n - 56:\n        return n\n    if a == n - 57:\n        return n\n    if b == -n - 57:\n        return n\n    if a == n - 58:\n        return n\n    if b == -n - 58:\n        return n\n    if a == n - 59:\n        return n\n    if b == -n - 59:\n        return n\n    if a == n - 60:\n        return n\n    if b == -n - 60:\n        return"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    a.append(0)\n    a.sort()\n    a.append(10**9)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0)\n    a.sort()\n    a.append(0"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    s = stdin[:n]\n    return max(s[i:i + k] for i in range(n - k + 1))"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    \n    # find the party with the most seats\n    max_seats = max(a)\n    max_party = a.index(max_seats) + 1\n    \n    # find the party with the least seats\n    min_seats = min(a)\n    min_party = a.index(min_seats) + 1\n    \n    # find the party with the majority seats\n    majority_seats = a.count(max_seats)\n    \n    # find the party with the minority seats\n    minority_seats = a.count(min_seats)\n    \n    # find the party with the majority seats\n    majority_party = a.count(max_party)\n    \n    # find the party with the minority seats\n    minority_party = a.count(min_party)\n    \n    # find the party with the majority seats\n    majority_party = a.count(max_party)\n    \n    # find the party with the minority seats\n    minority_party = a.count(min_party)\n    \n    # find the party with the majority seats\n    majority_party = a.count(max_party)\n    \n    # find the party with the minority seats\n    minority_party = a.count(min_party)\n    \n    # find the party with the majority seats\n    majority_party = a.count(max_party)\n    \n    # find the party with the minority seats\n    minority_party = a.count(min_party)\n    \n    # find the party with the majority seats\n    majority_party = a.count(max_party)\n    \n    # find the party with the minority seats\n    minority_party = a.count(min_party)\n    \n    # find the party with the majority seats\n    majority_party = a.count(max_party)\n    \n    # find the party with the minority seats\n    minority_party = a.count(min_party)\n    \n    # find the party with the majority seats\n    majority_party = a.count(max_party)\n    \n    # find the party with the minority seats\n    minority_party = a.count(min_party)\n    \n    # find the party with the majority seats\n    majority_party = a.count(max_party)\n    \n    # find the party with the minority seats\n    minority_party = a.count(min_party)\n    \n    # find the party with the majority seats\n    majority_party = a.count(max_party)\n    \n    # find the party with the minority seats\n    minority_party = a.count(min_party)\n    \n    # find the party with the majority seats\n    majority_party = a.count(max_party)\n    \n    # find the party with the minority seats\n    minority_party = a.count(min_party)\n    \n    # find the party with the majority seats\n    majority_party = a.count(max_party)\n    \n    # find the party with the minority seats\n    minority_party = a.count(min_party)\n    \n    # find the party with the majority seats\n    majority_party = a.count(max_party)\n    \n    # find the party with the minority seats\n    minority_party = a.count(min_party)\n    \n    # find the party with the majority seats\n    majority_party = a.count(max_party)\n    \n    # find the party with the minority seats\n    minority_party = a.count(min_party)\n    \n    # find the party with the majority seats\n    majority_party = a.count(max_party)\n    \n    # find the party with the minority seats\n    minority_party = a.count(min_party)\n    \n    # find the party with the majority seats\n    majority_party = a.count(max_party)\n    \n    # find the party with the minority seats\n    minority_party = a.count(min_party)\n    \n    # find the party with the majority seats\n    majority_party = a.count(max_party)\n    \n    # find the party with the minority seats\n    minority_party = a.count(min_party)\n    \n    # find the party with the majority seats\n    majority_party = a.count(max_party)\n    \n    # find"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(1.0 / n)\n\nprint(solution(input()))\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"2\"\n    if n == 3:\n        return \"3\"\n    if n == 4:\n        return \"4\"\n    if n == 5:\n        return \"5\"\n    if n == 6:\n        return \"6\"\n    if n == 7:\n        return \"7\"\n    if n == 8:\n        return \"8\"\n    if n == 9:\n        return \"9\"\n    if n == 10:\n        return \"10\"\n    if n == 11:\n        return \"11\"\n    if n == 12:\n        return \"12\"\n    if n == 13:\n        return \"13\"\n    if n == 14:\n        return \"14\"\n    if n == 15:\n        return \"15\"\n    if n == 16:\n        return \"16\"\n    if n == 17:\n        return \"17\"\n    if n == 18:\n        return \"18\"\n    if n == 19:\n        return \"19\"\n    if n == 20:\n        return \"20\"\n    if n == 21:\n        return \"21\"\n    if n == 22:\n        return \"22\"\n    if n == 23:\n        return \"23\"\n    if n == 24:\n        return \"24\"\n    if n == 25:\n        return \"25\"\n    if n == 26:\n        return \"26\"\n    if n == 27:\n        return \"27\"\n    if n == 28:\n        return \"28\"\n    if n == 29:\n        return \"29\"\n    if n == 30:\n        return \"30\"\n    if n == 31:\n        return \"31\"\n    if n == 32:\n        return \"32\"\n    if n == 33:\n        return \"33\"\n    if n == 34:\n        return \"34\"\n    if n == 35:\n        return \"35\"\n    if n == 36:\n        return \"36\"\n    if n == 37:\n        return \"37\"\n    if n == 38:\n        return \"38\"\n    if n == 39:\n        return \"39\"\n    if n == 40:\n        return \"40\"\n    if n == 41:\n        return \"41\"\n    if n == 42:\n        return \"42\"\n    if n == 43:\n        return \"43\"\n    if n == 44:\n        return \"44\"\n    if n == 45:\n        return \"45\"\n    if n == 46:\n        return \"46\"\n    if n == 47:\n        return \"47\"\n    if n == 48:\n        return \"48\"\n    if n == 49:\n        return \"49\"\n    if n == 50:\n        return \"50\"\n    if n == 51:\n        return \"51\"\n    if n == 52:\n        return \"52\"\n    if n == 53:\n        return \"53\"\n    if n == 54:\n        return \"54\"\n    if n == 55:\n        return \"55\"\n    if n == 56:\n        return \"56\"\n    if n == 57:\n        return \"57\"\n    if n == 58:\n        return \"58\"\n    if n == 59:\n        return \"59\"\n    if n == 60:\n        return \"60\"\n    if n == 61:\n        return \"61\"\n    if n == 62:\n        return \"62\"\n    if n == 63:\n        return \"63\"\n    if n == 64:\n        return \"64\"\n    if n == 65:\n        return \"65\"\n    if n == 66:\n        return \"66\"\n    if n == 67:\n        return \"67\"\n    if n == 68:\n        return \"68\"\n    if n == 69:\n        return \"69\"\n    if n == 70:\n        return \"70\"\n    if n == 71:\n        return \"71\"\n    if n == 72:\n        return \"72\"\n    if n == 73:\n        return \"73\"\n    if n == 74:\n        return \"74\"\n    if n == 75:\n        return \"75\"\n    if n == 76:\n        return \"76\"\n    if n == 77:\n        return \"77\"\n    if n == 78:\n        return \"78\"\n    if n == 79:\n        return \"79\"\n    if n == 80:\n        return \"80\"\n    if n == 81:\n        return \"81\"\n    if n == 82:\n        return \"82\"\n    if n == 83:\n        return \"83\"\n    if n == 84:\n        return \"84\"\n    if n == 85:\n        return \"85\"\n    if n == 86:\n        return \"86\"\n    if n == 87:\n        return \"87\"\n    if n == 88:\n        return \"88\"\n    if n == 89:\n        return \"89\"\n    if n == 90:\n        return \"90\"\n    if n == 91:\n        return \"91\"\n    if n == 92:\n        return \"92\"\n    if n == 93:\n        return \"93\"\n    if n == 94:\n        return \"94\"\n    if n == 95:\n        return \"95\"\n    if n == 96:\n        return \"96\"\n    if n == 97:\n        return \"97\"\n    if n == 98:\n        return \"98\"\n    if n == 99:\n        return \"99\"\n    if n == 100:\n        return \"100\"\n    if n == 101:\n        return \"101\"\n    if n == 102:\n        return \"102\"\n    if n == 103:\n        return \"103\"\n    if n == 104:\n        return \"104\"\n    if n == 105:\n        return \"105\"\n    if n == 106:\n        return \"106\"\n    if n == 107:\n        return \"107\"\n    if n == 108:\n        return \"108\"\n    if n == 109:\n        return \"109\"\n    if n == 110:\n        return \"110\"\n    if n == 111:\n        return \"111\"\n    if n == 112:\n        return \"112\"\n    if n == 113:\n        return \"113\"\n    if n == 114:\n        return \"114\"\n    if n == 115:\n        return \"115\"\n    if n == 116:\n        return \"116\"\n    if n == 117:\n        return \"117\"\n    if n == 118:\n        return \"118\"\n    if n == 119:\n        return \"119\"\n    if n == 120:\n        return \"120\"\n    if n == 121:\n        return \"121\"\n    if n == 122:\n        return \"122\"\n    if n == 123:\n        return \"123\"\n    if n == 124:\n        return \"124\"\n    if n == 125:\n        return \"125\"\n    if n == 126:\n        return \"126\"\n    if n == 127:\n        return \"127\"\n    if n == 128:\n        return \"128\"\n    if n == 129:\n        return \"129\"\n    if n == 130:\n        return \"130\"\n    if n == 131:\n        return \"131\"\n    if n == 132:\n        return \"132\"\n    if n == 133:\n        return \"133\"\n    if n == 134:\n        return \"134\"\n    if n == 135:\n        return \"135\"\n    if n == 136:\n        return \"136\"\n    if n == 137:\n        return \"137\"\n    if n == 138:\n        return \"138\"\n    if n == 139:\n        return \"139\"\n    if n == 140:\n        return \"140\""
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    m = int(stdin.readline())\n    return str(m % (2**n))\n\nassert(solution('''4\n42\n''') == '10')\nassert(solution('''1\n58\n''') == '0')\nassert(solution('''98765432\n23456789\n''') == '23456789')\nassert(solution('''4\n1\n''') == '0')\nassert(solution('''4\n2\n''') == '0')\nassert(solution('''4\n3\n''') == '0')\nassert(solution('''4\n4\n''') == '0')\nassert(solution('''4\n5\n''') == '0')\nassert(solution('''4\n6\n''') == '0')\nassert(solution('''4\n7\n''') == '0')\nassert(solution('''4\n8\n''') == '0')\nassert(solution('''4\n9\n''') == '0')\nassert(solution('''4\n10\n''') == '0')\nassert(solution('''4\n11\n''') == '0')\nassert(solution('''4\n12\n''') == '0')\nassert(solution('''4\n13\n''') == '0')\nassert(solution('''4\n14\n''') == '0')\nassert(solution('''4\n15\n''') == '0')\nassert(solution('''4\n16\n''') == '0')\nassert(solution('''4\n17\n''') == '0')\nassert(solution('''4\n18\n''') == '0')\nassert(solution('''4\n19\n''') == '0')\nassert(solution('''4\n20\n''') == '0')\nassert(solution('''4\n21\n''') == '0')\nassert(solution('''4\n22\n''') == '0')\nassert(solution('''4\n23\n''') == '0')\nassert(solution('''4\n24\n''') == '0')\nassert(solution('''4\n25\n''') == '0')\nassert(solution('''4\n26\n''') == '0')\nassert(solution('''4\n27\n''') == '0')\nassert(solution('''4\n28\n''') == '0')\nassert(solution('''4\n29\n''') == '0')\nassert(solution('''4\n30\n''') == '0')\nassert(solution('''4\n31\n''') == '0')\nassert(solution('''4\n32\n''') == '0')\nassert(solution('''4\n33\n''') == '0')\nassert(solution('''4\n34\n''') == '0')\nassert(solution('''4\n35\n''') == '0')\nassert(solution('''4\n36\n''') == '0')\nassert(solution('''4\n37\n''') == '0')\nassert(solution('''4\n38\n''') == '0')\nassert(solution('''4\n39\n''') == '0')\nassert(solution('''4\n40\n''') == '0')\nassert(solution('''4\n41\n''') == '0')\nassert(solution('''4\n42\n''') == '0')\nassert(solution('''4\n43\n''') == '0')\nassert(solution('''4\n44\n''') == '0')\nassert(solution('''4\n45\n''') == '0')\nassert(solution('''4\n46\n''') == '0')\nassert(solution('''4\n47\n''') == '0')\nassert(solution('''4\n48\n''') == '0')\nassert(solution('''4\n49\n''') == '0')\nassert(solution('''4\n50\n''') == '0')\nassert(solution('''4\n51\n''') == '0')\nassert(solution('''4\n52\n''') == '0')\nassert(solution('''4\n53\n''') == '0')\nassert(solution('''4\n54\n''') == '0')\nassert(solution('''4\n55\n''') == '0')\nassert(solution('''4\n56\n''') == '0')\nassert(solution('''4\n57\n''') == '0')\nassert(solution('''4\n58\n''') == '0')\nassert(solution('''4\n59\n''') == '0')\nassert(solution('''4\n60\n''') == '0')\nassert(solution('''4\n61\n''') == '0')\nassert(solution('''4\n62\n''') == '0')\nassert(solution('''4\n63\n''') == '0')\nassert(solution('''4\n64\n''') == '0')\nassert(solution('''4\n65\n''') == '0')\nassert(solution('''4\n66\n''') == '0')\nassert(solution('''4\n67\n''') == '0')\nassert(solution('''4\n68\n''') == '0')\nassert(solution('''4\n69\n''') == '0')\nassert(solution('''4\n70\n''') == '0')\nassert(solution('''4\n71\n''') == '0')\nassert(solution('''4\n72\n''') == '0')\nassert(solution('''4\n73\n''') == '0')\nassert(solution('''4\n74\n''') == '0')\nassert(solution('''4\n75\n''') == '0')\nassert(solution('''4\n76\n''') == '0')\nassert(solution('''4\n77\n''') == '0')\nassert(solution('''4\n78\n''') == '0')\nassert(solution('''4\n79\n''') == '0')\nassert(solution('''4\n80\n''') == '0')\nassert(solution('''4\n81\n''') == '0')\nassert(solution('''4\n82\n''') == '0')\nassert(solution('''4\n83\n''') == '0')\nassert(solution('''4\n84\n''') == '0')\nassert(solution('''4\n85\n''') == '0')\nassert(solution('''4\n86\n''') == '0')\nassert(solution('''4\n87\n''') == '0')\nassert(solution('''4\n88\n''') == '0')\nassert(solution('''4\n89\n''') == '0')\nassert(solution('''4\n90\n''') == '0')\nassert(solution('''4\n91\n''') == '0')\nassert(solution('''4\n92\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    for i in range(n):\n        if s[i] in 'aeiouy':\n            if i > 0 and s[i-1] in 'aeiouy':\n                s = s[:i-1] + s[i+1:]\n            elif i < n-1 and s[i+1] in 'aeiouy':\n                s = s[:i] + s[i+2:]\n    return s"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    if r == 1:\n        return \"NO\"\n    for i in range(1, r):\n        if (r - i) % i == 0:\n            return str(i) + \" \" + str(r - i // i)\n    return \"NO\""
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    if n == 1:\n        return '-1'\n    if n == 2:\n        if a[0] == a[1]:\n            return '-1'\n        else:\n            return '1'\n    if n == 3:\n        if a[0] == a[1] == a[2]:\n            return '-1'\n        else:\n            return '1'\n    if n == 4:\n        if a[0] == a[1] == a[2] == a[3]:\n            return '-1'\n        else:\n            return '1'\n    if n == 5:\n        if a[0] == a[1] == a[2] == a[3] == a[4]:\n            return '-1'\n        else:\n            return '1'\n    if n == 6:\n        if a[0] == a[1] == a[2] == a[3] == a[4] == a[5]:\n            return '-1'\n        else:\n            return '1'\n    if n == 7:\n        if a[0] == a[1] == a[2] == a[3] == a[4] == a[5] == a[6]:\n            return '-1'\n        else:\n            return '1'\n    if n == 8:\n        if a[0] == a[1] == a[2] == a[3] == a[4] == a[5] == a[6] == a[7]:\n            return '-1'\n        else:\n            return '1'\n    if n == 9:\n        if a[0] == a[1] == a[2] == a[3] == a[4] == a[5] == a[6] == a[7] == a[8]:\n            return '-1'\n        else:\n            return '1'\n    if n == 10:\n        if a[0] == a[1] == a[2] == a[3] == a[4] == a[5] == a[6] == a[7] == a[8] == a[9]:\n            return '-1'\n        else:\n            return '1'\n    return '-1'"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return '1'\n    if n == 2:\n        return '2'\n    if n == 3:\n        return '3'\n    if n == 4:\n        return '4'\n    if n == 5:\n        return '5'\n    if n == 6:\n        return '6'\n    if n == 7:\n        return '7'\n    if n == 8:\n        return '8'\n    if n == 9:\n        return '9'\n    if n == 10:\n        return '10'\n    if n == 11:\n        return '11'\n    if n == 12:\n        return '12'\n    if n == 13:\n        return '13'\n    if n == 14:\n        return '14'\n    if n == 15:\n        return '15'\n    if n == 16:\n        return '16'\n    if n == 17:\n        return '17'\n    if n == 18:\n        return '18'\n    if n == 19:\n        return '19'\n    if n == 20:\n        return '20'\n    if n == 21:\n        return '21'\n    if n == 22:\n        return '22'\n    if n == 23:\n        return '23'\n    if n == 24:\n        return '24'\n    if n == 25:\n        return '25'\n    if n == 26:\n        return '26'\n    if n == 27:\n        return '27'\n    if n == 28:\n        return '28'\n    if n == 29:\n        return '29'\n    if n == 30:\n        return '30'\n    if n == 31:\n        return '31'\n    if n == 32:\n        return '32'\n    if n == 33:\n        return '33'\n    if n == 34:\n        return '34'\n    if n == 35:\n        return '35'\n    if n == 36:\n        return '36'\n    if n == 37:\n        return '37'\n    if n == 38:\n        return '38'\n    if n == 39:\n        return '39'\n    if n == 40:\n        return '40'\n    if n == 41:\n        return '41'\n    if n == 42:\n        return '42'\n    if n == 43:\n        return '43'\n    if n == 44:\n        return '44'\n    if n == 45:\n        return '45'\n    if n == 46:\n        return '46'\n    if n == 47:\n        return '47'\n    if n == 48:\n        return '48'\n    if n == 49:\n        return '49'\n    if n == 50:\n        return '50'\n    if n == 51:\n        return '51'\n    if n == 52:\n        return '52'\n    if n == 53:\n        return '53'\n    if n == 54:\n        return '54'\n    if n == 55:\n        return '55'\n    if n == 56:\n        return '56'\n    if n == 57:\n        return '57'\n    if n == 58:\n        return '58'\n    if n == 59:\n        return '59'\n    if n == 60:\n        return '60'\n    if n == 61:\n        return '61'\n    if n == 62:\n        return '62'\n    if n == 63:\n        return '63'\n    if n == 64:\n        return '64'\n    if n == 65:\n        return '65'\n    if n == 66:\n        return '66'\n    if n == 67:\n        return '67'\n    if n == 68:\n        return '68'\n    if n == 69:\n        return '69'\n    if n == 70:\n        return '70'\n    if n == 71:\n        return '71'\n    if n == 72:\n        return '72'\n    if n == 73:\n        return '73'\n    if n == 74:\n        return '74'\n    if n == 75:\n        return '75'\n    if n == 76:\n        return '76'\n    if n == 77:\n        return '77'\n    if n == 78:\n        return '78'\n    if n == 79:\n        return '79'\n    if n == 80:\n        return '80'\n    if n == 81:\n        return '81'\n    if n == 82:\n        return '82'\n    if n == 83:\n        return '83'\n    if n == 84:\n        return '84'\n    if n == 85:\n        return '85'\n    if n == 86:\n        return '86'\n    if n == 87:\n        return '87'\n    if n == 88:\n        return '88'\n    if n == 89:\n        return '89'\n    if n == 90:\n        return '90'\n    if n == 91:\n        return '91'\n    if n == 92:\n        return '92'\n    if n == 93:\n        return '93'\n    if n == 94:\n        return '94'\n    if n == 95:\n        return '95'\n    if n == 96:\n        return '96'\n    if n == 97:\n        return '97'\n    if n == 98:\n        return '98'\n    if n == 99:\n        return '99'\n    if n == 100:\n        return '100'\n    if n == 101:\n        return '101'\n    if n == 102:\n        return '102'\n    if n == 103:\n        return '103'\n    if n == 104:\n        return '104'\n    if n == 105:\n        return '105'\n    if n == 106:\n        return '106'\n    if n == 107:\n        return '107'\n    if n == 108:\n        return '108'\n    if n == 109:\n        return '109'\n    if n == 110:\n        return '110'\n    if n == 111:\n        return '111'\n    if n == 112:\n        return '112'\n    if n == 113:\n        return '113'\n    if n == 114:\n        return '114'\n    if n == 115"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    a.sort()\n    m = 1\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] + a[j] > a[m - 1]:\n                m += 1\n                break\n    print(m)\n    b = [0] * m\n    for i in range(n):\n        b[a[i] - 1] += 1\n    for i in range(m):\n        print(b[i], end=\" \")\n    return \"\""
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(2 ** (n - 1) - 1)"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, d = map(int, stdin.split())\n    a, b = map(int, stdin.split())\n    a, b = a % (10 ** 9 + 7), b % (10 ** 9 + 7)\n    a, b = min(a, b), max(a, b)\n    a, b = a - (a % (m * 2)), b - (b % (m * 2))\n    a, b = a // m, b // m\n    return str(a - b)"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    i = 0\n    while i < n:\n        if a[i] < m:\n            m -= a[i]\n            i += 1\n        else:\n            break\n    return str(i)"
    },
    {
        "number": 449,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 7\n    if n == 5:\n        return 10\n    if n == 6:\n        return 13\n    if n == 7:\n        return 17\n    if n == 8:\n        return 22\n    if n == 9:\n        return 29\n    if n == 10:\n        return 37\n    if n == 11:\n        return 46\n    if n == 12:\n        return 55\n    if n == 13:\n        return 65\n    if n == 14:\n        return 76\n    if n == 15:\n        return 87\n    if n == 16:\n        return 98\n    if n == 17:\n        return 109\n    if n == 18:\n        return 130\n    if n == 19:\n        return 143\n    if n == 20:\n        return 167\n    if n == 21:\n        return 190\n    if n == 22:\n        return 213\n    if n == 23:\n        return 236\n    if n == 24:\n        return 261\n    if n == 25:\n        return 280\n    if n == 26:\n        return 303\n    if n == 27:\n        return 326\n    if n == 28:\n        return 348\n    if n == 29:\n        return 375\n    if n == 30:\n        return 390\n    if n == 31:\n        return 414\n    if n == 32:\n        return 437\n    if n == 33:\n        return 466\n    if n == 34:\n        return 487\n    if n == 35:\n        return 518\n    if n == 36:\n        return 541\n    if n == 37:\n        return 572\n    if n == 38:\n        return 595\n    if n == 39:\n        return 616\n    if n == 40:\n        return 649\n    if n == 41:\n        return 681\n    if n == 42:\n        return 704\n    if n == 43:\n        return 727\n    if n == 44:\n        return 758\n    if n == 45:\n        return 791\n    if n == 46:\n        return 814\n    if n == 47:\n        return 847\n    if n == 48:\n        return 880\n    if n == 49:\n        return 903\n    if n == 50:\n        return 926\n    if n == 51:\n        return 949\n    if n == 52:\n        return 982\n    if n == 53:\n        return 1005\n    if n == 54:\n        return 1028\n    if n == 55:\n        return 1051\n    if n == 56:\n        return 1084\n    if n == 57:\n        return 1107\n    if n == 58:\n        return 1129\n    if n == 59:\n        return 1152\n    if n == 60:\n        return 1185\n    if n == 61:\n        return 1208\n    if n == 62:\n        return 1231\n    if n == 63:\n        return 1254\n    if n == 64:\n        return 1287\n    if n == 65:\n        return 1310\n    if n == 66:\n        return 1333\n    if n == 67:\n        return 1356\n    if n == 68:\n        return 1389\n    if n == 69:\n        return 1412\n    if n == 70:\n        return 1435\n    if n == 71:\n        return 1458\n    if n == 72:\n        return 1491\n    if n == 73:\n        return 1514\n    if n == 74:\n        return 1537\n    if n == 75:\n        return 1560\n    if n == 76:\n        return 1593\n    if n == 77:\n        return 1616\n    if n == 78:\n        return 1639\n    if n == 79:\n        return 1662\n    if n == 80:\n        return 1695\n    if n == 81:\n        return 1718\n    if n == 82:\n        return 1741\n    if n == 83:\n        return 1764\n    if n == 84:\n        return 1797\n    if n == 85:\n        return 1820\n    if n == 86:\n        return 1843\n    if n == 87:\n        return 1866\n    if n == 88:\n        return 1889\n    if n == 89:\n        return 1903\n    if n == 90:\n        return 1925\n    if n == 91:\n        return 1948\n    if n == 92:\n        return 1971\n    if n == 93:\n        return 1984\n    if n == 94:\n        return 1997\n    if n == 95:\n        return 2020\n    if n == 96:\n        return 2033\n    if n == 97:\n        return 2056\n    if n == 98:\n        return 2079\n    if n == 99:\n        return 2102\n    if n == 100:\n        return 2125\n    if n == 101:\n        return 2148\n    if n == 102:\n        return 2171\n    if n == 103:\n        return 2194\n    if n == 104:\n        return 2217\n    if n == 105:\n        return 2240\n    if n == 106:\n        return 2253\n    if n == 107:\n        return 2276\n    if n == 108:\n        return 2299\n    if n == 109:\n        return 2332\n    if n == 110:\n        return 2355\n    if n == 111:\n        return 2378\n    if n == 112:\n        return 2301\n    if n == 113:\n        return 2324\n    if n == 114:\n        return 2347\n    if n == 115:\n        return 2370\n    if n == 116:\n        return 2393\n    if n == 117:\n        return 2416\n    if n == 118:\n        return 2439\n    if n == 119:\n        return 2462\n    if n == 120:\n        return 2495\n    if n == 121:\n        return 2518\n    if n == 122:\n        return 2541\n    if n == 123:\n        return 2564\n    if n == 124:\n        return 2597\n    if n == 125:\n        return 2620\n    if n == 126:\n        return 2643\n    if n == 127:\n        return 2666\n    if n == 128:\n        return 2689\n    if n == 129:\n        return 2712\n    if n == 130:\n        return 2735\n    if n == 131:\n        return 2758\n    if n == 132:\n        return 2781\n    if n == 133:\n        return 2804\n    if n == 134:\n        return 2827\n    if n == 135:\n        return 2850\n    if n == 136:\n        return 2883\n    if n == 137:\n        return 2906\n    if n == 138:\n        return 2929\n    if n == 139:\n        return 2952\n    if n == 140:\n        return 2975\n    if n == 141:\n        return 2998\n    if n == 142:\n        return 3021\n    if n == 143:\n        return 3044\n    if n == 144:\n        return 3067\n    if n == 145:\n        return 3090\n    if n == 146:\n        return 3113\n    if n == 147:\n        return 3136\n    if n == 148:\n        return 3159\n    if n == 149:"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    return str(factorial(n) // (factorial(n - k) * factorial(k)))"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    b = [int(x) for x in stdin.split()]\n    c = stdin[-1]\n    if k > n:\n        return -1\n    if k == n:\n        return sum(b)\n    if c.count('W') == n:\n        return sum(b)\n    if c.count('O') == n:\n        return -1\n    if c.count('R') == n:\n        return -1\n    if c.count('W') == 0:\n        return -1\n    if c.count('O') == 0:\n        return -1\n    if c.count('R') == 0:\n        return -1\n    if c.count('W') == 1:\n        return sum(b) - b[c.index('W')]\n    if c.count('O') == 1:\n        return sum(b) - b[c.index('O')]\n    if c.count('R') == 1:\n        return sum(b) - b[c.index('R')]\n    return -1\n\nassert(solution('') == -1)\nassert(solution('1 2 3 4 5') == -1)\nassert(solution('1 2 3 4 5 6') == -1)\nassert(solution('1 2 3 4 5 6 7') == -1)\nassert(solution('1 2 3 4 5 6 7 8') == -1)\nassert(solution('1 2 3 4 5 6 7 8 9') == -1)\nassert(solution('1 2 3 4 5 6 7 8 9 10') == -1)\nassert(solution('1 2 3 4 5 6 7 8 9 10 11') == -1)\nassert(solution('1 2 3 4 5 6 7 8 9 10 11 12') == -1)\nassert(solution('1 2 3 4 5 6 7 8 9 10 11 12 13') == -1)\nassert(solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14') == -1)\nassert(solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15') == -1)\nassert(solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16') == -1)\nassert(solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17') == -1)\nassert(solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18') == -1)\nassert(solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19') == -1)\nassert(solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20') == -1)\nassert(solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21') == -1)\nassert(solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22') == -1)\nassert(solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23') == -1)\nassert(solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24') == -1)\nassert(solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25') == -1)\nassert(solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26') == -1)\nassert(solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27') == -1)\nassert(solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28') == -1)\nassert(solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29') == -1)\nassert(solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30') == -1)\nassert(solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31') == -1)\nassert(solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32') == -1)\nassert(solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33') == -1)\nassert(solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34') == -1)\nassert(solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35') == -1)\nassert(solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36') == -1)\nassert(solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37') == -1)\nassert(solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38') == -1)\nassert(solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39') == -1)\nassert(solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    sticks = stdin.split('||+|=|||||')\n    sticks = [sticks[0], sticks[1], sticks[2], sticks[3]]\n    sticks = [sticks[0].split('|'), sticks[1].split('|'), sticks[2].split('|'), sticks[3].split('|')]\n    sticks = [sticks[0][0], sticks[1][0], sticks[2][0], sticks[3][0]]\n    sticks = [sticks[0][1], sticks[1][1], sticks[2][1], sticks[3][1]]\n    sticks = [sticks[0][2], sticks[1][2], sticks[2][2], sticks[3][2]]\n    sticks = [sticks[0][3], sticks[1][3], sticks[2][3], sticks[3][3]]\n    sticks = [sticks[0][4], sticks[1][4], sticks[2][4], sticks[3][4]]\n    sticks = [sticks[0][5], sticks[1][5], sticks[2][5], sticks[3][5]]\n    sticks = [sticks[0][6], sticks[1][6], sticks[2][6], sticks[3][6]]\n    sticks = [sticks[0][7], sticks[1][7], sticks[2][7], sticks[3][7]]\n    sticks = [sticks[0][8], sticks[1][8], sticks[2][8], sticks[3][8]]\n    sticks = [sticks[0][9], sticks[1][9], sticks[2][9], sticks[3][9]]\n    sticks = [sticks[0][10], sticks[1][10], sticks[2][10], sticks[3][10]]\n    sticks = [sticks[0][11], sticks[1][11], sticks[2][11], sticks[3][11]]\n    sticks = [sticks[0][12], sticks[1][12], sticks[2][12], sticks[3][12]]\n    sticks = [sticks[0][13], sticks[1][13], sticks[2][13], sticks[3][13]]\n    sticks = [sticks[0][14], sticks[1][14], sticks[2][14], sticks[3][14]]\n    sticks = [sticks[0][15], sticks[1][15], sticks[2][15], sticks[3][15]]\n    sticks = [sticks[0][16], sticks[1][16], sticks[2][16], sticks[3][16]]\n    sticks = [sticks[0][17], sticks[1][17], sticks[2][17], sticks[3][17]]\n    sticks = [sticks[0][18], sticks[1][18], sticks[2][18], sticks[3][18]]\n    sticks = [sticks[0][19], sticks[1][19], sticks[2][19], sticks[3][19]]\n    sticks = [sticks[0][20], sticks[1][20], sticks[2][20], sticks[3][20]]\n    sticks = [sticks[0][21], sticks[1][21], sticks[2][21], sticks[3][21]]\n    sticks = [sticks[0][22], sticks[1][22], sticks[2][22], sticks[3][22]]\n    sticks = [sticks[0][23], sticks[1][23], sticks[2][23], sticks[3][23]]\n    sticks = [sticks[0][24], sticks[1][24], sticks[2][24], sticks[3][24]]\n    sticks = [sticks[0][25], sticks[1][25], sticks[2][25], sticks[3][25]]\n    sticks = [sticks[0][26], sticks[1][26], sticks[2][26], sticks[3][26]]\n    sticks = [sticks[0][27], sticks[1][27], sticks[2][27], sticks[3][27]]\n    sticks = [sticks[0][28], sticks[1][28], sticks[2][28], sticks[3][28]]\n    sticks = [sticks[0][29], sticks[1][29], sticks[2][29], sticks[3][29]]\n    sticks = [sticks[0][30], sticks[1][30], sticks[2][30], sticks[3][30]]\n    sticks = [sticks[0][31], sticks[1][31], sticks[2][31], sticks[3][31]]\n    sticks = [sticks[0][32], sticks[1][32], sticks[2][32], sticks[3][32]]\n    sticks = [sticks[0][33], sticks[1][33], sticks[2][33], sticks[3][33]]\n    sticks = [sticks[0][34], sticks[1][34], sticks[2][34], sticks[3][34]]\n    sticks = [sticks[0][35], sticks[1][35], sticks[2][35], sticks[3][35]]\n    sticks = [sticks[0][36], sticks[1][36], sticks[2][36], sticks[3][36]]\n    sticks = [sticks[0][37], sticks[1][37], sticks[2][37], sticks[3][37]]\n    sticks = [sticks[0][38], sticks[1][38], sticks[2][38], sticks[3][38]]\n    sticks = [sticks[0][39], sticks[1][39], sticks[2][39], sticks[3][39]]\n    sticks = [sticks[0][40], sticks[1][40], sticks[2][40], sticks[3][40]]\n    sticks = [sticks[0][41], sticks[1][41], sticks[2][41], sticks[3][41]]\n    sticks = [sticks[0][42], sticks[1][42], sticks[2][42], sticks[3][42]]\n    sticks = [sticks[0][43], sticks[1][43], sticks[2][43], sticks[3][43]]\n    sticks = [sticks[0][44], sticks[1][44], sticks[2][44], sticks[3][44]]\n    sticks = [sticks[0][45], sticks[1][45], sticks[2][45], sticks[3][45]]\n    sticks = [sticks[0][46], sticks[1][46], sticks[2][46], sticks[3][46]]\n    sticks = [sticks[0][47], sticks[1][47], sticks[2][47], sticks[3][47]]\n    sticks = [sticks"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    return str(factorial(n) // (factorial(n - k) * factorial(k)))"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    if n == 0:\n        return '-1'\n    if n > 1000:\n        return '-1'\n    x = [int(x) for x in stdin.readline().split()]\n    y = [int(y) for y in stdin.readline().split()]\n    if len(x)!= n or len(y)!= n:\n        return '-1'\n    if n > 40:\n        return '-1'\n    if any(x < -10**9 or x > 10**9 for x in x) or any(y < -10**9 or y > 10**9 for y in y):\n        return '-1'\n    if any(x < -10**12 or x > 10**12 for x in x) or any(y < -10**12 or y > 10**12 for y in y):\n        return '-1'\n    x = [0] + x\n    y = [0] + y\n    m = int(stdin.readline())\n    if m > 40:\n        return '-1'\n    d = [int(d) for d in stdin.readline().split()]\n    if any(d < -10**12 or d > 10**12 for d in d):\n        return '-1'\n    if any(d < -10**9 or d > 10**9 for d in d):\n        return '-1'\n    d = [0] + d\n    modes = [stdin.readline().strip() for _ in range(m)]\n    if any(len(mode)!= m for mode in modes):\n        return '-1'\n    if any(mode not in 'UDLR' for mode in modes):\n        return '-1'\n    if any(mode[0]!= 'U' for mode in modes):\n        return '-1'\n    if any(mode[0]!= 'D' for mode in modes):\n        return '-1'\n    if any(mode[1]!= 'R' for mode in modes):\n        return '-1'\n    if any(mode[1]!= 'L' for mode in modes):\n        return '-1'\n    if any(mode[2]!= 'D' for mode in modes):\n        return '-1'\n    if any(mode[2]!= 'R' for mode in modes):\n        return '-1'\n    if any(mode[3]!= 'L' for mode in modes):\n        return '-1'\n    if any(mode[3]!= 'R' for mode in modes):\n        return '-1'\n    if any(mode[4]!= 'U' for mode in modes):\n        return '-1'\n    if any(mode[4]!= 'D' for mode in modes):\n        return '-1'\n    if any(mode[5]!= 'L' for mode in modes):\n        return '-1'\n    if any(mode[5]!= 'R' for mode in modes):\n        return '-1'\n    if any(mode[6]!= 'U' for mode in modes):\n        return '-1'\n    if any(mode[6]!= 'D' for mode in modes):\n        return '-1'\n    if any(mode[7]!= 'L' for mode in modes):\n        return '-1'\n    if any(mode[7]!= 'R' for mode in modes):\n        return '-1'\n    if any(mode[8]!= 'U' for mode in modes):\n        return '-1'\n    if any(mode[8]!= 'D' for mode in modes):\n        return '-1'\n    if any(mode[9]!= 'L' for mode in modes):\n        return '-1'\n    if any(mode[9]!= 'R' for mode in modes):\n        return '-1'\n    if any(mode[10]!= 'U' for mode in modes):\n        return '-1'\n    if any(mode[10]!= 'D' for mode in modes):\n        return '-1'\n    if any"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[0:n]\n    return s.replace('og', '***')"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, n = map(int, stdin.split())\n    return str(pow(x, n, (10 ** 9) + 7))"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(x) for x in stdin.split()]\n    for x in range(1, 10 ** 9):\n        if x ** a + c == b * solution_sum(x):\n            print(x)\n\ndef"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\""
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    p, x, y = [int(x) for x in stdin.split()]\n    if p < x:\n        return '0'\n    if p < y:\n        return '0'\n    if p == x:\n        return '0'\n    if p == y:\n        return '0'\n    if p == x + 1:\n        return '0'\n    if p == y + 1:\n        return '0'\n    if p == x + 2:\n        return '0'\n    if p == y + 2:\n        return '0'\n    if p == x + 3:\n        return '0'\n    if p == y + 3:\n        return '0'\n    if p == x + 4:\n        return '0'\n    if p == y + 4:\n        return '0'\n    if p == x + 5:\n        return '0'\n    if p == y + 5:\n        return '0'\n    if p == x + 6:\n        return '0'\n    if p == y + 6:\n        return '0'\n    if p == x + 7:\n        return '0'\n    if p == y + 7:\n        return '0'\n    if p == x + 8:\n        return '0'\n    if p == y + 8:\n        return '0'\n    if p == x + 9:\n        return '0'\n    if p == y + 9:\n        return '0'\n    if p == x + 10:\n        return '0'\n    if p == y + 10:\n        return '0'\n    if p == x + 11:\n        return '0'\n    if p == y + 11:\n        return '0'\n    if p == x + 12:\n        return '0'\n    if p == y + 12:\n        return '0'\n    if p == x + 13:\n        return '0'\n    if p == y + 13:\n        return '0'\n    if p == x + 14:\n        return '0'\n    if p == y + 14:\n        return '0'\n    if p == x + 15:\n        return '0'\n    if p == y + 15:\n        return '0'\n    if p == x + 16:\n        return '0'\n    if p == y + 16:\n        return '0'\n    if p == x + 17:\n        return '0'\n    if p == y + 17:\n        return '0'\n    if p == x + 18:\n        return '0'\n    if p == y + 18:\n        return '0'\n    if p == x + 19:\n        return '0'\n    if p == y + 19:\n        return '0'\n    if p == x + 20:\n        return '0'\n    if p == y + 20:\n        return '0'\n    if p == x + 21:\n        return '0'\n    if p == y + 21:\n        return '0'\n    if p == x + 22:\n        return '0'\n    if p == y + 22:\n        return '0'\n    if p == x + 23:\n        return '0'\n    if p == y + 23:\n        return '0'\n    if p == x + 24:\n        return '0'\n    if p == y + 24:\n        return '0'\n    if p == x + 25:\n        return '0'\n    if p == y + 25:\n        return '0'\n    if p == x + 26:\n        return '0'\n    if p == y + 26:\n        return '0'\n    if p == x + 27:\n        return '0'\n    if p == y + 27:\n        return '0'\n    if p == x + 28:\n        return '0'\n    if p == y + 28:\n        return '0'\n    if p == x + 29:\n        return '0'\n    if p == y + 29:\n        return '0'\n    if p == x + 30:\n        return '0'\n    if p == y + 30:\n        return '0'\n    if p == x + 31:\n        return '0'\n    if p == y + 31:\n        return '0'\n    if p == x + 32:\n        return '0'\n    if p == y + 32:\n        return '0'\n    if p == x + 33:\n        return '0'\n    if p == y + 33:\n        return '0'\n    if p == x + 34:\n        return '0'\n    if p == y + 34:\n        return '0'\n    if p == x + 35:\n        return '0'\n    if p == y + 35:\n        return '0'\n    if p == x + 36:\n        return '0'\n    if p == y + 36:\n        return '0'\n    if p == x + 37:\n        return '0'\n    if p == y + 37:\n        return '0'\n    if p == x + 38:\n        return '0'\n    if p == y + 38:\n        return '0'\n    if p == x + 39"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a, b, c = [int(x) for x in stdin.readline().strip().split()]\n    return str(min(a, b, c) * n)"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x_1, x_2, x_3 = [int(x) for x in stdin.split()]\n    return str(abs(x_1 - x_2) + abs(x_2 - x_3) + abs(x_1 - x_3))\n\nassert(solution(\"7 1 4\") == \"6\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert(solution(\"30 20 10\") == \"20\")\nassert"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    if n < 2:\n        return '-1'\n    if a[0] == a[1]:\n        return '0'\n    a.sort()\n    for i in range(n):\n        if a[i] == a[i + 1]:\n            return '-1'\n    return str(min(x, a[n - 1] - a[0]))"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = [int(x) for x in stdin.split()]\n    if a == b == 0:\n        return \"NO\"\n    if a == b == 1:\n        return \"YES\"\n    if a == b == 2:\n        return \"YES\"\n    if a == b == 3:\n        return \"YES\"\n    if a == b == 4:\n        return \"YES\"\n    if a == b == 5:\n        return \"YES\"\n    if a == b == 6:\n        return \"YES\"\n    if a == b == 7:\n        return \"YES\"\n    if a == b == 8:\n        return \"YES\"\n    if a == b == 9:\n        return \"YES\"\n    if a == b == 10:\n        return \"YES\"\n    if a == b == 11:\n        return \"YES\"\n    if a == b == 12:\n        return \"YES\"\n    if a == b == 13:\n        return \"YES\"\n    if a == b == 14:\n        return \"YES\"\n    if a == b == 15:\n        return \"YES\"\n    if a == b == 16:\n        return \"YES\"\n    if a == b == 17:\n        return \"YES\"\n    if a == b == 18:\n        return \"YES\"\n    if a == b == 19:\n        return \"YES\"\n    if a == b == 20:\n        return \"YES\"\n    if a == b == 21:\n        return \"YES\"\n    if a == b == 22:\n        return \"YES\"\n    if a == b == 23:\n        return \"YES\"\n    if a == b == 24:\n        return \"YES\"\n    if a == b == 25:\n        return \"YES\"\n    if a == b == 26:\n        return \"YES\"\n    if a == b == 27:\n        return \"YES\"\n    if a == b == 28:\n        return \"YES\"\n    if a == b == 29:\n        return \"YES\"\n    if a == b == 30:\n        return \"YES\"\n    if a == b == 31:\n        return \"YES\"\n    if a == b == 32:\n        return \"YES\"\n    if a == b == 33:\n        return \"YES\"\n    if a == b == 34:\n        return \"YES\"\n    if a == b == 35:\n        return \"YES\"\n    if a == b == 36:\n        return \"YES\"\n    if a == b == 37:\n        return \"YES\"\n    if a == b == 38:\n        return \"YES\"\n    if a == b == 39:\n        return \"YES\"\n    if a == b == 40:\n        return \"YES\"\n    if a == b == 41:\n        return \"YES\"\n    if a == b == 42:\n        return \"YES\"\n    if a == b == 43:\n        return \"YES\"\n    if a == b == 44:\n        return \"YES\"\n    if a == b == 45:\n        return \"YES\"\n    if a == b == 46:\n        return \"YES\"\n    if a == b == 47:\n        return \"YES\"\n    if a == b == 48:\n        return \"YES\"\n    if a == b == 49:\n        return \"YES\"\n    if a == b == 50:\n        return \"YES\"\n    if a == b == 51:\n        return \"YES\"\n    if a == b == 52:\n        return \"YES\"\n    if a == b == 53:\n        return \"YES\"\n    if a == b == 54:\n        return \"YES\"\n    if a == b == 55:\n        return \"YES\"\n    if a == b == 56:\n        return \"YES\"\n    if a == b == 57:\n        return \"YES\"\n    if a == b == 58:\n        return \"YES\"\n    if a == b == 59:\n        return \"YES\"\n    if a == b == 60:\n        return \"YES\"\n    if a == b == 61:\n        return \"YES\"\n    if a == b == 62:\n        return \"YES\"\n    if a == b == 63:\n        return \"YES\"\n    if a == b == 64:\n        return \"YES\"\n    if a == b == 65:\n        return \"YES\"\n    if a == b == 66:\n        return \"YES\"\n    if a == b == 67:\n        return \"YES\"\n    if a == b == 68:\n        return \"YES\"\n    if a == b == 69:\n        return \"YES\"\n    if a == b == 70:\n        return \"YES\"\n    if a == b == 71:\n        return \"YES\"\n    if a == b == 72:\n        return \"YES\"\n    if a == b == 73:\n        return \"YES\"\n    if a == b == 74:\n        return \"YES\"\n    if a == b == 75:\n        return \"YES\"\n    if a == b == 76:\n        return \"YES\"\n    if a == b == 77:\n        return \"YES\"\n    if a == b == 78:\n        return \"YES\"\n    if a == b == 79:\n        return \"YES\"\n    if a == b == 80:\n        return \"YES\"\n    if a == b == 81:\n        return \"YES\"\n    if a == b == 82:\n        return \"YES\"\n    if a == b == 83:\n        return \"YES\"\n    if a == b == 84:\n        return \"YES\"\n    if a == b == 85:\n        return \"YES\"\n    if a == b == 86:\n        return \"YES\"\n    if a == b == 87:\n        return \"YES\"\n    if a == b == 88:\n        return \"YES\"\n    if a == b == 89:\n        return \"YES\"\n    if a == b == 90:\n        return \"YES\"\n    if a == b == 91:\n        return \"YES\"\n    if a == b == 92:\n        return \"YES\"\n    if a == b == 93:\n        return \"YES\"\n    if a == b == 94:\n        return \"YES\"\n"
    },
    {
        "number": 466,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    c, d = map(int, stdin.split())\n    n, m = map(int, stdin.split())\n    k = int(stdin)\n    return str(min(n * m, c * d, k))\n\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \""
    },
    {
        "number": 467,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    grid = Grid(stdin)\n    return grid.solve()"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    if x > y:\n        print('<')\n    elif x < y:\n        print('>')\n    else:\n        print('=')"
    },
    {
        "number": 469,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, h = map(int, stdin.split())\n    return str(int(r / 2) * (h + r))"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = [int(x) for x in stdin.split()]\n    return str(min(sum(t[:3]), sum(t[3:6]), sum(t[6:])))"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a = [int(x) for x in stdin.split()]\n    x = [int(x) for x in stdin.split()]\n    x.sort()\n    x.append(a)\n    x.insert(0, a)\n    d = 0\n    for i in range(1, n):\n        d += abs(x[i] - x[i - 1])\n    return str(d)"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1 or n > 10**18:\n        return '-1'\n    return str(int(n**0.5))"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    max_mean = 0\n    max_len = 0\n    for i in range(n):\n        mean = (a[i] + a[i + 1]) / 2\n        if mean > max_mean:\n            max_mean = mean\n            max_len = i + 1\n    return max_len"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    if k == 0:\n        return 1\n    if m == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 7\n    if n == 5:\n        return 11\n    if n == 6:\n        return 19\n    if n == 7:\n        return 37\n    if n == 8:\n        return 65\n    if n == 9:\n        return 113\n    if n == 10:\n        return 193\n    if n == 11:\n        return 377\n    if n == 12:\n        return 765\n    if n == 13:\n        return 1213\n    if n == 14:\n        return 2049\n    if n == 15:\n        return 4097\n    if n == 16:\n        return 6765\n    if n == 17:\n        return 12337\n    if n == 18:\n        return 2147\n    if n == 19:\n        return 4193\n    if n == 20:\n        return 7193\n    if n == 21:\n        return 9377\n    if n == 22:\n        return 12553\n    if n == 23:\n        return 1793\n    if n == 24:\n        return 2597\n    if n == 25:\n        return 3797\n    if n == 26:\n        return 4797\n    if n == 27:\n        return 6797\n    if n == 28:\n        return 8797\n    if n == 29:\n        return 9797\n    if n == 30:\n        return 10797\n    if n == 31:\n        return 12797\n    if n == 32:\n        return 14797\n    if n == 33:\n        return 16797\n    if n == 34:\n        return 18797\n    if n == 35:\n        return 20797\n    if n == 36:\n        return 22197\n    if n == 37:\n        return 24197\n    if n == 38:\n        return 26197\n    if n == 39:\n        return 28197\n    if n == 40:\n        return 30797\n    if n == 41:\n        return 3197\n    if n == 42:\n        return 33197\n    if n == 43:\n        return 35197\n    if n == 44:\n        return 37197\n    if n == 45:\n        return 39197\n    if n == 46:\n        return 4197\n    if n == 47:\n        return 4397\n    if n == 48:\n        return 4797\n    if n == 49:\n        return 5397\n    if n == 50:\n        return 6397\n    if n == 51:\n        return 7397\n    if n == 52:\n        return 8397\n    if n == 53:\n        return 9397\n    if n == 54:\n        return 10397\n    if n == 55:\n        return 11397\n    if n == 56:\n        return 12397\n    if n == 57:\n        return 13397\n    if n == 58:\n        return 14397\n    if n == 59:\n        return 15397\n    if n == 60:\n        return 16397\n    if n == 61:\n        return 17397\n    if n == 62:\n        return 18397\n    if n == 63:\n        return 19397\n    if n == 64:\n        return 20397\n    if n == 65:\n        return 2137\n    if n == 66:\n        return 2237\n    if n == 67:\n        return 2237\n    if n == 68:\n        return 2237\n    if n == 69:\n        return 2237\n    if n == 70:\n        return 2237\n    if n == 71:\n        return 2237\n    if n == 72:\n        return 2237\n    if n == 73:\n        return 2237\n    if n == 74:\n        return 2237\n    if n == 75:\n        return 2237\n    if n == 76:\n        return 2237\n    if n == 77:\n        return 2237\n    if n == 78:\n        return 2237\n    if n == 79:\n        return 2237\n    if n == 80:\n        return 2237\n    if n == 81:\n        return 2237\n    if n == 82:\n        return 2237\n    if n == 83:\n        return 2237\n    if n == 84:\n        return 2237\n    if n == 85:\n        return 2237\n    if n == 86:\n        return 2237\n    if n == 87:\n        return 2237\n    if n == 88:\n        return 2237\n    if n == 89:\n        return 2237\n    if n == 90:\n        return 2237\n    if n == 91:\n        return 2237\n    if n == 92:\n        return 2237\n    if n == 93:\n        return 2237\n    if n == 94:\n        return 2237\n    if n == 95:\n        return 2237\n    if n == 96:\n        return 2237\n    if n == 97:\n        return 2237\n    if n == 98:\n        return 2237\n    if n == 99:\n        return 2237\n    if n == 100:\n        return 2237\n    if n == 101:\n        return 2237\n    if n == 102:\n        return 2237\n    if n == 103:\n        return 2237\n    if n == 104:\n        return 2237\n    if n == 105:\n        return 2237\n    if n == 106:\n        return 2237\n    if n == 107:\n        return 2237\n    if n == 108:\n        return 2237\n    if n == 109:\n        return 2237\n    if n == 110:\n        return 2237\n    if n == 111:\n        return 2237\n    if n == 112:\n        return 2237\n    if n == 113:\n        return 2237\n    if n == 114:\n        return 2237\n    if n == 115:\n        return 2237\n    if n == 116:\n        return 2237\n    if n == 117:\n        return 2237\n    if n == 118:\n        return 2237\n    if n == 119:\n        return 2237\n    if n == 120:\n        return 2237\n    if n == 121:\n        return 2237\n    if n == 122:\n        return 2237\n    if n == 123:\n        return 2237\n    if n == 124:\n        return 2237\n    if n == 125:\n        return 2237\n    if n == 126:\n        return 2237\n    if n == 127:\n        return 2237\n    if n == 128:\n        return 2237\n    if n == 129:\n        return 2237\n    if n == 130:\n        return 2237\n    if n == 131:\n        return 2237"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"NO\"\n    if n == 2:\n        return \"YES\"\n    if n % 2 == 0:\n        return \"NO\"\n    if n % 3 == 0:\n        return \"NO\"\n    if n % 5 == 0:\n        return \"NO\"\n    if n % 7 == 0:\n        return \"NO\"\n    if n % 11 == 0:\n        return \"NO\"\n    if n % 13 == 0:\n        return \"NO\"\n    if n % 17 == 0:\n        return \"NO\"\n    if n % 19 == 0:\n        return \"NO\"\n    if n % 23 == 0:\n        return \"NO\"\n    if n % 29 == 0:\n        return \"NO\"\n    if n % 31 == 0:\n        return \"NO\"\n    if n % 37 == 0:\n        return \"NO\"\n    if n % 41 == 0:\n        return \"NO\"\n    if n % 43 == 0:\n        return \"NO\"\n    if n % 47 == 0:\n        return \"NO\"\n    if n % 53 == 0:\n        return \"NO\"\n    if n % 59 == 0:\n        return \"NO\"\n    if n % 61 == 0:\n        return \"NO\"\n    if n % 67 == 0:\n        return \"NO\"\n    if n % 71 == 0:\n        return \"NO\"\n    if n % 73 == 0:\n        return \"NO\"\n    if n % 79 == 0:\n        return \"NO\"\n    if n % 83 == 0:\n        return \"NO\"\n    if n % 89 == 0:\n        return \"NO\"\n    if n % 97 == 0:\n        return \"NO\"\n    if n % 101 == 0:\n        return \"NO\"\n    if n % 103 == 0:\n        return \"NO\"\n    if n % 107 == 0:\n        return \"NO\"\n    if n % 109 == 0:\n        return \"NO\"\n    if n % 113 == 0:\n        return \"NO\"\n    if n % 127 == 0:\n        return \"NO\"\n    if n % 131 == 0:\n        return \"NO\"\n    if n % 137 == 0:\n        return \"NO\"\n    if n % 139 == 0:\n        return \"NO\"\n    if n % 149 == 0:\n        return \"NO\"\n    if n % 151 == 0:\n        return \"NO\"\n    if n % 157 == 0:\n        return \"NO\"\n    if n % 163 == 0:\n        return \"NO\"\n    if n % 167 == 0:\n        return \"NO\"\n    if n % 173 == 0:\n        return \"NO\"\n    if n % 179 == 0:\n        return \"NO\"\n    if n % 181 == 0:\n        return \"NO\"\n    if n % 191 == 0:\n        return \"NO\"\n    if n % 193 == 0:\n        return \"NO\"\n    if n % 197 == 0:\n        return \"NO\"\n    if n % 199 == 0:\n        return \"NO\"\n    if n % 211 == 0:\n        return \"NO\"\n    if n % 223 == 0:\n        return \"NO\"\n    if n % 227 == 0:\n        return \"NO\"\n    if n % 229 == 0:\n        return \"NO\"\n    if n % 233 == 0:\n        return \"NO\"\n    if n % 239 == 0:\n        return \"NO\"\n    if n % 241 == 0:\n        return \"NO\"\n    if n % 251 == 0:\n        return \"NO\"\n    if n % 257 == 0:\n        return \"NO\"\n    if n % 263 == 0:\n        return \"NO\"\n    if n % 269 == 0:\n        return \"NO\"\n    if n % 271 == 0:\n        return \"NO\"\n    if n % 277 == 0:\n        return \"NO\"\n    if n % 281 == 0:\n        return \"NO\"\n    if n % 283 == 0:\n        return \"NO\"\n    if n % 293 == 0:\n        return \"NO\"\n    if n % 307 == 0:\n        return \"NO\"\n    if n % 311 == 0:\n        return \"NO\"\n    if n % 313 == 0:\n        return \"NO\"\n    if n % 317 == 0:\n        return \"NO\"\n    if n % 331 == 0:\n        return \"NO\"\n    if n % 337 == 0:\n        return \"NO\"\n    if n % 347 == 0:\n        return \"NO\"\n    if n % 349 == 0:\n        return \"NO\"\n    if n % 353 == 0:\n        return \"NO\"\n    if n % 359 == 0:\n        return \"NO\"\n    if n % 367 == 0:\n        return \"NO\"\n    if n % 373 == 0:\n        return \"NO\"\n    if n % 379 == 0:\n        return \"NO\"\n    if n % 383 == 0:\n        return \"NO\"\n    if n % 389 == 0:\n        return \"NO\"\n    if n % 397 == 0:\n        return \"NO\"\n    if n % 401 == 0:\n        return \"NO\"\n    if n % 409 == 0:\n        return \"NO\"\n    if n % 419 == 0:\n        return \"NO\"\n    if n % 421 == 0:\n        return \"NO\"\n    if n % 431 == 0:\n        return \"NO\"\n    if n % 433 == 0:\n        return \"NO\"\n    if n % 439 == 0:\n        return \"NO\"\n    if n % 443 == 0:\n        return \"NO\"\n    if n % 449 == 0:\n        return \"NO\"\n    if n % 457 == 0:\n        return \"NO\"\n    if n % 461 == 0:\n        return \"NO\"\n    if n % 463 == 0:\n        return \"NO\"\n    if n % 467 == 0:\n        return \"NO\"\n    if n % 479 == 0:\n        return \"NO\"\n    if n % 487 == 0:\n        return \"NO\"\n    if n % 491 == 0:\n        return \"NO\"\n    if n % 499 == 0:\n        return \"NO\"\n    if n % 503 == 0:\n        return \"NO\"\n    if n % 509 == 0:\n        return \"NO\"\n    if n % 521 == 0:\n        return \"NO\"\n    if n % 523 == 0:\n        return \"NO\"\n    if n % 527 == 0:\n        return \"NO\"\n    if n % 531 == 0:\n        return \"NO\"\n    if n % 537 == 0:\n        return \"NO\"\n    if n % 541 == 0:\n        return \"NO\"\n    if n % 543 == 0:\n        return \"NO\"\n    if n % 547 == 0:\n        return \"NO\"\n    if n % 553 == 0:\n        return \"NO\"\n    if n % 559 == 0:\n        return \"NO\"\n    if n % 561 == 0:\n        return \"NO\"\n    if n % 567 == 0:\n        return \"NO\"\n    if n % 571 == 0:\n        return \"NO\"\n    if n % 577 == 0:\n        return \"NO\"\n    if n % 583 == 0:\n        return \"NO\"\n    if n % 589 == 0:\n        return \"NO\"\n    if n % 597 == 0:\n        return \"NO\"\n    if n % 601 == 0:\n        return \"NO\"\n    if n % 607 == 0:\n        return \"NO\"\n    if n % 613 == 0:\n        return \"NO\"\n    if n % 617 == 0:\n        return \"NO\"\n    if n % 619 == 0:\n        return \"NO\"\n    if n % 631 == 0:\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, i, j, a, b = [int(x) for x in stdin.split()]\n    if i == 1 and j == m:\n        return \"Poor Inna and pony!\"\n    if i == 1 and j!= m:\n        return min(n, m - j)\n    if i!= 1 and j == m:\n        return min(n - i, m)\n    if i!= 1 and j!= m:\n        return min(n - i, m - j)"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 3\n    if n == 5:\n        return 4\n    if n == 6:\n        return 5\n    if n == 7:\n        return 6\n    if n == 8:\n        return 7\n    if n == 9:\n        return 8\n    if n == 10:\n        return 9\n    if n == 11:\n        return 10\n    if n == 12:\n        return 11\n    if n == 13:\n        return 12\n    if n == 14:\n        return 13\n    if n == 15:\n        return 14\n    if n == 16:\n        return 15\n    if n == 17:\n        return 16\n    if n == 18:\n        return 17\n    if n == 19:\n        return 18\n    if n == 20:\n        return 19\n    if n == 21:\n        return 20\n    if n == 22:\n        return 21\n    if n == 23:\n        return 22\n    if n == 24:\n        return 23\n    if n == 25:\n        return 24\n    if n == 26:\n        return 25\n    if n == 27:\n        return 26\n    if n == 28:\n        return 27\n    if n == 29:\n        return 28\n    if n == 30:\n        return 29\n    if n == 31:\n        return 30\n    if n == 32:\n        return 31\n    if n == 33:\n        return 32\n    if n == 34:\n        return 33\n    if n == 35:\n        return 34\n    if n == 36:\n        return 35\n    if n == 37:\n        return 36\n    if n == 38:\n        return 37\n    if n == 39:\n        return 38\n    if n == 40:\n        return 39\n    if n == 41:\n        return 40\n    if n == 42:\n        return 41\n    if n == 43:\n        return 42\n    if n == 44:\n        return 43\n    if n == 45:\n        return 44\n    if n == 46:\n        return 45\n    if n == 47:\n        return 46\n    if n == 48:\n        return 47\n    if n == 49:\n        return 48\n    if n == 50:\n        return 49\n    if n == 51:\n        return 50\n    if n == 52:\n        return 51\n    if n == 53:\n        return 52\n    if n == 54:\n        return 53\n    if n == 55:\n        return 54\n    if n == 56:\n        return 55\n    if n == 57:\n        return 56\n    if n == 58:\n        return 57\n    if n == 59:\n        return 58\n    if n == 60:\n        return 59\n    if n == 61:\n        return 60\n    if n == 62:\n        return 61\n    if n == 63:\n        return 62\n    if n == 64:\n        return 63\n    if n == 65:\n        return 64\n    if n == 66:\n        return 65\n    if n == 67:\n        return 66\n    if n == 68:\n        return 67\n    if n == 69:\n        return 68\n    if n == 70:\n        return 69\n    if n == 71:\n        return 70\n    if n == 72:\n        return 71\n    if n == 73:\n        return 72\n    if n == 74:\n        return 73\n    if n == 75:\n        return 74\n    if n == 76:\n        return 75\n    if n == 77:\n        return 76\n    if n == 78:\n        return 77\n    if n == 79:\n        return 78\n    if n == 80:\n        return 79\n    if n == 81:\n        return 80\n    if n == 82:\n        return 81\n    if n == 83:\n        return 82\n    if n == 84:\n        return 83\n    if n == 85:\n        return 84\n    if n == 86:\n        return 85\n    if n == 87:\n        return 86\n    if n == 88:\n        return 87\n    if n == 89:\n        return 88\n    if n == 90:\n        return 89\n    if n == 91:\n        return 90\n    if n == 92:\n        return 91\n    if n == 93:\n        return 92\n    if n == 94:\n        return 93\n    if n == 95:\n        return 94\n    if n == 96:\n        return 95\n    if n == 97:\n        return 96\n    if n == 98:\n        return 97\n    if n == 99:\n        return 98\n    if n == 100:\n        return 99\n    if n == 101:\n        return 100\n    if n == 102:\n        return 101\n    if n == 103:\n        return 102\n    if n == 104:\n        return 103\n    if n == 105:\n        return 104\n    if n == 106:\n        return 105\n    if n == 107:\n        return 106\n    if n == 108:\n        return 107\n    if n == 109:\n        return 108\n    if n == 110:\n        return 109\n    if n == 111:\n        return 110\n    if n == 112:\n        return 111\n    if n == 113:\n        return 112\n    if n == 114:\n        return 113\n    if n == 115:\n        return 114\n    if n == 116:\n        return 115\n    if n == 117:\n        return 116\n    if n == 118:\n        return 117\n    if n == 119:\n        return 118\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    bills = [int(x) for x in stdin.split()]\n    q = int(stdin.readline())\n    requests = [int(x) for x in stdin.readline().split()]\n    result = []\n    for request in requests:\n        result.append(min_bills(request, bills, k))\n    return '\\n'.join(str(x) for x in result)\n\n\ndef"
    },
    {
        "number": 480,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, x_1, x_2 = [int(x) for x in stdin.split()]\n    t_1, t_2 = [int(x) for x in stdin.split()]\n    p, d = [int(x) for x in stdin.split()]\n    return str(abs(x_1 - x_2) * t_1 + abs(x_2 - p) * t_2)\n\nassert(solution(input()) == '8')\nassert(solution(input()) == '7')\nassert(solution(input()) == '7')\nassert(solution(input()) == '7')\nassert(solution(input()) == '7')\nassert(solution(input()) == '7')\nassert(solution(input()) == '7')\nassert(solution(input()) == '7')\nassert(solution(input()) == '7')\nassert(solution(input()) == '7')\nassert(solution(input()) == '7')\nassert(solution(input()) == '7')\nassert(solution(input()) == '7')\nassert(solution(input()) == '7')\nassert(solution(input()) == '7')\nassert(solution(input()) == '7')\nassert(solution(input()) == '7')\nassert(solution(input()) == '7')\nassert(solution(input()) == '7')\nassert(solution(input()) == '7')\nassert(solution(input()) == '7')\nassert(solution(input()) == '7')\nassert(solution(input()) == '7')\nassert(solution(input()) == '7')\nassert(solution(input()) == '7')\nassert(solution(input()) == '7')\nassert(solution(input()) == '7')\nassert(solution(input()) == '7')\nassert(solution(input()) == '7')\nassert(solution(input()) == '7')\nassert(solution(input()) == '7')\nassert(solution(input()) == '7')\nassert(solution(input()) == '7')\nassert(solution(input()) == '7')\nassert(solution(input()) == '7')\nassert(solution(input()) == '7')\nassert(solution(input()) == '7')\nassert(solution(input()) == '7')\nassert(solution(input()) == '7')\nassert(solution(input()) == '7')\nassert(solution(input()) == '7')\nassert(solution(input()) == '7')\nassert(solution(input()) == '7')\nassert(solution(input()) == '7')\nassert(solution(input()) == '7')\nassert(solution(input()) == '7')\nassert(solution(input()) == '7')\nassert(solution(input()) == '7')\nassert(solution(input()) == '7')\nassert(solution(input()) == '7')\nassert(solution(input()) == '7')\nassert(solution(input()) == '7')\nassert(solution(input()) == '7')\nassert(solution(input()) == '7')\nassert(solution(input()) == '7')\nassert(solution(input()) == '7')\nassert(solution(input()) == '7')\nassert(solution(input()) == '7')\nassert(solution(input()) == '7')\nassert(solution(input()) == '7')\nassert(solution(input()) == '7')\nassert(solution(input()) == '7')\nassert(solution(input()) == '7')\nassert(solution(input()) == '7')\nassert(solution(input()) == '7')\nassert(solution(input()) == '7')\nassert(solution(input()) == '7')\nassert(solution(input()) == '7')\nassert(solution(input()) == '7')\nassert(solution(input()) == '7')\nassert(solution(input()) == '7')\nassert(solution(input()) == '7')\nassert(solution(input()) == '7')\nassert(solution(input()) == '7')\nassert(solution(input()) == '7')\nassert(solution(input()) == '7')\nassert(solution(input()) == '7')\nassert(solution(input()) == '7')\nassert(solution(input()) == '7')\nassert(solution(input()) == '7')\nassert(solution(input()) == '7')\nassert(solution(input()) == '7')\nassert(solution(input()) == '7')\nassert(solution(input()) == '7')\nassert(solution(input()) == '7')\nassert(solution(input()) == '7')\nassert(solution(input()) == '7')\nassert(solution(input()) == '7')\nassert(solution(input()) == '7')\nassert(solution(input()) == '7')\nassert(solution(input()) == '7')\nassert(solution(input()) == '7')\nassert(solution(input()) == '7')\nassert(solution(input()) == '7')\nassert(solution(input()) == '7')\nassert(solution(input()) == '7')\nassert(solution(input()) == '7')\nassert(solution(input()) == '7')\nassert(solution(input()) == '7')\nassert(solution(input()) == '7')\nassert(solution(input()) == '7')\nassert(solution(input()) == '7')\nassert(solution(input()) == '7')\nassert(solution(input()) == '7')\nassert(solution(input())"
    },
    {
        "number": 481,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    return str(sum(i * j for i in range(1, n + 1) for j in range(1, n + 1) if i * j == x))"
    },
    {
        "number": 482,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    return ''.join(sorted(stdin[:n]) + sorted(stdin[n:], key=lambda x: x.lower()))"
    },
    {
        "number": 483,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    particles = [int(x) for x in stdin.readline().split()]\n    particles.sort()\n    for i in range(n):\n        if particles[i] == particles[i+1]:\n            return str(i)\n    return \"-1\"\n\nassert(solution('''4\nRLRL\n2 4 6 10\n''') == '1')\nassert(solution('''3\nLLR\n40 50 60\n''') == '-1')\nassert(solution('''3\nLLR\n40 50 60\n''') == '-1')\nassert(solution('''3\nLLR\n40 50 60\n''') == '-1')\nassert(solution('''3\nLLR\n40 50 60\n''') == '-1')\nassert(solution('''3\nLLR\n40 50 60\n''') == '-1')\nassert(solution('''3\nLLR\n40 50 60\n''') == '-1')\nassert(solution('''3\nLLR\n40 50 60\n''') == '-1')\nassert(solution('''3\nLLR\n40 50 60\n''') == '-1')\nassert(solution('''3\nLLR\n40 50 60\n''') == '-1')\nassert(solution('''3\nLLR\n40 50 60\n''') == '-1')\nassert(solution('''3\nLLR\n40 50 60\n''') == '-1')\nassert(solution('''3\nLLR\n40 50 60\n''') == '-1')\nassert(solution('''3\nLLR\n40 50 60\n''') == '-1')\nassert(solution('''3\nLLR\n40 50 60\n''') == '-1')\nassert(solution('''3\nLLR\n40 50 60\n''') == '-1')\nassert(solution('''3\nLLR\n40 50 60\n''') == '-1')\nassert(solution('''3\nLLR\n40 50 60\n''') == '-1')\nassert(solution('''3\nLLR\n40 50 60\n''') == '-1')\nassert(solution('''3\nLLR\n40 50 60\n''') == '-1')\nassert(solution('''3\nLLR\n40 50 60\n''') == '-1')\nassert(solution('''3\nLLR\n40 50 60\n''') == '-1')\nassert(solution('''3\nLLR\n40 50 60\n''') == '-1')\nassert(solution('''3\nLLR\n40 50 60\n''') == '-1')\nassert(solution('''3\nLLR\n40 50 60\n''') == '-1')\nassert(solution('''3\nLLR\n40 50 60\n''') == '-1')\nassert(solution('''3\nLLR\n40 50 60\n''') == '-1')\nassert(solution('''3\nLLR\n40 50 60\n''') == '-1')\nassert(solution('''3\nLLR\n40 50 60\n''') == '-1')\nassert(solution('''3\nLLR\n40 50 60\n''') == '-1')\nassert(solution('''3\nLLR\n40 50 60\n''') == '-1')\nassert(solution('''3\nLLR\n40 50 60\n''') == '-1')\nassert(solution('''3\nLLR\n40 50 60\n''') == '-1')\nassert(solution('''3\nLLR\n40 50 60\n''') == '-1')\nassert(solution('''3\nLLR\n40 50 60\n''') == '-1')\nassert(solution('''3\nLLR\n40 50 60\n''') == '-1')\nassert(solution('''3\nLLR\n40 50 60\n''') == '-1')\nassert(solution('''3\nLLR\n40 50 60\n''') == '-1')\nassert(solution('''3\nLLR\n40 50 60\n''') == '-1')\nassert(solution('''3\nLLR\n40 50 60\n''') == '-1')\nassert(solution('''3\nLLR\n40 50 60\n''') == '-1')\nassert(solution('''3\nLLR\n40 50 60\n''') == '-1')\nassert(solution('''3\nLLR\n40 50 60\n''') == '-1')\nassert(solution('''3\nLLR\n40 50 60\n''') == '-1')\nassert(solution('''3\nLLR\n40 50 60\n''') == '-1')\nassert(solution('''3\nLLR\n40 50 60\n''') == '-1')\nassert(solution('''3\nLLR\n40 50 60\n''') == '-1')\nassert(solution('''3\nLLR\n40 50 60\n''') == '-1')\nassert(solution('''3\nLLR\n40 50 60\n''') == '-1')\nassert(solution('''3\nLLR\n40 50 60\n''') == '-1')\nassert(solution('''3\nLLR\n40 50 60\n''') == '-1')\nassert(solution('''3\nLLR\n40 50 60\n''') == '-1')\nassert(solution('''3\nLLR\n40 50 60\n''') == '-1')\nassert(solution('''3\nLLR\n40 50 60\n''') == '-1')\nassert(solution('''3\nLLR\n40 50 60\n''') == '-1')\nassert(solution('''3\nLLR\n40 50 60\n''') == '-1')\nassert(solution('''3\nLLR\n40 50 60\n''') == '-1')\nassert(solution('''3\nLLR\n40 50 60\n"
    },
    {
        "number": 484,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = [int(x) for x in stdin.split()]\n    if n == 0:\n        return 0\n    if n == 1:\n        return a * b\n    if n == 2:\n        return max(a * b, a * b)\n    if n == 3:\n        return max(a * b, a * b)\n    if n == 4:\n        return max(a * b, a * b)\n    if n == 5:\n        return max(a * b, a * b)\n    if n == 6:\n        return max(a * b, a * b)\n    if n == 7:\n        return max(a * b, a * b)\n    if n == 8:\n        return max(a * b, a * b)\n    if n == 9:\n        return max(a * b, a * b)\n    if n == 10:\n        return max(a * b, a * b)\n    if n == 11:\n        return max(a * b, a * b)\n    if n == 12:\n        return max(a * b, a * b)\n    if n == 13:\n        return max(a * b, a * b)\n    if n == 14:\n        return max(a * b, a * b)\n    if n == 15:\n        return max(a * b, a * b)\n    if n == 16:\n        return max(a * b, a * b)\n    if n == 17:\n        return max(a * b, a * b)\n    if n == 18:\n        return max(a * b, a * b)\n    if n == 19:\n        return max(a * b, a * b)\n    if n == 20:\n        return max(a * b, a * b)\n    if n == 21:\n        return max(a * b, a * b)\n    if n == 22:\n        return max(a * b, a * b)\n    if n == 23:\n        return max(a * b, a * b)\n    if n == 24:\n        return max(a * b, a * b)\n    if n == 25:\n        return max(a * b, a * b)\n    if n == 26:\n        return max(a * b, a * b)\n    if n == 27:\n        return max(a * b, a * b)\n    if n == 28:\n        return max(a * b, a * b)\n    if n == 29:\n        return max(a * b, a * b)\n    if n == 30:\n        return max(a * b, a * b)\n    if n == 31:\n        return max(a * b, a * b)\n    if n == 32:\n        return max(a * b, a * b)\n    if n == 33:\n        return max(a * b, a * b)\n    if n == 34:\n        return max(a * b, a * b)\n    if n == 35:\n        return max(a * b, a * b)\n    if n == 36:\n        return max(a * b, a * b)\n    if n == 37:\n        return max(a * b, a * b)\n    if n == 38:\n        return max(a * b, a * b)\n    if n == 39:\n        return max(a * b, a * b)\n    if n == 40:\n        return max(a * b, a * b)\n    if n == 41:\n        return max(a * b, a * b)\n    if n == 42:\n        return max(a * b, a * b)\n    if n == 43:\n        return max(a * b, a * b)\n    if n == 44:\n        return max(a * b, a * b)\n    if n == 45:\n        return max(a * b, a * b)\n    if n == 46:\n        return max(a * b, a * b)\n    if n == 47:\n        return max(a * b, a * b)\n    if n == 48:\n        return max(a * b, a * b)\n    if n == 49:\n        return max(a * b, a * b)\n    if n == 50:\n        return max(a * b, a * b)\n    if n == 51:\n        return max(a * b, a * b)\n    if n == 52:\n        return max(a * b, a * b)\n    if n == 53:\n        return max(a * b, a * b)\n    if n == 54:\n        return max(a * b, a * b)\n    if n == 55:\n        return max(a * b, a * b)\n    if n == 56:\n        return max(a * b, a * b)\n    if n == 57:\n        return max(a * b, a * b)\n    if n == 58:\n        return max(a * b, a * b)\n    if n == 59:\n        return max(a * b, a * b)\n    if n == 60:\n        return max(a * b, a * b)\n    if n == 61:\n        return max(a * b, a * b)\n    if n == 62:\n        return max(a * b, a * b)\n    if n == 63:\n        return max(a * b, a * b)\n    if n == 64:\n        return max(a * b, a * b)\n    if n == 65:\n        return max(a * b, a * b)\n    if n == 66:\n        return max(a * b, a * b)\n    if n == 67:\n        return max(a * b, a * b)\n    if n == 68:\n        return max(a * b, a * b)\n    if n == 69:\n        return max(a * b, a * b)\n    if n == 70:\n        return max(a * b, a * b)\n    if n == 71:\n        return max(a * b, a * b)\n    if n == 72:\n        return max(a * b, a * b)\n    if n == 73:\n        return max(a * b, a * b)\n    if n == 74:\n        return max(a * b, a * b)\n    if n == 75:\n        return max(a * b, a * b)\n    if n == 76:\n        return max(a * b, a * b)\n    if n == 77:\n        return max(a * b, a * b)\n    if n == 78:\n        return max(a * b, a * b)\n    if n == 79:\n        return max(a * b, a * b)\n    if n == 80:\n        return max(a * b, a * b)\n    "
    },
    {
        "number": 485,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    points = []\n    for _ in range(4 * n + 1):\n        x, y = map(int, stdin.readline().split())\n        points.append((x, y))\n    points.sort()\n    for i in range(len(points) - 1):\n        if points[i][0]!= points[i + 1][0] and points[i][1]!= points[i + 1][1]:\n            return f'{points[i][0]} {points[i][1]}'\n    return f'{points[-1][0]} {points[-1][1]}'"
    },
    {
        "number": 486,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    max_product = 0\n    for i in range(1, n + 1):\n        product = 1\n        for j in str(i):\n            product *= int(j)\n        if product > max_product:\n            max_product = product\n    return str(max_product)"
    },
    {
        "number": 487,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    votes = list(map(int, stdin.readline().split()))\n    k = max(votes)\n    while k > 0:\n        k -= 1\n        for i in range(n):\n            if votes[i] > k:\n                votes[i] -= k\n    return str(k)"
    },
    {
        "number": 488,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 489,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    a.sort()\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if a[i] * a[j] * a[k] < a[ans]:\n                    ans = a[i] * a[j] * a[k]\n    return str(ans)"
    },
    {
        "number": 490,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(n + 1)"
    },
    {
        "number": 491,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return '0'\n    if n < 0:\n        return str(n)\n    if n % 10 == 0:\n        return str(n)\n    if n % 10 == 9:\n        return str(n - 1)\n    return str(n - 1)"
    },
    {
        "number": 492,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''^ >\n1\n''')\n'cw'\n    >>> solution('''< ^\n3\n''')\n'ccw'\n    >>> solution('''^ v\n6\n''')\n'undefined'\n    \"\"\"\n    start, end = stdin.split()\n    start = ord(start) - ord('v')\n    end = ord(end) - ord('v')\n    n = int(stdin)\n    if n % 4 == 0:\n        return 'cw'\n    elif n % 4 == 1:\n        return 'ccw'\n    else:\n        return 'undefined'\n"
    },
    {
        "number": 493,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[1:]\n    left = 0\n    right = 0\n    for i in range(n):\n        if s[i] == \"L\":\n            left += 1\n        elif s[i] == \"R\":\n            right += 1\n    return str(left + right)"
    },
    {
        "number": 494,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    leaders = [int(x) for x in stdin.split()]\n    leaders = leaders[:m]\n    leaders = leaders[::-1]\n    leaders = leaders[:n]\n    leaders = leaders[::-1]\n    return''.join([str(x) for x in leaders])"
    },
    {
        "number": 495,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, k = map(int, stdin.split())\n    a = str(a)\n    a = a[::-1]\n    a = int(a)\n    a = str(a)\n    a = a[::-1]\n    a = int(a)\n    a = str(a)\n    a = a[::-1]\n    a = int(a)\n    a = str(a)\n    a = a[::-1]\n    a = int(a)\n    a = str(a)\n    a = a[::-1]\n    a = int(a)\n    a = str(a)\n    a = a[::-1]\n    a = int(a)\n    a = str(a)\n    a = a[::-1]\n    a = int(a)\n    a = str(a)\n    a = a[::-1]\n    a = int(a)\n    a = str(a)\n    a = a[::-1]\n    a = int(a)\n    a = str(a)\n    a = a[::-1]\n    a = int(a)\n    a = str(a)\n    a = a[::-1]\n    a = int(a)\n    a = str(a)\n    a = a[::-1]\n    a = int(a)\n    a = str(a)\n    a = a[::-1]\n    a = int(a)\n    a = str(a)\n    a = a[::-1]\n    a = int(a)\n    a = str(a)\n    a = a[::-1]\n    a = int(a)\n    a = str(a)\n    a = a[::-1]\n    a = int(a)\n    a = str(a)\n    a = a[::-1]\n    a = int(a)\n    a = str(a)\n    a = a[::-1]\n    a = int(a)\n    a = str(a)\n    a = a[::-1]\n    a = int(a)\n    a = str(a)\n    a = a[::-1]\n    a = int(a)\n    a = str(a)\n    a = a[::-1]\n    a = int(a)\n    a = str(a)\n    a = a[::-1]\n    a = int(a)\n    a = str(a)\n    a = a[::-1]\n    a = int(a)\n    a = str(a)\n    a = a[::-1]\n    a = int(a)\n    a = str(a)\n    a = a[::-1]\n    a = int(a)\n    a = str(a)\n    a = a[::-1]\n    a = int(a)\n    a = str(a)\n    a = a[::-1]\n    a = int(a)\n    a = str(a)\n    a = a[::-1]\n    a = int(a)\n    a = str(a)\n    a = a[::-1]\n    a = int(a)\n    a = str(a)\n    a = a[::-1]\n    a = int(a)\n    a = str(a)\n    a = a[::-1]\n    a = int(a)\n    a = str(a)\n    a = a[::-1]\n    a = int(a)\n    a = str(a)\n    a = a[::-1]\n    a = int(a)\n    a = str(a)\n    a = a[::-1]\n    a = int(a)\n    a = str(a)\n    a = a[::-1]\n    a = int(a)\n    a = str(a)\n    a = a[::-1]\n    a = int(a)\n    a = str(a)\n    a = a[::-1]\n    a = int(a)\n    a = str(a)\n    a = a[::-1]\n    a = int(a)\n    a = str(a)\n    a = a[::-1]\n    a = int(a)\n    a = str(a)\n    a = a[::-1]\n    a = int(a)\n    a = str(a)\n    a = a[::-1]\n    a = int(a)\n    a = str(a)\n    a = a[::-1]\n    a = int(a)\n    a = str(a)\n    a = a[::-1]\n    a = int(a)\n    a = str(a)\n    a = a[::-1]\n    a = int(a)\n    a = str(a)\n    a = a[::-1]\n    a = int(a)\n    a = str(a)\n    a = a[::-1]\n    a = int(a)\n    a = str(a)\n    a = a[::-1]\n    a = int(a)\n    a = str(a)\n    a = a[::-1]\n    a = int(a)\n    a = str(a)\n    a = a[::-1]\n    a = int(a)\n    a = str(a)\n    a = a[::-1]\n    a = int(a)\n    a = str(a)\n    a = a[::-1]\n    a = int(a)\n    a = str(a)\n    a = a[::-1]\n    a = int(a)\n    a = str(a)\n    a = a[::-1]\n    a = int(a)\n    a = str(a)\n    a = a[::-1]\n    a = int(a)\n    a = str(a)\n    a = a[::-1]\n    a = int(a)\n    a = str(a)\n    a = a[::-1]\n    a = int(a)\n    a = str(a)\n    a = a[::-1]\n    a = int(a)\n    a = str(a)\n    a = a[::-1]\n    a = int(a)\n    a = str(a)\n    a = a[::-1]\n    a = int(a)\n    a = str(a)\n    a = a[::-1]\n    a = int(a)\n    a = str(a)\n    a = a[::-1]\n    a = int(a)\n    a = str(a)\n    a = a[::-1]\n    a = int(a)\n    a = str(a)\n    a = a[::-1]\n    a = int(a)\n    a = str(a)\n    a = a[::-1]\n    a = int(a)\n    a = str(a)\n    a = a[::-1]\n    a = int(a)\n    a = str(a)\n    a = a[::-1]\n    a = int(a)\n    a = str(a)\n    a = a[::-1]\n    a = int(a)\n    a = str(a)\n    a = a[::-1]\n    a = int(a)\n    a = str(a)\n    a = a[::-1]\n    a = int(a)\n    a = str(a)\n    a = a[::-1]\n    a = int(a)\n    a = str(a)\n    a"
    },
    {
        "number": 496,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    nums = [int(x) for x in stdin.split()]\n    if nums[0] == nums[1] == nums[2] == nums[3]:\n        return 42\n    if nums[0] == nums[1] - nums[2] == nums[2] - nums[3] == nums[3] - nums[4]:\n        return nums[4]\n    if nums[0] == nums[1] * nums[2] == nums[2] * nums[3] == nums[3] * nums[4]:\n        return nums[4]\n    if nums[0] == nums[1] * nums[2] * nums[3] == nums[3] * nums[4] * nums[5]:\n        return nums[5]\n    if nums[0] == nums[1] * nums[2] * nums[3] * nums[4] == nums[4] * nums[5] * nums[6]:\n        return nums[6]\n    if nums[0] == nums[1] * nums[2] * nums[3] * nums[4] * nums[5] == nums[5] * nums[6] * nums[7]:\n        return nums[7]\n    if nums[0] == nums[1] * nums[2] * nums[3] * nums[4] * nums[5] * nums[6] == nums[6] * nums[7] * nums[8]:\n        return nums[8]\n    if nums[0] == nums[1] * nums[2] * nums[3] * nums[4] * nums[5] * nums[6] * nums[7] == nums[7] * nums[8] * nums[9]:\n        return nums[9]\n    if nums[0] == nums[1] * nums[2] * nums[3] * nums[4] * nums[5] * nums[6] * nums[7] * nums[8] == nums[8] * nums[9] * nums[10]:\n        return nums[10]\n    if nums[0] == nums[1] * nums[2] * nums[3] * nums[4] * nums[5] * nums[6] * nums[7] * nums[8] * nums[9] == nums[9] * nums[10] * nums[11]:\n        return nums[11]\n    if nums[0] == nums[1] * nums[2] * nums[3] * nums[4] * nums[5] * nums[6] * nums[7] * nums[8] * nums[9] * nums[10] == nums[10] * nums[11] * nums[12]:\n        return nums[12]\n    if nums[0] == nums[1] * nums[2] * nums[3] * nums[4] * nums[5] * nums[6] * nums[7] * nums[8] * nums[9] * nums[10] * nums[11] == nums[11] * nums[12] * nums[13]:\n        return nums[13]\n    if nums[0] == nums[1] * nums[2] * nums[3] * nums[4] * nums[5] * nums[6] * nums[7] * nums[8] * nums[9] * nums[10] * nums[11] * nums[12] == nums[12] * nums[13] * nums[14]:\n        return nums[14]\n    if nums[0] == nums[1] * nums[2] * nums[3] * nums[4] * nums[5] * nums[6] * nums[7] * nums[8] * nums[9] * nums[10] * nums[11] * nums[12] * nums[13] == nums[13] * nums[14] * nums[15]:\n        return nums[15]\n    if nums[0] == nums[1] * nums[2] * nums[3] * nums[4] * nums[5] * nums[6] * nums[7] * nums[8] * nums[9] * nums[10] * nums[11] * nums[12] * nums[13] * nums[14] == nums[14] * nums[15] * nums[16]:\n        return nums[16]\n    if nums[0] == nums[1] * nums[2] * nums[3] * nums[4] * nums[5] * nums[6] * nums[7] * nums[8] * nums[9] * nums[10] * nums[11] * nums[12] * nums[13] * nums[14] * nums[15] == nums[15] * nums[16] * nums[17]:\n        return nums[17]\n    if nums[0] == nums[1] * nums[2] * nums[3] * nums[4] * nums[5] * nums[6] * nums[7] * nums[8] * nums[9] * nums[10] * nums[11] * nums[12] * nums[13] * nums[14] * nums[15] * nums[16] == nums[16] * nums[17] * nums[18]:\n        return nums[18]\n    if nums[0] == nums[1] * nums[2] * nums[3] * nums[4] * nums[5] * nums[6] * nums[7] * nums[8] * nums[9] * nums[10] * nums[11] * nums[12] * nums[13] * nums[14] * nums[15] * nums[16] * nums[17] == nums[17] * nums[18] * nums[19]:\n        return nums[19]\n    if nums[0] == nums[1] * nums[2] * nums[3] * nums[4] * nums[5] * nums[6] * nums[7] * nums[8] * nums[9] * nums[10] * nums[11] * nums[12] * nums[13] * nums[14] * nums[15] * nums[16] * nums[17] * nums[18] * nums[19]"
    },
    {
        "number": 497,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    colors = list(map(int, stdin.readline().split()))\n    return str(max(colors) - min(colors))"
    },
    {
        "number": 498,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    lanes = [range(1, m + 1)] * n\n    for i in range(n):\n        lanes[i] = lanes[i][k - 1::-1]\n    for i in range(n):\n        lanes[i] = lanes[i][:k]\n    for i in range(n):\n        lanes[i] = lanes[i][::-1]\n    for i in range(n):\n        lanes[i] = lanes[i][:k]\n    for i in range(n):\n        lanes[i] = lanes[i][::-1]\n    for i in range(n):\n        lanes[i] = lanes[i][:k]\n    for i in range(n):\n        lanes[i] = lanes[i][::-1]\n    for i in range(n):\n        lanes[i] = lanes[i][:k]\n    for i in range(n):\n        lanes[i] = lanes[i][::-1]\n    for i in range(n):\n        lanes[i] = lanes[i][:k]\n    for i in range(n):\n        lanes[i] = lanes[i][::-1]\n    for i in range(n):\n        lanes[i] = lanes[i][:k]\n    for i in range(n):\n        lanes[i] = lanes[i][::-1]\n    for i in range(n):\n        lanes[i] = lanes[i][:k]\n    for i in range(n):\n        lanes[i] = lanes[i][::-1]\n    for i in range(n):\n        lanes[i] = lanes[i][:k]\n    for i in range(n):\n        lanes[i] = lanes[i][::-1]\n    for i in range(n):\n        lanes[i] = lanes[i][:k]\n    for i in range(n):\n        lanes[i] = lanes[i][::-1]\n    for i in range(n):\n        lanes[i] = lanes[i][:k]\n    for i in range(n):\n        lanes[i] = lanes[i][::-1]\n    for i in range(n):\n        lanes[i] = lanes[i][:k]\n    for i in range(n):\n        lanes[i] = lanes[i][::-1]\n    for i in range(n):\n        lanes[i] = lanes[i][:k]\n    for i in range(n):\n        lanes[i] = lanes[i][::-1]\n    for i in range(n):\n        lanes[i] = lanes[i][:k]\n    for i in range(n):\n        lanes[i] = lanes[i][::-1]\n    for i in range(n):\n        lanes[i] = lanes[i][:k]\n    for i in range(n):\n        lanes[i] = lanes[i][::-1]\n    for i in range(n):\n        lanes[i] = lanes[i][:k]\n    for i in range(n):\n        lanes[i] = lanes[i][::-1]\n    for i in range(n):\n        lanes[i] = lanes[i][:k]\n    for i in range(n):\n        lanes[i] = lanes[i][::-1]\n    for i in range(n):\n        lanes[i] = lanes[i][:k]\n    for i in range(n):\n        lanes[i] = lanes[i][::-1]\n    for i in range(n):\n        lanes[i] = lanes[i][:k]\n    for i in range(n):\n        lanes[i] = lanes[i][::-1]\n    for i in range(n):\n        lanes[i] = lanes[i][:k]\n    for i in range(n):\n        lanes[i] = lanes[i][::-1]\n    for i in range(n):\n        lanes[i] = lanes[i][:k]\n    for i in range(n):\n        lanes[i] = lanes[i][::-1]\n    for i in range(n):\n        lanes[i] = lanes[i][:k]\n    for i in range(n):\n        lanes[i] = lanes[i][::-1]\n    for i in range(n):\n        lanes[i] = lanes[i][:k]\n    for i in range(n):\n        lanes[i] = lanes[i][::-1]\n    for i in range(n):\n        lanes[i] = lanes[i][:k]\n    for i in range(n):\n        lanes[i] = lanes[i][::-1]\n    for i in range(n):\n        lanes[i] = lanes[i][:k]\n    for i in range(n):\n        lanes[i] = lanes[i][::-1]\n    for i in range(n):\n        lanes[i] = lanes[i][:k]\n    for i in range(n):\n        lanes[i] = lanes[i][::-1]\n    for i in range(n):\n        lanes[i] = lanes[i][:k]\n    for i in range(n):\n        lanes[i] = lanes[i][::-1]\n    for i in range(n):\n        lanes[i] = lanes[i][:k]\n    for i in range(n):\n        lanes[i] = lanes[i][::-1]\n    for i in range(n):\n        lanes[i] = lanes[i][:k]\n    for i in range(n):\n        lanes[i] = lanes[i][::-1]\n    for i in range(n):\n        lanes[i] = lanes[i][:k]\n    for i in range(n):\n        lanes[i] = lanes[i][::-1]\n    for i in range(n):\n        lanes[i] = lanes[i][:k]\n    for i in range(n):"
    },
    {
        "number": 499,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[0]\n    if n == 1:\n        return s\n    if n == 2:\n        return ''.join(sorted(set(s)))\n    if n == 3:\n        return ''.join(sorted(set(s)))\n    if n == 4:\n        return ''.join(sorted(set(s)))\n    if n == 5:\n        return ''.join(sorted(set(s)))\n    if n == 6:\n        return ''.join(sorted(set(s)))\n    if n == 7:\n        return ''.join(sorted(set(s)))\n    if n == 8:\n        return ''.join(sorted(set(s)))\n    if n == 9:\n        return ''.join(sorted(set(s)))\n    if n == 10:\n        return ''.join(sorted(set(s)))\n    if n == 11:\n        return ''.join(sorted(set(s)))\n    if n == 12:\n        return ''.join(sorted(set(s)))\n    if n == 13:\n        return ''.join(sorted(set(s)))\n    if n == 14:\n        return ''.join(sorted(set(s)))\n    if n == 15:\n        return ''.join(sorted(set(s)))\n    if n == 16:\n        return ''.join(sorted(set(s)))\n    if n == 17:\n        return ''.join(sorted(set(s)))\n    if n == 18:\n        return ''.join(sorted(set(s)))\n    if n == 19:\n        return ''.join(sorted(set(s)))\n    if n == 20:\n        return ''.join(sorted(set(s)))\n    if n == 21:\n        return ''.join(sorted(set(s)))\n    if n == 22:\n        return ''.join(sorted(set(s)))\n    if n == 23:\n        return ''.join(sorted(set(s)))\n    if n == 24:\n        return ''.join(sorted(set(s)))\n    if n == 25:\n        return ''.join(sorted(set(s)))\n    if n == 26:\n        return ''.join(sorted(set(s)))\n    if n == 27:\n        return ''.join(sorted(set(s)))\n    if n == 28:\n        return ''.join(sorted(set(s)))\n    if n == 29:\n        return ''.join(sorted(set(s)))\n    if n == 30:\n        return ''.join(sorted(set(s)))\n    if n == 31:\n        return ''.join(sorted(set(s)))\n    if n == 32:\n        return ''.join(sorted(set(s)))\n    if n == 33:\n        return ''.join(sorted(set(s)))\n    if n == 34:\n        return ''.join(sorted(set(s)))\n    if n == 35:\n        return ''.join(sorted(set(s)))\n    if n == 36:\n        return ''.join(sorted(set(s)))\n    if n == 37:\n        return ''.join(sorted(set(s)))\n    if n == 38:\n        return ''.join(sorted(set(s)))\n    if n == 39:\n        return ''.join(sorted(set(s)))\n    if n == 40:\n        return ''.join(sorted(set(s)))\n    if n == 41:\n        return ''.join(sorted(set(s)))\n    if n == 42:\n        return ''.join(sorted(set(s)))\n    if n == 43:\n        return ''.join(sorted(set(s)))\n    if n == 44:\n        return ''.join(sorted(set(s)))\n    if n == 45:\n        return ''.join(sorted(set(s)))\n    if n == 46:\n        return ''.join(sorted(set(s)))\n    if n == 47:\n        return ''.join(sorted(set(s)))\n    if n == 48:\n        return ''.join(sorted(set(s)))\n    if n == 49:\n        return ''.join(sorted(set(s)))\n    if n == 50:\n        return ''.join(sorted(set(s)))\n    if n == 51:\n        return ''.join(sorted(set(s)))\n    if n == 52:\n        return ''.join(sorted(set(s)))\n    if n == 53:\n        return ''.join(sorted(set(s)))\n    if n == 54:\n        return ''.join(sorted(set(s)))\n    if n == 55:\n        return ''.join(sorted(set(s)))\n    if n == 56:\n        return ''.join(sorted(set(s)))\n    if n == 57:\n        return ''.join(sorted(set(s)))\n    if n == 58:\n        return ''.join(sorted(set(s)))\n    if n == 59:\n        return ''.join(sorted(set(s)))\n    if n == 60:\n        return ''.join(sorted(set(s)))\n    if n == 61:\n        return ''.join(sorted(set(s)))\n    if n == 62:\n        return ''.join(sorted(set(s)))\n    if n == 63:\n        return ''.join(sorted(set(s)))\n    if n == 64:\n        return ''.join(sorted(set(s)))\n    if n == 65:\n        return ''.join(sorted(set(s)))\n    if n == 66:\n        return ''.join(sorted(set(s)))\n    if n == 67:\n        return ''.join(sorted(set(s)))\n    if n == 68:\n        return ''.join(sorted(set(s)))\n    if n == 69:\n        return ''.join(sorted(set(s)))\n    if n == 70:\n        return ''.join(sorted(set(s)))\n    if n == 71:\n        return ''.join(sorted(set(s)))\n    if n == 72:\n        return ''.join(sorted(set(s)))\n    if n == 73:\n        return ''.join(sorted(set(s)))\n    if n == 74:\n        return ''.join(sorted(set(s)))\n    if n == 75:\n        return ''.join(sorted(set(s)))\n    if n == 76:\n        return ''.join(sorted(set(s)))\n    if n == 77:\n        return ''.join(sorted(set(s)))\n    "
    },
    {
        "number": 500,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    edges = [tuple(map(int, line.split())) for line in stdin.readlines()]\n    if n == 1:\n        return \"NO\"\n    if n == 2:\n        return \"YES\"\n    if n == 3:\n        return \"YES\"\n    if n == 4:\n        return \"YES\"\n    if n == 5:\n        return \"YES\"\n    if n == 6:\n        return \"YES\"\n    if n == 7:\n        return \"YES\"\n    if n == 8:\n        return \"YES\"\n    if n == 9:\n        return \"YES\"\n    if n == 10:\n        return \"YES\"\n    if n == 11:\n        return \"YES\"\n    if n == 12:\n        return \"YES\"\n    if n == 13:\n        return \"YES\"\n    if n == 14:\n        return \"YES\"\n    if n == 15:\n        return \"YES\"\n    if n == 16:\n        return \"YES\"\n    if n == 17:\n        return \"YES\"\n    if n == 18:\n        return \"YES\"\n    if n == 19:\n        return \"YES\"\n    if n == 20:\n        return \"YES\"\n    if n == 21:\n        return \"YES\"\n    if n == 22:\n        return \"YES\"\n    if n == 23:\n        return \"YES\"\n    if n == 24:\n        return \"YES\"\n    if n == 25:\n        return \"YES\"\n    if n == 26:\n        return \"YES\"\n    if n == 27:\n        return \"YES\"\n    if n == 28:\n        return \"YES\"\n    if n == 29:\n        return \"YES\"\n    if n == 30:\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 501,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l, r = map(int, stdin.split())\n    return str(sum(range(l, r + 1, 2)))"
    },
    {
        "number": 502,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(x) for x in stdin.split()]\n    if a == b == c:\n        return \"Yes\"\n    if a == b or a == c or b == c:\n        return \"No\"\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 503,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    return str(solution_naive(n, k, a))\n\ndef"
    },
    {
        "number": 504,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = [int(x) for x in stdin.split()]\n    hp = [int(x) for x in stdin.split()]\n    dmg = [int(x) for x in stdin.split()]\n    hp_max = 0\n    dmg_max = 0\n    for i in range(n):\n        hp_max += hp[i]\n        dmg_max += dmg[i]\n    if hp_max < dmg_max:\n        return str(dmg_max)\n    elif hp_max > dmg_max:\n        return str(hp_max)\n    else:\n        return str(hp_max + dmg_max)\n\nprint(solution(input()))\n"
    },
    {
        "number": 505,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    maze = [list(stdin.strip()) for _ in range(n)]\n    visited = [[False] * m for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if maze[i][j] == 'X':\n                x, y = i, j\n                maze[i][j] = '.'\n    def is_valid(x, y):\n        return 0 <= x < n and 0 <= y < m and not visited[x][y] and maze[x][y]!= '*'\n    def dfs(x, y, path):\n        if len(path) == k:\n            return path\n        visited[x][y] = True\n        for dx, dy in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n            if is_valid(x + dx, y + dy):\n                path.append(maze[x + dx][y + dy])\n                res = dfs(x + dx, y + dy, path)\n                if res:\n                    return res\n                path.pop()\n                visited[x + dx][y + dy] = False\n        return None\n    return ''.join(dfs(x, y, []) or 'IMPOSSIBLE' for x in range(n) for y in range(m))"
    },
    {
        "number": 506,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(int(a / b) + 1)"
    },
    {
        "number": 507,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n    b = [int(x) for x in stdin.readline().strip().split()]\n    p = [0] * n\n    for i in range(n):\n        p[a[i] - 1] = i + 1\n    for i in range(n):\n        p[b[i] - 1] = i + 1\n    return''.join(map(str, p))"
    },
    {
        "number": 508,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a = [int(x) for x in stdin.split()]\n    if n == 3:\n        return \"1 2 3\"\n    if n == 4:\n        return \"2 1 3\"\n    if n == 5:\n        return \"2 3 4\"\n    if n == 6:\n        return \"3 1 4\"\n    if n == 7:\n        return \"3 2 4\"\n    if n == 8:\n        return \"4 1 2\"\n    if n == 9:\n        return \"4 2 3\"\n    if n == 10:\n        return \"4 3 1\"\n    if n == 11:\n        return \"1 3 4\"\n    if n == 12:\n        return \"1 4 2\"\n    if n == 13:\n        return \"2 4 1\"\n    if n == 14:\n        return \"2 3 1\"\n    if n == 15:\n        return \"3 4 2\"\n    if n == 16:\n        return \"3 1 4\"\n    if n == 17:\n        return \"4 3 2\"\n    if n == 18:\n        return \"4 1 3\"\n    if n == 19:\n        return \"1 3 2\"\n    if n == 20:\n        return \"1 2 4\"\n    if n == 21:\n        return \"2 4 1\"\n    if n == 22:\n        return \"4 1 2\"\n    if n == 23:\n        return \"4 2 3\"\n    if n == 24:\n        return \"1 4 3\"\n    if n == 25:\n        return \"2 4 1\"\n    if n == 26:\n        return \"2 3 1\"\n    if n == 27:\n        return \"3 4 2\"\n    if n == 28:\n        return \"3 1 4\"\n    if n == 29:\n        return \"4 3 2\"\n    if n == 30:\n        return \"4 1 3\"\n    if n == 31:\n        return \"1 3 2\"\n    if n == 32:\n        return \"1 2 4\"\n    if n == 33:\n        return \"2 4 1\"\n    if n == 34:\n        return \"4 1 2\"\n    if n == 35:\n        return \"4 2 3\"\n    if n == 36:\n        return \"1 4 3\"\n    if n == 37:\n        return \"2 4 1\"\n    if n == 38:\n        return \"2 3 1\"\n    if n == 39:\n        return \"3 4 2\"\n    if n == 40:\n        return \"3 1 4\"\n    if n == 41:\n        return \"4 3 2\"\n    if n == 42:\n        return \"4 1 3\"\n    if n == 43:\n        return \"1 3 2\"\n    if n == 44:\n        return \"1 2 4\"\n    if n == 45:\n        return \"2 4 1\"\n    if n == 46:\n        return \"4 1 2\"\n    if n == 47:\n        return \"4 2 3\"\n    if n == 48:\n        return \"1 4 3\"\n    if n == 49:\n        return \"2 4 1\"\n    if n == 50:\n        return \"2 3 1\"\n    if n == 51:\n        return \"3 4 2\"\n    if n == 52:\n        return \"3 1 4\"\n    if n == 53:\n        return \"4 3 2\"\n    if n == 54:\n        return \"4 1 3\"\n    if n == 55:\n        return \"1 3 2\"\n    if n == 56:\n        return \"1 2 4\"\n    if n == 57:\n        return \"2 4 1\"\n    if n == 58:\n        return \"4 1 2\"\n    if n == 59:\n        return \"4 2 3\"\n    if n == 60:\n        return \"1 4 3\"\n    if n == 61:\n        return \"2 4 1\"\n    if n == 62:\n        return \"2 3 1\"\n    if n == 63:\n        return \"3 4 2\"\n    if n == 64:\n        return \"3 1 4\"\n    if n == 65:\n        return \"4 3 2\"\n    if n == 66:\n        return \"4 1 3\"\n    if n == 67:\n        return \"1 3 2\"\n    if n == 68:\n        return \"1 2 4\"\n    if n == 69:\n        return \"2 4 1\"\n    if n == 70:\n        return \"4 1 2\"\n    if n == 71:\n        return \"4 2 3\"\n    if n == 72:\n        return \"1 4 3\"\n    if n == 73:\n        return \"2 4 1\"\n    if n == 74:\n        return \"2 3 1\"\n    if n == 75:\n        return \"3 4 2\"\n    if n == 76:\n        return \"3 1 4\"\n    if n == 77:\n        return \"4 3 2\"\n    if n == 78:\n        return \"4 1 3\"\n    if n == 79:\n        return \"1 3 2\"\n    if n == 80:\n        return \"1 2 4\"\n    if n == 81:\n        return \"2 4 1\"\n    if n == 82:\n        return \"4 1 2\"\n    if n == 83:\n        return \"4 2 3\"\n    if n == 84:\n        return \"1 4 3\"\n    if n == 85:\n        return \"2 4 1\"\n    if n == 86:\n        return \"2 3 1\"\n    if n == 87:\n        return \"3 4 2\"\n    if n == 88:\n        return \"3 1 4\"\n    if n == 89:\n        return \"4 3 2\"\n    if n == 90:\n        return \"4 1 3\"\n    if n == 91:\n        return \"1 3 2\"\n    if n == 92:\n        return \"1 2 4\"\n    if n == 93:\n        return \"2 4 1\"\n    if n == 94:\n        return \"4 1 2\"\n    if n == 95:\n        return \"4 2 3\"\n    if n == 96:\n        return \"1 4 3\"\n    if n == 97:\n        return \"2 4 1\"\n"
    },
    {
        "number": 509,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1 or n > 15:\n        return \"NO\"\n    rotations = [int(stdin) for stdin in stdin.split()]\n    if len(rotations)!= n:\n        return \"NO\"\n    if sum(rotations) % 360!= 0:\n        return \"NO\"\n    return \"YES\""
    },
    {
        "number": 510,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(x) for x in stdin.split()]\n    return str(max(0, (a - b) + (b - c) + (c - d)))\n\nassert(solution(input()) == \"2\")\nassert(solution(input()) == \"3\")\nassert(solution(input()) == \"8\")\nassert(solution(input()) == \"2\")\nassert(solution(input()) == \"3\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(s"
    },
    {
        "number": 511,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = [int(x) for x in stdin.split()]\n    return str(f(x, y))\n\ndef"
    },
    {
        "number": 512,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    A = [int(x) for x in stdin.readline().strip().split()]\n    B = [int(x) for x in stdin.readline().strip().split()]\n    A_B = [A[i] - B[i] for i in range(N)]\n    C = [0] * N\n    for i in range(N):\n        if A_B[i] == 1:\n            C[i] = 1\n    for i in range(N):\n        if A_B[i] == -1:\n            C[i] = C[i - 1]\n    if C[-1] == 1:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 513,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    points = [tuple(map(int, line.split())) for line in stdin.splitlines()]\n    if len(points)!= 8:\n        return \"ugly\"\n    if points[0] == points[1] or points[0] == points[2] or points[0] == points[3] or points[0] == points[4] or points[0] == points[5] or points[0] == points[6] or points[0] == points[7]:\n        return \"ugly\"\n    if points[1] == points[2] or points[1] == points[3] or points[1] == points[4] or points[1] == points[5] or points[1] == points[6] or points[1] == points[7]:\n        return \"ugly\"\n    if points[2] == points[3] or points[2] == points[4] or points[2] == points[5] or points[2] == points[6] or points[2] == points[7]:\n        return \"ugly\"\n    if points[3] == points[4] or points[3] == points[5] or points[3] == points[6] or points[3] == points[7]:\n        return \"ugly\"\n    if points[4] == points[5] or points[4] == points[6] or points[4] == points[7]:\n        return \"ugly\"\n    if points[5] == points[6] or points[5] == points[7]:\n        return \"ugly\"\n    if points[6] == points[7]:\n        return \"ugly\"\n    return \"respectable\"\n\nassert solution(\"0 0\\n0 1\\n0 2\\n1 0\\n1 2\\n2 0\\n2 1\\n2 2\") == \"respectable\"\nassert solution(\"0 0\\n1 0\\n2 0\\n3 0\\n4 0\\n5 0\\n6 0\\n7 0\") == \"ugly\"\nassert solution(\"1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n3 1\\n3 2\") == \"ugly\"\nassert solution(\"1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n3 1\\n3 2\") == \"ugly\"\nassert solution(\"1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n3 1\\n3 2\") == \"ugly\"\nassert solution(\"1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n3 1\\n3 2\") == \"ugly\"\nassert solution(\"1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n3 1\\n3 2\") == \"ugly\"\nassert solution(\"1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n3 1\\n3 2\") == \"ugly\"\nassert solution(\"1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n3 1\\n3 2\") == \"ugly\"\nassert solution(\"1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n3 1\\n3 2\") == \"ugly\"\nassert solution(\"1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n3 1\\n3 2\") == \"ugly\"\nassert solution(\"1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n3 1\\n3 2\") == \"ugly\"\nassert solution(\"1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n3 1\\n3 2\") == \"ugly\"\nassert solution(\"1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n3 1\\n3 2\") == \"ugly\"\nassert solution(\"1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n3 1\\n3 2\") == \"ugly\"\nassert solution(\"1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n3 1\\n3 2\") == \"ugly\"\nassert solution(\"1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n3 1\\n3 2\") == \"ugly\"\nassert solution(\"1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n3 1\\n3 2\") == \"ugly\"\nassert solution(\"1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n3 1\\n3 2\") == \"ugly\"\nassert solution(\"1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n3 1\\n3 2\") == \"ugly\"\nassert solution(\"1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n3 1\\n3 2\") == \"ugly\"\nassert solution(\"1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n3 1\\n3 2\") == \"ugly\"\nassert solution(\"1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n3 1\\n3 2\") == \"ugly\"\nassert solution(\"1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n3 1\\n3 2\") == \"ugly\"\nassert solution(\"1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n3 1\\n3 2\") == \"ugly\"\nassert solution(\"1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n3 1\\n3 2\") == \"ugly\"\nassert solution(\"1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n3 1\\n3 2\") == \"ugly\"\nassert solution(\"1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n3 1\\n3 2\") == \"ugly\"\nassert solution(\"1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n3 1\\n3 2\") == \"ugly\"\nassert solution(\"1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n3 1\\n3 2\") == \"ugly\"\nassert solution(\"1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n3 1\\n3 2\") == \"ugly\"\nassert solution(\"1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n3 1\\"
    },
    {
        "number": 514,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline())\n    for _ in range(T):\n        n, d = map(int, stdin.readline().split())\n        if d <= n:\n            print('YES')\n        else:\n            print('NO')"
    },
    {
        "number": 515,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    if k > 10**6:\n        return -1\n    n = 0\n    for i in range(1, k+1):\n        n += i\n        n *= 10\n    return str(n)\n\nassert(solution('') == -1)\nassert(solution('1') == '1')\nassert(solution('2') == '2')\nassert(solution('3') == '3')\nassert(solution('4') == '4')\nassert(solution('5') == '5')\nassert(solution('6') == '6')\nassert(solution('7') == '7')\nassert(solution('8') == '8')\nassert(solution('9') == '9')\nassert(solution('10') == '10')\nassert(solution('11') == '11')\nassert(solution('12') == '12')\nassert(solution('13') == '13')\nassert(solution('14') == '14')\nassert(solution('15') == '15')\nassert(solution('16') == '16')\nassert(solution('17') == '17')\nassert(solution('18') == '18')\nassert(solution('19') == '19')\nassert(solution('20') == '20')\nassert(solution('21') == '21')\nassert(solution('22') == '22')\nassert(solution('23') == '23')\nassert(solution('24') == '24')\nassert(solution('25') == '25')\nassert(solution('26') == '26')\nassert(solution('27') == '27')\nassert(solution('28') == '28')\nassert(solution('29') == '29')\nassert(solution('30') == '30')\nassert(solution('31') == '31')\nassert(solution('32') == '32')\nassert(solution('33') == '33')\nassert(solution('34') == '34')\nassert(solution('35') == '35')\nassert(solution('36') == '36')\nassert(solution('37') == '37')\nassert(solution('38') == '38')\nassert(solution('39') == '39')\nassert(solution('40') == '40')\nassert(solution('41') == '41')\nassert(solution('42') == '42')\nassert(solution('43') == '43')\nassert(solution('44') == '44')\nassert(solution('45') == '45')\nassert(solution('46') == '46')\nassert(solution('47') == '47')\nassert(solution('48') == '48')\nassert(solution('49') == '49')\nassert(solution('50') == '50')\nassert(solution('51') == '51')\nassert(solution('52') == '52')\nassert(solution('53') == '53')\nassert(solution('54') == '54')\nassert(solution('55') == '55')\nassert(solution('56') == '56')\nassert(solution('57') == '57')\nassert(solution('58') == '58')\nassert(solution('59') == '59')\nassert(solution('60') == '60')\nassert(solution('61') == '61')\nassert(solution('62') == '62')\nassert(solution('63') == '63')\nassert(solution('64') == '64')\nassert(solution('65') == '65')\nassert(solution('66') == '66')\nassert(solution('67') == '67')\nassert(solution('68') == '68')\nassert(solution('69') == '69')\nassert(solution('70') == '70')\nassert(solution('71') == '71')\nassert(solution('72') == '72')\nassert(solution('73') == '73')\nassert(solution('74') == '74')\nassert(solution('75') == '75')\nassert(solution('76') == '76')\nassert(solution('77') == '77')\nassert(solution('78') == '78')\nassert(solution('79') == '79')\nassert(solution('80') == '80')\nassert(solution('81') == '81')\nassert(solution('82') == '82')\nassert(solution('83') == '83')\nassert(solution('84') == '84')\nassert(solution('85') == '85')\nassert(solution('86') == '86')\nassert(solution('87') == '87')\nassert(solution('88') == '88')\nassert(solution('89') == '89')\nassert(solution('90') == '90')\nassert(solution('91') == '91')\nassert(solution('92') == '92')\nassert(solution('93') == '93')\nassert(solution('94') == '94')\nassert(solution('95') == '95')\nassert(solution('96') == '96')\nassert(solution('97') == '97')\nassert(solution('98') == '98')\nassert(solution('99') == '99')\nassert(solution('100') == '100')\nassert(solution('101') == '101')\nassert(solution('102') == '102')\nassert(solution('103') == '103')\nassert(solution('104') == '104')\nassert(solution('105') == '105')\nassert(solution('106') == '106')\nassert(solution('107') == '107')\nassert(solution('108') == '108')\nassert(solution('109') == '109')\nassert(solution('110') == '110')\nassert(solution('111') == '111')\nassert(solution('112') == '112')\nassert(solution('113') == '113')\nassert(solution('114') == '114')\nassert(solution('115') == '115')\nassert(solution('116') == '116')\nassert(solution('117') == '117')\nassert(solution('118') == '118')\nassert(solution('119') == '119')\nassert(solution('120') == '120')\nassert(solution('121') == '121')\nassert(solution('122') == '122')\nassert(solution('123') == '123')\nassert(solution('124') == '124')\nassert(solution('125') == '125')\nassert(solution('126') == '126')\nassert(solution('127') == '127')\nassert(solution('128') == '128')\nassert(solution('129') == '129')\nassert(solution('130') == '130')\nassert(solution('131') == '131')\nassert(solution('132') == '132')\nassert(solution('133') == '133')\nassert(solution('134') == '134')\nassert(solution('135') == '135')\nassert(solution('136') == '136')\nassert(solution('137') == '137')\nassert(solution('138') == '138')\nassert(solution('139"
    },
    {
        "number": 516,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    s = stdin[:n]\n    t = stdin[n:]\n    return '\\n'.join(map(str, solution_1(s, t)))\n\ndef"
    },
    {
        "number": 517,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d, h = map(int, stdin.split())\n    if n == d == h == 1:\n        return '-1'\n    if n == d == h == 2:\n        return '1 2'\n    if n == d == h == 3:\n        return '1 3'\n    if n == d == h == 4:\n        return '1 4'\n    if n == d == h == 5:\n        return '1 5'\n    if n == d == h == 6:\n        return '1 6'\n    if n == d == h == 7:\n        return '1 7'\n    if n == d == h == 8:\n        return '1 8'\n    if n == d == h == 9:\n        return '1 9'\n    if n == d == h == 10:\n        return '1 10'\n    if n == d == h == 11:\n        return '1 11'\n    if n == d == h == 12:\n        return '1 12'\n    if n == d == h == 13:\n        return '1 13'\n    if n == d == h == 14:\n        return '1 14'\n    if n == d == h == 15:\n        return '1 15'\n    if n == d == h == 16:\n        return '1 16'\n    if n == d == h == 17:\n        return '1 17'\n    if n == d == h == 18:\n        return '1 18'\n    if n == d == h == 19:\n        return '1 19'\n    if n == d == h == 20:\n        return '1 20'\n    if n == d == h == 21:\n        return '1 21'\n    if n == d == h == 22:\n        return '1 22'\n    if n == d == h == 23:\n        return '1 23'\n    if n == d == h == 24:\n        return '1 24'\n    if n == d == h == 25:\n        return '1 25'\n    if n == d == h == 26:\n        return '1 26'\n    if n == d == h == 27:\n        return '1 27'\n    if n == d == h == 28:\n        return '1 28'\n    if n == d == h == 29:\n        return '1 29'\n    if n == d == h == 30:\n        return '1 30'\n    if n == d == h == 31:\n        return '1 31'\n    if n == d == h == 32:\n        return '1 32'\n    if n == d == h == 33:\n        return '1 33'\n    if n == d == h == 34:\n        return '1 34'\n    if n == d == h == 35:\n        return '1 35'\n    if n == d == h == 36:\n        return '1 36'\n    if n == d == h == 37:\n        return '1 37'\n    if n == d == h == 38:\n        return '1 38'\n    if n == d == h == 39:\n        return '1 39'\n    if n == d == h == 40:\n        return '1 40'\n    if n == d == h == 41:\n        return '1 41'\n    if n == d == h == 42:\n        return '1 42'\n    if n == d == h == 43:\n        return '1 43'\n    if n == d == h == 44:\n        return '1 44'\n    if n == d == h == 45:\n        return '1 45'\n    if n == d == h == 46:\n        return '1 46'\n    if n == d == h == 47:\n        return '1 47'\n    if n == d == h == 48:\n        return '1 48'\n    if n == d == h == 49:\n        return '1 49'\n    if n == d == h == 50:\n        return '1 50'\n    if n == d == h == 51:\n        return '1 51'\n    if n == d == h == 52:\n        return '1 52'\n    if n == d == h == 53:\n        return '1 53'\n    if n == d == h == 54:\n        return '1 54'\n    if n == d == h == 55:\n        return '1 55'\n    if n == d == h == 56:\n        return '1 56'\n    if n == d == h == 57:\n        return '1 57'\n    if n == d == h == 58:\n        return '1 58'\n    if n == d == h == 59:\n        return '1 59'\n    if n == d == h == 60:\n        return '1 60'\n    if n == d == h == 61:\n        return '1 61'\n    if n == d == h == 62:\n        return '1 62'\n    if n == d == h == 63:\n        return '1 63'\n    if n == d == h == 64:\n        return '1 64'\n    if n == d == h == 65:\n        return '1 65'\n    if n == d == h == 66:\n        return '1 66'\n    if n == d == h == 67:\n        return '1 67'\n    if n == d == h == 68:\n        return '1 68'\n    if n == d == h == 69:\n        return '1 69'\n    if n == d == h == 70:\n        return '1 70'\n    if n == d == h == 71:\n        return '1 71'\n    if n == d == h == 72:\n        return '1 72'\n    if n == d == h == 73:\n        return '1 73'\n    if n == d == h == 74:\n        return '1 74'\n    if n == d == h == 75:\n        return '1 75'\n    if n == d == h == 76:\n        return '1 76'\n    if n == d == h == 77:\n        return '1 77'\n    if n == d == h == 78:\n        return '1 78'\n    if n == d == h == 79:\n        return '1 79'\n    if n == d == h == 80:\n        return '1 80'\n    if n == d == h == 81:\n        return '1 81'\n    if n == d == h == 82:\n        return '1 82'\n    if n == d == h == 83:\n        return '1 83'\n    if n == d == h == 84:\n        return '1 84'\n    if n == d == h == 85:\n        return '1 85'\n"
    },
    {
        "number": 518,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    return str(2 * r * (n - 1) / (n + 1))"
    },
    {
        "number": 519,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l = int(stdin.readline())\n    p = int(stdin.readline())\n    q = int(stdin.readline())\n    return str(l / 2 - p / 2)\n\nassert(solution('''100\n50\n50''') == '50')\nassert(solution('''199\n60\n40''') == '119.4')\nassert(solution('''100\n50\n50''') == '50')\nassert(solution('''199\n60\n40''') == '119.4')\nassert(solution('''100\n50\n50''') == '50')\nassert(solution('''199\n60\n40''') == '119.4')\nassert(solution('''100\n50\n50''') == '50')\nassert(solution('''199\n60\n40''') == '119.4')\nassert(solution('''100\n50\n50''') == '50')\nassert(solution('''199\n60\n40''') == '119.4')\nassert(solution('''100\n50\n50''') == '50')\nassert(solution('''199\n60\n40''') == '119.4')\nassert(solution('''100\n50\n50''') == '50')\nassert(solution('''199\n60\n40''') == '119.4')\nassert(solution('''100\n50\n50''') == '50')\nassert(solution('''199\n60\n40''') == '119.4')\nassert(solution('''100\n50\n50''') == '50')\nassert(solution('''199\n60\n40''') == '119.4')\nassert(solution('''100\n50\n50''') == '50')\nassert(solution('''199\n60\n40''') == '119.4')\nassert(solution('''100\n50\n50''') == '50')\nassert(solution('''199\n60\n40''') == '119.4')\nassert(solution('''100\n50\n50''') == '50')\nassert(solution('''199\n60\n40''') == '119.4')\nassert(solution('''100\n50\n50''') == '50')\nassert(solution('''199\n60\n40''') == '119.4')\nassert(solution('''100\n50\n50''') == '50')\nassert(solution('''199\n60\n40''') == '119.4')\nassert(solution('''100\n50\n50''') == '50')\nassert(solution('''199\n60\n40''') == '119.4')\nassert(solution('''100\n50\n50''') == '50')\nassert(solution('''199\n60\n40''') == '119.4')\nassert(solution('''100\n50\n50''') == '50')\nassert(solution('''199\n60\n40''') == '119.4')\nassert(solution('''100\n50\n50''') == '50')\nassert(solution('''199\n60\n40''') == '119.4')\nassert(solution('''100\n50\n50''') == '50')\nassert(solution('''199\n60\n40''') == '119.4')\nassert(solution('''100\n50\n50''') == '50')\nassert(solution('''199\n60\n40''') == '119.4')\nassert(solution('''100\n50\n50''') == '50')\nassert(solution('''199\n60\n40''') == '119.4')\nassert(solution('''100\n50\n50''') == '50')\nassert(solution('''199\n60\n40''') == '119.4')\nassert(solution('''100\n50\n50''') == '50')\nassert(solution('''199\n60\n40''') == '119.4')\nassert(solution('''100\n50\n50''') == '50')\nassert(solution('''199\n60\n40''') == '119.4')\nassert(solution('''100\n50\n50''') == '50')\nassert(solution('''199\n60\n40''') == '119.4')\nassert(solution('''100\n50\n50''') == '50')\nassert(solution('''199\n60\n40''') == '119.4')\nassert(solution('''100\n50\n50''') == '50')\nassert(solution('''199\n60\n40''') == '119.4')\nassert(solution('''100\n50\n50''') == '50')\nassert(solution('''199\n60\n40''') == '119.4')\nassert(solution('''100\n50\n50''') == '50')\nassert(solution('''199\n60\n40''') == '119.4')\nassert(solution('''100\n50\n50''') == '50')\nassert(solution('''199\n60\n40''') == '119.4')\nassert(solution('''100\n50\n50''') == '50')\nassert(solution('''199\n60\n40''') == '119.4')\nassert(solution('''100\n50\n50''') == '50')\nassert(solution('''199\n60\n40''') == '119.4')\nassert(solution('''100\n50\n50''') == '50')\nassert(solution('''199\n60\n40''') == '119.4')\nassert(solution('''100\n50\n50''') == '50')\nassert(solution('''199\n60\n40''') == '119.4')\nassert(solution('''100\n50\n50''') == '50')\nassert(solution('''199\n60\n40''') == '119.4')\nassert(solution('''100\n50\n50''') == '50')\nassert(solution('''199\n60\n40''') == '119.4')\nassert(solution('''100\n50\n50''')"
    },
    {
        "number": 520,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    entries = [int(x) for x in stdin.readline().split()]\n    entries.sort()\n    for i in range(n):\n        if entries[i] - i > 1:\n            return str(entries[i] - 1)\n    return str(entries[-1] + 1)"
    },
    {
        "number": 521,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[0]\n    if n < 2:\n        return \"No\"\n    if n == 2:\n        return \"Yes\"\n    if n == 3:\n        return \"Yes\"\n    if n == 4:\n        return \"Yes\"\n    if n == 5:\n        return \"Yes\"\n    if n == 6:\n        return \"Yes\"\n    if n == 7:\n        return \"Yes\"\n    if n == 8:\n        return \"Yes\"\n    if n == 9:\n        return \"Yes\"\n    if n == 10:\n        return \"Yes\"\n    if n == 11:\n        return \"Yes\"\n    if n == 12:\n        return \"Yes\"\n    if n == 13:\n        return \"Yes\"\n    if n == 14:\n        return \"Yes\"\n    if n == 15:\n        return \"Yes\"\n    if n == 16:\n        return \"Yes\"\n    if n == 17:\n        return \"Yes\"\n    if n == 18:\n        return \"Yes\"\n    if n == 19:\n        return \"Yes\"\n    if n == 20:\n        return \"Yes\"\n    if n == 21:\n        return \"Yes\"\n    if n == 22:\n        return \"Yes\"\n    if n == 23:\n        return \"Yes\"\n    if n == 24:\n        return \"Yes\"\n    if n == 25:\n        return \"Yes\"\n    if n == 26:\n        return \"Yes\"\n    if n == 27:\n        return \"Yes\"\n    if n == 28:\n        return \"Yes\"\n    if n == 29:\n        return \"Yes\"\n    if n == 30:\n        return \"Yes\"\n    if n == 31:\n        return \"Yes\"\n    if n == 32:\n        return \"Yes\"\n    if n == 33:\n        return \"Yes\"\n    if n == 34:\n        return \"Yes\"\n    if n == 35:\n        return \"Yes\"\n    if n == 36:\n        return \"Yes\"\n    if n == 37:\n        return \"Yes\"\n    if n == 38:\n        return \"Yes\"\n    if n == 39:\n        return \"Yes\"\n    if n == 40:\n        return \"Yes\"\n    if n == 41:\n        return \"Yes\"\n    if n == 42:\n        return \"Yes\"\n    if n == 43:\n        return \"Yes\"\n    if n == 44:\n        return \"Yes\"\n    if n == 45:\n        return \"Yes\"\n    if n == 46:\n        return \"Yes\"\n    if n == 47:\n        return \"Yes\"\n    if n == 48:\n        return \"Yes\"\n    if n == 49:\n        return \"Yes\"\n    if n == 50:\n        return \"Yes\"\n    if n == 51:\n        return \"Yes\"\n    if n == 52:\n        return \"Yes\"\n    if n == 53:\n        return \"Yes\"\n    if n == 54:\n        return \"Yes\"\n    if n == 55:\n        return \"Yes\"\n    if n == 56:\n        return \"Yes\"\n    if n == 57:\n        return \"Yes\"\n    if n == 58:\n        return \"Yes\"\n    if n == 59:\n        return \"Yes\"\n    if n == 60:\n        return \"Yes\"\n    if n == 61:\n        return \"Yes\"\n    if n == 62:\n        return \"Yes\"\n    if n == 63:\n        return \"Yes\"\n    if n == 64:\n        return \"Yes\"\n    if n == 65:\n        return \"Yes\"\n    if n == 66:\n        return \"Yes\"\n    if n == 67:\n        return \"Yes\"\n    if n == 68:\n        return \"Yes\"\n    if n == 69:\n        return \"Yes\"\n    if n == 70:\n        return \"Yes\"\n    if n == 71:\n        return \"Yes\"\n    if n == 72:\n        return \"Yes\"\n    if n == 73:\n        return \"Yes\"\n    if n == 74:\n        return \"Yes\"\n    if n == 75:\n        return \"Yes\"\n    if n == 76:\n        return \"Yes\"\n    if n == 77:\n        return \"Yes\"\n    if n == 78:\n        return \"Yes\"\n    if n == 79:\n        return \"Yes\"\n    if n == 80:\n        return \"Yes\"\n    if n == 81:\n        return \"Yes\"\n    if n == 82:\n        return \"Yes\"\n    if n == 83:\n        return \"Yes\"\n    if n == 84:\n        return \"Yes\"\n    if n == 85:\n        return \"Yes\"\n    if n == 86:\n        return \"Yes\"\n    if n == 87:\n        return \"Yes\"\n    if n == 88:\n        return \"Yes\"\n    if n == 89:\n        return \"Yes\"\n    if n == 90:\n        return \"Yes\"\n    if n == 91:\n        return \"Yes\"\n    if n == 92:\n        return \"Yes\"\n    if n == 93:\n        return \"Yes\"\n    if n == 94:\n        return \"Yes\"\n    if n == 95:\n        return \"Yes\"\n    if n == 96:\n        return \"Yes\"\n    if n == 97:\n        return \"Yes\"\n    if n == 98:\n        return \"Yes\"\n    if n == 99:\n        return \"Yes\"\n    if n == 100:\n        return \"Yes\"\n    if n == 101:\n        return \"Yes\"\n    if n == 102:\n        return \"Yes\"\n    if n == 103:\n        return \"Yes\"\n    if n == 104:\n        return \"Yes\"\n    if n == 105:\n        return \"Yes\"\n    if n == 106:\n        return \"Yes\"\n    if n == 107:\n        return \"Yes\"\n    if n == 108:\n        return \"Yes\"\n    if n == 109:\n        return \"Yes\"\n    if n == 110:\n        return \"Yes\"\n    if n == 111:\n        return \"Yes\"\n    if n == 112:\n        return \"Yes\"\n    if n == 113:\n        return \"Yes\"\n    if n == 114:\n        return \"Yes\"\n    if n == 115:\n        return \"Yes\"\n    if n == 116:\n        return \"Yes\"\n    if n == 117:\n        return \"Yes"
    },
    {
        "number": 522,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, f1, f2, f3, c = [int(x) for x in stdin.split()]\n    f = [f1, f2, f3]\n    for i in range(3, n):\n        f.append((f[-1] * f[-2] * f[-3]) % (10 ** 9 + 7))\n    return str(f[-1] % (10 ** 9 + 7))"
    },
    {
        "number": 523,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    strings = [stdin[i:i+m] for i in range(n)]\n    strings.sort(key=len, reverse=True)\n    for i in range(n):\n        for j in range(i+1, n):\n            if is_palindrome(strings[i]+strings[j]):\n                return len(strings[i]+strings[j])\n    return 0\n\ndef"
    },
    {
        "number": 524,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    cost = 0\n    for i in range(n):\n        if i == 0:\n            cost += abs(a[i] - 1)\n        elif i == n - 1:\n            cost += abs(a[i] - 1)\n        else:\n            cost += abs(a[i] - a[i - 1])\n    return str(cost)"
    },
    {
        "number": 525,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 526,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [list(map(int, stdin.split())) for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 0:\n                continue\n            for k in range(m):\n                if a[i][k] == 0:\n                    continue\n                if a[i][j] & a[i][k] > 0:\n                    break\n            else:\n                return \"NIE\"\n    return \"TAK\""
    },
    {
        "number": 527,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    return str(len(s) - len(t))"
    },
    {
        "number": 528,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    friends = [[] for _ in range(n)]\n    for _ in range(m):\n        a, b = [int(x) for x in stdin.split()]\n        friends[a - 1].append(b - 1)\n        friends[b - 1].append(a - 1)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if j in friends[i]:\n                continue\n            for k in range(j + 1, n):\n                if k in friends[i] or k in friends[j]:\n                    continue\n                if i in friends[k] or j in friends[k]:\n                    return \"YES\"\n    return \"NO\""
    },
    {
        "number": 529,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.lower()\n\nassert(solution(\"APrilFool\") == \"AprILFooL\")\nassert(solution(\"APrilFool\") == \"AprILFooL\")\nassert(solution(\"APrilFool\") == \"AprILFooL\")\nassert(solution(\"APrilFool\") == \"AprILFooL\")\nassert(solution(\"APrilFool\") == \"AprILFooL\")\nassert(solution(\"APrilFool\") == \"AprILFooL\")\nassert(solution(\"APrilFool\") == \"AprILFooL\")\nassert(solution(\"APrilFool\") == \"AprILFooL\")\nassert(solution(\"APrilFool\") == \"AprILFooL\")\nassert(solution(\"APrilFool\") == \"AprILFooL\")\nassert(solution(\"APrilFool\") == \"AprILFooL\")\nassert(solution(\"APrilFool\") == \"AprILFooL\")\nassert(solution(\"APrilFool\") == \"AprILFooL\")\nassert(solution(\"APrilFool\") == \"AprILFooL\")\nassert(solution(\"APrilFool\") == \"AprILFooL\")\nassert(solution(\"APrilFool\") == \"AprILFooL\")\nassert(solution(\"APrilFool\") == \"AprILFooL\")\nassert(solution(\"APrilFool\") == \"AprILFooL\")\nassert(solution(\"APrilFool\") == \"AprILFooL\")\nassert(solution(\"APrilFool\") == \"AprILFooL\")\nassert(solution(\"APrilFool\") == \"AprILFooL\")\nassert(solution(\"APrilFool\") == \"AprILFooL\")\nassert(solution(\"APrilFool\") == \"AprILFooL\")\nassert(solution(\"APrilFool\") == \"AprILFooL\")\nassert(solution(\"APrilFool\") == \"AprILFooL\")\nassert(solution(\"APrilFool\") == \"AprILFooL\")\nassert(solution(\"APrilFool\") == \"AprILFooL\")\nassert(solution(\"APrilFool\") == \"AprILFooL\")\nassert(solution(\"APrilFool\") == \"AprILFooL\")\nassert(solution(\"APrilFool\") == \"AprILFooL\")\nassert(solution(\"APrilFool\") == \"AprILFooL\")\nassert(solution(\"APrilFool\") == \"AprILFooL\")\nassert(solution(\"APrilFool\") == \"AprILFooL\")\nassert(solution(\"APrilFool\") == \"AprILFooL\")\nassert(solution(\"APrilFool\") == \"AprILFooL\")\nassert(solution(\"APrilFool\") == \"AprILFooL\")\nassert(solution(\"APrilFool\") == \"AprILFooL\")\nassert(solution(\"APrilFool\") == \"AprILFooL\")\nassert(solution(\"APrilFool\") == \"AprILFooL\")\nassert(solution(\"APrilFool\") == \"AprILFooL\")\nassert(solution(\"APrilFool\") == \"AprILFooL\")\nassert(solution(\"APrilFool\") == \"AprILFooL\")\nassert(solution(\"APrilFool\") == \"AprILFooL\")\nassert(solution(\"APrilFool\") == \"AprILFooL\")\nassert(solution(\"APrilFool\") == \"AprILFooL\")\nassert(solution(\"APrilFool\") == \"AprILFooL\")\nassert(solution(\"APrilFool\") == \"AprILFooL\")\nassert(solution(\"APrilFool\") == \"AprILFooL\")\nassert(solution(\"APrilFool\") == \"AprILFooL\")\nassert(solution(\"APrilFool\") == \"AprILFooL\")\nassert(solution(\"APrilFool\") == \"AprILFooL\")\nassert(solution(\"APrilFool\") == \"AprILFooL\")\nassert(solution(\"APrilFool\") == \"AprILFooL\")\nassert(solution(\"APrilFool\") == \"AprILFooL\")\nassert(solution(\"APrilFool\") == \"AprILFooL\")\nassert(solution(\"APrilFool\") == \"AprILFooL\")\nassert(solution(\"APrilFool\") == \"AprILFooL\")\nassert(solution(\"APrilFool\") == \"AprILFooL\")\nassert(solution(\"APrilFool\") == \"AprILFooL\")\nassert(solution(\"APrilFool\") == \"AprILFooL\")\nassert(solution(\"APrilFool\") == \"AprILFooL\")\nassert(solution(\"APrilFool\") == \"AprILFooL\")\nassert(solution(\"APrilFool\") == \"AprILFooL\")\nassert(solution(\"APrilFool\") == \"AprILFooL\")\nassert(solution(\"APrilFool\") == \"AprILFooL\")\nassert(solution(\"APrilFool\") == \"AprILFooL\")\nassert(solution(\"APrilFool\") == \"AprILFooL\")\nassert(solution(\"APrilFool\") == \"AprILFooL\")\nassert(solution(\"APrilFool\") == \"AprILFooL\")\nassert(solution(\"APrilFool\") == \"AprILFooL\")\nassert(solution(\"APrilFool\") == \"AprILFooL\")\nassert(solution(\"APrilFool\") == \"AprILFooL\")\nassert(solution(\"APrilFool\") == \"AprILFooL\")\nassert(solution(\"APrilFool\") == \"AprILFooL\")\nassert(solution(\"APrilFool\") == \"AprILFooL\")\nassert(solution(\"APrilFool\") == \"AprILFooL\")\nassert(solution(\"APrilFool\") == \"AprILFooL\")\nassert(solution(\"APrilFool\") == \"AprILFooL\")\nassert(solution(\"APrilFool\") == \"AprILFooL\")\nassert(solution(\"APrilFool\") == \"AprILFooL\")\nassert(solution(\"APrilFool\") == \"AprILFooL\")\nassert(solution(\"APrilFool\") == \"AprILFooL\")\nassert(solution(\"APrilFool\") == \"AprILFooL\")\nassert(solution(\"APrilFool\") == \"AprILFooL\")\nassert(solution(\"APrilFool\") == \"AprILFooL\")\nassert(solution(\"APrilFool\") == \"AprILFooL\")\nassert(solution(\"APrilFool\") == \"AprILFooL\")\nassert(solution(\"APrilFool\") == \"AprILFooL\")\nassert(solution(\"APrilFool\") == \"AprILFooL\")\nassert(solution(\"APrilFool\") == \"AprILFooL\")\nassert(solution(\"APrilFool\") == \"AprILFooL\")\nassert(solution(\"APrilFool\") == \"AprILFooL\")\nassert(solution(\"APrilFool\") == \"AprILFooL\")\nassert(solution(\"APrilFool\") == \"AprILFooL\")\nassert(solution(\"APrilFool\") == \"AprILFooL\")\nassert(solution(\"APrilFool\") == \"AprILFooL\")\nassert(solution(\"APrilFool\") == \"AprILFooL\")\nassert(solution(\"APrilFool\") == \"AprILFooL\")\nassert(solution(\"APrilFool\") == \"AprILFooL\")\nassert(solution(\"APrilFool\") == \"AprILFooL\")\nassert(solution(\"APrilFool\") == \"AprILFooL\")\nassert(solution(\"APrilF"
    },
    {
        "number": 530,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n    \n    if n == 1:\n        return \"First\"\n    \n    if n == 2:\n        if s[0] == t[0]:\n            return \"Draw\"\n        elif s[0] == t[1]:\n            return \"Second\"\n        else:\n            return \"First\"\n    \n    if s[0] == t[0]:\n        return \"First\"\n    elif s[0] == t[1]:\n        return \"Second\"\n    else:\n        return \"First\""
    },
    {
        "number": 531,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    x = list(map(int, stdin.readline().split()))\n    y = [0] * n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if x[i] == x[j]:\n                y[i] += 1\n                y[j] += 1\n    return''.join(map(str, y))\n\nprint(solution(input()))\n"
    },
    {
        "number": 532,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 533,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a1, a2, k1, k2, n = [int(x) for x in stdin.split()]\n    if n % (a1 * k1 + a2 * k2)!= 0:\n        return '0 0'\n    return f'{n // (a1 * k1 + a2 * k2) - 1} {n // (a1 * k1 + a2 * k2) + 1}'\n\nprint(solution(input()))\n"
    },
    {
        "number": 534,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = [int(x) for x in stdin.split()]\n    s = stdin[1:]\n    queue = [x for x in s]\n    for _ in range(t):\n        for i in range(1, n):\n            if queue[i] == \"B\" and queue[i - 1] == \"G\":\n                queue[i], queue[i - 1] = queue[i - 1], queue[i]\n    return \"\".join(queue)"
    },
    {
        "number": 535,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(int(n * (1 + 2 * k) / (4 * k + 1) % (10 ** 9 + 7)))"
    },
    {
        "number": 536,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    if n * m == 0:\n        return '-1'\n    if n == 1:\n        return '1' * m\n    if m == 1:\n        return '0' * n\n    if n == m:\n        return '0' * n\n    if n > m:\n        return '-1'\n    if n < m:\n        return '-1'\n    if n % 2 == 0:\n        return '0' * (n // 2) + '1' * (n // 2)\n    if n % 2 == 1:\n        return '0' * (n // 2) + '1' * (n // 2 + 1)"
    },
    {
        "number": 537,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k > n / 2:\n        return '0 0 {}'.format(n)\n    else:\n        return '{} {} {}'.format(k * (n - k), k * k, n - k * (n - k))"
    },
    {
        "number": 538,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 10:\n        return \"NO\"\n    if n == 10:\n        return \"YES\"\n    if n % 10 == 0:\n        return \"NO\"\n    if n % 10 == 1:\n        return \"NO\"\n    if n % 10 == 2:\n        return \"NO\"\n    if n % 10 == 3:\n        return \"NO\"\n    if n % 10 == 4:\n        return \"NO\"\n    if n % 10 == 5:\n        return \"NO\"\n    if n % 10 == 6:\n        return \"NO\"\n    if n % 10 == 7:\n        return \"NO\"\n    if n % 10 == 8:\n        return \"NO\"\n    if n % 10 == 9:\n        return \"NO\"\n    return \"NO\"\n\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\n"
    },
    {
        "number": 539,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(binomial(n, 3))\n\ndef"
    },
    {
        "number": 540,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 541,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split()]\n    islands = [int(x) for x in stdin.split()]\n    bridges = 0\n    for i in range(N - 1):\n        if islands[i] > islands[i + 1]:\n            bridges += 1\n    return bridges"
    },
    {
        "number": 542,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    a.sort()\n    if a[0] > 0:\n        return \"first\"\n    elif a[0] < 0:\n        return \"second\"\n    else:\n        for i in range(1, n):\n            if a[i] > 0:\n                return \"first\"\n            elif a[i] < 0:\n                return \"second\"\n        return \"first\""
    },
    {
        "number": 543,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    if n == 1:\n        return \"YES\"\n    if n == 2:\n        return \"NO\"\n    if n == 3:\n        return \"YES\"\n    if n == 4:\n        return \"NO\"\n    if n == 5:\n        return \"YES\"\n    if n == 6:\n        return \"NO\"\n    if n == 7:\n        return \"YES\"\n    if n == 8:\n        return \"NO\"\n    if n == 9:\n        return \"YES\"\n    if n == 10:\n        return \"NO\"\n    if n == 11:\n        return \"YES\"\n    if n == 12:\n        return \"NO\"\n    if n == 13:\n        return \"YES\"\n    if n == 14:\n        return \"NO\"\n    if n == 15:\n        return \"YES\"\n    if n == 16:\n        return \"NO\"\n    if n == 17:\n        return \"YES\"\n    if n == 18:\n        return \"NO\"\n    if n == 19:\n        return \"YES\"\n    if n == 20:\n        return \"NO\"\n    if n == 21:\n        return \"YES\"\n    if n == 22:\n        return \"NO\"\n    if n == 23:\n        return \"YES\"\n    if n == 24:\n        return \"NO\"\n    if n == 25:\n        return \"YES\"\n    if n == 26:\n        return \"NO\"\n    if n == 27:\n        return \"YES\"\n    if n == 28:\n        return \"NO\"\n    if n == 29:\n        return \"YES\"\n    if n == 30:\n        return \"NO\"\n    if n == 31:\n        return \"YES\"\n    if n == 32:\n        return \"NO\"\n    if n == 33:\n        return \"YES\"\n    if n == 34:\n        return \"NO\"\n    if n == 35:\n        return \"YES\"\n    if n == 36:\n        return \"NO\"\n    if n == 37:\n        return \"YES\"\n    if n == 38:\n        return \"NO\"\n    if n == 39:\n        return \"YES\"\n    if n == 40:\n        return \"NO\"\n    if n == 41:\n        return \"YES\"\n    if n == 42:\n        return \"NO\"\n    if n == 43:\n        return \"YES\"\n    if n == 44:\n        return \"NO\"\n    if n == 45:\n        return \"YES\"\n    if n == 46:\n        return \"NO\"\n    if n == 47:\n        return \"YES\"\n    if n == 48:\n        return \"NO\"\n    if n == 49:\n        return \"YES\"\n    if n == 50:\n        return \"NO\"\n    if n == 51:\n        return \"YES\"\n    if n == 52:\n        return \"NO\"\n    if n == 53:\n        return \"YES\"\n    if n == 54:\n        return \"NO\"\n    if n == 55:\n        return \"YES\"\n    if n == 56:\n        return \"NO\"\n    if n == 57:\n        return \"YES\"\n    if n == 58:\n        return \"NO\"\n    if n == 59:\n        return \"YES\"\n    if n == 60:\n        return \"NO\"\n    if n == 61:\n        return \"YES\"\n    if n == 62:\n        return \"NO\"\n    if n == 63:\n        return \"YES\"\n    if n == 64:\n        return \"NO\"\n    if n == 65:\n        return \"YES\"\n    if n == 66:\n        return \"NO\"\n    if n == 67:\n        return \"YES\"\n    if n == 68:\n        return \"NO\"\n    if n == 69:\n        return \"YES\"\n    if n == 70:\n        return \"NO\"\n    if n == 71:\n        return \"YES\"\n    if n == 72:\n        return \"NO\"\n    if n == 73:\n        return \"YES\"\n    if n == 74:\n        return \"NO\"\n    if n == 75:\n        return \"YES\"\n    if n == 76:\n        return \"NO\"\n    if n == 77:\n        return \"YES\"\n    if n == 78:\n        return \"NO\"\n    if n == 79:\n        return \"YES\"\n    if n == 80:\n        return \"NO\"\n    if n == 81:\n        return \"YES\"\n    if n == 82:\n        return \"NO\"\n    if n == 83:\n        return \"YES\"\n    if n == 84:\n        return \"NO\"\n    if n == 85:\n        return \"YES\"\n    if n == 86:\n        return \"NO\"\n    if n == 87:\n        return \"YES\"\n    if n == 88:\n        return \"NO\"\n    if n == 89:\n        return \"YES\"\n    if n == 90:\n        return \"NO\"\n    if n == 91:\n        return \"YES\"\n    if n == 92:\n        return \"NO\"\n    if n == 93:\n        return \"YES\"\n    if n == 94:\n        return \"NO\"\n    if n == 95:\n        return \"YES\"\n    if n == 96:\n        return \"NO\"\n    if n == 97:\n        return \"YES\"\n    if n == 98:\n        return \"NO\"\n    if n == 99:\n        return \"YES\"\n    if n == 100:\n        return \"NO\"\n    if n == 101:\n        return \"YES\"\n    if n == 102:\n        return \"NO\"\n    if n == 103:\n        return \"YES\"\n    if n == 104:\n        return \"NO\"\n    if n == 105:\n        return \"YES\"\n    if n == 106:\n        return \"NO\"\n    if n == 107:\n        return \"YES\"\n    if n == 108:\n        return"
    },
    {
        "number": 544,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline().strip())\n    for _ in range(T):\n        n = int(stdin.readline().strip())\n        s = stdin.readline().strip()\n        if is_palindrome(s):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\ndef"
    },
    {
        "number": 545,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    s_1 = stdin.strip()\n    s_2 = stdin.strip()\n    if t > n:\n        return -1\n    if t == 0:\n        return s_1\n    if t == n:\n        return s_2\n    if t == 1:\n        return ''.join(a if a!= b else 'a' for a, b in zip(s_1, s_2))\n    if t == 2:\n        return ''.join(a if a!= b else 'a' for a, b in zip(s_1, s_2))\n    if t == 3:\n        return ''.join(a if a!= b else 'a' for a, b in zip(s_1, s_2))\n    if t == 4:\n        return ''.join(a if a!= b else 'a' for a, b in zip(s_1, s_2))\n    if t == 5:\n        return ''.join(a if a!= b else 'a' for a, b in zip(s_1, s_2))\n    if t == 6:\n        return ''.join(a if a!= b else 'a' for a, b in zip(s_1, s_2))\n    if t == 7:\n        return ''.join(a if a!= b else 'a' for a, b in zip(s_1, s_2))\n    if t == 8:\n        return ''.join(a if a!= b else 'a' for a, b in zip(s_1, s_2))\n    if t == 9:\n        return ''.join(a if a!= b else 'a' for a, b in zip(s_1, s_2))\n    if t == 10:\n        return ''.join(a if a!= b else 'a' for a, b in zip(s_1, s_2))\n    if t == 11:\n        return ''.join(a if a!= b else 'a' for a, b in zip(s_1, s_2))\n    if t == 12:\n        return ''.join(a if a!= b else 'a' for a, b in zip(s_1, s_2))\n    if t == 13:\n        return ''.join(a if a!= b else 'a' for a, b in zip(s_1, s_2))\n    if t == 14:\n        return ''.join(a if a!= b else 'a' for a, b in zip(s_1, s_2))\n    if t == 15:\n        return ''.join(a if a!= b else 'a' for a, b in zip(s_1, s_2))\n    if t == 16:\n        return ''.join(a if a!= b else 'a' for a, b in zip(s_1, s_2))\n    if t == 17:\n        return ''.join(a if a!= b else 'a' for a, b in zip(s_1, s_2))\n    if t == 18:\n        return ''.join(a if a!= b else 'a' for a, b in zip(s_1, s_2))\n    if t == 19:\n        return ''.join(a if a!= b else 'a' for a, b in zip(s_1, s_2))\n    if t == 20:\n        return ''.join(a if a!= b else 'a' for a, b in zip(s_1, s_2))\n    if t == 21:\n        return ''.join(a if a!= b else 'a' for a, b in zip(s_1, s_2))\n    if t == 22:\n        return ''.join(a if a!= b else 'a' for a, b in zip(s_1, s_2))\n    if t == 23:\n        return ''.join(a if a!= b else 'a' for a, b in zip(s_1, s_2))\n    if t == 24:\n        return ''.join(a if a!= b else 'a' for a, b in zip(s_1, s_2))\n    if t == 25:\n        return ''.join(a if a!= b else 'a' for a, b in zip(s_1, s_2))\n    if t == 26:\n        return ''.join(a if a!= b else 'a' for a, b in zip(s_1, s_2))\n    if t == 27:\n        return ''.join(a if a!= b else 'a' for a, b in zip(s_1, s_2))\n    if t == 28:\n        return ''.join(a if a!= b else 'a' for a, b in zip(s_1, s_2))\n    if t == 29:\n        return ''.join(a if a!= b else 'a' for a, b in zip(s_1, s_2))\n    if t == 30:\n        return ''.join(a if a!= b else 'a' for a, b in zip(s_1, s_2))\n    if t == 31:\n        return ''.join(a if a!= b else 'a' for a, b in zip(s_1, s_2))\n    if t == 32:\n        return ''.join(a if a!= b else 'a' for a, b in zip(s_1, s_2))\n    if t == 33:\n        return ''.join(a if a!= b else 'a' for a, b in zip(s_1, s_2))\n    if t == 34:\n        return ''.join(a if a!= b else 'a' for a, b in zip(s_1, s_2))\n    if t == 35:\n        return ''.join(a if a!= b else 'a' for a, b in zip(s_1, s_2))\n    if t == 36:\n        return ''.join(a if a!= b else 'a' for a, b in zip(s_1, s_2))\n    if t == 37:\n        return ''.join(a if a!= b else 'a' for a, b in zip(s_1, s_2))\n    if t == 38:\n        return ''.join(a if a!= b else 'a' for a, b in zip(s_1, s_2))\n    if t == 39:\n        return ''.join(a if a!= b else 'a' for a, b in zip(s_1, s_2))\n    if t == 40:\n        return ''.join(a if a!= b else 'a' for a, b in zip(s_1, s_2))\n    if t == 41:\n        return ''.join(a if a!= b else 'a' for a, b in zip(s_1, s_2))\n    if t == 42:\n        return ''.join(a if a!= b else 'a' for a, b in zip(s_1, s_2))\n    if t == 43:\n        return ''.join(a if a!= b else 'a' for a, b in zip(s_1, s_2))\n    if t == 44:\n        return ''.join(a if a!= b else 'a' for a, b in"
    },
    {
        "number": 546,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pattern = stdin.strip()\n    n = int(stdin.readline().strip())\n    for _ in range(n):\n        query = stdin.readline().strip()\n        if is_match(pattern, query):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\ndef"
    },
    {
        "number": 547,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    passwords = [x for x in stdin.split()]\n    vanya_password = stdin.split()[-1]\n    passwords.sort(key=len)\n    passwords.sort(key=lambda x: x[0])\n    passwords.sort(key=lambda x: x[1])\n    passwords.sort(key=lambda x: x[2])\n    passwords.sort(key=lambda x: x[3])\n    passwords.sort(key=lambda x: x[4])\n    passwords.sort(key=lambda x: x[5])\n    passwords.sort(key=lambda x: x[6])\n    passwords.sort(key=lambda x: x[7])\n    passwords.sort(key=lambda x: x[8])\n    passwords.sort(key=lambda x: x[9])\n    passwords.sort(key=lambda x: x[10])\n    passwords.sort(key=lambda x: x[11])\n    passwords.sort(key=lambda x: x[12])\n    passwords.sort(key=lambda x: x[13])\n    passwords.sort(key=lambda x: x[14])\n    passwords.sort(key=lambda x: x[15])\n    passwords.sort(key=lambda x: x[16])\n    passwords.sort(key=lambda x: x[17])\n    passwords.sort(key=lambda x: x[18])\n    passwords.sort(key=lambda x: x[19])\n    passwords.sort(key=lambda x: x[20])\n    passwords.sort(key=lambda x: x[21])\n    passwords.sort(key=lambda x: x[22])\n    passwords.sort(key=lambda x: x[23])\n    passwords.sort(key=lambda x: x[24])\n    passwords.sort(key=lambda x: x[25])\n    passwords.sort(key=lambda x: x[26])\n    passwords.sort(key=lambda x: x[27])\n    passwords.sort(key=lambda x: x[28])\n    passwords.sort(key=lambda x: x[29])\n    passwords.sort(key=lambda x: x[30])\n    passwords.sort(key=lambda x: x[31])\n    passwords.sort(key=lambda x: x[32])\n    passwords.sort(key=lambda x: x[33])\n    passwords.sort(key=lambda x: x[34])\n    passwords.sort(key=lambda x: x[35])\n    passwords.sort(key=lambda x: x[36])\n    passwords.sort(key=lambda x: x[37])\n    passwords.sort(key=lambda x: x[38])\n    passwords.sort(key=lambda x: x[39])\n    passwords.sort(key=lambda x: x[40])\n    passwords.sort(key=lambda x: x[41])\n    passwords.sort(key=lambda x: x[42])\n    passwords.sort(key=lambda x: x[43])\n    passwords.sort(key=lambda x: x[44])\n    passwords.sort(key=lambda x: x[45])\n    passwords.sort(key=lambda x: x[46])\n    passwords.sort(key=lambda x: x[47])\n    passwords.sort(key=lambda x: x[48])\n    passwords.sort(key=lambda x: x[49])\n    passwords.sort(key=lambda x: x[50])\n    passwords.sort(key=lambda x: x[51])\n    passwords.sort(key=lambda x: x[52])\n    passwords.sort(key=lambda x: x[53])\n    passwords.sort(key=lambda x: x[54])\n    passwords.sort(key=lambda x: x[55])\n    passwords.sort(key=lambda x: x[56])\n    passwords.sort(key=lambda x: x[57])\n    passwords.sort(key=lambda x: x[58])\n    passwords.sort(key=lambda x: x[59])\n    passwords.sort(key=lambda x: x[60])\n    passwords.sort(key=lambda x: x[61])\n    passwords.sort(key=lambda x: x[62])\n    passwords.sort(key=lambda x: x[63])\n    passwords.sort(key=lambda x: x[64])\n    passwords.sort(key=lambda x: x[65])\n    passwords.sort(key=lambda x: x[66])\n    passwords.sort(key=lambda x: x[67])\n    passwords.sort(key=lambda x: x[68])\n    passwords.sort(key=lambda x: x[69])\n    passwords.sort(key=lambda x: x[70])\n    passwords.sort(key=lambda x: x[71])\n    passwords.sort(key=lambda x: x[72])\n    passwords.sort(key=lambda x: x[73])\n    passwords.sort(key=lambda x: x[74])\n    passwords.sort(key=lambda x: x[75])\n    passwords.sort(key=lambda x: x[76])\n    passwords.sort(key=lambda x: x[77])\n    passwords.sort(key=lambda x: x[78])\n    passwords.sort(key=lambda x:"
    },
    {
        "number": 548,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = [int(x) for x in stdin.readline().split()]\n    return \"First\" if sum(arr) % 2 == 0 else \"Second\""
    },
    {
        "number": 549,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1 or n > 10 ** 6:\n        raise ValueError(\"n must be between 1 and 10^6\")\n    if n % 2 == 0:\n        raise ValueError(\"n must be odd\")\n    return str(n // 2) + \" \" + str(n)\n"
    },
    {
        "number": 550,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 551,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 3:\n        return \"No\"\n    y = [int(x) for x in stdin.split()]\n    if max(y) < 0:\n        return \"No\"\n    return \"Yes\""
    },
    {
        "number": 552,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = stdin[:n]\n    b = stdin[n:n+m]\n    s = stdin[n+m:]\n    return str(solution_naive(a, b, s))\n\ndef"
    },
    {
        "number": 553,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    promocodes = [stdin[i:i+6] for i in range(0, n*6, 6)]\n    k = 0\n    for promocode in promocodes:\n        if promocode == promocode[::-1]:\n            k += 1\n    return k"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    flowers = [int(x) for x in stdin.split()]\n    subarrays = [tuple(map(int, x.split())) for x in stdin.split('\\n')[2:]]\n    subarrays = sorted(subarrays, key=lambda x: x[0])\n    subarrays = sorted(subarrays, key=lambda x: x[1])\n    subarrays = [x[0] for x in subarrays]\n    subarrays = [x for x in subarrays if x < n]\n    subarrays = [x for x in subarrays if x > 0]\n    subarrays = [x for x in subarrays if x < n]\n    subarrays = [x for x in subarrays if x > 0]\n    subarrays = [x for x in subarrays if x < n]\n    subarrays = [x for x in subarrays if x > 0]\n    subarrays = [x for x in subarrays if x < n]\n    subarrays = [x for x in subarrays if x > 0]\n    subarrays = [x for x in subarrays if x < n]\n    subarrays = [x for x in subarrays if x > 0]\n    subarrays = [x for x in subarrays if x < n]\n    subarrays = [x for x in subarrays if x > 0]\n    subarrays = [x for x in subarrays if x < n]\n    subarrays = [x for x in subarrays if x > 0]\n    subarrays = [x for x in subarrays if x < n]\n    subarrays = [x for x in subarrays if x > 0]\n    subarrays = [x for x in subarrays if x < n]\n    subarrays = [x for x in subarrays if x > 0]\n    subarrays = [x for x in subarrays if x < n]\n    subarrays = [x for x in subarrays if x > 0]\n    subarrays = [x for x in subarrays if x < n]\n    subarrays = [x for x in subarrays if x > 0]\n    subarrays = [x for x in subarrays if x < n]\n    subarrays = [x for x in subarrays if x > 0]\n    subarrays = [x for x in subarrays if x < n]\n    subarrays = [x for x in subarrays if x > 0]\n    subarrays = [x for x in subarrays if x < n]\n    subarrays = [x for x in subarrays if x > 0]\n    subarrays = [x for x in subarrays if x < n]\n    subarrays = [x for x in subarrays if x > 0]\n    subarrays = [x for x in subarrays if x < n]\n    subarrays = [x for x in subarrays if x > 0]\n    subarrays = [x for x in subarrays if x < n]\n    subarrays = [x for x in subarrays if x > 0]\n    subarrays = [x for x in subarrays if x < n]\n    subarrays = [x for x in subarrays if x > 0]\n    subarrays = [x for x in subarrays if x < n]\n    subarrays = [x for x in subarrays if x > 0]\n    subarrays = [x for x in subarrays if x < n]\n    subarrays = [x for x in subarrays if x > 0]\n    subarrays = [x for x in subarrays if x < n]\n    subarrays = [x for x in subarrays if x > 0]\n    subarrays = [x for x in subarrays if x < n]\n    subarrays = [x for x in subarrays if x > 0]\n    subarrays = [x for x in subarrays if x < n]\n    subarrays = [x for x in subarrays if x > 0]\n    subarrays = [x for x in subarrays if x < n]\n    subarrays = [x for x in subarrays if x > 0]\n    subarrays = [x for x in subarrays if x < n]\n    subarrays = [x for x in subarrays if x > 0]\n    subarrays = [x for x in subarrays if x < n]\n    subarrays = [x for x in subarrays if x > 0]\n    subarrays = [x for x in subarrays if x < n]\n    subarrays = [x for x in subarrays if x > 0]\n    subarrays = [x for x in subarrays if x < n]\n    subarrays = [x for x in subarrays if x > 0]\n    subarrays = [x for x in subarrays if x < n]\n    subarrays = [x for x in subarrays if x > 0]\n    subarrays = [x for x in subarrays if x < n]\n    subarrays = [x for x in subarrays if x > 0]\n    subarrays = [x for x in subarrays"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) - 1)\n\nassert(solution('27') == '22')\nassert(solution('4545') == '4444')\nassert(solution('123456789') == '12345678')\nassert(solution
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l, r, k = [int(x) for x in stdin.split()]\n    return''.join(str(2 ** i) for i in range(l, r + 1) if 2 ** i <= k)"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    teleports = [tuple(int(x) for x in stdin.split()) for _ in range(n)]\n    teleports.sort(key=lambda x: x[1])\n    teleports.sort(key=lambda x: x[0])\n    teleports = [x[0] for x in teleports]\n    teleports.append(m)\n    teleports.sort()\n    teleports = [teleports[0]] + teleports[1:-1] + [teleports[-1]]\n    for i in range(len(teleports) - 1):\n        if teleports[i] + 1!= teleports[i + 1]:\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    return str(solution_helper(n, m, k))\n\ndef"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    p = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n    b = [0] * p\n    for i in range(p):\n        b[i] = a[i] % p\n    return''.join(map(str, b))"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, c = [int(x) for x in stdin.split()]\n    cake = [list(stdin.strip()) for _ in range(r)]\n    return str(solve(cake))\n\ndef"
    },
    {
        "number": 561,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    if n == 1:\n        return '-1'\n    if a[0] == 1:\n        return str(a[-1] - 1)\n    if a[-1] == a[-2] + 1:\n        return str(a[-1] - 1)\n    return str(a[-1] - a[-2] - 1)\n\nassert(solution('''3\n4 1 7\n''') == '2')\nassert(solution('''1\n10\n''') == '-1')\nassert(solution('''4\n4 3 4 5\n''') == '0')\nassert(solution('''2\n2 4\n''') == '3')\nassert(solution('''3\n2 4\n''') == '0')\nassert(solution('''4\n1 3 4 5\n''') == '1')\nassert(solution('''5\n1 3 4 5 6\n''') == '2')\nassert(solution('''6\n1 3 4 5 6 7\n''') == '3')\nassert(solution('''7\n1 3 4 5 6 7 8\n''') == '4')\nassert(solution('''8\n1 3 4 5 6 7 8 9\n''') == '5')\nassert(solution('''9\n1 3 4 5 6 7 8 9 10\n''') == '6')\nassert(solution('''10\n1 3 4 5 6 7 8 9 10 11\n''') == '7')\nassert(solution('''11\n1 3 4 5 6 7 8 9 10 11 12\n''') == '8')\nassert(solution('''12\n1 3 4 5 6 7 8 9 10 11 12 13\n''') == '9')\nassert(solution('''13\n1 3 4 5 6 7 8 9 10 11 12 13 14\n''') == '10')\nassert(solution('''14\n1 3 4 5 6 7 8 9 10 11 12 13 14 15\n''') == '11')\nassert(solution('''15\n1 3 4 5 6 7 8 9 10 11 12 13 14 15 16\n''') == '12')\nassert(solution('''16\n1 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17\n''') == '13')\nassert(solution('''17\n1 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18\n''') == '14')\nassert(solution('''18\n1 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\n''') == '15')\nassert(solution('''19\n1 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\n''') == '16')\nassert(solution('''20\n1 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21\n''') == '17')\nassert(solution('''21\n1 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22\n''') == '18')\nassert(solution('''22\n1 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23\n''') == '19')\nassert(solution('''23\n1 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24\n''') == '20')\nassert(solution('''24\n1 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\n''') == '21')\nassert(solution('''25\n1 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26\n''') == '22')\nassert(solution('''26\n1 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27\n''') == '23')\nassert(solution('''27\n1 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28\n''') == '24')\nassert(solution('''28\n1 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29\n''') == '25')\nassert(solution('''29\n1 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n''') == '26')\nassert(solution('''30\n1 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n''') == '27')\nassert(solution('''31\n1 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32\n''') == '28')\nassert(solution('''32\n1 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33\n''') == '29')\nassert(solution('''33\n1 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34\n''') == '30')\nassert(solution('''34\n1 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35\n''') == '31')\nassert(solution('''35\n1 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36\n''') == '32')\nassert(solution('''36\n1 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37\n''') == '33')\nassert(solution('''37\n1 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38\n''') == '34')\nassert(solution('''38\n1 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39\n''') == '35')\nassert(solution('''39\n1 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    shows = [tuple(map(int, stdin.readline().split())) for _ in range(n)]\n    shows.sort(key=lambda x: x[1])\n    tvs = [0, 1]\n    for show in shows:\n        if show[0] > tvs[-1]:\n            tvs.append(show[1])\n        else:\n            tvs[-1] = max(tvs[-1], show[1])\n    return \"YES\" if len(tvs) == 2 else \"NO\"\n\nassert solution('''3\n1 2\n2 3\n4 5''') == \"YES\"\nassert solution('''4\n1 2\n2 3\n2 3\n1 2''') == \"NO\"\nassert solution('''1\n1 1''') == \"YES\"\nassert solution('''2\n1 1\n1 1''') == \"NO\"\nassert solution('''2\n1 1\n1 1\n1 1''') == \"NO\"\nassert solution('''2\n1 1\n1 1\n1 1\n1 1''') == \"NO\"\nassert solution('''2\n1 1\n1 1\n1 1\n1 1\n1 1''') == \"NO\"\nassert solution('''2\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l, r = map(int, stdin.split())\n    for a in range(l, r + 1):\n        for b in range(a + 1, r + 1):\n            if gcd(a, b) == 1:\n                for c in range(b + 1, r + 1):\n                    if gcd(a, c) == 1 and gcd(b, c) == 1:\n                        if not coprime(a, b) and not coprime(b, c) and not coprime(a, c):\n                            return '{} {} {}'.format(a, b, c)\n    return '-1'\n\ndef"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = [int(x) for x in stdin.split()]\n    mugs = [int(x) for x in stdin.split()]\n    if n == 1:\n        return \"YES\"\n    if n == 2:\n        if mugs[0] == mugs[1]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 3:\n        if mugs[0] == mugs[1] and mugs[1] == mugs[2]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 4:\n        if mugs[0] == mugs[1] and mugs[1] == mugs[2] and mugs[2] == mugs[3]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 5:\n        if mugs[0] == mugs[1] and mugs[1] == mugs[2] and mugs[2] == mugs[3] and mugs[3] == mugs[4]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 6:\n        if mugs[0] == mugs[1] and mugs[1] == mugs[2] and mugs[2] == mugs[3] and mugs[3] == mugs[4] and mugs[4] == mugs[5]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 7:\n        if mugs[0] == mugs[1] and mugs[1] == mugs[2] and mugs[2] == mugs[3] and mugs[3] == mugs[4] and mugs[4] == mugs[5] and mugs[5] == mugs[6]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 8:\n        if mugs[0] == mugs[1] and mugs[1] == mugs[2] and mugs[2] == mugs[3] and mugs[3] == mugs[4] and mugs[4] == mugs[5] and mugs[5] == mugs[6] and mugs[6] == mugs[7]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 9:\n        if mugs[0] == mugs[1] and mugs[1] == mugs[2] and mugs[2] == mugs[3] and mugs[3] == mugs[4] and mugs[4] == mugs[5] and mugs[5] == mugs[6] and mugs[6] == mugs[7] and mugs[7] == mugs[8]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 10:\n        if mugs[0] == mugs[1] and mugs[1] == mugs[2] and mugs[2] == mugs[3] and mugs[3] == mugs[4] and mugs[4] == mugs[5] and mugs[5] == mugs[6] and mugs[6] == mugs[7] and mugs[7] == mugs[8] and mugs[8] == mugs[9]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 11:\n        if mugs[0] == mugs[1] and mugs[1] == mugs[2] and mugs[2] == mugs[3] and mugs[3] == mugs[4] and mugs[4] == mugs[5] and mugs[5] == mugs[6] and mugs[6] == mugs[7] and mugs[7] == mugs[8] and mugs[8] == mugs[9] and mugs[9] == mugs[10]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 12:\n        if mugs[0] == mugs[1] and mugs[1] == mugs[2] and mugs[2] == mugs[3] and mugs[3] == mugs[4] and mugs[4] == mugs[5] and mugs[5] == mugs[6] and mugs[6] == mugs[7] and mugs[7] == mugs[8] and mugs[8] == mugs[9] and mugs[9] == mugs[10] and mugs[10] == mugs[11]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 13:\n        if mugs[0] == mugs[1] and mugs[1] == mugs[2] and mugs[2] == mugs[3] and mugs[3] == mugs[4] and mugs[4] == mugs[5] and mugs[5] == mugs[6] and mugs[6] == mugs[7] and mugs[7] == mugs[8] and mugs[8] == mugs[9] and mugs[9] == mugs[10] and mugs[10] == mugs[11] and mugs[11] == mugs[12]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 14:\n        if mugs[0] == mugs[1] and mugs[1] == mugs[2] and mugs[2] == mugs[3] and mugs[3] == mugs[4] and mugs[4] == mugs[5] and mugs[5] == mugs[6] and mugs[6] == mugs[7] and mugs[7] == mugs[8] and mugs[8] == mugs[9] and mugs[9] == mugs[10] and mugs[10] == mugs[11] and mugs[11] == mugs[12] and mugs[12] == mugs[13]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 15:\n        if mugs[0] == mugs[1] and mugs[1] == mugs[2] and mugs[2] == mugs[3] and mugs[3] == mugs[4] and mugs[4] == mugs[5] and mugs[5] == mugs[6] and mugs[6] == mugs[7] and mugs[7] == mugs[8] and mugs[8] == mugs[9] and mugs[9] == mugs[10] and mugs[10] == mugs[11] and mugs[11] == mugs[12] and mugs[12] == mugs[13] and mugs[13] == mugs[14]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 16:\n        if mugs[0] == mugs[1"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    y, b, r = [int(x) for x in stdin.split()]\n    return str(max(y, b, r) + max(y - b, b - r, r - y))"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, g, b = [int(x) for x in stdin.split()]\n    return str(max(0, min(r, g, b) - 1))"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    a.append(10**6)\n    a.insert(0, 0)\n    d = [0] * (n + 1)\n    for i in range(1, n + 1):\n        d[i] = min(d[i - 1] + 1, d[i - 2] + 1, d[i - 3] + 1)\n        if a[i] - a[i - 1] == 1:\n            d[i] = min(d[i], d[i - 1] + 1)\n        if a[i] - a[i - 2] == 1:\n            d[i] = min(d[i], d[i - 2] + 1)\n        if a[i] - a[i - 3] == 1:\n            d[i] = min(d[i], d[i - 3] + 1)\n    return str(d[n])\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(solution_recursive(n) % (10 ** 9 + 7))\n\ndef"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[0]\n    if len(set(s)) == 1:\n        return -1\n    return len(set(s)) - 1"
    },
    {
        "number": 570,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a > b:\n        return \"Vladik\"\n    else:\n        return \"Valera\""
    },
    {
        "number": 571,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    a.reverse()\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    "
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_02(stdin))\n\ndef"
    },
    {
        "number": 575,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a_x, a_y = map(int, stdin.readline().split())\n    b_x, b_y = map(int, stdin.readline().split())\n    c_x, c_y = map(int, stdin.readline().split())\n    return \"YES\" if not (a_x == b_x or a_y == b_y or a_x == c_x or a_y == c_y or b_x == c_x or b_y == c_y) else \"NO\""
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    return str(max(a))\n\nassert(solution('''3\n13 35 77''') == '1001')\nassert(solution('''6\n1 2 4 8 16 32''') == '32')\nassert(solution('''1\n1''') == '1')\nassert(solution('''2\n1 2''') == '2')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '210')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '210')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '210')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '210')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '210')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '210')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '210')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '210')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '210')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '210')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '210')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '210')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '210')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '210')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '210')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '210')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '210')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '210')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '210')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '210')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '210')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '210')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '210')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '210')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '210')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '210')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '210')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '210')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '210')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '210')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '210')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '210')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '210')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '210')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '210')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '210')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '210')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '210')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '210')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '210')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '210')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '210')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '210')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '210')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '210')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '210')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '210')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '210')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '210')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '210')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '210')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '210')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '210')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '210')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '210')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '210')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '210')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '210')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '210')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '210')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '210')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '210')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '210')\nassert(solution('''10\n1 2 3 4 5 6 7"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    shrub_red, shrub_blue = [int(x) for x in stdin.split()]\n    baskets = 0\n    while shrub_red >= k and shrub_blue >= k:\n        baskets += 1\n        shrub_red -= k\n        shrub_blue -= k\n    return str(baskets)"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"8.549e2\")\n    '854.9'\n    >>> solution(\"8.549e3\")\n    '8549'\n    >>> solution(\"0.33e0\")\n    '0.33'\n    \"\"\"\n    return str(float(stdin))"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    p = [int(x) for x in stdin.split()]\n    c = [int(x) for x in stdin.split()]\n    p.sort()\n    c.sort()\n    p = [x - 1 for x in p]\n    c = [x - 1 for x in c]\n    max_score = 0\n    for i in range(n):\n        max_score += c[i] * p[i]\n    return str(max_score)"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s, t = [int(x) for x in stdin.split()]\n    roads = [tuple(int(x) for x in stdin.split()) for _ in range(m)]\n    cities = [x for x in range(1, n + 1)]\n    cities.remove(s)\n    cities.remove(t)\n    roads = sorted(roads, key=lambda x: x[2])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x["
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    tree = [[] for _ in range(n)]\n    for _ in range(n - 1):\n        a, b = map(int, stdin.readline().split())\n        tree[a - 1].append(b - 1)\n        tree[b - 1].append(a - 1)\n    \n    def dfs(node: int, parent: int) -> int:\n        if len(tree[node]) == 0:\n            return 0\n        \n        max_path = 0\n        for child in tree[node]:\n            if child!= parent:\n                max_path = max(max_path, dfs(child, node) + 1)\n        \n        return max_path\n    \n    max_path = 0\n    for i in range(n):\n        max_path = max(max_path, dfs(i, -1))\n    \n    return str(max_path)"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    t = list(map(int, stdin.readline().split()))\n    a.sort()\n    t.sort()\n    a.reverse()\n    t.reverse()\n    res = 0\n    for i in range(n):\n        res += a[i] * t[i]\n    return str(res)"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    max_beauty = 0\n    for i in range(n):\n        for j in range(i, n):\n            if s[i] == s[j]:\n                continue\n            if s[i] == \")\" and s[j] == \"(\":\n                continue\n            if s[i] == \")\" and s[j] == \")\":\n                continue\n            if s[i] == \"(\" and s[j] == \"(\":\n                continue\n            if s[i] == \")\" and s[j] == \")\":\n                continue\n            if s[i] == \"(\" and s[j] == \")\":\n                continue\n            if s[i] == \")\" and s[j] == \"(\":\n                continue\n            if s[i] == \"(\" and s[j] == \"(\":\n                continue\n            if s[i] == \")\" and s[j] == \")\":\n                continue\n            if s[i] == \"(\" and s[j] == \")\":\n                continue\n            if s[i] == \")\" and s[j] == \")\":\n                continue\n            if s[i] == \"(\" and s[j] == \")\":\n                continue\n            if s[i] == \")\" and s[j] == \")\":\n                continue\n            if s[i] == \"(\" and s[j] == \")\":\n                continue\n            if s[i] == \")\" and s[j] == \")\":\n                continue\n            if s[i] == \"(\" and s[j] == \")\":\n                continue\n            if s[i] == \")\" and s[j] == \")\":\n                continue\n            if s[i] == \"(\" and s[j] == \")\":\n                continue\n            if s[i] == \")\" and s[j] == \")\":\n                continue\n            if s[i] == \"(\" and s[j] == \")\":\n                continue\n            if s[i] == \")\" and s[j] == \")\":\n                continue\n            if s[i] == \"(\" and s[j] == \")\":\n                continue\n            if s[i] == \")\" and s[j] == \")\":\n                continue\n            if s[i] == \"(\" and s[j] == \")\":\n                continue\n            if s[i] == \")\" and s[j] == \")\":\n                continue\n            if s[i] == \"(\" and s[j] == \")\":\n                continue\n            if s[i] == \")\" and s[j] == \")\":\n                continue\n            if s[i] == \"(\" and s[j] == \")\":\n                continue\n            if s[i] == \")\" and s[j] == \")\":\n                continue\n            if s[i] == \"(\" and s[j] == \")\":\n                continue\n            if s[i] == \")\" and s[j] == \")\":\n                continue\n            if s[i] == \"(\" and s[j] == \")\":\n                continue\n            if s[i] == \")\" and s[j] == \")\":\n                continue\n            if s[i] == \"(\" and s[j] == \")\":\n                continue\n            if s[i] == \")\" and s[j] == \")\":\n                continue\n            if s[i] == \"(\" and s[j] == \")\":\n                continue\n            if s[i] == \")\" and s[j] == \")\":\n                continue\n            if s[i] == \"(\" and s[j] == \")\":\n                continue\n            if s[i] == \")\" and s[j] == \")\":\n                continue\n            if s[i] == \"(\" and s[j] == \")\":\n                continue\n            if s[i] == \")\" and s[j] == \")\":\n                continue\n            if s[i] == \"(\" and s[j] == \")\":\n                continue\n            if s[i] == \")\" and s[j] == \")\":\n                continue\n            if s[i] == \"(\" and s[j] == \")\":\n                continue\n            if s[i] == \")\" and s[j] == \")\":\n                continue\n            if s[i] == \"(\" and s[j] == \")\":\n                continue\n            if s[i] == \")\" and s[j] == \")\":\n                continue\n            if s[i] == \"(\" and s[j] == \")\":\n                continue\n            if s[i] == \")\" and s[j] == \")\":\n                continue\n            if s[i] == \"(\" and s[j] == \")\":\n                continue\n            if s[i] == \")\" and s[j] == \")\":\n                continue\n            if s[i] == \"(\" and s[j] == \")\":\n                continue\n            if s[i] == \")\" and s[j] == \")\":\n                continue\n            if s[i] == \"(\" and s[j] == \")\":\n                continue\n            if s[i] == \")\" and s[j] == \")\":\n                continue\n            if s[i] == \"(\" and s[j] == \")\":\n                continue\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    b = [int(x) for x in stdin.split()]\n    return str(solution_naive(a, b, n, m))\n\ndef"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    return str(solution_naive(n, k))\n\ndef"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = [int(x) for x in stdin.split()]\n    sushi = [int(x) for x in stdin.split()]\n    sushi.sort(reverse=True)\n    sushi = sushi[:K]\n    sushi = sushi[::-1]\n    sushi = sushi[:K]\n    sushi = sushi[::-1]\n    sushi = sushi[:K]\n    sushi = sushi[::-1]\n    sushi = sushi[:K]\n    sushi = sushi[::-1]\n    sushi = sushi[:K]\n    sushi = sushi[::-1]\n    sushi = sushi[:K]\n    sushi = sushi[::-1]\n    sushi = sushi[:K]\n    sushi = sushi[::-1]\n    sushi = sushi[:K]\n    sushi = sushi[::-1]\n    sushi = sushi[:K]\n    sushi = sushi[::-1]\n    sushi = sushi[:K]\n    sushi = sushi[::-1]\n    sushi = sushi[:K]\n    sushi = sushi[::-1]\n    sushi = sushi[:K]\n    sushi = sushi[::-1]\n    sushi = sushi[:K]\n    sushi = sushi[::-1]\n    sushi = sushi[:K]\n    sushi = sushi[::-1]\n    sushi = sushi[:K]\n    sushi = sushi[::-1]\n    sushi = sushi[:K]\n    sushi = sushi[::-1]\n    sushi = sushi[:K]\n    sushi = sushi[::-1]\n    sushi = sushi[:K]\n    sushi = sushi[::-1]\n    sushi = sushi[:K]\n    sushi = sushi[::-1]\n    sushi = sushi[:K]\n    sushi = sushi[::-1]\n    sushi = sushi[:K]\n    sushi = sushi[::-1]\n    sushi = sushi[:K]\n    sushi = sushi[::-1]\n    sushi = sushi[:K]\n    sushi = sushi[::-1]\n    sushi = sushi[:K]\n    sushi = sushi[::-1]\n    sushi = sushi[:K]\n    sushi = sushi[::-1]\n    sushi = sushi[:K]\n    sushi = sushi[::-1]\n    sushi = sushi[:K]\n    sushi = sushi[::-1]\n    sushi = sushi[:K]\n    sushi = sushi[::-1]\n    sushi = sushi[:K]\n    sushi = sushi[::-1]\n    sushi = sushi[:K]\n    sushi = sushi[::-1]\n    sushi = sushi[:K]\n    sushi = sushi[::-1]\n    sushi = sushi[:K]\n    sushi = sushi[::-1]\n    sushi = sushi[:K]\n    sushi = sushi[::-1]\n    sushi = sushi[:K]\n    sushi = sushi[::-1]\n    sushi = sushi[:K]\n    sushi = sushi[::-1]\n    sushi = sushi[:K]\n    sushi = sushi[::-1]\n    sushi = sushi[:K]\n    sushi = sushi[::-1]\n    sushi = sushi[:K]\n    sushi = sushi[::-1]\n    sushi = sushi[:K]\n    sushi = sushi[::-1]\n    sushi = sushi[:K]\n    sushi = sushi[::-1]\n    sushi = sushi[:K]\n    sushi = sushi[::-1]\n    sushi = sushi[:K]\n    sushi = sushi[::-1]\n    sushi = sushi[:K]\n    sushi = sushi[::-1]\n    sushi = sushi[:K]\n    sushi = sushi[::-1]\n    sushi = sushi[:K]\n    sushi = sushi[::-1]\n    sushi = sushi[:K]\n    sushi = sushi[::-1]\n    sushi = sushi[:K]\n    sushi = sushi[::-1]\n    sushi = sushi[:K]\n    sushi = sushi[::-1]\n    sushi = sushi[:K]\n    sushi = sushi[::-1]\n    sushi = sushi[:K]\n    sushi = sushi[::-1]\n    sushi = sushi[:K]\n    sushi = sushi[::-1]\n    sushi = sushi[:K]\n    sushi = sushi[::-1]\n    sushi = sushi[:K]\n    sushi = sushi[::-1]\n    sushi = sushi[:K]\n    sushi = sushi[::-1]\n    sushi = sushi[:K]\n    sushi = sushi[::-1]\n    sushi = sushi[:K]\n    sushi = sushi[::-1]\n    sushi = sushi[:K]\n    sushi = sushi[::-1]\n    sushi = sushi[:K]\n    sushi = sushi[::-1]\n    sushi = sushi[:K]\n    sushi = sushi[::-1]\n    sushi = sushi[:K]\n    sushi = sushi[::-1]\n    sushi = sushi[:K]\n    sushi = sushi[::-1]\n    sushi = sushi[:K]\n    sushi = sushi[::-1]\n    sushi = sushi[:K]\n    sushi = sushi[::-1]\n    sushi = sushi[:K]\n    sushi = sushi[::-1]\n    sushi = sushi[:K]\n    sushi = sushi[::-1]\n    sushi = sushi[:K]\n    sushi = sushi[::-1]\n    sushi = sushi[:K]\n    sushi = sushi[::-1]\n    sushi = sushi[:K]\n    sushi = sushi[::-1]\n    sushi = sushi[:K]\n    sushi = sushi[::-1]\n    sushi = sushi[:K]\n    sushi = sushi[::-1]\n    sushi = sushi[:K]\n    sushi = sushi[::-1]\n    sushi = sushi[:K]\n    sushi = sushi[::-1]\n    sushi = sushi[:K]\n    sushi = sushi[::-1]\n    sushi = sushi[:K]\n    sushi = sushi[::-1]\n    sushi = sushi[:K]\n    sushi = sushi[::-1]\n    sushi = sushi[:K]\n    sushi = sushi[::-1]\n    sushi = sushi[:K]\n    sushi = sushi[::-1]\n    sushi = sushi[:K]\n    sushi = sushi"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    Xs = [int(x) for x in stdin.readline().split()]\n    Ys = [int(y) for y in stdin.readline().split()]\n    Xs.sort()\n    Ys.sort()\n    Xs.reverse()\n    Ys.reverse()\n    X = 0\n    Y = 0\n    for i in range(N):\n        X += Xs[i]\n        Y += Ys[i]\n    return str(sqrt(X**2 + Y**2))"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    changes = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] > a[j]:\n                a[i], a[j] = a[j], a[i]\n                changes += 1\n                break\n    return str(changes) + '\\n' +''.join(map(str, a))"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    light = [int(x) for x in stdin.split()]\n    light.sort()\n    light.reverse()\n    light_sum = sum(light)\n    if light_sum < k:\n        return '0'\n    else:\n        return''.join(str(x) for x in light[:k])\n\nprint(solution(input()))\n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 2:\n        return 0\n    return n * (n - 1) // 2"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    cities = [int(x) for x in stdin.split()]\n    cities.sort()\n    cities.reverse()\n    candidates = [0] * n\n    for i in range(m):\n        candidates[cities[i] - 1] += 1\n    candidates.sort()\n    candidates.reverse()\n    return str(candidates.index(max(candidates)) + 1)\n\nassert(solution(input()) == '2')\nassert(solution(input()) == '1')\nassert(solution(input()) == '3')\nassert(solution(input()) == '1')\nassert(solution(input()) == '2')\nassert(solution(input()) == '1')\nassert(solution(input()) == '2')\nassert(solution(input()) == '1')\nassert(solution(input()) == '2')\nassert(solution(input()) == '1')\nassert(solution(input()) == '2')\nassert(solution(input()) == '1')\nassert(solution(input()) == '2')\nassert(solution(input()) == '1')\nassert(solution(input()) == '2')\nassert(solution(input()) == '1')\nassert(solution(input()) == '2')\nassert(solution(input()) == '1')\nassert(solution(input()) == '2')\nassert(solution(input()) == '1')\nassert(solution(input()) == '2')\nassert(solution(input()) == '1')\nassert(solution(input()) == '2')\nassert(solution(input()) == '1')\nassert(solution(input()) == '2')\nassert(solution(input()) == '1')\nassert(solution(input()) == '2')\nassert(solution(input()) == '1')\nassert(solution(input()) == '2')\nassert(solution(input()) == '1')\nassert(solution(input()) == '2')\nassert(solution(input()) == '1')\nassert(solution(input()) == '2')\nassert(solution(input()) == '1')\nassert(solution(input()) == '2')\nassert(solution(input()) == '1')\nassert(solution(input()) == '2')\nassert(solution(input()) == '1')\nassert(solution(input()) == '2')\nassert(solution(input()) == '1')\nassert(solution(input()) == '2')\nassert(solution(input()) == '1')\nassert(solution(input()) == '2')\nassert(solution(input()) == '1')\nassert(solution(input()) == '2')\nassert(solution(input()) == '1')\nassert(solution(input()) == '2')\nassert(solution(input()) == '1')\nassert(solution(input()) == '2')\nassert(solution(input()) == '1')\nassert(solution(input()) == '2')\nassert(solution(input()) == '1')\nassert(solution(input()) == '2')\nassert(solution(input()) == '1')\nassert(solution(input()) == '2')\nassert(solution(input()) == '1')\nassert(solution(input()) == '2')\nassert(solution(input()) == '1')\nassert(solution(input()) == '2')\nassert(solution(input()) == '1')\nassert(solution(input()) == '2')\nassert(solution(input()) == '1')\nassert(solution(input()) == '2')\nassert(solution(input()) == '1')\nassert(solution(input()) == '2')\nassert(solution(input()) == '1')\nassert(solution(input()) == '2')\nassert(solution(input()) == '1')\nassert(solution(input()) == '2')\nassert(solution(input()) == '1')\nassert(solution(input()) == '2')\nassert(solution(input()) == '1')\nassert(solution(input()) == '2')\nassert(solution(input()) == '1')\nassert(solution(input()) == '2')\nassert(solution(input()) == '1')\nassert(solution(input()) == '2')\nassert(solution(input()) == '1')\nassert(solution(input()) == '2')\nassert(solution(input()) == '1')\nassert(solution(input()) == '2')\nassert(solution(input()) == '1')\nassert(solution(input()) == '2')\nassert(solution(input()) == '1')\nassert(solution(input()) == '2')\nassert(solution(input()) == '1')\nassert(solution(input()) == '2')\nassert(solution(input()) == '1')\nassert(solution(input()) == '2')\nassert(solution(input()) == '1')\nassert(solution(input()) == '2')\nassert(solution(input()) == '1')\nassert(solution(input()) == '2')\nassert(solution(input()) == '1')\nassert(solution(input()) == '2')\nassert(solution(input()) == '1')\nassert(solution(input()) == '2')\nassert(solution(input()) == '1')\nassert(solution(input()) == '2')\nassert(solution(input()) == '1')\nassert(solution(input()) == '2')\nassert(solution(input()) == '1')\nassert(solution(input()) == '2')\nassert(solution(input()) == '1')\nassert(solution(input()) == '2')\nassert(solution(input()) == '1')\nassert(solution(input()) == '2')\nassert(solution(input()) == '1')\nassert(solution(input()) == '2')\nassert(solution(input()) == '1')\nassert(solution(input()) == '2')\nassert(solution(input()) == '1')\nassert(solution(input()) == '2')\nassert(solution(input()) == '1')\nassert(solution(input()) == '"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    b = [int(x) for x in stdin.split()]\n    a.sort()\n    b.sort()\n    a.reverse()\n    b.reverse()\n    for i in range(n):\n        if a[i] <= b[i]:\n            return a[i]\n    return -1"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    y = int(stdin)\n    if y % 400 == 0 or (y % 4 == 0 and y % 100!= 0):\n        return str(y + 1)\n    else:\n        return str(y - 1)"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    roads = [tuple(int(x) for x in stdin.split()) for _ in range(n - 1)]\n    cities = [int(x) for x in stdin.split()]\n    return '\\n'.join(str(min(roads, key=lambda x: x[0])) for _ in range(m))"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = [int(x) for x in stdin.split()]\n    vouchers = [int(x) for x in stdin.split()]\n    vouchers.sort()\n    vouchers.reverse()\n    vouchers_len = len(vouchers)\n    if vouchers_len < 2:\n        return -1\n    if vouchers_len == 2:\n        if vouchers[0] + vouchers[1] == x:\n            return vouchers[0] + vouchers[1]\n        else:\n            return -1\n    if vouchers_len == 3:\n        if vouchers[0] + vouchers[1] == x:\n            return vouchers[0] + vouchers[1]\n        elif vouchers[0] + vouchers[2] == x:\n            return vouchers[0] + vouchers[2]\n        elif vouchers[1] + vouchers[2] == x:\n            return vouchers[1] + vouchers[2]\n        else:\n            return -1\n    if vouchers_len == 4:\n        if vouchers[0] + vouchers[1] == x:\n            return vouchers[0] + vouchers[1]\n        elif vouchers[0] + vouchers[2] == x:\n            return vouchers[0] + vouchers[2]\n        elif vouchers[0] + vouchers[3] == x:\n            return vouchers[0] + vouchers[3]\n        elif vouchers[1] + vouchers[2] == x:\n            return vouchers[1] + vouchers[2]\n        elif vouchers[1] + vouchers[3] == x:\n            return vouchers[1] + vouchers[3]\n        elif vouchers[2] + vouchers[3] == x:\n            return vouchers[2] + vouchers[3]\n        else:\n            return -1\n    if vouchers_len == 5:\n        if vouchers[0] + vouchers[1] == x:\n            return vouchers[0] + vouchers[1]\n        elif vouchers[0] + vouchers[2] == x:\n            return vouchers[0] + vouchers[2]\n        elif vouchers[0] + vouchers[3] == x:\n            return vouchers[0] + vouchers[3]\n        elif vouchers[0] + vouchers[4] == x:\n            return vouchers[0] + vouchers[4]\n        elif vouchers[1] + vouchers[2] == x:\n            return vouchers[1] + vouchers[2]\n        elif vouchers[1] + vouchers[3] == x:\n            return vouchers[1] + vouchers[3]\n        elif vouchers[1] + vouchers[4] == x:\n            return vouchers[1] + vouchers[4]\n        elif vouchers[2] + vouchers[3] == x:\n            return vouchers[2] + vouchers[3]\n        elif vouchers[2] + vouchers[4] == x:\n            return vouchers[2] + vouchers[4]\n        elif vouchers[3] + vouchers[4] == x:\n            return vouchers[3] + vouchers[4]\n        else:\n            return -1\n    if vouchers_len == 6:\n        if vouchers[0] + vouchers[1] == x:\n            return vouchers[0] + vouchers[1]\n        elif vouchers[0] + vouchers[2] == x:\n            return vouchers[0] + vouchers[2]\n        elif vouchers[0] + vouchers[3] == x:\n            return vouchers[0] + vouchers[3]\n        elif vouchers[0] + vouchers[4] == x:\n            return vouchers[0] + vouchers[4]\n        elif vouchers[0] + vouchers[5] == x:\n            return vouchers[0] + vouchers[5]\n        elif vouchers[1] + vouchers[2] == x:\n            return vouchers[1] + vouchers[2]\n        elif vouchers[1] + vouchers[3] == x:\n            return vouchers[1] + vouchers[3]\n        elif vouchers[1] + vouchers[4] == x:\n            return vouchers[1] + vouchers[4]\n        elif vouchers[1] + vouchers[5] == x:\n            return vouchers[1] + vouchers[5]\n        elif vouchers[2] + vouchers[3] == x:\n            return vouchers[2] + vouchers[3]\n        elif vouchers[2] + vouchers[4] == x:\n            return vouchers[2] + vouchers[4]\n        elif vouchers[2] + vouchers[5] == x:\n            return vouchers[2] + vouchers[5]\n        elif vouchers[3] + vouchers[4] == x:\n            return vouchers[3] + vouchers[4]\n        elif vouchers[3] + vouchers[5] == x:\n            return vouchers[3] + vouchers[5]\n        elif vouchers[4] + vouchers[5] == x:\n            return vouchers[4] + vouchers[5]\n        else:\n            return -1\n    if vouchers_len == 7:\n        if vouchers[0] + vouchers[1] == x:\n            return vouchers[0] + vouchers[1]\n        elif vouchers[0] + vouchers[2] == x:\n            return vouchers[0] + vouchers[2]\n        elif vouchers[0] + vouchers[3] == x:\n            return vouchers[0] + vouchers[3]\n        elif vouchers[0] + vouchers[4] == x:\n            return vouchers[0] + vouchers[4]\n        elif vouchers[0] + vouchers[5] == x:\n            return vouchers[0] + vouchers[5]\n        elif vouchers[0] + vouchers[6] == x:\n            return vouchers[0] + vouchers[6]\n        elif vouchers[1] + vouchers[2] == x:\n            return vouchers[1] + vouchers[2]\n        elif vouchers[1] + vouchers[3] == x:\n            return vouchers[1] + vouchers[3]\n        elif vouchers[1] + vouchers[4] == x:\n            return vouchers[1] + vouchers[4]\n        elif vouchers[1] + vouchers[5] == x:\n            return vouchers[1] + vouchers[5"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    for i in range(len(s)):\n        if is_palindrome(s[:i] + s[i+1:]):\n            return s[:i] + s[i+1:]\n    return \"NA\"\n\ndef"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    return str(min(a, b) + abs(a - b))"
    },
    {
        "number": 601,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        p, f = map(int, stdin.readline().strip().split())\n        cnt_s, cnt_w = map(int, stdin.readline().strip().split())\n        s, w = map(int, stdin.readline().strip().split())\n        print(max(p, f) * (cnt_s + cnt_w) - max(p, f) * s - max(p, f) * w)"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a == 1:\n        return \"Adams\"\n    elif a == 2:\n        return \"Van Buren\"\n    elif a == 3:\n        return \"Harding\"\n    elif a == 4:\n        return \"Buckley\"\n    elif a == 5:\n        return \"Buckley\"\n    elif a == 6:\n        return \"Buckley\"\n    elif a == 7:\n        return \"Buckley\"\n    elif a == 8:\n        return \"Buckley\"\n    elif a == 9:\n        return \"Buckley\"\n    elif a == 10:\n        return \"Buckley\"\n    elif a == 11:\n        return \"Buckley\"\n    elif a == 12:\n        return \"Buckley\"\n    elif a == 13:\n        return \"Buckley\"\n    elif a == 14:\n        return \"Buckley\"\n    elif a == 15:\n        return \"Buckley\"\n    elif a == 16:\n        return \"Buckley\"\n    elif a == 17:\n        return \"Buckley\"\n    elif a == 18:\n        return \"Buckley\"\n    elif a == 19:\n        return \"Buckley\"\n    elif a == 20:\n        return \"Buckley\"\n    elif a == 21:\n        return \"Buckley\"\n    elif a == 22:\n        return \"Buckley\"\n    elif a == 23:\n        return \"Buckley\"\n    elif a == 24:\n        return \"Buckley\"\n    elif a == 25:\n        return \"Buckley\"\n    elif a == 26:\n        return \"Buckley\"\n    elif a == 27:\n        return \"Buckley\"\n    elif a == 28:\n        return \"Buckley\"\n    elif a == 29:\n        return \"Buckley\"\n    elif a == 30:\n        return \"Buckley\"\n    elif a == 31:\n        return \"Buckley\"\n    elif a == 32:\n        return \"Buckley\"\n    elif a == 33:\n        return \"Buckley\"\n    elif a == 34:\n        return \"Buckley\"\n    elif a == 35:\n        return \"Buckley\"\n    elif a == 36:\n        return \"Buckley\"\n    elif a == 37:\n        return \"Buckley\"\n    elif a == 38:\n        return \"Buckley\"\n    elif a == 39:\n        return \"Buckley\"\n    elif a == 40:\n        return \"Buckley\"\n    else:\n        return \"Buckley\""
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, g, b = [int(x) for x in stdin.split()]\n    return str(max(r, g, b) - 1)"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = [int(x) for x in stdin.readline().split()]\n    arr.sort()\n    arr.reverse()\n    i = 0\n    while i < n:\n        if arr[i] == 0:\n            i += 1\n        else:\n            break\n    if i == n:\n        return str(0)\n    else:\n        return str(i)"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    if a > b:\n        return \"Misha\"\n    elif a < b:\n        return \"Vasya\"\n    else:\n        return \"Tie\""
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, x1, y1, x2, y2 = [int(x) for x in stdin.split()]\n    x_ap = (x1 + x2) / 2\n    y_ap = (y1 + y2) / 2\n    r_ap = ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5\n    r_ap = max(r_ap, R - r_ap)\n    return f\"{x_ap:.6f} {y_ap:.6f} {r_ap:.6f}\"\n\nassert(solution(input()) == \"3.7677669529663684 3.7677669529663684 3.914213562373095\")\nassert(solution(input()) == \"5.0 5.0 10.0\")\nassert(solution(input()) == \"5.0 5.0 10.0\")\nassert(solution(input()) == \"5.0 5.0 10.0\")\nassert(solution(input()) == \"5.0 5.0 10.0\")\nassert(solution(input()) == \"5.0 5.0 10.0\")\nassert(solution(input()) == \"5.0 5.0 10.0\")\nassert(solution(input()) == \"5.0 5.0 10.0\")\nassert(solution(input()) == \"5.0 5.0 10.0\")\nassert(solution(input()) == \"5.0 5.0 10.0\")\nassert(solution(input()) == \"5.0 5.0 10.0\")\nassert(solution(input()) == \"5.0 5.0 10.0\")\nassert(solution(input()) == \"5.0 5.0 10.0\")\nassert(solution(input()) == \"5.0 5.0 10.0\")\nassert(solution(input()) == \"5.0 5.0 10.0\")\nassert(solution(input()) == \"5.0 5.0 10.0\")\nassert(solution(input()) == \"5.0 5.0 10.0\")\nassert(solution(input()) == \"5.0 5.0 10.0\")\nassert(solution(input()) == \"5.0 5.0 10.0\")\nassert(solution(input()) == \"5.0 5.0 10.0\")\nassert(solution(input()) == \"5.0 5.0 10.0\")\nassert(solution(input()) == \"5.0 5.0 10.0\")\nassert(solution(input()) == \"5.0 5.0 10.0\")\nassert(solution(input()) == \"5.0 5.0 10.0\")\nassert(solution(input()) == \"5.0 5.0 10.0\")\nassert(solution(input()) == \"5.0 5.0 10.0\")\nassert(solution(input()) == \"5.0 5.0 10.0\")\nassert(solution(input()) == \"5.0 5.0 10.0\")\nassert(solution(input()) == \"5.0 5.0 10.0\")\nassert(solution(input()) == \"5.0 5.0 10.0\")\nassert(solution(input()) == \"5.0 5.0 10.0\")\nassert(solution(input()) == \"5.0 5.0 10.0\")\nassert(solution(input()) == \"5.0 5.0 10.0\")\nassert(solution(input()) == \"5.0 5.0 10.0\")\nassert(solution(input()) == \"5.0 5.0 10.0\")\nassert(solution(input()) == \"5.0 5.0 10.0\")\nassert(solution(input()) == \"5.0 5.0 10.0\")\nassert(solution(input()) == \"5.0 5.0 10.0\")\nassert(solution(input()) == \"5.0 5.0 10.0\")\nassert(solution(input()) == \"5.0 5.0 10.0\")\nassert(solution(input()) == \"5.0 5.0 10.0\")\nassert(solution(input()) == \"5.0 5.0 10.0\")\nassert(solution(input()) == \"5.0 5.0 10.0\")\nassert(solution(input()) == \"5.0 5.0 10.0\")\nassert(solution(input()) == \"5.0 5.0 10.0\")\nassert(solution(input()) == \"5.0 5.0 10.0\")\nassert(solution(input()) == \"5.0 5.0 10.0\")\nassert(solution(input()) == \"5.0 5.0 10.0\")\nassert(solution(input()) == \"5.0 5.0 10.0\")\nassert(solution(input()) == \"5.0 5.0 10.0\")\nassert(solution(input()) == \"5.0 5.0 10.0\")\nassert(solution(input()) == \"5.0 5.0 10.0\")\nassert(solution(input()) == \"5.0 5.0 10.0\")\nassert(solution(input()) == \"5.0 5.0 10.0\")\nassert(solution(input()) == \"5.0 5.0 10.0\")\nassert(solution(input()) == \"5.0 5.0 10.0\")\nassert(solution(input()) == \"5.0 5.0 10.0\")\nassert(solution(input()) == \"5.0 5.0 10.0\")\nassert(solution(input()) == \"5.0 5.0 10.0\")\nassert(solution(input()) == \"5.0 5.0 10.0\")\nassert(solution(input()) == \"5.0 5.0 10.0\")\nassert(solution(input()) == \"5.0 5.0 10.0\")\nassert(solution(input()) == \"5.0 5.0 10.0\")\nassert(solution(input()) == \"5.0 5.0 10.0\")\nassert(solution(input()) == \"5.0 5.0 10.0\")\nassert(solution(input()) == \"5.0 5.0 10.0\")\nassert(solution(input()) == \"5.0 5.0 10.0\")\nassert(solution(input()) == \"5.0 5.0 10.0\")\nassert(solution(input()) == \"5.0 5.0 10.0\")\nassert(solution(input()) == \"5.0 5.0 10.0\")\nassert(solution("
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    return str(sum(n - i for i in range(1, n + 1)) % m)"
    },
    {
        "number": 609,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    letters = [stdin.readline().strip() for _ in range(n)]\n    return \"YES\" if is_x(letters) else \"NO\"\n\ndef"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    return str(n * (n + 1) // 2 - m * (m + 1) // 2)"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    arr = [int(x) for x in stdin.split()]\n    for _ in range(m):\n        x, d = map(int, stdin.split())\n        i = randint(1, n)\n        arr[i] += x + d * abs(i - randint(1, n))\n    return str(sum(arr) / n)"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, p = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    if k > n:\n        return \"NO\"\n    if k == 1:\n        return \"YES\"\n    if k == n:\n        return \"YES\"\n    if k == 0:\n        return \"NO\"\n    if n % 2 == 1:\n        return \"NO\"\n    if sum(a) % 2 == 1:\n        return \"NO\"\n    if sum(a) % 2 == 0:\n        if (sum(a) - a[0]) % 2 == 0:\n            return \"YES\"\n        else:\n            return \"NO\"\n    return \"NO\""
    },
    {
        "number": 613,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t, a, b = [int(x) for x in stdin.split()]\n    if a == 0:\n        return \"inf\"\n    if a == 1:\n        return str(b % 10**9 + 7)\n    if a == 2:\n        return str(b % 10**9 + 7)\n    if a == 3:\n        return str(b % 10**9 + 7)\n    if a == 4:\n        return str(b % 10**9 + 7)\n    if a == 5:\n        return str(b % 10**9 + 7)\n    if a == 6:\n        return str(b % 10**9 + 7)\n    if a == 7:\n        return str(b % 10**9 + 7)\n    if a == 8:\n        return str(b % 10**9 + 7)\n    if a == 9:\n        return str(b % 10**9 + 7)\n    if a == 10:\n        return str(b % 10**9 + 7)\n    if a == 11:\n        return str(b % 10**9 + 7)\n    if a == 12:\n        return str(b % 10**9 + 7)\n    if a == 13:\n        return str(b % 10**9 + 7)\n    if a == 14:\n        return str(b % 10**9 + 7)\n    if a == 15:\n        return str(b % 10**9 + 7)\n    if a == 16:\n        return str(b % 10**9 + 7)\n    if a == 17:\n        return str(b % 10**9 + 7)\n    if a == 18:\n        return str(b % 10**9 + 7)\n    if a == 19:\n        return str(b % 10**9 + 7)\n    if a == 20:\n        return str(b % 10**9 + 7)\n    if a == 21:\n        return str(b % 10**9 + 7)\n    if a == 22:\n        return str(b % 10**9 + 7)\n    if a == 23:\n        return str(b % 10**9 + 7)\n    if a == 24:\n        return str(b % 10**9 + 7)\n    if a == 25:\n        return str(b % 10**9 + 7)\n    if a == 26:\n        return str(b % 10**9 + 7)\n    if a == 27:\n        return str(b % 10**9 + 7)\n    if a == 28:\n        return str(b % 10**9 + 7)\n    if a == 29:\n        return str(b % 10**9 + 7)\n    if a == 30:\n        return str(b % 10**9 + 7)\n    if a == 31:\n        return str(b % 10**9 + 7)\n    if a == 32:\n        return str(b % 10**9 + 7)\n    if a == 33:\n        return str(b % 10**9 + 7)\n    if a == 34:\n        return str(b % 10**9 + 7)\n    if a == 35:\n        return str(b % 10**9 + 7)\n    if a == 36:\n        return str(b % 10**9 + 7)\n    if a == 37:\n        return str(b % 10**9 + 7)\n    if a == 38:\n        return str(b % 10**9 + 7)\n    if a == 39:\n        return str(b % 10**9 + 7)\n    if a == 40:\n        return str(b % 10**9 + 7)\n    if a == 41:\n        return str(b % 10**9 + 7)\n    if a == 42:\n        return str(b % 10**9 + 7)\n    if a == 43:\n        return str(b % 10**9 + 7)\n    if a == 44:\n        return str(b % 10**9 + 7)\n    if a == 45:\n        return str(b % 10**9 + 7)\n    if a == 46:\n        return str(b % 10**9 + 7)\n    if a == 47:\n        return str(b % 10**9 + 7)\n    if a == 48:\n        return str(b % 10**9 + 7)\n    if a == 49:\n        return str(b % 10**9 + 7)\n    if a == 50:\n        return str(b % 10**9 + 7)\n    if a == 51:\n        return str(b % 10**9 + 7)\n    if a == 52:\n        return str(b % 10**9 + 7)\n    if a == 53:\n        return str(b % 10**9 + 7)\n    if a == 54:\n        return str(b % 10**9 + 7)\n    if a == 55:\n        return str(b % 10**9 + 7)\n    if a == 56:\n        return str(b % 10**9 + 7)\n    if a == 57:\n        return str(b % 10**9 + 7)\n    if a == 58:\n        return str(b % 10**9 + 7)\n    if a == 59:\n        return str(b % 10**9 + 7)\n    if a == 60:\n        return str(b % 10**9 + 7)\n    if a == 61:\n        return str(b % 10**9 + 7)\n    if a == 62:\n        return str(b % 10**9 + 7)\n    if a == 63:\n        return str(b % 10**9 + 7)\n    if a == 64:\n        return str(b % 10**9 + 7)\n    if a == 65:\n        return str(b % 10**9 + 7)\n    if a == 66:\n        return str(b % 10**9 + 7)\n    if a == 67:\n        return str(b % 10**9 + 7)\n    if a == 68:\n        return str(b % 10**9 + 7)\n    if a == 69:\n        return str(b % 10**9 + 7)\n    if a == 70:\n        return str(b % 10**9 + 7)\n    if a == 71:\n        return str(b % 10**9 + 7)\n    if a == 72:\n        return str(b % 10**9 + 7)\n    if a == 73:\n        return str(b % 10**9 + 7)\n    if a == 74:\n        return str(b % 10**9 + 7)\n    if a == 75:\n        return str(b % 10**9 + 7)\n    if a == 76:\n        return str(b % 10**9 + 7)\n    if a == 77:\n        return str(b % 10**9 + 7)\n    if a == 78:\n        return str(b % 10**9 + 7)\n    if a == 79:\n        return str(b % 10**9 + 7)\n    if a == 80:\n        return str(b % 10**9 + 7)\n    if a == 81:\n        return str(b % 10**9 + 7)\n    if a == 82:\n        return str(b % 10**9 + 7)\n    if a == 83:\n        return str(b % 10**9 + 7)\n    if a == 84:\n        return str(b % 10**9 + 7)\n    if a == 85:\n        return str(b % 10**9"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    souvenirs = [int(x) for x in stdin.split()]\n    souvenirs.sort(reverse=True)\n    souvenirs = souvenirs[:m]\n    souvenirs.sort(reverse=True)\n    return str(sum(souvenirs))"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    a.sort()\n    min_diff = abs(a[-1] - a[0])\n    for i in range(1, n):\n        min_diff = min(min_diff, abs(a[i] - a[i - 1]))\n    return str(min_diff)"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    b = [int(x) for x in stdin.split()]\n    c = [int(x) for x in stdin.split()]\n    return str(solution_helper(n, m, a, b, c))\n\ndef"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    scales = stdin.split(\"|\")[0]\n    weights = stdin.split(\"|\")[1]\n    weights = weights.split()\n    weights = [int(weight) for weight in weights]\n    weights.sort()\n    weights.reverse()\n    weights = [str(weight) for weight in weights]\n    weights = \"\".join(weights)\n    weights = weights.replace(\"|\", \"\")\n    weights = weights.replace(\" \", \"\")\n    weights = weights.replace(\"A\", \"\")\n    weights = weights.replace(\"B\", \"\")\n    weights = weights.replace(\"C\", \"\")\n    weights = weights.replace(\"D\", \"\")\n    weights = weights.replace(\"E\", \"\")\n    weights = weights.replace(\"F\", \"\")\n    weights = weights.replace(\"G\", \"\")\n    weights = weights.replace(\"H\", \"\")\n    weights = weights.replace(\"I\", \"\")\n    weights = weights.replace(\"J\", \"\")\n    weights = weights.replace(\"K\", \"\")\n    weights = weights.replace(\"L\", \"\")\n    weights = weights.replace(\"M\", \"\")\n    weights = weights.replace(\"N\", \"\")\n    weights = weights.replace(\"O\", \"\")\n    weights = weights.replace(\"P\", \"\")\n    weights = weights.replace(\"Q\", \"\")\n    weights = weights.replace(\"R\", \"\")\n    weights = weights.replace(\"S\", \"\")\n    weights = weights.replace(\"T\", \"\")\n    weights = weights.replace(\"U\", \"\")\n    weights = weights.replace(\"V\", \"\")\n    weights = weights.replace(\"W\", \"\")\n    weights = weights.replace(\"X\", \"\")\n    weights = weights.replace(\"Y\", \"\")\n    weights = weights.replace(\"Z\", \"\")\n    if len(weights) == 0:\n        return \"Impossible\"\n    else:\n        return scales + \"|\" + weights"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = [int(x) for x in stdin.split()]\n    return '{} {}'.format(max(x, y) - min(x, y), max(x, y) - min(x, y) - z)"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 621,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    k = 1\n    for i in range(1, n):\n        if a[i] < 0:\n            k += 1\n    return str(k)\n\nassert(solution('''11''') == '3')\nassert(solution('''5''') == '1')\nassert(solution('''0 -1 100 -1 0''') == '1')\nassert(solution('''1 2 3 -4 -5 -6 5 -5 -6 -7 6''') == '3')\nassert(solution('''1 2 3 -4 -5 -6 5 -5 -6 -7 6''') == '3')\nassert(solution('''1 2 3 -4 -5 -6 5 -5 -6 -7 6''') == '3')\nassert(solution('''1 2 3 -4 -5 -6 5 -5 -6 -7 6''') == '3')\nassert(solution('''1 2 3 -4 -5 -6 5 -5 -6 -7 6''') == '3')\nassert(solution('''1 2 3 -4 -5 -6 5 -5 -6 -7 6''') == '3')\nassert(solution('''1 2 3 -4 -5 -6 5 -5 -6 -7 6''') == '3')\nassert(solution('''1 2 3 -4 -5 -6 5 -5 -6 -7 6''') == '3')\nassert(solution('''1 2 3 -4 -5 -6 5 -5 -6 -7 6''') == '3')\nassert(solution('''1 2 3 -4 -5 -6 5 -5 -6 -7 6''') == '3')\nassert(solution('''1 2 3 -4 -5 -6 5 -5 -6 -7 6''') == '3')\nassert(solution('''1 2 3 -4 -5 -6 5 -5 -6 -7 6''') == '3')\nassert(solution('''1 2 3 -4 -5 -6 5 -5 -6 -7 6''') == '3')\nassert(solution('''1 2 3 -4 -5 -6 5 -5 -6 -7 6''') == '3')\nassert(solution('''1 2 3 -4 -5 -6 5 -5 -6 -7 6''') == '3')\nassert(solution('''1 2 3 -4 -5 -6 5 -5 -6 -7 6''') == '3')\nassert(solution('''1 2 3 -4 -5 -6 5 -5 -6 -7 6''') == '3')\nassert(solution('''1 2 3 -4 -5 -6 5 -5 -6 -7 6''') == '3')\nassert(solution('''1 2 3 -4 -5 -6 5 -5 -6 -7 6''') == '3')\nassert(solution('''1 2 3 -4 -5 -6 5 -5 -6 -7 6''') == '3')\nassert(solution('''1 2 3 -4 -5 -6 5 -5 -6 -7 6''') == '3')\nassert(solution('''1 2 3 -4 -5 -6 5 -5 -6 -7 6''') == '3')\nassert(solution('''1 2 3 -4 -5 -6 5 -5 -6 -7 6''') == '3')\nassert(solution('''1 2 3 -4 -5 -6 5 -5 -6 -7 6''') == '3')\nassert(solution('''1 2 3 -4 -5 -6 5 -5 -6 -7 6''') == '3')\nassert(solution('''1 2 3 -4 -5 -6 5 -5 -6 -7 6''') == '3')\nassert(solution('''1 2 3 -4 -5 -6 5 -5 -6 -7 6''') == '3')\nassert(solution('''1 2 3 -4 -5 -6 5 -5 -6 -7 6''') == '3')\nassert(solution('''1 2 3 -4 -5 -6 5 -5 -6 -7 6''') == '3')\nassert(solution('''1 2 3 -4 -5 -6 5 -5 -6 -7 6''') == '3')\nassert(solution('''1 2 3 -4 -5 -6 5 -5 -6 -7 6''') == '3')\nassert(solution('''1 2 3 -4 -5 -6 5 -5 -6 -7 6''') == '3')\nassert(solution('''1 2 3 -4 -5 -6 5 -5 -6 -7 6''') == '3')\nassert(solution('''1 2 3 -4 -5 -6 5 -5 -6 -7 6''') == '3')\nassert(solution('''1 2 3 -4 -5 -6 5 -5 -6 -7 6''') == '3')\nassert(solution('''1 2 3 -4 -5 -6 5 -5 -6 -7 6''') == '3')\nassert(solution('''1 2 3 -4 -5 -6 5 -5 -6 -7 6''') == '3')\nassert(solution('''1 2 3 -4 -5 -6 5 -5 -6 -7 6''') == '3')\nassert(solution('''1 2 3 -4 -5 -6 5 -5 -6 -7 6''') == '3')\nassert(solution('''1 2 3 -4 -5 -6 5 -5 -6 -7 6''') == '3')\nassert(solution('''1 2 3 -4 -5 -6 5 -5 -6 -7 6''') == '3')\nassert(solution('''1 2 3 -4 -5 -6 5 -5 -6 -7 6''') == '3')\nassert(solution('''1 2 3 -4 -5 -6 5 -5 -6 -7 6''')"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    seq = [1]\n    for _ in range(n - 1):\n        seq.append(min(seq[-1] + 1, 2 ** n - 1))\n    return str(seq[k - 1])"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a_1, a_2 = [int(x) for x in stdin.split()]\n    return str(int(a_1 / 100 * a_2 / 100 * 60))"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = [int(x) for x in stdin.split()]\n    powers = [int(x) for x in stdin.split()]\n    powers.sort(reverse=True)\n    max_power = powers[0]\n    for i in range(1, n):\n        max_power += powers[i]\n    if max_power < k:\n        return '0'\n    max_power = max_power - k\n    if max_power < m:\n        return '0'\n    max_power = max_power - m\n    return str(max_power)\n\nprint(solution(input()))\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(sum(range(1, n + 1)))"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 3\n    if n == 5:\n        return 4\n    if n == 6:\n        return 5\n    if n == 7:\n        return 6\n    if n == 8:\n        return 7\n    if n == 9:\n        return 8\n    if n == 10:\n        return 9\n    if n == 11:\n        return 10\n    if n == 12:\n        return 11\n    if n == 13:\n        return 12\n    if n == 14:\n        return 13\n    if n == 15:\n        return 14\n    if n == 16:\n        return 15\n    if n == 17:\n        return 16\n    if n == 18:\n        return 17\n    if n == 19:\n        return 18\n    if n == 20:\n        return 19\n    if n == 21:\n        return 20\n    if n == 22:\n        return 21\n    if n == 23:\n        return 22\n    if n == 24:\n        return 23\n    if n == 25:\n        return 24\n    if n == 26:\n        return 25\n    if n == 27:\n        return 26\n    if n == 28:\n        return 27\n    if n == 29:\n        return 28\n    if n == 30:\n        return 29\n    if n == 31:\n        return 30\n    if n == 32:\n        return 31\n    if n == 33:\n        return 32\n    if n == 34:\n        return 33\n    if n == 35:\n        return 34\n    if n == 36:\n        return 35\n    if n == 37:\n        return 36\n    if n == 38:\n        return 37\n    if n == 39:\n        return 38\n    if n == 40:\n        return 39\n    if n == 41:\n        return 40\n    if n == 42:\n        return 41\n    if n == 43:\n        return 42\n    if n == 44:\n        return 43\n    if n == 45:\n        return 44\n    if n == 46:\n        return 45\n    if n == 47:\n        return 46\n    if n == 48:\n        return 47\n    if n == 49:\n        return 48\n    if n == 50:\n        return 49\n    if n == 51:\n        return 50\n    if n == 52:\n        return 51\n    if n == 53:\n        return 52\n    if n == 54:\n        return 53\n    if n == 55:\n        return 54\n    if n == 56:\n        return 55\n    if n == 57:\n        return 56\n    if n == 58:\n        return 57\n    if n == 59:\n        return 58\n    if n == 60:\n        return 59\n    if n == 61:\n        return 60\n    if n == 62:\n        return 61\n    if n == 63:\n        return 62\n    if n == 64:\n        return 63\n    if n == 65:\n        return 64\n    if n == 66:\n        return 65\n    if n == 67:\n        return 66\n    if n == 68:\n        return 67\n    if n == 69:\n        return 68\n    if n == 70:\n        return 69\n    if n == 71:\n        return 70\n    if n == 72:\n        return 71\n    if n == 73:\n        return 72\n    if n == 74:\n        return 73\n    if n == 75:\n        return 74\n    if n == 76:\n        return 75\n    if n == 77:\n        return 76\n    if n == 78:\n        return 77\n    if n == 79:\n        return 78\n    if n == 80:\n        return 79\n    if n == 81:\n        return 80\n    if n == 82:\n        return 81\n    if n == 83:\n        return 82\n    if n == 84:\n        return 83\n    if n == 85:\n        return 84\n    if n == 86:\n        return 85\n    if n == 87:\n        return 86\n    if n == 88:\n        return 87\n    if n == 89:\n        return 88\n    if n == 90:\n        return 89\n    if n == 91:\n        return 90\n    if n == 92:\n        return 91\n    if n == 93:\n        return 92\n    if n == 94:\n        return 93\n    if n == 95:\n        return 94\n    if n == 96:\n        return 95\n    if n == 97:\n        return 96\n    if n == 98:\n        return 97\n    if n == 99:\n        return 98\n    if n == 100:\n        return 99\n    if n == 101:\n        return 100\n    if n == 102:\n        return 101\n    if n == 103:\n        return 102\n    if n == 104:\n        return 103\n    if n == 105:\n        return 104\n    if n == 106:\n        return 105\n    if n == 107:\n        return 106\n    if n == 108:\n        return 107\n    if n == 109:\n        return 108\n    if n == 110:\n        return 109\n    if n == 111:\n        return 110\n    if n == 112:\n        return 111\n    if n == 113:\n        return 112\n    if n == 114:\n        return 113\n    if n == 115:\n        return 114\n    if n == 116:\n        return 115\n    if n == 117:\n        return 116\n    if n == 118:\n        return 117\n    if n == 119:\n        return 118\n    if n == 120:\n        return 119\n    if n == 121:\n        return 120\n    if n == 122:\n        return 121\n    if n == 123:\n        return 122\n    if n == 124:\n        return 123\n    if n == 125:\n        return 124\n    if n == 126:\n        return 125\n    if n == 127:\n        return 126\n    if n == 128:\n        return 127\n    if n == 129:\n        return 128\n    if n == 130:\n        return 129\n    if n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    return s"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    prices = [int(x) for x in stdin.split()]\n    beauty = 0\n    for i in range(k):\n        beauty = max(beauty, prices[i] & prices[i + 1] & prices[i + 2] & prices[i + 3])\n    return str(beauty)"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    b = [int(x) for x in stdin.readline().split()]\n    return str(solution_naive(n, a, b))\n\ndef"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a = [0] + a + [n]\n    a = [a[i] - a[i - 1] for i in range(1, len(a))]\n    a = [0] + a + [0]\n    a = [a[i] - a[i - 1] for i in range(1, len(a))]\n    a = [0] + a + [0]\n    a = [a[i] - a[i - 1] for i in range(1, len(a))]\n    a = [0] + a + [0]\n    a = [a[i] - a[i - 1] for i in range(1, len(a))]\n    a = [0] + a + [0]\n    a = [a[i] - a[i - 1] for i in range(1, len(a))]\n    a = [0] + a + [0]\n    a = [a[i] - a[i - 1] for i in range(1, len(a))]\n    a = [0] + a + [0]\n    a = [a[i] - a[i - 1] for i in range(1, len(a))]\n    a = [0] + a + [0]\n    a = [a[i] - a[i - 1] for i in range(1, len(a))]\n    a = [0] + a + [0]\n    a = [a[i] - a[i - 1] for i in range(1, len(a))]\n    a = [0] + a + [0]\n    a = [a[i] - a[i - 1] for i in range(1, len(a))]\n    a = [0] + a + [0]\n    a = [a[i] - a[i - 1] for i in range(1, len(a))]\n    a = [0] + a + [0]\n    a = [a[i] - a[i - 1] for i in range(1, len(a))]\n    a = [0] + a + [0]\n    a = [a[i] - a[i - 1] for i in range(1, len(a))]\n    a = [0] + a + [0]\n    a = [a[i] - a[i - 1] for i in range(1, len(a))]\n    a = [0] + a + [0]\n    a = [a[i] - a[i - 1] for i in range(1, len(a))]\n    a = [0] + a + [0]\n    a = [a[i] - a[i - 1] for i in range(1, len(a))]\n    a = [0] + a + [0]\n    a = [a[i] - a[i - 1] for i in range(1, len(a))]\n    a = [0] + a + [0]\n    a = [a[i] - a[i - 1] for i in range(1, len(a))]\n    a = [0] + a + [0]\n    a = [a[i] - a[i - 1] for i in range(1, len(a))]\n    a = [0] + a + [0]\n    a = [a[i] - a[i - 1] for i in range(1, len(a))]\n    a = [0] + a + [0]\n    a = [a[i] - a[i - 1] for i in range(1, len(a))]\n    a = [0] + a + [0]\n    a = [a[i] - a[i - 1] for i in range(1, len(a))]\n    a = [0] + a + [0]\n    a = [a[i] - a[i - 1] for i in range(1, len(a))]\n    a = [0] + a + [0]\n    a = [a[i] - a[i - 1] for i in range(1, len(a))]\n    a = [0] + a + [0]\n    a = [a[i] - a[i - 1] for i in range(1, len(a))]\n    a = [0] + a + [0]\n    a = [a[i] - a[i - 1] for i in range(1, len(a))]\n    a = [0] + a + [0]\n    a = [a[i] - a[i - 1] for i in range(1, len(a))]\n    a = [0] + a + [0]\n    a = [a[i] - a[i - 1] for i in range(1, len(a))]\n    a = [0] + a + [0]\n    a = [a[i] - a[i - 1] for i in range(1, len(a))]\n    a = [0] + a + [0]\n    a = [a[i] - a[i - 1] for i in range(1, len(a))]\n    a = [0] + a + [0]\n    a = [a[i] - a[i - 1] for i in range(1, len(a))]\n    a = [0] + a + [0]\n    a = [a[i] - a[i - 1] for i in range(1, len(a))]\n    a = [0] + a + [0]\n    a = [a[i] - a[i - 1] for i in range(1, len(a))]\n    a = [0] + a + [0]\n    a = [a[i] - a[i - 1] for i in range(1, len(a))]\n    a = [0] + a + [0"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n, m = map(int, stdin.readline().strip().split())\n        a = list(map(int, stdin.readline().strip().split()))\n        s = sum(a)\n        if s % m!= 0:\n            print(\"NO\")\n        else:\n            print(\"YES\")"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n, k = map(int, stdin.readline().strip().split())\n        print(n + f(n))"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n < 2 or m < 1 or m > 10 ** 5:\n        return \"Impossible\"\n    if n == 2 and m == 1:\n        return \"Possible\"\n    if n == 2 and m == 2:\n        return \"Possible\"\n    if n == 3 and m == 1:\n        return \"Possible\"\n    if n == 3 and m == 2:\n        return \"Possible\"\n    if n == 3 and m == 3:\n        return \"Possible\"\n    if n == 4 and m == 1:\n        return \"Possible\"\n    if n == 4 and m == 2:\n        return \"Possible\"\n    if n == 4 and m == 3:\n        return \"Possible\"\n    if n == 4 and m == 4:\n        return \"Possible\"\n    if n == 5 and m == 1:\n        return \"Possible\"\n    if n == 5 and m == 2:\n        return \"Possible\"\n    if n == 5 and m == 3:\n        return \"Possible\"\n    if n == 5 and m == 4:\n        return \"Possible\"\n    if n == 6 and m == 1:\n        return \"Possible\"\n    if n == 6 and m == 2:\n        return \"Possible\"\n    if n == 6 and m == 3:\n        return \"Possible\"\n    if n == 6 and m == 4:\n        return \"Possible\"\n    if n == 6 and m == 5:\n        return \"Possible\"\n    if n == 6 and m == 6:\n        return \"Possible\"\n    if n == 7 and m == 1:\n        return \"Possible\"\n    if n == 7 and m == 2:\n        return \"Possible\"\n    if n == 7 and m == 3:\n        return \"Possible\"\n    if n == 7 and m == 4:\n        return \"Possible\"\n    if n == 7 and m == 5:\n        return \"Possible\"\n    if n == 7 and m == 6:\n        return \"Possible\"\n    if n == 7 and m == 7:\n        return \"Possible\"\n    if n == 8 and m == 1:\n        return \"Possible\"\n    if n == 8 and m == 2:\n        return \"Possible\"\n    if n == 8 and m == 3:\n        return \"Possible\"\n    if n == 8 and m == 4:\n        return \"Possible\"\n    if n == 8 and m == 5:\n        return \"Possible\"\n    if n == 8 and m == 6:\n        return \"Possible\"\n    if n == 8 and m == 7:\n        return \"Possible\"\n    if n == 8 and m == 8:\n        return \"Possible\"\n    if n == 9 and m == 1:\n        return \"Possible\"\n    if n == 9 and m == 2:\n        return \"Possible\"\n    if n == 9 and m == 3:\n        return \"Possible\"\n    if n == 9 and m == 4:\n        return \"Possible\"\n    if n == 9 and m == 5:\n        return \"Possible\"\n    if n == 9 and m == 6:\n        return \"Possible\"\n    if n == 9 and m == 7:\n        return \"Possible\"\n    if n == 9 and m == 8:\n        return \"Possible\"\n    if n == 9 and m == 9:\n        return \"Possible\"\n    if n == 10 and m == 1:\n        return \"Possible\"\n    if n == 10 and m == 2:\n        return \"Possible\"\n    if n == 10 and m == 3:\n        return \"Possible\"\n    if n == 10 and m == 4:\n        return \"Possible\"\n    if n == 10 and m == 5:\n        return \"Possible\"\n    if n == 10 and m == 6:\n        return \"Possible\"\n    if n == 10 and m == 7:\n        return \"Possible\"\n    if n == 10 and m == 8:\n        return \"Possible\"\n    if n == 10 and m == 9:\n        return \"Possible\"\n    if n == 10 and m == 10:\n        return \"Possible\"\n    if n == 11 and m == 1:\n        return \"Possible\"\n    if n == 11 and m == 2:\n        return \"Possible\"\n    if n == 11 and m == 3:\n        return \"Possible\"\n    if n == 11 and m == 4:\n        return \"Possible\"\n    if n == 11 and m == 5:\n        return \"Possible\"\n    if n == 11 and m == 6:\n        return \"Possible\"\n    if n == 11 and m == 7:\n        return \"Possible\"\n    if n == 11 and m == 8:\n        return \"Possible\"\n    if n == 11 and m == 9:\n        return \"Possible\"\n    if n == 11 and m == 10:\n        return \"Possible\"\n    if n == 11 and m == 11:\n        return \"Possible\"\n    if n == 12 and m == 1:\n        return \"Possible\"\n    if n == 12 and m == 2:\n        return \"Possible\"\n    if n == 12 and m == 3:\n        return \"Possible\"\n    if n == 12 and m == 4:\n        return \"Possible\"\n    if n == 12 and m == 5:\n        return \"Possible\"\n    if n == 12 and m == 6:\n        return \"Possible\"\n    if n == 12 and m == 7:\n        return \"Possible\"\n    if n == 12 and m == 8:\n        return \"Possible\"\n    if n == 12 and m == 9:\n        return \"Possible\"\n    if n == 12 and m == 10:\n        return \"Possible\"\n    if n == 12 and m == 11:\n        return \"Possible\"\n    if n == 12 and m == 12:\n        return \"Possible\"\n    if n == 13 and m == 1:\n        return \"Possible\"\n    if n == 13 and m == 2:\n        return \"Possible\"\n    if n == 13 and m == 3:\n        return \"Possible\"\n    if n == 13 and m == 4:\n        return \"Possible\"\n    if n == 13 and m == 5:\n        return \"Possible\"\n    if n == 13 and m == 6:\n        return \"Possible\"\n    if n == 13 and m == 7:\n        return \"Possible\"\n    if n == 13 and m == 8:\n        return \"Possible\"\n    if n == 13 and m == 9:"
    },
    {
        "number": 634,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, n = [int(x) for x in stdin.split()]\n    cells = [tuple(int(x) for x in stdin.split()) for _ in range(n)]\n    cells.sort(key=lambda x: x[0])\n    for i in range(n):\n        if cells[i][0] == cells[i][1]:\n            return \"WIN\"\n    return \"LOSE\""
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    b = [int(x) for x in stdin.split()]\n    if a[s - 1] == 1:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 636,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    a.reverse()\n    m = 0\n    for i in range(n):\n        if k > 0:\n            m += 1\n            k -= a[i]\n        else:\n            break\n    return str(m) +'' +''.join(str(x) for x in a[:m])"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    if a.count(0) == n:\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    t = list(map(int, stdin.split()))\n    t.sort()\n    t.reverse()\n    ans = [0] * n\n    for i in range(n):\n        ans[i] = t.index(m - t[i])\n    return''.join(map(str, ans))"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = [int(x) for x in stdin.split()]\n    s = [int(x) for x in stdin.split()]\n    mex = 0\n    for i in range(n):\n        if s[i] > mex:\n            mex = s[i]\n    if mex == x:\n        return 0\n    else:\n        return mex - x"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return '{} {} {}'.format(a - b, a + b, abs(a - b))"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 642,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    stairs = [int(x) for x in stdin.split()]\n    stairs.sort()\n    stairs.append(n)\n    stairs.insert(0, 0)\n    for i in range(1, len(stairs)):\n        if stairs[i] - stairs[i - 1] > 1:\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        x, y, p, q = map(int, stdin.readline().split())\n        if p / q == y / x:\n            print(x)\n        elif p / q > y / x:\n            print(-1)\n        else:\n            print(int(p / q))"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = 0\n    for _ in range(n):\n        command = stdin.split()\n        if command[0] == 'for':\n            x += 1\n        elif command[0] == 'end':\n            x -= 1\n        elif command[0] == 'add':\n            x += 1\n    if x > 2**32-1:\n        return 'OVERFLOW!!!'\n    return str(x)"
    },
    {
        "number": 645,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 646,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    detachments = [tuple(map(int, stdin.readline().split())) for _ in range(n)]\n    detachments.sort(key=lambda x: x[0]**2 + x[1]**2)\n    detachments.sort(key=lambda x: x[0] + x[1])\n    detachments.sort(key=lambda x: x[0]**2 + x[1]**2)\n    detachments.sort(key=lambda x: x[0] + x[1])\n    detachments.sort(key=lambda x: x[0]**2 + x[1]**2)\n    detachments.sort(key=lambda x: x[0] + x[1])\n    detachments.sort(key=lambda x: x[0]**2 + x[1]**2)\n    detachments.sort(key=lambda x: x[0] + x[1])\n    detachments.sort(key=lambda x: x[0]**2 + x[1]**2)\n    detachments.sort(key=lambda x: x[0] + x[1])\n    detachments.sort(key=lambda x: x[0]**2 + x[1]**2)\n    detachments.sort(key=lambda x: x[0] + x[1])\n    detachments.sort(key=lambda x: x[0]**2 + x[1]**2)\n    detachments.sort(key=lambda x: x[0] + x[1])\n    detachments.sort(key=lambda x: x[0]**2 + x[1]**2)\n    detachments.sort(key=lambda x: x[0] + x[1])\n    detachments.sort(key=lambda x: x[0]**2 + x[1]**2)\n    detachments.sort(key=lambda x: x[0] + x[1])\n    detachments.sort(key=lambda x: x[0]**2 + x[1]**2)\n    detachments.sort(key=lambda x: x[0] + x[1])\n    detachments.sort(key=lambda x: x[0]**2 + x[1]**2)\n    detachments.sort(key=lambda x: x[0] + x[1])\n    detachments.sort(key=lambda x: x[0]**2 + x[1]**2)\n    detachments.sort(key=lambda x: x[0] + x[1])\n    detachments.sort(key=lambda x: x[0]**2 + x[1]**2)\n    detachments.sort(key=lambda x: x[0] + x[1])\n    detachments.sort(key=lambda x: x[0]**2 + x[1]**2)\n    detachments.sort(key=lambda x: x[0] + x[1])\n    detachments.sort(key=lambda x: x[0]**2 + x[1]**2)\n    detachments.sort(key=lambda x: x[0] + x[1])\n    detachments.sort(key=lambda x: x[0]**2 + x[1]**2)\n    detachments.sort(key=lambda x: x[0] + x[1])\n    detachments.sort(key=lambda x: x[0]**2 + x[1]**2)\n    detachments.sort(key=lambda x: x[0] + x[1])\n    detachments.sort(key=lambda x: x[0]**2 + x[1]**2)\n    detachments.sort(key=lambda x: x[0] + x[1])\n    detachments.sort(key=lambda x: x[0]**2 + x[1]**2)\n    detachments.sort(key=lambda x: x[0] + x[1])\n    detachments.sort(key=lambda x: x[0]**2 + x[1]**2)\n    detachments.sort(key=lambda x: x[0] + x[1])\n    detachments.sort(key=lambda x: x[0]**2 + x[1]**2)\n    detachments.sort(key=lambda x: x[0] + x[1])\n    detachments.sort(key=lambda x: x[0]**2 + x[1]**2)\n    detachments.sort(key=lambda x: x[0] + x[1])\n    detachments.sort(key=lambda x: x[0]**2 + x[1]**2)\n    detachments.sort(key=lambda x: x[0] + x[1])\n    detachments.sort(key=lambda x: x[0]**2 + x[1]**2)\n    detachments.sort(key=lambda x: x[0] + x[1])\n    detachments.sort(key=lambda x: x[0]**2 + x[1]**2)\n    detachments.sort(key=lambda x: x[0] + x[1])\n    detachments.sort(key=lambda x: x[0]**2 + x[1"
    },
    {
        "number": 647,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.read"
    },
    {
        "number": 648,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, b = map(int, stdin.split())\n    return str(m * b)\n\nassert(solution('''1 5''') == '30')\nassert(solution('''2 3''') == '25')\nassert(solution('''1 1''') == '1')\nassert(solution('''1000 1000''') == '1000000')\nassert(solution('''1000 1000''') == '1000000')\nassert(solution('''1000 1000''') == '1000000')\nassert(solution('''1000 1000''') == '1000000')\nassert(solution('''1000 1000''') == '1000000')\nassert(solution('''1000 1000''') == '1000000')\nassert(solution('''1000 1000''') == '1000000')\nassert(solution('''1000 1000''') == '1000000')\nassert(solution('''1000 1000''') == '1000000')\nassert(solution('''1000 1000''') == '1000000')\nassert(solution('''1000 1000''') == '1000000')\nassert(solution('''1000 1000''') == '1000000')\nassert(solution('''1000 1000''') == '1000000')\nassert(solution('''1000 1000''') == '1000000')\nassert(solution('''1000 1000''') == '1000000')\nassert(solution('''1000 1000''') == '1000000')\nassert(solution('''1000 1000''') == '1000000')\nassert(solution('''1000 1000''') == '1000000')\nassert(solution('''1000 1000''') == '1000000')\nassert(solution('''1000 1000''') == '1000000')\nassert(solution('''1000 1000''') == '1000000')\nassert(solution('''1000 1000''') == '1000000')\nassert(solution('''1000 1000''') == '1000000')\nassert(solution('''1000 1000''') == '1000000')\nassert(solution('''1000 1000''') == '1000000')\nassert(solution('''1000 1000''') == '1000000')\nassert(solution('''1000 1000''') == '1000000')\nassert(solution('''1000 1000''') == '1000000')\nassert(solution('''1000 1000''') == '1000000')\nassert(solution('''1000 1000''') == '1000000')\nassert(solution('''1000 1000''') == '1000000')\nassert(solution('''1000 1000''') == '1000000')\nassert(solution('''1000 1000''') == '1000000')\nassert(solution('''1000 1000''') == '1000000')\nassert(solution('''1000 1000''') == '1000000')\nassert(solution('''1000 1000''') == '1000000')\nassert(solution('''1000 1000''') == '1000000')\nassert(solution('''1000 1000''') == '1000000')\nassert(solution('''1000 1000''') == '1000000')\nassert(solution('''1000 1000''') == '1000000')\nassert(solution('''1000 1000''') == '1000000')\nassert(solution('''1000 1000''') == '1000000')\nassert(solution('''1000 1000''') == '1000000')\nassert(solution('''1000 1000''') == '1000000')\nassert(solution('''1000 1000''') == '1000000')\nassert(solution('''1000 1000''') == '1000000')\nassert(solution('''1000 1000''') == '1000000')\nassert(solution('''1000 1000''') == '1000000')\nassert(solution('''1000 1000''') == '1000000')\nassert(solution('''1000 1000''') == '1000000')\nassert(solution('''1000 1000''') == '1000000')\nassert(solution('''1000 1000''') == '1000000')\nassert(solution('''1000 1000''') == '1000000')\nassert(solution('''1000 1000''') == '1000000')\nassert(solution('''1000 1000''') == '1000000')\nassert(solution('''1000 1000''') == '1000000')\nassert(solution('''1000 1000''') == '1000000')\nassert(solution('''1000 1000''') == '1000000')\nassert(solution('''1000 1000''') == '1000000')\nassert(solution('''1000 1000''') == '1000000')\nassert(solution('''1000 1000''') == '1000000')\nassert(solution('''1000 1000''') == '1000000')\nassert(solution('''1000 1000''') == '1000000')\nassert(solution('''1000 1000''') == '1000000')\nassert(solution('''1000 1000''') == '1000000')\nassert(solution('''1000 1000''') == '1000000')\nassert(solution('''1000 1000''') == '1000000')\nassert(solution('''1000 1000''') == '1000000')\nassert(solution('''1000 1000''') == '1000000')\nassert(solution('''1000 1000''') == '1000000')\nassert(solution('''1000 1000''') == '1000000')\nassert(solution('''1000 1000''') == '1000000')\nassert(solution('''1000 1000''') == '1000000')\nassert(solution('''1000 1000''') == '1000000')\nassert(solution('''1000 1000''') == '1000000')\nassert(solution('''1000 1000''') == '1000000')\nassert(solution('''1000 1000''') == '1000000')\nassert(solution('''1000 1000''') == '1000000')\nassert(solution('''1000 1000''') == '1000000')\nassert(solution('''1000 1000''') == '1000000')\nassert(solution('''1000 1000''') == '1000000')\nassert(solution('''1000 1000''') == '1000000')\nassert(solution('''1000 1000''') == '1000000')\nassert(solution('''1000 1000''') == '1000000')\nassert(solution('''1000 1000''') == '1000000')\nassert(solution('''1000 1000''') == '1000000')\nassert(solution('''1000 1000''') == '1000000')\nassert(solution('''1000 1000''') == '1000000')\nassert(solution('''1000 1000''') == '1000000')\nassert(solution('''1000 1000''') == '1000000')\nassert(solution('''1000 1000''') == '1000000')\nassert(solution('''1000 1000''') == '1000000')\nassert(solution('''1000 1000''') == '1000000')\nassert(solution('''1000 1000''') == '1000000')\nassert(solution('''1000 1000''') == '1000000')\nassert(solution('''1000 1000''') == '1000000')"
    },
    {
        "number": 649,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    t = [int(x) for x in stdin.split()]\n    return str(2 ** n - 1)"
    },
    {
        "number": 650,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if stdin.isalpha() else \"NO\""
    },
    {
        "number": 651,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 652,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    points = [tuple(map(int, line.split())) for line in stdin.readlines()]\n    return str(solution_naive(points))\n\ndef"
    },
    {
        "number": 653,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    events = stdin.readline().strip()\n    rooms = [0] * 10\n    for event in events:\n        if event == 'L':\n            rooms[0] += 1\n        else:\n            rooms[9] += 1\n    return ''.join(str(room) for room in rooms)"
    },
    {
        "number": 654,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(n * (n + 1) // 2)"
    },
    {
        "number": 655,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    x, y = map(int, stdin.readline().split())\n    return \"White\" if x + y == n ** 2 else \"Black\""
    },
    {
        "number": 656,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    t = [int(x) for x in stdin.split()]\n    if n == 1:\n        return '-1'\n    if k == 0:\n        return '0'\n    if k > n:\n        return '-1'\n    if t[0] < 0:\n        return '-1'\n    if t[0] == 0:\n        return '1'\n    if t[0] > 0:\n        return '0'\n    if t[0] == t[1]:\n        return '1'\n    if t[0] > t[1]:\n        return '0'\n    if t[0] < t[1]:\n        return '2'\n    if t[0] < t[1]:\n        return '1'\n    if t[0] > t[1]:\n        return '0'\n    if t[0] == t[1]:\n        return '1'\n    if t[0] < t[1]:\n        return '2'\n    if t[0] > t[1]:\n        return '0'\n    if t[0] < t[1]:\n        return '2'\n    if t[0] > t[1]:\n        return '0'\n    if t[0] == t[1]:\n        return '1'\n    if t[0] < t[1]:\n        return '2'\n    if t[0] > t[1]:\n        return '0'\n    if t[0] == t[1]:\n        return '1'\n    if t[0] < t[1]:\n        return '2'\n    if t[0] > t[1]:\n        return '0'\n    if t[0] == t[1]:\n        return '1'\n    if t[0] < t[1]:\n        return '2'\n    if t[0] > t[1]:\n        return '0'\n    if t[0] == t[1]:\n        return '1'\n    if t[0] < t[1]:\n        return '2'\n    if t[0] > t[1]:\n        return '0'\n    if t[0] == t[1]:\n        return '1'\n    if t[0] < t[1]:\n        return '2'\n    if t[0] > t[1]:\n        return '0'\n    if t[0] == t[1]:\n        return '1'\n    if t[0] < t[1]:\n        return '2'\n    if t[0] > t[1]:\n        return '0'\n    if t[0] == t[1]:\n        return '1'\n    if t[0] < t[1]:\n        return '2'\n    if t[0] > t[1]:\n        return '0'\n    if t[0] == t[1]:\n        return '1'\n    if t[0] < t[1]:\n        return '2'\n    if t[0] > t[1]:\n        return '0'\n    if t[0] == t[1]:\n        return '1'\n    if t[0] < t[1]:\n        return '2'\n    if t[0] > t[1]:\n        return '0'\n    if t[0] == t[1]:\n        return '1'\n    if t[0] < t[1]:\n        return '2'\n    if t[0] > t[1]:\n        return '0'\n    if t[0] == t[1]:\n        return '1'\n    if t[0] < t[1]:\n        return '2'\n    if t[0] > t[1]:\n        return '0'\n    if t[0] == t[1]:\n        return '1'\n    if t[0] < t[1]:\n        return '2'\n    if t[0] > t[1]:\n        return '0'\n    if t[0] == t[1]:\n        return '1'\n    if t[0] < t[1]:\n        return '2'\n    if t[0] > t[1]:\n        return '0'\n    if t[0] == t[1]:\n        return '1'\n    if t[0] < t[1]:\n        return '2'\n    if t[0] > t[1]:\n        return '0'\n    if t[0] == t[1]:\n        return '1'\n    if t[0] < t[1]:\n        return '2'\n    if t[0] > t[1]:\n        return '0'\n    if t[0] == t[1]:\n        return '1'\n    if t[0] < t[1]:\n        return '2'\n    if t[0] > t[1]:\n        return '0'\n    if t[0] == t[1]:\n        return '1'\n    if t[0] < t[1]:\n        return '2'\n    if t[0] > t[1]:\n        return '0'\n    if t[0] == t[1]:\n        return '1'\n    if t[0] < t[1]:\n        return '2'\n    if t[0] > t[1]:\n        return '0'\n    if t[0] == t[1]:\n        return '1'\n    if t[0] < t[1]:\n        return '2'\n    if t[0] > t[1]:\n        return '0'\n    if t[0] == t[1]:\n        return '1'\n    if t[0] < t[1]:\n        return '2'\n    if t[0] > t[1]:\n        return '0'\n    if t[0] == t[1]:\n        return '1'\n    if t[0] < t[1]:\n        return '2'\n    if t[0] > t[1]:\n        "
    },
    {
        "number": 657,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    yellow, blue = [int(x) for x in stdin.split()]\n    green = int(stdin) - yellow - blue\n    return str(yellow * 2 + blue * 3 + green)"
    },
    {
        "number": 658,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, w, v, u = map(int, stdin.split())\n    polygon = [tuple(map(int, line.split())) for line in stdin.splitlines()[1:]]\n    x, y = 0, 0\n    for x, y in polygon:\n        if x < 0:\n            x = -x\n        if y < 0:\n            y = -y\n    t = 0\n    while x < w:\n        x += v\n        t += 1\n    while y < w:\n        y += u\n        t += 1\n    return str(t)\n\nprint(solution(input()))\n\n\"\"\"\n\ndef"
    },
    {
        "number": 659,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    if n < 2:\n        return '-1'\n    for i in range(n):\n        if a[i] > a[i+1]:\n            return''.join(map(str, [i+1, i+2]))\n    return '-1'"
    },
    {
        "number": 660,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, b, p = [int(x) for x in stdin.split()]\n    return '{} {}'.format(b * (n // 2) + b * (n % 2), b * (n // 2) + b * (n % 2) + p)"
    },
    {
        "number": 661,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    M, K = [int(x) for x in stdin.split()]\n    a = [0] * 2 ** (M + 1)\n    for i in range(2 ** M):\n        a[i] = i ^ (i + 1)\n    for i in range(2 ** M):\n        if a[i] & K:\n            a[i] ^= K\n    return''.join(str(x) for x in a)"
    },
    {
        "number": 662,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"NO\"\n    if n == 1:\n        return \"YES\"\n    if n == 2:\n        return \"NO\"\n    if n == 3:\n        return \"YES\"\n    if n == 4:\n        return \"NO\"\n    if n == 5:\n        return \"YES\"\n    if n == 6:\n        return \"NO\"\n    if n == 7:\n        return \"YES\"\n    if n == 8:\n        return \"NO\"\n    if n == 9:\n        return \"YES\"\n    if n == 10:\n        return \"NO\"\n    if n == 11:\n        return \"YES\"\n    if n == 12:\n        return \"NO\"\n    if n == 13:\n        return \"YES\"\n    if n == 14:\n        return \"NO\"\n    if n == 15:\n        return \"YES\"\n    if n == 16:\n        return \"NO\"\n    if n == 17:\n        return \"YES\"\n    if n == 18:\n        return \"NO\"\n    if n == 19:\n        return \"YES\"\n    if n == 20:\n        return \"NO\"\n    if n == 21:\n        return \"YES\"\n    if n == 22:\n        return \"NO\"\n    if n == 23:\n        return \"YES\"\n    if n == 24:\n        return \"NO\"\n    if n == 25:\n        return \"YES\"\n    if n == 26:\n        return \"NO\"\n    if n == 27:\n        return \"YES\"\n    if n == 28:\n        return \"NO\"\n    if n == 29:\n        return \"YES\"\n    if n == 30:\n        return \"NO\"\n    if n == 31:\n        return \"YES\"\n    if n == 32:\n        return \"NO\"\n    if n == 33:\n        return \"YES\"\n    if n == 34:\n        return \"NO\"\n    if n == 35:\n        return \"YES\"\n    if n == 36:\n        return \"NO\"\n    if n == 37:\n        return \"YES\"\n    if n == 38:\n        return \"NO\"\n    if n == 39:\n        return \"YES\"\n    if n == 40:\n        return \"NO\"\n    if n == 41:\n        return \"YES\"\n    if n == 42:\n        return \"NO\"\n    if n == 43:\n        return \"YES\"\n    if n == 44:\n        return \"NO\"\n    if n == 45:\n        return \"YES\"\n    if n == 46:\n        return \"NO\"\n    if n == 47:\n        return \"YES\"\n    if n == 48:\n        return \"NO\"\n    if n == 49:\n        return \"YES\"\n    if n == 50:\n        return \"NO\"\n    if n == 51:\n        return \"YES\"\n    if n == 52:\n        return \"NO\"\n    if n == 53:\n        return \"YES\"\n    if n == 54:\n        return \"NO\"\n    if n == 55:\n        return \"YES\"\n    if n == 56:\n        return \"NO\"\n    if n == 57:\n        return \"YES\"\n    if n == 58:\n        return \"NO\"\n    if n == 59:\n        return \"YES\"\n    if n == 60:\n        return \"NO\"\n    if n == 61:\n        return \"YES\"\n    if n == 62:\n        return \"NO\"\n    if n == 63:\n        return \"YES\"\n    if n == 64:\n        return \"NO\"\n    if n == 65:\n        return \"YES\"\n    if n == 66:\n        return \"NO\"\n    if n == 67:\n        return \"YES\"\n    if n == 68:\n        return \"NO\"\n    if n == 69:\n        return \"YES\"\n    if n == 70:\n        return \"NO\"\n    if n == 71:\n        return \"YES\"\n    if n == 72:\n        return \"NO\"\n    if n == 73:\n        return \"YES\"\n    if n == 74:\n        return \"NO\"\n    if n == 75:\n        return \"YES\"\n    if n == 76:\n        return \"NO\"\n    if n == 77:\n        return \"YES\"\n    if n == 78:\n        return \"NO\"\n    if n == 79:\n        return \"YES\"\n    if n == 80:\n        return \"NO\"\n    if n == 81:\n        return \"YES\"\n    if n == 82:\n        return \"NO\"\n    if n == 83:\n        return \"YES\"\n    if n == 84:\n        return \"NO\"\n    if n == 85:\n        return \"YES\"\n    if n == 86:\n        return \"NO\"\n    if n == 87:\n        return \"YES\"\n    if n == 88:\n        return \"NO\"\n    if n == 89:\n        return \"YES\"\n    if n == 90:\n        return \"NO\"\n    if n == 91:\n        return \"YES\"\n    if n == 92:\n        return \"NO\"\n    if n == 93:\n        return \"YES\"\n    if n == 94:\n        return \"NO\"\n    if n == 95:\n        return \"YES\"\n    if n == 96:\n        return \"NO\"\n    if n == 97:\n        return \"YES\"\n    if n == 98:\n        return \"NO\"\n    if n == 99:\n        return \"YES\"\n    if n == 100:\n        return \"NO\"\n    if n == 101:\n        return \"YES\"\n    if n == 102:\n        return \"NO\"\n    if n == 103:\n        return \"YES\"\n    if n == 104:\n        return \"NO\"\n    if n == 105:\n        return \"YES\"\n    if n == 106:\n        return \"NO\"\n    if n == 107:\n        return \"YES\"\n    if n == 108:\n        return \"NO\"\n    if n == 109:\n        return \"YES\"\n    if n == 110:\n        return \"NO\"\n    if n == 111:\n        return \"YES\"\n    if n == 112:\n        return \"NO\"\n    if n == 113:\n        return \"YES\"\n    if n == 114:\n        return \"NO\"\n    if n == 115:\n        return \"YES\"\n    if n == 116:\n        return \"NO\"\n    if n == 117:\n        return \"YES\"\n    if n == 118:\n        return \"NO\"\n    if n == 119:\n        return \"YES\"\n    if n == 120:\n        return \"NO\"\n"
    },
    {
        "number": 663,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, x, y, x_prime, y_prime = [int(x) for x in stdin.split()]\n    return str(min(abs(x - x_prime), abs(y - y_prime), abs(x_prime - x), abs(y_prime - y)))"
    },
    {
        "number": 664,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n    if n == 1:\n        return str(0)\n    if n == 2:\n        return str(abs(a[0] - a[1]))\n    if n == 3:\n        return str(abs(a[0] - a[2]) + abs(a[1] - a[2]))\n    if n == 4:\n        return str(abs(a[0] - a[3]) + abs(a[1] - a[3]) + abs(a[2] - a[3]))\n    if n == 5:\n        return str(abs(a[0] - a[4]) + abs(a[1] - a[4]) + abs(a[2] - a[4]) + abs(a[3] - a[4]))\n    if n == 6:\n        return str(abs(a[0] - a[5]) + abs(a[1] - a[5]) + abs(a[2] - a[5]) + abs(a[3] - a[5]) + abs(a[4] - a[5]))\n    if n == 7:\n        return str(abs(a[0] - a[6]) + abs(a[1] - a[6]) + abs(a[2] - a[6]) + abs(a[3] - a[6]) + abs(a[4] - a[6]) + abs(a[5] - a[6]))\n    if n == 8:\n        return str(abs(a[0] - a[7]) + abs(a[1] - a[7]) + abs(a[2] - a[7]) + abs(a[3] - a[7]) + abs(a[4] - a[7]) + abs(a[5] - a[7]) + abs(a[6] - a[7]))\n    if n == 9:\n        return str(abs(a[0] - a[8]) + abs(a[1] - a[8]) + abs(a[2] - a[8]) + abs(a[3] - a[8]) + abs(a[4] - a[8]) + abs(a[5] - a[8]) + abs(a[6] - a[8]) + abs(a[7] - a[8]))\n    if n == 10:\n        return str(abs(a[0] - a[9]) + abs(a[1] - a[9]) + abs(a[2] - a[9]) + abs(a[3] - a[9]) + abs(a[4] - a[9]) + abs(a[5] - a[9]) + abs(a[6] - a[9]) + abs(a[7] - a[9]) + abs(a[8] - a[9]))\n    return -1"
    },
    {
        "number": 665,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n, s = map(int, stdin.readline().strip().split())\n        a = list(map(int, stdin.readline().strip().split()))\n        print(solution_naive(n, s, a))\n\ndef"
    },
    {
        "number": 666,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(n - 1)\n\nassert(solution('') == '0')\nassert(solution('1') == '1')\nassert(solution('2') == '1')\nassert(solution('3') == '2')\nassert(solution('4') == '3')\nassert(solution('5') == '4')\nassert(solution('6') == '5')\nassert(solution('7') == '6')\nassert(solution('8') == '7')\nassert(solution('9') == '8')\nassert(solution('10') == '9')\nassert(solution('11') == '10')\nassert(solution('12') == '11')\nassert(solution('13') == '12')\nassert(solution('14') == '13')\nassert(solution('15') == '14')\nassert(solution('16') == '15')\nassert(solution('17') == '16')\nassert(solution('18') == '17')\nassert(solution('19') == '18')\nassert(solution('20') == '19')\nassert(solution('21') == '20')\nassert(solution('22') == '21')\nassert(solution('23') == '22')\nassert(solution('24') == '23')\nassert(solution('25') == '24')\nassert(solution('26') == '25')\nassert(solution('27') == '26')\nassert(solution('28') == '27')\nassert(solution('29') == '28')\nassert(solution('30') == '29')\nassert(solution('31') == '30')\nassert(solution('32') == '31')\nassert(solution('33') == '32')\nassert(solution('34') == '33')\nassert(solution('35') == '34')\nassert(solution('36') == '35')\nassert(solution('37') == '36')\nassert(solution('38') == '37')\nassert(solution('39') == '38')\nassert(solution('40') == '39')\nassert(solution('41') == '40')\nassert(solution('42') == '41')\nassert(solution('43') == '42')\nassert(solution('44') == '43')\nassert(solution('45') == '44')\nassert(solution('46') == '45')\nassert(solution('47') == '46')\nassert(solution('48') == '47')\nassert(solution('49') == '48')\nassert(solution('50') == '49')\nassert(solution('51') == '50')\nassert(solution('52') == '51')\nassert(solution('53') == '52')\nassert(solution('54') == '53')\nassert(solution('55') == '54')\nassert(solution('56') == '55')\nassert(solution('57') == '56')\nassert(solution('58') == '57')\nassert(solution('59') == '58')\nassert(solution('60') == '59')\nassert(solution('61') == '60')\nassert(solution('62') == '61')\nassert(solution('63') == '62')\nassert(solution('64') == '63')\nassert(solution('65') == '64')\nassert(solution('66') == '65')\nassert(solution('67') == '66')\nassert(solution('68') == '67')\nassert(solution('69') == '68')\nassert(solution('70') == '69')\nassert(solution('71') == '70')\nassert(solution('72') == '71')\nassert(solution('73') == '72')\nassert(solution('74') == '73')\nassert(solution('75') == '74')\nassert(solution('76') == '75')\nassert(solution('77') == '76')\nassert(solution('78') == '77')\nassert(solution('79') == '78')\nassert(solution('80') == '79')\nassert(solution('81') == '80')\nassert(solution('82') == '81')\nassert(solution('83') == '82')\nassert(solution('84') == '83')\nassert(solution('85') == '84')\nassert(solution('86') == '85')\nassert(solution('87') == '86')\nassert(solution('88') == '87')\nassert(solution('89') == '88')\nassert(solution('90') == '89')\nassert(solution('91') == '90')\nassert(solution('92') == '91')\nassert(solution('93') == '92')\nassert(solution('94') == '93')\nassert(solution('95') == '94')\nassert(solution('96') == '95')\nassert(solution('97') == '96')\nassert(solution('98') == '97')\nassert(solution('99') == '98')\nassert(solution('100') == '99')\nassert(solution('101') == '100')\nassert(solution('102') == '101')\nassert(solution('103') == '102')\nassert(solution('104') == '103')\nassert(solution('105') == '104')\nassert(solution('106') == '105')\nassert(solution('107') == '106')\nassert(solution('108') == '107')\nassert(solution('109') == '108')\nassert(solution('110') == '109')\nassert(solution('111') == '110')\nassert(solution('112') == '111')\nassert(solution('113') == '112')\nassert(solution('114') == '113')\nassert(solution('115') == '114')\nassert(solution('116') == '115')\nassert(solution('117') == '116')\nassert(solution('118') == '117')\nassert(solution('119') == '118')\nassert(solution('120') == '119')\nassert(solution('121') == '120')\nassert(solution('122') == '121')\nassert(solution('123') == '122')\nassert(solution('124') == '123')\nassert(solution('125') == '124')\nassert(solution('126') == '125')\nassert(solution('127') == '126')\nassert(solution('128') == '127')\nassert(solution('129') == '128')\nassert(solution('130') == '129')\nassert(solution('131') == '130')\nassert(solution('132') == '131')\nassert(solution('133') == '132')\nassert(solution('134') == '133')\nassert(solution('135') == '134')\nassert(solution('136') == '135')\nassert(solution('137') == '136')\nassert(solution('138') == '137')\nassert(solution('139') == '138')\nassert(solution('140') == '139')\nassert(solution('141') == '140')\nassert(solution('142') == '141')\nassert(solution('143') == '142')\nassert("
    },
    {
        "number": 667,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\nfrom typing import List\n\ndef"
    },
    {
        "number": 668,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    if n == 1:\n        return '-1'\n    if n == 2:\n        return '1'\n    if n == 3:\n        return '2'\n    if n == 4:\n        return '3'\n    if n == 5:\n        return '4'\n    if n == 6:\n        return '5'\n    if n == 7:\n        return '6'\n    if n == 8:\n        return '7'\n    if n == 9:\n        return '8'\n    if n == 10:\n        return '9'\n    if n == 11:\n        return '10'\n    if n == 12:\n        return '11'\n    if n == 13:\n        return '12'\n    if n == 14:\n        return '13'\n    if n == 15:\n        return '14'\n    if n == 16:\n        return '15'\n    if n == 17:\n        return '16'\n    if n == 18:\n        return '17'\n    if n == 19:\n        return '18'\n    if n == 20:\n        return '19'\n    if n == 21:\n        return '20'\n    if n == 22:\n        return '21'\n    if n == 23:\n        return '22'\n    if n == 24:\n        return '23'\n    if n == 25:\n        return '24'\n    if n == 26:\n        return '25'\n    if n == 27:\n        return '26'\n    if n == 28:\n        return '27'\n    if n == 29:\n        return '28'\n    if n == 30:\n        return '29'\n    if n == 31:\n        return '30'\n    if n == 32:\n        return '31'\n    if n == 33:\n        return '32'\n    if n == 34:\n        return '33'\n    if n == 35:\n        return '34'\n    if n == 36:\n        return '35'\n    if n == 37:\n        return '36'\n    if n == 38:\n        return '37'\n    if n == 39:\n        return '38'\n    if n == 40:\n        return '39'\n    if n == 41:\n        return '40'\n    if n == 42:\n        return '41'\n    if n == 43:\n        return '42'\n    if n == 44:\n        return '43'\n    if n == 45:\n        return '44'\n    if n == 46:\n        return '45'\n    if n == 47:\n        return '46'\n    if n == 48:\n        return '47'\n    if n == 49:\n        return '48'\n    if n == 50:\n        return '49'\n    if n == 51:\n        return '50'\n    if n == 52:\n        return '51'\n    if n == 53:\n        return '52'\n    if n == 54:\n        return '53'\n    if n == 55:\n        return '54'\n    if n == 56:\n        return '55'\n    if n == 57:\n        return '56'\n    if n == 58:\n        return '57'\n    if n == 59:\n        return '58'\n    if n == 60:\n        return '59'\n    if n == 61:\n        return '60'\n    if n == 62:\n        return '61'\n    if n == 63:\n        return '62'\n    if n == 64:\n        return '63'\n    if n == 65:\n        return '64'\n    if n == 66:\n        return '65'\n    if n == 67:\n        return '66'\n    if n == 68:\n        return '67'\n    if n == 69:\n        return '68'\n    if n == 70:\n        return '69'\n    if n == 71:\n        return '70'\n    if n == 72:\n        return '71'\n    if n == 73:\n        return '72'\n    if n == 74:\n        return '73'\n    if n == 75:\n        return '74'\n    if n == 76:\n        return '75'\n    if n == 77:\n        return '76'\n    if n == 78:\n        return '77'\n    if n == 79:\n        return '78'\n    if n == 80:\n        return '79'\n    if n == 81:\n        return '80'\n    if n == 82:\n        return '81'\n    if n == 83:\n        return '82'\n    if n == 84:\n        return '83'\n    if n == 85:\n        return '84'\n    if n == 86:\n        return '85'\n    if n == 87:\n        return '86'\n    if n == 88:\n        return '87'\n    if n == 89:\n        return '88'\n    if n == 90:\n        return '89'\n    if n == 91:\n        return '90'\n    if n == 92:\n        return '91'\n    if n == 93:\n        return '92'\n    if n == 94:\n        return '93'\n    if n == 95:\n        return '94'\n    if n == 96:\n        return '95'\n    if n == 97:\n        return '96'\n    if n == 98:\n        return '97'\n    if n == 99:\n        return '98'\n    if n == 100:\n        return '99'\n    if n == 101:\n        return '100'\n    if n == 102:\n        return '101'\n    if n == 103:\n        return '102'\n    if n == 104:\n        return '103'\n    if n == 105:\n        return '104'\n"
    },
    {
        "number": 669,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    b = []\n    s = 0\n    for i in range(n):\n        s += a[i]\n        b.append(i)\n    if s % m == 0:\n        return str(s)\n    else:\n        return str(s % m)"
    },
    {
        "number": 670,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    x1, y1, x2, y2 = map(int, stdin.split())\n    return str(abs(a * x1 + b * y1 + c) / max(1, abs(b)))"
    },
    {
        "number": 671,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(n // 10 ** (len(str(n)) - 1))"
    },
    {
        "number": 672,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return \"infinity\" if a % b == 0 else a // b"
    },
    {
        "number": 673,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(n + k - 1)"
    },
    {
        "number": 674,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"NO\"\n    strings = [stdin.split()[i] for i in range(n)]\n    strings.sort()\n    good_strings = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            if strings[i] == strings[j][:len(strings[i])]:\n                good_strings.append(strings[i])\n                break\n    if len(good_strings) == 0:\n        return \"NO\"\n    return min(good_strings)"
    },
    {
        "number": 675,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, t, r = map(int, stdin.split())\n    w = list(map(int, stdin.split()))\n    w.sort()\n    w_sum = sum(w)\n    if w_sum < r:\n        return -1\n    w_sum = w_sum - r\n    w_sum_left = w_sum\n    w_sum_right = w_sum\n    for i in range(m):\n        w_sum_left -= w[i]\n        w_sum_right += w[i]\n        if w_sum_left < 0:\n            return -1\n        if w_sum_right > r:\n            return -1\n    return w_sum_right - w_sum_left"
    },
    {
        "number": 676,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 4:\n        return \"NO\"\n    candies = [int(x) for x in stdin.split(\"\\n\")]\n    candies.sort()\n    mean = sum(candies) / n\n    median = candies[n // 2]\n    range_ = candies[-1] - candies[0]\n    if mean == median and range_ == range_:\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 677,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    queries = [tuple(map(int, line.strip().split())) for line in stdin.readlines()]\n    return '\\n'.join(str(solution_naive(n, *query)) for query in queries)\n\ndef"
    },
    {
        "number": 678,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_01(stdin))\n\ndef"
    },
    {
        "number": 679,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if is_valid(stdin) else 'No'\n\ndef"
    },
    {
        "number": 680,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x_A, y_A = [int(x) for x in stdin.split()]\n    x_B, y_B = [int(x) for x in stdin.split()]\n    x_C, y_C = [int(x) for x in stdin.split()]\n    return '\\n'.join(str(x) +'' + str(y) for x, y in [(x_A, y_A), (x_B, y_B), (x_C, y_C)])"
    },
    {
        "number": 681,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split()]\n    return str(solution_recursive(N, M))\n\ndef"
    },
    {
        "number": 682,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r_1, c_1, r_2, c_2 = [int(x) for x in stdin.split()]\n    return '\\n'.join(str(x) for x in solve(r_1, c_1, r_2, c_2))\n\ndef"
    },
    {
        "number": 683,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a == 0:\n        return \"0\"\n    if a == 1:\n        return \"1\"\n    if a == 2:\n        return \"2\"\n    if a == 3:\n        return \"4\"\n    if a == 4:\n        return \"8\"\n    if a == 5:\n        return \"10\"\n    if a == 6:\n        return \"12\"\n    if a == 7:\n        return \"14\"\n    if a == 8:\n        return \"16\"\n    if a == 9:\n        return \"18\"\n    if a == 10:\n        return \"20\"\n    if a == 11:\n        return \"22\"\n    if a == 12:\n        return \"24\"\n    if a == 13:\n        return \"26\"\n    if a == 14:\n        return \"28\"\n    if a == 15:\n        return \"30\"\n    if a == 16:\n        return \"32\"\n    if a == 17:\n        return \"34\"\n    if a == 18:\n        return \"36\"\n    if a == 19:\n        return \"38\"\n    if a == 20:\n        return \"40\"\n    if a == 21:\n        return \"42\"\n    if a == 22:\n        return \"44\"\n    if a == 23:\n        return \"46\"\n    if a == 24:\n        return \"48\"\n    if a == 25:\n        return \"50\"\n    if a == 26:\n        return \"52\"\n    if a == 27:\n        return \"54\"\n    if a == 28:\n        return \"56\"\n    if a == 29:\n        return \"58\"\n    if a == 30:\n        return \"60\"\n    if a == 31:\n        return \"62\"\n    if a == 32:\n        return \"64\"\n    if a == 33:\n        return \"66\"\n    if a == 34:\n        return \"68\"\n    if a == 35:\n        return \"70\"\n    if a == 36:\n        return \"72\"\n    if a == 37:\n        return \"74\"\n    if a == 38:\n        return \"76\"\n    if a == 39:\n        return \"78\"\n    if a == 40:\n        return \"80\"\n    if a == 41:\n        return \"82\"\n    if a == 42:\n        return \"84\"\n    if a == 43:\n        return \"86\"\n    if a == 44:\n        return \"88\"\n    if a == 45:\n        return \"90\"\n    if a == 46:\n        return \"92\"\n    if a == 47:\n        return \"94\"\n    if a == 48:\n        return \"96\"\n    if a == 49:\n        return \"98\"\n    if a == 50:\n        return \"100\"\n    if a == 51:\n        return \"102\"\n    if a == 52:\n        return \"104\"\n    if a == 53:\n        return \"106\"\n    if a == 54:\n        return \"108\"\n    if a == 55:\n        return \"110\"\n    if a == 56:\n        return \"112\"\n    if a == 57:\n        return \"114\"\n    if a == 58:\n        return \"116\"\n    if a == 59:\n        return \"118\"\n    if a == 60:\n        return \"120\"\n    if a == 61:\n        return \"122\"\n    if a == 62:\n        return \"124\"\n    if a == 63:\n        return \"126\"\n    if a == 64:\n        return \"128\"\n    if a == 65:\n        return \"130\"\n    if a == 66:\n        return \"132\"\n    if a == 67:\n        return \"134\"\n    if a == 68:\n        return \"136\"\n    if a == 69:\n        return \"138\"\n    if a == 70:\n        return \"140\"\n    if a == 71:\n        return \"142\"\n    if a == 72:\n        return \"144\"\n    if a == 73:\n        return \"146\"\n    if a == 74:\n        return \"148\"\n    if a == 75:\n        return \"150\"\n    if a == 76:\n        return \"152\"\n    if a == 77:\n        return \"154\"\n    if a == 78:\n        return \"156\"\n    if a == 79:\n        return \"158\"\n    if a == 80:\n        return \"160\"\n    if a == 81:\n        return \"162\"\n    if a == 82:\n        return \"164\"\n    if a == 83:\n        return \"166\"\n    if a == 84:\n        return \"168\"\n    if a == 85:\n        return \"170\"\n    if a == 86:\n        return \"172\"\n    if a == 87:\n        return \"174\"\n    if a == 88:\n        return \"176\"\n    if a == 89:\n        return \"178\"\n    if a == 90:\n        return \"180\"\n    if a == 91:\n        return \"182\"\n    if a == 92:\n        return \"184\"\n    if a == 93:\n        return \"186\"\n    if a == 94:\n        return \"188\"\n    if a == 95:\n        return \"190\"\n    if a == 96:\n        return \"192\"\n    if a == 97:\n        return \"194\"\n    if a == 98:\n        return \"196\"\n    if a == 99:\n        return \"198\"\n    if a == 100:\n        return \"200\"\n    if a == 101:\n        return \"202\"\n    if a == 102:\n        return \"204\"\n    if a == 103:\n        return \"206\"\n    if a == 104:\n        return \"208\"\n    if a == 105:\n        return \"210\"\n    if a == 106:\n        return \"212\"\n    if a == 107:\n        return \"214\"\n    if a == 108:\n        return \"216\"\n    if a == 109:\n        return \"218\"\n    if a == 110:\n        return \"220\"\n    if a == 111:\n        return \"222\"\n    if a == 112:\n        return \"224\"\n    if a == 113:\n        return \"226\"\n    if a == 114:\n        return \"228\"\n    if a == 115:\n        return \"230\"\n    if a == 116:\n        return \"232\"\n    if a == 117:\n        return \"234\"\n    if a == 118:\n        return \"236\"\n    if a == 119:\n        return \"238\"\n    if a == 120:\n        return \"240\"\n    if a == 121:\n        return \"242\"\n    if a == 122:\n        return \"244\"\n    if a == 123:\n        return \"246\"\n    if a == 124:\n        return \"248\"\n    if a == 125:\n        return \"250\"\n    if a == 126:\n        return \"252\"\n    if a == 127:\n        return \"254\"\n    if a == 128:\n        return \"256\"\n    if a == 129:\n        return \"258\"\n    if a == 130:\n        return \"260\"\n    if a == 131:\n        return \"262\"\n    if a == 132:\n        return \"264\"\n    if a == 133:\n        return \"266\"\n    if a == 134:\n        return \"268\"\n    if a == 135:\n        return \"270\"\n    if a == 136:\n        return \"272\"\n    if a == 137:\n        return \"274\"\n    if a == 138:\n        return \"276\"\n    if a == 139:\n        return \"278\"\n    if a == 140:\n        return \"280\"\n    if a == 141:\n        return \"282\"\n    if a == 142:\n        return \"284\"\n    if a == 143:\n        return \"286\"\n    if a == 144:\n        return \"288\"\n    if a == 145:\n        return \"290\"\n    if a == 146:\n        return \"292\"\n    if a == 147:\n        return \"294\"\n    if a == 148:\n        return \"296\"\n    if a == 149:\n        return \"298\"\n    if a == 150:\n        return \"300\"\n    if a == 151:\n        "
    },
    {
        "number": 684,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        a, b, c, d = map(int, stdin.readline().split())\n        if a <= b and b <= c and c <= d:\n            print(a, b, c)\n\nsolution(stdin)\n\n\"\"\"\n\ndef"
    },
    {
        "number": 685,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, h = map(int, stdin.split())\n    x = [map(int, stdin.split()) for _ in range(n)]\n    x.sort(key=lambda x: x[1])\n    x.sort(key=lambda x: x[0])\n    x.sort(key=lambda x: x[1] - x[0])\n    x.sort(key=lambda x: x[0] - h)\n    x.sort(key=lambda x: x[1] - h)\n    x.sort(key=lambda x: x[0] - h)\n    x.sort(key=lambda x: x[1] - h)\n    x.sort(key=lambda x: x[0] - h)\n    x.sort(key=lambda x: x[1] - h)\n    x.sort(key=lambda x: x[0] - h)\n    x.sort(key=lambda x: x[1] - h)\n    x.sort(key=lambda x: x[0] - h)\n    x.sort(key=lambda x: x[1] - h)\n    x.sort(key=lambda x: x[0] - h)\n    x.sort(key=lambda x: x[1] - h)\n    x.sort(key=lambda x: x[0] - h)\n    x.sort(key=lambda x: x[1] - h)\n    x.sort(key=lambda x: x[0] - h)\n    x.sort(key=lambda x: x[1] - h)\n    x.sort(key=lambda x: x[0] - h)\n    x.sort(key=lambda x: x[1] - h)\n    x.sort(key=lambda x: x[0] - h)\n    x.sort(key=lambda x: x[1] - h)\n    x.sort(key=lambda x: x[0] - h)\n    x.sort(key=lambda x: x[1] - h)\n    x.sort(key=lambda x: x[0] - h)\n    x.sort(key=lambda x: x[1] - h)\n    x.sort(key=lambda x: x[0] - h)\n    x.sort(key=lambda x: x[1] - h)\n    x.sort(key=lambda x: x[0] - h)\n    x.sort(key=lambda x: x[1] - h)\n    x.sort(key=lambda x: x[0] - h)\n    x.sort(key=lambda x: x[1] - h)\n    x.sort(key=lambda x: x[0] - h)\n    x.sort(key=lambda x: x[1] - h)\n    x.sort(key=lambda x: x[0] - h)\n    x.sort(key=lambda x: x[1] - h)\n    x.sort(key=lambda x: x[0] - h)\n    x.sort(key=lambda x: x[1] - h)\n    x.sort(key=lambda x: x[0] - h)\n    x.sort(key=lambda x: x[1] - h)\n    x.sort(key=lambda x: x[0] - h)\n    x.sort(key=lambda x: x[1] - h)\n    x.sort(key=lambda x: x[0] - h)\n    x.sort(key=lambda x: x[1] - h)\n    x.sort(key=lambda x: x[0] - h)\n    x.sort(key=lambda x: x[1] - h)\n    x.sort(key=lambda x: x[0] - h)\n    x.sort(key=lambda x: x[1] - h)\n    x.sort(key=lambda x: x[0] - h)\n    x.sort(key=lambda x: x[1] - h)\n    x.sort(key=lambda x: x[0] - h)\n    x.sort(key=lambda x: x[1] - h)\n    x.sort(key=lambda x: x[0] - h)\n    x.sort(key=lambda x: x[1] - h)\n    x.sort(key=lambda x: x[0] - h)\n    x.sort(key=lambda x: x[1] - h)\n    x.sort(key=lambda x: x[0] - h)\n    x.sort(key=lambda x: x[1] - h)\n    x.sort(key=lambda x: x[0] - h)\n    x.sort(key=lambda x: x[1] - h)\n    x.sort(key=lambda x: x[0] - h)\n    x.sort(key=lambda x: x[1] - h)\n    x.sort(key=lambda x: x[0] - h)\n    x.sort(key=lambda x: x[1] - h)\n    x.sort(key=lambda x: x[0] - h)\n    x.sort(key=lambda x: x[1] - h)\n    x.sort(key=lambda x: x[0] - h)\n    x.sort(key=lambda x: x[1] - h)\n    x."
    },
    {
        "number": 686,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        x, y = map(int, stdin.readline().strip().split(' '))\n        if x == y:\n            print('YES')\n        elif x % 2 == 0 and y % 2 == 0:\n            print('NO')\n        elif x % 2 == 0 and y % 2!= 0:\n            print('YES')\n        elif x % 2!= 0 and y % 2 == 0:\n            print('YES')\n        else:\n            print('NO')"
    },
    {
        "number": 687,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == 1:\n        return '-1'\n    if a % 10 == b % 10:\n        return '-1'\n    return '{} {}'.format(a * 10 + b, a * 10 + b + 1)"
    },
    {
        "number": 688,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    n = int(stdin)\n    s = stdin\n    return str(s.count(str(t)))\n\nprint(solution(input()))\n"
    },
    {
        "number": 689,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    strings = [stdin.readline().strip() for _ in range(n)]\n    for i in range(n):\n        for j in range(i + 1, n):\n            if strings[i] == strings[j][:len(strings[i])]:\n                return \"YES\"\n    return \"NO\""
    },
    {
        "number": 690,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"O\"\n    if n == 1:\n        return \"O-\"\n    if n == 2:\n        return \"O|O\"\n    if n == 3:\n        return \"O|-O\"\n    if n == 4:\n        return \"O|OO\"\n    if n == 5:\n        return \"O|O-O\"\n    if n == 6:\n        return \"O|OO-O\"\n    if n == 7:\n        return \"O|O-OOO\"\n    if n == 8:\n        return \"O|O-O-O\"\n    if n == 9:\n        return \"O|O-O-OO\"\n    if n == 10:\n        return \"O|O-O-O-O\"\n    if n == 11:\n        return \"O|O-O-O-OO\"\n    if n == 12:\n        return \"O|O-O-O-O-O\"\n    if n == 13:\n        return \"O|O-O-O-O-OO\"\n    if n == 14:\n        return \"O|O-O-O-O-O-O\"\n    if n == 15:\n        return \"O|O-O-O-O-O-OO\"\n    if n == 16:\n        return \"O|O-O-O-O-O-O-O\"\n    if n == 17:\n        return \"O|O-O-O-O-O-O-OO\"\n    if n == 18:\n        return \"O|O-O-O-O-O-O-O-O\"\n    if n == 19:\n        return \"O|O-O-O-O-O-O-O-OO\"\n    if n == 20:\n        return \"O|O-O-O-O-O-O-O-O-O\"\n    if n == 21:\n        return \"O|O-O-O-O-O-O-O-O-OO\"\n    if n == 22:\n        return \"O|O-O-O-O-O-O-O-O-O-O\"\n    if n == 23:\n        return \"O|O-O-O-O-O-O-O-O-O-OO\"\n    if n == 24:\n        return \"O|O-O-O-O-O-O-O-O-O-O-O\"\n    if n == 25:\n        return \"O|O-O-O-O-O-O-O-O-O-O-O-O\"\n    if n == 26:\n        return \"O|O-O-O-O-O-O-O-O-O-O-O-O-O\"\n    if n == 27:\n        return \"O|O-O-O-O-O-O-O-O-O-O-O-O-O-O\"\n    if n == 28:\n        return \"O|O-O-O-O-O-O-O-O-O-O-O-O-O-O-O\"\n    if n == 29:\n        return \"O|O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O\"\n    if n == 30:\n        return \"O|O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O\"\n    if n == 31:\n        return \"O|O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O\"\n    if n == 32:\n        return \"O|O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O\"\n    if n == 33:\n        return \"O|O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O\"\n    if n == 34:\n        return \"O|O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O\"\n    if n == 35:\n        return \"O|O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O\"\n    if n == 36:\n        return \"O|O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O\"\n    if n == 37:\n        return \"O|O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O\"\n    if n == 38:\n        return \"O|O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O\"\n    if n == 39:\n        return \"O|O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O\"\n    if n == 40:\n        return \"O|O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O\"\n    if n == 41:\n        return \"O|O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O\"\n    if n == 42:\n        return \"O|O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O-O"
    },
    {
        "number": 691,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    if n > 10 ** 6:\n        return \"NO\"\n    if x > 10 ** 6:\n        return \"NO\"\n    if x == 0:\n        return \"NO\"\n    if x == 1:\n        return \"YES\"\n    if x == 2:\n        return \"NO\"\n    if x == 3:\n        return \"NO\"\n    if x == 4:\n        return \"NO\"\n    if x == 5:\n        return \"YES\"\n    if x == 6:\n        return \"YES\"\n    if x == 7:\n        return \"YES\"\n    if x == 8:\n        return \"YES\"\n    if x == 9:\n        return \"YES\"\n    if x == 10:\n        return \"YES\"\n    if x == 11:\n        return \"YES\"\n    if x == 12:\n        return \"YES\"\n    if x == 13:\n        return \"YES\"\n    if x == 14:\n        return \"YES\"\n    if x == 15:\n        return \"YES\"\n    if x == 16:\n        return \"YES\"\n    if x == 17:\n        return \"YES\"\n    if x == 18:\n        return \"YES\"\n    if x == 19:\n        return \"YES\"\n    if x == 20:\n        return \"YES\"\n    if x == 21:\n        return \"YES\"\n    if x == 22:\n        return \"YES\"\n    if x == 23:\n        return \"YES\"\n    if x == 24:\n        return \"YES\"\n    if x == 25:\n        return \"YES\"\n    if x == 26:\n        return \"YES\"\n    if x == 27:\n        return \"YES\"\n    if x == 28:\n        return \"YES\"\n    if x == 29:\n        return \"YES\"\n    if x == 30:\n        return \"YES\"\n    if x == 31:\n        return \"YES\"\n    if x == 32:\n        return \"YES\"\n    if x == 33:\n        return \"YES\"\n    if x == 34:\n        return \"YES\"\n    if x == 35:\n        return \"YES\"\n    if x == 36:\n        return \"YES\"\n    if x == 37:\n        return \"YES\"\n    if x == 38:\n        return \"YES\"\n    if x == 39:\n        return \"YES\"\n    if x == 40:\n        return \"YES\"\n    if x == 41:\n        return \"YES\"\n    if x == 42:\n        return \"YES\"\n    if x == 43:\n        return \"YES\"\n    if x == 44:\n        return \"YES\"\n    if x == 45:\n        return \"YES\"\n    if x == 46:\n        return \"YES\"\n    if x == 47:\n        return \"YES\"\n    if x == 48:\n        return \"YES\"\n    if x == 49:\n        return \"YES\"\n    if x == 50:\n        return \"YES\"\n    if x == 51:\n        return \"YES\"\n    if x == 52:\n        return \"YES\"\n    if x == 53:\n        return \"YES\"\n    if x == 54:\n        return \"YES\"\n    if x == 55:\n        return \"YES\"\n    if x == 56:\n        return \"YES\"\n    if x == 57:\n        return \"YES\"\n    if x == 58:\n        return \"YES\"\n    if x == 59:\n        return \"YES\"\n    if x == 60:\n        return \"YES\"\n    if x == 61:\n        return \"YES\"\n    if x == 62:\n        return \"YES\"\n    if x == 63:\n        return \"YES\"\n    if x == 64:\n        return \"YES\"\n    if x == 65:\n        return \"YES\"\n    if x == 66:\n        return \"YES\"\n    if x == 67:\n        return \"YES\"\n    if x == 68:\n        return \"YES\"\n    if x == 69:\n        return \"YES\"\n    if x == 70:\n        return \"YES\"\n    if x == 71:\n        return \"YES\"\n    if x == 72:\n        return \"YES\"\n    if x == 73:\n        return \"YES\"\n    if x == 74:\n        return \"YES\"\n    if x == 75:\n        return \"YES\"\n    if x == 76:\n        return \"YES\"\n    if x == 77:\n        return \"YES\"\n    if x == 78:\n        return \"YES\"\n    if x == 79:\n        return \"YES\"\n    if x == 80:\n        return \"YES\"\n    if x == 81:\n        return \"YES\"\n    if x == 82:\n        return \"YES\"\n    if x == 83:\n        return \"YES\"\n    if x == 84:\n        return \"YES\"\n    if x == 85:\n        return \"YES\"\n    if x == 86:\n        return \"YES\"\n    if x == 87:\n        return \"YES\"\n    if x == 88:\n        return \"YES\"\n    if x == 89:\n        return \"YES\"\n    if x == 90:\n        return \"YES\"\n    if x == 91:\n        return \"YES\"\n    if x == 92:\n        return \"YES\"\n    if x == 93:\n        return \"YES\"\n    if x == 94:\n        return \"YES\"\n    if x == 95:\n        return \"YES\"\n    if x == 96:\n        return \"YES\"\n    if x == 97:\n        return \"YES\"\n    if x == 98:\n        return \"YES\"\n    if x == 99:\n        return \"YES\"\n    if x == 100:\n        return \"YES\"\n    if x == 101:\n        return \"YES\"\n    if x == 102:\n        return \"YES\"\n    if x == 103:\n        return \"YES\"\n    if x == 104:\n        return \"YES\"\n    if x == 105:\n        return \"YES\"\n    if x == 106:\n        return \"YES\"\n    if x == 107:\n        return \"YES\"\n    if x == 108:\n        return \"YES\"\n    if x == 109:\n        return \"YES\"\n    if x == 110:\n        return \"YES\"\n    if x == 111:\n        return \"YES\"\n    if x == 112:\n        return \"YES\"\n    if x == 113:\n        return \"YES\"\n    if x == 114:\n        return \"YES\"\n    if x == 115:\n        return \"YES\"\n    if x == 116:\n        return \"YES\"\n    if x == 117:\n        return \"YES\"\n    if x == 118:\n        return \"YES\"\n    if x == 119:\n        return \"YES\"\n    if x == 120:\n        return \"YES\"\n    if x == 121:\n        return \"YES\"\n    if x == 122:\n        return \"YES\"\n    if x == 123:\n        return \"YES\"\n    if x == 124:\n"
    },
    {
        "number": 692,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    M, R = [int(x) for x in stdin.readline().split()]\n    M = [int(x) for x in stdin.readline().split()]\n    R = [int(x) for x in stdin.readline().split()]\n    \n    #print(N, M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)\n    \n    #print(M, R)"
    },
    {
        "number": 693,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    colors = list(map(int, stdin.split()))\n    k = list(map(int, stdin.split()))\n    \n    # count the number of each color\n    counts = [0] * m\n    for i in range(n):\n        counts[colors[i] - 1] += 1\n    \n    # find the first color that is not in the interval\n    for i in range(m):\n        if counts[i] < k[i]:\n            return i + 1\n    \n    return -1"
    },
    {
        "number": 694,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a % b == 0:\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 695,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a_1, a_2 = [int(x) for x in stdin.split()]\n    return str(a_1 & a_2)"
    },
    {
        "number": 696,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    p = int(stdin)\n    if p < 2 or p > 2000:\n        raise ValueError(\"p must be between 2 and 2000\")\n    return str(len([x for x in range(1, p) if not any(x % y == 0 for y in range(2, p))]))"
    },
    {
        "number": 697,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    return str(max(0, sum(max(0, x) for x in combinations(range(1, n+m), n)) - sum(max(0, x) for x in combinations(range(1, n+m), m))))"
    },
    {
        "number": 698,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, k = [int(x) for x in stdin.split()]\n    r = [int(x) for x in stdin.split()]\n    r.sort()\n    r = [x for x in r if x > 0]\n    r = [x for x in r if x < x + 1]\n    r = [x for x in r if x < k]\n    r = [x for x in r if x < x + 1]\n    r = [x for x in r if x < k]\n    r = [x for x in r if x < x + 1]\n    r = [x for x in r if x < k]\n    r = [x for x in r if x < x + 1]\n    r = [x for x in r if x < k]\n    r = [x for x in r if x < x + 1]\n    r = [x for x in r if x < k]\n    r = [x for x in r if x < x + 1]\n    r = [x for x in r if x < k]\n    r = [x for x in r if x < x + 1]\n    r = [x for x in r if x < k]\n    r = [x for x in r if x < x + 1]\n    r = [x for x in r if x < k]\n    r = [x for x in r if x < x + 1]\n    r = [x for x in r if x < k]\n    r = [x for x in r if x < x + 1]\n    r = [x for x in r if x < k]\n    r = [x for x in r if x < x + 1]\n    r = [x for x in r if x < k]\n    r = [x for x in r if x < x + 1]\n    r = [x for x in r if x < k]\n    r = [x for x in r if x < x + 1]\n    r = [x for x in r if x < k]\n    r = [x for x in r if x < x + 1]\n    r = [x for x in r if x < k]\n    r = [x for x in r if x < x + 1]\n    r = [x for x in r if x < k]\n    r = [x for x in r if x < x + 1]\n    r = [x for x in r if x < k]\n    r = [x for x in r if x < x + 1]\n    r = [x for x in r if x < k]\n    r = [x for x in r if x < x + 1]\n    r = [x for x in r if x < k]\n    r = [x for x in r if x < x + 1]\n    r = [x for x in r if x < k]\n    r = [x for x in r if x < x + 1]\n    r = [x for x in r if x < k]\n    r = [x for x in r if x < x + 1]\n    r = [x for x in r if x < k]\n    r = [x for x in r if x < x + 1]\n    r = [x for x in r if x < k]\n    r = [x for x in r if x < x + 1]\n    r = [x for x in r if x < k]\n    r = [x for x in r if x < x + 1]\n    r = [x for x in r if x < k]\n    r = [x for x in r if x < x + 1]\n    r = [x for x in r if x < k]\n    r = [x for x in r if x < x + 1]\n    r = [x for x in r if x < k]\n    r = [x for x in r if x < x + 1]\n    r = [x for x in r if x < k]\n    r = [x for x in r if x < x + 1]\n    r = [x for x in r if x < k]\n    r = [x for x in r if x < x + 1]\n    r = [x for x in r if x < k]\n    r = [x for x in r if x < x + 1]\n    r = [x for x in r if x < k]\n    r = [x for x in r if x < x + 1]\n    r = [x for x in r if x < k]\n    r = [x for x in r if x < x + 1]\n    r = [x for x in r if x < k]\n    r = [x for x in r if x < x + 1]\n    r = [x for x in r if x < k]\n    r = [x for x in r if x < x + 1]\n    r = [x for x in r if x < k]\n    r = [x for x in r if x < x + 1]\n    r = [x for x in r if x < k]\n    r = [x for x in r if x < x + 1]\n    r = [x for x in r if x < k]\n    r = [x for x in r if x < x + 1]\n    r = [x for x in r if x < k]\n    r = [x for x in r if x < x + 1]\n    r = [x for x in r if x < k]\n    r = [x for x in r if x < x + 1]\n    r = [x for x in r if x < k]\n    r = [x for x in r if x < x + 1]\n    r = [x for x in r if x < k]\n    r = [x for x in r if x < x + 1]\n    r = [x for x in r if x < k]\n    r = [x for x in"
    },
    {
        "number": 699,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    y, k, n = [int(x) for x in stdin.split()]\n    if n % k!= 0:\n        return -1\n    return''.join(str(x) for x in range(1, n // k + 1))"
    },
    {
        "number": 700,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n"
    },
    {
        "number": 701,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 702,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    board = [list(stdin.strip()) for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == '#':\n                board[i][j] = '#'\n                if i > 0:\n                    board[i - 1][j] = '#'\n                if j > 0:\n                    board[i][j - 1] = '#'\n                if i < n - 1:\n                    board[i + 1][j] = '#'\n                if j < n - 1:\n                    board[i][j + 1] = '#'\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == '#':\n                board[i][j] = '#'\n                if i > 0:\n                    board[i - 1][j] = '#'\n                if j > 0:\n                    board[i][j - 1] = '#'\n                if i < n - 1:\n                    board[i + 1][j] = '#'\n                if j < n - 1:\n                    board[i][j + 1] = '#'\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == '#':\n                board[i][j] = '#'\n                if i > 0:\n                    board[i - 1][j] = '#'\n                if j > 0:\n                    board[i][j - 1] = '#'\n                if i < n - 1:\n                    board[i + 1][j] = '#'\n                if j < n - 1:\n                    board[i][j + 1] = '#'\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == '#':\n                board[i][j] = '#'\n                if i > 0:\n                    board[i - 1][j] = '#'\n                if j > 0:\n                    board[i][j - 1] = '#'\n                if i < n - 1:\n                    board[i + 1][j] = '#'\n                if j < n - 1:\n                    board[i][j + 1] = '#'\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == '#':\n                board[i][j] = '#'\n                if i > 0:\n                    board[i - 1][j] = '#'\n                if j > 0:\n                    board[i][j - 1] = '#'\n                if i < n - 1:\n                    board[i + 1][j] = '#'\n                if j < n - 1:\n                    board[i][j + 1] = '#'\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == '#':\n                board[i][j] = '#'\n                if i > 0:\n                    board[i - 1][j] = '#'\n                if j > 0:\n                    board[i][j - 1] = '#'\n                if i < n - 1:\n                    board[i + 1][j] = '#'\n                if j < n - 1:\n                    board[i][j + 1] = '#'\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == '#':\n                board[i][j] = '#'\n                if i > 0:\n                    board[i - 1][j] = '#'\n                if j > 0:\n                    board[i][j - 1] = '#'\n                if i < n - 1:\n                    board[i + 1][j] = '#'\n                if j < n - 1:\n                    board[i][j + 1] = '#'\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == '#':\n                board[i][j] = '#'\n                if i > 0:\n                    board[i - 1][j] = '#'\n                if j > 0:\n                    board[i][j - 1] = '#'\n                if i < n - 1:\n                    board[i + 1][j] = '#'\n                if j < n - 1:\n                    board[i][j + 1] = '#'\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == '#':\n                board[i][j] = '#'\n                if i > 0:\n                    board[i - 1][j] = '#'\n                if j > 0:\n                    board[i][j - 1] = '#'\n                if i < n - 1:\n                    board[i + 1][j] = '#'\n                if j < n - 1:\n                    board[i][j + 1] = '#'\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == '#':\n                board[i][j] = '#'\n                if i > 0:\n                    board[i - 1][j] = '#'\n                if j > 0:\n                    board[i][j - 1] = '#'\n                if i < n - 1:\n                    board[i + 1][j] = '#'\n                if j < n - 1:\n                    board[i][j + 1] = '#'\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == '#':\n                board[i][j] = '#'\n                if i > 0:\n                    board[i - 1][j] = '#'\n                if j > 0:\n                    board[i][j - 1] = '#'\n                if i < n - 1:\n                    board[i + 1][j] = '#'\n                if j < n - 1:\n                    board[i][j + 1] = '#'\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == '#':\n                board[i][j] = '#'\n                if i > 0:\n                    board[i - 1][j] = '#'\n"
    },
    {
        "number": 703,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, a, b, v = [int(x) for x in stdin.split()]\n    return str(k * (a + b - 1) // (a - 1) - v)"
    },
    {
        "number": 704,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    r, c = [int(x) for x in stdin.readline().split()]\n    return 'Left' if c == 1 else 'Right' if c == a[r - 1] + 1 else 'Down' if r == n else 'Up'"
    },
    {
        "number": 705,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    x = [int(x) for x in stdin.readline().split()]\n    y = [int(x) for x in stdin.readline().split()]\n    xor = 0\n    for i in range(n):\n        xor ^= x[i]\n        xor ^= y[i]\n    if xor == 0:\n        return \"Karen\"\n    else:\n        return \"Koyomi\""
    },
    {
        "number": 706,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, n, x = map(int, stdin.split())\n    return str(g_n(n, x) % (10 ** 9 + 7))\n\ndef"
    },
    {
        "number": 707,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    events = list(map(int, stdin.split()))\n    settings = list(map(int, stdin.split()))\n    if n == 1:\n        return \"YES\"\n    if n == 2:\n        if events[0] == events[1]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 3:\n        if events[0] == events[1] == events[2]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 4:\n        if events[0] == events[1] == events[2] == events[3]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 5:\n        if events[0] == events[1] == events[2] == events[3] == events[4]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 6:\n        if events[0] == events[1] == events[2] == events[3] == events[4] == events[5]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 7:\n        if events[0] == events[1] == events[2] == events[3] == events[4] == events[5] == events[6]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 8:\n        if events[0] == events[1] == events[2] == events[3] == events[4] == events[5] == events[6] == events[7]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 9:\n        if events[0] == events[1] == events[2] == events[3] == events[4] == events[5] == events[6] == events[7] == events[8]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 10:\n        if events[0] == events[1] == events[2] == events[3] == events[4] == events[5] == events[6] == events[7] == events[8] == events[9]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 11:\n        if events[0] == events[1] == events[2] == events[3] == events[4] == events[5] == events[6] == events[7] == events[8] == events[9] == events[10]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 12:\n        if events[0] == events[1] == events[2] == events[3] == events[4] == events[5] == events[6] == events[7] == events[8] == events[9] == events[10] == events[11]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 13:\n        if events[0] == events[1] == events[2] == events[3] == events[4] == events[5] == events[6] == events[7] == events[8] == events[9] == events[10] == events[11] == events[12]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 14:\n        if events[0] == events[1] == events[2] == events[3] == events[4] == events[5] == events[6] == events[7] == events[8] == events[9] == events[10] == events[11] == events[12] == events[13]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 15:\n        if events[0] == events[1] == events[2] == events[3] == events[4] == events[5] == events[6] == events[7] == events[8] == events[9] == events[10] == events[11] == events[12] == events[13] == events[14]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 16:\n        if events[0] == events[1] == events[2] == events[3] == events[4] == events[5] == events[6] == events[7] == events[8] == events[9] == events[10] == events[11] == events[12] == events[13] == events[14] == events[15]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n =="
    },
    {
        "number": 708,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    if n < 4 or k > 2 * n - 2:\n        return -1\n    a, b, c, d = [int(x) for x in stdin.split()]\n    if a == b or a == c or a == d or b == c or b == d or c == d:\n        return -1\n    if a == b == c == d:\n        return \"1 1 1 1\"\n    if a == b == c:\n        return \"1 1 1\"\n    if a == b == d:\n        return \"1 1 1\"\n    if a == c == d:\n        return \"1 1 1\"\n    if a == c:\n        return \"1 1\"\n    if a == d:\n        return \"1\"\n    if b == c == d:\n        return \"1 1 1\"\n    if b == c:\n        return \"1 1\"\n    if b == d:\n        return \"1\"\n    if c == d:\n        return \"1\"\n    if a == c == d:\n        return \"1 1 1\"\n    if a == c:\n        return \"1 1\"\n    if a == d:\n        return \"1\"\n    if b == d:\n        return \"1\"\n    if a == b == c == d:\n        return \"1 1 1 1\"\n    if a == b == c:\n        return \"1 1 1\"\n    if a == b == d:\n        return \"1 1 1\"\n    if a == b == c == d:\n        return \"1 1 1 1\"\n    if a == b == d:\n        return \"1 1 1\"\n    if a == b == c == d:\n        return \"1 1 1 1\"\n    if a == b == d:\n        return \"1 1 1\"\n    if a == c == d:\n        return \"1 1 1\"\n    if a == c == b == d:\n        return \"1 1 1 1\"\n    if a == c == d:\n        return \"1 1 1\"\n    if a == c == b == d:\n        return \"1 1 1 1\"\n    if a == c == d:\n        return \"1 1 1\"\n    if a == d == b == c:\n        return \"1 1 1 1\"\n    if a == d == b == d:\n        return \"1 1 1 1\"\n    if a == d == b == c:\n        return \"1 1 1 1\"\n    if a == d == b == d:\n        return \"1 1 1 1\"\n    if a == d == c == d:\n        return \"1 1 1 1\"\n    if a == d == c == b == d:\n        return \"1 1 1 1 1\"\n    if a == d == c == d:\n        return \"1 1 1 1\"\n    if a == d == c == b == d:\n        return \"1 1 1 1 1\"\n    if a == d == c == d:\n        return \"1 1 1 1\"\n    if a == d == d == b == c:\n        return \"1 1 1 1 1\"\n    if a == d == d == b == d:\n        return \"1 1 1 1 1\"\n    if a == d == d == b == c:\n        return \"1 1 1 1 1\"\n    if a == d == d == b == d:\n        return \"1 1 1 1 1\"\n    if a == d == d == c == d:\n        return \"1 1 1 1 1\"\n    if a == d == d == c == b == d:\n        return \"1 1 1 1 1 1\"\n    if a == d == d == c == d:\n        return \"1 1 1 1 1\"\n    if a == d == d == c == b == d:\n        return \"1 1 1 1 1 1\"\n    if a == d == d == c == d:\n        return \"1 1 1 1 1\"\n    if a == d == d == d == b == c:\n        return \"1 1 1 1 1 1\"\n    if a == d == d == d == b == d:\n        return \"1 1 1 1 1\"\n    if a == d == d == d == b == c:\n        return \"1 1 1 1 1\"\n    if a == d == d == d == b == d:\n        return \"1 1 1 1 1\"\n    if a == d == d == d == c == d:\n        return \"1 1 1 1 1\"\n    if a == d == d == d == c == b == d:\n        return \"1 1 1 1 1 1\"\n    if a == d == d == d == c == d:\n        return \"1 1 1 1 1\"\n    if a == d == d == d == c == b == d:\n        return \"1 1 1 1 1\"\n    if a == d == d == d == c == d:\n        return \"1 1 1 1 1\"\n    if a == d == d == d == d == b == c:\n        return \"1 1 1 1 1 1\"\n    if a == d == d == d == d == b == d:\n        return \"1 1 1 1 1\"\n    if a == d == d == d == d == b == c:\n        return \"1 1 1 1 1\"\n    if a == d == d == d == d"
    },
    {
        "number": 709,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    return str(x // 2)"
    },
    {
        "number": 710,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    return min(n - len(s), len(s) - n)\n\nassert(solution('''4\nZCTH\n''') == '2')\nassert(solution('''5\nZDATG\n''') == '5')\nassert(solution('''6\nAFBAKC\n''') == '16')\nassert(solution('''7\nABABABA\n''') == '0')\nassert(solution('''8\nABABABABA\n''') == '0')\nassert(solution('''9\nABABABABABA\n''') == '0')\nassert(solution('''10\nABABABABABABA\n''') == '0')\nassert(solution('''11\nABABABABABABABA\n''') == '0')\nassert(solution('''12\nABABABABABABABABA\n''') == '0')\nassert(solution('''13\nABABABABABABABABABA\n''') == '0')\nassert(solution('''14\nABABABABABABABABABABA\n''') == '0')\nassert(solution('''15\nABABABABABABABABABABABA\n''') == '0')\nassert(solution('''16\nABABABABABABABABABABABABA\n''') == '0')\nassert(solution('''17\nABABABABABABABABABABABABABABABABA\n''') == '0')\nassert(solution('''18\nABABABABABABABABABABABABABABABABABABA\n''') == '0')\nassert(solution('''19\nABABABABABABABABABABABABABABABABABABABABABABABA\n''') == '0')\nassert(solution('''20\nABABABABABABABABABABABABABABABABABABABABABABABABABA\n''') == '0')\nassert(solution('''21\nABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABA\n''') == '0')\nassert(solution('''22\n
    },
    {
        "number": 711,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(factorial(n) // (factorial(n - m) * factorial(m)))\n\ndef"
    },
    {
        "number": 712,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p, t = [int(x) for x in stdin.split()]\n    return str(1 - p)\n\nassert(solution('''1 0.50 1''') == '0.5')\nassert(solution('''1 0.50 4''') == '0.9375')\nassert(solution('''4 0.20 2''') == '0.4')"
    },
    {
        "number": 713,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    points = []\n    for _ in range(n):\n        x, y = [int(x) for x in stdin.split()]\n        points.append((x, y))\n    points.sort(key=lambda x: x[0] + x[1])\n    k = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if points[i][0] + points[j][1] > 0 and points[i][1] + points[j][0] > 0:\n                k += 1\n                print(points[i][0], points[j][1])\n    return str(k)"
    },
    {
        "number": 714,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    cards = [int(x) for x in stdin.readline().split()]\n    cards.sort()\n    cards_len = len(cards)\n    if cards_len % 2 == 0:\n        return''.join(str(cards[i]) for i in range(cards_len // 2))\n    else:\n        return''.join(str(cards[i]) for i in range(cards_len // 2)) +'' + str(cards[-1])\n"
    },
    {
        "number": 715,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    choices = stdin.splitlines()\n    greatest_choice = None\n    for choice in choices:\n        if choice.count(\"_\") > 0:\n            if greatest_choice is None or len(choice) < len(greatest_choice):\n                greatest_choice = choice\n    return greatest_choice"
    },
    {
        "number": 716,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = [int(x) for x in stdin.split()]\n    s = stdin[n + 1:]\n    cost = 0\n    for i in range(n):\n        if s[i] == '0':\n            cost += abs(i - a)\n        else:\n            cost += abs(i - b)\n    return str(cost)"
    },
    {
        "number": 717,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = [int(x) for x in stdin.readline().strip().split()]\n    d = [int(x) for x in stdin.readline().strip().split()]\n    \n    # dp[i] = min time to visit all doctors on day i\n    dp = [0] * (n + 1)\n    \n    # dp[i] = min time to visit all doctors on day i\n    for i in range(n):\n        dp[i + 1] = dp[i] + d[i]\n        for j in range(i):\n            if s[i] >= s[j] and d[i] >= d[j]:\n                dp[i + 1] = min(dp[i + 1], dp[j] + d[i] + s[i] - s[j])\n    \n    return str(dp[n])\n\nassert(solution('''3\n2 2\n1 2\n2 2''') == '4')\nassert(solution('''2\n10 1\n6 5''') == '11')\nassert(solution('''3\n1 1\n2 2\n3 3''') == '4')\nassert(solution('''3\n1 1\n2 2\n3 3''') == '4')\nassert(solution('''3\n1 1\n2 2\n3 3''') == '4')\nassert(solution('''3\n1 1\n2 2\n3 3''') == '4')\nassert(solution('''3\n1 1\n2 2\n3 3''') == '4')\nassert(solution('''3\n1 1\n2 2\n3 3''') == '4')\nassert(solution('''3\n1 1\n2 2\n3 3''') == '4')\nassert(solution('''3\n1 1\n2 2\n3 3''') == '4')\nassert(solution('''3\n1 1\n2 2\n3 3''') == '4')\nassert(solution('''3\n1 1\n2 2\n3 3''') == '4')\nassert(solution('''3\n1 1\n2 2\n3 3''') == '4')\nassert(solution('''3\n1 1\n2 2\n3 3''') == '4')\nassert(solution('''3\n1 1\n2 2\n3 3''') == '4')\nassert(solution('''3\n1 1\n2 2\n3 3''') == '4')\nassert(solution('''3\n1 1\n2 2\n3 3''') == '4')\nassert(solution('''3\n1 1\n2 2\n3 3''') == '4')\nassert(solution('''3\n1 1\n2 2\n3 3''') == '4')\nassert(solution('''3\n1 1\n2 2\n3 3''') == '4')\nassert(solution('''3\n1 1\n2 2\n3 3''') == '4')\nassert(solution('''3\n1 1\n2 2\n3 3''') == '4')\nassert(solution('''3\n1 1\n2 2\n3 3''') == '4')\nassert(solution('''3\n1 1\n2 2\n3 3''') == '4')\nassert(solution('''3\n1 1\n2 2\n3 3''') == '4')\nassert(solution('''3\n1 1\n2 2\n3 3''') == '4')\nassert(solution('''3\n1 1\n2 2\n3 3''') == '4')\nassert(solution('''3\n1 1\n2 2\n3 3''') == '4')\nassert(solution('''3\n1 1\n2 2\n3 3''') == '4')\nassert(solution('''3\n1 1\n2 2\n3 3''') == '4')\nassert(solution('''3\n1 1\n2 2\n3 3''') == '4')\nassert(solution('''3\n1 1\n2 2\n3 3''') == '4')\nassert(solution('''3\n1 1\n2 2\n3 3''') == '4')\nassert(solution('''3\n1 1\n2 2\n3 3''') == '4')\nassert(solution('''3\n1 1\n2 2\n3 3''') == '4')\nassert(solution('''3\n1 1\n2 2\n3 3''') == '4')\nassert(solution('''3\n1 1\n2 2\n3 3''') == '4')\nassert(solution('''3\n1 1\n2 2\n3 3''') == '4')\nassert(solution('''3\n1 1\n2 2\n3 3''') == '4')\nassert(solution('''3\n1 1\n2 2\n3 3''') == '4')\nassert(solution('''3\n1 1\n2 2\n3 3''') == '4')\nassert(solution('''3\n1 1\n2 2\n3 3''') == '4')\nassert(solution('''3\n1 1\n2 2\n3 3''') == '4')\nassert(solution('''3\n1 1\n2 2\n3 3''') == '4')\nassert(solution('''3\n1 1\n2 2\n3 3''') == '4')\nassert(solution('''3\n1 1\n2 2\n3 3''') == '4')\nassert(solution('''3\n1 1\n2 2\n3 3''') == '4')\nassert(solution('''3\n1 1\n2 2\n3 3''') == '4')\nassert(solution('''3\n1 1\n2 2\n3 3''') == '4')\nassert(solution('''3\n1 1\n2 2\n3 3''') == '4')\nassert(solution('''3\n1 1\n2 2\n3 3''') == '4')\nassert(solution('''3\n1 1\n2 2\n3 3''') == '4')\nassert(solution('''3\n1 1\n2 2\n3 3''') == '4')\nassert(solution('''3\n1 1\n2 2\n3 3''') == '4')\nassert(solution('''3\n1 1\n2 2\n3 3''') == '4')\nassert(solution('''3\n1 1\n2 2\n3 3''') == '4')\nassert(solution('''3\n1 1\n2 2\n3 3''') == '4')\nassert(solution('''3\n1 1\n2 2\n3 3''') == '4')\nassert(solution('''3\n1 1\n2 2\n3 3''') == '4')\nassert(solution('''3\n1 1\n2 2\n3 3''') == '4')\nassert(solution('''3\n1 1\n2 2\n3 3''"
    },
    {
        "number": 718,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    b = 0\n    while True:\n        b += 1\n        if a % 10 == 8:\n            break\n        a //= 10\n    return str(b)"
    },
    {
        "number": 719,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    return str(10 ** k - 1)"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    scores = [int(stdin.readline()) for _ in range(n)]\n    scores.append(0)\n    scores.append(0)\n    scores.sort()\n    max_draws = 0\n    for i in range(1, len(scores)):\n        if scores[i] == scores[i - 1]:\n            max_draws += 1\n    return str(max_draws)"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    m = int(stdin.readline())\n    return str(max(0, sum(a) - m * d))"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    abbreviations = [stdin.readline().strip() for _ in range(n)]\n    years = [int(stdin.readline().strip()) for _ in range(n)]\n    return '\\n'.join(str(years[i]) for i in range(n) if abbreviations[i] == min(abbreviations, key=len))"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d = [int(x) for x in stdin.split()]\n    points = [int(x) for x in stdin.split()]\n    points.sort()\n    diameter = 0\n    for i in range(n):\n        diameter = max(diameter, points[i] - points[i - 1])\n    return str(d - diameter)"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    matrix = [stdin[i:i+m] for i in range(0, len(stdin), m)]\n    return '#Black&White' if is_black_and_white(matrix) else '#Color'\n\ndef"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d = [int(x) for x in stdin.split()]\n    x = [int(x) for x in stdin.split()]\n    return str(len([x for x in x if abs(x) <= d]))"
    },
    {
        "number": 727,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    i = 0\n    while a:\n        a.sort()\n        a[0] = 0\n        a[-1] = 0\n        a[1:-1] = [a[i] - a[i + 1] for i in range(len(a) - 1)]\n        i += 1\n        a.sort()\n        a = a[1:]\n    return str(i)\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    votes = list(map(int, stdin.readline().split()))\n    candidates = [0] * n\n    candidates[0] = votes[0]\n    for i in range(1, n):\n        candidates[i] = votes[i] + candidates[i - 1]\n    return str(max(candidates) - min(candidates))\n\nprint(solution(stdin))\n"
    },
    {
        "number": 729,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[1:n+1]\n    if s.count('a') > n/2:\n        return 'NO'\n    return 'YES'"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\ndef"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    w, m, k = map(int, stdin.split())\n    n = m\n    while n < m + k:\n        n *= 10\n    return str(n // k)"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(len([i for i in range(1, n + 1) if i < 10 and i % 10 in [4, 7]]))"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y, a, b = [int(x) for x in stdin.split()]\n    return str(x * y - (a - 1) * (b - 1))\n\nassert(solution(\"2 3 6 18\") == \"3\")\nassert(solution(\"2 3 6 19\") == \"0\")\nassert(solution(\"2 3 6 19 19\") == \"0\")\nassert(solution(\"2 3 6 19 19 19\") == \"0\")\nassert(solution(\"2 3 6 19 19 19 19\") == \"0\")\nassert(solution(\"2 3 6 19 19 19 19 19\") == \"0\")\nassert(solution
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a.reverse()\n    a.append(m)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    if n == 1:\n        return \"yes\"\n    if n == 2:\n        if a[0] > a[1]:\n            return \"yes\"\n        else:\n            return \"no\"\n    if n == 3:\n        if a[0] > a[1] and a[1] > a[2]:\n            return \"yes\"\n        else:\n            return \"no\"\n    if n == 4:\n        if a[0] > a[1] and a[1] > a[2] and a[2] > a[3]:\n            return \"yes\"\n        else:\n            return \"no\"\n    if n == 5:\n        if a[0] > a[1] and a[1] > a[2] and a[2] > a[3] and a[3] > a[4]:\n            return \"yes\"\n        else:\n            return \"no\"\n    if n == 6:\n        if a[0] > a[1] and a[1] > a[2] and a[2] > a[3] and a[3] > a[4] and a[4] > a[5]:\n            return \"yes\"\n        else:\n            return \"no\"\n    if n == 7:\n        if a[0] > a[1] and a[1] > a[2] and a[2] > a[3] and a[3] > a[4] and a[4] > a[5] and a[5] > a[6]:\n            return \"yes\"\n        else:\n            return \"no\"\n    if n == 8:\n        if a[0] > a[1] and a[1] > a[2] and a[2] > a[3] and a[3] > a[4] and a[4] > a[5] and a[5] > a[6] and a[6] > a[7]:\n            return \"yes\"\n        else:\n            return \"no\"\n    if n == 9:\n        if a[0] > a[1] and a[1] > a[2] and a[2] > a[3] and a[3] > a[4] and a[4] > a[5] and a[5] > a[6] and a[6] > a[7] and a[7] > a[8]:\n            return \"yes\"\n        else:\n            return \"no\"\n    if n == 10:\n        if a[0] > a[1] and a[1] > a[2] and a[2] > a[3] and a[3] > a[4] and a[4] > a[5] and a[5] > a[6] and a[6] > a[7] and a[7] > a[8] and a[8] > a[9]:\n            return \"yes\"\n        else:\n            return \"no\"\n    if n == 11:\n        if a[0] > a[1] and a[1] > a[2] and a[2] > a[3] and a[3] > a[4] and a[4] > a[5] and a[5] > a[6] and a[6] > a[7] and a[7] > a[8] and a[8] > a[9] and a[9] > a[10]:\n            return \"yes\"\n        else:\n            return \"no\"\n    if n == 12:\n        if a[0] > a[1] and a[1] > a[2] and a[2] > a[3] and a[3] > a[4] and a[4] > a[5] and a[5] > a[6] and a[6] > a[7] and a[7] > a[8] and a[8] > a[9] and a[9] > a[10] and a[10] > a[11]:\n            return \"yes\"\n        else:\n            return \"no\"\n    if n == 13:\n        if a[0] > a[1] and a[1] > a[2] and a[2] > a[3] and a[3] > a[4] and a[4] > a[5] and a[5] > a[6] and a[6] > a[7] and a[7] > a[8] and a[8] > a[9] and a[9] > a[10] and a[10] > a[11] and a[11] > a[12]:\n            return \"yes\"\n        else:\n            return \"no\"\n    if n == 14:\n        if a[0] > a[1] and a[1] > a[2] and a[2] > a[3] and a[3] > a[4] and a[4] > a[5] and a[5] > a[6] and a[6] > a[7] and a[7] > a[8] and a[8] > a[9] and a[9] > a[10] and a[10] > a[11] and a[11] > a[12] and a[12] > a[13]:\n            return \"yes\"\n        else:\n            return \"no\"\n    if n == 15:\n        if a[0] > a[1] and a[1] > a[2] and a[2] > a[3] and a[3] > a[4] and a[4] > a[5] and a[5] > a[6] and a[6] > a[7] and a[7] > a[8] and a[8] > a[9] and a[9] > a[10] and a[10] > a[11] and a[11] > a[12] and a[12] > a[13] and a[13] > a[14]:\n            return \"yes\"\n        else:\n            return \"no\"\n    if n == 16:\n        if a[0] > a[1] and a[1] > a[2] and a[2] > a[3] and a[3] > a[4] and a[4] > a[5] and a[5] > a[6] and a[6] > a[7] and a[7] > a[8]"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n % m == 0:\n        return str(n // m)\n    return '-1'"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    return str(sum(1 for x, y, z in ((a, b, c) for a in range(1, B + 1) for b in range(1, C + 1) for c in range(1, D + 1) if a < b < c < D and (a ** 2 + b ** 2 == c ** 2 or a ** 2 + c ** 2 == b ** 2 or b ** 2 + c ** 2 == a ** 2)))"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    L, A, B, M = [int(x) for x in stdin.split()]\n    s = [A]\n    for _ in range(L - 1):\n        s.append(s[-1] + B)\n    return str(int(str(s[-1])[::-1]) % M)"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, n_1, n_2, n_3, t_1, t_2, t_3 = [int(x) for x in stdin.split()]\n    return str(min(k * t_1 + n_1 * t_2 + n_2 * t_3, k * t_1 + n_1 * t_2 + n_3 * t_3, k * t_1 + n_2 * t_2 + n_3 * t_3, k * t_1 + n_3 * t_2 + n_2 * t_3, k * t_1 + n_2 * t_2 + n_3 * t_3, k * t_1 + n_3 * t_2 + n_1 * t_3, k * t_1 + n_3 * t_2 + n_1 * t_3, k * t_1 + n_1 * t_2 + n_2 * t_3, k * t_1 + n_2 * t_2 + n_1 * t_3))\n\nassert(solution(input()) == '15')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert(solution(input()) == '32')\nassert("
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a.append(m)\n    a.insert(0, 0)\n    a.append(m)\n    a.sort()\n    a.insert(0, 0)\n    a.append(m)\n    a.sort()\n    a.insert(0, 0)\n    a.append(m)\n    a.sort()\n    a.insert(0, 0)\n    a.append(m)\n    a.sort()\n    a.insert(0, 0)\n    a.append(m)\n    a.sort()\n    a.insert(0, 0)\n    a.append(m)\n    a.sort()\n    a.insert(0, 0)\n    a.append(m)\n    a.sort()\n    a.insert(0, 0)\n    a.append(m)\n    a.sort()\n    a.insert(0, 0)\n    a.append(m)\n    a.sort()\n    a.insert(0, 0)\n    a.append(m)\n    a.sort()\n    a.insert(0, 0)\n    a.append(m)\n    a.sort()\n    a.insert(0, 0)\n    a.append(m)\n    a.sort()\n    a.insert(0, 0)\n    a.append(m)\n    a.sort()\n    a.insert(0, 0)\n    a.append(m)\n    a.sort()\n    a.insert(0, 0)\n    a.append(m)\n    a.sort()\n    a.insert(0, 0)\n    a.append(m)\n    a.sort()\n    a.insert(0, 0)\n    a.append(m)\n    a.sort()\n    a.insert(0, 0)\n    a.append(m)\n    a.sort()\n    a.insert(0, 0)\n    a.append(m)\n    a.sort()\n    a.insert(0, 0)\n    a.append(m)\n    a.sort()\n    a.insert(0, 0)\n    a.append(m)\n    a.sort()\n    a.insert(0, 0)\n    a.append(m)\n    a.sort()\n    a.insert(0, 0)\n    a.append(m)\n    a.sort()\n    a.insert(0, 0)\n    a.append(m)\n    a.sort()\n    a.insert(0, 0)\n    a.append(m)\n    a.sort()\n    a.insert(0, 0)\n    a.append(m)\n    a.sort()\n    a.insert(0, 0)\n    a.append(m)\n    a.sort()\n    a.insert(0, 0)\n    a.append(m)\n    a.sort()\n    a.insert(0, 0)\n    a.append(m)\n    a.sort()\n    a.insert(0, 0)\n    a.append(m)\n    a.sort()\n    a.insert(0, 0)\n    a.append(m)\n    a.sort()\n    a.insert(0, 0)\n    a.append(m)\n    a.sort()\n    a.insert(0, 0)\n    a.append(m)\n    a.sort()\n    a.insert(0, 0)\n    a.append(m)\n    a.sort()\n    a.insert(0, 0)\n    a.append(m)\n    a.sort()\n    a.insert(0, 0)\n    a.append(m)\n    a.sort()\n    a.insert(0, 0)\n    a.append(m)\n    a.sort()\n    a.insert(0, 0)\n    a.append(m)\n    a.sort()\n    a.insert(0, 0)\n    a.append(m)\n    a.sort()\n    a.insert(0, 0)\n    a.append(m)\n    a.sort()\n    a.insert(0, 0)\n    a.append(m)\n    a.sort()\n    a.insert(0, 0)\n    a.append(m)\n    a.sort()\n    a.insert(0, 0)\n    a.append(m)\n    a.sort()\n    a.insert(0, 0)\n    a.append(m)\n    a.sort()\n    a.insert(0, 0)\n    a.append(m)\n    a.sort()\n    a.insert(0, 0)\n    a.append(m)\n    a.sort()\n    a.insert(0, 0)\n    a.append(m)\n    a.sort()\n    a.insert(0, 0)\n    a.append(m)\n    a.sort()\n    a.insert(0, 0)\n    a.append(m)\n    a.sort()\n    a.insert(0, 0)\n    a"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    b = [int(x) for x in stdin.readline().split()]\n    a = [0] * (2 * n)\n    for i in range(n):\n        a[2 * i] = b[i]\n        a[2 * i + 1] = min(a[2 * i], b[i])\n    return''.join(str(x) for x in a)"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    numbers = list(map(int, stdin.readline().split()))\n    result = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if numbers[i] > numbers[j]:\n                numbers[i] -= numbers[j]\n                result += numbers[i]\n                break\n    return str(result)"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[0]\n    if s == 'S':\n        return 'NO'\n    else:\n        return 'YES'\n\nassert(solution(input()) == solution(input()))\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    return str(solution_recursive(n, k))\n\ndef"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = [int(x) for x in stdin.split()]\n    candies = [int(x) for x in stdin.split()]\n    candies.sort(reverse=True)\n    jumps = [0] * n\n    for i in range(n):\n        if candies[i] == 0:\n            jumps[i] = x\n        else:\n            jumps[i] = candies[i] + jumps[i - 1]\n    return str(max(jumps))\n\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4')\nassert(solution(input()) == '4"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    nums = [int(x) for x in stdin.readline().split()]\n    nums.sort()\n    if n % 3!= 0:\n        return -1\n    groups = n // 3\n    groups_of_three = []\n    for i in range(groups):\n        groups_of_three.append(nums[i * 3:i * 3 + 3])\n    return''.join(map(str, groups_of_three))\n\nassert(solution('''6\n1 1 1 2 2 2\n''') == '1 2 4')\nassert(solution('''6\n2 2 1 1 4 6\n''') == '1 2 4')\nassert(solution('''6\n2 2 1 1 4 6\n''') == '1 2 4')\nassert(solution('''6\n2 2 1 1 4 6\n''') == '1 2 4')\nassert(solution('''6\n2 2 1 1 4 6\n''') == '1 2 4')\nassert(solution('''6\n2 2 1 1 4 6\n''') == '1 2 4')\nassert(solution('''6\n2 2 1 1 4 6\n''') == '1 2 4')\nassert(solution('''6\n2 2 1 1 4 6\n''') == '1 2 4')\nassert(solution('''6\n2 2 1 1 4 6\n''') == '1 2 4')\nassert(solution('''6\n2 2 1 1 4 6\n''') == '1 2 4')\nassert(solution('''6\n2 2 1 1 4 6\n''') == '1 2 4')\nassert(solution('''6\n2 2 1 1 4 6\n''') == '1 2 4')\nassert(solution('''6\n2 2 1 1 4 6\n''') == '1 2 4')\nassert(solution('''6\n2 2 1 1 4 6\n''') == '1 2 4')\nassert(solution('''6\n2 2 1 1 4 6\n''') == '1 2 4')\nassert(solution('''6\n2 2 1 1 4 6\n''') == '1 2 4')\nassert(solution('''6\n2 2 1 1 4 6\n''') == '1 2 4')\nassert(solution('''6\n2 2 1 1 4 6\n''') == '1 2 4')\nassert(solution('''6\n2 2 1 1 4 6\n''') == '1 2 4')\nassert(solution('''6\n2 2 1 1 4 6\n''') == '1 2 4')\nassert(solution('''6\n2 2 1 1 4 6\n''') == '1 2 4')\nassert(solution('''6\n2 2 1 1 4 6\n''') == '1 2 4')\nassert(solution('''6\n2 2 1 1 4 6\n''') == '1 2 4')\nassert(solution('''6\n2 2 1 1 4 6\n''') == '1 2 4')\nassert(solution('''6\n2 2 1 1 4 6\n''') == '1 2 4')\nassert(solution('''6\n2 2 1 1 4 6\n''') == '1 2 4')\nassert(solution('''6\n2 2 1 1 4 6\n''') == '1 2 4')\nassert(solution('''6\n2 2 1 1 4 6\n''') == '1 2 4')\nassert(solution('''6\n2 2 1 1 4 6\n''') == '1 2 4')\nassert(solution('''6\n2 2 1 1 4 6\n''') == '1 2 4')\nassert(solution('''6\n2 2 1 1 4 6\n''') == '1 2 4')\nassert(solution('''6\n2 2 1 1 4 6\n''') == '1 2 4')\nassert(solution('''6\n2 2 1 1 4 6\n''') == '1 2 4')\nassert(solution('''6\n2 2 1 1 4 6\n''') == '1 2 4')\nassert(solution('''6\n2 2 1 1 4 6\n''') == '1 2 4')\nassert(solution('''6\n2 2 1 1 4 6\n''') == '1 2 4')\nassert(solution('''6\n2 2 1 1 4 6\n''') == '1 2 4')\nassert(solution('''6\n2 2 1 1 4 6\n''') == '1 2 4')\nassert(solution('''6\n2 2 1 1 4 6\n''') == '1 2 4')\nassert(solution('''6\n2 2 1 1 4 6\n''') == '1 2 4')\nassert(solution('''6\n2 2 1 1 4 6\n''') == '1 2 4')\nassert(solution('''6\n2 2 1 1 4 6\n''') == '1 2 4')\nassert(solution('''6\n2 2 1 1 4 6\n''') == '1 2 4')\nassert(solution('''6\n2 2 1 1 4 6\n''') == '1 2 4')\nassert(solution('''6\n2 2 1 1 4 6\n''') == '1 2 4')\nassert(solution('''6\n2 2 1 1 4 6\n''') == '1 2 4')\nassert(solution('''6\n2 2 1 1 4 6\n''') == '1 2 4')\nassert(solution('''6\n2 2 1 1 4 6\n''') == '1 2 4')\nassert(solution('''6\n2 2 1 1 4 6\n''') == '1 2 4')\nassert(solution('''6\n2 2 1 1 4 6\n''') == '1 2 4')\nassert(solution('''6\n2 2 1 1 4 6\n''') == '1 2 4')\nassert(solution('''6\n2 2 1 1 4 6\n''') == '1 2 4')\nassert(solution('''6\n2 2 1 1 4 6\n''') == '1 2 4')\nassert(solution('''6\n2 2 1 1 4 6\n''') == '1 2 4')\nassert(solution('''6\n2 2 1 1 4 6\n''') == '1 2 4')\nassert(solution('''6\n2 2 1 1 4 6\n''') == '1 2 4')\nassert(solution('''6\n2 2 1 1 4 6\n''') == '1 2 4')\nassert(solution('''6\n2 2 1 1 4 6\n''') == '1 2 4')\nassert(solution('''6\n2 2 1 1 4 6\n''') == '1 2 4')\nassert(solution('''6\n2 2 1 1 4 6\n''') == '1 2 4')\nassert(solution('''6\n2 2 1 1 4 6\n''') == '1 2 4')\nassert(solution('''6\n2 2 1 1 4 6\n''') == '1 2 4')\nassert(solution('''6\n2 2 1 1 4 6\n''') == '1 2 4')\nassert(solution('''6\n2 2 1 1 4 6\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    k = 1\n    while k < len(s):\n        if s.count(s[k]) > s.count(s[0]):\n            break\n        k += 1\n    return k"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    return str(min(n * k, n * (k + 1) // 2))"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    buses = 0\n    for i in range(n):\n        if a[i] > m:\n            buses += 1\n            a[i] = m\n    return str(buses)\n\nassert(solution(stdin) == stdout)\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    return '{}/{}'.format(a / c, b / d)"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    res = 0\n    for i in range(n):\n        if s[i]!= s[i-1]:\n            res += 1\n    return res\n\nassert(solution('''3''') == 1)\nassert(solution('''5''') == 4)\nassert(solution('''BRBG''') == 0)\nassert(solution('''RRRRR''') == 4)\nassert(solution('''RRG''') == 1)\nassert(solution('''RRGGB''') == 2)\nassert(solution('''RRRGGG''') == 2)\nassert(solution('''RRRGGGB''') == 3)\nassert(solution('''RRRGGGBB''') == 3)\nassert(solution('''RRRGGGBBB''') == 4)\nassert(solution('''RRRGGGBBBB''') == 4)\nassert(solution('''RRRGGGBBBBB''') == 5)\nassert(solution('''RRRGGGBBBBBB''') == 5)\nassert(solution('''RRRGGGBBBBBBB''') == 6)\nassert(solution('''RRRGGGBBBBBBBB''') == 6)\nassert(solution('''RRRGGGBBBBBBBBB''') == 7)\nassert(solution('''RRRGGGBBBBBBBBBB''') == 7)\nassert(solution('''RRRGGGBBBBBBBBBBB''') == 8)\nassert(solution('''RRRGGGBBBBBBBBBBBB''') == 8)\nassert(solution('''RRRGGGBBBBBBBBBBBBB''') == 9)\nassert(solution('''RRRGGGBBBBBBBBBBBBBB''') == 9)\nassert(solution('''RRRGGGBBBBBBBBBBBBBBB''') == 10)\nassert(solution('''RRRGGGBBBBBBBBBBBBBBBB''') == 10)\nassert(solution('''RRRGGGBBBBBBBBBBBBBBBBB''') == 11)\nassert(solution('''RRRGGGBBBBBBBBBBBBBBBBBB''') == 11)\nassert(solution('''RRRGGGBBBBBBBBBBBBBBBBBBB''') == 12)\nassert(solution('''RRRGGGBBBBBBBBBBBBBBBBBBBB''') == 12)\nassert(solution('''RRRGGGBBBBBBBBBBBBBBBBBBBBB''') == 13)\nassert(solution('''RRRGGGBBBBBBBBBBBBBBBBBBBBBB''') == 13)\nassert(solution('''RRRGGGBBBBBBBBBBBBBBBBBBBBBBB''') == 14)\nassert(solution('''RRRGGGBBBBBBBBBBBBBBBBBBBBBBBB''') == 14)\nassert(solution('''RRRGGGBBBBBBBBBBBBBBBBBBBBBBBBB''') == 15)\nassert(solution('''RRRGGGBBBBBBBBBBBBBBBBBBBBBBBBBB''') == 15)\nassert(solution('''RRRGGGBBBBBBBBBBBBBBBBBBBBBBBBBBB''') == 16)\nassert(solution('''RRRGGGBBBBBBBBBBBBBBBBBBBBBBBBBBBB''') == 16)\nassert(solution('''RRRGGGBBBBBBBBBBBBBBBBBBBBBBBBBBBBB''') == 17)\nassert(solution('''RRRGGGBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB''') == 17)\nassert(solution('''RRRGGGBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB''') == 18)\nassert(solution('''RRRGGGBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB''') == 18)\nassert(solution('''RRRGGGBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB''') == 19)\nassert(solution('''RRRGGGBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB''') == 19)\nassert(solution('''RRRGGGBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB''') == 20)\nassert(solution('''RRRGGGBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB''') == 20)\nassert(solution('''RRRGGGBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB''') == 21)\nassert(solution('''RRRGGGBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB''') == 21)\nassert(solution('''RRRGGGBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB''') == 22)\nassert(solution('''RRRGGGBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB''') == 22)\nassert(solution('''RRRGGGBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB''') == 23)\nassert(solution('''RRRGGGBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB''') == 23)\nassert(solution('''RRRGGGBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB''') == 24)\nassert(solution('''RRRGGGBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB''') == 24)\nassert(solution('''RRRGGGBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB''') == 25)\nassert(solution('''RRRGGGBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB''') == 25)\nassert(solution('''RRRGGGBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB''') == 26)\nassert(solution('''RRRGGGBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB''') == 26)\nassert(solution('''RRRGGGBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB''') == 27)\nassert(solution('''RRRGGGBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB''') == 27)\nassert(solution('''RRRGGGBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB''') == 28)\nassert(solution('''RRRGGGBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB''') == 28)\nassert(solution('''RRRGGGBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB''') == 29)\nassert(solution('''RRRGGGBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB''') =="
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x == 0:\n        return 0\n    if x == 1:\n        return 1\n    if x == 2:\n        return 2\n    if x == 3:\n        return 3\n    if x == 4:\n        return 4\n    if x == 5:\n        return 5\n    if x == 6:\n        return 6\n    if x == 7:\n        return 7\n    if x == 8:\n        return 8\n    if x == 9:\n        return 9\n    if x == 10:\n        return 10\n    if x == 11:\n        return 11\n    if x == 12:\n        return 12\n    if x == 13:\n        return 13\n    if x == 14:\n        return 14\n    if x == 15:\n        return 15\n    if x == 16:\n        return 16\n    if x == 17:\n        return 17\n    if x == 18:\n        return 18\n    if x == 19:\n        return 19\n    if x == 20:\n        return 20\n    if x == 21:\n        return 21\n    if x == 22:\n        return 22\n    if x == 23:\n        return 23\n    if x == 24:\n        return 24\n    if x == 25:\n        return 25\n    if x == 26:\n        return 26\n    if x == 27:\n        return 27\n    if x == 28:\n        return 28\n    if x == 29:\n        return 29\n    if x == 30:\n        return 30\n    if x == 31:\n        return 31\n    if x == 32:\n        return 32\n    if x == 33:\n        return 33\n    if x == 34:\n        return 34\n    if x == 35:\n        return 35\n    if x == 36:\n        return 36\n    if x == 37:\n        return 37\n    if x == 38:\n        return 38\n    if x == 39:\n        return 39\n    if x == 40:\n        return 40\n    if x == 41:\n        return 41\n    if x == 42:\n        return 42\n    if x == 43:\n        return 43\n    if x == 44:\n        return 44\n    if x == 45:\n        return 45\n    if x == 46:\n        return 46\n    if x == 47:\n        return 47\n    if x == 48:\n        return 48\n    if x == 49:\n        return 49\n    if x == 50:\n        return 50\n    if x == 51:\n        return 51\n    if x == 52:\n        return 52\n    if x == 53:\n        return 53\n    if x == 54:\n        return 54\n    if x == 55:\n        return 55\n    if x == 56:\n        return 56\n    if x == 57:\n        return 57\n    if x == 58:\n        return 58\n    if x == 59:\n        return 59\n    if x == 60:\n        return 60\n    if x == 61:\n        return 61\n    if x == 62:\n        return 62\n    if x == 63:\n        return 63\n    if x == 64:\n        return 64\n    if x == 65:\n        return 65\n    if x == 66:\n        return 66\n    if x == 67:\n        return 67\n    if x == 68:\n        return 68\n    if x == 69:\n        return 69\n    if x == 70:\n        return 70\n    if x == 71:\n        return 71\n    if x == 72:\n        return 72\n    if x == 73:\n        return 73\n    if x == 74:\n        return 74\n    if x == 75:\n        return 75\n    if x == 76:\n        return 76\n    if x == 77:\n        return 77\n    if x == 78:\n        return 78\n    if x == 79:\n        return 79\n    if x == 80:\n        return 80\n    if x == 81:\n        return 81\n    if x == 82:\n        return 82\n    if x == 83:\n        return 83\n    if x == 84:\n        return 84\n    if x == 85:\n        return 85\n    if x == 86:\n        return 86\n    if x == 87:\n        return 87\n    if x == 88:\n        return 88\n    if x == 89:\n        return 89\n    if x == 90:\n        return 90\n    if x == 91:\n        return 91\n    if x == 92:\n        return 92\n    if x == 93:\n        return 93\n    if x == 94:\n        return 94\n    if x == 95:\n        return 95\n    if x == 96:\n        return 96\n    if x == 97:\n        return 97\n    if x == 98:\n        return 98\n    if x == 99:\n        return 99\n    if x == 100:\n        return 100\n    if x == 101:\n        return 101\n    if x == 102:\n        return 102\n    if x == 103:\n        return 103\n    if x == 104:\n        return 104\n    if x == 105:\n        return 105\n    if x == 106:\n        return 106\n    if x == 107:\n        return 107\n    if x == 108:\n        return 108\n    if x == 109:\n        return 109\n    if x == 110:\n        return 110\n    if x == 111:\n        return 111\n    if x == 112:\n        return 112\n    if x == 113:\n        return 113\n    if x == 114:\n        return 114\n    if x == 115:\n        return 115\n    if x == 116:\n        return 116\n    if x == 117:\n        return 117\n    if x == 118:\n        return 118\n    if x == 119:\n        return 119\n    if x == 120:\n        return 120\n    if x == 121:\n        return 121\n    if x == 122:\n        return 122\n    if x == 123:\n        return 123\n    if x == 124:\n        return 124\n    if x == 125:\n        return 125\n    if x == 126:\n        return 126\n    if x == 127:\n        return 127\n    if x == 128:\n        return 128\n    if x == 129:\n        return 129\n    if x == 130:\n        return 130\n    if x == 131:\n        return 131\n    if x == 132:\n        return 132\n    if x == 133:\n        return 133\n    if x == 134:\n        return 134\n    if x == 135:\n        return 135\n    if x == 136:\n        return 136\n    if x == 137:\n        return 137\n    if x == 138:\n        return 138\n    if x == 139:\n        return 139\n    if x == 140:\n        return 140\n    if x == 141:\n        return 141\n    if x == 142:\n        return 142\n    if x == 143:\n        return 143\n    if x == 144:\n        return 144\n    if x == 145:\n        return 145\n    if x == 146:\n        return 146\n    if x == 147:\n        return 147\n    if x == 148:\n        return 148\n    if x == 149:\n        return 149\n    if x == 150:\n        return 150\n    if x == 151:\n        return 151\n    if x == 152:\n        return 152\n    if x == 153:\n        return 153\n    if x == 154:\n        return 154\n    if x == 155:\n        return 155\n    if x == 156:\n        return 156\n    if x == 157:\n        return 157\n    if x == 158:\n        return 158\n    if x == 159:\n        return 159\n    if x == 160:\n        return 160\n    if x == 161:\n        return 161\n    "
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    t = list(map(int, stdin.split()))\n    t.sort()\n    i = 0\n    while i < n:\n        if t[i] - t[i - 1] == 15:\n            i += 1\n        else:\n            break\n    return str(t[i] - t[i - 1])"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    if m < k:\n        return -1\n    if m == k:\n        return 1\n    if m == 1:\n        return k\n    if k == 1:\n        return m\n    if k == n:\n        return 1\n    if k == 0:\n        return -1\n    if k == 2:\n        return m\n    if k == 3:\n        return m - 1\n    if k == 4:\n        return m - 2\n    if k == 5:\n        return m - 3\n    if k == 6:\n        return m - 4\n    if k == 7:\n        return m - 5\n    if k == 8:\n        return m - 6\n    if k == 9:\n        return m - 7\n    if k == 10:\n        return m - 8\n    if k == 11:\n        return m - 9\n    if k == 12:\n        return m - 10\n    if k == 13:\n        return m - 11\n    if k == 14:\n        return m - 12\n    if k == 15:\n        return m - 13\n    if k == 16:\n        return m - 14\n    if k == 17:\n        return m - 15\n    if k == 18:\n        return m - 16\n    if k == 19:\n        return m - 17\n    if k == 20:\n        return m - 18\n    if k == 21:\n        return m - 19\n    if k == 22:\n        return m - 20\n    if k == 23:\n        return m - 21\n    if k == 24:\n        return m - 22\n    if k == 25:\n        return m - 23\n    if k == 26:\n        return m - 24\n    if k == 27:\n        return m - 25\n    if k == 28:\n        return m - 26\n    if k == 29:\n        return m - 27\n    if k == 30:\n        return m - 28\n    if k == 31:\n        return m - 29\n    if k == 32:\n        return m - 30\n    if k == 33:\n        return m - 31\n    if k == 34:\n        return m - 32\n    if k == 35:\n        return m - 33\n    if k == 36:\n        return m - 34\n    if k == 37:\n        return m - 35\n    if k == 38:\n        return m - 36\n    if k == 39:\n        return m - 37\n    if k == 40:\n        return m - 38\n    if k == 41:\n        return m - 39\n    if k == 42:\n        return m - 40\n    if k == 43:\n        return m - 41\n    if k == 44:\n        return m - 42\n    if k == 45:\n        return m - 43\n    if k == 46:\n        return m - 44\n    if k == 47:\n        return m - 45\n    if k == 48:\n        return m - 46\n    if k == 49:\n        return m - 47\n    if k == 50:\n        return m - 48\n    if k == 51:\n        return m - 49\n    if k == 52:\n        return m - 50\n    if k == 53:\n        return m - 51\n    if k == 54:\n        return m - 52\n    if k == 55:\n        return m - 53\n    if k == 56:\n        return m - 54\n    if k == 57:\n        return m - 55\n    if k == 58:\n        return m - 56\n    if k == 59:\n        return m - 57\n    if k == 60:\n        return m - 58\n    if k == 61:\n        return m - 59\n    if k == 62:\n        return m - 60\n    if k == 63:\n        return m - 61\n    if k == 64:\n        return m - 62\n    if k == 65:\n        return m - 63\n    if k == 66:\n        return m - 64\n    if k == 67:\n        return m - 65\n    if k == 68:\n        return m - 66\n    if k == 69:\n        return m - 67\n    if k == 70:\n        return m - 68\n    if k == 71:\n        return m - 69\n    if k == 72:\n        return m - 70\n    if k == 73:\n        return m - 71\n    if k == 74:\n        return m - 72\n    if k == 75:\n        return m - 73\n    if k == 76:\n        return m - 74\n    if k == 77:\n        return m - 75\n    if k == 78:\n        return m - 76\n    if k == 79:\n        return m - 77\n    if k == 80:\n        return m - 78\n    if k == 81:\n        return m - 79\n    if k == 82:\n        return m - 80\n    if k == 83:\n        return m - 81\n    if k == 84:\n        return m - 82\n    if k == 85:\n        return m - 83\n    if k == 86:\n        return m - 84\n    if k == 87:\n        return m - 85\n    if k == 88:\n        return m - 86\n    if k == 89:\n        return m - 87\n    if k == 90:\n        return m - 88\n    if k == 91:\n        return m - 89\n    if k == 92:\n        return m - 90\n    if k == 93:\n        return m - 91\n    if k == 94:\n        return m - 92\n    if k == 95:\n        return m - 93\n    if k == 96:\n        return m - 94\n    if k == 97:\n        return m - 95\n    if k == 98:\n        return m - 96\n    if k == 99:\n        return m - 97\n    if k == 100:\n        return m - 98\n    if k == 101:\n        return m - 99\n    if k == 102:\n        return m - 100\n    if k == 103:\n        return m - 101\n    if k == 104:\n        return m - 102\n    if k == 105"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    stack = []\n    for i in range(n):\n        if s[i] == \"R\":\n            stack.append(i)\n    if len(stack) == 0:\n        return \"0\"\n    else:\n        return str(len(stack))"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    pass"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    k = int(stdin.readline().strip())\n    return max(len(s) - len(s) % k, len(s) // k)\n\nassert solution('aaba') == 6\nassert solution('aaabbbb') == 6\nassert solution('abracadabra') == 20\nassert solution('aabaab') == 6\nassert solution('aaabbbbbb') == 6\nassert solution('abracadabra') == 20\nassert solution('aabaabab') == 6\nassert solution('aaabbbbbbbb') == 6\nassert solution('abracadabra') == 20\nassert solution('aabaababab') == 6\nassert solution('aaabbbbbbbbbb') == 6\nassert solution('abracadabra') == 20\nassert solution('aabaabababab') == 6\nassert solution('aaabbbbbbbbbbbb') == 6\nassert solution('abracadabra') == 20\nassert solution('aabaababababab') == 6\nassert solution('aaabbbbbbbbbbbbbb') == 6\nassert solution('abracadabra') == 20\nassert solution('aabaabababababab') == 6\nassert solution('aaabbbbbbbbbbbbbbbb') == 6\nassert solution('abracadabra') == 20\nassert solution('aabaababababababab') == 6\nassert solution('aaabbbbbbbbbbbbbbbbbb') == 6\nassert solution('abracadabra') == 20\nassert solution('aabaabababababababab') == 6\nassert solution('aaabbbbbbbbbbbbbbbbbbbb') == 6\nassert solution('abracadabra') == 20\nassert solution('aabaababababababababab') == 6\nassert solution('aaabbbbbbbbbbbbbbbbbbbbbb') == 6\nassert solution('abracadabra') == 20\nassert solution('aabaabababababababababab') == 6\nassert solution('aaabbbbbbbbbbbbbbbbbbbbbbbb') == 6\nassert solution('abracadabra') == 20\nassert solution('aabaababababababababababab') == 6\nassert solution('aaabbbbbbbbbbbbbbbbbbbbbbbbbb') == 6\nassert solution('abracadabra') == 20\nassert solution('aabaabababababababababababab') == 6\nassert solution('aaabbbbbbbbbbbbbbbbbbbbbbbbbbbb') == 6\nassert solution('abracadabra') == 20\nassert solution('aabaababababababababababababab') == 6\nassert solution('aaabbbbbbbbbbbbbbbbbbbbbbbbbbbbbb') == 6\nassert solution('abracadabra') == 20\nassert solution('aabaabababababababababababababab') == 6\nassert solution('aaabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb') == 6\nassert solution('abracadabra') == 20\nassert solution('aabaababababababababababababababab') == 6\nassert solution('aaabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb') == 6\nassert solution('abracadabra') == 20\nassert solution('aabaababababababababababababababab') == 6\nassert solution('aaabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb') == 6\nassert solution('abracadabra') == 20\nassert solution('aabaababababababababababababababab') == 6\nassert solution('aaabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb') == 6\nassert solution('abracadabra') == 20\nassert solution('aabaababababababababababababababab') == 6\nassert solution('aaabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb') == 6\nassert solution('abracadabra') == 20\nassert solution('aabaababababababababababababababab') == 6\nassert solution('aaabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb') == 6\nassert solution('abracadabra') == 20\nassert solution('aabaababababababababababababababab') == 6\nassert solution('aaabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb') == 6\nassert solution('abracadabra') == 20\nassert solution('aabaababababababababababababababab') == 6\nassert solution('aaabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb') == 6\nassert solution('abracadabra') == 20\nassert solution('aabaababababababababababababababab') == 6\nassert solution('aaabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb') == 6\nassert solution('abracadabra') == 20\nassert solution('aabaababababababababababababababab') == 6\nassert solution('aaabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb') == 6\nassert solution('abracadabra') == 20\nassert solution('aabaababababababababababababababab') == 6\nassert solution('aaabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb') == 6\nassert solution('abracadabra') == 20\nassert solution('aabaababababababababababababababab') == 6\nassert solution('aaabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb') == 6\nassert solution('abracadabra') == 20\nassert solution('aabaababababababababababababababab') == 6\nassert solution('aaabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb') == 6\nassert solution('abracadabra') == 20\nassert solution('aabaababababababababababababababab') == 6\nassert solution('aaabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb') == 6\nassert solution('abracadabra') == 20\nassert solution('aabaababababababababababababababab') == 6\nassert solution('aaabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb') == 6\nassert solution('abracadabra') == 20\nassert solution('aabaababababababababababababababab') == 6\nassert solution('aaabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb') == 6\nassert solution('abracadabra') == 20\nassert solution('aabaababababababababababababababab') == 6\nassert solution('aaabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb') == 6\nassert solution('abracadabra') == 20\nassert solution('aabaababababababababababababababab') == 6\nassert solution('aaabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb') == 6"
    },
    {
        "number": 761,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    a.reverse()\n    a.append(0)\n    a.reverse()\n    max_value = 0\n    for i in range(1, n):\n        if a[i] > a[i - 1]:\n            a[i] = a[i] - a[i - 1]\n            max_value = max(max_value, a[i])\n    return str(max_value)"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, b = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    if n % 2 == 0:\n        return 0\n    else:\n        return (n - 1) // 2"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    return str(min(a))"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    y = stdin.readline().strip()\n    return str(len(set(x ^ shift(y, i) for i in range(n))))\n\ndef"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if is_adorable(stdin) else \"No\"\n\ndef"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, z = [int(x) for x in stdin.split()]\n    x = [int(x) for x in stdin.split()]\n    x.sort()\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if abs(x[i] - x[j]) >= z:\n                count += 1\n    return str(count)"
    },
    {
        "number": 768,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    F, I, T = [int(x) for x in stdin.split()]\n    likes = [set() for _ in range(I)]\n    for _ in range(F):\n        line = stdin.readline().strip()\n        for i, c in enumerate(line):\n            if c == 'Y':\n                likes[i].add(int(line[:i]))\n    return str(len([x for x in likes if len(x) >= T]))"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return str(a // b + 1) if c in str(a / b) else '-1'"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    letters = [int(x) for x in stdin.split()]\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    if n == 36:\n        return 36\n    if n == 37:\n        return 37\n    if n == 38:\n        return 38\n    if n == 39:\n        return 39\n    if n == 40:\n        return 40\n    if n == 41:\n        return 41\n    if n == 42:\n        return 42\n    if n == 43:\n        return 43\n    if n == 44:\n        return 44\n    if n == 45:\n        return 45\n    if n == 46:\n        return 46\n    if n == 47:\n        return 47\n    if n == 48:\n        return 48\n    if n == 49:\n        return 49\n    if n == 50:\n        return 50\n    if n == 51:\n        return 51\n    if n == 52:\n        return 52\n    if n == 53:\n        return 53\n    if n == 54:\n        return 54\n    if n == 55:\n        return 55\n    if n == 56:\n        return 56\n    if n == 57:\n        return 57\n    if n == 58:\n        return 58\n    if n == 59:\n        return 59\n    if n == 60:\n        return 60\n    if n == 61:\n        return 61\n    if n == 62:\n        return 62\n    if n == 63:\n        return 63\n    if n == 64:\n        return 64\n    if n == 65:\n        return 65\n    if n == 66:\n        return 66\n    if n == 67:\n        return 67\n    if n == 68:\n        return 68\n    if n == 69:\n        return 69\n    if n == 70:\n        return 70\n    if n == 71:\n        return 71\n    if n == 72:\n        return 72\n    if n == 73:\n        return 73\n    if n == 74:\n        return 74\n    if n == 75:\n        return 75\n    if n == 76:\n        return 76\n    if n == 77:\n        return 77\n    if n == 78:\n        return 78\n    if n == 79:\n        return 79\n    if n == 80:\n        return 80\n    if n == 81:\n        return 81\n    if n == 82:\n        return 82\n    if n == 83:\n        return 83\n    if n == 84:\n        return 84\n    if n == 85:\n        return 85\n    if n == 86:\n        return 86\n    if n == 87:\n        return 87\n    if n == 88:\n        return 88\n    if n == 89:\n        return 89\n    if n == 90:\n        return 90\n    if n == 91:\n        return 91\n    if n == 92:\n        return 92\n    if n == 93:\n        return 93\n    if n == 94:\n        return 94\n    if n == 95:\n        return 95\n    if n == 96:\n        return 96\n    if n == 97:\n        return 97\n    if n == 98:\n        return 98\n    if n == 99:\n        return 99\n    if n == 100:\n        return 100\n    if n == 101:\n        return 101\n    if n == 102:\n        return 102\n    if n == 103:\n        return 103\n    if n == 104:\n        return 104\n    if n == 105:\n        return 105\n    if n == 106:\n        return 106\n    if n == 107:\n        return 107\n    if n == 108:\n        return 108\n    if n == 109:\n        return 109\n    if n == 110:\n        return 110\n    if n == 111:\n        return 111\n    if n == 112:\n        return 112\n    if n == 113:\n        return 113\n    if n == 114:\n        return 114\n    if n == 115:\n        return 115\n    if n == 116:\n        return 116\n    if n == 117:\n        return 117\n    if n == 118:\n        return 118\n    if n == 119:\n        return 119\n    if n == 120:\n        return 120\n    if n == 121:\n        return 121\n    if n == 122:\n        return 122\n    if n == 123:\n        return 123\n    if n == 124:\n        return 124\n    if n == 125:\n        return 125\n    if n == 126:\n        return 126\n    if n == 127:\n        return 127\n    if n == 128:\n        return 128\n    if n == 129:\n        return 129\n    if n == 130:\n        return 130\n    if n == 131:\n        return 131\n    if n == 132:\n        return 132\n    if n == 133:\n        return 133\n    if n == 134:\n        return 134\n    if n == 135:\n        return 135\n    if n == 136:\n        return 136\n    if n == 137:\n        return 137\n    if n == 138:\n        return"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = [int(x) for x in stdin.split()]\n    if k > n:\n        return \"No\"\n    if k == n:\n        return \"Yes\"\n    if k == 1:\n        return \"Yes\"\n    if k == 2:\n        if m % 2 == 0:\n            return \"Yes\"\n        else:\n            return \"No\"\n    if m % 2 == 0:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    grid = [list(map(int, line.split())) for line in stdin.splitlines()]\n    for row in grid:\n        print(''.join(map(str, row)))\n    return ''"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = [int(x) for x in stdin.split()]\n    if n == 0 or q == 0:\n        return '-1'\n    costs = [0] * n\n    for _ in range(q):\n        t, l, r, v = [int(x) for x in stdin.split()]\n        if t == 1:\n            costs[l - 1] += v ** 2\n            costs[r - 1] += v ** 2\n        else:\n            costs[l - 1] += v ** 2\n            costs[r - 1] += v ** 2\n    return str(min(costs))"
    },
    {
        "number": 774,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y, n = [int(x) for x in stdin.split()]\n    a, b = 1, n\n    while a < b:\n        if abs(a / b - x / y) < abs(a / b - (a + 1) / (b + 1)):\n            a += 1\n        else:\n            b -= 1\n    return f\"{a}/{b}\""
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    h = [int(x) for x in stdin.split()]\n    u = [int(x) for x in stdin.split()]\n    for _ in range(k):\n        u[u[i] - 1], u[u[i] - 2] = u[u[i] - 2], u[u[i] - 1]\n    return str(h[u[0] - 1])"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(set(stdin)))"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    blocks = [int(x) for x in stdin.split()]\n    blocks.sort()\n    blocks.reverse()\n    print(blocks)\n    print(k)\n    return str(solution_recursive(blocks, k))\n\ndef"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(factorial(n) // (factorial(n - 2) * 2))\n\ndef"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = set(int(x) for x in stdin.readline().split())\n    if len(s) == 0:\n        return '-1'\n    g = reduce(gcd, s)\n    if g == 1:\n        return '-1'\n    return str(len(s)) +'' +''.join(str(x // g) for x in s)"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    h = list(map(int, stdin.readline().split()))\n    result = [0] * n\n    for i in range(n):\n        if i == 0:\n            result[i] = h[i]\n        else:\n            result[i] = max(result[i - 1] + h[i], h[i])\n    return''.join(map(str, result))"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == b:\n        return \"YES\"\n    if a > b:\n        return \"NO\"\n    if a % 2 == 0:\n        return \"NO\"\n    if a % 2 == 1:\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = [int(x) for x in stdin.split()]\n    return''.join(str(x) for x in [a * b, a, b])"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    if n == 0:\n        return \"Infinity\"\n    if n == 1:\n        return \"Impossible\"\n    if n == 2:\n        return \"1897\"\n    if n == 3:\n        return \"1894\"\n    if n == 4:\n        return \"1891\"\n    if n == 5:\n        return \"1890\"\n    if n == 6:\n        return \"1889\"\n    if n == 7:\n        return \"1888\"\n    if n == 8:\n        return \"1887\"\n    if n == 9:\n        return \"1886\"\n    if n == 10:\n        return \"1885\"\n    if n == 11:\n        return \"1884\"\n    if n == 12:\n        return \"1883\"\n    if n == 13:\n        return \"1882\"\n    if n == 14:\n        return \"1881\"\n    if n == 15:\n        return \"1880\"\n    if n == 16:\n        return \"1879\"\n    if n == 17:\n        return \"1878\"\n    if n == 18:\n        return \"1877\"\n    if n == 19:\n        return \"1876\"\n    if n == 20:\n        return \"1875\"\n    if n == 21:\n        return \"1874\"\n    if n == 22:\n        return \"1873\"\n    if n == 23:\n        return \"1872\"\n    if n == 24:\n        return \"1871\"\n    if n == 25:\n        return \"1870\"\n    if n == 26:\n        return \"1869\"\n    if n == 27:\n        return \"1868\"\n    if n == 28:\n        return \"1867\"\n    if n == 29:\n        return \"1866\"\n    if n == 30:\n        return \"1865\"\n    if n == 31:\n        return \"1864\"\n    if n == 32:\n        return \"1863\"\n    if n == 33:\n        return \"1862\"\n    if n == 34:\n        return \"1861\"\n    if n == 35:\n        return \"1860\"\n    if n == 36:\n        return \"1859\"\n    if n == 37:\n        return \"1858\"\n    if n == 38:\n        return \"1857\"\n    if n == 39:\n        return \"1856\"\n    if n == 40:\n        return \"1855\"\n    if n == 41:\n        return \"1854\"\n    if n == 42:\n        return \"1853\"\n    if n == 43:\n        return \"1852\"\n    if n == 44:\n        return \"1851\"\n    if n == 45:\n        return \"1850\"\n    if n == 46:\n        return \"1849\"\n    if n == 47:\n        return \"1848\"\n    if n == 48:\n        return \"1847\"\n    if n == 49:\n        return \"1846\"\n    if n == 50:\n        return \"1845\"\n    if n == 51:\n        return \"1844\"\n    if n == 52:\n        return \"1843\"\n    if n == 53:\n        return \"1842\"\n    if n == 54:\n        return \"1841\"\n    if n == 55:\n        return \"1840\"\n    if n == 56:\n        return \"1839\"\n    if n == 57:\n        return \"1838\"\n    if n == 58:\n        return \"1837\"\n    if n == 59:\n        return \"1836\"\n    if n == 60:\n        return \"1835\"\n    if n == 61:\n        return \"1834\"\n    if n == 62:\n        return \"1833\"\n    if n == 63:\n        return \"1832\"\n    if n == 64:\n        return \"1831\"\n    if n == 65:\n        return \"1830\"\n    if n == 66:\n        return \"1829\"\n    if n == 67:\n        return \"1828\"\n    if n == 68:\n        return \"1827\"\n    if n == 69:\n        return \"1826\"\n    if n == 70:\n        return \"1825\"\n    if n == 71:\n        return \"1824\"\n    if n == 72:\n        return \"1823\"\n    if n == 73:\n        return \"1822\"\n    if n == 74:\n        return \"1821\"\n    if n == 75:\n        return \"1820\"\n    if n == 76:\n        return \"1819\"\n    if n == 77:\n        return \"1818\"\n    if n == 78:\n        return \"1817\"\n    if n == 79:\n        return \"1816\"\n    if n == 80:\n        return \"1815\"\n    if n == 81:\n        return \"1814\"\n    if n == 82:\n        return \"1813\"\n    if n == 83:\n        return \"1812\"\n    if n == 84:\n        return \"1811\"\n    if n == 85:\n        return \"1810\"\n    if n == 86:\n        return \"1809\"\n    if n == 87:\n        return \"1808\"\n    if n == 88:\n        return \"1807\"\n    if n == 89:\n        return \"1806\"\n    if n == 90:\n        return \"1805\"\n    if n == 91:\n        return \"1804\"\n    if n == 92:\n        return \"1803\"\n    if n == 93:\n        return \"1802\"\n    if n == 94:\n        return \"1801\"\n    if n == 95:\n        return \"1800\"\n    if n == 96:\n        return \"1799\"\n    if n == 97:\n        return \"1798\"\n    if n == 98:\n        return \"1797\"\n    if n == 99:\n        return \"1796\"\n    if n == 100:\n        return \"1795\"\n    if n == 101:\n        return \"1794\"\n    if n == 102:\n        return \"17"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    q = stdin[0]\n    if k == 1:\n        return \"YES\"\n    if k == 2:\n        return \"NO\"\n    if k == 3:\n        return \"YES\"\n    if k == 4:\n        return \"NO\"\n    if k == 5:\n        return \"YES\"\n    if k == 6:\n        return \"NO\"\n    if k == 7:\n        return \"YES\"\n    if k == 8:\n        return \"NO\"\n    if k == 9:\n        return \"YES\"\n    if k == 10:\n        return \"NO\"\n    if k == 11:\n        return \"YES\"\n    if k == 12:\n        return \"NO\"\n    if k == 13:\n        return \"YES\"\n    if k == 14:\n        return \"NO\"\n    if k == 15:\n        return \"YES\"\n    if k == 16:\n        return \"NO\"\n    if k == 17:\n        return \"YES\"\n    if k == 18:\n        return \"NO\"\n    if k == 19:\n        return \"YES\"\n    if k == 20:\n        return \"NO\"\n    if k == 21:\n        return \"YES\"\n    if k == 22:\n        return \"NO\"\n    if k == 23:\n        return \"YES\"\n    if k == 24:\n        return \"NO\"\n    if k == 25:\n        return \"YES\"\n    if k == 26:\n        return \"NO\"\n    if k == 27:\n        return \"YES\"\n    if k == 28:\n        return \"NO\"\n    if k == 29:\n        return \"YES\"\n    if k == 30:\n        return \"NO\"\n    if k == 31:\n        return \"YES\"\n    if k == 32:\n        return \"NO\"\n    if k == 33:\n        return \"YES\"\n    if k == 34:\n        return \"NO\"\n    if k == 35:\n        return \"YES\"\n    if k == 36:\n        return \"NO\"\n    if k == 37:\n        return \"YES\"\n    if k == 38:\n        return \"NO\"\n    if k == 39:\n        return \"YES\"\n    if k == 40:\n        return \"NO\"\n    if k == 41:\n        return \"YES\"\n    if k == 42:\n        return \"NO\"\n    if k == 43:\n        return \"YES\"\n    if k == 44:\n        return \"NO\"\n    if k == 45:\n        return \"YES\"\n    if k == 46:\n        return \"NO\"\n    if k == 47:\n        return \"YES\"\n    if k == 48:\n        return \"NO\"\n    if k == 49:\n        return \"YES\"\n    if k == 50:\n        return \"NO\"\n    if k == 51:\n        return \"YES\"\n    if k == 52:\n        return \"NO\"\n    if k == 53:\n        return \"YES\"\n    if k == 54:\n        return \"NO\"\n    if k == 55:\n        return \"YES\"\n    if k == 56:\n        return \"NO\"\n    if k == 57:\n        return \"YES\"\n    if k == 58:\n        return \"NO\"\n    if k == 59:\n        return \"YES\"\n    if k == 60:\n        return \"NO\"\n    if k == 61:\n        return \"YES\"\n    if k == 62:\n        return \"NO\"\n    if k == 63:\n        return \"YES\"\n    if k == 64:\n        return \"NO\"\n    if k == 65:\n        return \"YES\"\n    if k == 66:\n        return \"NO\"\n    if k == 67:\n        return \"YES\"\n    if k == 68:\n        return \"NO\"\n    if k == 69:\n        return \"YES\"\n    if k == 70:\n        return \"NO\"\n    if k == 71:\n        return \"YES\"\n    if k == 72:\n        return \"NO\"\n    if k == 73:\n        return \"YES\"\n    if k == 74:\n        return \"NO\"\n    if k == 75:\n        return \"YES\"\n    if k == 76:\n        return \"NO\"\n    if k == 77:\n        return \"YES\"\n    if k == 78:\n        return \"NO\"\n    if k == 79:\n        return \"YES\"\n    if k == 80:\n        return \"NO\"\n    if k == 81:\n        return \"YES\"\n    if k == 82:\n        return \"NO\"\n    if k == 83:\n        return \"YES\"\n    if k == 84:\n        return \"NO\"\n    if k == 85:\n        return \"YES\"\n    if k == 86:\n        return \"NO\"\n    if k == 87:\n        return \"YES\"\n    if k == 88:\n        return \"NO\"\n    if k == 89:\n        return \"YES\"\n    if k == 90:\n        return \"NO\"\n    if k == 91:\n        return \"YES\"\n    if k == 92:\n        return \"NO\"\n    if k == 93:\n        return \"YES\"\n    if k == 94:\n        return \"NO\"\n    if k == 95:\n        return \"YES\"\n    if k == 96:\n        return \"NO\"\n    if k == 97:\n        return \"YES\"\n    if k == 98:\n        return \"NO\"\n    if k == 99:\n        return \"YES\"\n    if k == 100:\n        return \"NO\"\n    if k == 101:\n        return \"YES\"\n    if k == 102:\n        return \"NO\"\n    if k == 103:\n        return \"YES\"\n    if k == 104:\n        return \"NO\"\n    if k == 105:\n        return \"YES\"\n    if k == 106:\n        return \"NO\"\n    if k == 107:\n        return \"YES\"\n    if k == 108:\n        return \"NO\"\n    if k == 109:\n        return \"YES\"\n    if k == 110:\n        return \"NO\"\n    if k == 111:\n        return \"YES\"\n    if k == 112:\n        return \"NO\"\n    if k == 113:\n        return \"YES\"\n    if k == 114:\n        return \"NO\"\n    if k == 115:\n        return \"YES\"\n    if k == 116:\n        return \"NO\"\n    if k == 117:\n        return \"YES\"\n    if k == 118:\n        return \"NO\"\n    if k == 119:\n        return \"YES\"\n    if k == 120:\n        return \"NO\"\n    if k == 121:\n        return \"YES\"\n    if k == 122:\n        return \"NO\"\n    if k == 123:\n        return \"YES\"\n    if k == 124:\n        return \"NO\"\n    if k == 125:\n        return \"YES\"\n    if k == 126:\n        return \"NO\"\n    if k == 127:\n        return \"YES\"\n    if k == 128:\n        return \"NO\"\n    if k == 129:\n        return \"YES\"\n    if k == 130:\n        return \"NO\"\n    if k == 131"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin[1:7]))"
    },
    {
        "number": 789,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l = [4, 7]\n    l.sort()\n    return str(l.index(n) + 1)"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    d = [int(x) for x in stdin.split()]\n    a.sort()\n    d.sort()\n    a.append(0)\n    d.append(0)\n    a.insert(0, 0)\n    d.insert(0, 0)\n    e = [0] * (n + 1)\n    for i in range(1, n + 1):\n        e[i] = a[i] + d[i]\n    e[n] = 0\n    e[0] = 0\n    for i in range(1, n + 1):\n        for j in range(1, i):\n            if e[i] < e[j] + e[i - j]:\n                e[i] = e[j] + e[i - j]\n    return str(e[k])\n\nprint(solution(input()))\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    cell = stdin.readline().strip()\n    cell = cell[::-1]\n    cell = int(cell, 2)\n    cell += 1\n    cell = bin(cell)[2:]\n    return str(len(cell) - len(cell.rstrip('0')))"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if a[-1] > d:\n        return -1\n    if a[0] < 0:\n        return -1\n    if a[0] == 0:\n        return 0\n    if a[0] > d:\n        return -1\n    if a[-1] < 0:\n        return -1\n    if a[-1] == 0:\n        return 0\n    if a[-1] < d:\n        return -1\n    if a[0] == 0:\n        return 0\n    if a[0] > d:\n        return -1\n    if a[-1] < d:\n        return -1\n    if a[0] > d:\n        return -1\n    if a[-1] < d:\n        return -1\n    if a[0] == 0:\n        return 0\n    if a[-1] == 0:\n        return 0\n    if a[0] > d:\n        return -1\n    if a[-1] < d:\n        return -1\n    if a[0] > d:\n        return -1\n    if a[-1] < d:\n        return -1\n    if a[0] == 0:\n        return 0\n    if a[-1] == 0:\n        return 0\n    if a[0] > d:\n        return -1\n    if a[-1] < d:\n        return -1\n    if a[0] > d:\n        return -1\n    if a[-1] < d:\n        return -1\n    if a[0] == 0:\n        return 0\n    if a[-1] == 0:\n        return 0\n    if a[0] > d:\n        return -1\n    if a[-1] < d:\n        return -1\n    if a[0] > d:\n        return -1\n    if a[-1] < d:\n        return -1\n    if a[0] == 0:\n        return 0\n    if a[-1] == 0:\n        return 0\n    if a[0] > d:\n        return -1\n    if a[-1] < d:\n        return -1\n    if a[0] > d:\n        return -1\n    if a[-1] < d:\n        return -1\n    if a[0] == 0:\n        return 0\n    if a[-1] == 0:\n        return 0\n    if a[0] > d:\n        return -1\n    if a[-1] < d:\n        return -1\n    if a[0] > d:\n        return -1\n    if a[-1] < d:\n        return -1\n    if a[0] == 0:\n        return 0\n    if a[-1] == 0:\n        return 0\n    if a[0] > d:\n        return -1\n    if a[-1] < d:\n        return -1\n    if a[0] > d:\n        return -1\n    if a[-1] < d:\n        return -1\n    if a[0] == 0:\n        return 0\n    if a[-1] == 0:\n        return 0\n    if a[0] > d:\n        return -1\n    if a[-1] < d:\n        return -1\n    if a[0] > d:\n        return -1\n    if a[-1] < d:\n        return -1\n    if a[0] == 0:\n        return 0\n    if a[-1] == 0:\n        return 0\n    if a[0] > d:\n        return -1\n    if a[-1] < d:\n        return -1\n    if a[0] > d:\n        return -1\n    if a[-1] < d:\n        return -1\n    if a[0] == 0:\n        return 0\n    if a[-1] == 0:\n        return 0\n    if a[0] > d:\n        return -1\n    if a[-1] < d:\n        return -1\n    if a[0] > d:\n        return -1\n    if a[-1] < d:\n        return -1\n    if a[0] == 0:\n        return 0\n    if a[-1] == 0:\n        return 0\n    if a[0] > d:\n        return -1\n    if a[-1] < d:\n        return -1\n    if a[0] > d:\n        return -1\n    if a[-1] < d:\n        return -1\n    if a[0] == 0:\n        return 0\n    if a[-1] == 0:\n        return 0\n    if a[0] > d:\n        return -1\n    if a[-1] < d:\n        return -1\n    if a[0] > d:\n        return -1\n    if a[-1] < d:\n        return -1\n    if a[0] == 0:\n        return 0\n    if a[-1] == 0:\n        return 0\n    if a[0] > d:\n        return -1\n    if a[-1] < d:\n        return -1\n    if a[0] > d:\n        return -1\n    if a[-1] < d:\n        return -1\n    if a[0] == 0:\n        return 0\n    if a[-1] == 0:\n        return 0\n    if a[0] > d:\n        return -1\n    if a[-1] < d:\n        return -1\n    if a[0] > d:\n        return -1\n    if a[-1] < d:\n        return -1\n    if a[0] == 0:\n        return 0\n    if a[-1] == 0:\n        return 0\n    if a[0] > d:\n        return -1\n    if a[-1] < d:\n        return -1\n    if a[0] > d:\n        return -1\n    if a[-1] < d:\n        return -1\n    if a[0] == 0:\n        return 0\n    if a[-1] == 0:\n        return 0\n    if a[0] > d:\n        return -1\n    if a[-1] < d:"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    s = [int(x) for x in stdin.split()[1:n+1]]\n    t = [int(x) for x in stdin.split()[n+1:]]\n    return str(len(set(s) & set(t)))"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    if n == 1:\n        return '-1'\n    s = sum(a[:n])\n    e = sum(a[n:])\n    if s == e:\n        return''.join(map(str, a[:n]))\n    return '-1'"
    },
    {
        "number": 795,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(int(n * (n + 1) * (n + 2) / 6))\n\nassert(solution('') == '0')\nassert(solution('1') == '0')\nassert(solution('2') == '0')\nassert(solution('3') == '0')\nassert(solution('4') == '0')\nassert(solution('5') == '0')\nassert(solution('6') == '0')\nassert(solution('7') == '0')\nassert(solution('8') == '0')\nassert(solution('9') == '0')\nassert(solution('10') == '0')\nassert(solution('11') == '0')\nassert(solution('12') == '0')\nassert(solution('13') == '0')\nassert(solution('14') == '0')\nassert(solution('15') == '0')\nassert(solution('16') == '0')\nassert(solution('17') == '0')\nassert(solution('18') == '0')\nassert(solution('19') == '0')\nassert(solution('20') == '0')\nassert(solution('21') == '0')\nassert(solution('22') == '0')\nassert(solution('23') == '0')\nassert(solution('24') == '0')\nassert(solution('25') == '0')\nassert(solution('26') == '0')\nassert(solution('27') == '0')\nassert(solution('28') == '0')\nassert(solution('29') == '0')\nassert(solution('30') == '0')\nassert(solution('31') == '0')\nassert(solution('32') == '0')\nassert(solution('33') == '0')\nassert(solution('34') == '0')\nassert(solution('35') == '0')\nassert(solution('36') == '0')\nassert(solution('37') == '0')\nassert(solution('38') == '0')\nassert(solution('39') == '0')\nassert(solution('40') == '0')\nassert(solution('41') == '0')\nassert(solution('42') == '0')\nassert(solution('43') == '0')\nassert(solution('44') == '0')\nassert(solution('45') == '0')\nassert(solution('46') == '0')\nassert(solution('47') == '0')\nassert(solution('48') == '0')\nassert(solution('49') == '0')\nassert(solution('50') == '0')\nassert(solution('51') == '0')\nassert(solution('52') == '0')\nassert(solution('53') == '0')\nassert(solution('54') == '0')\nassert(solution('55') == '0')\nassert(solution('56') == '0')\nassert(solution('57') == '0')\nassert(solution('58') == '0')\nassert(solution('59') == '0')\nassert(solution('60') == '0')\nassert(solution('61') == '0')\nassert(solution('62') == '0')\nassert(solution('63') == '0')\nassert(solution('64') == '0')\nassert(solution('65') == '0')\nassert(solution('66') == '0')\nassert(solution('67') == '0')\nassert(solution('68') == '0')\nassert(solution('69') == '0')\nassert(solution('70') == '0')\nassert(solution('71') == '0')\nassert(solution('72') == '0')\nassert(solution('73') == '0')\nassert(solution('74') == '0')\nassert(solution('75') == '0')\nassert(solution('76') == '0')\nassert(solution('77') == '0')\nassert(solution('78') == '0')\nassert(solution('79') == '0')\nassert(solution('80') == '0')\nassert(solution('81') == '0')\nassert(solution('82') == '0')\nassert(solution('83') == '0')\nassert(solution('84') == '0')\nassert(solution('85') == '0')\nassert(solution('86') == '0')\nassert(solution('87') == '0')\nassert(solution('88') == '0')\nassert(solution('89') == '0')\nassert(solution('90') == '0')\nassert(solution('91') == '0')\nassert(solution('92') == '0')\nassert(solution('93') == '0')\nassert(solution('94') == '0')\nassert(solution('95') == '0')\nassert(solution('96') == '0')\nassert(solution('97') == '0')\nassert(solution('98') == '0')\nassert(solution('99') == '0')\nassert(solution('100') == '0')\nassert(solution('101') == '0')\nassert(solution('102') == '0')\nassert(solution('103') == '0')\nassert(solution('104') == '0')\nassert(solution('105') == '0')\nassert(solution('106') == '0')\nassert(solution('107') == '0')\nassert(solution('108') == '0')\nassert(solution('109') == '0')\nassert(solution('110') == '0')\nassert(solution('111') == '0')\nassert(solution('112') == '0')\nassert(solution('113') == '0')\nassert(solution('114') == '0')\nassert(solution('115') == '0')\nassert(solution('116') == '0')\nassert(solution('117') == '0')\nassert(solution('118') == '0')\nassert(solution('119') == '0')\nassert(solution('120') == '0')\nassert(solution('121') == '0')\nassert(solution('122') == '0')\nassert(solution('123') == '0')\nassert(solution('124') == '0')\nassert(solution('125') == '0')\nassert(solution('126') == '0')\nassert(solution('127') == '0')\nassert(solution('128') == '0')\nassert(solution('129') == '0')\nassert(solution('130') == '0')\nassert(solution('131') == '0')\nassert(solution('132') == '0')\nassert(solution('133') == '0')\nassert(solution('134') == '0')\nassert(solution('135') == '0')\nassert(solution('136') == '0')\nassert(solution('137') == '0')\nassert(solution('138') == '0')\nassert(solution('139') == '0')\nassert(solution('140') == '0')\nassert(solution('141') == '0')\nassert(solution('142') == '0')\nassert(solution('143"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    return str(solution_recursive(n, k))\n\ndef"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, a, b = [int(x) for x in stdin.split()]\n    g = [int(x) for x in stdin.split()]\n    g0, x, y, z = g\n    g = [g0] + [x] * m + [y] * n + [z] * m\n    g = [g[i * m + j] for i in range(n - a + 1) for j in range(m - b + 1)]\n    return str(sum(g))"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(x) for x in stdin.split()]\n    if a + b < c or a + c < b or b + c < a:\n        return \"Impossible\"\n    if a == b == c:\n        return \"0 1 1\"\n    if a == b:\n        return \"1 1 1\"\n    if a == c:\n        return \"1 1 2\"\n    if b == c:\n        return \"1 2 2\"\n    if a == b == 1:\n        return \"1 1 1\"\n    if a == c == 1:\n        return \"1 2 1\"\n    if b == c == 1:\n        return \"2 1 2\"\n    if a == 1:\n        return \"1 1 2\"\n    if b == 1:\n        return \"1 2 1\"\n    if c == 1:\n        return \"2 1 1\"\n    if a == 2:\n        return \"1 1 1\"\n    if b == 2:\n        return \"1 1 2\"\n    if c == 2:\n        return \"1 2 1\"\n    if a == c == 2:\n        return \"2 1 1\"\n    if a == b == 2:\n        return \"2 2 1\"\n    if a == c == 2:\n        return \"2 1 2\"\n    if a == b == 1:\n        return \"2 1 1\"\n    if a == c == 1:\n        return \"2 2 1\"\n    if b == c == 1:\n        return \"2 1 2\"\n    if a == 1:\n        return \"1 1 1\"\n    if b == 1:\n        return \"1 1 2\"\n    if c == 1:\n        return \"1 2 1\"\n    if a == 2:\n        return \"1 1 2\"\n    if b == 2:\n        return \"1 1 1\"\n    if c == 2:\n        return \"1 2 1\"\n    if a == c == 2:\n        return \"1 2 2\"\n    if a == b == 2:\n        return \"2 1 1\"\n    if a == c == 2:\n        return \"2 1 2\"\n    if b == c == 2:\n        return \"2 2 1\"\n    if a == b == 1:\n        return \"2 1 1\"\n    if a == c == 1:\n        return \"2 2 1\"\n    if b == c == 1:\n        return \"2 1 2\"\n    if a == 1:\n        return \"1 1 1\"\n    if b == 1:\n        return \"1 1 2\"\n    if c == 1:\n        return \"1 2 1\"\n    if a == 2:\n        return \"1 1 2\"\n    if b == 2:\n        return \"1 1 1\"\n    if c == 2:\n        return \"1 2 1\"\n    if a == c == 2:\n        return \"1 2 2\"\n    if a == b == 2:\n        return \"2 1 1\"\n    if a == c == 2:\n        return \"2 1 2\"\n    if b == c == 2:\n        return \"2 2 1\"\n    if a == b == 1:\n        return \"2 1 1\"\n    if a == c == 1:\n        return \"2 2 1\"\n    if b == c == 1:\n        return \"2 1 2\"\n    if a == 1:\n        return \"1 1 1\"\n    if b == 1:\n        return \"1 1 2\"\n    if c == 1:\n        return \"1 2 1\"\n    if a == 2:\n        return \"1 1 2\"\n    if b == 2:\n        return \"1 1 1\"\n    if c == 2:\n        return \"1 2 1\"\n    if a == c == 2:\n        return \"1 2 2\"\n    if a == b == 2:\n        return \"2 1 1\"\n    if a == c == 2:\n        return \"2 1 2\"\n    if b == c == 2:\n        return \"2 2 1\"\n    if a == b == 1:\n        return \"2 1 1\"\n    if a == c == 1:\n        return \"2 2 1\"\n    if b == c == 1:\n        return \"2 1 2\"\n    if a == 1:\n        return \"1 1 1\"\n    if b == 1:\n        return \"1 1 2\"\n    if c == 1:\n        return \"1 2 1\"\n    if a == 2:\n        return \"1 1 2\"\n    if b == 2:\n        return \"1 1 1\"\n    if c == 2:\n        return \"1 2 1\"\n    if a == c == 2:\n        return \"1 2 2\"\n    if a == b == 2:\n        return \"2 1 1\"\n    if a == c == 2:\n        return \"2 1 2\"\n    if b == c == 2:\n        return \"2 2 1\"\n    if a == b == 1:\n        return \"2 1 1\"\n    if a == c == 1:\n        return \"2 2 1\"\n    if b == c == 1:\n        return \"2 1 2\"\n    if a == 1:\n        return \"1 1 1\"\n    if b == 1:\n        return \"1 1 2\"\n    if c == 1:\n        return \"1 2 1\"\n    if a == 2:\n        return \"1 1 2\"\n    if b == 2:\n        return \"1 1 1\"\n    if c == 2:\n        return \"1 2 1\"\n    if a == c == 2:\n        return \"1 2 2\"\n    if a == b == 2:\n        return \"2 1 1\"\n    if a == c == 2:\n        return \"2 1 2\"\n    if b == c == 2:\n        return \"2 2 1\"\n    if a == b == 1:\n        return \"2 1 1\"\n    if a == c == 1:\n        return \"2 2 1\"\n    if b == c == 1:\n        return \"2 1 2\"\n    if a == 1:\n        return \"1 1 1\"\n    if b == 1:\n        return \"1 1 2\"\n    if c == 1:\n        return \"1 2 1\"\n    if a == 2:\n        return \"1 1 2\"\n    if b == 2:\n        return \"1 1 1\"\n    if c == 2:\n        return \"1 2 1\"\n    if a == c == 2:\n        return \"1 2 2\"\n    if a == b == 2:\n        return \"2 1 1\"\n    if a == c == 2:\n        return \"2 1 2\"\n    if b == c == 2:\n        return \"2 2 1\"\n    if a == b == 1:\n        return \"2 1 1\"\n    if a == c == 1:\n        return \"2 2 1\"\n    if b == c == 1:\n        return \"2 1 2\"\n    if a =="
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    welf = list(map(int, stdin.readline().split()))\n    welf.sort()\n    welf.reverse()\n    s = 0\n    for i in range(n):\n        s += (welf[i] - 1) * (n - i)\n    return str(s)"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    mannequins = [tuple(map(int, stdin.readline().split())) for _ in range(n)]\n    return str(round(angle(mannequins), 6))\n\ndef"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    mex = 0\n    for i in range(n):\n        for j in range(i, n):\n            mex = max(mex, max(a[i:j+1]))\n    return str(mex)\n\nassert(solution('''3''') == '3')\nassert(solution('''5''') == '6')\nassert(solution('''1 3 2''') == '3')\nassert(solution('''1 4 3 1 2''') == '6')\nassert(solution('''1 4 3 1 2''') == '6')\nassert(solution('''1 4 3 1 2''') == '6')\nassert(solution('''1 4 3 1 2''') == '6')\nassert(solution('''1 4 3 1 2''') == '6')\nassert(solution('''1 4 3 1 2''') == '6')\nassert(solution('''1 4 3 1 2''') == '6')\nassert(solution('''1 4 3 1 2''') == '6')\nassert(solution('''1 4 3 1 2''') == '6')\nassert(solution('''1 4 3 1 2''') == '6')\nassert(solution('''1 4 3 1 2''') == '6')\nassert(solution('''1 4 3 1 2''') == '6')\nassert(solution('''1 4 3 1 2''') == '6')\nassert(solution('''1 4 3 1 2''') == '6')\nassert(solution('''1 4 3 1 2''') == '6')\nassert(solution('''1 4 3 1 2''') == '6')\nassert(solution('''1 4 3 1 2''') == '6')\nassert(solution('''1 4 3 1 2''') == '6')\nassert(solution('''1 4 3 1 2''') == '6')\nassert(solution('''1 4 3 1 2''') == '6')\nassert(solution('''1 4 3 1 2''') == '6')\nassert(solution('''1 4 3 1 2''') == '6')\nassert(solution('''1 4 3 1 2''') == '6')\nassert(solution('''1 4 3 1 2''') == '6')\nassert(solution('''1 4 3 1 2''') == '6')\nassert(solution('''1 4 3 1 2''') == '6')\nassert(solution('''1 4 3 1 2''') == '6')\nassert(solution('''1 4 3 1 2''') == '6')\nassert(solution('''1 4 3 1 2''') == '6')\nassert(solution('''1 4 3 1 2''') == '6')\nassert(solution('''1 4 3 1 2''') == '6')\nassert(solution('''1 4 3 1 2''') == '6')\nassert(solution('''1 4 3 1 2''') == '6')\nassert(solution('''1 4 3 1 2''') == '6')\nassert(solution('''1 4 3 1 2''') == '6')\nassert(solution('''1 4 3 1 2''') == '6')\nassert(solution('''1 4 3 1 2''') == '6')\nassert(solution('''1 4 3 1 2''') == '6')\nassert(solution('''1 4 3 1 2''') == '6')\nassert(solution('''1 4 3 1 2''') == '6')\nassert(solution('''1 4 3 1 2''') == '6')\nassert(solution('''1 4 3 1 2''') == '6')\nassert(solution('''1 4 3 1 2''') == '6')\nassert(solution('''1 4 3 1 2''') == '6')\nassert(solution('''1 4 3 1 2''') == '6')\nassert(solution('''1 4 3 1 2''') == '6')\nassert(solution('''1 4 3 1 2''') == '6')\nassert(solution('''1 4 3 1 2''') == '6')\nassert(solution('''1 4 3 1 2''') == '6')\nassert(solution('''1 4 3 1 2''') == '6')\nassert(solution('''1 4 3 1 2''') == '6')\nassert(solution('''1 4 3 1 2''') == '6')\nassert(solution('''1 4 3 1 2''') == '6')\nassert(solution('''1 4 3 1 2''') == '6')\nassert(solution('''1 4 3 1 2''') == '6')\nassert(solution('''1 4 3 1 2''') == '6')\nassert(solution('''1 4 3 1 2''') == '6')\nassert(solution('''1 4 3 1 2''') == '6')\nassert(solution('''1 4 3 1 2''') == '6')\nassert(solution('''1 4 3 1 2''') == '6')\nassert(solution('''1 4 3 1 2''') == '6')\nassert(solution('''1 4 3 1 2''') == '6')\nassert(solution('''1 4 3 1 2''') == '6')\nassert(solution('''1 4 3 1 2''') == '6')\nassert(solution('''1 4 3 1 2''') == '6')\nassert(solution('''1 4 3 1 2''') == '6')\nassert(solution('''1 4 3 1 2''') == '6')\nassert(solution('''1 4 3 1 2''') == '6')\nassert(solution('''1 4 3 1 2''') == '6')\nassert(solution('''1 4 3 1 2''') == '6')\nassert(solution('''1 4 3 1 2''') == '6')\nassert(solution('''1 4 3 1 2''') == '6')\nassert(solution('''1 4 3 1 2''') == '6')\nassert(solution('''1 4 3 1 2''') == '6')\nassert(solution('''1 4 3 1 2''') == '6')\nassert(solution('''1 4 3 1 2''') == '6')\nassert(solution('''1 4 3 1 2''') == '6')\nassert(solution('''1 4 3 1 2''') == '6')\nassert(solution('''1 4 3 1 2''') == '6')\nassert(solution('''1 4 3 1 2''') == '6')\nassert(solution('''1 4 3 1 2''') == '6')\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    s = s.upper()\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = s.lower()\n    s = list(s)\n    s = set(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = set(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = set(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = set(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = set(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = set(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = set(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = set(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = set(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = set(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = set(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = set(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = set(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = set(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = set(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = set(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = set(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = set(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = set(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = set(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = set(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = set(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = set(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = set(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = set(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = set(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = set(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = set(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = set(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = set(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = set(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = set(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = set(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = set(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = set(s)\n    s = list(s)\n    s = sorted(s)\n    s = ''.join(s)\n    s = list(s)\n    s = set(s"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    hamsters = stdin.readline().strip()\n    hamsters = hamsters.replace('x', 'X')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('x', 'X')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('x', 'X')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('x', 'X')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('x', 'X')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('x', 'X')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('x', 'X')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('x', 'X')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('x', 'X')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('x', 'X')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('x', 'X')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('x', 'X')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('x', 'X')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('x', 'X')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('x', 'X')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('x', 'X')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('x', 'X')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('x', 'X')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('x', 'X')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('x', 'X')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('x', 'X')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('x', 'X')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('x', 'X')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('x', 'X')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('x', 'X')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('x', 'X')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('x', 'X')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('x', 'X')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('x', 'X')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('x', 'X')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('x', 'X')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('x', 'X')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('x', 'X')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('x', 'X')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('x', 'X')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('x', 'X')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('x', 'X')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('x', 'X')\n    hamsters = hamsters.replace('X', 'x')\n    hamsters = hamsters.replace('X',"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    k = int(stdin.readline().strip())\n    if len(s) < k:\n        return 'impossible'\n    if len(set(s)) < k:\n        return 'impossible'\n    return str(len(s) - k)"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    segments = [tuple(map(int, line.split())) for line in stdin.readlines()]\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    "
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, l, r = [int(x) for x in stdin.split()]\n    return str(solution_aux(n, l, r))\n\ndef"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, c = [int(x) for x in stdin.split()]\n    prices = [int(x) for x in stdin.split()]\n    return str(max(0, sum(prices[i] - prices[i - 1] for i in range(1, n + 1)) - c))"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(float(stdin))\n\nassert solution(input()) == '1E2'\nassert solution(input()) == '1E-1'\nassert solution(input()) == '1E1'\nassert solution(input()) == '1E2'\nassert solution(input()) == '1E-1'\nassert solution(input()) == '1E1'\nassert solution(input()) == '1E2'\nassert solution(input()) == '1E-1'\nassert solution(input()) == '1E1'\nassert solution(input()) == '1E2'\nassert solution(input()) == '1E-1'\nassert solution(input()) == '1E1'\nassert solution(input()) == '1E2'\nassert solution(input()) == '1E-1'\nassert solution(input()) == '1E1'\nassert solution(input()) == '1E2'\nassert solution(input()) == '1E-1'\nassert solution(input()) == '1E1'\nassert solution(input()) == '1E2'\nassert solution(input()) == '1E-1'\nassert solution(input()) == '1E1'\nassert solution(input()) == '1E2'\nassert solution(input()) == '1E-1'\nassert solution(input()) == '1E1'\nassert solution(input()) == '1E2'\nassert solution(input()) == '1E-1'\nassert solution(input()) == '1E1'\nassert solution(input()) == '1E2'\nassert solution(input()) == '1E-1'\nassert solution(input()) == '1E1'\nassert solution(input()) == '1E2'\nassert solution(input()) == '1E-1'\nassert solution(input()) == '1E1'\nassert solution(input()) == '1E2'\nassert solution(input()) == '1E-1'\nassert solution(input()) == '1E1'\nassert solution(input()) == '1E2'\nassert solution(input()) == '1E-1'\nassert solution(input()) == '1E1'\nassert solution(input()) == '1E2'\nassert solution(input()) == '1E-1'\nassert solution(input()) == '1E1'\nassert solution(input()) == '1E2'\nassert solution(input()) == '1E-1'\nassert solution(input()) == '1E1'\nassert solution(input()) == '1E2'\nassert solution(input()) == '1E-1'\nassert solution(input()) == '1E1'\nassert solution(input()) == '1E2'\nassert solution(input()) == '1E-1'\nassert solution(input()) == '1E1'\nassert solution(input()) == '1E2'\nassert solution(input()) == '1E-1'\nassert solution(input()) == '1E1'\nassert solution(input()) == '1E2'\nassert solution(input()) == '1E-1'\nassert solution(input()) == '1E1'\nassert solution(input()) == '1E2'\nassert solution(input()) == '1E-1'\nassert solution(input()) == '1E1'\nassert solution(input()) == '1E2'\nassert solution(input()) == '1E-1'\nassert solution(input()) == '1E1'\nassert solution(input()) == '1E2'\nassert solution(input()) == '1E-1'\nassert solution(input()) == '1E1'\nassert solution(input()) == '1E2'\nassert solution(input()) == '1E-1'\nassert solution(input()) == '1E1'\nassert solution(input()) == '1E2'\nassert solution(input()) == '1E-1'\nassert solution(input()) == '1E1'\nassert solution(input()) == '1E2'\nassert solution(input()) == '1E-1'\nassert solution(input()) == '1E1'\nassert solution(input()) == '1E2'\nassert solution(input()) == '1E-1'\nassert solution(input()) == '1E1'\nassert solution(input()) == '1E2'\nassert solution(input()) == '1E-1'\nassert solution(input()) == '1E1'\nassert solution(input()) == '1E2'\nassert solution(input()) == '1E-1'\nassert solution(input()) == '1E1'\nassert solution(input()) == '1E2'\nassert solution(input()) == '1E-1'\nassert solution(input()) == '1E1'\nassert solution(input()) == '1E2'\nassert solution(input()) == '1E-1'\nassert solution(input()) == '1E1'\nassert solution(input()) == '1E2'\nassert solution(input()) == '1E-1'\nassert solution(input()) == '1E1'\nassert solution(input()) == '1E2'\nassert solution(input()) == '1E-1'\nassert solution(input()) == '1E1'\nassert solution(input()) == '1E2'\nassert solution(input()) == '1E-1'\nassert solution(input()) == '1E1'\nassert solution(input()) == '1E2'\nassert solution(input()) == '1E-1'\nassert solution(input()) == '1E1'\nassert solution(input()) == '1E2'\nassert solution(input()) == '1E-1'\nassert solution(input()) == '1E1'\nassert solution(input()) == '1E2'\nassert solution(input()) == '1E-1'\nassert solution(input()) == '1E1'\nassert solution(input()) == '1E2'\nassert solution(input()) == '1E-1'\nassert solution(input()) == '1E1'\nassert solution(input()) == '1E2'\nassert solution(input()) == '1E-1'\nassert solution(input()) == '1E1'\nassert solution(input()) == '1E2'\nassert solution(input()) == '1E-1'\nassert solution(input()) == '1E1'\nassert solution(input()) == '1E2'\nassert solution(input()) == '1E-1'\nassert solution(input()) == '1E1'\nassert solution(input()) == '1E2'\nassert solution(input()) == '1E-1'\nassert solution(input()) == '1E1'\nassert solution(input()) == '1E2'\nassert solution(input()) == '1E-1'\nassert solution(input()) == '1E1'\nassert solution(input()) == '1E2'\nassert solution(input()) == '1E-1'\nassert solution(input()) == '1E1'\nassert solution(input()) == '1E2'\nassert solution(input()) == '1E-1'\nassert solution(input()) == '1E1'\nassert solution(input()) == '1E2'\nassert solution(input()) == '1E-1'\nassert solution(input()) == '1E1'\nassert solution(input()) == '1E2'\nassert solution(input()) == '1E-1'\nassert solution(input()) == '1E1'\nassert solution(input()) == '1E2'\nassert solution(input()) == '1E-1'\nassert solution(input()) == '1E1'\nassert solution(input()) == '1E2'\nassert solution(input()) == '1E-1'\nassert solution(input()) == '1E1'\nassert solution("
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, a, b = [int(x) for x in stdin.split()]\n    if a + b > n:\n        return \"NO\"\n    if a == b:\n        return \"\".join([\"G\" if i % 2 == 0 else \"B\" for i in range(n)])\n    if a > b:\n        a, b = b, a\n    if a + b > n:\n        return \"NO\"\n    if a == 0:\n        return \"\".join([\"G\" if i % 2 == 0 else \"B\" for i in range(n)])\n    if a == n - 1:\n        return \"\".join([\"G\" if i % 2 == 0 else \"B\" for i in range(n)])\n    if a == n // 2:\n        return \"\".join([\"G\" if i % 2 == 0 else \"B\" for i in range(n)])\n    if a == n // 2 - 1:\n        return \"\".join([\"G\" if i % 2 == 0 else \"B\" for i in range(n)])\n    if a == n // 2 + 1:\n        return \"\".join([\"G\" if i % 2 == 0 else \"B\" for i in range(n)])\n    if a == n // 2 + 2:\n        return \"\".join([\"G\" if i % 2 == 0 else \"B\" for i in range(n)])\n    if a == n // 2 + 3:\n        return \"\".join([\"G\" if i % 2 == 0 else \"B\" for i in range(n)])\n    if a == n // 2 + 4:\n        return \"\".join([\"G\" if i % 2 == 0 else \"B\" for i in range(n)])\n    if a == n // 2 + 5:\n        return \"\".join([\"G\" if i % 2 == 0 else \"B\" for i in range(n)])\n    if a == n // 2 + 6:\n        return \"\".join([\"G\" if i % 2 == 0 else \"B\" for i in range(n)])\n    if a == n // 2 + 7:\n        return \"\".join([\"G\" if i % 2 == 0 else \"B\" for i in range(n)])\n    if a == n // 2 + 8:\n        return \"\".join([\"G\" if i % 2 == 0 else \"B\" for i in range(n)])\n    if a == n // 2 + 9:\n        return \"\".join([\"G\" if i % 2 == 0 else \"B\" for i in range(n)])\n    if a == n // 2 + 10:\n        return \"\".join([\"G\" if i % 2 == 0 else \"B\" for i in range(n)])\n    if a == n // 2 + 11:\n        return \"\".join([\"G\" if i % 2 == 0 else \"B\" for i in range(n)])\n    if a == n // 2 + 12:\n        return \"\".join([\"G\" if i % 2 == 0 else \"B\" for i in range(n)])\n    if a == n // 2 + 13:\n        return \"\".join([\"G\" if i % 2 == 0 else \"B\" for i in range(n)])\n    if a == n // 2 + 14:\n        return \"\".join([\"G\" if i % 2 == 0 else \"B\" for i in range(n)])\n    if a == n // 2 + 15:\n        return \"\".join([\"G\" if i % 2 == 0 else \"B\" for i in range(n)])\n    if a == n // 2 + 16:\n        return \"\".join([\"G\" if i % 2 == 0 else \"B\" for i in range(n)])\n    if a == n // 2 + 17:\n        return \"\".join([\"G\" if i % 2 == 0 else \"B\" for i in range(n)])\n    if a == n // 2 + 18:\n        return \"\".join([\"G\" if i % 2 == 0 else \"B\" for i in range(n)])\n    if a == n // 2 + 19:\n        return \"\".join([\"G\" if i % 2 == 0 else \"B\" for i in range(n)])\n    if a == n // 2 + 20:\n        return \"\".join([\"G\" if i % 2 == 0 else \"B\" for i in range(n)])\n    if a == n // 2 + 21:\n        return \"\".join([\"G\" if i % 2 == 0 else \"B\" for i in range(n)])\n    if a == n // 2 + 22:\n        return \"\".join([\"G\" if i % 2 == 0 else \"B\" for i in range(n)])\n    if a == n // 2 + 23:\n        return \"\".join([\"G\" if i % 2 == 0 else \"B\" for i in range(n)])\n    if a == n // 2 + 24:\n        return \"\".join([\"G\" if i % 2 == 0 else \"B\" for i in range(n)])\n    if a == n // 2 + 25:\n        return \"\".join([\"G\" if i % 2 == 0 else \"B\" for i in range(n)])\n    if a == n // 2 + 26:\n        return \"\".join([\"G\" if i % 2 == 0 else \"B\" for i in range(n)])\n    if a == n // 2 + 27:\n        return \"\".join([\"G\" if i % 2 == 0 else \"B\" for i in range(n)])\n    if a == n // 2 + 28:\n        return \"\".join([\"G\" if i % 2 == 0 else \"B\" for i in range(n)])\n    if a == n // 2 + 29:\n        return \"\".join([\"G\" if i % 2 == 0 else \"B\" for i in range(n)])\n    if a == n // 2 + 30:\n        return \"\".join([\"G\" if i % 2 == 0 else \"B\" for i in range(n)])\n    if a == n // 2 + 31:\n        return \"\".join([\"G\" if i % 2 == 0 else \"B\" for i in range(n)])\n    if a == n // 2 + 32:\n        return \"\".join([\"G\" if i % 2 == 0 else \"B\" for i in range(n)])\n    if a == n // 2 + 33:\n        return \"\".join([\"G\" if i % 2 == 0 else \"B\" for i in range(n)])\n    if a == n // 2 + 34:\n        return \"\".join([\"G\" if i % 2 == 0 else \"B\" for i in range(n)])\n    if a == n // 2 + 35:\n        return \"\".join([\"G\" if i % 2 == 0 else \"B\" for i in range(n)])\n    if a == n // 2 + 36:\n        return \"\".join([\"G\" if i % 2 == 0 else \"B\" for i in range(n)])\n    if a == n // 2 + 37:\n        "
    },
    {
        "number": 810,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, n = [int(x) for x in stdin.split()]\n    return str(sum(int(x) for x in str(n) if int(x) in (a, b)))"
    },
    {
        "number": 811,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    return str(a * b)"
    },
    {
        "number": 812,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    b = list(map(int, stdin.readline().split()))\n    for i in range(1, n):\n        if b[i] - b[i - 1] == b[0] - b[i - 1] * (i - 1):\n            return i\n    return -1"
    },
    {
        "number": 813,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = [int(x) for x in stdin.split()]\n    l1 = [int(x) for x in stdin.split()[1:a+1]]\n    l2 = [int(x) for x in stdin.split()[a+1:]]\n    l1.sort()\n    l2.sort()\n    l1 = [1] + l1 + [n]\n    l2 = [1] + l2 + [n]\n    l1 = [l1[i] - l1[i-1] for i in range(1, len(l1))]\n    l2 = [l2[i] - l2[i-1] for i in range(1, len(l2))]\n    l1 = [1] + l1 + [n]\n    l2 = [1] + l2 + [n]\n    l1 = [l1[i] - l1[i-1] for i in range(1, len(l1))]\n    l2 = [l2[i] - l2[i-1] for i in range(1, len(l2))]\n    l1 = [1] + l1 + [n]\n    l2 = [1] + l2 + [n]\n    l1 = [l1[i] - l1[i-1] for i in range(1, len(l1))]\n    l2 = [l2[i] - l2[i-1] for i in range(1, len(l2))]\n    l1 = [1] + l1 + [n]\n    l2 = [1] + l2 + [n]\n    l1 = [l1[i] - l1[i-1] for i in range(1, len(l1))]\n    l2 = [l2[i] - l2[i-1] for i in range(1, len(l2))]\n    l1 = [1] + l1 + [n]\n    l2 = [1] + l2 + [n]\n    l1 = [l1[i] - l1[i-1] for i in range(1, len(l1))]\n    l2 = [l2[i] - l2[i-1] for i in range(1, len(l2))]\n    l1 = [1] + l1 + [n]\n    l2 = [1] + l2 + [n]\n    l1 = [l1[i] - l1[i-1] for i in range(1, len(l1))]\n    l2 = [l2[i] - l2[i-1] for i in range(1, len(l2))]\n    l1 = [1] + l1 + [n]\n    l2 = [1] + l2 + [n]\n    l1 = [l1[i] - l1[i-1] for i in range(1, len(l1))]\n    l2 = [l2[i] - l2[i-1] for i in range(1, len(l2))]\n    l1 = [1] + l1 + [n]\n    l2 = [1] + l2 + [n]\n    l1 = [l1[i] - l1[i-1] for i in range(1, len(l1))]\n    l2 = [l2[i] - l2[i-1] for i in range(1, len(l2))]\n    l1 = [1] + l1 + [n]\n    l2 = [1] + l2 + [n]\n    l1 = [l1[i] - l1[i-1] for i in range(1, len(l1))]\n    l2 = [l2[i] - l2[i-1] for i in range(1, len(l2))]\n    l1 = [1] + l1 + [n]\n    l2 = [1] + l2 + [n]\n    l1 = [l1[i] - l1[i-1] for i in range(1, len(l1))]\n    l2 = [l2[i] - l2[i-1] for i in range(1, len(l2))]\n    l1 = [1] + l1 + [n]\n    l2 = [1] + l2 + [n]\n    l1 = [l1[i] - l1[i-1] for i in range(1, len(l1))]\n    l2 = [l2[i] - l2[i-1] for i in range(1, len(l2))]\n    l1 = [1] + l1 + [n]\n    l2 = [1] + l2 + [n]\n    l1 = [l1[i] - l1[i-1] for i in range(1, len(l1))]\n    l2 = [l2[i] - l2[i-1] for i in range(1, len(l2))]\n    l1 = [1] + l1 + [n]\n    l2 = [1] + l2 + [n]\n    l1 = [l1[i] - l1[i-1] for i in range(1, len(l1))]\n    l2 = [l2[i] - l2[i-1] for i in range(1, len(l2))]\n    l1 = [1] + l1 + [n]\n    l2 = [1] + l2 + [n]\n    l1 = [l1[i] - l1[i-1] for i in range(1, len(l1))]\n    l2 = [l2[i] - l2[i-1] for i in range(1, len(l2))]\n    l1 = [1] + l1 + [n]\n    l2 = [1] + l2 + [n]\n    l1 = [l1[i] - l1[i-1] for i in range(1, len(l1))]\n    l2 = [l2[i] - l2[i-1] for i in range(1, len(l2))]\n    l1 = [1] + l1 + [n]\n    l2 = [1] + l2 + [n]\n    l1 = [l1[i] - l1[i-1] for i in range(1, len(l1))]\n    l2 = [l2[i] - l2[i-1] for i in range(1, len(l2))]\n    l1 = [1] + l1 + [n]\n    l2 = [1] + l2 + [n]\n    l1 = [l1[i] - l1[i-1] for i in range(1, len("
    },
    {
        "number": 814,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    cubes = [int(x) for x in stdin.readline().split()]\n    cubes.reverse()\n    for i in range(n):\n        cubes[i] += i\n    cubes.reverse()\n    return''.join(str(x) for x in cubes)\n\nassert(solution('''4\n3 2 1 2''') == '1 2 2 3')\nassert(solution('''3\n2 3 8''') == '2 3 8')\nassert(solution('''2\n2 3 8''') == '2 3 8')\nassert(solution('''1\n1''') == '1')\nassert(solution('''1\n0''') == '0')\nassert(solution('''1\n-1''') == '-1')\nassert(solution('''1\n-2''') == '-2')\nassert(solution('''1\n-3''') == '-3')\nassert(solution('''1\n-4''') == '-4')\nassert(solution('''1\n-5''') == '-5')\nassert(solution('''1\n-6''') == '-6')\nassert(solution('''1\n-7''') == '-7')\nassert(solution('''1\n-8''') == '-8')\nassert(solution('''1\n-9''') == '-9')\nassert(solution('''1\n-10''') == '-10')\nassert(solution('''1\n-11''') == '-11')\nassert(solution('''1\n-12''') == '-12')\nassert(solution('''1\n-13''') == '-13')\nassert(solution('''1\n-14''') == '-14')\nassert(solution('''1\n-15''') == '-15')\nassert(solution('''1\n-16''') == '-16')\nassert(solution('''1\n-17''') == '-17')\nassert(solution('''1\n-18''') == '-18')\nassert(solution('''1\n-19''') == '-19')\nassert(solution('''1\n-20''') == '-20')\nassert(solution('''1\n-21''') == '-21')\nassert(solution('''1\n-22''') == '-22')\nassert(solution('''1\n-23''') == '-23')\nassert(solution('''1\n-24''') == '-24')\nassert(solution('''1\n-25''') == '-25')\nassert(solution('''1\n-26''') == '-26')\nassert(solution('''1\n-27''') == '-27')\nassert(solution('''1\n-28''') == '-28')\nassert(solution('''1\n-29''') == '-29')\nassert(solution('''1\n-30''') == '-30')\nassert(solution('''1\n-31''') == '-31')\nassert(solution('''1\n-32''') == '-32')\nassert(solution('''1\n-33''') == '-33')\nassert(solution('''1\n-34''') == '-34')\nassert(solution('''1\n-35''') == '-35')\nassert(solution('''1\n-36''') == '-36')\nassert(solution('''1\n-37''') == '-37')\nassert(solution('''1\n-38''') == '-38')\nassert(solution('''1\n-39''') == '-39')\nassert(solution('''1\n-40''') == '-40')\nassert(solution('''1\n-41''') == '-41')\nassert(solution('''1\n-42''') == '-42')\nassert(solution('''1\n-43''') == '-43')\nassert(solution('''1\n-44''') == '-44')\nassert(solution('''1\n-45''') == '-45')\nassert(solution('''1\n-46''') == '-46')\nassert(solution('''1\n-47''') == '-47')\nassert(solution('''1\n-48''') == '-48')\nassert(solution('''1\n-49''') == '-49')\nassert(solution('''1\n-50''') == '-50')\nassert(solution('''1\n-51''') == '-51')\nassert(solution('''1\n-52''') == '-52')\nassert(solution('''1\n-53''') == '-53')\nassert(solution('''1\n-54''') == '-54')\nassert(solution('''1\n-55''') == '-55')\nassert(solution('''1\n-56''') == '-56')\nassert(solution('''1\n-57''') == '-57')\nassert(solution('''1\n-58''') == '-58')\nassert(solution('''1\n-59''') == '-59')\nassert(solution('''1\n-60''') == '-60')\nassert(solution('''1\n-61''') == '-61')\nassert(solution('''1\n-62''') == '-62')\nassert(solution('''1\n-63''') == '-63')\nassert(solution('''1\n-64''') == '-64')\nassert(solution('''1\n-65''') == '-65')\nassert(solution('''1\n-66''') == '-66')\nassert(solution('''1\n-67''') == '-67')\nassert(solution('''1\n-68''') == '-68')\nassert(solution('''1\n-69''') == '-69')\nassert(solution('''1\n-70''') == '-70')\nassert(solution('''1\n-71''') == '-71')\nassert(solution('''1\n-72''') == '-72')\nassert(solution('''1\n-73''') == '-73')\nassert(solution('''1\n-74''') == '-74')\nassert(solution('''1\n-75''') == '-75')\nassert(solution('''1\n-76''') == '-76')\nassert(solution('''1\n"
    },
    {
        "number": 815,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    v1, v2, v3, m = [int(x) for x in stdin.split()]\n    if v1 > v2 and v2 > v3:\n        return str(v1)\n    elif v1 > v3 and v3 > v2:\n        return str(v1)\n    elif v2 > v1 and v1 > v3:\n        return str(v2)\n    elif v2 > v3 and v3 > v1:\n        return str(v2)\n    elif v3 > v1 and v1 > v2:\n        return str(v3)\n    elif v3 > v2 and v2 > v1:\n        return str(v3)\n    else:\n        return \"-1\""
    },
    {
        "number": 816,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] ^ a[j] == x:\n                count += 1\n    return str(count)"
    },
    {
        "number": 817,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    if n == 0:\n        return \"\"\n    if n == 1:\n        return s\n    if n == 2:\n        return s[0] + s[1]\n    if n == 3:\n        return s[0] + s[1] + s[2]\n    if n == 4:\n        return s[0] + s[1] + s[2] + s[3]\n    if n == 5:\n        return s[0] + s[1] + s[2] + s[3] + s[4]\n    if n == 6:\n        return s[0] + s[1] + s[2] + s[3] + s[4] + s[5]\n    if n == 7:\n        return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6]\n    if n == 8:\n        return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7]\n    if n == 9:\n        return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[8]\n    if n == 10:\n        return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[8] + s[9]\n    if n == 11:\n        return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[8] + s[9] + s[10]\n    if n == 12:\n        return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[8] + s[9] + s[10] + s[11]\n    if n == 13:\n        return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[8] + s[9] + s[10] + s[11] + s[12]\n    if n == 14:\n        return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[8] + s[9] + s[10] + s[11] + s[12] + s[13]\n    if n == 15:\n        return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[8] + s[9] + s[10] + s[11] + s[12] + s[13] + s[14]\n    if n == 16:\n        return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[8] + s[9] + s[10] + s[11] + s[12] + s[13] + s[14] + s[15]\n    if n == 17:\n        return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[8] + s[9] + s[10] + s[11] + s[12] + s[13] + s[14] + s[15] + s[16]\n    if n == 18:\n        return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[8] + s[9] + s[10] + s[11] + s[12] + s[13] + s[14] + s[15] + s[16] + s[17]\n    if n == 19:\n        return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[8] + s[9] + s[10] + s[11] + s[12] + s[13] + s[14] + s[15] + s[16] + s[17] + s[18]\n    if n == 20:\n        return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[8] + s[9] + s[10] + s[11] + s[12] + s[13] + s[14] + s[15] + s[16] + s[17] + s[18] + s[19]\n    if n == 21:\n        return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[8] + s[9] + s[10] + s[11] + s[12] + s[13] + s"
    },
    {
        "number": 818,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 2:\n        return '-1'\n    if n == 2:\n        return '2'\n    if n == 3:\n        return '4'\n    if n == 4:\n        return '7'\n    if n == 5:\n        return '8'\n    if n == 6:\n        return '9'\n    if n == 7:\n        return '10'\n    if n == 8:\n        return '11'\n    if n == 9:\n        return '12'\n    if n == 10:\n        return '13'\n    if n == 11:\n        return '14'\n    if n == 12:\n        return '15'\n    if n == 13:\n        return '16'\n    if n == 14:\n        return '17'\n    if n == 15:\n        return '18'\n    if n == 16:\n        return '19'\n    if n == 17:\n        return '20'\n    if n == 18:\n        return '21'\n    if n == 19:\n        return '22'\n    if n == 20:\n        return '23'\n    if n == 21:\n        return '24'\n    if n == 22:\n        return '25'\n    if n == 23:\n        return '26'\n    if n == 24:\n        return '27'\n    if n == 25:\n        return '28'\n    if n == 26:\n        return '29'\n    if n == 27:\n        return '30'\n    if n == 28:\n        return '31'\n    if n == 29:\n        return '32'\n    if n == 30:\n        return '33'\n    if n == 31:\n        return '34'\n    if n == 32:\n        return '35'\n    if n == 33:\n        return '36'\n    if n == 34:\n        return '37'\n    if n == 35:\n        return '38'\n    if n == 36:\n        return '39'\n    if n == 37:\n        return '40'\n    if n == 38:\n        return '41'\n    if n == 39:\n        return '42'\n    if n == 40:\n        return '43'\n    if n == 41:\n        return '44'\n    if n == 42:\n        return '45'\n    if n == 43:\n        return '46'\n    if n == 44:\n        return '47'\n    if n == 45:\n        return '48'\n    if n == 46:\n        return '49'\n    if n == 47:\n        return '50'\n    if n == 48:\n        return '51'\n    if n == 49:\n        return '52'\n    if n == 50:\n        return '53'\n    if n == 51:\n        return '54'\n    if n == 52:\n        return '55'\n    if n == 53:\n        return '56'\n    if n == 54:\n        return '57'\n    if n == 55:\n        return '58'\n    if n == 56:\n        return '59'\n    if n == 57:\n        return '60'\n    if n == 58:\n        return '61'\n    if n == 59:\n        return '62'\n    if n == 60:\n        return '63'\n    if n == 61:\n        return '64'\n    if n == 62:\n        return '65'\n    if n == 63:\n        return '66'\n    if n == 64:\n        return '67'\n    if n == 65:\n        return '68'\n    if n == 66:\n        return '69'\n    if n == 67:\n        return '70'\n    if n == 68:\n        return '71'\n    if n == 69:\n        return '72'\n    if n == 70:\n        return '73'\n    if n == 71:\n        return '74'\n    if n == 72:\n        return '75'\n    if n == 73:\n        return '76'\n    if n == 74:\n        return '77'\n    if n == 75:\n        return '78'\n    if n == 76:\n        return '79'\n    if n == 77:\n        return '80'\n    if n == 78:\n        return '81'\n    if n == 79:\n        return '82'\n    if n == 80:\n        return '83'\n    if n == 81:\n        return '84'\n    if n == 82:\n        return '85'\n    if n == 83:\n        return '86'\n    if n == 84:\n        return '87'\n    if n == 85:\n        return '88'\n    if n == 86:\n        return '89'\n    if n == 87:\n        return '90'\n    if n == 88:\n        return '91'\n    if n == 89:\n        return '92'\n    if n == 90:\n        return '93'\n    if n == 91:\n        return '94'\n    if n == 92:\n        return '95'\n    if n == 93:\n        return '96'\n    if n == 94:\n        return '97'\n    if n == 95:\n        return '98'\n    if n == 96:\n        return '99'\n    if n == 97:\n        return '100'\n    if n == 98:\n        return '101'\n    if n == 99:\n        return '102'\n    if n == 100:\n        return '103'\n    if n == 101:\n        return '104'\n    if n == 102:\n        return '105'\n    if n == 103:\n        return '106'\n    if n == 104:\n        return '107'\n    if n == 105:\n        return '108'\n    if n == 106:\n        return '109'\n    if n == 107:\n        return '110'\n    if n == 108:\n        return '111'\n    if n == 109:\n        return '112'\n    if n == 110:\n        return '113'\n    if n == 111:\n        return '114'\n    if n == 112:\n        return '115'\n    if n == 113:\n        return '116'\n    if n == 114:\n        return '117'\n    if n == 115:\n        return '118'\n    if n == 116:\n        return '119'\n    if n == 117:\n        return '120'\n    if n == 118:\n        return '121'\n    if n == 119:\n        return '122'\n    if n == 120:\n        return '123'\n    if n == 121:\n        return '124'\n    if n == 122:\n        return '125'\n    if n == 123:\n        return '126'\n    if n == 124:\n        return '127'\n    if n == 125:\n        return '128'\n    if n == 126:\n        return '129'\n    if n == 127:\n        return '130'\n    if n == 128:\n        return '131'\n    if n == 129:\n        return '132'\n    if n == 130:\n        return '133'\n    if n == 131:\n        return '134'\n    if n == 132:\n        return '135'\n    if n == 133:\n        return '136'\n    if n == 134:\n        return '137'\n    if n == 135:\n        return '138'\n    if n == 136:\n        return '139'\n    if n == 137:\n        return '140'\n    if n == 138:\n        return '141'\n    if n == 139:\n        return '142'\n    if n == 140"
    },
    {
        "number": 819,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    if k == 1:\n        return str(max(a))\n    if k == n:\n        return str(max(a))\n    a.sort()\n    return str(max(a[k - 1], a[n - 1]))"
    },
    {
        "number": 820,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    m = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    a.sort()\n    a.reverse()\n    print(a)\n    if m % n == 0:\n        return n\n    else:\n        return m % n"
    },
    {
        "number": 821,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, v_1, v_2, t_1, t_2 = [int(x) for x in stdin.split()]\n    if t_1 < t_2:\n        return \"First\"\n    elif t_1 > t_2:\n        return \"Second\"\n    else:\n        return \"Friendship\""
    },
    {
        "number": 822,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, z = map(int, stdin.split())\n    return str(min(n, m, z))"
    },
    {
        "number": 823,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = [int(x) for x in stdin.split()]\n    return str(solution_recursive(x, y))\n\ndef"
    },
    {
        "number": 824,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_recursive(stdin))\n\ndef"
    },
    {
        "number": 825,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    while n > 1:\n        p = get_prime(n)\n        e = get_e(n)\n        if n % p == 0 and e > 0:\n            n //= p\n            count += 1\n        else:\n            n -= 1\n    return str(count)\n\ndef"
    },
    {
        "number": 826,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    if n == 36:\n        return 36\n    if n == 37:\n        return 37\n    if n == 38:\n        return 38\n    if n == 39:\n        return 39\n    if n == 40:\n        return 40\n    if n == 41:\n        return 41\n    if n == 42:\n        return 42\n    if n == 43:\n        return 43\n    if n == 44:\n        return 44\n    if n == 45:\n        return 45\n    if n == 46:\n        return 46\n    if n == 47:\n        return 47\n    if n == 48:\n        return 48\n    if n == 49:\n        return 49\n    if n == 50:\n        return 50\n    if n == 51:\n        return 51\n    if n == 52:\n        return 52\n    if n == 53:\n        return 53\n    if n == 54:\n        return 54\n    if n == 55:\n        return 55\n    if n == 56:\n        return 56\n    if n == 57:\n        return 57\n    if n == 58:\n        return 58\n    if n == 59:\n        return 59\n    if n == 60:\n        return 60\n    if n == 61:\n        return 61\n    if n == 62:\n        return 62\n    if n == 63:\n        return 63\n    if n == 64:\n        return 64\n    if n == 65:\n        return 65\n    if n == 66:\n        return 66\n    if n == 67:\n        return 67\n    if n == 68:\n        return 68\n    if n == 69:\n        return 69\n    if n == 70:\n        return 70\n    if n == 71:\n        return 71\n    if n == 72:\n        return 72\n    if n == 73:\n        return 73\n    if n == 74:\n        return 74\n    if n == 75:\n        return 75\n    if n == 76:\n        return 76\n    if n == 77:\n        return 77\n    if n == 78:\n        return 78\n    if n == 79:\n        return 79\n    if n == 80:\n        return 80\n    if n == 81:\n        return 81\n    if n == 82:\n        return 82\n    if n == 83:\n        return 83\n    if n == 84:\n        return 84\n    if n == 85:\n        return 85\n    if n == 86:\n        return 86\n    if n == 87:\n        return 87\n    if n == 88:\n        return 88\n    if n == 89:\n        return 89\n    if n == 90:\n        return 90\n    if n == 91:\n        return 91\n    if n == 92:\n        return 92\n    if n == 93:\n        return 93\n    if n == 94:\n        return 94\n    if n == 95:\n        return 95\n    if n == 96:\n        return 96\n    if n == 97:\n        return 97\n    if n == 98:\n        return 98\n    if n == 99:\n        return 99\n    if n == 100:\n        return 100\n    if n == 101:\n        return 101\n    if n == 102:\n        return 102\n    if n == 103:\n        return 103\n    if n == 104:\n        return 104\n    if n == 105:\n        return 105\n    if n == 106:\n        return 106\n    if n == 107:\n        return 107\n    if n == 108:\n        return 108\n    if n == 109:\n        return 109\n    if n == 110:\n        return 110\n    if n == 111:\n        return 111\n    if n == 112:\n        return 112\n    if n == 113:\n        return 113\n    if n == 114:\n        return 114\n    if n == 115:\n        return 115\n    if n == 116:\n        return 116\n    if n == 117:\n        return 117\n    if n == 118:\n        return 118\n    if n == 119:\n        return 119\n    if n == 120:\n        return 120\n    if n == 121:\n        return 121\n    if n == 122:\n        return 122\n    if n == 123:\n        return 123\n    if n == 124:\n        return 124\n    if n == 125:\n        return 125\n    if n == 126:\n        return 126\n    if n == 127:\n        return 127\n    if n == 128:\n        return 128\n    if n == 129:\n        return 129\n    if n == 130:\n        return 130\n    if n == 131:\n        return 131\n    if n == 132:\n        return 132\n    if n == 133:\n        return 133\n    if n == 134:\n        return 134\n    if n == 135:\n        return 135\n    if n == 136:\n        return 136\n    if n == 137:\n        return 137\n    if n == 138:\n        return 138\n    if n == 139:\n        return 139\n    if n == 140:\n        return 140\n    if n == 141:\n        return 141\n    if n == 142:\n        return 142\n    if n == 143:\n        return 143\n    if n == 144:\n        return 144\n    if n == 145:\n        return 145\n    if n == 146:\n        return 146\n    if n == 147:\n        return 147\n    if n == 148:\n        return 148\n    if n == 149:\n        return 149\n    if n == 150:\n        return 150\n    if n == 151:\n        return 151\n    if n == 152:\n        return 152\n    if n == 153:\n        return 153\n    "
    },
    {
        "number": 827,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    T = stdin\n    return str(N * (N - 1) * (N - 2) // 6)"
    },
    {
        "number": 828,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0"
    },
    {
        "number": 829,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[0]\n    for i in range(1, n):\n        if s[i]!= '0':\n            s += stdin[i]\n    k = 1\n    while True:\n        if s[:k] == s[k:2*k] == s[2*k:3*k] == s[3*k:4*k]:\n            return k\n        k += 1"
    },
    {
        "number": 830,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    m = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] < a[j]:\n                m += 1\n    return '{} {}'.format(m, k - m)"
    },
    {
        "number": 831,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = stdin.strip()\n    n = int(stdin.readline().strip())\n    strings = [stdin.readline().strip().split() for _ in range(n)]\n    strings = sorted(strings, key=lambda x: int(x[1]))\n    cost = 0\n    for s, a in strings:\n        cost += int(s) * a\n    return cost"
    },
    {
        "number": 832,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 2:\n        return \"0\"\n    if n == 2:\n        return \"1\"\n    if n == 3:\n        return \"2\"\n    if n == 4:\n        return \"3\"\n    if n == 5:\n        return \"4\"\n    if n == 6:\n        return \"5\"\n    if n == 7:\n        return \"6\"\n    if n == 8:\n        return \"7\"\n    if n == 9:\n        return \"8\"\n    if n == 10:\n        return \"9\"\n    if n == 11:\n        return \"10\"\n    if n == 12:\n        return \"11\"\n    if n == 13:\n        return \"12\"\n    if n == 14:\n        return \"13\"\n    if n == 15:\n        return \"14\"\n    if n == 16:\n        return \"15\"\n    if n == 17:\n        return \"16\"\n    if n == 18:\n        return \"17\"\n    if n == 19:\n        return \"18\"\n    if n == 20:\n        return \"19\"\n    if n == 21:\n        return \"20\"\n    if n == 22:\n        return \"21\"\n    if n == 23:\n        return \"22\"\n    if n == 24:\n        return \"23\"\n    if n == 25:\n        return \"24\"\n    if n == 26:\n        return \"25\"\n    if n == 27:\n        return \"26\"\n    if n == 28:\n        return \"27\"\n    if n == 29:\n        return \"28\"\n    if n == 30:\n        return \"29\"\n    if n == 31:\n        return \"30\"\n    if n == 32:\n        return \"31\"\n    if n == 33:\n        return \"32\"\n    if n == 34:\n        return \"33\"\n    if n == 35:\n        return \"34\"\n    if n == 36:\n        return \"35\"\n    if n == 37:\n        return \"36\"\n    if n == 38:\n        return \"37\"\n    if n == 39:\n        return \"38\"\n    if n == 40:\n        return \"39\"\n    if n == 41:\n        return \"40\"\n    if n == 42:\n        return \"41\"\n    if n == 43:\n        return \"42\"\n    if n == 44:\n        return \"43\"\n    if n == 45:\n        return \"44\"\n    if n == 46:\n        return \"45\"\n    if n == 47:\n        return \"46\"\n    if n == 48:\n        return \"47\"\n    if n == 49:\n        return \"48\"\n    if n == 50:\n        return \"49\"\n    if n == 51:\n        return \"50\"\n    if n == 52:\n        return \"51\"\n    if n == 53:\n        return \"52\"\n    if n == 54:\n        return \"53\"\n    if n == 55:\n        return \"54\"\n    if n == 56:\n        return \"55\"\n    if n == 57:\n        return \"56\"\n    if n == 58:\n        return \"57\"\n    if n == 59:\n        return \"58\"\n    if n == 60:\n        return \"59\"\n    if n == 61:\n        return \"60\"\n    if n == 62:\n        return \"61\"\n    if n == 63:\n        return \"62\"\n    if n == 64:\n        return \"63\"\n    if n == 65:\n        return \"64\"\n    if n == 66:\n        return \"65\"\n    if n == 67:\n        return \"66\"\n    if n == 68:\n        return \"67\"\n    if n == 69:\n        return \"68\"\n    if n == 70:\n        return \"69\"\n    if n == 71:\n        return \"70\"\n    if n == 72:\n        return \"71\"\n    if n == 73:\n        return \"72\"\n    if n == 74:\n        return \"73\"\n    if n == 75:\n        return \"74\"\n    if n == 76:\n        return \"75\"\n    if n == 77:\n        return \"76\"\n    if n == 78:\n        return \"77\"\n    if n == 79:\n        return \"78\"\n    if n == 80:\n        return \"79\"\n    if n == 81:\n        return \"80\"\n    if n == 82:\n        return \"81\"\n    if n == 83:\n        return \"82\"\n    if n == 84:\n        return \"83\"\n    if n == 85:\n        return \"84\"\n    if n == 86:\n        return \"85\"\n    if n == 87:\n        return \"86\"\n    if n == 88:\n        return \"87\"\n    if n == 89:\n        return \"88\"\n    if n == 90:\n        return \"89\"\n    if n == 91:\n        return \"90\"\n    if n == 92:\n        return \"91\"\n    if n == 93:\n        return \"92\"\n    if n == 94:\n        return \"93\"\n    if n == 95:\n        return \"94\"\n    if n == 96:\n        return \"95\"\n    if n == 97:\n        return \"96\"\n    if n == 98:\n        return \"97\"\n    if n == 99:\n        return \"98\"\n    if n == 100:\n        return \"99\"\n    if n == 101:\n        return \"100\"\n    if n == 102:\n        return \"101\"\n    if n == 103:\n        return \"102\"\n    if n == 104:\n        return \"103\"\n    if n == 105:\n        return \"104\"\n    if n == 106:\n        return \"105\"\n    if n == 107:\n        return \"106\"\n    if n == 108:\n        return \"107\"\n    if n == 109:\n        return \"108\"\n    if n == 110:\n        return \"109\"\n    if n == 111:\n        return \"110\"\n    if n == 112:\n        return \"111\"\n    if n == 113:\n        return \"112\"\n    if n == 114:\n        return \"113\"\n    if n == 115:\n        return \"114\"\n    if n == 116:\n        return \"115\"\n    "
    },
    {
        "number": 833,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, v = [int(x) for x in stdin.split()]\n    trees = [int(x) for x in stdin.split()]\n    trees.sort()\n    trees.reverse()\n    result = 0\n    for i in range(n):\n        if trees[i] + i > v:\n            break\n        result += trees[i] + i\n    return str(result)"
    },
    {
        "number": 834,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    f = [int(x) for x in stdin.readline().split()]\n    k = 1\n    while True:\n        if f[0] == f[k]:\n            k += 1\n        else:\n            break\n    return str(k)"
    },
    {
        "number": 835,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    bread, sausage, cheese = [int(x) for x in stdin.split()]\n    price = [int(x) for x in stdin.split()]\n    r = int(stdin.split()[-1])\n    if bread * sausage * cheese < r:\n        return 0\n    if bread * sausage * cheese == r:\n        return 1\n    if bread * sausage * cheese > r:\n        return 2\n    if bread * sausage * cheese == r:\n        return 3\n    if bread * sausage * cheese < r:\n        return 4\n    if bread * sausage * cheese < r:\n        return 5\n    if bread * sausage * cheese < r:\n        return 6\n    if bread * sausage * cheese < r:\n        return 7\n    if bread * sausage * cheese < r:\n        return 8\n    if bread * sausage * cheese < r:\n        return 9\n    if bread * sausage * cheese < r:\n        return 10\n    if bread * sausage * cheese < r:\n        return 11\n    if bread * sausage * cheese < r:\n        return 12\n    if bread * sausage * cheese < r:\n        return 13\n    if bread * sausage * cheese < r:\n        return 14\n    if bread * sausage * cheese < r:\n        return 15\n    if bread * sausage * cheese < r:\n        return 16\n    if bread * sausage * cheese < r:\n        return 17\n    if bread * sausage * cheese < r:\n        return 18\n    if bread * sausage * cheese < r:\n        return 19\n    if bread * sausage * cheese < r:\n        return 20\n    if bread * sausage * cheese < r:\n        return 21\n    if bread * sausage * cheese < r:\n        return 22\n    if bread * sausage * cheese < r:\n        return 23\n    if bread * sausage * cheese < r:\n        return 24\n    if bread * sausage * cheese < r:\n        return 25\n    if bread * sausage * cheese < r:\n        return 26\n    if bread * sausage * cheese < r:\n        return 27\n    if bread * sausage * cheese < r:\n        return 28\n    if bread * sausage * cheese < r:\n        return 29\n    if bread * sausage * cheese < r:\n        return 30\n    if bread * sausage * cheese < r:\n        return 31\n    if bread * sausage * cheese < r:\n        return 32\n    if bread * sausage * cheese < r:\n        return 33\n    if bread * sausage * cheese < r:\n        return 34\n    if bread * sausage * cheese < r:\n        return 35\n    if bread * sausage * cheese < r:\n        return 36\n    if bread * sausage * cheese < r:\n        return 37\n    if bread * sausage * cheese < r:\n        return 38\n    if bread * sausage * cheese < r:\n        return 39\n    if bread * sausage * cheese < r:\n        return 40\n    if bread * sausage * cheese < r:\n        return 41\n    if bread * sausage * cheese < r:\n        return 42\n    if bread * sausage * cheese < r:\n        return 43\n    if bread * sausage * cheese < r:\n        return 44\n    if bread * sausage * cheese < r:\n        return 45\n    if bread * sausage * cheese < r:\n        return 46\n    if bread * sausage * cheese < r:\n        return 47\n    if bread * sausage * cheese < r:\n        return 48\n    if bread * sausage * cheese < r:\n        return 49\n    if bread * sausage * cheese < r:\n        return 50\n    if bread * sausage * cheese < r:\n        return 51\n    if bread * sausage * cheese < r:\n        return 52\n    if bread * sausage * cheese < r:\n        return 53\n    if bread * sausage * cheese < r:\n        return 54\n    if bread * sausage * cheese < r:\n        return 55\n    if bread * sausage * cheese < r:\n        return 56\n    if bread * sausage * cheese < r:\n        return 57\n    if bread * sausage * cheese < r:\n        return 58\n    if bread * sausage * cheese < r:\n        return 59\n    if bread * sausage * cheese < r:\n        return 60\n    if bread * sausage * cheese < r:\n        return 61\n    if bread * sausage * cheese < r:\n        return 62\n    if bread * sausage * cheese < r:\n        return 63\n    if bread * sausage * cheese < r:\n        return 64\n    if bread * sausage * cheese < r:\n        return 65\n    if bread * sausage * cheese < r:\n        return 66\n    if bread * sausage * cheese < r:\n        return 67\n    if bread * sausage * cheese < r:\n        return 68\n    if bread * sausage * cheese < r:\n        return 69\n    if bread * sausage * cheese < r:\n        return 70\n    if bread * sausage * cheese < r:\n        return 71\n    if bread * sausage * cheese < r:\n        return 72\n    if bread * sausage * cheese < r:\n        return 73\n    if bread * sausage * cheese < r:\n        return 74\n    if bread * sausage * cheese < r:\n        return 75\n    if bread * sausage * cheese < r:\n        return 76\n    if bread * sausage * cheese < r:\n        return 77\n    if bread * sausage * cheese < r:\n        return 78\n    if bread * sausage * cheese < r:\n        return 79\n    if bread * sausage * cheese < r:\n        return 80\n    if bread * sausage * cheese < r:\n        return 81\n    if bread * sausage * cheese < r:\n        return 82\n    if bread * sausage * cheese < r:\n        return 83\n    if bread * sausage * cheese < r:\n        return 84\n    if bread * sausage * cheese < r:\n        return 85\n    if bread * sausage * cheese < r:\n        return 86\n    if bread * sausage * cheese < r:\n        return 87\n    "
    },
    {
        "number": 836,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = [int(x) for x in stdin.split()]\n    s = stdin[n:]\n    houses = [x for x in s if x == \"H\"]\n    shops = [x for x in s if x == \"S\"]\n    if len(houses) == 0:\n        return \"-1\"\n    if len(shops) == 0:\n        return str(len(houses))\n    return str(len(houses) - len(shops))"
    },
    {
        "number": 837,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = [int(x) for x in stdin.split()]\n    return str(n * (x + y) + (n - 1) * x)"
    },
    {
        "number": 838,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    table = [list(map(int, stdin.split())) for _ in range(n)]\n    return str(solution_recursive(table, n, m))\n\ndef"
    },
    {
        "number": 839,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 840,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    ingredients = [int(x) for x in stdin.split()]\n    cookies = [int(x) for x in stdin.split()]\n    return str(max(0, sum(cookies) - sum(ingredients) + k))"
    },
    {
        "number": 841,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = [0] * n\n    for i in range(n):\n        s[i] = int(stdin.readline())\n    s.sort()\n    s = [str(x) for x in s]\n    s = ''.join(s)\n    return s"
    },
    {
        "number": 842,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(n * (n + 1) // 2)\n\nprint(solution(input()))\n"
    },
    {
        "number": 843,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    d = [int(x) for x in stdin.readline().strip().split()]\n    if s.count('<') == n:\n        return 'INFINITE'\n    return 'FINITE'"
    },
    {
        "number": 844,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[0]\n    for i in range(1, n):\n        s += stdin[i]\n    return s"
    },
    {
        "number": 845,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    direction = stdin[0]\n    message = stdin[1:]\n    if direction == 'L':\n        return message[::-1]\n    else:\n        return message\n\nassert(solution(input()) == 'allyouneedislove')\n\nInput\nL\npimrrfod;pbr\n\nOutput\ndef"
    },
    {
        "number": 846,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    b = [int(x) for x in stdin.split()]\n    return''.join(str(b[i] - i) for i in range(1, n + 1))\n\nassert(solution('''5 4\n4 3 1 2''') == '1 1 3 4 4')\nassert(solution('''5 5\n5 4 3 2 1''') == '1 2 3 4 5')\nassert(solution('''5 5\n5 4 3 2 1''') == '1 2 3 4 5')\nassert(solution('''5 5\n5 4 3 2 1''') == '1 2 3 4 5')\nassert(solution('''5 5\n5 4 3 2 1''') == '1 2 3 4 5')\nassert(solution('''5 5\n5 4 3 2 1''') == '1 2 3 4 5')\nassert(solution('''5 5\n5 4 3 2 1''') == '1 2 3 4 5')\nassert(solution('''5 5\n5 4 3 2 1''') == '1 2 3 4 5')\nassert(solution('''5 5\n5 4 3 2 1''') == '1 2 3 4 5')\nassert(solution('''5 5\n5 4 3 2 1''') == '1 2 3 4 5')\nassert(solution('''5 5\n5 4 3 2 1''') == '1 2 3 4 5')\nassert(solution('''5 5\n5 4 3 2 1''') == '1 2 3 4 5')\nassert(solution('''5 5\n5 4 3 2 1''') == '1 2 3 4 5')\nassert(solution('''5 5\n5 4 3 2 1''') == '1 2 3 4 5')\nassert(solution('''5 5\n5 4 3 2 1''') == '1 2 3 4 5')\nassert(solution('''5 5\n5 4 3 2 1''') == '1 2 3 4 5')\nassert(solution('''5 5\n5 4 3 2 1''') == '1 2 3 4 5')\nassert(solution('''5 5\n5 4 3 2 1''') == '1 2 3 4 5')\nassert(solution('''5 5\n5 4 3 2 1''') == '1 2 3 4 5')\nassert(solution('''5 5\n5 4 3 2 1''') == '1 2 3 4 5')\nassert(solution('''5 5\n5 4 3 2 1''') == '1 2 3 4 5')\nassert(solution('''5 5\n5 4 3 2 1''') == '1 2 3 4 5')\nassert(solution('''5 5\n5 4 3 2 1''') == '1 2 3 4 5')\nassert(solution('''5 5\n5 4 3 2 1''') == '1 2 3 4 5')\nassert(solution('''5 5\n5 4 3 2 1''') == '1 2 3 4 5')\nassert(solution('''5 5\n5 4 3 2 1''') == '1 2 3 4 5')\nassert(solution('''5 5\n5 4 3 2 1''') == '1 2 3 4 5')\nassert(solution('''5 5\n5 4 3 2 1''') == '1 2 3 4 5')\nassert(solution('''5 5\n5 4 3 2 1''') == '1 2 3 4 5')\nassert(solution('''5 5\n5 4 3 2 1''') == '1 2 3 4 5')\nassert(solution('''5 5\n5 4 3 2 1''') == '1 2 3 4 5')\nassert(solution('''5 5\n5 4 3 2 1''') == '1 2 3 4 5')\nassert(solution('''5 5\n5 4 3 2 1''') == '1 2 3 4 5')\nassert(solution('''5 5\n5 4 3 2 1''') == '1 2 3 4 5')\nassert(solution('''5 5\n5 4 3 2 1''') == '1 2 3 4 5')\nassert(solution('''5 5\n5 4 3 2 1''') == '1 2 3 4 5')\nassert(solution('''5 5\n5 4 3 2 1''') == '1 2 3 4 5')\nassert(solution('''5 5\n5 4 3 2 1''') == '1 2 3 4 5')\nassert(solution('''5 5\n5 4 3 2 1''') == '1 2 3 4 5')\nassert(solution('''5 5\n5 4 3 2 1''') == '1 2 3 4 5')\nassert(solution('''5 5\n5 4 3 2 1''') == '1 2 3 4 5')\nassert(solution('''5 5\n5 4 3 2 1''') == '1 2 3 4 5')\nassert(solution('''5 5\n5 4 3 2 1''') == '1 2 3 4 5')\nassert(solution('''5 5\n5 4 3 2 1''') == '1 2 3 4 5')\nassert(solution('''5 5\n5 4 3 2 1''') == '1 2 3 4 5')\nassert(solution('''5 5\n5 4 3 2 1''') == '1 2 3 4 5')\nassert(solution('''5 5\n5 4 3 2 1''') == '1 2 3 4 5')\nassert(solution('''5 5\n5 4 3 2 1''') == '1 2 3 4 5')\nassert(solution('''5 5\n5 4 3 2 1''') == '1 2 3 4 5')\nassert(solution('''5 5\n5 4 3 2 1''') == '1 2 3 4 5')\nassert(solution('''5 5\n5 4 3 2 1''') == '1 2 3 4 5')\nassert(solution('''5 5\n5 4 3 2 1''') == '1 2 3 4 5')\nassert(solution('''5 5\n5 4 3 2 1''') == '1 2 3 4 5')\nassert(solution('''5 5\n5 4 3 2 1''') == '1 2 3 4 5')\nassert(solution('''5 5\n5 4 3 2 1''') == '1 2 3 4 5')\nassert(solution('''5 5\n5 4 3 2 1''') == '1 2 3 4 5')\nassert(solution('''5 5\n5 4 3 2 1''') == '1 2 3 4 5')"
    },
    {
        "number": 847,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = [int(x) for x in stdin.split()]\n    numbers = [int(x) for x in stdin.split()]\n    numbers.sort()\n    numbers.reverse()\n    for i in range(n):\n        if numbers[i] < 0:\n            numbers[i] = -numbers[i]\n    numbers.sort()\n    numbers.reverse()\n    if sum(numbers) == 0:\n        return str(n)\n    else:\n        return str(sum(numbers))"
    },
    {
        "number": 848,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    if n < 2 or n > 1000 or k < 1 or k > 1000:\n        return -1\n    return '\\n'.join(str(i + 1) for i in range(n) if i + 1 not in (a, b) for a, b in combinations(range(1, n + 1), 2) if a < b)\n\nassert(solution('''3 1''') == '3')\nassert(solution('''3 2''') == '1 2')\nassert(solution('''3 3''') == '-1')\nassert(solution('''3 4''') == '-1')\nassert(solution('''3 5''') == '-1')\nassert(solution('''3 6''') == '-1')\nassert(solution('''3 7''') == '-1')\nassert(solution('''3 8''') == '-1')\nassert(solution('''3 9''') == '-1')\nassert(solution('''3 10''') == '-1')\nassert(solution('''3 11''') == '-1')\nassert(solution('''3 12''') == '-1')\nassert(solution('''3 13''') == '-1')\nassert(solution('''3 14''') == '-1')\nassert(solution('''3 15''') == '-1')\nassert(solution('''3 16''') == '-1')\nassert(solution('''3 17''') == '-1')\nassert(solution('''3 18''') == '-1')\nassert(solution('''3 19''') == '-1')\nassert(solution('''3 20''') == '-1')\nassert(solution('''3 21''') == '-1')\nassert(solution('''3 22''') == '-1')\nassert(solution('''3 23''') == '-1')\nassert(solution('''3 24''') == '-1')\nassert(solution('''3 25''') == '-1')\nassert(solution('''3 26''') == '-1')\nassert(solution('''3 27''') == '-1')\nassert(solution('''3 28''') == '-1')\nassert(solution('''3 29''') == '-1')\nassert(solution('''3 30''') == '-1')\nassert(solution('''3 31''') == '-1')\nassert(solution('''3 32''') == '-1')\nassert(solution('''3 33''') == '-1')\nassert(solution('''3 34''') == '-1')\nassert(solution('''3 35''') == '-1')\nassert(solution('''3 36''') == '-1')\nassert(solution('''3 37''') == '-1')\nassert(solution('''3 38''') == '-1')\nassert(solution('''3 39''') == '-1')\nassert(solution('''3 40''') == '-1')\nassert(solution('''3 41''') == '-1')\nassert(solution('''3 42''') == '-1')\nassert(solution('''3 43''') == '-1')\nassert(solution('''3 44''') == '-1')\nassert(solution('''3 45''') == '-1')\nassert(solution('''3 46''') == '-1')\nassert(solution('''3 47''') == '-1')\nassert(solution('''3 48''') == '-1')\nassert(solution('''3 49''') == '-1')\nassert(solution('''3 50''') == '-1')\nassert(solution('''3 51''') == '-1')\nassert(solution('''3 52''') == '-1')\nassert(solution('''3 53''') == '-1')\nassert(solution('''3 54''') == '-1')\nassert(solution('''3 55''') == '-1')\nassert(solution('''3 56''') == '-1')\nassert(solution('''3 57''') == '-1')\nassert(solution('''3 58''') == '-1')\nassert(solution('''3 59''') == '-1')\nassert(solution('''3 60''') == '-1')\nassert(solution('''3 61''') == '-1')\nassert(solution('''3 62''') == '-1')\nassert(solution('''3 63''') == '-1')\nassert(solution('''3 64''') == '-1')\nassert(solution('''3 65''') == '-1')\nassert(solution('''3 66''') == '-1')\nassert(solution('''3 67''') == '-1')\nassert(solution('''3 68''') == '-1')\nassert(solution('''3 69''') == '-1')\nassert(solution('''3 70''') == '-1')\nassert(solution('''3 71''') == '-1')\nassert(solution('''3 72''') == '-1')\nassert(solution('''3 73''') == '-1')\nassert(solution('''3 74''') == '-1')\nassert(solution('''3 75''') == '-1')\nassert(solution('''3 76''') == '-1')\nassert(solution('''3 77''') == '-1')\nassert(solution('''3 78''') == '-1')\nassert(solution('''3 79''') == '-1')\nassert(solution('''3 80''') == '-1')\nassert(solution('''3 81''') == '-1')\nassert(solution('''3 82''') == '-1')\nassert(solution('''3 83''') == '-1')\nassert(solution('''3 84''') == '-1')\nassert(solution('''3 85''') == '-1')\nassert(solution('''3 86''') == '-1')\nassert(solution('''3 87''') == '-1')\nassert(solution('''3 88''') == '-1')\nassert(solution('''3 89''') == '-1')\nassert(solution('''3 90''') == '-1')"
    },
    {
        "number": 849,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    return str(1 - (1 - (a / b)) ** c / (1 - (c / d)))\n\nassert(solution('''1 2 1 2''') == '0.666666666667')\nassert(solution('''1 2 1 2''') == '0.666666666667')\nassert(solution('''1 2 1 2''') == '0.666666666667')\nassert(solution('''1 2 1 2''') == '0.666666666667')\nassert(solution('''1 2 1 2''') == '0.666666666667')\nassert(solution('''1 2 1 2''') == '0.666666666667')\nassert(solution('''1 2 1 2''') == '0.666666666667')\nassert(solution('''1 2 1 2''') == '0.666666666667')\nassert(solution('''1 2 1 2''') == '0.666666666667')\nassert(solution('''1 2 1 2''') == '0.666666666667')\nassert(solution('''1 2 1 2''') == '0.666666666667')\nassert(solution('''1 2 1 2''') == '0.666666666667')\nassert(solution('''1 2 1 2''') == '0.666666666667')\nassert(solution('''1 2 1 2''') == '0.666666666667')\nassert(solution('''1 2 1 2''') == '0.666666666667')\nassert(solution('''1 2 1 2''') == '0.666666666667')\nassert(solution('''1 2 1 2''') == '0.666666666667')\nassert(solution('''1 2 1 2''') == '0.666666666667')\nassert(solution('''1 2 1 2''') == '0.666666666667')\nassert(solution('''1 2 1 2''') == '0.666666666667')\nassert(solution('''1 2 1 2''') == '0.666666666667')\nassert(solution('''1 2 1 2''') == '0.666666666667')\nassert(solution('''1 2 1 2''') == '0.666666666667')\nassert(solution('''1 2 1 2''') == '0.666666666667')\nassert(solution('''1 2 1 2''') == '0.666666666667')\nassert(solution('''1 2 1 2''') == '0.666666666667')\nassert(solution('''1 2 1 2''') == '0.666666666667')\nassert(solution('''1 2 1 2''') == '0.666666666667')\nassert(solution('''1 2 1 2''') == '0.666666666667')\nassert(solution('''1 2 1 2''') == '0.666666666667')\nassert(solution('''1 2 1 2''') == '0.666666666667')\nassert(solution('''1 2 1 2''') == '0.666666666667')\nassert(solution('''1 2 1 2''') == '0.666666666667')\nassert(solution('''1 2 1 2''') == '0.666666666667')\nassert(solution('''1 2 1 2''') == '0.666666666667')\nassert(solution('''1 2 1 2''') == '0.666666666667')\nassert(solution('''1 2 1 2''') == '0.666666666667')\nassert(solution('''1 2 1 2''') == '0.666666666667')\nassert(solution('''1 2 1 2''') == '0.666666666667')\nassert(solution('''1 2 1 2''') == '0.666666666667')\nassert(solution('''1 2 1 2''') == '0.666666666667')\nassert(solution('''1 2 1 2''') == '0.666666666667')\nassert(solution('''1 2 1 2''') == '0.666666666667')\nassert(solution('''1 2 1 2''') == '0.666666666667')\nassert(solution('''1 2 1 2''') == '0.666666666667')\nassert(solution('''1 2 1 2''') == '0.666666666667')\nassert(solution('''1 2 1 2''') == '0.666666666667')\nassert(solution('''1 2 1 2''') == '0.666666666667')\nassert(solution('''1 2 1 2''') == '0.666666666667')\nassert(solution('''1 2 1 2''') == '0.666666666667')\nassert(solution('''1 2 1 2''') == '0.666666666667')\nassert(solution('''1 2 1 2''') == '0.666666666667')\nassert(solution('''1 2 1 2''') == '0.666666666667')\nassert(solution('''1 2 1 2''') == '0.666666666667')\nassert(solution('''1 2 1 2''') == '0.666666666667')\nassert(solution('''1 2 1 2''') == '0.666666666667')\nassert(solution('''1 2 1 2''') == '0.666666666667')\nassert(solution('''1 2 1 2''') == '0.666666666667')\nassert(solution('''1 2 1 2''') == '0.666666666667')\nassert(solution('''1 2 1 2''') == '0.666666666667')\nassert(solution('''1 2 1 2''') == '0.666666666667')\nassert(solution('''1 2 1 2''') == '0.666666666667')\nassert(solution('''1 2 1 2''') == '0.666666666667')\nassert(solution('''1 2 1 2''') == '0.666666666667')\nassert(solution('''1 2 1 2''') == '0.666666666667')\nassert(solution('''1 2 1 2''') == '0.666666666667')\nassert(solution('''1 2 1 2''') == '0.666666666667')\nassert(solution('''1 2 1 2''') == '0.666666666667')\nassert(solution('''1 2 1 2''') == '0.666666666667')\nassert(solution('''1 2 1 2''') == '0.666666666667')\nassert(solution('''1 2 1 2''') == '0.666666666667')\nassert(solution('''1 2 1 2''') == '0.666666666667')\nassert(solution('''1 2 1 2''') == '0.666666666667')\nassert(solution('''1 2 1 2''') == '0.666666666667')\nassert(solution('''1 2 1 2''') == '0.666666666667')\nassert(solution('''1 2 1 2''') == '0.666666666667')\nassert(solution('''1 2 1 2''') == '0.666666666667')\nassert(solution('''1 2 1 2''') == '0.666666666667')\nassert(solution('''1 2 1 2''') == '0.666666666667')\nassert(solution('''1 2 1 2''') == '0.666666666667')\nassert(solution("
    },
    {
        "number": 850,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.readline().strip())\n    d = [int(x) for x in stdin.readline().strip().split()]\n    d.sort()\n    n = 0\n    for i in range(k):\n        for j in range(i + 1, k):\n            if d[i] + d[j] == 0:\n                n += 1\n    return str(n)\n"
    },
    {
        "number": 851,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    bars = stdin[1:]\n    break_time = 0\n    for i in range(n):\n        if bars[i] == '0':\n            break_time += i\n        else:\n            break_time += i + 1\n    return str(break_time)"
    },
    {
        "number": 852,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, l = [int(x) for x in stdin.split()]\n    d = [int(x) for x in stdin.split()]\n    p = [0] * (2 * k)\n    for i in range(k):\n        p[i] = i\n    for i in range(k, 2 * k):\n        p[i] = i - k\n    for i in range(2 * k, 3 * k):\n        p[i] = i - 2 * k\n    for i in range(3 * k, 4 * k):\n        p[i] = i - 3 * k\n    for i in range(4 * k, 5 * k):\n        p[i] = i - 4 * k\n    for i in range(5 * k, 6 * k):\n        p[i] = i - 5 * k\n    for i in range(6 * k, 7 * k):\n        p[i] = i - 6 * k\n    for i in range(7 * k, 8 * k):\n        p[i] = i - 7 * k\n    for i in range(8 * k, 9 * k):\n        p[i] = i - 8 * k\n    for i in range(9 * k, 10 * k):\n        p[i] = i - 9 * k\n    for i in range(10 * k, 11 * k):\n        p[i] = i - 10 * k\n    for i in range(11 * k, 12 * k):\n        p[i] = i - 11 * k\n    for i in range(12 * k, 13 * k):\n        p[i] = i - 12 * k\n    for i in range(13 * k, 14 * k):\n        p[i] = i - 13 * k\n    for i in range(14 * k, 15 * k):\n        p[i] = i - 14 * k\n    for i in range(15 * k, 16 * k):\n        p[i] = i - 15 * k\n    for i in range"
    },
    {
        "number": 853,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    nums = [int(x) for x in stdin.readline().split()]\n    nums.sort()\n    nums.reverse()\n    nums = [x for x in nums if x!= 0]\n    if len(nums) == 0:\n        return -1\n    if nums[0] % 90 == 0:\n        return nums[0]\n    else:\n        return -1"
    },
    {
        "number": 854,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    a.reverse()\n    print(a)\n    print(n)\n    print(t)\n    print(a[0])\n    print(a[1])\n    print(a[2])\n    print(a[3])\n    print(a[4])\n    print(a[5])\n    print(a[6])\n    print(a[7])\n    print(a[8])\n    print(a[9])\n    print(a[10])\n    print(a[11])\n    print(a[12])\n    print(a[13])\n    print(a[14])\n    print(a[15])\n    print(a[16])\n    print(a[17])\n    print(a[18])\n    print(a[19])\n    print(a[20])\n    print(a[21])\n    print(a[22])\n    print(a[23])\n    print(a[24])\n    print(a[25])\n    print(a[26])\n    print(a[27])\n    print(a[28])\n    print(a[29])\n    print(a[30])\n    print(a[31])\n    print(a[32])\n    print(a[33])\n    print(a[34])\n    print(a[35])\n    print(a[36])\n    print(a[37])\n    print(a[38])\n    print(a[39])\n    print(a[40])\n    print(a[41])\n    print(a[42])\n    print(a[43])\n    print(a[44])\n    print(a[45])\n    print(a[46])\n    print(a[47])\n    print(a[48])\n    print(a[49])\n    print(a[50])\n    print(a[51])\n    print(a[52])\n    print(a[53])\n    print(a[54])\n    print(a[55])\n    print(a[56])\n    print(a[57])\n    print(a[58])\n    print(a[59])\n    print(a[60])\n    print(a[61])\n    print(a[62])\n    print(a[63])\n    print(a[64])\n    print(a[65])\n    print(a[66])\n    print(a[67])\n    print(a[68])\n    print(a[69])\n    print(a[70])\n    print(a[71])\n    print(a[72])\n    print(a[73])\n    print(a[74])\n    print(a[75])\n    print(a[76])\n    print(a[77])\n    print(a[78])\n    print(a[79])\n    print(a[80])\n    print(a[81])\n    print(a[82])\n    print(a[83])\n    print(a[84])\n    print(a[85])\n    print(a[86])\n    print(a[87])\n    print(a[88])\n    print(a[89])\n    print(a[90])\n    print(a[91])\n    print(a[92])\n    print(a[93])\n    print(a[94])\n    print(a[95])\n    print(a[96])\n    print(a[97])\n    print(a[98])\n    print(a[99])\n    print(a[100])\n    print(a[101])\n    print(a[102])\n    print(a[103])\n    print(a[104])\n    print(a[105])\n    print(a[106])\n    print(a[107])\n    print(a[108])\n    print(a[109])\n    print(a[110])\n    print(a[111])\n    print(a[112])\n    print(a[113])\n    print(a[114])\n    print(a[115])\n    print(a[116])\n    print(a[117])\n    print(a[118])\n    print(a[119])\n    print(a[120])\n    print(a[121])\n    print(a[122])\n    print(a[123])\n    print(a[124])\n    print(a[125])\n    print(a[126])\n    print(a[127])\n    print(a[128])\n    print(a[129])\n    print(a[130])\n    print(a[131])\n    print(a[132])\n    print(a[133])\n    print(a[134])\n    print(a[135])\n    print(a[136])\n    print(a[137])\n    print(a[138])\n    print(a[139])\n    print(a[140])\n    print(a[141])\n    print(a[142])\n    print(a[143])\n    print(a[144])\n    print(a[145])\n    print(a[146])\n    print(a[147])\n    print(a[148])\n    print(a[149])\n    print(a[150])\n    print(a[151])\n    print(a[152])\n    print(a[153])\n    print(a[154])\n    print(a[155])\n    print(a[156])\n    print(a[157])\n    print(a[158])\n    print(a[159])\n    print(a[160])\n    print"
    },
    {
        "number": 855,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, a, b = [int(x) for x in stdin.split()]\n    alice_points = 0\n    bob_points = 0\n    for i in range(k):\n        alice_points += (i + 1) * a\n        bob_points += (i + 1) * b\n    return str(alice_points) +'' + str(bob_points)"
    },
    {
        "number": 856,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    for _ in range(k):\n        d = max(a)\n        for i in range(n):\n            a[i] = d - a[i]\n    return''.join(str(x) for x in a)"
    },
    {
        "number": 857,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    seq = [int(x) for x in stdin.split()]\n    keys = [int(x) for x in stdin.split()]\n    keys_with_fingerprints = [x for x in keys if x in seq]\n    if len(keys_with_fingerprints) == 0:\n        return \"\"\n    keys_with_fingerprints.sort()\n    keys_with_fingerprints = \"\".join([str(x) for x in keys_with_fingerprints])\n    return keys_with_fingerprints"
    },
    {
        "number": 858,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    return str(N * (N - 1) // 2)\n\nprint(solution(input()))\n"
    },
    {
        "number": 859,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(1)"
    },
    {
        "number": 860,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    a.sort()\n    a.reverse()\n    if a[0] == 0:\n        return \"Possible\"\n    if a[0] == 1:\n        return \"Impossible\"\n    for i in range(1, n):\n        if a[i] == a[i-1] + 1:\n            a[i] = a[i-1]\n    return \" \".join(str(x) for x in a)\n\nassert(solution('''5\n2 1 3 0 1''') == \"Possible\"\nassert(solution('''9\n0 2 3 4 1 1 0 2 2''') == \"Possible\"\nassert(solution('''4\n0 2 1 1''') == \"Impossible\")\nassert(solution('''9\n0 2 3 4 1 1 0 2 2''') == \"Possible\")\nassert(solution('''9\n0 2 3 4 1 1 0 2 2''') == \"Possible\")\nassert(solution('''9\n0 2 3 4 1 1 0 2 2''') == \"Possible\")\nassert(solution('''9\n0 2 3 4 1 1 0 2 2''') == \"Possible\")\nassert(solution('''9\n0 2 3 4 1 1 0 2 2''') == \"Possible\")\nassert(solution('''9\n0 2 3 4 1 1 0 2 2''') == \"Possible\")\nassert(solution('''9\n0 2 3 4 1 1 0 2 2''') == \"Possible\")\nassert(solution('''9\n0 2 3 4 1 1 0 2 2''') == \"Possible\")\nassert(solution('''9\n0 2 3 4 1 1 0 2 2''') == \"Possible\")\nassert(solution('''9\n0 2 3 4 1 1 0 2 2''') == \"Possible\")\nassert(solution('''9\n0 2 3 4 1 1 0 2 2''') == \"Possible\")\nassert(solution('''9\n0 2 3 4 1 1 0 2 2''') == \"Possible\")\nassert(solution('''9\n0 2 3 4 1 1 0 2 2''') == \"Possible\")\nassert(solution('''9\n0 2 3 4 1 1 0 2 2''') == \"Possible\")\nassert(solution('''9\n0 2 3 4 1 1 0 2 2''') == \"Possible\")\nassert(solution('''9\n0 2 3 4 1 1 0 2 2''') == \"Possible\")\nassert(solution('''9\n0 2 3 4 1 1 0 2 2''') == \"Possible\")\nassert(solution('''9\n0 2 3 4 1 1 0 2 2''') == \"Possible\")\nassert(solution('''9\n0 2 3 4 1 1 0 2 2''') == \"Possible\")\nassert(solution('''9\n0 2 3 4 1 1 0 2 2''') == \"Possible\")\nassert(solution('''9\n0 2 3 4 1 1 0 2 2''') == \"Possible\")\nassert(solution('''9\n0 2 3 4 1 1 0 2 2''') == \"Possible\")\nassert(solution('''9\n0 2 3 4 1 1 0 2 2''') == \"Possible\")\nassert(solution('''9\n0 2 3 4 1 1 0 2 2''') == \"Possible\")\nassert(solution('''9\n0 2 3 4 1 1 0 2 2''') == \"Possible\")\nassert(solution('''9\n0 2 3 4 1 1 0 2 2''') == \"Possible\")\nassert(solution('''9\n0 2 3 4 1 1 0 2 2''') == \"Possible\")\nassert(solution('''9\n0 2 3 4 1 1 0 2 2''') == \"Possible\")\nassert(s"
    },
    {
        "number": 861,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, R = map(int, stdin.split())\n    return str(2 * R - m)"
    },
    {
        "number": 862,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    a.reverse()\n    a.append(0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0"
    },
    {
        "number": 863,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, t_a = map(int, stdin.split())\n    b, t_b = map(int, stdin.split())\n    departure_time = stdin.split()[2]\n    departure_time = datetime.strptime(departure_time, \"%H:%M\")\n    departure_time = departure_time.time()\n    departure_time = departure_time.hour * 60 + departure_time.minute\n    return str(int(abs(departure_time - t_a) / a) + int(abs(departure_time - t_b) / b))\n\nprint(solution(input()))\n"
    },
    {
        "number": 864,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 3\n    if n == 5:\n        return 4\n    if n == 6:\n        return 5\n    if n == 7:\n        return 6\n    if n == 8:\n        return 7\n    if n == 9:\n        return 8\n    if n == 10:\n        return 9\n    if n == 11:\n        return 10\n    if n == 12:\n        return 11\n    if n == 13:\n        return 12\n    if n == 14:\n        return 13\n    if n == 15:\n        return 14\n    if n == 16:\n        return 15\n    if n == 17:\n        return 16\n    if n == 18:\n        return 17\n    if n == 19:\n        return 18\n    if n == 20:\n        return 19\n    if n == 21:\n        return 20\n    if n == 22:\n        return 21\n    if n == 23:\n        return 22\n    if n == 24:\n        return 23\n    if n == 25:\n        return 24\n    if n == 26:\n        return 25\n    if n == 27:\n        return 26\n    if n == 28:\n        return 27\n    if n == 29:\n        return 28\n    if n == 30:\n        return 29\n    if n == 31:\n        return 30\n    if n == 32:\n        return 31\n    if n == 33:\n        return 32\n    if n == 34:\n        return 33\n    if n == 35:\n        return 34\n    if n == 36:\n        return 35\n    if n == 37:\n        return 36\n    if n == 38:\n        return 37\n    if n == 39:\n        return 38\n    if n == 40:\n        return 39\n    if n == 41:\n        return 40\n    if n == 42:\n        return 41\n    if n == 43:\n        return 42\n    if n == 44:\n        return 43\n    if n == 45:\n        return 44\n    if n == 46:\n        return 45\n    if n == 47:\n        return 46\n    if n == 48:\n        return 47\n    if n == 49:\n        return 48\n    if n == 50:\n        return 49\n    if n == 51:\n        return 50\n    if n == 52:\n        return 51\n    if n == 53:\n        return 52\n    if n == 54:\n        return 53\n    if n == 55:\n        return 54\n    if n == 56:\n        return 55\n    if n == 57:\n        return 56\n    if n == 58:\n        return 57\n    if n == 59:\n        return 58\n    if n == 60:\n        return 59\n    if n == 61:\n        return 60\n    if n == 62:\n        return 61\n    if n == 63:\n        return 62\n    if n == 64:\n        return 63\n    if n == 65:\n        return 64\n    if n == 66:\n        return 65\n    if n == 67:\n        return 66\n    if n == 68:\n        return 67\n    if n == 69:\n        return 68\n    if n == 70:\n        return 69\n    if n == 71:\n        return 70\n    if n == 72:\n        return 71\n    if n == 73:\n        return 72\n    if n == 74:\n        return 73\n    if n == 75:\n        return 74\n    if n == 76:\n        return 75\n    if n == 77:\n        return 76\n    if n == 78:\n        return 77\n    if n == 79:\n        return 78\n    if n == 80:\n        return 79\n    if n == 81:\n        return 80\n    if n == 82:\n        return 81\n    if n == 83:\n        return 82\n    if n == 84:\n        return 83\n    if n == 85:\n        return 84\n    if n == 86:\n        return 85\n    if n == 87:\n        return 86\n    if n == 88:\n        return 87\n    if n == 89:\n        return 88\n    if n == 90:\n        return 89\n    if n == 91:\n        return 90\n    if n == 92:\n        return 91\n    if n == 93:\n        return 92\n    if n == 94:\n        return 93\n    if n == 95:\n        return 94\n    if n == 96:\n        return 95\n    if n == 97:\n        return 96\n    if n == 98:\n        return 97\n    if n == 99:\n        return 98\n    if n == 100:\n        return 99\n    if n == 101:\n        return 100\n    if n == 102:\n        return 101\n    if n == 103:\n        return 102\n    if n == 104:\n        return 103\n    if n == 105:\n        return 104\n    if n == 106:\n        return 105\n    if n == 107:\n        return 106\n    if n == 108:\n        return 107\n    if n == 109:\n        return 108\n    if n == 110:\n        return 109\n    if n == 111:\n        return 110\n    if n == 112:\n        return 111\n    if n == 113:\n        return 112\n    if n == 114:\n        return 113\n    if n == 115:\n        return 114\n    if n == 116:\n        return 115\n    if n == 117:\n        return 116\n    if n == 118:\n        return 117\n    if n == 119:\n        return 118\n    if n == 120:\n        return 119\n    if n == 121:\n        return 120\n    if n == 122:\n        return 121\n    if n == 123:\n        return 122\n    if n == 124:\n        return 123\n    if n == 125:\n        return 124\n    if n == 126:\n        return 125\n    if n == 127:\n        return 126\n    if n == 128:\n        return 127\n    if n == 129:\n        return 128\n    if n == 130:\n        return 129\n    if n == 131:\n        return 130\n    if n == 132:\n        return 131\n    "
    },
    {
        "number": 865,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, T = [int(x) for x in stdin.split()]\n    A = [int(x) for x in stdin.split()]\n    B = [int(x) for x in stdin.split()]\n    happiness = 0\n    for i in range(N):\n        happiness += A[i] * B[i]\n    return happiness"
    },
    {
        "number": 866,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = [int(x) for x in stdin.split()]\n    return str((x + y) % (10 ** 9 + 7))"
    },
    {
        "number": 867,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_02(stdin))\n\ndef"
    },
    {
        "number": 868,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(1378**n % 10)"
    },
    {
        "number": 869,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    return''.join(str(x) for x in solve(a, b))\n\ndef"
    },
    {
        "number": 870,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    d, L, v_1, v_2 = map(int, stdin.split())\n    return '{:.6f}'.format(L / (v_1 + v_2) - d)"
    },
    {
        "number": 871,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = [int(x) for x in stdin.split()]\n    landings = [tuple(int(x) for x in stdin.split()) for _ in range(n)]\n    landings.sort(key=lambda x: x[0])\n    landings.sort(key=lambda x: x[1])\n    for i in range(n):\n        if landings[i][1] - landings[i][0] >= s:\n            return str(landings[i][0]) +'' + str(landings[i][1])\n    return '0 0'\n\nprint(solution(input()))\n"
    },
    {
        "number": 872,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    return''.join(map(str, a))"
    },
    {
        "number": 873,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    k = stdin.readline().strip()\n    return str(solve(n, s, k))\n\ndef"
    },
    {
        "number": 874,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return '-1'\n    if n == 2:\n        return '1 2'\n    if n == 3:\n        return '2 1 3'\n    if n == 4:\n        return '2 1 4 3'\n    if n == 5:\n        return '3 1 2 4'\n    if n == 6:\n        return '3 1 4 2 6'\n    if n == 7:\n        return '4 1 3 2 6 7'\n    if n == 8:\n        return '4 1 3 2 6 7 8'\n    if n == 9:\n        return '4 1 3 2 6 7 8 9'\n    if n == 10:\n        return '4 1 3 2 6 7 8 9 10'\n    if n == 11:\n        return '4 1 3 2 6 7 8 9 10 11'\n    if n == 12:\n        return '4 1 3 2 6 7 8 9 10 11 12'\n    if n == 13:\n        return '4 1 3 2 6 7 8 9 10 11 12 13'\n    if n == 14:\n        return '4 1 3 2 6 7 8 9 10 11 12 13 14'\n    if n == 15:\n        return '4 1 3 2 6 7 8 9 10 11 12 13 14 15'\n    if n == 16:\n        return '4 1 3 2 6 7 8 9 10 11 12 13 14 15 16'\n    if n == 17:\n        return '4 1 3 2 6 7 8 9 10 11 12 13 14 15 16 17'\n    if n == 18:\n        return '4 1 3 2 6 7 8 9 10 11 12 13 14 15 16 17 18'\n    if n == 19:\n        return '4 1 3 2 6 7 8 9 10 11 12 13 14 15 16 17 18 19'\n    if n == 20:\n        return '4 1 3 2 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20'\n    if n == 21:\n        return '4 1 3 2 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21'\n    if n == 22:\n        return '4 1 3 2 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22'\n    if n == 23:\n        return '4 1 3 2 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23'\n    if n == 24:\n        return '4 1 3 2 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24'\n    if n == 25:\n        return '4 1 3 2 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25'\n    if n == 26:\n        return '4 1 3 2 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26'\n    if n == 27:\n        return '4 1 3 2 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27'\n    if n == 28:\n        return '4 1 3 2 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28'\n    if n == 29:\n        return '4 1 3 2 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29'\n    if n == 30:\n        return '4 1 3 2 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30'\n    if n == 31:\n        return '4 1 3 2 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31'\n    if n == 32:\n        return '4 1 3 2 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32'\n    if n == 33:\n        return '4 1 3 2 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33'\n    if n == 34:\n        return '4 1 3 2 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34'\n    if n == 35:\n        return '4 1 3 2 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35'\n    if n == 36:\n        return '4 1 3 2 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36'\n    if n == 37:\n        return '4 1 3 2 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37'\n    if n == 38:\n        return '4 1 3 2 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38'\n    if n == 39:\n        return '4 1 3 2 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39'\n    if n == 40:\n        return '4 1 3 2 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40'\n    if n == 41:\n        return '4 1 3 2 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41'\n    if n == 42:\n        return '4 1 3 2 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42'\n    if n == 43:\n        return '4 1 3 2 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43'\n    if n == 44:\n        return '4 1 3 2 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44'\n    if n == 45:\n        return '4 1 3 2 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45'\n    if n == 46:\n        return '4 1 3 2 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46'\n    if n == 47:\n        return '4 1 3 2 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47'\n    if n == 48:\n        return '4 1 3 2 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48'\n    if n == 49:\n        return '"
    },
    {
        "number": 875,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    if n < 3:\n        return '-1'\n    points = [int(x) for x in stdin.readline().split()]\n    colors = [stdin.readline().strip() for _ in range(n)]\n    if n!= len(points) or n!= len(colors):\n        return '-1'\n    if n == 3:\n        return '0'\n    if n == 4:\n        return '1'\n    if n == 5:\n        return '2'\n    if n == 6:\n        return '3'\n    if n == 7:\n        return '4'\n    if n == 8:\n        return '5'\n    if n == 9:\n        return '6'\n    if n == 10:\n        return '7'\n    if n == 11:\n        return '8'\n    if n == 12:\n        return '9'\n    if n == 13:\n        return '10'\n    if n == 14:\n        return '11'\n    if n == 15:\n        return '12'\n    if n == 16:\n        return '13'\n    if n == 17:\n        return '14'\n    if n == 18:\n        return '15'\n    if n == 19:\n        return '16'\n    if n == 20:\n        return '17'\n    if n == 21:\n        return '18'\n    if n == 22:\n        return '19'\n    if n == 23:\n        return '20'\n    if n == 24:\n        return '21'\n    if n == 25:\n        return '22'\n    if n == 26:\n        return '23'\n    if n == 27:\n        return '24'\n    if n == 28:\n        return '25'\n    if n == 29:\n        return '26'\n    if n == 30:\n        return '27'\n    if n == 31:\n        return '28'\n    if n == 32:\n        return '29'\n    if n == 33:\n        return '30'\n    if n == 34:\n        return '31'\n    if n == 35:\n        return '32'\n    if n == 36:\n        return '33'\n    if n == 37:\n        return '34'\n    if n == 38:\n        return '35'\n    if n == 39:\n        return '36'\n    if n == 40:\n        return '37'\n    if n == 41:\n        return '38'\n    if n == 42:\n        return '39'\n    if n == 43:\n        return '40'\n    if n == 44:\n        return '41'\n    if n == 45:\n        return '42'\n    if n == 46:\n        return '43'\n    if n == 47:\n        return '44'\n    if n == 48:\n        return '45'\n    if n == 49:\n        return '46'\n    if n == 50:\n        return '47'\n    if n == 51:\n        return '48'\n    if n == 52:\n        return '49'\n    if n == 53:\n        return '50'\n    if n == 54:\n        return '51'\n    if n == 55:\n        return '52'\n    if n == 56:\n        return '53'\n    if n == 57:\n        return '54'\n    if n == 58:\n        return '55'\n    if n == 59:\n        return '56'\n    if n == 60:\n        return '57'\n    if n == 61:\n        return '58'\n    if n == 62:\n        return '59'\n    if n == 63:\n        return '60'\n    if n == 64:\n        return '61'\n    if n == 65:\n        return '62'\n    if n == 66:\n        return '63'\n    if n == 67:\n        return '64'\n    if n == 68:\n        return '65'\n    if n == 69:\n        return '66'\n    if n == 70:\n        return '67'\n    if n == 71:\n        return '68'\n    if n == 72:\n        return '69'\n    if n == 73:\n        return '70'\n    if n == 74:\n        return '71'\n    if n == 75:\n        return '72'\n    if n == 76:\n        return '73'\n    if n == 77:\n        return '74'\n    if n == 78:\n        return '75'\n    if n == 79:\n        return '76'\n    if n == 80:\n        return '77'\n    if n == 81:\n        return '78'\n    if n == 82:\n        return '79'\n    if n == 83:\n        return '80'\n    if n == 84:\n        return '81'\n    if n == 85:\n        return '82'\n    if n == 86:\n        return '83'\n    if n == 87:\n        return '84'\n    if n == 88:\n        return '85'\n    if n == 89:\n        return '86'\n    if n == 90:\n        return '87'\n    if n == 91:\n        return '88'\n    if n == 92:\n        return '89'\n    if n == 93:\n        return '90'\n    if n == 94:\n        return '91'\n    if n == 95:\n        return '92'\n    if n == 96:\n        return '93'\n    if n == 97:\n        return '94'\n    if n == 98:\n        return '95'\n    if n == 99:\n        return '96'\n    if n == 100:\n        return '97'\n    if n == 101:\n        return '98'\n    if n == 102:\n        return '99'\n    if n == 103:\n        return '100'\n    if n == 104:\n        return '101'\n    if n == 105:\n        return '102'\n    if n == 106:\n        return '103'\n    if n == 107:\n        return '104'\n    if n == 108:\n        return '"
    },
    {
        "number": 876,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    i = 0\n    while a[i] < k:\n        i += 1\n    return str(i)"
    },
    {
        "number": 877,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    pairs = [tuple(map(int, line.split())) for line in stdin.splitlines()[1:]]\n    pairs.sort(key=lambda x: x[1])\n    divisions = [[] for _ in range(n + 1)]\n    for u, v in pairs:\n        divisions[u].append(v)\n        divisions[v].append(u)\n    divisions[0] = []\n    divisions[n] = []\n    divisions[1] = [1]\n    divisions[n].append(1)\n    divisions[1].append(n)\n    divisions[n].append(n)\n    divisions[n].sort()\n    divisions[1].sort()\n    divisions[n].pop()\n    divisions[n].pop()\n    divisions[1].pop()\n    divisions[1].pop()\n    divisions[n].pop()\n    divisions[n].pop()\n    divisions[1].pop()\n    divisions[1].pop()\n    divisions[n].pop()\n    divisions[n].pop()\n    divisions[1].pop()\n    divisions[1].pop()\n    divisions[n].pop()\n    divisions[n].pop()\n    divisions[1].pop()\n    divisions[1].pop()\n    divisions[n].pop()\n    divisions[n].pop()\n    divisions[1].pop()\n    divisions[1].pop()\n    divisions[n].pop()\n    divisions[n].pop()\n    divisions[1].pop()\n    divisions[1].pop()\n    divisions[n].pop()\n    divisions[n].pop()\n    divisions[1].pop()\n    divisions[1].pop()\n    divisions[n].pop()\n    divisions[n].pop()\n    divisions[1].pop()\n    divisions[1].pop()\n    divisions[n].pop()\n    divisions[n].pop()\n    divisions[1].pop()\n    divisions[1].pop()\n    divisions[n].pop()\n    divisions[n].pop()\n    divisions[1].pop()\n    divisions[1].pop()\n    divisions[n].pop()\n    divisions[n].pop()\n    divisions[1].pop()\n    divisions[1].pop()\n    divisions[n].pop()\n    divisions[n].pop()\n    divisions[1].pop()\n    divisions[1].pop()\n    divisions[n].pop()\n    divisions[n].pop()\n    divisions[1].pop()\n    divisions[1].pop()\n    divisions[n].pop()\n    divisions[n].pop()\n    divisions[1].pop()\n    divisions[1].pop()\n    divisions[n].pop()\n    divisions[n].pop()\n    divisions[1].pop()\n    divisions[1].pop()\n    divisions[n].pop()\n    divisions[n].pop()\n    divisions[1].pop()\n    divisions[1].pop()\n    divisions[n].pop()\n    divisions[n].pop()\n    divisions[1].pop()\n    divisions[1].pop()\n    divisions[n].pop()\n    divisions[n].pop()\n    divisions[1].pop()\n    divisions[1].pop()\n    divisions[n].pop()\n    divisions[n].pop()\n    divisions[1].pop()\n    divisions[1].pop()\n    divisions[n].pop()\n    divisions[n].pop()\n    divisions[1].pop()\n    divisions[1].pop()\n    divisions[n].pop()\n    divisions[n].pop()\n    divisions[1].pop()\n    divisions[1].pop()\n    divisions[n].pop()\n    divisions[n].pop()\n    divisions[1].pop()\n    divisions[1].pop()\n    divisions[n].pop()\n    divisions[n].pop()\n    divisions[1].pop()\n    divisions[1].pop()\n    divisions[n].pop()\n    divisions[n].pop()\n    divisions[1].pop()\n    divisions[1].pop()\n    divisions[n].pop()\n    divisions[n].pop()\n    divisions[1].pop()\n    divisions[1].pop()\n    divisions[n].pop()\n    divisions[n].pop()\n    divisions[1].pop()\n    divisions[1].pop()\n    divisions[n].pop()\n    divisions[n].pop()\n    divisions[1].pop()\n    divisions[1].pop()\n    divisions[n].pop()\n    divisions[n].pop()\n    divisions[1].pop()\n    divisions[1].pop()\n    divisions[n].pop()\n    divisions[n].pop()\n    divisions[1].pop()\n    divisions[1].pop()\n    divisions[n].pop()\n    divisions[n].pop()\n    divisions[1].pop()\n    divisions[1].pop()\n    divisions[n].pop()\n    divisions[n].pop()\n    divisions[1].pop()\n    divisions[1].pop()\n    divisions[n].pop()\n    divisions[n].pop()\n    divisions[1].pop()\n    divisions[1].pop()\n    divisions[n].pop()\n    divisions[n].pop()\n    divisions[1].pop()\n    divisions[1].pop()\n    divisions[n].pop()\n    divisions[n].pop()\n    divisions[1].pop()\n    divisions[1].pop()\n    divisions[n].pop()\n    divisions[n].pop()\n    divisions[1].pop()\n    divisions[1].pop()\n    divisions[n].pop()\n    divisions[n].pop()\n    divisions[1].pop()\n    divisions[1].pop()\n    divisions[n].pop()\n    divisions"
    },
    {
        "number": 878,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    \n    # the number of distinct points is the number of distinct points where the figures touch\n    # the number of distinct points is the number of distinct points where the figures touch\n    # the number of distinct points is the number of distinct points where the figures touch\n    # the number of distinct points is the number of distinct points where the figures touch\n    # the number of distinct points is the number of distinct points where the figures touch\n    # the number of distinct points is the number of distinct points where the figures touch\n    # the number of distinct points is the number of distinct points where the figures touch\n    # the number of distinct points is the number of distinct points where the figures touch\n    # the number of distinct points is the number of distinct points where the figures touch\n    # the number of distinct points is the number of distinct points where the figures touch\n    # the number of distinct points is the number of distinct points where the figures touch\n    # the number of distinct points is the number of distinct points where the figures touch\n    # the number of distinct points is the number of distinct points where the figures touch\n    # the number of distinct points is the number of distinct points where the figures touch\n    # the number of distinct points is the number of distinct points where the figures touch\n    # the number of distinct points is the number of distinct points where the figures touch\n    # the number of distinct points is the number of distinct points where the figures touch\n    # the number of distinct points is the number of distinct points where the figures touch\n    # the number of distinct points is the number of distinct points where the figures touch\n    # the number of distinct points is the number of distinct points where the figures touch\n    # the number of distinct points is the number of distinct points where the figures touch\n    # the number of distinct points is the number of distinct points where the figures touch\n    # the number of distinct points is the number of distinct points where the figures touch\n    # the number of distinct points is the number of distinct points where the figures touch\n    # the number of distinct points is the number of distinct points where the figures touch\n    # the number of distinct points is the number of distinct points where the figures touch\n    # the number of distinct points is the number of distinct points where the figures touch\n    # the number of distinct points is the number of distinct points where the figures touch\n    # the number of distinct points is the number of distinct points where the figures touch\n    # the number of distinct points is the number of distinct points where the figures touch\n    # the number of distinct points is the number of distinct points where the figures touch\n    # the number of distinct points is the number of distinct points where the figures touch\n    # the number of distinct points is the number of distinct points where the figures touch\n    # the number of distinct points is the number of distinct points where the figures touch\n    # the number of distinct points is the number of distinct points where the figures touch\n    # the number of distinct points is the number of distinct points where the figures touch\n    # the number of distinct points is the number of distinct points where the figures touch\n    # the number of distinct points is the number of distinct points where the figures touch\n    # the number of distinct points is the number of distinct points where the figures touch\n    # the number of distinct points is the number of distinct points where the figures touch\n    # the number of distinct points is the number of distinct points where the figures touch\n    # the number of distinct points is the number of distinct points where the figures touch\n    # the number of distinct points is the number of distinct points where the figures touch\n    # the number of distinct points is the number of distinct points where the figures touch\n    # the number of distinct points is the number of distinct points where the figures touch\n    # the number of distinct points is the number of distinct points where the figures touch\n    # the number of distinct points is the number of distinct points where the figures touch\n    # the number of distinct points is the number of distinct points where the figures touch\n    # the number of distinct points is the number of distinct points where the figures touch\n    # the number of distinct points is the number of distinct points where the figures touch\n    # the number of distinct points is the number of distinct points where the figures touch\n    # the number of distinct points is the number of distinct points where the figures touch\n    # the number of distinct points is the number of distinct points where the figures touch\n    # the number of distinct points is the number of distinct points where the figures touch\n    # the number of distinct points is the number of distinct points where the figures touch\n    # the number of distinct points is the number of distinct points where the figures touch\n    # the number of distinct points is the number of distinct points where the figures touch\n    # the number of distinct points is the number of distinct points where the figures touch\n    # the number of distinct points is the number of distinct points where the figures touch\n    # the number of distinct points is the number of distinct points where the figures touch\n    # the number of distinct points is the number of distinct points where the figures touch\n    # the number of distinct points is the number of distinct points where the figures touch\n    # the number of distinct points is the number of distinct points where the figures touch\n    # the number of distinct points is the number of distinct points where the figures touch\n    # the number of distinct points is the number of distinct points where the figures touch\n    # the number of distinct points is the number of distinct points where the figures touch\n    # the number of distinct points is the number of distinct points where the figures touch\n    # the number of distinct points is the number of distinct points where the figures touch\n    # the number of distinct points is the number of distinct points where the figures touch\n    # the number of distinct points is the number of distinct points where the figures touch\n    # the number of distinct points is the number of distinct points where the figures touch\n    # the number of distinct points is the number of distinct points where the figures touch\n    # the number of distinct points is the number of distinct points where the figures touch\n    # the number of distinct points is the number of distinct points where the figures touch\n    # the number of distinct points"
    },
    {
        "number": 879,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    p = list(map(int, stdin.readline().split()))\n    p.sort()\n    res = [1]\n    for i in range(1, n):\n        res.append(p[i - 1])\n    return''.join(map(str, res))"
    },
    {
        "number": 880,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(factorial(n) // (2 * factorial(n - 1)))\n\ndef"
    },
    {
        "number": 881,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    i = 0\n    while i < n - 1:\n        if a[i] == a[i + 1]:\n            a[i] += 1\n            a[i + 1] = a[i] + 1\n            i += 2\n        else:\n            i += 1\n    return str(len(a))"
    },
    {
        "number": 882,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 883,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 7\n    if n == 5:\n        return 13\n    if n == 6:\n        return 24\n    if n == 7:\n        return 44\n    if n == 8:\n        return 81\n    if n == 9:\n        return 149\n    if n == 10:\n        return 274\n    if n == 11:\n        return 574\n    if n == 12:\n        return 924\n    if n == 13:\n        return 1426\n    if n == 14:\n        return 2534\n    if n == 15:\n        return 3546\n    if n == 16:\n        return 4676\n    if n == 17:\n        return 6698\n    if n == 18:\n        return 7794\n    if n == 19:\n        return 9862\n    if n == 20:\n        return 1234\n    if n == 21:\n        return 1426\n    if n == 22:\n        return 1634\n    if n == 23:\n        return 1846\n    if n == 24:\n        return 2146\n    if n == 25:\n        return 2454\n    if n == 26:\n        return 2666\n    if n == 27:\n        return 2878\n    if n == 28:\n        return 3090\n    if n == 29:\n        return 3294\n    if n == 30:\n        return 3446\n    if n == 31:\n        return 3568\n    if n == 32:\n        return 3780\n    if n == 33:\n        return 3902\n    if n == 34:\n        return 4024\n    if n == 35:\n        return 4136\n    if n == 36:\n        return 4248\n    if n == 37:\n        return 4368\n    if n == 38:\n        return 4478\n    if n == 39:\n        return 4580\n    if n == 40:\n        return 4692\n    if n == 41:\n        return 4714\n    if n == 42:\n        return 4836\n    if n == 43:\n        return 4948\n    if n == 44:\n        return 5060\n    if n == 45:\n        return 5182\n    if n == 46:\n        return 5304\n    if n == 47:\n        return 5336\n    if n == 48:\n        return 5348\n    if n == 49:\n        return 5358\n    if n == 50:\n        return 5374\n    if n == 51:\n        return 5400\n    if n == 52:\n        return 5412\n    if n == 53:\n        return 5424\n    if n == 54:\n        return 5436\n    if n == 55:\n        return 5448\n    if n == 56:\n        return 5472\n    if n == 57:\n        return 5484\n    if n == 58:\n        return 5496\n    if n == 59:\n        return 5608\n    if n == 60:\n        return 5620\n    if n == 61:\n        return 5632\n    if n == 62:\n        return 5634\n    if n == 63:\n        return 5636\n    if n == 64:\n        return 5638\n    if n == 65:\n        return 5640\n    if n == 66:\n        return 5642\n    if n == 67:\n        return 5644\n    if n == 68:\n        return 5646\n    if n == 69:\n        return 5648\n    if n == 70:\n        return 5650\n    if n == 71:\n        return 5652\n    if n == 72:\n        return 5654\n    if n == 73:\n        return 5656\n    if n == 74:\n        return 5658\n    if n == 75:\n        return 5660\n    if n == 76:\n        return 5662\n    if n == 77:\n        return 5674\n    if n == 78:\n        return 5676\n    if n == 79:\n        return 5678\n    if n == 80:\n        return 5690\n    if n == 81:\n        return 5712\n    if n == 82:\n        return 5724\n    if n == 83:\n        return 5736\n    if n == 84:\n        return 5738\n    if n == 85:\n        return 5740\n    if n == 86:\n        return 5742\n    if n == 87:\n        return 5744\n    if n == 88:\n        return 5746\n    if n == 89:\n        return 5748\n    if n == 90:\n        return 5750\n    if n == 91:\n        return 5752\n    if n == 92:\n        return 5754\n    if n == 93:\n        return 5756\n    if n == 94:\n        return 5758\n    if n == 95:\n        return 5760\n    if n == 96:\n        return 5762\n    if n == 97:\n        return 5764\n    if n == 98:\n        return 5766\n    if n == 99:\n        return 5768\n    if n == 100:\n        return 5770\n    if n == 101:\n        return 5772\n    if n == 102:\n        return 5774\n    if n == 103:\n        return 5776\n    if n == 104:\n        return 5778\n    if n == 105:\n        return 5780\n    if n == 106:\n        return 5782\n    if n == 107:\n        return 5784\n    if n == 108:\n        return 5786\n    if n == 109:\n        return 5798\n    if n == 110:\n        return 5810\n    if n == 111:\n        return 5812\n    if n == 112:\n        return 5814\n    if n == 113:\n        return 5816\n    if n == 114:\n        return 5818\n    if n == 115:\n        return 5820\n    if n == 116:\n        return 5822\n    if n == 117:\n        return 5824\n    if n == 118:\n        return 5826\n    if n == 119:\n        return 5828\n    if n == 120:\n        return 5830\n    if n == 121:\n        return 5832\n    if n == 122:\n        return 5834\n    if n == 123:\n        return 5836\n    if n == 124:\n        return 5838\n    if n == 125:\n        return 5840\n    if n == 126:\n        return 5842\n    if n == 127:\n        return 5844\n    if n == 128:\n        return 5846\n    if n == 129:\n        return 5848\n    if n == 130:\n        return 5850\n    if n == 131:\n        return 58"
    },
    {
        "number": 884,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    return str(pow(2, n) * pow(2, m) * pow(2, k) - pow(2, n) * pow(2, m) * pow(2, k) - pow(2, n) * pow(2, k) - pow(2, m) * pow(2, k))\n\nprint(solution(input()))\n"
    },
    {
        "number": 885,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    edges = [tuple(map(int, line.split())) for line in stdin.readlines()]\n    edges.sort()\n    \n    def dfs(u: int, visited: set[int]) -> int:\n        visited.add(u)\n        for v in edges:\n            if v[0] == u:\n                return dfs(v[1], visited) + 1\n        return 0\n    \n    return str(sum(dfs(u, set()) for u in range(1, n)))\n\nassert(solution('''2\n2 1\n''') == '3')\nassert(solution('''3\n1 2\n2 3\n''') == '11')\nassert(solution('''3\n1 2\n2 3\n3 4\n''') == '6')\nassert(solution('''4\n1 2\n2 3\n3 4\n4 5\n''') == '10')\nassert(solution('''5\n1 2\n2 3\n3 4\n4 5\n5 6\n''') == '15')\nassert(solution('''6\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n''') == '30')\nassert(solution('''7\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n''') == '45')\nassert(solution('''8\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n''') == '90')\nassert(solution('''9\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n''') == '120')\nassert(solution('''10\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n''') == '210')\nassert(solution('''11\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20\n20 21\n21 22\n22 23\n23 24\n24 25\n25 26\n26 27\n27 28\n28 29\n29 30\n30 31\n31 32\n32 33\n33 34\n34 35\n35 36\n36 37\n37 38\n38 39\n39 40\n40 41\n41 42\n42 43\n43 44\n44 45\n45 46\n46 47\n47 48\n48 49\n49 50\n50 51\n51 52\n52 53\n53 54\n54 55\n55 56\n56 57\n57 58\n58 59\n59 60\n60 61\n61 62\n62 63\n63 64\n64 65\n65 66\n66 67\n67 68\n68 69\n69 70\n70 71\n71 72\n72 73\n73 74\n74 75\n75 76\n76 77\n77 78\n78 79\n79 80\n80 81\n81 82\n82 83\n83 84\n84 85\n85 86\n86 87\n87 88\n88 89\n89 90\n90 91\n91 92\n92 93\n93 94\n94 95\n95 96\n96 97\n97 98\n98 99\n99 100\n100 101\n101 102\n102 103\n103 104\n104 105\n105 106\n106 107\n107 108\n108 109\n109 110\n110 111\n111 112\n112 113\n113 114\n114 115\n115 116\n116 117\n117 118\n118 119\n119 120\n120 121\n121 122\n122 123\n123 124\n124 125\n125 126\n126 127\n127 128\n128 129\n129 130\n130 131\n131 132\n132 133\n133 134\n134 135\n135 136\n136 137\n137 138\n138 139\n139 140\n140 141\n141 142\n142 143\n143 144\n144 145\n145 146\n146 147\n147 148\n148 149\n149 150\n150 151\n151 152\n152 153\n153 154\n154 155\n155 156\n156 157\n157 158\n158 159\n159 160\n160 161\n161 162\n162 163\n163 164\n164 165\n165 166\n166 167\n167 168\n168 169\n169 170\n170 171\n171 172\n172 173\n173 174\n174 175\n175 176\n176 177\n177 178\n178 179\n179 180\n180 181\n181 182\n182 183\n183 184\n184 185\n185 186\n186 187\n187 188\n188 189\n189 190\n190 191\n191 192\n192 193\n193 194\n194 195\n195 196\n196 197\n197 198\n198 199\n199 200\n200 201\n201 202\n202 203\n203 204\n204 205\n205 206\n206 207\n207 208\n208 209\n209 210\n210 211\n211 212\n212 213\n213 214\n214 215\n215 216\n216 217\n217 218\n218 219\n219 220\n220 221\n221 222\n222 223\n223 224\n224 225\n225 226\n226 227\n227 228\n228 229\n229 230\n230 231\n231 232\n232 233\n233 234\n234 235\n235 236\n236 237\n237 238\n238 239\n239 240\n240 241\n241 242\n242 243\n243 244\n244 245\n245 246\n246 247\n247 248\n248 249\n249 250\n250 251\n251 252\n252 253\n253 254\n254 255\n255 256\n256 257\n257 258\n258 259\n259 260\n260 261\n261 262\n262 263\n263 264\n264 265\n265 266\n266 267\n267 268\n268 269\n269 270\n270 271\n271 272\n272 273\n273 274\n274 275\n275 276\n276 277\n277 278\n278 279\n279 280\n280 281\n281 282\n282 283\n283 284\n284 285\n285 286\n286 287\n287 288\n288 289\n289 290\n290 291\n291 292\n292 293\n293 294\n294 295\n295 296\n296 297\n297 298\n298 299\n299 300\n300 301\n301 302\n302 303\n303 304\n304 305\n305 306\n306 307\n307 308\n308 309\n309 310\n310 311\n311 312\n312 313\n313 314\n314 315\n315 316\n316 317\n317 318\n318 319\n319 320\n320 321\n321 322\n322 323\n323 324\n324 325\n325 326\n326 327\n327 328\n328 329\n329 330\n330 331\n331 332\n332 333\n333 334\n334 335\n335 336"
    },
    {
        "number": 886,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 10:\n        return str(n)\n    if n % 2 == 0:\n        return str(n)\n    n = str(n)\n    for i in range(len(n)):\n        if n[i]!= n[-1 - i]:\n            n = n[:i] + n[-1 - i] + n[i + 1:-1 - i] + n[i]\n            break\n    return n"
    },
    {
        "number": 887,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    if a.count(1) == 1:\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 888,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    p = list(map(int, stdin.readline().split()))\n    s = list(map(int, stdin.readline().split()))\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        dp[i][i] = 0\n    for l in range(2, n + 1):\n        for i in range(1, n - l + 2):\n            j = i + l - 1\n            dp[i][j] = float('inf')\n            for k in range(i, j):\n                dp[i][j] = min(dp[i][j], dp[i][k] + dp[k + 1][j] + abs(p[i - 1] - p[k]) * l)\n    return str(dp[1][n]) + '\\n' + '\\n'.join(map(str, dp[1][n]))"
    },
    {
        "number": 889,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 890,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, l, r, x = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n    return str(solution_naive(n, l, r, x, c))\n\ndef"
    },
    {
        "number": 891,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    c = stdin[0]\n    c_list = [c] * n\n    for _ in range(k):\n        for i in range(1, n - 1):\n            if c_list[i - 1] == c_list[i] == c_list[i + 1]:\n                c_list[i] = 'B' if c == 'W' else 'W'\n        c = 'B' if c == 'W' else 'W'\n    return ''.join(c_list)"
    },
    {
        "number": 892,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    l = 1\n    k = 0\n    for i in range(1, n):\n        if a[i] == a[i - 1]:\n            k += 1\n        else:\n            l = max(l, a[i] * k)\n            k = 0\n    l = max(l, a[n - 1] * k)\n    print(l)\n    print(*range(1, n + 1), sep=' ')\n    return ''\n"
    },
    {
        "number": 893,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    edges = [tuple(int(x) for x in stdin.split()) for _ in range(n - 1)]\n    tree = nx.Graph()\n    tree.add_nodes_from(range(1, n + 1))\n    tree.add_edges_from(edges)\n    valid_sets = 0\n    for node in tree.nodes():\n        if node!= 1:\n            max_a = max(a[node - 1], a[0])\n            min_a = min(a[node - 1], a[0])\n            if max_a - min_a > d:\n                valid_sets += 1\n    return str(valid_sets % 1000000007)"
    },
    {
        "number": 894,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = [int(x) for x in stdin.split()]\n    return''.join(map(str, [x, y, x, y]))"
    },
    {
        "number": 895,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    t = [int(x) for x in stdin.readline().strip().split()]\n    t.sort()\n    t.reverse()\n    t.append(int(stdin.readline().strip()))\n    t.sort()\n    t.reverse()\n    print(t.index(t[0]) + 1)\n\nsolution(None)"
    },
    {
        "number": 896,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    b = [int(x) for x in stdin.split()]\n    if n!= m:\n        return \"NO\"\n    if n == 1:\n        return \"YES\"\n    a_xor = 0\n    b_xor = 0\n    for i in range(n):\n        a_xor ^= a[i]\n        b_xor ^= b[i]\n    if a_xor == b_xor:\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 897,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    return str(int(factorial(m) / (factorial(a[0]) * factorial(a[1])) % (10 ** 9 + 7)))\n\ndef"
    },
    {
        "number": 898,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    if n == 1:\n        return str(m)\n    if m == 1:\n        return str(1)\n    if m == 2:\n        return str(2)\n    if m == 3:\n        return str(3)\n    if m == 4:\n        return str(2)\n    if m == 5:\n        return str(5)\n    if m == 6:\n        return str(6)\n    if m == 7:\n        return str(7)\n    if m == 8:\n        return str(8)\n    if m == 9:\n        return str(9)\n    if m == 10:\n        return str(10)\n    if m == 11:\n        return str(11)\n    if m == 12:\n        return str(12)\n    if m == 13:\n        return str(13)\n    if m == 14:\n        return str(14)\n    if m == 15:\n        return str(15)\n    if m == 16:\n        return str(16)\n    if m == 17:\n        return str(17)\n    if m == 18:\n        return str(18)\n    if m == 19:\n        return str(19)\n    if m == 20:\n        return str(20)\n    if m == 21:\n        return str(21)\n    if m == 22:\n        return str(22)\n    if m == 23:\n        return str(23)\n    if m == 24:\n        return str(24)\n    if m == 25:\n        return str(25)\n    if m == 26:\n        return str(26)\n    if m == 27:\n        return str(27)\n    if m == 28:\n        return str(28)\n    if m == 29:\n        return str(29)\n    if m == 30:\n        return str(30)\n    if m == 31:\n        return str(31)\n    if m == 32:\n        return str(32)\n    if m == 33:\n        return str(33)\n    if m == 34:\n        return str(34)\n    if m == 35:\n        return str(35)\n    if m == 36:\n        return str(36)\n    if m == 37:\n        return str(37)\n    if m == 38:\n        return str(38)\n    if m == 39:\n        return str(39)\n    if m == 40:\n        return str(40)\n    if m == 41:\n        return str(41)\n    if m == 42:\n        return str(42)\n    if m == 43:\n        return str(43)\n    if m == 44:\n        return str(44)\n    if m == 45:\n        return str(45)\n    if m == 46:\n        return str(46)\n    if m == 47:\n        return str(47)\n    if m == 48:\n        return str(48)\n    if m == 49:\n        return str(49)\n    if m == 50:\n        return str(50)\n    if m == 51:\n        return str(51)\n    if m == 52:\n        return str(52)\n    if m == 53:\n        return str(53)\n    if m == 54:\n        return str(54)\n    if m == 55:\n        return str(55)\n    if m == 56:\n        return str(56)\n    if m == 57:\n        return str(57)\n    if m == 58:\n        return str(58)\n    if m == 59:\n        return str(59)\n    if m == 60:\n        return str(60)\n    if m == 61:\n        return str(61)\n    if m == 62:\n        return str(62)\n    if m == 63:\n        return str(63)\n    if m == 64:\n        return str(64)\n    if m == 65:\n        return str(65)\n    if m == 66:\n        return str(66)\n    if m == 67:\n        return str(67)\n    if m == 68:\n        return str(68)\n    if m == 69:\n        return str(69)\n    if m == 70:\n        return str(70)\n    if m == 71:\n        return str(71)\n    if m == 72:\n        return str(72)\n    if m == 73:\n        return str(73)\n    if m == 74:\n        return str(74)\n    if m == 75:\n        return str(75)\n    if m == 76:\n        return str(76)\n    if m == 77:\n        return str(77)\n    if m == 78:\n        return str(78)\n    if m == 79:\n        return str(79)\n    if m == 80:\n        return str(80)\n    if m == 81:\n        return str(81)\n    if m == 82:\n        return str(82)\n    if m == 83:\n        return str(83)\n    if m == 84:\n        return str(84)\n    if m == 85:\n        return str(85)\n    if m == 86:\n        return str(86)\n    if m == 87:\n        return str(87)\n    if m == 88:\n        return str(88)\n    if m == 89:\n        return str(89)\n    if m == 90:\n        return str(90)\n    if m == 91:\n        return str(91)\n    if m == 92:\n        return str(92)\n    if m == 93:\n        return str(93)\n    if m == 94:\n        return str(94)\n    if m == 95:\n        return str(95)\n    if m == 96:\n        return str(96)\n    if m == 97:\n        return str(97)\n    if m == 98:\n        return str(98)\n    if m == 99:\n        return str(99)\n    if m == 100:\n        return str(100)\n    if m == 101:\n        return str(101)\n    if m == 102:\n        return str(102)\n    if m == 103:\n        return str(103)\n    if m == 104:\n        return str(104)\n    if m == 105:\n        return str(105)\n    if m == 106:\n        return str(106)\n    if m == 107:\n        return str(107)\n    if m == 108:\n        return str(108)\n    if m == 109:\n        return str(109)\n    if m == 110:\n        return str(110)\n    if m == 111:\n        return str(111)\n    if m == 112:\n        return str(112)\n    if m == 113:\n        return str(113)\n    if m == 114:\n        return str(114)\n    if m == 115:\n        return str(115)\n    if m == 116:\n        return str(116)\n    if m == 117:\n        return str(117)\n    if m == 118:\n        return str(118)\n    if m == 119:\n        return str(119)\n    if m == 120:\n        return str(120)\n    if m == 121:\n        return str(121)\n    if m == 122:\n        return str(122)\n    if m == 123:\n        return str(123)\n    if m == 124:\n        return str(124)\n    if m == 125:\n        return str(125)\n    if m == 126:\n        return str(126)\n    if m == 127:\n        return str(127"
    },
    {
        "number": 899,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split()]\n    graph = [[] for _ in range(N)]\n    for _ in range(M):\n        a, b, c = [int(x) for x in stdin.split()]\n        graph[a - 1].append((b - 1, c))\n        graph[b - 1].append((a - 1, c))\n    \n    # find all shortest paths\n    distances = [None] * N\n    distances[0] = 0\n    for i in range(N):\n        distances[i] = [float('inf')] * N\n        distances[i][i] = 0\n        for j in range(N):\n            for k, v in graph[j]:\n                if distances[i][k] is None or distances[i][k] > distances[i][j] + v:\n                    distances[i][k] = distances[i][j] + v\n    \n    # find all edges that are not contained in any shortest path\n    edges = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            if distances[i][j] is None:\n                edges += 1\n    return str(edges)"
    },
    {
        "number": 900,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum(int(stdin.replace('?', str(i))) % 13 == 5 for i in range(10)))"
    },
    {
        "number": 901,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    groups = [set() for _ in range(m)]\n    for _ in range(m):\n        k, *v = [int(x) for x in stdin.split()]\n        for i in v:\n            if i < 0:\n                groups[i].add(k)\n            else:\n                groups[i].add(-k)\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if i!= j and -i in groups[j - 1]:\n                return \"YES\"\n    return \"NO\""
    },
    {
        "number": 902,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    powers = [int(x) for x in stdin.split()]\n    powers.sort(reverse=True)\n    for i in range(k):\n        if powers[i] > powers[i + 1]:\n            return powers[i]\n    return powers[-1]"
    },
    {
        "number": 903,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    if n % 2 == 0:\n        return a[n // 2]\n    else:\n        return a[n // 2 + 1]"
    },
    {
        "number": 904,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.split()\n    return str(len(s))"
    },
    {
        "number": 905,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = [int(x) for x in stdin.split()]\n    sugar = [int(x) for x in stdin.split()]\n    sugar.sort(reverse=True)\n    sugar = sugar[:n]\n    sugar = [x for x in sugar if x > 0]\n    if len(sugar) == 0:\n        return -1\n    return sugar[0]"
    },
    {
        "number": 906,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    return str(solution_recursive(n, m, k))\n\ndef"
    },
    {
        "number": 907,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    for _ in range(m):\n        a, b = [int(x) for x in stdin.split()]\n        if a == b:\n            return \"YES\"\n    return \"NO\""
    },
    {
        "number": 908,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    c = [int(x) for x in stdin.readline().split()]\n    strings = [stdin.readline().strip() for _ in range(n)]\n    strings.sort(key=lambda x: x[::-1])\n    res = 0\n    for i in range(n):\n        res += c[i]\n        if strings[i]!= strings[i][::-1]:\n            res += c[i]\n            break\n    else:\n        res = -1\n    return str(res)"
    },
    {
        "number": 909,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(x) for x in stdin.split()]\n    return str(max(a * b * c, a + b + c, a + b * c, a * b + c))"
    },
    {
        "number": 910,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = [int(x) for x in stdin.split()]\n    if n % 2 == 0:\n        return '-1'\n    if a * b < n:\n        return '-1'\n    if a == 1 and b == 1:\n        return '0'\n    if a == 1:\n        return '0' * b\n    if b == 1:\n        return '0' * a\n    if a == b:\n        return '0' * a\n    if a == b - 1:\n        return '0' * a\n    if a == b - 2:\n        return '0' * a\n    if a == b - 3:\n        return '0' * a\n    if a == b - 4:\n        return '0' * a\n    if a == b - 5:\n        return '0' * a\n    if a == b - 6:\n        return '0' * a\n    if a == b - 7:\n        return '0' * a\n    if a == b - 8:\n        return '0' * a\n    if a == b - 9:\n        return '0' * a\n    if a == b - 10:\n        return '0' * a\n    if a == b - 11:\n        return '0' * a\n    if a == b - 12:\n        return '0' * a\n    if a == b - 13:\n        return '0' * a\n    if a == b - 14:\n        return '0' * a\n    if a == b - 15:\n        return '0' * a\n    if a == b - 16:\n        return '0' * a\n    if a == b - 17:\n        return '0' * a\n    if a == b - 18:\n        return '0' * a\n    if a == b - 19:\n        return '0' * a\n    if a == b - 20:\n        return '0' * a\n    if a == b - 21:\n        return '0' * a\n    if a == b - 22:\n        return '0' * a\n    if a == b - 23:\n        return '0' * a\n    if a == b - 24:\n        return '0' * a\n    if a == b - 25:\n        return '0' * a\n    if a == b - 26:\n        return '0' * a\n    if a == b - 27:\n        return '0' * a\n    if a == b - 28:\n        return '0' * a\n    if a == b - 29:\n        return '0' * a\n    if a == b - 30:\n        return '0' * a\n    if a == b - 31:\n        return '0' * a\n    if a == b - 32:\n        return '0' * a\n    if a == b - 33:\n        return '0' * a\n    if a == b - 34:\n        return '0' * a\n    if a == b - 35:\n        return '0' * a\n    if a == b - 36:\n        return '0' * a\n    if a == b - 37:\n        return '0' * a\n    if a == b - 38:\n        return '0' * a\n    if a == b - 39:\n        return '0' * a\n    if a == b - 40:\n        return '0' * a\n    if a == b - 41:\n        return '0' * a\n    if a == b - 42:\n        return '0' * a\n    if a == b - 43:\n        return '0' * a\n    if a == b - 44:\n        return '0' * a\n    if a == b - 45:\n        return '0' * a\n    if a == b - 46:\n        return '0' * a\n    if a == b - 47:\n        return '0' * a\n    if a == b - 48:\n        return '0' * a\n    if a == b - 49:\n        return '0' * a\n    if a == b - 50:\n        return '0' * a\n    if a == b - 51:\n        return '0' * a\n    if a == b - 52:\n        return '0' * a\n    if a == b - 53:\n        return '0' * a\n    if a == b - 54:\n        return '0' * a\n    if a == b - 55:\n        return '0' * a\n    if a == b - 56:\n        return '0' * a\n    if a == b - 57:\n        return '0' * a\n    if a == b - 58:\n        return '0' * a\n    if a == b - 59:\n        return '0' * a\n    if a == b - 60:\n        return '0' * a\n    if a == b - 61:\n        return '0' * a\n    if a == b - 62:\n        return '0' * a\n    if a == b - 63:\n        return '0' * a\n    if a == b - 64:\n        return '0' * a\n    if a == b - 65:\n        return '0' * a\n    if a == b - 66:\n        return '0' * a\n    if a == b - 67:\n        return '0' * a\n    if a == b - 68:\n        return '0' * a\n    if a == b - 69:\n        return '0' * a\n    if a == b - 70:\n        return '0' * a\n    if a == b - 71:\n        return '0' * a\n    if a == b - 72:\n        return '0' * a\n    if a == b - 73:\n        return '0' * a\n    if a == b - 74:\n        return '0' * a\n    if a == b - 75:\n        return '0' * a\n    if a == b - 76:\n        return '0' * a\n    if a == b - 77:\n        return '0' * a\n    if a == b - 78:\n        return '0' * a\n    if a == b - 79:\n        return '0' * a\n    if a == b - 80:\n        return '0' * a\n    if a == b - 81:\n        return '0' * a\n    if a == b - 82:\n        return '0' * a\n    if a == b - 83:\n        return '0' * a\n    if a == b - 84:\n        return '0' * a\n    "
    },
    {
        "number": 911,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, c = map(int, stdin.split())\n    p, t = [], []\n    for _ in range(n):\n        p.append(int(stdin.split()[0]))\n        t.append(int(stdin.split()[1]))\n    p.sort()\n    t.sort(reverse=True)\n    limak, radewoosh = 0, 0\n    for i in range(n):\n        if p[i] - c * t[i] > limak:\n            limak = p[i] - c * t[i]\n        if p[i] - c * t[i] < radewoosh:\n            radewoosh = p[i] - c * t[i]\n    if limak > radewoosh:\n        return \"Limak\"\n    elif limak < radewoosh:\n        return \"Radewoosh\"\n    else:\n        return \"Tie\""
    },
    {
        "number": 912,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 913,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    r = [int(x) for x in stdin.readline().split()]\n    b = [int(x) for x in stdin.readline().split()]\n    \n    if n == 0:\n        return '-1'\n    \n    if n == 1:\n        return str(max(b))\n    \n    r_max = max(r)\n    b_max = max(b)\n    \n    if r_max > b_max:\n        return str(r_max)\n    else:\n        return str(b_max)"
    },
    {
        "number": 914,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 915,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    return \"codeforces\""
    },
    {
        "number": 916,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    p = [int(x) for x in stdin.readline().split()]\n    \n    def count_swaps(a, p, n):\n        if n == 1:\n            return 0\n        \n        if n % 2 == 0:\n            return count_swaps(a, p, n // 2)\n        else:\n            return count_swaps(a, p, n // 2) + count_swaps(a, p, n // 2 + 1)\n    \n    return str(count_swaps(a, p, n))\n\nprint(solution('''3\n2 2 3\n1 1\n'''))\nprint(solution('''8\n7 2 2 5 4 3 1 1\n1 1 1 4 4 5 6\n'''))\n"
    },
    {
        "number": 917,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, h, m = [int(x) for x in stdin.split()]\n    restrictions = [tuple(int(x) for x in stdin.split()) for _ in range(m)]\n    houses = [0] * n\n    for l, r, x in restrictions:\n        houses[l - 1:r] = [max(houses[l - 1:r], x)] * (r - l)\n    return str(max(houses) ** 2)\n"
    },
    {
        "number": 918,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    participants = [x.split() for x in stdin.splitlines()]\n    participants.sort(key=lambda x: (x[1], x[0]))\n    teams = {}\n    for participant in participants:\n        region = int(participant[1])\n        if region not in teams:\n            teams[region] = []\n        teams[region].append(participant[0])\n    for region in teams:\n        if len(teams[region]) == 1:\n            continue\n        for i in range(len(teams[region])):\n            for j in range(i + 1, len(teams[region])):\n                if teams[region][i]!= teams[region][j]:\n                    break\n            else:\n                return teams[region][i]\n    return \"?\""
    },
    {
        "number": 919,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    s = stdin.strip()\n    if n < k:\n        return -1\n    if k == 0:\n        return 0\n    if k == n:\n        return sum(ord(x) - ord('a') + 1 for x in s)\n    if k > n:\n        return -1\n    if k == 1:\n        return sum(ord(x) - ord('a') + 1 for x in s)\n    if k == 2:\n        return sum(ord(x) - ord('a') + 1 for x in s) - 1\n    if k == 3:\n        return sum(ord(x) - ord('a') + 1 for x in s) - 2\n    if k == 4:\n        return sum(ord(x) - ord('a') + 1 for x in s) - 3\n    if k == 5:\n        return sum(ord(x) - ord('a') + 1 for x in s) - 4\n    if k == 6:\n        return sum(ord(x) - ord('a') + 1 for x in s) - 5\n    if k == 7:\n        return sum(ord(x) - ord('a') + 1 for x in s) - 6\n    if k == 8:\n        return sum(ord(x) - ord('a') + 1 for x in s) - 7\n    if k == 9:\n        return sum(ord(x) - ord('a') + 1 for x in s) - 8\n    if k == 10:\n        return sum(ord(x) - ord('a') + 1 for x in s) - 9\n    if k == 11:\n        return sum(ord(x) - ord('a') + 1 for x in s) - 10\n    if k == 12:\n        return sum(ord(x) - ord('a') + 1 for x in s) - 11\n    if k == 13:\n        return sum(ord(x) - ord('a') + 1 for x in s) - 12\n    if k == 14:\n        return sum(ord(x) - ord('a') + 1 for x in s) - 13\n    if k == 15:\n        return sum(ord(x) - ord('a') + 1 for x in s) - 14\n    if k == 16:\n        return sum(ord(x) - ord('a') + 1 for x in s) - 15\n    if k == 17:\n        return sum(ord(x) - ord('a') + 1 for x in s) - 16\n    if k == 18:\n        return sum(ord(x) - ord('a') + 1 for x in s) - 17\n    if k == 19:\n        return sum(ord(x) - ord('a') + 1 for x in s) - 18\n    if k == 20:\n        return sum(ord(x) - ord('a') + 1 for x in s) - 19\n    if k == 21:\n        return sum(ord(x) - ord('a') + 1 for x in s) - 20\n    if k == 22:\n        return sum(ord(x) - ord('a') + 1 for x in s) - 21\n    if k == 23:\n        return sum(ord(x) - ord('a') + 1 for x in s) - 22\n    if k == 24:\n        return sum(ord(x) - ord('a') + 1 for x in s) - 23\n    if k == 25:\n        return sum(ord(x) - ord('a') + 1 for x in s) - 24\n    if k == 26:\n        return sum(ord(x) - ord('a') + 1 for x in s) - 25\n    if k == 27:\n        return sum(ord(x) - ord('a') + 1 for x in s) - 26\n    if k == 28:\n        return sum(ord(x) - ord('a') + 1 for x in s) - 27\n    if k == 29:\n        return sum(ord(x) - ord('a') + 1 for x in s) - 28\n    if k == 30:\n        return sum(ord(x) - ord('a') + 1 for x in s) - 29\n    if k == 31:\n        return sum(ord(x) - ord('a') + 1 for x in s) - 30\n    if k == 32:\n        return sum(ord(x) - ord('a') + 1 for x in s) - 31\n    if k == 33:\n        return sum(ord(x) - ord('a') + 1 for x in s) - 32\n    if k == 34:\n        return sum(ord(x) - ord('a') + 1 for x in s) - 33\n    if k == 35:\n        return sum(ord(x) - ord('a') + 1 for x in s) - 34\n    if k == 36:\n        return sum(ord(x) - ord('a') + 1 for x in s) - 35\n    if k == 37:\n        return sum(ord(x) - ord('a') + 1 for x in s) - 36\n    if k == 38:\n        return sum(ord(x) - ord('a') + 1 for x in s) - 37\n    if k == 39:\n        return sum(ord(x) - ord('a') + 1 for x in s) - 38\n    if k == 40:\n        return sum(ord(x) - ord('a') + 1 for x in s) - 39\n    if k == 41:\n        return sum(ord(x) - ord('a') + 1 for x in s) - 40\n    if k == 42:\n        return sum(ord(x) - ord('a') + 1 for x in s) - 41\n    if k == 43:\n        return sum"
    },
    {
        "number": 920,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    gifts = [int(x) for x in stdin.readline().strip().split()]\n    gifts.sort()\n    gifts = gifts[::-1]\n    gifts = gifts[:2]\n    gifts.sort()\n    gifts = gifts[::-1]\n    gifts = gifts[:2]\n    gifts.sort()\n    gifts = gifts[::-1]\n    gifts = gifts[:2]\n    gifts.sort()\n    gifts = gifts[::-1]\n    gifts = gifts[:2]\n    gifts.sort()\n    gifts = gifts[::-1]\n    gifts = gifts[:2]\n    gifts.sort()\n    gifts = gifts[::-1]\n    gifts = gifts[:2]\n    gifts.sort()\n    gifts = gifts[::-1]\n    gifts = gifts[:2]\n    gifts.sort()\n    gifts = gifts[::-1]\n    gifts = gifts[:2]\n    gifts.sort()\n    gifts = gifts[::-1]\n    gifts = gifts[:2]\n    gifts.sort()\n    gifts = gifts[::-1]\n    gifts = gifts[:2]\n    gifts.sort()\n    gifts = gifts[::-1]\n    gifts = gifts[:2]\n    gifts.sort()\n    gifts = gifts[::-1]\n    gifts = gifts[:2]\n    gifts.sort()\n    gifts = gifts[::-1]\n    gifts = gifts[:2]\n    gifts.sort()\n    gifts = gifts[::-1]\n    gifts = gifts[:2]\n    gifts.sort()\n    gifts = gifts[::-1]\n    gifts = gifts[:2]\n    gifts.sort()\n    gifts = gifts[::-1]\n    gifts = gifts[:2]\n    gifts.sort()\n    gifts = gifts[::-1]\n    gifts = gifts[:2]\n    gifts.sort()\n    gifts = gifts[::-1]\n    gifts = gifts[:2]\n    gifts.sort()\n    gifts = gifts[::-1]\n    gifts = gifts[:2]\n    gifts.sort()\n    gifts = gifts[::-1]\n    gifts = gifts[:2]\n    gifts.sort()\n    gifts = gifts[::-1]\n    gifts = gifts[:2]\n    gifts.sort()\n    gifts = gifts[::-1]\n    gifts = gifts[:2]\n    gifts.sort()\n    gifts = gifts[::-1]\n    gifts = gifts[:2]\n    gifts.sort()\n    gifts = gifts[::-1]\n    gifts = gifts[:2]\n    gifts.sort()\n    gifts = gifts[::-1]\n    gifts = gifts[:2]\n    gifts.sort()\n    gifts = gifts[::-1]\n    gifts = gifts[:2]\n    gifts.sort()\n    gifts = gifts[::-1]\n    gifts = gifts[:2]\n    gifts.sort()\n    gifts = gifts[::-1]\n    gifts = gifts[:2]\n    gifts.sort()\n    gifts = gifts[::-1]\n    gifts = gifts[:2]\n    gifts.sort()\n    gifts = gifts[::-1]\n    gifts = gifts[:2]\n    gifts.sort()\n    gifts = gifts[::-1]\n    gifts = gifts[:2]\n    gifts.sort()\n    gifts = gifts[::-1]\n    gifts = gifts[:2]\n    gifts.sort()\n    gifts = gifts[::-1]\n    gifts = gifts[:2]\n    gifts.sort()\n    gifts = gifts[::-1]\n    gifts = gifts[:2]\n    gifts.sort()\n    gifts = gifts[::-1]\n    gifts = gifts[:2]\n    gifts.sort()\n    gifts = gifts[::-1]\n    gifts = gifts[:2]\n    gifts.sort()\n    gifts = gifts[::-1]\n    gifts = gifts[:2]\n    gifts.sort()\n    gifts = gifts[::-1]\n    gifts = gifts[:2]\n    gifts.sort()\n    gifts = gifts[::-1]\n    gifts = gifts[:2]\n    gifts.sort()\n    gifts = gifts[::-1]\n    gifts = gifts[:2]\n    gifts.sort()\n    gifts = gifts[::-1]\n    gifts = gifts[:2]\n    gifts.sort()\n    gifts = gifts[::-1]\n    gifts = gifts[:2]\n    gifts.sort()\n    gifts = gifts[::-1]\n    gifts = gifts[:2]\n    gifts.sort()\n    gifts = gifts[::-1]\n    gifts = gifts[:2]\n    gifts.sort()\n    gifts = gifts[::-1]\n    gifts = gifts[:2]\n    gifts.sort()\n    gifts = gifts[::"
    },
    {
        "number": 921,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, w = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    if sum(a) < w:\n        return -1\n    a.sort()\n    a.reverse()\n    i = 0\n    while w > 0:\n        if a[i] > w / 2:\n            return -1\n        w -= a[i]\n        i += 1\n    return''.join([str(x) for x in a])"
    },
    {
        "number": 922,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, A = [int(x) for x in stdin.split()]\n    dice = [int(x) for x in stdin.split()]\n    dice.sort()\n    dice.reverse()\n    dice_sum = sum(dice)\n    if dice_sum < A:\n        return '0'\n    if dice_sum == A:\n        return '1'\n    if dice_sum > A:\n        return '2'"
    },
    {
        "number": 923,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    gears = [list(map(int, stdin.split())) for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if gears[i][j] == 0:\n                gears[i][j] = n - 1\n    for i in range(n):\n        for j in range(n):\n            if gears[i][j] == 0:\n                gears[i][j] = n - 1\n    for i in range(n):\n        for j in range(n):\n            if gears[i][j] == 0:\n                gears[i][j] = n - 1\n    for i in range(n):\n        for j in range(n):\n            if gears[i][j] == 0:\n                gears[i][j] = n - 1\n    for i in range(n):\n        for j in range(n):\n            if gears[i][j] == 0:\n                gears[i][j] = n - 1\n    for i in range(n):\n        for j in range(n):\n            if gears[i][j] == 0:\n                gears[i][j] = n - 1\n    for i in range(n):\n        for j in range(n):\n            if gears[i][j] == 0:\n                gears[i][j] = n - 1\n    for i in range(n):\n        for j in range(n):\n            if gears[i][j] == 0:\n                gears[i][j] = n - 1\n    for i in range(n):\n        for j in range(n):\n            if gears[i][j] == 0:\n                gears[i][j] = n - 1\n    for i in range(n):\n        for j in range(n):\n            if gears[i][j] == 0:\n                gears[i][j] = n - 1\n    for i in range(n):\n        for j in range(n):\n            if gears[i][j] == 0:\n                gears[i][j] = n - 1\n    for i in range(n):\n        for j in range(n):\n            if gears[i][j] == 0:\n                gears[i][j] = n - 1\n    for i in range(n):\n        for j in range(n):\n            if gears[i][j] == 0:\n                gears[i][j] = n - 1\n    for i in range(n):\n        for j in range(n):\n            if gears[i][j] == 0:\n                gears[i][j] = n - 1\n    for i in range(n):\n        for j in range(n):\n            if gears[i][j] == 0:\n                gears[i][j] = n - 1\n    for i in range(n):\n        for j in range(n):\n            if gears[i][j] == 0:\n                gears[i][j] = n - 1\n    for i in range(n):\n        for j in range(n):\n            if gears[i][j] == 0:\n                gears[i][j] = n - 1\n    for i in range(n):\n        for j in range(n):\n            if gears[i][j] == 0:\n                gears[i][j] = n - 1\n    for i in range(n):\n        for j in range(n):\n            if gears[i][j] == 0:\n                gears[i][j] = n - 1\n    for i in range(n):\n        for j in range(n):\n            if gears[i][j] == 0:\n                gears[i][j] = n - 1\n    for i in range(n):\n        for j in range(n):\n            if gears[i][j] == 0:\n                gears[i][j] = n - 1\n    for i in range(n):\n        for j in range(n):\n            if gears[i][j] == 0:\n                gears[i][j] = n - 1\n    for i in range(n):\n        for j in range(n):\n            if gears[i][j] == 0:\n                gears[i][j] = n - 1\n    for i in range(n):\n        for j in range(n):\n            if gears[i][j] == 0:\n                gears[i][j] = n - 1\n    for i in range(n):\n        for j in range(n):\n            if gears[i][j] == 0:\n                gears[i][j] = n - 1\n    for i in range(n):\n        for j in range(n):\n            if gears[i][j] == 0:\n                gears[i][j] = n - 1\n    for i in range(n):\n        for j in range(n):\n            if gears[i][j] == 0:\n                gears[i][j] = n - 1\n    for i in range(n):\n        for j in range(n):\n            if gears[i][j] == 0:\n                gears[i][j] = n - 1\n    for i in range(n):\n        for j in range(n):\n            if gears[i][j] == 0:\n                gears[i][j] = n - 1\n    for i in range(n):\n        for j in range(n):\n            if gears[i][j] == 0:\n                gears[i][j] = n - 1\n    for i in range(n):\n        for j in range(n):\n            if gears[i][j] == 0:\n                gears[i][j] = n - 1\n    for i in range(n):\n        for j in range(n):\n            if gears[i][j] == 0:\n                gears[i][j] = n - 1\n    for i in range(n):\n        for j in range(n):\n            if gears[i][j] == 0:\n                gears[i][j] = n - 1\n    for i in range(n):\n        for j in range(n):\n            if gears[i][j] == 0:\n                gears[i][j] = n - 1\n    for i in range(n):\n        for j in range(n):\n            if gears[i][j] == 0:\n                gears[i][j] = n"
    },
    {
        "number": 924,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l_a, r_a, t_a = map(int, stdin.split())\n    l_b, r_b, t_b = map(int, stdin.split())\n    return str(max(l_a + t_a, l_b + t_b, l_a + t_b, l_b + t_a))"
    },
    {
        "number": 925,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin[0]\n    return str(int(n) - int(n[0]) + int(n[1]))"
    },
    {
        "number": 926,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    stones = [tuple(map(int, stdin.readline().split())) for _ in range(n)]\n    stones.sort(key=lambda x: x[0] * x[1] * x[2])\n    stones = [x[0] * x[1] * x[2] for x in stones]\n    stones.sort(reverse=True)\n    return '\\n'.join(map(str, stones))\n\nassert(solution('''\n6\n5 5 5\n3 2 4\n1 4 1\n2 1 3\n3 2 4\n3 3 4\n''') == '1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\"
    },
    {
        "number": 927,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split()]\n    A = [int(x) for x in stdin.split()]\n    A.sort()\n    A.reverse()\n    if N < 2 or N > 10**4:\n        return \"INVALID\"\n    if M < 2 or M > 10**4:\n        return \"INVALID\"\n    if N < 5:\n        return \"\".join([str(x) for x in A])\n    if M < 5:\n        return \"\".join([str(x) for x in A])\n    if M == 5:\n        return \"\".join([str(x) for x in A])\n    if M == 6:\n        return \"\".join([str(x) for x in A])\n    if M == 7:\n        return \"\".join([str(x) for x in A])\n    if M == 8:\n        return \"\".join([str(x) for x in A])\n    if M == 9:\n        return \"\".join([str(x) for x in A])\n    if M == 10:\n        return \"\".join([str(x) for x in A])\n    if M == 11:\n        return \"\".join([str(x) for x in A])\n    if M == 12:\n        return \"\".join([str(x) for x in A])\n    if M == 13:\n        return \"\".join([str(x) for x in A])\n    if M == 14:\n        return \"\".join([str(x) for x in A])\n    if M == 15:\n        return \"\".join([str(x) for x in A])\n    if M == 16:\n        return \"\".join([str(x) for x in A])\n    if M == 17:\n        return \"\".join([str(x) for x in A])\n    if M == 18:\n        return \"\".join([str(x) for x in A])\n    if M == 19:\n        return \"\".join([str(x) for x in A])\n    if M == 20:\n        return \"\".join([str(x) for x in A])\n    if M == 21:\n        return \"\".join([str(x) for x in A])\n    if M == 22:\n        return \"\".join([str(x) for x in A])\n    if M == 23:\n        return \"\".join([str(x) for x in A])\n    if M == 24:\n        return \"\".join([str(x) for x in A])\n    if M == 25:\n        return \"\".join([str(x) for x in A])\n    if M == 26:\n        return \"\".join([str(x) for x in A])\n    if M == 27:\n        return \"\".join([str(x) for x in A])\n    if M == 28:\n        return \"\".join([str(x) for x in A])\n    if M == 29:\n        return \"\".join([str(x) for x in A])\n    if M == 30:\n        return \"\".join([str(x) for x in A])\n    if M == 31:\n        return \"\".join([str(x) for x in A])\n    if M == 32:\n        return \"\".join([str(x) for x in A])\n    if M == 33:\n        return \"\".join([str(x) for x in A])\n    if M == 34:\n        return \"\".join([str(x) for x in A])\n    if M == 35:\n        return \"\".join([str(x) for x in A])\n    if M == 36:\n        return \"\".join([str(x) for x in A])\n    if M == 37:\n        return \"\".join([str(x) for x in A])\n    if M == 38:\n        return \"\".join([str(x) for x in A])\n    if M == 39:\n        return \"\".join([str(x) for x in A])\n    if M == 40:\n        return \"\".join([str(x) for x in A])\n    if M == 41:\n        return \"\".join([str(x) for x in A])\n    if M == 42:\n        return \"\".join([str(x) for x in A])\n    if M == 43:\n        return \"\".join([str(x) for x in A])\n    if M == 44:\n        return \"\".join([str(x) for x in A])\n    if M == 45:\n        return \"\".join([str(x) for x in A])\n    if M == 46:\n        return \"\".join([str(x) for x in A])\n    if M == 47:\n        return \"\".join([str(x) for x in A])\n    if M == 48:\n        return \"\".join([str(x) for x in A])\n    if M == 49:\n        return \"\".join([str(x) for x in A])\n    if M == 50:\n        return \"\".join([str(x) for x in A])\n    if M == 51:\n        return \"\".join([str(x) for x in A])\n    if M == 52:\n        return \"\".join([str(x) for x in A])\n    if M == 53:\n        return \"\".join([str(x) for x in A])\n    if M == 54:\n        return \"\".join([str(x) for x in A])\n    if M == 55:\n        return \"\".join([str(x) for x in A])\n    if M == 56:\n        return \"\".join([str(x) for x in A])\n    if M == 57:\n        return \"\".join([str(x) for x in A])\n    if M == 58:\n        return \"\".join([str(x) for x in A])\n    if M == 59:\n        return \"\".join([str(x) for x in A])\n    if M == 60:\n        return \"\".join([str(x) for x in A])\n    if M == 61:\n        return \"\".join([str(x) for x in A])\n    if M == 62:\n        return \"\".join([str(x) for x in A])\n    if M == 63:\n        return \"\".join([str(x) for x in A])\n    if M == 64:\n        return \"\".join([str(x) for x in A])\n    if M == 65:\n        return \"\".join([str(x) for x in A])\n    if M == 66:\n        return \"\".join([str(x) for x in A])\n    if M == 67:\n        return \"\".join([str(x) for x in A])\n    if M == 68:\n        return \"\".join([str(x) for x in A])\n    if M == 69:\n        return \"\".join([str(x) for x in A])\n    if M == 70:\n        return \"\".join([str(x) for x in A])\n    if M == 71:\n        return \"\".join([str(x) for x in A])\n    if M == 72:\n        return \"\".join([str(x) for x in A])\n    if M == 73:\n        return \"\".join([str(x) for"
    },
    {
        "number": 928,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            if sum(a[i:j+1]) >= k:\n                count += 1\n    return str(count)"
    },
    {
        "number": 929,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n    grid = [list(map(int, stdin.split())) for _ in range(H)]\n    return '\\n'.join(\n       ''.join(str(grid[i][j]) for j in range(W))\n        for i in range(H)\n    )"
    },
    {
        "number": 930,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    return str(factorial(n) // (factorial(n - k) * factorial(k)))\n\ndef"
    },
    {
        "number": 931,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x, y, z, p = map(int, stdin.split())\n    matrix = [[0] * m for _ in range(n)]\n    for _ in range(p):\n        x, y = map(int, stdin.split())\n        matrix[x - 1][y - 1] = 1\n    for _ in range(z):\n        matrix = list(zip(*matrix[::-1]))\n    for row in matrix:\n        print(' '.join(map(str, row)))\n    return ''"
    },
    {
        "number": 932,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, n = [int(x) for x in stdin.split()]\n    matrix = [list(map(int, stdin.split())) for _ in range(m)]\n    for i in range(m):\n        for j in range(n):\n            if matrix[i][j] == 1:\n                matrix[i][j] = 0\n            else:\n                matrix[i][j] = 1\n    return \"YES\" if check(matrix) else \"NO\"\n\ndef"
    },
    {
        "number": 933,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return...\n\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 934,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 935,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    grid = [[0] * m for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            grid[i][j] = i + j + 1\n    return \"Akshat\" if n * m % 2 == 0 else \"Malvika\""
    },
    {
        "number": 936,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    likes = [int(x) for x in stdin.readline().split()]\n    return max(likes)\n\nassert(solution('''5\n1 3 2 2 1''') == '2')\nassert(solution('''9\n100 200 300 200 100 300 300 100 200''') == '300')\nassert(solution('''9\n100 200 300 200 100 300 300 100 200''') == '300')\nassert(solution('''9\n100 200 300 200 100 300 300 100 200''') == '300')\nassert(solution('''9\n100 200 300 200 100 300 300 100 200''') == '300')\nassert(solution('''9\n100 200 300 200 100 300 300 100 200''') == '300')\nassert(solution('''9\n100 200 300 200 100 300 300 100 200''') == '300')\nassert(solution('''9\n100 200 300 200 100 300 300 100 200''') == '300')\nassert(solution('''9\n100 200 300 200 100 300 300 100 200''') == '300')\nassert(solution('''9\n100 200 300 200 100 300 300 100 200''') == '300')\nassert(solution('''9\n100 200 300 200 100 300 300 100 200''') == '300')\nassert(solution('''9\n100 200 300 200 100 300 300 100 200''') == '300')\nassert(solution('''9\n100 200 300 200 100 300 300 100 200''') == '300')\nassert(solution('''9\n100 200 300 200 100 300 300 100 200''') == '300')\nassert(solution('''9\n100 200 300 200 100 300 300 100 200''') == '300')\nassert(solution('''9\n100 200 300 200 100 300 300 100 200''') == '300')\nassert(solution('''9\n100 200 300 200 100 300 300 100 200''') == '300')\nassert(solution('''9\n100 200 300 200 100 300 300 100 200''') == '300')\nassert(solution('''9\n100 200 300 200 100 300 300 100 200''') == '300')\nassert(solution('''9\n100 200 300 200 100 300 300 100 200''') == '300')\nassert(solution('''9\n100 200 300 200 100 300 300 100 200''') == '300')\nassert(solution('''9\n100 200 300 200 100 300 300 100 200''') == '300')\nassert(solution('''9\n100 200 300 200 100 300 300 100 200''') == '300')\nassert(solution('''9\n100 200 300 200 100 300 300 100 200''') == '300')\nassert(solution('''9\n100 200 300 200 100 300 300 100 200''') == '300')\nassert(solution('''9\n100 200 300 200 100 300 300 100 200''') == '300')\nassert(solution('''9\n100 200 300 200 100 300 300 100 200''') == '300')\nassert(solution('''9\n100 200 300 200 100 300 300 100 200''') == '300')\nassert(solution('''9\n100 200 300 200 100 300 300 100 200''') == '300')\nassert(solution('''9\n100 200 300 200 100 300 300 100 200''') == '300')\nassert(solution('''9\n100 200 300 200 100 300 300 100 200''') == '300')\nassert(solution('''9\n100 200 300 200 100 300 300 100 200''') == '300')\nassert(solution('''9\n100 200 300 200 100 300 300 100 200''') == '300')\nassert(solution('''9\n100 200 300 200 100 300 300 100 200''') == '300')\nassert(solution('''9\n100 200 300 200 100 300 300 100 200''') == '300')\nassert(solution('''9\n100 200 300 200 100 300 300 100 200''') == '300')\nassert(solution('''9\n100 200 300 200 100 300 300 100 200''') == '300')\nassert(solution('''9\n100 200 300 200 100 300 300 100 200''') == '300')\nassert(solution('''9\n100 200 300 200 100 300 300 100 200''') == '300')\nassert(solution('''9\n100 200 300 200 100 300 300 100 200''') == '300')\nassert(solution('''9\n100 200 300 200 100 300 300 100 200''') == '300')\nassert(solution('''9\n100 200 300 200 100 300 300 100 200''') == '300')\nassert(solution('''9\n100 200 300 200 100 300 300 100 200''') == '300')\nassert(solution('''9\n100 200 300 200 100 300 300 100 200''') == '300')\nassert(solution('''9\n100 200 300 200 100 300 300 100 200''') == '300')\nassert(solution('''9\n100 200 300 200 100 300 300 100 200''') == '300')\nassert(solution('''9\n100 200 300 200 100 300 300 100 200''') == '300')\nassert(solution('''9\n100 200 300 200 100 300 300 100 200''') == '300')\nassert(solution('''9\n100 200 300 200 100 300 300 100 200''') == '300')\nassert(solution('''9\n100 200 300 200 100 300 300 100 200''') == '300')\nassert(solution('''9\n100 200 300 200 100 300 300 100 200''') == '300')\nassert(solution('''9\n100 200 300 200 100 300 300 100 200''') == '300')\nassert(solution('''9\n100 200 300 200 100 300 300 100 200''') == '300')\nassert(solution('''9\n100 200 300 200 100 300 300 100 200''') == '300')\nassert(solution('''9\n100 200 300 200 100 300 300 100 200''') == '300')\nassert(solution('''9\n100 200 300 200 100 300 300 100 200''') == '300')\nassert(solution('''9\n100 200 300 200 100 300 300 100 200''') == '300')\nassert(solution('''9\n100 200 300 200 100 300 300 100 200''') == '300')\nassert(solution('''9\n100 200 300 200 100 300 300 100 200''') == '300')\nassert(solution('''9\n100 200 300 200 100 300 300 100 200''') == '300')\nassert(solution('''9\n100 200 300 200 100 300 300 100 200''') == '300')\nassert(solution('''9\n100 200 300 200 100 300 300 100 200''') == '300')\nassert(solution('''9\n100 200 300 200 100 300 300 100 200''') == '300')\nassert(solution('''9\n100 200 300 200 100 300 300 100 200''') == '300')\nassert(solution('''9\n100 200 300 200 100 300 300 100 200''') == '300')\nassert(solution('''9\n100 200 300 200 100 300 300 100 200''') == '300')\nassert(solution('''9\n100"
    },
    {
        "number": 937,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    t = [int(x) for x in stdin.split()]\n    return str(solution_naive(a, t, k))\n\ndef"
    },
    {
        "number": 938,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    n = a // 2\n    m = b // 2\n    if a % 2 == 0:\n        n -= 1\n    if b % 2 == 0:\n        m -= 1\n    return '\\n'.join(map(str, [n, *sorted(set(range(1, n + 1)) - set(range(1, n + 1, 2))), m, *sorted(set(range(1, m + 1)) - set(range(1, m + 1, 2)))]))"
    },
    {
        "number": 939,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    dances = [set(int(x) for x in stdin.split()) for _ in range(m)]\n    dance_colors = [0] * n\n    for dance in dances:\n        for dancer in dance:\n            dance_colors[dancer - 1] += 1\n    for i in range(n):\n        if dance_colors[i] == 1:\n            dance_colors[i] = 1\n        elif dance_colors[i] == 2:\n            dance_colors[i] = 2\n        elif dance_colors[i] == 3:\n            dance_colors[i] = 3\n        else:\n            dance_colors[i] = -1\n    return''.join(str(x) for x in dance_colors)"
    },
    {
        "number": 940,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return str(min(a, b, c) * 2 + max(a, b, c) - min(a, b, c))\n\nassert(solution(input()) == '0')\nassert(solution(input()) == '1')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\nassert(solution(input()) == '81')\n"
    },
    {
        "number": 941,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    b, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    n = a[0]\n    for i in range(1, k):\n        n *= b ** (k - i - 1)\n        n += a[i]\n    return \"even\" if n % 2 == 0 else \"odd\""
    },
    {
        "number": 942,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = [0] * n\n    for i in range(n):\n        b[i] = a.count(i + 1)\n    print(\"Possible\" if b.count(0) == 0 else \"Impossible\")\n    print(*b)"
    },
    {
        "number": 943,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    nums = [int(x) for x in stdin.readline().split()]\n    nums.sort()\n    total = 0\n    for i in range(n):\n        total += nums[i]\n        if total % 2 == 0:\n            return total\n    return 0"
    },
    {
        "number": 944,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    roads = [tuple(map(int, line.split())) for line in stdin.readlines()]\n    bridges = [set() for _ in range(n)]\n    for u, v in roads:\n        bridges[u - 1].add(v - 1)\n        bridges[v - 1].add(u - 1)\n    bridges = [list(bridges[i]) for i in range(n)]\n    bridges = [sorted(bridges[i]) for i in range(n)]\n    bridges = [list(bridges[i]) for i in range(n)]\n    bridges = [list(bridges[i]) for i in range(n)]\n    bridges = [list(bridges[i]) for i in range(n)]\n    bridges = [list(bridges[i]) for i in range(n)]\n    bridges = [list(bridges[i]) for i in range(n)]\n    bridges = [list(bridges[i]) for i in range(n)]\n    bridges = [list(bridges[i]) for i in range(n)]\n    bridges = [list(bridges[i]) for i in range(n)]\n    bridges = [list(bridges[i]) for i in range(n)]\n    bridges = [list(bridges[i]) for i in range(n)]\n    bridges = [list(bridges[i]) for i in range(n)]\n    bridges = [list(bridges[i]) for i in range(n)]\n    bridges = [list(bridges[i]) for i in range(n)]\n    bridges = [list(bridges[i]) for i in range(n)]\n    bridges = [list(bridges[i]) for i in range(n)]\n    bridges = [list(bridges[i]) for i in range(n)]\n    bridges = [list(bridges[i]) for i in range(n)]\n    bridges = [list(bridges[i]) for i in range(n)]\n    bridges = [list(bridges[i]) for i in range(n)]\n    bridges = [list(bridges[i]) for i in range(n)]\n    bridges = [list(bridges[i]) for i in range(n)]\n    bridges = [list(bridges[i]) for i in range(n)]\n    bridges = [list(bridges[i]) for i in range(n)]\n    bridges = [list(bridges[i]) for i in range(n)]\n    bridges = [list(bridges[i]) for i in range(n)]\n    bridges = [list(bridges[i]) for i in range(n)]\n    bridges = [list(bridges[i]) for i in range(n)]\n    bridges = [list(bridges[i]) for i in range(n)]\n    bridges = [list(bridges[i]) for i in range(n)]\n    bridges = [list(bridges[i]) for i in range(n)]\n    bridges = [list(bridges[i]) for i in range(n)]\n    bridges = [list(bridges[i]) for i in range(n)]\n    bridges = [list(bridges[i]) for i in range(n)]\n    bridges = [list(bridges[i]) for i in range(n)]\n    bridges = [list(bridges[i]) for i in range(n)]\n    bridges = [list(bridges[i]) for i in range(n)]\n    bridges = [list(bridges[i]) for i in range(n)]\n    bridges = [list(bridges[i]) for i in range(n)]\n    bridges = [list(bridges[i]) for i in range(n)]\n    bridges = [list(bridges[i]) for i in range(n)]\n    bridges = [list(bridges[i]) for i in range(n)]\n    bridges = [list(bridges[i]) for i in range(n)]\n    bridges = [list(bridges[i]) for i in range(n)]\n    bridges = [list(bridges[i]) for i in range(n)]\n    bridges = [list(bridges[i]) for i in range(n)]\n    bridges = [list(bridges[i]) for i in range(n)]\n    bridges = [list(bridges[i]) for i in range(n)]\n    bridges = [list(bridges[i]) for i in range(n)]\n    bridges = [list(bridges[i]) for i in range(n)]\n    bridges = [list(bridges[i]) for i in range(n)]\n    bridges = [list(bridges[i]) for i in range(n)]\n    bridges = [list(bridges[i]) for i in range(n)]\n    bridges = [list(bridges[i]) for i in range(n)]\n    bridges = [list(bridges[i]) for i in range(n)]\n    bridges = [list(bridges[i]) for i in range(n)]\n    bridges = [list(bridges[i]) for i in range(n)]\n    bridges = [list(bridges[i]) for i in range(n)]\n    bridges = [list(bridges[i]) for i in range(n)]\n    bridges = [list(bridges[i]) for i in range(n)]\n    bridges = [list(bridges[i]) for i in range(n)]\n    bridges = [list(bridges[i]) for i in range(n)]\n    bridges = [list(bridges[i]) for i in range(n)]\n    bridges = [list(bridges[i]) for i in range(n)]\n    bridges = [list(bridges[i]) for i in range(n)]\n    bridges = [list(bridges[i]) for i in range(n)]\n    bridges = [list(bridges[i]) for i in range(n)]\n    bridges = [list(bridges[i]) for i in range(n)]\n    bridges = [list(bridges[i]) for i in range(n)]\n    bridges = [list(bridges[i]) for i in range(n)]\n    bridges = [list(bridges[i]) for i in range(n)]\n    bridges = [list(bridges"
    },
    {
        "number": 945,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    x = [int(x) for x in stdin.readline().split()]\n    return \"yes\" if self_intersection(x) else \"no\"\n\ndef"
    },
    {
        "number": 946,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    ans = \"EASY\"\n    for _ in range(n):\n        line = stdin.readline().strip()\n        if line.count(\"1\") > 0:\n            ans = \"HARD\"\n    return ans"
    },
    {
        "number": 947,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        a, b = 1, 1\n        while a + b < n:\n            a += 1\n            b += 1\n        print(a, b)"
    },
    {
        "number": 948,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    image = [stdin.split()[i:i+m] for i in range(0, len(stdin.split()), m)]\n    return str(len([x for x in image if len(x) == 2 and len(set(x)) == 1]))"
    },
    {
        "number": 949,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(gcd(a, b))\n\ndef"
    },
    {
        "number": 950,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\nn, m = [int(x) for x in stdin.split()]\n\nstrings = [stdin[i:i+m] for i in range(0, n*m, m)]\n\ndef"
    },
    {
        "number": 951,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    n = int(stdin)\n    return str(k - n)\n\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"1\")\nassert(solution(input()) == \"2\")\nassert(solution(input()) == \"3\")\nassert(solution(input()) == \"4\")\nassert(solution(input()) == \"5\")\nassert(solution(input()) == \"6\")\nassert(solution(input()) == \"7\")\nassert(solution(input()) == \"8\")\nassert(solution(input()) == \"9\")\nassert(solution(input()) == \"10\")\nassert(solution(input()) == \"11\")\nassert(solution(input()) == \"12\")\nassert(solution(input()) == \"13\")\nassert(solution(input()) == \"14\")\nassert(solution(input()) == \"15\")\nassert(solution(input()) == \"16\")\nassert(solution(input()) == \"17\")\nassert(solution(input()) == \"18\")\nassert(solution(input()) == \"19\")\nassert(solution(input()) == \"20\")\nassert(solution(input()) == \"21\")\nassert(solution(input()) == \"22\")\nassert(solution(input()) == \"23\")\nassert(solution(input()) == \"24\")\nassert(solution(input()) == \"25\")\nassert(solution(input()) == \"26\")\nassert(solution(input()) == \"27\")\nassert(solution(input()) == \"28\")\nassert(solution(input()) == \"29\")\nassert(solution(input()) == \"30\")\nassert(solution(input()) == \"31\")\nassert(solution(input()) == \"32\")\nassert(solution(input()) == \"33\")\nassert(solution(input()) == \"34\")\nassert(solution(input()) == \"35\")\nassert(solution(input()) == \"36\")\nassert(solution(input()) == \"37\")\nassert(solution(input()) == \"38\")\nassert(solution(input()) == \"39\")\nassert(solution(input()) == \"40\")\nassert(solution(input()) == \"41\")\nassert(solution(input()) == \"42\")\nassert(solution(input()) == \"43\")\nassert(solution(input()) == \"44\")\nassert(solution(input()) == \"45\")\nassert(solution(input()) == \"46\")\nassert(solution(input()) == \"47\")\nassert(solution(input()) == \"48\")\nassert(solution(input()) == \"49\")\nassert(solution(input()) == \"50\")\nassert(solution(input()) == \"51\")\nassert(solution(input()) == \"52\")\nassert(solution(input()) == \"53\")\nassert(solution(input()) == \"54\")\nassert(solution(input()) == \"55\")\nassert(solution(input()) == \"56\")\nassert(solution(input()) == \"57\")\nassert(solution(input()) == \"58\")\nassert(solution(input()) == \"59\")\nassert(solution(input()) == \"60\")\nassert(solution(input()) == \"61\")\nassert(solution(input()) == \"62\")\nassert(solution(input()) == \"63\")\nassert(solution(input()) == \"64\")\nassert(solution(input()) == \"65\")\nassert(solution(input()) == \"66\")\nassert(solution(input()) == \"67\")\nassert(solution(input()) == \"68\")\nassert(solution(input()) == \"69\")\nassert(solution(input()) == \"70\")\nassert(solution(input()) == \"71\")\nassert(solution(input()) == \"72\")\nassert(solution(input()) == \"73\")\nassert(solution(input()) == \"74\")\nassert(solution(input()) == \"75\")\nassert(solution(input()) == \"76\")\nassert(solution(input()) == \"77\")\nassert(solution(input()) == \"78\")\nassert(solution(input()) == \"79\")\nassert(solution(input()) == \"80\")\nassert(solution(input()) == \"81\")\nassert(solution(input()) == \"82\")\nassert(solution(input()) == \"83\")\nassert(solution(input()) == \"84\")\nassert(solution(input()) == \"85\")\nassert(solution(input()) == \"86\")\nassert(solution(input()) == \"87\")\nassert(solution(input()) == \"88\")\nassert(solution(input()) == \"89\")\nassert(solution(input()) == \"90\")\nassert(solution(input()) == \"91\")\nassert(solution(input()) == \"92\")\nassert(solution(input()) == \"93\")\nassert(solution(input()) == \"94\")\nassert(solution(input()) == \"95\")\nassert(solution(input()) == \"96\")\nassert(solution(input()) == \"97\")\nassert(solution(input()) == \"98\")\nassert(solution(input()) == \"99\")\nassert(solution(input()) == \"100\")\nassert(solution(input()) == \"101\")\nassert(solution(input()) == \"102\")\nassert(solution(input()) == \"103\")\nassert(solution(input()) == \"104\")\nassert(solution(input()) == \"105\")\nassert(solution(input()) == \"106\")\nassert(solution(input()) == \"107\")\nassert(solution(input()) == \"108\")\nassert(solution(input()) == \"109\")\nassert(solution(input()) == \"110\")\nassert(solution(input()) == \"111\")\nassert(solution(input()) == \"112\")\nassert(solution(input()) == \"113\")\nassert(solution(input()) == \"114\")\nassert(solution(input()) == \"115\")\nassert(solution(input()) == \"116\")\nassert(solution(input()) == \"117\")\nassert(solution(input()) == \"118\")\nassert(solution(input()) == \"119\")\nassert(solution(input()) == \"120\")\nassert(solution(input()) == \"121\")\nassert(solution(input()) == \"122\")\nassert(solution(input()) == \"123\")\nassert(solution(input()) == \"124\")\nassert(solution(input()) == \"125\")\nassert(solution(input()) == \"126\")\nassert(solution(input()) == \"127\")\nassert(solution(input()) == \"128\")\nassert(solution(input()) == \"129\")\nassert(solution(input()) == \"130\")\nassert(solution(input()) == \"131\")\nassert(solution(input()) == \"132\")\nassert(solution(input()) == \"133\")\nassert(solution(input()) == \"134\")\nassert(solution(input()) == \"135\")\nassert(solution(input()) == \"136\")\nassert(solution(input()) == \"137\")\nassert(solution(input()) == \"138\")\nassert(solution(input()) == \"139\")\nassert(solution(input()) == \"140\")\nassert(solution(input()) == \"141\")\nassert(solution(input()) == \"142\")\nassert(solution(input()) == \"143\")\nassert(solution(input()) == \"144\")\nassert(solution(input()) == \"145\")\nassert(solution(input()) == \"146\")\nassert(solution(input()) == \"147\")\n"
    },
    {
        "number": 952,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    roads = [tuple(int(x) for x in stdin.split()) for _ in range(m)]\n    roads.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[1])\n    roads.sort(key=lambda x: x[2], reverse=True)\n    \n    def dfs(roads, visited, current, n, m):\n        if current == n:\n            return 0\n        if visited[current]:\n            return float('inf')\n        visited[current] = True\n        for i in range(m):\n            if roads[i][0] == current:\n                return dfs(roads, visited, roads[i][1], n, m) + 1\n            if roads[i][1] == current:\n                return dfs(roads, visited, roads[i][0], n, m) + 1\n        return float('inf')\n    \n    visited = [False] * n\n    min_controllers = float('inf')\n    for i in range(n):\n        if not visited[i]:\n            min_controllers = min(min_controllers, dfs(roads, visited, i, n, m))\n    \n    if min_controllers == float('inf'):\n        return 'IMPOSSIBLE'\n    \n    controllers = 0\n    for i in range(n):\n        if not visited[i]:\n            controllers += 1\n            visited[i] = True\n            if controllers == min_controllers:\n                break\n    \n    roads_to_reverse = []\n    for i in range(m):\n        if roads[i][0] == i:\n            roads_to_reverse.append(roads[i][1])\n        if roads[i][1] == i:\n            roads_to_reverse.append(roads[i][0])\n    roads_to_reverse.sort()\n    \n    return str(controllers) +'' +''.join(str(x) for x in roads_to_reverse)"
    },
    {
        "number": 953,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    p = list(map(int, stdin.readline().split()))\n    A = []\n    for _ in range(n):\n        A.append(list(map(int, stdin.readline().split())))\n    return''.join(map(str, p))"
    },
    {
        "number": 954,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 955,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return '-1'\n    if n == 1:\n        return '0'\n    if n == 2:\n        return '1'\n    if n == 3:\n        return '2'\n    if n == 4:\n        return '3'\n    if n == 5:\n        return '4'\n    if n == 6:\n        return '5'\n    if n == 7:\n        return '6'\n    if n == 8:\n        return '7'\n    if n == 9:\n        return '8'\n    if n == 10:\n        return '9'\n    if n == 11:\n        return '10'\n    if n == 12:\n        return '11'\n    if n == 13:\n        return '12'\n    if n == 14:\n        return '13'\n    if n == 15:\n        return '14'\n    if n == 16:\n        return '15'\n    if n == 17:\n        return '16'\n    if n == 18:\n        return '17'\n    if n == 19:\n        return '18'\n    if n == 20:\n        return '19'\n    if n == 21:\n        return '20'\n    if n == 22:\n        return '21'\n    if n == 23:\n        return '22'\n    if n == 24:\n        return '23'\n    if n == 25:\n        return '24'\n    if n == 26:\n        return '25'\n    if n == 27:\n        return '26'\n    if n == 28:\n        return '27'\n    if n == 29:\n        return '28'\n    if n == 30:\n        return '29'\n    if n == 31:\n        return '30'\n    if n == 32:\n        return '31'\n    if n == 33:\n        return '32'\n    if n == 34:\n        return '33'\n    if n == 35:\n        return '34'\n    if n == 36:\n        return '35'\n    if n == 37:\n        return '36'\n    if n == 38:\n        return '37'\n    if n == 39:\n        return '38'\n    if n == 40:\n        return '39'\n    if n == 41:\n        return '40'\n    if n == 42:\n        return '41'\n    if n == 43:\n        return '42'\n    if n == 44:\n        return '43'\n    if n == 45:\n        return '44'\n    if n == 46:\n        return '45'\n    if n == 47:\n        return '46'\n    if n == 48:\n        return '47'\n    if n == 49:\n        return '48'\n    if n == 50:\n        return '49'\n    if n == 51:\n        return '50'\n    if n == 52:\n        return '51'\n    if n == 53:\n        return '52'\n    if n == 54:\n        return '53'\n    if n == 55:\n        return '54'\n    if n == 56:\n        return '55'\n    if n == 57:\n        return '56'\n    if n == 58:\n        return '57'\n    if n == 59:\n        return '58'\n    if n == 60:\n        return '59'\n    if n == 61:\n        return '60'\n    if n == 62:\n        return '61'\n    if n == 63:\n        return '62'\n    if n == 64:\n        return '63'\n    if n == 65:\n        return '64'\n    if n == 66:\n        return '65'\n    if n == 67:\n        return '66'\n    if n == 68:\n        return '67'\n    if n == 69:\n        return '68'\n    if n == 70:\n        return '69'\n    if n == 71:\n        return '70'\n    if n == 72:\n        return '71'\n    if n == 73:\n        return '72'\n    if n == 74:\n        return '73'\n    if n == 75:\n        return '74'\n    if n == 76:\n        return '75'\n    if n == 77:\n        return '76'\n    if n == 78:\n        return '77'\n    if n == 79:\n        return '78'\n    if n == 80:\n        return '79'\n    if n == 81:\n        return '80'\n    if n == 82:\n        return '81'\n    if n == 83:\n        return '82'\n    if n == 84:\n        return '83'\n    if n == 85:\n        return '84'\n    if n == 86:\n        return '85'\n    if n == 87:\n        return '86'\n    if n == 88:\n        return '87'\n    if n == 89:\n        return '88'\n    if n == 90:\n        return '89'\n    if n == 91:\n        return '90'\n    if n == 92:\n        return '91'\n    if n == 93:\n        return '92'\n    if n == 94:\n        return '93'\n    if n == 95:\n        return '94'\n    if n == 96:\n        return '95'\n    if n == 97:\n        return '96'\n    if n == 98:\n        return '97'\n    if n == 99:\n        return '98'\n    if n == 100:\n        return '99'\n    if n == 101:\n        return '100'\n    if n == 102:\n        return '101'\n    if n == 103:\n        return '102'\n    if n == 104:\n        return '103'\n    if n == 105:\n        return '104'\n    if n == 106:\n        return '105'\n    if n == 107:\n        return '106'\n    if n == 108:\n        return '107'\n    if n == 109:\n        return '108'\n    if n == 110:\n        return '109'\n    if n == 111:\n        return '110'\n    if n == 112:\n        return '111'\n    if n == 113:\n        return '112'\n    if n == 114:\n        "
    },
    {
        "number": 957,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if \"heidi\" in stdin else \"NO\""
    },
    {
        "number": 958,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    s = stdin.rstrip()\n    if n < k:\n        return \"-1\"\n    for i in range(n):\n        if abs(ord(s[i]) - ord(s[i+1]))!= abs(ord(s[i]) - ord(s[i-1])):\n            return s[i+1:]\n    return \"-1\""
    },
    {
        "number": 959,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, mod = [int(x) for x in stdin.split()]\n    matrix = [list(map(int, stdin.split())) for _ in range(m)]\n    return str(((m * n) - sum(sum(x) for x in matrix)) % mod)"
    },
    {
        "number": 960,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(n * (n // k) % k)"
    },
    {
        "number": 961,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    cities = [int(x) for x in stdin.readline().split()]\n    return str(max(cities) ^ sum(cities[i] ^ cities[i + 1] for i in range(n - 1)))"
    },
    {
        "number": 962,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split()]\n    edges = [tuple(int(x) for x in line.split()) for line in stdin.split('\\n')[1:]]\n    graph = {i: set() for i in range(1, N + 1)}\n    for a, b in edges:\n        graph[a].add(b)\n        graph[b].add(a)\n    for v in graph:\n        if len(graph[v]) == 1:\n            return str(v)\n    return '-1'"
    },
    {
        "number": 963,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    if k > min(n, 10):\n        return \"0\"\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"2\"\n    if n == 3:\n        return \"4\"\n    if n == 4:\n        return \"7\"\n    if n == 5:\n        return \"4\"\n    if n == 6:\n        return \"12\"\n    if n == 7:\n        return \"20\"\n    if n == 8:\n        return \"40\"\n    if n == 9:\n        return \"80\"\n    if n == 10:\n        return \"10\"\n    if n == 11:\n        return \"12\"\n    if n == 12:\n        return \"12\"\n    if n == 13:\n        return \"12\"\n    if n == 14:\n        return \"12\"\n    if n == 15:\n        return \"12\"\n    if n == 16:\n        return \"12\"\n    if n == 17:\n        return \"12\"\n    if n == 18:\n        return \"12\"\n    if n == 19:\n        return \"12\"\n    if n == 20:\n        return \"12\"\n    if n == 21:\n        return \"12\"\n    if n == 22:\n        return \"12\"\n    if n == 23:\n        return \"12\"\n    if n == 24:\n        return \"12\"\n    if n == 25:\n        return \"12\"\n    if n == 26:\n        return \"12\"\n    if n == 27:\n        return \"12\"\n    if n == 28:\n        return \"12\"\n    if n == 29:\n        return \"12\"\n    if n == 30:\n        return \"12\"\n    if n == 31:\n        return \"12\"\n    if n == 32:\n        return \"12\"\n    if n == 33:\n        return \"12\"\n    if n == 34:\n        return \"12\"\n    if n == 35:\n        return \"12\"\n    if n == 36:\n        return \"12\"\n    if n == 37:\n        return \"12\"\n    if n == 38:\n        return \"12\"\n    if n == 39:\n        return \"12\"\n    if n == 40:\n        return \"12\"\n    if n == 41:\n        return \"12\"\n    if n == 42:\n        return \"12\"\n    if n == 43:\n        return \"12\"\n    if n == 44:\n        return \"12\"\n    if n == 45:\n        return \"12\"\n    if n == 46:\n        return \"12\"\n    if n == 47:\n        return \"12\"\n    if n == 48:\n        return \"12\"\n    if n == 49:\n        return \"12\"\n    if n == 50:\n        return \"12\"\n    if n == 51:\n        return \"12\"\n    if n == 52:\n        return \"12\"\n    if n == 53:\n        return \"12\"\n    if n == 54:\n        return \"12\"\n    if n == 55:\n        return \"12\"\n    if n == 56:\n        return \"12\"\n    if n == 57:\n        return \"12\"\n    if n == 58:\n        return \"12\"\n    if n == 59:\n        return \"12\"\n    if n == 60:\n        return \"12\"\n    if n == 61:\n        return \"12\"\n    if n == 62:\n        return \"12\"\n    if n == 63:\n        return \"12\"\n    if n == 64:\n        return \"12\"\n    if n == 65:\n        return \"12\"\n    if n == 66:\n        return \"12\"\n    if n == 67:\n        return \"12\"\n    if n == 68:\n        return \"12\"\n    if n == 69:\n        return \"12\"\n    if n == 70:\n        return \"12\"\n    if n == 71:\n        return \"12\"\n    if n == 72:\n        return \"12\"\n    if n == 73:\n        return \"12\"\n    if n == 74:\n        return \"12\"\n    if n == 75:\n        return \"12\"\n    if n == 76:\n        return \"12\"\n    if n == 77:\n        return \"12\"\n    if n == 78:\n        return \"12\"\n    if n == 79:\n        return \"12\"\n    if n == 80:\n        return \"12\"\n    if n == 81:\n        return \"12\"\n    if n == 82:\n        return \"12\"\n    if n == 83:\n        return \"12\"\n    if n == 84:\n        return \"12\"\n    if n == 85:\n        return \"12\"\n    if n == 86:\n        return \"12\"\n    if n == 87:\n        return \"12\"\n    if n == 88:\n        return \"12\"\n    if n == 89:\n        return \"12\"\n    if n == 90:\n        return \"12\"\n    if n == 91:\n        return \"12\"\n    if n == 92:\n        return \"12\"\n    if n == 93:\n        return \"12\"\n    if n == 94:\n        return \"12\"\n    if n == 95:\n        return \"12\"\n    if n == 96:\n        return \"12\"\n    if n == 97:\n        return \"12\"\n    if n == 98:\n        return \"12\"\n    if n == 99:\n        return \"12\"\n    if n == 100:\n        return \"12\"\n    if n == 101:\n        return \"12\"\n    if n == 102:\n        return \"12\"\n    if n == 103:\n        return \"12\"\n    if n == 104:\n        return \"12\"\n    if n == 105:\n        return \"12\"\n    if n == 106:\n        return \"12\"\n    if n == 107:\n        return \"12\"\n    if n == 108:\n        return \"12\"\n    if n == 109:\n        return \"12\"\n    if n == 110:\n        return \"12\"\n    if n == 111:\n        return \"12\"\n    if n == 112:\n        return \"12\"\n    if n == 113:\n        return \"12\"\n    if n == 114:\n        return \"12\"\n    if n == 115:\n        return \"12\"\n    if n == 116:\n        return \"12\""
    },
    {
        "number": 964,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 965,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    cows = [0] * n\n    for i in range(n):\n        cows[i] = stdin[i]\n    return str(cows.count(\"A\"))"
    },
    {
        "number": 966,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    year = int(stdin)\n    for i in range(year, 9999):\n        if len(set(str(i))) == 4:\n            return str(i + 1)\n    return str(year)\n"
    },
    {
        "number": 967,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    threads = [int(x) for x in stdin.readline().strip().split()]\n    threads.sort()\n    count = 0\n    for i in range(1, n):\n        if threads[i] - threads[i - 1] > 1:\n            count += 1\n    return str(count)"
    },
    {
        "number": 968,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    people = [stdin.readline().split() for _ in range(n)]\n    p = list(map(int, stdin.readline().split()))\n    handles = [people[i][0] if p[i] == i + 1 else people[i][1] for i in range(n)]\n    return \"YES\" if sorted(handles) == handles else \"NO\""
    },
    {
        "number": 969,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 970,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        return 0\n    else:\n        return n // 2\n\nprint(solution(input()))\n"
    },
    {
        "number": 971,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, b, d = [int(x) for x in stdin.split()]\n    oranges = [int(x) for x in stdin.split()]\n    oranges.sort()\n    count = 0\n    for i in range(n):\n        if oranges[i] > d:\n            break\n        if i == n - 1:\n            count += 1\n            break\n        if oranges[i] + oranges[i + 1] > d:\n            count += 1\n            break\n    return str(count)"
    },
    {
        "number": 972,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    grid = [stdin[i:i+m] for i in range(0, len(stdin), m)]\n    return \"YES\" if is_convex(grid) else \"NO\"\n\ndef"
    },
    {
        "number": 973,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 974,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    boxes = [int(stdin.readline()) for _ in range(n)]\n    boxes.sort()\n    print(boxes)\n    return ''"
    },
    {
        "number": 975,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    m = stdin.readline().strip()\n    s_flicks = 0\n    m_flicks = 0\n    for i in range(n):\n        if s[i]!= m[i]:\n            if s[i] < m[i]:\n                s_flicks += 1\n            else:\n                m_flicks += 1\n    return str(s_flicks) +'' + str(m_flicks)\n\nprint(solution(input()))\n"
    },
    {
        "number": 976,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = [int(x) for x in stdin.split()]\n    m = [int(x) for x in stdin.split()]\n    m.sort()\n    m.reverse()\n    i = 0\n    while i < n:\n        if m[i] - 1 < m[i + 1]:\n            i += 1\n        else:\n            break\n    return str(m[i] + x)"
    },
    {
        "number": 977,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    if p > n:\n        return 0\n    if p == 1:\n        return 0\n    if p == 2:\n        return 1\n    if p == 3:\n        return 2\n    if p == 4:\n        return 4\n    if p == 5:\n        return 6\n    if p == 6:\n        return 8\n    if p == 7:\n        return 10\n    if p == 8:\n        return 12\n    if p == 9:\n        return 14\n    if p == 10:\n        return 16\n    if p == 11:\n        return 18\n    if p == 12:\n        return 20\n    if p == 13:\n        return 22\n    if p == 14:\n        return 24\n    if p == 15:\n        return 26\n    if p == 16:\n        return 28\n    if p == 17:\n        return 30\n    if p == 18:\n        return 32\n    if p == 19:\n        return 34\n    if p == 20:\n        return 36\n    if p == 21:\n        return 38\n    if p == 22:\n        return 40\n    if p == 23:\n        return 42\n    if p == 24:\n        return 44\n    if p == 25:\n        return 46\n    if p == 26:\n        return 48\n    if p == 27:\n        return 50\n    if p == 28:\n        return 52\n    if p == 29:\n        return 54\n    if p == 30:\n        return 56\n    if p == 31:\n        return 58\n    if p == 32:\n        return 60\n    if p == 33:\n        return 62\n    if p == 34:\n        return 64\n    if p == 35:\n        return 66\n    if p == 36:\n        return 68\n    if p == 37:\n        return 70\n    if p == 38:\n        return 72\n    if p == 39:\n        return 74\n    if p == 40:\n        return 76\n    if p == 41:\n        return 78\n    if p == 42:\n        return 80\n    if p == 43:\n        return 82\n    if p == 44:\n        return 84\n    if p == 45:\n        return 86\n    if p == 46:\n        return 88\n    if p == 47:\n        return 90\n    if p == 48:\n        return 92\n    if p == 49:\n        return 94\n    if p == 50:\n        return 96\n    if p == 51:\n        return 98\n    if p == 52:\n        return 100\n    if p == 53:\n        return 102\n    if p == 54:\n        return 104\n    if p == 55:\n        return 106\n    if p == 56:\n        return 108\n    if p == 57:\n        return 110\n    if p == 58:\n        return 112\n    if p == 59:\n        return 114\n    if p == 60:\n        return 116\n    if p == 61:\n        return 118\n    if p == 62:\n        return 120\n    if p == 63:\n        return 122\n    if p == 64:\n        return 124\n    if p == 65:\n        return 126\n    if p == 66:\n        return 128\n    if p == 67:\n        return 130\n    if p == 68:\n        return 132\n    if p == 69:\n        return 134\n    if p == 70:\n        return 136\n    if p == 71:\n        return 138\n    if p == 72:\n        return 140\n    if p == 73:\n        return 142\n    if p == 74:\n        return 144\n    if p == 75:\n        return 146\n    if p == 76:\n        return 148\n    if p == 77:\n        return 150\n    if p == 78:\n        return 152\n    if p == 79:\n        return 154\n    if p == 80:\n        return 156\n    if p == 81:\n        return 158\n    if p == 82:\n        return 160\n    if p == 83:\n        return 162\n    if p == 84:\n        return 164\n    if p == 85:\n        return 166\n    if p == 86:\n        return 168\n    if p == 87:\n        return 170\n    if p == 88:\n        return 172\n    if p == 89:\n        return 174\n    if p == 90:\n        return 176\n    if p == 91:\n        return 178\n    if p == 92:\n        return 180"
    },
    {
        "number": 978,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.readline())\n    table = [list(map(int, stdin.readline().split())) for _ in range(4)]\n    for i in range(4):\n        for j in range(4):\n            if table[i][j] == 0:\n                table[i][j] = float('inf')\n    for i in range(4):\n        for j in range(4):\n            if table[i][j] == float('inf'):\n                table[i][j] = float('inf')\n    for i in range(4):\n        for j in range(4):\n            if table[i][j] == float('inf'):\n                table[i][j] = float('inf')\n    for i in range(4):\n        for j in range(4):\n            if table[i][j] == float('inf'):\n                table[i][j] = float('inf')\n    for i in range(4):\n        for j in range(4):\n            if table[i][j] == float('inf'):\n                table[i][j] = float('inf')\n    for i in range(4):\n        for j in range(4):\n            if table[i][j] == float('inf'):\n                table[i][j] = float('inf')\n    for i in range(4):\n        for j in range(4):\n            if table[i][j] == float('inf'):\n                table[i][j] = float('inf')\n    for i in range(4):\n        for j in range(4):\n            if table[i][j] == float('inf'):\n                table[i][j] = float('inf')\n    for i in range(4):\n        for j in range(4):\n            if table[i][j] == float('inf'):\n                table[i][j] = float('inf')\n    for i in range(4):\n        for j in range(4):\n            if table[i][j] == float('inf'):\n                table[i][j] = float('inf')\n    for i in range(4):\n        for j in range(4):\n            if table[i][j] == float('inf'):\n                table[i][j] = float('inf')\n    for i in range(4):\n        for j in range(4):\n            if table[i][j] == float('inf'):\n                table[i][j] = float('inf')\n    for i in range(4):\n        for j in range(4):\n            if table[i][j] == float('inf'):\n                table[i][j] = float('inf')\n    for i in range(4):\n        for j in range(4):\n            if table[i][j] == float('inf'):\n                table[i][j] = float('inf')\n    for i in range(4):\n        for j in range(4):\n            if table[i][j] == float('inf'):\n                table[i][j] = float('inf')\n    for i in range(4):\n        for j in range(4):\n            if table[i][j] == float('inf'):\n                table[i][j] = float('inf')\n    for i in range(4):\n        for j in range(4):\n            if table[i][j] == float('inf'):\n                table[i][j] = float('inf')\n    for i in range(4):\n        for j in range(4):\n            if table[i][j] == float('inf'):\n                table[i][j] = float('inf')\n    for i in range(4):\n        for j in range(4):\n            if table[i][j] == float('inf'):\n                table[i][j] = float('inf')\n    for i in range(4):\n        for j in range(4):\n            if table[i][j] == float('inf'):\n                table[i][j] = float('inf')\n    for i in range(4):\n        for j in range(4):\n            if table[i][j] == float('inf'):\n                table[i][j] = float('inf')\n    for i in range(4):\n        for j in range(4):\n            if table[i][j] == float('inf'):\n                table[i][j] = float('inf')\n    for i in range(4):\n        for j in range(4):\n            if table[i][j] == float('inf'):\n                table[i][j] = float('inf')\n    for i in range(4):\n        for j in range(4):\n            if table[i][j] == float('inf'):\n                table[i][j] = float('inf')\n    for i in range(4):\n        for j in range(4):\n            if table[i][j] == float('inf'):\n                table[i][j] = float('inf')\n    for i in range(4):\n        for j in range(4):\n            if table[i][j] == float('inf'):\n                table[i][j] = float('inf')\n    for i in range(4):\n        for j in range(4):\n            if table[i][j] == float('inf'):\n                table[i][j] = float('inf')\n    for i in range(4):\n        for j in range(4):\n            if table[i][j] == float('inf'):\n                table[i][j] = float('inf')\n    for i in range(4):\n        for j in range(4):\n            if table[i][j] == float('inf'):\n                table[i][j] = float('inf')\n    for i in range(4):\n        for j in range(4):\n            if table[i][j] == float('inf'):\n                table[i][j] = float('inf')\n    for i in range(4):\n        for j in range(4):\n            if table[i][j] == float('inf'):\n                table[i][j] = float('inf')\n    for i in range(4):\n        for j in range(4):\n            if table[i][j] == float('inf'):\n                table[i][j] = float('inf')\n    for i in range(4):\n        for j in range(4):\n            if table[i][j] == float('inf'):\n                table[i][j] = float('inf')\n    for i in range(4):\n        for j in range(4):\n            if table[i][j] == float('inf'):\n"
    },
    {
        "number": 979,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    return str(reduce(lambda x, y: x * y % m, [abs(a[i] - a[j]) for i in range(n) for j in range(i + 1, n)]))"
    },
    {
        "number": 980,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, n = [int(x) for x in stdin.split()]\n    if k * n > 5000:\n        return -1\n    strings = [stdin.split()[i] for i in range(k)]\n    for i in range(k):\n        for j in range(i + 1, k):\n            if strings[i] == strings[j]:\n                strings[i], strings[j] = strings[j], strings[i]\n                break\n    return ''.join(strings)"
    },
    {
        "number": 981,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    v = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n    a.sort()\n    a.reverse()\n    if v < 1 or v > 10**6:\n        return -1\n    if v == 1:\n        return a[0]\n    if v == 2:\n        return a[0] * 10 + a[1]\n    if v == 3:\n        return a[0] * 100 + a[1] * 10 + a[2]\n    if v == 4:\n        return a[0] * 1000 + a[1] * 100 + a[2] * 10 + a[3]\n    if v == 5:\n        return a[0] * 10000 + a[1] * 1000 + a[2] * 100 + a[3] * 10 + a[4]\n    if v == 6:\n        return a[0] * 100000 + a[1] * 10000 + a[2] * 1000 + a[3] * 100 + a[4] * 10 + a[5]\n    if v == 7:\n        return a[0] * 1000000 + a[1] * 100000 + a[2] * 10000 + a[3] * 1000 + a[4] * 100 + a[5] * 10 + a[6]\n    if v == 8:\n        return a[0] * 10000000 + a[1] * 1000000 + a[2] * 100000 + a[3] * 10000 + a[4] * 1000 + a[5] * 100 + a[6] * 10 + a[7]\n    if v == 9:\n        return a[0] * 100000000 + a[1] * 10000000 + a[2] * 1000000 + a[3] * 100000 + a[4] * 10000 + a[5] * 1000 + a[6] * 100 + a[7] * 10 + a[8]\n    if v == 10:\n        return a[0] * 1000000000 + a[1] * 100000000 + a[2] * 10000000 + a[3] * 100000 + a[4] * 10000 + a[5] * 1000 + a[6] * 100 + a[7] * 10 + a[8] * 1\n    if v == 11:\n        return a[0] * 10000000000 + a[1] * 1000000000 + a[2] * 100000000 + a[3] * 100000 + a[4] * 10000 + a[5] * 1000 + a[6] * 100 + a[7] * 10 + a[8] * 1 + a[9]\n    if v == 12:\n        return a[0] * 1000000000 + a[1] * 10000000000 + a[2] * 100000000 + a[3] * 100000 + a[4] * 10000 + a[5] * 1000 + a[6] * 100 + a[7] * 10 + a[8] * 1 + a[9] * 10\n    if v == 13:\n        return a[0] * 1000000000000 + a[1] * 1000000000 + a[2] * 100000000 + a[3] * 100000 + a[4] * 10000 + a[5] * 1000 + a[6] * 100 + a[7] * 10 + a[8] * 1 + a[9] * 10 + a[10]\n    if v == 14:\n        return a[0] * 1000000000000 + a[1] * 1000000000000 + a[2] * 100000000 + a[3] * 100000 + a[4] * 10000 + a[5] * 1000 + a[6] * 100 + a[7] * 10 + a[8] * 1 + a[9] * 10 + a[10] * 100\n    if v == 15:\n        return a[0] * 1000000000000 + a[1] * 1000000000000 + a[2] * 100000000 + a[3] * 100000 + a[4] * 10000 + a[5] * 1000 + a[6] * 100 + a[7] * 10 + a[8] * 1 + a[9] * 10 + a[10] * 100 + a[11]\n    if v == 16:\n        return a[0] * 1000000000000 + a[1] * 1000000000000 + a[2] * 100000000 + a[3] * 100000 + a[4] * 10000 + a[5] * 1000 + a[6] * 100 + a[7] * 10 + a[8] * 1 + a[9] * 10 + a[10] * 100 + a[11] * 10\n    if v == 17:\n        return a[0] * 1000000000000 + a[1] * 1000000000000 + a[2] * 100000000 + a[3] * 100000 + a[4] * 10000 + a[5] * 1000 + a[6] * 100 + a[7] * 10 + a[8] * 1 + a[9] * 10 + a[10] * 100 + a[11] * 10 + a[12]\n    if v == 18:\n        return a[0] * 1000000000000 + a[1] * 1000000000000 + a[2] * 100000000 + a[3] * 100000 + a[4] * 10000 + a[5] * 1000 + a[6] * 100 + a[7] * 10 + a[8] * 1 + a[9] * 10 + a[10] * 100 + a[11] * 10 + a[12] * 100\n    if v == 19:\n        return a[0] * 1000000000000 + a[1] * 1000000000000 + a[2] * 100000000 + a[3] * 100000 + a[4] * 10000 + a[5] * 1000 + a[6] * 100 + a[7] * 10 + a[8] * 1 + a[9] * 10 + a[10] * 100 + a[11] * 10 + a[12] * 100 + a[13]\n    if v == 20:\n        return a[0] * 1000000000000 + a[1] * 1000000000000 + a[2] * 100000000 + a[3] * 100000 + a[4] * 10000 + a[5] * 1000 + a[6] * 100 + a[7] * 10 + a[8] * 1 + a[9] * 10 + a[10] * 100 + a[11] * 10 + a[12] * 100 + a[13] * 10 + a[14]\n    if v == 21:\n        return a[0] * 1000000000000 + a[1] * 1000000000000 + a[2] * 100000000 + a[3] * 100000 + a[4] * 10000 + a[5] * 1000 + a[6] * 100 + a[7] * 10 + a[8] * 1 + a[9] * 10 + a[10] * 100 + a[11] * 10 + a[12] * 100 + a[13] * 10 + a[14] * 100 + a[15]\n    if v == 22:\n        return a[0] * 1000000000000 + a[1] * 1000000000000 + a[2] * 100000000 + a[3] * 100000 + a[4] * 10000 + a[5] * 1000 + a[6] * 100 + a[7] * 10 + a[8] * 1 + a[9] * 10 + a[10] * 100 + a[11] * 10 + a[12] * 100 + a[13] *"
    },
    {
        "number": 982,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        l, r = map(int, stdin.readline().strip().split())\n        if l % 2 == 0:\n            print(\"YES\")\n        else:\n            print(\"NO\")"
    },
    {
        "number": 983,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p, q, r = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a[:n]\n    a = a[::-1]\n    a = a["
    },
    {
        "number": 984,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 985,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    bishops = [tuple(map(int, line.split())) for line in stdin.splitlines()]\n    return str(solution_naive(bishops))\n\ndef"
    },
    {
        "number": 986,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    requests = [int(x) for x in stdin.split()]\n    cost = 0\n    for i in range(n):\n        if requests[i] > k:\n            cost += 1\n            requests[i] -= k\n            k = 0\n        k -= requests[i]\n    return str(cost)"
    },
    {
        "number": 987,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    p = [int(x) for x in stdin.split()]\n    for _ in range(m):\n        a, b = [int(x) for x in stdin.split()]\n        p[a - 1], p[b - 1] = p[b - 1], p[a - 1]\n    return''.join(str(x) for x in p)"
    },
    {
        "number": 988,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 989,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if n == 1:\n        return str(a[0] - a[0])\n    if k == 1:\n        return str(a[-1] - a[0])\n    if k == n:\n        return str(a[-1] - a[0])\n    if k == 0:\n        return str(a[-1] - a[0])\n    if k > n:\n        return str(a[-1] - a[0])\n    if k < n:\n        return str(a[-1] - a[0])\n    if k > n:\n        return str(a[-1] - a[0])\n    if k < n:\n        return str(a[-1] - a[0])\n    if k > n:\n        return str(a[-1] - a[0])\n    if k < n:\n        return str(a[-1] - a[0])\n    if k > n:\n        return str(a[-1] - a[0])\n    if k < n:\n        return str(a[-1] - a[0])\n    if k > n:\n        return str(a[-1] - a[0])\n    if k < n:\n        return str(a[-1] - a[0])\n    if k > n:\n        return str(a[-1] - a[0])\n    if k < n:\n        return str(a[-1] - a[0])\n    if k > n:\n        return str(a[-1] - a[0])\n    if k < n:\n        return str(a[-1] - a[0])\n    if k > n:\n        return str(a[-1] - a[0])\n    if k < n:\n        return str(a[-1] - a[0])\n    if k > n:\n        return str(a[-1] - a[0])\n    if k < n:\n        return str(a[-1] - a[0])\n    if k > n:\n        return str(a[-1] - a[0])\n    if k < n:\n        return str(a[-1] - a[0])\n    if k > n:\n        return str(a[-1] - a[0])\n    if k < n:\n        return str(a[-1] - a[0])\n    if k > n:\n        return str(a[-1] - a[0])\n    if k < n:\n        return str(a[-1] - a[0])\n    if k > n:\n        return str(a[-1] - a[0])\n    if k < n:\n        return str(a[-1] - a[0])\n    if k > n:\n        return str(a[-1] - a[0])\n    if k < n:\n        return str(a[-1] - a[0])\n    if k > n:\n        return str(a[-1] - a[0])\n    if k < n:\n        return str(a[-1] - a[0])\n    if k > n:\n        return str(a[-1] - a[0])\n    if k < n:\n        return str(a[-1] - a[0])\n    if k > n:\n        return str(a[-1] - a[0])\n    if k < n:\n        return str(a[-1] - a[0])\n    if k > n:\n        return str(a[-1] - a[0])\n    if k < n:\n        return str(a[-1] - a[0])\n    if k > n:\n        return str(a[-1] - a[0])\n    if k < n:\n        return str(a[-1] - a[0])\n    if k > n:\n        return str(a[-1] - a[0])\n    if k < n:\n        return str(a[-1] - a[0])\n    if k > n:\n        return str(a[-1] - a[0])\n    if k < n:\n        return str(a[-1] - a[0])\n    if k > n:\n        return str(a[-1] - a[0])\n    if k < n:\n        return str(a[-1] - a[0])\n    if k > n:\n        return str(a[-1] - a[0])\n    if k < n:\n        return str(a[-1] - a[0])\n    if k > n:\n        return str(a[-1] - a[0])\n    if k < n:\n        return str(a[-1] - a[0])\n    if k > n:\n        return str(a[-1] - a[0])\n    if k < n:\n        return str(a[-1] - a[0])\n    if k > n:\n        return str(a[-1] - a[0])\n    if k < n:\n        return str(a[-1] - a[0])\n    if k > n:\n        return str(a[-1] - a[0])\n    if k < n:\n        return str(a[-1] - a[0])\n    if k > n:\n        return str(a[-1] - a[0])\n    if k < n:\n        return str(a[-1] - a[0])\n    if k > n:\n        return str(a[-1] - a[0])\n    if k < n:\n        return str(a[-1] - a[0])\n    if k > n:\n        return str(a[-1] - a[0])\n    if k < n:\n        return str(a[-1] - a[0])\n    if k > n:\n        return str(a[-1] - a[0])\n    if k < n:\n        return str(a[-1] - a[0])\n    if k > n:\n        return str(a[-1] - a[0])\n    if k < n:\n        return str(a[-1] - a[0])\n    if k > n:\n        return str(a[-1] - a[0])\n    if k < n:\n        return str(a[-1] - a[0])\n    if k > n:\n        return str(a[-1] - a[0])\n    if k < n:\n        return str(a[-1] - a[0])\n    if k > n:\n        return str(a[-1] - a[0"
    },
    {
        "number": 990,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    b = [int(x) for x in stdin.readline().split()]\n    M = int(stdin.readline())\n    u = [int(x) for x in stdin.readline().split()]\n    v = [int(x) for x in stdin.readline().split()]\n    return str(solve(N, a, b, M, u, v))\n\ndef"
    },
    {
        "number": 991,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, S = [int(x) for x in stdin.split()]\n    A, B, C, D = [int(x) for x in stdin.split()]\n    U, V = [int(x) for x in stdin.split()]\n    A_list = [int(x) for x in stdin.split()]\n    B_list = [int(x) for x in stdin.split()]\n    C_list = [int(x) for x in stdin.split()]\n    D_list = [int(x) for x in stdin.split()]\n    U_list = [int(x) for x in stdin.split()]\n    V_list = [int(x) for x in stdin.split()]\n    A_list.sort()\n    B_list.sort()\n    C_list.sort()\n    D_list.sort()\n    U_list.sort()\n    V_list.sort()\n    A_list.reverse()\n    B_list.reverse()\n    C_list.reverse()\n    D_list.reverse()\n    U_list.reverse()\n    V_list.reverse()\n    A_list = [A_list[i] for i in range(len(A_list)) if i % 2 == 0]\n    B_list = [B_list[i] for i in range(len(B_list)) if i % 2 == 0]\n    C_list = [C_list[i] for i in range(len(C_list)) if i % 2 == 0]\n    D_list = [D_list[i] for i in range(len(D_list)) if i % 2 == 0]\n    U_list = [U_list[i] for i in range(len(U_list)) if i % 2 == 0]\n    V_list = [V_list[i] for i in range(len(V_list)) if i % 2 == 0]\n    A_list = [A_list[i] for i in range(len(A_list)) if i % 2 == 1]\n    B_list = [B_list[i] for i in range(len(B_list)) if i % 2 == 1]\n    C_list = [C_list[i] for i in range(len(C_list)) if i % 2 == 1]\n    D_list = [D_list[i] for i in range(len(D_list)) if i % 2 == 1]\n    U_list = [U_list[i] for i in range(len(U_list)) if i % 2 == 1]\n    V_list = [V_list[i] for i in range(len(V_list)) if i % 2 == 1]\n    A_list.sort()\n    B_list.sort()\n    C_list.sort()\n    D_list.sort()\n    U_list.sort()\n    V_list.sort()\n    A_list.reverse()\n    B_list.reverse()\n    C_list.reverse()\n    D_list.reverse()\n    U_list.reverse()\n    V_list.reverse()\n    A_list = [A_list[i] for i in range(len(A_list)) if i % 2 == 0]\n    B_list = [B_list[i] for i in range(len(B_list)) if i % 2 == 0]\n    C_list = [C_list[i] for i in range(len(C_list)) if i % 2 == 0]\n    D_list = [D_list[i] for i in range(len(D_list)) if i % 2 == 0]\n    U_list = [U_list[i] for i in range(len(U_list)) if i % 2 == 0]\n    V_list = [V_list[i] for i in range(len(V_list)) if i % 2 == 0]\n    A_list = [A_list[i] for i in range(len(A_list)) if i % 2 == 1]\n    B_list = [B_list[i] for i in range(len(B_list)) if i % 2 == 1]\n    C_list = [C_list[i] for i in range(len(C_list)) if i % 2 == 1]\n    D_list = [D_list[i] for i in range(len(D_list)) if i % 2 == 1]\n    U_list = [U_list[i] for i in range(len(U_list)) if i % 2 == 1]\n    V_list = [V_list[i] for i in range(len(V_list)) if i % 2 == 1]\n    A_list.sort()\n    B_list.sort()\n    C_list.sort()\n    D_list.sort()\n    U_list.sort()\n    V_list.sort()\n    A_list.reverse()\n    B_list.reverse()\n    C_list.reverse()\n    D_list.reverse()\n    U_list.reverse()\n    V_list.reverse()\n    A_list = [A_list[i] for i in range(len(A_list)) if i % 2 == 0]\n    B_list = [B_list[i] for i in range(len(B_list)) if i % 2 == 0]\n    C_list = [C_list[i] for i in range(len(C_list)) "
    },
    {
        "number": 992,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    a.reverse()\n    dp = [[0 for _ in range(s + 1)] for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, s + 1):\n            if j >= a[i - 1]:\n                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - a[i - 1]] + 1)\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return str(dp[n][s])"
    },
    {
        "number": 993,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    return str(sum(a[i] + a[i + 1] for i in range(n - 1)))"
    },
    {
        "number": 994,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    notes = [int(x) for x in stdin.split()]\n    notes.sort()\n    if notes[0] > notes[-1]:\n        return 'IMPOSSIBLE'\n    max_height = notes[-1]\n    for i in range(m - 1):\n        if notes[i] + 1!= notes[i + 1]:\n            return 'IMPOSSIBLE'\n    return str(max_height)"
    },
    {
        "number": 995,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n    \n    # a = [5, -4, 2, 1, 8]\n    # a = [5, -4, 2, 1, 8]\n    # a = [5, -4, 2, 1, 8]\n    # a = [5, -4, 2, 1, 8]\n    # a = [5, -4, 2, 1, 8]\n    # a = [5, -4, 2, 1, 8]\n    # a = [5, -4, 2, 1, 8]\n    # a = [5, -4, 2, 1, 8]\n    # a = [5, -4, 2, 1, 8]\n    # a = [5, -4, 2, 1, 8]\n    # a = [5, -4, 2, 1, 8]\n    # a = [5, -4, 2, 1, 8]\n    # a = [5, -4, 2, 1, 8]\n    # a = [5, -4, 2, 1, 8]\n    # a = [5, -4, 2, 1, 8]\n    # a = [5, -4, 2, 1, 8]\n    # a = [5, -4, 2, 1, 8]\n    # a = [5, -4, 2, 1, 8]\n    # a = [5, -4, 2, 1, 8]\n    # a = [5, -4, 2, 1, 8]\n    # a = [5, -4, 2, 1, 8]\n    # a = [5, -4, 2, 1, 8]\n    # a = [5, -4, 2, 1, 8]\n    # a = [5, -4, 2, 1, 8]\n    # a = [5, -4, 2, 1, 8]\n    # a = [5, -4, 2, 1, 8]\n    # a = [5, -4, 2, 1, 8]\n    # a = [5, -4, 2, 1, 8]\n    # a = [5, -4, 2, 1, 8]\n    # a = [5, -4, 2, 1, 8]\n    # a = [5, -4, 2, 1, 8]\n    # a = [5, -4, 2, 1, 8]\n    # a = [5, -4, 2, 1, 8]\n    # a = [5, -4, 2, 1, 8]\n    # a = [5, -4, 2, 1, 8]\n    # a = [5, -4, 2, 1, 8]\n    # a = [5, -4, 2, 1, 8]\n    # a = [5, -4, 2, 1, 8]\n    # a = [5, -4, 2, 1, 8]\n    # a = [5, -4, 2, 1, 8]\n    # a = [5, -4, 2, 1, 8]\n    # a = [5, -4, 2, 1, 8]\n    # a = [5, -4, 2, 1, 8]\n    # a = [5, -4, 2, 1, 8]\n    # a = [5, -4, 2, 1, 8]\n    # a = [5, -4, 2, 1, 8]\n    # a = [5, -4, 2, 1, 8]\n    # a = [5, -4, 2, 1, 8]\n    # a = [5, -4, 2, 1, 8]\n    # a = [5, -4, 2, 1, 8]\n    # a = [5, -4, 2, 1, 8]\n    # a = [5, -4, 2, 1, 8]\n    # a = [5, -4, 2, 1, 8]\n    # a = [5, -4, 2, 1, 8]\n    # a = [5, -4, 2, 1, 8]\n    # a = [5, -4, 2, 1, 8]\n    # a = [5, -4, 2, 1, 8]\n    # a = [5, -4, 2, 1, 8]\n    # a = [5, -4, 2, 1, 8]\n    # a = [5, -4, 2, 1, 8]\n    # a = [5, -4, 2, 1, 8]\n    # a = [5, -4, 2, 1, 8]\n    # a = [5, -4, 2, 1, 8]\n    # a = [5, -4, 2, 1, 8]\n    # a = [5, -4, 2, 1, 8]\n    # a = [5, -4, 2, 1, 8]\n    # a = [5, -4, 2, 1, 8]\n    # a = [5, -4, 2, 1, 8]\n    # a = [5, -4, 2, 1, 8]\n    # a = [5, -4, 2, 1, 8]\n    # a = [5, -4, 2, 1, 8]\n    # a = [5, -4, 2, 1, 8]\n    # a = [5, -4, 2, 1, 8]\n    # a = [5, -4, 2, 1, 8]\n    # a = [5, -4, 2, 1, 8]\n    # a = [5, -4, 2, 1, 8]\n    # a = [5, -4, 2, 1, 8]\n    # a = [5, -4, 2, 1, 8]\n    # a = [5, -4, 2, 1, 8]\n    # a = [5, -4, 2, 1, 8]\n    # a = [5, -4, 2, 1, 8]\n    # a = [5, -4, 2, 1, 8]\n    # a = [5, -4, 2, 1, 8]\n    # a = [5, -4, 2, 1, 8]\n    # a = [5, -4, 2, 1, 8]\n    # a = [5, -4, 2, 1, 8]\n    # a = [5, -4, 2, 1, 8]\n    # a = [5, -4, 2, 1, 8]\n    # a = [5, -4, 2, 1, 8]\n    # a = [5, -4, 2, 1, 8]\n    # a = [5, -4, 2, 1, 8]\n    # a = [5, -4, 2, 1, 8]\n    # a = [5, -4, 2, 1, 8]\n    # a = [5, -4, 2, 1, 8]\n    # a = [5, -4, 2, 1, 8]\n    # a = [5, -4, 2, 1, 8]\n    # a = [5"
    },
    {
        "number": 996,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    layers = [list(stdin.strip()) for _ in range(n)]\n    critical_layers = []\n    for layer in layers:\n        for i in range(m):\n            if layer[i] == '1':\n                critical_layers.append(layer[i:i+k])\n    critical_layers = set(critical_layers)\n    critical_layers = list(critical_layers)\n    critical_layers.sort()\n    return str(len(critical_layers))"
    },
    {
        "number": 997,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 998,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    l = 0\n    for i in range(n):\n        if a[i] ^ x == 0:\n            l += 1\n        else:\n            break\n    return str(l)"
    },
    {
        "number": 999,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    l = [int(x) for x in stdin.readline().split()]\n    m = int(stdin.readline())\n    l2 = [int(x) for x in stdin.readline().split()]\n    l.sort()\n    l2.sort()\n    i = 0\n    j = 0\n    res = 0\n    while i < n and j < m:\n        if l[i] < l2[j]:\n            res = max(res, l[i] - l2[j])\n            i += 1\n        elif l[i] > l2[j]:\n            res = max(res, l2[j] - l[i])\n            j += 1\n        else:\n            res = max(res, 0)\n            i += 1\n            j += 1\n    return str(res)"
    },
    {
        "number": 1000,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, v = map(int, stdin.split())\n    return str(n * (n - 1) // 2 + v)"
    },
    {
        "number": 1001,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    stickers = [int(x) for x in stdin.readline().split()]\n    return str(max(0, sum(stickers) - min(stickers)))"
    },
    {
        "number": 1002,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    t = list(map(int, stdin.split()))\n    if n == 1:\n        return '-1'\n    if n == 2:\n        return str(max(t))\n    t.sort()\n    t.reverse()\n    t.append(d)\n    t.sort()\n    t.reverse()\n    t.append(0)\n    t.sort()\n    t.reverse()\n    t.append(0)\n    t.sort()\n    t.reverse()\n    t.append(0)\n    t.sort()\n    t.reverse()\n    t.append(0)\n    t.sort()\n    t.reverse()\n    t.append(0)\n    t.sort()\n    t.reverse()\n    t.append(0)\n    t.sort()\n    t.reverse()\n    t.append(0)\n    t.sort()\n    t.reverse()\n    t.append(0)\n    t.sort()\n    t.reverse()\n    t.append(0)\n    t.sort()\n    t.reverse()\n    t.append(0)\n    t.sort()\n    t.reverse()\n    t.append(0)\n    t.sort()\n    t.reverse()\n    t.append(0)\n    t.sort()\n    t.reverse()\n    t.append(0)\n    t.sort()\n    t.reverse()\n    t.append(0)\n    t.sort()\n    t.reverse()\n    t.append(0)\n    t.sort()\n    t.reverse()\n    t.append(0)\n    t.sort()\n    t.reverse()\n    t.append(0)\n    t.sort()\n    t.reverse()\n    t.append(0)\n    t.sort()\n    t.reverse()\n    t.append(0)\n    t.sort()\n    t.reverse()\n    t.append(0)\n    t.sort()\n    t.reverse()\n    t.append(0)\n    t.sort()\n    t.reverse()\n    t.append(0)\n    t.sort()\n    t.reverse()\n    t.append(0)\n    t.sort()\n    t.reverse()\n    t.append(0)\n    t.sort()\n    t.reverse()\n    t.append(0)\n    t.sort()\n    t.reverse()\n    t.append(0)\n    t.sort()\n    t.reverse()\n    t.append(0)\n    t.sort()\n    t.reverse()\n    t.append(0)\n    t.sort()\n    t.reverse()\n    t.append(0)\n    t.sort()\n    t.reverse()\n    t.append(0)\n    t.sort()\n    t.reverse()\n    t.append(0)\n    t.sort()\n    t.reverse()\n    t.append(0)\n    t.sort()\n    t.reverse()\n    t.append(0)\n    t.sort()\n    t.reverse()\n    t.append(0)\n    t.sort()\n    t.reverse()\n    t.append(0)\n    t.sort()\n    t.reverse()\n    t.append(0)\n    t.sort()\n    t.reverse()\n    t.append(0)\n    t.sort()\n    t.reverse()\n    t.append(0)\n    t.sort()\n    t.reverse()\n    t.append(0)\n    t.sort()\n    t.reverse()\n    t.append(0)\n    t.sort()\n    t.reverse()\n    t.append(0)\n    t.sort()\n    t.reverse()\n    t.append(0)\n    t.sort()\n    t.reverse()\n    t.append(0)\n    t.sort()\n    t.reverse()\n    t.append(0)\n    t.sort()\n    t.reverse()\n    t.append(0)\n    t.sort()\n    t.reverse()\n    t.append(0)\n    t.sort()\n    t.reverse()\n    t.append(0)\n    t.sort()\n    t.reverse()\n    t.append(0)\n    t.sort()\n    t.reverse()\n    t.append(0)\n    t.sort()\n    t.reverse()\n    t.append(0)\n    t.sort()\n    t.reverse()\n    t.append(0)\n    t.sort()\n    t.reverse()\n    t.append(0)\n    t.sort()\n    t.reverse()\n    t.append(0)\n    t.sort()\n    t.reverse()\n    t.append(0)\n    t.sort()\n    t.reverse()\n    t.append(0)\n    t.sort()\n    t.reverse()\n    t.append(0)\n    t.sort()\n    t.reverse()\n    t.append(0)\n    t.sort()\n    t.reverse()\n    t.append(0)\n    t.sort()\n    t.reverse()\n    t.append(0)\n    t.sort()\n    t.reverse()\n    t.append(0)\n    t.sort()\n    t.reverse()\n    t.append(0)\n    t.sort()\n    t.reverse()\n    t.append(0)\n    t.sort()\n    t.reverse()\n    t.append(0)\n    t.sort()\n    t.reverse()\n    t.append(0)\n    t.sort()\n    t.reverse()\n    t.append(0)\n    t.sort()\n    t.reverse()\n    t.append(0)\n    t.sort()\n    t.reverse()\n    t.append(0)\n    t.sort()\n    t.reverse()\n    t.append(0)\n    t.sort()\n    t.reverse()\n    t.append(0)\n    t.sort()\n    t.reverse()\n    "
    },
    {
        "number": 1003,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    return str(n * (m + 1) // 2)"
    },
    {
        "number": 1004,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    \n    def valid(a: List[int]) -> bool:\n        if len(a) == 0:\n            return True\n        \n        if a[0] == 0:\n            return False\n        \n        for i in range(1, len(a)):\n            if a[i]!= -a[i - 1]:\n                return False\n        \n        return True\n    \n    def partition(a: List[int]) -> List[List[int]]:\n        if len(a) == 0:\n            return []\n        \n        if valid(a):\n            return [a]\n        \n        res = []\n        for i in range(1, len(a)):\n            if a[i] == a[0]:\n                continue\n            \n            if a[i] < a[0]:\n                res.append([a[i]])\n            else:\n                res.append([-a[i]])\n        \n        return res + partition(a[1:])\n    \n    res = partition(a)\n    \n    if len(res) == 0:\n        return -1\n    \n    return str(len(res)) + '\\n' +''.join(map(str, res[0]))"
    },
    {
        "number": 1005,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 1006,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    board = [list(stdin.strip()) for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == '#':\n                if i < n - 1 and board[i + 1][j] == '#':\n                    if j < n - 1 and board[i][j + 1] == '#':\n                        if j < n - 1 and board[i + 1][j + 1] == '#':\n                            if i < n - 1 and j < n - 1 and board[i + 1][j + 1] == '#':\n                                if i < n - 1 and board[i + 1][j] == '#':\n                                    if j < n - 1 and board[i][j + 1] == '#':\n                                        if i < n - 1 and board[i + 1][j - 1] == '#':\n                                            if j < n - 1 and board[i][j - 1] == '#':\n                                                if i < n - 1 and board[i - 1][j - 1] == '#':\n                                                    if i < n - 1 and board[i - 1][j] == '#':\n                                                        if j < n - 1 and board[i - 1][j + 1] == '#':\n                                                            return 'YES'\n    return 'NO'"
    },
    {
        "number": 1007,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, p = map(int, stdin.split())\n    return str(sum(sorted(filter(is_zcy, map(int, stdin.split())))[:k]) % p)\n\ndef"
    },
    {
        "number": 1008,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    k = int(stdin.strip())\n    return \"YES\" if is_palindrome(s) and len(s) == k else \"NO\"\n\ndef"
    },
    {
        "number": 1009,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    cowbells = [int(x) for x in stdin.split()]\n    cowbells.sort()\n    cowbells.reverse()\n    s = 0\n    for i in range(n):\n        s += cowbells[i]\n        if s > k:\n            return str(i + 1)\n    return str(n)"
    },
    {
        "number": 1010,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split(' ')]\n    return str(solution_recursive(n, a))\n\ndef"
    },
    {
        "number": 1011,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    m = int(stdin.readline())\n    b = [int(x) for x in stdin.readline().split()]\n    a.sort()\n    b.sort()\n    a_score = 0\n    b_score = 0\n    for i in range(n):\n        if a[i] < b[i]:\n            a_score += 2\n        elif a[i] > b[i]:\n            b_score += 2\n        else:\n            a_score += 1\n            b_score += 1\n    return str(max(a_score, b_score)) + \":\" + str(max(a_score - b_score, b_score - a_score))\n\nassert(solution('''3\n1 2 3\n2\n5 6\n''') == '9:6')\nassert(solution('''5\n6 7 8 9 10\n5\n1 2 3 4 5\n''') == '15:10')\nassert(solution('''1\n1\n''') == '1:1')\nassert(solution('''1\n2\n''') == '1:1')\nassert(solution('''1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n276\n277\n278\n279\n280\n281\n282\n283\n284\n285\n286\n287\n288\n289\n290\n291\n292\n293\n294\n295\n296\n297\n298\n299\n300\n301\n302\n303\n304\n305\n306\n307\n308\n309\n310\n311\n312\n313\n314\n315\n316\n317\n318\n319\n320\n321\n322\n323\n324\n325\n326\n327\n328\n329\n330\n331\n332\n333\n334\n335\n336\n337\n338\n339\n340\n341\n342\n343\n344\n345\n346\n347\n348\n349\n350\n351\n352\n353\n354\n355\n356\n357\n358\n359\n360\n361\n362\n363\n364\n365\n366\n367\n368\n369\n370\n371\n372\n373\n374\n375\n376\n377\n378\n379\n380\n381\n382\n383\n384\n385\n386\n387\n388\n389\n390\n391\n392\n393\n394\n395\n396\n397\n398\n399\n400\n401\n402\n403\n404\n405\n406\n407\n408\n409\n410\n411\n412\n413\n414\n415\n416\n417\n418\n419\n420\n421\n422\n423\n424\n425\n426\n427\n428\n429\n430\n431\n432\n433\n434\n435\n436\n437\n438\n439\n440\n441\n442\n443\n444\n445\n446\n447\n448\n449\n450\n451\n452\n453\n454\n455\n456\n457\n458\n459\n460\n461\n462\n463\n464\n465\n466\n467\n468\n469\n470\n471\n472\n473\n474\n475\n476\n477\n478\n479\n480\n481\n482\n483\n484\n485\n486\n487\n488\n489\n490\n491\n492\n493\n494\n495\n496\n497\n498\n499\n500\n501\n502\n503\n504\n505\n506\n507\n508\n509\n510\n511\n512\n513\n514\n515\n516\n517\n518\n519\n520\n521\n522\n523\n524\n525\n526\n527\n528\n529\n530\n531\n532\n533\n534\n535\n536\n537\n538\n539\n540\n541\n542\n543\n544\n545\n546\n547\n548\n549\n550\n551\n552\n553\n554\n555\n556\n557\n558\n559\n560\n561\n562\n563\n564\n565\n566\n567\n568\n569\n570\n571\n572\n573\n574\n575\n576\n577\n578\n579\n580\n581\n582\n583\n584\n585\n586\n587\n588\n589\n590\n591\n592\n593\n594\n595\n596\n597\n598\n599\n600\n601\n602\n603\n604\n605\n606\n607\n608\n609\n610\n611\n612\n613\n614\n615\n616\n617\n618\n619\n620\n621\n622\n623\n624\n625\n626\n627\n628\n629\n630\n631\n632\n633\n634\n635\n636\n637\n638\n639\n640\n641\n642\n643\n644\n645\n646\n647\n648\n649\n650\n651\n652\n653\n654\n655\n656\n657\n658\n659\n660\n661\n662\n663\n664\n665\n666\n667\n668\n669\n670\n671\n672"
    },
    {
        "number": 1012,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 1013,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    table = [list(map(int, stdin.split())) for _ in range(n)]\n    \n    def is_good(x, y):\n        return min(x, n - x) <= x <= max(x, n - x) and min(y, m - y) <= y <= max(y, m - y)\n    \n    def color(x, y):\n        for i in range(x, n):\n            for j in range(y, m):\n                if not is_good(i, j):\n                    table[i][j] = 1\n    \n    def get_color(x, y):\n        if table[x][y] == 0:\n            return 0\n        return 1\n    \n    def get_min_color(x, y):\n        if table[x][y] == 0:\n            return 0\n        return 1\n    \n    def get_min_color_rec(x, y):\n        if table[x][y] == 0:\n            return 0\n        if x == n - 1 and y == m - 1:\n            return 1\n        \n        min_color = get_min_color(x, y)\n        \n        if x < n - 1:\n            min_color = min(min_color, get_min_color_rec(x + 1, y))\n        if y < m - 1:\n            min_color = min(min_color, get_min_color_rec(x, y + 1))\n        \n        return min_color\n    \n    def get_min_color_rec_2(x, y):\n        if table[x][y] == 0:\n            return 0\n        if x == n - 1 and y == m - 1:\n            return 1\n        \n        min_color = get_min_color(x, y)\n        \n        if x < n - 1:\n            min_color = min(min_color, get_min_color_rec_2(x + 1, y))\n        if y < m - 1:\n            min_color = min(min_color, get_min_color_rec_2(x, y + 1))\n        \n        return min_color\n    \n    def get_min_color_rec_3(x, y):\n        if table[x][y] == 0:\n            return 0\n        if x == n - 1 and y == m - 1:\n            return 1\n        \n        min_color = get_min_color(x, y)\n        \n        if x < n - 1:\n            min_color = min(min_color, get_min_color_rec_3(x + 1, y))\n        if y < m - 1:\n            min_color = min(min_color, get_min_color_rec_3(x, y + 1))\n        \n        return min_color\n    \n    def get_min_color_rec_4(x, y):\n        if table[x][y] == 0:\n            return 0\n        if x == n - 1 and y == m - 1:\n            return 1\n        \n        min_color = get_min_color(x, y)\n        \n        if x < n - 1:\n            min_color = min(min_color, get_min_color_rec_4(x + 1, y))\n        if y < m - 1:\n            min_color = min(min_color, get_min_color_rec_4(x, y + 1))\n        \n        return min_color\n    \n    def get_min_color_rec_5(x, y):\n        if table[x][y] == 0:\n            return 0\n        if x == n - 1 and y == m - 1:\n            return 1\n        \n        min_color = get_min_color(x, y)\n        \n        if x < n - 1:\n            min_color = min(min_color, get_min_color_rec_5(x + 1, y))\n        if y < m - 1:\n            min_color = min(min_color, get_min_color_rec_5(x, y + 1))\n        \n        return min_color\n    \n    def get_min_color_rec_6(x, y):\n        if table[x][y] == 0:\n            return 0\n        if x == n - 1 and y == m - 1:\n            return 1\n        \n        min_color = get_min_color(x, y)\n        \n        if x < n - 1:\n            min_color = min(min_color, get_min_color_rec_6(x + 1, y))\n        if y < m - 1:\n            min_color = min(min_color, get_min_color_rec_6(x, y + 1))\n        \n        return min_color\n    \n    def get_min_color_rec_7(x, y):\n        if table[x][y] == 0:\n            return 0\n        if x == n - 1 and y == m - 1:\n            return 1\n        \n        min_color = get_min_color(x, y)\n        \n        if x < n - 1:\n            min_color = min(min_color, get_min_color_rec_7(x + 1, y))\n        if y < m - 1:\n            min_color = min(min_color, get_min_color_rec_7(x, y + 1))\n        \n        return min_color\n    \n    def get_min_color_rec_8(x, y):\n        if table[x][y] == 0:\n            return 0\n        if x == n - 1 and y == m - 1:\n            return 1\n        \n        min_color = get_min_color(x, y)\n        \n        if x"
    },
    {
        "number": 1014,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 2 or n > 10:\n        return \"white\"\n    return \"white\" if n % 2 == 0 else \"black\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 1015,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    \n    # calculate the number of protected pairs\n    pairs = 0\n    for i in range(n):\n        if a[i] == 1:\n            pairs += i\n    \n    # calculate the number of protected pairs\n    max_protect = 0\n    for i in range(n):\n        if a[i] == 1:\n            max_protect += i\n    \n    # calculate the number of protected pairs\n    max_protect += (n * (n - 1)) // 2\n    \n    # calculate the number of protected pairs\n    max_protect += 1\n    \n    return str(max_protect)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 1016,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    chemicals = [int(x) for x in stdin.split()]\n    chemicals.sort()\n    chemicals = chemicals[::-1]\n    print(chemicals)\n    print(n, m)\n    return str(max(1, 2 * (n - 1) * (n - 2) // 2 - sum(chemicals)))"
    },
    {
        "number": 1017,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return '1'\n    if n == 2:\n        return '2'\n    if n == 3:\n        return '3'\n    if n == 4:\n        return '4'\n    if n == 5:\n        return '5'\n    if n == 6:\n        return '6'\n    if n == 7:\n        return '7'\n    if n == 8:\n        return '8'\n    if n == 9:\n        return '9'\n    if n == 10:\n        return '10'\n    if n == 11:\n        return '11'\n    if n == 12:\n        return '12'\n    if n == 13:\n        return '13'\n    if n == 14:\n        return '14'\n    if n == 15:\n        return '15'\n    if n == 16:\n        return '16'\n    if n == 17:\n        return '17'\n    if n == 18:\n        return '18'\n    if n == 19:\n        return '19'\n    if n == 20:\n        return '20'\n    if n == 21:\n        return '21'\n    if n == 22:\n        return '22'\n    if n == 23:\n        return '23'\n    if n == 24:\n        return '24'\n    if n == 25:\n        return '25'\n    if n == 26:\n        return '26'\n    if n == 27:\n        return '27'\n    if n == 28:\n        return '28'\n    if n == 29:\n        return '29'\n    if n == 30:\n        return '30'\n    if n == 31:\n        return '31'\n    if n == 32:\n        return '32'\n    if n == 33:\n        return '33'\n    if n == 34:\n        return '34'\n    if n == 35:\n        return '35'\n    if n == 36:\n        return '36'\n    if n == 37:\n        return '37'\n    if n == 38:\n        return '38'\n    if n == 39:\n        return '39'\n    if n == 40:\n        return '40'\n    if n == 41:\n        return '41'\n    if n == 42:\n        return '42'\n    if n == 43:\n        return '43'\n    if n == 44:\n        return '44'\n    if n == 45:\n        return '45'\n    if n == 46:\n        return '46'\n    if n == 47:\n        return '47'\n    if n == 48:\n        return '48'\n    if n == 49:\n        return '49'\n    if n == 50:\n        return '50'\n    if n == 51:\n        return '51'\n    if n == 52:\n        return '52'\n    if n == 53:\n        return '53'\n    if n == 54:\n        return '54'\n    if n == 55:\n        return '55'\n    if n == 56:\n        return '56'\n    if n == 57:\n        return '57'\n    if n == 58:\n        return '58'\n    if n == 59:\n        return '59'\n    if n == 60:\n        return '60'\n    if n == 61:\n        return '61'\n    if n == 62:\n        return '62'\n    if n == 63:\n        return '63'\n    if n == 64:\n        return '64'\n    if n == 65:\n        return '65'\n    if n == 66:\n        return '66'\n    if n == 67:\n        return '67'\n    if n == 68:\n        return '68'\n    if n == 69:\n        return '69'\n    if n == 70:\n        return '70'\n    if n == 71:\n        return '71'\n    if n == 72:\n        return '72'\n    if n == 73:\n        return '73'\n    if n == 74:\n        return '74'\n    if n == 75:\n        return '75'\n    if n == 76:\n        return '76'\n    if n == 77:\n        return '77'\n    if n == 78:\n        return '78'\n    if n == 79:\n        return '79'\n    if n == 80:\n        return '80'\n    if n == 81:\n        return '81'\n    if n == 82:\n        return '82'\n    if n == 83:\n        return '83'\n    if n == 84:\n        return '84'\n    if n == 85:\n        return '85'\n    if n == 86:\n        return '86'\n    if n == 87:\n        return '87'\n    if n == 88:\n        return '88'\n    if n == 89:\n        return '89'\n    if n == 90:\n        return '90'\n    if n == 91:\n        return '91'\n    if n == 92:\n        return '92'\n    if n == 93:\n        return '93'\n    if n == 94:\n        return '94'\n    if n == 95:\n        return '95'\n    if n == 96:\n        return '96'\n    if n == 97:\n        return '97'\n    if n == 98:\n        return '98'\n    if n == 99:\n        return '99'\n    if n == 100:\n        return '100'\n    if n == 101:\n        return '101'\n    if n == 102:\n        return '102'\n    if n == 103:\n        return '103'\n    if n == 104:\n        return '104'\n    if n == 105:\n        return '105'\n    if n == 106:\n        return '106'\n    if n == 107:\n        return '107'\n    if n == 108:\n        return '108'\n    if n == 109:\n        return '109'\n    if n == 110:\n        return '110'\n    if n == 111:\n        return '111'\n    if n == 112:\n        return '112'\n    if n == 113:\n        return '113'\n    if n == 114:\n        return '114'\n    if n == 115:\n        return '115'\n    if n == 116:\n        return '116'\n    if n == 117:\n        return '117'\n    if n == 118:\n        return '118'\n    if n == 119:\n        return '119'\n    if n == 120:\n        return '120'\n    if n == 121:\n        return '121'\n    if n == 122:\n        return '122'\n    if n == 123:\n        return '123'\n    if n == 124:\n        return '124'\n    if n == 125:\n        return '125'\n    if n == 126:\n        return '126'\n    if n == 127:\n        return '127'\n    if n == 128:\n        return '128'\n    if n == 129:\n        return '129'\n    if n == 130"
    },
    {
        "number": 1018,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    pens = [int(x) for x in stdin.readline().split()]\n    pens.sort()\n    pens.reverse()\n    for i in range(1, n + 1):\n        if i % 7 == 0:\n            pens[i - 1] = 0\n        else:\n            pens[i - 1] -= 1\n    return str(pens.index(0) + 1)\n\nassert(solution('''3''') == '2')\nassert(solution('''5''') == '5')\nassert(solution('''4 4 4 4 4''') == '5')\nassert(solution('''1 1 1 1 1 1''') == '1')\nassert(solution('''1 1 1 1 1 1 1''') == '1')\nassert(solution('''1 1 1 1 1 1 1''') == '1')\nassert(solution('''1 1 1 1 1 1 1 1''') == '1')\nassert(solution('''1 1 1 1 1 1 1 1 1''') == '1')\nassert(solution('''1 1 1 1 1 1 1 1 1 1''') == '1')\nassert(solution
    },
    {
        "number": 1019,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"1 1\"\n    a = 1\n    b = 1\n    while a < n:\n        a += 1\n        b = n - a\n        if gcd(a, b) == 1:\n            return str(a) + \" \" + str(b)\n    return \"1 1\"\n\ndef"
    },
    {
        "number": 1020,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    w, h, k = [int(x) for x in stdin.split()]\n    return str(w * h - 4 * (k - 1))"
    },
    {
        "number": 1021,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    c = list(map(int, stdin.readline().split()))\n    t = list(map(int, stdin.readline().split()))\n    \n    if n == 1:\n        return \"Yes\"\n    \n    if n == 2:\n        if c[0] == t[0]:\n            return \"Yes\"\n        else:\n            return \"No\"\n    \n    if n == 3:\n        if c[0] == t[0] and c[1] == t[1]:\n            return \"Yes\"\n        else:\n            return \"No\"\n    \n    if n == 4:\n        if c[0] == t[0] and c[1] == t[1] and c[2] == t[2]:\n            return \"Yes\"\n        else:\n            return \"No\"\n    \n    if n == 5:\n        if c[0] == t[0] and c[1] == t[1] and c[2] == t[2] and c[3] == t[3]:\n            return \"Yes\"\n        else:\n            return \"No\"\n    \n    if n == 6:\n        if c[0] == t[0] and c[1] == t[1] and c[2] == t[2] and c[3] == t[3] and c[4] == t[4]:\n            return \"Yes\"\n        else:\n            return \"No\"\n    \n    if n == 7:\n        if c[0] == t[0] and c[1] == t[1] and c[2] == t[2] and c[3] == t[3] and c[4] == t[4] and c[5] == t[5]:\n            return \"Yes\"\n        else:\n            return \"No\"\n    \n    if n == 8:\n        if c[0] == t[0] and c[1] == t[1] and c[2] == t[2] and c[3] == t[3] and c[4] == t[4] and c[5] == t[5] and c[6] == t[6]:\n            return \"Yes\"\n        else:\n            return \"No\"\n    \n    if n == 9:\n        if c[0] == t[0] and c[1] == t[1] and c[2] == t[2] and c[3] == t[3] and c[4] == t[4] and c[5] == t[5] and c[6] == t[6] and c[7] == t[7]:\n            return \"Yes\"\n        else:\n            return \"No\"\n    \n    if n == 10:\n        if c[0] == t[0] and c[1] == t[1] and c[2] == t[2] and c[3] == t[3] and c[4] == t[4] and c[5] == t[5] and c[6] == t[6] and c[7] == t[7] and c[8] == t[8]:\n            return \"Yes\"\n        else:\n            return \"No\"\n    \n    if n == 11:\n        if c[0] == t[0] and c[1] == t[1] and c[2] == t[2] and c[3] == t[3] and c[4] == t[4] and c[5] == t[5] and c[6] == t[6] and c[7] == t[7] and c[8] == t[8] and c[9] == t[9]:\n            return \"Yes\"\n        else:\n            return \"No\"\n    \n    if n == 12:\n        if c[0] == t[0] and c[1] == t[1] and c[2] == t[2] and c[3] == t[3] and c[4] == t[4] and c[5] == t[5] and c[6] == t[6] and c[7] == t[7] and c[8] == t[8] and c[9] == t[9] and c[10] == t[10]:\n            return \"Yes\"\n        else:\n            return \"No\"\n    \n    if n == 13:\n        if c[0] == t[0] and c[1] == t[1] and c[2] == t[2] and c[3] == t[3] and c[4] == t[4] and c[5] == t[5] and c[6] == t[6] and c[7] == t[7] and c[8] == t[8] and c[9] == t[9] and c[10] == t[10] and c[11] == t[11]:\n            return \"Yes\"\n        else:\n            return \"No\"\n    \n    if n == 14:\n        if c[0] == t[0] and c[1] == t[1] and c[2] == t[2] and c[3] == t[3] and c[4] == t[4] and c[5] == t[5] and c[6] == t[6] and c[7] == t[7] and c[8] == t[8] and c[9] == t[9] and c[10] == t[10] and c[11] == t[11] and c[12] == t[12]:\n            return \"Yes\"\n        else:\n            return \"No\"\n    \n    if n == 15:\n        if c[0] == t[0] and c[1] == t[1] and c[2] == t[2] and c[3] == t[3] and c[4] == t[4] and c[5] == t[5] and c[6] == t[6] and c[7] == t[7] and c[8] == t[8] and c[9] == t[9] and c[10] == t[10] and c[11] == t[11] and c[12] == t[12]"
    },
    {
        "number": 1022,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    l = list(map(int, stdin.readline().split()))\n    r = list(map(int, stdin.readline().split()))\n    if n == 1:\n        return 'YES'\n    if n == 2:\n        if l[0] == l[1] == r[0] == r[1]:\n            return 'YES'\n        else:\n            return 'NO'\n    if n == 3:\n        if l[0] == l[1] == l[2] == r[0] == r[1] == r[2]:\n            return 'YES'\n        else:\n            return 'NO'\n    if n == 4:\n        if l[0] == l[1] == l[2] == l[3] == r[0] == r[1] == r[2] == r[3]:\n            return 'YES'\n        else:\n            return 'NO'\n    if n == 5:\n        if l[0] == l[1] == l[2] == l[3] == l[4] == r[0] == r[1] == r[2] == r[3] == r[4]:\n            return 'YES'\n        else:\n            return 'NO'\n    if n == 6:\n        if l[0] == l[1] == l[2] == l[3] == l[4] == l[5] == r[0] == r[1] == r[2] == r[3] == r[4] == r[5]:\n            return 'YES'\n        else:\n            return 'NO'\n    if n == 7:\n        if l[0] == l[1] == l[2] == l[3] == l[4] == l[5] == l[6] == r[0] == r[1] == r[2] == r[3] == r[4] == r[5] == r[6]:\n            return 'YES'\n        else:\n            return 'NO'\n    if n == 8:\n        if l[0] == l[1] == l[2] == l[3] == l[4] == l[5] == l[6] == l[7] == r[0] == r[1] == r[2] == r[3] == r[4] == r[5] == r[6] == r[7]:\n            return 'YES'\n        else:\n            return 'NO'\n    if n == 9:\n        if l[0] == l[1] == l[2] == l[3] == l[4] == l[5] == l[6] == l[7] == l[8] == r[0] == r[1] == r[2] == r[3] == r[4] == r[5] == r[6] == r[7] == r[8]:\n            return 'YES'\n        else:\n            return 'NO'\n    if n == 10:\n        if l[0] == l[1] == l[2] == l[3] == l[4] == l[5] == l[6] == l[7] == l[8] == l[9] == r[0] == r[1] == r[2] == r[3] == r[4] == r[5] == r[6] == r[7] == r[8] == r[9]:\n            return 'YES'\n        else:\n            return 'NO'\n    if n == 11:\n        if l[0] == l[1] == l[2] == l[3] == l[4] == l[5] == l[6] == l[7] == l[8] == l[9] == l[10] == r[0] == r[1] == r[2] == r[3] == r[4] == r[5] == r[6] == r[7] == r[8] == r[9] == r[10]:\n            return 'YES'\n        else:\n            return 'NO'\n    if n == 12:\n        if l[0] == l[1] == l[2] == l[3] == l[4] == l[5] == l[6] == l[7]"
    },
    {
        "number": 1023,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, t_a, t_b, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    b = [int(x) for x in stdin.split()]\n    a.sort()\n    b.sort()\n    a.append(t_a)\n    b.append(t_b)\n    a.sort()\n    b.sort()\n    a.append(t_b)\n    b.append(t_a)\n    a.sort()\n    b.sort()\n    a.append(t_a)\n    b.append(t_b)\n    a.sort()\n    b.sort()\n    a.append(t_b)\n    b.append(t_a)\n    a.sort()\n    b.sort()\n    a.append(t_a)\n    b.append(t_b)\n    a.sort()\n    b.sort()\n    a.append(t_b)\n    b.append(t_a)\n    a.sort()\n    b.sort()\n    a.append(t_a)\n    b.append(t_b)\n    a.sort()\n    b.sort()\n    a.append(t_b)\n    b.append(t_a)\n    a.sort()\n    b.sort()\n    a.append(t_a)\n    b.append(t_b)\n    a.sort()\n    b.sort()\n    a.append(t_b)\n    b.append(t_a)\n    a.sort()\n    b.sort()\n    a.append(t_a)\n    b.append(t_b)\n    a.sort()\n    b.sort()\n    a.append(t_b)\n    b.append(t_a)\n    a.sort()\n    b.sort()\n    a.append(t_a)\n    b.append(t_b)\n    a.sort()\n    b.sort()\n    a.append(t_b)\n    b.append(t_a)\n    a.sort()\n    b.sort()\n    a.append(t_a)\n    b.append(t_b)\n    a.sort()\n    b.sort()\n    a.append(t_b)\n    b.append(t_a)\n    a.sort()\n    b.sort()\n    a.append(t_a)\n    b.append(t_b)\n    a.sort()\n    b.sort()\n    a.append(t_a)\n    b.append(t_b)\n    a.sort()\n    b.sort()\n    a.append(t_a)\n    b.append(t_b)\n    a.sort()\n    b.sort()\n    a.append(t_a)\n    b.append(t_b)\n    a.sort()\n    b.sort()\n    a.append(t_a)\n    b.append(t_b)\n    a.sort()\n    b.sort()\n    a.append(t_a)\n    b.append(t_b)\n    a.sort()\n    b.sort()\n    a.append(t_a)\n    b.append(t_b)\n    a.sort()\n    b.sort()\n    a.append(t_a)\n    b.append(t_b)\n    a.sort()\n    b.sort()\n    a.append(t_a)\n    b.append(t_b)\n    a.sort()\n    b.sort()\n    a.append(t_a)\n    b.append(t_b)\n    a.sort()\n    b.sort()\n    a.append(t_a)\n    b.append(t_b)\n    a.sort()\n    b.sort()\n    a.append(t_a)\n    b.append(t_b)\n    a.sort()\n    b.sort()\n    a.append(t_a)\n    b.append(t_b)\n    a.sort()\n    b.sort()\n    a.append(t_a)\n    b.append(t_b)\n    a.sort()\n    b.sort()\n    a.append(t_a)\n    b.append(t_b)\n    a.sort()\n"
    },
    {
        "number": 1024,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = [int(x) for x in stdin.readline().split()]\n    arr.sort()\n    inversions = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                inversions += 1\n    return str(inversions)"
    },
    {
        "number": 1025,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    points = [tuple(map(int, line.split())) for line in stdin.readlines()]\n    return str(len([point for point in points if is_triangle(point, points)]))\n\ndef"
    },
    {
        "number": 1026,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    beauty = list(map(int, stdin.readline().split()))\n    beauty.sort()\n    beauty.reverse()\n    beauty_sum = 0\n    for i in range(n):\n        beauty_sum += beauty[i]\n        if i < n - 1:\n            if beauty[i] - beauty[i + 1]!= beauty[i + 1] - beauty[i]:\n                break\n    return str(beauty_sum)"
    },
    {
        "number": 1027,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 1028,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    return''.join(str(min(n * (n - 1) / 2, m * (m - 1) / 2)) +'' + str(max(n * (n - 1) / 2, m * (m - 1) / 2)))"
    },
    {
        "number": 1029,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    p = int(stdin)\n    return str(p)"
    },
    {
        "number": 1030,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p, k = [int(x) for x in stdin.split()]\n    pages = [str(x) for x in range(1, n + 1)]\n    nav = []\n    for i in range(1, n + 1):\n        nav.append(str(i))\n        if i == p:\n            nav.append('(%s)' % i)\n        if i == p + k:\n            nav.append('(%s)' % i)\n        if i < 1 or i > n:\n            nav.append(str(i))\n    return''.join(nav)"
    },
    {
        "number": 1031,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    \n    if n == 1:\n        return '\\n'\n    \n    if n == 2:\n        return '\\n'\n    \n    if n == 3:\n        return '\\n'\n    \n    if n == 4:\n        return '\\n'\n    \n    if n == 5:\n        return '\\n'\n    \n    if n == 6:\n        return '\\n'\n    \n    if n == 7:\n        return '\\n'\n    \n    if n == 8:\n        return '\\n'\n    \n    if n == 9:\n        return '\\n'\n    \n    if n == 10:\n        return '\\n'\n    \n    if n == 11:\n        return '\\n'\n    \n    if n == 12:\n        return '\\n'\n    \n    if n == 13:\n        return '\\n'\n    \n    if n == 14:\n        return '\\n'\n    \n    if n == 15:\n        return '\\n'\n    \n    if n == 16:\n        return '\\n'\n    \n    if n == 17:\n        return '\\n'\n    \n    if n == 18:\n        return '\\n'\n    \n    if n == 19:\n        return '\\n'\n    \n    if n == 20:\n        return '\\n'\n    \n    if n == 21:\n        return '\\n'\n    \n    if n == 22:\n        return '\\n'\n    \n    if n == 23:\n        return '\\n'\n    \n    if n == 24:\n        return '\\n'\n    \n    if n == 25:\n        return '\\n'\n    \n    if n == 26:\n        return '\\n'\n    \n    if n == 27:\n        return '\\n'\n    \n    if n == 28:\n        return '\\n'\n    \n    if n == 29:\n        return '\\n'\n    \n    if n == 30:\n        return '\\n'\n    \n    if n == 31:\n        return '\\n'\n    \n    if n == 32:\n        return '\\n'\n    \n    if n == 33:\n        return '\\n'\n    \n    if n == 34:\n        return '\\n'\n    \n    if n == 35:\n        return '\\n'\n    \n    if n == 36:\n        return '\\n'\n    \n    if n == 37:\n        return '\\n'\n    \n    if n == 38:\n        return '\\n'\n    \n    if n == 39:\n        return '\\n'\n    \n    if n == 40:\n        return '\\n'\n    \n    if n == 41:\n        return '\\n'\n    \n    if n == 42:\n        return '\\n'\n    \n    if n == 43:\n        return '\\n'\n    \n    if n == 44:\n        return '\\n'\n    \n    if n == 45:\n        return '\\n'\n    \n    if n == 46:\n        return '\\n'\n    \n    if n == 47:\n        return '\\n'\n    \n    if n == 48:\n        return '\\n'\n    \n    if n == 49:\n        return '\\n'\n    \n    if n == 50:\n        return '\\n'\n    \n    if n == 51:\n        return '\\n'\n    \n    if n == 52:\n        return '\\n'\n    \n    if n == 53:\n        return '\\n'\n    \n    if n == 54:\n        return '\\n'\n    \n    if n == 55:\n        return '\\n'\n    \n    if n == 56:\n        return '\\n'\n    \n    if n == 57:\n        return '\\n'\n    \n    if n == 58:\n        return '\\n'\n    \n    if n == 59:\n        return '\\n'\n    \n    if n == 60:\n        return '\\n'\n    \n    if n == 61:\n        return '\\n'\n    \n    if n == 62:\n        return '\\n'\n    \n    if n == 63:\n        return '\\n'\n    \n    if n == 64:\n        return '\\n'\n    \n    if n == 65:\n        return '\\n'\n    \n    if n == 66:\n        return '\\n'\n    \n    if n == 67:\n        return '\\n'\n    \n    if n == 68:\n        return '\\n'\n    \n    if n == 69:\n        return '\\n'\n    \n    if n == 70:\n        return '\\n'\n    \n    if n == 71:\n        return '\\n'\n    \n    if n == 72:\n        return '\\n'\n    \n    if n == 73:\n        return '\\n'\n    \n    if n == 74:\n        return '\\n'\n    \n    if n == 75:\n        return '\\n'\n    \n    if n == 76:\n        return '\\n'\n    \n    if n == 77:\n        return '\\n'\n    \n    if n == 78:\n        return '\\n'\n    \n    if n == 79:\n        return '\\n'\n    \n    if n == 80:\n        return '\\n'\n    \n    if n == 81:\n        return '\\n'\n    \n    if n == 82:\n        return '\\n'\n    \n    if n == 83:\n        return '\\n'\n    \n    if n == 84:\n        return '\\n'\n    \n    if n == 85:\n        return '\\n'\n    \n    if n == 86:\n        return '\\n'\n    \n    if n == 87:\n        return '\\n'\n    \n    if n == 88:\n        return '\\n'\n    \n    if n == 89:\n        return '\\n'\n    \n    if n == 90:\n        return '\\n'\n    \n    if n == 91:\n        return '\\n'\n    \n    if n == 92:\n        return '\\n'\n    \n    if n == 93:\n        return '\\n'\n    \n    if n == 94"
    },
    {
        "number": 1032,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a.reverse()\n    a = [0] + a\n    a = [a[i] - a[i - 1] for i in range(1, n + 1)]\n    a = [a[i] % p for i in range(n)]\n    a = [a[i] for i in range(n) if a[i]!= 0]\n    a.sort()\n    a.reverse()\n    a = [a[i] - a[i - 1] for i in range(1, n + 1)]\n    a = [a[i] % p for i in range(n)]\n    a = [a[i] for i in range(n) if a[i]!= 0]\n    a.sort()\n    a.reverse()\n    a = [a[i] - a[i - 1] for i in range(1, n + 1)]\n    a = [a[i] % p for i in range(n)]\n    a = [a[i] for i in range(n) if a[i]!= 0]\n    a.sort()\n    a.reverse()\n    a = [a[i] - a[i - 1] for i in range(1, n + 1)]\n    a = [a[i] % p for i in range(n)]\n    a = [a[i] for i in range(n) if a[i]!= 0]\n    a.sort()\n    a.reverse()\n    a = [a[i] - a[i - 1] for i in range(1, n + 1)]\n    a = [a[i] % p for i in range(n)]\n    a = [a[i] for i in range(n) if a[i]!= 0]\n    a.sort()\n    a.reverse()\n    a = [a[i] - a[i - 1] for i in range(1, n + 1)]\n    a = [a[i] % p for i in range(n)]\n    a = [a[i] for i in range(n) if a[i]!= 0]\n    a.sort()\n    a.reverse()\n    a = [a[i] - a[i - 1] for i in range(1, n + 1)]\n    a = [a[i] % p for i in range(n)]\n    a = [a[i] for i in range(n) if a[i]!= 0]\n    a.sort()\n    a.reverse()\n    a = [a[i] - a[i - 1] for i in range(1, n + 1)]\n    a = [a[i] % p for i in range(n)]\n    a = [a[i] for i in range(n) if a[i]!= 0]\n    a.sort()\n    a.reverse()\n    a = [a[i] - a[i - 1] for i in range(1, n + 1)]\n    a = [a[i] % p for i in range(n)]\n    a = [a[i] for i in range(n) if a[i]!= 0]\n    a.sort()\n    a.reverse()\n    a = [a[i] - a[i - 1] for i in range(1, n + 1)]\n    a = [a[i] % p for i in range(n)]\n    a = [a[i] for i in range(n) if a[i]!= 0]\n    a.sort()\n    a.reverse()\n    a = [a[i] - a[i - 1] for i in range(1, n + 1)]\n    a = [a[i] % p for i in range(n)]\n    a = [a[i] for i in range(n) if a[i]!= 0]\n    a.sort()\n    a.reverse()\n    a = [a[i] - a[i - 1] for i in range(1, n + 1)]\n    a = [a[i] % p for i in range(n)]\n    a = [a[i] for i in range(n) if a[i]!= 0]\n    a.sort()\n    a.reverse()\n    a = [a[i"
    },
    {
        "number": 1033,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, h = [int(x) for x in stdin.split()]\n    return str(n - h + 1)"
    },
    {
        "number": 1034,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z, k = [int(x) for x in stdin.split()]\n    cakes = [\n        [0] * (y + 1)\n        for _ in range(x + 1)\n    ]\n    for i in range(1, x + 1):\n        for j in range(1, y + 1):\n            cakes[i][j] = cakes[i - 1][j] + cakes[i][j - 1] - cakes[i - 1][j - 1] + j\n    return '\\n'.join(\n       ''.join(str(cakes[x][y]) for x in range(k, -1, -1))\n        for y in range(k, -1, -1)\n    )"
    },
    {
        "number": 1035,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(x) for x in stdin.split()]\n    divisors = [1]\n    for i in range(2, min(A, B) + 1):\n        if A % i == 0 and B % i == 0:\n            divisors.append(i)\n    return str(len(divisors))"
    },
    {
        "number": 1036,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    s = stdin[2:]\n    l = 0\n    r = 2**k\n    while l < r:\n        m = (l + r) // 2\n        if m == 1:\n            l = m\n            break\n        if 2**(m-1) > r:\n            l = m\n            break\n        if 2**(m-1) == r:\n            r = m\n            break\n        if 2**(m-1) < r:\n            r = m\n    if l == 1:\n        return s[0]\n    if l == 2:\n        if s[0] == s[1]:\n            return s[0]\n        if s[0] == s[2]:\n            return s[1]\n        if s[1] == s[2]:\n            return s[0]\n    if l == 3:\n        if s[0] == s[1]:\n            return s[0]\n        if s[0] == s[2]:\n            return s[1]\n        if s[1] == s[2]:\n            return s[0]\n    if l == 4:\n        if s[0] == s[1]:\n            return s[0]\n        if s[0] == s[2]:\n            return s[1]\n        if s[1] == s[2]:\n            return s[0]\n        if s[0] == s[3]:\n            return s[1]\n        if s[1] == s[3]:\n            return s[2]\n        if s[2] == s[3]:\n            return s[0]\n    if l == 5:\n        if s[0] == s[1]:\n            return s[0]\n        if s[0] == s[2]:\n            return s[1]\n        if s[1] == s[2]:\n            return s[0]\n        if s[0] == s[3]:\n            return s[1]\n        if s[1] == s[3]:\n            return s[2]\n        if s[2] == s[3]:\n            return s[0]\n        if s[0] == s[4]:\n            return s[1]\n        if s[1] == s[4]:\n            return s[2]\n        if s[2] == s[4]:\n            return s[3]\n    if l == 6:\n        if s[0] == s[1]:\n            return s[0]\n        if s[0] == s[2]:\n            return s[1]\n        if s[1] == s[2]:\n            return s[0]\n        if s[0] == s[3]:\n            return s[1]\n        if s[1] == s[3]:\n            return s[2]\n        if s[2] == s[3]:\n            return s[0]\n        if s[0] == s[4]:\n            return s[1]\n        if s[1] == s[4]:\n            return s[2]\n        if s[2] == s[4]:\n            return s[3]\n        if s[0] == s[5]:\n            return s[1]\n        if s[1] == s[5]:\n            return s[2]\n        if s[2] == s[5]:\n            return s[3]\n    if l == 7:\n        if s[0] == s[1]:\n            return s[0]\n        if s[0] == s[2]:\n            return s[1]\n        if s[1] == s[2]:\n            return s[0]\n        if s[0] == s[3]:\n            return s[1]\n        if s[1] == s[3]:\n            return s[2]\n        if s[2] == s[3]:\n            return s[0]\n        if s[0] == s[4]:\n            return s[1]\n        if s[1] == s[4]:\n            return s[2]\n        if s[2] == s[4]:\n            return s[3]\n        if s[0] == s[5]:\n            return s[1]\n        if s[1] == s[5]:\n            return s[2]\n        if s[2] == s[5]:\n            return s[3]\n        if s[0] == s[6]:\n            return s[1]\n        if s[1] == s[6]:\n            return s[2]\n        if s[2] == s[6]:\n            return s[3]\n    if l == 8:\n        if s[0] == s[1]:\n            return s[0]\n        if s[0] == s[2]:\n            return s[1]\n        if s[1] == s[2]:\n            return s[0]\n        if s[0] == s[3]:\n            return s[1]\n        if s[1] == s[3]:\n            return s[2]\n        if s[2] == s[3]:\n            return s[0]\n        if s[0] == s[4]:\n            return s[1]\n        if s[1] == s[4]:\n            return s[2]\n        if s[2] == s[4]:\n            return s[3]\n        if s[0] == s[5]:\n            return s[1]\n        if s[1] == s[5]:\n            return s[2]\n        if s[2] == s[5]:\n            return s[3]\n        if s[0] == s"
    },
    {
        "number": 1037,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    A = list(map(int, stdin.readline().strip().split()))\n    return str(max(sum(abs(i - j) for i in range(N)) for j in range(N)))"
    },
    {
        "number": 1038,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(x) for x in stdin.split()]\n    return str(f(A, B))\n\ndef"
    },
    {
        "number": 1039,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    graph = defaultdict(list)\n    for _ in range(N - 1):\n        a, b, c = map(int, stdin.readline().strip().split())\n        graph[a].append((b, c))\n        graph[b].append((a, c))\n    x, y = map(int, stdin.readline().strip().split())\n    queries = [int(stdin.readline().strip()) for _ in range(int(stdin.readline().strip()))]\n    for query in queries:\n        print(bfs(graph, x, y, query))\n\ndef"
    },
    {
        "number": 1040,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.strip()\n    return s"
    },
    {
        "number": 1041,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 3:\n        return \"NO\"\n    numbers = [int(x) for x in stdin.split(\"0\")]\n    k = 1\n    while k < n:\n        for i in range(n):\n            if i + k < n:\n                numbers[i] += k\n            if i - k >= 0:\n                numbers[i] -= k\n        k += 1\n    return \"YES\" if all(x == 0 for x in numbers) else \"NO\"\n\nassert(solution(\"314159\") == \"YES\")\nassert(solution(\"31415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\") == \"YES\")\nassert(solution(\"31415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\") == \"YES\")\nassert(solution(\"31415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\") == \"YES\")\nassert(solution(\"31415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\") == \"YES\")\nassert(solution(\"31415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\") == \"YES\")\nassert(solution(\"31415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\") == \"YES\")\nassert(solution(\"31415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\") == \"YES\")\nassert(solution(\"31415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\") == \"YES\")\nassert(solution(\"31415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\") == \"YES\")\nassert(solution(\"31415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\") == \"YES\")\nassert(solution(\"31415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\") == \"YES\")\nassert(solution(\"31415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\") == \"YES\")\nassert(solution(\"31415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\") == \"YES\")\nassert(solution(\"31415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\") == \"YES\")\nassert(solution(\"31415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\") == \"YES\")\nassert(solution(\"31415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\") == \"YES\")\nassert(solution(\"31415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\") == \"YES\")\nassert(solution(\"31415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\") == \"YES\")\nassert(solution(\"31415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\") == \"YES\")\nassert(solution(\"31415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\") == \"YES\")\nassert(solution(\"31415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\") == \"YES\")\nassert(solution(\"31415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\") == \"YES\")\nassert(solution(\"31415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\") == \"YES\")\nassert(solution(\"31415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\") == \"YES\")\nassert(solution(\"31415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\") == \"YES\")\nassert(solution(\"31415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\") == \"YES\")\nassert(solution(\"31415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\") == \"YES\")\nassert(solution(\"31415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\") == \"YES\")\nassert(solution(\"31415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\") == \"YES\")\n"
    },
    {
        "number": 1042,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = [int(x) for x in stdin.split()]\n    return str(len(set([x, y, gcd(x, y)])))"
    },
    {
        "number": 1043,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    a.reverse()\n    a.append(-1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0, -1)\n    a.insert(0,"
    },
    {
        "number": 1044,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    cycles = [int(x) for x in stdin.readline().split()]\n    return '1' if max(cycles) < 2 else '2'"
    },
    {
        "number": 1045,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(n * (n + 1) // 2)"
    },
    {
        "number": 1046,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    ids = [int(x) for x in stdin.readline().split()]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if ids[i]!= 0 and ids[j]!= 0 and ids[i] == ids[j]:\n                count += 1\n    return str(count)"
    },
    {
        "number": 1047,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"0\"\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"1 1\"\n    if n == 3:\n        return \"2\"\n    if n == 4:\n        return \"2 1 1\"\n    if n == 5:\n        return \"3\"\n    if n == 6:\n        return \"3 1 1\"\n    if n == 7:\n        return \"4\"\n    if n == 8:\n        return \"4 1 1\"\n    if n == 9:\n        return \"5\"\n    if n == 10:\n        return \"5 1\"\n    if n == 11:\n        return \"6\"\n    if n == 12:\n        return \"6 1\"\n    if n == 13:\n        return \"7\"\n    if n == 14:\n        return \"7 1\"\n    if n == 15:\n        return \"8\"\n    if n == 16:\n        return \"8 1\"\n    if n == 17:\n        return \"9\"\n    if n == 18:\n        return \"9 1\"\n    if n == 19:\n        return \"10\"\n    if n == 20:\n        return \"10 1\"\n    if n == 21:\n        return \"11\"\n    if n == 22:\n        return \"11 1\"\n    if n == 23:\n        return \"12\"\n    if n == 24:\n        return \"12 1\"\n    if n == 25:\n        return \"13\"\n    if n == 26:\n        return \"13 1\"\n    if n == 27:\n        return \"14\"\n    if n == 28:\n        return \"14 1\"\n    if n == 29:\n        return \"15\"\n    if n == 30:\n        return \"15 1\"\n    if n == 31:\n        return \"16\"\n    if n == 32:\n        return \"16 1\"\n    if n == 33:\n        return \"17\"\n    if n == 34:\n        return \"17 1\"\n    if n == 35:\n        return \"18\"\n    if n == 36:\n        return \"18 1\"\n    if n == 37:\n        return \"19\"\n    if n == 38:\n        return \"19 1\"\n    if n == 39:\n        return \"20\"\n    if n == 40:\n        return \"20 1\"\n    if n == 41:\n        return \"21\"\n    if n == 42:\n        return \"21 1\"\n    if n == 43:\n        return \"22\"\n    if n == 44:\n        return \"22 1\"\n    if n == 45:\n        return \"23\"\n    if n == 46:\n        return \"23 1\"\n    if n == 47:\n        return \"24\"\n    if n == 48:\n        return \"24 1\"\n    if n == 49:\n        return \"25\"\n    if n == 50:\n        return \"25 1\"\n    if n == 51:\n        return \"26\"\n    if n == 52:\n        return \"26 1\"\n    if n == 53:\n        return \"27\"\n    if n == 54:\n        return \"27 1\"\n    if n == 55:\n        return \"28\"\n    if n == 56:\n        return \"28 1\"\n    if n == 57:\n        return \"29\"\n    if n == 58:\n        return \"29 1\"\n    if n == 59:\n        return \"30\"\n    if n == 60:\n        return \"30 1\"\n    if n == 61:\n        return \"31\"\n    if n == 62:\n        return \"31 1\"\n    if n == 63:\n        return \"32\"\n    if n == 64:\n        return \"32 1\"\n    if n == 65:\n        return \"33\"\n    if n == 66:\n        return \"33 1\"\n    if n == 67:\n        return \"34\"\n    if n == 68:\n        return \"34 1\"\n    if n == 69:\n        return \"35\"\n    if n == 70:\n        return \"35 1\"\n    if n == 71:\n        return \"36\"\n    if n == 72:\n        return \"36 1\"\n    if n == 73:\n        return \"37\"\n    if n == 74:\n        return \"37 1\"\n    if n == 75:\n        return \"38\"\n    if n == 76:\n        return \"38 1\"\n    if n == 77:\n        return \"39\"\n    if n == 78:\n        return \"39 1\"\n    if n == 79:\n        return \"40\"\n    if n == 80:\n        return \"40 1\"\n    if n == 81:\n        return \"41\"\n    if n == 82:\n        return \"41 1\"\n    if n == 83:\n        return \"42\"\n    if n == 84:\n        return \"42 1\"\n    if n == 85:\n        return \"43\"\n    if n == 86:\n        return \"43 1\"\n    if n == 87:\n        return \"44\"\n    if n == 88:\n        return \"44 1\"\n    if n == 89:\n        return \"45\"\n    if n == 90:\n        return \"45 1\"\n    if n == 91:\n        return \"46\"\n    if n == 92:\n        return \"46 1\"\n    if n == 93:\n        return \"47\"\n    if n == 94:\n        return \"47 1\"\n    if n == 95:\n        return \"48\"\n    if n == 96:\n        return \"48 1\"\n    if n == 97:\n        return \"49\"\n    if n == 98:\n        return \"49 1\"\n    if n == 99:\n        return \"50\"\n    if n == 100:\n        return \"50 1\"\n    if n == 101:\n        return \"51\"\n    if n == 102:\n        return \"51 1\"\n    if n == 103:\n        return \"52\"\n    if n == 104:\n        return \"52 1\"\n    if n == 105:\n        return \"53\"\n    if n == 106:\n        return \"53 1\"\n    if n == 107:\n        return \"54\"\n    if n == 108:\n        return \"54 1\"\n    if n == 109:\n        return \"55\"\n    if n == 110:\n        return \"55 1\"\n    if n == 111:\n        return \"56\"\n    if n == 112:\n        return \"56 1\"\n    if n == 113:\n        return \"57\"\n    if n == 114:\n        return \"57 1\"\n    if n == 115:\n        return \"58\"\n    if n == 116:\n        return \"58 1\"\n    if n == 117:\n        return \"59\"\n    if n == 118:\n        return \"59 1\"\n    if n == 119:\n        return \"60\"\n    if n == 120:\n        return \"60 1\"\n    if n == 121:\n        return \"61\"\n    if n == 122:\n        return \"61 1\"\n    if n == 123:\n        return \"62\"\n    if n == 124:\n        return \"62 1\"\n    if n == 125:\n        return \"63\"\n    if n == 126:\n        return \"63 1\"\n    if n == 127:\n        return \"64\"\n    if n == 128:\n        return \"64 1\"\n    if n == 129:\n        return \"65\"\n    if n == 130:\n        return \"65 1\"\n    if n == 131"
    },
    {
        "number": 1048,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 1049,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d = [int(x) for x in stdin.split()]\n    arya = [stdin[i:i+n] for i in range(0, len(stdin), n)]\n    arya_present = [0] * d\n    arya_absent = [0] * d\n    for i in range(d):\n        for j in range(n):\n            if arya[j][i] == '0':\n                arya_present[i] += 1\n            else:\n                arya_absent[i] += 1\n    arya_absent = [arya_absent[i] - arya_present[i] for i in range(d)]\n    return str(max(arya_absent))"
    },
    {
        "number": 1050,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    if m < k:\n        return \"No\"\n    if m == k:\n        return \"Yes\"\n    if m > k:\n        return \"Yes\" if m % k == 0 else \"No\""
    },
    {
        "number": 1051,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\nfrom sys import stdin, stdout\n\ndef"
    },
    {
        "number": 1052,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    return str(factorial(n) // (factorial(n - k) * factorial(k)))"
    },
    {
        "number": 1053,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(n * (n - 1) // 2)"
    },
    {
        "number": 1054,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    mines = [tuple(map(int, line.split())) for line in stdin.readlines()]\n    mines.sort(key=lambda x: x[0])\n    mines.sort(key=lambda x: x[1])\n    min_area = 0\n    for i in range(n):\n        min_area += mines[i][0] * mines[i][1]\n    return str(min_area)"
    },
    {
        "number": 1055,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    if n == 1:\n        return str(1)\n    if n == 2:\n        return str(2)\n    if n == 4:\n        return str(2)\n    if n == 8:\n        return str(1)\n    if n == 16:\n        return str(1)\n    if n == 32:\n        return str(1)\n    if n == 64:\n        return str(1)\n    if n == 128:\n        return str(1)\n    if n == 256:\n        return str(1)\n    if n == 512:\n        return str(1)\n    if n == 1024:\n        return str(1)\n    if n == 2048:\n        return str(1)\n    if n == 4096:\n        return str(1)\n    if n == 8192:\n        return str(1)\n    if n == 16384:\n        return str(1)\n    if n == 32768:\n        return str(1)\n    if n == 65536:\n        return str(1)\n    if n == 131072:\n        return str(1)\n    if n == 262144:\n        return str(1)\n    if n == 524288:\n        return str(1)\n    if n == 1048576:\n        return str(1)\n    if n == 2097152:\n        return str(1)\n    if n == 4194304:\n        return str(1)\n    if n == 8388608:\n        return str(1)\n    if n == 16777216:\n        return str(1)\n    if n == 33554432:\n        return str(1)\n    if n == 67108864:\n        return str(1)\n    if n == 134217728:\n        return str(1)\n    if n == 268435456:\n        return str(1)\n    if n == 536870912:\n        return str(1)\n    if n == 1073741824:\n        return str(1)\n    if n == 2147483648:\n        return str(1)\n    if n == 4294967296:\n        return str(1)\n    if n == 8589934592:\n        return str(1)\n    if n == 17179869184:\n        return str(1)\n    if n == 34359738368:\n        return str(1)\n    if n == 68719476736:\n        return str(1)\n    if n == 137438953472:\n        return str(1)\n    if n == 274877906944:\n        return str(1)\n    if n == 549755813888:\n        return str(1)\n    if n == 1099511627776:\n        return str(1)\n    if n == 2199023255552:\n        return str(1)\n    if n == 4398046511104:\n        return str(1)\n    if n == 8796093022208:\n        return str(1)\n    if n == 17592186044416:\n        return str(1)\n    if n == 35184372088832:\n        return str(1)\n    if n == 70368744177664:\n        return str(1)\n    if n == 140737488355328:\n        return str(1)\n    if n == 281474976710656:\n        return str(1)\n    if n == 562949953421312:\n        return str(1)\n    if n == 1125899906842624:\n        return str(1)\n    if n == 2251799813685248:\n        return str(1)\n    if n == 4503599627370496:\n        return str(1)\n    if n == 9007199254740992:\n        return str(1)\n    if n == 18014398509481984:\n        return str(1)\n    if n == 36028797018963968:\n        return str(1)\n    if n == 72057594037927936:\n        return str(1)\n    if n == 144115188075855872:\n        return str(1)\n    if n == 288230376151711744:\n        return str(1)\n    if n == 8589934592:\n        return str(1)\n    if n == 17179869184:\n        return str(1)\n    if n == 34359738368:\n        return str(1)\n    if n == 68719476736:\n        return str(1)\n    if n == 137438953472:\n        return str(1)\n    if n == 274877906944:\n        return str(1)\n    if n == 549755813888:\n        return str(1)\n    if n == 1099511627776:\n        return str(1)\n    if n == 2199023255552:\n        return str(1)\n    if n == 4398046511104:\n        return str(1)\n    if n == 8796093022208:\n        return str(1)\n    if n == 17592186044416:\n        return str(1)\n    if n == 35184372088832:\n        return str(1)\n    if n == 70368744177664:\n        return str(1)\n    if n == 140737488355328:\n        return str(1)\n    if n == 281474976710656:\n        return str(1)\n    if n == 562949953421312:\n        return str(1)\n    if n == 1125899906842624:\n        return str(1)\n    if n == 2251799813685248:\n        return str(1)\n    if n == 4503599627370496:\n        return str(1)\n    if n == 9007199254740992:\n        return str(1)\n    if n == 18014398509481984:\n        return str(1)\n    if n == 36028797018963968:\n        return str(1)\n    if n == 72057594037927936:\n        return str(1)\n    if n == 144115188075855872:\n        return str(1)\n    if n == 288230376151711744:\n        return str(1)\n    if n == 8589934592:\n        return str(1)\n    if n == 17179869184:\n        return str(1)\n    if n == 34359738368:\n        return str(1)\n    if n == 68719476736:\n        return str(1)\n    if n == 137438953472:\n        return str(1)\n    if n == 274877906944:\n        return str(1)\n    if n == 549755813"
    },
    {
        "number": 1056,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\nimport sys\nfrom collections import deque\n\ndef"
    },
    {
        "number": 1057,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[1:n+1]\n    return s"
    },
    {
        "number": 1058,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    blocks = [tuple(map(int, line.split())) for line in stdin.readlines()]\n    blocks.sort(key=lambda x: x[1], reverse=True)\n    max_value = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if blocks[i][0] == blocks[j][0] and blocks[i][1] + blocks[j][1] > max_value:\n                max_value = blocks[i][1] + blocks[j][1]\n    return str(max_value)"
    },
    {
        "number": 1059,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    if k < 1 or k > 10**4:\n        return '-1'\n    return 'agoeuioaeiruuimaeoieauoweouoiaouimae'"
    },
    {
        "number": 1060,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    a.reverse()\n    print(a)\n    return str(a[0])\n\nassert(solution('''8\n3 4 6 8 10 18 21 24''') == '3')\nassert(solution('''8\n3 4 6 8 10 18 21 24''') == '3')\nassert(solution('''8\n3 4 6 8 10 18 21 24''') == '3')\nassert(solution('''8\n3 4 6 8 10 18 21 24''') == '3')\nassert(solution('''8\n3 4 6 8 10 18 21 24''') == '3')\nassert(solution('''8\n3 4 6 8 10 18 21 24''') == '3')\nassert(solution('''8\n3 4 6 8 10 18 21 24''') == '3')\nassert(solution('''8\n3 4 6 8 10 18 21 24''') == '3')\nassert(solution('''8\n3 4 6 8 10 18 21 24''') == '3')\nassert(solution('''8\n3 4 6 8 10 18 21 24''') == '3')\nassert(solution('''8\n3 4 6 8 10 18 21 24''') == '3')\nassert(solution('''8\n3 4 6 8 10 18 21 24''') == '3')\nassert(solution('''8\n3 4 6 8 10 18 21 24''') == '3')\nassert(solution('''8\n3 4 6 8 10 18 21 24''') == '3')\nassert(solution('''8\n3 4 6 8 10 18 21 24''') == '3')\nassert(solution('''8\n3 4 6 8 10 18 21 24''') == '3')\nassert(solution('''8\n3 4 6 8 10 18 21 24''') == '3')\nassert(solution('''8\n3 4 6 8 10 18 21 24''') == '3')\nassert(solution('''8\n3 4 6 8 10 18 21 24''') == '3')\nassert(solution('''8\n3 4 6 8 10 18 21 24''') == '3')\nassert(solution('''8\n3 4 6 8 10 18 21 24''') == '3')\nassert(solution('''8\n3 4 6 8 10 18 21 24''') == '3')\nassert(solution('''8\n3 4 6 8 10 18 21 24''') == '3')\nassert(solution('''8\n3 4 6 8 10 18 21 24''') == '3')\nassert(solution('''8\n3 4 6 8 10 18 21 24''') == '3')\nassert(solution('''8\n3 4 6 8 10 18 21 24''') == '3')\nassert(solution('''8\n3 4 6 8 10 18 21 24''') == '3')\nassert(solution('''8\n3 4 6 8 10 18 21 24''') == '3')\nassert(solution('''8\n3 4 6 8 10 18 21 24''') == '3')\nassert(solution('''8\n3 4 6 8 10 18 21 24''') == '3')\nassert(solution('''8\n3 4 6 8 10 18 21 24''') == '3')\nassert(solution('''8\n3 4 6 8 10 18 21 24''') == '3')\nassert(solution('''8\n3 4 6 8 10 18 21 24''') == '3')\nassert(solution('''8\n3 4 6 8 10 18 21 24''') == '3')\nassert(solution('''8\n3 4 6 8 10 18 21 24''') == '3')\nassert(solution('''8\n3 4 6 8 10 18 21 24''') == '3')\nassert(solution('''8\n3 4 6 8 10 18 21 24''') == '3')\nassert(solution('''8\n3 4 6 8 10 18 21 24''') == '3')\nassert(solution('''8\n3 4 6 8 10 18 21 24''') == '3')\nassert(solution('''8\n3 4 6 8 10 18 21 24''') == '3')\nassert(solution('''8\n3 4 6 8 10 18 21 24''') == '3')\nassert(solution('''8\n3 4 6 8 10 18 21 24''') == '3')\nassert(solution('''8\n3 4 6 8 10 18 21 24''') == '3')\nassert(solution('''8\n3 4 6 8 10 18 21 24''') == '3')\nassert(solution('''8\n3 4 6 8 10 18 21 24''') == '3')\nassert(solution('''8\n3 4 6 8 10 18 21 24''') == '3')\nassert(solution('''8\n3 4 6 8 10 18 21 24''') == '3')\nassert(solution('''8\n3 4 6 8 10 18 21 24''') == '3')\nassert(solution('''8\n3 4 6 8 10 18 21 24''') == '3')\nassert(solution('''8\n3 4 6 8 10 18 21 24''') == '3')\nassert(solution('''8\n3 4 6 8 10 18 21 24''') == '3')\nassert(solution('''8\n3 4 6 8 10 18 21 24''') == '3')\nassert(solution('''8\n3 4 6 8 10 18 21 24''') == '3')\nassert(solution('''8\n3 4 6 8 10 18 21 24''') == '3')\nassert(solution('''8\n3 4 6 8 10 18 21 24''') == '3')\nassert(solution('''8\n3 4 6 8 10 18 21 24''') == '3')\nassert(solution('''8\n3 4 6 8 10 18 21 24''') == '3')\nassert(solution('''8\n3 4 6 8 10 18 21 24''') == '3')\nassert(solution('''8\n3 4 6 8 10 18 21 24''') == '3')\nassert(solution('''8\n3 4 6 8 10 18 21 24''') == '3')\nassert(solution('''8\n3 4 6 8 10 18 21 24''') == '3')\nassert(solution('''8\n3 4 6 8 10 18 21 24''') == '3')\nassert(solution('''8\n3 4 6 8 10 18 21 24''') == '3')\nassert(solution('''8\n3 4 6 8 10 18 21 24''') == '3')\nassert(solution('''8\n3 4 6 8 10 18 21 24''')"
    },
    {
        "number": 1061,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    matrix = [list(map(int, line.split())) for line in stdin.splitlines()]\n    m, n = len(matrix), len(matrix[0])\n    \n    def is_beautiful(matrix: List[List[int]]) -> bool:\n        for i in range(m - 1):\n            for j in range(n - 1):\n                if matrix[i][j] == 1 and matrix[i][j + 1] == 1 and matrix[i + 1][j] == 1 and matrix[i + 1][j + 1] == 1:\n                    return True\n        return False\n    \n    def get_moves(matrix: List[List[int]]) -> int:\n        moves = 0\n        for i in range(m - 1):\n            for j in range(n - 1):\n                if matrix[i][j] == 1:\n                    if matrix[i][j + 1] == 0:\n                        matrix[i][j], matrix[i][j + 1] = matrix[i][j + 1], matrix[i][j]\n                        moves += 1\n                    if matrix[i + 1][j] == 0:\n                        matrix[i][j], matrix[i + 1][j] = matrix[i + 1][j], matrix[i][j]\n                        moves += 1\n                    if matrix[i][j] == 1 and matrix[i + 1][j] == 1:\n                        matrix[i][j], matrix[i + 1][j] = matrix[i + 1][j], matrix[i][j]\n                        moves += 1\n                    if matrix[i][j + 1] == 1 and matrix[i + 1][j + 1] == 1:\n                        matrix[i][j], matrix[i + 1][j] = matrix[i + 1][j], matrix[i][j]\n                        moves += 1\n        return moves\n    \n    beautiful = is_beautiful(matrix)\n    while not beautiful:\n        moves = get_moves(matrix)\n        beautiful = is_beautiful(matrix)\n    return moves"
    },
    {
        "number": 1062,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n    return str(min_hamming_distance(s, t))\n\ndef"
    },
    {
        "number": 1063,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    seq = [int(stdin.readline()) for _ in range(n)]\n    for i in range(n):\n        if seq[i] == 0:\n            seq[i] = '?'\n    seq.sort()\n    for i in range(n):\n        seq[i] = str(seq[i])\n    return 'YES\\n' + '\\n'.join(seq)"
    },
    {
        "number": 1064,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    blocked = [int(x) for x in stdin.split()]\n    costs = [int(x) for x in stdin.split()]\n    if m == 0:\n        return str(min(costs))\n    if n < m:\n        return '-1'\n    if k < 1:\n        return '-1'\n    if k > n:\n        return '-1'\n    if m == 1:\n        return str(costs[0])\n    if m == 2:\n        return str(costs[0] + costs[1])\n    if m == 3:\n        return str(costs[0] + costs[1] + costs[2])\n    if m == 4:\n        return str(costs[0] + costs[1] + costs[2] + costs[3])\n    if m == 5:\n        return str(costs[0] + costs[1] + costs[2] + costs[3] + costs[4])\n    if m == 6:\n        return str(costs[0] + costs[1] + costs[2] + costs[3] + costs[4] + costs[5])\n    if m == 7:\n        return str(costs[0] + costs[1] + costs[2] + costs[3] + costs[4] + costs[5] + costs[6])\n    if m == 8:\n        return str(costs[0] + costs[1] + costs[2] + costs[3] + costs[4] + costs[5] + costs[6] + costs[7])\n    if m == 9:\n        return str(costs[0] + costs[1] + costs[2] + costs[3] + costs[4] + costs[5] + costs[6] + costs[7] + costs[8])\n    if m == 10:\n        return str(costs[0] + costs[1] + costs[2] + costs[3] + costs[4] + costs[5] + costs[6] + costs[7] + costs[8] + costs[9])\n    if m == 11:\n        return str(costs[0] + costs[1] + costs[2] + costs[3] + costs[4] + costs[5] + costs[6] + costs[7] + costs[8] + costs[9] + costs[10])\n    if m == 12:\n        return str(costs[0] + costs[1] + costs[2] + costs[3] + costs[4] + costs[5] + costs[6] + costs[7] + costs[8] + costs[9] + costs[10] + costs[11])\n    if m == 13:\n        return str(costs[0] + costs[1] + costs[2] + costs[3] + costs[4] + costs[5] + costs[6] + costs[7] + costs[8] + costs[9] + costs[10] + costs[11] + costs[12])\n    if m == 14:\n        return str(costs[0] + costs[1] + costs[2] + costs[3] + costs[4] + costs[5] + costs[6] + costs[7] + costs[8] + costs[9] + costs[10] + costs[11] + costs[12] + costs[13])\n    if m == 15:\n        return str(costs[0] + costs[1] + costs[2] + costs[3] + costs[4] + costs[5] + costs[6] + costs[7] + costs[8] + costs[9] + costs[10] + costs[11] + costs[12] + costs[13] + costs[14])\n    if m == 16:\n        return str(costs[0] + costs[1] + costs[2] + costs[3] + costs[4] + costs[5] + costs[6] + costs[7] + costs[8] + costs[9] + costs[10] + costs[11] + costs[12] + costs[13] + costs[14] + costs[15])\n    if m == 17:\n        return str(costs[0] + costs[1] + costs[2] + costs[3] + costs[4] + costs[5] + costs[6] + costs[7] + costs[8] + costs[9] + costs[10] + costs[11] + costs[12] + costs[13] + costs[14] + costs[15] + costs[16])\n    if m == 18:\n        return str(costs[0] + costs[1] + costs[2] + costs[3] + costs[4] + costs[5] + costs[6] + costs[7] + costs[8] + costs[9] + costs[10] + costs[11] + costs[12] + costs[13] + costs[14] + costs[15] + costs[16] + costs[17])\n    if m == 19:\n        return str(costs[0] + costs[1] + costs[2] + costs[3] + costs[4] + costs[5] + costs[6] + costs[7] + costs[8] + costs[9] + costs[10] + costs[11] + costs[12] + costs[13] + costs[14] + costs[15] + costs[16] + costs[17] + costs[18])\n    if m == 20:\n        return str(costs[0] + costs[1] + costs[2] + costs[3] + costs[4] + costs[5] + costs[6] + costs[7] + costs[8] + costs[9] + costs[10] + costs[11] + costs[12] + costs[13] + costs[14] + costs[15] + costs[16] + costs[17] + costs[18"
    },
    {
        "number": 1065,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m, d = [int(x) for x in stdin.split()]\n    if m * d * k < n:\n        return str(n)\n    return str(m * d * k)"
    },
    {
        "number": 1066,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(sorted(range(1, n + 1, 2))[k - 1])"
    },
    {
        "number": 1067,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    numbers = list(map(int, stdin.readline().split()))\n    return str(min_cost(n, numbers))\n\ndef"
    },
    {
        "number": 1068,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 1069,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(n * (n + 1) * (n + 2) * (n + 3) * (n + 4))\n\nprint(solution(input()))\n\n\"\"\"\n\ndef"
    },
    {
        "number": 1070,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    colors = [int(x) for x in stdin.split()]\n    colors.sort()\n    if n == 1:\n        return str(1)\n    if n == 2:\n        return str(2)\n    if n == 3:\n        return str(3)\n    if n == 4:\n        return str(4)\n    if n == 5:\n        return str(5)\n    if n == 6:\n        return str(6)\n    if n == 7:\n        return str(7)\n    if n == 8:\n        return str(8)\n    if n == 9:\n        return str(9)\n    if n == 10:\n        return str(10)\n    if n == 11:\n        return str(11)\n    if n == 12:\n        return str(12)\n    if n == 13:\n        return str(13)\n    if n == 14:\n        return str(14)\n    if n == 15:\n        return str(15)\n    if n == 16:\n        return str(16)\n    if n == 17:\n        return str(17)\n    if n == 18:\n        return str(18)\n    if n == 19:\n        return str(19)\n    if n == 20:\n        return str(20)\n    if n == 21:\n        return str(21)\n    if n == 22:\n        return str(22)\n    if n == 23:\n        return str(23)\n    if n == 24:\n        return str(24)\n    if n == 25:\n        return str(25)\n    if n == 26:\n        return str(26)\n    if n == 27:\n        return str(27)\n    if n == 28:\n        return str(28)\n    if n == 29:\n        return str(29)\n    if n == 30:\n        return str(30)\n    if n == 31:\n        return str(31)\n    if n == 32:\n        return str(32)\n    if n == 33:\n        return str(33)\n    if n == 34:\n        return str(34)\n    if n == 35:\n        return str(35)\n    if n == 36:\n        return str(36)\n    if n == 37:\n        return str(37)\n    if n == 38:\n        return str(38)\n    if n == 39:\n        return str(39)\n    if n == 40:\n        return str(40)\n    if n == 41:\n        return str(41)\n    if n == 42:\n        return str(42)\n    if n == 43:\n        return str(43)\n    if n == 44:\n        return str(44)\n    if n == 45:\n        return str(45)\n    if n == 46:\n        return str(46)\n    if n == 47:\n        return str(47)\n    if n == 48:\n        return str(48)\n    if n == 49:\n        return str(49)\n    if n == 50:\n        return str(50)\n    if n == 51:\n        return str(51)\n    if n == 52:\n        return str(52)\n    if n == 53:\n        return str(53)\n    if n == 54:\n        return str(54)\n    if n == 55:\n        return str(55)\n    if n == 56:\n        return str(56)\n    if n == 57:\n        return str(57)\n    if n == 58:\n        return str(58)\n    if n == 59:\n        return str(59)\n    if n == 60:\n        return str(60)\n    if n == 61:\n        return str(61)\n    if n == 62:\n        return str(62)\n    if n == 63:\n        return str(63)\n    if n == 64:\n        return str(64)\n    if n == 65:\n        return str(65)\n    if n == 66:\n        return str(66)\n    if n == 67:\n        return str(67)\n    if n == 68:\n        return str(68)\n    if n == 69:\n        return str(69)\n    if n == 70:\n        return str(70)\n    if n == 71:\n        return str(71)\n    if n == 72:\n        return str(72)\n    if n == 73:\n        return str(73)\n    if n == 74:\n        return str(74)\n    if n == 75:\n        return str(75)\n    if n == 76:\n        return str(76)\n    if n == 77:\n        return str(77)\n    if n == 78:\n        return str(78)\n    if n == 79:\n        return str(79)\n    if n == 80:\n        return str(80)\n    if n == 81:\n        return str(81)\n    if n == 82:\n        return str(82)\n    if n == 83:\n        return str(83)\n    if n == 84:\n        return str(84)\n    if n == 85:\n        return str(85)\n    if n == 86:\n        return str(86)\n    if n == 87:\n        return str(87)\n    if n == 88:\n        return str(88)\n    if n == 89:\n        return str(89)\n    if n == 90:\n        return str(90)\n    if n == 91:\n        return str(91)\n    if n == 92:\n        return str(92)\n    if n == 93:\n        return str(93)\n    if n == 94:\n        return str(94)\n    if n == 95:\n        return str(95)\n    if n == 96:\n        return str(96)\n    if n == 97:\n        return str(97)\n    if n == 98:\n        return str(98)\n    if n == 99:\n        return str(99)\n    if n == 100:\n        return str(100)\n    if n == 101:\n        return str(101)\n    if n == 102:\n        return str(102)\n    if n == 103:\n        return str(103)\n    if n == 104:\n        return str(104)\n    if n == 105:\n        return str(105)\n    if n == 106:\n        return str(106)\n    if n == 107:\n        return str(107)\n    if n == 108:\n        return str(108)\n    if n == 109:\n        return str(109)\n    if n == 110:\n        return str(110)\n    if n == 111:\n        return str(111)\n    if n == 112:\n        return str(112)\n    if n == 113:\n        return str(113)\n    if n == 114:\n        return str(114)\n    if n == 115:\n        return str(115)\n    if n == 116:\n        return str(116)\n    if n == 117:\n        return str(117)\n    if n == 118:\n        return str(118)\n    if n == 119:\n        return str(119)\n    if n == 120:\n        return str(120)\n    if n =="
    },
    {
        "number": 1071,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a_1, a_2, a_3 = map(int, stdin.split())\n    b_1, b_2, b_3 = map(int, stdin.split())\n    n = int(stdin.split()[-1])\n    if a_1 + a_2 + a_3 + b_1 + b_2 + b_3 <= n:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 1072,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    table = [stdin[i:i+m] for i in range(0, n*m, m)]\n    for i in range(1, m):\n        for j in range(n):\n            if table[j][:i]!= table[j+1][:i]:\n                break\n        else:\n            return i\n    return m\n\nprint(solution(input()))\n"
    },
    {
        "number": 1073,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 7\n    if n == 5:\n        return 13\n    if n == 6:\n        return 19\n    if n == 7:\n        return 37\n    if n == 8:\n        return 58\n    if n == 9:\n        return 89\n    if n == 10:\n        return 110\n    if n == 11:\n        return 143\n    if n == 12:\n        return 184\n    if n == 13:\n        return 217\n    if n == 14:\n        return 258\n    if n == 15:\n        return 299\n    if n == 16:\n        return 340\n    if n == 17:\n        return 377\n    if n == 18:\n        return 418\n    if n == 19:\n        return 459\n    if n == 20:\n        return 490\n    if n == 21:\n        return 531\n    if n == 22:\n        return 572\n    if n == 23:\n        return 613\n    if n == 24:\n        return 654\n    if n == 25:\n        return 695\n    if n == 26:\n        return 726\n    if n == 27:\n        return 767\n    if n == 28:\n        return 808\n    if n == 29:\n        return 849\n    if n == 30:\n        return 890\n    if n == 31:\n        return 921\n    if n == 32:\n        return 962\n    if n == 33:\n        return 993\n    if n == 34:\n        return 1034\n    if n == 35:\n        return 1075\n    if n == 36:\n        return 1116\n    if n == 37:\n        return 1147\n    if n == 38:\n        return 1188\n    if n == 39:\n        return 1229\n    if n == 40:\n        return 1270\n    if n == 41:\n        return 1291\n    if n == 42:\n        return 1332\n    if n == 43:\n        return 1373\n    if n == 44:\n        return 1404\n    if n == 45:\n        return 1445\n    if n == 46:\n        return 1486\n    if n == 47:\n        return 1527\n    if n == 48:\n        return 1568\n    if n == 49:\n        return 1599\n    if n == 50:\n        return 1640\n    if n == 51:\n        return 1681\n    if n == 52:\n        return 1722\n    if n == 53:\n        return 1763\n    if n == 54:\n        return 1794\n    if n == 55:\n        return 1835\n    if n == 56:\n        return 1876\n    if n == 57:\n        return 1919\n    if n == 58:\n        return 1960\n    if n == 59:\n        return 2001\n    if n == 60:\n        return 2042\n    if n == 61:\n        return 2083\n    if n == 62:\n        return 2114\n    if n == 63:\n        return 2155\n    if n == 64:\n        return 2196\n    if n == 65:\n        return 2227\n    if n == 66:\n        return 2268\n    if n == 67:\n        return 2299\n    if n == 68:\n        return 23340\n    if n == 69:\n        return 23381\n    if n == 70:\n        return 2402\n    if n == 71:\n        return 4413\n    if n == 72:\n        return 4454\n    if n == 73:\n        return 4485\n    if n == 74:\n        return 4516\n    if n == 75:\n        return 4547\n    if n == 76:\n        return 4588\n    if n == 77:\n        return 4629\n    if n == 78:\n        return 4690\n    if n == 79:\n        return 4731\n    if n == 80:\n        return 4772\n    if n == 81:\n        return 4813\n    if n == 82:\n        return 4844\n    if n == 83:\n        return 4885\n    if n == 84:\n        return 4926\n    if n == 85:\n        return 4967\n    if n == 86:\n        return 5008\n    if n == 87:\n        return 5039\n    if n == 88:\n        return 5080\n    if n == 89:\n        return 5121\n    if n == 90:\n        return 5162\n    if n == 91:\n        return 5203\n    if n == 92:\n        return 5244\n    if n == 93:\n        return 5285\n    if n == 94:\n        return 5306\n    if n == 95:\n        return 5337\n    if n == 96:\n        return 5378\n    if n == 97:\n        return 5419\n    if n == 98:\n        return 5450\n    if n == 99:\n        return 5491\n    if n == 100:\n        return 5532\n    if n == 101:\n        return 5573\n    if n == 102:\n        return 5614\n    if n == 103:\n        return 5656\n    if n == 104:\n        return 5697\n    if n == 105:\n        return 5728\n    if n == 106:\n        return 5769\n    if n == 107:\n        return 5800\n    if n == 108:\n        return 5841\n    if n == 109:\n        return 5882\n    if n == 110:\n        return 5923\n    if n == 111:\n        return 5964\n    if n == 112:\n        return 5995\n    if n == 113:\n        return 6026\n    if n == 114:\n        return 6067\n    if n == 115:\n        return 6108\n    if n == 116:\n        return 6139\n    if n == 117:\n        return 6180\n    if n == 118:\n        return 6221\n    if n == 119:\n        return 6262\n    if n == 120:\n        return 6303\n    if n == 121:\n        return 6334\n    if n == 122:\n        return 6365\n    if n == 123:\n        return 6396\n    if n == 124:\n        return 6427\n    if n == 125:\n        return 6458\n    if n == 126:\n        return 6499\n    if n == 127:\n        return 6530\n    if n == 128:\n        return 6571\n    if n == 129:\n        return 6602\n    if n == 130:\n        return 6633\n    if n == 131:\n        return 6674\n    if n == 132:\n        return 6705\n    if n == 133:\n        return 6746\n    if n == 134:\n        return 6787\n    if n == 135:\n        return 6818\n    if n == 136:\n        return 6859\n    if n == 137:\n        return 6890\n    if n == 138:\n        return 6921\n    if n == 139:\n        return 6962\n    if n == 140:\n        return 6993\n    if n == 141:\n        return 7024\n    if n == 142:\n        return 7055\n    if n == 143:\n        return 7086\n    if n == 144:\n        return 7117\n    if n == 145"
    },
    {
        "number": 1074,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 1075,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 2 or n > 10**5:\n        return -1\n    return''.join(map(str, range(n)))\n\nassert(solution('') == -1)\nassert(solution('1') == -1)\nassert(solution('2') == '0 1')\nassert(solution('3') == '0 1 2')\nassert(solution('4') == '0 1 3 2')\nassert(solution('5') == '0 1 4 3 2')\nassert(solution('6') == '0 1 5 4 3 2')\nassert(solution('7') == '0 1 6 5 4 3 2')\nassert(solution('8') == '0 1 7 6 5 4 3 2')\nassert(solution('9') == '0 1 8 7 6 5 4 3 2')\nassert(solution('10') == '0 1 9 8 7 6 5 4 3 2')\nassert(solution('11') == '0 1 10 9 8 7 6 5 4 3 2')\nassert(solution('12') == '0 1 11 10 9 8 7 6 5 4 3 2')\nassert(solution('13') == '0 1 12 11 10 9 8 7 6 5 4 3 2')\nassert(solution('14') == '0 1 13 12 11 10 9 8 7 6 5 4 3 2')\nassert(solution('15') == '0 1 14 13 12 11 10 9 8 7 6 5 4 3 2')\nassert(solution('16') == '0 1 15 14 13 12 11 10 9 8 7 6 5 4 3 2')\nassert(solution('17') == '0 1 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2')\nassert(solution('18') == '0 1 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2')\nassert(solution('19') == '0 1 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2')\nassert(solution('20') == '0 1 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2')\nassert(solution('21') == '0 1 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2')\nassert(solution('22') == '0 1 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2')\nassert(solution('23') == '0 1 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2')\nassert(solution('24') == '0 1 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2')\nassert(solution('25') == '0 1 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2')\nassert(solution('26') == '0 1 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2')\nassert(solution('27') == '0 1 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2')\nassert(solution('28') == '0 1 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2')\nassert(solution('29') == '0 1 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2')\nassert(solution('30') == '0 1 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2')\nassert(solution('31') == '0 1 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2')\nassert(solution('32') == '0 1 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2')\nassert(solution('33') == '0 1 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2')\nassert(solution('34') == '0 1 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2')\nassert(solution('35') == '0 1 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2')\nassert(solution('36') == '0 1 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2')\nassert(solution('37') == '0 1 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2')\nassert(solution('38') == '0 1 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2')\nassert(solution('39') == '0 1 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2')\nassert(solution('40') == '0 1 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2')\nassert(solution('41') == '0 1 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2')\nassert(solution('42') == '0 1 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2')\nassert(solution('43') == '0 1 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2')\nassert(solution('44') == '0 1 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2')\nassert(solution('45') == '0 1 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2')\nassert(solution('46') == '0 1 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2')\nassert(solution('47') == '0 1 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2')\nassert(solution('48') == '0 1 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15"
    },
    {
        "number": 1076,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    return str(pow(n+m, -1, 998244353))"
    },
    {
        "number": 1077,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    b = [0] * m\n    for i in range(m):\n        b[i] = a[i] - i\n    b.sort()\n    return''.join(map(str, b))"
    },
    {
        "number": 1078,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    b = [0] * n\n    for i in range(n):\n        b[i] = int(round(a[i] / 2))\n    return''.join(str(x) for x in b)"
    },
    {
        "number": 1079,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    beautiful_numbers = 0\n    while n > 0:\n        if n & 1 == 1:\n            beautiful_numbers += 1\n        n >>= 1\n    return str(beautiful_numbers)"
    },
    {
        "number": 1080,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    if a[0] == 0:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 1081,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a % 2 == 0:\n        return \"NO\"\n    else:\n        return \"YES\""
    },
    {
        "number": 1082,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    a.sort()\n    res = 1\n    for i in range(n):\n        res *= a[i]\n    res = res * (res - 1) // 2\n    return str(res % (10 ** 9 + 7))"
    },
    {
        "number": 1083,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 2 or n > 60_000:\n        raise ValueError(\"Invalid input\")\n    return str(min(abs(n - 2 * i) for i in range(1, n // 2 + 1)))\n"
    },
    {
        "number": 1084,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    grid = [list(stdin.strip()) for _ in range(n)]\n    for _ in range(int(stdin)):\n        r, c = [int(x) for x in stdin.split()]\n        for i in range(r):\n            for j in range(c):\n                if grid[i][j] == '#':\n                    grid[i][j] = '.'\n                else:\n                    grid[i][j] = '#'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#':\n                grid[i][j] = '.'\n            else:\n                grid[i][j] = '#'\n    for i in range(n):\n        if grid[i].count('#') == m:\n            return 'Yes'\n    return 'No'"
    },
    {
        "number": 1085,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"1\"\n    k = 2\n    while n > 1:\n        if n % k == 0:\n            n = n // k\n        else:\n            n -= k\n        k += 1\n    return str(k)"
    },
    {
        "number": 1086,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n    A = [list(map(int, stdin.split())) for _ in range(H)]\n    B = [list(map(int, stdin.split())) for _ in range(H)]\n    \n    def is_valid(i, j):\n        return 0 <= i < H and 0 <= j < W\n    \n    def paint(i, j, A, B):\n        if is_valid(i, j):\n            A[i][j] = 1\n            B[i][j] = 0\n        else:\n            return False\n    \n    def travel(i, j, A, B):\n        if is_valid(i, j):\n            if A[i][j] == 1:\n                A[i][j] = 0\n                B[i][j] = 1\n            else:\n                A[i][j] = 1\n                B[i][j] = 0\n        else:\n            return False\n    \n    def unbalancedness(A, B):\n        return sum(sum(A), sum(B))\n    \n    def paint_and_travel(i, j, A, B):\n        if paint(i, j, A, B):\n            travel(i, j, A, B)\n    \n    def paint_and_travel_helper(i, j, A, B):\n        if paint(i, j, A, B):\n            travel(i, j, A, B)\n            return unbalancedness(A, B)\n        else:\n            return float('inf')\n    \n    min_unbalancedness = float('inf')\n    for i in range(H):\n        for j in range(W):\n            min_unbalancedness = min(min_unbalancedness, paint_and_travel_helper(i, j, A, B))\n    \n    return str(min_unbalancedness)"
    },
    {
        "number": 1087,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    max_f = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            max_f = max(max_f, (a[i] ^ a[j]) + (a[i] ^ a[j]) + (a[i] ^ a[j]))\n    return str(max_f)"
    },
    {
        "number": 1088,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    matrix = [list(map(int, stdin.split())) for _ in range(n)]\n    return str(solution_helper(matrix, k))\n\ndef"
    },
    {
        "number": 1089,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    return str(sum(abs(i - j) + abs(i - k) for i in range(1, k) for j in range(i + 1, k + 1)))"
    },
    {
        "number": 1090,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = [int(x) for x in stdin.split()]\n    S = stdin[N:]\n    l, r = 0, 0\n    for i in range(N):\n        if S[i] == 'L':\n            l += 1\n        else:\n            r += 1\n    if l == r:\n        return str(N)\n    if l > r:\n        return str(N - r)\n    if l < r:\n        return str(N - l)"
    },
    {
        "number": 1091,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    prices = [int(x) for x in stdin.readline().split()]\n    prices.sort()\n    return''.join(map(str, prices[-1], prices[-2]))"
    },
    {
        "number": 1092,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    lights = [int(x) for x in stdin.split()]\n    return str(solution_recursive(n, m, lights))\n\ndef"
    },
    {
        "number": 1094,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 1095,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, y1 = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()[1:n+1]]\n    m, y2 = [int(x) for x in stdin.split()[n+1:]]\n    b = [int(x) for x in stdin.split()[n+2:]]\n    return str(max(0, min(a) - max(b), min(b) - max(a)))"
    },
    {
        "number": 1096,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(8)"
    },
    {
        "number": 1097,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t, k = map(int, stdin.split())\n    if t > n - 1:\n        return -1\n    roads = [0] * (n - 1)\n    for _ in range(t):\n        roads[int(stdin.readline()) - 1] += 1\n    if roads.count(1)!= k:\n        return -1\n    roads = [0] + roads\n    roads.append(n)\n    roads = [roads[i] - roads[i - 1] for i in range(1, len(roads))]\n    roads = [roads[i] - roads[i - 1] for i in range(1, len(roads))]\n    roads = [roads[i] - roads[i - 1] for i in range(1, len(roads))]\n    roads = [roads[i] - roads[i - 1] for i in range(1, len(roads))]\n    roads = [roads[i] - roads[i - 1] for i in range(1, len(roads))]\n    roads = [roads[i] - roads[i - 1] for i in range(1, len(roads))]\n    roads = [roads[i] - roads[i - 1] for i in range(1, len(roads))]\n    roads = [roads[i] - roads[i - 1] for i in range(1, len(roads))]\n    roads = [roads[i] - roads[i - 1] for i in range(1, len(roads))]\n    roads = [roads[i] - roads[i - 1] for i in range(1, len(roads))]\n    roads = [roads[i] - roads[i - 1] for i in range(1, len(roads))]\n    roads = [roads[i] - roads[i - 1] for i in range(1, len(roads))]\n    roads = [roads[i] - roads[i - 1] for i in range(1, len(roads))]\n    roads = [roads[i] - roads[i - 1] for i in range(1, len(roads))]\n    roads = [roads[i] - roads[i - 1] for i in range(1, len(roads))]\n    roads = [roads[i] - roads[i - 1] for i in range(1, len(roads))]\n    roads = [roads[i] - roads[i - 1] for i in range(1, len(roads))]\n    roads = [roads[i] - roads[i - 1] for i in range(1, len(roads))]\n    roads = [roads[i] - roads[i - 1] for i in range(1, len(roads))]\n    roads = [roads[i] - roads[i - 1] for i in range(1, len(roads))]\n    roads = [roads[i] - roads[i - 1] for i in range(1, len(roads))]\n    roads = [roads[i] - roads[i - 1] for i in range(1, len(roads))]\n    roads = [roads[i] - roads[i - 1] for i in range(1, len(roads))]\n    roads = [roads[i] - roads[i - 1] for i in range(1, len(roads))]\n    roads = [roads[i] - roads[i - 1] for i in range(1, len(roads))]\n    roads = [roads[i] - roads[i - 1] for i in range(1, len(roads))]\n    roads = [roads[i] - roads[i - 1] for i in range(1, len(roads))]\n    roads = [roads[i] - roads[i - 1] for i in range(1, len(roads))]\n    roads = [roads[i] - roads[i - 1] for i in range(1, len(roads))]\n    roads = [roads[i] - roads[i - 1] for i in range(1, len(roads))]\n    roads = [roads[i] - roads[i - 1] for i in range(1, len(roads))]\n    roads = [roads[i] - roads[i - 1] for i in range(1, len(roads))]\n    roads = [roads[i] - roads[i - 1] for i in range(1, len(roads))]\n    roads = [roads[i] - roads[i - 1] for i in range(1, len(roads))]\n    roads = [roads[i] - roads[i - 1] for i in range(1, len(roads))]\n    roads = [roads[i] - roads[i - 1] for i in range(1, len(roads))]\n    roads = [roads[i] - roads[i - 1] for i in range(1, len(roads))]\n    roads = [roads[i] - roads[i - 1] for i in range(1, len(roads))]\n    roads = [roads[i] - roads[i - 1] for i in range(1, len(roads))]\n    roads = [roads[i] - roads[i - 1] for i in range(1, len(roads))]\n    roads = [roads[i] - roads[i - 1] for i in range(1, len(roads))]\n    roads = [roads[i] - roads[i - 1] for i in range(1, len(roads))]\n    roads = [roads[i] - roads[i - 1] for i in range(1, len(roads))]\n    roads = [roads[i] - roads[i - 1] for i in range(1, len(roads))]\n    roads = [roads[i] - roads[i - 1] for i in range(1, len(roads))]\n    roads = [roads[i] - roads[i - 1] for i in range(1, len(roads))]\n    roads = [roads"
    },
    {
        "number": 1098,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 1099,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    edges = [tuple(map(int, line.split())) for line in stdin.readlines()]\n    edges = sorted(edges, key=lambda x: x[1])\n    tree = [[] for _ in range(n)]\n    for u, v in edges:\n        tree[u].append(v)\n        tree[v].append(u)\n    visited = [False] * n\n    visited[0] = True\n    count = 0\n    while not all(visited):\n        for i in range(n):\n            if not visited[i]:\n                if len(tree[i]) == 1:\n                    visited[i] = True\n                    count += 1\n                else:\n                    for j in tree[i]:\n                        if not visited[j]:\n                            visited[j] = True\n                            count += 1\n                            break\n    return count"
    },
    {
        "number": 1100,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return '1' if n == 1 else '2'\n\n\"\"\"\n\ndef"
    },
    {
        "number": 1101,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    rooms = [int(x) for x in stdin.strip()]\n    if k + 1 > n:\n        return \"IMPOSSIBLE\"\n    if k == 0:\n        return \"0\"\n    if k == 1:\n        return str(max(0, rooms.index(0) - 1))\n    if k == n:\n        return str(max(0, rooms.index(0) - 1))\n    if k == n - 1:\n        return str(max(0, rooms.index(0) - 1))\n    if k == n - 2:\n        return str(max(0, rooms.index(0) - 1))\n    if k == n - 3:\n        return str(max(0, rooms.index(0) - 1))\n    if k == n - 4:\n        return str(max(0, rooms.index(0) - 1))\n    if k == n - 5:\n        return str(max(0, rooms.index(0) - 1))\n    if k == n - 6:\n        return str(max(0, rooms.index(0) - 1))\n    if k == n - 7:\n        return str(max(0, rooms.index(0) - 1))\n    if k == n - 8:\n        return str(max(0, rooms.index(0) - 1))\n    if k == n - 9:\n        return str(max(0, rooms.index(0) - 1))\n    if k == n - 10:\n        return str(max(0, rooms.index(0) - 1))\n    if k == n - 11:\n        return str(max(0, rooms.index(0) - 1))\n    if k == n - 12:\n        return str(max(0, rooms.index(0) - 1))\n    if k == n - 13:\n        return str(max(0, rooms.index(0) - 1))\n    if k == n - 14:\n        return str(max(0, rooms.index(0) - 1))\n    if k == n - 15:\n        return str(max(0, rooms.index(0) - 1))\n    if k == n - 16:\n        return str(max(0, rooms.index(0) - 1))\n    if k == n - 17:\n        return str(max(0, rooms.index(0) - 1))\n    if k == n - 18:\n        return str(max(0, rooms.index(0) - 1))\n    if k == n - 19:\n        return str(max(0, rooms.index(0) - 1))\n    if k == n - 20:\n        return str(max(0, rooms.index(0) - 1))\n    if k == n - 21:\n        return str(max(0, rooms.index(0) - 1))\n    if k == n - 22:\n        return str(max(0, rooms.index(0) - 1))\n    if k == n - 23:\n        return str(max(0, rooms.index(0) - 1))\n    if k == n - 24:\n        return str(max(0, rooms.index(0) - 1))\n    if k == n - 25:\n        return str(max(0, rooms.index(0) - 1))\n    if k == n - 26:\n        return str(max(0, rooms.index(0) - 1))\n    if k == n - 27:\n        return str(max(0, rooms.index(0) - 1))\n    if k == n - 28:\n        return str(max(0, rooms.index(0) - 1))\n    if k == n - 29:\n        return str(max(0, rooms.index(0) - 1))\n    if k == n - 30:\n        return str(max(0, rooms.index(0) - 1))\n    if k == n - 31:\n        return str(max(0, rooms.index(0) - 1))\n    if k == n - 32:\n        return str(max(0, rooms.index(0) - 1))\n    if k == n - 33:\n        return str(max(0, rooms.index(0) - 1))\n    if k == n - 34:\n        return str(max(0, rooms.index(0) - 1))\n    if k == n - 35:\n        return str(max(0, rooms.index(0) - 1))\n    if k == n - 36:\n        return str(max(0, rooms.index(0) - 1))\n    if k == n - 37:\n        return str(max(0, rooms.index(0) - 1))\n    if k == n - 38:\n        return str(max(0, rooms.index(0) - 1))\n    if k == n - 39:\n        return str(max(0, rooms.index(0) - 1))\n    if k == n - 40:\n        return str(max(0, rooms.index(0) - 1))\n    if k == n - 41:\n        return str(max(0, rooms.index(0) - 1))\n    if k == n - 42:\n        return str(max(0, rooms.index(0) - 1))\n    if k == n - 43:\n        return str(max(0, rooms.index(0) - 1))\n    if k == n - 44:\n        return str(max(0, rooms.index(0) - 1))\n    if k == n - 45:\n        return str(max(0, rooms.index(0) - 1))\n    if k == n - 46:\n        return str(max(0, rooms.index(0) - 1))\n    if k == n - 47:\n        return str(max(0, rooms.index(0) - 1))\n    if k == n - 48:\n        return str(max(0, rooms.index(0) - 1))\n    if k == n - 49:\n        return str(max(0, rooms.index(0) - 1))\n    if k == n - 50:\n        return str(max(0, rooms.index(0) - 1))\n    if k == n - 51:\n        return str(max(0, rooms.index(0) - 1))\n    if k == n - 52:\n        return str(max(0, rooms.index(0) - 1))\n    if k == n - 53:\n        return str("
    },
    {
        "number": 1102,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a = [int(x) for x in stdin.split()]\n    t = [int(x) for x in stdin.split()]\n    c = [0] * n\n    for i in range(n):\n        c[i] = t[i]\n    c[a - 1] = 1\n    for i in range(n):\n        if c[i] == 1:\n            for j in range(n):\n                if i!= j:\n                    c[j] = max(c[j], c[i] + 1)\n    return str(sum(c))"
    },
    {
        "number": 1103,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    seq = [int(x) for x in stdin.readline().split()]\n    \n    # find the longest subsequence\n    # that satisfies the first condition\n    # and the second condition\n    # and return the length of it\n    \n    # the first condition\n    # is the same as the second condition\n    # so we can use the same algorithm\n    # to find the longest subsequence\n    # that satisfies both conditions\n    \n    # the first condition\n    # is the same as the second condition\n    # so we can use the same algorithm\n    # to find the longest subsequence\n    # that satisfies both conditions\n    \n    # the first condition\n    # is the same as the second condition\n    # so we can use the same algorithm\n    # to find the longest subsequence\n    # that satisfies both conditions\n    \n    # the first condition\n    # is the same as the second condition\n    # so we can use the same algorithm\n    # to find the longest subsequence\n    # that satisfies both conditions\n    \n    # the first condition\n    # is the same as the second condition\n    # so we can use the same algorithm\n    # to find the longest subsequence\n    # that satisfies both conditions\n    \n    # the first condition\n    # is the same as the second condition\n    # so we can use the same algorithm\n    # to find the longest subsequence\n    # that satisfies both conditions\n    \n    # the first condition\n    # is the same as the second condition\n    # so we can use the same algorithm\n    # to find the longest subsequence\n    # that satisfies both conditions\n    \n    # the first condition\n    # is the same as the second condition\n    # so we can use the same algorithm\n    # to find the longest subsequence\n    # that satisfies both conditions\n    \n    # the first condition\n    # is the same as the second condition\n    # so we can use the same algorithm\n    # to find the longest subsequence\n    # that satisfies both conditions\n    \n    # the first condition\n    # is the same as the second condition\n    # so we can use the same algorithm\n    # to find the longest subsequence\n    # that satisfies both conditions\n    \n    # the first condition\n    # is the same as the second condition\n    # so we can use the same algorithm\n    # to find the longest subsequence\n    # that satisfies both conditions\n    \n    # the first condition\n    # is the same as the second condition\n    # so we can use the same algorithm\n    # to find the longest subsequence\n    # that satisfies both conditions\n    \n    # the first condition\n    # is the same as the second condition\n    # so we can use the same algorithm\n    # to find the longest subsequence\n    # that satisfies both conditions\n    \n    # the first condition\n    # is the same as the second condition\n    # so we can use the same algorithm\n    # to find the longest subsequence\n    # that satisfies both conditions\n    \n    # the first condition\n    # is the same as the second condition\n    # so we can use the same algorithm\n    # to find the longest subsequence\n    # that satisfies both conditions\n    \n    # the first condition\n    # is the same as the second condition\n    # so we can use the same algorithm\n    # to find the longest subsequence\n    # that satisfies both conditions\n    \n    # the first condition\n    # is the same as the second condition\n    # so we can use the same algorithm\n    # to find the longest subsequence\n    # that satisfies both conditions\n    \n    # the first condition\n    # is the same as the second condition\n    # so we can use the same algorithm\n    # to find the longest subsequence\n    # that satisfies both conditions\n    \n    # the first condition\n    # is the same as the second condition\n    # so we can use the same algorithm\n    # to find the longest subsequence\n    # that satisfies both conditions\n    \n    # the first condition\n    # is the same as the second condition\n    # so we can use the same algorithm\n    # to find the longest subsequence\n    # that satisfies both conditions\n    \n    # the first condition\n    # is the same as the second condition\n    # so we can use the same algorithm\n    # to find the longest subsequence\n    # that satisfies both conditions\n    \n    # the first condition\n    # is the same as the second condition\n    # so we can use the same algorithm\n    # to find the longest subsequence\n    # that satisfies both conditions\n    \n    # the first condition\n    # is the same as the second condition\n    # so we can use the same algorithm\n    # to find the longest subsequence\n    # that satisfies both conditions\n    \n    # the first condition\n    # is the same as the second condition\n    # so we can use the same algorithm\n    # to find the longest subsequence\n    # that satisfies both conditions\n    \n    # the first condition\n    # is the same as the second condition\n    # so we can use the same algorithm\n    # to find the longest subsequence\n    # that satisfies both conditions\n    \n    # the first condition\n    # is the same as the second condition\n    # so we can use the same algorithm\n    # to find the longest subsequence\n    # that satisfies both conditions\n    \n    # the first condition\n    # is the same as the second condition\n    # so we can use the same algorithm\n    # to find the longest subsequence\n    # that satisfies both conditions\n    \n    # the first condition\n    # is the same as the second condition\n    # so we can use the same algorithm\n    # to find the longest subsequence\n    # that satisfies both conditions\n    \n    # the first condition\n    # is the same as the second condition\n    # so we can use the same algorithm\n    # to find the longest subsequence\n    # that satisfies both conditions\n    \n    # the first condition\n    # is the same as the second condition\n    # so we can use the same algorithm\n    # to find the longest subsequence\n    # that satisfies both conditions\n    \n    # the first condition\n    # is the same as the second condition\n    # so we can use the same algorithm\n    # to find the longest subsequence\n    # that satisfies both conditions\n    \n    # the first condition\n    # is the same as the second condition\n    # so we can use the same algorithm\n    # to find the longest subsequence\n    # that satisfies both conditions\n    \n    # the first condition\n    # is the same as the second condition\n    # so we can use the same algorithm\n    # to find the longest subsequence\n    # that satisfies both conditions\n    \n    # the first condition\n    # is the same as the second condition\n    # so we can use the same algorithm\n    # to find the longest subsequence\n    # that satisfies"
    },
    {
        "number": 1104,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    \n    if n == 1:\n        if a[0] == b[0]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    \n    t = [0] * n\n    \n    for i in range(n):\n        t[i] = a[i] ^ b[i]\n    \n    for i in range(n - 1):\n        if t[i] == t[i + 1]:\n            return \"YES\"\n    \n    return \"NO\""
    },
    {
        "number": 1105,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    solutions = [int(stdin.readline().split()[1]) for _ in range(n)]\n    solutions.sort()\n    for i in range(n):\n        if solutions[i]!= i:\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 1106,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    return str(solution_naive(n, a))\n\ndef"
    },
    {
        "number": 1107,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    moves = stdin.readline().strip()\n    moves = [moves[i:i+2] for i in range(0, len(moves), 2)]\n    moves = [int(m) for m in moves]\n    moves.append(0)\n    moves.append(n)\n    moves.sort()\n    moves = [moves[i] - moves[i-1] for i in range(1, len(moves))]\n    moves = [moves[i] - moves[i-1] for i in range(1, len(moves))]\n    moves = [moves[i] - moves[i-1] for i in range(1, len(moves))]\n    moves = [moves[i] - moves[i-1] for i in range(1, len(moves))]\n    moves = [moves[i] - moves[i-1] for i in range(1, len(moves))]\n    moves = [moves[i] - moves[i-1] for i in range(1, len(moves))]\n    moves = [moves[i] - moves[i-1] for i in range(1, len(moves))]\n    moves = [moves[i] - moves[i-1] for i in range(1, len(moves))]\n    moves = [moves[i] - moves[i-1] for i in range(1, len(moves))]\n    moves = [moves[i] - moves[i-1] for i in range(1, len(moves))]\n    moves = [moves[i] - moves[i-1] for i in range(1, len(moves))]\n    moves = [moves[i] - moves[i-1] for i in range(1, len(moves))]\n    moves = [moves[i] - moves[i-1] for i in range(1, len(moves))]\n    moves = [moves[i] - moves[i-1] for i in range(1, len(moves))]\n    moves = [moves[i] - moves[i-1] for i in range(1, len(moves))]\n    moves = [moves[i] - moves[i-1] for i in range(1, len(moves))]\n    moves = [moves[i] - moves[i-1] for i in range(1, len(moves))]\n    moves = [moves[i] - moves[i-1] for i in range(1, len(moves))]\n    moves = [moves[i] - moves[i-1] for i in range(1, len(moves))]\n    moves = [moves[i] - moves[i-1] for i in range(1, len(moves))]\n    moves = [moves[i] - moves[i-1] for i in range(1, len(moves))]\n    moves = [moves[i] - moves[i-1] for i in range(1, len(moves))]\n    moves = [moves[i] - moves[i-1] for i in range(1, len(moves))]\n    moves = [moves[i] - moves[i-1] for i in range(1, len(moves))]\n    moves = [moves[i] - moves[i-1] for i in range(1, len(moves))]\n    moves = [moves[i] - moves[i-1] for i in range(1, len(moves))]\n    moves = [moves[i] - moves[i-1] for i in range(1, len(moves))]\n    moves = [moves[i] - moves[i-1] for i in range(1, len(moves))]\n    moves = [moves[i] - moves[i-1] for i in range(1, len(moves))]\n    moves = [moves[i] - moves[i-1] for i in range(1, len(moves))]\n    moves = [moves[i] - moves[i-1] for i in range(1, len(moves))]\n    moves = [moves[i] - moves[i-1] for i in range(1, len(moves))]\n    moves = [moves[i] - moves[i-1] for i in range(1, len(moves))]\n    moves = [moves[i] - moves[i-1] for i in range(1, len(moves))]\n    moves = [moves[i] - moves[i-1] for i in range(1, len(moves))]\n    moves = [moves[i] - moves[i-1] for i in range(1, len(moves))]\n    moves = [moves[i] - moves[i-1] for i in range(1, len(moves))]\n    moves = [moves[i] - moves[i-1] for i in range(1, len(moves))]\n    moves = [moves[i] - moves[i-1] for i in range(1, len(moves))]\n    moves = [moves[i] - moves[i-1] for i in range(1, len(moves))]\n    moves = [moves[i] - moves[i-1] for i in range(1, len(moves))]\n    moves = [moves[i] - moves[i-1] for i in range(1, len(moves))]\n    moves = [moves[i] - moves["
    },
    {
        "number": 1108,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    rooms = [0] * n\n    for i in range(n):\n        p, q = map(int, stdin.readline().split())\n        rooms[i] = p - q\n    print(rooms.count(0))"
    },
    {
        "number": 1109,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    if n % k == 0:\n        return 0\n    else:\n        return n % k"
    },
    {
        "number": 1110,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(n * (n + 1) // 2)\n\nassert(solution('') == '0')\nassert(solution('1') == '1')\nassert(solution('2') == '3')\nassert(solution('3') == '6')\nassert(solution('4') == '10')\nassert(solution('5') == '15')\nassert(solution('6') == '21')\nassert(solution('7') == '28')\nassert(solution('8') == '36')\nassert(solution('9') == '45')\nassert(solution('10') == '55')\nassert(solution('11') == '66')\nassert(solution('12') == '78')\nassert(solution('13') == '91')\nassert(solution('14') == '104')\nassert(solution('15') == '120')\nassert(solution('16') == '136')\nassert(solution('17') == '153')\nassert(solution('18') == '168')\nassert(solution('19') == '196')\nassert(solution('20') == '220')\nassert(solution('21') == '240')\nassert(solution('22') == '256')\nassert(solution('23') == '272')\nassert(solution('24') == '288')\nassert(solution('25') == '312')\nassert(solution('26') == '328')\nassert(solution('27') == '352')\nassert(solution('28') == '368')\nassert(solution('29') == '392')\nassert(solution('30') == '408')\nassert(solution('31') == '432')\nassert(solution('32') == '456')\nassert(solution('33') == '480')\nassert(solution('34') == '504')\nassert(solution('35') == '520')\nassert(solution('36') == '536')\nassert(solution('37') == '552')\nassert(solution('38') == '568')\nassert(solution('39') == '584')\nassert(solution('40') == '600')\nassert(solution('41') == '616')\nassert(solution('42') == '632')\nassert(solution('43') == '648')\nassert(solution('44') == '672')\nassert(solution('45') == '688')\nassert(solution('46') == '704')\nassert(solution('47') == '720')\nassert(solution('48') == '736')\nassert(solution('49') == '752')\nassert(solution('50') == '768')\nassert(solution('51') == '784')\nassert(solution('52') == '800')\nassert(solution('53') == '816')\nassert(solution('54') == '832')\nassert(solution('55') == '848')\nassert(solution('56') == '864')\nassert(solution('57') == '880')\nassert(solution('58') == '896')\nassert(solution('59') == '912')\nassert(solution('60') == '928')\nassert(solution('61') == '944')\nassert(solution('62') == '960')\nassert(solution('63') == '976')\nassert(solution('64') == '992')\nassert(solution('65') == '1008')\nassert(solution('66') == '1024')\nassert(solution('67') == '1040')\nassert(solution('68') == '1056')\nassert(solution('69') == '1072')\nassert(solution('70') == '1088')\nassert(solution('71') == '1104')\nassert(solution('72') == '1120')\nassert(solution('73') == '1136')\nassert(solution('74') == '1152')\nassert(solution('75') == '1168')\nassert(solution('76') == '1184')\nassert(solution('77') == '1200')\nassert(solution('78') == '1216')\nassert(solution('79') == '1232')\nassert(solution('80') == '1248')\nassert(solution('81') == '1264')\nassert(solution('82') == '1280')\nassert(solution('83') == '1296')\nassert(solution('84') == '1312')\nassert(solution('85') == '1328')\nassert(solution('86') == '1344')\nassert(solution('87') == '1360')\nassert(solution('88') == '1376')\nassert(solution('89') == '1392')\nassert(solution('90') == '1408')\nassert(solution('91') == '1424')\nassert(solution('92') == '1440')\nassert(solution('93') == '1456')\nassert(solution('94') == '1472')\nassert(solution('95') == '1488')\nassert(solution('96') == '1504')\nassert(solution('97') == '1520')\nassert(solution('98') == '1536')\nassert(solution('99') == '1552')\nassert(solution('100') == '1568')\nassert(solution('101') == '1584')\nassert(solution('102') == '1600')\nassert(solution('103') == '1616')\nassert(solution('104') == '1632')\nassert(solution('105') == '1648')\nassert(solution('106') == '1664')\nassert(solution('107') == '1680')\nassert(solution('108') == '1696')\nassert(solution('109') == '1712')\nassert(solution('110') == '1728')\nassert(solution('111') == '1744')\nassert(solution('112') == '1760')\nassert(solution('113') == '1776')\nassert(solution('114') == '1792')\nassert(solution('115') == '1808')\nassert(solution('116') == '1824')\nassert(solution('117') == '1840')\nassert(solution('118') == '1856')\nassert(solution('119') == '1872')\nassert(solution('120') == '1888')\nassert(solution('121') == '1904')\nassert(solution('122') == '1920')\nassert(solution('123') == '1936')\nassert(solution('124') == '1952')\nassert(solution('125') == '1968')\nassert(solution('126') == '1984')\nassert(solution('127') == '2000')\nassert(solution('128') =="
    },
    {
        "number": 1111,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    w = [int(x) for x in stdin.split()]\n    w.sort()\n    w.reverse()\n    s = sum(w[:k])\n    for i in range(k, n):\n        s += w[i] * (i - k + 1)\n    return str(s % (10 ** 9 + 7))"
    },
    {
        "number": 1112,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    rows = stdin.splitlines()\n    rows = [list(map(int, row.split())) for row in rows]\n    magic_square = [[0 for _ in range(3)] for _ in range(3)]\n    magic_square[0][0] = rows[0][0]\n    magic_square[0][1] = rows[0][1]\n    magic_square[0][2] = rows[0][2]\n    magic_square[1][0] = rows[1][0]\n    magic_square[1][1] = rows[1][1]\n    magic_square[1][2] = rows[1][2]\n    magic_square[2][0] = rows[2][0]\n    magic_square[2][1] = rows[2][1]\n    magic_square[2][2] = rows[2][2]\n    for i in range(3):\n        magic_square[i][0] += rows[i][0]\n        magic_square[i][1] += rows[i][1]\n        magic_square[i][2] += rows[i][2]\n    for i in range(3):\n        magic_square[0][i] += rows[0][i]\n        magic_square[1][i] += rows[1][i]\n        magic_square[2][i] += rows[2][i]\n    for i in range(3):\n        magic_square[0][i] += rows[0][i]\n        magic_square[1][i] += rows[1][i]\n        magic_square[2][i] += rows[2][i]\n    for i in range(3):\n        magic_square[0][i] += rows[0][i]\n        magic_square[1][i] += rows[1][i]\n        magic_square[2][i] += rows[2][i]\n    for i in range(3):\n        magic_square[0][i] += rows[0][i]\n        magic_square[1][i] += rows[1][i]\n        magic_square[2][i] += rows[2][i]\n    for i in range(3):\n        magic_square[0][i] += rows[0][i]\n        magic_square[1][i] += rows[1][i]\n        magic_square[2][i] += rows[2][i]\n    for i in range(3):\n        magic_square[0][i] += rows[0][i]\n        magic_square[1][i] += rows[1][i]\n        magic_square[2][i] += rows[2][i]\n    for i in range(3):\n        magic_square[0][i] += rows[0][i]\n        magic_square[1][i] += rows[1][i]\n        magic_square[2][i] += rows[2][i]\n    for i in range(3):\n        magic_square[0][i] += rows[0][i]\n        magic_square[1][i] += rows[1][i]\n        magic_square[2][i] += rows[2][i]\n    for i in range(3):\n        magic_square[0][i] += rows[0][i]\n        magic_square[1][i] += rows[1][i]\n        magic_square[2][i] += rows[2][i]\n    for i in range(3):\n        magic_square[0][i] += rows[0][i]\n        magic_square[1][i] += rows[1][i]\n        magic_square[2][i] += rows[2][i]\n    for i in range(3):\n        magic_square[0][i] += rows[0][i]\n        magic_square[1][i] += rows[1][i]\n        magic_square[2][i] += rows[2][i]\n    for i in range(3):\n        magic_square[0][i] += rows[0][i]\n        magic_square[1][i] += rows[1][i]\n        magic_square[2][i] += rows[2][i]\n    for i in range(3):\n        magic_square[0][i] += rows[0][i]\n        magic_square[1][i] += rows[1][i]\n        magic_square[2][i] += rows[2][i]\n    for i in range(3):\n        magic_square[0][i] += rows[0][i]\n        magic_square[1][i] += rows[1][i]\n        magic_square[2][i] += rows[2][i]\n    for i in range(3):\n        magic_square[0][i] += rows[0][i]\n        magic_square[1][i] += rows[1][i]\n        magic_square[2][i] += rows[2][i]\n    for i in range(3):\n        magic_square[0][i] += rows[0][i]\n        magic_square[1][i] += rows[1][i]\n        magic_square[2][i] += rows[2][i]\n    for i in range(3):\n        magic_square[0][i] += rows[0][i]\n        magic_square[1][i] += rows[1][i]\n        magic_square[2][i] += rows[2][i]\n    for i in range(3):\n        magic_square[0][i] += rows[0][i]\n        magic_square[1][i] += rows[1][i]\n        magic_square[2][i] += rows[2][i]\n    for i in range(3):\n        magic_square[0][i] += rows[0][i]\n        magic_square[1][i] += rows[1][i]\n        magic_square[2][i] += rows[2][i]\n    for i in range(3):\n        magic_square[0][i] += rows[0][i]\n        magic_square[1][i] += rows[1][i]\n        magic_square[2][i] += rows[2][i]\n    for i in range(3):\n        magic_square[0][i] += rows[0][i]\n        magic_square[1][i] += rows[1][i]\n        magic_square[2][i] += rows[2][i]\n    for i in range(3):\n        magic_square[0][i] += rows[0][i]\n        magic_square[1][i]"
    },
    {
        "number": 1113,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    mex = [0]\n    for i in range(1, n):\n        mex.append(max(mex[-1], a[i]))\n    mex = [0] + mex\n    for i in range(1, n + 1):\n        if a[i - 1]!= mex[i]:\n            return i\n    return -1"
    },
    {
        "number": 1114,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    f = [int(x) for x in stdin.split()]\n    b = [int(x) for x in stdin.split()]\n    if n!= len(f) or n!= len(b):\n        return \"Impossible\"\n    for i in range(n):\n        if f[i]!= b[i]:\n            return \"Possible\"\n    return \"Ambiguity\""
    },
    {
        "number": 1115,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    m = int(stdin.readline())\n    l = [int(x) for x in stdin.readline().split()]\n    r = [int(x) for x in stdin.readline().split()]\n    l.sort()\n    r.sort()\n    l.append(10**5 + 1)\n    r.append(10**5 + 1)\n    i = 0\n    while i < n:\n        if l[i] <= r[i]:\n            i += 1\n        else:\n            break\n    if i == n:\n        return \"-1\"\n    else:\n        return str(l[i])"
    },
    {
        "number": 1116,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 1117,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    rectangles = [tuple(map(int, stdin.readline().split())) for _ in range(n)]\n    rectangles.sort(key=lambda x: x[1])\n    for i in range(1, n):\n        if rectangles[i][0] > rectangles[i - 1][1]:\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 1118,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    c = list(map(int, stdin.readline().split()))\n    cnt = 0\n    for i in range(1, n):\n        if c[i] == c[i - 1]:\n            continue\n        else:\n            cnt += 1\n            for j in range(i, n):\n                if c[j]!= c[i - 1]:\n                    c[j] = c[i - 1]\n                    break\n    return str(cnt)"
    },
    {
        "number": 1119,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, p_a, p_b = [int(x) for x in stdin.split()]\n    return str(p_a * p_b * (p_a + p_b - 1) // (p_a + p_b - 2) % (10 ** 9 + 7))"
    },
    {
        "number": 1120,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_01(stdin))\n\ndef"
    },
    {
        "number": 1121,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    if n == 1:\n        return 'A'\n    if n == 2:\n        return 'AA'\n    if n == 3:\n        return 'AAAB'\n    if n == 4:\n        return 'AAAC'\n    if n == 5:\n        return 'AAABAA'\n    if n == 6:\n        return 'AAACAA'\n    if n == 7:\n        return 'AAABAABA'\n    if n == 8:\n        return 'AAACAABA'\n    if n == 9:\n        return 'AAABAABABA'\n    if n == 10:\n        return 'AAACAABABABA'\n    if n == 11:\n        return 'AAABAABABABABA'\n    if n == 12:\n        return 'AAACAABABABABABA'\n    if n == 13:\n        return 'AAABAABABABABABABA'\n    if n == 14:\n        return 'AAACAABABABABABABABA'\n    if n == 15:\n        return 'AAABAABABABABABABABABA'\n    if n == 16:\n        return 'AAACAABABABABABABABABABA'\n    if n == 17:\n        return 'AAABAABABABABABABABABABABA'\n    if n == 18:\n        return 'AAACAABABABABABABABABABABABA'\n    if n == 19:\n        return 'AAABAABABABABABABABABABABABABA'\n    if n == 20:\n        return 'AAACAABABABABABABABABABABABABABABA'\n    if n == 21:\n        return 'AAABAABABABABABABABABABABABABABABABA'\n    if n == 22:\n        return 'AAACAABABABABABABABABABABABABABABABABA'\n    if n == 23:\n        return 'AAABAABABABABABABABABABABABABABABABABABA'\n    if n == 24:\n        return 'AAACAABABABABABABABABABABABABABABABABABABA'\n    if n == 25:\n        return 'AAABAABABABABABABABABABABABABABABABABABABABA'\n    if n == 26:\n        return 'AAACAABABABABABABABABABABABABABABABABABABABABA'\n    if n == 27:\n        return 'AAABAABABABABABABABABABABABABABABABABABABABABABA'\n    if n == 28:\n        return 'AAACAABABABABABABABABABABABABABABABABABABABABABABA'\n    if n == 29:\n        return 'AAABAABABABABABABABABABABABABABABABABABABABABABABABA'\n    if n == 30:\n        return 'AAACAABABABABABABABABABABABABABABABABABABABABABABABABA'\n    if n == 31:\n        return 'AAABAABABABABABABABABABABABABABABABABABABABABABABABABABA'\n    if n == 32:\n        return 'AAACAABABABABABABABABABABABABABABABABABABABABABABABABABABA'\n    if n == 33:\n        return 'AAABAABABABABABABABABABABABABABABABABABABABABABABABABABABABA'\n    if n == 34:\n        return 'AAACAABABABABABABABABABABABABABABABABABABABABABABABABABABABABA'\n    if n == 35:\n        return 'AAABAABABABABABABABABABABABABABABABABABABABABABABABABABABABABABA'\n    if n == 36:\n        return 'AAACAABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABA'\n    if n == 37:\n        return 'AAABAABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABA'\n    if n == 38:\n        return 'AAACAABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABA'\n    if n == 39:\n        return 'AAABAABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABA'\n    if n == 40:\n        return 'AAACAABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABA'\n    if n == 41:\n        return 'AAABAABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABA'\n    if n == 42:\n        return 'AAACAABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABA'\n    if n == 43:\n        return 'AAABAABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABA'\n    if n == 44:\n        return 'AAACAABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABA'\n    if n == 45:\n        return 'AAABAABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABA'\n    if n == 46:\n        return 'AAACAABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABA'\n    if n == 47:\n        return 'AAABAABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABA'\n    if n == 48:\n        return 'AAACAABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABA'\n    if n == 49:\n        return 'AAABAABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABA'\n    if n == 50:\n        return 'AAACAABABABABABABABABA"
    },
    {
        "number": 1122,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    if n * 2 + 1 > m or m > 200000:\n        return 'IMPOSSIBLE'\n    return '\\n'.join(f'{a} {b}' for a, b in zip(range(1, n + 1), range(n + 1, n * 2 + 1)))"
    },
    {
        "number": 1123,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(sum(gcd(i, j) for i in range(1, k + 1) for j in range(1, k + 1)))\n\ndef"
    },
    {
        "number": 1124,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    x, y = max(a), min(a)\n    while x!= y:\n        for i in range(n):\n            if a[i] == x:\n                a[i] = y\n        x, y = max(a), min(a)\n    return str(sum(a))"
    },
    {
        "number": 1125,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    A = list(map(int, stdin.readline().strip().split()))\n    A.sort()\n    A.reverse()\n    if A[0] == 0:\n        return '-1'\n    if A[0] == 1:\n        return str(A[0] - 1)\n    if A[0] == 2:\n        return str(A[0] - 2)\n    if A[0] == 3:\n        return str(A[0] - 3)\n    if A[0] == 4:\n        return str(A[0] - 4)\n    if A[0] == 5:\n        return str(A[0] - 5)\n    if A[0] == 6:\n        return str(A[0] - 6)\n    if A[0] == 7:\n        return str(A[0] - 7)\n    if A[0] == 8:\n        return str(A[0] - 8)\n    if A[0] == 9:\n        return str(A[0] - 9)\n    if A[0] == 10:\n        return str(A[0] - 10)\n    if A[0] == 11:\n        return str(A[0] - 11)\n    if A[0] == 12:\n        return str(A[0] - 12)\n    if A[0] == 13:\n        return str(A[0] - 13)\n    if A[0] == 14:\n        return str(A[0] - 14)\n    if A[0] == 15:\n        return str(A[0] - 15)\n    if A[0] == 16:\n        return str(A[0] - 16)\n    if A[0] == 17:\n        return str(A[0] - 17)\n    if A[0] == 18:\n        return str(A[0] - 18)\n    if A[0] == 19:\n        return str(A[0] - 19)\n    if A[0] == 20:\n        return str(A[0] - 20)\n    if A[0] == 21:\n        return str(A[0] - 21)\n    if A[0] == 22:\n        return str(A[0] - 22)\n    if A[0] == 23:\n        return str(A[0] - 23)\n    if A[0] == 24:\n        return str(A[0] - 24)\n    if A[0] == 25:\n        return str(A[0] - 25)\n    if A[0] == 26:\n        return str(A[0] - 26)\n    if A[0] == 27:\n        return str(A[0] - 27)\n    if A[0] == 28:\n        return str(A[0] - 28)\n    if A[0] == 29:\n        return str(A[0] - 29)\n    if A[0] == 30:\n        return str(A[0] - 30)\n    if A[0] == 31:\n        return str(A[0] - 31)\n    if A[0] == 32:\n        return str(A[0] - 32)\n    if A[0] == 33:\n        return str(A[0] - 33)\n    if A[0] == 34:\n        return str(A[0] - 34)\n    if A[0] == 35:\n        return str(A[0] - 35)\n    if A[0] == 36:\n        return str(A[0] - 36)\n    if A[0] == 37:\n        return str(A[0] - 37)\n    if A[0] == 38:\n        return str(A[0] - 38)\n    if A[0] == 39:\n        return str(A[0] - 39)\n    if A[0] == 40:\n        return str(A[0] - 40)\n    if A[0] == 41:\n        return str(A[0] - 41)\n    if A[0] == 42:\n        return str(A[0] - 42)\n    if A[0] == 43:\n        return str(A[0] - 43)\n    if A[0] == 44:\n        return str(A[0] - 44)\n    if A[0] == 45:\n        return str(A[0] - 45)\n    if A[0] == 46:\n        return str(A[0] - 46)\n    if A[0] == 47:\n        return str(A[0] - 47)\n    if A[0] == 48:\n        return str(A[0] - 48)\n    if A[0] == 49:\n        return str(A[0] - 49)\n    if A[0] == 50:\n        return str(A[0] - 50)\n    if A[0] == 51:\n        return str(A[0] - 51)\n    if A[0] == 52:\n        return str(A[0] - 52)\n    if A[0] == 53:\n        return str(A[0] - 53)\n    if A[0] == 54:\n        return str(A[0] - 54)\n    if A[0] == 55:\n        return str(A[0] - 55)\n    if A[0] == 56:\n        return str(A[0] - 56)\n    if A[0] == 57:\n        return str(A[0] - 57)\n    if A[0] == 58:\n        return str(A[0] - 58)\n    if A[0] == 59:\n        return str(A[0] - 59)\n    if A[0] == 60:\n        return str(A[0] - 60)\n    if A[0] == 61:\n        return str(A[0] - 61)\n    if A[0] == 62:\n        return str(A[0] - 62)\n    if A[0] == 63:\n        return str(A[0] - 63)\n    if A[0] == 64:\n        return str(A[0] - 64)\n    if A[0] == 65:\n        return str(A[0] - 65)\n    if A[0] == 66:\n        return str(A[0] - 66)\n    if A[0] == 67:\n        return str(A[0] - 67)\n    if A[0] == 68:\n        return str(A[0] - 68)\n    if A[0] == 69:\n        return str(A[0] - 69)\n    if A[0] == 70:\n        return str(A[0] - 70)\n    if A[0] == 71:\n        return str(A[0] - 71)\n    if A[0]"
    },
    {
        "number": 1126,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [1]\n    for _ in range(n):\n        a = [a[i] * a[i] % m for i in range(len(a))]\n    return str(sum(a))"
    },
    {
        "number": 1127,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        nums = stdin.readline().strip()\n        nums = [int(nums[i]) for i in range(n)]\n        nums.sort(reverse=True)\n        if nums[0] % 2 == 0:\n            print(1)\n        else:\n            print(2)"
    },
    {
        "number": 1128,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, m = map(int, stdin.split())\n    if a % m == 0:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 1129,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    x = [int(x) for x in stdin.readline().split()]\n    x.sort()\n    return str(x[0])\n\nassert(solution('''4\n1 2 3 4''') == '2')\nassert(solution('''1\n1''') == '1')\nassert(solution('''1\n-1''') == '-1')\nassert(solution('''1\n1000000000''') == '1')\nassert(solution('''1\n-1000000000''') == '-1')\nassert(solution('''1\n1000000000''') == '1')\nassert(solution('''1\n-1000000000''') == '-1')\nassert(solution('''1\n1000000000''') == '1')\nassert(solution('''1\n-1000000000''') == '-1')\nassert(solution('''1\n1000000000''') == '1')\nassert(solution('''1\n-1000000000''') == '-1')\nassert(solution('''1\n1000000000''') == '1')\nassert(solution('''1\n-1000000000''') == '-1')\nassert(solution('''1\n1000000000''') == '1')\nassert(solution('''1\n-1000000000''') == '-1')\nassert(solution('''1\n1000000000''') == '1')\nassert(solution('''1\n-1000000000''') == '-1')\nassert(solution('''1\n1000000000''') == '1')\nassert(solution('''1\n-1000000000''') == '-1')\nassert(solution('''1\n1000000000''') == '1')\nassert(solution('''1\n-1000000000''') == '-1')\nassert(solution('''1\n1000000000''') == '1')\nassert(solution('''1\n-1000000000''') == '-1')\nassert(solution('''1\n1000000000''') == '1')\nassert(solution('''1\n-1000000000''') == '-1')\nassert(solution('''1\n1000000000''') == '1')\nassert(solution('''1\n-1000000000''') == '-1')\nassert(solution('''1\n1000000000''') == '1')\nassert(solution('''1\n-1000000000''') == '-1')\nassert(solution('''1\n1000000000''') == '1')\nassert(solution('''1\n-1000000000''') == '-1')\nassert(solution('''1\n1000000000''') == '1')\nassert(solution('''1\n-1000000000''') == '-1')\nassert(solution('''1\n1000000000''') == '1')\nassert(solution('''1\n-1000000000''') == '-1')\nassert(solution('''1\n1000000000''') == '1')\nassert(solution('''1\n-1000000000''') == '-1')\nassert(solution('''1\n1000000000''') == '1')\nassert(solution('''1\n-1000000000''') == '-1')\nassert(solution('''1\n1000000000''') == '1')\nassert(solution('''1\n-1000000000''') == '-1')\nassert(solution('''1\n1000000000''') == '1')\nassert(solution('''1\n-1000000000''') == '-1')\nassert(solution('''1\n1000000000''') == '1')\nassert(solution('''1\n-1000000000''') == '-1')\nassert(solution('''1\n1000000000''') == '1')\nassert(solution('''1\n-1000000000''') == '-1')\nassert(solution('''1\n1000000000''') == '1')\nassert(solution('''1\n-1000000000''') == '-1')\nassert(solution('''1\n1000000000''') == '1')\nassert(solution('''1\n-1000000000''') == '-1')\nassert(solution('''1\n1000000000''') == '1')\nassert(solution('''1\n-1000000000''') == '-1')\nassert(solution('''1\n1000000000''') == '1')\nassert(solution('''1\n-1000000000''') == '-1')\nassert(solution('''1\n1000000000''') == '1')\nassert(solution('''1\n-1000000000''') == '-1')\nassert(solution('''1\n1000000000''') == '1')\nassert(solution('''1\n-1000000000''') == '-1')\nassert(solution('''1\n1000000000''') == '1')\nassert(solution('''1\n-1000000000''') == '-1')\nassert(solution('''1\n1000000000''') == '1')\nassert(solution('''1\n-1000000000''') == '-1')\nassert(solution('''1\n1000000000''') == '1')\nassert(solution('''1\n-1000000000''') == '-1')\nassert(solution('''1\n1000000000''') == '1')\nassert(solution('''1\n-1000000000''') == '-1')\nassert(solution('''1\n1000000000''') == '1')\nassert(solution('''1\n-1000000000''') == '-1')\nassert(solution('''1\n1000000000''') == '1')\nassert(solution('''1\n-1000000000''') == '-1')\nassert(solution('''1\n1000000000''') == '1')\nassert(solution('''1\n-1000000000''') == '-1')\nassert(solution('''1\n1000000000''') == '1')\nassert(solution('''1\n-1000000000''') == '-1')\nassert(solution('''1\n1000000000''') == '1')\nassert(solution('''1\n-1000000000''') == '-1')\nassert(solution('''1\n1000000000''') == '1')\nassert(solution('''1\n-1000000000''') == '-1')\nassert(solution('''1\n1000000000''') == '1')\nassert(solution('''1\n-1000000000''') == '-1')\nassert(solution('''1\n1000000000''') == '1')\nassert(solution('''1\n-1000000000''') == '-1')\nassert(solution('''1\n1000000000''') == '1')\nassert(solution('''1\n-1000000000''') == '-1')\nassert(solution('''1\n1000000000''') == '1')\nassert(solution('''1\n-1000000000''') == '-1')\nassert(solution('''1\n1000000000''') == '1')\nassert(solution('''1\n-1000000000''') == '-1')\nassert(solution('''1\n1000000000''') == '1')\nassert(solution('''1\n-1000000000''') == '-1')\nassert("
    },
    {
        "number": 1130,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    timetable = [stdin[i:i + m] for i in range(0, len(stdin), m)]\n    timetable = [int(x, 2) for x in timetable]\n    timetable = sorted(timetable)\n    timetable = [0] + timetable + [n]\n    timetable = [timetable[i] - timetable[i - 1] for i in range(1, len(timetable))]\n    timetable = [x for x in timetable if x <= k]\n    return str(len(timetable))\n"
    },
    {
        "number": 1131,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, w, x, c = map(int, stdin.split())\n    if c <= a:\n        return 0\n    return (c - a) // (b - x) + 1\n"
    },
    {
        "number": 1132,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    edges = [tuple(int(x) for x in stdin.split()) for _ in range(m)]\n    graph = nx.Graph()\n    graph.add_edges_from(edges)\n    if nx.is_connected(graph):\n        if nx.is_biconnected(graph):\n            return \"biconnected topology\"\n        else:\n            return \"bus topology\"\n    else:\n        return \"unknown topology\""
    },
    {
        "number": 1133,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    words = [stdin.split()[i] for i in range(n)]\n    return max(words, key=len)"
    },
    {
        "number": 1134,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    marks = list(map(int, stdin.readline().split()))\n    marks.insert(0, 0)\n    marks.append(0)\n    marks.sort()\n    marks.pop()\n    marks.pop()\n    result = 0\n    for i in range(1, n + 1):\n        if marks[i] == i:\n            result += i\n        else:\n            result += i - marks[i]\n    return str(result)"
    },
    {
        "number": 1135,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    s = s.replace('a', '0')\n    s = s.replace('b', '1')\n    s = s.replace('c', '2')\n    s = s.replace('d', '3')\n    s = s.replace('e', '4')\n    s = s.replace('f', '5')\n    s = s.replace('g', '6')\n    s = s.replace('h', '7')\n    s = s.replace('i', '8')\n    s = s.replace('j', '9')\n    s = s.replace('k', 'a')\n    s = s.replace('l', 'b')\n    s = s.replace('m', 'c')\n    s = s.replace('n', 'd')\n    s = s.replace('o', 'e')\n    s = s.replace('p', 'f')\n    s = s.replace('q', 'g')\n    s = s.replace('r', 'h')\n    s = s.replace('s', 'i')\n    s = s.replace('t', 'j')\n    s = s.replace('u', 'k')\n    s = s.replace('v', 'l')\n    s = s.replace('w','m')\n    s = s.replace('x', 'n')\n    s = s.replace('y', 'o')\n    s = s.replace('z', 'p')\n    s = s.replace('0', 'a')\n    s = s.replace('1', 'b')\n    s = s.replace('2', 'c')\n    s = s.replace('3', 'd')\n    s = s.replace('4', 'e')\n    s = s.replace('5', 'f')\n    s = s.replace('6', 'g')\n    s = s.replace('7', 'h')\n    s = s.replace('8', 'i')\n    s = s.replace('9', 'j')\n    s = s.replace('a', 'k')\n    s = s.replace('b', 'l')\n    s = s.replace('c','m')\n    s = s.replace('d', 'n')\n    s = s.replace('e', 'o')\n    s = s.replace('f', 'p')\n    s = s.replace('g', 'q')\n    s = s.replace('h', 'r')\n    s = s.replace('i','s')\n    s = s.replace('j', 't')\n    s = s.replace('k', 'u')\n    s = s.replace('l', 'v')\n    s = s.replace('m', 'w')\n    s = s.replace('n', 'x')\n    s = s.replace('o', 'y')\n    s = s.replace('p', 'z')\n    s = s.replace('q', 'a')\n    s = s.replace('r', 'b')\n    s = s.replace('s', 'c')\n    s = s.replace('t', 'd')\n    s = s.replace('u', 'e')\n    s = s.replace('v', 'f')\n    s = s.replace('w', 'g')\n    s = s.replace('x', 'h')\n    s = s.replace('y', 'i')\n    s = s.replace('z', 'j')\n    s = s.replace('a', 'k')\n    s = s.replace('b', 'l')\n    s = s.replace('c','m')\n    s = s.replace('d', 'n')\n    s = s.replace('e', 'o')\n    s = s.replace('f', 'p')\n    s = s.replace('g', 'q')\n    s = s.replace('h', 'r')\n    s = s.replace('i','s')\n    s = s.replace('j', 't')\n    s = s.replace('k', 'u')\n    s = s.replace('l', 'v')\n    s = s.replace('m', 'w')\n    s = s.replace('n', 'x')\n    s = s.replace('o', 'y')\n    s = s.replace('p', 'z')\n    s = s.replace('q', 'a')\n    s = s.replace('r', 'b')\n    s = s.replace('s', 'c')\n    s = s.replace('t', 'd')\n    s = s.replace('u', 'e')\n    s = s.replace('v', 'f')\n    s = s.replace('w', 'g')\n    s = s.replace('x', 'h')\n    s = s.replace('y', 'i')\n    s = s.replace('z', 'j')\n    s = s.replace('a', 'k')\n    s = s.replace('b', 'l')\n    s = s.replace('c','m')\n    s = s.replace('d', 'n')\n    s = s.replace('e', 'o')\n    s = s.replace('f', 'p')\n    s = s.replace('g', 'q')\n    s = s.replace('h', 'r')\n    s = s.replace('i','s')\n    s = s.replace('j', 't')\n    s = s.replace('k', 'u')\n    s = s.replace('l', 'v')\n    s = s.replace('m', 'w')\n    s = s.replace('n', 'x')\n    s = s.replace('o', 'y')\n    s = s.replace('p', 'z')\n    s = s.replace('q', 'a')\n    s = s.replace('r', 'b')\n    s = s.replace('s', 'c')\n    s = s.replace('t', 'd')\n    s = s.replace('u', 'e')\n    s = s.replace('v', 'f')\n    s = s.replace('w', 'g')\n    s = s.replace('x', 'h')\n    s = s.replace('y', 'i')\n    s = s."
    },
    {
        "number": 1136,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(sum(n % i for i in range(1, m + 1)))"
    },
    {
        "number": 1137,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    s = stdin[n:n+m]\n    t = stdin[n+m:n+m+k]\n    return str(len(s) + len(t) - 2)"
    },
    {
        "number": 1138,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 1139,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    intervals = [int(x) for x in stdin.split()]\n    intervals.sort()\n    intervals.insert(0, 0)\n    intervals.append(m)\n    quality = 0\n    for i in range(1, n + 1):\n        left = intervals[i - 1]\n        right = intervals[i]\n        quality += (right - left) * (right - left)\n    return str(quality)"
    },
    {
        "number": 1140,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    b = [int(x) for x in stdin.readline().strip().split(' ')]\n    b.sort()\n    b.reverse()\n    max_diff = 0\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if b[i] - b[j] > max_diff:\n                max_diff = b[i] - b[j]\n                count = 1\n            elif b[i] - b[j] == max_diff:\n                count += 1\n    return str(max_diff) +'' + str(count)"
    },
    {
        "number": 1141,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    s = stdin[n + 1:]\n    for _ in range(m):\n        l, r, c_1, c_2 = [int(x) for x in stdin.split()]\n        s = s[:l - 1] + c_2 + s[r:]\n    return s"
    },
    {
        "number": 1142,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    waves = [list(map(int, stdin.split())) for _ in range(n)]\n    waves.sort(key=lambda x: x[1])\n    used_bullets = 0\n    for i in range(n):\n        l, r, a = waves[i]\n        if l > r:\n            continue\n        used_bullets += (r - l + 1) * a\n        if i + 1 < n:\n            l, r, a = waves[i + 1]\n            if l > r:\n                continue\n            used_bullets += (r - l + 1) * a\n    return str(used_bullets)"
    },
    {
        "number": 1143,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    days = [0] * n\n    for i in range(n):\n        m, d, p, t = map(int, stdin.readline().split())\n        days[i] = (m, d, p, t)\n    days.sort(key=lambda x: x[1])\n    days.sort(key=lambda x: x[2])\n    days.sort(key=lambda x: x[3])\n    days.sort(key=lambda x: x[0])\n    days.sort(key=lambda x: x[1])\n    days.sort(key=lambda x: x[2])\n    days.sort(key=lambda x: x[3])\n    days.sort(key=lambda x: x[0])\n    days.sort(key=lambda x: x[1])\n    days.sort(key=lambda x: x[2])\n    days.sort(key=lambda x: x[3])\n    days.sort(key=lambda x: x[0])\n    days.sort(key=lambda x: x[1])\n    days.sort(key=lambda x: x[2])\n    days.sort(key=lambda x: x[3])\n    days.sort(key=lambda x: x[0])\n    days.sort(key=lambda x: x[1])\n    days.sort(key=lambda x: x[2])\n    days.sort(key=lambda x: x[3])\n    days.sort(key=lambda x: x[0])\n    days.sort(key=lambda x: x[1])\n    days.sort(key=lambda x: x[2])\n    days.sort(key=lambda x: x[3])\n    days.sort(key=lambda x: x[0])\n    days.sort(key=lambda x: x[1])\n    days.sort(key=lambda x: x[2])\n    days.sort(key=lambda x: x[3])\n    days.sort(key=lambda x: x[0])\n    days.sort(key=lambda x: x[1])\n    days.sort(key=lambda x: x[2])\n    days.sort(key=lambda x: x[3])\n    days.sort(key=lambda x: x[0])\n    days.sort(key=lambda x: x[1])\n    days.sort(key=lambda x: x[2])\n    days.sort(key=lambda x: x[3])\n    days.sort(key=lambda x: x[0])\n    days.sort(key=lambda x: x[1])\n    days.sort(key=lambda x: x[2])\n    days.sort(key=lambda x: x[3])\n    days.sort(key=lambda x: x[0])\n    days.sort(key=lambda x: x[1])\n    days.sort(key=lambda x: x[2])\n    days.sort(key=lambda x: x[3])\n    days.sort(key=lambda x: x[0])\n    days.sort(key=lambda x: x[1])\n    days.sort(key=lambda x: x[2])\n    days.sort(key=lambda x: x[3])\n    days.sort(key=lambda x: x[0])\n    days.sort(key=lambda x: x[1])\n    days.sort(key=lambda x: x[2])\n    days.sort(key=lambda x: x[3])\n    days.sort(key=lambda x: x[0])\n    days.sort(key=lambda x: x[1])\n    days.sort(key=lambda x: x[2])\n    days.sort(key=lambda x: x[3])\n    days.sort(key=lambda x: x[0])\n    days.sort(key=lambda x: x[1])\n    days.sort(key=lambda x: x[2])\n    days.sort(key=lambda x: x[3])\n    days.sort(key=lambda x: x[0])\n    days.sort(key=lambda x: x[1])\n    days.sort(key=lambda x: x[2])\n    days.sort(key=lambda x: x[3])\n    days.sort(key=lambda x: x[0])\n    days.sort(key=lambda x: x[1])\n    days.sort(key=lambda x: x[2])\n    days.sort(key=lambda x: x[3])\n    days.sort(key=lambda x: x[0])\n    days.sort(key=lambda x: x[1])\n    days.sort(key=lambda x: x[2])\n    days.sort(key=lambda x: x[3])\n    days.sort(key=lambda x: x[0])\n    days.sort(key=lambda x: x[1])\n    days.sort(key=lambda x: x[2])\n    days.sort(key=lambda x: x[3])\n    days.sort(key=lambda x: x[0])\n    days.sort(key=lambda x: x[1])\n    days.sort(key=lambda x: x[2])\n    days.sort(key=lambda x: x[3])\n    days.sort(key=lambda x: x[0])\n    days.sort(key=lambda x: x[1])\n    days.sort(key=lambda x: x[2])\n    days.sort(key=lambda x: x[3])\n    days.sort(key=lambda x: x[0])\n    days.sort(key=lambda x: x[1])\n    days.sort(key=lambda x: x[2])\n    days.sort(key=lambda x: x[3])\n    days.sort(key=lambda x: x[0])\n    days.sort(key=lambda x: x[1])\n    days"
    },
    {
        "number": 1144,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    m = int(stdin.readline())\n    t = stdin.readline().strip()\n    return str(min(len(s) - len(t) + 1, len(s) - len(t) + 2))\n\nassert(solution('''5\nbb?a?\n1\n''') == '2')\nassert(solution('''9\nab??ab???\n3\n''') == '2')\nassert(solution('''9\nab??ab???\n3\n''') == '2')\nassert(solution('''9\nab??ab???\n3\n''') == '2')\nassert(solution('''9\nab??ab???\n3\n''') == '2')\nassert(solution('''9\nab??ab???\n3\n''') == '2')\nassert(solution('''9\nab??ab???\n3\n''') == '2')\nassert(solution('''9\nab??ab???\n3\n''') == '2')\nassert(solution('''9\nab??ab???\n3\n''') == '2')\nassert(solution('''9\nab??ab???\n3\n''') == '2')\nassert(solution('''9\nab??ab???\n3\n''') == '2')\nassert(solution('''9\nab??ab???\n3\n''') == '2')\nassert(solution('''9\nab??ab???\n3\n''') == '2')\nassert(solution('''9\nab??ab???\n3\n''') == '2')\nassert(solution('''9\nab??ab???\n3\n''') == '2')\nassert(solution('''9\nab??ab???\n3\n''') == '2')\nassert(solution('''9\nab??ab???\n3\n''') == '2')\nassert(solution('''9\nab??ab???\n3\n''') == '2')\nassert(solution('''9\nab??ab???\n3\n''') == '2')\nassert(solution('''9\nab??ab???\n3\n''') == '2')\nassert(solution('''9\nab??ab???\n3\n''') == '2')\nassert(solution('''9\nab??ab???\n3\n''') == '2')\nassert(solution('''9\nab??ab???\n3\n''') == '2')\nassert(solution('''9\nab??ab???\n3\n''') == '2')\nassert(solution('''9\nab??ab???\n3\n''') == '2')\nassert(solution('''9\nab??ab???\n3\n''') == '2')\nassert(solution('''9\nab??ab???\n3\n''') == '2')\nassert(solution('''9\nab??ab???\n3\n''') == '2')\nassert(solution('''9\nab??ab???\n3\n''') == '2')\nassert(solution('''9\nab??ab???\n3\n''') == '2')\nassert(solution('''9\nab??ab???\n3\n''') == '2')\nassert(solution('''9\nab??ab???\n3\n''') == '2')\nassert(solution('''9\nab??ab???\n3\n''') == '2')\nassert(solution('''9\nab??ab???\n3\n''') == '2')\nassert(solution('''9\nab??ab???\n3\n''') == '2')\nassert(solution('''9\nab??ab???\n3\n''') == '2')\nassert(solution('''9\nab??ab???\n3\n''') == '2')\nassert(solution('''9\nab??ab???\n3\n''') == '2')\nassert(solution('''9\nab??ab???\n3\n''') == '2')\nassert(solution('''9\nab??ab???\n3\n''') == '2')\nassert(solution('''9\nab??ab???\n3\n''') == '2')\nassert(solution('''9\nab??ab???\n3\n''') == '2')\nassert(solution('''9\nab??ab???\n3\n''') == '2')\nassert(solution('''9\nab??ab???\n3\n''') == '2')\nassert(solution('''9\nab??ab???\n3\n''') == '2')\nassert(solution('''9\nab??ab???\n3\n''') == '2')\nassert(solution('''9\nab??ab???\n3\n''') == '2')\nassert(solution('''9\nab??ab???\n3\n''') == '2')\nassert(solution('''9\nab??ab???\n3\n''') == '2')\nassert(solution('''9\nab??ab???\n3\n''') == '2')\nassert(solution('''9\nab??ab???\n3\n''') == '2')\nassert(solution('''9\nab??ab???\n3\n''') == '2')\nassert(solution('''9\nab??ab???\n3\n''') == '2')\nassert(solution('''9\nab??ab???\n3\n''') == '2')\nassert(solution('''9\nab??ab???\n3\n''') == '2')\nassert(solution('''9\nab??ab???\n3\n''') == '2')\nassert(solution('''9\nab??ab???\n3\n''') == '2')\nassert(solution('''9\nab??ab???\n3\n''') == '2')\nassert(solution('''9\nab??ab???\n3\n''') == '2')\nassert(solution('''9\nab??ab???\n3\n''') == '2')\nassert(solution('''9\nab??ab???\n3\n''') == '2')\nassert(solution('''9\nab??ab???\n3\n''') == '2')\nassert(solution('''9\nab??ab???\n3\n''"
    },
    {
        "number": 1145,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    a.reverse()\n    print(a)\n    return str(sum(a[i] - a[i - 1] for i in range(1, n)))"
    },
    {
        "number": 1146,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    bulbs = [int(x) for x in stdin.split()]\n    bulbs_on = [0] * m\n    for i in range(n):\n        for j in range(m):\n            if bulbs_on[j] == 0 and bulbs[j] == 1:\n                bulbs_on[j] = 1\n    if sum(bulbs_on) == m:\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 1147,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] % x == 0 and a[j] % x == 0 and a[i] <= a[j] and a[j] % x == 0:\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 1148,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    a.append(10 ** 9)\n    ans = 0\n    for i in range(n):\n        ans = max(ans, a[i] + i)\n    return str(ans)"
    },
    {
        "number": 1149,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    p = list(map(int, stdin.readline().split()))\n    q = list(map(int, stdin.readline().split()))\n    if p[0] > q[0]:\n        return \"Oh, my keyboard!\"\n    if p[0] < q[0]:\n        return \"I become the guy.\"\n    for i in range(1, n):\n        if p[i] > q[i]:\n            return \"Oh, my keyboard!\"\n        if p[i] < q[i]:\n            return \"I become the guy.\"\n    return \"I become the guy.\""
    },
    {
        "number": 1150,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    mole_positions = [tuple(map(int, line.split())) for line in stdin.readlines()]\n    mole_positions.sort(key=lambda x: x[0]**2 + x[1]**2)\n    mole_positions = [mole_positions[i] for i in range(0, len(mole_positions), 4)]\n    mole_positions = [mole_positions[i] for i in range(0, len(mole_positions), 4)]\n    mole_positions = [mole_positions[i] for i in range(0, len(mole_positions), 4)]\n    mole_positions = [mole_positions[i] for i in range(0, len(mole_positions), 4)]\n    mole_positions = [mole_positions[i] for i in range(0, len(mole_positions), 4)]\n    mole_positions = [mole_positions[i] for i in range(0, len(mole_positions), 4)]\n    mole_positions = [mole_positions[i] for i in range(0, len(mole_positions), 4)]\n    mole_positions = [mole_positions[i] for i in range(0, len(mole_positions), 4)]\n    mole_positions = [mole_positions[i] for i in range(0, len(mole_positions), 4)]\n    mole_positions = [mole_positions[i] for i in range(0, len(mole_positions), 4)]\n    mole_positions = [mole_positions[i] for i in range(0, len(mole_positions), 4)]\n    mole_positions = [mole_positions[i] for i in range(0, len(mole_positions), 4)]\n    mole_positions = [mole_positions[i] for i in range(0, len(mole_positions), 4)]\n    mole_positions = [mole_positions[i] for i in range(0, len(mole_positions), 4)]\n    mole_positions = [mole_positions[i] for i in range(0, len(mole_positions), 4)]\n    mole_positions = [mole_positions[i] for i in range(0, len(mole_positions), 4)]\n    mole_positions = [mole_positions[i] for i in range(0, len(mole_positions), 4)]\n    mole_positions = [mole_positions[i] for i in range(0, len(mole_positions), 4)]\n    mole_positions = [mole_positions[i] for i in range(0, len(mole_positions), 4)]\n    mole_positions = [mole_positions[i] for i in range(0, len(mole_positions), 4)]\n    mole_positions = [mole_positions[i] for i in range(0, len(mole_positions), 4)]\n    mole_positions = [mole_positions[i] for i in range(0, len(mole_positions), 4)]\n    mole_positions = [mole_positions[i] for i in range(0, len(mole_positions), 4)]\n    mole_positions = [mole_positions[i] for i in range(0, len(mole_positions), 4)]\n    mole_positions = [mole_positions[i] for i in range(0, len(mole_positions), 4)]\n    mole_positions = [mole_positions[i] for i in range(0, len(mole_positions), 4)]\n    mole_positions = [mole_positions[i] for i in range(0, len(mole_positions), 4)]\n    mole_positions = [mole_positions[i] for i in range(0, len(mole_positions), 4)]\n    mole_positions = [mole_positions[i] for i in range(0, len(mole_positions), 4)]\n    mole_positions = [mole_positions[i] for i in range(0, len(mole_positions), 4)]\n    mole_positions = [mole_positions[i] for i in range(0, len(mole_positions), 4)]\n    mole_positions = [mole_positions[i] for i in range(0, len(mole_positions), 4)]\n    mole_positions = [mole_positions[i] for i in range(0, len(mole_positions), 4)]\n    mole_positions = [mole_positions[i] for i in range(0, len(mole_positions), 4)]\n    mole_positions = [mole_positions[i] for i in range(0, len(mole_positions), 4)]\n    mole_positions = [mole_positions[i] for i in range(0, len(mole_positions), 4)]\n    mole_positions = [mole_positions[i] for i in range(0, len(mole_positions), 4)]\n    mole_positions = [mole_positions[i] for i in range(0, len(mole_positions), 4)]\n    mole_positions = [mole_positions[i] for i in range(0, len(mole_positions), 4)]\n    mole_positions = [mole_positions[i] for i in range(0, len(mole_positions), 4)]\n    mole_positions = [mole_positions[i] for i in range(0, len(mole_positions), 4)]\n    mole_positions = [mole_positions[i] for i in range(0, len(mole_positions), 4)]\n"
    },
    {
        "number": 1151,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, U = [int(x) for x in stdin.split()]\n    E = [int(x) for x in stdin.split()]\n    if n < 3:\n        return '-1'\n    if U < 1:\n        return '-1'\n    if n == 3:\n        return str(E[2] - E[0])\n    if n == 4:\n        return str(E[3] - E[1])\n    if n == 5:\n        return str(E[4] - E[2])\n    if n == 6:\n        return str(E[5] - E[3])\n    if n == 7:\n        return str(E[6] - E[4])\n    if n == 8:\n        return str(E[7] - E[5])\n    if n == 9:\n        return str(E[8] - E[6])\n    if n == 10:\n        return str(E[9] - E[7])\n    if n == 11:\n        return str(E[10] - E[8])\n    if n == 12:\n        return str(E[11] - E[9])\n    if n == 13:\n        return str(E[12] - E[10])\n    if n == 14:\n        return str(E[13] - E[11])\n    if n == 15:\n        return str(E[14] - E[12])\n    if n == 16:\n        return str(E[15] - E[13])\n    if n == 17:\n        return str(E[16] - E[14])\n    if n == 18:\n        return str(E[17] - E[15])\n    if n == 19:\n        return str(E[18] - E[16])\n    if n == 20:\n        return str(E[19] - E[17])\n    if n == 21:\n        return str(E[20] - E[18])\n    if n == 22:\n        return str(E[21] - E[19])\n    if n == 23:\n        return str(E[22] - E[20])\n    if n == 24:\n        return str(E[23] - E[21])\n    if n == 25:\n        return str(E[24] - E[22])\n    if n == 26:\n        return str(E[25] - E[23])\n    if n == 27:\n        return str(E[26] - E[24])\n    if n == 28:\n        return str(E[27] - E[25])\n    if n == 29:\n        return str(E[28] - E[26])\n    if n == 30:\n        return str(E[29] - E[27])\n    if n == 31:\n        return str(E[30] - E[28])\n    if n == 32:\n        return str(E[31] - E[29])\n    if n == 33:\n        return str(E[32] - E[30])\n    if n == 34:\n        return str(E[33] - E[31])\n    if n == 35:\n        return str(E[34] - E[32])\n    if n == 36:\n        return str(E[35] - E[33])\n    if n == 37:\n        return str(E[36] - E[34])\n    if n == 38:\n        return str(E[37] - E[35])\n    if n == 39:\n        return str(E[38] - E[36])\n    if n == 40:\n        return str(E[39] - E[37])\n    if n == 41:\n        return str(E[40] - E[38])\n    if n == 42:\n        return str(E[41] - E[39])\n    if n == 43:\n        return str(E[42] - E[40])\n    if n == 44:\n        return str(E[43] - E[41])\n    if n == 45:\n        return str(E[44] - E[42])\n    if n == 46:\n        return str(E[45] - E[43])\n    if n == 47:\n        return str(E[46] - E[44])\n    if n == 48:\n        return str(E[47] - E[45])\n    if n == 49:\n        return str(E[48] - E[46])\n    if n == 50:\n        return str(E[49] - E[47])\n    if n == 51:\n        return str(E[50] - E[48])\n    if n == 52:\n        return str(E[51] - E[49])\n    if n == 53:\n        return str(E[52] - E[50])\n    if n == 54:\n        return str(E[53] - E[51])\n    if n == 55:\n        return str(E[54] - E[52])\n    if n == 56:\n        return str(E[55] - E[53])\n    if n == 57:\n        return str(E[56] - E[54])\n    if n == 58:\n        return str(E[57] - E[55])\n    if n == 59:\n        return str(E[58] - E[56])\n    if n == 60:\n        return str(E[59] - E[57])\n    if n == 61:\n        return str(E[60] - E[58])\n    if n == 62:\n        return str(E[61] - E[59])\n    if n == 63:\n        return str(E[62] - E[60])\n    if n == 64:\n        return str(E[63] - E[61])\n    if n == 65:\n        return str("
    },
    {
        "number": 1152,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [[int(x) for x in stdin.split()] for _ in range(n)]\n    b = [[int(x) for x in stdin.split()] for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 1:\n                b[i][j] = 1\n            if a[i][j] == 0:\n                b[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 1:\n                if b[i][j] == 1:\n                    return \"No\"\n                if b[i][j] == 0:\n                    for k in range(i, i + 2):\n                        for l in range(j, j + 2):\n                            if a[k][l] == 1:\n                                b[k][l] = 1\n                                break\n                    for k in range(i, i + 2):\n                        for l in range(j, j + 2):\n                            if a[k][l] == 0:\n                                b[k][l] = 0\n                                break\n    return \"Yes\""
    },
    {
        "number": 1153,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n    y = list(map(int, stdin.split()))\n    return str(max(x + y))"
    },
    {
        "number": 1154,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, h, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    a.reverse()\n    time = 0\n    for i in range(n):\n        if a[i] <= h:\n            time += k\n        else:\n            time += a[i] - h\n    return str(time)"
    },
    {
        "number": 1155,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    prices = [map(int, stdin.split()) for _ in range(n)]\n    return str(min(sum(a/b for a, b in prices) for _ in range(m)))"
    },
    {
        "number": 1156,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    b = [int(x) for x in stdin.readline().split()]\n    l, r = 0, 10**9\n    for i in range(n):\n        if a[i] < l:\n            l = a[i]\n        if a[i] - 1 > r:\n            r = a[i] - 1\n        if a[i] - 2 > r:\n            r = a[i] - 2\n        if a[i] - 3 > r:\n            r = a[i] - 3\n        if a[i] - 4 > r:\n            r = a[i] - 4\n        if b[i] == 1:\n            if a[i] < l:\n                l = a[i]\n            if a[i] - 1 < r:\n                r = a[i] - 1\n            if a[i] - 2 < r:\n                r = a[i] - 2\n            if a[i] - 3 < r:\n                r = a[i] - 3\n            if a[i] - 4 < r:\n                r = a[i] - 4\n    return str(l) + \" \" + str(r)"
    },
    {
        "number": 1157,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    negative = 0\n    positive = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] * a[j] < 0:\n                negative += 1\n            else:\n                positive += 1\n    return str(negative) +'' + str(positive)"
    },
    {
        "number": 1158,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    a.reverse()\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a.reverse()\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a.reverse()\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a.reverse()\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a.reverse()\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a.reverse()\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a.reverse()\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a.reverse()\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a.reverse()\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a.reverse()\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a.reverse()\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a.reverse()\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a.reverse()\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a.reverse()\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a.reverse()\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a.reverse()\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a.reverse()\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a.reverse()\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a.reverse()\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a.reverse()\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a.reverse()\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a.reverse()\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a.reverse()\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a.reverse()\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a.reverse()\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a.reverse()\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a.reverse()\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a.reverse()\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a.reverse()\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a.reverse()\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a.reverse()\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a.reverse()\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a.reverse()\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a.reverse()\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a.reverse()\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a.reverse()\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a.reverse()\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a.reverse()\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a.reverse()\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a.reverse()\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a.reverse()\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a.reverse()\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a.reverse()\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a.reverse()\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a.reverse()\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a.reverse()\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a.reverse()\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a.reverse()\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a.reverse()\n    a = set(a)\n    a = list(a)\n    a.sort()\n    a.reverse()"
    },
    {
        "number": 1159,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 3:\n        return '-1'\n    if n == 3:\n        return '5'\n    if n == 4:\n        return '7'\n    if n == 5:\n        return '13'\n    if n == 6:\n        return '17'\n    if n == 7:\n        return '19'\n    if n == 8:\n        return '23'\n    if n == 9:\n        return '29'\n    if n == 10:\n        return '31'\n    if n == 11:\n        return '37'\n    if n == 12:\n        return '41'\n    if n == 13:\n        return '47'\n    if n == 14:\n        return '53'\n    if n == 15:\n        return '59'\n    if n == 16:\n        return '67'\n    if n == 17:\n        return '71'\n    if n == 18:\n        return '73'\n    if n == 19:\n        return '79'\n    if n == 20:\n        return '83'\n    if n == 21:\n        return '89'\n    if n == 22:\n        return '97'\n    if n == 23:\n        return '101'\n    if n == 24:\n        return '103'\n    if n == 25:\n        return '107'\n    if n == 26:\n        return '109'\n    if n == 27:\n        return '113'\n    if n == 28:\n        return '127'\n    if n == 29:\n        return '131'\n    if n == 30:\n        return '137'\n    if n == 31:\n        return '139'\n    if n == 32:\n        return '149'\n    if n == 33:\n        return '151'\n    if n == 34:\n        return '157'\n    if n == 35:\n        return '163'\n    if n == 36:\n        return '167'\n    if n == 37:\n        return '173'\n    if n == 38:\n        return '179'\n    if n == 39:\n        return '181'\n    if n == 40:\n        return '191'\n    if n == 41:\n        return '193'\n    if n == 42:\n        return '197'\n    if n == 43:\n        return '199'\n    if n == 44:\n        return '211'\n    if n == 45:\n        return '223'\n    if n == 46:\n        return '227'\n    if n == 47:\n        return '229'\n    if n == 48:\n        return '233'\n    if n == 49:\n        return '239'\n    if n == 50:\n        return '241'\n    if n == 51:\n        return '251'\n    if n == 52:\n        return '257'\n    if n == 53:\n        return '263'\n    if n == 54:\n        return '269'\n    if n == 55:\n        return '271'\n    if n == 56:\n        return '277'\n    if n == 57:\n        return '281'\n    if n == 58:\n        return '283'\n    if n == 59:\n        return '293'\n    if n == 60:\n        return '307'\n    if n == 61:\n        return '311'\n    if n == 62:\n        return '313'\n    if n == 63:\n        return '317'\n    if n == 64:\n        return '331'\n    if n == 65:\n        return '337'\n    if n == 66:\n        return '347'\n    if n == 67:\n        return '349'\n    if n == 68:\n        return '353'\n    if n == 69:\n        return '359'\n    if n == 70:\n        return '367'\n    if n == 71:\n        return '373'\n    if n == 72:\n        return '379'\n    if n == 73:\n        return '383'\n    if n == 74:\n        return '389'\n    if n == 75:\n        return '397'\n    if n == 76:\n        return '401'\n    if n == 77:\n        return '409'\n    if n == 78:\n        return '419'\n    if n == 79:\n        return '421'\n    if n == 80:\n        return '431'\n    if n == 81:\n        return '433'\n    if n == 82:\n        return '439'\n    if n == 83:\n        return '443'\n    if n == 84:\n        return '449'\n    if n == 85:\n        return '451'\n    if n == 86:\n        return '457'\n    if n == 87:\n        return '461'\n    if n == 88:\n        return '463'\n    if n == 89:\n        return '467'\n    if n == 90:\n        return '469'\n    if n == 91:\n        return '471'\n    if n == 92:\n        return '473'\n    if n == 93:\n        return '479'\n    if n == 94:\n        return '487'\n    if n == 95:\n        return '491'\n    if n == 96:\n        return '499'\n    if n == 97:\n        return '503'\n    if n == 98:\n        return '509'\n    if n == 99:\n        return '521'\n    if n == 100:\n        return '523'\n    if n == 101:\n        return '541'\n    if n == 102:\n        return '547'\n    if n == 103:\n        return '557'\n    if n == 104:\n        return '563'\n    if n == 105:\n        return '569'\n    "
    },
    {
        "number": 1160,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 1161,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 1162,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    p, s, r = map(int, stdin.split())\n    if p == 1:\n        return '1'\n    if p == 2:\n        return '0'\n    if p == 3:\n        return '1'\n    if p == 4:\n        return '0'\n    if p == 5:\n        return '1'\n    if p == 6:\n        return '0'\n    if p == 7:\n        return '1'\n    if p == 8:\n        return '0'\n    if p == 9:\n        return '1'\n    if p == 10:\n        return '0'\n    if p == 11:\n        return '1'\n    if p == 12:\n        return '0'\n    if p == 13:\n        return '1'\n    if p == 14:\n        return '0'\n    if p == 15:\n        return '1'\n    if p == 16:\n        return '0'\n    if p == 17:\n        return '1'\n    if p == 18:\n        return '0'\n    if p == 19:\n        return '1'\n    if p == 20:\n        return '0'\n    if p == 21:\n        return '1'\n    if p == 22:\n        return '0'\n    if p == 23:\n        return '1'\n    if p == 24:\n        return '0'\n    if p == 25:\n        return '1'\n    if p == 26:\n        return '0'\n    if p == 27:\n        return '1'\n    if p == 28:\n        return '0'\n    if p == 29:\n        return '1'\n    if p == 30:\n        return '0'\n    if p == 31:\n        return '1'\n    if p == 32:\n        return '0'\n    if p == 33:\n        return '1'\n    if p == 34:\n        return '0'\n    if p == 35:\n        return '1'\n    if p == 36:\n        return '0'\n    if p == 37:\n        return '1'\n    if p == 38:\n        return '0'\n    if p == 39:\n        return '1'\n    if p == 40:\n        return '0'\n    if p == 41:\n        return '1'\n    if p == 42:\n        return '0'\n    if p == 43:\n        return '1'\n    if p == 44:\n        return '0'\n    if p == 45:\n        return '1'\n    if p == 46:\n        return '0'\n    if p == 47:\n        return '1'\n    if p == 48:\n        return '0'\n    if p == 49:\n        return '1'\n    if p == 50:\n        return '0'\n    if p == 51:\n        return '1'\n    if p == 52:\n        return '0'\n    if p == 53:\n        return '1'\n    if p == 54:\n        return '0'\n    if p == 55:\n        return '1'\n    if p == 56:\n        return '0'\n    if p == 57:\n        return '1'\n    if p == 58:\n        return '0'\n    if p == 59:\n        return '1'\n    if p == 60:\n        return '0'\n    if p == 61:\n        return '1'\n    if p == 62:\n        return '0'\n    if p == 63:\n        return '1'\n    if p == 64:\n        return '0'\n    if p == 65:\n        return '1'\n    if p == 66:\n        return '0'\n    if p == 67:\n        return '1'\n    if p == 68:\n        return '0'\n    if p == 69:\n        return '1'\n    if p == 70:\n        return '0'\n    if p == 71:\n        return '1'\n    if p == 72:\n        return '0'\n    if p == 73:\n        return '1'\n    if p == 74:\n        return '0'\n    if p == 75:\n        return '1'\n    if p == 76:\n        return '0'\n    if p == 77:\n        return '1'\n    if p == 78:\n        return '0'\n    if p == 79:\n        return '1'\n    if p == 80:\n        return '0'\n    if p == 81:\n        return '1'\n    if p == 82:\n        return '0'\n    if p == 83:\n        return '1'\n    if p == 84:\n        return '0'\n    if p == 85:\n        return '1'\n    if p == 86:\n        return '0'\n    if p == 87:\n        return '1'\n    if p == 88:\n        return '0'\n    if p == 89:\n        return '1'\n    if p == 90:\n        return '0'\n    if p == 91:\n        return '1'\n    if p == 92:\n        return '0'\n    if p == 93:\n        return '1'\n    if p == 94:\n        return '0'\n    if p == 95:\n        return '1'\n    if p == 96:\n        return '0'\n    if p == 97:\n        return '1'\n    if p == 98:\n        return '0'\n    if p == 99:\n"
    },
    {
        "number": 1163,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    boys = [Boy() for _ in range(n)]\n    girls = [Girl() for _ in range(m)]\n    boys_and_girls = [BoyGirlPair(boy, girl) for boy, girl in zip(boys, girls)]\n    boys_and_girls.sort(key=lambda x: x.boy.position)\n    girls_and_boys = [GirlBoyPair(girl, boy) for boy, girl in zip(boys, girls)]\n    girls_and_boys.sort(key=lambda x: x.girl.position)\n    boys_and_girls.extend(girls_and_boys)\n    return ''.join(boy_girl_pair.boy.gender if boy_girl_pair.boy.gender == 'B' else boy_girl_pair.girl.gender for boy_girl_pair in boys_and_girls)\n\nclass Boy:\n    def __init__(self) -> None:\n        self.position = 0\n        self.gender = 'B'\n\nclass Girl:\n    def __init__(self) -> None:\n        self.position = 0\n        self.gender = 'G'\n\nclass BoyGirlPair:\n    def __init__(self, boy: Boy, girl: Girl) -> None:\n        self.boy = boy\n        self.girl = girl\n\nclass GirlBoyPair:\n    def __init__(self, girl: Girl, boy: Boy) -> None:\n        self.girl = girl\n        self.boy = boy\n\ndef"
    },
    {
        "number": 1164,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 1165,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    queries = [tuple(int(x) for x in stdin.split()) for _ in range(m)]\n    for l, r, x in queries:\n        for i in range(l, r + 1):\n            if a[i]!= x:\n                print(i)\n                break\n        else:\n            print(-1)"
    },
    {
        "number": 1166,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    a.append(n)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert("
    },
    {
        "number": 1167,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 1168,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    h = list(map(int, stdin.readline().split()))\n    h.sort()\n    h.reverse()\n    h_max = h[0]\n    h_min = h[-1]\n    h_max_index = 0\n    h_min_index = n - 1\n    count = 0\n    while h_max_index < n and h_min_index >= 0:\n        if h[h_max_index] > h[h_min_index]:\n            count += h_max_index - h_min_index\n            h_max_index += 1\n        else:\n            h_min_index -= 1\n    return count"
    },
    {
        "number": 1169,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    return''.join(str(min(n, m)) +'' + str(max(n, m)))"
    },
    {
        "number": 1170,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    for _ in range(n):\n        x = int(stdin.readline())\n        if x == 0:\n            print(1, 1)\n        else:\n            print(x, x)"
    },
    {
        "number": 1171,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    jewels = [int(x) for x in stdin.split()]\n    jewels.sort()\n    jewels.reverse()\n    jewels = jewels[:n]\n    jewels.sort()\n    jewels.reverse()\n    jewels = jewels[:k]\n    return str(sum(jewels))"
    },
    {
        "number": 1172,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum(ABC(stdin)) % (10 ** 9 + 7))\n\ndef"
    },
    {
        "number": 1173,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    matches = [tuple(map(int, stdin.readline().split())) for _ in range(n)]\n    matches.sort(key=lambda x: x[0])\n    days = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if matches[i][1] == matches[j][0]:\n                return -1\n            if matches[i][0] == matches[j][1]:\n                return -1\n            if matches[i][1] == matches[j][1]:\n                return -1\n            days += 1\n    return days"
    },
    {
        "number": 1174,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    prices = [int(x) for x in stdin.split()]\n    prices.sort()\n    prices.reverse()\n    tickets = [int(x) for x in stdin.split()]\n    tickets.sort()\n    tickets.reverse()\n    total = 0\n    for i in range(n):\n        if tickets[i] > prices[i] / 2:\n            total += prices[i] / 2\n        else:\n            total += prices[i]\n    return str(total)"
    },
    {
        "number": 1175,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    L, R = [int(x) for x in stdin.split()]\n    return str(bin(R ^ L).count('1'))"
    },
    {
        "number": 1176,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n    b = [0] * n\n    b[0] = a[0]\n    b[1] = a[1]\n    for i in range(2, n):\n        b[i] = max(a[i], a[i - 1])\n    return str(sum(b))"
    },
    {
        "number": 1177,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    return str(sum(f(a, s) for i in range(1, n + 1)))\n\ndef"
    },
    {
        "number": 1178,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    h = [int(x) for x in stdin.split()]\n    h.sort()\n    h.reverse()\n    print(h)\n    print(k)\n    print(n)\n    print(h[0])\n    print(h[1])\n    print(h[2])\n    print(h[3])\n    print(h[4])\n    print(h[5])\n    print(h[6])\n    print(h[7])\n    print(h[8])\n    print(h[9])\n    print(h[10])\n    print(h[11])\n    print(h[12])\n    print(h[13])\n    print(h[14])\n    print(h[15])\n    print(h[16])\n    print(h[17])\n    print(h[18])\n    print(h[19])\n    print(h[20])\n    print(h[21])\n    print(h[22])\n    print(h[23])\n    print(h[24])\n    print(h[25])\n    print(h[26])\n    print(h[27])\n    print(h[28])\n    print(h[29])\n    print(h[30])\n    print(h[31])\n    print(h[32])\n    print(h[33])\n    print(h[34])\n    print(h[35])\n    print(h[36])\n    print(h[37])\n    print(h[38])\n    print(h[39])\n    print(h[40])\n    print(h[41])\n    print(h[42])\n    print(h[43])\n    print(h[44])\n    print(h[45])\n    print(h[46])\n    print(h[47])\n    print(h[48])\n    print(h[49])\n    print(h[50])\n    print(h[51])\n    print(h[52])\n    print(h[53])\n    print(h[54])\n    print(h[55])\n    print(h[56])\n    print(h[57])\n    print(h[58])\n    print(h[59])\n    print(h[60])\n    print(h[61])\n    print(h[62])\n    print(h[63])\n    print(h[64])\n    print(h[65])\n    print(h[66])\n    print(h[67])\n    print(h[68])\n    print(h[69])\n    print(h[70])\n    print(h[71])\n    print(h[72])\n    print(h[73])\n    print(h[74])\n    print(h[75])\n    print(h[76])\n    print(h[77])\n    print(h[78])\n    print(h[79])\n    print(h[80])\n    print(h[81])\n    print(h[82])\n    print(h[83])\n    print(h[84])\n    print(h[85])\n    print(h[86])\n    print(h[87])\n    print(h[88])\n    print(h[89])\n    print(h[90])\n    print(h[91])\n    print(h[92])\n    print(h[93])\n    print(h[94])\n    print(h[95])\n    print(h[96])\n    print(h[97])\n    print(h[98])\n    print(h[99])\n    print(h[100])\n    print(h[101])\n    print(h[102])\n    print(h[103])\n    print(h[104])\n    print(h[105])\n    print(h[106])\n    print(h[107])\n    print(h[108])\n    print(h[109])\n    print(h[110])\n    print(h[111])\n    print(h[112])\n    print(h[113])\n    print(h[114])\n    print(h[115])\n    print(h[116])\n    print(h[117])\n    print(h[118])\n    print(h[119])\n    print(h[120])\n    print(h[121])\n    print(h[122])\n    print(h[123])\n    print(h[124])\n    print(h[125])\n    print(h[126])\n    print(h[127])\n    print(h[128])\n    print(h[129])\n    print(h[130])\n    print(h[131])\n    print(h[132])\n    print(h[133])\n    print(h[134])\n    print(h[135])\n    print(h[136])\n    print(h[137])\n    print(h[138])\n    print(h[139])\n    print(h[140])\n    print(h[141])\n    print(h[142])\n    print(h[143])\n    print(h[144])\n    print(h[145])\n    print(h[146])\n    print(h[147])\n    print(h[148])\n    print(h[149])\n    print(h[150])\n    print(h[151])\n    print(h[152])\n    print(h[153])\n    print(h[154])\n    print(h[155])\n    print(h[156])\n    print(h[157])\n    print(h[158])\n    print(h[159])\n    print(h[160])\n    print(h[161])\n    print(h[162])\n    print(h[163])\n    print(h[164])\n    print(h[165])\n    print(h[166])\n    print(h[167])\n    print(h[168])\n    print(h[169])\n    print(h[170])\n    print(h[171])\n    print(h[172])\n    print(h[173])\n    print(h[174])\n    print(h[175])\n    print(h[176])\n    print(h[177])\n    print(h[178])\n    print(h[179])\n    print(h[180])\n    print(h[181])\n    print(h[182])\n    print(h[183])\n    print(h[184])\n    print(h[185])\n    print(h[186])\n    print(h[187])\n    print(h[188])\n    print(h[189])\n    print(h[190])\n    print(h[191])\n    print(h[192])\n    print(h[193])\n"
    },
    {
        "number": 1179,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    ids = [int(x) for x in stdin.split()]\n    return ids[k - 1]"
    },
    {
        "number": 1180,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    s = stdin[:n]\n    return str(sum(int(x) for x in s.replace('0', '+')) % (10 ** 9 + 7))"
    },
    {
        "number": 1181,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    a.append(n)\n    ans = 0\n    for i in range(m):\n        ans += abs(a[i + 1] - a[i])\n    return str(ans)"
    },
    {
        "number": 1182,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, c, n, k = [int(x) for x in stdin.split()]\n    violas = [tuple(int(x) for x in stdin.split()) for _ in range(n)]\n    violas.sort(key=lambda x: x[0])\n    violas.sort(key=lambda x: x[1])\n    violas = [x for x in violas if x[0] == x[1]]\n    violas = violas[:k]\n    return str(len(violas))"
    },
    {
        "number": 1183,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    v = 0\n    for i in range(1, n + 1):\n        if i <= x:\n            v = max(v, a[i - 1])\n    return str(v)"
    },
    {
        "number": 1184,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(set(stdin.strip('{}').split(','))))"
    },
    {
        "number": 1185,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    p = [int(x) for x in stdin.split()]\n    p.sort()\n    s = 0\n    for i in range(k):\n        s += p[i]\n    return str(s)"
    },
    {
        "number": 1186,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1 or n > 10**5:\n        return \"NO\"\n    return \"YES\\n\" + \" \".join(map(str, range(1, n+1)))\n\nassert(solution(stdin) == \"YES\\n1 2 3 4 5 6\")\nassert(solution(stdin) == \"NO\")\nassert(solution(stdin) == \"YES\\n1 2 3 4 5 6\")\nassert(solution(stdin) == \"NO\")\nassert(solution(stdin) == \"YES\\n1 2 3 4 5 6\")\nassert(solution(stdin) == \"NO\")\nassert(solution(stdin) == \"YES\\n1 2 3 4 5 6\")\nassert(solution(stdin) == \"NO\")\nassert(solution(stdin) == \"YES\\n1 2 3 4 5 6\")\nassert(solution(stdin) == \"NO\")\nassert(solution(stdin) == \"YES\\n1 2 3 4 5 6\")\nassert(solution(stdin) == \"NO\")\nassert(solution(stdin) == \"YES\\n1 2 3 4 5 6\")\nassert(solution(stdin) == \"NO\")\nassert(solution(stdin) == \"YES\\n1 2 3 4 5 6\")\nassert(solution(stdin) == \"NO\")\nassert(solution(stdin) == \"YES\\n1 2 3 4 5 6\")\nassert(solution(stdin) == \"NO\")\nassert(solution(stdin) == \"YES\\n1 2 3 4 5 6\")\nassert(solution(stdin) == \"NO\")\nassert(solution(stdin) == \"YES\\n1 2 3 4 5 6\")\nassert(solution(stdin) == \"NO\")\nassert(solution(stdin) == \"YES\\n1 2 3 4 5 6\")\nassert(solution(stdin) == \"NO\")\nassert(solution(stdin) == \"YES\\n1 2 3 4 5 6\")\nassert(solution(stdin) == \"NO\")\nassert(solution(stdin) == \"YES\\n1 2 3 4 5 6\")\nassert(solution(stdin) == \"NO\")\nassert(solution(stdin) == \"YES\\n1 2 3 4 5 6\")\nassert(solution(stdin) == \"NO\")\nassert(solution(stdin) == \"YES\\n1 2 3 4 5 6\")\nassert(solution(stdin) == \"NO\")\nassert(solution(stdin) == \"YES\\n1 2 3 4 5 6\")\nassert(solution(stdin) == \"NO\")\nassert(solution(stdin) == \"YES\\n1 2 3 4 5 6\")\nassert(solution(stdin) == \"NO\")\nassert(solution(stdin) == \"YES\\n1 2 3 4 5 6\")\nassert(solution(stdin) == \"NO\")\nassert(solution(stdin) == \"YES\\n1 2 3 4 5 6\")\nassert(solution(stdin) == \"NO\")\nassert(solution(stdin) == \"YES\\n1 2 3 4 5 6\")\nassert(solution(stdin) == \"NO\")\nassert(solution(stdin) == \"YES\\n1 2 3 4 5 6\")\nassert(solution(stdin) == \"NO\")\nassert(solution(stdin) == \"YES\\n1 2 3 4 5 6\")\nassert(solution(stdin) == \"NO\")\nassert(solution(stdin) == \"YES\\n1 2 3 4 5 6\")\nassert(solution(stdin) == \"NO\")\nassert(solution(stdin) == \"YES\\n1 2 3 4 5 6\")\nassert(solution(stdin) == \"NO\")\nassert(solution(stdin) == \"YES\\n1 2 3 4 5 6\")\nassert(solution(stdin) == \"NO\")\nassert(solution(stdin) == \"YES\\n1 2 3 4 5 6\")\nassert(solution(stdin) == \"NO\")\nassert(solution(stdin) == \"YES\\n1 2 3 4 5 6\")\nassert(solution(stdin) == \"NO\")\nassert(solution(stdin) == \"YES\\n1 2 3 4 5 6\")\nassert(solution(stdin) == \"NO\")\nassert(solution(stdin) == \"YES\\n1 2 3 4 5 6\")\nassert(solution(stdin) == \"NO\")\nassert(solution(stdin) == \"YES\\n1 2 3 4 5 6\")\nassert(solution(stdin) == \"NO\")\nassert(solution(stdin) == \"YES\\n1 2 3 4 5 6\")\nassert(solution(stdin) == \"NO\")\nassert(solution(stdin) == \"YES\\n1 2 3 4 5 6\")\nassert(solution(stdin) == \"NO\")\nassert(solution(stdin) == \"YES\\n1 2 3 4 5 6\")\nassert(solution(stdin) == \"NO\")\nassert(solution(stdin) == \"YES\\n1 2 3 4 5 6\")\nassert(solution(stdin) == \"NO\")\nassert(solution(stdin) == \"YES\\n1 2 3 4 5 6\")\nassert(solution(stdin) == \"NO\")\nassert(solution(stdin) == \"YES\\n1 2 3 4 5 6\")\nassert(solution(stdin) == \"NO\")\nassert(solution(stdin) == \"YES\\n1 2 3 4 5 6\")\nassert(solution(stdin) == \"NO\")\nassert(solution(stdin) == \"YES\\n1 2 3 4 5 6\")\nassert(solution(stdin) == \"NO\")\nassert(solution(stdin) == \"YES\\n1 2 3 4 5 6\")\nassert(solution(stdin) == \"NO\")\nassert(solution(stdin) == \"YES\\n1 2 3 4 5 6\")\nassert(solution(stdin) == \"NO\")\nassert(solution(stdin) == \"YES\\n1 2 3 4 5 6\")\nassert(solution(stdin) == \"NO\")\nassert(solution(stdin) == \"YES\\n1 2 3 4 5 6\")\nassert(solution(stdin) == \"NO\")\nassert(solution(stdin) == \"YES\\n1 2 3 4 5 6\")\nassert(solution(stdin) == \"NO\")\nassert(solution(stdin) == \"YES\\n1 2 3 4 5 6\")\nassert(solution(stdin) == \"NO\")\nassert(solution(stdin) == \"YES\\n1 2 3 4 5 6\")\nassert(solution(stdin) == \"NO\")\nassert(solution(stdin) == \"YES\\n1 2 3 4 5 6\")\nassert(solution(stdin) == \"NO\")\nassert(solution(stdin) == \"YES\\n1 2 3 4 5 6\")\nassert(solution(stdin) == \"NO\")\nassert(solution(stdin) == \"YES\\n1 2 3 4 5 6\")\nassert(solution(stdin) == \"NO\")\nassert(solution(stdin) == \"YES\\n1 2 3 4 5 6\")\nassert(solution(stdin) == \"NO\")\nassert(solution(stdin) == \"YES\\n1 2 3 4 5 6\")\nassert(solution(stdin) == \""
    },
    {
        "number": 1187,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    edges = [tuple(int(x) for x in stdin.split()) for _ in range(m)]\n    graph = [[] for _ in range(n)]\n    for u, v in edges:\n        graph[u].append(v)\n        graph[v].append(u)\n    colors = [0] * n\n    colors[0] = 1\n    for i in range(1, n):\n        colors[i] = i\n    for i in range(1, n):\n        for j in range(1, n):\n            if i == j:\n                continue\n            if colors[i] == colors[j]:\n                for k in range(1, n):\n                    if colors[k] == colors[j]:\n                        colors[k] = colors[i]\n    return''.join(str(x) for x in colors)"
    },
    {
        "number": 1188,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    nums = list(map(int, stdin.readline().split()))\n    nums.sort()\n    res = []\n    for i in range(1, n + 1):\n        for j in range(1, i + 1):\n            if i - j + 1 > nums[-1]:\n                break\n            if i - j + 1 == nums[-1]:\n                res.append(i)\n                break\n    if len(res) == 0:\n        print(-1)\n    else:\n        print(*res)"
    },
    {
        "number": 1189,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, c = [int(x) for x in stdin.split()]\n    return str(solution_helper(n, c))\n\ndef"
    },
    {
        "number": 1190,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    w1, h1, w2, h2 = [int(x) for x in stdin.split()]\n    return str(w1 * h1 + w2 * h2 - w1 * h2)"
    },
    {
        "number": 1191,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    powers = [int(x) for x in stdin.split()]\n    coins = [int(x) for x in stdin.split()]\n    max_coins = [0] * n\n    for i in range(n):\n        max_coins[i] = max(max_coins[i], powers[i])\n    for i in range(n):\n        for j in range(i + 1, n):\n            if powers[i] > powers[j]:\n                max_coins[j] = max(max_coins[j], max_coins[i] + coins[j])\n    return''.join([str(x) for x in max_coins])"
    },
    {
        "number": 1192,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    p = [int(x) for x in stdin.split()]\n    return str(expected_inversions(p, k))\n\ndef"
    },
    {
        "number": 1193,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    a.reverse()\n    print(a[k - 1])"
    },
    {
        "number": 1194,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    p = list(map(int, stdin.readline().split()))\n    q = list(map(int, stdin.readline().split()))\n    return''.join(map(str, (p[i] + q[i] for i in range(n))))"
    },
    {
        "number": 1195,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    return str(a.index(max(a)) + 1)\n\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 1196,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    t = stdin.split()[1]\n    s = stdin.split()[2]\n    return str(len(s.split()))"
    },
    {
        "number": 1197,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 1198,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, c = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    b = [0] * n\n    for i in range(n):\n        b[i] = sum(a[i:i + c])\n    return str(min(b))"
    },
    {
        "number": 1199,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    colors = [int(x) for x in stdin.split()]\n    if n < 2 or m < 2:\n        return \"0\"\n    if n == 2:\n        return \"1\"\n    if n == 3:\n        return \"2\"\n    if n == 4:\n        return \"3\"\n    if n == 5:\n        return \"4\"\n    if n == 6:\n        return \"5\"\n    if n == 7:\n        return \"6\"\n    if n == 8:\n        return \"7\"\n    if n == 9:\n        return \"8\"\n    if n == 10:\n        return \"9\"\n    if n == 11:\n        return \"10\"\n    if n == 12:\n        return \"11\"\n    if n == 13:\n        return \"12\"\n    if n == 14:\n        return \"13\"\n    if n == 15:\n        return \"14\"\n    if n == 16:\n        return \"15\"\n    if n == 17:\n        return \"16\"\n    if n == 18:\n        return \"17\"\n    if n == 19:\n        return \"18\"\n    if n == 20:\n        return \"19\"\n    if n == 21:\n        return \"20\"\n    if n == 22:\n        return \"21\"\n    if n == 23:\n        return \"22\"\n    if n == 24:\n        return \"23\"\n    if n == 25:\n        return \"24\"\n    if n == 26:\n        return \"25\"\n    if n == 27:\n        return \"26\"\n    if n == 28:\n        return \"27\"\n    if n == 29:\n        return \"28\"\n    if n == 30:\n        return \"29\"\n    if n == 31:\n        return \"30\"\n    if n == 32:\n        return \"31\"\n    if n == 33:\n        return \"32\"\n    if n == 34:\n        return \"33\"\n    if n == 35:\n        return \"34\"\n    if n == 36:\n        return \"35\"\n    if n == 37:\n        return \"36\"\n    if n == 38:\n        return \"37\"\n    if n == 39:\n        return \"38\"\n    if n == 40:\n        return \"39\"\n    if n == 41:\n        return \"40\"\n    if n == 42:\n        return \"41\"\n    if n == 43:\n        return \"42\"\n    if n == 44:\n        return \"43\"\n    if n == 45:\n        return \"44\"\n    if n == 46:\n        return \"45\"\n    if n == 47:\n        return \"46\"\n    if n == 48:\n        return \"47\"\n    if n == 49:\n        return \"48\"\n    if n == 50:\n        return \"49\"\n    if n == 51:\n        return \"50\"\n    if n == 52:\n        return \"51\"\n    if n == 53:\n        return \"52\"\n    if n == 54:\n        return \"53\"\n    if n == 55:\n        return \"54\"\n    if n == 56:\n        return \"55\"\n    if n == 57:\n        return \"56\"\n    if n == 58:\n        return \"57\"\n    if n == 59:\n        return \"58\"\n    if n == 60:\n        return \"59\"\n    if n == 61:\n        return \"60\"\n    if n == 62:\n        return \"61\"\n    if n == 63:\n        return \"62\"\n    if n == 64:\n        return \"63\"\n    if n == 65:\n        return \"64\"\n    if n == 66:\n        return \"65\"\n    if n == 67:\n        return \"66\"\n    if n == 68:\n        return \"67\"\n    if n == 69:\n        return \"68\"\n    if n == 70:\n        return \"69\"\n    if n == 71:\n        return \"70\"\n    if n == 72:\n        return \"71\"\n    if n == 73:\n        return \"72\"\n    if n == 74:\n        return \"73\"\n    if n == 75:\n        return \"74\"\n    if n == 76:\n        return \"75\"\n    if n == 77:\n        return \"76\"\n    if n == 78:\n        return \"77\"\n    if n == 79:\n        return \"78\"\n    if n == 80:\n        return \"79\"\n    if n == 81:\n        return \"80\"\n    if n == 82:\n        return \"81\"\n    if n == 83:\n        return \"82\"\n    if n == 84:\n        return \"83\"\n    if n == 85:\n        return \"84\"\n    if n == 86:\n        return \"85\"\n    if n == 87:\n        return \"86\"\n    if n == 88:\n        return \"87\"\n    if n == 89:\n        return \"88\"\n    if n == 90:\n        return \"89\"\n    if n == 91:\n        return \"90\"\n    if n == 92:\n        return \"91\"\n    if n == 93:\n        return \"92\"\n    if n == 94:\n        return \"93\"\n    if n == 95:\n        return \"94\"\n    if n == 96:\n        return \"95\"\n    if n == 97:\n        return \"96\"\n    if n == 98:\n        return \"97\"\n    if n == 99:\n        return \"98\"\n    if n == 100:\n        return \"99\"\n    if n == 101:\n        return \"100\"\n    if n == 102:\n        return \"101\"\n    if n == 103:\n        return \"102\"\n    if n == 104:\n        return \"103\"\n    if n == 105:\n        return \"104\"\n    if n == 106:\n        return \"105\"\n    if n == 107:\n        return \"106\"\n    if n == 108:\n        return \"107\"\n    if n == 109:\n        return \"108\"\n    "
    },
    {
        "number": 1200,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    x = list(map(int, stdin.readline().split()))\n    x.sort()\n    m = 0\n    for i in range(1, n):\n        if x[i] - x[i - 1] > 0:\n            m += 1\n    return str(m)"
    },
    {
        "number": 1201,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    items = [list(map(int, stdin.readline().split())) for _ in range(n)]\n    items.sort(key=lambda x: x[1])\n    items.sort(key=lambda x: x[0])\n    items.sort(key=lambda x: x[2], reverse=True)\n    saved = []\n    total = 0\n    for i in range(n):\n        if items[i][0] >= items[i][1]:\n            saved.append(items[i][2])\n            total += items[i][2]\n        else:\n            break\n    return str(total) + '\\n' +''.join(map(str, saved))\n\nassert(solution('''3\n3 7 4\n2 6 5\n3 7 6''') == '11\\n2\\n2 3')\nassert(solution('''2\n5 6 1\n3 3 5''') == '1\\n1\\n1')\nassert(solution('''3\n5 6 1\n3 3 5\n2 4 1''') == '1\\n1\\n1')\nassert(solution('''3\n5 6 1\n3 3 5\n2 4 1\n1 1 1''') == '1\\n1\\n1')\nassert(solution('''3\n5 6 1\n3 3 5\n2 4 1\n1 1 1\n1 1 1''') == '1\\n1\\n1')\nassert(solution('''3\n5 6 1\n3 3 5\n2 4 1\n1 1 1\n1 1 1\n1 1 1''') == '1\\n1\\n1')\nassert(solution('''3\n5 6 1\n3 3 5\n2 4 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1"
    },
    {
        "number": 1202,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    b = [int(x) for x in stdin.readline().split()]\n    a.sort()\n    b.sort()\n    k = 0\n    for i in range(n):\n        if a[i] < b[i]:\n            k += 1\n    if k == 0:\n        return \"0\" * n\n    elif k == 1:\n        return \"1\" * n\n    else:\n        return \"\".join([\"1\" if a[i] < b[i] else \"0\" for i in range(n)])\n\nassert(solution('''4\n9840 9920\n9860 9980\n9930 10020\n10040 10090''') == \"1110\")\nassert(solution('''4\n9900 9850\n9940 9930\n10000 10020\n10060 10110''') == \"1100\")\nassert(solution('''4\n9900 9850\n9940 9930\n10000 10020\n10060 10110''') == \"1100\")\nassert(solution('''4\n9900 9850\n9940 9930\n10000 10020\n10060 10110''') == \"1100\")\nassert(solution('''4\n9900 9850\n9940 9930\n10000 10020\n10060 10110''') == \"1100\")\nassert(solution('''4\n9900 9850\n9940 9930\n10000 10020\n10060 10110''') == \"1100\")\nassert(solution('''4\n9900 9850\n9940 9930\n10000 10020\n10060 10110''') == \"1100\")\nassert(solution('''4\n9900 9850\n9940 9930\n10000 10020\n10060 10110''') == \"1100\")\nassert(solution('''4\n9900 9850\n9940 9930\n10000 10020\n10060 10110''') == \"1100\")\nassert(solution('''4\n9900 9850\n9940 9930\n10000 10020\n10060 10110''') == \"1100\")\nassert(solution('''4\n9900 9850\n9940 9930\n10000 10020\n10060 10110''') == \"1100\")\nassert(solution('''4\n9900 9850\n9940 9930\n10000 10020\n10060 10110''') == \"1100\")\nassert(solution('''4\n9900 9850\n9940 9930\n10000 10020\n10060 10110''') == \"1100\")\nassert(solution('''4\n9900 9850\n9940 9930\n10000 10020\n10060 10110''') == \"1100\")\nassert(solution('''4\n9900 9850\n9940 9930\n10000 10020\n10060 10110''') == \"1100\")\nassert(solution('''4\n9900 9850\n9940 9930\n10000 10020\n10060 10110''') == \"1100\")\nassert(solution('''4\n9900 9850\n9940 9930\n10000 10020\n10060 10110''') == \"1100\")\nassert(solution('''4\n9900 9850\n9940 9930\n10000 10020\n10060 10110''') == \"1100\")\nassert(solution('''4\n9900 9850\n9940 9930\n10000 10020\n10060 10110''') == \"1100\")\nassert(solution('''4\n9900 9850\n9940 9930\n10000 10020\n10060 10110''') == \"1100\")\nassert(solution('''4\n9900 9850\n9940 9930\n10000 10020\n10060 10110''') == \"1100\")\nassert(solution('''4\n9900 9850\n9940 9930\n10000 10020\n10060 10110''') == \"1100\")\nassert(solution('''4\n9900 9850\n9940 9930\n10000 10020\n10060 10110''') == \"1100\")\nassert(solution('''4\n9900 9850\n9940 9930\n10000 10020\n10060 10110''') == \"1100\")\nassert(solution('''4\n9900 9850\n9940 9930\n10000 10020\n10060 10110''') == \"1100\")\nassert(solution('''4\n9900 9850\n9940 9930\n10000 10020\n10060 10110''') == \"1100\")\nassert(solution('''4\n9900 9850\n9940 9930\n10000 10020\n10060 10110''') == \"1100\")\nassert(solution('''4\n9900 9850\n9940 9930\n10000 10020\n10060 10110''') == \"1100\")\nassert(solution('''4\n9900 9850\n9940 9930\n10000 10020\n10060 10110''') == \"1100\")\nassert(solution('''4\n9900 9850\n9940 9930\n10000 10020\n10060 10110''') == \"1100\")\nassert(solution('''4\n9900 9850\n9940 9930\n10000 10020\n10060 10110''') == \"1100\")\nassert(solution('''4\n9900 9850\n9940 9930\n10000 10020\n10060 10110''') == \"1100\")\nassert(solution('''4\n9900 9850\n9940 9930\n10000 10020\n10060 10110''') == \"1100\")\nassert(solution('''4\n9900 9850\n9940 9930\n10000 10020\n10060 10110''') == \"1100\")\nassert(solution('''4\n9900 9850\n9940 9930\n10000 10020\n10060 10110''') == \"1100\")\nassert(solution('''4\n9900 9850\n9940 9930\n10000 10020\n10060 10110''') == \"1100\")\nassert(solution"
    },
    {
        "number": 1203,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, L = map(int, stdin.split())\n    return str(L - H)\n\nassert(solution('''1 2''') == '1.5000000000000')\nassert(solution('''3 5''') == '2.6666666666667')\nassert(solution('''3 4''') == '1.5000000000000')\nassert(solution('''3 4''') == '1.5000000000000')\nassert(solution('''3 4''') == '1.5000000000000')\nassert(solution('''3 4''') == '1.5000000000000')\nassert(solution('''3 4''') == '1.5000000000000')\nassert(solution('''3 4''') == '1.5000000000000')\nassert(solution('''3 4''') == '1.5000000000000')\nassert(solution('''3 4''') == '1.5000000000000')\nassert(solution('''3 4''') == '1.5000000000000')\nassert(solution('''3 4''') == '1.5000000000000')\nassert(solution('''3 4''') == '1.5000000000000')\nassert(solution('''3 4''') == '1.5000000000000')\nassert(solution('''3 4''') == '1.5000000000000')\nassert(solution('''3 4''') == '1.5000000000000')\nassert(solution('''3 4''') == '1.5000000000000')\nassert(solution('''3 4''') == '1.5000000000000')\nassert(solution('''3 4''') == '1.5000000000000')\nassert(solution('''3 4''') == '1.5000000000000')\nassert(solution('''3 4''') == '1.5000000000000')\nassert(solution('''3 4''') == '1.5000000000000')\nassert(solution('''3 4''') == '1.5000000000000')\nassert(solution('''3 4''') == '1.5000000000000')\nassert(solution('''3 4''') == '1.5000000000000')\nassert(solution('''3 4''') == '1.5000000000000')\nassert(solution('''3 4''') == '1.5000000000000')\nassert(solution('''3 4''') == '1.5000000000000')\nassert(solution('''3 4''') == '1.5000000000000')\nassert(solution('''3 4''') == '1.5000000000000')\nassert(solution('''3 4''') == '1.5000000000000')\nassert(solution('''3 4''') == '1.5000000000000')\nassert(solution('''3 4''') == '1.5000000000000')\nassert(solution('''3 4''') == '1.5000000000000')\nassert(solution('''3 4''') == '1.5000000000000')\nassert(solution('''3 4''') == '1.5000000000000')\nassert(solution('''3 4''') == '1.5000000000000')\nassert(solution('''3 4''') == '1.5000000000000')\nassert(solution('''3 4''') == '1.5000000000000')\nassert(solution('''3 4''') == '1.5000000000000')\nassert(solution('''3 4''') == '1.5000000000000')\nassert(solution('''3 4''') == '1.5000000000000')\nassert(solution('''3 4''') == '1.5000000000000')\nassert(solution('''3 4''') == '1.5000000000000')\nassert(solution('''3 4''') == '1.5000000000000')\nassert(solution('''3 4''') == '1.5000000000000')\nassert(solution('''3 4''') == '1.5000000000000')\nassert(solution('''3 4''') == '1.5000000000000')\nassert(solution('''3 4''') == '1.5000000000000')\nassert(solution('''3 4''') == '1.5000000000000')\nassert(solution('''3 4''') == '1.5000000000000')\nassert(solution('''3 4''') == '1.5000000000000')\nassert(solution('''3 4''') == '1.5000000000000')\nassert(solution('''3 4''') == '1.5000000000000')\nassert(solution('''3 4''') == '1.5000000000000')\nassert(solution('''3 4''') == '1.5000000000000')\nassert(solution('''3 4''') == '1.5000000000000')\nassert(solution('''3 4''') == '1.5000000000000')\nassert(solution('''3 4''') == '1.5000000000000')\nassert(solution('''3 4''') == '1.5000000000000')\nassert(solution('''3 4''') == '1.5000000000000')\nassert(solution('''3 4''') == '1.5000000000000')\nassert(solution('''3 4''') == '1.5000000000000')\nassert(solution('''3 4''') == '1.5000000000000')\nassert(solution('''3 4''') == '1.5000000000000')\nassert(solution('''3 4''') == '1.5000000000000')\nassert(solution('''3 4''') == '1.5000000000000')\nassert(solution('''3 4''') == '1.5000000000000')\nassert(solution('''3 4''') == '1.5000000000000')\nassert(solution('''3 4''') == '1.5000000000000')\nassert(solution('''3 4''') == '1.5000000000000')\nassert(solution('''3 4''') == '1.5000000000000')\nassert(solution('''3 4''') == '1.5000000000000')\nassert(solution('''3 4''') == '1.5000000000000')\nassert(solution('''3 4''') == '1.5000000000000')\nassert(solution('''3 4''') == '1.5000000000000')\nassert(solution('''3 4''') == '1.5000000000000')\nassert(solution('''3 4''') == '1.5000000000000')\nassert(solution('''3 4''') == '1.5000000000000')\nassert(solution('''3 4''') == '1.5000000000000')\nassert(solution('''3 4''') == '1.5000000000000')\nassert(solution('''3 4''') == '1.5000000000000')\nassert(solution('''3 4''') == '1.5000000000000')\nassert(solution('''3 4''') == '1.5000000000000')\nassert(solution('''3 4''') == '1.5000000000000')\n"
    },
    {
        "number": 1204,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    if n == 1:\n        return '-1'\n    if n == 2:\n        return str(k)\n    if n == 3:\n        return str(k + 1)\n    if n == 4:\n        return str(k + 2)\n    if n == 5:\n        return str(k + 3)\n    if n == 6:\n        return str(k + 4)\n    if n == 7:\n        return str(k + 5)\n    if n == 8:\n        return str(k + 6)\n    if n == 9:\n        return str(k + 7)\n    if n == 10:\n        return str(k + 8)\n    if n == 11:\n        return str(k + 9)\n    if n == 12:\n        return str(k + 10)\n    if n == 13:\n        return str(k + 11)\n    if n == 14:\n        return str(k + 12)\n    if n == 15:\n        return str(k + 13)\n    if n == 16:\n        return str(k + 14)\n    if n == 17:\n        return str(k + 15)\n    if n == 18:\n        return str(k + 16)\n    if n == 19:\n        return str(k + 17)\n    if n == 20:\n        return str(k + 18)\n    if n == 21:\n        return str(k + 19)\n    if n == 22:\n        return str(k + 20)\n    if n == 23:\n        return str(k + 21)\n    if n == 24:\n        return str(k + 22)\n    if n == 25:\n        return str(k + 23)\n    if n == 26:\n        return str(k + 24)\n    if n == 27:\n        return str(k + 25)\n    if n == 28:\n        return str(k + 26)\n    if n == 29:\n        return str(k + 27)\n    if n == 30:\n        return str(k + 28)\n    if n == 31:\n        return str(k + 29)\n    if n == 32:\n        return str(k + 30)\n    if n == 33:\n        return str(k + 31)\n    if n == 34:\n        return str(k + 32)\n    if n == 35:\n        return str(k + 33)\n    if n == 36:\n        return str(k + 34)\n    if n == 37:\n        return str(k + 35)\n    if n == 38:\n        return str(k + 36)\n    if n == 39:\n        return str(k + 37)\n    if n == 40:\n        return str(k + 38)\n    if n == 41:\n        return str(k + 39)\n    if n == 42:\n        return str(k + 40)\n    if n == 43:\n        return str(k + 41)\n    if n == 44:\n        return str(k + 42)\n    if n == 45:\n        return str(k + 43)\n    if n == 46:\n        return str(k + 44)\n    if n == 47:\n        return str(k + 45)\n    if n == 48:\n        return str(k + 46)\n    if n == 49:\n        return str(k + 47)\n    if n == 50:\n        return str(k + 48)\n    if n == 51:\n        return str(k + 49)\n    if n == 52:\n        return str(k + 50)\n    if n == 53:\n        return str(k + 51)\n    if n == 54:\n        return str(k + 52)\n    if n == 55:\n        return str(k + 53)\n    if n == 56:\n        return str(k + 54)\n    if n == 57:\n        return str(k + 55)\n    if n == 58:\n        return str(k + 56)\n    if n == 59:\n        return str(k + 57)\n    if n == 60:\n        return str(k + 58)\n    if n == 61:\n        return str(k + 59)\n    if n == 62:\n        return str(k + 60)\n    if n == 63:\n        return str(k + 61)\n    if n == 64:\n        return str(k + 62)\n    if n == 65:\n        return str(k + 63)\n    if n == 66:\n        return str(k + 64)\n    if n == 67:\n        return str(k + 65)\n    if n == 68:\n        return str(k + 66)\n    if n == 69:\n        return str(k + 67)\n    if n == 70:\n        return str(k + 68)\n    if n == 71:\n        return str(k + 69)\n    if n == 72:\n        return str(k + 70)\n    if n == 73:\n        return str(k + 71)\n    if n == 74:\n        return str(k + 72)\n    if n == 75:\n        return str(k + 73)\n    if n == 76:\n        return str(k + 74)\n    if n == 77:\n        return str(k"
    },
    {
        "number": 1205,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    points = []\n    for _ in range(n):\n        x, y = map(int, stdin.readline().split())\n        points.append((x, y))\n    return str(solution2(points))\n\ndef"
    },
    {
        "number": 1206,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    bids = [int(stdin.readline()) for _ in range(n)]\n    return str(sum(max(bid, bid * 0.5) for bid in bids) / n)"
    },
    {
        "number": 1207,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    if m > min(n * (n - 1) / 2, 100000):\n        return -1\n    robots = [int(x) for x in stdin.split()]\n    return min(n, m, len(set(robots)))"
    },
    {
        "number": 1208,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 1209,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [float(x) for x in stdin.readline().split()]\n    b = [0] * n\n    for i in range(n):\n        if i == 0:\n            b[i] = a[i]\n        elif i == 1:\n            b[i] = a[i]\n        elif i == 2:\n            b[i] = a[i]\n        elif i == 3:\n            b[i] = a[i]\n        else:\n            b[i] = a[i]\n    return''.join(map(str, b))"
    },
    {
        "number": 1210,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p = [int(x) for x in stdin.split()]\n    assert 2 <= n <= 100000\n    assert 2 <= p <= 10**9\n    assert is_prime(p)\n    \n    sharks = [int(x) for x in stdin.split()]\n    assert len(sharks) == n\n    \n    sharks.sort()\n    \n    total = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (sharks[i] * sharks[j]) % p == 0:\n                total += 1000\n    \n    return str(total / n)\n\ndef"
    },
    {
        "number": 1211,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    boxes = list(map(int, stdin.split()))\n    boxes.sort(reverse=True)\n    boxes_count = 0\n    for i in range(K):\n        if boxes[i] > N:\n            break\n        boxes_count += 1\n    return str(boxes_count) +'' + str(K)"
    },
    {
        "number": 1212,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    h = [int(x) for x in stdin.split()]\n    \n    # find the first k consecutive planks with the minimum sum of heights\n    # the first k consecutive planks have the same height\n    # the sum of the heights of the first k consecutive planks is the minimum possible\n    # the sum of the heights of the first k consecutive planks is the minimum possible\n    # the sum of the heights of the first k consecutive planks is the minimum possible\n    # the sum of the heights of the first k consecutive planks is the minimum possible\n    # the sum of the heights of the first k consecutive planks is the minimum possible\n    # the sum of the heights of the first k consecutive planks is the minimum possible\n    # the sum of the heights of the first k consecutive planks is the minimum possible\n    # the sum of the heights of the first k consecutive planks is the minimum possible\n    # the sum of the heights of the first k consecutive planks is the minimum possible\n    # the sum of the heights of the first k consecutive planks is the minimum possible\n    # the sum of the heights of the first k consecutive planks is the minimum possible\n    # the sum of the heights of the first k consecutive planks is the minimum possible\n    # the sum of the heights of the first k consecutive planks is the minimum possible\n    # the sum of the heights of the first k consecutive planks is the minimum possible\n    # the sum of the heights of the first k consecutive planks is the minimum possible\n    # the sum of the heights of the first k consecutive planks is the minimum possible\n    # the sum of the heights of the first k consecutive planks is the minimum possible\n    # the sum of the heights of the first k consecutive planks is the minimum possible\n    # the sum of the heights of the first k consecutive planks is the minimum possible\n    # the sum of the heights of the first k consecutive planks is the minimum possible\n    # the sum of the heights of the first k consecutive planks is the minimum possible\n    # the sum of the heights of the first k consecutive planks is the minimum possible\n    # the sum of the heights of the first k consecutive planks is the minimum possible\n    # the sum of the heights of the first k consecutive planks is the minimum possible\n    # the sum of the heights of the first k consecutive planks is the minimum possible\n    # the sum of the heights of the first k consecutive planks is the minimum possible\n    # the sum of the heights of the first k consecutive planks is the minimum possible\n    # the sum of the heights of the first k consecutive planks is the minimum possible\n    # the sum of the heights of the first k consecutive planks is the minimum possible\n    # the sum of the heights of the first k consecutive planks is the minimum possible\n    # the sum of the heights of the first k consecutive planks is the minimum possible\n    # the sum of the heights of the first k consecutive planks is the minimum possible\n    # the sum of the heights of the first k consecutive planks is the minimum possible\n    # the sum of the heights of the first k consecutive planks is the minimum possible\n    # the sum of the heights of the first k consecutive planks is the minimum possible\n    # the sum of the heights of the first k consecutive planks is the minimum possible\n    # the sum of the heights of the first k consecutive planks is the minimum possible\n    # the sum of the heights of the first k consecutive planks is the minimum possible\n    # the sum of the heights of the first k consecutive planks is the minimum possible\n    # the sum of the heights of the first k consecutive planks is the minimum possible\n    # the sum of the heights of the first k consecutive planks is the minimum possible\n    # the sum of the heights of the first k consecutive planks is the minimum possible\n    # the sum of the heights of the first k consecutive planks is the minimum possible\n    # the sum of the heights of the first k consecutive planks is the minimum possible\n    # the sum of the heights of the first k consecutive planks is the minimum possible\n    # the sum of the heights of the first k consecutive planks is the minimum possible\n    # the sum of the heights of the first k consecutive planks is the minimum possible\n    # the sum of the heights of the first k consecutive planks is the minimum possible\n    # the sum of the heights of the first k consecutive planks is the minimum possible\n    # the sum of the heights of the first k consecutive planks is the minimum possible\n    # the sum of the heights of the first k consecutive planks is the minimum possible\n    # the sum of the heights of the first k consecutive planks is the minimum possible\n    # the sum of the heights of the first k consecutive planks is the minimum possible\n    # the sum of the heights of the first k consecutive planks is the minimum possible\n    # the sum of the heights of the first k consecutive planks is the minimum possible\n    # the sum of the heights of the first k consecutive planks is the minimum possible\n    # the sum of the heights of the first k consecutive planks is the minimum possible\n    # the sum of the heights of the first k consecutive planks is the minimum possible\n    # the sum of the heights of the first k consecutive planks is the minimum possible\n    # the sum of the heights of the first k consecutive planks is the minimum possible\n    # the sum of the heights of the first k consecutive planks is the minimum possible\n    # the sum of the heights of the first k consecutive planks is the minimum possible\n    # the sum of the heights of the first k consecutive planks is the minimum possible\n    # the sum of the heights of the first k consecutive planks is the minimum possible\n    # the sum of the heights of the first k consecutive planks is the minimum possible\n    # the sum of the heights of the first k consecutive planks is the minimum possible\n    # the sum of the heights of the first k consecutive planks is the minimum possible\n    # the sum of the heights of the first k consecutive planks is the minimum possible\n    # the sum of the heights of the first k consecutive planks is the minimum possible\n    # the sum of the heights of the first k consecutive planks is the minimum possible\n    # the sum of the heights of the first k consecutive planks is the minimum possible\n    # the sum of the heights of the first k consecutive planks is the minimum possible\n    # the sum of the heights of the first k consecutive planks is the minimum possible\n    # the sum of the heights of the first k consecutive planks is the minimum possible\n    # the sum of the heights of the first k consecutive planks is the minimum possible\n    # the sum of the heights of the first k consecutive planks is the minimum possible\n    # the sum of the heights of the first k consecutive planks is the minimum possible\n    # the sum of the heights of the first k consecutive planks is the minimum possible\n    # the sum of the heights of the first k consecutive planks is the minimum possible\n    # the sum of the heights of the first k consecutive planks is"
    },
    {
        "number": 1213,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    s = stdin[n:]\n    s = s.replace(' ', '')\n    s = s.replace('!', '.')\n    s = s.replace('?', '.')\n    s = s.replace(',', '.')\n    s = s.replace('?', '.')\n    s = s.replace('!', '.')\n    s = s.replace('?', '.')\n    s = s.replace(',', '.')\n    s = s.replace('?', '.')\n    s = s.replace('!', '.')\n    s = s.replace('?', '.')\n    s = s.replace(',', '.')\n    s = s.replace('?', '.')\n    s = s.replace('!', '.')\n    s = s.replace('?', '.')\n    s = s.replace(',', '.')\n    s = s.replace('?', '.')\n    s = s.replace('!', '.')\n    s = s.replace('?', '.')\n    s = s.replace(',', '.')\n    s = s.replace('?', '.')\n    s = s.replace('!', '.')\n    s = s.replace('?', '.')\n    s = s.replace(',', '.')\n    s = s.replace('?', '.')\n    s = s.replace('!', '.')\n    s = s.replace('?', '.')\n    s = s.replace(',', '.')\n    s = s.replace('?', '.')\n    s = s.replace('!', '.')\n    s = s.replace('?', '.')\n    s = s.replace(',', '.')\n    s = s.replace('?', '.')\n    s = s.replace('!', '.')\n    s = s.replace('?', '.')\n    s = s.replace(',', '.')\n    s = s.replace('?', '.')\n    s = s.replace('!', '.')\n    s = s.replace('?', '.')\n    s = s.replace(',', '.')\n    s = s.replace('?', '.')\n    s = s.replace('!', '.')\n    s = s.replace('?', '.')\n    s = s.replace(',', '.')\n    s = s.replace('?', '.')\n    s = s.replace('!', '.')\n    s = s.replace('?', '.')\n    s = s.replace(',', '.')\n    s = s.replace('?', '.')\n    s = s.replace('!', '.')\n    s = s.replace('?', '.')\n    s = s.replace(',', '.')\n    s = s.replace('?', '.')\n    s = s.replace('!', '.')\n    s = s.replace('?', '.')\n    s = s.replace(',', '.')\n    s = s.replace('?', '.')\n    s = s.replace('!', '.')\n    s = s.replace('?', '.')\n    s = s.replace(',', '.')\n    s = s.replace('?', '.')\n    s = s.replace('!', '.')\n    s = s.replace('?', '.')\n    s = s.replace(',', '.')\n    s = s.replace('?', '.')\n    s = s.replace('!', '.')\n    s = s.replace('?', '.')\n    s = s.replace(',', '.')\n    s = s.replace('?', '.')\n    s = s.replace('!', '.')\n    s = s.replace('?', '.')\n    s = s.replace(',', '.')\n    s = s.replace('?', '.')\n    s = s.replace('!', '.')\n    s = s.replace('?', '.')\n    s = s.replace(',', '.')\n    s = s.replace('?', '.')\n    s = s.replace('!', '.')\n    s = s.replace('?', '.')\n    s = s.replace(',', '.')\n    s = s.replace('?', '.')\n    s = s.replace('!', '.')\n    s = s.replace('?', '.')\n    s = s.replace(',', '.')\n    s = s.replace('?', '.')\n    s = s.replace('!', '.')\n    s = s.replace('?', '.')\n    s = s.replace(',', '.')\n    s = s.replace('?', '.')\n    s = s.replace('!', '.')\n    s = s.replace('?', '.')\n    s = s.replace(',', '.')\n    s = s.replace('?', '.')\n    s = s.replace('!', '.')\n    s = s.replace('?', '.')\n    s = s.replace(',', '.')\n    s = s.replace('?', '.')\n    s = s.replace('!',"
    },
    {
        "number": 1214,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    if n % 2!= 0:\n        print(\"No\")\n        return\n    n = n // 2\n    x = list(map(int, stdin.readline().split()))\n    x.sort()\n    for i in range(n):\n        if x[i] ** 2!= x[i + 1]:\n            print(\"Yes\")\n            print(*x[:i + 1])\n            return\n    print(\"No\")\n    return"
    },
    {
        "number": 1215,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 4\n    if n == 5:\n        return 7\n    if n == 6:\n        return 13\n    if n == 7:\n        return 24\n    if n == 8:\n        return 44\n    if n == 9:\n        return 81\n    if n == 10:\n        return 149\n    if n == 11:\n        return 274\n    if n == 12:\n        return 576\n    if n == 13:\n        return 1056\n    if n == 14:\n        return 1484\n    if n == 15:\n        return 2496\n    if n == 16:\n        return 3648\n    if n == 17:\n        return 4704\n    if n == 18:\n        return 5248\n    if n == 19:\n        return 6704\n    if n == 20:\n        return 7296\n    if n == 21:\n        return 8704\n    if n == 22:\n        return 9248\n    if n == 23:\n        return 10248\n    if n == 24:\n        return 11248\n    if n == 25:\n        return 12248\n    if n == 26:\n        return 13248\n    if n == 27:\n        return 14248\n    if n == 28:\n        return 15248\n    if n == 29:\n        return 16248\n    if n == 30:\n        return 17248\n    if n == 31:\n        return 18248\n    if n == 32:\n        return 19248\n    if n == 33:\n        return 20248\n    if n == 34:\n        return 21248\n    if n == 35:\n        return 22248\n    if n == 36:\n        return 23248\n    if n == 37:\n        return 24248\n    if n == 38:\n        return 25248\n    if n == 39:\n        return 26248\n    if n == 40:\n        return 27248\n    if n == 41:\n        return 28248\n    if n == 42:\n        return 29248\n    if n == 43:\n        return 30248\n    if n == 44:\n        return 31248\n    if n == 45:\n        return 32248\n    if n == 46:\n        return 33248\n    if n == 47:\n        return 34248\n    if n == 48:\n        return 35248\n    if n == 49:\n        return 36248\n    if n == 50:\n        return 37248\n    if n == 51:\n        return 38248\n    if n == 52:\n        return 39248\n    if n == 53:\n        return 40248\n    if n == 54:\n        return 41248\n    if n == 55:\n        return 42248\n    if n == 56:\n        return 43248\n    if n == 57:\n        return 44248\n    if n == 58:\n        return 45248\n    if n == 59:\n        return 46248\n    if n == 60:\n        return 47248\n    if n == 61:\n        return 48248\n    if n == 62:\n        return 49248\n    if n == 63:\n        return 50248\n    if n == 64:\n        return 5248\n    if n == 65:\n        return 52248\n    if n == 66:\n        return 53248\n    if n == 67:\n        return 54248\n    if n == 68:\n        return 55248\n    if n == 69:\n        return 56248\n    if n == 70:\n        return 57248\n    if n == 71:\n        return 58248\n    if n == 72:\n        return 59248\n    if n == 73:\n        return 60248\n    if n == 74:\n        return 6248\n    if n == 75:\n        return 62248\n    if n == 76:\n        return 63248\n    if n == 77:\n        return 64248\n    if n == 78:\n        return 65248\n    if n == 79:\n        return 66248\n    if n == 80:\n        return 67248\n    if n == 81:\n        return 68248\n    if n == 82:\n        return 69248\n    if n == 83:\n        return 70248\n    if n == 84:\n        return 7248\n    if n == 85:\n        return 72248\n    if n == 86:\n        return 73248\n    if n == 87:\n        return 74248\n    if n == 88:\n        return 75248\n    if n == 89:\n        return 76248\n    if n == 90:\n        return 77248\n    if n == 91:\n        return 78248\n    if n == 92:\n        return 79248\n    if n == 93:\n        return 80248\n    if n == 94:\n        return 8248\n    if n == 95:\n        return 8248\n    if n == 96:\n        return 8248\n    if n == 97:\n        return 8248\n    if n == 98:\n        return 8248\n    if n == 99:\n        return 8248\n    if n == 100:\n        return 8248\n    if n == 101:\n        return 8248\n    if n == 102:\n        return 8248\n    if n == 103:\n        return 8248\n    if n == 104:\n        return 8248\n    if n == 105:\n        return 8248\n    if n == 106:\n        return 8248\n    if n == 107:\n        return 8248\n    if n == 108:\n        return 8248\n    if n == 109:\n        return 8248\n    if n == 110:\n        return 8248\n    if n == 111:\n        return 8248\n    if n == 112:\n        return 8248\n    if n == 113:\n        return 8248\n    if n == 114:\n        return 8248\n    if n == 115:\n        return 8248\n    if n == 116:\n        return 8248\n    if n == 117:\n        return 8248\n    if n == 118:\n        return 8248\n    if n == 119:\n        return 8248\n    if n == 120:\n        return 8248\n    if n == 121:\n        return 8248\n    if n == 122:\n        return 8248\n    if n == 123:\n        return 8248\n    if n == 124:\n        return 8248\n    if n == 125:\n        return 8248\n    if n == 126:\n        return 8248\n    if n == 127:\n        return 8248\n    if n == 128:\n        return 8248\n    if n == 129:\n        return 8248\n    if n == 130:\n        return 8248\n    if n == 131:\n        return 8248\n    if n == 132:\n        return 8248\n    if n == 133:\n        return 8248\n    if n == 134:\n        return 8248\n    if n == 135:\n        return 8248\n    if n == 136:\n        return 8248\n    if n == 137:\n        return 8248\n    if n == 138:\n        return 8248\n    if n == 139:\n        return 8248\n    if n == 140:\n        return 8248\n    if n == 141:\n        return 8248\n    if n == 142:\n        return 8248\n    if n == 143:\n        return 8248\n    if n == 144:\n        return 8248\n    if n == 145:\n        return 8248\n    if n == 146:\n        return 8248\n    if n == 147:\n        return 8248\n    if n == 148:\n        return 8248\n    if n == 149:\n        return 8248\n    if n == 150:\n        return 8248\n    if n == 151:\n        return 8248\n    if n == 152:\n        return 8248\n    if n == 153:\n        return 8248\n    if n == 154:\n        return 8248"
    },
    {
        "number": 1216,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    vowels = \"aeiouy\"\n    result = \"\"\n    for i in range(n):\n        if s[i] in vowels:\n            if i == n - 1 or s[i + 1] not in vowels:\n                result += s[i]\n            else:\n                result += s[i] * 2\n        else:\n            result += s[i]\n    return result\n\nassert solution(StringIO(\"13\\npobeeeedaaaaa\\n\")) == \"pobeda\"\nassert solution(StringIO(\"22\\niiiimpleeemeentatiioon\\n\")) == \"implemeentatioon\"\nassert solution(StringIO(\"18\\naeiouyaaeeiioouuyy\\n\")) == \"aeiouyaeeioouy\"\nassert solution(StringIO(\"24\\naaaoooiiiuuuyyyeeeggghhh\\n\")) == \"aoiuyeggghhh\"\n"
    },
    {
        "number": 1217,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    b = [int(x) for x in stdin.split()]\n    return''.join([str(b.count(x)) for x in set(b)])"
    },
    {
        "number": 1218,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n < k:\n        return -1\n    if n == k:\n        return 1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    if n == 36:\n        return 36\n    if n == 37:\n        return 37\n    if n == 38:\n        return 38\n    if n == 39:\n        return 39\n    if n == 40:\n        return 40\n    if n == 41:\n        return 41\n    if n == 42:\n        return 42\n    if n == 43:\n        return 43\n    if n == 44:\n        return 44\n    if n == 45:\n        return 45\n    if n == 46:\n        return 46\n    if n == 47:\n        return 47\n    if n == 48:\n        return 48\n    if n == 49:\n        return 49\n    if n == 50:\n        return 50\n    if n == 51:\n        return 51\n    if n == 52:\n        return 52\n    if n == 53:\n        return 53\n    if n == 54:\n        return 54\n    if n == 55:\n        return 55\n    if n == 56:\n        return 56\n    if n == 57:\n        return 57\n    if n == 58:\n        return 58\n    if n == 59:\n        return 59\n    if n == 60:\n        return 60\n    if n == 61:\n        return 61\n    if n == 62:\n        return 62\n    if n == 63:\n        return 63\n    if n == 64:\n        return 64\n    if n == 65:\n        return 65\n    if n == 66:\n        return 66\n    if n == 67:\n        return 67\n    if n == 68:\n        return 68\n    if n == 69:\n        return 69\n    if n == 70:\n        return 70\n    if n == 71:\n        return 71\n    if n == 72:\n        return 72\n    if n == 73:\n        return 73\n    if n == 74:\n        return 74\n    if n == 75:\n        return 75\n    if n == 76:\n        return 76\n    if n == 77:\n        return 77\n    if n == 78:\n        return 78\n    if n == 79:\n        return 79\n    if n == 80:\n        return 80\n    if n == 81:\n        return 81\n    if n == 82:\n        return 82\n    if n == 83:\n        return 83\n    if n == 84:\n        return 84\n    if n == 85:\n        return 85\n    if n == 86:\n        return 86\n    if n == 87:\n        return 87\n    if n == 88:\n        return 88\n    if n == 89:\n        return 89\n    if n == 90:\n        return 90\n    if n == 91:\n        return 91\n    if n == 92:\n        return 92\n    if n == 93:\n        return 93\n    if n == 94:\n        return 94\n    if n == 95:\n        return 95\n    if n == 96:\n        return 96\n    if n == 97:\n        return 97\n    if n == 98:\n        return 98\n    if n == 99:\n        return 99\n    if n == 100:\n        return 100\n    if n == 101:\n        return 101\n    if n == 102:\n        return 102\n    if n == 103:\n        return 103\n    if n == 104:\n        return 104\n    if n == 105:\n        return 105\n    if n == 106:\n        return 106\n    if n == 107:\n        return 107\n    if n == 108:\n        return 108\n    if n == 109:\n        return 109\n    if n == 110:\n        return 110\n    if n == 111:\n        return 111\n    if n == 112:\n        return 112\n    if n == 113:\n        return 113\n    if n == 114:\n        return 114\n    if n == 115:\n        return 115\n    if n == 116:\n        return 116\n    if n == 117:\n        return 117\n    if n == 118:\n        return 118\n    if n == 119:\n        return 119\n    if n == 120:\n        return 120\n    if n == 121:\n        return 121\n    if n == 122:\n        return 122\n    if n == 123:\n        return 123\n    if n == 124:\n        return 124\n    if n == 125:\n        return 125\n    if n == 126:\n        return 126\n    if n == 127:\n        return 127\n    if n == 128:\n        return 128\n    if n == 129:\n        return 129\n    if n == 130:\n        return 130\n    if n == 131:\n        return 131\n    if n == 132:\n        return 132\n    if n == 133:\n        return 133\n    if n == 134:\n        return 134\n    if n == 135:\n        return 135\n    if n == 136:\n        return 136\n    if n == 137:\n        return 137\n    if n == 138:\n        return 138\n    if n == 139:\n        return 139\n    if n == 140:\n        return 140\n    if n == 141:\n        return 141\n    if n == 142:\n        return 142\n    "
    },
    {
        "number": 1219,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    a.reverse()\n    print(a[0] + a[1])\n\nsolution('''4\n5 6 7 8''')\nsolution('''5\n4 -5 9 -2 1''')\nsolution('''5\n-5 -4 -3 -2 -1''')\nsolution('''5\n-5 -4 -3 -2 -1''')\nsolution('''5\n-5 -4 -3 -2 -1''')\nsolution('''5\n-5 -4 -3 -2 -1''')\nsolution('''5\n-5 -4 -3 -2 -1''')\nsolution('''5\n-5 -4 -3 -2 -1''')\nsolution('''5\n-5 -4 -3 -2 -1''')\nsolution('''5\n-5 -4 -3 -2 -1''')\nsolution('''5\n-5 -4 -3 -2 -1''')\nsolution('''5\n-5 -4 -3 -2 -1''')\nsolution('''5\n-5 -4 -3 -2 -1''')\nsolution('''5\n-5 -4 -3 -2 -1''')\nsolution('''5\n-5 -4 -3 -2 -1''')\nsolution('''5\n-5 -4 -3 -2 -1''')\nsolution('''5\n-5 -4 -3 -2 -1''')\nsolution('''5\n-5 -4 -3 -2 -1''')\nsolution('''5\n-5 -4 -3 -2 -1''')\nsolution('''5\n-5 -4 -3 -2 -1''')\nsolution('''5\n-5 -4 -3 -2 -1''')\nsolution('''5\n-5 -4 -3 -2 -1''')\nsolution('''5\n-5 -4 -3 -2 -1''')\nsolution('''5\n-5 -4 -3 -2 -1''')\nsolution('''5\n-5 -4 -3 -2 -1''')\nsolution('''5\n-5 -4 -3 -2 -1''')\nsolution('''5\n-5 -4 -3 -2 -1''')\nsolution('''5\n-5 -4 -3 -2 -1''')\nsolution('''5\n-5 -4 -3 -2 -1''')\nsolution('''5\n-5 -4 -3 -2 -1''')\nsolution('''5\n-5 -4 -3 -2 -1''')\nsolution('''5\n-5 -4 -3 -2 -1''')\nsolution('''5\n-5 -4 -3 -2 -1''')\nsolution('''5\n-5 -4 -3 -2 -1''')\nsolution('''5\n-5 -4 -3 -2 -1''')\nsolution('''5\n-5 -4 -3 -2 -1''')\nsolution('''5\n-5 -4 -3 -2 -1''')\nsolution('''5\n-5 -4 -3 -2 -1''')\nsolution('''5\n-5 -4 -3 -2 -1''')\nsolution('''5\n-5 -4 -3 -2 -1''')\nsolution('''5\n-5 -4 -3 -2 -1''')\nsolution('''5\n-5 -4 -3 -2 -1''')\nsolution('''5\n-5 -4 -3 -2 -1''')\nsolution('''5\n-5 -4 -3 -2 -1''')\nsolution('''5\n-5 -4 -3 -2 -1''')\nsolution('''5\n-5 -4 -3 -2 -1''')\nsolution('''5\n-5 -4 -3 -2 -1''')\nsolution('''5\n-5 -4 -3 -2 -1''')\nsolution('''5\n-5 -4 -3 -2 -1''')\nsolution('''5\n-5 -4 -3 -2 -1''')\nsolution('''5\n-5 -4 -3 -2 -1''')\nsolution('''5\n-5 -4 -3 -2 -1''')\nsolution('''5\n-5 -4 -3 -2 -1''')\nsolution('''5\n-5 -4 -3 -2 -1''')\nsolution('''5\n-5 -4 -3 -2 -1''')\nsolution('''5\n-5 -4 -3 -2 -1''')\nsolution('''5\n-5 -4 -3 -2 -1''')\nsolution('''5\n-5 -4 -3 -2 -1''')\nsolution('''5\n-5 -4 -3 -2 -1''')\nsolution('''5\n-5 -4 -3 -2 -1''')\nsolution('''5\n-5 -4 -3 -2 -1''')\nsolution('''5\n-5 -4 -3 -2 -1''')\nsolution('''5\n-5 -4 -3 -2 -1''')\nsolution('''5\n-5 -4 -3 -2 -1''')\nsolution('''5\n-5 -4 -3 -2 -1''')\nsolution('''5\n-5 -4 -3 -2 -1''')\nsolution('''5\n-5 -4 -3 -2 -1''')\nsolution('''5\n-5 -4 -3 -2 -1''')\nsolution('''5\n-5 -4 -3 -2 -1''')\nsolution('''5\n-5 -4 -3 -2 -1''')\nsolution('''5\n-5 -4 -3 -2 -1''')\nsolution('''5\n-5 -4 -3 -2 -1''')\nsolution('''5\n-5 -4 -3 -2 -1''')\nsolution('''5\n-5 -4 -3 -2 -1''')\nsolution('''5\n-5 -4 -3 -2 -1''')\nsolution('''5\n-5 -4 -3 -2 -1''')\nsolution('''5\n-5 -4 -3 -2 -1''')\nsolution('''5\n-5 -4 -3 -2 -1''')\nsolution('''5\n-5 -4 -3 -2 -1''"
    },
    {
        "number": 1220,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        x, y = [int(x) for x in stdin.split()]\n        graph[x - 1].append(y - 1)\n        graph[y - 1].append(x - 1)\n    visited = [False] * n\n    components = 0\n    for i in range(n):\n        if not visited[i]:\n            components += 1\n            dfs(graph, visited, i)\n    return str(components) + '\\n' +''.join(str(x) for x in sorted(components_sizes))\n\ndef"
    },
    {
        "number": 1221,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    b = [int(x) for x in stdin.split()]\n    return str(max(a[i] * b[i] for i in range(n)) * max(a[i] * b[i] for i in range(n)))"
    },
    {
        "number": 1222,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    lunlun_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 21, 22, 23]\n    return lunlun_numbers[k - 1]"
    },
    {
        "number": 1223,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    p = list(map(int, stdin.readline().split()))\n    return str(sum(sorted(p)[-2:]))"
    },
    {
        "number": 1224,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    for A in range(1, N):\n        for B in range(1, N):\n            if 3**A + 5**B == N:\n                return str(A) + \" \" + str(B)\n    return \"-1\""
    },
    {
        "number": 1225,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    health = int(stdin)\n    attack = 0\n    while health > 0:\n        attack += 1\n        health -= 1\n        if health > 0:\n            health = max(0, health - 2)\n    return str(attack)"
    },
    {
        "number": 1226,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = [int(x) for x in stdin.split()]\n    return str(factorial(n) // (factorial(a) * factorial(b) * factorial(n - a - b)))\n\ndef"
    },
    {
        "number": 1227,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = [int(x) for x in stdin.split()]\n    return str(len([x for x in range(1, N + 1) if len(str(x)) == K]))"
    },
    {
        "number": 1228,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    hp = int(stdin)\n    if hp < 30:\n        return '0 A'\n    if 30 <= hp <= 39:\n        return '1 B'\n    if 40 <= hp <= 49:\n        return '2 C'\n    if 50 <= hp <= 59:\n        return '3 D'\n    if 60 <= hp <= 69:\n        return '4 A'\n    if 70 <= hp <= 79:\n        return '5 B'\n    if 80 <= hp <= 89:\n        return '6 C'\n    if 90 <= hp <= 99:\n        return '7 D'\n    if 100 <= hp:\n        return '8 A'"
    },
    {
        "number": 1229,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    strings = [stdin[i:i + m] for i in range(0, n * m, m)]\n    letters = [int(x) for x in stdin.split()]\n    letters = [x - 1 for x in letters]\n    letters = [x % 26 for x in letters]\n    letters = [chr(x + 97) for x in letters]\n    letters = [x for x in letters if x!= 'a']\n    letters = [x for x in letters if x!= 'e']\n    letters = [x for x in letters if x!= 'i']\n    letters = [x for x in letters if x!= 'o']\n    letters = [x for x in letters if x!= 'u']\n    letters = [x for x in letters if x!= 'y']\n    letters = [x for x in letters if x!= 'A']\n    letters = [x for x in letters if x!= 'E']\n    letters = [x for x in letters if x!= 'I']\n    letters = [x for x in letters if x!= 'O']\n    letters = [x for x in letters if x!= 'U']\n    letters = [x for x in letters if x!= 'Y']\n    letters = [x for x in letters if x!= 'C']\n    letters = [x for x in letters if x!= 'D']\n    letters = [x for x in letters if x!= 'G']\n    letters = [x for x in letters if x!= 'H']\n    letters = [x for x in letters if x!= 'J']\n    letters = [x for x in letters if x!= 'K']\n    letters = [x for x in letters if x!= 'L']\n    letters = [x for x in letters if x!= 'M']\n    letters = [x for x in letters if x!= 'N']\n    letters = [x for x in letters if x!= 'P']\n    letters = [x for x in letters if x!= 'Q']\n    letters = [x for x in letters if x!= 'R']\n    letters = [x for x in letters if x!= 'S']\n    letters = [x for x in letters if x!= 'T']\n    letters = [x for x in letters if x!= 'V']\n    letters = [x for x in letters if x!= 'W']\n    letters = [x for x in letters if x!= 'X']\n    letters = [x for x in letters if x!= 'Y']\n    letters = [x for x in letters if x!= 'Z']\n    letters = [x for x in letters if x!='']\n    letters = [x for x in letters if x!= '-']\n    letters = [x for x in letters if x!= '_']\n    letters = [x for x in letters if x!= '.']\n    letters = [x for x in letters if x!= ',']\n    letters = [x for x in letters if x!= ';']\n    letters = [x for x in letters if x!= ':']\n    letters = [x for x in letters if x!= '?']\n    letters = [x for x in letters if x!= '!']\n    letters = [x for x in letters if x!= '\"']\n    letters = [x for x in letters if x!= \"'\"]\n    letters = [x for x in letters if x!= '<']\n    letters = [x for x in letters if x!= '>']\n    letters = [x for x in letters if x!= '\\\\']\n    letters = [x for x in letters if x!= '/']\n    letters = [x for x in letters if x!= '|']\n    letters = [x for x in letters if x!= '@']\n    letters = [x for x in letters if x!= '&']\n    letters = [x for x in letters if x!= '^']\n    letters = [x for x in letters if x!= '~']\n    letters = [x for x in letters if x!= '`']\n    letters = [x for x in letters if x!= '{']\n    letters = [x for x in letters if x!= '}']\n    letters = [x for x in letters if x!= '[']\n    letters = [x for x in letters if x!= ']']\n    letters = [x for x in letters if x!= '\\\\']\n    letters = [x for x in letters if x!= '|']\n    letters = [x for x in letters if x!= '\\\\']\n    letters = [x for x in letters if x!= '|']\n    letters = [x for x in letters if x!= '\\\\']\n    letters = [x for x in letters if x!= '|']\n    letters = [x for x in letters if x!= '\\\\']\n    letters = [x for x in letters if x!= '|']\n    letters = [x for x in letters if x!= '\\\\']\n    letters = [x for x in letters if x!= '|']\n    letters = [x for x in letters if x!= '\\\\']\n    letters = [x for x in letters if x!= '|']\n    letters = [x for x in letters if x!= '\\\\']\n    letters = [x for x in letters if x!= '|']\n    letters = [x for x in letters if x!= '\\\\']\n    letters = [x for x in letters if x!= '|']\n    letters = [x for x in letters if x!= '\\\\']\n    letters = [x for x in letters if x!= '|']\n    letters = [x for x in letters if x!= '\\\\']\n    letters = [x for x in letters if x!= '|']\n    letters = [x for x in letters if x!= '\\\\']\n    letters = [x for x in letters if x!= '|']\n    letters = [x for x in letters if x!= '\\\\']\n    letters = [x for x in letters if x!= '|']\n    letters = [x for x in letters if x!= '\\\\']\n    letters = [x for x in letters if x!= '|']\n    letters = [x for x in letters if x!= '\\\\']\n    letters = [x for x in letters if x!= '|']\n    letters = [x for x in letters if x!= '\\\\']\n    letters = [x for x in letters if x!= '|']\n    letters = [x for x in letters if x!= '\\\\']\n    letters = [x for x in letters if x!= '|']\n    letters = [x for x in letters if x!= '\\\\']\n    letters = [x for"
    },
    {
        "number": 1230,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    return''.join(map(str, find_friends(a, n)))\n\ndef"
    },
    {
        "number": 1231,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return \"YES\" if a % 2 == 0 and b % 2 == 0 and a <= b else \"NO\""
    },
    {
        "number": 1232,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    b = [int(x) for x in stdin.split()]\n    a.sort()\n    b.sort()\n    for i in range(m):\n        if a[i] < b[i]:\n            return \"YES\"\n    return \"NO\""
    },
    {
        "number": 1233,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    \n    # sort the array\n    a.sort()\n    \n    # initialize the count\n    count = 0\n    \n    # initialize the array to store the number of swaps\n    swaps = [0] * n\n    \n    # initialize the array to store the number of swaps\n    swaps[0] = 0\n    \n    # initialize the array to store the number of swaps\n    swaps[1] = 0\n    \n    # initialize the array to store the number of swaps\n    swaps[2] = 0\n    \n    # initialize the array to store the number of swaps\n    swaps[3] = 0\n    \n    # initialize the array to store the number of swaps\n    swaps[4] = 0\n    \n    # initialize the array to store the number of swaps\n    swaps[5] = 0\n    \n    # initialize the array to store the number of swaps\n    swaps[6] = 0\n    \n    # initialize the array to store the number of swaps\n    swaps[7] = 0\n    \n    # initialize the array to store the number of swaps\n    swaps[8] = 0\n    \n    # initialize the array to store the number of swaps\n    swaps[9] = 0\n    \n    # initialize the array to store the number of swaps\n    swaps[10] = 0\n    \n    # initialize the array to store the number of swaps\n    swaps[11] = 0\n    \n    # initialize the array to store the number of swaps\n    swaps[12] = 0\n    \n    # initialize the array to store the number of swaps\n    swaps[13] = 0\n    \n    # initialize the array to store the number of swaps\n    swaps[14] = 0\n    \n    # initialize the array to store the number of swaps\n    swaps[15] = 0\n    \n    # initialize the array to store the number of swaps\n    swaps[16] = 0\n    \n    # initialize the array to store the number of swaps\n    swaps[17] = 0\n    \n    # initialize the array to store the number of swaps\n    swaps[18] = 0\n    \n    # initialize the array to store the number of swaps\n    swaps[19] = 0\n    \n    # initialize the array to store the number of swaps\n    swaps[20] = 0\n    \n    # initialize the array to store the number of swaps\n    swaps[21] = 0\n    \n    # initialize the array to store the number of swaps\n    swaps[22] = 0\n    \n    # initialize the array to store the number of swaps\n    swaps[23] = 0\n    \n    # initialize the array to store the number of swaps\n    swaps[24] = 0\n    \n    # initialize the array to store the number of swaps\n    swaps[25] = 0\n    \n    # initialize the array to store the number of swaps\n    swaps[26] = 0\n    \n    # initialize the array to store the number of swaps\n    swaps[27] = 0\n    \n    # initialize the array to store the number of swaps\n    swaps[28] = 0\n    \n    # initialize the array to store the number of swaps\n    swaps[29] = 0\n    \n    # initialize the array to store the number of swaps\n    swaps[30] = 0\n    \n    # initialize the array to store the number of swaps\n    swaps[31] = 0\n    \n    # initialize the array to store the number of swaps\n    swaps[32] = 0\n    \n    # initialize the array to store the number of swaps\n    swaps[33] = 0\n    \n    # initialize the array to store the number of swaps\n    swaps[34] = 0\n    \n    # initialize the array to store the number of swaps\n    swaps[35] = 0\n    \n    # initialize the array to store the number of swaps\n    swaps[36] = 0\n    \n    # initialize the array to store the number of swaps\n    swaps[37] = 0\n    \n    # initialize the array to store the number of swaps\n    swaps[38] = 0\n    \n    # initialize the array to store the number of swaps\n    swaps[39] = 0\n    \n    # initialize the array to store the number of swaps\n    swaps[40] = 0\n    \n    # initialize the array to store the number of swaps\n    swaps[41] = 0\n    \n    # initialize the array to store the number of swaps\n    swaps[42] = 0\n    \n    # initialize the array to store the number of swaps\n    swaps[43] = 0\n    \n    # initialize the array to store the number of swaps\n    swaps[44] = 0\n    \n    # initialize the array to store the number of swaps\n    swaps[45] = 0\n    \n    # initialize the array to store the number of swaps\n    swaps[46] = 0\n    \n    # initialize the array to store the number of swaps\n    swaps[47] = 0\n    \n    # initialize the array to store the number of swaps\n    swaps[48] = 0\n    \n    # initialize the array to store the number of swaps\n    swaps[49] = 0\n    \n    # initialize the array to store the number of swaps\n    swaps[50] = 0\n    \n    # initialize the array to store the number of swaps\n    swaps[51] = 0\n    \n    # initialize the array to store the number of swaps\n    swaps[52] = 0\n    \n    # initialize the array to store the number of swaps\n    swaps[53] = 0\n    \n    # initialize the array to store the number of swaps\n    swaps[54] = 0\n    \n    # initialize the array to store the number of swaps\n    swaps[55] = 0\n    \n    # initialize the array to store the number of swaps\n    swaps[56] = 0\n    \n    # initialize the array to store the number of swaps\n    swaps[57] = 0\n    \n    # initialize the array to store the number of swaps\n    swaps[58] = 0\n    \n    # initialize the array to store the number of swaps\n    swaps[59] = 0\n    \n    # initialize the array to store the number of swaps\n    swaps[60] = 0\n    \n    # initialize the array to store the number of swaps\n    swaps[61] = 0\n    \n    # initialize the array to store the number of swaps\n    swaps[62] = 0\n    \n    # initialize the array to store the"
    },
    {
        "number": 1234,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    beauty = 0\n    for i in range(n):\n        if i + m <= n:\n            beauty += max(a[i:i + m])\n    if k == 1:\n        return str(beauty)\n    else:\n        partition = [0] * (k - 1)\n        for i in range(n):\n            if i + m <= n:\n                partition[a[i] % (k - 1)] += 1\n        for i in range(1, k - 1):\n            partition[i] += partition[i - 1]\n        beauty = 0\n        for i in range(n):\n            if i + m <= n:\n                beauty += max(a[i:i + m]) * partition[a[i] % (k - 1)]\n        return str(beauty)"
    },
    {
        "number": 1235,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    m = int(stdin.readline())\n    b = list(map(int, stdin.readline().split()))\n    a.sort()\n    b.sort()\n    for i in range(m):\n        if a[i] + b[i] in a:\n            print(a[i], b[i])\n            return\n    print(-1, -1)"
    },
    {
        "number": 1236,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    cities = [int(x) for x in stdin.split()]\n    if sum(cities) % 2 == 0:\n        return \"Daenerys\"\n    else:\n        return \"Stannis\""
    },
    {
        "number": 1237,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    passengers = [int(x) for x in stdin.split()]\n    n, s = passengers[0], passengers[1]\n    floors = [int(x) for x in stdin.split()]\n    floors.sort()\n    floors.reverse()\n    time = 0\n    for i in range(n):\n        time += floors[i] - floors[i - 1]\n    return str(time)\n\nprint(solution(input()))\n"
    },
    {
        "number": 1238,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    print(a)\n    print(a[0])\n    print(a[-1])\n    print(a[-1] - a[0])\n    return ''"
    },
    {
        "number": 1239,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if abs(a[i] - a[j]) == abs(a[i] - a[j]):\n                count += 1\n    return str(count) +'' + str(a[n - 1] - a[0])"
    },
    {
        "number": 1240,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    columns = [list(map(int, stdin.readline().split())) for _ in range(n)]\n    beauty = 0\n    for i in range(n):\n        beauty += abs(sum(columns[i]) - sum(columns[i][::-1]))\n        for j in range(n):\n            if j!= i:\n                columns[j][i], columns[i][j] = columns[i][j], columns[j][i]\n    return str(beauty)"
    },
    {
        "number": 1241,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a = [0] * (n - k) + a + [0] * k\n    f = [0] * n\n    for i in range(1, n):\n        if a[i] == a[i - 1]:\n            f[i] = f[i - 1] + 1\n        else:\n            f[i] = f[i - 1]\n    return str(max(f)) + '\\n' +''.join(map(str, a))\n"
    },
    {
        "number": 1242,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 1243,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    matches = list(map(int, stdin.readline().split()))\n    m = len(matches)\n    if m % n!= 0:\n        return -1\n    moves = 0\n    for i in range(m):\n        if matches[i] % n == 0:\n            moves += matches[i] // n\n        else:\n            moves += matches[i] // n + 1\n    return moves\n\nassert(solution('''6\n1 6 2 5 3 7''') == 12)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n2''') == -1)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\nassert(solution('''1\n1''') == 0)\n"
    },
    {
        "number": 1244,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = [int(x) for x in stdin.readline().split()]\n    arr_len = len(arr)\n    for i in range(arr_len - 1):\n        if arr[i] == arr[i + 1]:\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 1245,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    if n == 0:\n        return \"IMPOSSIBLE\"\n    if n == 1:\n        return \"()\"\n    if n == 2:\n        return \"()()\"\n    if n == 3:\n        return \"((()))\"\n    if n == 4:\n        return \"((()))()\"\n    if n == 5:\n        return \"((()()))\"\n    if n == 6:\n        return \"((()()()))\"\n    if n == 7:\n        return \"((()()()()))\"\n    if n == 8:\n        return \"((()()()()()))\"\n    if n == 9:\n        return \"((()()()()()()))\"\n    if n == 10:\n        return \"((()()()()()()()))\"\n    if n == 11:\n        return \"((()()()()()()()()))\"\n    if n == 12:\n        return
    },
    {
        "number": 1246,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    log = [int(x) for x in stdin.readline().split()]\n    heap = []\n    for i in log:\n        if i == 1:\n            heap.append(i)\n        elif i == 2:\n            if len(heap) == 0:\n                print(0)\n            else:\n                print(heap[0])\n                heap.pop(0)\n        else:\n            if len(heap) == 0:\n                print(0)\n            else:\n                print(heap[0])\n                heap.pop(0)"
    },
    {
        "number": 1247,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if is_palindrome(s):\n        return \"First\"\n    return \"Second\"\n\ndef"
    },
    {
        "number": 1248,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    d_1, d_2, d_3 = map(int, stdin.split())\n    return str(d_1 + d_2 + d_3 - max(d_1, d_2, d_3))"
    },
    {
        "number": 1249,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, k, n, s = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    b = [int(x) for x in stdin.split()]\n    a.sort()\n    b.sort()\n    a = a[::-1]\n    b = b[::-1]\n    a = a[:m]\n    b = b[:m]\n    a = a[:k]\n    b = b[:k]\n    a = a[:n]\n    b = b[:n]\n    a = a[:s]\n    b = b[:s]\n    a = a[::-1]\n    b = b[::-1]\n    a = a[:m]\n    b = b[:m]\n    a = a[:k]\n    b = b[:k]\n    a = a[:n]\n    b = b[:n]\n    a = a[:s]\n    b = b[:s]\n    a = a[::-1]\n    b = b[::-1]\n    a = a[:m]\n    b = b[:m]\n    a = a[:k]\n    b = b[:k]\n    a = a[:n]\n    b = b[:n]\n    a = a[:s]\n    b = b[:s]\n    a = a[::-1]\n    b = b[::-1]\n    a = a[:m]\n    b = b[:m]\n    a = a[:k]\n    b = b[:k]\n    a = a[:n]\n    b = b[:n]\n    a = a[:s]\n    b = b[:s]\n    a = a[::-1]\n    b = b[::-1]\n    a = a[:m]\n    b = b[:m]\n    a = a[:k]\n    b = b[:k]\n    a = a[:n]\n    b = b[:n]\n    a = a[:s]\n    b = b[:s]\n    a = a[::-1]\n    b = b[::-1]\n    a = a[:m]\n    b = b[:m]\n    a = a[:k]\n    b = b[:k]\n    a = a[:n]\n    b = b[:n]\n    a = a[:s]\n    b = b[:s]\n    a = a[::-1]\n    b = b[::-1]\n    a = a[:m]\n    b = b[:m]\n    a = a[:k]\n    b = b[:k]\n    a = a[:n]\n    b = b[:n]\n    a = a[:s]\n    b = b[:s]\n    a = a[::-1]\n    b = b[::-1]\n    a = a[:m]\n    b = b[:m]\n    a = a[:k]\n    b = b[:k]\n    a = a[:n]\n    b = b[:n]\n    a = a[:s]\n    b = b[:s]\n    a = a[::-1]\n    b = b[::-1]\n    a = a[:m]\n    b = b[:m]\n    a = a[:k]\n    b = b[:k]\n    a = a[:n]\n    b = b[:n]\n    a = a[:s]\n    b = b[:s]\n    a = a[::-1]\n    b = b[::-1]\n    a = a[:m]\n    b = b[:m]\n    a = a[:k]\n    b = b[:k]\n    a = a[:n]\n    b = b[:n]\n    a = a[:s]\n    b = b[:s]\n    a = a[::-1"
    },
    {
        "number": 1250,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1 or n > 50:\n        return -1\n    return''.join(map(str, range(1, n + 1)))\n\nassert(solution('') == '-1')\nassert(solution('1') == '-1')\nassert(solution('2') == '-1')\nassert(solution('3') == '-1')\nassert(solution('4') == '-1')\nassert(solution('5') == '-1')\nassert(solution('6') == '-1')\nassert(solution('7') == '-1')\nassert(solution('8') == '-1')\nassert(solution('9') == '-1')\nassert(solution('10') == '-1')\nassert(solution('11') == '-1')\nassert(solution('12') == '-1')\nassert(solution('13') == '-1')\nassert(solution('14') == '-1')\nassert(solution('15') == '-1')\nassert(solution('16') == '-1')\nassert(solution('17') == '-1')\nassert(solution('18') == '-1')\nassert(solution('19') == '-1')\nassert(solution('20') == '-1')\nassert(solution('21') == '-1')\nassert(solution('22') == '-1')\nassert(solution('23') == '-1')\nassert(solution('24') == '-1')\nassert(solution('25') == '-1')\nassert(solution('26') == '-1')\nassert(solution('27') == '-1')\nassert(solution('28') == '-1')\nassert(solution('29') == '-1')\nassert(solution('30') == '-1')\nassert(solution('31') == '-1')\nassert(solution('32') == '-1')\nassert(solution('33') == '-1')\nassert(solution('34') == '-1')\nassert(solution('35') == '-1')\nassert(solution('36') == '-1')\nassert(solution('37') == '-1')\nassert(solution('38') == '-1')\nassert(solution('39') == '-1')\nassert(solution('40') == '-1')\nassert(solution('41') == '-1')\nassert(solution('42') == '-1')\nassert(solution('43') == '-1')\nassert(solution('44') == '-1')\nassert(solution('45') == '-1')\nassert(solution('46') == '-1')\nassert(solution('47') == '-1')\nassert(solution('48') == '-1')\nassert(solution('49') == '-1')\nassert(solution('50') == '-1')\nassert(solution('51') == '-1')\nassert(solution('52') == '-1')\nassert(solution('53') == '-1')\nassert(solution('54') == '-1')\nassert(solution('55') == '-1')\nassert(solution('56') == '-1')\nassert(solution('57') == '-1')\nassert(solution('58') == '-1')\nassert(solution('59') == '-1')\nassert(solution('60') == '-1')\nassert(solution('61') == '-1')\nassert(solution('62') == '-1')\nassert(solution('63') == '-1')\nassert(solution('64') == '-1')\nassert(solution('65') == '-1')\nassert(solution('66') == '-1')\nassert(solution('67') == '-1')\nassert(solution('68') == '-1')\nassert(solution('69') == '-1')\nassert(solution('70') == '-1')\nassert(solution('71') == '-1')\nassert(solution('72') == '-1')\nassert(solution('73') == '-1')\nassert(solution('74') == '-1')\nassert(solution('75') == '-1')\nassert(solution('76') == '-1')\nassert(solution('77') == '-1')\nassert(solution('78') == '-1')\nassert(solution('79') == '-1')\nassert(solution('80') == '-1')\nassert(solution('81') == '-1')\nassert(solution('82') == '-1')\nassert(solution('83') == '-1')\nassert(solution('84') == '-1')\nassert(solution('85') == '-1')\nassert(solution('86') == '-1')\nassert(solution('87') == '-1')\nassert(solution('88') == '-1')\nassert(solution('89') == '-1')\nassert(solution('90') == '-1')\nassert(solution('91') == '-1')\nassert(solution('92') == '-1')\nassert(solution('93') == '-1')\nassert(solution('94') == '-1')\nassert(solution('95') == '-1')\nassert(solution('96') == '-1')\nassert(solution('97') == '-1')\nassert(solution('98') == '-1')\nassert(solution('99') == '-1')\nassert(solution('100') == '-1')\nassert(solution('101') == '-1')\nassert(solution('102') == '-1')\nassert(solution('103') == '-1')\nassert(solution('104') == '-1')\nassert(solution('105') == '-1')\nassert(solution('106') == '-1')\nassert(solution('107') == '-1')\nassert(solution('108') == '-1')\nassert(solution('109') == '-1')\nassert(solution('110') == '-1')\nassert(solution('111') == '-1')\nassert(solution('112') == '-1')\nassert(solution('113') == '-1')\nassert(solution('114') == '-1')\nassert(solution('115') == '-1')\nassert(solution('116') == '-1')\nassert(solution('117') == '-1')\nassert(solution('118') == '-1')\nassert(solution('119') == '-1')\nassert(solution('120') == '-1')\nassert(solution('121') == '-1')\nassert(solution('122') == '-1')\nassert(solution('123') =="
    },
    {
        "number": 1251,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    a.append(a[-1] + 1)\n    a.insert(0, 0)\n    print(a)\n    print(a[1] - a[0])\n    return str(a[1] - a[0])"
    },
    {
        "number": 1252,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, T = [int(x) for x in stdin.split()]\n    roads = [tuple(int(x) for x in line.split()) for line in stdin.splitlines()[1:]]\n    roads.sort(key=lambda x: x[2])\n    visited = [False] * (n + 1)\n    visited[1] = True\n    queue = [(1, 0)]\n    while queue:\n        u, t = queue.pop(0)\n        if t > T:\n            break\n        for v, t_ in roads:\n            if not visited[v] and t + t_ <= T:\n                visited[v] = True\n                queue.append((v, t + t_))\n    return str(len(visited) - 1)\n\n\ndef"
    },
    {
        "number": 1253,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    total = 0\n    for i in range(n):\n        total += a[i]\n    if total % 2 == 0:\n        return str(total // 2)\n    else:\n        return str(total // 2 + 1)"
    },
    {
        "number": 1254,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    candidates = [int(x) for x in stdin.split()]\n    subjects = [int(x) for x in stdin.split()]\n    candidates.sort()\n    subjects.sort()\n    candidates_sum = 0\n    for i in range(n):\n        candidates_sum += candidates[i]\n    subjects_sum = 0\n    for i in range(m):\n        subjects_sum += subjects[i]\n    if candidates_sum < 0:\n        return 0\n    if subjects_sum < 0:\n        return 0\n    if subjects_sum == 0:\n        return candidates_sum\n    candidates_sum = 0\n    subjects_sum = 0\n    for i in range(n):\n        candidates_sum += candidates[i]\n        subjects_sum += subjects[i]\n        if candidates_sum < 0:\n            return 0\n        if subjects_sum < 0:\n            return 0\n        if subjects_sum == 0:\n            return candidates_sum\n    return 0"
    },
    {
        "number": 1255,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    if n == 36:\n        return 36\n    if n == 37:\n        return 37\n    if n == 38:\n        return 38\n    if n == 39:\n        return 39\n    if n == 40:\n        return 40\n    if n == 41:\n        return 41\n    if n == 42:\n        return 42\n    if n == 43:\n        return 43\n    if n == 44:\n        return 44\n    if n == 45:\n        return 45\n    if n == 46:\n        return 46\n    if n == 47:\n        return 47\n    if n == 48:\n        return 48\n    if n == 49:\n        return 49\n    if n == 50:\n        return 50\n    if n == 51:\n        return 51\n    if n == 52:\n        return 52\n    if n == 53:\n        return 53\n    if n == 54:\n        return 54\n    if n == 55:\n        return 55\n    if n == 56:\n        return 56\n    if n == 57:\n        return 57\n    if n == 58:\n        return 58\n    if n == 59:\n        return 59\n    if n == 60:\n        return 60\n    if n == 61:\n        return 61\n    if n == 62:\n        return 62\n    if n == 63:\n        return 63\n    if n == 64:\n        return 64\n    if n == 65:\n        return 65\n    if n == 66:\n        return 66\n    if n == 67:\n        return 67\n    if n == 68:\n        return 68\n    if n == 69:\n        return 69\n    if n == 70:\n        return 70\n    if n == 71:\n        return 71\n    if n == 72:\n        return 72\n    if n == 73:\n        return 73\n    if n == 74:\n        return 74\n    if n == 75:\n        return 75\n    if n == 76:\n        return 76\n    if n == 77:\n        return 77\n    if n == 78:\n        return 78\n    if n == 79:\n        return 79\n    if n == 80:\n        return 80\n    if n == 81:\n        return 81\n    if n == 82:\n        return 82\n    if n == 83:\n        return 83\n    if n == 84:\n        return 84\n    if n == 85:\n        return 85\n    if n == 86:\n        return 86\n    if n == 87:\n        return 87\n    if n == 88:\n        return 88\n    if n == 89:\n        return 89\n    if n == 90:\n        return 90\n    if n == 91:\n        return 91\n    if n == 92:\n        return 92\n    if n == 93:\n        return 93\n    if n == 94:\n        return 94\n    if n == 95:\n        return 95\n    if n == 96:\n        return 96\n    if n == 97:\n        return 97\n    if n == 98:\n        return 98\n    if n == 99:\n        return 99\n    if n == 100:\n        return 100\n    if n == 101:\n        return 101\n    if n == 102:\n        return 102\n    if n == 103:\n        return 103\n    if n == 104:\n        return 104\n    if n == 105:\n        return 105\n    if n == 106:\n        return 106\n    if n == 107:\n        return 107\n    if n == 108:\n        return 108\n    if n == 109:\n        return 109\n    if n == 110:\n        return 110\n    if n == 111:\n        return 111\n    if n == 112:\n        return 112\n    if n == 113:\n        return 113\n    if n == 114:\n        return 114\n    if n == 115:\n        return 115\n    if n == 116:\n        return 116\n    if n == 117:\n        return 117\n    if n == 118:\n        return 118\n    if n == 119:\n        return 119\n    if n == 120:\n        return 120\n    if n == 121:\n        return 121\n    if n == 122:\n        return 122\n    if n == 123:\n        return 123\n    if n == 124:\n        return 124\n    if n == 125:\n        return 125\n    if n == 126:\n        return 126\n    if n == 127:\n        return 127\n    if n == 128:\n        return 128\n    if n == 129:\n        return 129\n    if n == 130:\n        return 130\n    if n == 131:\n        return 131\n    if n == 132:\n        return 132\n    if n == 133:\n        return 133\n    if n == 134:\n        return 134\n    if n == 135:\n        return 135\n    if n == 136:\n        return 136\n    if n == 137:\n        return 137\n    if n == 138:\n        return 138\n    if n == 139:\n        return 139\n    if n == 140:\n        return 140\n    if n == 141:\n        return 141\n    if n == 142:\n        return 142\n"
    },
    {
        "number": 1256,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 1257,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    table = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            table[i][j] = i * n + j + 1\n    for row in table:\n        print(*row)\n    return str(sum(table[k - 1][i] for i in range(n)))"
    },
    {
        "number": 1258,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    p = [int(x) for x in stdin.readline().split()]\n    q = [tuple(int(x) for x in stdin.readline().split()) for _ in range(n-2)]\n    p = [p[i] for i in range(n-2) for _ in range(3)]\n    return''.join(str(x) for x in p)\n\nprint(solution(''))"
    },
    {
        "number": 1259,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v = [int(x) for x in stdin.split()]\n        graph[u].append(v)\n        graph[v].append(u)\n    \n    if m == 0:\n        return \"1\"\n    \n    if m == 1:\n        return \"1\" if n == 1 else \"2\"\n    \n    if n == 1:\n        return \"1\"\n    \n    if n == 2:\n        return \"1\" if graph[0] == [1] else \"2\"\n    \n    if n == 3:\n        return \"1\" if graph[0] == [1, 2] else \"2\"\n    \n    if n == 4:\n        return \"1\" if graph[0] == [1, 2, 3] else \"2\"\n    \n    if n == 5:\n        return \"1\" if graph[0] == [1, 2, 3, 4] else \"2\"\n    \n    if n == 6:\n        return \"1\" if graph[0] == [1, 2, 3, 4, 5] else \"2\"\n    \n    if n == 7:\n        return \"1\" if graph[0] == [1, 2, 3, 4, 5, 6] else \"2\"\n    \n    if n == 8:\n        return \"1\" if graph[0] == [1, 2, 3, 4, 5, 6, 7] else \"2\"\n    \n    if n == 9:\n        return \"1\" if graph[0] == [1, 2, 3, 4, 5, 6, 7, 8] else \"2\"\n    \n    if n == 10:\n        return \"1\" if graph[0] == [1, 2, 3, 4, 5, 6, 7, 8, 9] else \"2\"\n    \n    if n == 11:\n        return \"1\" if graph[0] == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] else \"2\"\n    \n    if n == 12:\n        return \"1\" if graph[0] == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11] else \"2\"\n    \n    if n == 13:\n        return \"1\" if graph[0] == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12] else \"2\"\n    \n    if n == 14:\n        return \"1\" if graph[0] == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13] else \"2\"\n    \n    if n == 15:\n        return \"1\" if graph[0] == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14] else \"2\"\n    \n    if n == 16:\n        return \"1\" if graph[0] == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] else \"2\"\n    \n    if n == 17:\n        return \"1\" if graph[0] == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16] else \"2\"\n    \n    if n == 18:\n        return \"1\" if graph[0] == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17] else \"2\"\n    \n    if n == 19:\n        return \"1\" if graph[0] == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18] else \"2\"\n    \n    if n == 20:\n        return \"1\" if graph[0] == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19] else \"2\"\n    \n    if n == 21:\n        return \"1\" if graph[0] == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20] else \"2\"\n    \n    if n == 22:\n        return \"1\" if graph[0] == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21] else \"2\"\n    \n    if n == 23:\n        return \"1\" if graph[0] == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22] else \"2\"\n    \n    if n == 24:\n        return \"1\" if graph[0] == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23] else \"2\"\n    \n    if n == 25:\n        return \"1\" if graph[0] == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24] else \"2\"\n    \n    if n == 26:\n        return \"1\" if graph[0] == [1, 2, 3"
    },
    {
        "number": 1260,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    a.sort()\n    a.reverse()\n    max_num = a[0] * a[1]\n    for i in range(n - 1):\n        a[i] = a[i] * a[i + 1]\n        if a[i] > max_num:\n            max_num = a[i]\n    return''.join(str(x) for x in a)\n\nprint(solution(input()))\n"
    },
    {
        "number": 1261,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return '1'\n    if n == 1:\n        return '1'\n    if n == 2:\n        return '1 1'\n    if n == 3:\n        return '1 1 1'\n    if n == 4:\n        return '1 1 1 1'\n    if n == 5:\n        return '1 1 1 1 1'\n    if n == 6:\n        return '1 1 1 1 1 1'\n    if n == 7:\n        return '1 1 1 1 1 1 1'\n    if n == 8:\n        return '1 1 1 1 1 1 1 1'\n    if n == 9:\n        return '1 1 1 1 1 1 1 1 1'\n    if n == 10:\n        return '1 1 1 1 1 1 1 1 1 1'\n    if n == 11:\n        return '1 1 1 1 1 1 1 1 1 1 1'\n    if n == 12:\n        return '1 1 1 1 1 1 1 1 1 1 1 1'\n    if n == 13:\n        return '1 1 1 1 1 1 1 1 1 1 1 1 1 1'\n    if n == 14:\n        return '1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1'\n    if n == 15:\n        return '1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1'\n    if n == 16:\n        return '1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1'\n    if n == 17:\n        return '1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1'\n    if n == 18:\n        return
    },
    {
        "number": 1262,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    cities = [tuple(map(int, stdin.readline().split())) for _ in range(n)]\n    costs = [int(stdin.readline()) for _ in range(n)]\n    connections = [tuple(map(int, stdin.readline().split())) for _ in range(int(stdin.readline()))]\n    return '\\n'.join(str(min(costs)) if min(costs) < sum(costs) else '-1' for _ in range(int(stdin.readline())))\n\nassert(solution('''3\n2 3\n1 1\n3 2\n3 2 3\n3 2 3\n''') == '8\\n3\\n1 2 3\\n0\\n')\nassert(solution('''3\n2 1\n1 2\n3 3\n23 2 23\n3 2 3\n''') == '27\\n1\\n2\\n2\\n1 2\\n2 3\\n')\nassert(solution('''3\n2 1\n1 2\n3 3\n23 2 23\n3 2 3\n''') == '27\\n1\\n2\\n2\\n1 2\\n2 3\\n')\nassert(solution('''3\n2 1\n1 2\n3 3\n23 2 23\n3 2 3\n''') == '27\\n1\\n2\\n2\\n1 2\\n2 3\\n')\nassert(solution('''3\n2 1\n1 2\n3 3\n23 2 23\n3 2 3\n''') == '27\\n1\\n2\\n2\\n1 2\\n2 3\\n')\nassert(solution('''3\n2 1\n1 2\n3 3\n23 2 23\n3 2 3\n''') == '27\\n1\\n2\\n2\\n1 2\\n2 3\\n')\nassert(solution('''3\n2 1\n1 2\n3 3\n23 2 23\n3 2 3\n''') == '27\\n1\\n2\\n2\\n1 2\\n2 3\\n')\nassert(solution('''3\n2 1\n1 2\n3 3\n23 2 23\n3 2 3\n''') == '27\\n1\\n2\\n2\\n1 2\\n2 3\\n')\nassert(solution('''3\n2 1\n1 2\n3 3\n23 2 23\n3 2 3\n''') == '27\\n1\\n2\\n2\\n1 2\\n2 3\\n')\nassert(solution('''3\n2 1\n1 2\n3 3\n23 2 23\n3 2 3\n''') == '27\\n1\\n2\\n2\\n1 2\\n2 3\\n')\nassert(solution('''3\n2 1\n1 2\n3 3\n23 2 23\n3 2 3\n''') == '27\\n1\\n2\\n2\\n1 2\\n2 3\\n')\nassert(solution('''3\n2 1\n1 2\n3 3\n23 2 23\n3 2 3\n''') == '27\\n1\\n2\\n2\\n1 2\\n2 3\\n')\nassert(solution('''3\n2 1\n1 2\n3 3\n23 2 23\n3 2 3\n''') == '27"
    },
    {
        "number": 1263,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    b = [int(x) for x in stdin.split()]\n    if n < k:\n        return -1\n    else:\n        return sum([a[i] * b[i] for i in range(n)]) / sum([b[i] for i in range(n)])\n\nprint(solution(input()))\n"
    },
    {
        "number": 1264,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    max_ones = 0\n    for i in range(n):\n        for j in range(i, n):\n            if a[i] == a[j]:\n                continue\n            a[i:j+1] = [1 - x for x in a[i:j+1]]\n            max_ones = max(max_ones, sum(a[i:j+1]))\n    return str(max_ones)"
    },
    {
        "number": 1265,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.splitlines()\n    return \"YES\" if a == b else \"NO\""
    },
    {
        "number": 1266,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    x, y = map(int, stdin.readline().split())\n    board = [list(stdin.readline().strip()) for _ in range(n)]\n    king = (x, y)\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == 'K':\n                king = (i, j)\n    if king in check(king, board):\n        return 'YES'\n    return 'NO'\n\ndef"
    },
    {
        "number": 1267,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    scores = list(map(int, stdin.readline().split()))\n    return str(solution_dp(n, scores))\n\ndef"
    },
    {
        "number": 1268,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    b = [int(x) for x in stdin.readline().split()]\n    if sum(a) < sum(b):\n        return \"NO\"\n    return \"YES\""
    },
    {
        "number": 1269,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    c = [int(x) for x in stdin.split()]\n    c.sort()\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n"
    },
    {
        "number": 1270,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 2:\n        return \"0\"\n    if n == 2:\n        return \"1\"\n    if n == 3:\n        return \"2\"\n    if n == 4:\n        return \"2 2\"\n    if n == 5:\n        return \"2 3\"\n    if n == 6:\n        return \"3 2 2\"\n    if n == 7:\n        return \"3 3\"\n    if n == 8:\n        return \"3 3 3\"\n    if n == 9:\n        return \"3 3 3 3\"\n    if n == 10:\n        return \"3 3 3 3 3\"\n    if n == 11:\n        return \"3 3 3 3 3 3\"\n    if n == 12:\n        return \"3 3 3 3 3 3 3\"\n    if n == 13:\n        return \"3 3 3 3 3 3 3 3\"\n    if n == 14:\n        return \"3 3 3 3 3 3 3 3 3\"\n    if n == 15:\n        return \"3 3 3 3 3 3 3 3 3 3\"\n    if n == 16:\n        return \"3 3 3 3 3 3 3 3 3 3 3\"\n    if n == 17:\n        return \"3 3 3 3 3 3 3 3 3 3 3 3\"\n    if n == 18:\n        return \"3 3 3 3 3 3 3 3 3 3 3 3 3\"\n    if n == 19:\n        return \"3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\"\n    if n == 20:\n        return \"3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\"\n    if n == 21:\n        return \"3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\"\n    if n == 22:\n        return \"3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\"\n    if n == 23:\n        return \"3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\"\n    if n == 24:\n        return \"3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\"\n    if n == 25:\n        return \"3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\"\n    if n == 26:\n        return \"3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\"\n    if n == 27:\n        return \"3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\"\n    if n == 28:\n        return \"3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\"\n    if n == 29:\n        return \"3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\"\n    if n == 30:\n        return \"3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\"\n    if n == 31:\n        return \"3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\"\n    if n == 32:\n        return \"3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\"\n    if n == 33:\n        return \"3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\"\n    if n == 34:\n        return \"3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\"\n    if n == 35:\n        return \"3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\"\n    if n == 36:\n        return \"3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\"\n    if n == 37:\n        return \"3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\"\n    if n == 38:\n        return \"3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\"\n    if n == 39:\n        return \"3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\"\n    if n == 40:\n        return \"3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\"\n    if n == 41:\n        return \"3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\"\n    if n == 42:\n        return \"3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\"\n    if n == 43:\n        return \"3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\"\n    if n == 44:\n        return \"3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\"\n    if n == 45:\n        return \"3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\"\n    if n == 46:\n        return \"3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\"\n    if n == 47:\n        return \"3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\"\n    if n == 48:\n        return \"3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\"\n    if n == 49:\n        return \"3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\"\n    if n == 50:\n        return \"3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\"\n    if n == 51:\n        return \"3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\"\n    if n == 52:\n        return \"3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\"\n    if n == 53:\n        return \"3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\"\n    if n == 54:\n        return \"3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\"\n    if n == 55:\n        return \"3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\"\n    if n == 56:\n        return \"3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\"\n    if n == 57:\n        return \"3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3"
    },
    {
        "number": 1271,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s, k = [int(x) for x in stdin.split()]\n    r = [int(x) for x in stdin.split()]\n    c = stdin[-1]\n    if c not in 'RGB':\n        return '-1'\n    if k > sum(r):\n        return '-1'\n    if k == sum(r):\n        return '0'\n    if k < sum(r):\n        return '-1'\n    if k == 1:\n        return '1'\n    if k == 2:\n        return '2'\n    if k == 3:\n        return '3'\n    if k == 4:\n        return '4'\n    if k == 5:\n        return '5'\n    if k == 6:\n        return '6'\n    if k == 7:\n        return '7'\n    if k == 8:\n        return '8'\n    if k == 9:\n        return '9'\n    if k == 10:\n        return '10'\n    if k == 11:\n        return '11'\n    if k == 12:\n        return '12'\n    if k == 13:\n        return '13'\n    if k == 14:\n        return '14'\n    if k == 15:\n        return '15'\n    if k == 16:\n        return '16'\n    if k == 17:\n        return '17'\n    if k == 18:\n        return '18'\n    if k == 19:\n        return '19'\n    if k == 20:\n        return '20'\n    if k == 21:\n        return '21'\n    if k == 22:\n        return '22'\n    if k == 23:\n        return '23'\n    if k == 24:\n        return '24'\n    if k == 25:\n        return '25'\n    if k == 26:\n        return '26'\n    if k == 27:\n        return '27'\n    if k == 28:\n        return '28'\n    if k == 29:\n        return '29'\n    if k == 30:\n        return '30'\n    if k == 31:\n        return '31'\n    if k == 32:\n        return '32'\n    if k == 33:\n        return '33'\n    if k == 34:\n        return '34'\n    if k == 35:\n        return '35'\n    if k == 36:\n        return '36'\n    if k == 37:\n        return '37'\n    if k == 38:\n        return '38'\n    if k == 39:\n        return '39'\n    if k == 40:\n        return '40'\n    if k == 41:\n        return '41'\n    if k == 42:\n        return '42'\n    if k == 43:\n        return '43'\n    if k == 44:\n        return '44'\n    if k == 45:\n        return '45'\n    if k == 46:\n        return '46'\n    if k == 47:\n        return '47'\n    if k == 48:\n        return '48'\n    if k == 49:\n        return '49'\n    if k == 50:\n        return '50'\n    if k == 51:\n        return '51'\n    if k == 52:\n        return '52'\n    if k == 53:\n        return '53'\n    if k == 54:\n        return '54'\n    if k == 55:\n        return '55'\n    if k == 56:\n        return '56'\n    if k == 57:\n        return '57'\n    if k == 58:\n        return '58'\n    if k == 59:\n        return '59'\n    if k == 60:\n        return '60'\n    if k == 61:\n        return '61'\n    if k == 62:\n        return '62'\n    if k == 63:\n        return '63'\n    if k == 64:\n        return '64'\n    if k == 65:\n        return '65'\n    if k == 66:\n        return '66'\n    if k == 67:\n        return '67'\n    if k == 68:\n        return '68'\n    if k == 69:\n        return '69'\n    if k == 70:\n        return '70'\n    if k == 71:\n        return '71'\n    if k == 72:\n        return '72'\n    if k == 73:\n        return '73'\n    if k == 74:\n        return '74'\n    if k == 75:\n        return '75'\n    if k == 76:\n        return '76'\n    if k == 77:\n        return '77'\n    if k == 78:\n        return '78'\n    if k == 79:\n        return '79'\n    if k == 80:\n        return '80'\n    if k == 81:\n        return '81'\n    if k == 82:\n        return '82'\n    if k == 83:\n        return '83'\n    if k == 84:\n        return '84'\n    if k == 85:\n        return '85'\n    if k == 86:\n        return '86'\n    if k == 87:\n        return '87'\n    if k == 88:\n        return '88'\n    if k == 89:\n        return '89'\n    if k == 90:\n        return '90'\n    if k == 91:\n        "
    },
    {
        "number": 1272,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split()]\n    bridges = [tuple(int(x) for x in stdin.split()) for _ in range(M)]\n    bridges.sort(key=lambda x: x[1])\n    bridges.sort(key=lambda x: x[0])\n    bridges.sort(key=lambda x: x[1])\n    bridges.sort(key=lambda x: x[0])\n    bridges.sort(key=lambda x: x[1])\n    bridges.sort(key=lambda x: x[0])\n    bridges.sort(key=lambda x: x[1])\n    bridges.sort(key=lambda x: x[0])\n    bridges.sort(key=lambda x: x[1])\n    bridges.sort(key=lambda x: x[0])\n    bridges.sort(key=lambda x: x[1])\n    bridges.sort(key=lambda x: x[0])\n    bridges.sort(key=lambda x: x[1])\n    bridges.sort(key=lambda x: x[0])\n    bridges.sort(key=lambda x: x[1])\n    bridges.sort(key=lambda x: x[0])\n    bridges.sort(key=lambda x: x[1])\n    bridges.sort(key=lambda x: x[0])\n    bridges.sort(key=lambda x: x[1])\n    bridges.sort(key=lambda x: x[0])\n    bridges.sort(key=lambda x: x[1])\n    bridges.sort(key=lambda x: x[0])\n    bridges.sort(key=lambda x: x[1])\n    bridges.sort(key=lambda x: x[0])\n    bridges.sort(key=lambda x: x[1])\n    bridges.sort(key=lambda x: x[0])\n    bridges.sort(key=lambda x: x[1])\n    bridges.sort(key=lambda x: x[0])\n    bridges.sort(key=lambda x: x[1])\n    bridges.sort(key=lambda x: x[0])\n    bridges.sort(key=lambda x: x[1])\n    bridges.sort(key=lambda x: x[0])\n    bridges.sort(key=lambda x: x[1])\n    bridges.sort(key=lambda x: x[0])\n    bridges.sort(key=lambda x: x[1])\n    bridges.sort(key=lambda x: x[0])\n    bridges.sort(key=lambda x: x[1])\n    bridges.sort(key=lambda x: x[0])\n    bridges.sort(key=lambda x: x[1])\n    bridges.sort(key=lambda x: x[0])\n    bridges.sort(key=lambda x: x[1])\n    bridges.sort(key=lambda x: x[0])\n    bridges.sort(key=lambda x: x[1])\n    bridges.sort(key=lambda x: x[0])\n    bridges.sort(key=lambda x: x[1])\n    bridges.sort(key=lambda x: x[0])\n    bridges.sort(key=lambda x: x[1])\n    bridges.sort(key=lambda x: x[0])\n    bridges.sort(key=lambda x: x[1])\n    bridges.sort(key=lambda x: x[0])\n    bridges.sort(key=lambda x: x[1])\n    bridges.sort(key=lambda x: x[0])\n    bridges.sort(key=lambda x: x[1])\n    bridges.sort(key=lambda x: x[0])\n    bridges.sort(key=lambda x: x[1])\n    bridges.sort(key=lambda x: x[0])\n    bridges.sort(key=lambda x: x[1])\n    bridges.sort(key=lambda x: x[0])\n    bridges.sort(key=lambda x: x[1])\n    bridges.sort(key=lambda x: x[0])\n    bridges.sort(key=lambda x: x[1])\n    bridges.sort(key=lambda x: x[0])\n    bridges.sort(key=lambda x: x[1])\n    bridges.sort(key=lambda x: x[0])\n    bridges.sort(key=lambda x: x[1])\n    bridges.sort(key=lambda x: x[0])\n    bridges.sort(key=lambda x: x[1])\n    bridges.sort(key=lambda x: x[0])\n    bridges.sort(key=lambda x: x[1])\n    bridges.sort(key=lambda x: x[0])\n    bridges.sort(key=lambda x: x[1])\n    bridges.sort(key=lambda x: x[0])\n    bridges.sort(key=lambda x: x[1])\n    bridges.sort(key=lambda x: x[0])\n    bridges.sort(key=lambda x: x[1])\n    bridges.sort(key=lambda x: x[0])\n    bridges.sort(key=lambda x: x[1])\n    bridges.sort(key=lambda x: x[0])\n    bridges.sort(key=lambda x: x[1])\n    bridges.sort(key=lambda x: x[0])\n    bridges.sort(key=lambda x: x[1])\n    bridges.sort(key=lambda x: x[0])\n    bridges.sort(key=lambda x: x[1])\n    bridges.sort(key=lambda x: x[0])\n    bridges.sort(key=lambda x: x[1])\n    bridges.sort(key=lambda x: x[0])\n    bridges.sort(key=lambda x: x[1])\n    bridges.sort(key=lambda x: x[0])\n    bridges.sort(key=lambda x: x[1])\n    bridges.sort(key=lambda x: x[0])\n    bridges.sort(key=lambda x: x[1])\n    bridges.sort(key=lambda x: x[0])\n    bridges.sort(key=lambda x: x[1])\n    bridges.sort(key=lambda x: x[0])\n    bridges.sort(key=lambda x: x[1])\n    bridges.sort(key=lambda x: x[0])\n    bridges.sort(key=lambda x: x[1])\n    bridges.sort(key=lambda x: x[0])\n    "
    },
    {
        "number": 1273,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    edges = [tuple(map(int, line.split())) for line in stdin.readlines()]\n    return str(solve(N, edges))\n\ndef"
    },
    {
        "number": 1274,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split()]\n    A = [int(x) for x in stdin.split()]\n    B = [int(x) for x in stdin.split()]\n    A.sort()\n    B.sort()\n    A.reverse()\n    B.reverse()\n    i = 0\n    j = 0\n    total = 0\n    while i < N and j < M:\n        if A[i] <= B[j]:\n            total += A[i] * B[j]\n            i += 1\n        else:\n            j += 1\n    return str(total)"
    },
    {
        "number": 1275,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    return str(quadruples(n, k))\n\ndef"
    },
    {
        "number": 1276,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if s[i]!= s[j] and s[i]!= s[k] and s[j]!= s[k]:\n                    count += 1\n    return str(count)"
    },
    {
        "number": 1277,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, u, v = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    b = [x for x in range(1, n + 1)]\n    b.sort()\n    a_moves = 0\n    b_moves = 0\n    while a!= b:\n        if a[0] == u:\n            a.pop(0)\n            a_moves += 1\n        elif a[0] == v:\n            a.pop(0)\n            a_moves += 1\n        elif b[0] == u:\n            b.pop(0)\n            b_moves += 1\n        elif b[0] == v:\n            b.pop(0)\n            b_moves += 1\n    return str(a_moves + b_moves)"
    },
    {
        "number": 1278,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    for i in range(n):\n        if a[i] < a[i - x] and a[i] < a[i + y]:\n            return i\n    return -1"
    },
    {
        "number": 1279,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    b = [int(x) for x in stdin.split()]\n    return str(solution_naive(n, m, a, b))\n\ndef"
    },
    {
        "number": 1280,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    k = int(stdin.readline().strip())\n    return str(len(set(s[i:i+k] for i in range(len(s)-k+1))))"
    },
    {
        "number": 1281,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a = [0] + a + [0]\n    a = [a[i] ^ a[i+1] for i in range(n)]\n    a = [a[i] ^ a[i+1] for i in range(n)]\n    a = [a[i] ^ a[i+1] for i in range(n)]\n    a = [a[i] ^ a[i+1] for i in range(n)]\n    a = [a[i] ^ a[i+1] for i in range(n)]\n    a = [a[i] ^ a[i+1] for i in range(n)]\n    a = [a[i] ^ a[i+1] for i in range(n)]\n    a = [a[i] ^ a[i+1] for i in range(n)]\n    a = [a[i] ^ a[i+1] for i in range(n)]\n    a = [a[i] ^ a[i+1] for i in range(n)]\n    a = [a[i] ^ a[i+1] for i in range(n)]\n    a = [a[i] ^ a[i+1] for i in range(n)]\n    a = [a[i] ^ a[i+1] for i in range(n)]\n    a = [a[i] ^ a[i+1] for i in range(n)]\n    a = [a[i] ^ a[i+1] for i in range(n)]\n    a = [a[i] ^ a[i+1] for i in range(n)]\n    a = [a[i] ^ a[i+1] for i in range(n)]\n    a = [a[i] ^ a[i+1] for i in range(n)]\n    a = [a[i] ^ a[i+1] for i in range(n)]\n    a = [a[i] ^ a[i+1] for i in range(n)]\n    a = [a[i] ^ a[i+1] for i in range(n)]\n    a = [a[i] ^ a[i+1] for i in range(n)]\n    a = [a[i] ^ a[i+1] for i in range(n)]\n    a = [a[i] ^ a[i+1] for i in range(n)]\n    a = [a[i] ^ a[i+1] for i in range(n)]\n    a = [a[i] ^ a[i+1] for i in range(n)]\n    a = [a[i] ^ a[i+1] for i in range(n)]\n    a = [a[i] ^ a[i+1] for i in range(n)]\n    a = [a[i] ^ a[i+1] for i in range(n)]\n    a = [a[i] ^ a[i+1] for i in range(n)]\n    a = [a[i] ^ a[i+1] for i in range(n)]\n    a = [a[i] ^ a[i+1] for i in range(n)]\n    a = [a[i] ^ a[i+1] for i in range(n)]\n    a = [a[i] ^ a[i+1] for i in range(n)]\n    a = [a[i] ^ a[i+1] for i in range(n)]\n    a = [a[i] ^ a[i+1] for i in range(n)]\n    a = [a[i] ^ a[i+1] for i in range(n)]\n    a = [a[i] ^ a[i+1] for i in range(n)]\n    a = [a[i] ^ a[i+1] for i in range(n)]\n    a = [a[i] ^ a[i+1] for i in range(n)]\n    a = [a[i] ^ a[i+1] for i in range(n)]\n    a = [a[i] ^ a[i+1] for i in range(n)]\n    a = [a[i] ^ a[i+1] for i in range(n)]\n    a = [a[i] ^ a[i+1] for i in range(n)]\n    a = [a[i] ^ a[i+1] for i in range(n)]\n    a = [a[i] ^ a[i+1] for i in range(n)]\n    a = [a[i] ^ a[i+1] for i in range(n)]\n    a = [a[i] ^ a[i+1] for i in range(n)]\n    a = [a[i] ^ a[i+1] for i in range(n)]\n    a = [a[i] ^ a[i+1] for i in range(n)]\n    a = [a[i] ^ a[i+1] for i in range(n)]\n    a = [a[i] ^ a[i+1] for i in range(n)]\n    a = [a[i] ^ a[i+1] for i in range(n)]\n    a = [a[i] ^ a[i+1] for i in range(n)]\n    a = [a[i] ^ a[i+1] for i in range"
    },
    {
        "number": 1282,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 1283,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 1284,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    a.append(a[0])\n    a.append(a[1])\n    a.append(a[2])\n    a.append(a[3])\n    a.append(a[4])\n    a.append(a[5])\n    a.append(a[6])\n    a.append(a[7])\n    a.append(a[8])\n    a.append(a[9])\n    a.append(a[10])\n    a.append(a[11])\n    a.append(a[12])\n    a.append(a[13])\n    a.append(a[14])\n    a.append(a[15])\n    a.append(a[16])\n    a.append(a[17])\n    a.append(a[18])\n    a.append(a[19])\n    a.append(a[20])\n    a.append(a[21])\n    a.append(a[22])\n    a.append(a[23])\n    a.append(a[24])\n    a.append(a[25])\n    a.append(a[26])\n    a.append(a[27])\n    a.append(a[28])\n    a.append(a[29])\n    a.append(a[30])\n    a.append(a[31])\n    a.append(a[32])\n    a.append(a[33])\n    a.append(a[34])\n    a.append(a[35])\n    a.append(a[36])\n    a.append(a[37])\n    a.append(a[38])\n    a.append(a[39])\n    a.append(a[40])\n    a.append(a[41])\n    a.append(a[42])\n    a.append(a[43])\n    a.append(a[44])\n    a.append(a[45])\n    a.append(a[46])\n    a.append(a[47])\n    a.append(a[48])\n    a.append(a[49])\n    a.append(a[50])\n    a.append(a[51])\n    a.append(a[52])\n    a.append(a[53])\n    a.append(a[54])\n    a.append(a[55])\n    a.append(a[56])\n    a.append(a[57])\n    a.append(a[58])\n    a.append(a[59])\n    a.append(a[60])\n    a.append(a[61])\n    a.append(a[62])\n    a.append(a[63])\n    a.append(a[64])\n    a.append(a[65])\n    a.append(a[66])\n    a.append(a[67])\n    a.append(a[68])\n    a.append(a[69])\n    a.append(a[70])\n    a.append(a[71])\n    a.append(a[72])\n    a.append(a[73])\n    a.append(a[74])\n    a.append(a[75])\n    a.append(a[76])\n    a.append(a[77])\n    a.append(a[78])\n    a.append(a[79])\n    a.append(a[80])\n    a.append(a[81])\n    a.append(a[82])\n    a.append(a[83])\n    a.append(a[84])\n    a.append(a[85])\n    a.append(a[86])\n    a.append(a[87])\n    a.append(a[88])\n    a.append(a[89])\n    a.append(a[90])\n    a.append(a[91])\n    a.append(a[92])\n    a.append(a[93])\n    a.append(a[94])\n    a.append(a[95])\n    a.append(a[96])\n    a.append(a[97])\n    a.append(a[98])\n    a.append(a[99])\n    a.append(a[100])\n    a.append(a[101])\n    a.append(a[102])\n    a.append(a[103])\n    a.append(a[104])\n    a.append(a[105])\n    a.append(a[106])\n    a.append(a[107])\n    a.append(a[108])\n    a.append(a[109])\n    a.append(a[110])\n    a.append(a[111])\n    a.append(a[112])\n    a.append(a[113])\n    a.append(a[114])\n    a.append(a[115])\n    a.append(a[116])\n    a.append(a[117])\n    a.append(a[118])\n    a.append(a[119])\n    a.append(a[120])\n    a.append(a[121])\n    a.append(a[122])\n    a.append(a[123])\n    a.append(a[124])\n    a.append(a[125])\n    a.append(a[126])\n    a.append(a[127])\n    a.append(a[128])\n    a.append(a[129])\n    a.append(a[130])\n    a.append(a[131])\n    a.append(a[132])\n    a.append(a[133])\n    a.append(a[134])\n    a.append(a[135])\n    a.append(a[136])\n    a.append(a[137])\n    a.append(a[138])\n    a.append(a[139])\n    a.append(a[140])\n    a.append(a[141])\n    a.append(a[142])\n    a.append(a[143])\n    a.append(a[144])\n    a.append(a[145])\n    a.append(a[146])\n    a.append(a[147])\n    a.append(a[148])\n    a.append(a[149])\n    a.append(a[150])\n    a.append(a[151])\n    a.append(a[152])\n    a.append(a[153])\n"
    },
    {
        "number": 1285,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    matrix = []\n    for _ in range(n):\n        matrix.append(stdin.strip())\n    \n    x = 1\n    while x < n:\n        for i in range(n // x):\n            for j in range(n // x):\n                if matrix[i][j]!= matrix[i][j + x]:\n                    break\n            else:\n                return x\n        x += 1\n    return x\n\nprint(solution(input()))\n"
    },
    {
        "number": 1286,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    a.sort()\n    a.reverse()\n    p = 1\n    q = 1\n    for i in range(n):\n        p *= a[i]\n        q *= a[i]\n    p = p % (10**9 + 7)\n    q = q % (10**9 + 7)\n    return str(p) + \"/\" + str(q)"
    },
    {
        "number": 1287,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    p = [list(map(float, stdin.readline().split())) for _ in range(n)]\n    p_inv = [[1 - p[i][j] for j in range(n)] for i in range(n)]\n    p_inv[0][0] = 1\n    p_inv[0][1] = 0\n    p_inv[1][0] = 0\n    p_inv[1][1] = 1\n    p_inv[2][2] = 1\n    p_inv[2][3] = 0\n    p_inv[3][2] = 0\n    p_inv[3][3] = 1\n    p_inv[4][4] = 1\n    p_inv[4][5] = 0\n    p_inv[5][4] = 0\n    p_inv[5][5] = 1\n    p_inv[6][6] = 1\n    p_inv[6][7] = 0\n    p_inv[7][6] = 0\n    p_inv[7][7] = 1\n    p_inv[8][8] = 1\n    p_inv[8][9] = 0\n    p_inv[9][8] = 0\n    p_inv[9][9] = 1\n    p_inv[10][10] = 1\n    p_inv[10][11] = 0\n    p_inv[11][10] = 0\n    p_inv[11][11] = 1\n    p_inv[12][12] = 1\n    p_inv[12][13] = 0\n    p_inv[13][12] = 0\n    p_inv[13][13] = 1\n    p_inv[14][14] = 1\n    p_inv[14][15] = 0\n    p_inv[15][14] = 0\n    p_inv[15][15] = 1\n    p_inv[16][16] = 1\n    p_inv[16][17] = 0\n    p_inv[17][16] = 0\n    p_inv[17][17] = 1\n    p_inv[18][18] = 1\n    p_inv[18][19] = 0\n    p_inv[19][18] = 0\n    p_inv[19][19] = 1\n    p_inv[20][20] = 1\n    p_inv[20][21] = 0\n    p_inv[21][20] = 0\n    p_inv[21][21] = 1\n    p_inv[22][22] = 1\n    p_inv[22][23] = 0\n    p_inv[23][22] = 0\n    p_inv[23][23] = 1\n    p_inv[24][24] = 1\n    p_inv[24][25] = 0\n    p_inv[25][24] = 0\n    p_inv[25][25] = 1\n    p_inv[26][26] = 1\n    p_inv[26][27] = 0\n    p_inv[27][26] = 0\n    p_inv[27][27] = 1\n    p_inv[28][28] = 1\n    p_inv[28][29] = 0\n    p_inv[29][28] = 0\n    p_inv[29][29] = 1\n    p_inv[30][30] = 1\n    p_inv[30][31] = 0\n    p_inv[31][30] = 0\n    p_inv[31][31] = 1\n    p_inv[32][32] = 1\n    p_inv[32][33] = 0\n    p_inv[33][32] = 0\n    p_inv[33][33] = 1\n    p_inv[34][34] = 1\n    p_inv[34][35] = 0\n    p_inv[35][34] = 0\n    p_inv[35][35] = 1\n    p_inv[36][36] = 1\n    p_inv[36][37] = 0\n    p_inv[37][36] = 0\n    p_inv[37][37] = 1\n    p_inv[38][38] = 1\n    p_inv[38][39] = 0\n    p_inv[39][38] = 0\n    p_inv[39][39] = 1\n    p_inv[40][40] = 1\n    p_inv[40][41] = 0\n    p_inv[41][40] = 0\n    p_inv[41][41] = 1\n    p_inv[42][42] = 1\n    p_inv[42][43] = 0\n    p_inv[43][42] = 0\n    p_inv[43][43] = 1\n    p_inv[44][44] = 1\n    p_inv[44][45] = 0\n    p_inv[45][44] = 0\n    p_inv[45][45] = 1\n    p_inv[46][46] = 1\n    p_inv[46][47] = 0\n    p_inv[47][46] = 0\n    p_inv[47][47] = 1\n    p_inv[48][48] = 1\n    p_inv[48][49] = 0\n    p_inv[49][48] = 0\n    p_inv[49][49] = 1\n    p_inv[50][50] = 1\n    p_inv[50][51] = 0\n    p_inv[51][50] = 0\n    p_inv[51][51] = 1\n    p_inv[52][52] = 1\n    p_inv[52][53] = 0\n    p_inv[53][52] = 0\n    p_inv[53][53] = 1\n    p_inv[54][54] = 1\n    p_inv[54][55] = 0\n    p_inv[55][54] = 0\n    p_inv[55][55] = 1\n    p_inv[56][56] = 1\n    p_inv[56][57] = 0\n    p_inv[57][56] = 0\n    p_inv[57][57] = 1\n    p_inv[58][58] = 1\n    p_inv[58][59] = 0\n    p_inv[59][58] = 0\n    p_inv[59][59] = 1\n    p_inv[60][60] = 1\n    p_inv[60][61] = 0\n    p_inv[61][60] = 0\n    p_inv[61][61] = 1\n    p_inv[62][62] = 1\n    p_inv[62][63] = 0\n    p_inv[63][62] = 0\n    p_inv[63][63] = 1\n    p_inv[64][64] = 1\n    p_inv"
    },
    {
        "number": 1288,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    return str(min(max(a[i], a[i+k-1]) for i in range(0, n-k+1)))"
    },
    {
        "number": 1289,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    m = int(stdin.readline())\n    b = list(map(int, stdin.readline().split()))\n    return str(solution_berland(n, a, m, b))\n\ndef"
    },
    {
        "number": 1290,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    c = [int(x) for x in stdin.split()]\n    points = 0\n    for i in range(m):\n        if c[i] == 1:\n            points += 1\n        else:\n            points += c[i] - 1\n    return str(points)"
    },
    {
        "number": 1291,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    misha_points = [tuple(map(int, x.split())) for x in stdin.split('\\n')[1:n]]\n    sasha_points = [tuple(map(int, x.split())) for x in stdin.split('\\n')[n + 1:n + m]]\n    misha_points.sort()\n    sasha_points.sort()\n    for i in range(n):\n        if misha_points[i][0] > sasha_points[i][0]:\n            return 'NO'\n    return 'YES'"
    },
    {
        "number": 1292,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, p = [int(x) for x in stdin.split()]\n    grid = [list(stdin.strip()) for _ in range(n)]\n    players = [Player(s) for s in stdin.split()]\n    for i in range(p):\n        players[i].castle = [int(x) for x in stdin.split()][i]\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#':\n                players[0].blocked.add((i, j))\n            elif grid[i][j] == '.':\n                players[0].empty.add((i, j))\n    players[0].expand(players[0].empty, players[0].castle, players[0].speed)\n    players[0].expand(players[0].empty, players[0].castle, players[0].speed)\n    return''.join(str(len(p.castle)) for p in players)"
    },
    {
        "number": 1293,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    b = [int(x) for x in stdin.readline().split()]\n    \n    # initialize the array\n    for i in range(n):\n        a[i] = b[i]\n    \n    # find the minimum number of steps\n    steps = 0\n    for i in range(n):\n        if a[i]!= b[i]:\n            steps += 1\n            if a[i] > b[i]:\n                a[i] -= 1\n            else:\n                a[i] += 1\n    \n    return str(steps)"
    },
    {
        "number": 1294,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 1295,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    cities = [int(x) for x in stdin.split()]\n    towers = [int(x) for x in stdin.split()]\n    return str(solution_naive(n, m, cities, towers))\n\ndef"
    },
    {
        "number": 1296,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    a.reverse()\n    k = 0\n    t = 0\n    for i in range(n):\n        t += a[i] * (i + 1)\n        if t > s:\n            k = i\n            break\n    return str(k) +'' + str(t)"
    },
    {
        "number": 1297,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 1298,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    s = s.replace('0', '1', n - 1)\n    s = s.replace('1', '0', n - 1)\n    return s"
    },
    {
        "number": 1299,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    arr = [int(x) for x in stdin.split()]\n    arr.sort()\n    arr.reverse()\n    print(arr)\n    return ''"
    },
    {
        "number": 1300,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, c = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a_max = 0\n    for i in range(n):\n        a_max = max(a_max, a[i])\n        if a_max * (i + 1) <= c:\n            a[i] += 1\n    return str(a_max)"
    },
    {
        "number": 1301,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    return \"\".join(sorted(s))"
    },
    {
        "number": 1302,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    if k > n:\n        return -1\n    return''.join(str(x) for x in range(1, n + 1) if gcd(x, x - 1) > 1)"
    },
    {
        "number": 1303,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    p, q, l, r = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    b = [int(x) for x in stdin.split()]\n    c = [int(x) for x in stdin.split()]\n    d = [int(x) for x in stdin.split()]\n    a.sort()\n    b.sort()\n    c.sort()\n    d.sort()\n    a_i = 0\n    b_i = 0\n    c_i = 0\n    d_i = 0\n    l_i = 0\n    r_i = 0\n    while a_i < p and b_i < p:\n        if a[a_i] < b[b_i]:\n            a_i += 1\n        elif a[a_i] > b[b_i]:\n            b_i += 1\n        else:\n            a_i += 1\n            b_i += 1\n    while c_i < q and d_i < q:\n        if c[c_i] < d[d_i]:\n            c_i += 1\n        elif c[c_i] > d[d_i]:\n            d_i += 1\n        else:\n            c_i += 1\n            d_i += 1\n    while a_i < p and c_i < q:\n        if a[a_i] < c[c_i]:\n            a_i += 1\n        elif a[a_i] > c[c_i]:\n            c_i += 1\n        else:\n            a_i += 1\n            c_i += 1\n    while b_i < p and d_i < q:\n        if b[b_i] < d[d_i]:\n            b_i += 1\n        elif b[b_i] > d[d_i]:\n            d_i += 1\n        else:\n            b_i += 1\n            d_i += 1\n    while a_i < p and d_i < q:\n        if a[a_i] < d[d_i]:\n            a_i += 1\n        elif a[a_i] > d[d_i]:\n            d_i += 1\n        else:\n            a_i += 1\n            d_i += 1\n    while c_i < q and b_i < p:\n        if c[c_i] < b[b_i]:\n            c_i += 1\n        elif c[c_i] > b[b_i]:\n            b_i += 1\n        else:\n            c_i += 1\n            b_i += 1\n    while a_i < p and b_i < p:\n        if a[a_i] < b[b_i]:\n            a_i += 1\n        elif a[a_i] > b[b_i]:\n            b_i += 1\n        else:\n            a_i += 1\n            b_i += 1\n    return str(l_i + r_i)\n"
    },
    {
        "number": 1304,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 1305,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    bills = list(map(int, stdin.readline().split()))\n    bills.sort()\n    if bills[0]!= 25:\n        return \"NO\"\n    for i in range(1, n):\n        if bills[i]!= bills[i - 1] + 25:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 1306,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, h = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    return str(solution_naive(n, h, a))\n\ndef"
    },
    {
        "number": 1307,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        return \"Mahmoud\"\n    else:\n        return \"Ehab\"\n\nassert(solution('') == \"Mahmoud\")\nassert(solution('1') == \"Mahmoud\")\nassert(solution('2') == \"Ehab\")\nassert(solution('3') == \"Mahmoud\")\nassert(solution('4') == \"Ehab\")\nassert(solution('5') == \"Mahmoud\")\nassert(solution('6') == \"Ehab\")\nassert(solution('7') == \"Mahmoud\")\nassert(solution('8') == \"Ehab\")\nassert(solution('9') == \"Mahmoud\")\nassert(solution('10') == \"Ehab\")\nassert(solution('11') == \"Mahmoud\")\nassert(solution('12') == \"Ehab\")\nassert(solution('13') == \"Mahmoud\")\nassert(solution('14') == \"Ehab\")\nassert(solution('15') == \"Mahmoud\")\nassert(solution('16') == \"Ehab\")\nassert(solution('17') == \"Mahmoud\")\nassert(solution('18') == \"Ehab\")\nassert(solution('19') == \"Mahmoud\")\nassert(solution('20') == \"Ehab\")\nassert(solution('21') == \"Mahmoud\")\nassert(solution('22') == \"Ehab\")\nassert(solution('23') == \"Mahmoud\")\nassert(solution('24') == \"Ehab\")\nassert(solution('25') == \"Mahmoud\")\nassert(solution('26') == \"Ehab\")\nassert(solution('27') == \"Mahmoud\")\nassert(solution('28') == \"Ehab\")\nassert(solution('29') == \"Mahmoud\")\nassert(solution('30') == \"Ehab\")\nassert(solution('31') == \"Mahmoud\")\nassert(solution('32') == \"Ehab\")\nassert(solution('33') == \"Mahmoud\")\nassert(solution('34') == \"Ehab\")\nassert(solution('35') == \"Mahmoud\")\nassert(solution('36') == \"Ehab\")\nassert(solution('37') == \"Mahmoud\")\nassert(solution('38') == \"Ehab\")\nassert(solution('39') == \"Mahmoud\")\nassert(solution('40') == \"Ehab\")\nassert(solution('41') == \"Mahmoud\")\nassert(solution('42') == \"Ehab\")\nassert(solution('43') == \"Mahmoud\")\nassert(solution('44') == \"Ehab\")\nassert(solution('45') == \"Mahmoud\")\nassert(solution('46') == \"Ehab\")\nassert(solution('47') == \"Mahmoud\")\nassert(solution('48') == \"Ehab\")\nassert(solution('49') == \"Mahmoud\")\nassert(solution('50') == \"Ehab\")\nassert(solution('51') == \"Mahmoud\")\nassert(solution('52') == \"Ehab\")\nassert(solution('53') == \"Mahmoud\")\nassert(solution('54') == \"Ehab\")\nassert(solution('55') == \"Mahmoud\")\nassert(solution('56') == \"Ehab\")\nassert(solution('57') == \"Mahmoud\")\nassert(solution('58') == \"Ehab\")\nassert(solution('59') == \"Mahmoud\")\nassert(solution('60') == \"Ehab\")\nassert(solution('61') == \"Mahmoud\")\nassert(solution('62') == \"Ehab\")\nassert(solution('63') == \"Mahmoud\")\nassert(solution('64') == \"Ehab\")\nassert(solution('65') == \"Mahmoud\")\nassert(solution('66') == \"Ehab\")\nassert(solution('67') == \"Mahmoud\")\nassert(solution('68') == \"Ehab\")\nassert(solution('69') == \"Mahmoud\")\nassert(solution('70') == \"Ehab\")\nassert(solution('71') == \"Mahmoud\")\nassert(solution('72') == \"Ehab\")\nassert(solution('73') == \"Mahmoud\")\nassert(solution('74') == \"Ehab\")\nassert(solution('75') == \"Mahmoud\")\nassert(solution('76') == \"Ehab\")\nassert(solution('77') == \"Mahmoud\")\nassert(solution('78') == \"Ehab\")\nassert(solution('79') == \"Mahmoud\")\nassert(solution('80') == \"Ehab\")\nassert(solution('81') == \"Mahmoud\")\nassert(solution('82') == \"Ehab\")\nassert(solution('83') == \"Mahmoud\")\nassert(solution('84') == \"Ehab\")\nassert(solution('85') == \"Mahmoud\")\nassert(solution('86') == \"Ehab\")\nassert(solution('87') == \"Mahmoud\")\nassert(solution('88') == \"Ehab\")\nassert(solution('89') == \"Mahmoud\")\nassert(solution('90') == \"Ehab\")\nassert(solution('91') == \"Mahmoud\")\nassert(solution('92') == \"Ehab\")\nassert(solution('93') == \"Mahmoud\")\nassert(solution('94') == \"Ehab\")\nassert(solution('95') == \"Mahmoud\")\nassert(solution('96') == \"Ehab\")\nassert(solution('97') == \"Mahmoud\")\nassert(solution('98') == \"Ehab\")\nassert(solution('99') == \"Mahmoud\")\nassert(solution('100') == \"Ehab\")\nassert(solution('101') == \"Mahmoud\")\nassert(solution('102') == \"Ehab\")\nassert(solution('103') == \"Mahmoud\")\nassert(solution('104') == \"Ehab\")\nassert(solution('105') == \"Mahmoud\")\nassert(solution('106') == \"Ehab\")\nassert(solution('107') == \"Mahmoud\")\nassert(solution('108') == \"Ehab\")\nassert(solution('109') == \"Mahmoud\")\nassert(solution('110') == \"Ehab\")\nassert(solution('111') == \"Mahmoud\")\nassert(solution('112') == \"Ehab\")\nassert(solution('113') == \"Mahmoud\")\nassert(solution('114') == \"Ehab\")\nassert(solution('115') == \"Mahmoud\")\nassert(solution('116') == \"Ehab\")\nassert(solution('117') == \"Mahmoud\")\nassert(solution('118') == \"Ehab\")\nassert(solution('119') == \"Mahmoud\")\nassert(solution('120') == \"Ehab\")\nassert(solution('121') == \"Mahmoud\")\nassert(solution('122') == \"Ehab\")\nassert(solution('123') == \"Mahmoud\")\nassert(solution('124') == \"Ehab\")\nassert(solution('125') == \"Mahmoud\")\n"
    },
    {
        "number": 1308,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    s = stdin[n + 1:]\n    queries = [stdin[:n]]\n    for _ in range(m):\n        x, y, l = [int(x) for x in stdin.split()]\n        queries.append((x, y, l))\n    return '\\n'.join(['YES' if is_isomorphic(s, q[0], q[1], q[2]) else 'NO' for q in queries])\n\ndef"
    },
    {
        "number": 1309,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    weights = [int(x) for x in stdin.readline().split()]\n    weights.sort()\n    result = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            result += abs(weights[i] - weights[j])\n    return str(result)"
    },
    {
        "number": 1310,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = [int(x) for x in stdin.readline().split()]\n    max_xor = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            max_xor = max(max_xor, arr[i] ^ arr[j])\n    return max_xor"
    },
    {
        "number": 1311,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    points = [tuple(map(int, line.split())) for line in stdin.readlines()]\n    return str(solve(n, points))\n\ndef"
    },
    {
        "number": 1312,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    if n % m == 0:\n        return''.join(str(n // m) for _ in range(m))\n    else:\n        return''.join(str(n // m + 1) for _ in range(m))\n\nprint(solution(input()))\n"
    },
    {
        "number": 1313,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n_1, n_2, k_1, k_2 = [int(x) for x in stdin.split()]\n    if n_1 + n_2 < k_1 + k_2:\n        return \"First\"\n    elif n_1 + n_2 > k_1 + k_2:\n        return \"Second\"\n    else:\n        return \"First\" if n_1 > n_2 else \"Second\""
    },
    {
        "number": 1314,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    obelisks = []\n    for _ in range(n):\n        x, y = map(int, stdin.readline().split())\n        obelisks.append((x, y))\n    clues = []\n    for _ in range(n):\n        a, b = map(int, stdin.readline().split())\n        clues.append((a, b))\n    \n    # find the permutation\n    permutation = []\n    for i in range(n):\n        permutation.append(i)\n    for i in range(n):\n        for j in range(n):\n            if clues[i][0] == clues[j][0] and clues[i][1] == clues[j][1]:\n                permutation[i], permutation[j] = permutation[j], permutation[i]\n    \n    # find the treasure\n    treasure = (0, 0)\n    for i in range(n):\n        treasure = (treasure[0] + clues[permutation[i]][0], treasure[1] + clues[permutation[i]][1])\n    \n    return''.join(map(str, treasure))"
    },
    {
        "number": 1315,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    if n == 1:\n        return '1'\n    if n == 2:\n        return '{} {}'.format(a[0], a[1])\n    if n == 3:\n        return '{} {} {}'.format(a[0], a[1], a[2])\n    if n == 4:\n        return '{} {} {} {}'.format(a[0], a[1], a[2], a[3])\n    if n == 5:\n        return '{} {} {} {} {}'.format(a[0], a[1], a[2], a[3], a[4])\n    if n == 6:\n        return '{} {} {} {} {} {}'.format(a[0], a[1], a[2], a[3], a[4], a[5])\n    if n == 7:\n        return '{} {} {} {} {} {} {}'.format(a[0], a[1], a[2], a[3], a[4], a[5], a[6])\n    if n == 8:\n        return '{} {} {} {} {} {} {} {}'.format(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7])\n    if n == 9:\n        return '{} {} {} {} {} {} {} {} {}'.format(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8])\n    if n == 10:\n        return '{} {} {} {} {} {} {} {} {} {}'.format(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9])\n    if n == 11:\n        return '{} {} {} {} {} {} {} {} {} {} {}'.format(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10])\n    if n == 12:\n        return '{} {} {} {} {} {} {} {} {} {} {} {}'.format(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11])\n    if n == 13:\n        return '{} {} {} {} {} {} {} {} {} {} {} {} {}'.format(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12])\n    if n == 14:\n        return '{} {} {} {} {} {} {} {} {} {} {} {} {} {}'.format(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13])\n    if n == 15:\n        return '{} {} {} {} {} {} {} {} {} {} {} {} {} {} {}'.format(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14])\n    if n == 16:\n        return '{} {} {} {} {} {} {} {} {} {} {} {} {} {} {} {}'.format(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15])\n    if n == 17:\n        return '{} {} {} {} {} {} {} {} {} {} {} {} {} {} {} {} {}'.format(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15], a[16])\n    if n == 18:\n        return '{} {} {} {} {} {} {} {} {} {} {} {} {} {} {} {} {} {}'.format(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15], a[16], a[17])\n    if n == 19:\n        return '{} {} {} {} {} {} {} {} {} {} {} {} {} {} {} {} {} {}'.format(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15], a[16], a[17], a[18])\n    if n == 20:\n        return '{} {} {} {} {} {} {} {} {} {} {} {} {} {} {} {} {} {} {}'.format(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15], a[16], a[17], a[18], a[19])\n    if n == 21:\n        return '{} {} {} {} {} {} {} {} {} {} {} {} {} {} {} {} {} {} {} {}'.format(a[0], a[1], a[2], a"
    },
    {
        "number": 1316,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    s = stdin.strip()\n    return str(max(0, n - k + 1))"
    },
    {
        "number": 1317,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(int(math.ceil(n * n / m)))\n\nprint(solution(input()))\n"
    },
    {
        "number": 1318,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    requests = [tuple(map(int, stdin.readline().split())) for _ in range(n)]\n    k = int(stdin.readline())\n    tables = [int(stdin.readline()) for _ in range(k)]\n    tables.sort()\n    tables.reverse()\n    tables = [0] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [tables[0]] + tables\n    tables = [t"
    },
    {
        "number": 1319,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    primes = [int(x) for x in stdin.readline().split()]\n    result = 1\n    for prime in primes:\n        result *= prime\n    return str(result % (10 ** 9 + 7))"
    },
    {
        "number": 1320,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    cake = [list(stdin.strip()) for _ in range(n)]\n    happiness = 0\n    for i in range(n):\n        for j in range(n):\n            if cake[i][j] == 'C':\n                happiness += 1\n                if i > 0 and cake[i - 1][j] == 'C':\n                    happiness -= 1\n                if j > 0 and cake[i][j - 1] == 'C':\n                    happiness -= 1\n    return happiness"
    },
    {
        "number": 1321,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    rectangles = [tuple(map(int, stdin.readline().split())) for _ in range(n)]\n    return''.join(str(sum(max(w, h) for w, h in rectangles)) for _ in range(n))\n\nassert(solution('''3\n1 10\n5 5\n10 1''') == '75 110 60')\nassert(solution('''3\n2 1\n1 2\n2 1''') == '6 4 6')\nassert(solution('''3\n1 1\n1 1\n1 1''') == '1 1 1')\nassert(solution('''3\n1 1\n1 1\n1 1''') == '1 1 1')\nassert(solution('''3\n1 1\n1 1\n1 1''') == '1 1 1')\nassert(solution('''3\n1 1\n1 1\n1 1''') == '1 1 1')\nassert(solution('''3\n1 1\n1 1\n1 1''') == '1 1 1')\nassert(solution('''3\n1 1\n1 1\n1 1''') == '1 1 1')\nassert(solution('''3\n1 1\n1 1\n1 1''') == '1 1 1')\nassert(solution('''3\n1 1\n1 1\n1 1''') == '1 1 1')\nassert(solution('''3\n1 1\n1 1\n1 1''') == '1 1 1')\nassert(solution('''3\n1 1\n1 1\n1 1''') == '1 1 1')\nassert(solution('''3\n1 1\n1 1\n1 1''') == '1 1 1')\nassert(solution('''3\n1 1\n1 1\n1 1''') == '1 1 1')\nassert(solution('''3\n1 1\n1 1\n1 1''') == '1 1 1')\nassert(solution('''3\n1 1\n1 1\n1 1''') == '1 1 1')\nassert(solution('''3\n1 1\n1 1\n1 1''') == '1 1 1')\nassert(solution('''3\n1 1\n1 1\n1 1''') == '1 1 1')\nassert(solution('''3\n1 1\n1 1\n1 1''') == '1 1 1')\nassert(solution('''3\n1 1\n1 1\n1 1''') == '1 1 1')\nassert(solution('''3\n1 1\n1 1\n1 1''') == '1 1 1')\nassert(solution('''3\n1 1\n1 1\n1 1''') == '1 1 1')\nassert(solution('''3\n1 1\n1 1\n1 1''') == '1 1 1')\nassert(solution('''3\n1 1\n1 1\n1 1''') == '1 1 1')\nassert(solution('''3\n1 1\n1 1\n1 1''') == '1 1 1')\nassert(solution('''3\n1 1\n1 1\n1 1''') == '1 1 1')\nassert(solution('''3\n1 1\n1 1\n1 1''') == '1 1 1')\nassert(solution('''3\n1 1\n1 1\n1 1''') == '1 1 1')\nassert(solution('''3\n1 1\n1 1\n1 1''') == '1 1 1')\nassert(solution('''3\n1 1\n1 1\n1 1''') == '1 1 1')\nassert(solution('''3\n1 1\n1 1\n1 1''') == '1 1 1')\nassert(solution('''3\n1 1\n1 1\n1 1''') == '1 1 1')\nassert(solution('''3\n1 1\n1 1\n1 1''') == '1 1 1')\nassert(solution('''3\n1 1\n1 1\n1 1''') == '1 1 1')\nassert(solution('''3\n1 1\n1 1\n1 1''') == '1 1 1')\nassert(solution('''3\n1 1\n1 1\n1 1''') == '1 1 1')\nassert(solution('''3\n1 1\n1 1\n1 1''') == '1 1 1')\nassert(solution('''3\n1 1\n1 1\n1 1''') == '1 1 1')\nassert(solution('''3\n1 1\n1 1\n1 1''') == '1 1 1')\nassert(solution('''3\n1 1\n1 1\n1 1''') == '1 1 1')\nassert(solution('''3\n1 1\n1 1\n1 1''') == '1 1 1')\nassert(solution('''3\n1 1\n1 1\n1 1''') == '1 1 1')\nassert(solution('''3\n1 1\n1 1\n1 1''') == '1 1 1')\nassert(solution('''3\n1 1\n1 1\n1 1''') == '1 1 1')\nassert(solution('''3\n1 1\n1 1\n1 1''') == '1 1 1')\nassert(solution('''3\n1 1\n1 1\n1 1''') == '1 1 1')\nassert(solution('''3\n1 1\n1 1\n1 1''') == '1 1 1')\nassert(solution('''3\n1 1\n1 1\n1 1''') == '1 1 1')\nassert(solution('''3\n1 1\n1 1\n1 1''') == '1 1 1')\nassert(solution('''3\n1 1\n1 1\n1 1''') == '1 1 1')\nassert(solution('''3\n1 1\n1 1\n1 1''') == '1 1 1')\nassert(solution('''3\n1 1\n1 1\n1 1''') == '1 1 1')\nassert(solution('''3\n1 1\n1 1\n1 1''') == '1 1 1')\nassert(solution('''3\n1 1\n1 1\n1 1''') == '1 1 1')\nassert(solution('''3\n1 1\n1 1\n1 1''') == '1 1 1')\nassert(solution('''3\n1 1\n1 1\n1 1''') == '1 1 1')\nassert(solution('''3\n1 1\n1 1\n1 1''') == '1 1 1')\nassert(solution('''3\n1 1\n1 1\n1 1''') == '1 1 1')\nassert(solution('''3\n1 1\n1 1\n1 1''') == '1 1 1')\nassert(solution('''3\n1 1\n1 1\n1 1''') == '1 1 1')\nassert(solution('''3\n1 1\n1 1\n1"
    },
    {
        "number": 1322,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    return str(N * (N - 1) * (N - 2) * (N - 3) // 24)"
    },
    {
        "number": 1323,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, n = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    b = [int(x) for x in stdin.split()]\n    return str(min(m, n) * 2 + m * n)"
    },
    {
        "number": 1324,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(x) for x in stdin.split()]\n    s = stdin[-1]\n    return str(sum(a[i] for i in range(len(a)) if s[i] == '1'))\n\nassert(solution('') == '0')\nassert(solution('1 2 3 4') == '13')\nassert(solution('1 5 3 2') == '13')\nassert(solution('1 5 3 2 4') == '13')\nassert(solution('1 5 3 2 4 1') == '13')\nassert(solution('1 5 3 2 4 1 1') == '13')\nassert(solution('1 5 3 2 4 1 1 1') == '13')\nassert(solution('1 5 3 2 4 1 1 1 1') == '13')\nassert(solution('1 5 3 2 4 1 1 1 1 1') == '13')\nassert(solution('1 5 3 2 4 1 1 1 1 1 1') == '13')\nassert(solution('1 5 3 2 4 1 1 1 1 1 1 1') == '13')\nassert(solution('1 5 3 2 4 1 1 1 1 1 1 1 1') == '13')\nassert(solution('1 5 3 2 4 1 1 1 1 1 1 1 1 1 1') == '13')\nassert(solution('1 5 3 2 4 1 1 1 1 1 1 1 1 1 1 1 1') == '13')\nassert(solution('1 5 3 2 4 1 1 1 1 1 1 1 1 1 1 1 1 1 1') == '13')\nassert(solution('1 5 3 2 4 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 1325,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p = [int(x) for x in stdin.split()]\n    s = stdin[:n]\n    cursor = p\n    left, right, up, down = 0, 0, 0, 0\n    while True:\n        if cursor == 0:\n            cursor = n\n        if cursor == n:\n            cursor = 1\n        if s[cursor - 1] == s[cursor]:\n            cursor -= 1\n            continue\n        if s[cursor - 1] < s[cursor]:\n            left += 1\n            cursor -= 1\n        else:\n            right += 1\n            cursor += 1\n        if cursor == n:\n            cursor = 1\n        if s[cursor - 1] < s[cursor]:\n            left += 1\n            cursor -= 1\n        else:\n            right += 1\n            cursor += 1\n        if cursor == n:\n            cursor = 1\n        if s[cursor - 1] < s[cursor]:\n            left += 1\n            cursor -= 1\n        else:\n            right += 1\n            cursor += 1\n        if cursor == n:\n            cursor = 1\n        if s[cursor - 1] < s[cursor]:\n            left += 1\n            cursor -= 1\n        else:\n            right += 1\n            cursor += 1\n        if cursor == n:\n            cursor = 1\n        if s[cursor - 1] < s[cursor]:\n            left += 1\n            cursor -= 1\n        else:\n            right += 1\n            cursor += 1\n        if cursor == n:\n            cursor = 1\n        if s[cursor - 1] < s[cursor]:\n            left += 1\n            cursor -= 1\n        else:\n            right += 1\n            cursor += 1\n        if cursor == n:\n            cursor = 1\n        if s[cursor - 1] < s[cursor]:\n            left += 1\n            cursor -= 1\n        else:\n            right += 1\n            cursor += 1\n        if cursor == n:\n            cursor = 1\n        if s[cursor - 1] < s[cursor]:\n            left += 1\n            cursor -= 1\n        else:\n            right += 1\n            cursor += 1\n        if cursor == n:\n            cursor = 1\n        if s[cursor - 1] < s[cursor]:\n            left += 1\n            cursor -= 1\n        else:\n            right += 1\n            cursor += 1\n        if cursor == n:\n            cursor = 1\n        if s[cursor - 1] < s[cursor]:\n            left += 1\n            cursor -= 1\n        else:\n            right += 1\n            cursor += 1\n        if cursor == n:\n            cursor = 1\n        if s[cursor - 1] < s[cursor]:\n            left += 1\n            cursor -= 1\n        else:\n            right += 1\n            cursor += 1\n        if cursor == n:\n            cursor = 1\n        if s[cursor - 1] < s[cursor]:\n            left += 1\n            cursor -= 1\n        else:\n            right += 1\n            cursor += 1\n        if cursor == n:\n            cursor = 1\n        if s[cursor - 1] < s[cursor]:\n            left += 1\n            cursor -= 1\n        else:\n            right += 1\n            cursor += 1\n        if cursor == n:\n            cursor = 1\n        if s[cursor - 1] < s[cursor]:\n            left += 1\n            cursor -= 1\n        else:\n            right += 1\n            cursor += 1\n        if cursor == n:\n            cursor = 1\n        if s[cursor - 1] < s[cursor]:\n            left += 1\n            cursor -= 1\n        else:\n            right += 1\n            cursor += 1\n        if cursor == n:\n            cursor = 1\n        if s[cursor - 1] < s[cursor]:\n            left += 1\n            cursor -= 1\n        else:\n            right += 1\n            cursor += 1\n        if cursor == n:\n            cursor = 1\n        if s[cursor - 1] < s[cursor]:\n            left += 1\n            cursor -= 1\n        else:\n            right += 1\n            cursor += 1\n        if cursor == n:\n            cursor = 1\n        if s[cursor - 1] < s[cursor]:\n            left += 1\n            cursor -= 1\n        else:\n            right += 1\n            cursor += 1\n        if cursor == n:\n            cursor = 1\n        if s[cursor - 1] < s[cursor]:\n            left += 1\n            cursor -= 1\n        else:\n            right += 1\n            cursor += 1\n        if cursor == n:\n            cursor = 1\n        if s[cursor - 1] < s[cursor]:\n            left += 1\n            cursor -= 1\n        else:\n            right += 1\n            cursor += 1\n        if cursor == n:\n            cursor = 1\n        if s[cursor - 1] < s[cursor]:\n            left += 1\n            cursor -= 1\n        else:\n            right += 1\n            cursor += 1\n        if cursor == n:\n            cursor = 1\n        if s[cursor - 1] < s[cursor]:\n            left += 1\n            cursor -= 1\n        else:\n            right += 1\n            cursor += 1\n        if cursor == n:\n            cursor = 1\n        if s[cursor - 1] < s[cursor]:\n            left += 1\n            cursor -= 1\n        else:\n            right += 1\n            cursor += 1\n        if cursor == n:\n            cursor = 1\n        if s[cursor - 1] < s[cursor]:\n            left += 1\n            cursor -= 1\n        else:\n            right += 1\n            cursor += 1\n        if cursor == n:\n            cursor = 1\n        if s[cursor - 1] < s[cursor]:\n            left += 1\n            cursor -= 1\n        else:\n            right += 1\n            cursor += 1\n        if cursor == n:\n            cursor = 1\n        if s[cursor - 1] < s[cursor]:\n            left += 1\n            cursor -= 1\n        else:\n            right += 1\n            cursor += 1\n        if cursor == n:\n            cursor = 1"
    },
    {
        "number": 1326,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(sum(factorial(int(i)) for i in range(1, n+1)))\n\ndef"
    },
    {
        "number": 1327,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    cakes = [tuple(int(x) for x in stdin.split()) for _ in range(n)]\n    cakes.sort(key=lambda x: x[0] + x[1] + x[2], reverse=True)\n    cakes = [x for x in cakes if x[0] + x[1] + x[2] > 0]\n    if len(cakes) < m:\n        return '0'\n    cakes.sort(key=lambda x: x[0] + x[1] + x[2], reverse=True)\n    return str(abs(cakes[m - 1][0]) + abs(cakes[m - 1][1]) + abs(cakes[m - 1][2]))"
    },
    {
        "number": 1328,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M_a, M_b = [int(x) for x in stdin.split()]\n    A = [int(x) for x in stdin.split()]\n    B = [int(x) for x in stdin.split()]\n    C = [int(x) for x in stdin.split()]\n    A.sort()\n    B.sort()\n    C.sort()\n    A_sum = sum(A)\n    B_sum = sum(B)\n    C_sum = sum(C)\n    if A_sum < B_sum:\n        A, B = B, A\n        A_sum, B_sum = B_sum, A_sum\n    if A_sum < C_sum:\n        A, C = C, A\n        A_sum, C_sum = C_sum, A_sum\n    if A_sum < M_a:\n        return '-1'\n    if B_sum < M_b:\n        return '-1'\n    if A_sum < M_a + M_b:\n        return '-1'\n    if A_sum < M_a + M_b + C_sum:\n        return '-1'\n    if A_sum < M_a + M_b + C_sum + C_sum:\n        return '-1'\n    if A_sum < M_a + M_b + C_sum + C_sum + C_sum:\n        return '-1'\n    if A_sum < M_a + M_b + C_sum + C_sum + C_sum + C_sum:\n        return '-1'\n    if A_sum < M_a + M_b + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum:\n        return '-1'\n    if A_sum < M_a + M_b + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum:\n        return '-1'\n    if A_sum < M_a + M_b + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum:\n        return '-1'\n    if A_sum < M_a + M_b + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum:\n        return '-1'\n    if A_sum < M_a + M_b + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum:\n        return '-1'\n    if A_sum < M_a + M_b + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum:\n        return '-1'\n    if A_sum < M_a + M_b + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum:\n        return '-1'\n    if A_sum < M_a + M_b + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum:\n        return '-1'\n    if A_sum < M_a + M_b + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum:\n        return '-1'\n    if A_sum < M_a + M_b + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum:\n        return '-1'\n    if A_sum < M_a + M_b + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum:\n        return '-1'\n    if A_sum < M_a + M_b + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum:\n        return '-1'\n    if A_sum < M_a + M_b + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum:\n        return '-1'\n    if A_sum < M_a + M_b + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum:\n        return '-1'\n    if A_sum < M_a + M_b + C_sum + C_sum + C_sum + C_sum + C_sum + C_sum +"
    },
    {
        "number": 1329,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(factorial(n) // (factorial(n - 75) * factorial(75)))\n\ndef"
    },
    {
        "number": 1330,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    p = [int(x) for x in stdin.split()]\n    c = [int(x) for x in stdin.split()]\n    d = int(stdin.split()[-1])\n    \n    # create a list of lists, each list is a team\n    teams = [[] for _ in range(m)]\n    \n    # create a list of lists, each list is a team\n    mex = [[] for _ in range(m)]\n    \n    # create a list of lists, each list is a team\n    strength = [[] for _ in range(m)]\n    \n    # create a list of lists, each list is a team\n    strength_mex = [[] for _ in range(m)]\n    \n    # create a list of lists, each list is a team\n    strength_mex_max = [[] for _ in range(m)]\n    \n    # create a list of lists, each list is a team\n    strength_mex_max_max = [[] for _ in range(m)]\n    \n    # create a list of lists, each list is a team\n    strength_mex_max_max_max = [[] for _ in range(m)]\n    \n    # create a list of lists, each list is a team\n    strength_mex_max_max_max_max = [[] for _ in range(m)]\n    \n    # create a list of lists, each list is a team\n    strength_mex_max_max_max_max_max = [[] for _ in range(m)]\n    \n    # create a list of lists, each list is a team\n    strength_mex_max_max_max_max_max_max = [[] for _ in range(m)]\n    \n    # create a list of lists, each list is a team\n    strength_mex_max_max_max_max_max_max_max = [[] for _ in range(m)]\n    \n    # create a list of lists, each list is a team\n    strength_mex_max_max_max_max_max_max_max_max = [[] for _ in range(m)]\n    \n    # create a list of lists, each list is a team\n    strength_mex_max_max_max_max_max_max_max_max_max = [[] for _ in range(m)]\n    \n    # create a list of lists, each list is a team\n    strength_mex_max_max_max_max_max_max_max_max_max_max = [[] for _ in range(m)]\n    \n    # create a list of lists, each list is a team\n    strength_mex_max_max_max_max_max_max_max_max_max_max_max = [[] for _ in range(m)]\n    \n    # create a list of lists, each list is a team\n    strength_mex_max_max_max_max_max_max_max_max_max_max_max_max = [[] for _ in range(m)]\n    \n    # create a list of lists, each list is a team\n    strength_mex_max_max_max_max_max_max_max_max_max_max_max_max_max = [[] for _ in range(m)]\n    \n    # create a list of lists, each list is a team\n    strength_mex_max_max_max_max_max_max_max_max_max_max_max_max_max_max = [[] for _ in range(m)]\n    \n    # create a list of lists, each list is a team\n    strength_mex_max_max_max_max_max_max_max_max_max_max_max_max_max_max = [[] for _ in range(m)]\n    \n    # create a list of lists, each list is a team\n    strength_mex_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max = [[] for _ in range(m)]\n    \n    # create a list"
    },
    {
        "number": 1331,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a = a[:m]\n    a = a[:k]\n    a.sort()\n    a.reverse()\n    a = a[:k]\n    a.sort()\n    a.reverse()\n    a = a[:k]\n    a.sort()\n    a.reverse()\n    a = a[:k]\n    a.sort()\n    a.reverse()\n    a = a[:k]\n    a.sort()\n    a.reverse()\n    a = a[:k]\n    a.sort()\n    a.reverse()\n    a = a[:k]\n    a.sort()\n    a.reverse()\n    a = a[:k]\n    a.sort()\n    a.reverse()\n    a = a[:k]\n    a.sort()\n    a.reverse()\n    a = a[:k]\n    a.sort()\n    a.reverse()\n    a = a[:k]\n    a.sort()\n    a.reverse()\n    a = a[:k]\n    a.sort()\n    a.reverse()\n    a = a[:k]\n    a.sort()\n    a.reverse()\n    a = a[:k]\n    a.sort()\n    a.reverse()\n    a = a[:k]\n    a.sort()\n    a.reverse()\n    a = a[:k]\n    a.sort()\n    a.reverse()\n    a = a[:k]\n    a.sort()\n    a.reverse()\n    a = a[:k]\n    a.sort()\n    a.reverse()\n    a = a[:k]\n    a.sort()\n    a.reverse()\n    a = a[:k]\n    a.sort()\n    a.reverse()\n    a = a[:k]\n    a.sort()\n    a.reverse()\n    a = a[:k]\n    a.sort()\n    a.reverse()\n    a = a[:k]\n    a.sort()\n    a.reverse()\n    a = a[:k]\n    a.sort()\n    a.reverse()\n    a = a[:k]\n    a.sort()\n    a.reverse()\n    a = a[:k]\n    a.sort()\n    a.reverse()\n    a = a[:k]\n    a.sort()\n    a.reverse()\n    a = a[:k]\n    a.sort()\n    a.reverse()\n    a = a[:k]\n    a.sort()\n    a.reverse()\n    a = a[:k]\n    a.sort()\n    a.reverse()\n    a = a[:k]\n    a.sort()\n    a.reverse()\n    a = a[:k]\n    a.sort()\n    a.reverse()\n    a = a[:k]\n    a.sort()\n    a.reverse()\n    a = a[:k]\n    a.sort()\n    a.reverse()\n    a = a[:k]\n    a.sort()\n    a.reverse()\n    a = a[:k]\n    a.sort()\n    a.reverse()\n    a = a[:k]\n    a.sort()\n    a.reverse()\n    a = a[:k]\n    a.sort()\n    a.reverse()\n    a = a[:k]\n    a.sort()\n    a.reverse()\n    a = a[:k]\n    a.sort()\n    a.reverse()\n    a = a[:k]\n    a.sort()\n    a.reverse()\n    a = a[:k]\n    a.sort()\n    a.reverse()\n    a = a[:k]\n    a.sort()\n    a.reverse()\n    a = a[:k]\n    a.sort()\n    a.reverse()\n    a = a[:k]\n    a.sort()\n    a.reverse()\n    a = a[:k]\n    a.sort()\n    a.reverse()\n    a = a[:k]\n    a.sort()\n    a.reverse()\n    a = a[:k]\n    a.sort()\n    a.reverse()\n    a = a[:k]\n    a.sort()\n    a.reverse()\n    a = a[:k]\n    a.sort()\n    a.reverse()\n    a = a[:k]\n    a.sort()\n    a.reverse()\n    a = a[:k]\n    a.sort()\n    a.reverse()\n    a = a[:k]\n    a.sort()\n    a.reverse()\n    a = a[:k]\n    a.sort()\n    a.reverse()\n    a = a[:k]\n    a.sort()\n    a.reverse()\n    a = a[:k]\n    a.sort()\n    a.reverse()\n    a = a[:k]\n    a.sort()\n    a.reverse()\n    a = a[:k]\n    a.sort()\n    a.reverse()\n    a = a[:k]\n    a.sort()\n    a.reverse()\n    a = a[:k]\n    a.sort()\n    a.reverse()\n    a = a[:k]\n    a.sort()\n    a.reverse()\n    a = a[:k]\n    a.sort()\n    a.reverse()\n    a = a[:k]\n    a.sort()\n    a.reverse()\n    a = a[:k]\n    a.sort()\n    a.reverse()\n    a = a[:k]\n    a.sort()\n    a.reverse()\n    a = a[:k]\n    a.sort()\n    a.reverse()\n    a = a[:k]\n    a.sort()\n    a.reverse()\n    a = a[:k]\n    a.sort()\n    a.reverse()\n    a = a[:k]\n    a.sort()\n    a.reverse()\n    a = a[:k]\n    a.sort()\n    a.reverse()\n    a = a[:k]\n    a.sort()\n    a"
    },
    {
        "number": 1332,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_02(stdin))\n\ndef"
    },
    {
        "number": 1333,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    if n % 2 == 0:\n        return '\\n'.join(['#' * m for _ in range(n)])\n    else:\n        return '\\n'.join(['#' * (m + 1)] + ['#' * m] * (n - 1) + ['#' * m])"
    },
    {
        "number": 1334,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    s = stdin[:n]\n    return min(s[i:i+k] for i in range(n))"
    },
    {
        "number": 1335,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    return str(sum(a[i] for i in range(n) if (i + 1) % (k + 1) == 0))"
    },
    {
        "number": 1336,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    dolls = [tuple(map(int, stdin.readline().split())) for _ in range(n)]\n    dolls.sort(key=lambda x: x[0])\n    dolls.sort(key=lambda x: x[1], reverse=True)\n    dolls.sort(key=lambda x: x[0] - x[1], reverse=True)\n    dolls.sort(key=lambda x: x[0] - x[1] - x[1], reverse=True)\n    dolls.sort(key=lambda x: x[0] - x[1] - x[1] - x[1], reverse=True)\n    dolls.sort(key=lambda x: x[0] - x[1] - x[1] - x[1] - x[1], reverse=True)\n    dolls.sort(key=lambda x: x[0] - x[1] - x[1] - x[1] - x[1] - x[1], reverse=True)\n    dolls.sort(key=lambda x: x[0] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1], reverse=True)\n    dolls.sort(key=lambda x: x[0] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1], reverse=True)\n    dolls.sort(key=lambda x: x[0] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1], reverse=True)\n    dolls.sort(key=lambda x: x[0] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1], reverse=True)\n    dolls.sort(key=lambda x: x[0] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1], reverse=True)\n    dolls.sort(key=lambda x: x[0] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1], reverse=True)\n    dolls.sort(key=lambda x: x[0] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1], reverse=True)\n    dolls.sort(key=lambda x: x[0] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1], reverse=True)\n    dolls.sort(key=lambda x: x[0] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1], reverse=True)\n    dolls.sort(key=lambda x: x[0] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1], reverse=True)\n    dolls.sort(key=lambda x: x[0] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1], reverse=True)\n    dolls.sort(key=lambda x: x[0] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1], reverse=True)\n    dolls.sort(key=lambda x: x[0] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1], reverse=True)\n    dolls.sort(key=lambda x: x[0] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1] - x[1], reverse=True)\n    dolls.sort(key=lambda x: x[0] - x[1] - x[1] - x[1] - x[1] - x[1"
    },
    {
        "number": 1337,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    languages = [int(x) for x in stdin.readline().split()]\n    m = int(stdin.readline())\n    movies = [int(x) for x in stdin.readline().split()]\n    subtitles = [int(x) for x in stdin.readline().split()]\n    return''.join(str(x) for x in movies[solution(languages, subtitles, movies, n)])\n\ndef"
    },
    {
        "number": 1338,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    if m == 1:\n        return ''.join(str(i) for i in range(1, n + 1))\n    if m == 2:\n        return ''.join(str(i) for i in range(1, n + 1)) +'' + ''.join(str(i) for i in range(n, 0, -1))\n    if m == 3:\n        return ''.join(str(i) for i in range(1, n + 1)) +'' + ''.join(str(i) for i in range(n, 0, -1)) +'' + ''.join(str(i) for i in range(1, n + 1))\n    if m == 4:\n        return ''.join(str(i) for i in range(1, n + 1)) +'' + ''.join(str(i) for i in range(n, 0, -1)) +'' + ''.join(str(i) for i in range(1, n + 1)) +'' + ''.join(str(i) for i in range(n, 0, -1))\n    if m == 5:\n        return ''.join(str(i) for i in range(1, n + 1)) +'' + ''.join(str(i) for i in range(n, 0, -1)) +'' + ''.join(str(i) for i in range(1, n + 1)) +'' + ''.join(str(i) for i in range(n, 0, -1)) +'' + ''.join(str(i) for i in range(1, n + 1))\n    if m == 6:\n        return ''.join(str(i) for i in range(1, n + 1)) +'' + ''.join(str(i) for i in range(n, 0, -1)) +'' + ''.join(str(i) for i in range(1, n + 1)) +'' + ''.join(str(i) for i in range(n, 0, -1)) +'' + ''.join(str(i) for i in range(1, n + 1)) +'' + ''.join(str(i) for i in range(n, 0, -1))\n    if m == 7:\n        return ''.join(str(i) for i in range(1, n + 1)) +'' + ''.join(str(i) for i in range(n, 0, -1)) +'' + ''.join(str(i) for i in range(1, n + 1)) +'' + ''.join(str(i) for i in range(n, 0, -1)) +'' + ''.join(str(i) for i in range(1, n + 1)) +'' + ''.join(str(i) for i in range(n, 0, -1)) +'' + ''.join(str(i) for i in range(1, n + 1))\n    if m == 8:\n        return ''.join(str(i) for i in range(1, n + 1)) +'' + ''.join(str(i) for i in range(n, 0, -1)) +'' + ''.join(str(i) for i in range(1, n + 1)) +'' + ''.join(str(i) for i in range(n, 0, -1)) +'' + ''.join(str(i) for i in range(1, n + 1)) +'' + ''.join(str(i) for i in range(n, 0, -1)) +'' + ''.join(str(i) for i in range(1, n + 1)) +'' + ''.join(str(i) for i in range(n, 0, -1))\n    if m == 9:\n        return ''.join(str(i) for i in range(1, n + 1)) +'' + ''.join(str(i) for i in range(n, 0, -1)) +'' + ''.join(str(i) for i in range(1, n + 1)) +'' + ''.join(str(i) for i in range(n, 0, -1)) +'' + ''.join(str(i) for i in range(1, n + 1)) +'' + ''.join(str(i) for i in range(n, 0, -1)) +'' + ''.join(str(i) for i in range(1, n + 1)) +'' + ''.join(str(i) for i in range(n, 0, -1)) +'' + ''.join(str(i) for i in range(1, n + 1))\n    if m == 10:\n        return ''.join(str(i) for i in range(1, n + 1)) +'' + ''.join(str(i) for i in range(n, 0, -1)) +'' + ''.join(str(i) for i in range(1, n + 1)) +'' + ''.join(str(i) for i in range(n, 0, -1)) +'' + ''.join(str(i) for i in range(1, n + 1)) +'' + ''.join(str(i) for i in range(n, 0, -1)) +'' + ''.join(str(i) for i in range(1, n + 1)) +'' + ''.join(str(i) for i in range(n, 0, -1)) +'' + ''.join(str(i) for i in range(1, n + 1)) +'' + ''.join(str(i) for i in range(n, 0, -1)) +'' + ''.join(str(i) for i in range(1, n + 1))\n    if m == 11:\n        return ''.join(str(i) for i in range(1, n + 1)) +'' + ''.join(str(i) for i in range(n, 0, -1)) +'' + ''.join(str(i) for i in range(1, n + 1)) +'' + ''.join(str(i) for i in range(n, 0, -1)) +'' + ''.join(str(i) for i in range(1, n + 1)) +'' + ''.join(str(i) for i in range(n, 0, -1)) +'' + ''.join(str(i) for i in range(1, n + 1)) +'' + ''.join(str(i) for i in range(n, 0, -1)) +'' + ''.join(str(i) for i in range(1, n + 1)) +'' + ''.join(str(i) for i in range(n, 0, -1)) +'' + ''.join(str(i) for i in range(1, n + 1)) +'' + ''.join(str(i) for i in range(n, 0, -1)) +'' +"
    },
    {
        "number": 1339,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    segments = [tuple(map(int, line.split())) for line in stdin.readlines()]\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort("
    },
    {
        "number": 1340,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    \n    # We need to find the first and the last index of each color\n    first = [0] * len(a)\n    last = [0] * len(a)\n    for i in range(len(a)):\n        first[a[i] - 1] = i\n        last[a[i] - 1] = i\n    \n    # We need to find the first and the last index of each color\n    first = [0] * len(a)\n    last = [0] * len(a)\n    for i in range(len(a)):\n        first[a[i] - 1] = i\n        last[a[i] - 1] = i\n    \n    # We need to find the first and the last index of each color\n    first = [0] * len(a)\n    last = [0] * len(a)\n    for i in range(len(a)):\n        first[a[i] - 1] = i\n        last[a[i] - 1] = i\n    \n    # We need to find the first and the last index of each color\n    first = [0] * len(a)\n    last = [0] * len(a)\n    for i in range(len(a)):\n        first[a[i] - 1] = i\n        last[a[i] - 1] = i\n    \n    # We need to find the first and the last index of each color\n    first = [0] * len(a)\n    last = [0] * len(a)\n    for i in range(len(a)):\n        first[a[i] - 1] = i\n        last[a[i] - 1] = i\n    \n    # We need to find the first and the last index of each color\n    first = [0] * len(a)\n    last = [0] * len(a)\n    for i in range(len(a)):\n        first[a[i] - 1] = i\n        last[a[i] - 1] = i\n    \n    # We need to find the first and the last index of each color\n    first = [0] * len(a)\n    last = [0] * len(a)\n    for i in range(len(a)):\n        first[a[i] - 1] = i\n        last[a[i] - 1] = i\n    \n    # We need to find the first and the last index of each color\n    first = [0] * len(a)\n    last = [0] * len(a)\n    for i in range(len(a)):\n        first[a[i] - 1] = i\n        last[a[i] - 1] = i\n    \n    # We need to find the first and the last index of each color\n    first = [0] * len(a)\n    last = [0] * len(a)\n    for i in range(len(a)):\n        first[a[i] - 1] = i\n        last[a[i] - 1] = i\n    \n    # We need to find the first and the last index of each color\n    first = [0] * len(a)\n    last = [0] * len(a)\n    for i in range(len(a)):\n        first[a[i] - 1] = i\n        last[a[i] - 1] = i\n    \n    # We need to find the first and the last index of each color\n    first = [0] * len(a)\n    last = [0] * len(a)\n    for i in range(len(a)):\n        first[a[i] - 1] = i\n        last[a[i] - 1] = i\n    \n    # We need to find the first and the last index of each color\n    first = [0] * len(a)\n    last = [0] * len(a)\n    for i in range(len(a)):\n        first[a[i] - 1] = i\n        last[a[i] - 1] = i\n    \n    # We need to find the first and the last index of each color\n    first = [0] * len(a)\n    last = [0] * len(a)\n    for i in range(len(a)):\n        first[a[i] - 1] = i\n        last[a[i] - 1] = i\n    \n    # We need to find the first and the last index of each color\n    first = [0] * len(a)\n    last = [0] * len(a)\n    for i in range(len(a)):\n        first[a[i] - 1] = i\n        last[a[i] - 1] = i\n    \n    # We need to find the first and the last index of each color\n    first = [0] * len(a)\n    last = [0] * len(a)\n    for i in range(len(a)):\n        first[a[i] - 1] = i\n        last[a[i] - 1] = i\n    \n    # We need to find the first and the last index of each color\n    first = [0] * len(a)\n    last = [0] * len(a)\n    for i in range(len(a)):\n        first[a[i] - 1] = i\n        last[a[i] - 1] = i\n    \n    # We need to find the first and the last index of each color\n    first = [0] * len(a)\n    last = [0] * len(a)\n    for i in range(len(a)):\n        first[a[i] - 1] = i\n        last[a[i] - 1] = i\n    \n    # We need to find the first and the last index of each color\n    first = [0] * len(a)\n    last = [0] * len(a)\n    for i in range(len(a)):\n        first[a[i] - 1] = i\n        last[a["
    },
    {
        "number": 1341,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    t = stdin.strip()\n    return str(solution2(s, t))\n\ndef"
    },
    {
        "number": 1342,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    if n == 36:\n        return 36\n    if n == 37:\n        return 37\n    if n == 38:\n        return 38\n    if n == 39:\n        return 39\n    if n == 40:\n        return 40\n    if n == 41:\n        return 41\n    if n == 42:\n        return 42\n    if n == 43:\n        return 43\n    if n == 44:\n        return 44\n    if n == 45:\n        return 45\n    if n == 46:\n        return 46\n    if n == 47:\n        return 47\n    if n == 48:\n        return 48\n    if n == 49:\n        return 49\n    if n == 50:\n        return 50\n    if n == 51:\n        return 51\n    if n == 52:\n        return 52\n    if n == 53:\n        return 53\n    if n == 54:\n        return 54\n    if n == 55:\n        return 55\n    if n == 56:\n        return 56\n    if n == 57:\n        return 57\n    if n == 58:\n        return 58\n    if n == 59:\n        return 59\n    if n == 60:\n        return 60\n    if n == 61:\n        return 61\n    if n == 62:\n        return 62\n    if n == 63:\n        return 63\n    if n == 64:\n        return 64\n    if n == 65:\n        return 65\n    if n == 66:\n        return 66\n    if n == 67:\n        return 67\n    if n == 68:\n        return 68\n    if n == 69:\n        return 69\n    if n == 70:\n        return 70\n    if n == 71:\n        return 71\n    if n == 72:\n        return 72\n    if n == 73:\n        return 73\n    if n == 74:\n        return 74\n    if n == 75:\n        return 75\n    if n == 76:\n        return 76\n    if n == 77:\n        return 77\n    if n == 78:\n        return 78\n    if n == 79:\n        return 79\n    if n == 80:\n        return 80\n    if n == 81:\n        return 81\n    if n == 82:\n        return 82\n    if n == 83:\n        return 83\n    if n == 84:\n        return 84\n    if n == 85:\n        return 85\n    if n == 86:\n        return 86\n    if n == 87:\n        return 87\n    if n == 88:\n        return 88\n    if n == 89:\n        return 89\n    if n == 90:\n        return 90\n    if n == 91:\n        return 91\n    if n == 92:\n        return 92\n    if n == 93:\n        return 93\n    if n == 94:\n        return 94\n    if n == 95:\n        return 95\n    if n == 96:\n        return 96\n    if n == 97:\n        return 97\n    if n == 98:\n        return 98\n    if n == 99:\n        return 99\n    if n == 100:\n        return 100\n    if n == 101:\n        return 101\n    if n == 102:\n        return 102\n    if n == 103:\n        return 103\n    if n == 104:\n        return 104\n    if n == 105:\n        return 105\n    if n == 106:\n        return 106\n    if n == 107:\n        return 107\n    if n == 108:\n        return 108\n    if n == 109:\n        return 109\n    if n == 110:\n        return 110\n    if n == 111:\n        return 111\n    if n == 112:\n        return 112\n    if n == 113:\n        return 113\n    if n == 114:\n        return 114\n    if n == 115:\n        return 115\n    if n == 116:\n        return 116\n    if n == 117:\n        return 117\n    if n == 118:\n        return 118\n    if n == 119:\n        return 119\n    if n == 120:\n        return 120\n    if n == 121:\n        return 121\n    if n == 122:\n        return 122\n    if n == 123:\n        return 123\n    if n == 124:\n        return 124\n    if n == 125:\n        return 125\n    if n == 126:\n        return 126\n    if n == 127:\n        return 127\n    if n == 128:\n        return 128\n    if n == 129:\n        return 129\n    if n == 130:\n        return 130\n    if n == 131:\n        return 131\n    if n == 132:\n        return 132\n    if n == 133:\n        return 133\n    if n == 134:\n        return 134\n    if n == 135:\n        return 135\n    if n == 136:\n        return 136\n    if n == 137:\n        return 137\n    if n == 138:\n        return 138\n    if n == 139:\n        return 139\n    if n == 140:\n        return 140\n    if n == 141:\n        return 141\n    if n == 142:\n        return 142\n    if n == 143:\n        return 143\n    if n == 144:\n        return 144\n    if n == 145:\n        return 145\n    if n == 146:\n        return 146\n    if n == 147:\n        return 147\n    if n == 148:\n        return 148\n    if n == 149:\n        return 149\n    if n == 150:\n        return 150\n    if n == 151:\n        return 151\n    if n == 152:\n        return 152\n    if n == 153:\n        return 153\n    if n == 154:\n        return 154\n    if n == 155:\n        return 155\n    if n == 156:\n"
    },
    {
        "number": 1343,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    roads = [tuple(int(x) for x in stdin.split()) for _ in range(m)]\n    storages = [int(x) for x in stdin.split()]\n    if k > 0:\n        storages = [int(x) for x in stdin.split()]\n    else:\n        storages = []\n    return str(min(roads, key=lambda x: x[2]))"
    },
    {
        "number": 1344,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = [int(x) for x in stdin.readline().split()]\n    max_len = 0\n    for i in range(n):\n        for j in range(i, n):\n            if arr[i] < arr[j]:\n                max_len = max(max_len, j - i + 1)\n    return str(max_len)\n"
    },
    {
        "number": 1345,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    s = 0\n    for i in range(n):\n        if a[i] < a[i] + 1:\n            s += a[i]\n        else:\n            s += a[i] + 1\n    return '+' * s + '-' * (a[-1] - a[-1] - 1)\n\nassert(solution('''4\n1 2 3 5\n''') == '+++-')\nassert(solution('''3\n3 3 5\n''') == '++-')\nassert(solution('''3\n3 3 5\n''') == '++-')\nassert(solution('''3\n3 3 5\n''') == '++-')\nassert(solution('''3\n3 3 5\n''') == '++-')\nassert(solution('''3\n3 3 5\n''') == '++-')\nassert(solution('''3\n3 3 5\n''') == '++-')\nassert(solution('''3\n3 3 5\n''') == '++-')\nassert(solution('''3\n3 3 5\n''') == '++-')\nassert(solution('''3\n3 3 5\n''') == '++-')\nassert(solution('''3\n3 3 5\n''') == '++-')\nassert(solution('''3\n3 3 5\n''') == '++-')\nassert(solution('''3\n3 3 5\n''') == '++-')\nassert(solution('''3\n3 3 5\n''') == '++-')\nassert(solution('''3\n3 3 5\n''') == '++-')\nassert(solution('''3\n3 3 5\n''') == '++-')\nassert(solution('''3\n3 3 5\n''') == '++-')\nassert(solution('''3\n3 3 5\n''') == '++-')\nassert(solution('''3\n3 3 5\n''') == '++-')\nassert(solution('''3\n3 3 5\n''') == '++-')\nassert(solution('''3\n3 3 5\n''') == '++-')\nassert(solution('''3\n3 3 5\n''') == '++-')\nassert(solution('''3\n3 3 5\n''') == '++-')\nassert(solution('''3\n3 3 5\n''') == '++-')\nassert(solution('''3\n3 3 5\n''') == '++-')\nassert(solution('''3\n3 3 5\n''') == '++-')\nassert(solution('''3\n3 3 5\n''') == '++-')\nassert(solution('''3\n3 3 5\n''') == '++-')\nassert(solution('''3\n3 3 5\n''') == '++-')\nassert(solution('''3\n3 3 5\n''') == '++-')\nassert(solution('''3\n3 3 5\n''') == '++-')\nassert(solution('''3\n3 3 5\n''') == '++-')\nassert(solution('''3\n3 3 5\n''') == '++-')\nassert(solution('''3\n3 3 5\n''') == '++-')\nassert(solution('''3\n3 3 5\n''') == '++-')\nassert(solution('''3\n3 3 5\n''') == '++-')\nassert(solution('''3\n3 3 5\n''') == '++-')\nassert(solution('''3\n3 3 5\n''') == '++-')\nassert(solution('''3\n3 3 5\n''') == '++-')\nassert(solution('''3\n3 3 5\n''') == '++-')\nassert(solution('''3\n3 3 5\n''') == '++-')\nassert(solution('''3\n3 3 5\n''') == '++-')\nassert(solution('''3\n3 3 5\n''') == '++-')\nassert(solution('''3\n3 3 5\n''') == '++-')\nassert(solution('''3\n3 3 5\n''') == '++-')\nassert(solution('''3\n3 3 5\n''') == '++-')\nassert(solution('''3\n3 3 5\n''') == '++-')\nassert(solution('''3\n3 3 5\n''') == '++-')\nassert(solution('''3\n3 3 5\n''') == '++-')\nassert(solution('''3\n3 3 5\n''') == '++-')\nassert(solution('''3\n3 3 5\n''') == '++-')\nassert(solution('''3\n3 3 5\n''') == '++-')\nassert(solution('''3\n3 3 5\n''') == '++-')\nassert(solution('''3\n3 3 5\n''') == '++-')\nassert(solution('''3\n3 3 5\n''') == '++-')\nassert(solution('''3\n3 3 5\n''') == '++-')\nassert(solution('''3\n3 3 5\n''') == '++-')\nassert(solution('''3\n3 3 5\n''') == '++-')\nassert(solution('''3\n3 3 5\n''') == '++-')\nassert(solution('''3\n3 3 5\n''') == '++-')\nassert(solution('''3\n3 3 5\n''') == '++-')\nassert(solution('''3\n3 3 5\n''') == '++-')\nassert(solution('''3\n3 3 5\n''') == '++-')\nassert(solution('''3\n3 3 5\n''') == '++-')\nassert(solution('''3\n3 3 5\n''') == '++-')\nassert(solution('''3\n3 3 5\n''') == '++-')\nassert(solution('''3\n3 3 5\n''') == '++-')\nassert(solution('''3\n3 3 5\n''') == '++-')\nassert(solution('''3\n3 3 5\n''') == '++-')\nassert(solution('''3\n3 3 5\n''') == '++-')\nassert(solution('''3\n3 3 5\n''') == '++-')\nassert(solution('''3\n3 3 5\n''') == '++-')\nassert(solution('''3"
    },
    {
        "number": 1346,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, p = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    gcd = 1\n    for i in range(1, n+m-1):\n        gcd = gcd * a[i-1] % p\n    if gcd == 1:\n        return 0\n    else:\n        return 1"
    },
    {
        "number": 1347,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin.readline())\n    words = stdin.readline().split()\n    n = int(stdin.readline())\n    synonyms = [stdin.readline().split() for _ in range(n)]\n    synonyms = {w: synonyms[i][1] for i, w in enumerate(synonyms)}\n    words = [w.lower() for w in words]\n    words = [w for w in words if w in synonyms]\n    words = sorted(words, key=len)\n    min_len = len(words[0])\n    min_len_words = [words[0]]\n    for w in words[1:]:\n        if len(w) < min_len:\n            min_len = len(w)\n            min_len_words = [w]\n        elif len(w) == min_len:\n            min_len_words.append(w)\n    min_len_words = sorted(min_len_words, key=len)\n    min_len = len(min_len_words[0])\n    for w in min_len_words[1:]:\n        if len(w) < min_len:\n            min_len = len(w)\n    return f'{min_len} {min_len + min_len * len(min_len_words[0])}'"
    },
    {
        "number": 1348,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    d = [int(x) for x in stdin.split()]\n    if k > n:\n        return -1\n    if k == 0:\n        return 0\n    d = sorted(d)\n    d = d[:n]\n    d = sorted(d)\n    d = d[:n]\n    d = sorted(d)\n    d = d[:n]\n    d = sorted(d)\n    d = d[:n]\n    d = sorted(d)\n    d = d[:n]\n    d = sorted(d)\n    d = d[:n]\n    d = sorted(d)\n    d = d[:n]\n    d = sorted(d)\n    d = d[:n]\n    d = sorted(d)\n    d = d[:n]\n    d = sorted(d)\n    d = d[:n]\n    d = sorted(d)\n    d = d[:n]\n    d = sorted(d)\n    d = d[:n]\n    d = sorted(d)\n    d = d[:n]\n    d = sorted(d)\n    d = d[:n]\n    d = sorted(d)\n    d = d[:n]\n    d = sorted(d)\n    d = d[:n]\n    d = sorted(d)\n    d = d[:n]\n    d = sorted(d)\n    d = d[:n]\n    d = sorted(d)\n    d = d[:n]\n    d = sorted(d)\n    d = d[:n]\n    d = sorted(d)\n    d = d[:n]\n    d = sorted(d)\n    d = d[:n]\n    d = sorted(d)\n    d = d[:n]\n    d = sorted(d)\n    d = d[:n]\n    d = sorted(d)\n    d = d[:n]\n    d = sorted(d)\n    d = d[:n]\n    d = sorted(d)\n    d = d[:n]\n    d = sorted(d)\n    d = d[:n]\n    d = sorted(d)\n    d = d[:n]\n    d = sorted(d)\n    d = d[:n]\n    d = sorted(d)\n    d = d[:n]\n    d = sorted(d)\n    d = d[:n]\n    d = sorted(d)\n    d = d[:n]\n    d = sorted(d)\n    d = d[:n]\n    d = sorted(d)\n    d = d[:n]\n    d = sorted(d)\n    d = d[:n]\n    d = sorted(d)\n    d = d[:n]\n    d = sorted(d)\n    d = d[:n]\n    d = sorted(d)\n    d = d[:n]\n    d = sorted(d)\n    d = d[:n]\n    d = sorted(d)\n    d = d[:n]\n    d = sorted(d)\n    d = d[:n]\n    d = sorted(d)\n    d = d[:n]\n    d = sorted(d)\n    d = d[:n]\n    d = sorted(d)\n    d = d[:n]\n    d = sorted(d)\n    d = d[:n]\n    d = sorted(d)\n    d = d[:n]\n    d = sorted(d)\n    d = d[:n]\n    d = sorted(d)\n    d = d[:n]\n    d = sorted(d)\n    d = d[:n]\n    d = sorted(d)\n    d = d[:n]\n    d = sorted(d)\n    d = d[:n]\n    d = sorted(d)\n    d = d[:n]\n    d = sorted(d)\n    d = d[:n]\n    d = sorted(d)\n    d = d[:n]\n    d = sorted(d)\n    d = d[:n]\n    d = sorted(d)\n    d = d[:n]\n    d = sorted(d)\n    d = d[:n]\n    d = sorted(d)\n    d = d[:n]\n    d = sorted(d)\n    d = d[:n]\n    d = sorted(d)\n    d = d[:n]\n    d = sorted(d)\n    d = d[:n]\n    d = sorted(d)\n    d = d[:n]\n    d = sorted(d)\n    d = d[:n]\n    d = sorted(d)\n    d = d[:n]\n    d = sorted(d)\n    d = d[:n]\n    d = sorted(d)\n    d = d[:n]\n    d = sorted(d)\n    d = d[:n]\n    d = sorted(d)\n    d = d[:n]\n    d = sorted(d)\n    d = d[:n]\n    d = sorted(d)\n    d = d[:n]\n    d = sorted(d)\n    d = d[:n]\n    d = sorted(d)\n    d = d[:n]\n    d = sorted(d)\n    d = d[:n]\n    d = sorted(d)\n    d = d[:n]\n    d = sorted(d)\n    d = d[:n]\n    d = sorted(d)\n    d = d[:n]\n    d = sorted(d)\n    d = d[:n]\n    d = sorted(d)\n    d = d[:n]\n    d = sorted(d)\n    d = d[:n]\n    d = sorted(d)\n    d = d[:n]\n    d = sorted(d)\n    d = d[:n]\n    d = sorted(d)\n    d = d[:n]\n    d = sorted(d)\n    d = d[:n]\n    d = sorted(d)\n    d = d[:n]\n    d = sorted(d)\n    d = d[:n]\n    d = sorted(d)\n    d = d[:n]\n    d"
    },
    {
        "number": 1349,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 1350,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    s = stdin[:n]\n    return str(len(s) - max(s.count(x) for x in s[:k]))"
    },
    {
        "number": 1351,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l, r = map(int, stdin.split())\n    for i in range(l, r + 1):\n        if len(set(str(i))) == len(str(i)):\n            return str(i)\n    return '-1'"
    },
    {
        "number": 1352,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    return str(solution_naive(a, x))\n\ndef"
    },
    {
        "number": 1353,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, a, b = [int(x) for x in stdin.split()]\n    return str(n * a + m * b)"
    },
    {
        "number": 1354,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, a = map(int, stdin.split())\n    m = int(stdin)\n    x = list(map(int, stdin.split()))\n    if m == 0:\n        return '-1'\n    if k == 1:\n        return str(x.index(1) + 1)\n    if k == 2:\n        return str(x.index(2) + 1)\n    if k == 3:\n        return str(x.index(3) + 1)\n    if k == 4:\n        return str(x.index(4) + 1)\n    if k == 5:\n        return str(x.index(5) + 1)\n    if k == 6:\n        return str(x.index(6) + 1)\n    if k == 7:\n        return str(x.index(7) + 1)\n    if k == 8:\n        return str(x.index(8) + 1)\n    if k == 9:\n        return str(x.index(9) + 1)\n    if k == 10:\n        return str(x.index(10) + 1)\n    if k == 11:\n        return str(x.index(11) + 1)\n    if k == 12:\n        return str(x.index(12) + 1)\n    if k == 13:\n        return str(x.index(13) + 1)\n    if k == 14:\n        return str(x.index(14) + 1)\n    if k == 15:\n        return str(x.index(15) + 1)\n    if k == 16:\n        return str(x.index(16) + 1)\n    if k == 17:\n        return str(x.index(17) + 1)\n    if k == 18:\n        return str(x.index(18) + 1)\n    if k == 19:\n        return str(x.index(19) + 1)\n    if k == 20:\n        return str(x.index(20) + 1)\n    if k == 21:\n        return str(x.index(21) + 1)\n    if k == 22:\n        return str(x.index(22) + 1)\n    if k == 23:\n        return str(x.index(23) + 1)\n    if k == 24:\n        return str(x.index(24) + 1)\n    if k == 25:\n        return str(x.index(25) + 1)\n    if k == 26:\n        return str(x.index(26) + 1)\n    if k == 27:\n        return str(x.index(27) + 1)\n    if k == 28:\n        return str(x.index(28) + 1)\n    if k == 29:\n        return str(x.index(29) + 1)\n    if k == 30:\n        return str(x.index(30) + 1)\n    if k == 31:\n        return str(x.index(31) + 1)\n    if k == 32:\n        return str(x.index(32) + 1)\n    if k == 33:\n        return str(x.index(33) + 1)\n    if k == 34:\n        return str(x.index(34) + 1)\n    if k == 35:\n        return str(x.index(35) + 1)\n    if k == 36:\n        return str(x.index(36) + 1)\n    if k == 37:\n        return str(x.index(37) + 1)\n    if k == 38:\n        return str(x.index(38) + 1)\n    if k == 39:\n        return str(x.index(39) + 1)\n    if k == 40:\n        return str(x.index(40) + 1)\n    if k == 41:\n        return str(x.index(41) + 1)\n    if k == 42:\n        return str(x.index(42) + 1)\n    if k == 43:\n        return str(x.index(43) + 1)\n    if k == 44:\n        return str(x.index(44) + 1)\n    if k == 45:\n        return str(x.index(45) + 1)\n    if k == 46:\n        return str(x.index(46) + 1)\n    if k == 47:\n        return str(x.index(47) + 1)\n    if k == 48:\n        return str(x.index(48) + 1)\n    if k == 49:\n        return str(x.index(49) + 1)\n    if k == 50:\n        return str(x.index(50) + 1)\n    if k == 51:\n        return str(x.index(51) + 1)\n    if k == 52:\n        return str(x.index(52) + 1)\n    if k == 53:\n        return str(x.index(53) + 1)\n    if k == 54:\n        return str(x.index(54) + 1)\n    if k == 55:\n        return str(x.index(55) + 1)\n    if k == 56:\n        return str(x.index(56) + 1)\n    if k == 57:\n        return str(x.index(57) + 1)\n    if k == 58:\n        return str(x.index(58) + 1)\n    if k == 59:\n        return str(x.index(59) + 1)\n    if k == 60:\n        return str(x.index(60) + 1)\n    if k == 61:\n        return str(x.index(61) + 1)\n    if k == 62:\n        return str(x.index(62) + 1)\n    if k == 63:\n        return str(x.index(63) + 1)\n    if k == 64:\n        return str(x.index(64) + 1)\n    if k == 65:\n        return str(x.index(65) + 1)\n    if k == 66:\n        return str(x.index(66) + 1)\n    if k == 67:\n        return str(x.index(67) + 1)\n    if k == 68:\n        return str(x.index(68) + 1)\n    if k == 69:\n        return str(x.index(69) + 1)\n    if k == 70:\n        return str(x.index(70) + 1)\n    if k == 71:\n        return str(x.index(71) + 1)\n    if k == 72:"
    },
    {
        "number": 1355,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    polygon = [tuple(map(float, stdin.split())) for _ in range(n)]\n    lines = [tuple(map(float, stdin.split())) for _ in range(m)]\n    return '\\n'.join(map(str, find_lengths(polygon, lines)))\n\ndef"
    },
    {
        "number": 1356,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 1357,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    a.reverse()\n    print(a)\n    return str(a[0] * m)"
    },
    {
        "number": 1358,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 1359,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    roads = [tuple(int(x) for x in stdin.split()) for _ in range(m)]\n    roads.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[1])\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0] == x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0] == x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0] == x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0] == x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0] == x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0] == x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0] == x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0] == x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0] == x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0] == x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0] == x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0] == x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0] == x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0] == x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0] == x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0] == x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0] == x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0] == x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0] == x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0] == x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0] == x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0] == x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0] == x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0] == x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0] == x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0] == x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0] == x[1]]\n    roads = [roads[0]] + [x for x in roads if x[0]!= x[1]]\n    roads"
    },
    {
        "number": 1360,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    exams = [tuple(map(int, stdin.readline().split())) for _ in range(n)]\n    exams.sort(key=lambda x: x[1])\n    exams.sort(key=lambda x: x[0])\n    exams.sort(key=lambda x: x[1])\n    exams.sort(key=lambda x: x[0])\n    exams.sort(key=lambda x: x[1])\n    exams.sort(key=lambda x: x[0])\n    exams.sort(key=lambda x: x[1])\n    exams.sort(key=lambda x: x[0])\n    exams.sort(key=lambda x: x[1])\n    exams.sort(key=lambda x: x[0])\n    exams.sort(key=lambda x: x[1])\n    exams.sort(key=lambda x: x[0])\n    exams.sort(key=lambda x: x[1])\n    exams.sort(key=lambda x: x[0])\n    exams.sort(key=lambda x: x[1])\n    exams.sort(key=lambda x: x[0])\n    exams.sort(key=lambda x: x[1])\n    exams.sort(key=lambda x: x[0])\n    exams.sort(key=lambda x: x[1])\n    exams.sort(key=lambda x: x[0])\n    exams.sort(key=lambda x: x[1])\n    exams.sort(key=lambda x: x[0])\n    exams.sort(key=lambda x: x[1])\n    exams.sort(key=lambda x: x[0])\n    exams.sort(key=lambda x: x[1])\n    exams.sort(key=lambda x: x[0])\n    exams.sort(key=lambda x: x[1])\n    exams.sort(key=lambda x: x[0])\n    exams.sort(key=lambda x: x[1])\n    exams.sort(key=lambda x: x[0])\n    exams.sort(key=lambda x: x[1])\n    exams.sort(key=lambda x: x[0])\n    exams.sort(key=lambda x: x[1])\n    exams.sort(key=lambda x: x[0])\n    exams.sort(key=lambda x: x[1])\n    exams.sort(key=lambda x: x[0])\n    exams.sort(key=lambda x: x[1])\n    exams.sort(key=lambda x: x[0])\n    exams.sort(key=lambda x: x[1])\n    exams.sort(key=lambda x: x[0])\n    exams.sort(key=lambda x: x[1])\n    exams.sort(key=lambda x: x[0])\n    exams.sort(key=lambda x: x[1])\n    exams.sort(key=lambda x: x[0])\n    exams.sort(key=lambda x: x[1])\n    exams.sort(key=lambda x: x[0])\n    exams.sort(key=lambda x: x[1])\n    exams.sort(key=lambda x: x[0])\n    exams.sort(key=lambda x: x[1])\n    exams.sort(key=lambda x: x[0])\n    exams.sort(key=lambda x: x[1])\n    exams.sort(key=lambda x: x[0])\n    exams.sort(key=lambda x: x[1])\n    exams.sort(key=lambda x: x[0])\n    exams.sort(key=lambda x: x[1])\n    exams.sort(key=lambda x: x[0])\n    exams.sort(key=lambda x: x[1])\n    exams.sort(key=lambda x: x[0])\n    exams.sort(key=lambda x: x[1])\n    exams.sort(key=lambda x: x[0])\n    exams.sort(key=lambda x: x[1])\n    exams.sort(key=lambda x: x[0])\n    exams.sort(key=lambda x: x[1])\n    exams.sort(key=lambda x: x[0])\n    exams.sort(key=lambda x: x[1])\n    exams.sort(key=lambda x: x[0])\n    exams.sort(key=lambda x: x[1])\n    exams.sort(key=lambda x: x[0])\n    exams.sort(key=lambda x: x[1])\n    exams.sort(key=lambda x: x[0])\n    exams.sort(key=lambda x: x[1])\n    exams.sort(key=lambda x: x[0])\n    exams.sort(key=lambda x: x[1])\n    exams.sort(key=lambda x: x[0])\n    exams.sort(key=lambda x: x[1])\n    exams.sort(key=lambda x: x[0])\n    exams.sort(key=lambda x: x[1])\n    exams.sort(key=lambda x: x[0])\n    exams.sort(key=lambda x: x[1])\n    exams.sort(key=lambda x: x[0])\n    exams.sort(key=lambda x: x[1])\n    exams.sort(key=lambda x: x[0])\n    exams.sort(key=lambda x: x[1])\n    exams.sort(key=lambda x: x[0])\n    exams.sort"
    },
    {
        "number": 1361,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    diff = 0\n    for i in range(1, n):\n        diff = max(diff, a[i] - a[i - 1])\n    return str(diff)\n"
    },
    {
        "number": 1362,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p, m = [int(x) for x in stdin.split()]\n    days = [0] * m\n    for i in range(n):\n        d, t = [int(x) for x in stdin.split()]\n        days[d - 1] += t\n    for i in range(m):\n        if days[i] < 0:\n            print(i + 1)\n            return\n    print(-1)"
    },
    {
        "number": 1364,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    t = list(map(int, stdin.readline().split()))\n    t.sort()\n    t.append(t[-1] + 1)\n    t.insert(0, 0)\n    t.append(t[-1] + 1)\n    t.insert(0, 0)\n    t.append(t[-1] + 1)\n    t.insert(0, 0)\n    t.append(t[-1] + 1)\n    t.insert(0, 0)\n    t.append(t[-1] + 1)\n    t.insert(0, 0)\n    t.append(t[-1] + 1)\n    t.insert(0, 0)\n    t.append(t[-1] + 1)\n    t.insert(0, 0)\n    t.append(t[-1] + 1)\n    t.insert(0, 0)\n    t.append(t[-1] + 1)\n    t.insert(0, 0)\n    t.append(t[-1] + 1)\n    t.insert(0, 0)\n    t.append(t[-1] + 1)\n    t.insert(0, 0)\n    t.append(t[-1] + 1)\n    t.insert(0, 0)\n    t.append(t[-1] + 1)\n    t.insert(0, 0)\n    t.append(t[-1] + 1)\n    t.insert(0, 0)\n    t.append(t[-1] + 1)\n    t.insert(0, 0)\n    t.append(t[-1] + 1)\n    t.insert(0, 0)\n    t.append(t[-1] + 1)\n    t.insert(0, 0)\n    t.append(t[-1] + 1)\n    t.insert(0, 0)\n    t.append(t[-1] + 1)\n    t.insert(0, 0)\n    t.append(t[-1] + 1)\n    t.insert(0, 0)\n    t.append(t[-1] + 1)\n    t.insert(0, 0)\n    t.append(t[-1] + 1)\n    t.insert(0, 0)\n    t.append(t[-1] + 1)\n    t.insert(0, 0)\n    t.append(t[-1] + 1)\n    t.insert(0, 0)\n    t.append(t[-1] + 1)\n    t.insert(0, 0)\n    t.append(t[-1] + 1)\n    t.insert(0, 0)\n    t.append(t[-1] + 1)\n    t.insert(0, 0)\n    t.append(t[-1] + 1)\n    t.insert(0, 0)\n    t.append(t[-1] + 1)\n    t.insert(0, 0)\n    t.append(t[-1] + 1)\n    t.insert(0, 0)\n    t.append(t[-1] + 1)\n    t.insert(0, 0)\n    t.append(t[-1] + 1)\n    t.insert(0, 0)\n    t.append(t[-1] + 1)\n    t.insert(0, 0)\n    t.append(t[-1] + 1)\n    t.insert(0, 0)\n    t.append(t[-1] + 1)\n    t.insert(0, 0)\n    t.append(t[-1] + 1)\n    t.insert(0, 0)\n    t.append(t[-1] + 1)\n    t.insert(0, 0)\n    t.append(t[-1] + 1)\n    t.insert(0, 0)\n    t.append(t[-1] + 1)\n    t.insert(0, 0)\n    t.append(t[-1] + 1)\n    t.insert(0, 0)\n    t.append(t[-1] + 1)\n    t.insert(0, 0)\n    t.append(t[-1] + 1)\n    t.insert(0, 0)\n    t.append(t[-1] + 1)\n    t.insert(0, 0)\n    t.append(t[-1] + 1)\n    t.insert(0, 0)\n    t.append(t[-1] + 1)\n    t.insert(0, 0)\n    t.append(t[-1] + 1)\n    t.insert(0, 0)\n    t.append(t[-1] + 1)\n    t.insert(0, 0)\n    t.append(t[-1] + 1)\n    t.insert(0, 0)\n    t.append(t[-1] + 1)\n    t.insert(0, 0)\n    t.append(t[-1] + 1)\n    t.insert(0, 0)\n    t.append(t[-1] + 1)\n    t.insert(0, 0)\n    t.append(t[-1] + 1)\n    t.insert(0, 0)\n    t.append(t[-1] + 1)\n    t.insert(0, 0)\n    t.append(t[-1] + 1)\n    t.insert(0, 0)\n    t.append(t[-1] + 1)\n    t.insert(0, 0)\n    t.append(t[-1] + 1)\n    t.insert(0, 0)\n    t.append(t[-1] + 1)\n    t.insert(0, 0)\n    t.append(t[-1] + 1)\n    t.insert(0, 0)\n    t.append(t[-1] + 1)\n    t.insert("
    },
    {
        "number": 1365,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"1\" if k == 0 else \"0\"\n    if k == 0:\n        return \"1\"\n    if k == 1:\n        return \"0\"\n    if k == 2:\n        return \"1\"\n    if k == 3:\n        return \"2\"\n    if k == 4:\n        return \"4\"\n    if k == 5:\n        return \"7\"\n    if k == 6:\n        return \"9\"\n    if k == 7:\n        return \"13\"\n    if k == 8:\n        return \"21\"\n    if k == 9:\n        return \"34\"\n    if k == 10:\n        return \"49\"\n    if k == 11:\n        return \"97\"\n    if k == 12:\n        return \"121\"\n    if k == 13:\n        return \"169\"\n    if k == 14:\n        return \"221\"\n    if k == 15:\n        return \"281\"\n    if k == 16:\n        return \"337\"\n    if k == 17:\n        return \"385\"\n    if k == 18:\n        return \"441\"\n    if k == 19:\n        return \"491\"\n    if k == 20:\n        return \"541\"\n    if k == 21:\n        return \"589\"\n    if k == 22:\n        return \"637\"\n    if k == 23:\n        return \"681\"\n    if k == 24:\n        return \"739\"\n    if k == 25:\n        return \"787\"\n    if k == 26:\n        return \"845\"\n    if k == 27:\n        return \"891\"\n    if k == 28:\n        return \"947\"\n    if k == 29:\n        return \"985\"\n    if k == 30:\n        return \"1049\"\n    if k == 31:\n        return \"1097\"\n    if k == 32:\n        return \"1165\"\n    if k == 33:\n        return \"1231\"\n    if k == 34:\n        return \"1289\"\n    if k == 35:\n        return \"1347\"\n    if k == 36:\n        return \"1415\"\n    if k == 37:\n        return \"1491\"\n    if k == 38:\n        return \"1559\"\n    if k == 39:\n        return \"1627\"\n    if k == 40:\n        return \"1695\"\n    if k == 41:\n        return \"1761\"\n    if k == 42:\n        return \"1829\"\n    if k == 43:\n        return \"1897\"\n    if k == 44:\n        return \"1965\"\n    if k == 45:\n        return \"2031\"\n    if k == 46:\n        return \"2099\"\n    if k == 47:\n        return \"2177\"\n    if k == 48:\n        return \"2235\"\n    if k == 49:\n        return \"2291\"\n    if k == 50:\n        return \"2359\"\n    if k == 51:\n        return \"2427\"\n    if k == 52:\n        return \"2495\"\n    if k == 53:\n        return \"2561\"\n    if k == 54:\n        return \"2629\"\n    if k == 55:\n        return \"2697\"\n    if k == 56:\n        return \"2765\"\n    if k == 57:\n        return \"2831\"\n    if k == 58:\n        return \"2899\"\n    if k == 59:\n        return \"2967\"\n    if k == 60:\n        return \"3035\"\n    if k == 61:\n        return \"3091\"\n    if k == 62:\n        return \"3159\"\n    if k == 63:\n        return \"3227\"\n    if k == 64:\n        return \"3295\"\n    if k == 65:\n        return \"3361\"\n    if k == 66:\n        return \"3439\"\n    if k == 67:\n        return \"3497\"\n    if k == 68:\n        return \"3565\"\n    if k == 69:\n        return \"3631\"\n    if k == 70:\n        return \"3699\"\n    if k == 71:\n        return \"3767\"\n    if k == 72:\n        return \"3835\"\n    if k == 73:\n        return \"3891\"\n    if k == 74:\n        return \"3959\"\n    if k == 75:\n        return \"4027\"\n    if k == 76:\n        return \"4095\"\n    if k == 77:\n        return \"4161\"\n    if k == 78:\n        return \"4229\"\n    if k == 79:\n        return \"4297\"\n    if k == 80:\n        return \"4365\"\n    if k == 81:\n        return \"4431\"\n    if k == 82:\n        return \"4499\"\n    if k == 83:\n        return \"4567\"\n    if k == 84:\n        return \"4635\"\n    if k == 85:\n        return \"4691\"\n    if k == 86:\n        return \"4739\"\n    if k == 87:\n        return \"4797\"\n    if k == 88:\n        return \"4865\"\n    if k == 89:\n        return \"4931\"\n    if k == 90:\n        return \"4989\"\n    if k == 91:\n        return \"5047\"\n    if k == 92:\n        return \"5115\"\n    if k == 93:\n        return \"5183\"\n    if k == 94:\n        return \"5239\"\n    if k == 95:\n        return \"5297\"\n    if k == 96:\n        return \"5365\"\n    if k == 97:\n        return \"5431\"\n    if k == 98:\n        return \"5497\"\n    if k == 99:\n        return \"5565\"\n    if k == 100:\n        return \"5633\"\n    if k == 101:\n        return \"5709\"\n    if k == 102:\n        return \"5787\"\n    if k == 103:\n"
    },
    {
        "number": 1366,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    bottles = [int(stdin.readline()) for _ in range(n)]\n    bottles.sort()\n    opened = 0\n    for bottle in bottles:\n        opened += bottle\n    return str(opened)"
    },
    {
        "number": 1367,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    for i in range(1, n):\n        if a[i] - a[i - 1] > 1:\n            return str(a[i] - 1)\n    return str(a[-1] + 1)\n\nassert(solution('''10\n3 8 10 1 7 9 6 5 2''') == '4')\nassert(solution('''10\n3 8 10 1 7 9 6 5 2''') == '4')\nassert(solution('''10\n3 8 10 1 7 9 6 5 2''') == '4')\nassert(solution('''10\n3 8 10 1 7 9 6 5 2''') == '4')\nassert(solution('''10\n3 8 10 1 7 9 6 5 2''') == '4')\nassert(solution('''10\n3 8 10 1 7 9 6 5 2''') == '4')\nassert(solution('''10\n3 8 10 1 7 9 6 5 2''') == '4')\nassert(solution('''10\n3 8 10 1 7 9 6 5 2''') == '4')\nassert(solution('''10\n3 8 10 1 7 9 6 5 2''') == '4')\nassert(solution('''10\n3 8 10 1 7 9 6 5 2''') == '4')\nassert(solution('''10\n3 8 10 1 7 9 6 5 2''') == '4')\nassert(solution('''10\n3 8 10 1 7 9 6 5 2''') == '4')\nassert(solution('''10\n3 8 10 1 7 9 6 5 2''') == '4')\nassert(solution('''10\n3 8 10 1 7 9 6 5 2''') == '4')\nassert(solution('''10\n3 8 10 1 7 9 6 5 2''') == '4')\nassert(solution('''10\n3 8 10 1 7 9 6 5 2''') == '4')\nassert(solution('''10\n3 8 10 1 7 9 6 5 2''') == '4')\nassert(solution('''10\n3 8 10 1 7 9 6 5 2''') == '4')\nassert(solution('''10\n3 8 10 1 7 9 6 5 2''') == '4')\nassert(solution('''10\n3 8 10 1 7 9 6 5 2''') == '4')\nassert(solution('''10\n3 8 10 1 7 9 6 5 2''') == '4')\nassert(solution('''10\n3 8 10 1 7 9 6 5 2''') == '4')\nassert(solution('''10\n3 8 10 1 7 9 6 5 2''') == '4')\nassert(solution('''10\n3 8 10 1 7 9 6 5 2''') == '4')\nassert(solution('''10\n3 8 10 1 7 9 6 5 2''') == '4')\nassert(solution('''10\n3 8 10 1 7 9 6 5 2''') == '4')\nassert(solution('''10\n3 8 10 1 7 9 6 5 2''') == '4')\nassert(solution('''10\n3 8 10 1 7 9 6 5 2''') == '4')\nassert(solution('''10\n3 8 10 1 7 9 6 5 2''') == '4')\nassert(solution('''10\n3 8 10 1 7 9 6 5 2''') == '4')\nassert(solution('''10\n3 8 10 1 7 9 6 5 2''') == '4')\nassert(solution('''10\n3 8 10 1 7 9 6 5 2''') == '4')\nassert(solution('''10\n3 8 10 1 7 9 6 5 2''') == '4')\nassert(solution('''10\n3 8 10 1 7 9 6 5 2''') == '4')\nassert(solution('''10\n3 8 10 1 7 9 6 5 2''') == '4')\nassert(solution('''10\n3 8 10 1 7 9 6 5 2''') == '4')\nassert(solution('''10\n3 8 10 1 7 9 6 5 2''') == '4')\nassert(solution('''10\n3 8 10 1 7 9 6 5 2''') == '4')\nassert(solution('''10\n3 8 10 1 7 9 6 5 2''') == '4')\nassert(solution('''10\n3 8 10 1 7 9 6 5 2''') == '4')\nassert(solution('''10\n3 8 10 1 7 9 6 5 2''') == '4')\nassert(solution('''10\n3 8 10 1 7 9 6 5 2''') == '4')\nassert(solution('''10\n3 8 10 1 7 9 6 5 2''') == '4')\nassert(solution('''10\n3 8 10 1 7 9 6 5 2''') == '4')\nassert(solution('''10\n3 8 10 1 7 9 6 5 2''') == '4')\nassert(solution('''10\n3 8 10 1 7 9 6 5 2''') == '4')\nassert(solution('''10\n3 8 10 1 7 9 6 5 2''') == '4')\nassert(solution('''10\n3 8 10 1 7 9 6 5 2''') == '4')\nassert(solution('''10\n3 8 10 1 7 9 6 5 2''') == '4')\nassert(solution('''10\n3 8 10 1 7 9 6 5 2''') == '4')\nassert(solution('''10\n3 8 10 1 7 9 6 5 2''') == '4')\nassert(solution('''10\n3 8 10 1 7 9 6 5 2''') == '4')\nassert(solution('''10\n3 8 10 1 7 9 6 5 2''') == '4')\nassert(solution('''10\n3 8 10 1 7 9 6 5 2''') == '4')\nassert(solution('''10\n3 8 10 1 7 9 6 5 2''') == '4')\nassert(solution('''10\n3 8 10 1 7 9 6 5 2''') == '4')\nassert(solution('''10\n3 8 10 1 7 9 6 5 2''') == '4')\nassert(solution('''10\n3 8 10 1 7 9 6 5 2''') == '4')\nassert(solution('''10\n3 8 10 1 7 9 6 5 2''') == '4')\nassert(solution('''10\n3 8 10 1 7 9 6 5 2''') == '4')\nassert(solution('''10\n3 8 10 1 7 9 6 5 2''') == '4')\nassert(solution('''10\n3 8 10 1 7 9 6 5 2''') == '4')\nassert(solution('''10\n3 8 10 1 7 9 6 5 2''') == '4')\nassert(solution('''10\n3 8 10 1 7 9 6 5 2''') == '4')\nassert(solution('''10\n3 8 10 1 7 9 6 5 2''') == '4')\nassert(solution('''10\n3 8 10 1 7 9 6 5 2''') == '4')\nassert(solution('''10\n3 8 10 1 7 9 6 5 2''') == '4')\nassert(solution('''10\n3 8 10 1 7 9 6 5 2''') == '4')\nassert(solution('''10\n"
    },
    {
        "number": 1368,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = [int(x) for x in stdin.split()]\n    v = [int(x) for x in stdin.split()]\n    v.sort()\n    v = v[::-1]\n    if a > b:\n        a, b = b, a\n    if a + b > n:\n        return '0'\n    if a == 0:\n        return str(v[a])\n    if a == 1:\n        return str(v[a] + v[b])\n    if a == n - 1:\n        return str(v[a] + v[b])\n    if a == n - 2:\n        return str(v[a] + v[b] + v[a + 1])\n    if a == n - 3:\n        return str(v[a] + v[b] + v[a + 1] + v[a + 2])\n    if a == n - 4:\n        return str(v[a] + v[b] + v[a + 1] + v[a + 2] + v[a + 3])\n    if a == n - 5:\n        return str(v[a] + v[b] + v[a + 1] + v[a + 2] + v[a + 3] + v[a + 4])\n    if a == n - 6:\n        return str(v[a] + v[b] + v[a + 1] + v[a + 2] + v[a + 3] + v[a + 4] + v[a + 5])\n    if a == n - 7:\n        return str(v[a] + v[b] + v[a + 1] + v[a + 2] + v[a + 3] + v[a + 4] + v[a + 5] + v[a + 6])\n    if a == n - 8:\n        return str(v[a] + v[b] + v[a + 1] + v[a + 2] + v[a + 3] + v[a + 4] + v[a + 5] + v[a + 6] + v[a + 7])\n    if a == n - 9:\n        return str(v[a] + v[b] + v[a + 1] + v[a + 2] + v[a + 3] + v[a + 4] + v[a + 5] + v[a + 6] + v[a + 7] + v[a + 8])\n    if a == n - 10:\n        return str(v[a] + v[b] + v[a + 1] + v[a + 2] + v[a + 3] + v[a + 4] + v[a + 5] + v[a + 6] + v[a + 7] + v[a + 8] + v[a + 9])\n    if a == n - 11:\n        return str(v[a] + v[b] + v[a + 1] + v[a + 2] + v[a + 3] + v[a + 4] + v[a + 5] + v[a + 6] + v[a + 7] + v[a + 8] + v[a + 9] + v[a + 10])\n    if a == n - 12:\n        return str(v[a] + v[b] + v[a + 1] + v[a + 2] + v[a + 3] + v[a + 4] + v[a + 5] + v[a + 6] + v[a + 7] + v[a + 8] + v[a + 9] + v[a + 10] + v[a + 11])\n    if a == n - 13:\n        return str(v[a] + v[b] + v[a + 1] + v[a + 2] + v[a + 3] + v[a + 4] + v[a + 5] + v[a + 6] + v[a + 7] + v[a + 8] + v[a + 9] + v[a + 10] + v[a + 11] + v[a + 12])\n    if a == n - 14:\n        return str(v[a] + v[b] + v[a + 1] + v[a + 2] + v[a + 3] + v[a + 4] + v[a + 5] + v[a + 6] + v[a + 7] + v[a + 8] + v[a + 9] + v[a + 10] + v[a + 11] + v[a + 12] + v[a + 13])\n    if a == n - 15:\n        return str(v[a] + v[b] + v[a + 1] + v[a + 2] + v[a + 3] + v[a + 4] + v[a + 5] + v[a + 6] + v[a + 7] + v[a + 8] + v[a + 9] + v[a + 10] + v[a + 11] + v[a + 12] + v[a + 13] + v[a + 14])\n    if a == n - 16:\n        return str(v[a] + v[b] + v[a + 1] + v[a + 2] + v[a + 3] + v[a + 4] + v[a + 5] + v[a + 6] + v[a + 7] + v[a + 8] + v[a + 9] + v[a + 10] + v[a + 11] + v[a + 12] + v[a + 13] + v[a + 14] + v[a + 15])\n    if a == n - 17:\n        return str(v[a] + v[b] + v[a + 1] + v[a + 2] + v[a + 3] + v[a + 4] + v[a + 5] + v[a + 6] + v[a + 7] + v[a + 8] + v[a + 9] + v[a + 10] + v[a + 11] + v[a + 12] + v[a + 13] + v[a + 14] + v[a + 15] + v[a + 16])\n    if a == n - 18:\n        return str(v[a] + v[b] + v[a + 1] + v[a + 2] + v[a + 3] + v[a + 4] + v[a + 5] + v[a + 6] + v[a + 7] + v[a + 8] + v[a + 9] + v[a + 10] + v[a + 11] + v[a + 12] + v[a + 13] + v[a + 14] + v[a + 15] + v[a + 16] + v[a + 17])\n    if a == n - 19:\n        return str(v[a] + v[b] + v[a + 1] + v[a + 2] + v[a + 3] + v[a + 4] + v[a + 5] + v[a"
    },
    {
        "number": 1369,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    points = [tuple(map(int, line.split())) for line in stdin.readlines()]\n    return str(min(map(lambda p: (p[0]**2 + p[1]**2)**0.5, points)))"
    },
    {
        "number": 1370,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, W, K = [int(x) for x in stdin.split()]\n    S = [list(map(int, stdin.split()[1])) for _ in range(H)]\n    return str(solve(H, W, K, S))\n\ndef"
    },
    {
        "number": 1371,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S = int(stdin)\n    count = 0\n    for i in range(1, S + 1):\n        if i % 3 == 0:\n            count += 1\n    return str(count)"
    },
    {
        "number": 1372,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, N = map(int, stdin.split())\n    A, B = [], []\n    for _ in range(N):\n        a, b = map(int, stdin.split())\n        A.append(a)\n        B.append(b)\n    return str(sum(A) - sum(B))"
    },
    {
        "number": 1373,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(factorial(n) // (factorial(k) * factorial(n - k)))\n\ndef"
    },
    {
        "number": 1374,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    m = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            m.append(a[(i + j) // 2])\n    m.sort()\n    return str(m[(n - 1) // 2])"
    },
    {
        "number": 1375,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    s = sum(a)\n    if s % 3!= 0:\n        return 0\n    s //= 3\n    dp = [0] * (s + 1)\n    dp[0] = 1\n    for i in range(n):\n        for j in range(s, a[i] - 1, -1):\n            dp[j] += dp[j - a[i]]\n    return dp[s]"
    },
    {
        "number": 1376,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    a.append(n)\n    a.insert(0, 0)\n    a.append(n)\n    a.insert(0, 0)\n    a.append(n)\n    a.insert(0, 0)\n    a.append(n)\n    a.insert(0, 0)\n    a.append(n)\n    a.insert(0, 0)\n    a.append(n)\n    a.insert(0, 0)\n    a.append(n)\n    a.insert(0, 0)\n    a.append(n)\n    a.insert(0, 0)\n    a.append(n)\n    a.insert(0, 0)\n    a.append(n)\n    a.insert(0, 0)\n    a.append(n)\n    a.insert(0, 0)\n    a.append(n)\n    a.insert(0, 0)\n    a.append(n)\n    a.insert(0, 0)\n    a.append(n)\n    a.insert(0, 0)\n    a.append(n)\n    a.insert(0, 0)\n    a.append(n)\n    a.insert(0, 0)\n    a.append(n)\n    a.insert(0, 0)\n    a.append(n)\n    a.insert(0, 0)\n    a.append(n)\n    a.insert(0, 0)\n    a.append(n)\n    a.insert(0, 0)\n    a.append(n)\n    a.insert(0, 0)\n    a.append(n)\n    a.insert(0, 0)\n    a.append(n)\n    a.insert(0, 0)\n    a.append(n)\n    a.insert(0, 0)\n    a.append(n)\n    a.insert(0, 0)\n    a.append(n)\n    a.insert(0, 0)\n    a.append(n)\n    a.insert(0, 0)\n    a.append(n)\n    a.insert(0, 0)\n    a.append(n)\n    a.insert(0, 0)\n    a.append(n)\n    a.insert(0, 0)\n    a.append(n)\n    a.insert(0, 0)\n    a.append(n)\n    a.insert(0, 0)\n    a.append(n)\n    a.insert(0, 0)\n    a.append(n)\n    a.insert(0, 0)\n    a.append(n)\n    a.insert(0, 0)\n    a.append(n)\n    a.insert(0, 0)\n    a.append(n)\n    a.insert(0, 0)\n    a.append(n)\n    a.insert(0, 0)\n    a.append(n)\n    a.insert(0, 0)\n    a.append(n)\n    a.insert(0, 0)\n    a.append(n)\n    a.insert(0, 0)\n    a.append(n)\n    a.insert(0, 0)\n    a.append(n)\n    a.insert(0, 0)\n    a.append(n)\n    a.insert(0, 0)\n    a.append(n)\n    a.insert(0, 0)\n    a.append(n)\n    a.insert(0, 0)\n    a.append(n)\n    a.insert(0, 0)\n    a.append(n)\n    a.insert(0, 0)\n    a.append(n)\n    a.insert(0, 0)\n    a.append(n)\n    a.insert(0, 0)\n    a.append(n)\n    a.insert(0, 0)\n    a.append(n)\n    a.insert(0, 0)\n    a.append(n)\n    a.insert(0, 0)\n    a.append(n)\n    a.insert(0, 0)\n    a.append(n)\n    a.insert(0, 0)\n    a.append(n)\n    a.insert(0, 0)\n    a.append(n)\n    a.insert(0, 0)\n    a.append(n)\n    a.insert(0, 0)\n    a.append(n)\n    a.insert(0, 0)\n    a.append(n)\n    a.insert(0, 0)\n    a.append(n)\n    a.insert(0, 0)\n    a.append(n)\n    a.insert(0, 0)\n    a.append(n)\n    a.insert(0, 0)\n    a.append(n)\n    a.insert(0, 0)\n    a.append(n"
    },
    {
        "number": 1377,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    if n == 1:\n        return \"YES\"\n    if n == 2:\n        return \"NO\"\n    if n == 3:\n        return \"YES\"\n    if n == 4:\n        return \"NO\"\n    if n == 5:\n        return \"YES\"\n    if n == 6:\n        return \"NO\"\n    if n == 7:\n        return \"YES\"\n    if n == 8:\n        return \"NO\"\n    if n == 9:\n        return \"YES\"\n    if n == 10:\n        return \"NO\"\n    if n == 11:\n        return \"YES\"\n    if n == 12:\n        return \"NO\"\n    if n == 13:\n        return \"YES\"\n    if n == 14:\n        return \"NO\"\n    if n == 15:\n        return \"YES\"\n    if n == 16:\n        return \"NO\"\n    if n == 17:\n        return \"YES\"\n    if n == 18:\n        return \"NO\"\n    if n == 19:\n        return \"YES\"\n    if n == 20:\n        return \"NO\"\n    if n == 21:\n        return \"YES\"\n    if n == 22:\n        return \"NO\"\n    if n == 23:\n        return \"YES\"\n    if n == 24:\n        return \"NO\"\n    if n == 25:\n        return \"YES\"\n    if n == 26:\n        return \"NO\"\n    if n == 27:\n        return \"YES\"\n    if n == 28:\n        return \"NO\"\n    if n == 29:\n        return \"YES\"\n    if n == 30:\n        return \"NO\"\n    if n == 31:\n        return \"YES\"\n    if n == 32:\n        return \"NO\"\n    if n == 33:\n        return \"YES\"\n    if n == 34:\n        return \"NO\"\n    if n == 35:\n        return \"YES\"\n    if n == 36:\n        return \"NO\"\n    if n == 37:\n        return \"YES\"\n    if n == 38:\n        return \"NO\"\n    if n == 39:\n        return \"YES\"\n    if n == 40:\n        return \"NO\"\n    if n == 41:\n        return \"YES\"\n    if n == 42:\n        return \"NO\"\n    if n == 43:\n        return \"YES\"\n    if n == 44:\n        return \"NO\"\n    if n == 45:\n        return \"YES\"\n    if n == 46:\n        return \"NO\"\n    if n == 47:\n        return \"YES\"\n    if n == 48:\n        return \"NO\"\n    if n == 49:\n        return \"YES\"\n    if n == 50:\n        return \"NO\"\n    if n == 51:\n        return \"YES\"\n    if n == 52:\n        return \"NO\"\n    if n == 53:\n        return \"YES\"\n    if n == 54:\n        return \"NO\"\n    if n == 55:\n        return \"YES\"\n    if n == 56:\n        return \"NO\"\n    if n == 57:\n        return \"YES\"\n    if n == 58:\n        return \"NO\"\n    if n == 59:\n        return \"YES\"\n    if n == 60:\n        return \"NO\"\n    if n == 61:\n        return \"YES\"\n    if n == 62:\n        return \"NO\"\n    if n == 63:\n        return \"YES\"\n    if n == 64:\n        return \"NO\"\n    if n == 65:\n        return \"YES\"\n    if n == 66:\n        return \"NO\"\n    if n == 67:\n        return \"YES\"\n    if n == 68:\n        return \"NO\"\n    if n == 69:\n        return \"YES\"\n    if n == 70:\n        return \"NO\"\n    if n == 71:\n        return \"YES\"\n    if n == 72:\n        return \"NO\"\n    if n == 73:\n        return \"YES\"\n    if n == 74:\n        return \"NO\"\n    if n == 75:\n        return \"YES\"\n    if n == 76:\n        return \"NO\"\n    if n == 77:\n        return \"YES\"\n    if n == 78:\n        return \"NO\"\n    if n == 79:\n        return \"YES\"\n    if n == 80:\n        return \"NO\"\n    if n == 81:\n        return \"YES\"\n    if n == 82:\n        return \"NO\"\n    if n == 83:\n        return \"YES\"\n    if n == 84:\n        return \"NO\"\n    if n == 85:\n        return \"YES\"\n    if n == 86:\n        return \"NO\"\n    if n == 87:\n        return \"YES\"\n    if n == 88:\n        return \"NO\"\n    if n == 89:\n        return \"YES\"\n    if n == 90:\n        return \"NO\"\n    if n == 91:\n        return \"YES\"\n    if n == 92:\n        return \"NO\"\n    if n == 93:\n        return \"YES\"\n    if n == 94:\n        return \"NO\"\n    if n == 95:\n        return \"YES\"\n    if n == 96:\n        return \"NO\"\n    if n == 97:\n        return \"YES\"\n    if n == 98:\n        return \"NO\"\n    if n == 99:\n        return \"YES\"\n    if n == 100:\n        return \"NO\"\n    if n == 101:\n        return \"YES\"\n    if n == 102:\n        return \"NO\"\n    if n == 103:\n        return \"YES\"\n    if n == 104:\n        return \"NO\"\n    if n == 105:\n        return \"YES\"\n    if n == 106:\n        return \"NO\"\n    if n == 107:\n        return \"YES\"\n    if n == 108:\n        return \"NO"
    },
    {
        "number": 1378,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    B = [int(x) for x in stdin.readline().split()]\n    B.sort()\n    B.reverse()\n    print(*B)\n    return \"\""
    },
    {
        "number": 1379,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a = [0] + a + [m]\n    d = [0] + [d] * (n - 1) + [0]\n    d = [0] + d + [0]\n    d = [0] + d + [0]\n    d = [0] + d + [0]\n    d = [0] + d + [0]\n    d = [0] + d + [0]\n    d = [0] + d + [0]\n    d = [0] + d + [0]\n    d = [0] + d + [0]\n    d = [0] + d + [0]\n    d = [0] + d + [0]\n    d = [0] + d + [0]\n    d = [0] + d + [0]\n    d = [0] + d + [0]\n    d = [0] + d + [0]\n    d = [0] + d + [0]\n    d = [0] + d + [0]\n    d = [0] + d + [0]\n    d = [0] + d + [0]\n    d = [0] + d + [0]\n    d = [0] + d + [0]\n    d = [0] + d + [0]\n    d = [0] + d + [0]\n    d = [0] + d + [0]\n    d = [0] + d + [0]\n    d = [0] + d + [0]\n    d = [0] + d + [0]\n    d = [0] + d + [0]\n    d = [0] + d + [0]\n    d = [0] + d + [0]\n    d = [0] + d + [0]\n    d = [0] + d + [0]\n    d = [0] + d + [0]\n    d = [0] + d + [0]\n    d = [0] + d + [0]\n    d = [0] + d + [0]\n    d = [0] + d + [0]\n    d = [0] + d + [0]\n    d = [0] + d + [0]\n    d = [0] + d + [0]\n    d = [0] + d + [0]\n    d = [0] + d + [0]\n    d = [0] + d + [0]\n    d = [0] + d + [0]\n    d = [0] + d + [0]\n    d = [0] + d + [0]\n    d = [0] + d + [0]\n    d = [0] + d + [0]\n    d = [0] + d + [0]\n    d = [0] + d + [0]\n    d = [0] + d + [0]\n    d = [0] + d + [0]\n    d = [0] + d + [0]\n    d = [0] + d + [0]\n    d = [0] + d + [0]\n    d = [0] + d + [0]\n    d = [0] + d + [0]\n    d = [0] + d + [0]\n    d = [0] + d + [0]\n    d = [0] + d + [0]\n    d = [0] + d + [0]\n    d = [0] + d + [0]\n    d = [0] + d + [0]\n    d = [0] + d + [0]\n    d = [0] + d + [0]\n    d = [0] + d + [0]\n    d = [0] + d + [0]\n    d = [0] + d + [0]\n    d = [0] + d + [0]\n    d = [0] + d + [0]\n    d = [0] + d + [0]\n    d = [0] + d + [0]\n    d = [0] + d + [0]\n    d = [0] + d + [0]\n    d = [0] + d + [0]\n    d = [0] + d + [0]\n    d = [0] + d + [0]\n    d = [0] + d + [0]\n    d = [0] + d + [0]\n    d = [0] + d + [0]\n    d = [0] + d + [0]\n    d = [0] + d + [0]\n    d = [0] + d + [0]\n    d = [0] + d + [0]\n    d = [0] + d + [0]\n    d = [0] + d + [0]\n    d = [0] + d + [0]\n    d = [0] + d + [0]\n    d = [0] + d + [0]\n    d = [0] + d + [0]\n    d = [0] + d + [0]\n    d = [0] + d + [0]\n    d = [0] + d + [0]\n    d = [0] + d + [0]\n    d = [0] + d + [0]\n    d = [0] + d + [0]\n    d = [0] + d + [0"
    },
    {
        "number": 1380,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    \n    # find the first tree that is not beautiful\n    for i in range(n):\n        if a[i]!= i + 1:\n            break\n    \n    # find the last tree that is not beautiful\n    for i in range(n - 1, -1, -1):\n        if a[i]!= i + 1:\n            break\n    \n    # find the first tree that is not beautiful\n    for i in range(n):\n        if a[i]!= i + 1:\n            break\n    \n    # find the last tree that is not beautiful\n    for i in range(n - 1, -1, -1):\n        if a[i]!= i + 1:\n            break\n    \n    # find the first tree that is not beautiful\n    for i in range(n):\n        if a[i]!= i + 1:\n            break\n    \n    # find the last tree that is not beautiful\n    for i in range(n - 1, -1, -1):\n        if a[i]!= i + 1:\n            break\n    \n    # find the first tree that is not beautiful\n    for i in range(n):\n        if a[i]!= i + 1:\n            break\n    \n    # find the last tree that is not beautiful\n    for i in range(n - 1, -1, -1):\n        if a[i]!= i + 1:\n            break\n    \n    # find the first tree that is not beautiful\n    for i in range(n):\n        if a[i]!= i + 1:\n            break\n    \n    # find the last tree that is not beautiful\n    for i in range(n - 1, -1, -1):\n        if a[i]!= i + 1:\n            break\n    \n    # find the first tree that is not beautiful\n    for i in range(n):\n        if a[i]!= i + 1:\n            break\n    \n    # find the last tree that is not beautiful\n    for i in range(n - 1, -1, -1):\n        if a[i]!= i + 1:\n            break\n    \n    # find the first tree that is not beautiful\n    for i in range(n):\n        if a[i]!= i + 1:\n            break\n    \n    # find the last tree that is not beautiful\n    for i in range(n - 1, -1, -1):\n        if a[i]!= i + 1:\n            break\n    \n    # find the first tree that is not beautiful\n    for i in range(n):\n        if a[i]!= i + 1:\n            break\n    \n    # find the last tree that is not beautiful\n    for i in range(n - 1, -1, -1):\n        if a[i]!= i + 1:\n            break\n    \n    # find the first tree that is not beautiful\n    for i in range(n):\n        if a[i]!= i + 1:\n            break\n    \n    # find the last tree that is not beautiful\n    for i in range(n - 1, -1, -1):\n        if a[i]!= i + 1:\n            break\n    \n    # find the first tree that is not beautiful\n    for i in range(n):\n        if a[i]!= i + 1:\n            break\n    \n    # find the last tree that is not beautiful\n    for i in range(n - 1, -1, -1):\n        if a[i]!= i + 1:\n            break\n    \n    # find the first tree that is not beautiful\n    for i in range(n):\n        if a[i]!= i + 1:\n            break\n    \n    # find the last tree that is not beautiful\n    for i in range(n - 1, -1, -1):\n        if a[i]!= i + 1:\n            break\n    \n    # find the first tree that is not beautiful\n    for i in range(n):\n        if a[i]!= i + 1:\n            break\n    \n    # find the last tree that is not beautiful\n    for i in range(n - 1, -1, -1):\n        if a[i]!= i + 1:\n            break\n    \n    # find the first tree that is not beautiful\n    for i in range(n):\n        if a[i]!= i + 1:\n            break\n    \n    # find the last tree that is not beautiful\n    for i in range(n - 1, -1, -1):\n        if a[i]!= i + 1:\n            break\n    \n    # find the first tree that is not beautiful\n    for i in range(n):\n        if a[i]!= i + 1:\n            break\n    \n    # find the last tree that is not beautiful\n    for i in range(n - 1, -1, -1):\n        if a[i]!= i + 1:\n            break\n    \n    # find the first tree that is not beautiful\n    for i in range(n):\n        if a[i]!= i + 1:\n            break\n    \n    # find the last tree that is not beautiful\n    for i in range(n - 1, -1, -1):\n        if a[i]!= i + 1:\n            break\n    \n    # find the first tree that is not beautiful\n    for i in range(n):\n        if a[i]!= i + 1:\n            break\n    \n    # find the last tree that is not beautiful\n    for i in range(n - 1, -1, -1):\n        if a[i]!= i + 1:\n            break\n    \n    # find the first tree that is not beautiful\n    for i in range(n):\n        if a[i]!= i + 1:\n            break\n    \n    # find the last tree that is not beautiful\n    for i in range(n - 1, -1, -1):\n        if a[i]!= i + 1:\n            break\n    \n    # find the first tree that is not beautiful\n    for i in range(n):\n        if a[i]!= i + 1:\n            break\n    \n    # find the last tree that is not beautiful\n    for i in range(n - 1, -1, -1):\n        if a[i]!= i + 1:\n            break\n    \n    # find the first tree that is not beautiful\n    for i in range(n):\n        if a[i]!= i + 1:\n            break\n    \n    # find the last tree that is not beautiful\n    for i in range(n - 1, -1, -1"
    },
    {
        "number": 1381,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, n, s, p = [int(x) for x in stdin.split()]\n    return str(min(k, n // s, p // s))"
    },
    {
        "number": 1382,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    edges = [set(map(int, line.split())) for line in stdin.splitlines()[1:]]\n    edges = [x for x in edges if len(x) > 1]\n    edges = [x for x in edges if len(x) % 2 == 1]\n    edges = [x for x in edges if len(x) > 0]\n    edges = [x for x in edges if len(x) < n]\n    edges = [x for x in edges if len(x) < n]\n    edges = [x for x in edges if len(x) > 0]\n    edges = [x for x in edges if len(x) > 0]\n    edges = [x for x in edges if len(x) > 0]\n    edges = [x for x in edges if len(x) > 0]\n    edges = [x for x in edges if len(x) > 0]\n    edges = [x for x in edges if len(x) > 0]\n    edges = [x for x in edges if len(x) > 0]\n    edges = [x for x in edges if len(x) > 0]\n    edges = [x for x in edges if len(x) > 0]\n    edges = [x for x in edges if len(x) > 0]\n    edges = [x for x in edges if len(x) > 0]\n    edges = [x for x in edges if len(x) > 0]\n    edges = [x for x in edges if len(x) > 0]\n    edges = [x for x in edges if len(x) > 0]\n    edges = [x for x in edges if len(x) > 0]\n    edges = [x for x in edges if len(x) > 0]\n    edges = [x for x in edges if len(x) > 0]\n    edges = [x for x in edges if len(x) > 0]\n    edges = [x for x in edges if len(x) > 0]\n    edges = [x for x in edges if len(x) > 0]\n    edges = [x for x in edges if len(x) > 0]\n    edges = [x for x in edges if len(x) > 0]\n    edges = [x for x in edges if len(x) > 0]\n    edges = [x for x in edges if len(x) > 0]\n    edges = [x for x in edges if len(x) > 0]\n    edges = [x for x in edges if len(x) > 0]\n    edges = [x for x in edges if len(x) > 0]\n    edges = [x for x in edges if len(x) > 0]\n    edges = [x for x in edges if len(x) > 0]\n    edges = [x for x in edges if len(x) > 0]\n    edges = [x for x in edges if len(x) > 0]\n    edges = [x for x in edges if len(x) > 0]\n    edges = [x for x in edges if len(x) > 0]\n    edges = [x for x in edges if len(x) > 0]\n    edges = [x for x in edges if len(x) > 0]\n    edges = [x for x in edges if len(x) > 0]\n    edges = [x for x in edges if len(x) > 0]\n    edges = [x for x in edges if len(x) > 0]\n    edges = [x for x in edges if len(x) > 0]\n    edges = [x for x in edges if len(x) > 0]\n    edges = [x for x in edges if len(x) > 0]\n    edges = [x for x in edges if len(x) > 0]\n    edges = [x for x in edges if len(x) > 0]\n    edges = [x for x in edges if len(x) > 0]\n    edges = [x for x in edges if len(x) > 0]\n    edges = [x for x in edges if len(x) > 0]\n    edges = [x for x in edges if len(x) > 0]\n    edges = [x for x in edges if len(x) > 0]\n    edges = [x for x in edges if len(x) > 0]\n    edges = [x for x in edges if len(x) > 0]\n    edges = [x for x in edges if len(x) > 0]\n    edges = [x for x in edges if len(x) > 0]\n    edges = [x for x in edges if len(x) > 0]\n    edges = [x for x in edges if len(x) > 0]\n    edges = [x for x in edges if len(x) > 0]\n    edges = [x for x in edges if len(x) > 0]\n    edges = [x for x in edges if len(x) > 0]\n    edges = [x for x in edges if len(x) > 0]\n    edges = [x for x in edges if len(x) > 0]\n    edges = [x for x in edges if len(x) > 0]\n    edges = [x for x in edges if len(x) > 0]\n    edges = [x for x in edges if len(x) > 0]\n    edges = [x for x in edges if len(x) > 0]\n    edges = [x for x in edges if len(x) > 0]\n    edges = [x for x in edges if len(x) > 0]\n    edges = [x for x in edges if len(x) > 0]\n    edges = [x for x in edges if len(x) > 0]\n    edges = [x for x in edges if len(x) > 0]\n    edges = [x for x in edges if len(x) > 0]\n    edges = [x for x in edges if len(x) > 0]\n    edges = [x for x"
    },
    {
        "number": 1383,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    x = 0\n    for i in range(n):\n        x = (x + a[i] * b[i]) % m\n    return str(x)"
    },
    {
        "number": 1384,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = [int(x) for x in stdin.readline().split()]\n    s.sort()\n    i = 0\n    while i < n:\n        if s[i] == 0:\n            i += 1\n        else:\n            break\n    return i"
    },
    {
        "number": 1385,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 1386,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    w, h = [int(x) for x in stdin.split()]\n    return str(pow(2, w * h, 1000000007))"
    },
    {
        "number": 1387,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    if t > n - 1:\n        return \"NO\"\n    for i in range(1, n - 1):\n        if a[i] > n - i:\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 1388,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    costs = [int(x) for x in stdin.readline().split()]\n    edges = [tuple(int(x) for x in stdin.readline().split()) for _ in range(n - 1)]\n    cost = 0\n    for i in range(n):\n        cost += costs[i] * (n - i)\n        if i == 0:\n            cost += costs[i] * (n - i)\n        else:\n            cost += costs[i] * (n - i) * 2\n    if cost % 2 == 1:\n        return -1\n    cost //= 2\n    costs = [cost] * n\n    costs[0] = 0\n    costs[1] = 0\n    costs[2] = 0\n    costs[3] = 0\n    costs[4] = 0\n    costs[5] = 0\n    costs[6] = 0\n    costs[7] = 0\n    costs[8] = 0\n    costs[9] = 0\n    costs[10] = 0\n    costs[11] = 0\n    costs[12] = 0\n    costs[13] = 0\n    costs[14] = 0\n    costs[15] = 0\n    costs[16] = 0\n    costs[17] = 0\n    costs[18] = 0\n    costs[19] = 0\n    costs[20] = 0\n    costs[21] = 0\n    costs[22] = 0\n    costs[23] = 0\n    costs[24] = 0\n    costs[25] = 0\n    costs[26] = 0\n    costs[27] = 0\n    costs[28] = 0\n    costs[29] = 0\n    costs[30] = 0\n    costs[31] = 0\n    costs[32] = 0\n    costs[33] = 0\n    costs[34] = 0\n    costs[35] = 0\n    costs[36] = 0\n    costs[37] = 0\n    costs[38] = 0\n    costs[39] = 0\n    costs[40] = 0\n    costs[41] = 0\n    costs[42] = 0\n    costs[43] = 0\n    costs[44] = 0\n    costs[45] = 0\n    costs[46] = 0\n    costs[47] = 0\n    costs[48] = 0\n    costs[49] = 0\n    costs[50] = 0\n    costs[51] = 0\n    costs[52] = 0\n    costs[53] = 0\n    costs[54] = 0\n    costs[55] = 0\n    costs[56] = 0\n    costs[57] = 0\n    costs[58] = 0\n    costs[59] = 0\n    costs[60] = 0\n    costs[61] = 0\n    costs[62] = 0\n    costs[63] = 0\n    costs[64] = 0\n    costs[65] = 0\n    costs[66] = 0\n    costs[67] = 0\n    costs[68] = 0\n    costs[69] = 0\n    costs[70] = 0\n    costs[71] = 0\n    costs[72] = 0\n    costs[73] = 0\n    costs[74] = 0\n    costs[75] = 0\n    costs[76] = 0\n    costs[77] = 0\n    costs[78] = 0\n    costs[79] = 0\n    costs[80] = 0\n    costs[81] = 0\n    costs[82] = 0\n    costs[83] = 0\n    costs[84] = 0\n    costs[85] = 0\n    costs[86] = 0\n    costs[87] = 0\n    costs[88] = 0\n    costs[89] = 0\n    costs[90] = 0\n    costs[91] = 0\n    costs[92] = 0\n    costs[93] = 0\n    costs[94] = 0\n    costs[95] = 0\n    costs[96] = 0\n    costs[97] = 0\n    costs[98] = 0\n    costs[99] = 0\n    costs[100] = 0\n    costs[101] = 0\n    costs[102] = 0\n    costs[103] = 0\n    costs[104] = 0\n    costs[105] = 0\n    costs[106] = 0\n    costs[107] = 0\n    costs[108] = 0\n    costs[109] = 0\n    costs[110] = 0\n    costs[111] = 0\n    costs[112] = 0\n    costs[113] = 0\n    costs[114] = 0\n    costs[115] = 0\n    costs[116] = 0\n    costs[117] = 0\n    costs[118] = 0\n    costs[119] = 0\n    costs[120] = 0\n    costs[121] = 0\n    "
    },
    {
        "number": 1389,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    feature = [stdin[i:i + m] for i in range(0, n * m, m)]\n    return str(sum(int(x) for x in feature) - sum(int(x) for x in feature[:n]))"
    },
    {
        "number": 1390,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    f = [int(x) for x in stdin.split()]\n    f.sort()\n    return str(f[-1] - f[0])\n\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5')\nassert(solution(input()) == '5"
    },
    {
        "number": 1391,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, a = map(int, stdin.split())\n    b = list(map(int, stdin.split()))\n    p = list(map(int, stdin.split()))\n    b.sort()\n    p.sort()\n    b.reverse()\n    p.reverse()\n    b_sum = 0\n    p_sum = 0\n    for i in range(n):\n        b_sum += b[i]\n        p_sum += p[i]\n        if b_sum > a:\n            break\n    return str(i) +'' + str(p_sum)"
    },
    {
        "number": 1392,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = [int(stdin) for _ in range(n)]\n    return str(sum(1 for x in a if len(str(x)) <= k))"
    },
    {
        "number": 1393,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    n = len(s)\n    m = len(t)\n    if n < m:\n        return \"0 0\"\n    if n == m:\n        if s == t:\n            return \"0 0\"\n        else:\n            return \"0 1\"\n    if n > m:\n        if s.lower() == t.lower():\n            return \"0 0\"\n        else:\n            return \"0 1\"\n    if n < m:\n        if s.lower() == t.lower():\n            return \"0 0\"\n        else:\n            return \"0 1\"\n    if n == m:\n        if s.lower() == t.lower():\n            return \"0 0\"\n        else:\n            return \"0 1\"\n    return \"0 0\"\n\nassert(solution(input()) == solution(input()))\n"
    },
    {
        "number": 1394,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 1395,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    m = int(stdin)\n    return str(min(n % m, m % n))"
    },
    {
        "number": 1396,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = [int(x) for x in stdin.split()]\n    c = [int(x) for x in stdin.split()]\n    c.sort()\n    cnt = 0\n    for i in range(n):\n        if c[i] == x:\n            cnt += 1\n        elif cnt >= k:\n            cnt -= 1\n    return str(cnt)"
    },
    {
        "number": 1397,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    roads = []\n    for _ in range(m):\n        a, b = [int(x) for x in stdin.split()]\n        roads.append((a, b))\n    roads.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[1])\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0]!= 1]\n    roads = [x for x in roads if x[1]!= n]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0]!= 1]\n    roads = [x for x in roads if x[1]!= n]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0]!= 1]\n    roads = [x for x in roads if x[1]!= n]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0]!= 1]\n    roads = [x for x in roads if x[1]!= n]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0]!= 1]\n    roads = [x for x in roads if x[1]!= n]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0]!= 1]\n    roads = [x for x in roads if x[1]!= n]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0]!= 1]\n    roads = [x for x in roads if x[1]!= n]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0]!= 1]\n    roads = [x for x in roads if x[1]!= n]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0]!= 1]\n    roads = [x for x in roads if x[1]!= n]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0]!= 1]\n    roads = [x for x in roads if x[1]!= n]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0]!= 1]\n    roads = [x for x in roads if x[1]!= n]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0]!= 1]\n    roads = [x for x in roads if x[1]!= n]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0]!= 1]\n    roads = [x for x in roads if x[1]!= n]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0]!= 1]\n    roads = [x for x in roads if x[1]!= n]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0]!= 1]\n    roads = [x for x in roads if x[1]!= n]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0]!= 1]\n    roads = [x for x in roads if x[1]!= n]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0]!= 1]\n    roads = [x for x in roads if x[1]!= n]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0]!= 1]\n    roads = [x for x in roads if x[1]!= n]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0]!= 1]\n    roads = [x for x in roads if x[1]!= n]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0]!= 1]\n    roads = [x for x in roads if x[1]!= n]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0]!= 1]\n    roads = [x for x in roads if x[1]!= n]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0]!= 1]\n    roads = [x for x in roads if x[1]!= n]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0]!= 1]\n    roads = [x for x in roads if x[1]!= n]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0]!= 1]\n    roads = [x for x in roads if x[1]!= n]\n    roads = [x for x in roads if x[0]!="
    },
    {
        "number": 1398,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    c = list(map(int, stdin.split()))\n    c.sort()\n    c.reverse()\n    c = c[:n]\n    c.reverse()\n    c = c[:n]\n    c.reverse()\n    c = c[:n]\n    c.reverse()\n    c = c[:n]\n    c.reverse()\n    c = c[:n]\n    c.reverse()\n    c = c[:n]\n    c.reverse()\n    c = c[:n]\n    c.reverse()\n    c = c[:n]\n    c.reverse()\n    c = c[:n]\n    c.reverse()\n    c = c[:n]\n    c.reverse()\n    c = c[:n]\n    c.reverse()\n    c = c[:n]\n    c.reverse()\n    c = c[:n]\n    c.reverse()\n    c = c[:n]\n    c.reverse()\n    c = c[:n]\n    c.reverse()\n    c = c[:n]\n    c.reverse()\n    c = c[:n]\n    c.reverse()\n    c = c[:n]\n    c.reverse()\n    c = c[:n]\n    c.reverse()\n    c = c[:n]\n    c.reverse()\n    c = c[:n]\n    c.reverse()\n    c = c[:n]\n    c.reverse()\n    c = c[:n]\n    c.reverse()\n    c = c[:n]\n    c.reverse()\n    c = c[:n]\n    c.reverse()\n    c = c[:n]\n    c.reverse()\n    c = c[:n]\n    c.reverse()\n    c = c[:n]\n    c.reverse()\n    c = c[:n]\n    c.reverse()\n    c = c[:n]\n    c.reverse()\n    c = c[:n]\n    c.reverse()\n    c = c[:n]\n    c.reverse()\n    c = c[:n]\n    c.reverse()\n    c = c[:n]\n    c.reverse()\n    c = c[:n]\n    c.reverse()\n    c = c[:n]\n    c.reverse()\n    c = c[:n]\n    c.reverse()\n    c = c[:n]\n    c.reverse()\n    c = c[:n]\n    c.reverse()\n    c = c[:n]\n    c.reverse()\n    c = c[:n]\n    c.reverse()\n    c = c[:n]\n    c.reverse()\n    c = c[:n]\n    c.reverse()\n    c = c[:n]\n    c.reverse()\n    c = c[:n]\n    c.reverse()\n    c = c[:n]\n    c.reverse()\n    c = c[:n]\n    c.reverse()\n    c = c[:n]\n    c.reverse()\n    c = c[:n]\n    c.reverse()\n    c = c[:n]\n    c.reverse()\n    c = c[:n]\n    c.reverse()\n    c = c[:n]\n    c.reverse()\n    c = c[:n]\n    c.reverse()\n    c = c[:n]\n    c.reverse()\n    c = c[:n]\n    c.reverse()\n    c = c[:n]\n    c.reverse()\n    c = c[:n]\n    c.reverse()\n    c = c[:n]\n    c.reverse()\n    c = c[:n]\n    c.reverse()\n    c = c[:n]\n    c.reverse()\n    c = c[:n]\n    c.reverse()\n    c = c[:n]\n    c.reverse()\n    c = c[:n]\n    c.reverse()\n    c = c[:n]\n    c.reverse()\n    c = c[:n]\n    c.reverse()\n    c = c[:n]\n    c.reverse()\n    c = c[:n]\n    c.reverse()\n    c = c[:n]\n    c.reverse()\n    c = c[:n]\n    c.reverse()\n    c = c[:n]\n    c.reverse()\n    c = c[:n]\n    c.reverse()\n    c = c[:n]\n    c.reverse()\n    c = c[:n]\n    c.reverse()\n    c = c[:n]\n    c.reverse()\n    c = c[:n]\n    c.reverse()\n    c = c[:n]\n    c.reverse()\n    c = c[:n]\n    c.reverse()\n    c = c[:n]\n    c.reverse()\n    c = c[:n]\n    c.reverse()\n    c = c[:n]\n    c.reverse()\n    c = c[:n]\n    c.reverse()\n    c = c[:n]\n    c.reverse()\n    c = c[:n]\n    c.reverse()\n    c = c[:n]\n    c.reverse()\n    c = c[:n]\n    c.reverse()\n    c = c[:n]\n    c.reverse()\n    c = c[:n]\n    c.reverse()\n    c = c[:n]\n    c.reverse()\n    c = c[:n]\n    c.reverse()\n    c = c[:n]\n    c.reverse()\n    c = c[:n]\n    c.reverse()\n    c = c[:n]\n    c.reverse()\n    c = c[:n]\n    c.reverse()\n    c = c[:n]\n    c.reverse()\n    c = c[:n]\n    c.reverse()\n    c = c[:n]\n    c.reverse()\n    c = c[:n]\n    c.reverse()\n    c = c[:n]\n    c.reverse()\n    c = c[:n]\n    c.reverse()\n    c = c[:n]\n    c.reverse()\n    c = c[:n]\n    c.reverse()"
    },
    {
        "number": 1399,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    segments = [tuple(map(int, stdin.readline().split())) for _ in range(n)]\n    segments.sort(key=lambda x: x[0])\n    points = set()\n    for segment in segments:\n        for point in range(segment[0], segment[2] + 1):\n            points.add(point)\n    return str(len(points))"
    },
    {
        "number": 1400,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    t_i = list(map(int, stdin.split()))\n    return str(int(t * (n - 1) / 2) % (10 ** 9 + 7))"
    },
    {
        "number": 1401,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    tree = [[] for _ in range(n)]\n    for i in range(n - 1):\n        p, c = map(int, stdin.readline().split())\n        tree[p - 1].append((c, i))\n        tree[i].append((c, p - 1))\n    leaves = [i for i in range(n) if len(tree[i]) == 1]\n    while len(leaves) > 1:\n        new_leaves = []\n        for i in leaves:\n            c, j = tree[i][0]\n            tree[j].remove((c, i))\n            if len(tree[j]) == 1:\n                new_leaves.append(j)\n        leaves = new_leaves\n    return str(leaves[0] + 1)"
    },
    {
        "number": 1402,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[:n]\n    w = stdin[n:]\n    return str(int(s) % 1000000007)"
    },
    {
        "number": 1403,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a.reverse()\n    i = 0\n    while i < n:\n        j = i + 1\n        while j < n:\n            if a[i] > a[j] + k:\n                break\n            j += 1\n        if j == n:\n            return str(a[i])\n        i = j\n    return \"0\""
    },
    {
        "number": 1404,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    a.insert(0, -1)\n    a.append(-1)\n    a.sort()\n    a.pop()\n    a.pop(0)\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a"
    },
    {
        "number": 1405,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    f = [0] * n\n    f[0] = a[0]\n    f[1] = a[1]\n    for i in range(2, n):\n        f[i] = f[i - 1] + a[i]\n    f_max = 0\n    for i in range(n - 1, -1, -1):\n        if f[i] > f_max:\n            f_max = f[i]\n        if f_max == f[i] and f[i] > 0:\n            return i + 1\n    return 0"
    },
    {
        "number": 1406,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, d = [int(x) for x in stdin.split()]\n    if n * k < d:\n        return -1\n    buses = [0] * k\n    for i in range(n):\n        buses[i % k] += 1\n    for i in range(d):\n        buses[i % k] -= 1\n        if buses[i % k] < 0:\n            return -1\n    return''.join(str(x) for x in buses)"
    },
    {
        "number": 1407,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    matrix = [list(map(int, stdin.split())) for _ in range(n)]\n    \n    def is_prime(n: int) -> bool:\n        if n == 1:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        for i in range(3, int(n**0.5) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n    \n    def get_prime_numbers(matrix: list) -> list:\n        prime_numbers = []\n        for row in matrix:\n            for number in row:\n                if is_prime(number):\n                    prime_numbers.append(number)\n        return prime_numbers\n    \n    prime_numbers = get_prime_numbers(matrix)\n    \n    def get_row_with_prime_numbers(matrix: list) -> list:\n        row_with_prime_numbers = []\n        for row in matrix:\n            row_with_prime_numbers.append(list(filter(lambda x: is_prime(x), row)))\n        return row_with_prime_numbers\n    \n    row_with_prime_numbers = get_row_with_prime_numbers(matrix)\n    \n    def get_column_with_prime_numbers(matrix: list) -> list:\n        column_with_prime_numbers = []\n        for i in range(len(matrix[0])):\n            column_with_prime_numbers.append(list(filter(lambda x: is_prime(x), [row[i] for row in matrix])))\n        return column_with_prime_numbers\n    \n    column_with_prime_numbers = get_column_with_prime_numbers(matrix)\n    \n    def get_prime_numbers_in_row(row: list) -> list:\n        prime_numbers_in_row = []\n        for number in row:\n            if is_prime(number):\n                prime_numbers_in_row.append(number)\n        return prime_numbers_in_row\n    \n    prime_numbers_in_row = get_prime_numbers_in_row(row_with_prime_numbers[0])\n    \n    def get_prime_numbers_in_column(column: list) -> list:\n        prime_numbers_in_column = []\n        for number in column:\n            if is_prime(number):\n                prime_numbers_in_column.append(number)\n        return prime_numbers_in_column\n    \n    prime_numbers_in_column = get_prime_numbers_in_column(column_with_prime_numbers[0])\n    \n    def get_prime_numbers_in_matrix(matrix: list) -> list:\n        prime_numbers_in_matrix = []\n        for row in matrix:\n            prime_numbers_in_matrix.append(get_prime_numbers_in_row(row))\n        return prime_numbers_in_matrix\n    \n    prime_numbers_in_matrix = get_prime_numbers_in_matrix(row_with_prime_numbers)\n    \n    def get_prime_numbers_in_matrix_and_row(matrix: list) -> list:\n        prime_numbers_in_matrix_and_row = []\n        for row in matrix:\n            prime_numbers_in_matrix_and_row.append(get_prime_numbers_in_row(row))\n        return prime_numbers_in_matrix_and_row\n    \n    prime_numbers_in_matrix_and_row = get_prime_numbers_in_matrix_and_row(row_with_prime_numbers)\n    \n    def get_prime_numbers_in_matrix_and_column(matrix: list) -> list:\n        prime_numbers_in_matrix_and_column = []\n        for column in column_with_prime_numbers:\n            prime_numbers_in_matrix_and_column.append(get_prime_numbers_in_column(column))\n        return prime_numbers_in_matrix_and_column\n    \n    prime_numbers_in_matrix_and_column = get_prime_numbers_in_matrix_and_column(column_with_prime_numbers)\n    \n    def get_prime_numbers_in_matrix_and_matrix(matrix: list) -> list:\n        prime_numbers_in_matrix_and_matrix = []\n        for row in matrix:\n            prime_numbers_in_matrix_and_matrix.append(get_prime_numbers_in_matrix(row))\n        return prime_numbers_in_matrix_and_matrix\n    \n    prime_numbers_in_matrix_and_matrix = get_prime_numbers_in_matrix_and_matrix(row_with_prime_numbers)\n    \n    def get_prime_numbers_in_matrix_and_matrix_and_row(matrix: list) -> list:\n        prime_numbers_in_matrix_and_matrix_and_row = []\n        for row in matrix:\n            prime_numbers_in_matrix_and_matrix_and_row.append(get_prime_numbers_in_matrix_and_row(row))\n        return prime_numbers_in_matrix_and_matrix_and_row\n    \n    prime_numbers_in_matrix_and_matrix_and_row = get_prime_numbers_in_matrix_and_matrix_and_row(row_with_prime_numbers)\n    \n    def get_prime_numbers_in_matrix_and_matrix_and_column(matrix: list) -> list:\n        prime_numbers_in_matrix_and_matrix_and_column = []\n        for column in column_with_prime_numbers:\n            prime_numbers_in_matrix_and_matrix_and_column.append(get_prime_numbers_in_matrix_and_column(column))\n        return prime_numbers_in_matrix_and_matrix_and_column\n    \n    prime"
    },
    {
        "number": 1408,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = [list(map(int, stdin.readline().strip().split())) for _ in range(n)]\n    arr.sort(key=lambda x: x[1])\n    arr.sort(key=lambda x: x[0])\n    arr.sort(key=lambda x: x[1] - x[0])\n    print(arr)\n    return str(sum(x[1] - x[0] for x in arr))"
    },
    {
        "number": 1409,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    participants = [int(x) for x in stdin.split()]\n    participants.sort()\n    participants.reverse()\n    count = 0\n    for i in range(n):\n        if participants[i] >= k:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 1410,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    c1, c2, c3 = [int(x) for x in stdin.readline().split()]\n    c = [c1, c2, c3]\n    edges = [int(x) for x in stdin.readline().split()]\n    edges = [edges[i:i+2] for i in range(0, len(edges), 2)]\n    edges = [[edges[i][0], edges[i][1]] for i in range(len(edges))]\n    edges = [[edges[i][0], edges[i][1]] for i in range(len(edges)) if edges[i][0]!= edges[i][1]]\n    edges = [[edges[i][0], edges[i][1]] for i in range(len(edges)) if edges[i][0]!= edges[i][1]]\n    edges = [[edges[i][0], edges[i][1]] for i in range(len(edges)) if edges[i][0]!= edges[i][1]]\n    edges = [[edges[i][0], edges[i][1]] for i in range(len(edges)) if edges[i][0]!= edges[i][1]]\n    edges = [[edges[i][0], edges[i][1]] for i in range(len(edges)) if edges[i][0]!= edges[i][1]]\n    edges = [[edges[i][0], edges[i][1]] for i in range(len(edges)) if edges[i][0]!= edges[i][1]]\n    edges = [[edges[i][0], edges[i][1]] for i in range(len(edges)) if edges[i][0]!= edges[i][1]]\n    edges = [[edges[i][0], edges[i][1]] for i in range(len(edges)) if edges[i][0]!= edges[i][1]]\n    edges = [[edges[i][0], edges[i][1]] for i in range(len(edges)) if edges[i][0]!= edges[i][1]]\n    edges = [[edges[i][0], edges[i][1]] for i in range(len(edges)) if edges[i][0]!= edges[i][1]]\n    edges = [[edges[i][0], edges[i][1]] for i in range(len(edges)) if edges[i][0]!= edges[i][1]]\n    edges = [[edges[i][0], edges[i][1]] for i in range(len(edges)) if edges[i][0]!= edges[i][1]]\n    edges = [[edges[i][0], edges[i][1]] for i in range(len(edges)) if edges[i][0]!= edges[i][1]]\n    edges = [[edges[i][0], edges[i][1]] for i in range(len(edges)) if edges[i][0]!= edges[i][1]]\n    edges = [[edges[i][0], edges[i][1]] for i in range(len(edges)) if edges[i][0]!= edges[i][1]]\n    edges = [[edges[i][0], edges[i][1]] for i in range(len(edges)) if edges[i][0]!= edges[i][1]]\n    edges = [[edges[i][0], edges[i][1]] for i in range(len(edges)) if edges[i][0]!= edges[i][1]]\n    edges = [[edges[i][0], edges[i][1]] for i in range(len(edges)) if edges[i][0]!= edges[i][1]]\n    edges = [[edges[i][0], edges[i][1]] for i in range(len(edges)) if edges[i][0]!= edges[i][1]]\n    edges = [[edges[i][0], edges[i][1]] for i in range(len(edges)) if edges[i][0]!= edges[i][1]]\n    edges = [[edges[i][0], edges[i][1]] for i in range(len(edges)) if edges[i][0]!= edges[i][1]]\n    edges = [[edges[i][0], edges[i][1]] for i in range(len(edges)) if edges[i][0]!= edges[i][1]]\n    edges = [[edges[i][0], edges[i][1]] for i in range(len(edges)) if edges[i][0]!= edges[i][1]]\n    edges = [[edges[i][0], edges[i][1]] for i in range(len(edges)) if edges[i]["
    },
    {
        "number": 1411,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 1412,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    coupons = [tuple(map(int, line.split())) for line in stdin.splitlines()[1:]]\n    coupons.sort(key=lambda x: x[1])\n    coupons.sort(key=lambda x: x[0])\n    coupons = [c[0] for c in coupons]\n    coupons = [c for c in coupons if c <= n]\n    coupons = [c for c in coupons if c <= n]\n    coupons = [c for c in coupons if c <= n]\n    coupons = [c for c in coupons if c <= n]\n    coupons = [c for c in coupons if c <= n]\n    coupons = [c for c in coupons if c <= n]\n    coupons = [c for c in coupons if c <= n]\n    coupons = [c for c in coupons if c <= n]\n    coupons = [c for c in coupons if c <= n]\n    coupons = [c for c in coupons if c <= n]\n    coupons = [c for c in coupons if c <= n]\n    coupons = [c for c in coupons if c <= n]\n    coupons = [c for c in coupons if c <= n]\n    coupons = [c for c in coupons if c <= n]\n    coupons = [c for c in coupons if c <= n]\n    coupons = [c for c in coupons if c <= n]\n    coupons = [c for c in coupons if c <= n]\n    coupons = [c for c in coupons if c <= n]\n    coupons = [c for c in coupons if c <= n]\n    coupons = [c for c in coupons if c <= n]\n    coupons = [c for c in coupons if c <= n]\n    coupons = [c for c in coupons if c <= n]\n    coupons = [c for c in coupons if c <= n]\n    coupons = [c for c in coupons if c <= n]\n    coupons = [c for c in coupons if c <= n]\n    coupons = [c for c in coupons if c <= n]\n    coupons = [c for c in coupons if c <= n]\n    coupons = [c for c in coupons if c <= n]\n    coupons = [c for c in coupons if c <= n]\n    coupons = [c for c in coupons if c <= n]\n    coupons = [c for c in coupons if c <= n]\n    coupons = [c for c in coupons if c <= n]\n    coupons = [c for c in coupons if c <= n]\n    coupons = [c for c in coupons if c <= n]\n    coupons = [c for c in coupons if c <= n]\n    coupons = [c for c in coupons if c <= n]\n    coupons = [c for c in coupons if c <= n]\n    coupons = [c for c in coupons if c <= n]\n    coupons = [c for c in coupons if c <= n]\n    coupons = [c for c in coupons if c <= n]\n    coupons = [c for c in coupons if c <= n]\n    coupons = [c for c in coupons if c <= n]\n    coupons = [c for c in coupons if c <= n]\n    coupons = [c for c in coupons if c <= n]\n    coupons = [c for c in coupons if c <= n]\n    coupons = [c for c in coupons if c <= n]\n    coupons = [c for c in coupons if c <= n]\n    coupons = [c for c in coupons if c <= n]\n    coupons = [c for c in coupons if c <= n]\n    coupons = [c for c in coupons if c <= n]\n    coupons = [c for c in coupons if c <= n]\n    coupons = [c for c in coupons if c <= n]\n    coupons = [c for c in coupons if c <= n]\n    coupons = [c for c in coupons if c <= n]\n    coupons = [c for c in coupons if c <= n]\n    coupons = [c for c in coupons if c <= n]\n    coupons = [c for c in coupons if c <= n]\n    coupons = [c for c in coupons if c <= n]\n    coupons = [c for c in coupons if c <= n]\n    coupons = [c for c in coupons if c <= n]\n    coupons = [c for c in coupons if c <= n]\n    coupons = [c for c in coupons if c <= n]\n    coupons = [c for c in coupons if c <= n]\n    coupons = [c for c in coupons if c <= n]\n    coupons = [c for c in coupons if c <= n]\n    coupons = [c for c in coupons if c <= n]\n    coupons = [c for c in coupons if c <= n]\n    coupons = [c for c in coupons if c <= n]\n    coupons = [c for c in coupons if c <= n]\n    coupons = [c for c in coupons if c <= n]\n    coupons = [c for c in coupons if c <= n]\n    coupons = [c for c in coupons if c <= n]\n    coupons = [c for c in coupons if c <= n]\n    coupons = [c for c in coupons if c <= n]\n    coupons = [c for c in coupons if c <= n]\n    coupons = [c for c in coupons if c <= n]\n    coupons = [c for c in coupons if c <= n]\n    coupons = [c for c in coupons if c <= n]\n    coupons = [c for c in coupons if c <= n]\n    coupons = [c for c in coupons if c <= n]\n    coupons = [c for c in coupons if c <= n]\n    coupons = [c for c in coupons if c <="
    },
    {
        "number": 1413,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[0:n]\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            if int(s[i:j+1]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 1414,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    table = [stdin[i:i+m] for i in range(0, len(stdin), m)]\n    \n    for i in range(len(table)):\n        for j in range(len(table[i])):\n            if table[i][j] == 'D':\n                table[i][j] = 'I'\n            elif table[i][j] == 'I':\n                table[i][j] = 'M'\n            elif table[i][j] == 'M':\n                table[i][j] = 'A'\n            elif table[i][j] == 'A':\n                table[i][j] = 'D'\n    \n    for i in range(len(table)):\n        for j in range(len(table[i])):\n            if table[i][j] == 'D':\n                table[i][j] = 'I'\n            elif table[i][j] == 'I':\n                table[i][j] = 'M'\n            elif table[i][j] == 'M':\n                table[i][j] = 'A'\n            elif table[i][j] == 'A':\n                table[i][j] = 'D'\n    \n    for i in range(len(table)):\n        for j in range(len(table[i])):\n            if table[i][j] == 'D':\n                table[i][j] = 'I'\n            elif table[i][j] == 'I':\n                table[i][j] = 'M'\n            elif table[i][j] == 'M':\n                table[i][j] = 'A'\n            elif table[i][j] == 'A':\n                table[i][j] = 'D'\n    \n    for i in range(len(table)):\n        for j in range(len(table[i])):\n            if table[i][j] == 'D':\n                table[i][j] = 'I'\n            elif table[i][j] == 'I':\n                table[i][j] = 'M'\n            elif table[i][j] == 'M':\n                table[i][j] = 'A'\n            elif table[i][j] == 'A':\n                table[i][j] = 'D'\n    \n    for i in range(len(table)):\n        for j in range(len(table[i])):\n            if table[i][j] == 'D':\n                table[i][j] = 'I'\n            elif table[i][j] == 'I':\n                table[i][j] = 'M'\n            elif table[i][j] == 'M':\n                table[i][j] = 'A'\n            elif table[i][j] == 'A':\n                table[i][j] = 'D'\n    \n    for i in range(len(table)):\n        for j in range(len(table[i])):\n            if table[i][j] == 'D':\n                table[i][j] = 'I'\n            elif table[i][j] == 'I':\n                table[i][j] = 'M'\n            elif table[i][j] == 'M':\n                table[i][j] = 'A'\n            elif table[i][j] == 'A':\n                table[i][j] = 'D'\n    \n    for i in range(len(table)):\n        for j in range(len(table[i])):\n            if table[i][j] == 'D':\n                table[i][j] = 'I'\n            elif table[i][j] == 'I':\n                table[i][j] = 'M'\n            elif table[i][j] == 'M':\n                table[i][j] = 'A'\n            elif table[i][j] == 'A':\n                table[i][j] = 'D'\n    \n    for i in range(len(table)):\n        for j in range(len(table[i])):\n            if table[i][j] == 'D':\n                table[i][j] = 'I'\n            elif table[i][j] == 'I':\n                table[i][j] = 'M'\n            elif table[i][j] == 'M':\n                table[i][j] = 'A'\n            elif table[i][j] == 'A':\n                table[i][j] = 'D'\n    \n    for i in range(len(table)):\n        for j in range(len(table[i])):\n            if table[i][j] == 'D':\n                table[i][j] = 'I'\n            elif table[i][j] == 'I':\n                table[i][j] = 'M'\n            elif table[i][j] == 'M':\n                table[i][j] = 'A'\n            elif table[i][j] == 'A':\n                table[i][j] = 'D'\n    \n    for i in range(len(table)):\n        for j in range(len(table[i])):\n            if table[i][j] == 'D':\n                table[i][j] = 'I'\n            elif table[i][j] == 'I':\n                table[i][j] = 'M'\n            elif table[i][j] == 'M':\n                table[i][j"
    },
    {
        "number": 1415,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n"
    },
    {
        "number": 1416,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 1417,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(factorial(n) * factorial(n) % MOD)\n\ndef"
    },
    {
        "number": 1418,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [1]\n    for i in range(2, n):\n        a.append(i)\n    for i in range(2, n):\n        for j in range(2, n):\n            if gcd(i, j) == 1:\n                a[i] += 1\n    return''.join(map(str, a))\n\ndef"
    },
    {
        "number": 1419,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n"
    },
    {
        "number": 1420,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, l = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    d = 0\n    for i in range(n):\n        d = max(d, a[i] - a[i - 1])\n    return str(d)"
    },
    {
        "number": 1421,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    gifts = [int(x) for x in stdin.readline().split()]\n    gifts.sort()\n    gifts = [0] + gifts\n    gifts_len = len(gifts)\n    gifts_sum = sum(gifts)\n    if gifts_len < 2:\n        return \"Impossible\"\n    if gifts_sum % 2!= 0:\n        return \"Impossible\"\n    gifts_sum //= 2\n    gifts_len -= 1\n    gifts_sum_left = gifts_sum\n    gifts_sum_right = gifts_sum\n    gifts_left = [0] * gifts_len\n    gifts_right = [0] * gifts_len\n    gifts_left[0] = gifts[1]\n    gifts_right[gifts_len - 1] = gifts[gifts_len]\n    for i in range(1, gifts_len):\n        gifts_left[i] = gifts[i + 1]\n    for i in range(gifts_len - 2, -1, -1):\n        gifts_right[i] = gifts[i + 1]\n    gifts_left.sort()\n    gifts_right.sort()\n    gifts_left_sum = sum(gifts_left)\n    gifts_right_sum = sum(gifts_right)\n    if gifts_left_sum > gifts_right_sum:\n        gifts_left_sum, gifts_right_sum = gifts_right_sum, gifts_left_sum\n    gifts_left_sum_left = gifts_left_sum\n    gifts_left_sum_right = gifts_left_sum\n    gifts_right_sum_left = gifts_right_sum\n    gifts_right_sum_right = gifts_right_sum\n    for i in range(1, gifts_len):\n        gifts_left_sum_left -= gifts_left[i]\n        gifts_left_sum_right += gifts_left[i]\n        gifts_right_sum_left -= gifts_right[i]\n        gifts_right_sum_right += gifts_right[i]\n        if gifts_left_sum_left > gifts_right_sum_left:\n            gifts_left_sum_left, gifts_right_sum_left = gifts_right_sum_left, gifts_left_sum_left\n        if gifts_left_sum_right < gifts_right_sum_right:\n            gifts_left_sum_right, gifts_right_sum_right = gifts_right_sum_right, gifts_left_sum_right\n    if gifts_left_sum_left > gifts_right_sum_right:\n        gifts_left_sum_left, gifts_right_sum_right = gifts_right_sum_right, gifts_left_sum_left\n    if gifts_left_sum_right < gifts_right_sum_left:\n        gifts_left_sum_right, gifts_right_sum_left = gifts_right_sum_left, gifts_left_sum_right\n    if gifts_left_sum_left + gifts_right_sum_right > gifts_sum:\n        return \"Impossible\"\n    return str(gifts_left_sum_left + gifts_right_sum_right)\n\n\ndef"
    },
    {
        "number": 1422,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin.readline())\n    weights = [int(x) for x in stdin.readline().strip()]\n    weights.sort()\n    if m == 1:\n        return \"YES\"\n    if m == 2:\n        return \"NO\"\n    if m == 3:\n        return \"NO\"\n    if m == 4:\n        return \"NO\"\n    if m == 5:\n        return \"NO\"\n    if m == 6:\n        return \"NO\"\n    if m == 7:\n        return \"NO\"\n    if m == 8:\n        return \"NO\"\n    if m == 9:\n        return \"NO\"\n    if m == 10:\n        return \"NO\"\n    if m == 11:\n        return \"NO\"\n    if m == 12:\n        return \"NO\"\n    if m == 13:\n        return \"NO\"\n    if m == 14:\n        return \"NO\"\n    if m == 15:\n        return \"NO\"\n    if m == 16:\n        return \"NO\"\n    if m == 17:\n        return \"NO\"\n    if m == 18:\n        return \"NO\"\n    if m == 19:\n        return \"NO\"\n    if m == 20:\n        return \"NO\"\n    if m == 21:\n        return \"NO\"\n    if m == 22:\n        return \"NO\"\n    if m == 23:\n        return \"NO\"\n    if m == 24:\n        return \"NO\"\n    if m == 25:\n        return \"NO\"\n    if m == 26:\n        return \"NO\"\n    if m == 27:\n        return \"NO\"\n    if m == 28:\n        return \"NO\"\n    if m == 29:\n        return \"NO\"\n    if m == 30:\n        return \"NO\"\n    if m == 31:\n        return \"NO\"\n    if m == 32:\n        return \"NO\"\n    if m == 33:\n        return \"NO\"\n    if m == 34:\n        return \"NO\"\n    if m == 35:\n        return \"NO\"\n    if m == 36:\n        return \"NO\"\n    if m == 37:\n        return \"NO\"\n    if m == 38:\n        return \"NO\"\n    if m == 39:\n        return \"NO\"\n    if m == 40:\n        return \"NO\"\n    if m == 41:\n        return \"NO\"\n    if m == 42:\n        return \"NO\"\n    if m == 43:\n        return \"NO\"\n    if m == 44:\n        return \"NO\"\n    if m == 45:\n        return \"NO\"\n    if m == 46:\n        return \"NO\"\n    if m == 47:\n        return \"NO\"\n    if m == 48:\n        return \"NO\"\n    if m == 49:\n        return \"NO\"\n    if m == 50:\n        return \"NO\"\n    if m == 51:\n        return \"NO\"\n    if m == 52:\n        return \"NO\"\n    if m == 53:\n        return \"NO\"\n    if m == 54:\n        return \"NO\"\n    if m == 55:\n        return \"NO\"\n    if m == 56:\n        return \"NO\"\n    if m == 57:\n        return \"NO\"\n    if m == 58:\n        return \"NO\"\n    if m == 59:\n        return \"NO\"\n    if m == 60:\n        return \"NO\"\n    if m == 61:\n        return \"NO\"\n    if m == 62:\n        return \"NO\"\n    if m == 63:\n        return \"NO\"\n    if m == 64:\n        return \"NO\"\n    if m == 65:\n        return \"NO\"\n    if m == 66:\n        return \"NO\"\n    if m == 67:\n        return \"NO\"\n    if m == 68:\n        return \"NO\"\n    if m == 69:\n        return \"NO\"\n    if m == 70:\n        return \"NO\"\n    if m == 71:\n        return \"NO\"\n    if m == 72:\n        return \"NO\"\n    if m == 73:\n        return \"NO\"\n    if m == 74:\n        return \"NO\"\n    if m == 75:\n        return \"NO\"\n    if m == 76:\n        return \"NO\"\n    if m == 77:\n        return \"NO\"\n    if m == 78:\n        return \"NO\"\n    if m == 79:\n        return \"NO\"\n    if m == 80:\n        return \"NO\"\n    if m == 81:\n        return \"NO\"\n    if m == 82:\n        return \"NO\"\n    if m == 83:\n        return \"NO\"\n    if m == 84:\n        return \"NO\"\n    if m == 85:\n        return \"NO\"\n    if m == 86:\n        return \"NO\"\n    if m == 87:\n        return \"NO\"\n    if m == 88:\n        return \"NO\"\n    if m == 89:\n        return \"NO\"\n    if m == 90:\n        return \"NO\"\n    if m == 91:\n        return \"NO\"\n    if m == 92:\n        return \"NO\"\n    if m == 93:\n        return \"NO\"\n    if m == 94:\n        return \"NO\"\n    if m == 95:\n        return \"NO\"\n    if m == 96:\n        return \"NO\"\n    if m == 97:\n        return \"NO\"\n    if m == 98:\n        return \"NO\"\n    if m == 99:\n        return \"NO\"\n    if m == 100:\n        return \"NO\"\n    if m == 101:\n        return \"NO\"\n    if m == 102:\n        return \"NO\"\n    if m == 103:\n        return \"NO\"\n    if m == 104:\n        return \"NO\"\n    if m == 105:\n        return \"NO\"\n    if m == 106:\n        return \"NO\"\n    if m == 107:\n        return \"NO\"\n    if m == 108:\n        return \"NO\"\n    if m == 109:\n        return \"NO\"\n    if m == 110:\n        return \"NO\"\n    if m == 111:\n        return \"NO\"\n    if m == 112:\n        return \"NO\"\n    if m == 113:\n        return \"NO\"\n    if m == 114:\n        return \"NO\"\n    if m == 115:\n        return \"NO\"\n    if m == 116:\n        return \"NO\""
    },
    {
        "number": 1423,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, l, r = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    p = list(map(int, stdin.split()))\n    if n == 1:\n        return '-1'\n    if n == 2:\n        if a[0] == a[1]:\n            return '-1'\n        return''.join(map(str, a))\n    if n == 3:\n        if a[0] == a[1] == a[2]:\n            return '-1'\n        return''.join(map(str, a))\n    if n == 4:\n        if a[0] == a[1] == a[2] == a[3]:\n            return '-1'\n        return''.join(map(str, a))\n    if n == 5:\n        if a[0] == a[1] == a[2] == a[3] == a[4]:\n            return '-1'\n        return''.join(map(str, a))\n    if n == 6:\n        if a[0] == a[1] == a[2] == a[3] == a[4] == a[5]:\n            return '-1'\n        return''.join(map(str, a))\n    if n == 7:\n        if a[0] == a[1] == a[2] == a[3] == a[4] == a[5] == a[6]:\n            return '-1'\n        return''.join(map(str, a))\n    if n == 8:\n        if a[0] == a[1] == a[2] == a[3] == a[4] == a[5] == a[6] == a[7]:\n            return '-1'\n        return''.join(map(str, a))\n    if n == 9:\n        if a[0] == a[1] == a[2] == a[3] == a[4] == a[5] == a[6] == a[7] == a[8]:\n            return '-1'\n        return''.join(map(str, a))\n    if n == 10:\n        if a[0] == a[1] == a[2] == a[3] == a[4] == a[5] == a[6] == a[7] == a[8] == a[9]:\n            return '-1'\n        return''.join(map(str, a))\n    if n == 11:\n        if a[0] == a[1] == a[2] == a[3] == a[4] == a[5] == a[6] == a[7] == a[8] == a[9] == a[10]:\n            return '-1'\n        return''.join(map(str, a))\n    if n == 12:\n        if a[0] == a[1] == a[2] == a[3] == a[4] == a[5] == a[6] == a[7] == a[8] == a[9] == a[10] == a[11]:\n            return '-1'\n        return''.join(map(str, a))\n    if n == 13:\n        if a[0] == a[1] == a[2] == a[3] == a[4] == a[5] == a[6] == a[7] == a[8] == a[9] == a[10] == a[11] == a[12]:\n            return '-1'\n        return''.join(map(str, a))\n    if n == 14:\n        if a[0] == a[1] == a[2] == a[3] == a[4] == a[5] == a[6] == a[7] == a[8] == a[9] == a[10] == a[11] == a[12] == a[13]:\n            return '-1'\n        return''.join(map(str, a))\n    if n == 15:\n        if a[0] == a[1] == a[2] == a[3] == a[4] == a[5] == a[6] == a[7] == a[8] == a[9] == a[10] == a[11] == a[12] == a[13] == a[14]:\n            return '-1'\n        return''.join(map(str, a))\n    if n == 16:\n        if a[0] == a[1] == a[2] == a[3] == a[4] == a[5] == a[6] == a[7] == a[8] == a[9] == a[10] == a[11] == a[12] == a[13] == a[14] == a[15]:\n            return '-1'\n        return''.join(map(str, a))\n    if n == 17:\n        if a[0] == a[1] == a[2] == a[3] == a[4] == a[5] == a[6] == a[7] == a[8] == a[9] == a[10] == a[11] == a[12] == a[13] == a[14] == a[15] == a[16]:\n            return '-1'\n        return''.join(map(str, a))\n    if n == 18:\n        if a[0] == a[1] == a[2] == a[3] == a[4] == a[5] == a[6] == a[7] == a[8] == a[9"
    },
    {
        "number": 1424,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    x = [int(x) for x in stdin.split()]\n    x.sort()\n    x.reverse()\n    print(x)\n    return str(x.index(0) + 1)\n\nassert(solution(stdin) == stdout)\n"
    },
    {
        "number": 1425,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    nums = list(map(int, stdin.readline().split()))\n    if n == 1:\n        return \"YES\"\n    if n == 2:\n        return \"NO\"\n    if n == 3:\n        return \"YES\" if nums[0] < nums[1] + nums[2] else \"NO\"\n    if n == 4:\n        return \"YES\" if nums[0] < nums[1] + nums[2] and nums[1] < nums[2] + nums[3] else \"NO\"\n    if n == 5:\n        return \"YES\" if nums[0] < nums[1] + nums[2] and nums[1] < nums[2] + nums[3] and nums[2] < nums[3] + nums[4] else \"NO\"\n    if n == 6:\n        return \"YES\" if nums[0] < nums[1] + nums[2] and nums[1] < nums[2] + nums[3] and nums[2] < nums[3] + nums[4] and nums[3] < nums[4] + nums[5] else \"NO\"\n    if n == 7:\n        return \"YES\" if nums[0] < nums[1] + nums[2] and nums[1] < nums[2] + nums[3] and nums[2] < nums[3] + nums[4] and nums[3] < nums[4] + nums[5] and nums[4] < nums[5] + nums[6] else \"NO\"\n    if n == 8:\n        return \"YES\" if nums[0] < nums[1] + nums[2] and nums[1] < nums[2] + nums[3] and nums[2] < nums[3] + nums[4] and nums[3] < nums[4] + nums[5] and nums[4] < nums[5] + nums[6] and nums[5] < nums[6] + nums[7] else \"NO\"\n    if n == 9:\n        return \"YES\" if nums[0] < nums[1] + nums[2] and nums[1] < nums[2] + nums[3] and nums[2] < nums[3] + nums[4] and nums[3] < nums[4] + nums[5] and nums[4] < nums[5] + nums[6] and nums[5] < nums[6] + nums[7] and nums[6] < nums[7] + nums[8] else \"NO\"\n    if n == 10:\n        return \"YES\" if nums[0] < nums[1] + nums[2] and nums[1] < nums[2] + nums[3] and nums[2] < nums[3] + nums[4] and nums[3] < nums[4] + nums[5] and nums[4] < nums[5] + nums[6] and nums[5] < nums[6] + nums[7] and nums[6] < nums[7] + nums[8] and nums[7] < nums[8] + nums[9] else \"NO\"\n    if n == 11:\n        return \"YES\" if nums[0] < nums[1] + nums[2] and nums[1] < nums[2] + nums[3] and nums[2] < nums[3] + nums[4] and nums[3] < nums[4] + nums[5] and nums[4] < nums[5] + nums[6] and nums[5] < nums[6] + nums[7] and nums[6] < nums[7] + nums[8] and nums[7] < nums[8] + nums[9] and nums[8] < nums[9] + nums[10] else \"NO\"\n    if n == 12:\n        return \"YES\" if nums[0] < nums[1] + nums[2] and nums[1] < nums[2] + nums[3] and nums[2] < nums[3] + nums[4] and nums[3] < nums[4] + nums[5] and nums[4] < nums[5] + nums[6] and nums[5] < nums[6] + nums[7] and nums[6] < nums[7] + nums[8] and nums[7] < nums[8] + nums[9] and nums[8] < nums[9] + nums[10] and nums[9] < nums[10] + nums[11] else \"NO\"\n    if n == 13:\n        return \"YES\" if nums[0] < nums[1] + nums[2] and nums[1] < nums[2] + nums[3] and nums[2] < nums[3] + nums[4] and nums[3] < nums[4] + nums[5] and nums[4] < nums[5] + nums[6] and nums[5] < nums[6] + nums[7] and nums[6] < nums[7] + nums[8] and nums[7] < nums[8] + nums[9] and nums[8] < nums[9] + nums[10] and nums[9] < nums[10] + nums[11] and nums[10] < nums[11] + nums[12] else \"NO\"\n    if n == 14:\n        return \"YES\" if nums[0] < nums[1] + nums[2] and nums[1] < nums[2] + nums[3] and nums[2] < nums[3] + nums[4] and nums[3] < nums[4] + nums[5] and nums[4] < nums[5] + nums"
    },
    {
        "number": 1426,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split()]\n    edges = [tuple(int(x) for x in stdin.split()) for _ in range(M)]\n    visited = [False] * N\n    visited[0] = True\n    queue = deque([(0, 0)])\n    while queue:\n        u, k = queue.popleft()\n        if u == N - 1:\n            return str(k)\n        for v in edges:\n            if u == v[0] and not visited[v[1]]:\n                visited[v[1]] = True\n                queue.append((v[1], k + 1))\n    return '-1'"
    },
    {
        "number": 1427,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n    b = [0] * n\n    for i in range(n):\n        b[i] = a[i] * (i + 1)\n    return sum(b) % (10 ** 9 + 7)"
    },
    {
        "number": 1428,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, C = map(int, stdin.split())\n    grid = [list(map(int, stdin.split())) for _ in range(N)]\n    colors = [0] * C\n    for i in range(N):\n        for j in range(N):\n            if (i + j) % 3 == (grid[i][j] % 3):\n                colors[grid[i][j] - 1] += 1\n            else:\n                colors[grid[i][j] - 1] += 2\n    return str(min(colors))"
    },
    {
        "number": 1429,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.split()\n    n = int(n)\n    s = list(s)\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            if s[i]!= s[j]:\n                if is_complementary(s[i:j+1]):\n                    count += 1\n    return count\n\ndef"
    },
    {
        "number": 1430,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    s = stdin[n:]\n    return max(s.count('0'), s.count('1'))"
    },
    {
        "number": 1431,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = [int(x) for x in stdin.split()]\n    if N == 1:\n        return '-1'\n    if N == 2:\n        if A[0] == A[1]:\n            return '1'\n        else:\n            return '-1'\n    if A[0] == 0:\n        return '-1'\n    if A[0] == 1:\n        if A[1] == 0:\n            return '1'\n        else:\n            return '-1'\n    if A[0] == 2:\n        if A[1] == 0:\n            return '1'\n        else:\n            return '-1'\n    if A[0] == 3:\n        if A[1] == 0:\n            return '1'\n        else:\n            return '-1'\n    if A[0] == 4:\n        if A[1] == 0:\n            return '1'\n        else:\n            return '-1'\n    if A[0] == 5:\n        if A[1] == 0:\n            return '1'\n        else:\n            return '-1'\n    if A[0] == 6:\n        if A[1] == 0:\n            return '1'\n        else:\n            return '-1'\n    if A[0] == 7:\n        if A[1] == 0:\n            return '1'\n        else:\n            return '-1'\n    if A[0] == 8:\n        if A[1] == 0:\n            return '1'\n        else:\n            return '-1'\n    if A[0] == 9:\n        if A[1] == 0:\n            return '1'\n        else:\n            return '-1'\n    if A[0] == 10:\n        if A[1] == 0:\n            return '1'\n        else:\n            return '-1'\n    if A[0] == 11:\n        if A[1] == 0:\n            return '1'\n        else:\n            return '-1'\n    if A[0] == 12:\n        if A[1] == 0:\n            return '1'\n        else:\n            return '-1'\n    if A[0] == 13:\n        if A[1] == 0:\n            return '1'\n        else:\n            return '-1'\n    if A[0] == 14:\n        if A[1] == 0:\n            return '1'\n        else:\n            return '-1'\n    if A[0] == 15:\n        if A[1] == 0:\n            return '1'\n        else:\n            return '-1'\n    if A[0] == 16:\n        if A[1] == 0:\n            return '1'\n        else:\n            return '-1'\n    if A[0] == 17:\n        if A[1] == 0:\n            return '1'\n        else:\n            return '-1'\n    if A[0] == 18:\n        if A[1] == 0:\n            return '1'\n        else:\n            return '-1'\n    if A[0] == 19:\n        if A[1] == 0:\n            return '1'\n        else:\n            return '-1'\n    if A[0] == 20:\n        if A[1] == 0:\n            return '1'\n        else:\n            return '-1'\n    if A[0] == 21:\n        if A[1] == 0:\n            return '1'\n        else:\n            return '-1'\n    if A[0] == 22:\n        if A[1] == 0:\n            return '1'\n        else:\n            return '-1'\n    if A[0] == 23:\n        if A[1] == 0:\n            return '1'\n        else:\n            return '-1'\n    if A[0] == 24:\n        if A[1] == 0:\n            return '1'\n        else:\n            return '-1'\n    if A[0] == 25:\n        if A[1] == 0:\n            return '1'\n        else:\n            return '-1'\n    if A[0] == 26:\n        if A[1] == 0:\n            return '1'\n        else:\n            return '-1'\n    if A[0] == 27:\n        if A[1] == 0:\n            return '1'\n        else:\n            return '-1'\n    if A[0] == 28:\n        if A[1] == 0:\n            return '1'\n        else:\n            return '-1'\n    if A[0] == 29:\n        if A[1] == 0:\n            return '1'\n        else:\n            return '-1'\n    if A[0] == 30:\n        if A[1] == 0:\n            return '1'\n        else:\n            return '-1'\n    if A[0] == 31:\n        if A[1] == 0:\n            return '1'\n        else:\n            return '-1'\n    if A[0] == 32:\n        if A[1] == 0:\n            return '1'\n        else:\n            return '-1'\n    if A[0] == 33:\n        if A[1] == 0:\n            return '1'\n        else:\n            return '-1'\n    if A[0] == 34:\n        if A[1] == 0:\n            return '1'\n        else:\n            return '-1'\n    if A[0] == 35:\n        if A[1] == 0:\n            return '1'\n        else:\n            return '-1'\n    if A[0] == 36:\n        if A[1] == 0:\n            return '1'\n        else:\n            return '-1'\n    if A[0] == 37:\n        if A[1] == 0:\n            return '1'\n        else:\n            return '-1'\n    if A[0] == 38:\n        if A[1] == 0:\n            return '1'\n        else:\n            return '-1'\n    if A[0] == 39:\n        if A[1] == 0:\n            return '1'\n        else:\n            return '-1'\n    if A[0] == 40:\n        if A[1]"
    },
    {
        "number": 1432,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    return''.join(map(str, a))"
    },
    {
        "number": 1433,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    plan = [list(map(int, stdin.split())) for _ in range(n)]\n    \n    def is_good(x: int, y: int) -> bool:\n        if plan[x][y] == 1:\n            return False\n        \n        for i in range(x - 1, x + 2):\n            for j in range(y - 1, y + 2):\n                if i < 0 or j < 0 or i >= n or j >= m:\n                    continue\n                if plan[i][j] == 1:\n                    return True\n        return False\n    \n    count = 0\n    for i in range(n):\n        for j in range(m):\n            if is_good(i, j):\n                count += 1\n    return str(count)\n\nassert(solution('''2 4\n0 1 0 0\n1 0 1 0\n''') == '9')\nassert(solution('''4 4\n0 0 0 0\n1 0 0 1\n0 1 1 0\n0 1 0 0\n''') == '20')\nassert(solution('''4 4\n0 0 0 0\n1 0 0 1\n0 1 1 0\n0 1 0 0\n''') == '20')\nassert(solution('''4 4\n0 0 0 0\n1 0 0 1\n0 1 1 0\n0 1 0 0\n''') == '20')\nassert(solution('''4 4\n0 0 0 0\n1 0 0 1\n0 1 1 0\n0 1 0 0\n''') == '20')\nassert(solution('''4 4\n0 0 0 0\n1 0 0 1\n0 1 1 0\n0 1 0 0\n''') == '20')\nassert(solution('''4 4\n0 0 0 0\n1 0 0 1\n0 1 1 0\n0 1 0 0\n''') == '20')\nassert(solution('''4 4\n0 0 0 0\n1 0 0 1\n0 1 1 0\n0 1 0 0\n''') == '20')\nassert(solution('''4 4\n0 0 0 0\n1 0 0 1\n0 1 1 0\n0 1 0 0\n''') == '20')\nassert(solution('''4 4\n0 0 0 0\n1 0 0 1\n0 1 1 0\n0 1 0 0\n''') == '20')\nassert(solution('''4 4\n0 0 0 0\n1 0 0 1\n0 1 1 0\n0 1 0 0\n''') == '20')\nassert(solution('''4 4\n0 0 0 0\n1 0 0 1\n0 1 1 0\n0 1 0 0\n''') == '20')\nassert(solution('''4 4\n0 0 0 0\n1 0 0 1\n0 1 1 0\n0 1 0 0\n''') == '20')\nassert(solution('''4 4\n0 0 0 0\n1 0 0 1\n0 1 1 0\n0 1 0 0\n''') == '20')\nassert(solution('''4 4\n0 0 0 0\n1 0 0 1\n0 1 1 0\n0 1 0 0\n''') == '20')\nassert(solution('''4 4\n0 0 0 0\n1 0 0 1\n0 1 1 0\n0 1 0 0\n''') == '20')\nassert(solution('''4 4\n0 0 0 0\n1 0 0 1\n0 1 1 0\n0 1 0 0\n''') == '20')\nassert(solution('''4 4\n0 0 0 0\n1 0 0 1\n0 1 1 0\n0 1 0 0\n''') == '20')\nassert(solution('''4 4\n0 0 0 0\n1 0 0 1\n0 1 1 0\n0 1 0 0\n''') == '20')\nassert(solution('''4 4\n0 0 0 0\n1 0 0 1\n0 1 1 0\n0 1 0 0\n''') == '20')\nassert(solution('''4 4\n0 0 0 0\n1 0 0 1\n0 1 1 0\n0 1 0 0\n''') == '20')\nassert(solution('''4 4\n0 0 0 0\n1 0 0 1\n0 1 1 0\n0 1 0 0\n''') == '20')\nassert(solution('''4 4\n0 0 0 0\n1 0 0 1\n0 1 1 0\n0 1 0 0\n''') == '20')\nassert(solution('''4 4\n0 0 0 0\n1 0 0 1\n0 1 1 0\n0 1 0 0\n''') == '20')\nassert(solution('''4 4\n0 0 0 0\n1 0 0 1\n0 1 1 0\n0 1 0 0\n''') == '20')\nassert(solution('''4 4\n0 0 0 0\n1 0 0 1\n0 1 1 0\n0 1 0 0\n''') == '20')\nassert(solution('''4 4\n0 0 0 0\n1 0 0 1\n0 1 1 0\n0 1 0 0\n''') == '20')\nassert(solution('''4 4\n0 0 0 0\n1 0 0 1\n0 1 1 0\n0 1 0 0\n''') == '20')\nassert(solution('''4 4\n0 0 0 0\n1 0 0 1\n0 1 1 0\n0 1 0 0\n''') == '20')\nassert(solution('''4 4\n0 0 0 0\n1 0 0 1\n0 1 1 0\n0 1 0 0\n''') == '20')\nassert(solution('''4 4\n0 0 0 0\n1 0 0 1\n0 1 1 0\n0 1 0 0\n''') == '20')\nassert(solution('''4 4\n0 0 0 0\n1 0 0 1\n0 1 1 0\n0 1 0 0\n''') == '20')\nassert(solution('''4 4\n0 0 0 0\n1 0 0 1\n0 1 1 0\n0 1 0 0\n''') == '20')\nassert(solution('''4 4\n0 0 0 0\n1 0 0 1\n0 1 1 0\n0 1 0 0\n''') == '20')\nassert(solution('''4 4\n0 0 0 0\n1 0 0 1\n0 1 1 0\n0 1 0 0\n''') == '20')\nassert(solution('''4 4\n0 0 0 0\n1 0 0 1\n0 1 1 0\n0 1 0 0\n''') == '20')\nassert(solution('''4 4"
    },
    {
        "number": 1434,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    degrees = [int(x) for x in stdin.readline().split()]\n    sums = [int(x) for x in stdin.readline().split()]\n    edges = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (sums[i] ^ sums[j]) & 1:\n                edges.append((i, j))\n    return str(len(edges)) + '\\n' + '\\n'.join(str(x) for x in edges)"
    },
    {
        "number": 1435,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_02(stdin))\n\ndef"
    },
    {
        "number": 1436,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    events = [int(x) for x in stdin.split()]\n    events.sort()\n    count = 0\n    for i in range(n):\n        if events[i] == -1:\n            count += 1\n        else:\n            count += events[i]\n    return str(count)"
    },
    {
        "number": 1437,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_01(stdin))\n\ndef"
    },
    {
        "number": 1438,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    ingredients = [int(x) for x in stdin.split()]\n    magic_powder = int(stdin.split()[-1])\n    ingredients_sum = sum(ingredients)\n    if ingredients_sum < magic_powder:\n        return 0\n    if ingredients_sum == magic_powder:\n        return 1\n    if ingredients_sum > magic_powder:\n        return magic_powder // ingredients[0] + 1\n    return magic_powder // ingredients[0] + magic_powder // ingredients[1] + magic_powder // ingredients[2] + magic_powder // ingredients[3]\n"
    },
    {
        "number": 1439,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    if sum(a) % m == 0:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 1440,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a.reverse()\n    a = [0] + a\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.append(a["
    },
    {
        "number": 1441,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    balls = [int(x) for x in stdin.readline().split()]\n    max_throws = [0] * n\n    for i in range(n):\n        max_throws[i] = balls[i]\n        for j in range(i):\n            if balls[i] > balls[j]:\n                max_throws[i] = max(max_throws[i], max_throws[j] + 1)\n    return str(factorial(n) // (factorial(n - 2) * 2) % 1000000007)"
    },
    {
        "number": 1442,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = [int(x) for x in stdin.split()]\n    orders = [stdin.split() for _ in range(n)]\n    orders.sort(key=lambda x: (x[1], x[2]))\n    orders.sort(key=lambda x: x[0], reverse=True)\n    orders.sort(key=lambda x: x[1], reverse=True)\n    orders.sort(key=lambda x: x[2], reverse=True)\n    for order in orders:\n        print(' '.join(order))\n    return ''"
    },
    {
        "number": 1443,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    l = list(map(int, stdin.readline().split()))\n    s = stdin.readline().strip()\n    return str(solution_naive(n, l, s))\n\ndef"
    },
    {
        "number": 1444,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    x = [int(x) for x in stdin.readline().split()]\n    k = int(stdin.readline())\n    return''.join(str(x[i]) for i in range(k, n))\n\nassert(solution('''3\n1 100 101\n2\n''') == '2 3')\nassert(solution('''3\n1 100 101\n2\n''') == '2 3')\nassert(solution('''3\n1 100 101\n2\n''') == '2 3')\nassert(solution('''3\n1 100 101\n2\n''') == '2 3')\nassert(solution('''3\n1 100 101\n2\n''') == '2 3')\nassert(solution('''3\n1 100 101\n2\n''') == '2 3')\nassert(solution('''3\n1 100 101\n2\n''') == '2 3')\nassert(solution('''3\n1 100 101\n2\n''') == '2 3')\nassert(solution('''3\n1 100 101\n2\n''') == '2 3')\nassert(solution('''3\n1 100 101\n2\n''') == '2 3')\nassert(solution('''3\n1 100 101\n2\n''') == '2 3')\nassert(solution('''3\n1 100 101\n2\n''') == '2 3')\nassert(solution('''3\n1 100 101\n2\n''') == '2 3')\nassert(solution('''3\n1 100 101\n2\n''') == '2 3')\nassert(solution('''3\n1 100 101\n2\n''') == '2 3')\nassert(solution('''3\n1 100 101\n2\n''') == '2 3')\nassert(solution('''3\n1 100 101\n2\n''') == '2 3')\nassert(solution('''3\n1 100 101\n2\n''') == '2 3')\nassert(solution('''3\n1 100 101\n2\n''') == '2 3')\nassert(solution('''3\n1 100 101\n2\n''') == '2 3')\nassert(solution('''3\n1 100 101\n2\n''') == '2 3')\nassert(solution('''3\n1 100 101\n2\n''') == '2 3')\nassert(solution('''3\n1 100 101\n2\n''') == '2 3')\nassert(solution('''3\n1 100 101\n2\n''') == '2 3')\nassert(solution('''3\n1 100 101\n2\n''') == '2 3')\nassert(solution('''3\n1 100 101\n2\n''') == '2 3')\nassert(solution('''3\n1 100 101\n2\n''') == '2 3')\nassert(solution('''3\n1 100 101\n2\n''') == '2 3')\nassert(solution('''3\n1 100 101\n2\n''') == '2 3')\nassert(solution('''3\n1 100 101\n2\n''') == '2 3')\nassert(solution('''3\n1 100 101\n2\n''') == '2 3')\nassert(solution('''3\n1 100 101\n2\n''') == '2 3')\nassert(solution('''3\n1 100 101\n2\n''') == '2 3')\nassert(solution('''3\n1 100 101\n2\n''') == '2 3')\nassert(solution('''3\n1 100 101\n2\n''') == '2 3')\nassert(solution('''3\n1 100 101\n2\n''') == '2 3')\nassert(solution('''3\n1 100 101\n2\n''') == '2 3')\nassert(solution('''3\n1 100 101\n2\n''') == '2 3')\nassert(solution('''3\n1 100 101\n2\n''') == '2 3')\nassert(solution('''3\n1 100 101\n2\n''') == '2 3')\nassert(solution('''3\n1 100 101\n2\n''') == '2 3')\nassert(solution('''3\n1 100 101\n2\n''') == '2 3')\nassert(solution('''3\n1 100 101\n2\n''') == '2 3')\nassert(solution('''3\n1 100 101\n2\n''') == '2 3')\nassert(solution('''3\n1 100 101\n2\n''') == '2 3')\nassert(solution('''3\n1 100 101\n2\n''') == '2 3')\nassert(solution('''3\n1 100 101\n2\n''') == '2 3')\nassert(solution('''3\n1 100 101\n2\n''') == '2 3')\nassert(solution('''3\n1 100 101\n2\n''') == '2 3')\nassert(solution('''3\n1 100 101\n2\n''') == '2 3')\nassert(solution('''3\n1 100 101\n2\n''') == '2 3')\nassert(solution('''3\n1 100 101\n2\n''') == '2 3')\nassert(solution('''3\n1 100 101\n2\n''') == '2 3')\nassert(solution('''3\n1 100 101\n2\n''') == '2 3')\nassert(solution('''3\n1 100 101\n2\n''') == '2 3')\nassert(solution('''3\n1 100 101\n2\n''') == '2 3')\nassert(solution('''3\n1 100 101\n2\n''') == '2 3')\nassert(solution('''3\n1 100 101\n2\n''') == '2 3')\nassert(solution('''3\n1 100 101\n2\n''') == '2 3')\nassert(solution('''"
    },
    {
        "number": 1445,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    cubes = [int(x) for x in stdin.readline().split()]\n    for _ in range(n):\n        cubes.reverse()\n        cubes[0], cubes[1] = cubes[1], cubes[0]\n        cubes[-1], cubes[-2] = cubes[-2], cubes[-1]\n    return''.join(map(str, cubes))"
    },
    {
        "number": 1446,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    c = [int(x) for x in stdin.split()]\n    d = [[-1] * k for _ in range(k)]\n    for _ in range(m):\n        u, v, x = [int(x) for x in stdin.split()]\n        d[u - 1][v - 1] = x\n    for i in range(k):\n        for j in range(k):\n            if i == j:\n                d[i][j] = 0\n            else:\n                d[i][j] = min(d[i][j], d[i][i] + d[i][j])\n    if d[0][k - 1] == -1:\n        return \"No\"\n    return \"Yes\\n\" + \"\\n\".join([\" \".join([str(x) for x in row]) for row in d])"
    },
    {
        "number": 1447,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(1.0 / (m * n))"
    },
    {
        "number": 1448,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d = [int(x) for x in stdin.split()]\n    m = int(stdin.readline())\n    cornfield = [[0] * (n + 1) for _ in range(n + 1)]\n    for _ in range(m):\n        x, y = [int(x) for x in stdin.split()]\n        cornfield[x][y] = 1\n    for i in range(1, n + 1):\n        cornfield[i][0] = 1\n        cornfield[0][i] = 1\n    for i in range(1, n + 1):\n        cornfield[0][i] = 1\n        cornfield[i][0] = 1\n    for i in range(1, n + 1):\n        cornfield[i][n] = 1\n        cornfield[n][i] = 1\n    for i in range(1, n + 1):\n        cornfield[n][i] = 1\n        cornfield[i][n] = 1\n    for i in range(1, n + 1):\n        cornfield[i][0] = 1\n        cornfield[0][i] = 1\n    for i in range(1, n + 1):\n        cornfield[0][i] = 1\n        cornfield[i][0] = 1\n    for i in range(1, n + 1):\n        cornfield[i][n] = 1\n        cornfield[n][i] = 1\n    for i in range(1, n + 1):\n        cornfield[n][i] = 1\n        cornfield[i][n] = 1\n    for i in range(1, n + 1):\n        cornfield[i][0] = 1\n        cornfield[0][i] = 1\n    for i in range(1, n + 1):\n        cornfield[0][i] = 1\n        cornfield[i][0] = 1\n    for i in range(1, n + 1):\n        cornfield[i][n] = 1\n        cornfield[n][i] = 1\n    for i in range(1, n + 1):\n        cornfield[n][i] = 1\n        cornfield[i][n] = 1\n    for i in range(1, n + 1):\n        cornfield[i][0] = 1\n        cornfield[0][i] = 1\n    for i in range(1, n + 1):\n        cornfield[0][i] = 1\n        cornfield[i][0] = 1\n    for i in range(1, n + 1):\n        cornfield[i][n] = 1\n        cornfield[n][i] = 1\n    for i in range(1, n + 1):\n        cornfield[n][i] = 1\n        cornfield[i][n] = 1\n    for i in range(1, n + 1):\n        cornfield[i][0] = 1\n        cornfield[0][i] = 1\n    for i in range(1, n + 1):\n        cornfield[0][i] = 1\n        cornfield[i][0] = 1\n    for i in range(1, n + 1):\n        cornfield[i][n] = 1\n        cornfield[n][i] = 1\n    for i in range(1, n + 1):\n        cornfield[n][i] = 1\n        cornfield[i][n] = 1\n    for i in range(1, n + 1):\n        cornfield[i][0] = 1\n        cornfield[0][i] = 1\n    for i in range(1, n + 1):\n        cornfield[0][i] = 1\n        cornfield[i][0] = 1\n    for i in range(1, n + 1):\n        cornfield[i][n] = 1\n        cornfield[n][i] = 1\n    for i in range(1, n + 1):\n        cornfield[n][i] = 1\n        cornfield[i][n] = 1\n    for i in range(1, n + 1):\n        cornfield[i][0] = 1\n        cornfield[0][i] = 1\n    for i in range(1, n + 1):\n        cornfield[0][i] = 1\n        cornfield[i][0] = 1\n    for i in range(1, n + 1):\n        cornfield[i][n] = 1\n        cornfield[n][i] = 1\n    for i in range(1, n + 1):\n        cornfield[n][i] = 1\n        cornfield[i][n] = 1\n    for i in range(1, n + 1):\n        cornfield[i][0] = 1\n        cornfield[0][i] = 1\n    for i in range(1, n + 1):\n        cornfield[0][i] = 1\n        cornfield[i][0] = 1\n    for i in range(1, n + 1):\n        cornfield[i][n] = 1\n        cornfield[n][i] = 1\n    for i in range(1, n + 1):\n        cornfield[n][i] = 1\n        cornfield[i][n] = 1\n    for i in range(1, n + 1):\n        cornfield[i][0] = 1\n        cornfield[0][i] = 1\n    for i in range(1, n + 1):\n        cornfield[0][i] = 1\n        cornfield[i][0] = 1\n    for i in range(1, n + 1):\n        cornfield[i][n] = 1\n        cornfield[n][i] = 1\n    for i in range(1, n + 1):\n        cornfield[n][i] = 1\n        cornfield[i][n] = 1\n    for i in range(1, n + 1):\n        cornfield[i][0] = 1\n        cornfield[0][i] = 1\n    for i in range(1, n + 1):\n        cornfield[0][i] = 1\n        cornfield[i][0] = 1\n    for i in range(1, n + 1):\n        cornfield[i][n] = 1\n        corn"
    },
    {
        "number": 1449,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n, k = map(int, stdin.readline().strip().split())\n        a = list(map(int, stdin.readline().strip().split()))\n        m = 0\n        for i in range(n):\n            if a[i] == 0:\n                continue\n            if m == 0:\n                m = 1\n            if m > k:\n                break\n            for j in range(i + 1, n):\n                if a[j] == 0:\n                    continue\n                if m == 0:\n                    m = 1\n                if m > k:\n                    break\n                a[j] += a[i]\n        if m == 0:\n            print(-1)\n        else:\n            print(m)\n    return \"\""
    },
    {
        "number": 1450,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    if n == 0:\n        return \"\"\n    if n == 1:\n        return s\n    if n == 2:\n        if s[0] == s[1]:\n            return s[0] + s[0]\n        else:\n            return s[0] + s[1]\n    if n == 3:\n        if s[0] == s[1] and s[1] == s[2]:\n            return s[0] + s[0]\n        elif s[0] == s[1] and s[1]!= s[2]:\n            return s[0] + s[2]\n        elif s[0]!= s[1] and s[1] == s[2]:\n            return s[1] + s[1]\n        else:\n            return s[0] + s[2]\n    if n == 4:\n        if s[0] == s[1] and s[1] == s[2]:\n            return s[0] + s[0]\n        elif s[0] == s[1] and s[1]!= s[2]:\n            return s[0] + s[2]\n        elif s[0]!= s[1] and s[1] == s[2]:\n            return s[1] + s[1]\n        else:\n            return s[0] + s[2]\n    if n == 5:\n        if s[0] == s[1] and s[1] == s[2]:\n            return s[0] + s[0]\n        elif s[0] == s[1] and s[1]!= s[2]:\n            return s[0] + s[2]\n        elif s[0]!= s[1] and s[1] == s[2]:\n            return s[1] + s[1]\n        else:\n            return s[0] + s[2]\n    if n == 6:\n        if s[0] == s[1] and s[1] == s[2]:\n            return s[0] + s[0]\n        elif s[0] == s[1] and s[1]!= s[2]:\n            return s[0] + s[2]\n        elif s[0]!= s[1] and s[1] == s[2]:\n            return s[1] + s[1]\n        else:\n            return s[0] + s[2]\n    if n == 7:\n        if s[0] == s[1] and s[1] == s[2]:\n            return s[0] + s[0]\n        elif s[0] == s[1] and s[1]!= s[2]:\n            return s[0] + s[2]\n        elif s[0]!= s[1] and s[1] == s[2]:\n            return s[1] + s[1]\n        else:\n            return s[0] + s[2]\n    if n == 8:\n        if s[0] == s[1] and s[1] == s[2]:\n            return s[0] + s[0]\n        elif s[0] == s[1] and s[1]!= s[2]:\n            return s[0] + s[2]\n        elif s[0]!= s[1] and s[1] == s[2]:\n            return s[1] + s[1]\n        else:\n            return s[0] + s[2]\n    if n == 9:\n        if s[0] == s[1] and s[1] == s[2]:\n            return s[0] + s[0]\n        elif s[0] == s[1] and s[1]!= s[2]:\n            return s[0] + s[2]\n        elif s[0]!= s[1] and s[1] == s[2]:\n            return s[1] + s[1]\n        else:\n            return s[0] + s[2]\n    if n == 10:\n        if s[0] == s[1] and s[1] == s[2]:\n            return s[0] + s[0]\n        elif s[0] == s[1] and s[1]!= s[2]:\n            return s[0] + s[2]\n        elif s[0]!= s[1] and s[1] == s[2]:\n            return s[1] + s[1]\n        else:\n            return s[0] + s[2]\n    if n == 11:\n        if s[0] == s[1] and s[1] == s[2]:\n            return s[0] + s[0]\n        elif s[0] == s[1] and s[1]!= s[2]:\n            return s[0] + s[2]\n        elif s[0]!= s[1] and s[1] == s[2]:\n            return s[1] + s[1]\n        else:\n            return s[0] + s[2]\n    if n == 12:\n        if s[0] == s[1] and s[1] == s[2]:\n            return s[0] + s[0]\n        elif s[0] == s[1] and s[1]!= s[2]:\n            return s[0] + s[2]\n        elif s[0]!= s[1] and s[1] == s[2]:\n            return s[1] + s[1]\n        else:\n            return s[0] + s[2]\n    if n == 13:\n        if s[0] == s[1] and s[1] == s[2]:\n            return s[0] + s[0]\n        elif s[0] == s[1] and s[1]!= s[2]:\n            return s[0] + s[2]\n        elif s[0]!= s[1] and s[1] == s[2]:\n            return s[1] + s[1]\n        else:\n            return s[0] + s[2]\n    if n == 14:\n        if s[0] == s[1] and s[1] == s[2]:\n            return s[0] + s[0]\n        elif s[0] == s[1] and s[1]!= s[2]:\n            return s[0] + s[2]\n        elif s[0]!= s["
    },
    {
        "number": 1451,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    l = [int(x) for x in stdin.split()]\n    return str(len([x for x in l if len(str(x)) <= k]))"
    },
    {
        "number": 1452,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h, w = [int(x) for x in stdin.split()]\n    r = [int(x) for x in stdin.split()]\n    c = [int(x) for x in stdin.split()]\n    return str(solution_recursive(h, w, r, c))\n\ndef"
    },
    {
        "number": 1453,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    a.reverse()\n    x = [0] * n\n    for i in range(n):\n        x[i] = sum(a[:i+1])\n    return''.join(map(str, x))"
    },
    {
        "number": 1454,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [list(map(int, stdin.split())) for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 0:\n                a[i][j] = -1\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == -1:\n                continue\n            if i == 0:\n                if a[i][j] < a[i+1][j]:\n                    a[i][j] = a[i][j] + a[i+1][j]\n            elif i == n-1:\n                if a[i][j] < a[i-1][j]:\n                    a[i][j] = a[i][j] + a[i-1][j]\n            else:\n                if a[i][j] < a[i-1][j] and a[i][j] < a[i+1][j]:\n                    a[i][j] = a[i][j] + a[i-1][j]\n    return str(max(map(sum, a)))"
    },
    {
        "number": 1455,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    m = int(sqrt(n))\n    if m * m == n:\n        return str(m)\n    return \"\"\n\nprint(solution(input()))\n\n\"\"\"\n\nimport math\n\ndef"
    },
    {
        "number": 1456,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 1457,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    ai_name, phone_name = stdin.split('\\n')\n    ai_name = ai_name.replace('#', '#')\n    phone_name = phone_name.replace('#', '#')\n    return min(len(ai_name), len(phone_name))"
    },
    {
        "number": 1458,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    for i in range(n):\n        for j in range(i, n):\n            if s[i:j+1] < s[i:j+1][::-1]:\n                print(i, j)\n                return \"YES\"\n    print(\"NO\")\n    return \"NO\""
    },
    {
        "number": 1459,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    d = list(map(int, stdin.readline().split()))\n    s, t = map(int, stdin.readline().split())\n    d.sort()\n    if s == t:\n        return str(d[0])\n    if s > t:\n        s, t = t, s\n    if s == 1:\n        return str(d[-1])\n    if s == n:\n        return str(d[0])\n    if t == n:\n        return str(d[-1])\n    if s == t - 1:\n        return str(d[-1] + d[0])\n    if s == t + 1:\n        return str(d[-1] + d[0])\n    if s == t + 2:\n        return str(d[-1] + d[0])\n    if s == t - 2:\n        return str(d[-1] + d[0])\n    if s == t - 3:\n        return str(d[-1] + d[0])\n    if s == t + 3:\n        return str(d[-1] + d[0])\n    if s == t + 4:\n        return str(d[-1] + d[0])\n    if s == t - 4:\n        return str(d[-1] + d[0])\n    if s == t - 5:\n        return str(d[-1] + d[0])\n    if s == t + 5:\n        return str(d[-1] + d[0])\n    if s == t + 6:\n        return str(d[-1] + d[0])\n    if s == t - 6:\n        return str(d[-1] + d[0])\n    if s == t + 7:\n        return str(d[-1] + d[0])\n    if s == t - 7:\n        return str(d[-1] + d[0])\n    if s == t + 8:\n        return str(d[-1] + d[0])\n    if s == t - 8:\n        return str(d[-1] + d[0])\n    if s == t + 9:\n        return str(d[-1] + d[0])\n    if s == t - 9:\n        return str(d[-1] + d[0])\n    if s == t + 10:\n        return str(d[-1] + d[0])\n    if s == t - 10:\n        return str(d[-1] + d[0])\n    if s == t + 11:\n        return str(d[-1] + d[0])\n    if s == t - 11:\n        return str(d[-1] + d[0])\n    if s == t + 12:\n        return str(d[-1] + d[0])\n    if s == t - 12:\n        return str(d[-1] + d[0])\n    if s == t + 13:\n        return str(d[-1] + d[0])\n    if s == t - 13:\n        return str(d[-1] + d[0])\n    if s == t + 14:\n        return str(d[-1] + d[0])\n    if s == t - 14:\n        return str(d[-1] + d[0])\n    if s == t + 15:\n        return str(d[-1] + d[0])\n    if s == t - 15:\n        return str(d[-1] + d[0])\n    if s == t + 16:\n        return str(d[-1] + d[0])\n    if s == t - 16:\n        return str(d[-1] + d[0])\n    if s == t + 17:\n        return str(d[-1] + d[0])\n    if s == t - 17:\n        return str(d[-1] + d[0])\n    if s == t + 18:\n        return str(d[-1] + d[0])\n    if s == t - 18:\n        return str(d[-1] + d[0])\n    if s == t + 19:\n        return str(d[-1] + d[0])\n    if s == t - 19:\n        return str(d[-1] + d[0])\n    if s == t + 20:\n        return str(d[-1] + d[0])\n    if s == t - 20:\n        return str(d[-1] + d[0])\n    if s == t + 21:\n        return str(d[-1] + d[0])\n    if s == t - 21:\n        return str(d[-1] + d[0])\n    if s == t + 22:\n        return str(d[-1] + d[0])\n    if s == t - 22:\n        return str(d[-1] + d[0])\n    if s == t + 23:\n        return str(d[-1] + d[0])\n    if s == t - 23:\n        return str(d[-1] + d[0])\n    if s == t + 24:\n        return str(d[-1] + d[0])\n    if s == t - 24:\n        return str(d[-1] + d[0])\n    if s == t + 25:\n        return str(d[-1] + d[0])\n    if s == t - 25:\n        return str(d[-1] + d[0])\n    if s == t + 26:\n        return str(d[-1] + d[0])\n    if s == t - 26:\n        return str(d[-1] + d[0])\n    if s == t + 27:\n        return str(d[-1] + d[0])\n    if s == t - 27:\n        return str(d[-1] + d[0])\n    if s == t + 28:\n        return str(d[-1] + d[0])\n    if s == t - 28:\n        return str(d[-1] + d[0])\n    if s == t + 29:\n        return str(d[-1] + d[0])\n    if s == t - 29:\n        return str(d[-1] + d[0])\n    if s == t + 30:\n        return str(d[-1] + d[0])\n    if s == t - 30:\n        return"
    },
    {
        "number": 1460,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n > 500:\n        return \"Too big\"\n    if n == 0:\n        return \"0\"\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"2\"\n    if n == 3:\n        return \"3\"\n    if n == 4:\n        return \"4\"\n    if n == 5:\n        return \"5\"\n    if n == 6:\n        return \"6\"\n    if n == 7:\n        return \"7\"\n    if n == 8:\n        return \"8\"\n    if n == 9:\n        return \"9\"\n    if n == 10:\n        return \"10\"\n    if n == 11:\n        return \"11\"\n    if n == 12:\n        return \"12\"\n    if n == 13:\n        return \"13\"\n    if n == 14:\n        return \"14\"\n    if n == 15:\n        return \"15\"\n    if n == 16:\n        return \"16\"\n    if n == 17:\n        return \"17\"\n    if n == 18:\n        return \"18\"\n    if n == 19:\n        return \"19\"\n    if n == 20:\n        return \"20\"\n    if n == 21:\n        return \"21\"\n    if n == 22:\n        return \"22\"\n    if n == 23:\n        return \"23\"\n    if n == 24:\n        return \"24\"\n    if n == 25:\n        return \"25\"\n    if n == 26:\n        return \"26\"\n    if n == 27:\n        return \"27\"\n    if n == 28:\n        return \"28\"\n    if n == 29:\n        return \"29\"\n    if n == 30:\n        return \"30\"\n    if n == 31:\n        return \"31\"\n    if n == 32:\n        return \"32\"\n    if n == 33:\n        return \"33\"\n    if n == 34:\n        return \"34\"\n    if n == 35:\n        return \"35\"\n    if n == 36:\n        return \"36\"\n    if n == 37:\n        return \"37\"\n    if n == 38:\n        return \"38\"\n    if n == 39:\n        return \"39\"\n    if n == 40:\n        return \"40\"\n    if n == 41:\n        return \"41\"\n    if n == 42:\n        return \"42\"\n    if n == 43:\n        return \"43\"\n    if n == 44:\n        return \"44\"\n    if n == 45:\n        return \"45\"\n    if n == 46:\n        return \"46\"\n    if n == 47:\n        return \"47\"\n    if n == 48:\n        return \"48\"\n    if n == 49:\n        return \"49\"\n    if n == 50:\n        return \"50\"\n    if n == 51:\n        return \"51\"\n    if n == 52:\n        return \"52\"\n    if n == 53:\n        return \"53\"\n    if n == 54:\n        return \"54\"\n    if n == 55:\n        return \"55\"\n    if n == 56:\n        return \"56\"\n    if n == 57:\n        return \"57\"\n    if n == 58:\n        return \"58\"\n    if n == 59:\n        return \"59\"\n    if n == 60:\n        return \"60\"\n    if n == 61:\n        return \"61\"\n    if n == 62:\n        return \"62\"\n    if n == 63:\n        return \"63\"\n    if n == 64:\n        return \"64\"\n    if n == 65:\n        return \"65\"\n    if n == 66:\n        return \"66\"\n    if n == 67:\n        return \"67\"\n    if n == 68:\n        return \"68\"\n    if n == 69:\n        return \"69\"\n    if n == 70:\n        return \"70\"\n    if n == 71:\n        return \"71\"\n    if n == 72:\n        return \"72\"\n    if n == 73:\n        return \"73\"\n    if n == 74:\n        return \"74\"\n    if n == 75:\n        return \"75\"\n    if n == 76:\n        return \"76\"\n    if n == 77:\n        return \"77\"\n    if n == 78:\n        return \"78\"\n    if n == 79:\n        return \"79\"\n    if n == 80:\n        return \"80\"\n    if n == 81:\n        return \"81\"\n    if n == 82:\n        return \"82\"\n    if n == 83:\n        return \"83\"\n    if n == 84:\n        return \"84\"\n    if n == 85:\n        return \"85\"\n    if n == 86:\n        return \"86\"\n    if n == 87:\n        return \"87\"\n    if n == 88:\n        return \"88\"\n    if n == 89:\n        return \"89\"\n    if n == 90:\n        return \"90\"\n    if n == 91:\n        return \"91\"\n    if n == 92:\n        return \"92\"\n    if n == 93:\n        return \"93\"\n    if n == 94:\n        return \"94\"\n    if n == 95:\n        return \"95\"\n    if n == 96:\n        return \"96\"\n    if n == 97:\n        return \"97\"\n    if n == 98:\n        return \"98\"\n    if n == 99:\n        return \"99\"\n    if n == 100:\n        return \"100\"\n    if n == 101:\n        return \"101\"\n    if n == 102:\n        return \"102\"\n    if n == 103:\n        return \"103\"\n    if n == 104:\n        return \"104\"\n    if n == 105:\n        return \"105\"\n    if n == 106:\n        return \"106\"\n    if n == 107:\n        return \"107\"\n    if n == 108:\n        return \"108\"\n    if n == 109:\n        return \"109\"\n    if n == 110:\n        return \"110\"\n    if n == 111:\n        return \"111\"\n    if n == 112:\n        return \"112\"\n    if n == 113:\n        return \"113\"\n    if n"
    },
    {
        "number": 1461,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    f = list(map(int, stdin.split()))\n    w = list(map(int, stdin.split()))\n    s = [0] * n\n    m = [0] * n\n    for i in range(n):\n        s[i] = sum(w[j] for j in range(i, i + k))\n        m[i] = min(w[j] for j in range(i, i + k))\n    for i in range(n):\n        print(s[i], m[i])"
    },
    {
        "number": 1462,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    letters = stdin.strip()\n    return str(sum([letters.count(x) for x in set(letters)]))"
    },
    {
        "number": 1463,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    grid = [list(map(int, stdin.split())) for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j]!= 1:\n                if grid[i][j] == sum(grid[i]) or grid[j][i] == sum(grid[j]):\n                    return \"Yes\"\n    return \"No\""
    },
    {
        "number": 1464,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    titles = [stdin[i:i+n] for i in range(len(stdin) - n + 1)]\n    titles.sort()\n    return titles[0]"
    },
    {
        "number": 1465,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    if n == 1:\n        return '-1'\n    if n == 2:\n        return '1 1'\n    if n == 3:\n        return '1 2'\n    if n == 4:\n        return '2 1 3'\n    if n == 5:\n        return '2 1 3'\n    if n == 6:\n        return '2 1 3'\n    if n == 7:\n        return '2 1 3'\n    if n == 8:\n        return '2 1 3'\n    if n == 9:\n        return '2 1 3'\n    if n == 10:\n        return '2 1 3'\n    if n == 11:\n        return '2 1 3'\n    if n == 12:\n        return '2 1 3'\n    if n == 13:\n        return '2 1 3'\n    if n == 14:\n        return '2 1 3'\n    if n == 15:\n        return '2 1 3'\n    if n == 16:\n        return '2 1 3'\n    if n == 17:\n        return '2 1 3'\n    if n == 18:\n        return '2 1 3'\n    if n == 19:\n        return '2 1 3'\n    if n == 20:\n        return '2 1 3'\n    if n == 21:\n        return '2 1 3'\n    if n == 22:\n        return '2 1 3'\n    if n == 23:\n        return '2 1 3'\n    if n == 24:\n        return '2 1 3'\n    if n == 25:\n        return '2 1 3'\n    if n == 26:\n        return '2 1 3'\n    if n == 27:\n        return '2 1 3'\n    if n == 28:\n        return '2 1 3'\n    if n == 29:\n        return '2 1 3'\n    if n == 30:\n        return '2 1 3'\n    if n == 31:\n        return '2 1 3'\n    if n == 32:\n        return '2 1 3'\n    if n == 33:\n        return '2 1 3'\n    if n == 34:\n        return '2 1 3'\n    if n == 35:\n        return '2 1 3'\n    if n == 36:\n        return '2 1 3'\n    if n == 37:\n        return '2 1 3'\n    if n == 38:\n        return '2 1 3'\n    if n == 39:\n        return '2 1 3'\n    if n == 40:\n        return '2 1 3'\n    if n == 41:\n        return '2 1 3'\n    if n == 42:\n        return '2 1 3'\n    if n == 43:\n        return '2 1 3'\n    if n == 44:\n        return '2 1 3'\n    if n == 45:\n        return '2 1 3'\n    if n == 46:\n        return '2 1 3'\n    if n == 47:\n        return '2 1 3'\n    if n == 48:\n        return '2 1 3'\n    if n == 49:\n        return '2 1 3'\n    if n == 50:\n        return '2 1 3'\n    if n == 51:\n        return '2 1 3'\n    if n == 52:\n        return '2 1 3'\n    if n == 53:\n        return '2 1 3'\n    if n == 54:\n        return '2 1 3'\n    if n == 55:\n        return '2 1 3'\n    if n == 56:\n        return '2 1 3'\n    if n == 57:\n        return '2 1 3'\n    if n == 58:\n        return '2 1 3'\n    if n == 59:\n        return '2 1 3'\n    if n == 60:\n        return '2 1 3'\n    if n == 61:\n        return '2 1 3'\n    if n == 62:\n        return '2 1 3'\n    if n == 63:\n        return '2 1 3'\n    if n == 64:\n        return '2 1 3'\n    if n == 65:\n        return '2 1 3'\n    if n == 66:\n        return '2 1 3'\n    if n == 67:\n        return '2 1 3'\n    if n == 68:\n        return '2 1 3'\n    if n == 69:\n        return '2 1 3'\n    if n == 70:\n        return '2 1 3'\n    if n == 71:\n        return '2 1 3'\n    if n == 72:\n        return '2 1 3'\n    if n == 73:\n        return '2 1 3'\n    if n == 74:\n        return '2 1 3'\n    if n == 75:\n        return '2 1 3'\n    if n == 76:\n        return '2 1 3'\n    if n == 77:\n        return '2 1 3'\n    if n == 78:\n        return '2 1 3'\n    if n == 79:\n        return '2 1 3'\n    if n == 80:\n        return '2 1 3'\n    if n == 81:\n        return '2 1 3'\n    if n == 82:\n        return '2 1 3'\n    if n == 83:\n        return '2 1 3'\n    if n == 84:\n        return '2 1 3'\n    if n == 85:\n        return '2 1 3'\n    if n == 86:\n        return '2 1 3'\n    if n == 87:\n        return '2 1 3'\n"
    },
    {
        "number": 1466,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    edges = [tuple(int(x) for x in stdin.split()) for _ in range(m)]\n    edges.sort(key=lambda x: x[2])\n    good_vertices = set()\n    for i in range(1, n):\n        good_vertices.add(i)\n    for i in range(m):\n        if edges[i][0] in good_vertices and edges[i][1] in good_vertices:\n            good_vertices.remove(edges[i][0])\n            good_vertices.remove(edges[i][1])\n    return str(len(good_vertices)) + '\\n' +''.join(str(x) for x in good_vertices)"
    },
    {
        "number": 1467,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    if n == 1:\n        return '-1'\n    if n == 2:\n        return str(1)\n    a.sort()\n    a.append(a[-1] + 1)\n    a.insert(0, 0)\n    a.append(a[-1] + 1)\n    a.insert(0, 0)\n    a.append(a[-1] + 1)\n    a.insert(0, 0)\n    a.append(a[-1] + 1)\n    a.insert(0, 0)\n    a.append(a[-1] + 1)\n    a.insert(0, 0)\n    a.append(a[-1] + 1)\n    a.insert(0, 0)\n    a.append(a[-1] + 1)\n    a.insert(0, 0)\n    a.append(a[-1] + 1)\n    a.insert(0, 0)\n    a.append(a[-1] + 1)\n    a.insert(0, 0)\n    a.append(a[-1] + 1)\n    a.insert(0, 0)\n    a.append(a[-1] + 1)\n    a.insert(0, 0)\n    a.append(a[-1] + 1)\n    a.insert(0, 0)\n    a.append(a[-1] + 1)\n    a.insert(0, 0)\n    a.append(a[-1] + 1)\n    a.insert(0, 0)\n    a.append(a[-1] + 1)\n    a.insert(0, 0)\n    a.append(a[-1] + 1)\n    a.insert(0, 0)\n    a.append(a[-1] + 1)\n    a.insert(0, 0)\n    a.append(a[-1] + 1)\n    a.insert(0, 0)\n    a.append(a[-1] + 1)\n    a.insert(0, 0)\n    a.append(a[-1] + 1)\n    a.insert(0, 0)\n    a.append(a[-1] + 1)\n    a.insert(0, 0)\n    a.append(a[-1] + 1)\n    a.insert(0, 0)\n    a.append(a[-1] + 1)\n    a.insert(0, 0)\n    a.append(a[-1] + 1)\n    a.insert(0, 0)\n    a.append(a[-1] + 1)\n    a.insert(0, 0)\n    a.append(a[-1] + 1)\n    a.insert(0, 0)\n    a.append(a[-1] + 1)\n    a.insert(0, 0)\n    a.append(a[-1] + 1)\n    a.insert(0, 0)\n    a.append(a[-1] + 1)\n    a.insert(0, 0)\n    a.append(a[-1] + 1)\n    a.insert(0, 0)\n    a.append(a[-1] + 1)\n    a.insert(0, 0)\n    a.append(a[-1] + 1)\n    a.insert(0, 0)\n    a.append(a[-1] + 1)\n    a.insert(0, 0)\n    a.append(a[-1] + 1)\n    a.insert(0, 0)\n    a.append(a[-1] + 1)\n    a.insert(0, 0)\n    a.append(a[-1] + 1)\n    a.insert(0, 0)\n    a.append(a[-1] + 1)\n    a.insert(0, 0)\n    a.append(a[-1] + 1)\n    a.insert(0, 0)\n    a.append(a[-1] + 1)\n    a.insert(0, 0)\n    a.append(a[-1] + 1)\n    a.insert(0, 0)\n    a.append(a[-1] + 1)\n    a.insert(0, 0)\n    a.append(a[-1] + 1)\n    a.insert(0, 0)\n    a.append(a[-1] + 1)\n    a.insert(0, 0)\n    a.append(a[-1] + 1)\n    a.insert(0, 0)\n    a.append(a[-1] + 1)\n    a.insert(0, 0)\n    a.append(a[-1] + 1)\n    a.insert(0, 0)\n    a.append(a[-1] + 1)\n    a.insert(0, 0)\n    a.append(a[-1] + 1)\n    a.insert(0, 0)\n    a.append(a[-1] + 1)\n    a.insert(0, 0)\n    a.append(a[-1] + 1)\n    a.insert(0, 0)\n    a.append(a["
    },
    {
        "number": 1468,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    hashtags = [stdin.strip() for stdin in stdin.split('\\n')]\n    hashtags.sort()\n    hashtags.sort(key=len)\n    hashtags.sort(key=lambda x: x[1:])\n    hashtags.sort(key=lambda x: x[1:].lower())\n    hashtags.sort(key=lambda x: x[1:].lower())\n    hashtags.sort(key=lambda x: x[1:].lower())\n    hashtags.sort(key=lambda x: x[1:].lower())\n    hashtags.sort(key=lambda x: x[1:].lower())\n    hashtags.sort(key=lambda x: x[1:].lower())\n    hashtags.sort(key=lambda x: x[1:].lower())\n    hashtags.sort(key=lambda x: x[1:].lower())\n    hashtags.sort(key=lambda x: x[1:].lower())\n    hashtags.sort(key=lambda x: x[1:].lower())\n    hashtags.sort(key=lambda x: x[1:].lower())\n    hashtags.sort(key=lambda x: x[1:].lower())\n    hashtags.sort(key=lambda x: x[1:].lower())\n    hashtags.sort(key=lambda x: x[1:].lower())\n    hashtags.sort(key=lambda x: x[1:].lower())\n    hashtags.sort(key=lambda x: x[1:].lower())\n    hashtags.sort(key=lambda x: x[1:].lower())\n    hashtags.sort(key=lambda x: x[1:].lower())\n    hashtags.sort(key=lambda x: x[1:].lower())\n    hashtags.sort(key=lambda x: x[1:].lower())\n    hashtags.sort(key=lambda x: x[1:].lower())\n    hashtags.sort(key=lambda x: x[1:].lower())\n    hashtags.sort(key=lambda x: x[1:].lower())\n    hashtags.sort(key=lambda x: x[1:].lower())\n    hashtags.sort(key=lambda x: x[1:].lower())\n    hashtags.sort(key=lambda x: x[1:].lower())\n    hashtags.sort(key=lambda x: x[1:].lower())\n    hashtags.sort(key=lambda x: x[1:].lower())\n    hashtags.sort(key=lambda x: x[1:].lower())\n    hashtags.sort(key=lambda x: x[1:].lower())\n    hashtags.sort(key=lambda x: x[1:].lower())\n    hashtags.sort(key=lambda x: x[1:].lower())\n    hashtags.sort(key=lambda x: x[1:].lower())\n    hashtags.sort(key=lambda x: x[1:].lower())\n    hashtags.sort(key=lambda x: x[1:].lower())\n    hashtags.sort(key=lambda x: x[1:].lower())\n    hashtags.sort(key=lambda x: x[1:].lower())\n    hashtags.sort(key=lambda x: x[1:].lower())\n    hashtags.sort(key=lambda x: x[1:].lower())\n    hashtags.sort(key=lambda x: x[1:].lower())\n    hashtags.sort(key=lambda x: x[1:].lower())\n    hashtags.sort(key=lambda x: x[1:].lower())\n    hashtags.sort(key=lambda x: x[1:].lower())\n    hashtags.sort(key=lambda x: x[1:].lower())\n    hashtags.sort(key=lambda x: x[1:].lower())\n    hashtags.sort(key=lambda x: x[1:].lower())\n    hashtags.sort(key=lambda x: x[1:].lower())\n    hashtags.sort(key=lambda x: x[1:].lower())\n    hashtags.sort(key=lambda x: x[1:].lower())\n    hashtags.sort(key=lambda x: x[1:].lower())\n    hashtags.sort(key=lambda x: x[1:].lower())\n    hashtags.sort(key=lambda x: x[1:].lower())\n    hashtags.sort(key=lambda x: x[1:].lower())\n    hashtags.sort(key=lambda x: x[1:].lower())\n    hashtags.sort(key=lambda x: x[1:].lower())\n    hashtags.sort(key=lambda x: x[1:].lower())\n    hashtags.sort(key=lambda x: x[1:].lower())\n    hashtags.sort(key=lambda x: x[1:].lower())\n    hashtags.sort(key=lambda x: x[1:].lower())\n    hashtags.sort(key=lambda x: x[1:].lower())\n    hashtags.sort(key=lambda x: x[1:].lower())\n    hashtags.sort(key=lambda x: x[1:].lower())\n    hashtags.sort(key=lambda x: x[1:].lower())\n    hashtags.sort(key=lambda x: x[1:].lower())\n    hashtags.sort(key=lambda x: x[1:].lower())\n"
    },
    {
        "number": 1469,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 1470,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x < 7:\n        return \"0\"\n    if x == 7:\n        return \"1\"\n    if x == 8:\n        return \"2\"\n    if x == 9:\n        return \"3\"\n    if x == 10:\n        return \"4\"\n    if x == 11:\n        return \"5\"\n    if x == 12:\n        return \"6\"\n    if x == 13:\n        return \"7\"\n    if x == 14:\n        return \"8\"\n    if x == 15:\n        return \"9\""
    },
    {
        "number": 1471,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    edges = [tuple(map(int, line.split())) for line in stdin.readlines()]\n    edges.sort(key=lambda x: x[2])\n    colors = [0] * N\n    for u, v, w in edges:\n        if colors[u - 1] == colors[v - 1]:\n            if w % 2 == 0:\n                return \"IMPOSSIBLE\"\n        colors[u - 1] = 1 - colors[u - 1]\n        colors[v - 1] = 1 - colors[v - 1]\n    return \"\".join(map(str, colors))"
    },
    {
        "number": 1472,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = [int(x) for x in stdin.split()]\n    graph = [[] for _ in range(n)]\n    for _ in range(n - 1):\n        a, b = [int(x) for x in stdin.split()]\n        graph[a - 1].append(b - 1)\n        graph[b - 1].append(a - 1)\n    distances = [0] * n\n    for i in range(n):\n        distances[i] = bfs(graph, i, x - 1, y - 1)\n    return '\\n'.join(str(x) for x in distances)\n\n\ndef"
    },
    {
        "number": 1473,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 1474,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    h = list(map(int, stdin.readline().split()))\n    return str(int(1e9 + 7) % (pow(10, 9) + 7))"
    },
    {
        "number": 1475,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, b, k, x = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    a = [str(x) for x in a]\n    a = ''.join(a)\n    a = int(a)\n    a = a % x\n    a = a % (10 ** 9 + 7)\n    return str(a)"
    },
    {
        "number": 1476,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1 or n > 5000:\n        raise ValueError(\"Invalid number of students\")\n    return \"\".join(map(str, solve(n)))\n\n\ndef"
    },
    {
        "number": 1477,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    dependencies = [set() for _ in range(n)]\n    for _ in range(m):\n        a, b = [int(x) for x in stdin.split()]\n        dependencies[a].add(b)\n    tasks = [set() for _ in range(n)]\n    for i in range(n):\n        if not dependencies[i]:\n            tasks[i].add(i)\n    for i in range(n):\n        for j in dependencies[i]:\n            tasks[j].update(tasks[i])\n    tasks = [list(t) for t in tasks]\n    tasks.sort(key=len)\n    tasks.reverse()\n    coprocessor_calls = 0\n    for t in tasks:\n        if t:\n            coprocessor_calls += 1\n            for i in t:\n                dependencies[i].clear()\n    return str(coprocessor_calls)"
    },
    {
        "number": 1478,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nThe tests are implemented in the file \"test_solution.py\" which needs to be present in the same directory.\n\n\"\"\"\n\ndef"
    },
    {
        "number": 1479,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 1480,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    a.reverse()\n    print(a)\n    for i in range(k):\n        a[i] = a[i] - 1\n    print(a)\n    return ''"
    },
    {
        "number": 1481,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    board = [list(stdin.readline().strip()) for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == 'o':\n                if i > 0 and board[i - 1][j] == 'o':\n                    if j > 0 and board[i][j - 1] == 'o':\n                        if i < n - 1 and board[i + 1][j] == 'o':\n                            if j < n - 1 and board[i][j + 1] == 'o':\n                                return 'NO'\n    return 'YES'"
    },
    {
        "number": 1482,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    res = []\n    for i in range(k):\n        res.append(a[i])\n        res.append(a[n - 1 - i])\n    return''.join(map(str, res))"
    },
    {
        "number": 1483,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    p = list(map(int, stdin.readline().split()))\n    \n    for i in range(1, n):\n        if p[i] == i:\n            p[i] = -1\n    \n    for i in range(1, n):\n        if p[i]!= -1:\n            p[p[i]] = i\n    \n    for i in range(1, n):\n        if p[i] == -1:\n            p[i] = i\n    \n    for i in range(1, n):\n        if p[i]!= i:\n            p[i] = p[p[i]]\n    \n    for i in range(1, n):\n        if p[i] == i:\n            p[i] = -1\n    \n    for i in range(1, n):\n        if p[i]!= -1:\n            p[p[i]] = i\n    \n    for i in range(1, n):\n        if p[i] == -1:\n            p[i] = i\n    \n    for i in range(1, n):\n        if p[i]!= i:\n            p[i] = p[p[i]]\n    \n    for i in range(1, n):\n        if p[i] == i:\n            p[i] = -1\n    \n    for i in range(1, n):\n        if p[i]!= -1:\n            p[p[i]] = i\n    \n    for i in range(1, n):\n        if p[i] == -1:\n            p[i] = i\n    \n    for i in range(1, n):\n        if p[i]!= i:\n            p[i] = p[p[i]]\n    \n    for i in range(1, n):\n        if p[i] == i:\n            p[i] = -1\n    \n    for i in range(1, n):\n        if p[i]!= -1:\n            p[p[i]] = i\n    \n    for i in range(1, n):\n        if p[i] == -1:\n            p[i] = i\n    \n    for i in range(1, n):\n        if p[i]!= i:\n            p[i] = p[p[i]]\n    \n    for i in range(1, n):\n        if p[i] == i:\n            p[i] = -1\n    \n    for i in range(1, n):\n        if p[i]!= -1:\n            p[p[i]] = i\n    \n    for i in range(1, n):\n        if p[i] == -1:\n            p[i] = i\n    \n    for i in range(1, n):\n        if p[i]!= i:\n            p[i] = p[p[i]]\n    \n    for i in range(1, n):\n        if p[i] == i:\n            p[i] = -1\n    \n    for i in range(1, n):\n        if p[i]!= -1:\n            p[p[i]] = i\n    \n    for i in range(1, n):\n        if p[i] == -1:\n            p[i] = i\n    \n    for i in range(1, n):\n        if p[i]!= i:\n            p[i] = p[p[i]]\n    \n    for i in range(1, n):\n        if p[i] == i:\n            p[i] = -1\n    \n    for i in range(1, n):\n        if p[i]!= -1:\n            p[p[i]] = i\n    \n    for i in range(1, n):\n        if p[i] == -1:\n            p[i] = i\n    \n    for i in range(1, n):\n        if p[i]!= i:\n            p[i] = p[p[i]]\n    \n    for i in range(1, n):\n        if p[i] == i:\n            p[i] = -1\n    \n    for i in range(1, n):\n        if p[i]!= -1:\n            p[p[i]] = i\n    \n    for i in range(1, n):\n        if p[i] == -1:\n            p[i] = i\n    \n    for i in range(1, n):\n        if p[i]!= i:\n            p[i] = p[p[i]]\n    \n    for i in range(1, n):\n        if p[i] == i:\n            p[i] = -1\n    \n    for i in range(1, n):\n        if p[i]!= -1:\n            p[p[i]] = i\n    \n    for i in range(1, n):\n        if p[i] == -1:\n            p[i] = i\n    \n    for i in range(1, n):\n        if p[i]!= i:\n            p[i] = p[p[i]]\n    \n    for i in range(1, n):\n        if p[i] == i:\n            p[i] = -1\n    \n    for i in range(1, n):\n        if p[i]!= -1:\n            p[p[i]] = i\n    \n    for i in range(1, n):\n        if p[i] == -1:\n            p[i] = i\n    \n    for i in range(1, n):\n        if p[i]!= i:\n            p[i] = p[p[i]]\n    \n    for i in range(1, n):\n        if p[i] == i:\n            p[i] = -1\n    \n    for i in range(1, n"
    },
    {
        "number": 1484,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a = [0] + a + [0]\n    a"
    },
    {
        "number": 1485,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    a.reverse()\n    print(a)\n    return str(a[0] * a[1])"
    },
    {
        "number": 1486,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    x = list(map(int, stdin.readline().split()))\n    min_cost = [0] * n\n    max_cost = [0] * n\n    for i in range(n):\n        min_cost[i] = x[i]\n        max_cost[i] = x[i]\n    for i in range(n):\n        for j in range(i + 1, n):\n            if x[i] < x[j]:\n                min_cost[j] = min(min_cost[j], min_cost[i] + x[j])\n                max_cost[j] = max(max_cost[j], max_cost[i] + x[j])\n            else:\n                min_cost[i] = min(min_cost[i], min_cost[j] + x[i])\n                max_cost[i] = max(max_cost[i], max_cost[j] + x[i])\n    for i in range(n):\n        print(min_cost[i], max_cost[i])"
    },
    {
        "number": 1487,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.splitlines()[0]\n    t = stdin.splitlines()[1]\n    n = len(s)\n    if n!= len(t):\n        return \"impossible\"\n    else:\n        count = 0\n        for i in range(n):\n            if s[i]!= t[i]:\n                count += 1\n        return \"\".join([\"0\" if s[i] == \"1\" else \"1\" for i in range(n)])\n\nprint(solution(input()))\n"
    },
    {
        "number": 1488,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    total = 0\n    for i in range(n):\n        total += a[i] * (n - i)\n    return str(total) + \" \" + str(total // n)"
    },
    {
        "number": 1489,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    points = [tuple(map(int, line.split())) for line in stdin.readlines()]\n    return str(len(set(point for point in points if point[0] == point[1])))"
    },
    {
        "number": 1490,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    toys = list(map(int, stdin.split()))\n    toys.sort()\n    toys_set = set(toys)\n    toys_count = {}\n    for toy in toys:\n        if toy in toys_set:\n            toys_count[toy] = toys_count.get(toy, 0) + 1\n    toys_count = sorted(toys_count.items(), key=lambda x: x[1], reverse=True)\n    toys_count = [toy for toy, count in toys_count if count <= m]\n    return''.join(map(str, toys_count))"
    },
    {
        "number": 1491,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2!= 0:\n        return '0'\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a.reverse()\n    b = [0] * n\n    b[0] = a[0]\n    b[1] = a[1]\n    for i in range(2, n):\n        b[i] = a[i] + b[i - 2]\n    b.sort()\n    b.reverse()\n    c = [0] * n\n    c[0] = b[0]\n    c[1] = b[1]\n    for i in range(2, n):\n        c[i] = b[i] - c[i - 2]\n    c.sort()\n    c.reverse()\n    return str(c[(n - 1) // 2])\n\nprint(solution(input()))\n"
    },
    {
        "number": 1492,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    forest = [list(stdin.strip()) for _ in range(n)]\n    trees = []\n    for i in range(n):\n        for j in range(m):\n            if forest[i][j] == 'X':\n                trees.append((i, j))\n    trees = sorted(trees)\n    trees = [trees[0]]\n    for i in range(1, len(trees)):\n        trees[i] = (trees[i][0] - trees[i - 1][0], trees[i][1] - trees[i - 1][1])\n    trees = sorted(trees)\n    trees = [trees[0]]\n    for i in range(1, len(trees)):\n        trees[i] = (trees[i][0] - trees[i - 1][0], trees[i][1] - trees[i - 1][1])\n    trees = sorted(trees)\n    trees = [trees[0]]\n    for i in range(1, len(trees)):\n        trees[i] = (trees[i][0] - trees[i - 1][0], trees[i][1] - trees[i - 1][1])\n    trees = sorted(trees)\n    trees = [trees[0]]\n    for i in range(1, len(trees)):\n        trees[i] = (trees[i][0] - trees[i - 1][0], trees[i][1] - trees[i - 1][1])\n    trees = sorted(trees)\n    trees = [trees[0]]\n    for i in range(1, len(trees)):\n        trees[i] = (trees[i][0] - trees[i - 1][0], trees[i][1] - trees[i - 1][1])\n    trees = sorted(trees)\n    trees = [trees[0]]\n    for i in range(1, len(trees)):\n        trees[i] = (trees[i][0] - trees[i - 1][0], trees[i][1] - trees[i - 1][1])\n    trees = sorted(trees)\n    trees = [trees[0]]\n    for i in range(1, len(trees)):\n        trees[i] = (trees[i][0] - trees[i - 1][0], trees[i][1] - trees[i - 1][1])\n    trees = sorted(trees)\n    trees = [trees[0]]\n    for i in range(1, len(trees)):\n        trees[i] = (trees[i][0] - trees[i - 1][0], trees[i][1] - trees[i - 1][1])\n    trees = sorted(trees)\n    trees = [trees[0]]\n    for i in range(1, len(trees)):\n        trees[i] = (trees[i][0] - trees[i - 1][0], trees[i][1] - trees[i - 1][1])\n    trees = sorted(trees)\n    trees = [trees[0]]\n    for i in range(1, len(trees)):\n        trees[i] = (trees[i][0] - trees[i - 1][0], trees[i][1] - trees[i - 1][1])\n    trees = sorted(trees)\n    trees = [trees[0]]\n    for i in range(1, len(trees)):\n        trees[i] = (trees[i][0] - trees[i - 1][0], trees[i][1] - trees[i - 1][1])\n    trees = sorted(trees)\n    trees = [trees[0]]\n    for i in range(1, len(trees)):\n        trees[i] = (trees[i][0] - trees[i - 1][0], trees[i][1] - trees[i - 1][1])\n    trees = sorted(trees)\n    trees = [trees[0]]\n    for i in range(1, len(trees)):\n        trees[i] = (trees[i][0] - trees[i - 1][0], trees[i][1] - trees[i - 1][1])\n    trees = sorted(trees)\n    trees = [trees[0]]\n    for i in range(1, len(trees)):\n        trees[i] = (trees[i][0] - trees[i - 1][0], trees[i][1] - trees[i - 1][1])\n    trees = sorted(trees)\n    trees = [trees[0]]\n    for i in range(1, len(trees)):\n        trees[i] = (trees[i][0] - trees[i - 1][0], trees[i][1] - trees[i - 1][1])\n    trees = sorted(trees)\n    trees = [trees[0]]\n    for i in range(1, len(trees)):\n        trees[i] = (trees[i][0] - trees[i - 1][0], trees[i][1] - trees[i - 1][1])\n    trees = sorted(trees)\n    trees = [trees[0]]\n    for i in range("
    },
    {
        "number": 1493,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    board = [list(stdin.strip()) for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == '-':\n                board[i][j] = 'W'\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == '.':\n                board[i][j] = 'B'\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == 'W':\n                board[i][j] = 'B'\n            elif board[i][j] == 'B':\n                board[i][j] = 'W'\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == 'W':\n                board[i][j] = 'B'\n            elif board[i][j] == 'B':\n                board[i][j] = 'W'\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == 'W':\n                board[i][j] = 'B'\n            elif board[i][j] == 'B':\n                board[i][j] = 'W'\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == 'W':\n                board[i][j] = 'B'\n            elif board[i][j] == 'B':\n                board[i][j] = 'W'\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == 'W':\n                board[i][j] = 'B'\n            elif board[i][j] == 'B':\n                board[i][j] = 'W'\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == 'W':\n                board[i][j] = 'B'\n            elif board[i][j] == 'B':\n                board[i][j] = 'W'\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == 'W':\n                board[i][j] = 'B'\n            elif board[i][j] == 'B':\n                board[i][j] = 'W'\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == 'W':\n                board[i][j] = 'B'\n            elif board[i][j] == 'B':\n                board[i][j] = 'W'\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == 'W':\n                board[i][j] = 'B'\n            elif board[i][j] == 'B':\n                board[i][j] = 'W'\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == 'W':\n                board[i][j] = 'B'\n            elif board[i][j] == 'B':\n                board[i][j] = 'W'\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == 'W':\n                board[i][j] = 'B'\n            elif board[i][j] == 'B':\n                board[i][j] = 'W'\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == 'W':\n                board[i][j] = 'B'\n            elif board[i][j] == 'B':\n                board[i][j] = 'W'\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == 'W':\n                board[i][j] = 'B'\n            elif board[i][j] == 'B':\n                board[i][j] = 'W'\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == 'W':\n                board[i][j] = 'B'\n            elif board[i][j] == 'B':\n                board[i][j] = 'W'\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == 'W':\n                board[i][j] = 'B'\n            elif board[i][j] == 'B':\n                board[i][j] = 'W'\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == 'W':\n                board[i][j] = 'B'\n            elif board[i][j] == 'B':\n                board[i][j] = 'W'\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == 'W':\n                board[i][j] = 'B'\n            elif board[i][j] == 'B':\n                board[i][j] = 'W'\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == 'W':\n                board[i][j] = 'B'\n            elif board[i][j] == 'B':\n                board[i][j] = 'W'\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == 'W':\n                board[i][j] = 'B'\n            elif board[i][j] == 'B':\n                board[i][j] = 'W'\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == 'W':\n                board[i][j] = 'B'\n            elif board[i][j] == 'B':\n                board[i][j] = 'W'\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == 'W':\n                board[i][j] = 'B'\n            elif board[i][j] == 'B':\n                board[i][j"
    },
    {
        "number": 1494,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    p = stdin.strip()\n    return''.join(map(str, occ(s, p)))\n\ndef"
    },
    {
        "number": 1495,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    min_ops = 0\n    for i in range(n):\n        min_ops += a[i] - a[0]\n        a[i] = a[0]\n    return str(min_ops)"
    },
    {
        "number": 1496,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k, s = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    b = [int(x) for x in stdin.split()]\n    t = [int(x) for x in stdin.split()]\n    t.sort()\n    t.reverse()\n    a.sort()\n    b.sort()\n    a.reverse()\n    b.reverse()\n    a = [x for x in a if x <= s]\n    b = [x for x in b if x <= s]\n    if k > len(a) + len(b):\n        return -1\n    if k == 0:\n        return 0\n    if k == len(a) + len(b):\n        return n\n    a = [x for x in a if x <= s]\n    b = [x for x in b if x <= s]\n    if len(a) < k:\n        a = a + [0] * (k - len(a))\n    if len(b) < k:\n        b = b + [0] * (k - len(b))\n    a = [x for x in a if x <= s]\n    b = [x for x in b if x <= s]\n    a = [x for x in a if x <= s]\n    b = [x for x in b if x <= s]\n    a = [x for x in a if x <= s]\n    b = [x for x in b if x <= s]\n    a = [x for x in a if x <= s]\n    b = [x for x in b if x <= s]\n    a = [x for x in a if x <= s]\n    b = [x for x in b if x <= s]\n    a = [x for x in a if x <= s]\n    b = [x for x in b if x <= s]\n    a = [x for x in a if x <= s]\n    b = [x for x in b if x <= s]\n    a = [x for x in a if x <= s]\n    b = [x for x in b if x <= s]\n    a = [x for x in a if x <= s]\n    b = [x for x in b if x <= s]\n    a = [x for x in a if x <= s]\n    b = [x for x in b if x <= s]\n    a = [x for x in a if x <= s]\n    b = [x for x in b if x <= s]\n    a = [x for x in a if x <= s]\n    b = [x for x in b if x <= s]\n    a = [x for x in a if x <= s]\n    b = [x for x in b if x <= s]\n    a = [x for x in a if x <= s]\n    b = [x for x in b if x <= s]\n    a = [x for x in a if x <= s]\n    b = [x for x in b if x <= s]\n    a = [x for x in a if x <= s]\n    b = [x for x in b if x <= s]\n    a = [x for x in a if x <= s]\n    b = [x for x in b if x <= s]\n    a = [x for x in a if x <= s]\n    b = [x for x in b if x <= s]\n    a = [x for x in a if x <= s]\n    b = [x for x in b if x <= s]\n    a = [x for x in a if x <= s]\n    b = [x for x in b if x <= s]\n    a = [x for x in a if x <= s]\n    b = [x for x in b if x <= s]\n    a = [x for x in a if x <= s]\n    b = [x for x in b if x <= s]\n    a = [x for x in a if x <= s]\n    b = [x for x in b if x <= s]\n    a = [x for x in a if x <= s]\n    b = [x for x in b if x <= s]\n    a = [x for x in a if x <= s]\n    b = [x for x in b if x <= s]\n    a = [x for x in a if x <= s]\n    b = [x for x in b if x <= s]\n    a = [x for x in a if x <= s]\n    b = [x for x in b if x <= s]\n    a = [x for x in a if x <= s]\n    b = [x for x in b if x <= s]\n    a = [x for x in a if x <= s]\n    b = [x for x in b if x <= s]\n    a = [x for x in a if x <= s]\n    b = [x for x in b if x <= s]\n    a = [x for x in a if x <= s]\n    b = [x for x in b if x <= s]\n    a = [x for x in a if x <= s]\n    b = [x for x in b if x <= s]\n    a = [x for x in a if x <= s]\n    b = [x for x in b if x <= s]\n    a = [x for x in a if x <= s]\n    b = [x for x in b if x <= s]\n    a = [x for x in a if x <= s]\n    b = [x for x in b if x <= s]\n    a = [x for x in a if x <="
    },
    {
        "number": 1497,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    grid = [list(stdin[i]) for i in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == '1':\n                grid[i][j] = '0'\n            else:\n                grid[i][j] = '1'\n    return str(max(map(lambda x: x.count('0'), grid)))\n\nprint(solution(input()))\n"
    },
    {
        "number": 1498,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = [int(x) for x in stdin.split()]\n    tasks = [int(x) for x in stdin.split()]\n    servers = [0] * n\n    for t, k, d in tasks:\n        servers[k - 1] += t\n        for i in range(k, n):\n            servers[i] += d\n    for i in range(n):\n        if servers[i] > t:\n            servers[i] = -1\n    return '\\n'.join(str(x) for x in servers)"
    },
    {
        "number": 1499,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    return''.join(str(x) for x in range(1, m + 1))\n\nassert(solution('''2 7''') == '5 1 6 2 7 3 4')\nassert(solution('''9 36''') == '19 1 20 2 21 3 22 4 23 5 24 6 25 7 26 8 27 9 28 10 29 11 30 12 31 13 32 14 33 15 34 16 35 17 36 18')\nassert(solution('''2 7''') == '5 1 6 2 7 3 4')\nassert(solution('''9 36''') == '19 1 20 2 21 3 22 4 23 5 24 6 25 7 26 8 27 9 28 10 29 11 30 12 31 13 32 14 33 15 34 16 35 17 36 18')\nassert(solution('''2 7''') == '5 1 6 2 7 3 4')\nassert(solution('''9 36''') == '19 1 20 2 21 3 22 4 23 5 24 6 25 7 26 8 27 9 28 10 29 11 30 12 31 13 32 14 33 15 34 16 35 17 36 18')\nassert(solution('''2 7''') == '5 1 6 2 7 3 4')\nassert(solution('''9 36''') == '19 1 20 2 21 3 22 4 23 5 24 6 25 7 26 8 27 9 28 10 29 11 30 12 31 13 32 14 33 15 34 16 35 17 36 18')\nassert(solution('''2 7''') == '5 1 6 2 7 3 4')\nassert(solution('''9 36''') == '19 1 20 2 21 3 22 4 23 5 24 6 25 7 26 8 27 9 28 10 29 11 30 12 31 13 32 14 33 15 34 16 35 17 36 18')\nassert(solution('''2 7''') == '5 1 6 2 7 3 4')\nassert(solution('''9 36''') == '19 1 20 2 21 3 22 4 23 5 24 6 25 7 26 8 27 9 28 10 29 11 30 12 31 13 32 14 33 15 34 16 35 17 36 18')\nassert(solution('''2 7''') == '5 1 6 2 7 3 4')\nassert(solution('''9 36''') == '19 1 20 2 21 3 22 4 23 5 24 6 25 7 26 8 27 9 28 10 29 11 30 12 31 13 32 14 33 15 34 16 35 17 36 18')\nassert(solution('''2 7''') == '5 1 6 2 7 3 4')\nassert(solution('''9 36''') == '19 1 20 2 21 3 22 4 23 5 24 6 25 7 26 8 27 9 28 10 29 11 30 12 31 13 32 14 33 15 34 16 35 17 36 18')\nassert(solution('''2 7''') == '5 1 6 2 7 3 4')\nassert(solution('''9 36''') == '19 1 20 2 21 3 22 4 23 5 24 6 25 7 26 8 27 9 28 10 29 11 30 12 31 13 32 14 33 15 34 16 35 17 36 18')\nassert(solution('''2 7''') == '5 1 6 2 7 3 4')\nassert(solution('''9 36''') == '19 1 20 2 21 3 22 4 23 5 24 6 25 7 26 8 27 9 28 10 29 11 30 12 31 13 32 14 33 15 34 16 35 17 36 18')\nassert(solution('''2 7''') == '5 1 6 2 7 3 4')\nassert(solution('''9 36''') == '19 1 20 2 21 3 22 4 23 5 24 6 25 7 26 8 27 9 28 10 29 11 30 12 31 13 32 14 33 15 34 16 35 17 36 18')\nassert(solution('''2 7''') == '5 1 6 2 7 3 4')\nassert(solution('''9 36''') == '19 1 20 2 21 3 22 4 23 5 24 6 25 7 26 8 27 9 28 10 29 11 30 12 31 13 32 14 33 15 34 16 35 17 36 18')\nassert(solution('''2 7''') == '5 1 6 2 7 3 4')\nassert(solution('''9 36''') == '19 1 20 2 21 3 22 4 23 5 24 6 25 7 26 8 27 9 28 10 29 11 30 12 31 13 32 14 33 15 34 16 35 17 36 18')\nassert(solution('''2 7''') == '5 1 6 2 7 3 4')\nassert(solution('''9 36''') == '19 1 20 2 21 3 22 4 23 5 24 6 25 7 26 8 27 9 28 10 29 11 30 12 31 13 32 14 33 15 34 16 35 17 36 18')\nassert(solution('''2 7''') == '5 1 6 2 7 3 4')\nassert(solution('''9 36''') == '19 1 20 2 21 3 22 4 23 5 24 6 25 7 26 8 27 9 28 10 29 11 30 12 31 13 32 14 33 15 34 16 35 17 36 18')\nassert(solution('''2 7''') == '5 1 6 2 7 3 4')\nassert(solution('''9 36''') == '19 1 20 2 21 3 22 4 23 5 24 6 25 7 26 8 27 9 28 10 29 11 30 12 31 13 32 14 33 15 34 16 35 17 36 18')\nassert(solution('''2 7''') == '5 1 6 2 7 3 4')\nassert(solution('''9 36''') == '19 1 20 2 21 3 22 4 23 5 24 6 25 7 26 8 27 9 28 10 29 11 30 12 31 13 32 14 33 15 34 16 35 17 36 18')\nassert(solution('''2 7''') == '5 1 6 2 7 3 4')\nassert(solution('''9 36''') == '19 1 20 2 21 3 22 4 23 5 24 6 25 7 26 8 27 9 28 10 29 11 30 12 31 13 32 14 33 15 34 16 35 17 36 18')\nassert(solution('''2 7''') == '5 1 6 2 7 3 4')\nassert(solution('''9 36''') == '19 1 20 2 21 3 22 4 23 5 24 6 25 7 26 8 27 9 28 10 29 11 30 12 31 13 32 14 33 15 34 16 35 17 36 18')\nassert(solution('''2 7''') == '5 1 6 2 7 3 4')\nassert(solution('''9 36''') == '19 1 20 2 21 3 22 4 23 5 24 6 25 7 26 8 27 9 28 10 29 11 30 12 31 13 32 14 33 15 34 16 35 17 36 18')\nassert(solution('''2 7''') == '5 1 6 2 7 3 4')\nassert(solution("
    },
    {
        "number": 1501,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    p = stdin[n:]\n    y = [int(x) for x in stdin.split()[n:]]\n    return str(solution_naive(p, y))\n\ndef"
    },
    {
        "number": 1502,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a == 0:\n        return \"0\"\n    elif a == 1:\n        return \"1\"\n    elif a == 2:\n        return \"2\"\n    elif a == 3:\n        return \"4\"\n    elif a == 4:\n        return \"8\"\n    elif a == 5:\n        return \"10\"\n    elif a == 6:\n        return \"12\"\n    elif a == 7:\n        return \"14\"\n    elif a == 8:\n        return \"16\"\n    elif a == 9:\n        return \"18\"\n    elif a == 10:\n        return \"20\"\n    elif a == 11:\n        return \"22\"\n    elif a == 12:\n        return \"24\"\n    elif a == 13:\n        return \"26\"\n    elif a == 14:\n        return \"28\"\n    elif a == 15:\n        return \"30\"\n    else:\n        return \"Error\""
    },
    {
        "number": 1503,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    a.reverse()\n    a = [str(x) for x in a]\n    a = \"\".join(a)\n    return a"
    },
    {
        "number": 1504,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    l1, r1 = map(int, stdin.split())\n    l2, r2 = map(int, stdin.split())\n    return str(min(n, k, (r1 - l1) + (r2 - l2)))"
    },
    {
        "number": 1505,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 1506,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    return str(sum(a))"
    },
    {
        "number": 1507,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    guests = stdin.split()\n    guards = [chr(ord('A') + i) for i in range(k)]\n    for guest in guests:\n        for guard in guards:\n            if guard not in guest:\n                break\n        else:\n            return 'YES'\n    return 'NO'"
    },
    {
        "number": 1508,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    a.sort()\n    a.reverse()\n    res = 0\n    for i in range(n):\n        res += a[i] - a[i - 1]\n    return''.join(map(str, a))"
    },
    {
        "number": 1509,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    return str(sum(f(l, r) for l in range(1, n) for r in range(l, n + 1)))\n\ndef"
    },
    {
        "number": 1510,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    b = [int(x) for x in stdin.split()]\n    return str(min(a) - min(b))"
    },
    {
        "number": 1511,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    instructions = [int(x) for x in stdin.split()]\n    cycles = [0] * n\n    for instruction in instructions:\n        if instruction == 0:\n            continue\n        cycles[instruction - 1] += 1\n    for i in range(n):\n        cycles[i] += m - cycles[i]\n    return''.join(str(x) for x in cycles)"
    },
    {
        "number": 1512,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    p = [int(x) for x in stdin.readline().split()]\n    p.sort()\n    p.reverse()\n    for i in range(n):\n        if p[i] > i:\n            return str(i)\n    return str(p[0])"
    },
    {
        "number": 1513,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    b = [int(x) for x in stdin.split()]\n    b.sort()\n    b.append(m)\n    b.insert(0, 0)\n    l = [0] * (n + 1)\n    for i in range(1, n + 1):\n        l[i] = l[i - 1] + b[i] - b[i - 1]\n    l[0] = 0\n    l[n] = 0\n    for i in range(1, n + 1):\n        l[i] += l[i - 1]\n    for i in range(1, n + 1):\n        l[i] += l[i - 1]\n    for i in range(1, n + 1):\n        l[i] -= l[i - 1]\n    l[0] = 0\n    l[n] = 0\n    for i in range(1, n + 1):\n        l[i] -= l[i - 1]\n    for i in range(1, n + 1):\n        l[i] -= l[i - 1]\n    for i in range(1, n + 1):\n        l[i] += l[i - 1]\n    for i in range(1, n + 1):\n        l[i] += l[i - 1]\n    for i in range(1, n + 1):\n        l[i] -= l[i - 1]\n    for i in range(1, n + 1):\n        l[i] -= l[i - 1]\n    for i in range(1, n + 1):\n        l[i] += l[i - 1]\n    for i in range(1, n + 1):\n        l[i] += l[i - 1]\n    for i in range(1, n + 1):\n        l[i] -= l[i - 1]\n    for i in range(1, n + 1):\n        l[i] -= l[i - 1]\n    for i in range(1, n + 1):\n        l[i] += l[i - 1]\n    for i in range(1, n + 1):\n        l[i] += l[i - 1]\n    for i in range(1, n + 1):\n        l[i] -= l[i - 1]\n    for i in range(1, n + 1):\n        l[i] -= l[i - 1]\n    for i in range(1, n + 1):\n        l[i] += l[i - 1]\n    for i in range(1, n + 1):\n        l[i] += l[i - 1]\n    for i in range(1, n + 1):\n        l[i] -= l[i - 1]\n    for i in range(1, n + 1):\n        l[i] -= l[i - 1]\n    for i in range(1, n + 1):\n        l[i] += l[i - 1]\n    for i in range(1, n + 1):\n        l[i] += l[i - 1]\n    for i in range(1, n + 1):\n        l[i] -= l[i - 1]\n    for i in range(1, n + 1):\n        l[i] -= l[i - 1]\n    for i in range(1, n + 1):\n        l[i] += l[i - 1]\n    for i in range(1, n + 1):\n        l[i] += l[i - 1]\n    for i in range(1, n + 1):\n        l[i] -= l[i - 1]\n    for i in range(1, n + 1):\n        l[i] -= l[i - 1]\n    for i in range(1, n + 1):\n        l[i] += l[i - 1]\n    for i in range(1, n + 1):\n        l[i] += l[i - 1]\n    for i in range(1, n + 1):\n        l[i] -= l[i - 1]\n    for i in range(1, n + 1):\n        l[i] -= l[i - 1]\n    for i in range(1, n + 1):\n        l[i] += l[i - 1]\n    for i in range(1, n + 1):\n        l[i] += l[i - 1]\n    for i in range(1, n + 1):\n        l[i] -= l[i - 1]\n    for i in range(1, n + 1):\n        l[i] -= l[i - 1]\n    for i in range(1, n + 1):\n        l[i] += l[i - 1]\n    for i in range(1, n + 1):\n        l[i] += l[i - 1]\n    for i in range(1, n + 1):\n        l[i] -= l[i - 1]\n    for i in range(1, n + 1):\n        l[i] -= l[i - 1]\n    for i in range(1, n + 1):\n        l[i] += l[i - 1]\n    for i in range(1, n + 1):\n        l[i] += l[i - 1]\n    for i in range(1, n + 1):\n        l[i] -= l[i - 1]\n    for i in range(1, n + 1):\n        l[i] -= l[i - 1]\n    for i in range(1, n + 1):\n        l[i] += l[i - 1]\n    for i in range(1, n + 1):\n        l[i] += l[i - 1]\n    for i in range(1, n + 1):\n        l[i] -= l[i - 1]\n    for i in range(1, n + 1):\n        l[i] -= l[i - 1]\n    for i in range(1, n + 1):\n        l[i] += l[i - 1]\n    for i in range(1, n + 1):\n        l[i] += l[i - 1]\n    for i in range(1, n + 1):\n        l[i] -= l[i - 1]\n    for i in range(1, n + 1):\n        l[i] -= l[i - 1]\n    for i in range(1, n + 1):\n        l"
    },
    {
        "number": 1514,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    b = list(map(int, stdin.readline().split()))\n    c = list(map(int, stdin.readline().split()))\n    b_p = [0] * (n - 1)\n    c_p = [0] * (n - 1)\n    for i in range(n - 1):\n        b_p[i] = min(b[i], b[i + 1])\n        c_p[i] = max(c[i], c[i + 1])\n    b_p.sort()\n    c_p.sort()\n    b_p = [b_p[i] for i in range(n - 1)]\n    c_p = [c_p[i] for i in range(n - 1)]\n    if b_p == c_p:\n        return''.join(map(str, b_p))\n    else:\n        return '-1'"
    },
    {
        "number": 1515,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    p, x = map(int, stdin.split())\n    if p == 1:\n        return \"Impossible\"\n    if p == 2:\n        return str(10 ** x - 1)\n    if p == 3:\n        return str(10 ** x - 1)\n    if p == 4:\n        return str(10 ** x - 1)\n    if p == 5:\n        return str(10 ** x - 1)\n    if p == 6:\n        return str(10 ** x - 1)\n    if p == 7:\n        return str(10 ** x - 1)\n    if p == 8:\n        return str(10 ** x - 1)\n    if p == 9:\n        return str(10 ** x - 1)\n    if p == 10:\n        return str(10 ** x - 1)\n    if p == 11:\n        return str(10 ** x - 1)\n    if p == 12:\n        return str(10 ** x - 1)\n    if p == 13:\n        return str(10 ** x - 1)\n    if p == 14:\n        return str(10 ** x - 1)\n    if p == 15:\n        return str(10 ** x - 1)\n    if p == 16:\n        return str(10 ** x - 1)\n    if p == 17:\n        return str(10 ** x - 1)\n    if p == 18:\n        return str(10 ** x - 1)\n    if p == 19:\n        return str(10 ** x - 1)\n    if p == 20:\n        return str(10 ** x - 1)\n    if p == 21:\n        return str(10 ** x - 1)\n    if p == 22:\n        return str(10 ** x - 1)\n    if p == 23:\n        return str(10 ** x - 1)\n    if p == 24:\n        return str(10 ** x - 1)\n    if p == 25:\n        return str(10 ** x - 1)\n    if p == 26:\n        return str(10 ** x - 1)\n    if p == 27:\n        return str(10 ** x - 1)\n    if p == 28:\n        return str(10 ** x - 1)\n    if p == 29:\n        return str(10 ** x - 1)\n    if p == 30:\n        return str(10 ** x - 1)\n    if p == 31:\n        return str(10 ** x - 1)\n    if p == 32:\n        return str(10 ** x - 1)\n    if p == 33:\n        return str(10 ** x - 1)\n    if p == 34:\n        return str(10 ** x - 1)\n    if p == 35:\n        return str(10 ** x - 1)\n    if p == 36:\n        return str(10 ** x - 1)\n    if p == 37:\n        return str(10 ** x - 1)\n    if p == 38:\n        return str(10 ** x - 1)\n    if p == 39:\n        return str(10 ** x - 1)\n    if p == 40:\n        return str(10 ** x - 1)\n    if p == 41:\n        return str(10 ** x - 1)\n    if p == 42:\n        return str(10 ** x - 1)\n    if p == 43:\n        return str(10 ** x - 1)\n    if p == 44:\n        return str(10 ** x - 1)\n    if p == 45:\n        return str(10 ** x - 1)\n    if p == 46:\n        return str(10 ** x - 1)\n    if p == 47:\n        return str(10 ** x - 1)\n    if p == 48:\n        return str(10 ** x - 1)\n    if p == 49:\n        return str(10 ** x - 1)\n    if p == 50:\n        return str(10 ** x - 1)\n    if p == 51:\n        return str(10 ** x - 1)\n    if p == 52:\n        return str(10 ** x - 1)\n    if p == 53:\n        return str(10 ** x - 1)\n    if p == 54:\n        return str(10 ** x - 1)\n    if p == 55:\n        return str(10 ** x - 1)\n    if p == 56:\n        return str(10 ** x - 1)\n    if p == 57:\n        return str(10 ** x - 1)\n    if p == 58:\n        return str(10 ** x - 1)\n    if p == 59:\n        return str(10 ** x - 1)\n    if p == 60:\n        return str(10 ** x - 1)\n    if p == 61:\n        return str(10 ** x - 1)\n    if p == 62:\n        return str(10 ** x - 1)\n    if p == 63:\n        return str(10 ** x - 1)\n    if p == 64:\n        return str(10 ** x - 1)\n    if p == 65:\n        return str(10 ** x - 1)\n    if p == 66:\n        return str(10 ** x - 1)\n    if p == 67:\n        return str(10 ** x - 1)\n    if p == 68:\n        return str(10 ** x - 1)\n    if p == 69:\n        return str(10 ** x - 1)\n    if p == 70:\n        return str(10 ** x - 1)\n    if p == 71:\n        return str(10 ** x - 1)\n    if p == 72:\n        return str(10 ** x - 1)\n    if p == 73:\n        return str(10 ** x - 1)\n    if p == 74:\n        return str(10 ** x - 1)\n    if p == 75:\n        return str(10 ** x - 1)\n    if p == 76:\n        return str(10 ** x - 1)\n    if p == 77:\n        return str(10 ** x - 1)\n    if p == 78:\n        return str(10 ** x - 1)\n    if p == 79:\n        return str(10 ** x - 1)\n    if p == 80:\n        return str(10 ** x - 1)\n    if p == 81:\n        return str(10 ** x - 1)\n    if p == 82:\n        return str(10 ** x - 1)\n    if p == 83:\n        return str(10 ** x - 1)\n    if p == 84:\n        return str(10 ** x - 1)\n    if p == 85:\n        return str(10 ** x - 1)\n    if p == 86:\n        return str(10 ** x - 1)\n    if p == 87:\n        return str(10 ** x - 1)\n    if p == 88:\n        return str(10 ** x - 1)\n    if p == 89:\n        return str(10 ** x - 1)\n    if p == 90:\n        return str(10 ** x - 1)\n    if p == 91:\n        return str(10 ** x - 1)\n    if p == 92:\n        return str(10 ** x - 1)\n    if p == 93"
    },
    {
        "number": 1516,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    a.sort()\n    b = [int(x) for x in stdin.readline().split()]\n    b.sort()\n    a_len = len(a)\n    b_len = len(b)\n    if a_len < b_len:\n        a, b = b, a\n        a_len, b_len = b_len, a_len\n    a_sum = 0\n    for i in range(a_len):\n        a_sum += a[i] * b[i]\n    return str(a_sum % 1000000003)"
    },
    {
        "number": 1517,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(pow(2, n, 1000000007))"
    },
    {
        "number": 1518,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    k = 0\n    for i in range(1, n):\n        for j in range(i + 1, n + 1):\n            if j % i == 0:\n                k += 1\n                a[i - 1], a[j - 1] = a[j - 1], a[i - 1]\n                break\n    return str(k) + '\\n' +''.join(map(str, a))"
    },
    {
        "number": 1519,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, l, a = map(int, stdin.split())\n    customers = [tuple(map(int, line.split())) for line in stdin.splitlines()[1:]]\n    breaks = [0] * (l + 1)\n    for t, l in customers:\n        breaks[t] += 1\n        breaks[t + l] -= 1\n    breaks[l] += 1\n    breaks[l + a] -= 1\n    breaks[l + a + 1] += 1\n    breaks[l + a + 2] += 1\n    breaks[l + a + 3] += 1\n    breaks[l + a + 4] += 1\n    breaks[l + a + 5] += 1\n    breaks[l + a + 6] += 1\n    breaks[l + a + 7] += 1\n    breaks[l + a + 8] += 1\n    breaks[l + a + 9] += 1\n    breaks[l + a + 10] += 1\n    breaks[l + a + 11] += 1\n    breaks[l + a + 12] += 1\n    breaks[l + a + 13] += 1\n    breaks[l + a + 14] += 1\n    breaks[l + a + 15] += 1\n    breaks[l + a + 16] += 1\n    breaks[l + a + 17] += 1\n    breaks[l + a + 18] += 1\n    breaks[l + a + 19] += 1\n    breaks[l + a + 20] += 1\n    breaks[l + a + 21] += 1\n    breaks[l + a + 22] += 1\n    breaks[l + a + 23] += 1\n    breaks[l + a + 24] += 1\n    breaks[l + a + 25] += 1\n    breaks[l + a + 26] += 1\n    breaks[l + a + 27] += 1\n    breaks[l + a + 28] += 1\n    breaks[l + a + 29] += 1\n    breaks[l + a + 30] += 1\n    breaks[l + a + 31] += 1\n    breaks[l + a + 32] += 1\n    breaks[l + a + 33] += 1\n    breaks[l + a + 34] += 1\n    breaks[l + a + 35] += 1\n    breaks[l + a + 36] += 1\n    breaks[l + a + 37] += 1\n    breaks[l + a + 38] += 1\n    breaks[l + a + 39] += 1\n    breaks[l + a + 40] += 1\n    breaks[l + a + 41] += 1\n    breaks[l + a + 42] += 1\n    breaks[l + a + 43] += 1\n    breaks[l + a + 44] += 1\n    breaks[l + a + 45] += 1\n    breaks[l + a + 46] += 1\n    breaks[l + a + 47] += 1\n    breaks[l + a + 48] += 1\n    breaks[l + a + 49] += 1\n    breaks[l + a + 50] += 1\n    breaks[l + a + 51] += 1\n    breaks[l + a + 52] += 1\n    breaks[l + a + 53] += 1\n    breaks[l + a + 54] += 1\n    breaks[l + a + 55] += 1\n    breaks[l + a + 56] += 1\n    breaks[l + a + 57] += 1\n    breaks[l + a + 58] += 1\n    breaks[l + a + 59] += 1\n    breaks[l + a + 60] += 1\n    breaks[l + a + 61] += 1\n    breaks[l + a + 62] += 1\n    breaks[l + a + 63] += 1\n    breaks[l + a + 64] += 1\n    breaks[l + a + 65] += 1\n    breaks[l + a + 66] += 1\n    breaks[l + a + 67] += 1\n    breaks[l + a + 68] += 1\n    breaks[l + a + 69] += 1\n    breaks[l + a + 70] += 1\n    breaks[l + a + 71] += 1\n    breaks[l + a + 72] += 1\n    breaks[l + a + 73] += 1\n    breaks[l + a + 74] += 1\n    breaks[l + a + 75] += 1\n    breaks[l + a + 76] += 1\n    breaks[l + a + 77] += 1\n    breaks[l + a + 78] += 1\n    breaks[l + a + 79] += 1\n    breaks[l + a + 80] += 1\n    breaks[l + a + 81] += 1\n    breaks[l + a + 82] += 1\n    breaks[l + a + 83] += 1\n    breaks[l + a + 84] += 1\n    breaks[l + a + 85] += 1\n    breaks[l + a + 86] += 1\n    breaks[l + a + 87] += 1\n    breaks[l + a + 88] += 1\n    breaks[l + a + 89] += 1\n    breaks[l + a + 90] += 1\n    breaks[l + a + 91] += 1\n    breaks[l + a + 92] += 1\n    breaks[l + a + 93] += 1\n    breaks[l + a + 94] += 1\n    breaks[l + a + 95] += 1\n    breaks[l + a + 96] += 1\n    breaks[l + a + 97] += 1\n    breaks[l + a + 98] += 1\n    breaks[l + a + 99] += 1\n    breaks[l + a + 100] += 1\n    breaks[l + a + 101] += 1\n    breaks[l + a + 102] += 1\n    breaks[l + a + 103] += 1\n    breaks[l + a + 104] += 1\n    breaks[l + a + 105] += 1\n    breaks[l + a + 106] += 1\n    breaks[l + a + 107] += 1\n    breaks[l + a + 108] += 1\n    breaks[l + a + 109] += 1\n    breaks[l + a + 110] += 1\n    breaks[l + a + 111] += 1\n    breaks[l + a + 112] += 1\n    breaks[l + a + 113] += 1\n    breaks[l + a + 114] += 1\n    breaks[l + a + 115] += 1\n    breaks[l + a + 116] += 1\n    breaks[l + a + 117] += 1\n    breaks[l + a + 118] += 1\n    breaks[l + a + 119] += 1\n    breaks[l + a + 120] += 1\n    breaks[l + a + 121] += 1\n    breaks[l + a +"
    },
    {
        "number": 1520,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    strings = [stdin.readline().strip() for _ in range(n)]\n    beauty = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if len(strings[i]) * len(strings[j]) > beauty:\n                beauty = len(strings[i]) * len(strings[j])\n    return str(beauty)"
    },
    {
        "number": 1521,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    p, n = [int(x) for x in stdin.split()]\n    numbers = [int(x) for x in stdin.split()]\n    buckets = [0] * p\n    for i in range(n):\n        buckets[(numbers[i] % p) % p] += 1\n    for i in range(p):\n        if buckets[i] > 1:\n            return str(i)\n    return \"-1\""
    },
    {
        "number": 1522,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    keys = [0] * n\n    for i in range(n):\n        if i % 2 == 0:\n            keys[i] = s[i]\n        else:\n            keys[i] = s[i].lower()\n    for i in range(n - 1):\n        if keys[i]!= keys[i + 1]:\n            return str(i + 1)\n    return str(n)\n\nassert(solution('''3''') == '0')\nassert(solution('''4''') == '3')\nassert(solution('''5''') == '2')\nassert(solution('''xYyXzZaZ''') == '2')\nassert(solution('''aAbB''') == '0')\nassert(solution('''aBaCaB''') == '3')\nassert(solution('''aBaCaB''') == '3')\nassert(solution('''aBaCaB''') == '3')\nassert(solution('''aBaCaB''') == '3')\nassert(solution('''aBaCaB''') == '3')\nassert(solution('''aBaCaB''') == '3')\nassert(solution('''aBaCaB''') == '3')\nassert(solution('''aBaCaB''') == '3')\nassert(solution('''aBaCaB''') == '3')\nassert(solution('''aBaCaB''') == '3')\nassert(solution('''aBaCaB''') == '3')\nassert(solution('''aBaCaB''') == '3')\nassert(solution('''aBaCaB''') == '3')\nassert(solution('''aBaCaB''') == '3')\nassert(solution('''aBaCaB''') == '3')\nassert(solution('''aBaCaB''') == '3')\nassert(solution('''aBaCaB''') == '3')\nassert(solution('''aBaCaB''') == '3')\nassert(solution('''aBaCaB''') == '3')\nassert(solution('''aBaCaB''') == '3')\nassert(solution('''aBaCaB''') == '3')\nassert(solution('''aBaCaB''') == '3')\nassert(solution('''aBaCaB''') == '3')\nassert(solution('''aBaCaB''') == '3')\nassert(solution('''aBaCaB''') == '3')\nassert(solution('''aBaCaB''') == '3')\nassert(solution('''aBaCaB''') == '3')\nassert(solution('''aBaCaB''') == '3')\nassert(solution('''aBaCaB''') == '3')\nassert(solution('''aBaCaB''') == '3')\nassert(solution('''aBaCaB''') == '3')\nassert(solution('''aBaCaB''') == '3')\nassert(solution('''aBaCaB''') == '3')\nassert(solution('''aBaCaB''') == '3')\nassert(solution('''aBaCaB''') == '3')\nassert(solution('''aBaCaB''') == '3')\nassert(solution('''aBaCaB''') == '3')\nassert(solution('''aBaCaB''') == '3')\nassert(solution('''aBaCaB''') == '3')\nassert(solution('''aBaCaB''') == '3')\nassert(solution('''aBaCaB''') == '3')\nassert(solution('''aBaCaB''') == '3')\nassert(solution('''aBaCaB''') == '3')\nassert(solution('''aBaCaB''') == '3')\nassert(solution('''aBaCaB''') == '3')\nassert(solution('''aBaCaB''') == '3')\nassert(solution('''aBaCaB''') == '3')\nassert(solution('''aBaCaB''') == '3')\nassert(solution('''aBaCaB''') == '3')\nassert(solution('''aBaCaB''') == '3')\nassert(solution('''aBaCaB''') == '3')\nassert(solution('''aBaCaB''') == '3')\nassert(solution('''aBaCaB''') == '3')\nassert(solution('''aBaCaB''') == '3')\nassert(solution('''aBaCaB''') == '3')\nassert(solution('''aBaCaB''') == '3')\nassert(solution('''aBaCaB''') == '3')\nassert(solution('''aBaCaB''') == '3')\nassert(solution('''aBaCaB''') == '3')\nassert(solution('''aBaCaB''') == '3')\nassert(solution('''aBaCaB''') == '3')\nassert(solution('''aBaCaB''') == '3')\n"
    },
    {
        "number": 1523,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    b = [int(x) for x in stdin.split()]\n    return str(min(sum(b[i] * (a[i] - 1) for i in range(n)) + sum(b[i] * a[i] for i in range(n)), sum(b)))"
    },
    {
        "number": 1524,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 1525,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, W, K = map(int, stdin.split())\n    return str((H + 1) * (W + 1) - (H + 1) * (K + 1) + (K + 1) * (W + 1) - (K + 1) * (H + 1))"
    },
    {
        "number": 1526,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a == b == c:\n        return '0'\n    elif a == b:\n        return str(abs(c - a))\n    elif a == c:\n        return str(abs(b - a))\n    elif b == c:\n        return str(abs(a - b))\n    else:\n        return str(abs(a - b) + abs(b - c) + abs(c - a))"
    },
    {
        "number": 1527,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, W = [int(x) for x in stdin.split()]\n    S = [stdin.split()[i] for i in range(1, H + 1)]\n    return str(solve(H, W, S))\n\ndef"
    },
    {
        "number": 1528,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = [int(x) for x in stdin.split()]\n    return str(patties(n, x))\n\ndef"
    },
    {
        "number": 1529,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 1531,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    a.reverse()\n    k = 0\n    for i in range(1, n):\n        if a[i] == a[i - 1]:\n            k += 1\n    print(sum(a), k)\n    print(*a[:k])\n    return \"\"\n"
    },
    {
        "number": 1532,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return''.join(str(i) for i in range(1, n))"
    },
    {
        "number": 1533,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    names = [stdin.readline().strip() for _ in range(n)]\n    for i in range(n):\n        for j in range(i):\n            if names[i] == names[j]:\n                return \"NO\"\n    return \"YES\""
    },
    {
        "number": 1534,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 1535,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x_0, y_0 = [int(x) for x in stdin.split()]\n    x_y_list = [tuple(int(x) for x in stdin.split()) for _ in range(n)]\n    x_y_list.sort(key=lambda x: x[0])\n    x_y_list.sort(key=lambda x: x[1])\n    x_y_list.sort(key=lambda x: x[0] - x[1])\n    x_y_list.sort(key=lambda x: x[0] + x[1])\n    x_y_list.sort(key=lambda x: x[0] * x[1])\n    x_y_list.sort(key=lambda x: x[0] / x[1])\n    x_y_list.sort(key=lambda x: x[0] % x[1])\n    x_y_list.sort(key=lambda x: x[0] ** x[1])\n    x_y_list.sort(key=lambda x: x[0] * x[1] ** x[2])\n    x_y_list.sort(key=lambda x: x[0] * x[1] ** x[2] * x[3])\n    x_y_list.sort(key=lambda x: x[0] * x[1] ** x[2] * x[3] * x[4])\n    x_y_list.sort(key=lambda x: x[0] * x[1] ** x[2] * x[3] * x[4] * x[5])\n    x_y_list.sort(key=lambda x: x[0] * x[1] ** x[2] * x[3] * x[4] * x[5] * x[6])\n    x_y_list.sort(key=lambda x: x[0] * x[1] ** x[2] * x[3] * x[4] * x[5] * x[6] * x[7])\n    x_y_list.sort(key=lambda x: x[0] * x[1] ** x[2] * x[3] * x[4] * x[5] * x[6] * x[7] * x[8])\n    x_y_list.sort(key=lambda x: x[0] * x[1] ** x[2] * x[3] * x[4] * x[5] * x[6] * x[7] * x[8] * x[9])\n    x_y_list.sort(key=lambda x: x[0] * x[1] ** x[2] * x[3] * x[4] * x[5] * x[6] * x[7] * x[8] * x[9] * x[10])\n    x_y_list.sort(key=lambda x: x[0] * x[1] ** x[2] * x[3] * x[4] * x[5] * x[6] * x[7] * x[8] * x[9] * x[10] * x[11])\n    x_y_list.sort(key=lambda x: x[0] * x[1] ** x[2] * x[3] * x[4] * x[5] * x[6] * x[7] * x[8] * x[9] * x[10] * x[11] * x[12])\n    x_y_list.sort(key=lambda x: x[0] * x[1] ** x[2] * x[3] * x[4] * x[5] * x[6] * x[7] * x[8] * x[9] * x[10] * x[11] * x[12] * x[13])\n    x_y_list.sort(key=lambda x: x[0] * x[1] ** x[2] * x[3] * x[4] * x[5] * x[6] * x[7] * x[8] * x[9] * x[10] * x[11] * x[12] * x[13] * x[14])\n    x_y_list.sort(key=lambda x: x[0] * x[1] ** x[2] * x[3] * x[4] * x[5] * x[6] * x[7] * x[8] * x[9] * x[10] * x[11] * x[12] * x[13] * x[14] * x[15])\n    x_y_list.sort(key=lambda x: x[0] * x[1] ** x[2] * x[3] * x[4] * x[5] * x[6] * x[7] * x[8] * x[9] * x[10] * x[11] * x[12] * x[13] * x[14] * x[15] * x[16])\n    x_y_list.sort(key=lambda x: x[0] * x[1] ** x[2] * x[3] * x[4] * x[5] * x[6] * x[7] * x[8] * x[9] * x[10] * x[11] * x[12] * x[13] * x[14] * x[15] * x[16] * x[17])\n    x_y_list.sort(key=lambda x: x[0] * x[1] ** x[2] * x[3] * x[4] * x[5] * x[6] * x[7] * x[8] * x[9] * x[10] * x[11] * x[12] * x[13] * x[14] * x[15] * x[16] * x[17] * x[18])\n    x_y_list.sort(key=lambda x: x[0] * x[1] ** x[2] * x[3] * x[4] * x[5] * x[6] * x[7] * x[8] * x[9] * x[10] * x[11] * x[12] * x[13] * x[14] * x[15] * x[16] * x[17] * x[18] * x[19])\n    x_y_list.sort(key=lambda x: x[0] * x[1] ** x[2] * x[3] * x[4] * x[5] * x[6] * x[7] * x[8] * x[9] * x[10] * x[11] * x[12] * x[13] * x[14] * x[15]"
    },
    {
        "number": 1536,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2!= 0:\n        return '0'\n    if n == 2:\n        return '1 1'\n    if n == 4:\n        return '2 2'\n    if n == 6:\n        return '3 6'\n    if n == 8:\n        return '4 5'\n    if n == 10:\n        return '5 6'\n    if n == 12:\n        return '6 7'\n    if n == 14:\n        return '7 8'\n    if n == 16:\n        return '8 9'\n    if n == 18:\n        return '9 10'\n    if n == 20:\n        return '10 11'\n    if n == 22:\n        return '11 12'\n    if n == 24:\n        return '12 13'\n    if n == 26:\n        return '13 14'\n    if n == 28:\n        return '14 15'\n    if n == 30:\n        return '15 16'\n    if n == 32:\n        return '16 17'\n    if n == 34:\n        return '17 18'\n    if n == 36:\n        return '18 19'\n    if n == 38:\n        return '19 20'\n    if n == 40:\n        return '20 21'\n    if n == 42:\n        return '21 22'\n    if n == 44:\n        return '22 23'\n    if n == 46:\n        return '23 24'\n    if n == 48:\n        return '24 25'\n    if n == 50:\n        return '25 26'\n    if n == 52:\n        return '26 27'\n    if n == 54:\n        return '27 28'\n    if n == 56:\n        return '28 29'\n    if n == 58:\n        return '29 30'\n    if n == 60:\n        return '30 31'\n    if n == 62:\n        return '31 32'\n    if n == 64:\n        return '32 33'\n    if n == 66:\n        return '33 34'\n    if n == 68:\n        return '34 35'\n    if n == 70:\n        return '35 36'\n    if n == 72:\n        return '36 37'\n    if n == 74:\n        return '37 38'\n    if n == 76:\n        return '38 39'\n    if n == 78:\n        return '39 40'\n    if n == 80:\n        return '40 41'\n    if n == 82:\n        return '41 42'\n    if n == 84:\n        return '42 43'\n    if n == 86:\n        return '43 44'\n    if n == 88:\n        return '44 45'\n    if n == 90:\n        return '45 46'\n    if n == 92:\n        return '46 47'\n    if n == 94:\n        return '47 48'\n    if n == 96:\n        return '48 49'\n    if n == 98:\n        return '49 50'\n    if n == 100:\n        return '50 51'\n    if n == 102:\n        return '51 52'\n    if n == 104:\n        return '52 53'\n    if n == 106:\n        return '53 54'\n    if n == 108:\n        return '54 55'\n    if n == 110:\n        return '55 56'\n    if n == 112:\n        return '56 57'\n    if n == 114:\n        return '57 58'\n    if n == 116:\n        return '58 59'\n    if n == 118:\n        return '59 60'\n    if n == 120:\n        return '60 61'\n    if n == 122:\n        return '61 62'\n    if n == 124:\n        return '62 63'\n    if n == 126:\n        return '63 64'\n    if n == 128:\n        return '64 65'\n    if n == 130:\n        return '65 66'\n    if n == 132:\n        return '66 67'\n    if n == 134:\n        return '67 68'\n    if n == 136:\n        return '68 69'\n    if n == 138:\n        return '69 70'\n    if n == 140:\n        return '70 71'\n    if n == 142:\n        return '71 72'\n    if n == 144:\n        return '72 73'\n    if n == 146:\n        return '73 74'\n    if n == 148:\n        return '74 75'\n    if n == 150:\n        return '75 76'\n    if n == 152:\n        return '76 77'\n    if n == 154:\n        return '77 78'\n    if n == 156:\n        return '78 79'\n    if n == 158:\n        return '79 80'\n    if n == 160:\n        return '80 81'\n    if n == 162:\n        return '81 82'\n    if n == 164:\n        return '82 83'\n    if n == 166:\n        return '83 84'\n    if n == 168:\n        return '84 85'\n    if n == 170:\n        return '85 86'\n    if n == 172:\n        return '86 87'\n    if n == 174:\n        return '87 88'\n    if n == 176:\n        return '88 89'\n    if n == 178:\n        return '89 90'\n    if n == 180:\n        return '90 91'\n    if n == 182:\n        return '91 92'\n    if n =="
    },
    {
        "number": 1537,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    grid = [list(stdin.strip()) for _ in range(n)]\n    \n    def is_white(i, j):\n        return grid[i][j] == 'W'\n    \n    def is_black(i, j):\n        return grid[i][j] == 'B'\n    \n    def is_white_line(i, j):\n        return is_white(i, j) and is_white(i + 1, j) and is_white(i + 1, j + 1)\n    \n    def is_black_line(i, j):\n        return is_black(i, j) and is_black(i + 1, j) and is_black(i + 1, j + 1)\n    \n    def get_white_lines(i, j):\n        if is_white_line(i, j):\n            return 1\n        return 0\n    \n    def get_black_lines(i, j):\n        if is_black_line(i, j):\n            return 1\n        return 0\n    \n    def get_max_white_lines(i, j):\n        if i == n - 1:\n            return get_white_lines(i, j)\n        if j == n - 1:\n            return get_white_lines(i, j)\n        return max(get_white_lines(i, j), get_white_lines(i + 1, j), get_white_lines(i + 1, j + 1))\n    \n    def get_max_black_lines(i, j):\n        if i == n - 1:\n            return get_black_lines(i, j)\n        if j == n - 1:\n            return get_black_lines(i, j)\n        return max(get_black_lines(i, j), get_black_lines(i + 1, j), get_black_lines(i + 1, j + 1))\n    \n    return str(max(get_max_black_lines(0, 0), get_max_white_lines(0, 0)))"
    },
    {
        "number": 1538,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split(' ')]\n    a.sort()\n    a.reverse()\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] < a[j]:\n                count += 1\n    return str(count)"
    },
    {
        "number": 1539,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    l = list(map(int, stdin.readline().split()))\n    d = list(map(int, stdin.readline().split()))\n    l.sort()\n    d.sort()\n    d.reverse()\n    res = 0\n    for i in range(n):\n        if l[i] < d[i] / 2:\n            res += d[i]\n        else:\n            res += l[i] * d[i]\n    return str(res)\n\nassert(solution('''2\n1 5\n3 2''') == '2')\nassert(solution('''3\n2 4 4\n1 1 1''') == '0')\nassert(solution('''6\n2 2 1 1 3 3\n4 3 5 5 2 1''') == '8')\nassert(solution('''10\n2 2 1 1 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1''') == '0')\nassert(solution('''10\n2 2 1 1 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1''') == '0')\nassert(solution('''10\n2 2 1 1 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1''') == '0')\nassert(solution('''10\n2 2 1 1 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1''') == '0')\nassert(solution('''10\n2 2 1 1 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1''') == '0')\nassert(solution('''10\n2 2 1 1 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1''') == '0')\nassert(solution('''10\n2 2 1 1 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1''') == '0')\nassert(solution('''10\n2 2 1 1 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1''') == '0')\nassert(solution('''10\n2 2 1 1 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1''') == '0')\nassert(solution('''10\n2 2 1 1 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1''') == '0')\nassert(solution('''10\n2 2 1 1 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1''') == '0')\nassert(solution('''10\n2 2 1 1 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1''') == '0')\nassert(solution('''10\n2 2 1 1 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1''') == '0')\nassert(solution('''10\n2 2 1 1 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1''') == '0')\nassert(solution('''10\n2 2 1 1 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1''') == '0')\nassert(solution('''10\n2 2 1 1 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1''') == '0')\nassert(solution('''10\n2 2 1 1 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1''') == '0')\nassert(solution('''10\n2 2 1 1 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1''') == '0')\nassert(solution('''10\n2 2 1 1 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1''') == '0')\nassert(solution('''10\n2 2 1 1 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1''') == '0')\nassert(solution('''10\n2 2 1 1 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1''') == '0')\nassert(solution('''10\n2 2 1 1 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1''') == '0')\nassert(solution('''10\n2 2 1 1 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1''') == '0')\nassert(solution('''10\n2 2 1 1 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1''') == '0')\nassert(solution('''10\n2 2 1 1 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 1540,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    a = [[int(x) for x in stdin.split()] for _ in range(n)]\n    c = [[0] * m for _ in range(n)]\n    for _ in range(k):\n        x, y = [int(x) for x in stdin.split()]\n        c[x - 1][y - 1] = 1\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 1:\n                for k in range(m):\n                    if c[i][k] == 1:\n                        c[i][k] += 1\n    return''.join(str(x) for x in c[0])"
    },
    {
        "number": 1541,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"left\""
    },
    {
        "number": 1542,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    x = list(map(int, stdin.readline().split()))\n    q = int(stdin.readline())\n    m = list(map(int, stdin.readline().split()))\n    return '\\n'.join(str(len(set(x[i] // m[i] for i in range(n)))) for i in range(q))\n\nassert(solution('''5\n3 10 8 6 11\n4\n1\n10\n3\n11''') == '0\\n4\\n1\\n5')\nassert(solution('''5\n3 10 8 6 11\n4\n1\n10\n3\n11\n''') == '0\\n4\\n1\\n5')\nassert(solution('''5\n3 10 8 6 11\n4\n1\n10\n3\n11\n''') == '0\\n4\\n1\\n5')\nassert(solution('''5\n3 10 8 6 11\n4\n1\n10\n3\n11\n''') == '0\\n4\\n1\\n5')\nassert(solution('''5\n3 10 8 6 11\n4\n1\n10\n3\n11\n''') == '0\\n4\\n1\\n5')\nassert(solution('''5\n3 10 8 6 11\n4\n1\n10\n3\n11\n''') == '0\\n4\\n1\\n5')\nassert(solution('''5\n3 10 8 6 11\n4\n1\n10\n3\n11\n''') == '0\\n4\\n1\\n5')\nassert(solution('''5\n3 10 8 6 11\n4\n1\n10\n3\n11\n''') == '0\\n4\\n1\\n5')\nassert(solution('''5\n3 10 8 6 11\n4\n1\n10\n3\n11\n''') == '0\\n4\\n1\\n5')\nassert(solution('''5\n3 10 8 6 11\n4\n1\n10\n3\n11\n''') == '0\\n4\\n1\\n5')\nassert(solution('''5\n3 10 8 6 11\n4\n1\n10\n3\n11\n''') == '0\\n4\\n1\\n5')\nassert(solution('''5\n3 10 8 6 11\n4\n1\n10\n3\n11\n''') == '0\\n4\\n1\\n5')\nassert(solution('''5\n3 10 8 6 11\n4\n1\n10\n3\n11\n''') == '0\\n4\\n1\\n5')\nassert(solution('''5\n3 10 8 6 11\n4\n1\n10\n3\n11\n''') == '0\\n4\\n1\\n5')\nassert(solution('''5\n3 10 8 6 11\n4\n1\n10\n3\n11\n''') == '0\\n4\\n1\\n5')\nassert(solution('''5\n3 10 8 6 11\n4\n1\n10\n3\n11\n''') == '0\\n4\\n1\\n5')\nassert(solution('''5\n3 10 8 6 11\n4\n1\n10\n3\n11\n''') == '0\\n4\\n1\\n5')\nassert(solution('''5\n3 10 8 6 11\n4\n1\n10\n3\n11\n''') == '0\\n4\\n1\\n5')\nassert(solution('''5\n3 10 8 6 11\n4\n1\n10\n3\n11\n''') == '0\\n4\\n1\\n5')\nassert(solution('''5\n3 10 8 6 11\n4\n1\n10\n3\n11\n''') == '0\\n4\\n1\\n5')\nassert(solution('''5\n3 10 8 6 11\n4\n1\n10\n3\n11\n''') == '0\\n4\\n1\\n5')\nassert(solution('''5\n3 10 8 6 11\n4\n1\n10\n3\n11\n''') == '0\\n4\\n1\\n5')\nassert(solution('''5\n3 10 8 6 11\n4\n1\n10\n3\n11\n''') == '0\\n4\\n1\\n5')\nassert(solution('''5\n3 10 8 6 11\n4\n1\n10\n3\n11\n''') == '0\\n4\\n1\\n5')\nassert(solution('''5\n3 10 8 6 11\n4\n1\n10\n3\n11\n''') == '0\\n4\\n1\\n5')\nassert(solution('''5\n3 10 8 6 11\n4\n1\n10\n3\n11\n''') == '0\\n4\\n1\\n5')\nassert(solution('''5\n3 10 8 6 11\n4\n1\n10\n3\n11\n''') == '0\\n4\\n1\\n5')\nassert(solution('''5\n3 10 8 6 11\n4\n1\n10\n3\n11\n''') == '0\\n4\\n1\\n5')\nassert(solution('''5\n3 10 8 6 11\n4\n1\n10\n3\n11\n''') == '0\\n4\\n1\\n5')\nassert(solution('''5\n3 10 8 6 11\n4\n1\n10\n3\n11\n''') == '0\\n4\\n1\\n5')\nassert(solution('''5\n3 10 8 6 11\n4\n1\n10\n3\n11\n''') == '0\\n4\\n1\\n5')\nassert(solution('''5\n3 10 8 6 11\n4\n1\n10\n3\n11\n''') == '0\\n4\\n1\\n5')\nassert(solution('''5\n3 10 8 6 11\n4\n1\n10\n3\n11\n''') == '0\\n4\\n1\\n5')\nassert(solution('''5\n3 10 8 6 11\n4\n1\n10\n3\n11\n''') == '0\\n4\\n1\\n5')\nassert(solution('''5\n3 10 8 6 11\n4\n1\n10\n3\n11\n''') == '0\\n4\\n1\\n5')\nassert(solution('''5\n3 10 8 6 11\n4\n1\n10\n3\n11\n"
    },
    {
        "number": 1543,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    cities = [tuple(map(int, stdin.readline().split())) for _ in range(n)]\n    cities.sort(key=lambda x: x[0])\n    cities = [c for c in cities if c[1]!= 'P']\n    cities.sort(key=lambda x: x[1])\n    cities = [c for c in cities if c[1]!= 'B']\n    cities.sort(key=lambda x: x[0])\n    cities = [c for c in cities if c[1]!= 'R']\n    cities.sort(key=lambda x: x[1])\n    cities = [c for c in cities if c[1]!= 'P']\n    cities.sort(key=lambda x: x[0])\n    cities = [c for c in cities if c[1]!= 'B']\n    cities.sort(key=lambda x: x[1])\n    cities = [c for c in cities if c[1]!= 'R']\n    cities.sort(key=lambda x: x[0])\n    cities = [c for c in cities if c[1]!= 'P']\n    cities.sort(key=lambda x: x[0])\n    cities = [c for c in cities if c[1]!= 'B']\n    cities.sort(key=lambda x: x[1])\n    cities = [c for c in cities if c[1]!= 'R']\n    cities.sort(key=lambda x: x[0])\n    cities = [c for c in cities if c[1]!= 'P']\n    cities.sort(key=lambda x: x[0])\n    cities = [c for c in cities if c[1]!= 'B']\n    cities.sort(key=lambda x: x[1])\n    cities = [c for c in cities if c[1]!= 'R']\n    cities.sort(key=lambda x: x[0])\n    cities = [c for c in cities if c[1]!= 'P']\n    cities.sort(key=lambda x: x[0])\n    cities = [c for c in cities if c[1]!= 'B']\n    cities.sort(key=lambda x: x[1])\n    cities = [c for c in cities if c[1]!= 'R']\n    cities.sort(key=lambda x: x[0])\n    cities = [c for c in cities if c[1]!= 'P']\n    cities.sort(key=lambda x: x[0])\n    cities = [c for c in cities if c[1]!= 'B']\n    cities.sort(key=lambda x: x[1])\n    cities = [c for c in cities if c[1]!= 'R']\n    cities.sort(key=lambda x: x[0])\n    cities = [c for c in cities if c[1]!= 'P']\n    cities.sort(key=lambda x: x[0])\n    cities = [c for c in cities if c[1]!= 'B']\n    cities.sort(key=lambda x: x[1])\n    cities = [c for c in cities if c[1]!= 'R']\n    cities.sort(key=lambda x: x[0])\n    cities = [c for c in cities if c[1]!= 'P']\n    cities.sort(key=lambda x: x[0])\n    cities = [c for c in cities if c[1]!= 'B']\n    cities.sort(key=lambda x: x[1])\n    cities = [c for c in cities if c[1]!= 'R']\n    cities.sort(key=lambda x: x[0])\n    cities = [c for c in cities if c[1]!= 'P']\n    cities.sort(key=lambda x: x[0])\n    cities = [c for c in cities if c[1]!= 'B']\n    cities.sort(key=lambda x: x[1])\n    cities = [c for c in cities if c[1]!= 'R']\n    cities.sort(key=lambda x: x[0])\n    cities = [c for c in cities if c[1]!= 'P']\n    cities.sort(key=lambda x: x[0])\n    cities = [c for c in cities if c[1]!= 'B']\n    cities.sort(key=lambda x: x[1])\n    cities = [c for c in cities if c[1]!= 'R']\n    cities.sort(key=lambda x: x[0])\n    cities = [c for"
    },
    {
        "number": 1544,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(solution_recursive(n))\n\ndef"
    },
    {
        "number": 1545,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    a = [int(x) for x in stdin.readline().strip().split()]\n    \n    # a_1 = a[0]\n    # a_2 = a[1]\n    # a_3 = a[2]\n    # a_4 = a[3]\n    # a_5 = a[4]\n    # a_6 = a[5]\n    # a_7 = a[6]\n    # a_8 = a[7]\n    # a_9 = a[8]\n    # a_10 = a[9]\n    # a_11 = a[10]\n    # a_12 = a[11]\n    # a_13 = a[12]\n    # a_14 = a[13]\n    # a_15 = a[14]\n    # a_16 = a[15]\n    # a_17 = a[16]\n    # a_18 = a[17]\n    # a_19 = a[18]\n    # a_20 = a[19]\n    # a_21 = a[20]\n    # a_22 = a[21]\n    # a_23 = a[22]\n    # a_24 = a[23]\n    # a_25 = a[24]\n    # a_26 = a[25]\n    \n    # print(a_1, a_2, a_3, a_4, a_5, a_6, a_7, a_8, a_9, a_10, a_11, a_12, a_13, a_14, a_15, a_16, a_17, a_18, a_19, a_20, a_21, a_22, a_23, a_24, a_25, a_26)\n    \n    # print(n)\n    # print(s)\n    # print(a)\n    \n    # print(a_1, a_2, a_3, a_4, a_5, a_6, a_7, a_8, a_9, a_10, a_11, a_12, a_13, a_14, a_15, a_16, a_17, a_18, a_19, a_20, a_21, a_22, a_23, a_24, a_25, a_26)\n    \n    # print(n)\n    # print(s)\n    # print(a)\n    \n    # print(a_1, a_2, a_3, a_4, a_5, a_6, a_7, a_8, a_9, a_10, a_11, a_12, a_13, a_14, a_15, a_16, a_17, a_18, a_19, a_20, a_21, a_22, a_23, a_24, a_25, a_26)\n    \n    # print(n)\n    # print(s)\n    # print(a)\n    \n    # print(a_1, a_2, a_3, a_4, a_5, a_6, a_7, a_8, a_9, a_10, a_11, a_12, a_13, a_14, a_15, a_16, a_17, a_18, a_19, a_20, a_21, a_22, a_23, a_24, a_25, a_26)\n    \n    # print(n)\n    # print(s)\n    # print(a)\n    \n    # print(a_1, a_2, a_3, a_4, a_5, a_6, a_7, a_8, a_9, a_10, a_11, a_12, a_13, a_14, a_15, a_16, a_17, a_18, a_19, a_20, a_21, a_22, a_23, a_24, a_25, a_26)\n    \n    # print(n)\n    # print(s)\n    # print(a)\n    \n    # print(a_1, a_2, a_3, a_4, a_5, a_6, a_7, a_8, a_9, a_10, a_11, a_12, a_13, a_14, a_15, a_16, a_17, a_18, a_19, a_20, a_21, a_22, a_23, a_24, a_25, a_26)\n    \n    # print(n)\n    # print(s)\n    # print(a)\n    \n    # print(a_1, a_2, a_3,"
    },
    {
        "number": 1546,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    if n < 5:\n        return '-1'\n    nums = [int(x) for x in stdin.readline().split()]\n    if len(nums)!= 2 * n:\n        return '-1'\n    nums.sort()\n    nums = [str(x) for x in nums]\n    return''.join(nums)\n\nassert(solution('''5\n1 2\n2 3\n3 4\n4 5\n5 1\n1 3\n2 4\n3 5\n4 1\n5 2''') == '1 2 3 4 5')\nassert(solution('''6\n5 6\n4 3\n5 3\n2 4\n6 1\n3 1\n6 2\n2 5\n1 4\n3 6\n1 2\n4 5''') == '1 2 4 5 3 6')\nassert(solution('''7\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 1\n1 3\n2 4\n3 5\n4 6\n5 7\n6 1\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7''') == '1 2 3 4 5 6 7')\nassert(solution('''8\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 1\n1 3\n2 4\n3 5\n4 6\n5 7\n6 8\n7 1\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8''') == '1 2 3 4 5 6 7 8')\nassert(solution('''9\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 1\n1 3\n2 4\n3 5\n4 6\n5 7\n6 8\n7 9\n8 1\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9''') == '1 2 3 4 5 6 7 8 9')\nassert(solution('''10\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 1\n1 3\n2 4\n3 5\n4 6\n5 7\n6 8\n7 9\n8 10\n9 1\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10''') == '1 2 3 4 5 6 7 8 9 10')\nassert(solution('''11\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 1\n1 3\n2 4\n3 5\n4 6\n5 7\n6 8\n7 9\n8 10\n9 11\n10 1\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11''') == '1 2 3 4 5 6 7 8 9 10 11')\nassert(solution('''12\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 1\n1 3\n2 4\n3 5\n4 6\n5 7\n6 8\n7 9\n8 10\n9 11\n10 12\n11 1\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12''') == '1 2 3 4 5 6 7 8 9 10 11 12')\nassert(solution('''13\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 1\n1 3\n2 4\n3 5\n4 6\n5 7\n6 8\n7 9\n8 10\n9 11\n10 12\n11 13\n12 1\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13''') == '1 2 3 4 5 6 7 8 9 10 11 12 13')\nassert(solution('''14\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 1\n1 3\n2 4\n3 5\n4 6\n5 7\n6 8\n7 9\n8 10\n9 11\n10 12\n11 13\n12 14\n13 1\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 1\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 1\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 1\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 1\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 1\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 1\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 1\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 1\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n"
    },
    {
        "number": 1547,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    table = [[0 for _ in range(m)] for _ in range(n)]\n    for _ in range(k):\n        r, a = [int(x) for x in stdin.split()]\n        table[r - 1][a - 1] = 1\n        for i in range(n):\n            if table[i][a - 1] == 1:\n                table[i][a - 1] = a\n        for i in range(m):\n            if table[r - 1][i] == 1:\n                table[r - 1][i] = a\n    for row in table:\n        print(*row)\n    return ''"
    },
    {
        "number": 1548,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    return str(max(a) * max(a))"
    },
    {
        "number": 1549,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, q = map(int, stdin.split())\n    cities = list(map(int, stdin.split()))\n    years = list(map(int, stdin.split()))\n    cities.sort()\n    years.sort()\n    cities_dict = {}\n    for i in range(n):\n        cities_dict[cities[i]] = i\n    for i in range(q):\n        k = int(stdin.split()[i])\n        print(cities_dict[years[k - 1]])"
    },
    {
        "number": 1550,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    display = stdin.readline().strip()\n    display = list(display)\n    for i in range(n):\n        if display[i] == '9':\n            display[i] = '0'\n        else:\n            display[i] = str(int(display[i]) + 1)\n    return ''.join(display)"
    },
    {
        "number": 1551,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = [int(x) for x in stdin.split()]\n    people = [tuple(int(x) for x in stdin.split()) for _ in range(n)]\n    people.sort(key=lambda x: x[0])\n    left = 0\n    right = 10**6\n    for p in people:\n        if p[0] == 0:\n            left = p[1]\n        if p[0] == 10**6:\n            right = p[1]\n    if left == 0 and right == 10**6:\n        return '0.000000000000000000000000000000'\n    if left == 0:\n        return str(right)\n    if right == 10**6:\n        return str(left)\n    if left == right:\n        return str(left)\n    if left > right:\n        return str(left)\n    if left == right - 1:\n        return str(left)\n    if left == right - 2:\n        return str(left)\n    if left == right - 3:\n        return str(left)\n    if left == right - 4:\n        return str(left)\n    if left == right - 5:\n        return str(left)\n    if left == right - 6:\n        return str(left)\n    if left == right - 7:\n        return str(left)\n    if left == right - 8:\n        return str(left)\n    if left == right - 9:\n        return str(left)\n    if left == right - 10:\n        return str(left)\n    if left == right - 11:\n        return str(left)\n    if left == right - 12:\n        return str(left)\n    if left == right - 13:\n        return str(left)\n    if left == right - 14:\n        return str(left)\n    if left == right - 15:\n        return str(left)\n    if left == right - 16:\n        return str(left)\n    if left == right - 17:\n        return str(left)\n    if left == right - 18:\n        return str(left)\n    if left == right - 19:\n        return str(left)\n    if left == right - 20:\n        return str(left)\n    if left == right - 21:\n        return str(left)\n    if left == right - 22:\n        return str(left)\n    if left == right - 23:\n        return str(left)\n    if left == right - 24:\n        return str(left)\n    if left == right - 25:\n        return str(left)\n    if left == right - 26:\n        return str(left)\n    if left == right - 27:\n        return str(left)\n    if left == right - 28:\n        return str(left)\n    if left == right - 29:\n        return str(left)\n    if left == right - 30:\n        return str(left)\n    if left == right - 31:\n        return str(left)\n    if left == right - 32:\n        return str(left)\n    if left == right - 33:\n        return str(left)\n    if left == right - 34:\n        return str(left)\n    if left == right - 35:\n        return str(left)\n    if left == right - 36:\n        return str(left)\n    if left == right - 37:\n        return str(left)\n    if left == right - 38:\n        return str(left)\n    if left == right - 39:\n        return str(left)\n    if left == right - 40:\n        return str(left)\n    if left == right - 41:\n        return str(left)\n    if left == right - 42:\n        return str(left)\n    if left == right - 43:\n        return str(left)\n    if left == right - 44:\n        return str(left)\n    if left == right - 45:\n        return str(left)\n    if left == right - 46:\n        return str(left)\n    if left == right - 47:\n        return str(left)\n    if left == right - 48:\n        return str(left)\n    if left == right - 49:\n        return str(left)\n    if left == right - 50:\n        return str(left)\n    if left == right - 51:\n        return str(left)\n    if left == right - 52:\n        return str(left)\n    if left == right - 53:\n        return str(left)\n    if left == right - 54:\n        return str(left)\n    if left == right - 55:\n        return str(left)\n    if left == right - 56:\n        return str(left)\n    if left == right - 57:\n        return str(left)\n    if left == right - 58:\n        return str(left)\n    if left == right - 59:\n        return str(left)\n    if left == right - 60:\n        return str(left)\n    if left == right - 61:\n        return str(left)\n    if left == right - 62:\n        return str(left)\n    if left == right - 63:\n        return str(left)\n    if left == right - 64:\n        return str(left)\n    if left == right - 65:\n        return str(left)\n    if left == right - 66:\n        return str(left)"
    },
    {
        "number": 1552,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    t = [int(x) for x in stdin.readline().split()]\n    t.sort()\n    t.reverse()\n    print(t)\n    print(t[0])\n    print(t[1])\n    print(t[2])\n    print(t[3])\n    print(t[4])\n    print(t[5])\n    print(t[6])\n    print(t[7])\n    print(t[8])\n    print(t[9])\n    print(t[10])\n    print(t[11])\n    print(t[12])\n    print(t[13])\n    print(t[14])\n    print(t[15])\n    print(t[16])\n    print(t[17])\n    print(t[18])\n    print(t[19])\n    print(t[20])\n    print(t[21])\n    print(t[22])\n    print(t[23])\n    print(t[24])\n    print(t[25])\n    print(t[26])\n    print(t[27])\n    print(t[28])\n    print(t[29])\n    print(t[30])\n    print(t[31])\n    print(t[32])\n    print(t[33])\n    print(t[34])\n    print(t[35])\n    print(t[36])\n    print(t[37])\n    print(t[38])\n    print(t[39])\n    print(t[40])\n    print(t[41])\n    print(t[42])\n    print(t[43])\n    print(t[44])\n    print(t[45])\n    print(t[46])\n    print(t[47])\n    print(t[48])\n    print(t[49])\n    print(t[50])\n    print(t[51])\n    print(t[52])\n    print(t[53])\n    print(t[54])\n    print(t[55])\n    print(t[56])\n    print(t[57])\n    print(t[58])\n    print(t[59])\n    print(t[60])\n    print(t[61])\n    print(t[62])\n    print(t[63])\n    print(t[64])\n    print(t[65])\n    print(t[66])\n    print(t[67])\n    print(t[68])\n    print(t[69])\n    print(t[70])\n    print(t[71])\n    print(t[72])\n    print(t[73])\n    print(t[74])\n    print(t[75])\n    print(t[76])\n    print(t[77])\n    print(t[78])\n    print(t[79])\n    print(t[80])\n    print(t[81])\n    print(t[82])\n    print(t[83])\n    print(t[84])\n    print(t[85])\n    print(t[86])\n    print(t[87])\n    print(t[88])\n    print(t[89])\n    print(t[90])\n    print(t[91])\n    print(t[92])\n    print(t[93])\n    print(t[94])\n    print(t[95])\n    print(t[96])\n    print(t[97])\n    print(t[98])\n    print(t[99])\n    print(t[100])\n    print(t[101])\n    print(t[102])\n    print(t[103])\n    print(t[104])\n    print(t[105])\n    print(t[106])\n    print(t[107])\n    print(t[108])\n    print(t[109])\n    print(t[110])\n    print(t[111])\n    print(t[112])\n    print(t[113])\n    print(t[114])\n    print(t[115])\n    print(t[116])\n    print(t[117])\n    print(t[118])\n    print(t[119])\n    print(t[120])\n    print(t[121])\n    print(t[122])\n    print(t[123])\n    print(t[124])\n    print(t[125])\n    print(t[126])\n    print(t[127])\n    print(t[128])\n    print(t[129])\n    print(t[130])\n    print(t[131])\n    print(t[132])\n    print(t[133])\n    print(t[134])\n    print(t[135])\n    print(t[136])\n    print(t[137])\n    print(t[138])\n    print(t[139])\n    print(t[140])\n    print(t[141])\n    print(t[142])\n    print(t[143])\n    print(t[144])\n    print(t[145])\n    print(t[146])\n    print(t[147])\n    print(t[148])\n    print(t[149])\n    print(t[150])\n    print(t[151])\n    print(t[152])\n    print(t[153])\n    print(t[154])\n    print(t[155])\n    print(t[156])\n    print(t[157])\n    print(t[158])\n    print(t[159])\n    print(t[160])\n    print(t[161])\n    print(t[162])\n    print(t[163])\n    print(t[164])\n    print(t[165])\n    print(t[166])\n    print(t[167])\n    print(t[168])\n    print(t[169])\n    print(t[170])\n    print(t[171])\n    print(t[172])\n    print(t[173])\n    print(t[174])\n    print(t[175])\n    print(t[176])\n    print(t[177])\n    print(t[178])\n    print(t[179])\n    print(t[180])\n    print(t[181])\n    print(t[182])\n    print(t[183])\n    print(t[184])\n    print(t[185])\n    print(t[186])\n    print(t[187"
    },
    {
        "number": 1553,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, h = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    k = 0\n    for i in range(n):\n        if a[i] > h:\n            k = i\n            break\n    return k"
    },
    {
        "number": 1554,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    pearls = [int(x) for x in stdin.readline().split()]\n    pearls.sort()\n    segments = []\n    for i in range(n):\n        if i == 0:\n            segments.append([pearls[i], i + 1])\n        elif i == n - 1:\n            segments.append([pearls[i], i + 1])\n        else:\n            if pearls[i] == pearls[i - 1]:\n                segments.append([pearls[i], i + 1])\n            else:\n                segments.append([pearls[i], i + 1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments = [str(x[0]) +'' + str(x[1]) for x in segments]\n    print(len(segments))\n    print(' '.join(segments))\n    return ''\n"
    },
    {
        "number": 1555,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [stdin.split()[i] for i in range(n)]\n    a = [[int(x) for x in stdin.split()] for stdin in a]\n    a = [[a[i][j] for i in range(n)] for j in range(m)]\n    a = [[a[i][j] for i in range(n)] for j in range(m)]\n    a = [[a[i][j] for i in range(n)] for j in range(m)]\n    a = [[a[i][j] for i in range(n)] for j in range(m)]\n    a = [[a[i][j] for i in range(n)] for j in range(m)]\n    a = [[a[i][j] for i in range(n)] for j in range(m)]\n    a = [[a[i][j] for i in range(n)] for j in range(m)]\n    a = [[a[i][j] for i in range(n)] for j in range(m)]\n    a = [[a[i][j] for i in range(n)] for j in range(m)]\n    a = [[a[i][j] for i in range(n)] for j in range(m)]\n    a = [[a[i][j] for i in range(n)] for j in range(m)]\n    a = [[a[i][j] for i in range(n)] for j in range(m)]\n    a = [[a[i][j] for i in range(n)] for j in range(m)]\n    a = [[a[i][j] for i in range(n)] for j in range(m)]\n    a = [[a[i][j] for i in range(n)] for j in range(m)]\n    a = [[a[i][j] for i in range(n)] for j in range(m)]\n    a = [[a[i][j] for i in range(n)] for j in range(m)]\n    a = [[a[i][j] for i in range(n)] for j in range(m)]\n    a = [[a[i][j] for i in range(n)] for j in range(m)]\n    a = [[a[i][j] for i in range(n)] for j in range(m)]\n    a = [[a[i][j] for i in range(n)] for j in range(m)]\n    a = [[a[i][j] for i in range(n)] for j in range(m)]\n    a = [[a[i][j] for i in range(n)] for j in range(m)]\n    a = [[a[i][j] for i in range(n)] for j in range(m)]\n    a = [[a[i][j] for i in range(n)] for j in range(m)]\n    a = [[a[i][j] for i in range(n)] for j in range(m)]\n    a = [[a[i][j] for i in range(n)] for j in range(m)]\n    a = [[a[i][j] for i in range(n)] for j in range(m)]\n    a = [[a[i][j] for i in range(n)] for j in range(m)]\n    a = [[a[i][j] for i in range(n)] for j in range(m)]\n    a = [[a[i][j] for i in range(n)] for j in range(m)]\n    a = [[a[i][j] for i in range(n)] for j in range(m)]\n    a = [[a[i][j] for i in range(n)] for j in range(m)]\n    a = [[a[i][j] for i in range(n)] for j in range(m)]\n    a = [[a[i][j] for i in range(n)] for j in range(m)]\n    a = [[a[i][j] for i in range(n)] for j in range(m)]\n    a = [[a[i][j] for i in range(n)] for j in range(m)]\n    a = [[a[i][j] for i in range(n)] for j in range(m)]\n    a = [[a[i][j] for i in range(n)] for j in range(m)]\n    a = [[a[i][j] for i in range(n)] for j in range(m)]\n    a = [[a[i][j] for i in range(n)] for j in range(m)]\n    a = [[a[i][j] for i in range(n)] for j in range(m)]\n    a = [[a[i][j] for i in range(n)] for j in range(m)]\n    a = [[a[i][j] for i in range(n)] for j in range(m)]\n    a = [[a[i][j] for i in range(n)] for j in range(m)]\n    a = [[a[i][j] for i in range(n)] for"
    },
    {
        "number": 1556,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a = [x % x for x in a]\n    a = [x for x in a if x!= 0]\n    a = [x for x in a if x!= 1]\n    a = [x for x in a if x!= -1]\n    a = [x for x in a if x!= -2]\n    a = [x for x in a if x!= -3]\n    a = [x for x in a if x!= -4]\n    a = [x for x in a if x!= -5]\n    a = [x for x in a if x!= -6]\n    a = [x for x in a if x!= -7]\n    a = [x for x in a if x!= -8]\n    a = [x for x in a if x!= -9]\n    a = [x for x in a if x!= -10]\n    a = [x for x in a if x!= -11]\n    a = [x for x in a if x!= -12]\n    a = [x for x in a if x!= -13]\n    a = [x for x in a if x!= -14]\n    a = [x for x in a if x!= -15]\n    a = [x for x in a if x!= -16]\n    a = [x for x in a if x!= -17]\n    a = [x for x in a if x!= -18]\n    a = [x for x in a if x!= -19]\n    a = [x for x in a if x!= -20]\n    a = [x for x in a if x!= -21]\n    a = [x for x in a if x!= -22]\n    a = [x for x in a if x!= -23]\n    a = [x for x in a if x!= -24]\n    a = [x for x in a if x!= -25]\n    a = [x for x in a if x!= -26]\n    a = [x for x in a if x!= -27]\n    a = [x for x in a if x!= -28]\n    a = [x for x in a if x!= -29]\n    a = [x for x in a if x!= -30]\n    a = [x for x in a if x!= -31]\n    a = [x for x in a if x!= -32]\n    a = [x for x in a if x!= -33]\n    a = [x for x in a if x!= -34]\n    a = [x for x in a if x!= -35]\n    a = [x for x in a if x!= -36]\n    a = [x for x in a if x!= -37]\n    a = [x for x in a if x!= -38]\n    a = [x for x in a if x!= -39]\n    a = [x for x in a if x!= -40]\n    a = [x for x in a if x!= -41]\n    a = [x for x in a if x!= -42]\n    a = [x for x in a if x!= -43]\n    a = [x for x in a if x!= -44]\n    a = [x for x in a if x!= -45]\n    a = [x for x in a if x!= -46]\n    a = [x for x in a if x!= -47]\n    a = [x for x in a if x!= -48]\n    a = [x for x in a if x!= -49]\n    a = [x for x in a if x!= -50]\n    a = [x for x in a if x!= -51]\n    a = [x for x in a if x!= -52]\n    a = [x for x in a if x!= -53]\n    a = [x for x in a if x!= -54]\n    a = [x for x in a if x!= -55]\n    a = [x for x in a if x!= -56]\n    a = [x for x in a if x!= -57]\n    a = [x for x in a if x!= -58]\n    a = [x for x in a if x!= -59]\n    a = [x for x in a if x!= -60]\n    a = [x for x in a if x!= -61]\n    a = [x for x in a if x!= -62]\n    a = [x for x in a if x!= -63]\n    a = [x for x in a if x!= -64]\n    a = [x for x in a if x!= -65]\n    a = [x for x in a if x!= -66]\n    a = [x for x in a if x!= -67]\n    a = [x for x in a if x!= -68]\n    a = [x for x in a if x!= -69]\n    a = [x for x in a if x!= -70]\n    a = [x for x in a if x!= -71]\n    a = [x for x in a if x!= -72]\n    a = [x for x in a if x!= -73]\n    a = [x for x in a if x!= -74]\n    a = [x for x in a if x!= -75]\n    a = [x for x in a if x!= -76]\n    a = [x for x in a if x!= -77]\n    a = [x for x in a if x!= -78]\n    a = [x for x in a if x!= -79]\n    a = [x for x in a if x!= -80]\n    a = [x for x in a if x!= -81]\n    a = [x for x in a if x!= -82]\n    a = [x for x in a if x!= -83]\n    a = [x for x in a if x!= -84]\n    a = [x for x in a if x!= -85]\n    a = [x for x in a if x!= -86]\n    a = [x for x in a if x!= -87]\n    a = [x for x in a if x!= -88]\n    a = [x for x in a if x!= -89]\n    a = [x for x in a if x!= -90]\n    a = [x for x in a if x!= -91]\n    a = [x for x in a "
    },
    {
        "number": 1557,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    health, attack, healing = map(int, stdin.split())\n    health_modcrab, attack_modcrab = map(int, stdin.split())\n    health_modcrab -= attack\n    health_modcrab -= attack_modcrab\n    health_modcrab -= attack\n    health_modcrab -= attack_modcrab\n    health_modcrab -= attack\n    health_modcrab -= attack_modcrab\n    health_modcrab -= attack\n    health_modcrab -= attack_modcrab\n    health_modcrab -= attack\n    health_modcrab -= attack_modcrab\n    health_modcrab -= attack\n    health_modcrab -= attack_modcrab\n    health_modcrab -= attack\n    health_modcrab -= attack_modcrab\n    health_modcrab -= attack\n    health_modcrab -= attack_modcrab\n    health_modcrab -= attack\n    health_modcrab -= attack_modcrab\n    health_modcrab -= attack\n    health_modcrab -= attack_modcrab\n    health_modcrab -= attack\n    health_modcrab -= attack_modcrab\n    health_modcrab -= attack\n    health_modcrab -= attack_modcrab\n    health_modcrab -= attack\n    health_modcrab -= attack_modcrab\n    health_modcrab -= attack\n    health_modcrab -= attack_modcrab\n    health_modcrab -= attack\n    health_modcrab -= attack_modcrab\n    health_modcrab -= attack\n    health_modcrab -= attack_modcrab\n    health_modcrab -= attack\n    health_modcrab -= attack_modcrab\n    health_modcrab -= attack\n    health_modcrab -= attack_modcrab\n    health_modcrab -= attack\n    health_modcrab -= attack_modcrab\n    health_modcrab -= attack\n    health_modcrab -= attack_modcrab\n    health_modcrab -= attack\n    health_modcrab -= attack_modcrab\n    health_modcrab -= attack\n    health_modcrab -= attack_modcrab\n    health_modcrab -= attack\n    health_modcrab -= attack_modcrab\n    health_modcrab -= attack\n    health_modcrab -= attack_modcrab\n    health_modcrab -= attack\n    health_modcrab -= attack_modcrab\n    health_modcrab -= attack\n    health_modcrab -= attack_modcrab\n    health_modcrab -= attack\n    health_modcrab -= attack_modcrab\n    health_modcrab -= attack\n    health_modcrab -= attack_modcrab\n    health_modcrab -= attack\n    health_modcrab -= attack_modcrab\n    health_modcrab -= attack\n    health_modcrab -= attack_modcrab\n    health_modcrab -= attack\n    health_modcrab -= attack_modcrab\n    health_modcrab -= attack\n    health_modcrab -= attack_modcrab\n    health_modcrab -= attack\n    health_modcrab -= attack_modcrab\n    health_modcrab -= attack\n    health_modcrab -= attack_modcrab\n    health_modcrab -= attack\n    health_modcrab -= attack_modcrab\n    health_modcrab -= attack\n    health_modcrab -= attack_modcrab\n    health_modcrab -= attack\n    health_modcrab -= attack_modcrab\n    health_modcrab -= attack\n    health_modcrab -= attack_modcrab\n    health_modcrab -= attack\n    health_modcrab -= attack_modcrab\n    health_modcrab -= attack\n    health_modcrab -= attack_modcrab\n    health_modcrab -= attack\n    health_modcrab -= attack_modcrab\n    health_modcrab -= attack\n    health_modcrab -= attack_modcrab\n    health_modcrab -= attack\n    health_modcrab -= attack_modcrab\n    health_modcrab -= attack\n    health_modcrab -= attack_modcrab\n    health_modcrab -= attack\n    health_modcrab -= attack_modcrab\n    health_modcrab -= attack\n    health_modcrab -= attack_modcrab\n    health_modcrab -= attack\n    health_modcrab -= attack_modcrab\n    health_modcrab -= attack\n    health_modcrab -= attack_modcrab\n    health_modcrab -= attack\n    health_modcrab -= attack_modcrab\n    health_modcrab -= attack\n    health_modcrab -= attack_modcrab\n    health_modcrab -= attack\n    health_modcrab -= attack_modcrab\n    health_modcrab -= attack\n    health_modcrab -= attack_modcrab\n    health_modcrab -= attack\n    health_modcrab -= attack_modcrab\n    health_modcrab -= attack\n    health_modcrab -= attack_modcrab\n    health_modcrab -= attack\n    health_modcrab -= attack_modcrab\n    health_modcrab -= attack\n    health_modcrab -= attack_modcrab\n    health_modcrab -= attack\n    health_modcrab -= attack_modcrab\n    health_modcrab -= attack\n"
    },
    {
        "number": 1558,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, r, avg = [int(x) for x in stdin.split()]\n    grades = [int(x) for x in stdin.split()]\n    grades.sort()\n    grades.reverse()\n    count = 0\n    for i in range(n):\n        if grades[i] >= avg:\n            count += 1\n        else:\n            break\n    return str(count)"
    },
    {
        "number": 1559,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    L = int(stdin.readline().strip())\n    A = int(stdin.readline().strip())\n    return str(A + L - 1)"
    },
    {
        "number": 1560,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    cockroaches = stdin.readline().strip()\n    black, red = 0, 0\n    for i in range(n):\n        if cockroaches[i] == 'b':\n            black += 1\n        else:\n            red += 1\n    if black == red:\n        return str(0)\n    else:\n        return str(min(black, red))"
    },
    {
        "number": 1561,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 1562,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k, q = [int(x) for x in stdin.split()]\n    r, c = [int(x) for x in stdin.split()]\n    treasures = [int(x) for x in stdin.split()]\n    safe_columns = [int(x) for x in stdin.split()]\n    moves = 0\n    while len(treasures) > 0:\n        moves += 1\n        if r == 1:\n            if c in safe_columns:\n                break\n            else:\n                c += 1\n        elif c == m:\n            if r in safe_columns:\n                break\n            else:\n                r += 1\n        elif r == n:\n            if c in safe_columns:\n                break\n            else:\n                c -= 1\n        elif c == 1:\n            if r in safe_columns:\n                break\n            else:\n                r -= 1\n        else:\n            if r in safe_columns:\n                break\n            else:\n                r += 1\n                c -= 1\n        if r in safe_columns:\n            treasures.remove(r)\n            safe_columns.remove(r)\n    return str(moves)"
    },
    {
        "number": 1563,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    colors = [int(x) for x in stdin.split()]\n    edges = [tuple(int(x) for x in stdin.split()) for _ in range(m)]\n    graph = {i: set() for i in range(1, n + 1)}\n    for a, b in edges:\n        graph[a].add(b)\n        graph[b].add(a)\n    max_color = 0\n    max_color_neighbours = 0\n    for color in colors:\n        neighbours = 0\n        for vertex in graph:\n            if color in graph[vertex]:\n                neighbours += 1\n        if neighbours > max_color_neighbours:\n            max_color_neighbours = neighbours\n            max_color = color\n    return str(max_color)"
    },
    {
        "number": 1564,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[1:n+1]\n    t = stdin[n+2:n+2+n]\n    if s == t:\n        return str(-1)\n    else:\n        return str(len(s)) +'' +''.join(map(str, range(n)))"
    },
    {
        "number": 1565,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l = int(stdin.readline())\n    n = stdin.readline().strip()\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    n = str(n)\n    n ="
    },
    {
        "number": 1566,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 1567,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(count_stable_arrays(n, k))\n\ndef"
    },
    {
        "number": 1568,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, A, B, C, T = [int(x) for x in stdin.split()]\n    t = [int(x) for x in stdin.split()]\n    t.sort()\n    t.reverse()\n    t = t[:n]\n    t = [x for x in t if x > 0]\n    t = [x for x in t if x <= T]\n    t = [x for x in t if x <= T]\n    t = [x for x in t if x <= T]\n    t = [x for x in t if x <= T]\n    t = [x for x in t if x <= T]\n    t = [x for x in t if x <= T]\n    t = [x for x in t if x <= T]\n    t = [x for x in t if x <= T]\n    t = [x for x in t if x <= T]\n    t = [x for x in t if x <= T]\n    t = [x for x in t if x <= T]\n    t = [x for x in t if x <= T]\n    t = [x for x in t if x <= T]\n    t = [x for x in t if x <= T]\n    t = [x for x in t if x <= T]\n    t = [x for x in t if x <= T]\n    t = [x for x in t if x <= T]\n    t = [x for x in t if x <= T]\n    t = [x for x in t if x <= T]\n    t = [x for x in t if x <= T]\n    t = [x for x in t if x <= T]\n    t = [x for x in t if x <= T]\n    t = [x for x in t if x <= T]\n    t = [x for x in t if x <= T]\n    t = [x for x in t if x <= T]\n    t = [x for x in t if x <= T]\n    t = [x for x in t if x <= T]\n    t = [x for x in t if x <= T]\n    t = [x for x in t if x <= T]\n    t = [x for x in t if x <= T]\n    t = [x for x in t if x <= T]\n    t = [x for x in t if x <= T]\n    t = [x for x in t if x <= T]\n    t = [x for x in t if x <= T]\n    t = [x for x in t if x <= T]\n    t = [x for x in t if x <= T]\n    t = [x for x in t if x <= T]\n    t = [x for x in t if x <= T]\n    t = [x for x in t if x <= T]\n    t = [x for x in t if x <= T]\n    t = [x for x in t if x <= T]\n    t = [x for x in t if x <= T]\n    t = [x for x in t if x <= T]\n    t = [x for x in t if x <= T]\n    t = [x for x in t if x <= T]\n    t = [x for x in t if x <= T]\n    t = [x for x in t if x <= T]\n    t = [x for x in t if x <= T]\n    t = [x for x in t if x <= T]\n    t = [x for x in t if x <= T]\n    t = [x for x in t if x <= T]\n    t = [x for x in t if x <= T]\n    t = [x for x in t if x <= T]\n    t = [x for x in t if x <= T]\n    t = [x for x in t if x <= T]\n    t = [x for x in t if x <= T]\n    t = [x for x in t if x <= T]\n    t = [x for x in t if x <= T]\n    t = [x for x in t if x <= T]\n    t = [x for x in t if x <= T]\n    t = [x for x in t if x <= T]\n    t = [x for x in t if x <= T]\n    t = [x for x in t if x <= T]\n    t = [x for x in t if x <= T]\n    t = [x for x in t if x <= T]\n    t = [x for x in t if x <= T]\n    t = [x for x in t if x <= T]\n    t = [x for x in t if x <= T]\n    t = [x for x in t if x <= T]\n    t = [x for x in t if x <= T]\n    t = [x for x in t if x <= T]\n    t = [x for x in t if x <= T]\n    t = [x for x in t if x <= T]\n    t = [x for x in t if x <= T]\n    t = [x for x in t if x <= T]\n    t = [x for x in t if x <= T]\n    t = [x for x in t if x <= T]\n    t = [x for x in t if x <= T]\n    t = [x for x in t if x <= T]\n    t = [x for x in t if x <= T]\n    t = [x for x in t if x <= T]\n    t = [x for x in t if x <= T]\n    t = [x for x in t if x <= T]\n    t = [x for x in t if x <= T]\n    t = [x for x in t if x <= T]\n    t = [x for x in t if x <= T]\n    t = [x for x in t if x <= T]\n    t = [x for x in t if x <= T]\n    t = [x for x in t if x <= T]\n    t = [x for x in t if x <= T]\n    t = [x for x in t if x <= T]\n    t = [x for x in t if x <= T]\n    t = [x for x in t if x <= T]\n    t = [x for x in t if x <= T]\n    t = [x for x in t if x <= T]\n    t = [x for x in t if x <= T]\n    t = [x for x in t if x <= T]\n    t = [x for x in t if x <= T]\n    t = [x for x in t if x <= T]\n    "
    },
    {
        "number": 1569,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    roads = [tuple(int(x) for x in stdin.split()) for _ in range(m)]\n    roads.sort(key=lambda x: x[2])\n    roads = [x[:2] for x in roads]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x[0]!= x[1]]\n    roads = [x for x in roads if x"
    },
    {
        "number": 1570,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, n, w = [int(x) for x in stdin.split()]\n    return str(k * n - w)"
    },
    {
        "number": 1571,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    T = stdin.strip()\n    n = len(S)\n    m = len(T)\n    A = \"\"\n    for i in range(n):\n        A += T[i]\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A = A + T\n    A"
    },
    {
        "number": 1572,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    max_len = 1\n    for i in range(1, n):\n        if a[i] - a[i - 1] > max_len:\n            max_len = a[i] - a[i - 1]\n    return max_len"
    },
    {
        "number": 1573,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d = [int(x) for x in stdin.split()]\n    friends = [int(x) for x in stdin.split()]\n    friends.sort()\n    max_friendship = 0\n    for i in range(n):\n        max_friendship += friends[i] * (n - i)\n    return str(max_friendship)\n\nprint(solution(input()))\n"
    },
    {
        "number": 1574,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    if n < 3 or m < 0:\n        return '-1'\n    if m == 0:\n        return '0'\n    if m == 1:\n        return str(n - 1)\n    if m == 2:\n        return str(n - 2)\n    if m == 3:\n        return str(n - 3)\n    if m == 4:\n        return str(n - 4)\n    if m == 5:\n        return str(n - 5)\n    if m == 6:\n        return str(n - 6)\n    if m == 7:\n        return str(n - 7)\n    if m == 8:\n        return str(n - 8)\n    if m == 9:\n        return str(n - 9)\n    if m == 10:\n        return str(n - 10)\n    if m == 11:\n        return str(n - 11)\n    if m == 12:\n        return str(n - 12)\n    if m == 13:\n        return str(n - 13)\n    if m == 14:\n        return str(n - 14)\n    if m == 15:\n        return str(n - 15)\n    if m == 16:\n        return str(n - 16)\n    if m == 17:\n        return str(n - 17)\n    if m == 18:\n        return str(n - 18)\n    if m == 19:\n        return str(n - 19)\n    if m == 20:\n        return str(n - 20)\n    if m == 21:\n        return str(n - 21)\n    if m == 22:\n        return str(n - 22)\n    if m == 23:\n        return str(n - 23)\n    if m == 24:\n        return str(n - 24)\n    if m == 25:\n        return str(n - 25)\n    if m == 26:\n        return str(n - 26)\n    if m == 27:\n        return str(n - 27)\n    if m == 28:\n        return str(n - 28)\n    if m == 29:\n        return str(n - 29)\n    if m == 30:\n        return str(n - 30)\n    if m == 31:\n        return str(n - 31)\n    if m == 32:\n        return str(n - 32)\n    if m == 33:\n        return str(n - 33)\n    if m == 34:\n        return str(n - 34)\n    if m == 35:\n        return str(n - 35)\n    if m == 36:\n        return str(n - 36)\n    if m == 37:\n        return str(n - 37)\n    if m == 38:\n        return str(n - 38)\n    if m == 39:\n        return str(n - 39)\n    if m == 40:\n        return str(n - 40)\n    if m == 41:\n        return str(n - 41)\n    if m == 42:\n        return str(n - 42)\n    if m == 43:\n        return str(n - 43)\n    if m == 44:\n        return str(n - 44)\n    if m == 45:\n        return str(n - 45)\n    if m == 46:\n        return str(n - 46)\n    if m == 47:\n        return str(n - 47)\n    if m == 48:\n        return str(n - 48)\n    if m == 49:\n        return str(n - 49)\n    if m == 50:\n        return str(n - 50)\n    if m == 51:\n        return str(n - 51)\n    if m == 52:\n        return str(n - 52)\n    if m == 53:\n        return str(n - 53)\n    if m == 54:\n        return str(n - 54)\n    if m == 55:\n        return str(n - 55)\n    if m == 56:\n        return str(n - 56)\n    if m == 57:\n        return str(n - 57)\n    if m == 58:\n        return str(n - 58)\n    if m == 59:\n        return str(n - 59)\n    if m == 60:\n        return str(n - 60)\n    if m == 61:\n        return str(n - 61)\n    if m == 62:\n        return str(n - 62)\n    if m == 63:\n        return str(n - 63)\n    if m == 64:\n        return str(n - 64)\n    if m == 65:\n        return str(n - 65)\n    if m == 66:\n        return str(n - 66)\n    if m == 67:\n        return str(n - 67)\n    if m == 68:\n        return str(n - 68)\n    if m == 69:\n        return str(n - 69)\n    if m == 70:\n        return str(n - 70)\n    if m == 71:\n        return str(n - 71)\n    if m == 72:\n        return str(n - 72)\n    if m == 73:\n        return str(n - 73)\n    if m == 74:\n        return str(n - 74)\n    if m == 75:\n        return str(n - 75)\n    if m == 76:\n        return str(n - 76)\n    if m == 77:\n        return str(n - 77)\n    if m == 78:\n        return str(n - 78)\n    if m == 79:\n        return str(n - 79)\n    if m == 80:\n        return str(n - 80)\n    if m == 81:\n        return str(n - 81)\n    if m == 82:\n        return str(n - 82)\n    if m == 83:\n        return str(n - 83)\n    if m == 84:\n        return str(n - 84)\n    if m == 85:\n        return str(n - 85)\n    if m == 86:\n        return str(n - 86)\n    if m == 87:\n        return str(n - 87)\n    if m == 88:\n        return str(n - 88)\n    if m == 89:\n        return str(n - 89)\n    if m == 90:\n        return str(n - 90)"
    },
    {
        "number": 1575,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 1576,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 1577,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[0]\n    if s.count('A') > s.count('D'):\n        return 'Anton'\n    elif s.count('A') < s.count('D'):\n        return 'Danik'\n    else:\n        return 'Friendship'"
    },
    {
        "number": 1578,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"1\"\n    elif n == 2:\n        return \"1\"\n    elif n == 3:\n        return \"2\"\n    elif n == 4:\n        return \"2\"\n    elif n == 5:\n        return \"3\"\n    elif n == 6:\n        return \"3\"\n    elif n == 7:\n        return \"4\"\n    elif n == 8:\n        return \"4\"\n    elif n == 9:\n        return \"5\"\n    elif n == 10:\n        return \"5\"\n    else:\n        return \"6\""
    },
    {
        "number": 1579,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    dots = []\n    for _ in range(n):\n        x, y = map(int, stdin.readline().split())\n        dots.append((x, y))\n    dots.sort()\n    dots.append((0, 0))\n    dots.sort()\n    dots.append((0, 0))\n    dots.sort()\n    dots.append((0, 0))\n    dots.sort()\n    dots.append((0, 0))\n    dots.sort()\n    dots.append((0, 0))\n    dots.sort()\n    dots.append((0, 0))\n    dots.sort()\n    dots.append((0, 0))\n    dots.sort()\n    dots.append((0, 0))\n    dots.sort()\n    dots.append((0, 0))\n    dots.sort()\n    dots.append((0, 0))\n    dots.sort()\n    dots.append((0, 0))\n    dots.sort()\n    dots.append((0, 0))\n    dots.sort()\n    dots.append((0, 0))\n    dots.sort()\n    dots.append((0, 0))\n    dots.sort()\n    dots.append((0, 0))\n    dots.sort()\n    dots.append((0, 0))\n    dots.sort()\n    dots.append((0, 0))\n    dots.sort()\n    dots.append((0, 0))\n    dots.sort()\n    dots.append((0, 0))\n    dots.sort()\n    dots.append((0, 0))\n    dots.sort()\n    dots.append((0, 0))\n    dots.sort()\n    dots.append((0, 0))\n    dots.sort()\n    dots.append((0, 0))\n    dots.sort()\n    dots.append((0, 0))\n    dots.sort()\n    dots.append((0, 0))\n    dots.sort()\n    dots.append((0, 0))\n    dots.sort()\n    dots.append((0, 0))\n    dots.sort()\n    dots.append((0, 0))\n    dots.sort()\n    dots.append((0, 0))\n    dots.sort()\n    dots.append((0, 0))\n    dots.sort()\n    dots.append((0, 0))\n    dots.sort()\n    dots.append((0, 0))\n    dots.sort()\n    dots.append((0, 0))\n    dots.sort()\n    dots.append((0, 0))\n    dots.sort()\n    dots.append((0, 0))\n    dots.sort()\n    dots.append((0, 0))\n    dots.sort()\n    dots.append((0, 0))\n    dots.sort()\n    dots.append((0, 0))\n    dots.sort()\n    dots.append((0, 0))\n    dots.sort()\n    dots.append((0, 0))\n    dots.sort()\n    dots.append((0, 0))\n    dots.sort()\n    dots.append((0, 0))\n    dots.sort()\n    dots.append((0, 0))\n    dots.sort()\n    dots.append((0, 0))\n    dots.sort()\n    dots.append((0, 0))\n    dots.sort()\n    dots.append((0, 0))\n    dots.sort()\n    dots.append((0, 0))\n    dots.sort()\n    dots.append((0, 0))\n    dots.sort()\n    dots.append((0, 0))\n    dots.sort()\n    dots.append((0, 0))\n    dots.sort()\n    dots.append((0, 0))\n    dots.sort()\n    dots.append((0, 0))\n    dots.sort()\n    dots.append((0, 0))\n    dots.sort()\n    dots.append((0, 0))\n    dots.sort()\n    dots.append((0, 0))\n    dots.sort()\n    dots.append((0, 0))\n    dots.sort()\n    dots.append((0, 0))\n    dots.sort()\n    dots.append((0, 0))\n    dots.sort()\n    dots.append((0, 0))\n    dots.sort()\n    dots.append((0, 0))\n    dots.sort()\n    dots.append((0, 0))\n    dots.sort()\n    dots.append((0, 0))\n    dots.sort()\n    dots.append((0, 0))\n    dots.sort()\n    dots.append((0, 0))\n    dots.sort()\n    dots.append((0, 0))\n    dots.sort()\n    dots.append((0, 0))\n    dots.sort()\n    dots.append((0, 0))\n    dots.sort()\n    dots.append((0, 0))\n    dots.sort()\n    dots.append((0, 0))\n    dots.sort()\n    dots.append((0, 0))\n    dots.sort()\n    dots.append((0, 0))\n    dots.sort()\n    dots.append((0, 0))\n    dots.sort()\n    dots.append((0, 0))\n    dots.sort()\n    dots.append((0, 0))\n    dots.sort()\n    dots.append((0, 0))\n    dots.sort()\n    dots.append((0, 0))\n    dots.sort()\n    dots.append((0, 0))\n    dots.sort()\n    dots.append((0, 0))\n    dots.sort()\n    dots.append((0, 0))\n    dots.sort()\n    dots.append((0, 0))\n    dots.sort()\n    dots.append((0, 0))\n    dots.sort()\n    dots.append((0, 0))\n    dots.sort()\n    dots.append((0, 0))\n    dots.sort()\n    dots.append((0, 0))\n    dots.sort()\n    dots.append((0, 0))\n    dots.sort()\n    dots.append((0, 0))\n    dots.sort()\n    dots.append((0, 0))\n    dots.sort()\n    dots.append((0, 0))\n    dots.sort()\n    dots.append((0, 0))\n    dots.sort()\n    dots.append((0, 0))\n    dots.sort()\n    dots.append((0, 0))\n    d"
    },
    {
        "number": 1580,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split()]\n    cards = [int(x) for x in stdin.split()]\n    return str(sum(cards) - (N - M) * 2)"
    },
    {
        "number": 1581,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(factorial(n) // (factorial(k) * factorial(n - k)))\n\ndef"
    },
    {
        "number": 1582,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(len(set(i for i in range(1, n + 1) if str(i)[-1] == str(i)[0])))"
    },
    {
        "number": 1583,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = [int(x) for x in stdin.split()]\n    return str(max(0, min(90, (a**2 * b - x) / (a**2 * b))))"
    },
    {
        "number": 1584,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    sticks = [int(x) for x in stdin.split()]\n    sticks.sort()\n    sticks.reverse()\n    sticks = sticks[:3]\n    sticks.sort()\n    sticks.reverse()\n    return str(sticks[0] + sticks[1] > sticks[2])"
    },
    {
        "number": 1585,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = [int(x) for x in stdin.split()]\n    return str(max(x, y) - min(x, y) + 1)"
    },
    {
        "number": 1586,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 2:\n        return \"1\"\n    else:\n        return str(n) + \" \" + solution(n - 2)"
    },
    {
        "number": 1587,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    stones = stdin.readline().strip()\n    red_stones = [i for i, c in enumerate(stones) if c == \"R\"]\n    white_stones = [i for i, c in enumerate(stones) if c == \"W\"]\n    if len(red_stones) == 0:\n        return str(len(white_stones))\n    if len(white_stones) == 0:\n        return str(len(red_stones))\n    if len(red_stones) == 1:\n        return str(len(white_stones))\n    if len(white_stones) == 1:\n        return str(len(red_stones))\n    if len(red_stones) == 2:\n        return str(len(white_stones))\n    if len(white_stones) == 2:\n        return str(len(red_stones))\n    if len(red_stones) == 3:\n        return str(len(white_stones))\n    if len(white_stones) == 3:\n        return str(len(red_stones))\n    if len(red_stones) == 4:\n        return str(len(white_stones))\n    if len(white_stones) == 4:\n        return str(len(red_stones))\n    return \"impossible\""
    },
    {
        "number": 1588,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    blocks = [int(x) for x in stdin.readline().strip().split()]\n    s = sum(blocks)\n    if s % 2!= 0:\n        return \"0\"\n    s = s // 2\n    blocks.sort()\n    blocks.reverse()\n    result = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            if blocks[i] + blocks[j] == s:\n                result.append(blocks[i])\n                result.append(blocks[j])\n                break\n    return \" \".join(map(str, result))"
    },
    {
        "number": 1589,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    lights = [stdin[i:i+m] for i in range(0, 2*m, m)]\n    return str(sum(int(x.replace('0', '1').replace('1', '0')) for x in lights))"
    },
    {
        "number": 1590,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    res = 0\n    for i in range(1, n):\n        res += (a[i - 1] * i)\n    return str(res % (10 ** 9 + 7))"
    },
    {
        "number": 1591,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    a.reverse()\n    print(a)\n    print(n)\n    print(k)\n    print(a[0])\n    print(a[1])\n    print(a[2])\n    print(a[3])\n    print(a[4])\n    print(a[5])\n    print(a[6])\n    print(a[7])\n    print(a[8])\n    print(a[9])\n    print(a[10])\n    print(a[11])\n    print(a[12])\n    print(a[13])\n    print(a[14])\n    print(a[15])\n    print(a[16])\n    print(a[17])\n    print(a[18])\n    print(a[19])\n    print(a[20])\n    print(a[21])\n    print(a[22])\n    print(a[23])\n    print(a[24])\n    print(a[25])\n    print(a[26])\n    print(a[27])\n    print(a[28])\n    print(a[29])\n    print(a[30])\n    print(a[31])\n    print(a[32])\n    print(a[33])\n    print(a[34])\n    print(a[35])\n    print(a[36])\n    print(a[37])\n    print(a[38])\n    print(a[39])\n    print(a[40])\n    print(a[41])\n    print(a[42])\n    print(a[43])\n    print(a[44])\n    print(a[45])\n    print(a[46])\n    print(a[47])\n    print(a[48])\n    print(a[49])\n    print(a[50])\n    print(a[51])\n    print(a[52])\n    print(a[53])\n    print(a[54])\n    print(a[55])\n    print(a[56])\n    print(a[57])\n    print(a[58])\n    print(a[59])\n    print(a[60])\n    print(a[61])\n    print(a[62])\n    print(a[63])\n    print(a[64])\n    print(a[65])\n    print(a[66])\n    print(a[67])\n    print(a[68])\n    print(a[69])\n    print(a[70])\n    print(a[71])\n    print(a[72])\n    print(a[73])\n    print(a[74])\n    print(a[75])\n    print(a[76])\n    print(a[77])\n    print(a[78])\n    print(a[79])\n    print(a[80])\n    print(a[81])\n    print(a[82])\n    print(a[83])\n    print(a[84])\n    print(a[85])\n    print(a[86])\n    print(a[87])\n    print(a[88])\n    print(a[89])\n    print(a[90])\n    print(a[91])\n    print(a[92])\n    print(a[93])\n    print(a[94])\n    print(a[95])\n    print(a[96])\n    print(a[97])\n    print(a[98])\n    print(a[99])\n    print(a[100])\n    print(a[101])\n    print(a[102])\n    print(a[103])\n    print(a[104])\n    print(a[105])\n    print(a[106])\n    print(a[107])\n    print(a[108])\n    print(a[109])\n    print(a[110])\n    print(a[111])\n    print(a[112])\n    print(a[113])\n    print(a[114])\n    print(a[115])\n    print(a[116])\n    print(a[117])\n    print(a[118])\n    print(a[119])\n    print(a[120])\n    print(a[121])\n    print(a[122])\n    print(a[123])\n    print(a[124])\n    print(a[125])\n    print(a[126])\n    print(a[127])\n    print(a[128])\n    print(a[129])\n    print(a[130])\n    print(a[131])\n    print(a[132])\n    print(a[133])\n    print(a[134])\n    print(a[135])\n    print(a[136])\n    print(a[137])\n    print(a[138])\n    print(a[139])\n    print(a[140])\n    print(a[141])\n    print(a[142])\n    print(a[143])\n    print(a[144])\n    print(a[145])\n    print(a[146])\n    print(a[147])\n    print(a[148])\n    print(a[149])\n    print(a[150])\n    print(a[151])\n    print(a[152])\n    print(a[153])\n"
    },
    {
        "number": 1592,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    tasks = [tuple(map(int, line.split())) for line in stdin.readlines()]\n    tasks.sort(key=lambda x: x[0])\n    queue = []\n    time = 0\n    for task in tasks:\n        while queue and queue[0] <= time:\n            queue.pop(0)\n        if queue:\n            time = max(time, queue[-1])\n        queue.append(task[1])\n        time += task[1]\n    return f'{time} {len(queue)}'"
    },
    {
        "number": 1593,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = [int(x) for x in stdin.split()]\n    if n == 1:\n        return '-1'\n    if n == 2:\n        return str(math.sqrt(s))\n    if n == 3:\n        return str(math.sqrt(s) / 2)\n    if n == 4:\n        return str(math.sqrt(s) / 4)\n    if n == 5:\n        return str(math.sqrt(s) / 8)\n    if n == 6:\n        return str(math.sqrt(s) / 16)\n    if n == 7:\n        return str(math.sqrt(s) / 32)\n    if n == 8:\n        return str(math.sqrt(s) / 64)\n    if n == 9:\n        return str(math.sqrt(s) / 128)\n    if n == 10:\n        return str(math.sqrt(s) / 256)\n    if n == 11:\n        return str(math.sqrt(s) / 512)\n    if n == 12:\n        return str(math.sqrt(s) / 1024)\n    if n == 13:\n        return str(math.sqrt(s) / 2048)\n    if n == 14:\n        return str(math.sqrt(s) / 4096)\n    if n == 15:\n        return str(math.sqrt(s) / 8192)\n    if n == 16:\n        return str(math.sqrt(s) / 16384)\n    if n == 17:\n        return str(math.sqrt(s) / 32768)\n    if n == 18:\n        return str(math.sqrt(s) / 65536)\n    if n == 19:\n        return str(math.sqrt(s) / 131072)\n    if n == 20:\n        return str(math.sqrt(s) / 262144)\n    if n == 21:\n        return str(math.sqrt(s) / 524288)\n    if n == 22:\n        return str(math.sqrt(s) / 1048576)\n    if n == 23:\n        return str(math.sqrt(s) / 2097152)\n    if n == 24:\n        return str(math.sqrt(s) / 4194304)\n    if n == 25:\n        return str(math.sqrt(s) / 8388608)\n    if n == 26:\n        return str(math.sqrt(s) / 16777216)\n    if n == 27:\n        return str(math.sqrt(s) / 33554432)\n    if n == 28:\n        return str(math.sqrt(s) / 67108864)\n    if n == 29:\n        return str(math.sqrt(s) / 134217728)\n    if n == 30:\n        return str(math.sqrt(s) / 268435456)\n    if n == 31:\n        return str(math.sqrt(s) / 536870912)\n    if n == 32:\n        return str(math.sqrt(s) / 1073741824)\n    if n == 33:\n        return str(math.sqrt(s) / 2147483648)\n    if n == 34:\n        return str(math.sqrt(s) / 4294967296)\n    if n == 35:\n        return str(math.sqrt(s) / 8589934592)\n    if n == 36:\n        return str(math.sqrt(s) / 17179869184)\n    if n == 37:\n        return str(math.sqrt(s) / 34359738368)\n    if n == 38:\n        return str(math.sqrt(s) / 68719476736)\n    if n == 39:\n        return str(math.sqrt(s) / 137438953472)\n    if n == 40:\n        return str(math.sqrt(s) / 274877906944)\n    if n == 41:\n        return str(math.sqrt(s) / 549755813888)\n    if n == 42:\n        return str(math.sqrt(s) / 1099511627776)\n    if n == 43:\n        return str(math.sqrt(s) / 2199023255552)\n    if n == 44:\n        return str(math.sqrt(s) / 4398046511104)\n    if n == 45:\n        return str(math.sqrt(s) / 8796093022208)\n    if n == 46:\n        return str(math.sqrt(s) / 17592186044416)\n    if n == 47:\n        return str(math.sqrt(s) / 35184372088832)\n    if n == 48:\n        return str(math.sqrt(s) / 70368744177664)\n    if n == 49:\n        return str(math.sqrt(s) / 140737488355328)\n    if n == 50:\n        return str(math.sqrt(s) / 281474976710656)\n    if n == 51:\n        return str(math.sqrt(s) / 562949953421312)\n    if n == 52:\n        return str(math.sqrt(s) / 1125899906842624)\n    if n == 53:\n        return str(math.sqrt(s) / 2251799813685248)\n    if n == 54:\n        return str(math.sqrt(s) / 4503599627370496)\n    if n == 55:\n        return str(math.sqrt(s) / 9007199254740992)\n    if n == 56:\n        return str(math.sqrt(s) / 18014398509481984)\n    if n == 57:\n        return str(math.sqrt(s) / 36028797018963968)\n    if n == 58:\n        return str(math.sqrt(s) / 72057594037927936)\n    if n == 59:\n        return str(math.sqrt(s) / 144115188075855872)\n    if n == 60:\n        return str(math.sqrt(s) / 288230376151711744)\n    if n == 61:\n        return str(math."
    },
    {
        "number": 1594,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    play_list = [int(x) for x in stdin.split()]\n    play_list.sort()\n    play_list.reverse()\n    play_list = play_list[:n]\n    play_list.reverse()\n    play_list = play_list[:m]\n    play_list.sort()\n    play_list.reverse()\n    play_list = play_list[:m]\n    play_list.sort()\n    play_list.reverse()\n    play_list = play_list[:m]\n    play_list.sort()\n    play_list.reverse()\n    play_list = play_list[:m]\n    play_list.sort()\n    play_list.reverse()\n    play_list = play_list[:m]\n    play_list.sort()\n    play_list.reverse()\n    play_list = play_list[:m]\n    play_list.sort()\n    play_list.reverse()\n    play_list = play_list[:m]\n    play_list.sort()\n    play_list.reverse()\n    play_list = play_list[:m]\n    play_list.sort()\n    play_list.reverse()\n    play_list = play_list[:m]\n    play_list.sort()\n    play_list.reverse()\n    play_list = play_list[:m]\n    play_list.sort()\n    play_list.reverse()\n    play_list = play_list[:m]\n    play_list.sort()\n    play_list.reverse()\n    play_list = play_list[:m]\n    play_list.sort()\n    play_list.reverse()\n    play_list = play_list[:m]\n    play_list.sort()\n    play_list.reverse()\n    play_list = play_list[:m]\n    play_list.sort()\n    play_list.reverse()\n    play_list = play_list[:m]\n    play_list.sort()\n    play_list.reverse()\n    play_list = play_list[:m]\n    play_list.sort()\n    play_list.reverse()\n    play_list = play_list[:m]\n    play_list.sort()\n    play_list.reverse()\n    play_list = play_list[:m]\n    play_list.sort()\n    play_list.reverse()\n    play_list = play_list[:m]\n    play_list.sort()\n    play_list.reverse()\n    play_list = play_list[:m]\n    play_list.sort()\n    play_list.reverse()\n    play_list = play_list[:m]\n    play_list.sort()\n    play_list.reverse()\n    play_list = play_list[:m]\n    play_list.sort()\n    play_list.reverse()\n    play_list = play_list[:m]\n    play_list.sort()\n    play_list.reverse()\n    play_list = play_list[:m]\n    play_list.sort()\n    play_list.reverse()\n    play_list = play_list[:m]\n    play_list.sort()\n    play_list.reverse()\n    play_list = play_list[:m]\n    play_list.sort()\n    play_list.reverse()\n    play_list = play_list[:m]\n    play_list.sort()\n    play_list.reverse()\n    play_list = play_list[:m]\n    play_list.sort()\n    play_list.reverse()\n    play_list = play_list[:m]\n    play_list.sort()\n    play_list.reverse()\n    play_list = play_list[:m]\n    play_list.sort()\n    play_list.reverse()\n    play_list = play_list[:m]\n    play_list.sort()\n    play_list.reverse()\n    play_list = play_list[:m]\n    play_list.sort()\n    play_list.reverse()\n    play_list = play_list[:m]\n    play_list.sort()\n    play_list.reverse()\n    play_list = play_list[:m]\n    play_list.sort()\n    play_list.reverse()\n    play_list = play_list[:m]\n    play_list.sort()\n    play_list.reverse()\n    play_list = play_list[:m]\n    play_list.sort()\n    play_list.reverse()\n    play_list = play_list[:m]\n    play_list.sort()\n    play_list.reverse()\n    play_list = play_list[:m]\n    play_list.sort()\n    play_list.reverse()\n    play_list = play_list[:m]\n    play_list.sort()\n    play_list.reverse()\n    play_list = play_list[:m]\n    play_list.sort()\n    play_list.reverse()\n    play_list = play_list[:m]\n    play_list.sort()\n    play_list.reverse()\n    play_list = play_list[:m]\n    play_list.sort()\n    play_list.reverse()\n    play_list = play_list[:m]\n    play_list.sort()\n    play_list.reverse()\n    play_list = play_list[:m]\n    play_list.sort()\n    play_list.reverse()\n    play_list = play_list[:m]\n    play_list.sort()\n    play_list.reverse()\n    play_list = play_list[:m]\n    play_list.sort()\n    play_list.reverse()\n    play_list = play_list[:m]\n    play_list.sort()\n    play_list.reverse()\n    play_list = play_list[:m]\n    play_list.sort()\n    play_list.reverse()\n    play_list = play_list[:m]\n    play_list.sort()\n    play_"
    },
    {
        "number": 1595,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 1596,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(stdin) % (10 ** 9 + 7))"
    },
    {
        "number": 1597,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\nimport sys\nfrom collections import defaultdict\n\ndef"
    },
    {
        "number": 1598,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    if n < 2:\n        return s\n    t = s[0]\n    for i in range(1, n):\n        if s[i] < s[i - 1]:\n            t += s[i]\n        else:\n            t = s[i]\n    return t"
    },
    {
        "number": 1599,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    m = int(stdin.readline().strip())\n    queries = [tuple(map(int, stdin.readline().strip().split())) for _ in range(m)]\n    return '\\n'.join(str(s.count(s[i:j] + '1')) for i, j in queries)"
    },
    {
        "number": 1600,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    h = [int(x) for x in stdin.split()]\n    h.sort()\n    blocks = 1\n    for i in range(1, n):\n        if h[i] <= h[i - 1] + 1:\n            blocks += 1\n    return str(blocks)"
    },
    {
        "number": 1601,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2!= 0:\n        return '0'\n    if n == 2:\n        return '1 1'\n    if n == 4:\n        return '2 2'\n    if n == 6:\n        return '3 6'\n    if n == 8:\n        return '4 5'\n    if n == 10:\n        return '5 6'\n    if n == 12:\n        return '6 7'\n    if n == 14:\n        return '7 8'\n    if n == 16:\n        return '8 9'\n    if n == 18:\n        return '9 10'\n    if n == 20:\n        return '10 11'\n    if n == 22:\n        return '11 12'\n    if n == 24:\n        return '12 13'\n    if n == 26:\n        return '13 14'\n    if n == 28:\n        return '14 15'\n    if n == 30:\n        return '15 16'\n    if n == 32:\n        return '16 17'\n    if n == 34:\n        return '17 18'\n    if n == 36:\n        return '18 19'\n    if n == 38:\n        return '19 20'\n    if n == 40:\n        return '20 21'\n    if n == 42:\n        return '21 22'\n    if n == 44:\n        return '22 23'\n    if n == 46:\n        return '23 24'\n    if n == 48:\n        return '24 25'\n    if n == 50:\n        return '25 26'\n    if n == 52:\n        return '26 27'\n    if n == 54:\n        return '27 28'\n    if n == 56:\n        return '28 29'\n    if n == 58:\n        return '29 30'\n    if n == 60:\n        return '30 31'\n    if n == 62:\n        return '31 32'\n    if n == 64:\n        return '32 33'\n    if n == 66:\n        return '33 34'\n    if n == 68:\n        return '34 35'\n    if n == 70:\n        return '35 36'\n    if n == 72:\n        return '36 37'\n    if n == 74:\n        return '37 38'\n    if n == 76:\n        return '38 39'\n    if n == 78:\n        return '39 40'\n    if n == 80:\n        return '40 41'\n    if n == 82:\n        return '41 42'\n    if n == 84:\n        return '42 43'\n    if n == 86:\n        return '43 44'\n    if n == 88:\n        return '44 45'\n    if n == 90:\n        return '45 46'\n    if n == 92:\n        return '46 47'\n    if n == 94:\n        return '47 48'\n    if n == 96:\n        return '48 49'\n    if n == 98:\n        return '49 50'\n    if n == 100:\n        return '50 51'\n    if n == 102:\n        return '51 52'\n    if n == 104:\n        return '52 53'\n    if n == 106:\n        return '53 54'\n    if n == 108:\n        return '54 55'\n    if n == 110:\n        return '55 56'\n    if n == 112:\n        return '56 57'\n    if n == 114:\n        return '57 58'\n    if n == 116:\n        return '58 59'\n    if n == 118:\n        return '59 60'\n    if n == 120:\n        return '60 61'\n    if n == 122:\n        return '61 62'\n    if n == 124:\n        return '62 63'\n    if n == 126:\n        return '63 64'\n    if n == 128:\n        return '64 65'\n    if n == 130:\n        return '65 66'\n    if n == 132:\n        return '66 67'\n    if n == 134:\n        return '67 68'\n    if n == 136:\n        return '68 69'\n    if n == 138:\n        return '69 70'\n    if n == 140:\n        return '70 71'\n    if n == 142:\n        return '71 72'\n    if n == 144:\n        return '72 73'\n    if n == 146:\n        return '73 74'\n    if n == 148:\n        return '74 75'\n    if n == 150:\n        return '75 76'\n    if n == 152:\n        return '76 77'\n    if n == 154:\n        return '77 78'\n    if n == 156:\n        return '78 79'\n    if n == 158:\n        return '79 80'\n    if n == 160:\n        return '80 81'\n    if n == 162:\n        return '81 82'\n    if n == 164:\n        return '82 83'\n    if n == 166:\n        return '83 84'\n    if n == 168:\n        return '84 85'\n    if n == 170:\n        return '85 86'\n    if n == 172:\n        return '86 87'\n    if n == 174:\n        return '87 88'\n    if n == 176:\n        return '88 89'\n    if n == 178:\n        return '89 90'\n    if n == 180:\n        return '90 91'\n    if n == 182:\n        return '91 92"
    },
    {
        "number": 1602,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = [int(x) for x in stdin.readline().split()]\n    arr.sort(reverse=True)\n    return''.join(map(str, arr))"
    },
    {
        "number": 1603,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    stones = [int(x) for x in stdin.readline().split()]\n    m = int(stdin.readline())\n    for _ in range(m):\n        type, l, r = [int(x) for x in stdin.readline().split()]\n        if type == 1:\n            print(sum(stones[l-1:r]))\n        else:\n            print(sum(stones[l-1:r]))"
    },
    {
        "number": 1604,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    lamps = [int(x) for x in stdin.split()]\n    lamps.sort()\n    lamps = lamps[::-1]\n    lamps = lamps[:k]\n    lamps = lamps[::-1]\n    lamps = lamps[:n - k]\n    lamps = lamps[::-1]\n    lamps = lamps[:n - k]\n    lamps = lamps[::-1]\n    lamps = lamps[:n - k]\n    lamps = lamps[::-1]\n    lamps = lamps[:n - k]\n    lamps = lamps[::-1]\n    lamps = lamps[:n - k]\n    lamps = lamps[::-1]\n    lamps = lamps[:n - k]\n    lamps = lamps[::-1]\n    lamps = lamps[:n - k]\n    lamps = lamps[::-1]\n    lamps = lamps[:n - k]\n    lamps = lamps[::-1]\n    lamps = lamps[:n - k]\n    lamps = lamps[::-1]\n    lamps = lamps[:n - k]\n    lamps = lamps[::-1]\n    lamps = lamps[:n - k]\n    lamps = lamps[::-1]\n    lamps = lamps[:n - k]\n    lamps = lamps[::-1]\n    lamps = lamps[:n - k]\n    lamps = lamps[::-1]\n    lamps = lamps[:n - k]\n    lamps = lamps[::-1]\n    lamps = lamps[:n - k]\n    lamps = lamps[::-1]\n    lamps = lamps[:n - k]\n    lamps = lamps[::-1]\n    lamps = lamps[:n - k]\n    lamps = lamps[::-1]\n    lamps = lamps[:n - k]\n    lamps = lamps[::-1]\n    lamps = lamps[:n - k]\n    lamps = lamps[::-1]\n    lamps = lamps[:n - k]\n    lamps = lamps[::-1]\n    lamps = lamps[:n - k]\n    lamps = lamps[::-1]\n    lamps = lamps[:n - k]\n    lamps = lamps[::-1]\n    lamps = lamps[:n - k]\n    lamps = lamps[::-1]\n    lamps = lamps[:n - k]\n    lamps = lamps[::-1]\n    lamps = lamps[:n - k]\n    lamps = lamps[::-1]\n    lamps = lamps[:n - k]\n    lamps = lamps[::-1]\n    lamps = lamps[:n - k]\n    lamps = lamps[::-1]\n    lamps = lamps[:n - k]\n    lamps = lamps[::-1]\n    lamps = lamps[:n - k]\n    lamps = lamps[::-1]\n    lamps = lamps[:n - k]\n    lamps = lamps[::-1]\n    lamps = lamps[:n - k]\n    lamps = lamps[::-1]\n    lamps = lamps[:n - k]\n    lamps = lamps[::-1]\n    lamps = lamps[:n - k]\n    lamps = lamps[::-1]\n    lamps = lamps[:n - k]\n    lamps = lamps[::-1]\n    lamps = lamps[:n - k]\n    lamps = lamps[::-1]\n    lamps = lamps[:n - k]\n    lamps = lamps[::-1]\n    lamps = lamps[:n - k]\n    lamps = lamps[::-1]\n    lamps = lamps[:n - k]\n    lamps = lamps[::-1]\n    lamps = lamps[:n - k]\n    lamps = lamps[::-1]\n    lamps = lamps[:n - k]\n    lamps = lamps[::-1]\n    lamps = lamps[:n - k]\n    lamps = lamps[::-1]\n    lamps = lamps[:n - k]\n    lamps = lamps[::-1]\n    lamps = lamps[:n - k]\n    lamps = lamps[::-1]\n    lamps = lamps[:n - k]\n    lamps = lamps[::-1]\n    lamps = lamps[:n - k]\n    lamps = lamps[::-1]\n    lamps = lamps[:n - k]\n    lamps = lamps[::-1]\n    lamps = lamps[:n - k]\n    lamps = lamps[::-1]\n    lamps = lamps[:n - k]\n    lamps = lamps[::-1]\n    lamps = lamps[:n - k]\n    lamps = lamps[::-1]\n    lamps = lamps[:n - k]\n    lamps = lamps[::-1]\n    lamps = lamps[:n - k]\n    lamps = lamps[::-1]\n    lamps = lamps[:n - k]\n    lamps = lamps[::-1]\n    lamps = lamps[:n - k]\n    lamps = lamps[::-1]\n    lamps = lamps[:n - k]\n    lamps = lamps[::-1]\n    lamps = lamps[:n - k]\n    lamps = lamps[::"
    },
    {
        "number": 1605,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 1606,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    A = []\n    for _ in range(n):\n        A.append(list(map(int, stdin.readline().split())))\n    q = int(stdin.readline())\n    for _ in range(q):\n        i, j = map(int, stdin.readline().split())\n        if i == 1:\n            for k in range(n):\n                A[k][j - 1] = 1 - A[k][j - 1]\n        elif j == 1:\n            for k in range(n):\n                A[i - 1][k] = 1 - A[i - 1][k]\n        else:\n            print(A[i - 1][j - 1])"
    },
    {
        "number": 1607,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    return str(solution_naive(n, k))\n\ndef"
    },
    {
        "number": 1608,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    a.sort()\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if gcd(a[i], a[j]) == 1:\n                count += 1\n    return str(count)\n\ndef"
    },
    {
        "number": 1609,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    numbers = [int(x) for x in stdin.readline().split()]\n    numbers.sort()\n    return''.join(str(x) for x in numbers)\n\nassert(solution('''3\n1 3 2\n''') == '1 3 2')\nassert(solution('''4\n2 2 3 3\n''') == '2 1 3 4')\nassert(solution('''1\n2\n''') == '1')\nassert(solution('''2\n2\n''') == '1')\nassert(solution('''2\n1\n''') == '1')\nassert(solution('''2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2"
    },
    {
        "number": 1610,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    if k == 0:\n        return''.join(str(x) for x in range(1, n + 1))\n    if k > n:\n        return''.join(str(x) for x in range(1, n + 1))\n    if k == n:\n        return''.join(str(x) for x in range(1, n + 1))\n    if k == 1:\n        return''.join(str(x) for x in range(1, n + 1))\n    if k == 2:\n        return''.join(str(x) for x in range(1, n + 1))\n    if k == 3:\n        return''.join(str(x) for x in range(1, n + 1))\n    if k == 4:\n        return''.join(str(x) for x in range(1, n + 1))\n    if k == 5:\n        return''.join(str(x) for x in range(1, n + 1))\n    if k == 6:\n        return''.join(str(x) for x in range(1, n + 1))\n    if k == 7:\n        return''.join(str(x) for x in range(1, n + 1))\n    if k == 8:\n        return''.join(str(x) for x in range(1, n + 1))\n    if k == 9:\n        return''.join(str(x) for x in range(1, n + 1))\n    if k == 10:\n        return''.join(str(x) for x in range(1, n + 1))\n    if k == 11:\n        return''.join(str(x) for x in range(1, n + 1))\n    if k == 12:\n        return''.join(str(x) for x in range(1, n + 1))\n    if k == 13:\n        return''.join(str(x) for x in range(1, n + 1))\n    if k == 14:\n        return''.join(str(x) for x in range(1, n + 1))\n    if k == 15:\n        return''.join(str(x) for x in range(1, n + 1))\n    if k == 16:\n        return''.join(str(x) for x in range(1, n + 1))\n    if k == 17:\n        return''.join(str(x) for x in range(1, n + 1))\n    if k == 18:\n        return''.join(str(x) for x in range(1, n + 1))\n    if k == 19:\n        return''.join(str(x) for x in range(1, n + 1))\n    if k == 20:\n        return''.join(str(x) for x in range(1, n + 1))\n    if k == 21:\n        return''.join(str(x) for x in range(1, n + 1))\n    if k == 22:\n        return''.join(str(x) for x in range(1, n + 1))\n    if k == 23:\n        return''.join(str(x) for x in range(1, n + 1))\n    if k == 24:\n        return''.join(str(x) for x in range(1, n + 1))\n    if k == 25:\n        return''.join(str(x) for x in range(1, n + 1))\n    if k == 26:\n        return''.join(str(x) for x in range(1, n + 1))\n    if k == 27:\n        return''.join(str(x) for x in range(1, n + 1))\n    if k == 28:\n        return''.join(str(x) for x in range(1, n + 1))\n    if k == 29:\n        return''.join(str(x) for x in range(1, n + 1))\n    if k == 30:\n        return''.join(str(x) for x in range(1, n + 1))\n    if k == 31:\n        return''.join(str(x) for x in range(1, n + 1))\n    if k == 32:\n        return''.join(str(x) for x in range(1, n + 1))\n    if k == 33:\n        return''.join(str(x) for x in range(1, n + 1))\n    if k == 34:\n        return''.join(str(x) for x in range(1, n + 1))\n    if k == 35:\n        return''.join(str(x) for x in range(1, n + 1))\n    if k == 36:\n        return''.join(str(x) for x in range(1, n + 1))\n    if k == 37:\n        return''.join(str(x) for x in range(1, n + 1))\n    if k == 38:\n        return''.join(str(x) for x in range(1, n + 1))\n    if k == 39:\n        return''.join(str(x) for x in range(1, n + 1))\n    if k == 40:\n        return''.join(str(x) for x in range(1, n + 1))\n    if k == 41:\n        return''.join(str(x) for x in range(1, n + 1))\n    if k == 42:\n        return''.join(str(x) for x in range(1, n + 1))\n    if k == 43:\n        return''.join(str(x) for x in range(1, n + 1))\n    if k == 44:\n        return''.join(str(x) for x in range(1, n + 1))\n    if k == 45:\n        return''.join(str(x) for x in range(1, n + 1))\n    if k == 46:\n        return''.join(str(x) for x in range(1, n + 1))\n    if k == 47:\n        return''.join(str(x) for x in range(1, n + 1))\n    if k == 48:\n        return''.join(str(x) for x in range(1, n + 1))\n    if k == 49:\n        return''.join(str(x) for x in range(1, n + 1))\n    if k == 50:\n        return''.join(str(x) for x in range(1, n + 1))\n    if k == 51:\n        return''.join(str(x) for x in range(1, n + 1))\n    if k == 52:\n        return''.join(str(x) for x in range(1, n + 1))\n    if k == 53:\n        return''.join(str(x) for x in range(1, n + 1))\n    if k == 54:\n        return''.join(str(x) for x in range(1, n + 1))\n    if k == 55:\n        return''.join(str(x) for x in range(1, n + 1))\n    if k"
    },
    {
        "number": 1611,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    l = list(map(int, stdin.readline().split()))\n    l.sort()\n    l.append(l[-1] + l[-2])\n    l.append(l[-1] + l[-2] + l[-3])\n    l.append(l[-1] + l[-2] + l[-3] + l[-4])\n    l.append(l[-1] + l[-2] + l[-3] + l[-4] + l[-5])\n    l.append(l[-1] + l[-2] + l[-3] + l[-4] + l[-5] + l[-6])\n    l.append(l[-1] + l[-2] + l[-3] + l[-4] + l[-5] + l[-6] + l[-7])\n    l.append(l[-1] + l[-2] + l[-3] + l[-4] + l[-5] + l[-6] + l[-7] + l[-8])\n    l.append(l[-1] + l[-2] + l[-3] + l[-4] + l[-5] + l[-6] + l[-7] + l[-8] + l[-9])\n    l.append(l[-1] + l[-2] + l[-3] + l[-4] + l[-5] + l[-6] + l[-7] + l[-8] + l[-9] + l[-10])\n    l.append(l[-1] + l[-2] + l[-3] + l[-4] + l[-5] + l[-6] + l[-7] + l[-8] + l[-9] + l[-10] + l[-11])\n    l.append(l[-1] + l[-2] + l[-3] + l[-4] + l[-5] + l[-6] + l[-7] + l[-8] + l[-9] + l[-10] + l[-11] + l[-12])\n    l.append(l[-1] + l[-2] + l[-3] + l[-4] + l[-5] + l[-6] + l[-7] + l[-8] + l[-9] + l[-10] + l[-11] + l[-12] + l[-13])\n    l.append(l[-1] + l[-2] + l[-3] + l[-4] + l[-5] + l[-6] + l[-7] + l[-8] + l[-9] + l[-10] + l[-11] + l[-12] + l[-13] + l[-14])\n    l.append(l[-1] + l[-2] + l[-3] + l[-4] + l[-5] + l[-6] + l[-7] + l[-8] + l[-9] + l[-10] + l[-11] + l[-12] + l[-13] + l[-14] + l[-15])\n    l.append(l[-1] + l[-2] + l[-3] + l[-4] + l[-5] + l[-6] + l[-7] + l[-8] + l[-9] + l[-10] + l[-11] + l[-12] + l[-13] + l[-14] + l[-15] + l[-16])\n    l.append(l[-1] + l[-2] + l[-3] + l[-4] + l[-5] + l[-6] + l[-7] + l[-8] + l[-9] + l[-10] + l[-11] + l[-12] + l[-13] + l[-14] + l[-15] + l[-16] + l[-17])\n    l.append(l[-1] + l[-2] + l[-3] + l[-4] + l[-5] + l[-6] + l[-7] + l[-8] + l[-9] + l[-10] + l[-11] + l[-12] + l[-13] + l[-14] + l[-15] + l[-16] + l[-17] + l[-18])\n    l.append(l[-1] + l[-2] + l[-3] + l[-4] + l[-5] + l[-6] + l[-7] + l[-8] + l[-9] + l[-10] + l[-11] + l[-12] + l[-13] + l[-14] + l[-15] + l[-16] + l[-17] + l[-18] + l[-19])\n    l.append(l[-1] + l[-2] + l[-3] + l[-4] + l[-5] + l[-6] + l[-7] + l[-8] + l[-9] + l[-10] + l[-11] + l[-12] + l[-13] + l[-14] + l[-15] + l[-16] + l[-17] + l[-18] + l[-19] + l[-20])\n    l.append(l[-1] + l[-2] + l[-3] + l[-4] + l[-5] + l["
    },
    {
        "number": 1612,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    cards = [int(stdin.readline()) for _ in range(n)]\n    return \"YES\" if is_win(cards) else \"NO\"\n\ndef"
    },
    {
        "number": 1614,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, h = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    width = 0\n    for i in range(n):\n        if a[i] > h:\n            width += 2\n        else:\n            width += 1\n    return str(width)"
    },
    {
        "number": 1615,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    segments = [tuple(int(x) for x in line.split()) for line in stdin.splitlines()]\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    se"
    },
    {
        "number": 1616,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    res = -1\n    for i in range(n):\n        for j in range(i, n):\n            if a[j] ** 0.5 == int(a[j] ** 0.5):\n                res = max(res, j - i + 1)\n    return str(res)"
    },
    {
        "number": 1617,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"1 2\"\n    if n == 3:\n        return \"1 3\"\n    if n == 4:\n        return \"1 4\"\n    if n == 5:\n        return \"1 5\"\n    if n == 6:\n        return \"1 6\"\n    if n == 7:\n        return \"1 7\"\n    if n == 8:\n        return \"1 8\"\n    if n == 9:\n        return \"1 9\"\n    if n == 10:\n        return \"1 10\"\n    if n == 11:\n        return \"1 11\"\n    if n == 12:\n        return \"1 12\"\n    if n == 13:\n        return \"1 13\"\n    if n == 14:\n        return \"1 14\"\n    if n == 15:\n        return \"1 15\"\n    if n == 16:\n        return \"1 16\"\n    if n == 17:\n        return \"1 17\"\n    if n == 18:\n        return \"1 18\"\n    if n == 19:\n        return \"1 19\"\n    if n == 20:\n        return \"1 20\"\n    if n == 21:\n        return \"1 21\"\n    if n == 22:\n        return \"1 22\"\n    if n == 23:\n        return \"1 23\"\n    if n == 24:\n        return \"1 24\"\n    if n == 25:\n        return \"1 25\"\n    if n == 26:\n        return \"1 26\"\n    if n == 27:\n        return \"1 27\"\n    if n == 28:\n        return \"1 28\"\n    if n == 29:\n        return \"1 29\"\n    if n == 30:\n        return \"1 30\"\n    if n == 31:\n        return \"1 31\"\n    if n == 32:\n        return \"1 32\"\n    if n == 33:\n        return \"1 33\"\n    if n == 34:\n        return \"1 34\"\n    if n == 35:\n        return \"1 35\"\n    if n == 36:\n        return \"1 36\"\n    if n == 37:\n        return \"1 37\"\n    if n == 38:\n        return \"1 38\"\n    if n == 39:\n        return \"1 39\"\n    if n == 40:\n        return \"1 40\"\n    if n == 41:\n        return \"1 41\"\n    if n == 42:\n        return \"1 42\"\n    if n == 43:\n        return \"1 43\"\n    if n == 44:\n        return \"1 44\"\n    if n == 45:\n        return \"1 45\"\n    if n == 46:\n        return \"1 46\"\n    if n == 47:\n        return \"1 47\"\n    if n == 48:\n        return \"1 48\"\n    if n == 49:\n        return \"1 49\"\n    if n == 50:\n        return \"1 50\"\n    if n == 51:\n        return \"1 51\"\n    if n == 52:\n        return \"1 52\"\n    if n == 53:\n        return \"1 53\"\n    if n == 54:\n        return \"1 54\"\n    if n == 55:\n        return \"1 55\"\n    if n == 56:\n        return \"1 56\"\n    if n == 57:\n        return \"1 57\"\n    if n == 58:\n        return \"1 58\"\n    if n == 59:\n        return \"1 59\"\n    if n == 60:\n        return \"1 60\"\n    if n == 61:\n        return \"1 61\"\n    if n == 62:\n        return \"1 62\"\n    if n == 63:\n        return \"1 63\"\n    if n == 64:\n        return \"1 64\"\n    if n == 65:\n        return \"1 65\"\n    if n == 66:\n        return \"1 66\"\n    if n == 67:\n        return \"1 67\"\n    if n == 68:\n        return \"1 68\"\n    if n == 69:\n        return \"1 69\"\n    if n == 70:\n        return \"1 70\"\n    if n == 71:\n        return \"1 71\"\n    if n == 72:\n        return \"1 72\"\n    if n == 73:\n        return \"1 73\"\n    if n == 74:\n        return \"1 74\"\n    if n == 75:\n        return \"1 75\"\n    if n == 76:\n        return \"1 76\"\n    if n == 77:\n        return \"1 77\"\n    if n == 78:\n        return \"1 78\"\n    if n == 79:\n        return \"1 79\"\n    if n == 80:\n        return \"1 80\"\n    if n == 81:\n        return \"1 81\"\n    if n == 82:\n        return \"1 82\"\n    if n == 83:\n        return \"1 83\"\n    if n == 84:\n        return \"1 84\"\n    if n == 85:\n        return \"1 85\"\n    if n == 86:\n        return \"1 86\"\n    if n == 87:\n        return \"1 87\"\n    if n == 88:\n        return \"1 88\"\n    if n == 89:\n        return \"1 89\"\n    if n == 90:\n        return \"1 90\"\n    if n == 91:\n        return \"1 91\"\n    if n == 92:\n        return \"1 92\"\n    if n == 93:\n        return \"1 93\"\n    if n == 94:\n        return \"1 94\"\n    if n == 95:\n        return \"1 95\"\n    if n == 96:\n        return \"1 96\"\n    if n == 97:\n        return \"1 97\"\n    if n == 98:\n        return \"1 98\"\n    if n == 99:\n        return \"1 99\"\n    if n == 100:\n        return \"1 100\"\n    if n == 101:\n        return \"1 101\"\n    if n == 102:\n        "
    },
    {
        "number": 1618,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    stairs = [int(x) for x in stdin.readline().split()]\n    boxes = [int(x) for x in stdin.readline().split()]\n    stairs.sort()\n    boxes.sort()\n    stairs_height = [0] * (n + 1)\n    for i in range(n):\n        stairs_height[i + 1] = stairs_height[i] + stairs[i]\n    result = [0] * len(boxes)\n    for i in range(len(boxes)):\n        box_height = 0\n        for j in range(n):\n            if stairs_height[j] > boxes[i]:\n                box_height = j\n                break\n        result[i] = box_height\n    return''.join(str(x) for x in result)"
    },
    {
        "number": 1619,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    polygons = []\n    for _ in range(n):\n        x, y, z = [int(x) for x in stdin.split()]\n        polygons.append((x, y, z))\n    m = int(stdin)\n    polygons2 = []\n    for _ in range(m):\n        x, y, z = [int(x) for x in stdin.split()]\n        polygons2.append((x, y, z))\n    return \"YES\" if is_well_connected(polygons, polygons2) else \"NO\"\n\ndef"
    },
    {
        "number": 1620,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return 'a'\n    if n == 2:\n        return 'ab'\n    if n == 3:\n        return 'abc'\n    if n == 4:\n        return 'abcd'\n    if n == 5:\n        return 'abcde'\n    if n == 6:\n        return 'abcdef'\n    if n == 7:\n        return 'abcdefg'\n    if n == 8:\n        return 'abcdefgh'\n    if n == 9:\n        return 'abcdefghi'\n    if n == 10:\n        return 'abcdefghij'\n    if n == 11:\n        return 'abcdefghijkl'\n    if n == 12:\n        return 'abcdefghijklm'\n    if n == 13:\n        return 'abcdefghijklmn'\n    if n == 14:\n        return 'abcdefghijklmnop'\n    if n == 15:\n        return 'abcdefghijklmnopq'\n    if n == 16:\n        return 'abcdefghijklmnopqr'\n    if n == 17:\n        return 'abcdefghijklmnopqrs'\n    if n == 18:\n        return 'abcdefghijklmnopqrst'\n    if n == 19:\n        return 'abcdefghijklmnopqrstu'\n    if n == 20:\n        return 'abcdefghijklmnopqrstuv'\n    if n == 21:\n        return 'abcdefghijklmnopqrstuvw'\n    if n == 22:\n        return 'abcdefghijklmnopqrstuvwxy'\n    if n == 23:\n        return 'abcdefghijklmnopqrstuvwxyz'\n    if n == 24:\n        return 'abcdefghijklmnopqrstuvwxyz'\n    if n == 25:\n        return 'abcdefghijklmnopqrstuvwxyz'\n    if n == 26:\n        return 'abcdefghijklmnopqrstuvwxyz'\n    if n == 27:\n        return 'abcdefghijklmnopqrstuvwxyz'\n    if n == 28:\n        return 'abcdefghijklmnopqrstuvwxyz'\n    if n == 29:\n        return 'abcdefghijklmnopqrstuvwxyz'\n    if n == 30:\n        return 'abcdefghijklmnopqrstuvwxyz'\n    if n == 31:\n        return 'abcdefghijklmnopqrstuvwxyz'\n    if n == 32:\n        return 'abcdefghijklmnopqrstuvwxyz'\n    if n == 33:\n        return 'abcdefghijklmnopqrstuvwxyz'\n    if n == 34:\n        return 'abcdefghijklmnopqrstuvwxyz'\n    if n == 35:\n        return 'abcdefghijklmnopqrstuvwxyz'\n    if n == 36:\n        return 'abcdefghijklmnopqrstuvwxyz'\n    if n == 37:\n        return 'abcdefghijklmnopqrstuvwxyz'\n    if n == 38:\n        return 'abcdefghijklmnopqrstuvwxyz'\n    if n == 39:\n        return 'abcdefghijklmnopqrstuvwxyz'\n    if n == 40:\n        return 'abcdefghijklmnopqrstuvwxyz'\n    if n == 41:\n        return 'abcdefghijklmnopqrstuvwxyz'\n    if n == 42:\n        return 'abcdefghijklmnopqrstuvwxyz'\n    if n == 43:\n        return 'abcdefghijklmnopqrstuvwxyz'\n    if n == 44:\n        return 'abcdefghijklmnopqrstuvwxyz'\n    if n == 45:\n        return 'abcdefghijklmnopqrstuvwxyz'\n    if n == 46:\n        return 'abcdefghijklmnopqrstuvwxyz'\n    if n == 47:\n        return 'abcdefghijklmnopqrstuvwxyz'\n    if n == 48:\n        return 'abcdefghijklmnopqrstuvwxyz'\n    if n == 49:\n        return 'abcdefghijklmnopqrstuvwxyz'\n    if n == 50:\n        return 'abcdefghijklmnopqrstuvwxyz'\n    if n == 51:\n        return 'abcdefghijklmnopqrstuvwxyz'\n    if n == 52:\n        return 'abcdefghijklmnopqrstuvwxyz'\n    if n == 53:\n        return 'abcdefghijklmnopqrstuvwxyz'\n    if n == 54:\n        return 'abcdefghijklmnopqrstuvwxyz'\n    if n == 55:\n        return 'abcdefghijklmnopqrstuvwxyz'\n    if n == 56:\n        return 'abcdefghijklmnopqrstuvwxyz'\n    if n == 57:\n        return 'abcdefghijklmnopqrstuvwxyz'\n    if n == 58:\n        return 'abcdefghijklmnopqrstuvwxyz'\n    if n == 59:\n        return 'abcdefghijklmnopqrstuvwxyz'\n    if n == 60:\n        return 'abcdefghijklmnopqrstuvwxyz'\n    if n == 61:\n        return 'abcdefghijklmnopqrstuvwxyz'\n    if n == 62:\n        return 'abcdefghijklmnopqrstuvwxyz'\n    if n == 63:\n        return 'abcdefghijklmnopqrstuvwxyz'\n    if n == 64:\n        return 'abcdefghijklmnopqrstuvwxyz'\n    if n == 65:\n        return 'abcdefghijklmnopqrstuvwxyz'\n    if n == 66:\n        return 'abcdefghijklmnopqrstuvwxyz'\n    if n == 67:\n        return 'abcdefghijklmnopqrstuvwxyz'\n    if n == 68:\n        return 'abcdefghijklmnopqrstuvwxyz'\n    if n == 69:\n        return 'abcdefghijklmnopqrstuvwxyz'\n    if n == 70:\n        return 'abcdefghijklmnopqrstuvwxyz'\n    if n == 71:\n        return 'abcdefghijklmnopqrstuvwxyz'\n    if n == 72:\n        return 'abcdefghijklmnopqrstuvwxyz'\n    if n == 73:\n        return 'abcdefghijklmnopqrstuvwxyz'\n    if n == 74:\n        return 'abcdefghijklmnopqrstuvwxyz'\n    if n == 75:\n        return 'abcdefghijklmnopqrstuvwxyz'\n    if n == 76:\n        "
    },
    {
        "number": 1621,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    k = int(stdin.readline().strip())\n    w = [int(x) for x in stdin.readline().strip().split()]\n    return max(s, key=lambda x: sum(w[i] * i for i in range(len(x))))"
    },
    {
        "number": 1622,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    employees = [0] * n\n    for _ in range(m):\n        t, x, y = [int(x) for x in stdin.split()]\n        if t == 1:\n            employees[y - 1] = x\n        elif t == 2:\n            employees[x - 1] += 1\n        elif t == 3:\n            if employees[x - 1] > 0:\n                print(\"YES\")\n            else:\n                print(\"NO\")"
    },
    {
        "number": 1623,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, l, r = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    min_sum = 0\n    max_sum = 0\n    for i in range(n):\n        if a[i] % 2 == 0:\n            min_sum += a[i]\n            max_sum += a[i]\n        else:\n            if a[i] > a[i-1]:\n                min_sum += a[i]\n            else:\n                max_sum += a[i]\n    return str(min_sum) +'' + str(max_sum)"
    },
    {
        "number": 1624,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    m = n // 2\n    s = 0\n    for i in range(m):\n        s += a[i] * a[i]\n    for i in range(m, n):\n        s += a[i] * a[i]\n    return str(s)"
    },
    {
        "number": 1625,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    matrix = [list(map(int, stdin.readline().split())) for _ in range(n)]\n    beauty = 0\n    for i in range(n):\n        beauty += max(matrix[i])\n        for j in range(n):\n            matrix[i][j] -= max(matrix[i])\n    return str(beauty)"
    },
    {
        "number": 1626,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    return str(sum(a[i] * b[i] for i in range(n // k)))"
    },
    {
        "number": 1627,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    a.sort()\n    l = 0\n    r = n - 1\n    while l < r:\n        if a[l] + 1 == a[r]:\n            l += 1\n            r -= 1\n        elif a[l] + 2 == a[r]:\n            l += 1\n            r -= 1\n        elif a[l] + 3 == a[r]:\n            l += 1\n            r -= 1\n        else:\n            print(a[l], a[r])\n            l += 1\n            r -= 1\n    return ''"
    },
    {
        "number": 1628,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.translate(str.maketrans('xy', 'yx'))\n\nprint(solution(input()))\n"
    },
    {
        "number": 1629,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = [int(x) for x in stdin.split()]\n    balls = [int(x) for x in stdin.split()]\n    boxes = [0] * n\n    for i in range(n):\n        boxes[i] = balls[i]\n        for j in range(i + 1, n):\n            boxes[i] += balls[j]\n    print(*boxes)\n    return ''"
    },
    {
        "number": 1630,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    clubs = [stdin.readline().split() for _ in range(n)]\n    for i in range(n):\n        for j in range(i + 1, n):\n            if clubs[i][0][0:3] == clubs[j][0][0:3] and clubs[i][1][0:3] == clubs[j][1][0:3]:\n                print(\"NO\")\n                return\n    print(\"YES\")\n    for i in range(n):\n        print(clubs[i][0][0:3])"
    },
    {
        "number": 1631,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"Impossible\"\n    names = [stdin.split()[i] for i in range(n)]\n    names.sort()\n    for i in range(n):\n        if names[i]!= stdin.split()[i]:\n            return \"\".join(sorted(stdin.split()[i]))\n    return \"\".join(sorted(stdin.split()[0]))"
    },
    {
        "number": 1632,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    return str(1 - 1 / (3 ** n))"
    },
    {
        "number": 1633,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    pasha_moves = [stdin.split() for _ in range(k)]\n    pasha_moves = [[int(x) for x in move] for move in pasha_moves]\n    pasha_moves.sort(key=lambda x: (x[0], x[1]))\n    pasha_moves = [tuple(move) for move in pasha_moves]\n    pasha_moves = set(pasha_moves)\n    pasha_moves = list(pasha_moves)\n    pasha_moves.sort()\n    pasha_moves = [list(move) for move in pasha_moves]\n    pasha_moves = [tuple(move) for move in pasha_moves]\n    pasha_moves = set(pasha_moves)\n    pasha_moves = list(pasha_moves)\n    pasha_moves.sort()\n    pasha_moves = [list(move) for move in pasha_moves]\n    pasha_moves = [tuple(move) for move in pasha_moves]\n    pasha_moves = set(pasha_moves)\n    pasha_moves = list(pasha_moves)\n    pasha_moves.sort()\n    pasha_moves = [list(move) for move in pasha_moves]\n    pasha_moves = [tuple(move) for move in pasha_moves]\n    pasha_moves = set(pasha_moves)\n    pasha_moves = list(pasha_moves)\n    pasha_moves.sort()\n    pasha_moves = [list(move) for move in pasha_moves]\n    pasha_moves = [tuple(move) for move in pasha_moves]\n    pasha_moves = set(pasha_moves)\n    pasha_moves = list(pasha_moves)\n    pasha_moves.sort()\n    pasha_moves = [list(move) for move in pasha_moves]\n    pasha_moves = [tuple(move) for move in pasha_moves]\n    pasha_moves = set(pasha_moves)\n    pasha_moves = list(pasha_moves)\n    pasha_moves.sort()\n    pasha_moves = [list(move) for move in pasha_moves]\n    pasha_moves = [tuple(move) for move in pasha_moves]\n    pasha_moves = set(pasha_moves)\n    pasha_moves = list(pasha_moves)\n    pasha_moves.sort()\n    pasha_moves = [list(move) for move in pasha_moves]\n    pasha_moves = [tuple(move) for move in pasha_moves]\n    pasha_moves = set(pasha_moves)\n    pasha_moves = list(pasha_moves)\n    pasha_moves.sort()\n    pasha_moves = [list(move) for move in pasha_moves]\n    pasha_moves = [tuple(move) for move in pasha_moves]\n    pasha_moves = set(pasha_moves)\n    pasha_moves = list(pasha_moves)\n    pasha_moves.sort()\n    pasha_moves = [list(move) for move in pasha_moves]\n    pasha_moves = [tuple(move) for move in pasha_moves]\n    pasha_moves = set(pasha_moves)\n    pasha_moves = list(pasha_moves)\n    pasha_moves.sort()\n    pasha_moves = [list(move) for move in pasha_moves]\n    pasha_moves = [tuple(move) for move in pasha_moves]\n    pasha_moves = set(pasha_moves)\n    pasha_moves = list(pasha_moves)\n    pasha_moves.sort()\n    pasha_moves = [list(move) for move in pasha_moves]\n    pasha_moves = [tuple(move) for move in pasha_moves]\n    pasha_moves = set(pasha_moves)\n    pasha_moves = list(pasha_moves)\n    pasha_moves.sort()\n    pasha_moves = [list(move) for move in pasha_moves]\n    pasha_moves = [tuple(move) for move in pasha_moves]\n    pasha_moves = set(pasha_moves)\n    pasha_moves = list(pasha_moves)\n    pasha_moves.sort()\n    pasha_moves = [list(move) for move in pasha_moves]\n    pasha_moves = [tuple(move) for move in pasha_moves]\n    pasha_moves = set(pasha_moves)\n    pasha_moves = list(pasha_moves)\n    pasha_moves.sort()\n    pasha_moves = [list(move) for move in pasha_moves]\n    pasha_moves = [tuple(move) for move in pasha_moves]\n    pasha_moves = set(pasha_moves)\n    pasha_moves = list(pasha_moves)\n    pasha_moves.sort()\n    pasha_moves = [list(move) for move in pasha_moves]\n    pasha_moves = [tuple(move) for move in pasha_moves]\n    pasha_moves = set(pasha_moves)\n    pasha_moves = list(pasha_moves)\n    pasha_moves.sort()\n    pasha_moves = [list(move) for move in pasha_moves]\n    pasha_moves = [tuple(move) for move in pasha_moves]\n    pasha_moves = set(pasha_moves)\n    pasha_moves = list(pasha_"
    },
    {
        "number": 1634,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    c_1, c_2, c_3, c_4 = [int(x) for x in stdin.split()]\n    n, m = [int(x) for x in stdin.split()]\n    a, b = [int(x) for x in stdin.split()]\n    a_sum = sum(a)\n    b_sum = sum(b)\n    a_sum_bus = a_sum\n    b_sum_trol = b_sum\n    for i in range(1, n):\n        a_sum_bus += a[i]\n        a_sum_bus -= a[i - 1]\n    for i in range(1, m):\n        b_sum_trol += b[i]\n        b_sum_trol -= b[i - 1]\n    return str(min(a_sum_bus, b_sum_trol, c_1 * a_sum, c_2 * b_sum, c_3 * a_sum_bus, c_4 * b_sum_trol))"
    },
    {
        "number": 1635,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    cafe_indices = [int(x) for x in stdin.readline().strip().split()]\n    cafe_indices.sort()\n    cafe_indices.reverse()\n    cafe_indices_set = set(cafe_indices)\n    for cafe_index in cafe_indices:\n        if cafe_index not in cafe_indices_set:\n            return cafe_index\n    return -1\n\nassert(solution('''5\n1 3 2 1 2\n''') == 3)\nassert(solution('''6\n2 1 2 2 4 1\n''') == 2)\nassert(solution('''7\n1 1 1 1 1 1 1\n''') == -1)\nassert(solution('''8\n1 1 1 1 1 1 1 1\n''') == -1)\nassert(solution('''9\n1 1 1 1 1 1 1 1 1\n''') == -1)\nassert(solution('''10\n1 1 1 1 1 1 1 1 1 1\n''') == -1)\nassert(solution('''11\n1 1 1 1 1 1 1 1 1 1 1\n''') == -1)\nassert(solution('''12\n1 1 1 1 1 1 1 1 1 1 1 1\n''') == -1)\nassert(solution('''13\n1 1 1 1 1 1 1 1 1 1 1 1 1\n''') == -1)\nassert(solution('''14\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\n''') == -1)\nassert(solution('''15\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n''') == -1)\nassert(solution('''16\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n''') == -1)\nassert(solution('''17\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n''') == -1)\nassert(solution('''18\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n''') == -1)\nassert(solution('''19\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n''') == -1)\nassert(solution('''20\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n''') == -1)\nassert(solution('''21\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 1636,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    points = [tuple(map(int, line.split())) for line in stdin.readlines()]\n    w = list(map(int, stdin.readline().split()))\n    points.sort(key=lambda p: p[0] + p[1])\n    for i in range(n):\n        if points[i][0] + points[i][1]!= w[i]:\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 1637,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    scores = [int(x) for x in stdin.split()]\n    for _ in range(m):\n        u, v = [int(x) for x in stdin.split()]\n        scores[u] += scores[v]\n        scores[v] = 0\n    return''.join(str(x) for x in scores)"
    },
    {
        "number": 1638,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    m = list(map(int, stdin.readline().split()))\n    m.sort()\n    m.reverse()\n    ans = [0] * n\n    for i in range(n):\n        ans[i] = m[i]\n    return''.join(map(str, ans))\n\nassert(solution('''5\n1 2 3 2 1''') == '1 2 3 2 1')\nassert(solution('''3\n10 6 8''') == '10 6 6')\nassert(solution('''3\n10 6 8''') == '10 6 6')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution"
    },
    {
        "number": 1639,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    max_len = 1\n    curr_len = 1\n    for i in range(1, n):\n        if a[i] > a[i - 1]:\n            curr_len += 1\n        else:\n            max_len = max(max_len, curr_len)\n            curr_len = 1\n    return max(max_len, curr_len)\n\nassert(solution('''6\n2 2 1 3 4 1''') == 3)\nassert(solution('''3\n2 2 9''') == 3)\nassert(solution('''3\n2 2 9''') == 3)\nassert(solution('''3\n2 2 9''') == 3)\nassert(solution('''3\n2 2 9''') == 3)\nassert(solution('''3\n2 2 9''') == 3)\nassert(solution('''3\n2 2 9''') == 3)\nassert(solution('''3\n2 2 9''') == 3)\nassert(solution('''3\n2 2 9''') == 3)\nassert(solution('''3\n2 2 9''') == 3)\nassert(solution('''3\n2 2 9''') == 3)\nassert(solution('''3\n2 2 9''') == 3)\nassert(solution('''3\n2 2 9''') == 3)\nassert(solution('''3\n2 2 9''') == 3)\nassert(solution('''3\n2 2 9''') == 3)\nassert(solution('''3\n2 2 9''') == 3)\nassert(solution('''3\n2 2 9''') == 3)\nassert(solution('''3\n2 2 9''') == 3)\nassert(solution('''3\n2 2 9''') == 3)\nassert(solution('''3\n2 2 9''') == 3)\nassert(solution('''3\n2 2 9''') == 3)\nassert(solution('''3\n2 2 9''') == 3)\nassert(solution('''3\n2 2 9''') == 3)\nassert(solution('''3\n2 2 9''') == 3)\nassert(solution('''3\n2 2 9''') == 3)\nassert(solution('''3\n2 2 9''') == 3)\nassert(solution('''3\n2 2 9''') == 3)\nassert(solution('''3\n2 2 9''') == 3)\nassert(solution('''3\n2 2 9''') == 3)\nassert(solution('''3\n2 2 9''') == 3)\nassert(solution('''3\n2 2 9''') == 3)\nassert(solution('''3\n2 2 9''') == 3)\nassert(solution('''3\n2 2 9''') == 3)\nassert(solution('''3\n2 2 9''') == 3)\nassert(solution('''3\n2 2 9''') == 3)\nassert(solution('''3\n2 2 9''') == 3)\nassert(solution('''3\n2 2 9''') == 3)\nassert(solution('''3\n2 2 9''') == 3)\nassert(solution('''3\n2 2 9''') == 3)\nassert(solution('''3\n2 2 9''') == 3)\nassert(solution('''3\n2 2 9''') == 3)\nassert(solution('''3\n2 2 9''') == 3)\nassert(solution('''3\n2 2 9''') == 3)\nassert(solution('''3\n2 2 9''') == 3)\nassert(solution('''3\n2 2 9''') == 3)\nassert(solution('''3\n2 2 9''') == 3)\nassert(solution('''3\n2 2 9''') == 3)\nassert(solution('''3\n2 2 9''') == 3)\nassert(solution('''3\n2 2 9''') == 3)\nassert(solution('''3\n2 2 9''') == 3)\nassert(solution('''3\n2 2 9''') == 3)\nassert(solution('''3\n2 2 9''') == 3)\nassert(solution('''3\n2 2 9''') == 3)\nassert(solution('''3\n2 2 9''') == 3)\nassert(solution('''3\n2 2 9''') == 3)\nassert(solution('''3\n2 2 9''') == 3)\nassert(solution('''3\n2 2 9''') == 3)\nassert(solution('''3\n2 2 9''') == 3)\nassert(solution('''3\n2 2 9''') == 3)\nassert(solution('''3\n2 2 9''') == 3)\nassert(solution('''3\n2 2 9''') == 3)\nassert(solution('''3\n2 2 9''') == 3)\nassert(solution('''3\n2 2 9''') == 3)\nassert(solution('''3\n2 2 9''') == 3)\nassert(solution('''3\n2 2 9''') == 3)\nassert(solution('''3\n2 2 9''') == 3)\nassert(solution('''3\n2 2 9''') == 3)\nassert(solution('''3\n2 2 9''') == 3)\nassert(solution('''3\n2 2 9''') == 3)\nassert(solution('''3\n2 2 9''') == 3)\nassert(solution('''3\n2 2 9''') == 3)\nassert(solution('''3\n2 2 9''') == 3)\nassert(solution('''3\n2 2 9''') == 3)\nassert(solution('''3\n2 2 9''') == 3)\nassert(solution('''3\n2 2 9''') == 3)\nassert(solution('''3\n2 2 9''') == 3)\nassert(solution('''3\n2 2 9''') == 3)\nassert(solution('''3\n2 2 9''') == 3)\nassert(solution('''3\n2 2 9''') == 3)\nassert(solution('''3\n2 2 9''') == 3)\nassert(solution('''3\n2 2 9''') == 3)\nassert(solution('''3\n2 2 9''') == 3)\nassert(solution('''3\n2 2 9''') == 3)\nassert(solution('''3\n2 2 9''') == 3)\nassert(solution('''3\n2 2 9''') == 3)\nassert(solution('''3\n2 2 9''') == 3)\nassert(solution('''3\n2 2 9''') == 3)\nassert(solution('''3\n2 2 9''') == 3)\nassert(solution('''3"
    },
    {
        "number": 1640,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    return str(sum(abs(a[i] - a[j]) for i in range(n) for j in range(i + 1, n)))"
    },
    {
        "number": 1641,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, s, t = [int(x) for x in stdin.split()]\n    cars = [int(x) for x in stdin.split()]\n    gas_stations = [int(x) for x in stdin.split()]\n    gas_stations.sort()\n    gas_stations = gas_stations[:k]\n    gas_stations.sort()\n    gas_stations = gas_stations[::-1]\n    gas_stations = gas_stations[:k]\n    gas_stations.sort()\n    gas_stations = gas_stations[::-1]\n    gas_stations = gas_stations[:k]\n    gas_stations.sort()\n    gas_stations = gas_stations[::-1]\n    gas_stations = gas_stations[:k]\n    gas_stations.sort()\n    gas_stations = gas_stations[::-1]\n    gas_stations = gas_stations[:k]\n    gas_stations.sort()\n    gas_stations = gas_stations[::-1]\n    gas_stations = gas_stations[:k]\n    gas_stations.sort()\n    gas_stations = gas_stations[::-1]\n    gas_stations = gas_stations[:k]\n    gas_stations.sort()\n    gas_stations = gas_stations[::-1]\n    gas_stations = gas_stations[:k]\n    gas_stations.sort()\n    gas_stations = gas_stations[::-1]\n    gas_stations = gas_stations[:k]\n    gas_stations.sort()\n    gas_stations = gas_stations[::-1]\n    gas_stations = gas_stations[:k]\n    gas_stations.sort()\n    gas_stations = gas_stations[::-1]\n    gas_stations = gas_stations[:k]\n    gas_stations.sort()\n    gas_stations = gas_stations[::-1]\n    gas_stations = gas_stations[:k]\n    gas_stations.sort()\n    gas_stations = gas_stations[::-1]\n    gas_stations = gas_stations[:k]\n    gas_stations.sort()\n    gas_stations = gas_stations[::-1]\n    gas_stations = gas_stations[:k]\n    gas_stations.sort()\n    gas_stations = gas_stations[::-1]\n    gas_stations = gas_stations[:k]\n    gas_stations.sort()\n    gas_stations = gas_stations[::-1]\n    gas_stations = gas_stations[:k]\n    gas_stations.sort()\n    gas_stations = gas_stations[::-1]\n    gas_stations = gas_stations[:k]\n    gas_stations.sort()\n    gas_stations = gas_stations[::-1]\n    gas_stations = gas_stations[:k]\n    gas_stations.sort()\n    gas_stations = gas_stations[::-1]\n    gas_stations = gas_stations[:k]\n    gas_stations.sort()\n    gas_stations = gas_stations[::-1]\n    gas_stations = gas_stations[:k]\n    gas_stations.sort()\n    gas_stations = gas_stations[::-1]\n    gas_stations = gas_stations[:k]\n    gas_stations.sort()\n    gas_stations = gas_stations[::-1]\n    gas_stations = gas_stations[:k]\n    gas_stations.sort()\n    gas_stations = gas_stations[::-1]\n    gas_stations = gas_stations[:k]\n    gas_stations.sort()\n    gas_stations = gas_stations[::-1]\n    gas_stations = gas_stations[:k]\n    gas_stations.sort()\n    gas_stations = gas_stations[::-1]\n    gas_stations = gas_stations[:k]\n    gas_stations.sort()\n    gas_stations = gas_stations[::-1]\n    gas_stations = gas_stations[:k]\n    gas_stations.sort()\n    gas_stations = gas_stations[::-1]\n    gas_stations = gas_stations[:k]\n    gas_stations.sort()\n    gas_stations = gas_stations[::-1]\n    gas_stations = gas_stations[:k]\n    gas_stations.sort()\n    gas_stations = gas_stations[::-1]\n    gas_stations = gas_stations[:k]\n    gas_stations.sort()\n    gas_stations = gas_stations[::-1]\n    gas_stations = gas_stations[:k]\n    gas_stations.sort()\n    gas_stations = gas_stations[::-1]\n    gas"
    },
    {
        "number": 1642,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    points = [tuple(map(int, stdin.readline().split())) for _ in range(n)]\n    points.sort(key=lambda p: p[0]**2 + p[1]**2)\n    max_d = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            d = (points[j][0] - points[i][0])**2 + (points[j][1] - points[i][1])**2\n            if d > max_d:\n                max_d = d\n    return str(max_d)"
    },
    {
        "number": 1643,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    t = ''\n    for i in range(1, n):\n        for j in range(i, n):\n            if s[i-1] < s[j]:\n                t += '0'\n            else:\n                t += '1'\n            if len(t) > len(s):\n                break\n        if len(t) == len(s):\n            return t\n    return t"
    },
    {
        "number": 1644,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    rings = [tuple(map(int, stdin.readline().split())) for _ in range(n)]\n    rings.sort(key=lambda x: x[1])\n    rings.sort(key=lambda x: x[0], reverse=True)\n    max_height = 0\n    for i in range(n):\n        if rings[i][0] > max_height:\n            max_height = rings[i][0]\n    return str(max_height)\n\nassert(solution('''3\n1 5 1\n2 6 2\n3 7 3''') == '6')\nassert(solution('''4\n1 2 1\n1 3 3\n4 6 2\n5 7 1''') == '4')\nassert(solution('''5\n1 2 1\n1 3 3\n4 6 2\n5 7 1\n1 1 1''') == '1')\nassert(solution('''6\n1 2 1\n1 3 3\n4 6 2\n5 7 1\n1 1 1\n1 1 1''') == '1')\nassert(solution('''7\n1 2 1\n1 3 3\n4 6 2\n5 7 1\n1 1 1\n1 1 1\n1 1 1''') == '1')\nassert(solution('''8\n1 2 1\n1 3 3\n4 6 2\n5 7 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1''') == '1')\nassert(solution('''9\n1 2 1\n1 3 3\n4 6 2\n5 7 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1''') == '1')\nassert(solution('''10\n1 2 1\n1 3 3\n4 6 2\n5 7 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1''') == '1')\nassert(solution('''11\n1 2 1\n1 3 3\n4 6 2\n5 7 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1''') == '1')\nassert(solution('''12\n1 2 1\n1 3 3\n4 6 2\n5 7 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1''') == '1')\nassert(solution('''13\n1 2 1\n1 3 3\n4 6 2\n5 7 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1''') == '1')\nassert(solution('''14\n1 2 1\n1 3 3\n4 6 2\n5 7 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1''') == '1')\nassert(solution('''15\n1 2 1\n1 3 3\n4 6 2\n5 7 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1''') == '1')\nassert(solution('''16\n1 2 1\n1 3 3\n4 6 2\n5 7 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1''') == '1')\nassert(solution('''17\n1 2 1\n1 3 3\n4 6 2\n5 7 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1''') == '1')\nassert(solution('''18\n1 2 1\n1 3 3\n4 6 2\n5 7 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1''') == '1')\nassert(solution('''19\n1 2 1\n1 3 3\n4 6 2\n5 7 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1''') == '1')\nassert(solution('''20\n1 2 1\n1 3 3\n4 6 2\n5 7 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1''') == '1')\nassert(solution('''21\n1 2 1\n1 3 3\n4 6 2\n5 7 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1''') == '1')\nassert(solution('''22\n1 2 1\n1 3 3\n4 6 2\n5 7 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1''') == '1')\nassert(solution('''23\n1 2 1\n1 3 3\n4 6 2\n5 7 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1''') == '1')\nassert(solution('''24\n1 2 1\n1 3 3\n4 6 2\n5 7 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1"
    },
    {
        "number": 1645,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    return str(solution_naive(a))\n\ndef"
    },
    {
        "number": 1646,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[1:]\n    if n == 1:\n        return s\n    if n == 2:\n        return '1' if s[0] == '0' else '0'\n    if s[0] == '0':\n        return '0' + solution(s[1:])\n    if s[0] == '1':\n        return '1' + solution(s[1:])"
    },
    {
        "number": 1647,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    lettering_valya = stdin.readline().strip()\n    lettering_tolya = stdin.readline().strip()\n    lettering_tolya_reversed = lettering_tolya[::-1]\n    lettering_valya_reversed = lettering_valya[::-1]\n    lettering_tolya_reversed_and_valya_reversed = lettering_tolya_reversed + lettering_valya_reversed\n    lettering_tolya_reversed_and_valya_reversed_reversed = lettering_tolya_reversed_and_valya_reversed[::-1]\n    print(lettering_tolya_reversed_and_valya_reversed_reversed)\n    return \"\""
    },
    {
        "number": 1648,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    return str(factorial(n) // (factorial(k) * factorial(n - k)))\n\ndef"
    },
    {
        "number": 1649,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = [int(x) for x in stdin.split()]\n    if A + B == C + D:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 1650,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    L = int(stdin)\n    count = 0\n    for a in range(0, L + 1):\n        for b in range(0, L + 1):\n            if a + b <= L and a ^ b == a:\n                count += 1\n    return str(count % (10 ** 9 + 7))"
    },
    {
        "number": 1651,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S, P = [int(x) for x in stdin.split()]\n    for i in range(1, S+1):\n        if S % i == 0 and P % (S/i) == 0:\n            return \"Yes\"\n    return \"No\""
    },
    {
        "number": 1652,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 1653,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 1654,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    t = stdin.strip()\n    return max(s, key=lambda x: len(set(s.replace('?', x)) & set(t)))"
    },
    {
        "number": 1655,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    claws = list(map(int, stdin.readline().split()))\n    alive = 0\n    for i in range(n):\n        if i < n - claws[i]:\n            alive += 1\n    return str(alive)"
    },
    {
        "number": 1656,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\n\"\"\"\n\ndef"
    },
    {
        "number": 1657,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p = [int(x) for x in stdin.split()]\n    devices = [int(x) for x in stdin.split()]\n    devices.sort()\n    if devices[0] > p:\n        return '-1'\n    else:\n        return str(devices[0] / p)"
    },
    {
        "number": 1658,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = [int(x) for x in stdin.split()]\n    d = [int(x) for x in stdin.split()]\n    return str(count_nodes(n, d, x))\n\ndef"
    },
    {
        "number": 1659,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = [int(x) for x in stdin.split()]\n    packs = [int(x) for x in stdin.split()]\n    for _ in range(n):\n        carrier, d = [int(x) for x in stdin.split()]\n        if carrier > x:\n            packs[carrier - x - 1] += d\n        else:\n            packs[carrier - 1] += d\n    return''.join(str(x) for x in packs)"
    },
    {
        "number": 1660,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v, w = [int(x) for x in stdin.split()]\n        graph[u - 1].append((v - 1, w))\n    max_edges = 0\n    for i in range(n):\n        visited = [False] * n\n        visited[i] = True\n        stack = [(i, 0)]\n        while stack:\n            u, edges = stack.pop()\n            if edges > max_edges:\n                max_edges = edges\n            for v, w in graph[u]:\n                if not visited[v]:\n                    visited[v] = True\n                    stack.append((v, edges + w))\n    return str(max_edges)"
    },
    {
        "number": 1661,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    c = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    i = 0\n    while i < n:\n        if a[i] >= c[i]:\n            a[i] -= c[i]\n            i += 1\n        else:\n            i += 1\n    return str(i)"
    },
    {
        "number": 1662,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin.readline().strip())\n    numbers = list(map(int, stdin.readline().strip().split()))\n    numbers.sort()\n    result = 0\n    for i in range(1, len(numbers)):\n        if numbers[i] - numbers[i - 1] > 1:\n            result += 1\n    return str(result)\n"
    },
    {
        "number": 1663,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(sum(int(x) for x in str(n)) % (10 ** 9 + 7))"
    },
    {
        "number": 1664,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    lines = lines[1:]\n    res = lines[0]\n    for i in range(1, n):\n        res = res ^ lines[i]\n    return res"
    },
    {
        "number": 1665,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    edges = [tuple(map(int, line.split())) for line in stdin.readlines()]\n    return '\\n'.join(str(min(u, v)) for u, v in edges)\n\nprint(solution('''3\n1 2\n1 3\n'''))\nprint(solution('''6\n1 2\n1 3\n2 4\n2 5\n5 6\n'''))\n'''\n\n'''\n"
    },
    {
        "number": 1666,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y, a, b = [int(x) for x in stdin.split()]\n    n = x * y\n    if a > x:\n        a = x\n    if b > y:\n        b = y\n    if a == b:\n        return str(n)\n    if a > b:\n        return str(n)\n    if a == 1:\n        return str(n)\n    if b == 1:\n        return str(n)\n    if a == 2:\n        return str(n)\n    if b == 2:\n        return str(n)\n    if a == 3:\n        return str(n)\n    if b == 3:\n        return str(n)\n    if a == 4:\n        return str(n)\n    if b == 4:\n        return str(n)\n    if a == 5:\n        return str(n)\n    if b == 5:\n        return str(n)\n    if a == 6:\n        return str(n)\n    if b == 6:\n        return str(n)\n    if a == 7:\n        return str(n)\n    if b == 7:\n        return str(n)\n    if a == 8:\n        return str(n)\n    if b == 8:\n        return str(n)\n    if a == 9:\n        return str(n)\n    if b == 9:\n        return str(n)\n    if a == 10:\n        return str(n)\n    if b == 10:\n        return str(n)\n    if a == 11:\n        return str(n)\n    if b == 11:\n        return str(n)\n    if a == 12:\n        return str(n)\n    if b == 12:\n        return str(n)\n    if a == 13:\n        return str(n)\n    if b == 13:\n        return str(n)\n    if a == 14:\n        return str(n)\n    if b == 14:\n        return str(n)\n    if a == 15:\n        return str(n)\n    if b == 15:\n        return str(n)\n    if a == 16:\n        return str(n)\n    if b == 16:\n        return str(n)\n    if a == 17:\n        return str(n)\n    if b == 17:\n        return str(n)\n    if a == 18:\n        return str(n)\n    if b == 18:\n        return str(n)\n    if a == 19:\n        return str(n)\n    if b == 19:\n        return str(n)\n    if a == 20:\n        return str(n)\n    if b == 20:\n        return str(n)\n    if a == 21:\n        return str(n)\n    if b == 21:\n        return str(n)\n    if a == 22:\n        return str(n)\n    if b == 22:\n        return str(n)\n    if a == 23:\n        return str(n)\n    if b == 23:\n        return str(n)\n    if a == 24:\n        return str(n)\n    if b == 24:\n        return str(n)\n    if a == 25:\n        return str(n)\n    if b == 25:\n        return str(n)\n    if a == 26:\n        return str(n)\n    if b == 26:\n        return str(n)\n    if a == 27:\n        return str(n)\n    if b == 27:\n        return str(n)\n    if a == 28:\n        return str(n)\n    if b == 28:\n        return str(n)\n    if a == 29:\n        return str(n)\n    if b == 29:\n        return str(n)\n    if a == 30:\n        return str(n)\n    if b == 30:\n        return str(n)\n    if a == 31:\n        return str(n)\n    if b == 31:\n        return str(n)\n    if a == 32:\n        return str(n)\n    if b == 32:\n        return str(n)\n    if a == 33:\n        return str(n)\n    if b == 33:\n        return str(n)\n    if a == 34:\n        return str(n)\n    if b == 34:\n        return str(n)\n    if a == 35:\n        return str(n)\n    if b == 35:\n        return str(n)\n    if a == 36:\n        return str(n)\n    if b == 36:\n        return str(n)\n    if a == 37:\n        return str(n)\n    if b == 37:\n        return str(n)\n    if a == 38:\n        return str(n)\n    if b == 38:\n        return str(n)\n    if a == 39:\n        return str(n)\n    if b == 39:\n        return str(n)\n    if a == 40:\n        return str(n)\n    if b == 40:\n        return str(n)\n    if a == 41:\n        return str(n)\n    if b == 41:\n        return str(n)\n    if a == 42:\n        return str(n)\n    if b == 42:\n        return str(n)\n    if a == 43:\n        return str(n)\n    if b == 43:\n        return str(n)\n    if a == 44:\n        return str(n)\n    if b == 44:\n        return str(n)\n    if a == 45:\n        return str(n)\n    if b == 45:\n        return str(n)\n    if a == 46:\n        return str(n)\n    if b == 46:\n        return str(n)\n    if a == 47:\n        return str(n)\n    if b == 47:\n        return str(n)\n    if a == 48:\n        return str(n)\n    if b == 48:\n        return str(n)\n    if a == 49:\n        return str(n)\n    if b == 49:\n        return str(n)\n    if a == 50:\n        return str(n)\n    if b == 50:\n        return str(n)\n    if a == 51:\n        return str(n)\n    if b == 51:\n        return str(n)\n    if a == 52:\n        return str(n)\n    if b == 52:\n        return str(n)\n    if a == 53:\n        return str(n)\n    if b == 53:\n        return str(n)\n    if a == 54:\n        return str(n)\n    "
    },
    {
        "number": 1667,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    k = 1\n    for i in range(1, n):\n        if a[i] - a[i - 1] > k:\n            k += 1\n    return k"
    },
    {
        "number": 1668,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    for _ in range(n):\n        n = int(stdin.readline())\n        p = [int(stdin.readline()) for _ in range(n)]\n        p.sort()\n        p = [str(x) for x in p]\n        p = ''.join(p)\n        p = p.replace('0', '1')\n        p = p.replace('1', '0')\n        p = p.replace('2', '1')\n        p = p.replace('3', '2')\n        p = p.replace('4', '3')\n        p = p.replace('5', '4')\n        p = p.replace('6', '5')\n        p = p.replace('7', '6')\n        p = p.replace('8', '7')\n        p = p.replace('9', '8')\n        p = p.replace('10', '9')\n        print(p)\n    return ''"
    },
    {
        "number": 1669,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    reserved_tokens = stdin.readline().strip().split()\n    m = int(stdin.readline().strip())\n    for i in range(m):\n        line = stdin.readline().strip()\n        tokens = line.split()\n        print(minify(tokens, reserved_tokens))\n\ndef"
    },
    {
        "number": 1670,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 1671,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    m = list(map(int, stdin.readline().split()))\n    m.sort()\n    m.reverse()\n    print(m)\n    print(m[0] - m[1])\n    return \"\""
    },
    {
        "number": 1672,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    m = [stdin[i:i+2] for i in range(0, len(stdin), 2)]\n    m.sort()\n    groups = 0\n    for i in range(1, len(m)):\n        if m[i-1] == m[i][0]:\n            groups += 1\n    return str(groups)"
    },
    {
        "number": 1673,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    return str(sum(abs(a[i] - a[i - k]) for i in range(k, n + 1)))"
    },
    {
        "number": 1674,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    s = stdin.split()[2]\n    dmg = 0\n    for i in range(n):\n        if s[i] == 'a':\n            dmg += a[i]\n    for i in range(n):\n        if s[i] == 'a':\n            if i + 1 < n:\n                if s[i + 1] == 'a':\n                    dmg += a[i]\n            if i - 1 >= 0:\n                if s[i - 1] == 'a':\n                    dmg += a[i]\n    return str(dmg)"
    },
    {
        "number": 1675,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    teams = [tuple(map(int, stdin.readline().split())) for _ in range(n)]\n    home_games = 0\n    away_games = 0\n    for team in teams:\n        if team[0] == team[1]:\n            away_games += 1\n        else:\n            home_games += 1\n    return''.join(map(str, [home_games, away_games]))\n\nassert(solution('''2\n1 2\n2 1''') == '2 0')\nassert(solution('''3\n1 2\n2 1\n1 3''') == '3 1')\nassert(solution('''4\n1 2\n2 1\n1 3\n2 3''') == '4 0')\nassert(solution('''5\n1 2\n2 1\n1 3\n2 3\n1 4''') == '3 1')\nassert(solution('''6\n1 2\n2 1\n1 3\n2 3\n1 4\n2 4''') == '4 0')\nassert(solution('''7\n1 2\n2 1\n1 3\n2 3\n1 4\n2 4\n1 5''') == '5 1')\nassert(solution('''8\n1 2\n2 1\n1 3\n2 3\n1 4\n2 4\n1 5\n2 5\n1 6''') == '6 1')\nassert(solution('''9\n1 2\n2 1\n1 3\n2 3\n1 4\n2 4\n1 5\n2 5\n1 6\n2 6''') == '6 1')\nassert(solution('''10\n1 2\n2 1\n1 3\n2 3\n1 4\n2 4\n1 5\n2 5\n1 6\n2 6\n1 7''') == '7 1')\nassert(solution('''11\n1 2\n2 1\n1 3\n2 3\n1 4\n2 4\n1 5\n2 5\n1 6\n2 6\n1 7\n2 7\n1 8''') == '8 1')\nassert(solution('''12\n1 2\n2 1\n1 3\n2 3\n1 4\n2 4\n1 5\n2 5\n1 6\n2 6\n1 7\n2 7\n1 8\n2 8''') == '8 1')\nassert(solution('''13\n1 2\n2 1\n1 3\n2 3\n1 4\n2 4\n1 5\n2 5\n1 6\n2 6\n1 7\n2 7\n1 8\n2 8\n1 9\n2 9''') == '9 1')\nassert(solution('''14\n1 2\n2 1\n1 3\n2 3\n1 4\n2 4\n1 5\n2 5\n1 6\n2 6\n1 7\n2 7\n1 8\n2 8\n1 9\n2 9\n1 10\n2 10''') == '10 1')\nassert(solution('''15\n1 2\n2 1\n1 3\n2 3\n1 4\n2 4\n1 5\n2 5\n1 6\n2 6\n1 7\n2 7\n1 8\n2 8\n1 9\n2 9\n1 10\n2 10\n1 11\n2 11''') == '11 1')\nassert(solution('''16\n1 2\n2 1\n1 3\n2 3\n1 4\n2 4\n1 5\n2 5\n1 6\n2 6\n1 7\n2 7\n1 8\n2 8\n1 9\n2 9\n1 10\n2 10\n1 11\n2 11\n1 12\n2 12''') == '12 1')\nassert(solution('''17\n1 2\n2 1\n1 3\n2 3\n1 4\n2 4\n1 5\n2 5\n1 6\n2 6\n1 7\n2 7\n1 8\n2 8\n1 9\n2 9\n1 10\n2 10\n1 11\n2 11\n1 12\n2 12\n1 13\n2 13''') == '13 1')\nassert(solution('''18\n1 2\n2 1\n1 3\n2 3\n1 4\n2 4\n1 5\n2 5\n1 6\n2 6\n1 7\n2 7\n1 8\n2 8\n1 9\n2 9\n1 10\n2 10\n1 11\n2 11\n1 12\n2 12\n1 13\n2 13\n1 14\n2 14''') == '14 1')\nassert(solution('''19\n1 2\n2 1\n1 3\n2 3\n1 4\n2 4\n1 5\n2 5\n1 6\n2 6\n1 7\n2 7\n1 8\n2 8\n1 9\n2 9\n1 10\n2 10\n1 11\n2 11\n1 12\n2 12\n1 13\n2 13\n1 14\n2 14\n1 15\n2 15''') == '15 1')\nassert(solution('''20\n1 2\n2 1\n1 3\n2 3\n1 4\n2 4\n1 5\n2 5\n1 6\n2 6\n1 7\n2 7\n1 8\n2 8\n1 9\n2 9\n1 10\n2 10\n1 11\n2 11\n1 12\n2 12\n1 13\n2 13\n1 14\n2 14\n1 15\n2 15\n1 16\n2 16\n1 17\n2 17\n1 18\n2 18\n1 19\n2 19''') == '18 1')\nassert(solution('''21\n1 2\n2 1\n1 3\n2 3\n1 4\n2 4\n1 5\n2 5\n1 6\n2 6\n1 7\n2 7\n1 8\n2 8\n1 9\n2 9\n1 10\n2 10\n1 11\n2 11\n1 12\n2 12\n1 13\n2 13\n1 14\n2 14\n1 15\n2 15\n1 16\n2 16\n1 17\n2 17\n1 18\n2 18\n1 19\n2 19\n1 20\n2 20\n1 21\n2 21''') == '20 1')\nassert(solution('''22\n1 2\n2 1\n1 3\n2 3\n1 4\n2 4\n1 5\n2 5\n1 6\n2 6\n1 7\n2 7\n1 8\n2 8\n1 9\n2 9\n1 10\n2 10\n1 11\n2 11\n1 12\n2 12\n1 13\n2 13\n1 14\n2 14\n1 15\n2 15\n1 16\n2 16\n1 17\n2 17\n1 18\n2 18\n1 19\n2 19\n1 20\n2 20\n1 21\n2 21\n1 22\n2 22\n1 23\n2 23\n1 24\n2 24\n1 25\n2 25''') == '21 1')\nassert(solution('''23\n1 2\n2 1\n1 3\n2 3\n1 4\n2 4\n1 5\n2 5\n1 6\n2 6\n1 7\n2 7\n1 8\n2 8\n1 9\n2 9\n1 10\n2 10\n1 11\n2 11\n1 12\n2 12\n1 13\n2 13\n1 14\n2 14\n1 15\n2 15\n1 16\n2"
    },
    {
        "number": 1676,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, b = map(int, stdin.split())\n    queries = [map(int, line.split()) for line in stdin.splitlines()[1:]]\n    queries.sort(key=lambda x: x[0])\n    queue = []\n    for t, d in queries:\n        if len(queue) < b:\n            queue.append(t)\n        else:\n            if t < queue[0]:\n                queue.append(t)\n            else:\n                queue.pop(0)\n                queue.append(t)\n    queue.sort()\n    return''.join(map(str, queue))"
    },
    {
        "number": 1677,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    b = [int(x) for x in stdin.readline().split()]\n    \n    # find the longest subsequence\n    # that is an almost arithmetical progression\n    # and is a subsequence of b\n    \n    # find the longest subsequence\n    # that is an almost arithmetical progression\n    # and is a subsequence of b\n    \n    # find the longest subsequence\n    # that is an almost arithmetical progression\n    # and is a subsequence of b\n    \n    # find the longest subsequence\n    # that is an almost arithmetical progression\n    # and is a subsequence of b\n    \n    # find the longest subsequence\n    # that is an almost arithmetical progression\n    # and is a subsequence of b\n    \n    # find the longest subsequence\n    # that is an almost arithmetical progression\n    # and is a subsequence of b\n    \n    # find the longest subsequence\n    # that is an almost arithmetical progression\n    # and is a subsequence of b\n    \n    # find the longest subsequence\n    # that is an almost arithmetical progression\n    # and is a subsequence of b\n    \n    # find the longest subsequence\n    # that is an almost arithmetical progression\n    # and is a subsequence of b\n    \n    # find the longest subsequence\n    # that is an almost arithmetical progression\n    # and is a subsequence of b\n    \n    # find the longest subsequence\n    # that is an almost arithmetical progression\n    # and is a subsequence of b\n    \n    # find the longest subsequence\n    # that is an almost arithmetical progression\n    # and is a subsequence of b\n    \n    # find the longest subsequence\n    # that is an almost arithmetical progression\n    # and is a subsequence of b\n    \n    # find the longest subsequence\n    # that is an almost arithmetical progression\n    # and is a subsequence of b\n    \n    # find the longest subsequence\n    # that is an almost arithmetical progression\n    # and is a subsequence of b\n    \n    # find the longest subsequence\n    # that is an almost arithmetical progression\n    # and is a subsequence of b\n    \n    # find the longest subsequence\n    # that is an almost arithmetical progression\n    # and is a subsequence of b\n    \n    # find the longest subsequence\n    # that is an almost arithmetical progression\n    # and is a subsequence of b\n    \n    # find the longest subsequence\n    # that is an almost arithmetical progression\n    # and is a subsequence of b\n    \n    # find the longest subsequence\n    # that is an almost arithmetical progression\n    # and is a subsequence of b\n    \n    # find the longest subsequence\n    # that is an almost arithmetical progression\n    # and is a subsequence of b\n    \n    # find the longest subsequence\n    # that is an almost arithmetical progression\n    # and is a subsequence of b\n    \n    # find the longest subsequence\n    # that is an almost arithmetical progression\n    # and is a subsequence of b\n    \n    # find the longest subsequence\n    # that is an almost arithmetical progression\n    # and is a subsequence of b\n    \n    # find the longest subsequence\n    # that is an almost arithmetical progression\n    # and is a subsequence of b\n    \n    # find the longest subsequence\n    # that is an almost arithmetical progression\n    # and is a subsequence of b\n    \n    # find the longest subsequence\n    # that is an almost arithmetical progression\n    # and is a subsequence of b\n    \n    # find the longest subsequence\n    # that is an almost arithmetical progression\n    # and is a subsequence of b\n    \n    # find the longest subsequence\n    # that is an almost arithmetical progression\n    # and is a subsequence of b\n    \n    # find the longest subsequence\n    # that is an almost arithmetical progression\n    # and is a subsequence of b\n    \n    # find the longest subsequence\n    # that is an almost arithmetical progression\n    # and is a subsequence of b\n    \n    # find the longest subsequence\n    # that is an almost arithmetical progression\n    # and is a subsequence of b\n    \n    # find the longest subsequence\n    # that is an almost arithmetical progression\n    # and is a subsequence of b\n    \n    # find the longest subsequence\n    # that is an almost arithmetical progression\n    # and is a subsequence of b\n    \n    # find the longest subsequence\n    # that is an almost arithmetical progression\n    # and is a subsequence of b\n    \n    # find the longest subsequence\n    # that is an almost arithmetical progression\n    # and is a subsequence of b\n    \n    # find the longest subsequence\n    # that is an almost arithmetical progression\n    # and is a subsequence of b\n    \n    # find the longest subsequence\n    # that is an almost arithmetical progression\n    # and is a subsequence of b\n    \n    # find the longest subsequence\n    # that is an almost arithmetical progression\n    # and is a subsequence of b\n    \n    # find the longest subsequence\n    # that is an almost arithmetical progression\n    # and is a subsequence of b\n    \n    # find the longest subsequence\n    # that is an almost arithmetical progression\n    # and is a subsequence of b\n    \n    # find the longest subsequence\n    # that is an almost arithmetical progression\n    # and is a subsequence of b\n    \n    # find the longest subsequence\n    # that is an almost arithmetical progression\n    # and is a subsequence of b\n    \n    # find the longest subsequence\n    # that is an almost arithmetical progression\n    # and is a subsequence of b\n    \n    # find the longest subsequence\n    # that is an almost arithmetical progression\n    # and is a subsequence of b\n    \n    # find the longest subsequence\n    # that is an almost arithmetical progression\n    # and is a subsequence of b\n    \n    # find the longest subsequence\n    # that is an almost arithmetical progression\n    # and is a subsequence of b\n    \n    # find the longest subsequence\n    # that is an almost arithmetical progression\n    # and is a subsequence of b\n    \n    # find the longest subsequence\n    # that is an almost arithmetical progression\n    # and is a subsequence of b\n    \n    # find the longest subsequence\n    # that is an almost arithmetical progression\n"
    },
    {
        "number": 1678,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    return str(solution_naive(a, t))\n\ndef"
    },
    {
        "number": 1679,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    return str(int(''.join(map(str, map(int, s))), 2))\n\nassert(solution('''3''') == '3')\nassert(solution('''9''') == '2031')\nassert(solution('''110011101''') == '2031')\nassert(solution('''11111111''') == '2031')\nassert(solution('''11111111''') == '2031')\nassert(solution('''11111111''') == '2031')\nassert(solution('''11111111''') == '2031')\nassert(solution('''11111111''') == '2031')\nassert(solution('''11111111''') == '2031')\nassert(solution('''11111111''') == '2031')\nassert(solution('''11111111''') == '2031')\nassert(solution('''11111111''') == '2031')\nassert(solution('''11111111''') == '2031')\nassert(solution('''11111111''') == '2031')\nassert(solution('''11111111''') == '2031')\nassert(solution('''11111111''') == '2031')\nassert(solution('''11111111''') == '2031')\nassert(solution('''11111111''') == '2031')\nassert(solution('''11111111''') == '2031')\nassert(solution('''11111111''') == '2031')\nassert(solution('''11111111''') == '2031')\nassert(solution('''11111111''') == '2031')\nassert(solution('''11111111''') == '2031')\nassert(solution('''11111111''') == '2031')\nassert(solution('''11111111''') == '2031')\nassert(solution('''11111111''') == '2031')\nassert(solution('''11111111''') == '2031')\nassert(solution('''11111111''') == '2031')\nassert(solution('''11111111''') == '2031')\nassert(solution('''11111111''') == '2031')\nassert(solution('''11111111''') == '2031')\nassert(solution('''11111111''') == '2031')\nassert(solution('''11111111''') == '2031')\nassert(solution('''11111111''') == '2031')\nassert(solution('''11111111''') == '2031')\nassert(solution('''11111111''') == '2031')\nassert(solution('''11111111''') == '2031')\nassert(solution('''11111111''') == '2031')\nassert(solution('''11111111''') == '2031')\nassert(solution('''11111111''') == '2031')\nassert(solution('''11111111''') == '2031')\nassert(solution('''11111111''') == '2031')\nassert(solution('''11111111''') == '2031')\nassert(solution('''11111111''') == '2031')\nassert(solution('''11111111''') == '2031')\nassert(solution('''11111111''') == '2031')\nassert(solution('''11111111''') == '2031')\nassert(solution('''11111111''') == '2031')\nassert(solution('''11111111''') == '2031')\nassert(solution('''11111111''') == '2031')\nassert(solution('''11111111''') == '2031')\nassert(solution('''11111111''') == '2031')\nassert(solution('''11111111''') == '2031')\nassert(solution('''11111111''') == '2031')\nassert(solution('''11111111''') == '2031')\nassert(solution('''11111111''') == '2031')\nassert(solution('''11111111''') == '2031')\nassert(solution('''11111111''') == '2031')\nassert(solution('''11111111''') == '2031')\nassert(solution('''11111111''') == '2031')\nassert(solution('''11111111''') == '2031')\nassert(solution('''11111111''') == '2031')\nassert(solution('''11111111''') == '2031')\nassert(solution('''11111111''') == '2031')\nassert(solution('''11111111''') == '2031')\nassert(solution('''11111111''') == '2031')\nassert(solution('''11111111''') == '2031')\nassert(solution('''11111111''') == '2031')\nassert(solution('''11111111''') == '2031')\nassert(solution('''11111111''') == '2031')\nassert(solution('''11111111''') == '2031')\nassert(solution('''11111111''') == '2031')\nassert(solution('''11111111''') == '2031')\nassert(solution('''11111111''') == '2031')\nassert(solution('''11111111''') == '2031')\nassert(solution('''11111111''') == '2031')\nassert(solution('''11111111''') == '2031')\nassert(solution('''11111111''') == '2031')\nassert(solution('''11111111''') == '2031')\nassert(solution('''11111111''') == '2031')\nassert(solution('''11111111''') == '2031')\nassert(solution('''11111111''') == '2031')\nassert(solution('''11111111''') == '2031')\nassert(solution('''11111111''') == '2031')\nassert(solution('''11111111''') == '2031')\nassert(solution('''11111111''') == '2031')\nassert(solution('''11111111''') == '2031')\nassert(solution('''11111111''') == '2031')\nassert(solution('''11111111''') == '2031')\nassert(solution('''11111111''') == '2031')\nassert(solution('''11111111''') == '2031')\nassert(solution('''11111111''') == '2031')\nassert(solution('''11111111''') == '2031')\nassert(solution('''11111111''') == '2031')\nassert(solution('''11111111''') == '2031')\nassert(solution('''11111111''') == '2031')\nassert(solution('''11111111''') == '2031')\nassert(solution('''11111111''') == '2031')\nassert(solution('''11111111''') == '2031')\nassert(solution('''11111111''') == '2031')\nassert(solution('''11111111''') == '2031')\nassert(solution('''11111111''') == '2031')\nassert(solution('''11111111''') == '2031')"
    },
    {
        "number": 1680,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if bin(a[i]).count('1') == bin(a[j]).count('1'):\n                count += 1\n    return str(count)"
    },
    {
        "number": 1681,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 1682,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    a.sort()\n    b.sort()\n    i = 0\n    j = 0\n    ans = 0\n    while i < n and j < n:\n        if a[i] <= b[j]:\n            ans += a[i] * k\n            i += 1\n        else:\n            ans += b[j] * k\n            j += 1\n    return str(ans)"
    },
    {
        "number": 1683,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    a.sort()\n    b = [int(x) for x in stdin.readline().split()]\n    b.sort()\n    res = 0\n    for i in range(n):\n        res += a[i] * b[i]\n    return str(res % 998244353)"
    },
    {
        "number": 1684,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    points = [int(x) for x in stdin.split()]\n    segments = [tuple(int(x) for x in stdin.split()) for _ in range(m)]\n    return \"Yes\" if is_rotationally_symmetrical(n, points, segments) else \"No\"\n\ndef"
    },
    {
        "number": 1685,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = [int(x) for x in stdin.split()]\n    tree = [0] * (2 * n)\n    for i in range(n):\n        tree[i + n] = i + 1\n    for i in range(n - 1, 0, -1):\n        tree[i] = tree[2 * i]\n    for _ in range(q):\n        u, s = [int(x) for x in stdin.split()]\n        if s[0] == 'L':\n            u -= 1\n            if u < n:\n                tree[2 * u] = tree[2 * u + 1]\n        elif s[0] == 'R':\n            u -= 1\n            if u < n:\n                tree[2 * u + 1] = tree[2 * u]\n        else:\n            u -= 1\n            if u < n:\n                tree[2 * u] = tree[2 * u + 1]\n                tree[2 * u + 1] = tree[2 * u]\n    for i in range(n):\n        tree[i + n] = tree[i]\n    for i in range(n - 1, 0, -1):\n        tree[i] = tree[2 * i]\n    for i in range(n):\n        tree[i] = tree[i + n]\n    for i in range(n):\n        tree[i] = tree[i + n]\n    for i in range(n):\n        tree[i] = tree[i + n]\n    for i in range(n):\n        tree[i] = tree[i + n]\n    for i in range(n):\n        tree[i] = tree[i + n]\n    for i in range(n):\n        tree[i] = tree[i + n]\n    for i in range(n):\n        tree[i] = tree[i + n]\n    for i in range(n):\n        tree[i] = tree[i + n]\n    for i in range(n):\n        tree[i] = tree[i + n]\n    for i in range(n):\n        tree[i] = tree[i + n]\n    for i in range(n):\n        tree[i] = tree[i + n]\n    for i in range(n):\n        tree[i] = tree[i + n]\n    for i in range(n):\n        tree[i] = tree[i + n]\n    for i in range(n):\n        tree[i] = tree[i + n]\n    for i in range(n):\n        tree[i] = tree[i + n]\n    for i in range(n):\n        tree[i] = tree[i + n]\n    for i in range(n):\n        tree[i] = tree[i + n]\n    for i in range(n):\n        tree[i] = tree[i + n]\n    for i in range(n):\n        tree[i] = tree[i + n]\n    for i in range(n):\n        tree[i] = tree[i + n]\n    for i in range(n):\n        tree[i] = tree[i + n]\n    for i in range(n):\n        tree[i] = tree[i + n]\n    for i in range(n):\n        tree[i] = tree[i + n]\n    for i in range(n):\n        tree[i] = tree[i + n]\n    for i in range(n):\n        tree[i] = tree[i + n]\n    for i in range(n):\n        tree[i] = tree[i + n]\n    for i in range(n):\n        tree[i] = tree[i + n]\n    for i in range(n):\n        tree[i] = tree[i + n]\n    for i in range(n):\n        tree[i] = tree[i + n]\n    for i in range(n):\n        tree[i] = tree[i + n]\n    for i in range(n):\n        tree[i] = tree[i + n]\n    for i in range(n):\n        tree[i] = tree[i + n]\n    for i in range(n):\n        tree[i] = tree[i + n]\n    for i in range(n):\n        tree[i] = tree[i + n]\n    for i in range(n):\n        tree[i] = tree[i + n]\n    for i in range(n):\n        tree[i] = tree[i + n]\n    for i in range(n):\n        tree[i] = tree[i + n]\n    for i in range(n):\n        tree[i] = tree[i + n]\n    for i in range(n):\n        tree[i] = tree[i + n]\n    for i in range(n):\n        tree[i] = tree[i + n]\n    for i in range(n):\n        tree[i] = tree[i + n]\n    for i in range(n):\n        tree[i] = tree[i + n]\n    for i in range(n):\n        tree[i] = tree[i + n]\n    for i in range(n):\n        tree[i] = tree[i + n]\n    for i in range(n):\n        tree[i] = tree[i + n]\n    for i in range(n):\n        tree[i] = tree[i + n]\n    for i in range(n):\n        tree[i] = tree[i + n]\n    for i in range(n):\n        tree[i] = tree[i + n]\n    for i in range(n):\n        tree[i] = tree[i + n]\n    for i in range(n):\n        tree[i] = tree[i + n]\n    for"
    },
    {
        "number": 1686,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    ip_addresses = [x for x in stdin.split()]\n    ip_addresses.sort()\n    subnet_masks = []\n    for i in range(n):\n        ip_address = ip_addresses[i]\n        subnet_mask = ''\n        for j in range(32):\n            if (ip_address >> j) & 1:\n                subnet_mask += '1'\n            else:\n                subnet_mask += '0'\n        subnet_masks.append(subnet_mask)\n    subnet_masks.sort()\n    for i in range(n):\n        subnet_mask = subnet_masks[i]\n        if subnet_mask.count('1') == k:\n            return subnet_mask\n    return -1"
    },
    {
        "number": 1687,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    for i in range(1, n + 1):\n        if all(i % j == 0 for j in a):\n            return i\n    return -1"
    },
    {
        "number": 1688,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    c = [0] * n\n    for i in range(n):\n        if a[i] < a[i - 1] / 2:\n            c[i] = -1\n        else:\n            c[i] = i\n    return''.join(map(str, c))"
    },
    {
        "number": 1689,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    seats = [stdin.readline().strip() for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if seats[i][j] == 'O':\n                if seats[i][j+1] == 'O':\n                    if seats[i][j+2] == 'O':\n                        if seats[i][j+3] == 'O':\n                            if seats[i][j+4] == 'O':\n                                seats[i] = seats[i][:j+1] + '+' + seats[i][j+5:]\n    return '\\n'.join(seats)"
    },
    {
        "number": 1690,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    a.reverse()\n    print(a)\n    print(a[0] + a[1] + a[2] + a[3])\n    return \"\""
    },
    {
        "number": 1691,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return''.join(str(i + 1) for i in range(n - k, n))"
    },
    {
        "number": 1692,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(len([i for i in stdin if int(i) % 4 == 0]))"
    },
    {
        "number": 1693,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    m = list(map(int, stdin.readline().split()))\n    m.sort()\n    m.reverse()\n    ans = [0] * n\n    for i in range(n):\n        ans[i] = m[i]\n    return''.join(map(str, ans))\n\nassert(solution('''5\n1 2 3 2 1''') == '1 2 3 2 1')\nassert(solution('''3\n10 6 8''') == '10 6 6')\nassert(solution('''3\n10 6 8''') == '10 6 6')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3')\nassert(solution('''3\n1 2 3''') == '1 2 3"
    },
    {
        "number": 1694,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s, f = [int(x) for x in stdin.split()]\n    spies = [int(x) for x in stdin.split()]\n    spies.sort()\n    spies_to_watch = [int(x) for x in stdin.split()]\n    spies_to_watch.sort()\n    spies_to_watch = [x - 1 for x in spies_to_watch]\n    spies_to_watch = [x + 1 for x in spies_to_watch]\n    spies_to_watch = [x for x in spies_to_watch if x in range(1, n + 1)]\n    spies_to_watch = [x for x in spies_to_watch if x not in spies]\n    spies_to_watch = [x - 1 for x in spies_to_watch]\n    spies_to_watch = [x + 1 for x in spies_to_watch]\n    spies_to_watch = [x for x in spies_to_watch if x in range(1, n + 1)]\n    spies_to_watch = [x for x in spies_to_watch if x not in spies]\n    spies_to_watch = [x - 1 for x in spies_to_watch]\n    spies_to_watch = [x + 1 for x in spies_to_watch]\n    spies_to_watch = [x for x in spies_to_watch if x in range(1, n + 1)]\n    spies_to_watch = [x for x in spies_to_watch if x not in spies]\n    spies_to_watch = [x - 1 for x in spies_to_watch]\n    spies_to_watch = [x + 1 for x in spies_to_watch]\n    spies_to_watch = [x for x in spies_to_watch if x in range(1, n + 1)]\n    spies_to_watch = [x for x in spies_to_watch if x not in spies]\n    spies_to_watch = [x - 1 for x in spies_to_watch]\n    spies_to_watch = [x + 1 for x in spies_to_watch]\n    spies_to_watch = [x for x in spies_to_watch if x in range(1, n + 1)]\n    spies_to_watch = [x for x in spies_to_watch if x not in spies]\n    spies_to_watch = [x - 1 for x in spies_to_watch]\n    spies_to_watch = [x + 1 for x in spies_to_watch]\n    spies_to_watch = [x for x in spies_to_watch if x in range(1, n + 1)]\n    spies_to_watch = [x for x in spies_to_watch if x not in spies]\n    spies_to_watch = [x - 1 for x in spies_to_watch]\n    spies_to_watch = [x + 1 for x in spies_to_watch]\n    spies_to_watch = [x for x in spies_to_watch if x in range(1, n + 1)]\n    spies_to_watch = [x for x in spies_to_watch if x not in spies]\n    spies_to_watch = [x - 1 for x in spies_to_watch]\n    spies_to_watch = [x + 1 for x in spies_to_watch]\n    spies_to_watch = [x for x in spies_to_watch if x in range(1, n + 1)]\n    spies_to_watch = [x for x in spies_to_watch if x not in spies]\n    spies_to_watch = [x - 1 for x in spies_to_watch]\n    spies_to_watch = [x + 1 for x in spies_to_watch]\n    spies_to_watch = [x for x in spies_to_watch if x in range(1, n + 1)]\n    spies_to_watch = [x for x in spies_to_watch if x not in spies]\n    spies_to_watch = [x - 1 for x in spies_to_watch]\n    spies_to_watch = [x + 1 for x in spies_to_watch]\n    spies_to_watch = [x for x in spies_to_watch if x in range(1, n + 1)]\n    spies_to_watch = [x for x in spies_to_watch if x not in spies]\n    spies_to_watch = [x - 1 for x in spies_to_watch]\n    spies_to_watch = [x + 1 for x in spies_to_watch]\n    spies_to_watch = [x for x in spies_to_watch if x in range(1, n + 1)]\n    spies_to_watch = [x for x in spies_to_watch if x not in spies]\n    spies_to_watch = [x - 1 for x in spies_to_watch]\n    spies_to_watch = [x + 1 for x in spies_to_watch]\n    spies_to_watch = [x for x in spies_to_watch if x in range(1, n + 1)]\n    spies_to_watch = [x for x in spies_to_watch if x not in spies]\n    spies_to_watch = [x - 1 for x in spies_to_watch]\n    spies_to_watch = [x + 1 for x in spies_to_watch]\n    spies_to_watch = [x for"
    },
    {
        "number": 1695,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    answers = [stdin.split()[i] for i in range(n)]\n    points = [int(x) for x in stdin.split()[n:]]\n    return max(sum(points[i] for i in range(m) if answers[i] == stdin.split()[i]) for stdin in stdin.split('\\n')[1:])"
    },
    {
        "number": 1696,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    positions = [tuple(int(x) for x in stdin.split()) for _ in range(k)]\n    return '\\n'.join(str(bfs(n, m, positions)) for _ in range(k))\n\n\ndef"
    },
    {
        "number": 1697,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 1698,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    f = [int(x) for x in stdin.split()]\n    f.sort()\n    t = 0\n    for i in range(n):\n        t += abs(f[i] - f[0])\n        if t > k:\n            return str(t)\n    return str(t)"
    },
    {
        "number": 1699,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    return''.join(str(x) for x in range(1, n * m + 1, m))"
    },
    {
        "number": 1700,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    r = []\n    b = []\n    for i in range(n):\n        if s[i] == \"(\":\n            r.append(i)\n        elif s[i] == \")\":\n            if len(r) > 0:\n                r.pop()\n            else:\n                b.append(i)\n    if len(r) == 0:\n        return \"\".join([\"0\" for _ in range(n)])\n    if len(b) == 0:\n        return \"\".join([\"1\" for _ in range(n)])\n    return \"\".join([\"0\" if i in r else \"1\" for i in range(n)])"
    },
    {
        "number": 1701,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    servers = {}\n    for _ in range(n):\n        name, ip = stdin.split()\n        servers[ip] = name\n    for _ in range(m):\n        command, ip = stdin.split()\n        if command == \"block\":\n            servers[ip] = \"#\" + servers[ip]\n        elif command == \"proxy\":\n            servers[ip] = \"#\" + servers[ip]\n        elif command == \"redirect\":\n            servers[ip] = \"#\" + servers[ip]\n        elif command == \"check\":\n            servers[ip] = \"#\" + servers[ip]\n        elif command == \"unblock\":\n            servers[ip] = \"#\" + servers[ip]\n        elif command == \"cf\":\n            servers[ip] = \"#\" + servers[ip]\n        elif command == \"server\":\n            servers[ip] = \"#\" + servers[ip]\n        elif command == \"google\":\n            servers[ip] = \"#\" + servers[ip]\n        elif command == \"main\":\n            servers[ip] = \"#\" + servers[ip]\n        else:\n            servers[ip] = \"#\" + servers[ip]\n    return \"\\n\".join(servers.values())"
    },
    {
        "number": 1702,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    participants = [Participant(int(stdin.readline())) for _ in range(n)]\n    for participant in participants:\n        participant.solve_problems(int(stdin.readline()))\n    return str(participants[0].get_score() - participants[1].get_score())\n\nclass Participant:\n    def __init__(self, id: int) -> None:\n        self.id = id\n        self.problems = [0] * 5\n        self.solved_problems = [0] * 5\n        self.solved_problems_count = [0] * 5\n        self.solved_problems_ratio = [0] * 5\n        self.solved_problems_ratio_sum = [0] * 5\n        self.solved_problems_ratio_max = [0] * 5\n        self.solved_problems_ratio_min = [0] * 5\n        self.solved_problems_ratio_avg = [0] * 5\n        self.solved_problems_ratio_std = [0] * 5\n        self.solved_problems_ratio_sum_max = [0] * 5\n        self.solved_problems_ratio_sum_min = [0] * 5\n        self.solved_problems_ratio_sum_avg = [0] * 5\n        self.solved_problems_ratio_sum_std = [0] * 5\n        self.solved_problems_ratio_sum_max_min = [0] * 5\n        self.solved_problems_ratio_sum_max_min_avg = [0] * 5\n        self.solved_problems_ratio_sum_max_min_std = [0] * 5\n        self.solved_problems_ratio_sum_max_min_sum = [0] * 5\n        self.solved_problems_ratio_sum_max_min_sum_avg = [0] * 5\n        self.solved_problems_ratio_sum_max_min_sum_std = [0] * 5\n        self.solved_problems_ratio_sum_max_min_sum_max_min = [0] * 5\n        self.solved_problems_ratio_sum_max_min_sum_max_min_avg = [0] * 5\n        self.solved_problems_ratio_sum_max_min_sum_max_min_std = [0] * 5\n        self.solved_problems_ratio_sum_max_min_sum_max_min_sum_avg = [0] * 5\n        self.solved_problems_ratio_sum_max_min_sum_max_min_sum_std = ["
    },
    {
        "number": 1703,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 1704,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    board = stdin.strip()\n    board = [int(board[i:i+7], 2) for i in range(0, len(board), 7)]\n    glowing = [0] * 10\n    for i in range(n):\n        if board[i] == 0:\n            glowing[i] = 1\n    for i in range(n):\n        if board[i] == 0:\n            glowing[i] = 1\n    for i in range(n):\n        if board[i] == 0:\n            glowing[i] = 1\n    for i in range(n):\n        if board[i] == 0:\n            glowing[i] = 1\n    for i in range(n):\n        if board[i] == 0:\n            glowing[i] = 1\n    for i in range(n):\n        if board[i] == 0:\n            glowing[i] = 1\n    for i in range(n):\n        if board[i] == 0:\n            glowing[i] = 1\n    for i in range(n):\n        if board[i] == 0:\n            glowing[i] = 1\n    for i in range(n):\n        if board[i] == 0:\n            glowing[i] = 1\n    for i in range(n):\n        if board[i] == 0:\n            glowing[i] = 1\n    for i in range(n):\n        if board[i] == 0:\n            glowing[i] = 1\n    for i in range(n):\n        if board[i] == 0:\n            glowing[i] = 1\n    for i in range(n):\n        if board[i] == 0:\n            glowing[i] = 1\n    for i in range(n):\n        if board[i] == 0:\n            glowing[i] = 1\n    for i in range(n):\n        if board[i] == 0:\n            glowing[i] = 1\n    for i in range(n):\n        if board[i] == 0:\n            glowing[i] = 1\n    for i in range(n):\n        if board[i] == 0:\n            glowing[i] = 1\n    for i in range(n):\n        if board[i] == 0:\n            glowing[i] = 1\n    for i in range(n):\n        if board[i] == 0:\n            glowing[i] = 1\n    for i in range(n):\n        if board[i] == 0:\n            glowing[i] = 1\n    for i in range(n):\n        if board[i] == 0:\n            glowing[i] = 1\n    for i in range(n):\n        if board[i] == 0:\n            glowing[i] = 1\n    for i in range(n):\n        if board[i] == 0:\n            glowing[i] = 1\n    for i in range(n):\n        if board[i] == 0:\n            glowing[i] = 1\n    for i in range(n):\n        if board[i] == 0:\n            glowing[i] = 1\n    for i in range(n):\n        if board[i] == 0:\n            glowing[i] = 1\n    for i in range(n):\n        if board[i] == 0:\n            glowing[i] = 1\n    for i in range(n):\n        if board[i] == 0:\n            glowing[i] = 1\n    for i in range(n):\n        if board[i] == 0:\n            glowing[i] = 1\n    for i in range(n):\n        if board[i] == 0:\n            glowing[i] = 1\n    for i in range(n):\n        if board[i] == 0:\n            glowing[i] = 1\n    for i in range(n):\n        if board[i] == 0:\n            glowing[i] = 1\n    for i in range(n):\n        if board[i] == 0:\n            glowing[i] = 1\n    for i in range(n):\n        if board[i] == 0:\n            glowing[i] = 1\n    for i in range(n):\n        if board[i] == 0:\n            glowing[i] = 1\n    for i in range(n):\n        if board[i] == 0:\n            glowing[i] = 1\n    for i in range(n):\n        if board[i] == 0:\n            glowing[i] = 1\n    for i in range(n):\n        if board[i] == 0:\n            glowing[i] = 1\n    for i in range(n):\n        if board[i] == 0:\n            glowing[i] = 1\n    for i in range(n):\n        if board[i] == 0:\n            glowing[i] = 1\n    for i in range(n):\n        if board[i] == 0:\n            glowing[i] = 1\n    for i in range(n):\n        if board[i] == 0:\n            glowing[i] = 1\n    for i in range(n):\n        if board[i] == 0:\n            glowing[i] = 1\n    for i in range(n):\n        if board"
    },
    {
        "number": 1705,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    doors = [int(x) for x in stdin.readline().split()]\n    left = 0\n    right = n - 1\n    while left < right:\n        if doors[left] == 1:\n            left += 1\n        if doors[right] == 1:\n            right -= 1\n    return str(left)"
    },
    {
        "number": 1706,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 1707,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    choices = [int(x) for x in stdin.readline().split()]\n    choices.sort()\n    result = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if abs(choices[i] - choices[j]) % 2 == 0:\n                result += 1\n    return str(result)"
    },
    {
        "number": 1708,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    c = list(map(int, stdin.split()))\n    for _ in range(m):\n        t, d = map(int, stdin.split())\n        a[t - 1] -= d\n        if a[t - 1] < 0:\n            return '0'\n    return '\\n'.join(str(sum(c[i] * a[i] for i in range(n))) for _ in range(m))"
    },
    {
        "number": 1709,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    colors = [int(x) for x in stdin.split()]\n    paint = 0\n    for i in range(n):\n        if colors[i] == 0:\n            paint += i\n    if paint < k:\n        return str(paint)\n    return '-1'"
    },
    {
        "number": 1710,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    s = sum(a)\n    p = 1\n    for i in a:\n        p *= i\n    if p % s == k:\n        return '1'\n    else:\n        return '0'"
    },
    {
        "number": 1711,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    return str(factorial(n) // (factorial(n - 2) * factorial(2)))\n\ndef"
    },
    {
        "number": 1712,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    a.reverse()\n    vanya = 0\n    vova = 0\n    for i in range(n):\n        if i % 2 == 0:\n            vanya += a[i]\n        else:\n            vova += a[i]\n    if vanya == vova:\n        return \"Both\"\n    elif vanya > vova:\n        return \"Vanya\"\n    else:\n        return \"Vova\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 1713,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s, t = [int(x) for x in stdin.split()]\n    p = [int(x) for x in stdin.split()]\n    if s == t:\n        return '0'\n    if s > t:\n        return '-1'\n    if s == 1:\n        return str(p[t - 1])\n    if t == 1:\n        return str(p[s - 1])\n    if s == t:\n        return str(0)\n    if s == 2:\n        return str(p[t - 1])\n    if t == 2:\n        return str(p[s - 1])\n    if s == 3:\n        return str(p[t - 1])\n    if t == 3:\n        return str(p[s - 1])\n    if s == 4:\n        return str(p[t - 1])\n    if t == 4:\n        return str(p[s - 1])\n    if s == 5:\n        return str(p[t - 1])\n    if t == 5:\n        return str(p[s - 1])\n    if s == 6:\n        return str(p[t - 1])\n    if t == 6:\n        return str(p[s - 1])\n    if s == 7:\n        return str(p[t - 1])\n    if t == 7:\n        return str(p[s - 1])\n    if s == 8:\n        return str(p[t - 1])\n    if t == 8:\n        return str(p[s - 1])\n    if s == 9:\n        return str(p[t - 1])\n    if t == 9:\n        return str(p[s - 1])\n    if s == 10:\n        return str(p[t - 1])\n    if t == 10:\n        return str(p[s - 1])\n    if s == 11:\n        return str(p[t - 1])\n    if t == 11:\n        return str(p[s - 1])\n    if s == 12:\n        return str(p[t - 1])\n    if t == 12:\n        return str(p[s - 1])\n    if s == 13:\n        return str(p[t - 1])\n    if t == 13:\n        return str(p[s - 1])\n    if s == 14:\n        return str(p[t - 1])\n    if t == 14:\n        return str(p[s - 1])\n    if s == 15:\n        return str(p[t - 1])\n    if t == 15:\n        return str(p[s - 1])\n    if s == 16:\n        return str(p[t - 1])\n    if t == 16:\n        return str(p[s - 1])\n    if s == 17:\n        return str(p[t - 1])\n    if t == 17:\n        return str(p[s - 1])\n    if s == 18:\n        return str(p[t - 1])\n    if t == 18:\n        return str(p[s - 1])\n    if s == 19:\n        return str(p[t - 1])\n    if t == 19:\n        return str(p[s - 1])\n    if s == 20:\n        return str(p[t - 1])\n    if t == 20:\n        return str(p[s - 1])\n    if s == 21:\n        return str(p[t - 1])\n    if t == 21:\n        return str(p[s - 1])\n    if s == 22:\n        return str(p[t - 1])\n    if t == 22:\n        return str(p[s - 1])\n    if s == 23:\n        return str(p[t - 1])\n    if t == 23:\n        return str(p[s - 1])\n    if s == 24:\n        return str(p[t - 1])\n    if t == 24:\n        return str(p[s - 1])\n    if s == 25:\n        return str(p[t - 1])\n    if t == 25:\n        return str(p[s - 1])\n    if s == 26:\n        return str(p[t - 1])\n    if t == 26:\n        return str(p[s - 1])\n    if s == 27:\n        return str(p[t - 1])\n    if t == 27:\n        return str(p[s - 1])\n    if s == 28:\n        return str(p[t - 1])\n    if t == 28:\n        return str(p[s - 1])\n    if s == 29:\n        return str(p[t - 1])\n    if t == 29:\n        return str(p[s - 1])\n    if s == 30:\n        return str(p[t - 1])\n    if t == 30:\n        return str(p[s - 1])\n    if s == 31:\n        return str(p[t - 1])\n    if t == 31:\n        return str(p[s - 1])\n    if s == 32:\n        return str(p[t - 1])\n    if t == 32:\n        return str(p[s - 1])\n    if s == 33:\n        return str(p[t - 1])\n    if t == 33:\n        return str(p[s - 1])\n    if s == 34:\n        return str(p[t - 1])\n    if t == 34:\n        return str(p[s - 1])\n    if s == 35:\n        return str(p[t - 1])\n    if t == 35:\n        return str(p[s - 1])\n    if s == 36:\n        return str(p[t - 1])\n    if t == 36:\n        return str(p[s - 1])\n    if s == 37:\n        return str(p[t - 1])\n    if t == 37:\n        return str(p[s - 1])\n    if s == 38:\n        return str(p[t - 1])\n    if t == 38:\n        return str(p[s - 1])\n    if s == 39:\n        return str(p[t - 1])\n    if t == 39:\n        return str(p[s - 1])\n    if s == 40:\n        return str(p[t - 1])\n    if t == 40:\n        return str(p[s - 1])\n    if s == 41:\n        return str(p[t - 1])\n    if t == 41:\n        "
    },
    {
        "number": 1714,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [x for x in range(1, n + 1)]\n    for i in range(2, n + 1):\n        a[i - 1] = a[i - 1] - a[i - 2]\n    a[n - 1] = a[n - 1] - a[n - 2]\n    a[n - 2] = a[n - 2] - a[n - 1]\n    a[n - 1] = a[n - 1] + k\n    return''.join(str(x) for x in a)"
    },
    {
        "number": 1715,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, Q = [int(x) for x in stdin.split()]\n    shrine_distances = [int(x) for x in stdin.split()]\n    temple_distances = [int(x) for x in stdin.split()]\n    shrine_distances.sort()\n    temple_distances.sort()\n    shrine_distances.append(float('inf'))\n    temple_distances.append(float('inf'))\n    shrine_distances.insert(0, 0)\n    temple_distances.insert(0, 0)\n    shrine_distances.insert(0, 0)\n    temple_distances.insert(0, 0)\n    shrine_distances.insert(0, 0)\n    temple_distances.insert(0, 0)\n    shrine_distances.insert(0, 0)\n    temple_distances.insert(0, 0)\n    shrine_distances.insert(0, 0)\n    temple_distances.insert(0, 0)\n    shrine_distances.insert(0, 0)\n    temple_distances.insert(0, 0)\n    shrine_distances.insert(0, 0)\n    temple_distances.insert(0, 0)\n    shrine_distances.insert(0, 0)\n    temple_distances.insert(0, 0)\n    shrine_distances.insert(0, 0)\n    temple_distances.insert(0, 0)\n    shrine_distances.insert(0, 0)\n    temple_distances.insert(0, 0)\n    shrine_distances.insert(0, 0)\n    temple_distances.insert(0, 0)\n    shrine_distances.insert(0, 0)\n    temple_distances.insert(0, 0)\n    shrine_distances.insert(0, 0)\n    temple_distances.insert(0, 0)\n    shrine_distances.insert(0, 0)\n    temple_distances.insert(0, 0)\n    shrine_distances.insert(0, 0)\n    temple_distances.insert(0, 0)\n    shrine_distances.insert(0, 0)\n    temple_distances.insert(0, 0)\n    shrine_distances.insert(0, 0)\n    temple_distances.insert(0, 0)\n    shrine_distances.insert(0, 0)\n    temple_distances.insert(0, 0)\n    shrine_distances.insert(0, 0)\n    temple_distances.insert(0, 0)\n    shrine_distances.insert(0, 0)\n    temple_distances.insert(0, 0)\n    shrine_distances.insert(0, 0)\n    temple_distances.insert(0, 0)\n    shrine_distances.insert(0, 0)\n    temple_distances.insert(0, 0)\n    shrine_distances.insert(0, 0)\n    temple_distances.insert(0, 0)\n    shrine_distances.insert(0, 0)\n    temple_distances.insert(0, 0)\n    shrine_distances.insert(0, 0)\n    temple_distances.insert(0, 0)\n    shrine_distances.insert(0, 0)\n    temple_distances.insert(0, 0)\n    shrine_distances.insert(0, 0)\n    temple_distances.insert(0, 0)\n    shrine_distances.insert(0, 0)\n    temple_distances.insert(0, 0)\n    shrine_distances.insert(0, 0)\n    temple_distances.insert(0, 0)\n    shrine_distances.insert(0, 0)\n    temple_distances.insert(0, 0)\n    shrine_distances.insert(0, 0)\n    temple_distances.insert(0, 0)\n    shrine_distances.insert(0, 0)\n    temple_distances.insert(0, 0)\n    shrine_distances.insert(0, 0)\n    temple_distances.insert(0, 0)\n    shrine_distances.insert(0, 0)\n    temple_distances.insert(0, 0)\n    shrine_distances.insert(0, 0)\n    temple_distances.insert(0, 0)\n    shrine_distances.insert(0, 0)\n    temple_distances.insert(0, 0)\n    shrine_distances.insert(0, 0)\n    temple_distances.insert(0, 0)\n    shrine_distances.insert(0, 0)\n    temple_distances.insert(0, 0)\n    shrine_distances.insert(0, 0)\n    temple_distances.insert(0, 0)\n    shrine_distances.insert(0, 0)\n    temple_distances.insert(0, 0)\n    shrine_distances.insert(0, 0)\n    temple_distances.insert(0, 0)\n    shrine_distances.insert(0, 0)\n    temple_distances.insert(0, 0)\n    shrine_distances.insert(0, 0)\n    temple_distances.insert(0, 0)\n    shrine_distances.insert(0, 0)\n    "
    },
    {
        "number": 1716,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, Q = map(int, stdin.split())\n    L = [int(x) for x in stdin.split()]\n    R = [int(x) for x in stdin.split()]\n    C = [int(x) for x in stdin.split()]\n    C.sort()\n    L.sort()\n    R.sort()\n    C = [0] + C + [N]\n    L = [0] + L + [N]\n    R = [0] + R + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = [0] + C + [N]\n    C = ["
    },
    {
        "number": 1717,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(2, n + 1):\n        if n % i == 1:\n            return str(i)\n    return str(n)"
    },
    {
        "number": 1718,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    a.reverse()\n    count = 0\n    for i in range(k):\n        count += a[i] - i\n    return str(count)"
    },
    {
        "number": 1719,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(factorial(4)**n - factorial(4)**(n-3))\n\ndef"
    },
    {
        "number": 1720,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 1721,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[0:n]\n    if n == 1:\n        return s\n    if n == 2:\n        return s[1] + s[0]\n    if n == 3:\n        return s[2] + s[1] + s[0]\n    if n == 4:\n        return s[3] + s[2] + s[1] + s[0]\n    if n == 5:\n        return s[4] + s[3] + s[2] + s[1] + s[0]\n    if n == 6:\n        return s[5] + s[4] + s[3] + s[2] + s[1] + s[0]\n    if n == 7:\n        return s[6] + s[5] + s[4] + s[3] + s[2] + s[1] + s[0]\n    if n == 8:\n        return s[7] + s[6] + s[5] + s[4] + s[3] + s[2] + s[1] + s[0]\n    if n == 9:\n        return s[8] + s[7] + s[6] + s[5] + s[4] + s[3] + s[2] + s[1] + s[0]\n    if n == 10:\n        return s[9] + s[8] + s[7] + s[6] + s[5] + s[4] + s[3] + s[2] + s[1] + s[0]\n    if n == 11:\n        return s[10] + s[9] + s[8] + s[7] + s[6] + s[5] + s[4] + s[3] + s[2] + s[1] + s[0]\n    if n == 12:\n        return s[11] + s[10] + s[9] + s[8] + s[7] + s[6] + s[5] + s[4] + s[3] + s[2] + s[1] + s[0]\n    if n == 13:\n        return s[12] + s[11] + s[10] + s[9] + s[8] + s[7] + s[6] + s[5] + s[4] + s[3] + s[2] + s[1] + s[0]\n    if n == 14:\n        return s[13] + s[12] + s[11] + s[10] + s[9] + s[8] + s[7] + s[6] + s[5] + s[4] + s[3] + s[2] + s[1] + s[0]\n    if n == 15:\n        return s[14] + s[13] + s[12] + s[11] + s[10] + s[9] + s[8] + s[7] + s[6] + s[5] + s[4] + s[3] + s[2] + s[1] + s[0]\n    if n == 16:\n        return s[15] + s[14] + s[13] + s[12] + s[11] + s[10] + s[9] + s[8] + s[7] + s[6] + s[5] + s[4] + s[3] + s[2] + s[1] + s[0]\n    if n == 17:\n        return s[16] + s[15] + s[14] + s[13] + s[12] + s[11] + s[10] + s[9] + s[8] + s[7] + s[6] + s[5] + s[4] + s[3] + s[2] + s[1] + s[0]\n    if n == 18:\n        return s[17] + s[16] + s[15] + s[14] + s[13] + s[12] + s[11] + s[10] + s[9] + s[8] + s[7] + s[6] + s[5] + s[4] + s[3] + s[2] + s[1] + s[0]\n    if n == 19:\n        return s[18] + s[17] + s[16] + s[15] + s[14] + s[13] + s[12] + s[11] + s[10] + s[9] + s[8] + s[7] + s[6] + s[5] + s[4] + s[3] + s[2] + s[1] + s[0]\n    if n == 20:\n        return s[19] + s[18] + s[17] + s[16] + s[15] + s[14] + s[13] + s[12] + s[11] + s[10] + s[9] + s[8] + s[7] + s[6] + s[5] + s[4] + s[3] + s[2] + s[1] + s[0]\n    if n == 21:\n        return s[20] + s[19] + s[18] + s[17] + s[16] + s[15] + s[14] + s[13] + s[12] + s[11] + s[10] + s[9] + s[8] + s[7] + s[6] + s[5] + s[4] + s[3] + s[2] + s[1] + s[0]\n    if n == 22:\n        return s[21] + s[20] + s[19] + s[18] + s[17] + s[16] + s[15] + s[14] + s[13] + s[12] + s[11] + s[10] + s[9] + s[8] + s[7] + s[6] + s[5] + s[4] + s[3] + s[2] + s[1] + s[0]\n    if n == 23:\n        return s[22] + s[21] + s[20] + s[19] + s[18] + s[17] + s[16] + s[15] + s[14] + s[13] + s[12] + s[11] + s[10] + s[9] + s[8] + s[7] + s[6] + s[5] + s[4] + s[3] + s[2] + s[1] + s[0]\n    if n == 24:\n        return s[23] + s[22] + s[21] + s[20] + s[19] + s[18] + s[17] + s[16] + s[15] + s[14] + s[13] + s[12] + s[11] + s[10] + s[9] + s[8] +"
    },
    {
        "number": 1722,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    students = [stdin.readline().strip() for _ in range(n)]\n    return str(chatty_pairs(students))\n\ndef"
    },
    {
        "number": 1723,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 2 or n > 10**5:\n        return \"-1\"\n    return \"1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n4 7\\n4 8\\n1 2\\n1 3\\n2 4\\n2 5\\n2 6\\n3 7\\n6 8\"\n\ndef"
    },
    {
        "number": 1724,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    m = int(stdin.readline())\n    s = stdin.readline().strip()\n    return str(max(a[i] * int(s[i]) for i in range(n)))"
    },
    {
        "number": 1725,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = [int(x) for x in stdin.split()]\n    matrix = [list(map(int, stdin.split())) for _ in range(n)]\n    moves = 0\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j]!= d:\n                moves += abs(matrix[i][j] - d)\n                matrix[i][j] += d\n    if moves == 0:\n        return \"0\"\n    return str(moves)"
    },
    {
        "number": 1726,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    a.reverse()\n    i = 0\n    while i < n:\n        if t - a[i] >= 0:\n            t -= a[i]\n            i += 1\n        else:\n            break\n    return str(i)"
    },
    {
        "number": 1727,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    trees = [int(x) for x in stdin.readline().split()]\n    trees.sort()\n    max_trees = 0\n    for i in range(n):\n        if i == 0:\n            max_trees += 1\n        elif trees[i] - trees[i - 1] > 1:\n            max_trees += 1\n    return str(max_trees)"
    },
    {
        "number": 1728,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    edges = [tuple(map(int, line.split())) for line in stdin.readlines()]\n    colors = list(map(int, stdin.readline().split()))\n    graph = [[] for _ in range(n)]\n    for u, v in edges:\n        graph[u - 1].append(v - 1)\n        graph[v - 1].append(u - 1)\n    \n    def dfs(u, color):\n        for v in graph[u]:\n            if colors[v] == 0:\n                colors[v] = color\n                dfs(v, color)\n    \n    dfs(0, 0)\n    return str(max(colors))"
    },
    {
        "number": 1729,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = [int(x) for x in stdin.split()]\n    s = stdin[n+1:]\n    l = [int(x) for x in stdin.split()]\n    for i in range(q):\n        l, r = l[i*2], l[i*2+1]\n        print(s[l-1:r])\n    return ''"
    },
    {
        "number": 1730,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        a, b = [int(x) for x in stdin.split()]\n        graph[a - 1].append(b - 1)\n        graph[b - 1].append(a - 1)\n    \n    visited = [False] * n\n    cycle = []\n    for i in range(n):\n        if not visited[i]:\n            cycle = []\n            dfs(graph, visited, i, cycle, k)\n            if len(cycle) > 1:\n                break\n    \n    if len(cycle) == 1:\n        return str(len(cycle)) +'' +''.join(str(x + 1) for x in cycle)\n    else:\n        return '0'\n\ndef"
    },
    {
        "number": 1731,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    return str(solution_naive(n, m))\n\ndef"
    },
    {
        "number": 1732,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    l = list(map(int, stdin.readline().split()))\n    c = list(map(int, stdin.readline().split()))\n    if n == 1:\n        return str(c[0])\n    if n == 2:\n        return str(c[0] + c[1])\n    if n == 3:\n        return str(c[0] + c[1] + c[2])\n    if n == 4:\n        return str(c[0] + c[1] + c[2] + c[3])\n    if n == 5:\n        return str(c[0] + c[1] + c[2] + c[3] + c[4])\n    if n == 6:\n        return str(c[0] + c[1] + c[2] + c[3] + c[4] + c[5])\n    if n == 7:\n        return str(c[0] + c[1] + c[2] + c[3] + c[4] + c[5] + c[6])\n    if n == 8:\n        return str(c[0] + c[1] + c[2] + c[3] + c[4] + c[5] + c[6] + c[7])\n    if n == 9:\n        return str(c[0] + c[1] + c[2] + c[3] + c[4] + c[5] + c[6] + c[7] + c[8])\n    if n == 10:\n        return str(c[0] + c[1] + c[2] + c[3] + c[4] + c[5] + c[6] + c[7] + c[8] + c[9])\n    if n == 11:\n        return str(c[0] + c[1] + c[2] + c[3] + c[4] + c[5] + c[6] + c[7] + c[8] + c[9] + c[10])\n    if n == 12:\n        return str(c[0] + c[1] + c[2] + c[3] + c[4] + c[5] + c[6] + c[7] + c[8] + c[9] + c[10] + c[11])\n    if n == 13:\n        return str(c[0] + c[1] + c[2] + c[3] + c[4] + c[5] + c[6] + c[7] + c[8] + c[9] + c[10] + c[11] + c[12])\n    if n == 14:\n        return str(c[0] + c[1] + c[2] + c[3] + c[4] + c[5] + c[6] + c[7] + c[8] + c[9] + c[10] + c[11] + c[12] + c[13])\n    if n == 15:\n        return str(c[0] + c[1] + c[2] + c[3] + c[4] + c[5] + c[6] + c[7] + c[8] + c[9] + c[10] + c[11] + c[12] + c[13] + c[14])\n    if n == 16:\n        return str(c[0] + c[1] + c[2] + c[3] + c[4] + c[5] + c[6] + c[7] + c[8] + c[9] + c[10] + c[11] + c[12] + c[13] + c[14] + c[15])\n    if n == 17:\n        return str(c[0] + c[1] + c[2] + c[3] + c[4] + c[5] + c[6] + c[7] + c[8] + c[9] + c[10] + c[11] + c[12] + c[13] + c[14] + c[15] + c[16])\n    if n == 18:\n        return str(c[0] + c[1] + c[2] + c[3] + c[4] + c[5] + c[6] + c[7] + c[8] + c[9] + c[10] + c[11] + c[12] + c[13] + c[14] + c[15] + c[16] + c[17])\n    if n == 19:\n        return str(c[0] + c[1] + c[2] + c[3] + c[4] + c[5] + c[6] + c[7] + c[8] + c[9] + c[10] + c[11] + c[12] + c[13] + c[14] + c[15] + c[16] + c[17] + c[18])\n    if n == 20:\n        return str(c[0] + c[1] + c[2] + c[3] + c[4] + c[5] + c[6] + c[7] + c[8] + c[9] + c[10] + c[11] + c[12] + c[13] + c[14] + c[15] + c[16] + c[17] + c[18] + c[19])\n    if n == 21:\n        return str(c[0] + c[1] + c[2] + c[3] + c[4] + c[5] + c[6] + c[7] + c[8] + c[9] + c[10] + c[11] + c[12] + c[13] + c[14] + c[15] + c[16] + c[17] + c[18] + c[19] + c[20])\n    if n == 22:\n        return str(c[0] + c[1] + c[2] + c[3] + c[4] + c[5] + c[6] + c[7] + c[8] + c[9] + c"
    },
    {
        "number": 1733,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = [int(x) for x in stdin.split()]\n    roads = [tuple(int(x) for x in line.split()) for line in stdin.splitlines()[1:]]\n    \n    def dfs(u, v, visited, path):\n        if u == v:\n            return 1\n        if u in visited:\n            return 0\n        visited.add(u)\n        for w in roads:\n            if w[0] == u and w[1] not in visited:\n                path.append(w[1])\n                return dfs(w[1], v, visited, path)\n            if w[1] == u and w[0] not in visited:\n                path.append(w[0])\n                return dfs(w[0], v, visited, path)\n        return 0\n    \n    visited = set()\n    path = []\n    return sum(dfs(u, v, visited, path) for u, v in roads)"
    },
    {
        "number": 1734,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    numbers = [int(stdin) for stdin in stdin.split('\\n')]\n    numbers.sort()\n    for number in numbers:\n        if len(str(number)) == 9:\n            print(number)"
    },
    {
        "number": 1735,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if stdin.count(\"a\") % 2 == 0 else \"No\""
    },
    {
        "number": 1736,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    a.reverse()\n    i = 0\n    while t > 0:\n        t -= a[i]\n        i += 1\n    return i"
    },
    {
        "number": 1737,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    projects = [stdin.readline().split() for _ in range(n)]\n    dependencies = [int(stdin.readline()) for _ in range(n)]\n    projects = [tuple(p) for p in projects]\n    dependencies = [tuple(d) for d in dependencies]\n    projects = [tuple(p) for p in projects]\n    dependencies = [tuple(d) for d in dependencies]\n    projects = sorted(projects)\n    dependencies = sorted(dependencies)\n    projects = [p[0] for p in projects]\n    dependencies = [p[0] for p in dependencies]\n    projects = [p[1] for p in projects]\n    dependencies = [p[1] for p in dependencies]\n    projects = [p[0] for p in projects]\n    dependencies = [p[0] for p in dependencies]\n    projects = [p[1] for p in projects]\n    dependencies = [p[1] for p in dependencies]\n    projects = [p[0] for p in projects]\n    dependencies = [p[0] for p in dependencies]\n    projects = [p[1] for p in projects]\n    dependencies = [p[1] for p in dependencies]\n    projects = [p[0] for p in projects]\n    dependencies = [p[0] for p in dependencies]\n    projects = [p[1] for p in projects]\n    dependencies = [p[1] for p in dependencies]\n    projects = [p[0] for p in projects]\n    dependencies = [p[0] for p in dependencies]\n    projects = [p[1] for p in projects]\n    dependencies = [p[1] for p in dependencies]\n    projects = [p[0] for p in projects]\n    dependencies = [p[0] for p in dependencies]\n    projects = [p[1] for p in projects]\n    dependencies = [p[1] for p in dependencies]\n    projects = [p[0] for p in projects]\n    dependencies = [p[0] for p in dependencies]\n    projects = [p[1] for p in projects]\n    dependencies = [p[1] for p in dependencies]\n    projects = [p[0] for p in projects]\n    dependencies = [p[0] for p in dependencies]\n    projects = [p[1] for p in projects]\n    dependencies = [p[1] for p in dependencies]\n    projects = [p[0] for p in projects]\n    dependencies = [p[0] for p in dependencies]\n    projects = [p[1] for p in projects]\n    dependencies = [p[1] for p in dependencies]\n    projects = [p[0] for p in projects]\n    dependencies = [p[0] for p in dependencies]\n    projects = [p[1] for p in projects]\n    dependencies = [p[1] for p in dependencies]\n    projects = [p[0] for p in projects]\n    dependencies = [p[0] for p in dependencies]\n    projects = [p[1] for p in projects]\n    dependencies = [p[1] for p in dependencies]\n    projects = [p[0] for p in projects]\n    dependencies = [p[0] for p in dependencies]\n    projects = [p[1] for p in projects]\n    dependencies = [p[1] for p in dependencies]\n    projects = [p[0] for p in projects]\n    dependencies = [p[0] for p in dependencies]\n    projects = [p[1] for p in projects]\n    dependencies = [p[1] for p in dependencies]\n    projects = [p[0] for p in projects]\n    dependencies = [p[0] for p in dependencies]\n    projects = [p[1] for p in projects]\n    dependencies = [p[1] for p in dependencies]\n    projects = [p[0] for p in projects]\n    dependencies = [p[0] for p in dependencies]\n    projects = [p[1] for p in projects]\n    dependencies = [p[1] for p in dependencies]\n    projects = [p[0] for p in projects]\n    dependencies = [p[0] for p in dependencies]\n    projects = [p[1] for p in projects]\n    dependencies = [p[1] for p in dependencies]\n    projects = [p[0] for p in projects]\n    dependencies = [p[0] for p in dependencies]\n    projects = [p[1] for p in projects]"
    },
    {
        "number": 1738,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 1739,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    s = 1\n    for i in a:\n        s *= i\n    t = 1\n    for i in a:\n        t *= i\n    s = s // t\n    t = t // s\n    return str(s % 1000000007)"
    },
    {
        "number": 1740,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    kittens = [int(x) for x in stdin.readline().split()]\n    kittens.sort()\n    result = []\n    for i in range(1, n):\n        result.append(kittens[i - 1])\n    return''.join(str(x) for x in result)"
    },
    {
        "number": 1741,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return '-1'\n    lairs = [tuple(map(int, stdin.split())) for _ in range(n)]\n    lairs.sort(key=lambda x: x[1])\n    lairs = [l for l in lairs if l[1]!= 0]\n    if len(lairs) == 0:\n        return '-1'\n    if len(lairs) == 1:\n        return '0.5'\n    lairs.sort(key=lambda x: x[0])\n    lairs = [l for l in lairs if l[0]!= 0]\n    if len(lairs) == 0:\n        return '-1'\n    if len(lairs) == 1:\n        return '0.5'\n    lairs.sort(key=lambda x: x[1])\n    lairs = [l for l in lairs if l[0]!= 0]\n    if len(lairs) == 0:\n        return '-1'\n    if len(lairs) == 1:\n        return '0.5'\n    lairs.sort(key=lambda x: x[0])\n    lairs = [l for l in lairs if l[1]!= 0]\n    if len(lairs) == 0:\n        return '-1'\n    if len(lairs) == 1:\n        return '0.5'\n    lairs.sort(key=lambda x: x[1])\n    lairs = [l for l in lairs if l[0]!= 0]\n    if len(lairs) == 0:\n        return '-1'\n    if len(lairs) == 1:\n        return '0.5'\n    lairs.sort(key=lambda x: x[0])\n    lairs = [l for l in lairs if l[1]!= 0]\n    if len(lairs) == 0:\n        return '-1'\n    if len(lairs) == 1:\n        return '0.5'\n    lairs.sort(key=lambda x: x[0])\n    lairs = [l for l in lairs if l[1]!= 0]\n    if len(lairs) == 0:\n        return '-1'\n    if len(lairs) == 1:\n        return '0.5'\n    lairs.sort(key=lambda x: x[0])\n    lairs = [l for l in lairs if l[1]!= 0]\n    if len(lairs) == 0:\n        return '-1'\n    if len(lairs) == 1:\n        return '0.5'\n    lairs.sort(key=lambda x: x[0])\n    lairs = [l for l in lairs if l[1]!= 0]\n    if len(lairs) == 0:\n        return '-1'\n    if len(lairs) == 1:\n        return '0.5'\n    lairs.sort(key=lambda x: x[0])\n    lairs = [l for l in lairs if l[1]!= 0]\n    if len(lairs) == 0:\n        return '-1'\n    if len(lairs) == 1:\n        return '0.5'\n    lairs.sort(key=lambda x: x[0])\n    lairs = [l for l in lairs if l[1]!= 0]\n    if len(lairs) == 0:\n        return '-1'\n    if len(lairs) == 1:\n        return '0.5'\n    lairs.sort(key=lambda x: x[0])\n    lairs = [l for l in lairs if l[1]!= 0]\n    if len(lairs) == 0:\n        return '-1'\n    if len(lairs) == 1:\n        return '0.5'\n    lairs.sort(key=lambda x: x[0])\n    lairs = [l for l in lairs if l[1]!= 0]\n    if len(lairs) == 0:\n        return '-1'\n    if len(lairs) == 1:\n        return '0.5'\n    lairs.sort(key=lambda x: x[0])\n    lairs = [l for l in lairs if l[1]!= 0]\n    if len(lairs) == 0:\n        return '-1'\n    if len(lairs) == 1:\n        return '0.5'\n    lairs.sort(key=lambda x: x[0])\n    lairs = [l for l in lairs if l[1]!= 0]\n    if len(lairs) == 0:\n        return '-1'\n    if len(lairs) == 1:\n        return '0.5'\n    lairs.sort(key=lambda x: x[0])\n    lairs = [l for l in lairs if l[1]!= 0]\n    if len(lairs) == 0:\n        return '-1'\n    if len(lairs) == 1:\n        return '0.5'\n    lairs.sort(key=lambda x: x[0])\n    lairs = [l for l in lairs if l[1]!= 0]\n    if len(lairs) == 0:\n        return '-1'\n    if len(lairs) == 1:\n        return '0.5'\n    lairs.sort(key=lambda x: x[0])\n    lairs = [l for l in lairs if l[1]!= 0]\n    if len(lairs) == 0:\n        return '-1'\n    if len(lairs) == 1:\n        return '0.5'\n    lairs.sort(key=lambda x: x[0])\n    lairs = [l for l in lairs if l[1]!= 0]\n    if len(lairs) == 0:\n        return '-1'\n    if len(lairs) == 1:\n        return '0.5'\n    lairs.sort(key=lambda x: x[0])\n    lairs = [l for l in lairs if l[1]!= 0]\n    if len(lairs) == 0:"
    },
    {
        "number": 1742,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    p = [int(x) for x in stdin.split()]\n    pairs = [tuple(int(x) for x in stdin.split()) for _ in range(m)]\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    pairs = [x for x in pairs if x[0]!= x[1]]\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    pairs = [x for x in pairs if x[0]!= x[1]]\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    pairs = [x for x in pairs if x[0]!= x[1]]\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    pairs = [x for x in pairs if x[0]!= x[1]]\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    pairs = [x for x in pairs if x[0]!= x[1]]\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    pairs = [x for x in pairs if x[0]!= x[1]]\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    pairs = [x for x in pairs if x[0]!= x[1]]\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    pairs = [x for x in pairs if x[0]!= x[1]]\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    pairs = [x for x in pairs if x[0]!= x[1]]\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    pairs = [x for x in pairs if x[0]!= x[1]]\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    pairs = [x for x in pairs if x[0]!= x[1]]\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    pairs = [x for x in pairs if x[0]!= x[1]]\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    pairs = [x for x in pairs if x[0]!= x[1]]\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    pairs = [x for x in pairs if x[0]!= x[1]]\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    pairs = [x for x in pairs if x[0]!= x[1]]\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    pairs = [x for x in pairs if x[0]!= x[1]]\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    pairs = [x for x in pairs if x[0]!= x[1]]\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    pairs = [x for x in pairs if x[0]!= x[1]]\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    pairs = [x for x in pairs if x[0]!= x[1]]\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    pairs = [x for x in pairs if x[0]!= x[1]]\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    pairs = [x for x in pairs if x[0]!= x[1]]\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    pairs = [x for x in pairs if x[0]!= x[1]]\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key="
    },
    {
        "number": 1743,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    b = [int(x) for x in stdin.readline().split()]\n    c = [int(x) for x in stdin.readline().split()]\n    a.append(0)\n    b.append(0)\n    c.append(0)\n    a.insert(0, 0)\n    b.insert(0, 0)\n    c.insert(0, 0)\n    a = [0] + a\n    b = [0] + b\n    c = [0] + c\n    d = [0] * (n + 1)\n    for i in range(1, n + 1):\n        d[i] = max(a[i] + d[i - 1], b[i] + d[i - 1], c[i] + d[i - 1])\n    return str(d[n])\n"
    },
    {
        "number": 1744,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    t = list(map(int, stdin.split()))\n    t.sort()\n    t.reverse()\n    ans = [0] * n\n    for i in range(n):\n        ans[i] = t.index(m - t[i])\n    return''.join(map(str, ans))"
    },
    {
        "number": 1745,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 1746,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    parents = [int(x) for x in stdin.readline().split()]\n    if n == 1:\n        return \"Yes\"\n    if n == 2:\n        return \"No\"\n    if n == 3:\n        return \"Yes\"\n    if n == 4:\n        return \"No\"\n    if n == 5:\n        return \"Yes\"\n    if n == 6:\n        return \"No\"\n    if n == 7:\n        return \"Yes\"\n    if n == 8:\n        return \"No\"\n    if n == 9:\n        return \"Yes\"\n    if n == 10:\n        return \"No\"\n    if n == 11:\n        return \"Yes\"\n    if n == 12:\n        return \"No\"\n    if n == 13:\n        return \"Yes\"\n    if n == 14:\n        return \"No\"\n    if n == 15:\n        return \"Yes\"\n    if n == 16:\n        return \"No\"\n    if n == 17:\n        return \"Yes\"\n    if n == 18:\n        return \"No\"\n    if n == 19:\n        return \"Yes\"\n    if n == 20:\n        return \"No\"\n    if n == 21:\n        return \"Yes\"\n    if n == 22:\n        return \"No\"\n    if n == 23:\n        return \"Yes\"\n    if n == 24:\n        return \"No\"\n    if n == 25:\n        return \"Yes\"\n    if n == 26:\n        return \"No\"\n    if n == 27:\n        return \"Yes\"\n    if n == 28:\n        return \"No\"\n    if n == 29:\n        return \"Yes\"\n    if n == 30:\n        return \"No\"\n    if n == 31:\n        return \"Yes\"\n    if n == 32:\n        return \"No\"\n    if n == 33:\n        return \"Yes\"\n    if n == 34:\n        return \"No\"\n    if n == 35:\n        return \"Yes\"\n    if n == 36:\n        return \"No\"\n    if n == 37:\n        return \"Yes\"\n    if n == 38:\n        return \"No\"\n    if n == 39:\n        return \"Yes\"\n    if n == 40:\n        return \"No\"\n    if n == 41:\n        return \"Yes\"\n    if n == 42:\n        return \"No\"\n    if n == 43:\n        return \"Yes\"\n    if n == 44:\n        return \"No\"\n    if n == 45:\n        return \"Yes\"\n    if n == 46:\n        return \"No\"\n    if n == 47:\n        return \"Yes\"\n    if n == 48:\n        return \"No\"\n    if n == 49:\n        return \"Yes\"\n    if n == 50:\n        return \"No\"\n    if n == 51:\n        return \"Yes\"\n    if n == 52:\n        return \"No\"\n    if n == 53:\n        return \"Yes\"\n    if n == 54:\n        return \"No\"\n    if n == 55:\n        return \"Yes\"\n    if n == 56:\n        return \"No\"\n    if n == 57:\n        return \"Yes\"\n    if n == 58:\n        return \"No\"\n    if n == 59:\n        return \"Yes\"\n    if n == 60:\n        return \"No\"\n    if n == 61:\n        return \"Yes\"\n    if n == 62:\n        return \"No\"\n    if n == 63:\n        return \"Yes\"\n    if n == 64:\n        return \"No\"\n    if n == 65:\n        return \"Yes\"\n    if n == 66:\n        return \"No\"\n    if n == 67:\n        return \"Yes\"\n    if n == 68:\n        return \"No\"\n    if n == 69:\n        return \"Yes\"\n    if n == 70:\n        return \"No\"\n    if n == 71:\n        return \"Yes\"\n    if n == 72:\n        return \"No\"\n    if n == 73:\n        return \"Yes\"\n    if n == 74:\n        return \"No\"\n    if n == 75:\n        return \"Yes\"\n    if n == 76:\n        return \"No\"\n    if n == 77:\n        return \"Yes\"\n    if n == 78:\n        return \"No\"\n    if n == 79:\n        return \"Yes\"\n    if n == 80:\n        return \"No\"\n    if n == 81:\n        return \"Yes\"\n    if n == 82:\n        return \"No\"\n    if n == 83:\n        return \"Yes\"\n    if n == 84:\n        return \"No\"\n    if n == 85:\n        return \"Yes\"\n    if n == 86:\n        return \"No\"\n    if n == 87:\n        return \"Yes\"\n    if n == 88:\n        return \"No\"\n    if n == 89:\n        return \"Yes\"\n    if n == 90:\n        return \"No\"\n    if n == 91:\n        return \"Yes\"\n    if n == 92:\n        return \"No\"\n    if n == 93:\n        return \"Yes\"\n    if n == 94:\n        return \"No\"\n    if n == 95:\n        return \"Yes\"\n    if n == 96:\n        return \"No\"\n    if n == 97:\n        return \"Yes\"\n    if n == 98:\n        return \"No\"\n    if n == 99:\n        return \"Yes\"\n    if n == 100:\n        return \"No\"\n    if n == 101:\n        return \"Yes\"\n    if n == 102:\n        return \"No\"\n    if n == 103:\n        return \"Yes\"\n    if n == 104:\n        return \"No\"\n    if n == 105:\n        return \"Yes\"\n    if n == 106:\n        return \"No\"\n    if n == 107:\n        return \"Yes\"\n    if n == 108:\n        return \"No\"\n    if n == 109:\n        return \"Yes\"\n    if n == 110:\n        return \"No\"\n    if n == 111:\n        return \"Yes\"\n    if n == 112:\n        return \"No\"\n    if n == 113:\n        return \"Yes\"\n    if n == 114:\n        return \"No\"\n    if n == 115:\n        return \"Yes\"\n    if n == 116:\n        return \"No\"\n    if n == 117:\n        return \"Yes\"\n    if n == 118:\n        return \"No\"\n    if n == 119:\n        return \"Yes\"\n    if n == 120:\n        return \"No\"\n    if n == 121:\n        return \"Yes\"\n    if n == 122:\n        return \"No\"\n    if n == 123:\n        return \"Yes\"\n    if n == 124:\n        return \"No\"\n    if n == 125:\n        return \"Yes\""
    },
    {
        "number": 1747,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    l, r = 0, 0\n    for i in range(n):\n        if a[i]!= i + 1:\n            if i - l + 1 > k:\n                l = i\n            r = i\n    return str(l + 1) +'' + str(r + 1)\n"
    },
    {
        "number": 1748,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    snow_piles = [int(x) for x in stdin.readline().split()]\n    temperatures = [int(x) for x in stdin.readline().split()]\n    snow_piles_and_temperatures = zip(snow_piles, temperatures)\n    snow_piles_and_temperatures.sort(key=lambda x: x[1], reverse=True)\n    snow_piles_and_temperatures = [x[0] for x in snow_piles_and_temperatures]\n    snow_piles_and_temperatures.append(0)\n    snow_piles_and_temperatures.insert(0, 0)\n    snow_piles_and_temperatures.append(0)\n    snow_piles_and_temperatures.insert(0, 0)\n    snow_piles_and_temperatures.append(0)\n    snow_piles_and_temperatures.insert(0, 0)\n    snow_piles_and_temperatures.append(0)\n    snow_piles_and_temperatures.insert(0, 0)\n    snow_piles_and_temperatures.append(0)\n    snow_piles_and_temperatures.insert(0, 0)\n    snow_piles_and_temperatures.append(0)\n    snow_piles_and_temperatures.insert(0, 0)\n    snow_piles_and_temperatures.append(0)\n    snow_piles_and_temperatures.insert(0, 0)\n    snow_piles_and_temperatures.append(0)\n    snow_piles_and_temperatures.insert(0, 0)\n    snow_piles_and_temperatures.append(0)\n    snow_piles_and_temperatures.insert(0, 0)\n    snow_piles_and_temperatures.append(0)\n    snow_piles_and_temperatures.insert(0, 0)\n    snow_piles_and_temperatures.append(0)\n    snow_piles_and_temperatures.insert(0, 0)\n    snow_piles_and_temperatures.append(0)\n    snow_piles_and_temperatures.insert(0, 0)\n    snow_piles_and_temperatures.append(0)\n    snow_piles_and_temperatures.insert(0, 0)\n    snow_piles_and_temperatures.append(0)\n    snow_piles_and_temperatures.insert(0, 0)\n    snow_piles_and_temperatures.append(0)\n    snow_piles_and_temperatures.insert(0, 0)\n    snow_piles_and_temperatures.append(0)\n    snow_piles_and_temperatures.insert(0, 0)\n    snow_piles_and_temperatures.append(0)\n    snow_piles_and_temperatures.insert(0, 0)\n    snow_piles_and_temperatures.append(0)\n    snow_piles_and_temperatures.insert(0, 0)\n    snow_piles_and_temperatures.append(0)\n    snow_piles_and_temperatures.insert(0, 0)\n    snow_piles_and_temperatures.append(0)\n    snow_piles_and_temperatures.insert(0, 0)\n    snow_piles_and_temperatures.append(0)\n    snow_piles_and_temperatures.insert(0, 0)\n    snow_piles_and_temperatures.append(0)\n    snow_piles_and_temperatures.insert(0, 0)\n    snow_piles_and_temperatures.append(0)\n    snow_piles_and_temperatures.insert(0, 0)\n    snow_piles_and_temperatures.append(0)\n    snow_piles_and_temperatures.insert(0, 0)\n    snow_piles_and_temperatures.append(0)\n    snow_piles_and_temperatures.insert(0, 0)\n    snow_piles_and_temperatures.append(0)\n    snow_piles_and_temperatures.insert(0, 0)\n    snow_piles_and_temperatures.append(0)\n    snow_piles_and_temperatures.insert(0, 0)\n    snow_piles_and_temperatures.append(0)\n    snow_piles_and_temperatures.insert(0, 0)\n    snow_piles_and_temperatures.append(0)\n    snow_piles_and_temperatures.insert(0, 0)\n    snow_piles_and_temperatures.append(0)\n    snow_piles_and_temperatures.insert(0, 0)\n    snow_piles_and_temperatures.append(0)\n    snow_piles_and_temperatures.insert(0, 0)\n    snow_piles_and_temperatures.append(0)\n    snow_piles_and_temperatures.insert(0, 0)\n    snow_piles_and_temperatures.append(0)\n    snow_piles_and_temperatures.insert(0, 0)\n    snow_piles_and_temperatures.append(0)\n    snow_piles_and_temperatures.insert(0, 0)\n    snow_piles_and_temperatures.append(0)\n    snow_piles_and_temperatures.insert(0, 0)\n    snow_piles_and"
    },
    {
        "number": 1749,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, l, r = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    b = [int(x) for x in stdin.split()]\n    if l > r:\n        return \"TRUTH\"\n    if a == b:\n        return \"TRUTH\"\n    if a[l-1]!= b[l-1]:\n        return \"TRUTH\"\n    for i in range(l, r+1):\n        if a[i-1]!= b[i-1]:\n            return \"TRUTH\"\n    return \"LIE\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 1750,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    graph = [[] for _ in range(n)]\n    for _ in range(n - 1):\n        x, y = map(int, stdin.readline().split())\n        graph[x - 1].append(y - 1)\n        graph[y - 1].append(x - 1)\n    \n    colors = [0] * n\n    for i in range(n):\n        colors[i] = i + 1\n        for j in graph[i]:\n            colors[i] = min(colors[i], colors[j])\n    \n    return str(colors.count(n))\n\nprint(solution(''))\n"
    },
    {
        "number": 1751,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(cyclic_permutations(n))\n\ndef"
    },
    {
        "number": 1752,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    res = [0] * n\n    for i in range(n):\n        res[i] = a[i]\n        for j in range(i + 1, n):\n            res[j] = max(res[j], a[i] + a[j])\n    return''.join(map(str, res))"
    },
    {
        "number": 1753,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    colors = [int(x) for x in stdin.split()]\n    pairs = [tuple(int(x) for x in stdin.split()) for _ in range(m)]\n    colors = list(range(1, n + 1))\n    pairs = list(itertools.combinations(colors, 2))\n    pairs = list(itertools.combinations(pairs, 2))\n    pairs = list(itertools.combinations(pairs, 2))\n    pairs = list(itertools.combinations(pairs, 2))\n    pairs = list(itertools.combinations(pairs, 2))\n    pairs = list(itertools.combinations(pairs, 2))\n    pairs = list(itertools.combinations(pairs, 2))\n    pairs = list(itertools.combinations(pairs, 2))\n    pairs = list(itertools.combinations(pairs, 2))\n    pairs = list(itertools.combinations(pairs, 2))\n    pairs = list(itertools.combinations(pairs, 2))\n    pairs = list(itertools.combinations(pairs, 2))\n    pairs = list(itertools.combinations(pairs, 2))\n    pairs = list(itertools.combinations(pairs, 2))\n    pairs = list(itertools.combinations(pairs, 2))\n    pairs = list(itertools.combinations(pairs, 2))\n    pairs = list(itertools.combinations(pairs, 2))\n    pairs = list(itertools.combinations(pairs, 2))\n    pairs = list(itertools.combinations(pairs, 2))\n    pairs = list(itertools.combinations(pairs, 2))\n    pairs = list(itertools.combinations(pairs, 2))\n    pairs = list(itertools.combinations(pairs, 2))\n    pairs = list(itertools.combinations(pairs, 2))\n    pairs = list(itertools.combinations(pairs, 2))\n    pairs = list(itertools.combinations(pairs, 2))\n    pairs = list(itertools.combinations(pairs, 2))\n    pairs = list(itertools.combinations(pairs, 2))\n    pairs = list(itertools.combinations(pairs, 2))\n    pairs = list(itertools.combinations(pairs, 2))\n    pairs = list(itertools.combinations(pairs, 2))\n    pairs = list(itertools.combinations(pairs, 2))\n    pairs = list(itertools.combinations(pairs, 2))\n    pairs = list(itertools.combinations(pairs, 2))\n    pairs = list(itertools.combinations(pairs, 2))\n    pairs = list(itertools.combinations(pairs, 2))\n    pairs = list(itertools.combinations(pairs, 2))\n    pairs = list(itertools.combinations(pairs, 2))\n    pairs = list(itertools.combinations(pairs, 2))\n    pairs = list(itertools.combinations(pairs, 2))\n    pairs = list(itertools.combinations(pairs, 2))\n    pairs = list(itertools.combinations(pairs, 2))\n    pairs = list(itertools.combinations(pairs, 2))\n    pairs = list(itertools.combinations(pairs, 2))\n    pairs = list(itertools.combinations(pairs, 2))\n    pairs = list(itertools.combinations(pairs, 2))\n    pairs = list(itertools.combinations(pairs, 2))\n    pairs = list(itertools.combinations(pairs, 2))\n    pairs = list(itertools.combinations(pairs, 2))\n    pairs = list(itertools.combinations(pairs, 2))\n    pairs = list(itertools.combinations(pairs, 2))\n    pairs = list(itertools.combinations(pairs, 2))\n    pairs = list(itertools.combinations(pairs, 2"
    },
    {
        "number": 1754,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    powers = list(map(int, stdin.split()))\n    schools = list(map(int, stdin.split()))\n    chosen_ones = list(map(int, stdin.split()))\n    return str(min(n, k))"
    },
    {
        "number": 1755,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = set(map(int, stdin.split())) if k else set()\n    if n < 2:\n        return '-1'\n    if n == 2:\n        if a[0] < a[1]:\n            return '0'\n        else:\n            return '-1'\n    if n == 3:\n        if a[0] < a[1] < a[2]:\n            return '0'\n        else:\n            return '-1'\n    if n == 4:\n        if a[0] < a[1] < a[2] < a[3]:\n            return '0'\n        else:\n            return '-1'\n    if n == 5:\n        if a[0] < a[1] < a[2] < a[3] < a[4]:\n            return '0'\n        else:\n            return '-1'\n    if n == 6:\n        if a[0] < a[1] < a[2] < a[3] < a[4] < a[5]:\n            return '0'\n        else:\n            return '-1'\n    if n == 7:\n        if a[0] < a[1] < a[2] < a[3] < a[4] < a[5] < a[6]:\n            return '0'\n        else:\n            return '-1'\n    if n == 8:\n        if a[0] < a[1] < a[2] < a[3] < a[4] < a[5] < a[6] < a[7]:\n            return '0'\n        else:\n            return '-1'\n    if n == 9:\n        if a[0] < a[1] < a[2] < a[3] < a[4] < a[5] < a[6] < a[7] < a[8]:\n            return '0'\n        else:\n            return '-1'\n    if n == 10:\n        if a[0] < a[1] < a[2] < a[3] < a[4] < a[5] < a[6] < a[7] < a[8] < a[9]:\n            return '0'\n        else:\n            return '-1'\n    if n == 11:\n        if a[0] < a[1] < a[2] < a[3] < a[4] < a[5] < a[6] < a[7] < a[8] < a[9] < a[10]:\n            return '0'\n        else:\n            return '-1'\n    if n == 12:\n        if a[0] < a[1] < a[2] < a[3] < a[4] < a[5] < a[6] < a[7] < a[8] < a[9] < a[10] < a[11]:\n            return '0'\n        else:\n            return '-1'\n    if n == 13:\n        if a[0] < a[1] < a[2] < a[3] < a[4] < a[5] < a[6] < a[7] < a[8] < a[9] < a[10] < a[11] < a[12]:\n            return '0'\n        else:\n            return '-1'\n    if n == 14:\n        if a[0] < a[1] < a[2] < a[3] < a[4] < a[5] < a[6] < a[7] < a[8] < a[9] < a[10] < a[11] < a[12] < a[13]:\n            return '0'\n        else:\n            return '-1'\n    if n == 15:\n        if a[0] < a[1] < a[2] < a[3] < a[4] < a[5] < a[6] < a[7] < a[8] < a[9] < a[10] < a[11] < a[12] < a[13] < a[14]:\n            return '0'\n        else:\n            return '-1'\n    if n == 16:\n        if a[0] < a[1] < a[2] < a[3] < a[4] < a[5] < a[6] < a[7] < a[8] < a[9] < a[10] < a[11] < a[12] < a[13] < a[14] < a[15]:\n            return '0'\n        else:\n            return '-1'\n    if n == 17:\n        if a[0] < a[1] < a[2] < a[3] < a[4] < a[5] < a[6] < a[7] < a[8] < a[9] < a[10] < a[11] < a[12] < a[13] < a[14] < a[15] < a[16]:\n            return '0'\n        else:\n            return '-1'\n    if n == 18:\n        if a[0] < a[1] < a[2] < a[3] < a[4] < a[5] < a[6] < a[7] < a[8] < a[9] < a[10] < a[11] < a[12] < a[13] < a[14] < a[15] < a[16] < a[17]:\n            return '0'\n        else:\n            return '-1'\n    if n == 19:\n        if a[0] < a[1] < a[2] < a[3] < a[4] < a[5] < a[6] < a[7] < a[8] < a[9] < a[10] < a[11] < a[12] < a[13] < a[14] < a[15] < a[16] < a[17] < a[18]:\n            return '0'\n        else:\n            return '-1'\n    if n == 20:\n        if a[0] < a[1] < a[2] < a[3] < a[4] < a[5] < a[6] < a[7] < a[8] < a[9] < a[10] < a[11] < a[12] < a[13] < a"
    },
    {
        "number": 1756,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = [int(x) for x in stdin.split()]\n    days = [int(x) for x in stdin.split()]\n    months = [0] * n\n    for i in range(n):\n        months[i] = days[i] * (i + 1)\n    months.sort()\n    hugs = 0\n    for i in range(n):\n        hugs += months[i]\n        if hugs >= x:\n            return str(i + 1)\n    return str(n)"
    },
    {
        "number": 1757,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"O\"\n    elif n == 2:\n        return \"o\"\n    else:\n        fib = [1, 1]\n        while len(fib) < n:\n            fib.append(fib[-1] + fib[-2])\n        return \"\".join([\"O\" if i in fib else \"o\" for i in range(1, n + 1)])"
    },
    {
        "number": 1758,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n    if s == t:\n        return 0\n    if s == t[::-1]:\n        return 0\n    if s == t[::-1][1:]:\n        return 0\n    if s == t[::-1][2:]:\n        return 0\n    if s == t[::-1][3:]:\n        return 0\n    if s == t[::-1][4:]:\n        return 0\n    if s == t[::-1][5:]:\n        return 0\n    if s == t[::-1][6:]:\n        return 0\n    if s == t[::-1][7:]:\n        return 0\n    if s == t[::-1][8:]:\n        return 0\n    if s == t[::-1][9:]:\n        return 0\n    if s == t[::-1][10:]:\n        return 0\n    if s == t[::-1][11:]:\n        return 0\n    if s == t[::-1][12:]:\n        return 0\n    if s == t[::-1][13:]:\n        return 0\n    if s == t[::-1][14:]:\n        return 0\n    if s == t[::-1][15:]:\n        return 0\n    if s == t[::-1][16:]:\n        return 0\n    if s == t[::-1][17:]:\n        return 0\n    if s == t[::-1][18:]:\n        return 0\n    if s == t[::-1][19:]:\n        return 0\n    if s == t[::-1][20:]:\n        return 0\n    if s == t[::-1][21:]:\n        return 0\n    if s == t[::-1][22:]:\n        return 0\n    if s == t[::-1][23:]:\n        return 0\n    if s == t[::-1][24:]:\n        return 0\n    if s == t[::-1][25:]:\n        return 0\n    if s == t[::-1][26:]:\n        return 0\n    if s == t[::-1][27:]:\n        return 0\n    if s == t[::-1][28:]:\n        return 0\n    if s == t[::-1][29:]:\n        return 0\n    if s == t[::-1][30:]:\n        return 0\n    if s == t[::-1][31:]:\n        return 0\n    if s == t[::-1][32:]:\n        return 0\n    if s == t[::-1][33:]:\n        return 0\n    if s == t[::-1][34:]:\n        return 0\n    if s == t[::-1][35:]:\n        return 0\n    if s == t[::-1][36:]:\n        return 0\n    if s == t[::-1][37:]:\n        return 0\n    if s == t[::-1][38:]:\n        return 0\n    if s == t[::-1][39:]:\n        return 0\n    if s == t[::-1][40:]:\n        return 0\n    if s == t[::-1][41:]:\n        return 0\n    if s == t[::-1][42:]:\n        return 0\n    if s == t[::-1][43:]:\n        return 0\n    if s == t[::-1][44:]:\n        return 0\n    if s == t[::-1][45:]:\n        return 0\n    if s == t[::-1][46:]:\n        return 0\n    if s == t[::-1][47:]:\n        return 0\n    if s == t[::-1][48:]:\n        return 0\n    if s == t[::-1][49:]:\n        return 0\n    if s == t[::-1][50:]:\n        return 0\n    if s == t[::-1][51:]:\n        return 0\n    if s == t[::-1][52:]:\n        return 0\n    if s == t[::-1][53:]:\n        return 0\n    if s == t[::-1][54:]:\n        return 0\n    if s == t[::-1][55:]:\n        return 0\n    if s == t[::-1][56:]:\n        return 0\n    if s == t[::-1][57:]:\n        return 0\n    if s == t[::-1][58:]:\n        return 0\n    if s == t[::-1][59:]:\n        return 0\n    if s == t[::-1][60:]:\n        return 0\n    if s == t[::-1][61:]:\n        return 0\n    if s == t[::-1][62:]:\n        return 0\n    if s == t[::-1][63:]:\n        return 0\n    if s == t[::-1][64:]:\n        return 0\n    if s == t[::-1][65:]:\n        return 0\n    if s == t[::-1][66:]:\n        return 0\n    if s == t[::-1][67:]:\n        return 0\n    if s == t[::-1][68:]:\n        return 0\n    if s == t[::-1][69:]:\n        return 0\n    if s == t[::-1][70:]:\n        return 0\n    if s == t[::-1][71:]:\n        return 0\n    if s == t[::-1][72:]:\n        return 0\n    if s == t[::-1][73:]:\n        return 0\n    if s == t[::-1][74:]:\n        return 0\n    if s == t[::-1][75:]:\n        return 0\n    if s == t[::-1][76:]:\n        return 0\n    if s == t[::-1]["
    },
    {
        "number": 1759,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, n = [int(x) for x in stdin.split()]\n    pictures = [int(x) for x in stdin.split()]\n    painters = [0] * n\n    for i in range(m):\n        for j in range(n):\n            painters[j] += pictures[i]\n            painters[j] += j + 1\n    return''.join(map(str, painters))"
    },
    {
        "number": 1760,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    direction = stdin.readline().strip()\n    stairs = [0] * n\n    for i in range(n):\n        stairs[i] = int(stdin.readline())\n    stairs.reverse()\n    stairs.append(0)\n    stairs.reverse()\n    stairs.append(0)\n    stairs.reverse()\n    stairs.append(0)\n    stairs.reverse()\n    stairs.append(0)\n    stairs.reverse()\n    stairs.append(0)\n    stairs.reverse()\n    stairs.append(0)\n    stairs.reverse()\n    stairs.append(0)\n    stairs.reverse()\n    stairs.append(0)\n    stairs.reverse()\n    stairs.append(0)\n    stairs.reverse()\n    stairs.append(0)\n    stairs.reverse()\n    stairs.append(0)\n    stairs.reverse()\n    stairs.append(0)\n    stairs.reverse()\n    stairs.append(0)\n    stairs.reverse()\n    stairs.append(0)\n    stairs.reverse()\n    stairs.append(0)\n    stairs.reverse()\n    stairs.append(0)\n    stairs.reverse()\n    stairs.append(0)\n    stairs.reverse()\n    stairs.append(0)\n    stairs.reverse()\n    stairs.append(0)\n    stairs.reverse()\n    stairs.append(0)\n    stairs.reverse()\n    stairs.append(0)\n    stairs.reverse()\n    stairs.append(0)\n    stairs.reverse()\n    stairs.append(0)\n    stairs.reverse()\n    stairs.append(0)\n    stairs.reverse()\n    stairs.append(0)\n    stairs.reverse()\n    stairs.append(0)\n    stairs.reverse()\n    stairs.append(0)\n    stairs.reverse()\n    stairs.append(0)\n    stairs.reverse()\n    stairs.append(0)\n    stairs.reverse()\n    stairs.append(0)\n    stairs.reverse()\n    stairs.append(0)\n    stairs.reverse()\n    stairs.append(0)\n    stairs.reverse()\n    stairs.append(0)\n    stairs.reverse()\n    stairs.append(0)\n    stairs.reverse()\n    stairs.append(0)\n    stairs.reverse()\n    stairs.append(0)\n    stairs.reverse()\n    stairs.append(0)\n    stairs.reverse()\n    stairs.append(0)\n    stairs.reverse()\n    stairs.append(0)\n    stairs.reverse()\n    stairs.append(0)\n    stairs.reverse()\n    stairs.append(0)\n    stairs.reverse()\n    stairs.append(0)\n    stairs.reverse()\n    stairs.append(0)\n    stairs.reverse()\n    stairs.append(0)\n    stairs.reverse()\n    stairs.append(0)\n    stairs.reverse()\n    stairs.append(0)\n    stairs.reverse()\n    stairs.append(0)\n    stairs.reverse()\n    stairs.append(0)\n    stairs.reverse()\n    stairs.append(0)\n    stairs.reverse()\n    stairs.append(0)\n    stairs.reverse()\n    stairs.append(0)\n    stairs.reverse()\n    stairs.append(0)\n    stairs.reverse()\n    stairs.append(0)\n    stairs.reverse()\n    stairs.append(0)\n    stairs.reverse()\n    stairs.append(0)\n    stairs.reverse()\n    stairs.append(0)\n    stairs.reverse()\n    stairs.append(0)\n    stairs.reverse()\n    stairs.append(0)\n    stairs.reverse()\n    stairs.append(0)\n    stairs.reverse()\n    stairs.append(0)\n    stairs.reverse()\n    stairs.append(0)\n    stairs.reverse()\n    stairs.append(0)\n    stairs.reverse()\n    stairs.append(0)\n    stairs.reverse()\n    stairs.append(0)\n    stairs.reverse()\n    stairs.append(0)\n    stairs.reverse()\n    stairs.append(0)\n    stairs.reverse()\n    stairs.append(0)\n    stairs.reverse()\n    stairs.append(0)\n    stairs.reverse()\n    stairs.append(0)\n    stairs.reverse()\n    stairs.append(0)\n    stairs.reverse()\n    stairs.append(0)\n    stairs.reverse()\n    stairs.append(0)\n    stairs.reverse()\n    stairs.append(0)\n    stairs.reverse()\n    stairs.append(0)\n    stairs.reverse()\n    stairs.append(0)\n    stairs.reverse()\n    stairs.append(0)\n    stairs.reverse()\n    stairs.append(0)\n    stairs.reverse()\n    stairs.append(0)\n    stairs.reverse()\n    stairs.append(0)\n    stairs.reverse()\n    stairs.append(0)\n    stairs.reverse()\n    stairs.append(0)\n    stairs.reverse()\n    stairs.append(0)\n    stairs.reverse()\n    stairs.append(0)\n    stairs.reverse()\n    stairs.append(0)\n    stairs.reverse()\n    stairs.append(0)\n    stairs.reverse()\n    stairs.append(0)\n    stairs.reverse()\n    stairs.append(0)\n    stairs.reverse()\n    stairs.append(0)\n    stairs.reverse()\n    stairs.append(0)\n    stairs.reverse()\n    stairs.append(0)\n    stairs.reverse()\n    stairs.append(0)\n    stairs.reverse()\n    stairs.append(0)\n    stairs.reverse()\n    stairs.append(0)\n    stairs.reverse()\n    stairs.append(0)\n    stairs.reverse()\n    stairs.append(0)\n    stairs.reverse()\n    stairs.append(0)\n    stairs.reverse()\n    stairs.append(0)\n    stairs.reverse()\n    stairs.append(0)\n    stairs.reverse()\n    stairs.append(0)\n    stairs.reverse()\n    stairs.append(0)\n    stairs.reverse()\n    stairs.append(0)\n    stairs.reverse()\n    stairs."
    },
    {
        "number": 1761,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"yes\" if is_correct(stdin) else \"no\"\n\ndef"
    },
    {
        "number": 1762,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    videos = [int(x) for x in stdin.split()]\n    videos.sort()\n    servers = [0] * k\n    for i in range(n):\n        servers[i % k] += videos[i]\n    servers.sort()\n    result = []\n    for i in range(n):\n        result.append(servers[i] + i)\n    return''.join(str(x) for x in result)"
    },
    {
        "number": 1763,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, A, R, M = map(int, stdin.split())\n    h = list(map(int, stdin.split()))\n    h.sort()\n    cost = 0\n    for i in range(N):\n        if h[i] == 0:\n            continue\n        if i == 0:\n            cost += A * h[i]\n        elif h[i] == h[i - 1]:\n            cost += A * h[i]\n        else:\n            cost += R * h[i]\n    return str(cost)"
    },
    {
        "number": 1764,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    a.sort()\n    k = 0\n    for i in range(n):\n        if a[i] == 1:\n            k += 1\n        elif a[i] == 2:\n            k += 2\n    print(k)\n    for i in range(n):\n        if a[i] == 1:\n            print(i + 1, i + 1)\n        elif a[i] == 2:\n            print(i + 1, i + 2)\n"
    },
    {
        "number": 1765,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    k = 0\n    for i in range(n):\n        if a[i] % 2 == 0:\n            k += 1\n    print(k)\n    b = []\n    for i in range(n):\n        if a[i] % 2 == 0:\n            b.append(a[i])\n    print(*b)\n    return \"\""
    },
    {
        "number": 1766,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    cards = [int(x) for x in stdin.readline().split()]\n    return str(max(sum(cards[:n]), sum(cards[n:])))"
    },
    {
        "number": 1767,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    return str(max(sum(a[i] for i in range(l, r + 1)) + sum(b[i] for i in range(l, r + 1)) for l in range(n) for r in range(n)))"
    },
    {
        "number": 1768,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[1:n+1]\n    q = int(stdin[n+2:])\n    plans = []\n    for _ in range(q):\n        m, c = stdin.split()\n        m = int(m)\n        plans.append((m, c))\n    plans.sort(key=lambda x: x[0], reverse=True)\n    koyomity = 0\n    for m, c in plans:\n        koyomity = max(koyomity, m)\n    return str(koyomity)"
    },
    {
        "number": 1769,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A = int(stdin.readline().strip())\n    B = int(stdin.readline().strip())\n    return''.join(str(i) for i in range(1, A + B + 1))\n\nassert(solution('''0\n1''') == '1')\nassert(solution('''1\n1''') == '1 3')\nassert(solution('''2\n1''') == '1 3 4 2')\nassert(solution('''3\n1''') == '1 3 4 2')\nassert(solution('''4\n1''') == '1 3 4 2')\nassert(solution('''5\n1''') == '1 3 4 2')\nassert(solution('''6\n1''') == '1 3 4 2')\nassert(solution('''7\n1''') == '1 3 4 2')\nassert(solution('''8\n1''') == '1 3 4 2')\nassert(solution('''9\n1''') == '1 3 4 2')\nassert(solution('''10\n1''') == '1 3 4 2')\nassert(solution('''11\n1''') == '1 3 4 2')\nassert(solution('''12\n1''') == '1 3 4 2')\nassert(solution('''13\n1''') == '1 3 4 2')\nassert(solution('''14\n1''') == '1 3 4 2')\nassert(solution('''15\n1''') == '1 3 4 2')\nassert(solution('''16\n1''') == '1 3 4 2')\nassert(solution('''17\n1''') == '1 3 4 2')\nassert(solution('''18\n1''') == '1 3 4 2')\nassert(solution('''19\n1''') == '1 3 4 2')\nassert(solution('''20\n1''') == '1 3 4 2')\nassert(solution('''21\n1''') == '1 3 4 2')\nassert(solution('''22\n1''') == '1 3 4 2')\nassert(solution('''23\n1''') == '1 3 4 2')\nassert(solution('''24\n1''') == '1 3 4 2')\nassert(solution('''25\n1''') == '1 3 4 2')\nassert(solution('''26\n1''') == '1 3 4 2')\nassert(solution('''27\n1''') == '1 3 4 2')\nassert(solution('''28\n1''') == '1 3 4 2')\nassert(solution('''29\n1''') == '1 3 4 2')\nassert(solution('''30\n1''') == '1 3 4 2')\nassert(solution('''31\n1''') == '1 3 4 2')\nassert(solution('''32\n1''') == '1 3 4 2')\nassert(solution('''33\n1''') == '1 3 4 2')\nassert(solution('''34\n1''') == '1 3 4 2')\nassert(solution('''35\n1''') == '1 3 4 2')\nassert(solution('''36\n1''') == '1 3 4 2')\nassert(solution('''37\n1''') == '1 3 4 2')\nassert(solution('''38\n1''') == '1 3 4 2')\nassert(solution('''39\n1''') == '1 3 4 2')\nassert(solution('''40\n1''') == '1 3 4 2')\nassert(solution('''41\n1''') == '1 3 4 2')\nassert(solution('''42\n1''') == '1 3 4 2')\nassert(solution('''43\n1''') == '1 3 4 2')\nassert(solution('''44\n1''') == '1 3 4 2')\nassert(solution('''45\n1''') == '1 3 4 2')\nassert(solution('''46\n1''') == '1 3 4 2')\nassert(solution('''47\n1''') == '1 3 4 2')\nassert(solution('''48\n1''') == '1 3 4 2')\nassert(solution('''49\n1''') == '1 3 4 2')\nassert(solution('''50\n1''') == '1 3 4 2')\nassert(solution('''51\n1''') == '1 3 4 2')\nassert(solution('''52\n1''') == '1 3 4 2')\nassert(solution('''53\n1''') == '1 3 4 2')\nassert(solution('''54\n1''') == '1 3 4 2')\nassert(solution('''55\n1''') == '1 3 4 2')\nassert(solution('''56\n1''') == '1 3 4 2')\nassert(solution('''57\n1''') == '1 3 4 2')\nassert(solution('''58\n1''') == '1 3 4 2')\nassert(solution('''59\n1''') == '1 3 4 2')\nassert(solution('''60\n1''') == '1 3 4 2')\nassert(solution('''61\n1''') == '1 3 4 2')\nassert(solution('''62\n1''') == '1 3 4 2')\nassert(solution('''63\n1''') == '1 3 4 2')\nassert(solution('''64\n1''') == '1 3 4 2')\nassert(solution('''65\n1''') == '1 3 4 2')\nassert(solution('''66\n1''') == '1 3 4 2')\nassert(solution('''67\n1''') == '1 3 4 2')\nassert(solution('''68\n1''') == '1 3 4 2')\nassert(solution('''69\n1''') == '1 3 4 2')\nassert(solution('''70\n1''') == '1 3 4 2')\nassert(solution('''71\n1''') == '1 3 4 2')\nassert(solution('''72\n1''') == '1 3 4 2')\nassert(solution('''73\n1''') == '1 3 4 2')\nassert(solution('''74\n1''') == '1 3 4 2')\nassert(solution('''75\n1''') == '1 3 4 2')\nassert(solution('''76\n1''') == '1 3 4 2')\nassert(solution('''77\n1''') == '1 3 4 2')\nassert(solution('''78\n1''') == '1 3 4 2')\nassert(solution('''79\n1''') == '1 3 4 2')\nassert(solution('''80\n1''') == '1 3 4 2')\nassert(solution('''81\n1''') == '1 3 4 2')\nassert(solution('''82\n1''') == '1 3 4 2')\nassert(solution('''83\n1''') == '1"
    },
    {
        "number": 1770,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y, d = map(int, stdin.split())\n    if x == y:\n        return '0'\n    if x > y:\n        x, y = y, x\n    if x == 1:\n        return str(d)\n    if y == n:\n        return str(d - (n - 1) * (n - 2) // 2)\n    if y == 1:\n        return str(d - (n - 1) * (n - 2) // 2)\n    if y == n - 1:\n        return str(d - (n - 1) * (n - 2) // 2)\n    if y == n - 2:\n        return str(d - (n - 1) * (n - 2) // 2)\n    if y == n - 3:\n        return str(d - (n - 1) * (n - 2) // 2)\n    if y == n - 4:\n        return str(d - (n - 1) * (n - 2) // 2)\n    if y == n - 5:\n        return str(d - (n - 1) * (n - 2) // 2)\n    if y == n - 6:\n        return str(d - (n - 1) * (n - 2) // 2)\n    if y == n - 7:\n        return str(d - (n - 1) * (n - 2) // 2)\n    if y == n - 8:\n        return str(d - (n - 1) * (n - 2) // 2)\n    if y == n - 9:\n        return str(d - (n - 1) * (n - 2) // 2)\n    if y == n - 10:\n        return str(d - (n - 1) * (n - 2) // 2)\n    if y == n - 11:\n        return str(d - (n - 1) * (n - 2) // 2)\n    if y == n - 12:\n        return str(d - (n - 1) * (n - 2) // 2)\n    if y == n - 13:\n        return str(d - (n - 1) * (n - 2) // 2)\n    if y == n - 14:\n        return str(d - (n - 1) * (n - 2) // 2)\n    if y == n - 15:\n        return str(d - (n - 1) * (n - 2) // 2)\n    if y == n - 16:\n        return str(d - (n - 1) * (n - 2) // 2)\n    if y == n - 17:\n        return str(d - (n - 1) * (n - 2) // 2)\n    if y == n - 18:\n        return str(d - (n - 1) * (n - 2) // 2)\n    if y == n - 19:\n        return str(d - (n - 1) * (n - 2) // 2)\n    if y == n - 20:\n        return str(d - (n - 1) * (n - 2) // 2)\n    if y == n - 21:\n        return str(d - (n - 1) * (n - 2) // 2)\n    if y == n - 22:\n        return str(d - (n - 1) * (n - 2) // 2)\n    if y == n - 23:\n        return str(d - (n - 1) * (n - 2) // 2)\n    if y == n - 24:\n        return str(d - (n - 1) * (n - 2) // 2)\n    if y == n - 25:\n        return str(d - (n - 1) * (n - 2) // 2)\n    if y == n - 26:\n        return str(d - (n - 1) * (n - 2) // 2)\n    if y == n - 27:\n        return str(d - (n - 1) * (n - 2) // 2)\n    if y == n - 28:\n        return str(d - (n - 1) * (n - 2) // 2)\n    if y == n - 29:\n        return str(d - (n - 1) * (n - 2) // 2)\n    if y == n - 30:\n        return str(d - (n - 1) * (n - 2) // 2)\n    if y == n - 31:\n        return str(d - (n - 1) * (n - 2) // 2)\n    if y == n - 32:\n        return str(d - (n - 1) * (n - 2) // 2)\n    if y == n - 33:\n        return str(d - (n - 1) * (n - 2) // 2)\n    if y == n - 34:\n        return str(d - (n - 1) * (n - 2) // 2)\n    if y == n - 35:\n        return str(d - (n - 1) * (n - 2) // 2)\n    if y == n - 36:\n        return str(d - (n - 1) * (n - 2) // 2)\n    if y == n - 37:\n        return str(d - (n - 1) * (n - 2) // 2)\n    if y == n - 38:\n        return str(d - (n - 1) * (n - 2) // 2)\n    if y == n - 39:\n        return str(d - (n - 1) * (n - 2) // 2)\n    if y == n - 40:\n        return str(d - (n - 1) * (n - 2) // 2)\n    if y == n - 41:\n        return str(d - (n - 1) * (n - 2) // 2)\n    if y == n - 42:\n        return str(d - (n - 1) * (n - 2) // 2)\n    if y == n - 43:\n        return str(d - (n - 1) * (n - 2) // 2)\n    if y == n - 44:\n        return str(d - (n - 1) * (n - 2) // 2)\n    if y == n - 45:\n        return str(d - (n - 1) * (n - 2) // 2)\n    if y == n - 46:\n        return str(d - (n - 1) * (n - 2) // 2)\n    if y == n - 47:\n        return str(d - (n - 1) * (n - 2) // 2)\n    if y == n - 48:\n        return str(d - (n - 1) * (n -"
    },
    {
        "number": 1771,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, l, w_max = [int(x) for x in stdin.split()]\n    clouds = [tuple(int(x) for x in stdin.split()) for _ in range(n)]\n    clouds.sort(key=lambda x: x[0])\n    clouds.sort(key=lambda x: x[1])\n    clouds.sort(key=lambda x: x[0] - x[1])\n    clouds.sort(key=lambda x: x[0] + l)\n    clouds.sort(key=lambda x: x[1] + l)\n    clouds.sort(key=lambda x: x[0] - x[1])\n    clouds.sort(key=lambda x: x[0] + l)\n    clouds.sort(key=lambda x: x[1] - l)\n    clouds.sort(key=lambda x: x[1] + l)\n    clouds.sort(key=lambda x: x[0] - x[1])\n    clouds.sort(key=lambda x: x[0] + l)\n    clouds.sort(key=lambda x: x[1] - l)\n    clouds.sort(key=lambda x: x[1] + l)\n    clouds.sort(key=lambda x: x[0] - x[1])\n    clouds.sort(key=lambda x: x[0] + l)\n    clouds.sort(key=lambda x: x[1] - l)\n    clouds.sort(key=lambda x: x[1] + l)\n    clouds.sort(key=lambda x: x[0] - x[1])\n    clouds.sort(key=lambda x: x[0] + l)\n    clouds.sort(key=lambda x: x[1] - l)\n    clouds.sort(key=lambda x: x[1] + l)\n    clouds.sort(key=lambda x: x[0] - x[1])\n    clouds.sort(key=lambda x: x[0] + l)\n    clouds.sort(key=lambda x: x[1] - l)\n    clouds.sort(key=lambda x: x[1] + l)\n    clouds.sort(key=lambda x: x[0] - x[1])\n    clouds.sort(key=lambda x: x[0] + l)\n    clouds.sort(key=lambda x: x[1] - l)\n    clouds.sort(key=lambda x: x[1] + l)\n    clouds.sort(key=lambda x: x[0] - x[1])\n    clouds.sort(key=lambda x: x[0] + l)\n    clouds.sort(key=lambda x: x[1] - l)\n    clouds.sort(key=lambda x: x[1] + l)\n    clouds.sort(key=lambda x: x[0] - x[1])\n    clouds.sort(key=lambda x: x[0] + l)\n    clouds.sort(key=lambda x: x[1] - l)\n    clouds.sort(key=lambda x: x[1] + l)\n    clouds.sort(key=lambda x: x[0] - x[1])\n    clouds.sort(key=lambda x: x[0] + l)\n    clouds.sort(key=lambda x: x[1] - l)\n    clouds.sort(key=lambda x: x[1] + l)\n    clouds.sort(key=lambda x: x[0] - x[1])\n    clouds.sort(key=lambda x: x[0] + l)\n    clouds.sort(key=lambda x: x[1] - l)\n    clouds.sort(key=lambda x: x[1] + l)\n    clouds.sort(key=lambda x: x[0] - x[1])\n    clouds.sort(key=lambda x: x[0] + l)\n    clouds.sort(key=lambda x: x[1] - l)\n    clouds.sort(key=lambda x: x[1] + l)\n    clouds.sort(key=lambda x: x[0] - x[1])\n    clouds.sort(key=lambda x: x[0] + l)\n    clouds.sort(key=lambda x: x[1]"
    },
    {
        "number": 1772,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    a.reverse()\n    if n % 2 == 0:\n        return 0\n    else:\n        return 1"
    },
    {
        "number": 1773,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    trees = [int(x) for x in stdin.readline().split()]\n    trees.sort()\n    trees.reverse()\n    trees.append(0)\n    trees.sort()\n    trees.reverse()\n    trees.append(0)\n    trees.sort()\n    trees.reverse()\n    trees.append(0)\n    trees.sort()\n    trees.reverse()\n    trees.append(0)\n    trees.sort()\n    trees.reverse()\n    trees.append(0)\n    trees.sort()\n    trees.reverse()\n    trees.append(0)\n    trees.sort()\n    trees.reverse()\n    trees.append(0)\n    trees.sort()\n    trees.reverse()\n    trees.append(0)\n    trees.sort()\n    trees.reverse()\n    trees.append(0)\n    trees.sort()\n    trees.reverse()\n    trees.append(0)\n    trees.sort()\n    trees.reverse()\n    trees.append(0)\n    trees.sort()\n    trees.reverse()\n    trees.append(0)\n    trees.sort()\n    trees.reverse()\n    trees.append(0)\n    trees.sort()\n    trees.reverse()\n    trees.append(0)\n    trees.sort()\n    trees.reverse()\n    trees.append(0)\n    trees.sort()\n    trees.reverse()\n    trees.append(0)\n    trees.sort()\n    trees.reverse()\n    trees.append(0)\n    trees.sort()\n    trees.reverse()\n    trees.append(0)\n    trees.sort()\n    trees.reverse()\n    trees.append(0)\n    trees.sort()\n    trees.reverse()\n    trees.append(0)\n    trees.sort()\n    trees.reverse()\n    trees.append(0)\n    trees.sort()\n    trees.reverse()\n    trees.append(0)\n    trees.sort()\n    trees.reverse()\n    trees.append(0)\n    trees.sort()\n    trees.reverse()\n    trees.append(0)\n    trees.sort()\n    trees.reverse()\n    trees.append(0)\n    trees.sort()\n    trees.reverse()\n    trees.append(0)\n    trees.sort()\n    trees.reverse()\n    trees.append(0)\n    trees.sort()\n    trees.reverse()\n    trees.append(0)\n    trees.sort()\n    trees.reverse()\n    trees.append(0)\n    trees.sort()\n    trees.reverse()\n    trees.append(0)\n    trees.sort()\n    trees.reverse()\n    trees.append(0)\n    trees.sort()\n    trees.reverse()\n    trees.append(0)\n    trees.sort()\n    trees.reverse()\n    trees.append(0)\n    trees.sort()\n    trees.reverse()\n    trees.append(0)\n    trees.sort()\n    trees.reverse()\n    trees.append(0)\n    trees.sort()\n    trees.reverse()\n    trees.append(0)\n    trees.sort()\n    trees.reverse()\n    trees.append(0)\n    trees.sort()\n    trees.reverse()\n    trees.append(0)\n    trees.sort()\n    trees.reverse()\n    trees.append(0)\n    trees.sort()\n    trees.reverse()\n    trees.append(0)\n    trees.sort()\n    trees.reverse()\n    trees.append(0)\n    trees.sort()\n    trees.reverse()\n    trees.append(0)\n    trees.sort()\n    trees.reverse()\n    trees.append(0)\n    trees.sort()\n    trees.reverse()\n    trees.append(0)\n    trees.sort()\n    trees.reverse()\n    trees.append(0)\n    trees.sort()\n    trees.reverse()\n    trees.append(0)\n    trees.sort()\n    trees.reverse()\n    trees.append(0)\n    trees.sort()\n    trees.reverse()\n    trees.append(0)\n    trees.sort()\n    trees.reverse()\n    trees.append(0)\n    trees.sort()\n    trees.reverse()\n    trees.append(0)\n    trees.sort()\n    trees.reverse()\n    trees.append(0)\n    trees.sort()\n    trees.reverse()\n    trees.append(0)\n    trees.sort()\n    trees.reverse()\n    trees.append(0)\n    trees.sort()\n    trees.reverse()\n    trees.append(0)\n    trees.sort()\n    trees.reverse()\n    trees.append(0)\n    trees.sort()\n    trees.reverse()\n    trees.append(0)\n    trees.sort()\n    trees.reverse()\n    trees.append(0)\n    trees.sort()\n    trees.reverse()\n    trees.append(0)\n    trees.sort()\n    trees.reverse()\n    trees.append(0)\n    trees.sort()\n    trees.reverse()\n    trees.append(0)\n    trees.sort()\n    trees.reverse()\n    trees.append(0)\n    trees.sort()\n    trees.reverse()\n    trees.append(0)\n    trees."
    },
    {
        "number": 1774,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if stdin.count(\"H\") == stdin.count(\"Q\") else \"No\"\n\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 1775,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    details = [int(x) for x in stdin.split()]\n    droids = [details[i:i+m] for i in range(0, len(details), m)]\n    droids.sort(key=lambda x: sum(x))\n    print(droids)\n    return ''"
    },
    {
        "number": 1776,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(solve(stdin))\n\ndef"
    },
    {
        "number": 1777,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 1778,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    a_score = 0\n    b_score = 0\n    for i in range(n):\n        if a[i] > b[i]:\n            a_score += a[i] - b[i]\n        elif a[i] < b[i]:\n            b_score += b[i] - a[i]\n    return str(a_score - b_score)"
    },
    {
        "number": 1779,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    first_layout = stdin[:26]\n    second_layout = stdin[26:]\n    text = stdin[27:]\n    first_layout_dict = {}\n    second_layout_dict = {}\n    for i in range(26):\n        first_layout_dict[first_layout[i]] = i\n        second_layout_dict[second_layout[i]] = i\n    text_dict = {}\n    for i in range(len(text)):\n        if text[i].isalpha():\n            text_dict[text[i]] = i\n    for key in text_dict:\n        if key.isupper():\n            if second_layout_dict[key] == first_layout_dict[key.lower()]:\n                print(text[text_dict[key]], end=\"\")\n        else:\n            if second_layout_dict[key] == first_layout_dict[key]:\n                print(text[text_dict[key]], end=\"\")"
    },
    {
        "number": 1780,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    for _ in range(m):\n        l, r = [int(x) for x in stdin.split()]\n        if sum(a[l - 1:r]) == 0:\n            print(1)\n        else:\n            print(0)\n    return \"\""
    },
    {
        "number": 1782,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    if k > n:\n        return \"-1\"\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"1 1\"\n    if n == 3:\n        return \"1 1 1\"\n    if n == 4:\n        return \"1 1 1 1\"\n    if n == 5:\n        return \"1 1 1 1 1\"\n    if n == 6:\n        return \"1 1 1 1 1 1\"\n    if n == 7:\n        return \"1 1 1 1 1 1 1\"\n    if n == 8:\n        return \"1 1 1 1 1 1 1 1\"\n    if n == 9:\n        return \"1 1 1 1 1 1 1 1 1\"\n    if n == 10:\n        return \"1 1 1 1 1 1 1 1 1 1\"\n    if n == 11:\n        return \"1 1 1 1 1 1 1 1 1 1 1\"\n    if n == 12:\n        return \"1 1 1 1 1 1 1 1 1 1 1 1\"\n    if n == 13:\n        return \"1 1 1 1 1 1 1 1 1 1 1 1 1 1\"\n    if n == 14:\n        return \"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\"\n    if n == 15:\n        return \"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\"\n    if n == 16:\n        return \"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\"\n    if n == 17:\n        return \"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\"\n    if n == 18:\n        return
    },
    {
        "number": 1783,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    return str(sum(a[i] for i in range(n - k + 1)) / (n - k + 1))"
    },
    {
        "number": 1784,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    pebbles = [int(x) for x in stdin.split()]\n    if n < 2 or k < 2:\n        return \"NO\"\n    if n == 2:\n        if k == 2:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if k == 2:\n        if pebbles[0] == pebbles[1]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if k == n:\n        return \"YES\"\n    if k > n:\n        return \"NO\"\n    colors = [0] * k\n    for i in range(n):\n        for j in range(k):\n            if colors[j] == 0:\n                colors[j] = pebbles[i]\n                break\n    for i in range(n):\n        for j in range(k):\n            if colors[j]!= pebbles[i]:\n                if abs(colors[j] - pebbles[i]) > 1:\n                    return \"NO\"\n    return \"YES\""
    },
    {
        "number": 1785,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    s = s + s\n    max_value = 0\n    for i in range(n):\n        value = 0\n        for j in range(n):\n            if s[i + j] == s[i]:\n                value += 1\n        if value > max_value:\n            max_value = value\n    return str(max_value)"
    },
    {
        "number": 1786,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    w, h, n = [int(x) for x in stdin.split()]\n    cuts = [x.split() for x in stdin.splitlines()]\n    cuts = [[int(x[0]), int(x[1])] for x in cuts]\n    cuts.sort(key=lambda x: x[0] * x[1])\n    cuts.sort(key=lambda x: x[1], reverse=True)\n    cuts.sort(key=lambda x: x[0], reverse=True)\n    cuts.sort(key=lambda x: x[1], reverse=True)\n    cuts.sort(key=lambda x: x[0] * x[1], reverse=True)\n    cuts.sort(key=lambda x: x[1], reverse=True)\n    cuts.sort(key=lambda x: x[0], reverse=True)\n    cuts.sort(key=lambda x: x[1], reverse=True)\n    cuts.sort(key=lambda x: x[0] * x[1], reverse=True)\n    cuts.sort(key=lambda x: x[1], reverse=True)\n    cuts.sort(key=lambda x: x[0], reverse=True)\n    cuts.sort(key=lambda x: x[1], reverse=True)\n    cuts.sort(key=lambda x: x[0] * x[1], reverse=True)\n    cuts.sort(key=lambda x: x[1], reverse=True)\n    cuts.sort(key=lambda x: x[0], reverse=True)\n    cuts.sort(key=lambda x: x[1], reverse=True)\n    cuts.sort(key=lambda x: x[0] * x[1], reverse=True)\n    cuts.sort(key=lambda x: x[1], reverse=True)\n    cuts.sort(key=lambda x: x[0], reverse=True)\n    cuts.sort(key=lambda x: x[1], reverse=True)\n    cuts.sort(key=lambda x: x[0] * x[1], reverse=True)\n    cuts.sort(key=lambda x: x[1], reverse=True)\n    cuts.sort(key=lambda x: x[0], reverse=True)\n    cuts.sort(key=lambda x: x[1], reverse=True)\n    cuts.sort(key=lambda x: x[0] * x[1], reverse=True)\n    cuts.sort(key=lambda x: x[1], reverse=True)\n    cuts.sort(key=lambda x: x[0], reverse=True)\n    cuts.sort(key=lambda x: x[1], reverse=True)\n    cuts.sort(key=lambda x: x[0] * x[1], reverse=True)\n    cuts.sort(key=lambda x: x[1], reverse=True)\n    cuts.sort(key=lambda x: x[0], reverse=True)\n    cuts.sort(key=lambda x: x[1], reverse=True)\n    cuts.sort(key=lambda x: x[0] * x[1], reverse=True)\n    cuts.sort(key=lambda x: x[1], reverse=True)\n    cuts.sort(key=lambda x: x[0], reverse=True)\n    cuts.sort(key=lambda x: x[1], reverse=True)\n    cuts.sort(key=lambda x: x[0] * x[1], reverse=True)\n    cuts.sort(key=lambda x: x[1], reverse=True)\n    cuts.sort(key=lambda x: x[0], reverse=True)\n    cuts.sort(key=lambda x: x[1], reverse=True)\n    cuts.sort(key=lambda x: x[0] * x[1], reverse=True)\n    cuts.sort(key=lambda x: x[1], reverse=True)\n    cuts.sort(key=lambda x: x[0], reverse=True)\n    cuts.sort(key=lambda x: x[1], reverse=True)\n    cuts.sort(key=lambda x: x[0] * x[1], reverse=True)\n    cuts.sort(key=lambda x: x[1], reverse=True)\n    cuts.sort(key=lambda x: x[0], reverse=True)\n    cuts.sort(key=lambda x: x[1], reverse=True)\n    cuts.sort(key=lambda x: x[0] * x[1], reverse=True)\n    cuts.sort(key=lambda x: x[1], reverse=True)\n    cuts.sort(key=lambda x: x[0], reverse=True)\n    cuts.sort(key=lambda x: x[1], reverse=True)\n    cuts.sort(key=lambda x: x[0] * x[1], reverse=True)\n    cuts.sort(key=lambda x: x[1], reverse=True)\n    cuts.sort(key=lambda x: x[0], reverse=True)\n    cuts.sort(key=lambda x: x[1], reverse=True)\n    cuts.sort(key=lambda x: x[0] * x[1], reverse=True)\n    cuts.sort(key=lambda x: x[1], reverse=True)\n    cuts.sort(key=lambda x: x[0], reverse=True)\n    cuts.sort(key=lambda x: x[1], reverse=True)\n    cuts.sort(key=lambda x: x[0] * x[1], reverse=True)\n    cuts.sort(key=lambda x: x[1], reverse=True)\n    cuts.sort(key=lambda x: x[0], reverse=True)\n    cuts.sort(key=lambda x: x[1], reverse=True)\n    cuts.sort(key=lambda x: x[0] * x[1], reverse=True)\n    cuts.sort(key=lambda x: x[1], reverse=True)\n    cuts.sort(key=lambda x: x[0], reverse=True)\n    cuts.sort(key=lambda x: x[1], reverse=True)\n    cuts.sort(key=lambda x: x[0] * x[1], reverse=True)\n    cuts.sort(key=lambda x: x[1], reverse=True)\n    cuts.sort(key=lambda x: x[0], reverse=True)\n    cuts.sort(key=lambda x: x[1], reverse=True)\n    cuts.sort(key=lambda x: x[0] * x[1], reverse=True)\n    cuts.sort(key=lambda"
    },
    {
        "number": 1787,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(stdin) - len(stdin.rstrip('a')) + 1)"
    },
    {
        "number": 1788,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return f'{a - b} {a + b}'"
    },
    {
        "number": 1789,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x, y = [int(x) for x in stdin.split()]\n    return str(min(x, y) + abs(a - b) * min(x, y) + abs(a - b) * min(x, y))"
    },
    {
        "number": 1790,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    lines = [int(x) for x in stdin.readline().split()]\n    lines.sort()\n    tram_lines = set()\n    for i in range(n):\n        for j in range(i + 1, n):\n            if lines[i] + 1 == lines[j]:\n                tram_lines.add(lines[i])\n    return''.join(str(x) for x in sorted(tram_lines))"
    },
    {
        "number": 1791,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 1792,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = defaultdict(list)\n    for _ in range(m):\n        u, v = map(int, stdin.split())\n        graph[u].append(v)\n        graph[v].append(u)\n    s, b, k, h = map(int, stdin.split())\n    spaceships = [map(int, stdin.split()) for _ in range(s)]\n    bases = [map(int, stdin.split()) for _ in range(b)]\n    return str(solution_helper(graph, spaceships, bases, k, h))\n\ndef"
    },
    {
        "number": 1793,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, L, S = map(int, stdin.split())\n    w = list(map(int, stdin.split()))\n    p = list(map(int, stdin.split()))\n    if sum(w) > S:\n        return -1\n    if n == 1:\n        return 1\n    if n == 2:\n        if w[0] + w[1] <= S:\n            return 2\n        else:\n            return -1\n    if n == 3:\n        if w[0] + w[1] + w[2] <= S:\n            return 3\n        else:\n            return -1\n    if n == 4:\n        if w[0] + w[1] + w[2] + w[3] <= S:\n            return 4\n        else:\n            return -1\n    if n == 5:\n        if w[0] + w[1] + w[2] + w[3] + w[4] <= S:\n            return 5\n        else:\n            return -1\n    if n == 6:\n        if w[0] + w[1] + w[2] + w[3] + w[4] + w[5] <= S:\n            return 6\n        else:\n            return -1\n    if n == 7:\n        if w[0] + w[1] + w[2] + w[3] + w[4] + w[5] + w[6] <= S:\n            return 7\n        else:\n            return -1\n    if n == 8:\n        if w[0] + w[1] + w[2] + w[3] + w[4] + w[5] + w[6] + w[7] <= S:\n            return 8\n        else:\n            return -1\n    if n == 9:\n        if w[0] + w[1] + w[2] + w[3] + w[4] + w[5] + w[6] + w[7] + w[8] <= S:\n            return 9\n        else:\n            return -1\n    if n == 10:\n        if w[0] + w[1] + w[2] + w[3] + w[4] + w[5] + w[6] + w[7] + w[8] + w[9] <= S:\n            return 10\n        else:\n            return -1\n    if n == 11:\n        if w[0] + w[1] + w[2] + w[3] + w[4] + w[5] + w[6] + w[7] + w[8] + w[9] + w[10] <= S:\n            return 11\n        else:\n            return -1\n    if n == 12:\n        if w[0] + w[1] + w[2] + w[3] + w[4] + w[5] + w[6] + w[7] + w[8] + w[9] + w[10] + w[11] <= S:\n            return 12\n        else:\n            return -1\n    if n == 13:\n        if w[0] + w[1] + w[2] + w[3] + w[4] + w[5] + w[6] + w[7] + w[8] + w[9] + w[10] + w[11] + w[12] <= S:\n            return 13\n        else:\n            return -1\n    if n == 14:\n        if w[0] + w[1] + w[2] + w[3] + w[4] + w[5] + w[6] + w[7] + w[8] + w[9] + w[10] + w[11] + w[12] + w[13] <= S:\n            return 14\n        else:\n            return -1\n    if n == 15:\n        if w[0] + w[1] + w[2] + w[3] + w[4] + w[5] + w[6] + w[7] + w[8] + w[9] + w[10] + w[11] + w[12] + w[13] + w[14] <= S:\n            return 15\n        else:\n            return -1\n    if n == 16:\n        if w[0] + w[1] + w[2] + w[3] + w[4] + w[5] + w[6] + w[7] + w[8] + w[9] + w[10] + w[11] + w[12] + w[13] + w[14] + w[15] <= S:\n            return 16\n        else:\n            return -1\n    if n == 17:\n        if w[0] + w[1] + w[2] + w[3] + w[4] + w[5] + w[6] + w[7] + w[8] + w[9] + w[10] + w[11] + w[12] + w[13] + w[14] + w[15] + w[16] <= S:\n            return 17\n        else:\n            return -1\n    if n == 18:\n        if w[0] + w[1] + w[2] + w[3] + w[4] + w[5] + w[6] + w[7] + w[8] + w[9] + w[10] + w[11] + w[12] + w[13] + w[14] + w[15] + w[16] + w[17] <= S:\n            return 18\n        else:\n            return -1\n    if n == 19:\n        if w[0] + w[1] + w[2] + w[3] + w[4] + w[5] + w[6] + w[7] + w[8] + w[9] + w[10] + w[11] + w[12] + w[13] + w[14] + w[15] + w[16] + w[17] + w[18] <= S:\n            return 19\n        else:\n            return -1\n    if n == 20:\n        if w[0] + w[1] + w[2] + w[3] + w[4] + w[5] + w[6] + w[7] +"
    },
    {
        "number": 1794,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    s = 0\n    for i in range(n):\n        s += a[i] - i\n    return str(s)\n\nassert(solution('''4\n4 4 4\n''') == '6')\nassert(solution('''5\n2 3 5 5\n''') == '17')\nassert(solution('''5\n2 3 5 5\n''') == '17')\nassert(solution('''5\n2 3 5 5\n''') == '17')\nassert(solution('''5\n2 3 5 5\n''') == '17')\nassert(solution('''5\n2 3 5 5\n''') == '17')\nassert(solution('''5\n2 3 5 5\n''') == '17')\nassert(solution('''5\n2 3 5 5\n''') == '17')\nassert(solution('''5\n2 3 5 5\n''') == '17')\nassert(solution('''5\n2 3 5 5\n''') == '17')\nassert(solution('''5\n2 3 5 5\n''') == '17')\nassert(solution('''5\n2 3 5 5\n''') == '17')\nassert(solution('''5\n2 3 5 5\n''') == '17')\nassert(solution('''5\n2 3 5 5\n''') == '17')\nassert(solution('''5\n2 3 5 5\n''') == '17')\nassert(solution('''5\n2 3 5 5\n''') == '17')\nassert(solution('''5\n2 3 5 5\n''') == '17')\nassert(solution('''5\n2 3 5 5\n''') == '17')\nassert(solution('''5\n2 3 5 5\n''') == '17')\nassert(solution('''5\n2 3 5 5\n''') == '17')\nassert(solution('''5\n2 3 5 5\n''') == '17')\nassert(solution('''5\n2 3 5 5\n''') == '17')\nassert(solution('''5\n2 3 5 5\n''') == '17')\nassert(solution('''5\n2 3 5 5\n''') == '17')\nassert(solution('''5\n2 3 5 5\n''') == '17')\nassert(solution('''5\n2 3 5 5\n''') == '17')\nassert(solution('''5\n2 3 5 5\n''') == '17')\nassert(solution('''5\n2 3 5 5\n''') == '17')\nassert(solution('''5\n2 3 5 5\n''') == '17')\nassert(solution('''5\n2 3 5 5\n''') == '17')\nassert(solution('''5\n2 3 5 5\n''') == '17')\nassert(solution('''5\n2 3 5 5\n''') == '17')\nassert(solution('''5\n2 3 5 5\n''') == '17')\nassert(solution('''5\n2 3 5 5\n''') == '17')\nassert(solution('''5\n2 3 5 5\n''') == '17')\nassert(solution('''5\n2 3 5 5\n''') == '17')\nassert(solution('''5\n2 3 5 5\n''') == '17')\nassert(solution('''5\n2 3 5 5\n''') == '17')\nassert(solution('''5\n2 3 5 5\n''') == '17')\nassert(solution('''5\n2 3 5 5\n''') == '17')\nassert(solution('''5\n2 3 5 5\n''') == '17')\nassert(solution('''5\n2 3 5 5\n''') == '17')\nassert(solution('''5\n2 3 5 5\n''') == '17')\nassert(solution('''5\n2 3 5 5\n''') == '17')\nassert(solution('''5\n2 3 5 5\n''') == '17')\nassert(solution('''5\n2 3 5 5\n''') == '17')\nassert(solution('''5\n2 3 5 5\n''') == '17')\nassert(solution('''5\n2 3 5 5\n''') == '17')\nassert(solution('''5\n2 3 5 5\n''') == '17')\nassert(solution('''5\n2 3 5 5\n''') == '17')\nassert(solution('''5\n2 3 5 5\n''') == '17')\nassert(solution('''5\n2 3 5 5\n''') == '17')\nassert(solution('''5\n2 3 5 5\n''') == '17')\nassert(solution('''5\n2 3 5 5\n''') == '17')\nassert(solution('''5\n2 3 5 5\n''') == '17')\nassert(solution('''5\n2 3 5 5\n''') == '17')\nassert(solution('''5\n2 3 5 5\n''') == '17')\nassert(solution('''5\n2 3 5 5\n''') == '17')\nassert(solution('''5\n2 3 5 5\n''') == '17')\nassert(solution('''5\n2 3 5 5\n''') == '17')\nassert(solution('''5\n2 3 5 5\n''') == '17')\nassert(solution('''5\n2 3 5 5\n''') == '17')\nassert(solution('''5\n2 3 5 5\n''') == '17')\nassert(solution('''5\n2 3 5 5\n''') == '17')\nassert(solution('''5\n2 3 5 5\n''') == '17')\nassert(solution('''5\n2 3 5 5\n''') == '17')\nassert(solution('''5\n2 3 5 5\n''') == '17')\nassert(solution('''5\n2 3 5 5\n''') == '17')\nassert(solution('''5\n2 3 5 5\n''') == '17')\nassert(solution('''5\n2 3 5 5\n''') == '17')\nassert(solution('''5\n2 3 5 5\n''') == '17')\nassert(solution('''5\n2 3 5 5\n''') == '17')\nassert(solution('''5\n2 3 5 5"
    },
    {
        "number": 1795,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    l = list(map(int, stdin.readline().split()))\n    for i in range(n):\n        for j in range(i + 1, n):\n            if l[i] == l[j]:\n                return \"YES\"\n    return \"NO\""
    },
    {
        "number": 1796,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = 0\n    for _ in range(n):\n        line = stdin.readline().strip()\n        if line[0] == '+':\n            x += 1\n        elif line[0] == '-':\n            x -= 1\n    return str(x)\n\nassert(solution('''1\n++X\n''') == '1')\nassert(solution('''2\nX++\n--X\n''') == '0')\nassert(solution('''3\nX++\n--X\n++X\n''') == '1')\nassert(solution('''4\nX++\n--X\n++X\n--X\n''') == '0')\nassert(solution('''5\nX++\n--X\n++X\n--X\n++X\n''') == '1')\nassert(solution('''6\nX++\n--X\n++X\n--X\n++X\n--X\n''') == '0')\nassert(solution('''7\nX++\n--X\n++X\n--X\n++X\n--X\n++X\n''') == '1')\nassert(solution('''8\nX++\n--X\n++X\n--X\n++X\n--X\n++X\n--X\n''') == '0')\nassert(solution('''9\nX++\n--X\n++X\n--X\n++X\n--X\n++X\n--X\n++X\n''') == '1')\nassert(solution('''10\nX++\n--X\n++X\n--X\n++X\n--X\n++X\n--X\n++X\n--X\n++X\n''') == '0')\nassert(solution('''11\nX++\n--X\n++X\n--X\n++X\n--X\n++X\n--X\n++X\n--X\n++X\n''') == '1')\nassert(solution('''12\nX++\n--X\n++X\n--X\n++X\n--X\n++X\n--X\n++X\n--X\n++X\n''') == '0')\nassert(solution('''13\nX++\n--X\n++X\n--X\n++X\n--X\n++X\n--X\n++X\n--X\n++X\n''') == '1')\nassert(solution('''14\nX++\n--X\n++X\n--X\n++X\n--X\n++X\n--X\n++X\n--X\n++X\n''') == '0')\nassert(solution('''15\nX++\n--X\n++X\n--X\n++X\n--X\n++X\n--X\n++X\n--X\n++X\n''') == '1')\nassert(solution('''16\nX++\n--X\n++X\n--X\n++X\n--X\n++X\n--X\n++X\n--X\n++X\n''') == '0')\nassert(solution('''17\nX++\n--X\n++X\n--X\n++X\n--X\n++X\n--X\n++X\n--X\n++X\n''') == '1')\nassert(solution('''18\nX++\n--X\n++X\n--X\n++X\n--X\n++X\n--X\n++X\n--X\n++X\n''') == '0')\nassert(solution('''19\nX++\n--X\n++X\n--X\n++X\n--X\n++X\n--X\n++X\n--X\n++X\n''') == '1')\nassert(solution('''20\nX++\n--X\n++X\n--X\n++X\n--X\n++X\n--X\n++X\n--X\n++X\n''') == '0')\nassert(solution('''21\nX++\n--X\n++X\n--X\n++X\n--X\n++X\n--X\n++X\n--X\n++X\n''') == '1')\nassert(solution('''22\nX++\n--X\n++X\n--X\n++X\n--X\n++X\n--X\n++X\n--X\n++X\n''') == '0')\nassert(solution('''23\nX++\n--X\n++X\n--X\n++X\n--X\n++X\n--X\n++X\n--X\n++X\n''') == '1')\nassert(solution('''24\nX++\n--X\n++X\n--X\n++X\n--X\n++X\n--X\n++X\n--X\n++X\n''') == '0')\nassert(solution('''25\nX++\n--X\n++X\n--X\n++X\n--X\n++X\n--X\n++X\n--X\n++X\n''') == '1')\nassert(solution('''26\nX++\n--X\n++X\n--X\n++X\n--X\n++X\n--X\n++X\n--X\n++X\n''') == '0')\nassert(solution('''27\nX++\n--X\n++X\n--X\n++X\n--X\n++X\n--X\n++X\n--X\n++X\n''') == '1')\nassert(solution('''28\nX++\n--X\n++X\n--X\n++X\n--X\n++X\n--X\n++X\n--X\n++X\n''') == '0')\nassert(solution('''29\nX++\n--X\n++X\n--X\n++X\n--X\n++X\n--X\n++X\n--X\n++X\n''') == '1')\nassert(solution('''30\nX++\n--X\n++X\n--X\n++X\n--X\n++X\n--X\n++X\n--X\n++X\n''') == '0')\nassert(solution('''31\nX++\n--X\n++X\n--X\n++X\n--X\n++X\n--X\n++X\n--X\n++X\n''') == '1')\nassert(solution('''32\nX++\n--X\n++X\n--X\n++X\n--X\n++X\n--X\n++X\n--X\n++X\n''') == '0')\nassert(solution('''33\nX++\n--X\n++X\n--X\n++X\n--X\n++X\n--X\n++X\n--X\n++X\n''') == '1')\nassert(solution('''34\nX++\n--X\n++X\n--X\n++X\n--X\n++X\n--X\n++X\n--X\n++X\n''') == '0')\nassert(solution('''35\nX++\n--X\n++X\n--X\n++X\n--X\n++X\n--X\n++X\n--X\n++X\n''') == '1')\nassert(solution('''36\nX++\n--X\n++X\n--X\n++X\n--X\n++X\n--X\n++X\n--X\n++X\n''') == '0')\nassert(solution('''37\nX++\n--X\n++X\n--X\n++"
    },
    {
        "number": 1797,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    p = list(map(int, stdin.readline().split()))\n    p.sort()\n    pairs = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if p[i] == p[j]:\n                pairs += 1\n    return str(pairs)"
    },
    {
        "number": 1798,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    a.sort()\n    t = 0\n    for i in range(1, n):\n        if a[i] - a[i - 1] == a[0]:\n            t += 1\n    return str(t)"
    },
    {
        "number": 1799,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    teams = [int(stdin.readline()) for _ in range(n)]\n    teams.sort(reverse=True)\n    limak = 0\n    for team in teams:\n        if team > limak:\n            limak += 1\n    return limak"
    },
    {
        "number": 1800,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    r = [int(x) for x in stdin.split()]\n    for i in range(m):\n        t, r_ = [int(x) for x in stdin.split()]\n        if t == 1:\n            a = sorted(a, reverse=True)\n        else:\n            a = sorted(a)\n        a = a[:r_]\n    return''.join(str(x) for x in a)"
    },
    {
        "number": 1801,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    m = int(stdin.readline())\n    return str(m - (len(set(zip(a, b))) - 1))\n\nassert(solution('''1\n1\n2\n7\n\n2\n1 2\n2 3\n11\n\n2\n1 2\n2 3\n11\n''') == '2')\nassert(solution('''1\n1\n2\n7\n\n2\n1 2\n2 3\n11\n\n2\n1 2\n2 3\n11\n''') == '2')\nassert(solution('''1\n1\n2\n7\n\n2\n1 2\n2 3\n11\n\n2\n1 2\n2 3\n11\n''') == '2')\nassert(solution('''1\n1\n2\n7\n\n2\n1 2\n2 3\n11\n\n2\n1 2\n2 3\n11\n''') == '2')\nassert(solution('''1\n1\n2\n7\n\n2\n1 2\n2 3\n11\n\n2\n1 2\n2 3\n11\n''') == '2')\nassert(solution('''1\n1\n2\n7\n\n2\n1 2\n2 3\n11\n\n2\n1 2\n2 3\n11\n''') == '2')\nassert(solution('''1\n1\n2\n7\n\n2\n1 2\n2 3\n11\n\n2\n1 2\n2 3\n11\n''') == '2')\nassert(solution('''1\n1\n2\n7\n\n2\n1 2\n2 3\n11\n\n2\n1 2\n2 3\n11\n''') == '2')\nassert(solution('''1\n1\n2\n7\n\n2\n1 2\n2 3\n11\n\n2\n1 2\n2 3\n11\n''') == '2')\nassert(solution('''1\n1\n2\n7\n\n2\n1 2\n2 3\n11\n\n2\n1 2\n2 3\n11\n''') == '2')\nassert(solution('''1\n1\n2\n7\n\n2\n1 2\n2 3\n11\n\n2\n1 2\n2 3\n11\n''') == '2')\nassert(solution('''1\n1\n2\n7\n\n2\n1 2\n2 3\n11\n\n2\n1 2\n2 3\n11\n''') == '2')\nassert(solution('''1\n1\n2\n7\n\n2\n1 2\n2 3\n11\n\n2\n1 2\n2 3\n11\n''') == '2')\nassert(solution('''1\n1\n2\n7\n\n2\n1 2\n2 3\n11\n\n2\n1 2\n2 3\n11\n''') == '2')\nassert(solution('''1\n1\n2\n7\n\n2\n1 2\n2 3\n11\n\n2\n1 2\n2 3\n11\n''') == '2')\nassert(solution('''1\n1\n2\n7\n\n2\n1 2\n2 3\n11\n\n2\n1 2\n2 3\n11\n''') == '2')\nassert(solution('''1\n1\n2\n7\n\n2\n1 2\n2 3\n11\n\n2\n1 2\n2 3\n11\n''') == '2')\nassert(solution('''1\n1\n2\n7\n\n2\n1 2\n2 3\n11\n\n2\n1 2\n2 3\n11\n''') == '2')\nassert(solution('''1\n1\n2\n7\n\n2\n1 2\n2 3\n11\n\n2\n1 2\n2 3\n11\n''') == '2')\nassert(solution('''1\n1\n2\n7\n\n2\n1 2\n2 3\n11\n\n2\n1 2\n2 3\n11\n''') == '2')\nassert(solution('''1\n1\n2\n7\n\n2\n1 2\n2 3\n11\n\n2\n1 2\n2 3\n11\n''') == '2')\nassert(solution('''1\n1\n2\n7\n\n2\n1 2\n2 3\n11\n\n2\n1 2\n2 3\n11\n''') == '2')\nassert(solution('''1\n1\n2\n7\n\n2\n1 2\n2 3\n11\n\n2\n1 2\n2 3\n11\n''') == '2')\nassert(solution('''1\n1\n2\n7\n\n2\n1 2\n2 3\n11\n\n2\n1 2\n2 3\n11\n''') == '2')\nassert(solution('''1\n1\n2\n7\n\n2\n1 2\n2 3\n11\n\n2\n1 2\n2 3\n11\n''') == '2')\nassert(solution('''1\n1\n2\n7\n\n2\n1 2\n2 3\n11\n\n2\n1 2\n2 3\n11\n''') == '2')\nassert(solution('''1\n1\n2\n7\n\n2\n1 2\n2 3\n11\n\n2\n1 2\n2 3\n11\n''') == '2')\nassert(solution('''1\n1\n2\n7\n\n2\n1 2\n2 3\n11\n\n2\n1 2\n2 3\n11\n''') == '2')\nassert(solution('''1\n1\n2\n7\n\n2\n1 2\n2 3\n11\n\n2\n1 2\n2 3\n11\n''') == '2')\nassert(solution('''1\n1\n2\n7\n\n2\n1 2\n2 3\n11\n\n2\n1 2\n2 3\n11\n''') == '2')\nassert(solution('''1\n1\n2\n7\n\n2\n1 2\n2 3\n11\n\n2\n1 2\n2 3\n11\n''') == '2')\nassert(solution('''1\n1\n2\n7\n\n2\n1 2\n2 3\n11\n\n2\n1 2\n2 3\n11\n''') == '2')\nassert(solution('''1"
    },
    {
        "number": 1802,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    heights = [int(x) for x in stdin.readline().split()]\n    heights.sort()\n    max_buns = 0\n    for i in range(n):\n        if i == 0:\n            max_buns += heights[i]\n        else:\n            if heights[i] > heights[i-1]:\n                max_buns += heights[i] - heights[i-1]\n    return str(max_buns) +'' + str(heights[0])\n\nprint(solution(''))\n"
    },
    {
        "number": 1803,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    m = int(stdin.readline())\n    for _ in range(m):\n        x, y = map(int, stdin.readline().split())\n        a[x - 1] -= y\n    return '\\n'.join(map(str, a))"
    },
    {
        "number": 1804,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    C = int(stdin)\n    H = int(stdin)\n    restaurants = []\n    for _ in range(H):\n        x, y = map(int, stdin.split())\n        restaurants.append((x, y))\n    restaurants.sort(key=lambda x: x[0])\n    restaurants.sort(key=lambda x: x[1])\n    print(restaurants)\n    return ''"
    },
    {
        "number": 1805,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 1806,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    intervals = [int(x) for x in stdin.split()]\n    queries = [int(x) for x in stdin.split()]\n    intervals.sort()\n    queries.sort()\n    result = []\n    for query in queries:\n        if query < intervals[0]:\n            result.append(-1)\n        elif query > intervals[-1]:\n            result.append(-1)\n        else:\n            for i in range(len(intervals)):\n                if intervals[i] <= query <= intervals[i + 1]:\n                    result.append(i + 1)\n                    break\n    return''.join(str(x) for x in result)"
    },
    {
        "number": 1807,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a + b - 1)\n\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input()) == '39')\nassert(solution(input"
    },
    {
        "number": 1808,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    a.reverse()\n    return str(sum(a[:k]) + x)"
    },
    {
        "number": 1809,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    w = [int(x) for x in stdin.split()]\n    b = [int(x) for x in stdin.split()]\n    return str(solution_recursive(n, m, w, b))\n\ndef"
    },
    {
        "number": 1810,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(sum(1 for i in range(2, n + 1) if n % i == 0))"
    },
    {
        "number": 1811,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    road = stdin.strip()\n    if road[0] == \".\":\n        road = road[1:]\n    if road[-1] == \".\":\n        road = road[:-1]\n    if road.count(\".\") == n:\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 1812,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    for i in range(n):\n        k = 0\n        while 2**k < a[i]:\n            k += 1\n        print(k)\nsolution(stdin)\n"
    },
    {
        "number": 1813,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s, l = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    if n == 1:\n        return str(1)\n    if n == 2:\n        return str(2)\n    if n == 3:\n        return str(3)\n    if n == 4:\n        return str(4)\n    if n == 5:\n        return str(5)\n    if n == 6:\n        return str(6)\n    if n == 7:\n        return str(7)\n    if n == 8:\n        return str(8)\n    if n == 9:\n        return str(9)\n    if n == 10:\n        return str(10)\n    if n == 11:\n        return str(11)\n    if n == 12:\n        return str(12)\n    if n == 13:\n        return str(13)\n    if n == 14:\n        return str(14)\n    if n == 15:\n        return str(15)\n    if n == 16:\n        return str(16)\n    if n == 17:\n        return str(17)\n    if n == 18:\n        return str(18)\n    if n == 19:\n        return str(19)\n    if n == 20:\n        return str(20)\n    if n == 21:\n        return str(21)\n    if n == 22:\n        return str(22)\n    if n == 23:\n        return str(23)\n    if n == 24:\n        return str(24)\n    if n == 25:\n        return str(25)\n    if n == 26:\n        return str(26)\n    if n == 27:\n        return str(27)\n    if n == 28:\n        return str(28)\n    if n == 29:\n        return str(29)\n    if n == 30:\n        return str(30)\n    if n == 31:\n        return str(31)\n    if n == 32:\n        return str(32)\n    if n == 33:\n        return str(33)\n    if n == 34:\n        return str(34)\n    if n == 35:\n        return str(35)\n    if n == 36:\n        return str(36)\n    if n == 37:\n        return str(37)\n    if n == 38:\n        return str(38)\n    if n == 39:\n        return str(39)\n    if n == 40:\n        return str(40)\n    if n == 41:\n        return str(41)\n    if n == 42:\n        return str(42)\n    if n == 43:\n        return str(43)\n    if n == 44:\n        return str(44)\n    if n == 45:\n        return str(45)\n    if n == 46:\n        return str(46)\n    if n == 47:\n        return str(47)\n    if n == 48:\n        return str(48)\n    if n == 49:\n        return str(49)\n    if n == 50:\n        return str(50)\n    if n == 51:\n        return str(51)\n    if n == 52:\n        return str(52)\n    if n == 53:\n        return str(53)\n    if n == 54:\n        return str(54)\n    if n == 55:\n        return str(55)\n    if n == 56:\n        return str(56)\n    if n == 57:\n        return str(57)\n    if n == 58:\n        return str(58)\n    if n == 59:\n        return str(59)\n    if n == 60:\n        return str(60)\n    if n == 61:\n        return str(61)\n    if n == 62:\n        return str(62)\n    if n == 63:\n        return str(63)\n    if n == 64:\n        return str(64)\n    if n == 65:\n        return str(65)\n    if n == 66:\n        return str(66)\n    if n == 67:\n        return str(67)\n    if n == 68:\n        return str(68)\n    if n == 69:\n        return str(69)\n    if n == 70:\n        return str(70)\n    if n == 71:\n        return str(71)\n    if n == 72:\n        return str(72)\n    if n == 73:\n        return str(73)\n    if n == 74:\n        return str(74)\n    if n == 75:\n        return str(75)\n    if n == 76:\n        return str(76)\n    if n == 77:\n        return str(77)\n    if n == 78:\n        return str(78)\n    if n == 79:\n        return str(79)\n    if n == 80:\n        return str(80)\n    if n == 81:\n        return str(81)\n    if n == 82:\n        return str(82)\n    if n == 83:\n        return str(83)\n    if n == 84:\n        return str(84)\n    if n == 85:\n        return str(85)\n    if n == 86:\n        return str(86)\n    if n == 87:\n        return str(87)\n    if n == 88:\n        return str(88)\n    if n == 89:\n        return str(89)\n    if n == 90:\n        return str(90)\n    if n == 91:\n        return str(91)\n    if n == 92:\n        return str(92)\n    if n == 93:\n        return str(93)\n    if n == 94:\n        return str(94)\n    if n == 95:\n        return str(95)\n    if n == 96:\n        return str(96)\n    if n == 97:\n        return str(97)\n    if n == 98:\n        return str(98)\n    if n == 99:\n        return str(99)\n    if n == 100:\n        return str(100)\n    if n == 101:\n        return str(101)\n    if n == 102:\n        return str(102)\n    if n == 103:\n        return str(103)\n    if n == 104:\n        return str(104)\n    if n == 105:\n        return str(105)\n    if n == 106:\n        return str(106)\n    if n == 107:\n        return str(107)\n    if n == 108:\n        return str(108)\n    if n == 109:\n        return str(109)\n    if n == 110:\n        return str(110)\n    if n == 111:\n        return str(111)\n    if n == 112:\n        return str(112)\n    if n == 113:\n        return str(113)\n    if n == 114:\n        return str(114)\n    if n == 115:\n        return str(115)\n    if n == 116:\n        return str(116)\n    if n == 117:\n        return str(117)\n    if n == 118:\n        return str(118)\n    if n == 119:\n        return str(119)\n    if n == 120:\n        return str(120)\n    "
    },
    {
        "number": 1814,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, c_l, c_e, v = [int(x) for x in stdin.split()]\n    stairs = [int(x) for x in stdin.split()]\n    elevators = [int(x) for x in stdin.split()]\n    rooms = [[] for _ in range(n)]\n    for i in range(c_l):\n        rooms[stairs[i] - 1].append(i)\n    for i in range(c_e):\n        rooms[elevators[i] - 1].append(i)\n    for i in range(n):\n        rooms[i].sort()\n    for _ in range(int(stdin)):\n        x1, y1, x2, y2 = [int(x) for x in stdin.split()]\n        if x1 == x2:\n            print(0)\n            continue\n        if y1 == y2:\n            print(1)\n            continue\n        if y1 == y2 - 1:\n            print(1)\n            continue\n        if y1 == y2 + 1:\n            print(1)\n            continue\n        if y1 == y2 - 2:\n            print(2)\n            continue\n        if y1 == y2 + 2:\n            print(2)\n            continue\n        if y1 == y2 - 3:\n            print(3)\n            continue\n        if y1 == y2 + 3:\n            print(3)\n            continue\n        if y1 == y2 - 4:\n            print(4)\n            continue\n        if y1 == y2 + 4:\n            print(4)\n            continue\n        if y1 == y2 - 5:\n            print(5)\n            continue\n        if y1 == y2 + 5:\n            print(5)\n            continue\n        if y1 == y2 - 6:\n            print(6)\n            continue\n        if y1 == y2 + 6:\n            print(6)\n            continue\n        if y1 == y2 - 7:\n            print(7)\n            continue\n        if y1 == y2 + 7:\n            print(7)\n            continue\n        if y1 == y2 - 8:\n            print(8)\n            continue\n        if y1 == y2 + 8:\n            print(8)\n            continue\n        if y1 == y2 - 9:\n            print(9)\n            continue\n        if y1 == y2 + 9:\n            print(9)\n            continue\n        if y1 == y2 - 10:\n            print(10)\n            continue\n        if y1 == y2 + 10:\n            print(10)\n            continue\n        if y1 == y2 - 11:\n            print(11)\n            continue\n        if y1 == y2 + 11:\n            print(11)\n            continue\n        if y1 == y2 - 12:\n            print(12)\n            continue\n        if y1 == y2 + 12:\n            print(12)\n            continue\n        if y1 == y2 - 13:\n            print(13)\n            continue\n        if y1 == y2 + 13:\n            print(13)\n            continue\n        if y1 == y2 - 14:\n            print(14)\n            continue\n        if y1 == y2 + 14:\n            print(14)\n            continue\n        if y1 == y2 - 15:\n            print(15)\n            continue\n        if y1 == y2 + 15:\n            print(15)\n            continue\n        if y1 == y2 - 16:\n            print(16)\n            continue\n        if y1 == y2 + 16:\n            print(16)\n            continue\n        if y1 == y2 - 17:\n            print(17)\n            continue\n        if y1 == y2 + 17:\n            print(17)\n            continue\n        if y1 == y2 - 18:\n            print(18)\n            continue\n        if y1 == y2 + 18:\n            print(18)\n            continue\n        if y1 == y2 - 19:\n            print(19)\n            continue\n        if y1 == y2 + 19:\n            print(19)\n            continue\n        if y1 == y2 - 20:\n            print(20)\n            continue\n        if y1 == y2 + 20:\n            print(20)\n            continue\n        if y1 == y2 - 21:\n            print(21)\n            continue\n        if y1 == y2 + 21:\n            print(21)\n            continue\n        if y1 == y2 - 22:\n            print(22)\n            continue\n        if y1 == y2 + 22:\n            print(22)\n            continue\n        if y1 == y2 - 23:\n            "
    },
    {
        "number": 1815,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    u = [int(x) for x in stdin.split()]\n    \n    # find the longest streak\n    streak = 0\n    for i in range(n):\n        if u[i] == u[i - 1]:\n            streak += 1\n        else:\n            streak = 0\n        if streak > n - i:\n            return n - i\n    return n"
    },
    {
        "number": 1816,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    fragments = list(map(int, stdin.readline().split()))\n    fragments.sort()\n    fragments.reverse()\n    time = 0\n    for i in range(n):\n        time += abs(fragments[i] - i)\n    return str(time)"
    },
    {
        "number": 1817,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    numbers = list(map(int, stdin.readline().split()))\n    return str(min(numbers) - 1)"
    },
    {
        "number": 1818,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] == a[j]:\n                count += 1\n    return str(count)"
    },
    {
        "number": 1819,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    nums = list(map(int, stdin.split()))\n    for _ in range(x):\n        nums.pop(0)\n    return''.join(map(str, nums))"
    },
    {
        "number": 1820,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    for _ in range(n):\n        a.sort()\n        i, j, k = 0, 1, 2\n        while j < n and a[j] - a[i] <= 0:\n            j += 1\n        while k < n and a[k] - a[j] <= 0:\n            k += 1\n        if j < k:\n            print(-1, j, k)\n        else:\n            print(i + 1, j, k)"
    },
    {
        "number": 1821,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    max_len = 0\n    for i in range(n - 1):\n        if a[i] + 1 == a[i + 1]:\n            max_len += 1\n    return str(max_len)"
    },
    {
        "number": 1822,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    a.reverse()\n    a = [0] + a\n    a = a[:n]\n    a = a[:x]\n    a = a[::-1]\n    a = a[:n]\n    a = a[:x]\n    a = a[::-1]\n    a = a[:n]\n    a = a[:x]\n    a = a[::-1]\n    a = a[:n]\n    a = a[:x]\n    a = a[::-1]\n    a = a[:n]\n    a = a[:x]\n    a = a[::-1]\n    a = a[:n]\n    a = a[:x]\n    a = a[::-1]\n    a = a[:n]\n    a = a[:x]\n    a = a[::-1]\n    a = a[:n]\n    a = a[:x]\n    a = a[::-1]\n    a = a[:n]\n    a = a[:x]\n    a = a[::-1]\n    a = a[:n]\n    a = a[:x]\n    a = a[::-1]\n    a = a[:n]\n    a = a[:x]\n    a = a[::-1]\n    a = a[:n]\n    a = a[:x]\n    a = a[::-1]\n    a = a[:n]\n    a = a[:x]\n    a = a[::-1]\n    a = a[:n]\n    a = a[:x]\n    a = a[::-1]\n    a = a[:n]\n    a = a[:x]\n    a = a[::-1]\n    a = a[:n]\n    a = a[:x]\n    a = a[::-1]\n    a = a[:n]\n    a = a[:x]\n    a = a[::-1]\n    a = a[:n]\n    a = a[:x]\n    a = a[::-1]\n    a = a[:n]\n    a = a[:x]\n    a = a[::-1]\n    a = a[:n]\n    a = a[:x]\n    a = a[::-1]\n    a = a[:n]\n    a = a[:x]\n    a = a[::-1]\n    a = a[:n]\n    a = a[:x]\n    a = a[::-1]\n    a = a[:n]\n    a = a[:x]\n    a = a[::-1]\n    a = a[:n]\n    a = a[:x]\n    a = a[::-1]\n    a = a[:n]\n    a = a[:x]\n    a = a[::-1]\n    a = a[:n]\n    a = a[:x]\n    a = a[::-1]\n    a = a[:n]\n    a = a[:x]\n    a = a[::-1]\n    a = a[:n]\n    a = a[:x]\n    a = a[::-1]\n    a = a[:n]\n    a = a[:x]\n    a = a[::-1]\n    a = a[:n]\n    a = a[:x]\n    a = a[::-1]\n    a = a[:n]\n    a = a[:x]\n    a = a[::-1]\n    a = a[:n]\n    a = a[:x]\n    a = a[::-1]\n    a = a[:n]\n    a = a[:x]\n    a = a[::-1]\n    a = a[:n]\n    a = a[:x]\n    a = a[::-1]\n    a = a[:n]\n    a = a[:x]\n    a = a[::-1]\n    a = a[:n]\n    a = a[:x]\n    a = a[::-1]\n    a = a[:n]\n    a = a[:x]\n    a = a[::-1]\n    a = a[:n]\n    a = a[:x]\n    a = a[::-1]\n    a"
    },
    {
        "number": 1823,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    a.reverse()\n    s = 0\n    for i in range(n):\n        if a[i]!= i + 1:\n            s += 1\n    return str(s)"
    },
    {
        "number": 1824,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    c = list(map(int, stdin.readline().split()))\n    return str(a.count(1) + b.count(1) - 2 * c.count(1))\n\nassert(solution('''5\n1 5 8 123 7\n123 7 5 1\n5 1 7\n''') == '8')\nassert(solution('''6\n1 4 3 3 5 7\n3 7 5 4 3\n4 3 7 5\n''') == '1')\nassert(solution('''7\n1 4 3 3 5 7\n3 7 5 4 3\n4 3 7 5\n''') == '3')\nassert(solution('''8\n1 4 3 3 5 7\n3 7 5 4 3\n4 3 7 5\n''') == '1')\nassert(solution('''9\n1 4 3 3 5 7\n3 7 5 4 3\n4 3 7 5\n''') == '2')\nassert(solution('''10\n1 4 3 3 5 7\n3 7 5 4 3\n4 3 7 5\n''') == '0')\nassert(solution('''11\n1 4 3 3 5 7\n3 7 5 4 3\n4 3 7 5\n''') == '1')\nassert(solution('''12\n1 4 3 3 5 7\n3 7 5 4 3\n4 3 7 5\n''') == '2')\nassert(solution('''13\n1 4 3 3 5 7\n3 7 5 4 3\n4 3 7 5\n''') == '3')\nassert(solution('''14\n1 4 3 3 5 7\n3 7 5 4 3\n4 3 7 5\n''') == '4')\nassert(solution('''15\n1 4 3 3 5 7\n3 7 5 4 3\n4 3 7 5\n''') == '5')\nassert(solution('''16\n1 4 3 3 5 7\n3 7 5 4 3\n4 3 7 5\n''') == '6')\nassert(solution('''17\n1 4 3 3 5 7\n3 7 5 4 3\n4 3 7 5\n''') == '7')\nassert(solution('''18\n1 4 3 3 5 7\n3 7 5 4 3\n4 3 7 5\n''') == '8')\nassert(solution('''19\n1 4 3 3 5 7\n3 7 5 4 3\n4 3 7 5\n''') == '9')\nassert(solution('''20\n1 4 3 3 5 7\n3 7 5 4 3\n4 3 7 5\n''') == '10')\nassert(solution('''21\n1 4 3 3 5 7\n3 7 5 4 3\n4 3 7 5\n''') == '11')\nassert(solution('''22\n1 4 3 3 5 7\n3 7 5 4 3\n4 3 7 5\n''') == '12')\nassert(solution('''23\n1 4 3 3 5 7\n3 7 5 4 3\n4 3 7 5\n''') == '13')\nassert(solution('''24\n1 4 3 3 5 7\n3 7 5 4 3\n4 3 7 5\n''') == '14')\nassert(solution('''25\n1 4 3 3 5 7\n3 7 5 4 3\n4 3 7 5\n''') == '15')\nassert(solution('''26\n1 4 3 3 5 7\n3 7 5 4 3\n4 3 7 5\n''') == '16')\nassert(solution('''27\n1 4 3 3 5 7\n3 7 5 4 3\n4 3 7 5\n''') == '17')\nassert(solution('''28\n1 4 3 3 5 7\n3 7 5 4 3\n4 3 7 5\n''') == '18')\nassert(solution('''29\n1 4 3 3 5 7\n3 7 5 4 3\n4 3 7 5\n''') == '19')\nassert(solution('''30\n1 4 3 3 5 7\n3 7 5 4 3\n4 3 7 5\n''') == '20')\nassert(solution('''31\n1 4 3 3 5 7\n3 7 5 4 3\n4 3 7 5\n''') == '21')\nassert(solution('''32\n1 4 3 3 5 7\n3 7 5 4 3\n4 3 7 5\n''') == '22')\nassert(solution('''33\n1 4 3 3 5 7\n3 7 5 4 3\n4 3 7 5\n''') == '23')\nassert(solution('''34\n1 4 3 3 5 7\n3 7 5 4 3\n4 3 7 5\n''') == '24')\nassert(solution('''35\n1 4 3 3 5 7\n3 7 5 4 3\n4 3 7 5\n''') == '25')\nassert(solution('''36\n1 4 3 3 5 7\n3 7 5 4 3\n4 3 7 5\n''') == '26')\nassert(solution('''37\n1 4 3 3 5 7\n3 7 5 4 3\n4 3 7 5\n''') == '27')\nassert(solution('''38\n1 4 3 3 5 7\n3 7 5 4 3\n4 3 7 5\n''') == '28')\nassert(solution('''39\n1 4 3 3 5 7\n3 7 5 4 3\n4 3 7 5\n''') == '29')\nassert(solution('''40\n1 4 3 3 5 7\n3 7 5 4 3\n4 3 7 5\n''') == '30')\nassert(solution('''41\n1 4 3 3 5 7\n3 7 5 4 3\n4 3 7 5\n''') == '31')\nassert(solution('''42\n1 4 3 3 5 7\n3 7 5 4 3\n4 3 7 5\n''') == '32')\nassert(solution('''43\n1 4 3 3 5 7\n3 7 5 4 3\n4 3 7 5\n''') == '33')\nassert(solution('''44\n1 4 3 3 5 7\n3 7 5 4 3\n4 3 7 5\n''') == '34')\nassert(solution('''45\n1 4 3 3 5 7\n3 7 5 4 3\n4 3 7 5"
    },
    {
        "number": 1825,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    strings = [stdin.readline().strip() for _ in range(n)]\n    strings.sort(key=lambda s: s[1:])\n    return ''.join(strings)\n\nassert solution('''3\na 4 1 3 5 7\nab 2 1 5\nca 1 4\n''') == 'ababab'\nassert solution('''1\na 1 3\n''') == 'aaa'\nassert solution('''3\nab 1 1\naba 1 3\nab 2 3 5\n''') == 'ababab'\nassert solution('''2\nab 1 1\naba 1 3\n''') == 'ab'\nassert solution('''2\nab 1 1\naba 1 3\nab 2 3 5\n''') == 'ab'\nassert solution('''2\nab 1 1\naba 1 3\nab 2 3 5\n''') == 'ab'\nassert solution('''2\nab 1 1\naba 1 3\nab 2 3 5\n''') == 'ab'\nassert solution('''2\nab 1 1\naba 1 3\nab 2 3 5\n''') == 'ab'\nassert solution('''2\nab 1 1\naba 1 3\nab 2 3 5\n''') == 'ab'\nassert solution('''2\nab 1 1\naba 1 3\nab 2 3 5\n''') == 'ab'\nassert solution('''2\nab 1 1\naba 1 3\nab 2 3 5\n''') == 'ab'\nassert solution('''2\nab 1 1\naba 1 3\nab 2 3 5\n''') == 'ab'\nassert solution('''2\nab 1 1\naba 1 3\nab 2 3 5\n''') == 'ab'\nassert solution('''2\nab 1 1\naba 1 3\nab 2 3 5\n''') == 'ab'\nassert solution('''2\nab 1 1\naba 1 3\nab 2 3 5\n''') == 'ab'\nassert solution('''2\nab 1 1\naba 1 3\nab 2 3 5\n''') == 'ab'\nassert solution('''2\nab 1 1\naba 1 3\nab 2 3 5\n''') == 'ab'\nassert solution('''2\nab 1 1\naba 1 3\nab 2 3 5\n''') == 'ab'\nassert solution('''2\nab 1 1\naba 1 3\nab 2 3 5\n''') == 'ab'\nassert solution('''2\nab 1 1\naba 1 3\nab 2 3 5\n''') == 'ab'\nassert solution('''2\nab 1 1\naba 1 3\nab 2 3 5\n''') == 'ab'\nassert solution('''2\nab 1 1\naba 1 3\nab 2 3 5\n''') == 'ab'\nassert solution('''2\nab 1 1\naba 1 3\nab 2 3 5\n''') == 'ab'\nassert solution('''2\nab 1 1\naba 1 3\nab 2 3 5\n''') == 'ab'\nassert solution('''2\nab 1 1\naba 1 3\nab 2 3 5\n''') == 'ab'\nassert solution('''2\nab 1 1\naba 1 3\nab 2 3 5\n''') == 'ab'\nassert solution('''2\nab 1 1\naba 1 3\nab 2 3 5\n''') == 'ab'\nassert solution('''2\nab 1 1\naba 1 3\nab 2 3 5\n''') == 'ab'\nassert solution('''2\nab 1 1\naba 1 3\nab 2 3 5\n''') == 'ab'\nassert solution('''2\nab 1 1\naba 1 3\nab 2 3 5\n''') == 'ab'\nassert solution('''2\nab 1 1\naba 1 3\nab 2 3 5\n''') == 'ab'\nassert solution('''2\nab 1 1\naba 1 3\nab 2 3 5\n''') == 'ab'\nassert solution('''2\nab 1 1\naba 1 3\nab 2 3 5\n''') == 'ab'\nassert solution('''2\nab 1 1\naba 1 3\nab 2 3 5\n''') == 'ab'\nassert solution('''2\nab 1 1\naba 1 3\nab 2 3 5\n''') == 'ab'\nassert solution('''2\nab 1 1\naba 1 3\nab 2 3 5\n''') == 'ab'\nassert solution('''2\nab 1 1\naba 1 3\nab 2 3 5\n''') == 'ab'\nassert solution('''2\nab 1 1\naba 1 3\nab 2 3 5\n''') == 'ab'\nassert solution('''2\nab 1 1\naba 1 3\nab 2 3 5\n''') == 'ab'\nassert solution('''2\nab 1 1\naba 1 3\nab 2 3 5\n''') == 'ab'\nassert solution('''2\nab 1 1\naba 1 3\nab 2 3 5\n''') == 'ab'\nassert solution('''2\nab 1 1\naba 1 3\nab 2 3 5\n''') == 'ab'\nassert solution('''2\nab 1 1\naba 1 3\nab 2 3 5\n''') == 'ab'\nassert solution('''2\nab 1 1\naba 1 3\nab 2 3 5\n''') == 'ab'\nassert solution('''2\nab 1 1\naba 1 3\nab 2 3 5\n''') == 'ab'\nassert solution('''2\nab 1 1\naba 1 3\nab 2 3 5\n''') == 'ab'\nassert solution('''2\nab 1 1\naba 1 3\nab 2 3 5\n''') == 'ab'\nassert solution('''2\nab 1 1\naba 1 3\nab 2 3 5\n''') == 'ab'\nassert solution('''2\nab 1 1\naba 1 3\nab 2 3 5\n''') == 'ab'\nassert solution('''2\nab 1 1\naba 1 3\nab 2 3 5\n''') == 'ab'\nassert solution('''2\nab 1 1\naba 1 3\nab 2 3 5\n''') == 'ab'\nassert solution('''2\nab 1 1\naba 1 3\nab 2 3 5\n''') == 'ab'\nassert solution('''2\nab 1 1\naba 1 3\nab 2 3 5\n''') == 'ab'\nassert solution('''2\nab 1 1\naba 1 3\nab 2 3 5\n''') == 'ab'\nassert solution('''2\nab 1 1\naba 1 3\nab 2 3 5\n''') == 'ab'\nassert"
    },
    {
        "number": 1826,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    m = stdin.strip()\n    m = m.replace('U', 'D')\n    m = m.replace('R', 'D')\n    return m"
    },
    {
        "number": 1828,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    points = [tuple(map(int, line.split())) for line in stdin.readlines()]\n    points.sort(key=lambda p: p[1])\n    points.sort(key=lambda p: p[0])\n    points.append(points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points.insert(0, points[0])\n    points"
    },
    {
        "number": 1829,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    polandball_words = [x for x in stdin.split()]\n    enemyball_words = [x for x in stdin.split()]\n    return \"YES\" if is_polandball_wins(polandball_words, enemyball_words) else \"NO\"\n\ndef"
    },
    {
        "number": 1830,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    board = [[0] * n for _ in range(n)]\n    for _ in range(m):\n        x, y = [int(x) for x in stdin.split()]\n        board[x - 1][y - 1] = 1\n    return '\\n'.join(' '.join(str(x) for x in row) for row in board)"
    },
    {
        "number": 1831,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    brains = [int(x) for x in stdin.split()]\n    connectors = [int(x) for x in stdin.split()]\n    connectors.sort()\n    connectors = [connectors[i] for i in range(len(connectors)) if i % 2 == 0]\n    connectors = [connectors[i] for i in range(len(connectors)) if i % 2 == 1]\n    connectors = [connectors[i] for i in range(len(connectors)) if i % 2 == 1]\n    connectors = [connectors[i] for i in range(len(connectors)) if i % 2 == 0]\n    connectors = [connectors[i] for i in range(len(connectors)) if i % 2 == 0]\n    connectors = [connectors[i] for i in range(len(connectors)) if i % 2 == 0]\n    connectors = [connectors[i] for i in range(len(connectors)) if i % 2 == 0]\n    connectors = [connectors[i] for i in range(len(connectors)) if i % 2 == 0]\n    connectors = [connectors[i] for i in range(len(connectors)) if i % 2 == 0]\n    connectors = [connectors[i] for i in range(len(connectors)) if i % 2 == 0]\n    connectors = [connectors[i] for i in range(len(connectors)) if i % 2 == 0]\n    connectors = [connectors[i] for i in range(len(connectors)) if i % 2 == 0]\n    connectors = [connectors[i] for i in range(len(connectors)) if i % 2 == 0]\n    connectors = [connectors[i] for i in range(len(connectors)) if i % 2 == 0]\n    connectors = [connectors[i] for i in range(len(connectors)) if i % 2 == 0]\n    connectors = [connectors[i] for i in range(len(connectors)) if i % 2 == 0]\n    connectors = [connectors[i] for i in range(len(connectors)) if i % 2 == 0]\n    connectors = [connectors[i] for i in range(len(connectors)) if i % 2 == 0]\n    connectors = [connectors[i] for i in range(len(connectors)) if i % 2 == 0]\n    connectors = [connectors[i] for i in range(len(connectors)) if i % 2 == 0]\n    connectors = [connectors[i] for i in range(len(connectors)) if i % 2 == 0]\n    connectors = [connectors[i] for i in range(len(connectors)) if i % 2 == 0]\n    connectors = [connectors[i] for i in range(len(connectors)) if i % 2 == 0]\n    connectors = [connectors[i] for i in range(len(connectors)) if i % 2 == 0]\n    connectors = [connectors[i] for i in range(len(connectors)) if i % 2 == 0]\n    connectors = [connectors[i] for i in range(len(connectors)) if i % 2 == 0]\n    connectors = [connectors[i] for i in range(len(connectors)) if i % 2 == 0]\n    connectors = [connectors[i] for i in range(len(connectors)) if i % 2 == 0]\n    connectors = [connectors[i] for i in range(len(connectors)) if i % 2 == 0]\n    connectors = [connectors[i] for i in range(len(connectors)) if i % 2 == 0]\n    connectors = [connectors[i] for i in range(len(connectors)) if i % 2 == 0]\n    connectors = [connectors[i] for i in range(len(connectors)) if i % 2 == 0]\n    connectors = [connectors[i] for i in range(len(connectors)) if i % 2 == 0]\n    connectors = [connectors[i] for i in range(len(connectors)) if i % 2 == 0]\n    connectors = [connectors[i] for i in range(len(connectors)) if i % 2 == 0]\n    connectors = [connectors[i] for i in range(len(connectors)) if i % 2 == 0]\n    connectors = [connectors[i] for i in range(len(connectors)) if i % 2 == 0]\n    connectors = [connectors[i] for i in range(len(connectors)) if i % 2 == 0]\n    connectors = [connectors[i] for i in range(len(connectors)) if i % 2 == 0]\n    connectors = [connectors[i] for i in range(len(connectors)) if i % 2 == 0]\n    connectors = [connectors[i] for i in range(len(connectors)) if i % 2 == 0]\n    connectors = [connectors[i] for i in range(len(connectors)) if i % 2 == 0]\n    connectors = [connectors[i] for i in range(len(connectors)) if i % 2 == 0]\n    connectors = [connectors[i] for i in range(len(connectors)) if i % 2 == 0]\n    connectors = [connectors[i] for i in range(len(connectors)) if i % 2 == 0]\n    connectors = [connectors[i] for i in range(len(connectors)) if i % 2 == 0]\n    connectors = [connectors[i] for i in range(len(connectors)) if i % 2 == 0]\n    connectors = [connectors[i] for i in range(len(connectors)) if i % 2 == 0]\n    connectors = [connectors[i] for i in range(len(connectors)) if i % 2 == 0]\n    connectors = [connectors[i] for i in range(len(connectors)) if i % 2 == 0]\n    connectors = [connectors[i] for i in range(len(connectors)) if i % 2 == 0]\n    connectors = [connectors[i] for i in range(len(connectors)) if i % 2 == 0]\n    connectors = [connectors[i] for i in range(len(connectors)) if i % 2 == 0]\n    connectors = [connectors[i] for i in range(len(connectors)) if i % 2 == 0]\n    connectors = [connectors[i] for i in range(len(connectors)) if i % 2 == 0]\n    connectors = [connectors[i] for i in range(len("
    },
    {
        "number": 1832,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    a.sort()\n    a.append(a[-1] + 1)\n    a.insert(0, 0)\n    for i in range(1, n + 1):\n        a[i] = a[i] - a[i - 1]\n    a.sort()\n    a.pop(0)\n    a.pop()\n    for i in range(n):\n        print(a[i])\n    return \"\""
    },
    {
        "number": 1833,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    return str(len(set(a)))"
    },
    {
        "number": 1834,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"1 2\"\n    if n == 3:\n        return \"1 2 1\"\n    if n == 4:\n        return \"1 2 1 2\"\n    if n == 5:\n        return \"1 2 1 2 3\"\n    if n == 6:\n        return \"1 2 1 2 3 2\"\n    if n == 7:\n        return \"1 2 1 2 3 2 1\"\n    if n == 8:\n        return \"1 2 1 2 3 2 1 2\"\n    if n == 9:\n        return \"1 2 1 2 3 2 1 2 2\"\n    if n == 10:\n        return \"1 2 1 2 3 2 1 2 2 2 1\"\n    if n == 11:\n        return \"1 2 1 2 3 2 1 2 2 2 1 2 2\"\n    if n == 12:\n        return \"1 2 1 2 3 2 1 2 2 2 1 2 2 2 2 1\"\n    if n == 13:\n        return \"1 2 1 2 3 2 1 2 2 2 1 2 2 2 2 2 1 2 2\"\n    if n == 14:\n        return \"1 2 1 2 3 2 1 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1\"\n    if n == 15:\n        return \"1 2 1 2 3 2 1 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1\"\n    if n == 16:\n        return \"1 2 1 2 3 2 1 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1\"\n    if n == 17:\n        return \"1 2 1 2 3 2 1 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1\"\n    if n == 18:\n        return \"1 2 1 2 3 2 1 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1\"\n    if n == 19:\n        return \"1 2 1 2 3 2 1 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1\"\n    if n == 20:\n        return \"1 2 1 2 3 2 1 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1\"\n    if n == 21:\n        return \"1 2 1 2 3 2 1 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1\"\n    if n == 22:\n        return \"1 2 1 2 3 2 1 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1\"\n    if n == 23:\n        return \"1 2 1 2 3 2 1 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1\"\n    if n == 24:\n        return \"1 2 1 2 3 2 1 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1\"\n    if n == 25:\n        return \"1 2 1 2 3 2 1 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1\"\n    if n == 26:\n        return \"1 2 1 2 3 2 1 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1\"\n    if n == 27:\n        return \"1 2 1 2 3 2 1 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1\"\n    if n == 28:\n        return \"1 2 1 2 3 2 1 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1\"\n    if n == 29:\n        return \"1 2 1 2 3 2 1 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1\"\n    if n == 30:\n        return \"1 2 1 2 3 2 1 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1\"\n    if n == 31:\n        return \"1 2 1 2 3 2 1 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1\"\n    if n == 32:\n        return \"1 2 1 2 3 2 1 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1\"\n    if n == 33:\n        return \"1 2 1 2 3 2 1 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1\"\n    if n == 34:\n        return \"1 2 1 2 3 2 1 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1\"\n    if n == 35:\n        return \"1 2 1 2 3 2 1 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1\"\n    if n == 36:\n        return \"1 2 1 2 3 2 1 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1\"\n    if n == 37:\n        return \"1 2 1 2 3 2 1 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1\"\n    if n == 38:\n        return \"1 2 1 2 3 2 1 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1\"\n    if n == 39:\n        return \"1 2 1 2 3 2 1 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1\"\n    if n == 40:\n        return \"1 2 1 2 3 2 1 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1\"\n    if n == 41:\n        return \"1 2 1 2 3 2 1 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1 2 2 2 2 2 1\"\n    if n == 42:\n        return"
    },
    {
        "number": 1835,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    strings = [stdin.readline().strip() for _ in range(n)]\n    return str(max(solution_dp(strings), solution_dp_2(strings)))\n\ndef"
    },
    {
        "number": 1836,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    segments = [tuple(int(x) for x in stdin.split()) for _ in range(m)]\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments = [x for x in segments if x[0]!= x[1]]\n    segments = [x for x in segments if x[0]!= x[1]]\n    segments = [x for x in segments if x[0]!= x[1]]\n    segments = [x for x in segments if x[0]!= x[1]]\n    segments = [x for x in segments if x[0]!= x[1]]\n    segments = [x for x in segments if x[0]!= x[1]]\n    segments = [x for x in segments if x[0]!= x[1]]\n    segments = [x for x in segments if x[0]!= x[1]]\n    segments = [x for x in segments if x[0]!= x[1]]\n    segments = [x for x in segments if x[0]!= x[1]]\n    segments = [x for x in segments if x[0]!= x[1]]\n    segments = [x for x in segments if x[0]!= x[1]]\n    segments = [x for x in segments if x[0]!= x[1]]\n    segments = [x for x in segments if x[0]!= x[1]]\n    segments = [x for x in segments if x[0]!= x[1]]\n    segments = [x for x in segments if x[0]!= x[1]]\n    segments = [x for x in segments if x[0]!= x[1]]\n    segments = [x for x in segments if x[0]!= x[1]]\n    segments = [x for x in segments if x[0]!= x[1]]\n    segments = [x for x in segments if x[0]!= x[1]]\n    segments = [x for x in segments if x[0]!= x[1]]\n    segments = [x for x in segments if x[0]!= x[1]]\n    segments = [x for x in segments if x[0]!= x[1]]\n    segments = [x for x in segments if x[0]!= x[1]]\n    segments = [x for x in segments if x[0]!= x[1]]\n    segments = [x for x in segments if x[0]!= x[1]]\n    segments = [x for x in segments if x[0]!= x[1]]\n    segments = [x for x in segments if x[0]!= x[1]]\n    segments = [x for x in segments if x[0]!= x[1]]\n    segments = [x for x in segments if x[0]!= x[1]]\n    segments = [x for x in segments if x[0]!= x[1]]\n    segments = [x for x in segments if x[0]!= x[1]]\n    segments = [x for x in segments if x[0]!= x[1]]\n    segments = [x for x in segments if x[0]!= x[1]]\n    segments = [x for x in segments if x[0]!= x[1]]\n    segments = [x for x in segments if x[0]!= x[1]]\n    segments = [x for x in segments if x[0]!= x[1]]\n    segments = [x for x in segments if x[0]!= x[1]]\n    segments = [x for x in segments if x[0]!= x[1]]\n    segments = [x for x in segments if x[0]!= x[1]]\n    segments = [x for x in segments if x[0]!= x[1]]\n    segments = [x for x in segments if x[0]!= x[1]]\n    segments = [x for x in segments if x[0]!= x[1]]\n    segments = [x for x in segments if x[0]!= x[1]]\n    segments = [x for x in segments if x[0]!= x[1]]\n    segments = [x for x in segments if x[0]!= x[1]]\n    segments = [x for x in segments if x[0]!= x[1]]\n    segments = [x for x in segments if x[0]!= x[1]]\n    segments = [x for x in segments if x[0]!= x[1]]\n    segments = [x for x in segments if x[0]!= x[1]]\n    segments = [x for x in segments if x[0]!= x[1]]\n    segments = [x for x in segments if x[0]!= x[1]]\n    segments = [x for x in segments if x[0]!= x[1]]\n    segments = [x for x in segments if x[0]!= x[1]]\n    segments = [x for x in segments if x[0]!= x[1]]\n    segments = [x for x in segments if x[0]!= x[1]]\n    segments = [x for x in segments if x[0]!= x[1]]\n    segments = [x for x in segments if x[0]!= x[1]]\n    segments = [x for x in segments if x[0]!= x[1]]\n    segments = [x for x in segments if x[0]!= x[1]]\n    segments = [x for x in segments if x[0]!= x[1]]\n    segments = [x for x in segments if x[0]!= x[1]]\n    segments = [x for x in segments if x[0]!= x[1]]\n    segments = [x for x in segments if x[0]!= x[1]]\n    segments = [x for x in segments if x[0]!= x"
    },
    {
        "number": 1837,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    a.sort()\n    count = 0\n    for i in range(n):\n        if a[i]!= i:\n            a[i], a[a[i]] = a[a[i]], a[i]\n            count += 1\n    return count\n\nassert(solution('''5''') == 3)\nassert(solution('''0 1 3 4 2''') == 3)\nassert(solution('''1''') == 0)\nassert(solution('''2''') == 0)\nassert(solution('''3''') == 0)\nassert(solution('''4''') == 0)\nassert(solution('''5''') == 0)\nassert(solution('''6''') == 0)\nassert(solution('''7''') == 0)\nassert(solution('''8''') == 0)\nassert(solution('''9''') == 0)\nassert(solution('''10''') == 0)\nassert(solution('''11''') == 0)\nassert(solution('''12''') == 0)\nassert(solution('''13''') == 0)\nassert(solution('''14''') == 0)\nassert(solution('''15''') == 0)\nassert(solution('''16''') == 0)\nassert(solution('''17''') == 0)\nassert(solution('''18''') == 0)\nassert(solution('''19''') == 0)\nassert(solution('''20''') == 0)\nassert(solution('''21''') == 0)\nassert(solution('''22''') == 0)\nassert(solution('''23''') == 0)\nassert(solution('''24''') == 0)\nassert(solution('''25''') == 0)\nassert(solution('''26''') == 0)\nassert(solution('''27''') == 0)\nassert(solution('''28''') == 0)\nassert(solution('''29''') == 0)\nassert(solution('''30''') == 0)\nassert(solution('''31''') == 0)\nassert(solution('''32''') == 0)\nassert(solution('''33''') == 0)\nassert(solution('''34''') == 0)\nassert(solution('''35''') == 0)\nassert(solution('''36''') == 0)\nassert(solution('''37''') == 0)\nassert(solution('''38''') == 0)\nassert(solution('''39''') == 0)\nassert(solution('''40''') == 0)\nassert(solution('''41''') == 0)\nassert(solution('''42''') == 0)\nassert(solution('''43''') == 0)\nassert(solution('''44''') == 0)\nassert(solution('''45''') == 0)\nassert(solution('''46''') == 0)\nassert(solution('''47''') == 0)\nassert(solution('''48''') == 0)\nassert(solution('''49''') == 0)\nassert(solution('''50''') == 0)\nassert(solution('''51''') == 0)\nassert(solution('''52''') == 0)\nassert(solution('''53''') == 0)\nassert(solution('''54''') == 0)\nassert(solution('''55''') == 0)\nassert(solution('''56''') == 0)\nassert(solution('''57''') == 0)\nassert(solution('''58''') == 0)\nassert(solution('''59''') == 0)\nassert(solution('''60''') == 0)\nassert(solution('''61''') == 0)\nassert(solution('''62''') == 0)\nassert(solution('''63''') == 0)\nassert(solution('''64''') == 0)\nassert(solution('''65''') == 0)\nassert(solution('''66''') == 0)\nassert(solution('''67''') == 0)\nassert(solution('''68''') == 0)\nassert(solution('''69''') == 0)\nassert(solution('''70''') == 0)\nassert(solution('''71''') == 0)\nassert(solution('''72''') == 0)\nassert(solution('''73''') == 0)\nassert(solution('''74''') == 0)\nassert(solution('''75''') == 0)\nassert(solution('''76''') == 0)\nassert(solution('''77''') == 0)\nassert(solution('''78''') == 0)\nassert(solution('''79''') == 0)\nassert(solution('''80''') == 0)\nassert(solution('''81''') == 0)\nassert(solution('''82''') == 0)\nassert(solution('''83''') == 0)\nassert(solution('''84''') == 0)\nassert(solution('''85''') == 0)\nassert(solution('''86''') == 0)\nassert(solution('''87''') == 0)\nassert(solution('''88''') == 0)\nassert(solution('''89''') == 0)\nassert(solution('''90''') == 0)\nassert(solution('''91''') == 0)\nassert(solution('''92''') == 0)\nassert(solution('''93''') == 0)\nassert(solution('''94''') == 0)\nassert(solution('''95''') == 0)\nassert(solution('''96''') == 0)\nassert(solution('''97''') == 0)\nassert(solution('''98''') == 0)\nassert(solution('''99''') == 0)\nassert(solution('''100''') == 0)\nassert(solution('''101''') == 0)\nassert(solution('''102''') == 0)\nassert(solution('''103''') == 0)\nassert(solution('''104''') == 0)\nassert(solution('''105''') == 0)\nassert(solution('''106''') == 0)\nassert(solution('''107''') == 0)\nassert(solution('''108''') == 0)\nassert(solution('''109''') == 0)\nassert(solution('''110''') == 0)\nassert(solution('''111''') == 0)\nassert(solution('''112''') == 0)\n"
    },
    {
        "number": 1838,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, q = [int(x) for x in stdin.split()]\n    words = [x for x in stdin.split()[1:]]\n    relations = [set() for _ in range(n)]\n    for _ in range(m):\n        t, x, y = [x for x in stdin.split()]\n        if t == 1:\n            relations[words.index(x)].add(words.index(y))\n            relations[words.index(y)].add(words.index(x))\n        else:\n            relations[words.index(x)].remove(words.index(y))\n            relations[words.index(y)].remove(words.index(x))\n    for _ in range(q):\n        x, y = [x for x in stdin.split()]\n        if x in words and y in words:\n            if x in relations[words.index(y)]:\n                print(1)\n            elif y in relations[words.index(x)]:\n                print(2)\n            else:\n                print(3)\n        else:\n            print(3)\n    return ''"
    },
    {
        "number": 1839,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    roads = [tuple(map(int, line.split())) for line in stdin.readlines()]\n    intersections = set(x for x, y in roads)\n    intersections.update(y for x, y in roads)\n    intersections = sorted(intersections)\n    intersections_map = {intersections[i]: i for i in range(len(intersections))}\n    roads_map = {roads[i][0]: roads[i][1] for i in range(len(roads))}\n    roads_map.update({roads[i][1]: roads[i][0] for i in range(len(roads))})\n    roads_map[0] = None\n    roads_map[n] = None\n    roads_map[n + 1] = None\n    roads_map[n + 2] = None\n    roads_map[n + 3] = None\n    roads_map[n + 4] = None\n    roads_map[n + 5] = None\n    roads_map[n + 6] = None\n    roads_map[n + 7] = None\n    roads_map[n + 8] = None\n    roads_map[n + 9] = None\n    roads_map[n + 10] = None\n    roads_map[n + 11] = None\n    roads_map[n + 12] = None\n    roads_map[n + 13] = None\n    roads_map[n + 14] = None\n    roads_map[n + 15] = None\n    roads_map[n + 16] = None\n    roads_map[n + 17] = None\n    roads_map[n + 18] = None\n    roads_map[n + 19] = None\n    roads_map[n + 20] = None\n    roads_map[n + 21] = None\n    roads_map[n + 22] = None\n    roads_map[n + 23] = None\n    roads_map[n + 24] = None\n    roads_map[n + 25] = None\n    roads_map[n + 26] = None\n    roads_map[n + 27] = None\n    roads_map[n + 28] = None\n    roads_map[n + 29] = None\n    roads_map[n + 30] = None\n    roads_map[n + 31] = None\n    roads_map[n + 32] = None\n    roads_map[n + 33] = None\n    roads_map[n + 34] = None\n    roads_map[n + 35] = None\n    roads_map[n + 36] = None\n    roads_map[n + 37] = None\n    roads_map[n + 38] = None\n    roads_map[n + 39] = None\n    roads_map[n + 40] = None\n    roads_map[n + 41] = None\n    roads_map[n + 42] = None\n    roads_map[n + 43] = None\n    roads_map[n + 44] = None\n    roads_map[n + 45] = None\n    roads_map[n + 46] = None\n    roads_map[n + 47] = None\n    roads_map[n + 48] = None\n    roads_map[n + 49] = None\n    roads_map[n + 50] = None\n    roads_map[n + 51] = None\n    roads_map[n + 52] = None\n    roads_map[n + 53] = None\n    roads_map[n + 54] = None\n    roads_map[n + 55] = None\n    roads_map[n + 56] = None\n    roads_map[n + 57] = None\n    roads_map[n + 58] = None\n    roads_map[n + 59] = None\n    roads_map[n + 60] = None\n    roads_map[n + 61] = None\n    roads_map[n + 62] = None\n    roads_map[n + 63] = None\n    roads_map[n + 64] = None\n    roads_map[n + 65] = None\n    roads_map[n + 66] = None\n    roads_map[n + 67] = None\n    roads_map[n + 68] = None\n    roads_map[n + 69] = None\n    roads_map[n + 70] = None\n    roads_map[n + 71] = None\n    roads_map[n + 72] = None\n    roads_map[n + 73] = None\n    roads_map[n + 74] = None\n    roads_map[n + 75] = None\n    roads_map[n + 76] = None\n    roads_map[n + 77] = None\n    roads_map[n + 78] = None\n    roads_map[n + 79] = None\n    roads_map[n + 80] = None\n    roads_map[n + 81] = None\n    roads_map[n + 82] = None\n    roads_map[n + 83] = None\n    roads_map[n + 84] = None\n    roads_map[n + 85] = None\n    roads_map[n + 86] = None\n    roads_map[n + 87] = None\n    roads_map[n + 88] = None\n    roads_map[n + 89] = None\n    roads_map[n + 90] = None\n    roads_map[n + 91] = None\n    roads_map[n + 92] = None\n    roads_map[n + 93] = None\n    roads_map[n + 94] = None\n    roads_map[n + 95] = None\n    roads_map[n + 96] = None\n    roads_map[n + 97] = None\n    roads_map[n + 98] = None\n    roads_map[n + 99] = None\n    roads_map[n + 100"
    },
    {
        "number": 1840,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 1841,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    l = [int(x) for x in stdin.split()]\n    a.sort()\n    l.sort()\n    a = [0] + a\n    l = [0] + l\n    a = [0] + a\n    l = [0] + l\n    a = [0] + a\n    l = [0] + l\n    a = [0] + a\n    l = [0] + l\n    a = [0] + a\n    l = [0] + l\n    a = [0] + a\n    l = [0] + l\n    a = [0] + a\n    l = [0] + l\n    a = [0] + a\n    l = [0] + l\n    a = [0] + a\n    l = [0] + l\n    a = [0] + a\n    l = [0] + l\n    a = [0] + a\n    l = [0] + l\n    a = [0] + a\n    l = [0] + l\n    a = [0] + a\n    l = [0] + l\n    a = [0] + a\n    l = [0] + l\n    a = [0] + a\n    l = [0] + l\n    a = [0] + a\n    l = [0] + l\n    a = [0] + a\n    l = [0] + l\n    a = [0] + a\n    l = [0] + l\n    a = [0] + a\n    l = [0] + l\n    a = [0] + a\n    l = [0] + l\n    a = [0] + a\n    l = [0] + l\n    a = [0] + a\n    l = [0] + l\n    a = [0] + a\n    l = [0] + l\n    a = [0] + a\n    l = [0] + l\n    a = [0] + a\n    l = [0] + l\n    a = [0] + a\n    l = [0] + l\n    a = [0] + a\n    l = [0] + l\n    a = [0] + a\n    l = [0] + l\n    a = [0] + a\n    l = [0] + l\n    a = [0] + a\n    l = [0] + l\n    a = [0] + a\n    l = [0] + l\n    a = [0] + a\n    l = [0] + l\n    a = [0] + a\n    l = [0] + l\n    a = [0] + a\n    l = [0] + l\n    a = [0] + a\n    l = [0] + l\n    a = [0] + a\n    l = [0] + l\n    a = [0] + a\n    l = [0] + l\n    a = [0] + a\n    l = [0] + l\n    a = [0] + a\n    l = [0] + l\n    a = [0] + a\n    l = [0] + l\n    a = [0] + a\n    l = [0] + l\n    a = [0] + a\n    l = [0] + l\n    a = [0] + a\n    l = [0] + l\n    a = [0] + a\n    l = [0] + l\n    a = [0] + a\n    l = [0] + l\n    a = [0] + a\n    l = [0] + l\n    a = [0] + a\n    l = [0] + l\n    a = [0] + a\n    l = [0] + l\n    a = [0] + a\n    l = [0] + l\n    a = [0] + a\n    l = [0] + l\n    a = [0] + a\n    l = [0] + l\n    a = [0] + a\n    l = [0] + l\n    a = [0] + a\n    l = [0] + l\n    a = [0] + a\n    l = [0] + l\n    a = [0] + a\n    l = [0] + l\n    a = [0] + a\n    l = [0] + l\n    a = [0] + a\n    l = [0] + l\n    a = [0] + a\n    l = [0] + l\n    a = [0] + a\n    l = [0] + l\n    a = [0] + a\n    l = [0] + l\n    a = [0] + a\n    l = [0] + l\n    a = [0] + a\n    l = [0] + l\n    a = [0] + a\n    l = [0] + l\n    a = [0] + a\n    l = [0] + l\n    a = [0] + a\n    l = [0] + l\n    a = [0] + a\n    l = [0] + l\n    a = [0] + a\n    l = [0] + l\n    a = [0] + a\n    l = [0] + l\n    a = [0] + a\n    l = [0] + l\n    a = [0] + a\n    l = [0] + l\n    a = [0] + a\n    l = [0] + l\n    a = [0] + a\n    l = [0] + l\n    a = [0] + a\n    l = [0] + l\n    a = [0] + a\n    l = [0] + l\n    a = [0] + a\n    l = [0] + l\n    a = [0] + a\n    l = [0] + l\n    a = [0] + a\n    l = [0] + l\n    a = [0] + a\n    l = [0] + l\n    a = [0] + a\n    l = [0] + l\n    a = [0] + a\n    l = [0] + l\n    a = [0] + a\n    l = [0] + l\n    a = [0] + a\n    l = [0] + l\n    a = [0] + a\n    l = [0] + l\n    a = [0] + a\n    l = [0] + l\n    a = [0] + a\n    l = [0] + l\n    a = [0] + a\n    l = [0] + l\n    a = [0] + a\n    l = [0] + l\n    a = [0] + a\n    l"
    },
    {
        "number": 1842,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(x) for x in stdin.split()]\n    if a == 0:\n        return '0'\n    if a == 1:\n        return '-1'\n    if a == -1:\n        return '1'\n    if a == -2:\n        return '-2'\n    if a == -3:\n        return '-3'\n    if a == -4:\n        return '-4'\n    if a == -5:\n        return '-5'\n    if a == -6:\n        return '-6'\n    if a == -7:\n        return '-7'\n    if a == -8:\n        return '-8'\n    if a == -9:\n        return '-9'\n    if a == -10:\n        return '-10'\n    if a == -11:\n        return '-11'\n    if a == -12:\n        return '-12'\n    if a == -13:\n        return '-13'\n    if a == -14:\n        return '-14'\n    if a == -15:\n        return '-15'\n    if a == -16:\n        return '-16'\n    if a == -17:\n        return '-17'\n    if a == -18:\n        return '-18'\n    if a == -19:\n        return '-19'\n    if a == -20:\n        return '-20'\n    if a == -21:\n        return '-21'\n    if a == -22:\n        return '-22'\n    if a == -23:\n        return '-23'\n    if a == -24:\n        return '-24'\n    if a == -25:\n        return '-25'\n    if a == -26:\n        return '-26'\n    if a == -27:\n        return '-27'\n    if a == -28:\n        return '-28'\n    if a == -29:\n        return '-29'\n    if a == -30:\n        return '-30'\n    if a == -31:\n        return '-31'\n    if a == -32:\n        return '-32'\n    if a == -33:\n        return '-33'\n    if a == -34:\n        return '-34'\n    if a == -35:\n        return '-35'\n    if a == -36:\n        return '-36'\n    if a == -37:\n        return '-37'\n    if a == -38:\n        return '-38'\n    if a == -39:\n        return '-39'\n    if a == -40:\n        return '-40'\n    if a == -41:\n        return '-41'\n    if a == -42:\n        return '-42'\n    if a == -43:\n        return '-43'\n    if a == -44:\n        return '-44'\n    if a == -45:\n        return '-45'\n    if a == -46:\n        return '-46'\n    if a == -47:\n        return '-47'\n    if a == -48:\n        return '-48'\n    if a == -49:\n        return '-49'\n    if a == -50:\n        return '-50'\n    if a == -51:\n        return '-51'\n    if a == -52:\n        return '-52'\n    if a == -53:\n        return '-53'\n    if a == -54:\n        return '-54'\n    if a == -55:\n        return '-55'\n    if a == -56:\n        return '-56'\n    if a == -57:\n        return '-57'\n    if a == -58:\n        return '-58'\n    if a == -59:\n        return '-59'\n    if a == -60:\n        return '-60'\n    if a == -61:\n        return '-61'\n    if a == -62:\n        return '-62'\n    if a == -63:\n        return '-63'\n    if a == -64:\n        return '-64'\n    if a == -65:\n        return '-65'\n    if a == -66:\n        return '-66'\n    if a == -67:\n        return '-67'\n    if a == -68:\n        return '-68'\n    if a == -69:\n        return '-69'\n    if a == -70:\n        return '-70'\n    if a == -71:\n        return '-71'\n    if a == -72:\n        return '-72'\n    if a == -73:\n        return '-73'\n    if a == -74:\n        return '-74'\n    if a == -75:\n        return '-75'\n    if a == -76:\n        return '-76'\n    if a == -77:\n        return '-77'\n    if a == -78:\n        return '-78'\n    if a == -79:\n        return '-79'\n    if a == -80:\n        return '-80'\n    if a == -81:\n        return '-81'\n    if a == -82:\n        return '-82'\n    if a == -83:\n        return '-83'\n    if a == -84:\n        return '-84'\n    if a == -85:\n        return '-85'\n    if a == -86:\n        return '-86'\n    if a == -87:\n        return '-87'\n    if a == -88:\n        return '-88'\n    if a == -89:\n        return '-89'\n    if a == -90:\n        return '-90'\n    if a == -91:\n        return '-91'\n    if a == -92:\n        return '-92'\n    if a == -93:\n        return '-93'\n    if a == -94:\n        return '-94'\n    if a == -95:\n        return '-95'\n    if a == -96:\n        return '-96'\n    if a == -97:\n        return '-97'\n    if a == -98:\n        return '-98'\n    if a == -99:\n        return '-99'\n    if a == -100:\n        return '-100'\n    if a == -101:\n        return '-101'\n    if a == -102:\n        return '-102'\n    if a == -103:\n        return '-103'\n    if a == -104:\n        return '-104'\n    if a == -105:\n        return '-105'\n    if a == -106:\n        return '-106'\n    if a == -107:\n        return '-107'\n    if a == -108:\n        return '-108'\n    if a == -109:\n        return '-109'\n    if a == -110:\n        return '-110'\n    if a == -111:\n        return '-111'\n    if a == -112:\n        return '-112'\n    if a == -113:\n        return '-113'\n    if a == -114:\n        return '-114'\n    if a == -115:\n        return '-115'\n    if a == -116:\n        return '-116'\n    if a == -117"
    },
    {
        "number": 1843,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = 0\n    for i in range(1, n + 1):\n        s += i * i\n    return str(s)"
    },
    {
        "number": 1844,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    gcd = 1\n    for i in range(1, n):\n        gcd = gcd * a[i] // gcd\n    if gcd == 1:\n        return -1\n    else:\n        return gcd"
    },
    {
        "number": 1845,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    a.reverse()\n    res = 0\n    for i in range(n):\n        res += a[i] * (n - i)\n    return str(res)"
    },
    {
        "number": 1846,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    t = [int(x) for x in stdin.readline().split()]\n    \n    # t[i] < 0 iff t[i] < t[i-1]\n    # t[i] > 0 iff t[i] > t[i-1]\n    # t[i] = 0 iff t[i] = t[i-1]\n    \n    # t[i] < 0 iff t[i] < t[i-1]\n    # t[i] > 0 iff t[i] > t[i-1]\n    # t[i] = 0 iff t[i] = t[i-1]\n    \n    # t[i] < 0 iff t[i] < t[i-1]\n    # t[i] > 0 iff t[i] > t[i-1]\n    # t[i] = 0 iff t[i] = t[i-1]\n    \n    # t[i] < 0 iff t[i] < t[i-1]\n    # t[i] > 0 iff t[i] > t[i-1]\n    # t[i] = 0 iff t[i] = t[i-1]\n    \n    # t[i] < 0 iff t[i] < t[i-1]\n    # t[i] > 0 iff t[i] > t[i-1]\n    # t[i] = 0 iff t[i] = t[i-1]\n    \n    # t[i] < 0 iff t[i] < t[i-1]\n    # t[i] > 0 iff t[i] > t[i-1]\n    # t[i] = 0 iff t[i] = t[i-1]\n    \n    # t[i] < 0 iff t[i] < t[i-1]\n    # t[i] > 0 iff t[i] > t[i-1]\n    # t[i] = 0 iff t[i] = t[i-1]\n    \n    # t[i] < 0 iff t[i] < t[i-1]\n    # t[i] > 0 iff t[i] > t[i-1]\n    # t[i] = 0 iff t[i] = t[i-1]\n    \n    # t[i] < 0 iff t[i] < t[i-1]\n    # t[i] > 0 iff t[i] > t[i-1]\n    # t[i] = 0 iff t[i] = t[i-1]\n    \n    # t[i] < 0 iff t[i] < t[i-1]\n    # t[i] > 0 iff t[i] > t[i-1]\n    # t[i] = 0 iff t[i] = t[i-1]\n    \n    # t[i] < 0 iff t[i] < t[i-1]\n    # t[i] > 0 iff t[i] > t[i-1]\n    # t[i] = 0 iff t[i] = t[i-1]\n    \n    # t[i] < 0 iff t[i] < t[i-1]\n    # t[i] > 0 iff t[i] > t[i-1]\n    # t[i] = 0 iff t[i] = t[i-1]\n    \n    # t[i] < 0 iff t[i] < t[i-1]\n    # t[i] > 0 iff t[i] > t[i-1]\n    # t[i] = 0 iff t[i] = t[i-1]\n    \n    # t[i] < 0 iff t[i] < t[i-1]\n    # t[i] > 0 iff t[i] > t[i-1]\n    # t[i] = 0 iff t[i] = t[i-1]\n    \n    # t[i] < 0 iff t[i] < t[i-1]\n    # t[i] > 0 iff t[i] > t[i-1]\n    # t[i] = 0 iff t[i] = t[i-1]\n    \n    # t[i] < 0 iff t[i] < t[i-1]\n    # t[i] > 0 iff t[i] > t[i-1]\n    # t[i] = 0 iff t[i] = t[i-1]\n    \n    # t[i] < 0 iff t[i] < t[i-1]\n    # t[i] > 0 iff t[i] > t[i-1]\n    # t[i] = 0 iff t[i] = t[i-1]\n    \n    # t[i] < 0 iff t[i] < t[i-1]\n    # t[i] > 0 iff t[i] > t[i-1]\n    # t[i] = 0 iff t[i] = t[i-1]\n    \n    # t[i] < 0 iff t[i] < t[i-1]\n    # t[i] > 0 iff t[i] > t[i-1]\n    # t[i] = 0 iff t[i] = t[i-1]\n    \n    # t[i] < 0 iff t[i] < t[i-1]\n    # t[i] > 0 iff t[i] > t[i-1]\n    # t[i] = 0 iff t[i] = t[i-1]\n    \n    # t[i] < 0 iff t[i] < t[i-1]\n    # t[i] > 0 iff t[i] > t[i-1]\n    # t[i] = 0 iff t[i] = t[i-1]\n    \n    # t[i] < 0 iff t[i] < t[i-1]\n    # t[i] > 0 iff t["
    },
    {
        "number": 1847,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x_0, y_0, x_1, y_1 = [int(x) for x in stdin.split()]\n    n = int(stdin.readline())\n    segments = [tuple(int(x) for x in stdin.split()) for _ in range(n)]\n    return solve(x_0, y_0, x_1, y_1, segments)\n\ndef"
    },
    {
        "number": 1848,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    a.sort()\n    res = 0\n    for i in range(n):\n        if a[i] + 1 > a[i]:\n            res += 1\n    return str(res)"
    },
    {
        "number": 1849,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return''.join(str(n - i) for i in range(1, n + 1))"
    },
    {
        "number": 1850,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, D = [int(x) for x in stdin.split()]\n    S = [int(x) for x in stdin.split()]\n    P = [int(x) for x in stdin.split()]\n    S.sort()\n    P.sort()\n    S.reverse()\n    P.reverse()\n    for i in range(N):\n        if S[i] < P[i]:\n            S[i] = P[i]\n    return str(sum(S))\n\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input())"
    },
    {
        "number": 1851,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    i = 0\n    while i < n:\n        if a[i] == i:\n            i += 1\n        else:\n            break\n    return str(i)"
    },
    {
        "number": 1852,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 2 or n > 17:\n        return \"0\"\n    tree = [[] for _ in range(2 ** n - 1)]\n    for _ in range(2 ** n - 3):\n        a, b = [int(x) for x in stdin.split()]\n        tree[a - 1].append(b - 1)\n        tree[b - 1].append(a - 1)\n    visited = [False] * (2 ** n - 1)\n    visited[0] = True\n    answers = []\n    for i in range(2 ** n - 1):\n        if visited[i]:\n            continue\n        visited[i] = True\n        answers.append(i)\n        stack = [i]\n        while stack:\n            v = stack.pop()\n            for u in tree[v]:\n                if visited[u]:\n                    continue\n                visited[u] = True\n                stack.append(u)\n    return \" \".join(map(str, answers))"
    },
    {
        "number": 1853,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    if m == 0:\n        return \"NO\"\n    a = [int(x) for x in stdin.split()]\n    b = [int(x) for x in stdin.split()]\n    a.sort()\n    b.sort()\n    if a[0]!= b[0]:\n        return \"NO\"\n    if a[-1]!= b[-1]:\n        return \"NO\"\n    if a[-1] == b[-1]:\n        return \"YES\"\n    if a[-1]!= a[-2]:\n        return \"YES\"\n    if a[-1] == a[-2]:\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 1854,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    if n < 3:\n        return \"NO\"\n    if n == 3:\n        if a[0] == a[1] == a[2]:\n            return \"NO\"\n        if a[0] == a[1] or a[0] == a[2] or a[1] == a[2]:\n            return \"NO\"\n        return \"YES\"\n    if n == 4:\n        if a[0] == a[1] == a[2] == a[3]:\n            return \"NO\"\n        if a[0] == a[1] or a[0] == a[2] or a[0] == a[3] or a[1] == a[2] or a[1] == a[3] or a[2] == a[3]:\n            return \"NO\"\n        return \"YES\"\n    if n == 5:\n        if a[0] == a[1] == a[2] == a[3] == a[4]:\n            return \"NO\"\n        if a[0] == a[1] or a[0] == a[2] or a[0] == a[3] or a[0] == a[4] or a[1] == a[2] or a[1] == a[3] or a[1] == a[4] or a[2] == a[3] or a[2] == a[4] or a[3] == a[4]:\n            return \"NO\"\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 1855,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    p = [int(x) for x in stdin.split()]\n    \n    # Partition value is the sum of the maximum values of the partitions\n    # with the same partition value.\n    partition_value = 0\n    \n    # Number of partitions with the same partition value.\n    partitions_with_same_partition_value = 0\n    \n    # For each partition, find the maximum value of the partition\n    # and increment the number of partitions with the same partition\n    # value.\n    for i in range(1, n + 1):\n        for j in range(i, n + 1):\n            if p[i - 1] <= j <= p[j - 1]:\n                partition_value += max(p[i - 1], p[j - 1])\n                partitions_with_same_partition_value += 1\n    \n    # The number of partitions with the same partition value is the\n    # number of partitions with the same partition value modulo\n    # $998\\,244\\,353$.\n    return str(partition_value % (998244353)) +'' + str(partitions_with_same_partition_value)"
    },
    {
        "number": 1856,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nIn the third example hacker need to use only one password to access the system.\ndef"
    },
    {
        "number": 1857,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(n * (n - 1) * (n - 2) * (n - 3) // 4)"
    },
    {
        "number": 1858,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 2:\n        return \"No\"\n    if n == 2:\n        return \"Yes\"\n    if n == 3:\n        return \"Yes\"\n    if n == 4:\n        return \"Yes\"\n    if n == 5:\n        return \"Yes\"\n    if n == 6:\n        return \"Yes\"\n    if n == 7:\n        return \"Yes\"\n    if n == 8:\n        return \"Yes\"\n    if n == 9:\n        return \"Yes\"\n    if n == 10:\n        return \"Yes\"\n    if n == 11:\n        return \"Yes\"\n    if n == 12:\n        return \"Yes\"\n    if n == 13:\n        return \"Yes\"\n    if n == 14:\n        return \"Yes\"\n    if n == 15:\n        return \"Yes\"\n    if n == 16:\n        return \"Yes\"\n    if n == 17:\n        return \"Yes\"\n    if n == 18:\n        return \"Yes\"\n    if n == 19:\n        return \"Yes\"\n    if n == 20:\n        return \"Yes\"\n    if n == 21:\n        return \"Yes\"\n    if n == 22:\n        return \"Yes\"\n    if n == 23:\n        return \"Yes\"\n    if n == 24:\n        return \"Yes\"\n    if n == 25:\n        return \"Yes\"\n    if n == 26:\n        return \"Yes\"\n    if n == 27:\n        return \"Yes\"\n    if n == 28:\n        return \"Yes\"\n    if n == 29:\n        return \"Yes\"\n    if n == 30:\n        return \"Yes\"\n    if n == 31:\n        return \"Yes\"\n    if n == 32:\n        return \"Yes\"\n    if n == 33:\n        return \"Yes\"\n    if n == 34:\n        return \"Yes\"\n    if n == 35:\n        return \"Yes\"\n    if n == 36:\n        return \"Yes\"\n    if n == 37:\n        return \"Yes\"\n    if n == 38:\n        return \"Yes\"\n    if n == 39:\n        return \"Yes\"\n    if n == 40:\n        return \"Yes\"\n    if n == 41:\n        return \"Yes\"\n    if n == 42:\n        return \"Yes\"\n    if n == 43:\n        return \"Yes\"\n    if n == 44:\n        return \"Yes\"\n    if n == 45:\n        return \"Yes\"\n    if n == 46:\n        return \"Yes\"\n    if n == 47:\n        return \"Yes\"\n    if n == 48:\n        return \"Yes\"\n    if n == 49:\n        return \"Yes\"\n    if n == 50:\n        return \"Yes\"\n    if n == 51:\n        return \"Yes\"\n    if n == 52:\n        return \"Yes\"\n    if n == 53:\n        return \"Yes\"\n    if n == 54:\n        return \"Yes\"\n    if n == 55:\n        return \"Yes\"\n    if n == 56:\n        return \"Yes\"\n    if n == 57:\n        return \"Yes\"\n    if n == 58:\n        return \"Yes\"\n    if n == 59:\n        return \"Yes\"\n    if n == 60:\n        return \"Yes\"\n    if n == 61:\n        return \"Yes\"\n    if n == 62:\n        return \"Yes\"\n    if n == 63:\n        return \"Yes\"\n    if n == 64:\n        return \"Yes\"\n    if n == 65:\n        return \"Yes\"\n    if n == 66:\n        return \"Yes\"\n    if n == 67:\n        return \"Yes\"\n    if n == 68:\n        return \"Yes\"\n    if n == 69:\n        return \"Yes\"\n    if n == 70:\n        return \"Yes\"\n    if n == 71:\n        return \"Yes\"\n    if n == 72:\n        return \"Yes\"\n    if n == 73:\n        return \"Yes\"\n    if n == 74:\n        return \"Yes\"\n    if n == 75:\n        return \"Yes\"\n    if n == 76:\n        return \"Yes\"\n    if n == 77:\n        return \"Yes\"\n    if n == 78:\n        return \"Yes\"\n    if n == 79:\n        return \"Yes\"\n    if n == 80:\n        return \"Yes\"\n    if n == 81:\n        return \"Yes\"\n    if n == 82:\n        return \"Yes\"\n    if n == 83:\n        return \"Yes\"\n    if n == 84:\n        return \"Yes\"\n    if n == 85:\n        return \"Yes\"\n    if n == 86:\n        return \"Yes\"\n    if n == 87:\n        return \"Yes\"\n    if n == 88:\n        return \"Yes\"\n    if n == 89:\n        return \"Yes\"\n    if n == 90:\n        return \"Yes\"\n    if n == 91:\n        return \"Yes\"\n    if n == 92:\n        return \"Yes\"\n    if n == 93:\n        return \"Yes\"\n    if n == 94:\n        return \"Yes\"\n    if n == 95:\n        return \"Yes\"\n    if n == 96:\n        return \"Yes\"\n    if n == 97:\n        return \"Yes\"\n    if n == 98:\n        return \"Yes\"\n    if n == 99:\n        return \"Yes\"\n    if n == 100:\n        return \"Yes\"\n    if n == 101:\n        return \"Yes\"\n    if n == 102:\n        return \"Yes\"\n    if n == 103:\n        return \"Yes\"\n    if n == 104:\n        return \"Yes\"\n    if n == 105:\n        return \"Yes\"\n    if n == 106:\n        return \"Yes\"\n    if n == 107:\n        return \"Yes\"\n    if n == 108:\n        return \"Yes\"\n    if n == 109:\n        return \"Yes\"\n    if n == 110:\n        return \"Yes\"\n    if n == 111:\n        return \"Yes\"\n    if n == 112:\n        return \"Yes\"\n    if n == 113:\n        return \"Yes\"\n    if n == 114:\n        return \"Yes\"\n    if n == 115:\n        return \"Yes\"\n    if n == 116:\n        return \"Yes\"\n    if n == 117:\n        return \"Yes\"\n    if n == 118:\n        return \"Yes\"\n    if n == 119:\n        return \"Yes\"\n    if n == 120:\n        return \"Yes\"\n    if n == 121:\n        return \"Yes\"\n    if n == 122:\n        return \"Yes\"\n    if n == 123:\n        return \"Yes\"\n    if n == 124:\n        return \"Yes\"\n    if n == 125:\n        return \"Yes\"\n    if n =="
    },
    {
        "number": 1859,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"0\"\n    count = 0\n    while n > 1:\n        if n % 2 == 0:\n            n = n / 2\n            count += 1\n        else:\n            n = n - 1\n            count += 1\n    return str(count)"
    },
    {
        "number": 1860,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(n * (n + 1) // 2)"
    },
    {
        "number": 1861,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    cards = [stdin.split()[i] for i in range(n)]\n    return str(solution_recursive(cards, k))\n\ndef"
    },
    {
        "number": 1862,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    socks = [int(x) for x in stdin.readline().split()]\n    socks.sort()\n    table = []\n    for i in range(n):\n        if socks[i] in table:\n            continue\n        else:\n            table.append(socks[i])\n    return str(len(table))"
    },
    {
        "number": 1863,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    eggs = [int(stdin.readline()) for _ in range(n)]\n    eggs.sort()\n    if n == 1:\n        return \"A\"\n    if n == 2:\n        return \"G\"\n    if n == 3:\n        return \"AG\"\n    if n == 4:\n        return \"AGA\"\n    if n == 5:\n        return \"AGAG\"\n    if n == 6:\n        return \"AGAGA\"\n    if n == 7:\n        return \"AGAGAG\"\n    if n == 8:\n        return \"AGAGAGA\"\n    if n == 9:\n        return \"AGAGAGAG\"\n    if n == 10:\n        return \"AGAGAGAGA\"\n    if n == 11:\n        return \"AGAGAGAGAG\"\n    if n == 12:\n        return \"AGAGAGAGAGA\"\n    if n == 13:\n        return \"AGAGAGAGAGAG\"\n    if n == 14:\n        return \"AGAGAGAGAGAGA\"\n    if n == 15:\n        return \"AGAGAGAGAGAGAG\"\n    if n == 16:\n        return \"AGAGAGAGAGAGAGA\"\n    if n == 17:\n        return \"AGAGAGAGAGAGAGAG\"\n    if n == 18:\n        return \"AGAGAGAGAGAGAGAGA\"\n    if n == 19:\n        return \"AGAGAGAGAGAGAGAGAG\"\n    if n == 20:\n        return \"AGAGAGAGAGAGAGAGAGAG\"\n    if n == 21:\n        return \"AGAGAGAGAGAGAGAGAGAGAG\"\n    if n == 22:\n        return \"AGAGAGAGAGAGAGAGAGAGAGAG\"\n    if n == 23:\n        return \"AGAGAGAGAGAGAGAGAGAGAGAGAG\"\n    if n == 24:\n        return \"AGAGAGAGAGAGAGAGAGAGAGAGAGAG\"\n    if n == 25:\n        return \"AGAGAGAGAGAGAGAGAGAGAGAGAGAGAG\"\n    if n == 26:\n        return \"AGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAG\"\n    if n == 27:\n        return \"AGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAG\"\n    if n == 28:\n        return \"AGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAG\"\n    if n == 29:\n        return \"AGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAG\"\n    if n == 30:\n        return \"AGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAG\"\n    if n == 31:\n        return \"AGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAG\"\n    if n == 32:\n        return \"AGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAG\"\n    if n == 33:\n        return \"AGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAG\"\n    if n == 34:\n        return \"AGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAG\"\n    if n == 35:\n        return \"AGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAG\"\n    if n == 36:\n        return \"AGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAG\"\n    if n == 37:\n        return \"AGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAG\"\n    if n == 38:\n        return \"AGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAG\"\n    if n == 39:\n        return \"AGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAG\"\n    if n == 40:\n        return \"AGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAG\"\n    if n == 41:\n        return \"AGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAG\"\n    if n == 42:\n        return \"AGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAG\"\n    if n == 43:\n        return \"AGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAG\"\n    if n == 44:\n        return \"AGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAG\"\n    if n == 45:\n        return \"AGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAG\"\n    if n == 46:\n        return \"AGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAG\"\n    if n == 47:\n        return \"AGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAG\"\n    if n == 48:\n        return \"AGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAG\"\n    if n == 49:\n        return \"AGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAG\"\n    if n == 50:\n        return \"AGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAG\"\n    if n == 51:\n        return \"AGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAG\"\n    if n == 52:\n        return \"AGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAG\"\n    if n == 53:\n        return \"AGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAG\"\n    if n == 54:\n        return \""
    },
    {
        "number": 1864,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    a.reverse()\n    s = 0\n    for i in range(n):\n        s += a[i] * (10 ** i)\n    return str(s)\n\nassert(solution('''5\n1 2 3 4 5''') == '-1')\nassert(solution('''1\n1''') == '1')\nassert(solution('''1\n2''') == '2')\nassert(solution('''1\n2\n3''') == '6')\nassert(solution('''1\n2\n3\n4''') == '10')\nassert(solution('''1\n2\n3\n4\n5''') == '15')\nassert(solution('''1\n2\n3\n4\n5\n6''') == '21')\nassert(solution('''1\n2\n3\n4\n5\n6\n7''') == '28')\nassert(solution('''1\n2\n3\n4\n5\n6\n7\n8''') == '36')\nassert(solution('''1\n2\n3\n4\n5\n6\n7\n8\n9''') == '45')\nassert(solution('''1\n2\n3\n4\n5\n6\n7\n8\n9\n10''') == '50')\nassert(solution('''1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11''') == '55')\nassert(solution('''1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12''') == '60')\nassert(solution('''1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13''') == '65')\nassert(solution('''1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14''') == '70')\nassert(solution('''1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15''') == '75')\nassert(solution('''1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16''') == '80')\nassert(solution('''1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17''') == '85')\nassert(solution('''1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18''') == '90')\nassert(solution('''1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19''') == '95')\nassert(solution('''1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20''') == '100')\nassert(solution('''1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21''') == '105')\nassert(solution('''1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22''') == '110')\nassert(solution('''1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23''') == '115')\nassert(solution('''1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24''') == '120')\nassert(solution('''1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25''') == '125')\nassert(solution('''1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26''') == '130')\nassert(solution('''1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27''') == '135')\nassert(solution('''1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28''') == '140')\nassert(solution('''1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29''') == '145')\nassert(solution('''1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30''') == '150')\nassert(solution('''1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31''') == '155')\nassert(solution('''1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32''') == '160')\nassert(solution('''1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33''') == '165')\nassert(solution('''1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34''') == '170')\nassert(solution('''1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35''') == '"
    },
    {
        "number": 1865,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    arr.sort()\n    swaps = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n                swaps += 1\n                break\n    return str(swaps)"
    },
    {
        "number": 1866,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [i for i in range(1, n + 1)]\n    q = int(stdin)\n    for _ in range(q):\n        x, y = [int(x) for x in stdin.split()]\n        a[x - 1], a[y - 1] = a[y - 1], a[x - 1]\n    return '\\n'.join(f'{x} {y}' for x, y in zip(a[::2], a[1::2]))"
    },
    {
        "number": 1867,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    l = 0\n    r = n - 1\n    while l < r:\n        if a[l] + l - 1 == a[r]:\n            return str(l + 1) + \" \" + str(r + 1)\n        elif a[l] + l - 1 < a[r]:\n            l += 1\n        else:\n            r -= 1\n    return str(l + 1) + \" \" + str(r + 1)"
    },
    {
        "number": 1868,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, a = map(int, stdin.split())\n    b = list(map(int, stdin.split()))\n    return str(len(set(a[i] for i in range(n) for j in range(i, n, m))))"
    },
    {
        "number": 1869,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    print(a)\n    print(a[0], a[-1])\n    print(a[0] + a[-1])\n    print(a[0] * a[-1])\n    return \"\""
    },
    {
        "number": 1870,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, c = map(int, stdin.split())\n    words = [int(x) for x in stdin.split()]\n    words.sort()\n    result = 0\n    for i in range(n):\n        if i == 0:\n            result += 1\n        else:\n            if words[i] - words[i - 1] <= c:\n                result += 1\n            else:\n                break\n    return str(result)"
    },
    {
        "number": 1871,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = [int(x) for x in stdin.split()]\n    c = [int(x) for x in stdin.split()]\n    c.sort()\n    c.reverse()\n    ans = 0\n    for i in range(n):\n        ans += c[i] * x\n        x -= 1\n    return str(ans)"
    },
    {
        "number": 1872,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    return str(n * r ** 2)\n\nassert(solution(input()) == '108.395919545675')\n\nInput\n5 10\n\nOutput\n25.0\n\nassert(solution(input()) == '25.0')\n\nInput\n10 10\n\nOutput\n100.0\n\nassert(solution(input()) == '100.0')\n\nInput\n100 100\n\nOutput\n10000.0\n\nassert(solution(input()) == '10000.0')\n\nInput\n100 100\n\nOutput\n100.0\n\nassert(solution(input()) == '100.0')\n\nInput\n100 100\n\nOutput\n100.0\n\nassert(solution(input()) == '100.0')\n\nInput\n100 100\n\nOutput\n100.0\n\nassert(solution(input()) == '100.0')\n\nInput\n100 100\n\nOutput\n100.0\n\nassert(solution(input()) == '100.0')\n\nInput\n100 100\n\nOutput\n100.0\n\nassert(solution(input()) == '100.0')\n\nInput\n100 100\n\nOutput\n100.0\n\nassert(solution(input()) == '100.0')\n\nInput\n100 100\n\nOutput\n100.0\n\nassert(solution(input()) == '100.0')\n\nInput\n100 100\n\nOutput\n100.0\n\nassert(solution(input()) == '100.0')\n\nInput\n100 100\n\nOutput\n100.0\n\nassert(solution(input()) == '100.0')\n\nInput\n100 100\n\nOutput\n100.0\n\nassert(solution(input()) == '100.0')\n\nInput\n100 100\n\nOutput\n100.0\n\nassert(solution(input()) == '100.0')\n\nInput\n100 100\n\nOutput\n100.0\n\nassert(solution(input()) == '100.0')\n\nInput\n100 100\n\nOutput\n100.0\n\nassert(solution(input()) == '100.0')\n\nInput\n100 100\n\nOutput\n100.0\n\nassert(solution(input()) == '100.0')\n\nInput\n100 100\n\nOutput\n100.0\n\nassert(solution(input()) == '100.0')\n\nInput\n100 100\n\nOutput\n100.0\n\nassert(solution(input()) == '100.0')\n\nInput\n100 100\n\nOutput\n100.0\n\nassert(solution(input()) == '100.0')\n\nInput\n100 100\n\nOutput\n100.0\n\nassert(solution(input()) == '100.0')\n\nInput\n100 100\n\nOutput\n100.0\n\nassert(solution(input()) == '100.0')\n\nInput\n100 100\n\nOutput\n100.0\n\nassert(solution(input()) == '100.0')\n\nInput\n100 100\n\nOutput\n100.0\n\nassert(solution(input()) == '100.0')\n\nInput\n100 100\n\nOutput\n100.0\n\nassert(solution(input()) == '100.0')\n\nInput\n100 100\n\nOutput\n100.0\n\nassert(solution(input()) == '100.0')\n\nInput\n100 100\n\nOutput\n100.0\n\nassert(solution(input()) == '100.0')\n\nInput\n100 100\n\nOutput\n100.0\n\nassert(solution(input()) == '100.0')\n\nInput\n100 100\n\nOutput\n100.0\n\nassert(solution(input()) == '100.0')\n\nInput\n100 100\n\nOutput\n100.0\n\nassert(solution(input()) == '100.0')\n\nInput\n100 100\n\nOutput\n100.0\n\nassert(solution(input()) == '100.0')\n\nInput\n100 100\n\nOutput\n100.0\n\nassert(solution(input()) == '100.0')\n\nInput\n100 100\n\nOutput\n100.0\n\nassert(solution(input()) == '100.0')\n\nInput\n100 100\n\nOutput\n100.0\n\nassert(solution(input()) == '100.0')\n\nInput\n100 100\n\nOutput\n100.0\n\nassert(solution(input()) == '100.0')\n\nInput\n100 100\n\nOutput\n100.0\n\nassert(solution(input()) == '100.0')\n\nInput\n100 100\n\nOutput\n100.0\n\nassert(solution(input()) == '100.0')\n\nInput\n100 100\n\nOutput\n100.0\n\nassert(solution(input()) == '100.0')\n\nInput\n100 100\n\nOutput\n100.0\n\nassert(solution(input()) == '100.0')\n\nInput\n100 100\n\nOutput\n100.0\n\nassert(solution(input()) == '100.0')\n\nInput\n100 100\n\nOutput\n100.0\n\nassert(solution(input()) == '100.0')\n\nInput\n100 100\n\nOutput\n100.0\n\nassert(solution(input()) == '100.0')\n\nInput\n100 100\n\nOutput\n100.0\n\nassert(solution(input()) == '100.0')\n\nInput\n100 100\n\nOutput\n100.0\n\nassert(solution(input()) == '100.0')\n\nInput\n100 100\n\nOutput\n100.0\n\nassert(solution(input()) == '100.0')\n\nInput\n100 100\n\nOutput\n100.0\n\nassert(solution(input()) == '100.0')\n\nInput\n100 100\n\nOutput\n100.0\n\nassert(solution(input()) == '100.0')\n\nInput\n100 100\n\nOutput\n100.0\n\nassert(solution(input()) == '100.0')\n\nInput\n100 100\n\nOutput\n100.0\n\nassert(solution(input()) == '100.0')\n\nInput\n100 100\n\nOutput\n100.0\n\nassert(solution(input()) == '100.0')\n\nInput\n100 100\n\nOutput\n100.0\n\nassert(solution(input()) == '100.0')\n\nInput\n100 100\n\nOutput\n100.0\n\nassert(solution(input()) == '100.0')\n\nInput\n100 100\n\nOutput\n100.0\n\nassert(solution(input()) == '100.0')\n\nInput\n100 100\n\nOutput\n100.0\n\nassert(solution(input()) == '100.0')\n\nInput\n100 100\n\nOutput\n100.0\n\nassert(solution(input()) == '100.0')\n\nInput\n100 100\n\nOutput\n100.0\n\nassert(solution(input()) == '100.0')\n\nInput\n100 100\n\nOutput\n100.0\n\nassert(solution(input()) == '100.0')\n\nInput\n100 100\n\nOutput\n100.0\n\nassert(solution(input()) == '100.0')\n\nInput\n100 100\n\nOutput\n100.0\n\nassert(solution(input()) == '100.0')\n\nInput\n100 100\n\nOutput\n100.0\n\nassert(solution(input()) == '100.0')\n\nInput\n100 100\n\nOutput\n100.0\n\nassert(solution(input()) == '100.0')\n\nInput\n100 100\n\nOutput\n100.0\n\nassert(solution(input()) == '100.0')\n\nInput\n100 100"
    },
    {
        "number": 1873,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    a.reverse()\n    a = [0] + a\n    dp = [[0 for _ in range(m + 1)] for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if a[i] == j:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n    return str(dp[n][m])\n\nprint(solution(input()))\n"
    },
    {
        "number": 1874,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l_3, l_4, l_5 = map(int, stdin.split())\n    return str(l_3 * l_4 * l_5 / 6)\n\nassert(solution(input()) == '38.546168065709')\n\nInput\n3 4 5\n\nOutput\n21.0\n\nassert(solution(input()) == '21.0')\n\nInput\n3 5 3\n\nOutput\n21.0\n\nassert(solution(input()) == '21.0')\n\nInput\n3 5 3\n\nOutput\n21.0\n\nassert(solution(input()) == '21.0')\n\nInput\n3 5 3\n\nOutput\n21.0\n\nassert(solution(input()) == '21.0')\n\nInput\n3 5 3\n\nOutput\n21.0\n\nassert(solution(input()) == '21.0')\n\nInput\n3 5 3\n\nOutput\n21.0\n\nassert(solution(input()) == '21.0')\n\nInput\n3 5 3\n\nOutput\n21.0\n\nassert(solution(input()) == '21.0')\n\nInput\n3 5 3\n\nOutput\n21.0\n\nassert(solution(input()) == '21.0')\n\nInput\n3 5 3\n\nOutput\n21.0\n\nassert(solution(input()) == '21.0')\n\nInput\n3 5 3\n\nOutput\n21.0\n\nassert(solution(input()) == '21.0')\n\nInput\n3 5 3\n\nOutput\n21.0\n\nassert(solution(input()) == '21.0')\n\nInput\n3 5 3\n\nOutput\n21.0\n\nassert(solution(input()) == '21.0')\n\nInput\n3 5 3\n\nOutput\n21.0\n\nassert(solution(input()) == '21.0')\n\nInput\n3 5 3\n\nOutput\n21.0\n\nassert(solution(input()) == '21.0')\n\nInput\n3 5 3\n\nOutput\n21.0\n\nassert(solution(input()) == '21.0')\n\nInput\n3 5 3\n\nOutput\n21.0\n\nassert(solution(input()) == '21.0')\n\nInput\n3 5 3\n\nOutput\n21.0\n\nassert(solution(input()) == '21.0')\n\nInput\n3 5 3\n\nOutput\n21.0\n\nassert(solution(input()) == '21.0')\n\nInput\n3 5 3\n\nOutput\n21.0\n\nassert(solution(input()) == '21.0')\n\nInput\n3 5 3\n\nOutput\n21.0\n\nassert(solution(input()) == '21.0')\n\nInput\n3 5 3\n\nOutput\n21.0\n\nassert(solution(input()) == '21.0')\n\nInput\n3 5 3\n\nOutput\n21.0\n\nassert(solution(input()) == '21.0')\n\nInput\n3 5 3\n\nOutput\n21.0\n\nassert(solution(input()) == '21.0')\n\nInput\n3 5 3\n\nOutput\n21.0\n\nassert(solution(input()) == '21.0')\n\nInput\n3 5 3\n\nOutput\n21.0\n\nassert(solution(input()) == '21.0')\n\nInput\n3 5 3\n\nOutput\n21.0\n\nassert(solution(input()) == '21.0')\n\nInput\n3 5 3\n\nOutput\n21.0\n\nassert(solution(input()) == '21.0')\n\nInput\n3 5 3\n\nOutput\n21.0\n\nassert(solution(input()) == '21.0')\n\nInput\n3 5 3\n\nOutput\n21.0\n\nassert(solution(input()) == '21.0')\n\nInput\n3 5 3\n\nOutput\n21.0\n\nassert(solution(input()) == '21.0')\n\nInput\n3 5 3\n\nOutput\n21.0\n\nassert(solution(input()) == '21.0')\n\nInput\n3 5 3\n\nOutput\n21.0\n\nassert(solution(input()) == '21.0')\n\nInput\n3 5 3\n\nOutput\n21.0\n\nassert(solution(input()) == '21.0')\n\nInput\n3 5 3\n\nOutput\n21.0\n\nassert(solution(input()) == '21.0')\n\nInput\n3 5 3\n\nOutput\n21.0\n\nassert(solution(input()) == '21.0')\n\nInput\n3 5 3\n\nOutput\n21.0\n\nassert(solution(input()) == '21.0')\n\nInput\n3 5 3\n\nOutput\n21.0\n\nassert(solution(input()) == '21.0')\n\nInput\n3 5 3\n\nOutput\n21.0\n\nassert(solution(input()) == '21.0')\n\nInput\n3 5 3\n\nOutput\n21.0\n\nassert(solution(input()) == '21.0')\n\nInput\n3 5 3\n\nOutput\n21.0\n\nassert(solution(input()) == '21.0')\n\nInput\n3 5 3\n\nOutput\n21.0\n\nassert(solution(input()) == '21.0')\n\nInput\n3 5 3\n\nOutput\n21.0\n\nassert(solution(input()) == '21.0')\n\nInput\n3 5 3\n\nOutput\n21.0\n\nassert(solution(input()) == '21.0')\n\nInput\n3 5 3\n\nOutput\n21.0\n\nassert(solution(input()) == '21.0')\n\nInput\n3 5 3\n\nOutput\n21.0\n\nassert(solution(input()) == '21.0')\n\nInput\n3 5 3\n\nOutput\n21.0\n\nassert(solution(input()) == '21.0')\n\nInput\n3 5 3\n\nOutput\n21.0\n\nassert(solution(input()) == '21.0')\n\nInput\n3 5 3\n\nOutput\n21.0\n\nassert(solution(input()) == '21.0')\n\nInput\n3 5 3\n\nOutput\n21.0\n\nassert(solution(input()) == '21.0')\n\nInput\n3 5 3\n\nOutput\n21.0\n\nassert(solution(input()) == '21.0')\n\nInput\n3 5 3\n\nOutput\n21.0\n\nassert(solution(input()) == '21.0')\n\nInput\n3 5 3\n\nOutput\n21.0\n\nassert(solution(input()) == '21.0')\n\nInput\n3 5 3\n\nOutput\n21.0\n\nassert(solution(input()) == '21.0')\n\nInput\n3 5 3\n\nOutput\n21.0\n\nassert(solution(input()) == '21.0')\n\nInput\n3 5 3\n\nOutput\n21.0\n\nassert(solution(input()) == '21.0')\n\nInput\n3 5 3\n\nOutput\n21.0\n\nassert(solution(input()) == '21.0')\n\nInput\n3 5 3\n\nOutput\n21.0\n\nassert(solution(input()) == '21.0')\n\nInput\n3 5 3\n\nOutput\n21.0\n\nassert(solution(input"
    },
    {
        "number": 1875,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    points = [tuple(map(int, line.split())) for line in stdin.readlines()]\n    points.sort(key=lambda p: p[0]**2 + p[1]**2)\n    max_area = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if points[i][0] == points[j][0] and points[i][1] == points[k][1]:\n                    continue\n                if points[i][0] == points[k][0] and points[i][1] == points[j][1]:\n                    continue\n                if points[j][0] == points[k][0] and points[j][1] == points[i][1]:\n                    continue\n                max_area = max(max_area, abs(points[i][0]*points[j][1] - points[j][0]*points[i][1]))\n    return str(max_area)\n\nassert(solution('''5\n0 0\n0 4\n4 0\n4 4\n2 3\n''') == '16.000000')\nassert(solution('''5\n0 0\n0 4\n4 0\n4 4\n2 3\n''') == '16.000000')\nassert(solution('''5\n0 0\n0 4\n4 0\n4 4\n2 3\n''') == '16.000000')\nassert(solution('''5\n0 0\n0 4\n4 0\n4 4\n2 3\n''') == '16.000000')\nassert(solution('''5\n0 0\n0 4\n4 0\n4 4\n2 3\n''') == '16.000000')\nassert(solution('''5\n0 0\n0 4\n4 0\n4 4\n2 3\n''') == '16.000000')\nassert(solution('''5\n0 0\n0 4\n4 0\n4 4\n2 3\n''') == '16.000000')\nassert(solution('''5\n0 0\n0 4\n4 0\n4 4\n2 3\n''') == '16.000000')\nassert(solution('''5\n0 0\n0 4\n4 0\n4 4\n2 3\n''') == '16.000000')\nassert(solution('''5\n0 0\n0 4\n4 0\n4 4\n2 3\n''') == '16.000000')\nassert(solution('''5\n0 0\n0 4\n4 0\n4 4\n2 3\n''') == '16.000000')\nassert(solution('''5\n0 0\n0 4\n4 0\n4 4\n2 3\n''') == '16.000000')\nassert(solution('''5\n0 0\n0 4\n4 0\n4 4\n2 3\n''') == '16.000000')\nassert(solution('''5\n0 0\n0 4\n4 0\n4 4\n2 3\n''') == '16.000000')\nassert(solution('''5\n0 0\n0 4\n4 0\n4 4\n2 3\n''') == '16.000000')\nassert(solution('''5\n0 0\n0 4\n4 0\n4 4\n2 3\n''') == '16.000000')\nassert(solution('''5\n0 0\n0 4\n4 0\n4 4\n2 3\n''') == '16.000000')\nassert(solution('''5\n0 0\n0 4\n4 0\n4 4\n2 3\n''') == '16.000000')\nassert(solution('''5\n0 0\n0 4\n4 0\n4 4\n2 3\n''') == '16.000000')\nassert(solution('''5\n0 0\n0 4\n4 0\n4 4\n2 3\n''') == '16.000000')\nassert(solution('''5\n0 0\n0 4\n4 0\n4 4\n2 3\n''') == '16.000000')\nassert(solution('''5\n0 0\n0 4\n4 0\n4 4\n2 3\n''') == '16.000000')\nassert(solution('''5\n0 0\n0 4\n4 0\n4 4\n2 3\n''') == '16.000000')\nassert(solution('''5\n0 0\n0 4\n4 0\n4 4\n2 3\n''') == '16.000000')\nassert(solution('''5\n0 0\n0 4\n4 0\n4 4\n2 3\n''') == '16.000000')\nassert(solution('''5\n0 0\n0 4\n4 0\n4 4\n2 3\n''') == '16.000000')\nassert(solution('''5\n0 0\n0 4\n4 0\n4 4\n2 3\n''') == '16.000000')\nassert(solution('''5\n0 0\n0 4\n4 0\n4 4\n2 3\n''') == '16.000000')\nassert(solution('''5\n0 0\n0 4\n4 0\n4 4\n2 3\n''') == '16.000000')\nassert(solution('''5\n0 0\n0 4\n4 0\n4 4\n2 3\n''') == '16.000000')\nassert(solution('''5\n0 0\n0 4\n4 0\n4 4\n2 3\n''') == '16.000000')\nassert(solution('''5\n0 0\n0 4\n4 0\n4 4\n2 3\n''') == '16.000000')\nassert(solution('''5\n0 0\n0 4\n4 0\n4 4\n2 3\n''') == '16.000000')\nassert(solution('''5\n0 0\n0 4\n4 0\n4 4\n2 3\n''') == '16.000000')\nassert(solution('''5\n0 0\n0 4\n4 0\n4 4\n2 3\n''') == '16.000000')\nassert(solution('''5\n0 0\n0 4\n4 0\n4 4\n2 3\n''') == '16.000000')\nassert(solution('''5\n0 0\n0 4\n4 0\n4 4\n2 3\n''') == '16.000000')\nassert(solution('''5\n0 0\n0 4\n4 0\n4 4\n2 3\n''') == '16.000000')\nassert(solution('''5\n0 0\n0 4\n4 0\n4 4\n2 3\n''') == '16.000000')\nassert(solution('''5\n0 0\n0 4\n4 0\n4 4\n2 3\n''') == '16.000000')\nassert(solution('''5\n0 0\n0 4\n4 0\n4 4\n2 3\n''') == '16.000000')\nassert(solution('''5\n0 0\n0 4\n4 0\n4 4\n2 3\n''') == '16.000000')\nassert(solution('''5\n0 0\n0 4\n4 0\n4 4\n2 3\n''') == '16.000000')\nassert(solution('''5\n0 0\n0 4\n4 0\n4 4\n2 3\n''') == '16.000000')\nassert(solution('''5\n0 0"
    },
    {
        "number": 1876,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    graph = [[] for _ in range(n)]\n    for _ in range(n - 1):\n        u, v, x = [int(x) for x in stdin.split()]\n        graph[u - 1].append((v - 1, x))\n        graph[v - 1].append((u - 1, x))\n    \n    def dfs(u, visited, path):\n        if u in visited:\n            return\n        visited.add(u)\n        for v, x in graph[u]:\n            if x == 0:\n                path.append(v)\n                dfs(v, visited, path)\n                path.pop()\n        return\n    \n    def is_good(path):\n        for i in range(len(path) - 1):\n            if graph[path[i]][path[i + 1]][1] == 0:\n                return False\n        return True\n    \n    def count_good(k):\n        visited = set()\n        path = []\n        dfs(0, visited, path)\n        if len(path) < k:\n            return 0\n        return sum(is_good(path[i:i + k]) for i in range(len(path) - k + 1))\n    \n    return str(count_good(k))"
    },
    {
        "number": 1877,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    \n    # Fafa will always walk to the right\n    # and will always walk up\n    # so we can just count the number of\n    # U's and R's\n    # and add 1 for the gate\n    return str(n * 2 + 1)"
    },
    {
        "number": 1878,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    table = [list(map(int, stdin.readline().split())) for _ in range(n)]\n    return str(sum(sum(row) for row in table))\n\nassert(solution('''2\n1 1 2 3\n2 2 3 3\n''') == '10')\nassert(solution('''2\n1 1 3 3\n1 1 3 3\n''') == '18')\nassert(solution('''3\n1 1 2 3\n2 2 3 3\n3 3 3 3\n''') == '36')\nassert(solution('''4\n1 1 2 3 4\n2 2 3 3 4\n3 3 3 3 4\n4 4 4 4 4\n''') == '36')\nassert(solution('''5\n1 1 2 3 4 5\n2 2 3 3 4 5\n3 3 3 3 4 5\n4 4 4 4 4 5\n5 5 5 5 5 5\n''') == '36')\nassert(solution('''6\n1 1 2 3 4 5 6\n2 2 3 3 4 5 6\n3 3 3 3 4 5 6\n4 4 4 4 4 4 5\n5 5 5 5 5 5 5\n6 6 6 6 6 6 6\n''') == '36')\nassert(solution('''7\n1 1 2 3 4 5 6 7\n2 2 3 3 4 5 6 7\n3 3 3 3 4 5 6 7\n4 4 4 4 4 4 4 5\n5 5 5 5 5 5 5 5\n6 6 6 6 6 6 6 6\n7 7 7 7 7 7 7 7\n''') == '36')\nassert(solution('''8\n1 1 2 3 4 5 6 7 8\n2 2 3 3 4 5 6 7 8\n3 3 3 3 4 5 6 7 8\n4 4 4 4 4 4 4 4 4\n5 5 5 5 5 5 5 5 5\n6 6 6 6 6 6 6 6 6\n7 7 7 7 7 7 7 7 7\n8 8 8 8 8 8 8 8 8\n''') == '36')\nassert(solution('''9\n1 1 2 3 4 5 6 7 8 9\n2 2 3 3 4 5 6 7 8 9\n3 3 3 3 4 5 6 7 8 9\n4 4 4 4 4 4 4 4 4 4\n5 5 5 5 5 5 5 5 5 5\n6 6 6 6 6 6 6 6 6 6\n7 7 7 7 7 7 7 7 7 7\n8 8 8 8 8 8 8 8 8 8\n9 9 9 9 9 9 9 9 9 9\n''') == '36')\nassert(solution('''10\n1 1 2 3 4 5 6 7 8 9 10\n2 2 3 3 4 5 6 7 8 9 10\n3 3 3 3 4 5 6 7 8 9 10\n4 4 4 4 4 4 4 4 4 4 4\n5 5 5 5 5 5 5 5 5 5 5\n6 6 6 6 6 6 6 6 6 6 6\n7 7 7 7 7 7 7 7 7 7 7\n8 8 8 8 8 8 8 8 8 8 8\n9 9 9 9 9 9 9 9 9 9 9\n10 10 10 10 10 10 10 10 10\n''') == '36')\nassert(solution('''11\n1 1 2 3 4 5 6 7 8 9 10 11\n2 2 3 3 4 5 6 7 8 9 10 11\n3 3 3 3 4 5 6 7 8 9 10 11\n4 4 4 4 4 4 4 4 4 4 4 4\n5 5 5 5 5 5 5 5 5 5 5 5\n6 6 6 6 6 6 6 6 6 6 6 6\n7 7 7 7 7 7 7 7 7 7 7 7\n8 8 8 8 8 8 8 8 8 8 8 8\n9 9 9 9 9 9 9 9 9 9 9 9\n10 10 10 10 10 10 10 10 10 10\n11 11 11 11 11 11 11 11 11 11\n''') == '36')\nassert(solution('''12\n1 1 2 3 4 5 6 7 8 9 10 11 12\n2 2 3 3 4 5 6 7 8 9 10 11 12\n3 3 3 3 4 5 6 7 8 9 10 11 12\n4 4 4 4 4 4 4 4 4 4 4 4 4\n5 5 5 5 5 5 5 5 5 5 5 5 5\n6 6 6 6 6 6 6 6 6 6 6 6 6\n7 7 7 7 7 7 7 7 7 7 7 7 7\n8 8 8 8 8 8 8 8 8 8 8 8 8\n9 9 9 9 9 9 9 9 9 9 9 9 9\n10 10 10 10 10 10 10 10 10 10 10\n11 11 11 11 11 11 11 11 11 11 11\n12 12 12 12 12 12 12 12 12 12 12\n''') == '36')\nassert(solution('''13\n1 1 2 3 4 5 6 7 8 9 10 11 12 13\n2 2 3 3 4 5 6 7 8 9 10 11 12 13\n3 3 3 3 4 5 6 7 8 9 10 11 12 13\n4 4 4 4 4 4 4 4 4 4 4 4 4 4\n5 5 5 5 5 5 5 5 5 5 5 5 5 5\n6 6 6 6 6 6 6 6 6 6 6 6 6 6\n7 7 7 7 7 7 7 7 7 7 7 7 7 7\n8 8 8 8 8 8 8 8 8 8 8 8 8 8\n9 9 9 9 9 9 9 9 9 9 9 9 9 9\n10 10 10 10 10 10 10 10 10 10 10 10\n11 11 11 11 11 11 11 11 11 11 11 11\n12 12 12 12 12 12 12 12 12 12 12 12\n13 13 13 13 13 13 13 13 13 13 13 13\n''') == '36')\nassert(solution('''14\n1 1 2 3 4 5 6 7 8 9 10 11 12 13 14\n2 2 3 3 4 5 6 7 8 9 10 11 12 13 14\n3 3 3 3 4 5 6 7 8 9 10 11 12 13 14\n4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\n5 5 5 5 5 5 5 5 5 5 5 5 5 5 5\n6 6 6 6 6 6 6 6 6 6 6 6 6 6 6\n7 7 7 7 7 7 7 7 7 7 7 7 7 7 7\n8 8 8 8 8 8 8 8 8 8 8 8 8 8 8\n9 9 9 9 9 9 9 9 9 9 9 9 9 9 9\n10 10 10 10 10 10 10 10 10 10 10 10 10\n11 11 11 11 11 11 11 11 11 11 11 11 11\n12 12 12 12 12 12 12 12 12 12 12 12 12\n13 13 13 13 13 13 13 13 13 13 13 13 13\n14 14 14 14 14 14 14 14 14 14 14 14 14\n''') == '36')\nassert(solution('''15\n1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\n2 2 3 3 4 5 6 7 8 9 10 11 12 13 14 15\n3 3 3 3 4 5 6 7 8 9 10 11 12 13 14 15\n4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\n5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5\n6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6\n7 7 7 7 7 7 7 7 7 7"
    },
    {
        "number": 1879,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 1880,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 1881,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    p = [int(x) for x in stdin.split()]\n    p = sorted(p)\n    p = [p[i] for i in range(n) if i % k == 0]\n    return''.join([str(x) for x in p])"
    },
    {
        "number": 1882,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    a.reverse()\n    s = 0\n    for i in range(n):\n        s += a[i] * (t // a[i])\n        t -= a[i] * (t // a[i])\n    return str(s)"
    },
    {
        "number": 1883,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    types = [int(x) for x in stdin.readline().split()]\n    tracks = [int(x) for x in stdin.readline().split()]\n    \n    # build the graph\n    graph = {}\n    for i in range(n):\n        if types[i] == 0:\n            graph[i] = []\n        else:\n            graph[i] = [i + 1]\n    \n    # build the edges\n    for i in range(n):\n        if types[i] == 0:\n            continue\n        \n        if tracks[i] == 0:\n            continue\n        \n        graph[i].append(tracks[i])\n    \n    # find the path\n    def find_path(start, end, path=[]):\n        path = path + [start]\n        if start == end:\n            return path\n        \n        if start not in graph:\n            return None\n        \n        for node in graph[start]:\n            if node not in path:\n                newpath = find_path(node, end, path)\n                if newpath:\n                    return newpath\n        return None\n    \n    # find the path\n    path = find_path(0, n - 1)\n    \n    # print the result\n    print(len(path))\n    print(*path)\n    \n    return \"\""
    },
    {
        "number": 1884,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x1, x2 = [int(x) for x in stdin.split()]\n    c = [int(x) for x in stdin.split()]\n    if n < 2 or x1 < 1 or x2 < 1 or x1 + x2 > n:\n        return \"No\"\n    if n == 2:\n        if c[0] < c[1]:\n            return \"Yes\"\n        else:\n            return \"No\"\n    if c[0] < c[1]:\n        return \"No\"\n    if c[0] == c[1]:\n        return \"Yes\"\n    if c[0] > c[1]:\n        return \"Yes\"\n    if c[0] == c[1] and c[0] % 2 == 0:\n        return \"Yes\"\n    if c[0] == c[1] and c[0] % 2!= 0:\n        return \"No\"\n    if c[0] % 2 == 0:\n        return \"Yes\"\n    if c[0] % 2!= 0:\n        return \"No\"\n    if c[0] % 2 == 0 and c[1] % 2 == 0:\n        return \"Yes\"\n    if c[0] % 2!= 0 and c[1] % 2!= 0:\n        return \"Yes\"\n    if c[0] % 2 == 0 and c[1] % 2!= 0:\n        return \"Yes\"\n    if c[0] % 2!= 0 and c[1] % 2 == 0:\n        return \"Yes\"\n    if c[0] % 2 == 0 and c[1] % 2 == 0:\n        return \"Yes\"\n    if c[0] % 2!= 0 and c[1] % 2!= 0:\n        return \"Yes\"\n    if c[0] % 2 == 0 and c[1] % 2!= 0:\n        return \"Yes\"\n    if c[0] % 2!= 0 and c[1] % 2 == 0:\n        return \"Yes\"\n    if c[0] % 2 == 0 and c[1] % 2 == 0:\n        return \"Yes\"\n    if c[0] % 2!= 0 and c[1] % 2!= 0:\n        return \"Yes\"\n    if c[0] % 2 == 0 and c[1] % 2!= 0:\n        return \"Yes\"\n    if c[0] % 2!= 0 and c[1] % 2 == 0:\n        return \"Yes\"\n    if c[0] % 2 == 0 and c[1] % 2 == 0:\n        return \"Yes\"\n    if c[0] % 2!= 0 and c[1] % 2!= 0:\n        return \"Yes\"\n    if c[0] % 2 == 0 and c[1] % 2!= 0:\n        return \"Yes\"\n    if c[0] % 2!= 0 and c[1] % 2 == 0:\n        return \"Yes\"\n    if c[0] % 2 == 0 and c[1] % 2 == 0:\n        return \"Yes\"\n    if c[0] % 2!= 0 and c[1] % 2!= 0:\n        return \"Yes\"\n    if c[0] % 2 == 0 and c[1] % 2!= 0:\n        return \"Yes\"\n    if c[0] % 2!= 0 and c[1] % 2 == 0:\n        return \"Yes\"\n    if c[0] % 2 == 0 and c[1] % 2 == 0:\n        return \"Yes\"\n    if c[0] % 2!= 0 and c[1] % 2!= 0:\n        return \"Yes\"\n    if c[0] % 2 == 0 and c[1] % 2!= 0:\n        return \"Yes\"\n    if c[0] % 2!= 0 and c[1] % 2 == 0:\n        return \"Yes\"\n    if c[0] % 2 == 0 and c[1] % 2 == 0:\n        return \"Yes\"\n    if c[0] % 2!= 0 and c[1] % 2!= 0:\n        return \"Yes\"\n    if c[0] % 2 == 0 and c[1] % 2!= 0:\n        return \"Yes\"\n    if c[0] % 2!= 0 and c[1] % 2 == 0:\n        return \"Yes\"\n    if c[0] % 2 == 0 and c[1] % 2 == 0:\n        return \"Yes\"\n    if c[0] % 2!= 0 and c[1] % 2!= 0:\n        return \"Yes\"\n    if c[0] % 2 == 0 and c[1] % 2!= 0:\n        return \"Yes\"\n    if c[0] % 2!= 0 and c[1] % 2 == 0:\n        return \"Yes\"\n    if c[0] % 2 == 0 and c[1] % 2 == 0:\n        return \"Yes\"\n    if c[0] % 2!= 0 and c[1] % 2!= 0:\n        return \"Yes\"\n    if c[0] % 2 == 0 and c[1] % 2!= 0:\n        return \"Yes\"\n    if c[0] % 2!= 0 and c[1] % 2 == 0:\n        return \"Yes\"\n    if c[0] % 2 == 0 and c["
    },
    {
        "number": 1885,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(n * (n - 1) * (n - 2) * (n - 3) / 4)"
    },
    {
        "number": 1886,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.title()\n\nassert(solution('konjac') == 'Konjac')\nassert(solution('ApPLe') == 'ApPLe')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('konjac') == 'Konjac')\nassert(solution('kon"
    },
    {
        "number": 1887,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    h1 = list(map(int, stdin.readline().split()))\n    h2 = list(map(int, stdin.readline().split()))\n    h1.sort()\n    h2.sort()\n    h1.reverse()\n    h2.reverse()\n    h1_sum = sum(h1)\n    h2_sum = sum(h2)\n    h1_max = h1_sum\n    h2_max = h2_sum\n    for i in range(1, n):\n        if h1_sum > h2_sum:\n            h1_sum -= h1[i]\n            h1_max = max(h1_max, h1_sum)\n        else:\n            h2_sum -= h2[i]\n            h2_max = max(h2_max, h2_sum)\n    return str(max(h1_max, h2_max))"
    },
    {
        "number": 1888,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    debts = [int(x) for x in stdin.split()]\n    debts.sort()\n    result = 0\n    for i in range(m):\n        a, b, c = [int(x) for x in stdin.split()]\n        if a > b:\n            a, b = b, a\n        if a == b:\n            result += c\n        else:\n            result += debts[a - 1]\n            debts[a - 1] = debts[b - 1]\n            debts[b - 1] = debts[a - 1]\n    return str(result)"
    },
    {
        "number": 1889,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 1890,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 7\n    if n == 5:\n        return 10\n    if n == 6:\n        return 13\n    if n == 7:\n        return 19\n    if n == 8:\n        return 31\n    if n == 9:\n        return 37\n    if n == 10:\n        return 50\n    if n == 11:\n        return 61\n    if n == 12:\n        return 73\n    if n == 13:\n        return 83\n    if n == 14:\n        return 93\n    if n == 15:\n        return 103\n    if n == 16:\n        return 113\n    if n == 17:\n        return 123\n    if n == 18:\n        return 133\n    if n == 19:\n        return 143\n    if n == 20:\n        return 153\n    if n == 21:\n        return 163\n    if n == 22:\n        return 173\n    if n == 23:\n        return 183\n    if n == 24:\n        return 193\n    if n == 25:\n        return 203\n    if n == 26:\n        return 213\n    if n == 27:\n        return 223\n    if n == 28:\n        return 233\n    if n == 29:\n        return 243\n    if n == 30:\n        return 253\n    if n == 31:\n        return 263\n    if n == 32:\n        return 273\n    if n == 33:\n        return 283\n    if n == 34:\n        return 293\n    if n == 35:\n        return 303\n    if n == 36:\n        return 313\n    if n == 37:\n        return 323\n    if n == 38:\n        return 333\n    if n == 39:\n        return 343\n    if n == 40:\n        return 353\n    if n == 41:\n        return 363\n    if n == 42:\n        return 373\n    if n == 43:\n        return 383\n    if n == 44:\n        return 393\n    if n == 45:\n        return 403\n    if n == 46:\n        return 413\n    if n == 47:\n        return 423\n    if n == 48:\n        return 433\n    if n == 49:\n        return 443\n    if n == 50:\n        return 453\n    if n == 51:\n        return 463\n    if n == 52:\n        return 473\n    if n == 53:\n        return 483\n    if n == 54:\n        return 493\n    if n == 55:\n        return 503\n    if n == 56:\n        return 513\n    if n == 57:\n        return 523\n    if n == 58:\n        return 533\n    if n == 59:\n        return 543\n    if n == 60:\n        return 553\n    if n == 61:\n        return 563\n    if n == 62:\n        return 573\n    if n == 63:\n        return 583\n    if n == 64:\n        return 593\n    if n == 65:\n        return 603\n    if n == 66:\n        return 613\n    if n == 67:\n        return 623\n    if n == 68:\n        return 633\n    if n == 69:\n        return 643\n    if n == 70:\n        return 653\n    if n == 71:\n        return 663\n    if n == 72:\n        return 673\n    if n == 73:\n        return 683\n    if n == 74:\n        return 693\n    if n == 75:\n        return 703\n    if n == 76:\n        return 713\n    if n == 77:\n        return 723\n    if n == 78:\n        return 733\n    if n == 79:\n        return 743\n    if n == 80:\n        return 753\n    if n == 81:\n        return 763\n    if n == 82:\n        return 773\n    if n == 83:\n        return 783\n    if n == 84:\n        return 793\n    if n == 85:\n        return 803\n    if n == 86:\n        return 813\n    if n == 87:\n        return 823\n    if n == 88:\n        return 833\n    if n == 89:\n        return 843\n    if n == 90:\n        return 853\n    if n == 91:\n        return 863\n    if n == 92:\n        return 873\n    if n == 93:\n        return 883\n    if n == 94:\n        return 893\n    if n == 95:\n        return 903\n    if n == 96:\n        return 913\n    if n == 97:\n        return 923\n    if n == 98:\n        return 933\n    if n == 99:\n        return 943\n    if n == 100:\n        return 953\n    if n == 101:\n        return 963\n    if n == 102:\n        return 973\n    if n == 103:\n        return 983\n    if n == 104:\n        return 993\n    if n == 105:\n        return 1003\n    if n == 106:\n        return 1013\n    if n == 107:\n        return 1023\n    if n == 108:\n        return 1033\n    if n == 109:\n        return 1043\n    if n == 110:\n        return 1053\n    if n == 111:\n        return 1063\n    if n == 112:\n        return 1073\n    if n == 113:\n        return 1083\n    if n == 114:\n        return 1093\n    if n == 115:\n        return 1103\n    if n == 116:\n        return 1113\n    if n == 117:\n        return 1123\n    if n == 118:\n        return 1133\n    if n == 119:\n        return 1143\n    if n == 120:\n        return 1153\n    if n == 121:\n        return 1163\n    if n == 122:\n        return 1173\n    if n == 123:\n        return 1183\n    if n == 124:\n        return 1193\n    if n == 125:\n        return 1203\n    if n == 126:\n        return 1213\n    if n == 127:\n        return 1223\n    if n == 128:\n        return 1233\n    if n == 129:\n        return 1243\n    if n == 130:\n        return 1253\n    if n == 131:\n        return 1263\n    if n == 132:\n        return 1273\n    if n == 133:\n        return 1283\n    if n == 134:\n        return 1293\n    if n == 135:\n        return 1303\n    if n == 136:\n        return 1313\n    if n == 137:\n        return 1323\n    if n == 138:\n        return 1333\n    if n == 139:\n        return 1343\n    if n == 140:\n        return 1353\n    if n == 141:\n        return 13"
    },
    {
        "number": 1891,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, A, B = [int(x) for x in stdin.split()]\n    avengers = [int(x) for x in stdin.split()]\n    if k == 1:\n        return str(A)\n    if n == 1:\n        return str(A)\n    if n == 2:\n        return str(A + B)\n    if n % 2 == 0:\n        return str(A + B * (n // 2))\n    if n % 2 == 1:\n        return str(A + B * (n // 2) + 1)"
    },
    {
        "number": 1892,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(...)\n\n\"\"\"\n\nfrom typing import List\n\ndef"
    },
    {
        "number": 1893,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    return str(n * (2 ** t))\n\nassert(solution('''1000 1000000''') == '1011.060722383550382782399454922040')\nassert(solution('''1000 1000000000''') == '1011.060722383550382782399454922040')\nassert(solution('''1000 1000000000''') == '1011.060722383550382782399454922040')\nassert(solution('''1000 1000000000''') == '1011.060722383550382782399454922040')\nassert(solution('''1000 1000000000''') == '1011.060722383550382782399454922040')\nassert(solution('''1000 1000000000''') == '1011.060722383550382782399454922040')\nassert(solution('''1000 1000000000''') == '1011.060722383550382782399454922040')\nassert(solution('''1000 1000000000''') == '1011.060722383550382782399454922040')\nassert(solution('''1000 1000000000''') == '1011.060722383550382782399454922040')\nassert(solution('''1000 1000000000''') == '1011.060722383550382782399454922040')\nassert(solution('''1000 1000000000''') == '1011.060722383550382782399454922040')\nassert(solution('''1000 1000000000''') == '1011.060722383550382782399454922040')\nassert(solution('''1000 1000000000''') == '1011.060722383550382782399454922040')\nassert(solution('''1000 1000000000''') == '1011.060722383550382782399454922040')\nassert(solution('''1000 1000000000''') == '1011.060722383550382782399454922040')\nassert(solution('''1000 1000000000''') == '1011.060722383550382782399454922040')\nassert(solution('''1000 1000000000''') == '1011.060722383550382782399454922040')\nassert(solution('''1000 1000000000''') == '1011.060722383550382782399454922040')\nassert(solution('''1000 1000000000''') == '1011.060722383550382782399454922040')\nassert(solution('''1000 1000000000''') == '1011.060722383550382782399454922040')\nassert(solution('''1000 1000000000''') == '1011.060722383550382782399454922040')\nassert(solution('''1000 1000000000''') == '1011.060722383550382782399454922040')\nassert(solution('''1000 1000000000''') == '1011.060722383550382782399454922040')\nassert(solution('''1000 1000000000''') == '1011.060722383550382782399454922040')\nassert(solution('''1000 1000000000''') == '1011.060722383550382782399454922040')\nassert(solution('''1000 1000000000''') == '1011.060722383550382782399454922040')\nassert(solution('''1000 1000000000''') == '1011.060722383550382782399454922040')\nassert(solution('''1000 1000000000''') == '1011.060722383550382782399454922040')\nassert(solution('''1000 1000000000''') == '1011.060722383550382782399454922040')\nassert(solution('''1000 1000000000''') == '1011.060722383550382782399454922040')\nassert(solution('''1000 1000000000''') == '1011.060722383550382782399454922040')\nassert(solution('''1000 1000000000''') == '1011.060722383550382782399454922040')\nassert(solution('''1000 1000000000''') == '1011.060722383550382782399454922040')\nassert(solution('''1000 1000000000''') == '1011.060722383550382782399454922040')\nassert(solution('''1000 1000000000''') == '1011.060722383550382782399454922040')\nassert(solution('''1000 1000000000''') == '1011.060722383550382782399454922040')\nassert(solution('''1000 1000000000''') == '1011.060722383550382782399454922040')\nassert(solution('''1000 1000000000''') == '1011.060722383550382782399454922040')\nassert(solution('''1000 1000000000''') == '1011.060722383550382782399454922040')\nassert(solution('''1000 1000000000''') == '1011.060722383550382782399454922040')\nassert(solution('''1000 1000000000''') == '1011.060722383550382782399454922040')\nassert(solution('''1000 1000000000''') == '1011.060722383550382782399454922040')\nassert(solution('''1000 1000000000''') == '1011.060722383550382782399454922040')\nassert(solution('''1000 1000000000''') == '1011.060722383550382782399454922040')\nassert(solution('''1000 1000000000''') == '1011.060722383550382782399454922040')\nassert(solution('''1000 1000000000''') == '1011.060722383550382782399454922040')\nassert(solution('''1000 1000000000''') == '1011.060722383550382782399454922040')\nassert(solution('''1000 1000000000''') == '1011.060722383550382782399454922040')\nassert(solution('''1000 1000000000''') == '1011.060722383550382782399454922040')\nassert(solution('''1000 1000000000''') == '1011.060722383550382782399454922040')\nassert(solution('''1000 1000000000''') == '1011.060722383550382782399454922040')\nassert(solution('''1000 1000000000''') == '1011.060722383550382782399454922040')\nassert(solution('''1000 1000000000''') == '1011.060722383550"
    },
    {
        "number": 1894,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    floor = [list(stdin.strip()) for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if floor[i][j] == '.':\n                floor[i][j] = '+'\n    for i in range(n):\n        for j in range(m):\n            if floor[i][j] == '#':\n                floor[i][j] = '+'\n    for i in range(n):\n        for j in range(m):\n            if floor[i][j] == '+':\n                floor[i][j] = '#'\n    for i in range(n):\n        for j in range(m):\n            if floor[i][j] == '#':\n                floor[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if floor[i][j] == '+':\n                floor[i][j] = '#'\n    for i in range(n):\n        for j in range(m):\n            if floor[i][j] == '#':\n                floor[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if floor[i][j] == '+':\n                floor[i][j] = '#'\n    for i in range(n):\n        for j in range(m):\n            if floor[i][j] == '#':\n                floor[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if floor[i][j] == '+':\n                floor[i][j] = '#'\n    for i in range(n):\n        for j in range(m):\n            if floor[i][j] == '#':\n                floor[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if floor[i][j] == '+':\n                floor[i][j] = '#'\n    for i in range(n):\n        for j in range(m):\n            if floor[i][j] == '#':\n                floor[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if floor[i][j] == '+':\n                floor[i][j] = '#'\n    for i in range(n):\n        for j in range(m):\n            if floor[i][j] == '#':\n                floor[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if floor[i][j] == '+':\n                floor[i][j] = '#'\n    for i in range(n):\n        for j in range(m):\n            if floor[i][j] == '#':\n                floor[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if floor[i][j] == '+':\n                floor[i][j] = '#'\n    for i in range(n):\n        for j in range(m):\n            if floor[i][j] == '#':\n                floor[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if floor[i][j] == '+':\n                floor[i][j] = '#'\n    for i in range(n):\n        for j in range(m):\n            if floor[i][j] == '#':\n                floor[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if floor[i][j] == '+':\n                floor[i][j] = '#'\n    for i in range(n):\n        for j in range(m):\n            if floor[i][j] == '#':\n                floor[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if floor[i][j] == '+':\n                floor[i][j] = '#'\n    for i in range(n):\n        for j in range(m):\n            if floor[i][j] == '#':\n                floor[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if floor[i][j] == '+':\n                floor[i][j] = '#'\n    for i in range(n):\n        for j in range(m):\n            if floor[i][j] == '#':\n                floor[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if floor[i][j] == '+':\n                floor[i][j] = '#'\n    for i in range(n):\n        for j in range(m):\n            if floor[i][j] == '#':\n                floor[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if floor[i][j] == '+':\n                floor[i][j] = '#'\n    for i in range(n):\n        for j in range(m):\n            if floor[i][j] == '#':\n                floor[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if floor[i][j] == '+':\n                floor[i][j] = '#'\n    for i in range(n):\n        for j in range(m):\n            if floor[i][j] == '#':\n                floor[i][j] = '.'\n    for i in range"
    },
    {
        "number": 1895,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    events = [stdin.split() for _ in range(n)]\n    events.sort(key=lambda x: x[1])\n    handles = [0] * m\n    for event in events:\n        if event[0] == '1':\n            handles[int(event[2]) - 1] = int(event[1])\n    return str(handles.count(max(handles)))\n\nprint(solution(input()))\n"
    },
    {
        "number": 1896,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(n * (n + 1) * (n + 2) // 6)\n\nassert(solution('') == '0')\nassert(solution('1') == '1')\nassert(solution('2') == '3')\nassert(solution('3') == '6')\nassert(solution('4') == '10')\nassert(solution('5') == '15')\nassert(solution('6') == '21')\nassert(solution('7') == '28')\nassert(solution('8') == '36')\nassert(solution('9') == '45')\nassert(solution('10') == '55')\nassert(solution('11') == '66')\nassert(solution('12') == '78')\nassert(solution('13') == '91')\nassert(solution('14') == '105')\nassert(solution('15') == '120')\nassert(solution('16') == '135')\nassert(solution('17') == '150')\nassert(solution('18') == '165')\nassert(solution('19') == '180')\nassert(solution('20') == '195')\nassert(solution('21') == '210')\nassert(solution('22') == '225')\nassert(solution('23') == '240')\nassert(solution('24') == '255')\nassert(solution('25') == '270')\nassert(solution('26') == '285')\nassert(solution('27') == '300')\nassert(solution('28') == '315')\nassert(solution('29') == '330')\nassert(solution('30') == '345')\nassert(solution('31') == '360')\nassert(solution('32') == '375')\nassert(solution('33') == '390')\nassert(solution('34') == '405')\nassert(solution('35') == '420')\nassert(solution('36') == '435')\nassert(solution('37') == '450')\nassert(solution('38') == '465')\nassert(solution('39') == '480')\nassert(solution('40') == '495')\nassert(solution('41') == '510')\nassert(solution('42') == '525')\nassert(solution('43') == '540')\nassert(solution('44') == '555')\nassert(solution('45') == '570')\nassert(solution('46') == '585')\nassert(solution('47') == '600')\nassert(solution('48') == '615')\nassert(solution('49') == '630')\nassert(solution('50') == '645')\nassert(solution('51') == '660')\nassert(solution('52') == '675')\nassert(solution('53') == '690')\nassert(solution('54') == '705')\nassert(solution('55') == '720')\nassert(solution('56') == '735')\nassert(solution('57') == '750')\nassert(solution('58') == '765')\nassert(solution('59') == '780')\nassert(solution('60') == '795')\nassert(solution('61') == '810')\nassert(solution('62') == '825')\nassert(solution('63') == '840')\nassert(solution('64') == '855')\nassert(solution('65') == '870')\nassert(solution('66') == '885')\nassert(solution('67') == '900')\nassert(solution('68') == '915')\nassert(solution('69') == '930')\nassert(solution('70') == '945')\nassert(solution('71') == '960')\nassert(solution('72') == '975')\nassert(solution('73') == '990')\nassert(solution('74') == '1005')\nassert(solution('75') == '1020')\nassert(solution('76') == '1035')\nassert(solution('77') == '1050')\nassert(solution('78') == '1065')\nassert(solution('79') == '1080')\nassert(solution('80') == '1095')\nassert(solution('81') == '1110')\nassert(solution('82') == '1125')\nassert(solution('83') == '1140')\nassert(solution('84') == '1155')\nassert(solution('85') == '1170')\nassert(solution('86') == '1185')\nassert(solution('87') == '1200')\nassert(solution('88') == '1215')\nassert(solution('89') == '1230')\nassert(solution('90') == '1245')\nassert(solution('91') == '1260')\nassert(solution('92') == '1275')\nassert(solution('93') == '1290')\nassert(solution('94') == '1305')\nassert(solution('95') == '1320')\nassert(solution('96') == '1335')\nassert(solution('97') == '1350')\nassert(solution('98') == '1365')\nassert(solution('99') == '1380')\nassert(solution('100') == '1395')\nassert(solution('101') == '1410')\nassert(solution('102') == '1425')\nassert(solution('103') == '1440')\nassert(solution('104') == '1455')\nassert(solution('105') == '1470')\nassert(solution('106') == '1485')\nassert(solution('107') == '1500')\nassert(solution('108') == '1515')\nassert(solution('109') == '1530')\nassert(solution('110') == '1545')\nassert(solution('111') == '1560')\nassert(solution('112') == '1575')\nassert(solution('113') == '1590')\nassert(solution('114') == '1605')\nassert(solution('115') == '1620')\nassert(solution('116') == '1635')\nassert(solution('117') == '1650')\nassert(solution('118') == '1665')\nassert(solution('119') == '1680')\nassert(solution('120') == '1695')\nassert(solution('121') == '1710')\nassert(solution('122') == '1725')\nassert(solution('123') == '1740')\nassert(solution('124') == '1755')\nassert(solution('125') == '1770')\nassert(solution('126') == '1785')\nassert(solution('127') == '1800')\nassert(solution('128') == '1815')\nassert(solution('129') == '1830')\nassert(solution('130') == '1845')\nassert(solution('131') == '1860')\nassert(solution('132') == '1875')\nassert(solution('133') == '1890')\nassert(solution('134') == '1905')\nassert(solution('135') == '1920')\nassert(solution('136')"
    },
    {
        "number": 1897,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 1898,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"I hate it\"\n    elif n == 2:\n        return \"I hate that I love it\"\n    elif n == 3:\n        return \"I hate that I love that I hate it\"\n    else:\n        return \"I hate that I love that I hate it\""
    },
    {
        "number": 1899,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s, m, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    segments = [tuple(map(int, stdin.split())) for _ in range(s)]\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort("
    },
    {
        "number": 1900,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    a = [0] + a + [n]\n    a = [a[i] - a[i - 1] for i in range(1, len(a))]\n    return str(sum(a[k:k + m]))"
    },
    {
        "number": 1901,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    c = [int(x) for x in stdin.split()]\n    friends = [[] for _ in range(n)]\n    for _ in range(m):\n        x, y = [int(x) for x in stdin.split()]\n        friends[x - 1].append(y - 1)\n        friends[y - 1].append(x - 1)\n    res = 0\n    for i in range(n):\n        if len(friends[i]) == 0:\n            res += c[i]\n    return str(res)"
    },
    {
        "number": 1902,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\nimport sys\nfrom collections import deque\n\ndef"
    },
    {
        "number": 1903,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = [int(x) for x in stdin.split()]\n    cups = [int(x) for x in stdin.split()]\n    cups.sort()\n    cups.reverse()\n    cups = [0] + cups\n    cups = cups + [d]\n    cups = [0] + cups\n    cups = cups + [d]\n    cups = [0] + cups\n    cups = cups + [d]\n    cups = [0] + cups\n    cups = cups + [d]\n    cups = [0] + cups\n    cups = cups + [d]\n    cups = [0] + cups\n    cups = cups + [d]\n    cups = [0] + cups\n    cups = cups + [d]\n    cups = [0] + cups\n    cups = cups + [d]\n    cups = [0] + cups\n    cups = cups + [d]\n    cups = [0] + cups\n    cups = cups + [d]\n    cups = [0] + cups\n    cups = cups + [d]\n    cups = [0] + cups\n    cups = cups + [d]\n    cups = [0] + cups\n    cups = cups + [d]\n    cups = [0] + cups\n    cups = cups + [d]\n    cups = [0] + cups\n    cups = cups + [d]\n    cups = [0] + cups\n    cups = cups + [d]\n    cups = [0] + cups\n    cups = cups + [d]\n    cups = [0] + cups\n    cups = cups + [d]\n    cups = [0] + cups\n    cups = cups + [d]\n    cups = [0] + cups\n    cups = cups + [d]\n    cups = [0] + cups\n    cups = cups + [d]\n    cups = [0] + cups\n    cups = cups + [d]\n    cups = [0] + cups\n    cups = cups + [d]\n    cups = [0] + cups\n    cups = cups + [d]\n    cups = [0] + cups\n    cups = cups + [d]\n    cups = [0] + cups\n    cups = cups + [d]\n    cups = [0] + cups\n    cups = cups + [d]\n    cups = [0] + cups\n    cups = cups + [d]\n    cups = [0] + cups\n    cups = cups + [d]\n    cups = [0] + cups\n    cups = cups + [d]\n    cups = [0] + cups\n    cups = cups + [d]\n    cups = [0] + cups\n    cups = cups + [d]\n    cups = [0] + cups\n    cups = cups + [d]\n    cups = [0] + cups\n    cups = cups + [d]\n    cups = [0] + cups\n    cups = cups + [d]\n    cups = [0] + cups\n    cups = cups + [d]\n    cups = [0] + cups\n    cups = cups + [d]\n    cups = [0] + cups\n    cups = cups + [d]\n    cups = [0] + cups\n    cups = cups + [d]\n    cups = [0] + cups\n    cups = cups + [d]\n    cups = [0] + cups\n    cups = cups + [d]\n    cups = [0] + cups\n    cups = cups + [d]\n    cups = [0] + cups\n    cups = cups + [d]\n    cups = [0] + cups\n    cups = cups + [d]\n    cups = [0] + cups\n    cups = cups + [d]\n    cups = [0] + cups\n    cups = cups + [d]\n    cups = [0] + cups\n    cups = cups + [d]\n    cups = [0] + cups\n    cups = cups + [d]\n    cups = [0] + cups\n    cups = cups + [d]\n    cups = [0] + cups\n    cups = cups + [d]\n    cups = [0] + cups\n    cups = cups + [d]\n    cups = [0] + cups\n    cups = cups + [d]\n    cups = [0] + cups\n    cups = cups + [d]\n    cups = [0] + cups\n    cups = cups + [d]\n    cups = [0] + cups\n    cups = cups + [d]\n    cups = [0] + cups\n    cups = cups + [d]\n    cups = [0] + cups\n    cups = cups + [d]\n    cups = [0] + cups\n    cups = cups + [d]\n    cups = [0] + cups\n    cups = cups + [d]\n    cups = [0] + cups\n    cups = cups + [d]\n    cups = [0] + cups\n    cups = cups + [d]\n    cups = [0] + cups\n    cups = cups + [d]\n    cups = [0] + cups\n    cups = cups + [d]\n    cups = [0] + cups\n    cups = cups + [d]\n    cups = [0] + cups\n    cups = cups + [d]\n    cups = [0] + cups\n    cups = cups + [d]\n    cups = ["
    },
    {
        "number": 1904,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    a = list(map(int, stdin.readline().split()))\n    \n    res = 0\n    for i in range(n):\n        res += a[i] * (9 - i)\n    \n    return str(res)"
    },
    {
        "number": 1905,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, q = [int(x) for x in stdin.split()]\n    matrix = [[0 for _ in range(m)] for _ in range(n)]\n    for _ in range(q):\n        t, r, c, x = [int(x) for x in stdin.split()]\n        if t == 1:\n            matrix[r - 1][(c - 1) % m] = x\n        elif t == 2:\n            matrix[(r - 1) % n][(c - 1) % m] = x\n        else:\n            print(matrix[r - 1][c - 1])\n    return ''"
    },
    {
        "number": 1906,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(n - (n % 2) - (n % 3) - (n % 4) - (n % 5) - (n % 6) - (n % 7) - (n % 8) - (n % 9) - (n % 10))"
    },
    {
        "number": 1907,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    dancers = [tuple(map(int, line.split())) for line in stdin.readlines()]\n    dancers.sort(key=lambda x: x[0])\n    dancers.sort(key=lambda x: x[1])\n    dancers.sort(key=lambda x: x[2])\n    dancers.sort(key=lambda x: x[0] + x[1])\n    dancers.sort(key=lambda x: x[0] + x[2])\n    dancers.sort(key=lambda x: x[1] + x[2])\n    dancers.sort(key=lambda x: x[0] + x[1] + x[2])\n    dancers.sort(key=lambda x: x[0] * x[1] * x[2])\n    dancers.sort(key=lambda x: x[0] * x[1] * x[2] / max(1, x[2]))\n    dancers.sort(key=lambda x: x[0] * x[1] * x[2] / max(1, x[2]))\n    dancers.sort(key=lambda x: x[0] * x[1] * x[2] / max(1, x[2]))\n    dancers.sort(key=lambda x: x[0] * x[1] * x[2] / max(1, x[2]))\n    dancers.sort(key=lambda x: x[0] * x[1] * x[2] / max(1, x[2]))\n    dancers.sort(key=lambda x: x[0] * x[1] * x[2] / max(1, x[2]))\n    dancers.sort(key=lambda x: x[0] * x[1] * x[2] / max(1, x[2]))\n    dancers.sort(key=lambda x: x[0] * x[1] * x[2] / max(1, x[2]))\n    dancers.sort(key=lambda x: x[0] * x[1] * x[2] / max(1, x[2]))\n    dancers.sort(key=lambda x: x[0] * x[1] * x[2] / max(1, x[2]))\n    dancers.sort(key=lambda x: x[0] * x[1] * x[2] / max(1, x[2]))\n    dancers.sort(key=lambda x: x[0] * x[1] * x[2] / max(1, x[2]))\n    dancers.sort(key=lambda x: x[0] * x[1] * x[2] / max(1, x[2]))\n    dancers.sort(key=lambda x: x[0] * x[1] * x[2] / max(1, x[2]))\n    dancers.sort(key=lambda x: x[0] * x[1] * x[2] / max(1, x[2]))\n    dancers.sort(key=lambda x: x[0] * x[1] * x[2] / max(1, x[2]))\n    dancers.sort(key=lambda x: x[0] * x[1] * x[2] / max(1, x[2]))\n    dancers.sort(key=lambda x: x[0] * x[1] * x[2] / max(1, x[2]))\n    dancers.sort(key=lambda x: x[0] * x[1] * x[2] / max(1, x[2]))\n    dancers.sort(key=lambda x: x[0] * x[1] * x[2] / max(1, x[2]))\n    dancers.sort(key=lambda x: x[0] * x[1] * x[2] / max(1, x[2]))\n    dancers.sort(key=lambda x: x[0] * x[1] * x[2] / max(1, x[2]))\n    dancers.sort(key=lambda x: x[0] * x[1] * x[2] / max(1, x[2]))\n    dancers.sort(key=lambda x: x[0] * x[1] * x[2] / max(1, x[2]))\n    dancers.sort(key=lambda x: x[0] * x[1] * x[2] / max(1, x[2]))\n    dancers.sort(key=lambda x: x[0] * x[1] * x[2] / max(1, x[2]))\n    dancers.sort(key=lambda x: x[0] * x[1] * x[2] / max(1, x[2]))\n    dancers.sort(key=lambda x: x[0] * x[1] * x[2] / max(1, x[2]))\n    dancers.sort(key=lambda x: x[0] * x[1] * x[2] / max(1, x[2]))\n    dancers.sort(key=lambda x: x[0] * x[1] * x[2] / max(1, x[2]))\n    dancers.sort(key=lambda x: x[0] * x[1] * x[2] / max(1, x[2]))\n    dancers.sort(key"
    },
    {
        "number": 1908,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    w = list(map(int, stdin.split()))\n    x = list(map(int, stdin.split()))\n    y = list(map(int, stdin.split()))\n    \n    # w[i] = number of plates of type i\n    # x[i] = favorite type of food of the i-th friend\n    # y[i] = favorite type of food of the i-th friend\n    \n    # x[i] = favorite type of food of the i-th friend\n    # y[i] = favorite type of food of the i-th friend\n    \n    # x[i] = favorite type of food of the i-th friend\n    # y[i] = favorite type of food of the i-th friend\n    \n    # x[i] = favorite type of food of the i-th friend\n    # y[i] = favorite type of food of the i-th friend\n    \n    # x[i] = favorite type of food of the i-th friend\n    # y[i] = favorite type of food of the i-th friend\n    \n    # x[i] = favorite type of food of the i-th friend\n    # y[i] = favorite type of food of the i-th friend\n    \n    # x[i] = favorite type of food of the i-th friend\n    # y[i] = favorite type of food of the i-th friend\n    \n    # x[i] = favorite type of food of the i-th friend\n    # y[i] = favorite type of food of the i-th friend\n    \n    # x[i] = favorite type of food of the i-th friend\n    # y[i] = favorite type of food of the i-th friend\n    \n    # x[i] = favorite type of food of the i-th friend\n    # y[i] = favorite type of food of the i-th friend\n    \n    # x[i] = favorite type of food of the i-th friend\n    # y[i] = favorite type of food of the i-th friend\n    \n    # x[i] = favorite type of food of the i-th friend\n    # y[i] = favorite type of food of the i-th friend\n    \n    # x[i] = favorite type of food of the i-th friend\n    # y[i] = favorite type of food of the i-th friend\n    \n    # x[i] = favorite type of food of the i-th friend\n    # y[i] = favorite type of food of the i-th friend\n    \n    # x[i] = favorite type of food of the i-th friend\n    # y[i] = favorite type of food of the i-th friend\n    \n    # x[i] = favorite type of food of the i-th friend\n    # y[i] = favorite type of food of the i-th friend\n    \n    # x[i] = favorite type of food of the i-th friend\n    # y[i] = favorite type of food of the i-th friend\n    \n    # x[i] = favorite type of food of the i-th friend\n    # y[i] = favorite type of food of the i-th friend\n    \n    # x[i] = favorite type of food of the i-th friend\n    # y[i] = favorite type of food of the i-th friend\n    \n    # x[i] = favorite type of food of the i-th friend\n    # y[i] = favorite type of food of the i-th friend\n    \n    # x[i] = favorite type of food of the i-th friend\n    # y[i] = favorite type of food of the i-th friend\n    \n    # x[i] = favorite type of food of the i-th friend\n    # y[i] = favorite type of food of the i-th friend\n    \n    # x[i] = favorite type of food of the i-th friend\n    # y[i] = favorite type of food of the i-th friend\n    \n    # x[i] = favorite type of food of the i-th friend\n    # y[i] = favorite type of food of the i-th friend\n    \n    # x[i] = favorite type of food of the i-th friend\n    # y[i] = favorite type of food of the i-th friend\n    \n    # x[i] = favorite type of food of the i-th friend\n    # y[i] = favorite type of food of the i-th friend\n    \n    # x[i] = favorite type of food of the i-th friend\n    # y[i] = favorite type of food of the i-th friend\n    \n    # x[i] = favorite type of food of the i-th friend\n    # y[i] = favorite type of food of the i-th friend\n    \n    # x[i] = favorite type of food of the i-th friend\n    # y[i] = favorite type of food of the i-th friend"
    },
    {
        "number": 1909,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    a.reverse()\n    res = 0\n    for i in range(n):\n        if i % k == 0:\n            res += a[i]\n    return str(res)"
    },
    {
        "number": 1910,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 3:\n        return 0\n    if n == 3:\n        return 24\n    return (n - 2) * (n - 1) * (n - 2) // 6\n"
    },
    {
        "number": 1911,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    return str(min(a[i] - a[i - 1] for i in range(1, k + 1)))"
    },
    {
        "number": 1912,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 1913,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    tanks = [int(x) for x in stdin.readline().split()]\n    beautiful_numbers = [1]\n    for i in range(1, n):\n        if tanks[i] > 0:\n            beautiful_numbers.append(beautiful_numbers[-1] * tanks[i])\n    return ''.join(str(x) for x in beautiful_numbers)"
    },
    {
        "number": 1914,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = stdin.strip()\n    n = int(stdin.readline().strip())\n    strings = [stdin.readline().strip() for _ in range(n)]\n    return str(sum([sum([f(t, s1 + s2) for s2 in strings]) for s1 in strings]))"
    },
    {
        "number": 1915,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(n * (n + 1) // 2)"
    },
    {
        "number": 1916,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    b = [int(x) for x in stdin.split()]\n    a.sort()\n    b.sort()\n    c = [0] * n\n    for i in range(n):\n        c[i] = a[i] & b[i]\n    return str(max(c))"
    },
    {
        "number": 1917,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    b = [0] * n\n    for i in range(n):\n        b[i] = a[i] - i * i\n    b.sort()\n    b.reverse()\n    s = 0\n    for i in range(n):\n        s += b[i]\n        if s > k:\n            return''.join(map(str, b[:i]))\n    return''.join(map(str, b))\n\nprint(solution(input()))\n"
    },
    {
        "number": 1918,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    p = [int(x) for x in stdin.readline().split()]\n    a = stdin.readline().strip()\n    if a == 'A':\n        return max(p)\n    else:\n        return sum(p)"
    },
    {
        "number": 1919,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return '1' if n % 2 == 0 else '2'\n\nassert(solution('') == '1')\nassert(solution('1') == '1')\nassert(solution('2') == '2')\nassert(solution('3') == '1')\nassert(solution('4') == '2')\nassert(solution('5') == '1')\nassert(solution('6') == '2')\nassert(solution('7') == '1')\nassert(solution('8') == '2')\nassert(solution('9') == '1')\nassert(solution('10') == '2')\nassert(solution('11') == '1')\nassert(solution('12') == '2')\nassert(solution('13') == '1')\nassert(solution('14') == '2')\nassert(solution('15') == '1')\nassert(solution('16') == '2')\nassert(solution('17') == '1')\nassert(solution('18') == '2')\nassert(solution('19') == '1')\nassert(solution('20') == '2')\nassert(solution('21') == '1')\nassert(solution('22') == '2')\nassert(solution('23') == '1')\nassert(solution('24') == '2')\nassert(solution('25') == '1')\nassert(solution('26') == '2')\nassert(solution('27') == '1')\nassert(solution('28') == '2')\nassert(solution('29') == '1')\nassert(solution('30') == '2')\nassert(solution('31') == '1')\nassert(solution('32') == '2')\nassert(solution('33') == '1')\nassert(solution('34') == '2')\nassert(solution('35') == '1')\nassert(solution('36') == '2')\nassert(solution('37') == '1')\nassert(solution('38') == '2')\nassert(solution('39') == '1')\nassert(solution('40') == '2')\nassert(solution('41') == '1')\nassert(solution('42') == '2')\nassert(solution('43') == '1')\nassert(solution('44') == '2')\nassert(solution('45') == '1')\nassert(solution('46') == '2')\nassert(solution('47') == '1')\nassert(solution('48') == '2')\nassert(solution('49') == '1')\nassert(solution('50') == '2')\nassert(solution('51') == '1')\nassert(solution('52') == '2')\nassert(solution('53') == '1')\nassert(solution('54') == '2')\nassert(solution('55') == '1')\nassert(solution('56') == '2')\nassert(solution('57') == '1')\nassert(solution('58') == '2')\nassert(solution('59') == '1')\nassert(solution('60') == '2')\nassert(solution('61') == '1')\nassert(solution('62') == '2')\nassert(solution('63') == '1')\nassert(solution('64') == '2')\nassert(solution('65') == '1')\nassert(solution('66') == '2')\nassert(solution('67') == '1')\nassert(solution('68') == '2')\nassert(solution('69') == '1')\nassert(solution('70') == '2')\nassert(solution('71') == '1')\nassert(solution('72') == '2')\nassert(solution('73') == '1')\nassert(solution('74') == '2')\nassert(solution('75') == '1')\nassert(solution('76') == '2')\nassert(solution('77') == '1')\nassert(solution('78') == '2')\nassert(solution('79') == '1')\nassert(solution('80') == '2')\nassert(solution('81') == '1')\nassert(solution('82') == '2')\nassert(solution('83') == '1')\nassert(solution('84') == '2')\nassert(solution('85') == '1')\nassert(solution('86') == '2')\nassert(solution('87') == '1')\nassert(solution('88') == '2')\nassert(solution('89') == '1')\nassert(solution('90') == '2')\nassert(solution('91') == '1')\nassert(solution('92') == '2')\nassert(solution('93') == '1')\nassert(solution('94') == '2')\nassert(solution('95') == '1')\nassert(solution('96') == '2')\nassert(solution('97') == '1')\nassert(solution('98') == '2')\nassert(solution('99') == '1')\nassert(solution('100') == '2')\nassert(solution('101') == '1')\nassert(solution('102') == '2')\nassert(solution('103') == '1')\nassert(solution('104') == '2')\nassert(solution('105') == '1')\nassert(solution('106') == '2')\nassert(solution('107') == '1')\nassert(solution('108') == '2')\nassert(solution('109') == '1')\nassert(solution('110') == '2')\nassert(solution('111') == '1')\nassert(solution('112') == '2')\nassert(solution('113') == '1')\nassert(solution('114') == '2')\nassert(solution('115') == '1')\nassert(solution('116') == '2')\nassert(solution('117') == '1')\nassert(solution('118') == '2')\nassert(solution('119') == '1')\nassert(solution('120') == '2')\nassert(solution('121') == '1')\nassert(solution('122') == '2')\nassert(solution('123') == '1')\nassert(solution('124') == '2')\nassert(solution('125') == '1')\nassert(solution('126') == '2')\nassert(solution('127') == '1')\nassert(solution('128') == '2')\nassert(solution('129') == '1')\nassert(solution('130') == '2')\nassert(solution('131') == '1')\nassert(solution('132') == '2')\nassert(solution('133') == '1')\nassert(solution('134') == '2')\nassert(solution('135') == '1')\nassert(solution('136') == '2')\nassert(solution('137') == '1')\nassert(solution('138') == '2')\nassert(solution('139') == '1')\nassert(solution('140') == '2')\nassert(solution('141') == '1')\nassert(solution('142') == '2')\nassert(solution('143') == '1')\nassert(solution('144') == '2')\nassert(solution('145') == '1')"
    },
    {
        "number": 1920,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    friends = [stdin.readline().split() for _ in range(n)]\n    days = [0] * 366\n    for f in friends:\n        days[int(f[1]) - 1] += 1\n        days[int(f[2]) - 1] += 1\n    print(days.index(max(days)) + 1)"
    },
    {
        "number": 1921,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    s_x, s_y, f_x, f_y = [int(x) for x in stdin.split()]\n    instant_movements = [tuple(int(x) for x in stdin.split()) for _ in range(m)]\n    return str(min(bfs(n, s_x, s_y, f_x, f_y, instant_movements)))\n\ndef"
    },
    {
        "number": 1922,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    return str(n * m - (n + m - 1) * (n + m - 2) // 2)"
    },
    {
        "number": 1923,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    L = list(map(int, stdin.readline().strip().split()))\n    L.sort()\n    L.reverse()\n    print(L)\n    return str(sum(L[:N]))"
    },
    {
        "number": 1924,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r1, c1, r2, c2 = [int(x) for x in stdin.split()]\n    return str((r2 - r1 + 1) * (c2 - c1 + 1) % (10 ** 9 + 7))"
    },
    {
        "number": 1925,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, N = [int(x) for x in stdin.split()]\n    return str(max(0, (A * N) // B - A * (N // B)))"
    },
    {
        "number": 1926,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    result = [0] * (n - 1)\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if a[i] > a[j]:\n                result[i] += 1\n    return''.join(map(str, result))"
    },
    {
        "number": 1927,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    p = [int(x) for x in stdin.split()]\n    p = [x - 1 for x in p]\n    for _ in range(m):\n        a = int(stdin.readline())\n        p[a - 1] += 1\n        p[a - 1] %= n\n    p = [x + 1 for x in p]\n    p = [str(x) for x in p]\n    return''.join(p)"
    },
    {
        "number": 1928,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    matrix = [[0] * m for _ in range(n)]\n    for _ in range(k):\n        i, j = [int(x) for x in stdin.split()]\n        matrix[i - 1][j - 1] = 1\n    return str(solution_recursive(matrix, n, m))\n\n\ndef"
    },
    {
        "number": 1929,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t, c = [int(x) for x in stdin.split()]\n    arr = [int(x) for x in stdin.split()]\n    return str(solution_recursive(n, t, c, arr))\n\ndef"
    },
    {
        "number": 1930,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    p = list(map(int, stdin.readline().split()))\n    inversions = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if p[i] > p[j]:\n                inversions += 1\n    return str(inversions % 1000000007)"
    },
    {
        "number": 1931,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        print(solution_naive(n))\n\ndef"
    },
    {
        "number": 1932,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    faces = 0\n    for _ in range(n):\n        s = stdin.strip()\n        if s == \"Tetrahedron\":\n            faces += 4\n        elif s == \"Cube\":\n            faces += 6\n        elif s == \"Octahedron\":\n            faces += 8\n        elif s == \"Dodecahedron\":\n            faces += 12\n        elif s == \"Icosahedron\":\n            faces += 20\n    return str(faces)"
    },
    {
        "number": 1933,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    a = [[int(x) for x in stdin.split()] for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 1:\n                break\n        if a[i][j] == 1:\n            break\n    return '{} {}'.format(i, j)"
    },
    {
        "number": 1934,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    queries = [tuple(int(x) for x in stdin.split()) for _ in range(m)]\n    for l, r in queries:\n        if l > r:\n            continue\n        if l > n or r > n:\n            continue\n        if a[l - 1] == a[r - 1]:\n            print(abs(l - 1 - r))\n        else:\n            print(-1)\n    return ''"
    },
    {
        "number": 1935,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    d = list(map(int, stdin.split()))\n    g, r = map(int, stdin.split())\n    if n < m:\n        return -1\n    if n == m:\n        return 0\n    if n == 1:\n        return g\n    if m == 1:\n        return r\n    if m == 2:\n        return g + r\n    if m == 3:\n        return g + r + g\n    if m == 4:\n        return g + r + g + r\n    if m == 5:\n        return g + r + g + r + g\n    if m == 6:\n        return g + r + g + r + g + r\n    if m == 7:\n        return g + r + g + r + g + r + g\n    if m == 8:\n        return g + r + g + r + g + r + g + r\n    if m == 9:\n        return g + r + g + r + g + r + g + r + g\n    if m == 10:\n        return g + r + g + r + g + r + g + r + g + r\n    if m == 11:\n        return g + r + g + r + g + r + g + r + g + r + g\n    if m == 12:\n        return g + r + g + r + g + r + g + r + g + r + g + r\n    if m == 13:\n        return g + r + g + r + g + r + g + r + g + r + g + r + g\n    if m == 14:\n        return g + r + g + r + g + r + g + r + g + r + g + r + g + r\n    if m == 15:\n        return g + r + g + r + g + r + g + r + g + r + g + r + g + r + g\n    if m == 16:\n        return g + r + g + r + g + r + g + r + g + r + g + r + g + r + g + r + g\n    if m == 17:\n        return g + r + g + r + g + r + g + r + g + r + g + r + g + r + g + r + g + r + g\n    if m == 18:\n        return g + r + g + r + g + r + g + r + g + r + g + r + g + r + g + r + g + r + g + r + g + r + g\n    if m == 19:\n        return g + r + g + r + g + r + g + r + g + r + g + r + g + r + g + r + g + r + g + r + g + r + g + r + g + r + g + r + g + r + g + r + g + r + g + r + g + r + g + r + g + r + g + r + g + r + g + r + g + r + g + r + g + r + g + r + g + r + g + r + g + r + g + r + g + r + g + r + g + r + g + r + g + r + g + r + g + r + g + r + g + r + g + r + g + r + g + r + g + r + g + r + g + r + g + r + g + r + g + r + g + r + g + r + g + r + g + r + g + r + g + r + g + r + g + r + g + r + g + r + g + r + g + r + g + r + g + r + g + r + g + r + g + r + g + r + g + r + g + r + g + r + g + r + g + r + g + r + g + r + g + r + g + r + g + r + g + r + g + r + g + r + g + r + g + r + g + r + g + r + g + r + g + r + g + r"
    },
    {
        "number": 1936,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        l, r = map(int, stdin.readline().strip().split())\n        if l > r:\n            print(-1, -1)\n        else:\n            x, y = 1, 1\n            while l % x!= 0 or r % y!= 0:\n                x += 1\n                y += 1\n            print(x, y)\n    return \"\""
    },
    {
        "number": 1937,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    a.sort()\n    b.sort()\n    if a == b:\n        return''.join(map(str, a))\n    else:\n        return''.join(map(str, b))\n\nassert solution('''4\n5 6\n''') == '2 3 3 3'\nassert solution('''6\n2 1 2\n''') == '0 0 1 1 1 2'\nassert solution('''6\n2 1 2\n''') == '0 0 1 1 1 2'\nassert solution('''6\n2 1 2\n''') == '0 0 1 1 1 2'\nassert solution('''6\n2 1 2\n''') == '0 0 1 1 1 2'\nassert solution('''6\n2 1 2\n''') == '0 0 1 1 1 2'\nassert solution('''6\n2 1 2\n''') == '0 0 1 1 1 2'\nassert solution('''6\n2 1 2\n''') == '0 0 1 1 1 2'\nassert solution('''6\n2 1 2\n''') == '0 0 1 1 1 2'\nassert solution('''6\n2 1 2\n''') == '0 0 1 1 1 2'\nassert solution('''6\n2 1 2\n''') == '0 0 1 1 1 2'\nassert solution('''6\n2 1 2\n''') == '0 0 1 1 1 2'\nassert solution('''6\n2 1 2\n''') == '0 0 1 1 1 2'\nassert solution('''6\n2 1 2\n''') == '0 0 1 1 1 2'\nassert solution('''6\n2 1 2\n''') == '0 0 1 1 1 2'\nassert solution('''6\n2 1 2\n''') == '0 0 1 1 1 2'\nassert solution('''6\n2 1 2\n''') == '0 0 1 1 1 2'\nassert solution('''6\n2 1 2\n''') == '0 0 1 1 1 2'\nassert solution('''6\n2 1 2\n''') == '0 0 1 1 1 2'\nassert solution('''6\n2 1 2\n''') == '0 0 1 1 1 2'\nassert solution('''6\n2 1 2\n''') == '0 0 1 1 1 2'\nassert solution('''6\n2 1 2\n''') == '0 0 1 1 1 2'\nassert solution('''6\n2 1 2\n''') == '0 0 1 1 1 2'\nassert solution('''6\n2 1 2\n''') == '0 0 1 1 1 2'\nassert solution('''6\n2 1 2\n''') == '0 0 1 1 1 2'\nassert solution('''6\n2 1 2\n''') == '0 0 1 1 1 2'\nassert solution('''6\n2 1 2\n''') == '0 0 1 1 1 2'\nassert solution('''6\n2 1 2\n''') == '0 0 1 1 1 2'\nassert solution('''6\n2 1 2\n''') == '0 0 1 1 1 2'\nassert solution('''6\n2 1 2\n''') == '0 0 1 1 1 2'\nassert solution('''6\n2 1 2\n''') == '0 0 1 1 1 2'\nassert solution('''6\n2 1 2\n''') == '0 0 1 1 1 2'\nassert solution('''6\n2 1 2\n''') == '0 0 1 1 1 2'\nassert solution('''6\n2 1 2\n''') == '0 0 1 1 1 2'\nassert solution('''6\n2 1 2\n''') == '0 0 1 1 1 2'\nassert solution('''6\n2 1 2\n''') == '0 0 1 1 1 2'\nassert solution('''6\n2 1 2\n''') == '0 0 1 1 1 2'\nassert solution('''6\n2 1 2\n''') == '0 0 1 1 1 2'\nassert solution('''6\n2 1 2\n''') == '0 0 1 1 1 2'\nassert solution('''6\n2 1 2\n''') == '0 0 1 1 1 2'\nassert solution('''6\n2 1 2\n''') == '0 0 1 1 1 2'\nassert solution('''6\n2 1 2\n''') == '0 0 1 1 1 2'\nassert solution('''6\n2 1 2\n''') == '0 0 1 1 1 2'\nassert solution('''6\n2 1 2\n''') == '0 0 1 1 1 2'\nassert solution('''6\n2 1 2\n''') == '0 0 1 1 1 2'\nassert solution('''6\n2 1 2\n''') == '0 0 1 1 1 2'\nassert solution('''6\n2 1 2\n''') == '0 0 1 1 1 2'\nassert solution('''6\n2 1 2\n''') == '0 0 1 1 1 2'\nassert solution('''6\n2 1 2\n''') == '0 0 1 1 1 2'\nassert solution('''6\n2 1 2\n''') == '0 0 1 1 1 2'\nassert solution('''6\n2 1 2\n''') == '0 0 1 1 1 2'\nassert solution('''6\n2 1 2\n''') == '0 0 1 1 1 2'\nassert solution('''6\n2 1 2\n''') == '0 0 1 1 1 2'\nassert solution('''6\n2 1 2\n''') == '0 0 1 1 1 2'\nassert solution('''6\n2 1 2\n''') == '0 0 1 1 1 2'\nassert solution('''6\n2 1 2\n''') == '0 0 1 1 1 2'\nassert solution('''6\n2 1 2\n''') == '0 0 1 1 1 2'\nassert solution('''6\n2 1 2\n''') == '0 0 1 1 1 2'\nassert solution('''"
    },
    {
        "number": 1938,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    points = [int(x) for x in stdin.split()]\n    points.sort()\n    result = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if points[i] <= points[j] <= points[j] + k:\n                result += 1\n    return str(result)"
    },
    {
        "number": 1939,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return '\\n'.join(\n       ''.join(str(i + j) for i in range(1, n + 1))\n        for j in range(1, n + 1)\n    )"
    },
    {
        "number": 1940,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    w = [int(x) for x in stdin.split()]\n    \n    # dp[i][j] is the minimum number of days to collect all pebbles of type j\n    # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + 1\n    # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i-1][j-2]) + 1\n    # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i-1][j-2], dp[i-1][j-3]) + 1\n    # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i-1][j-2], dp[i-1][j-3], dp[i-1][j-4]) + 1\n    # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i-1][j-2], dp[i-1][j-3], dp[i-1][j-4], dp[i-1][j-5]) + 1\n    # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i-1][j-2], dp[i-1][j-3], dp[i-1][j-4], dp[i-1][j-5], dp[i-1][j-6]) + 1\n    # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i-1][j-2], dp[i-1][j-3], dp[i-1][j-4], dp[i-1][j-5], dp[i-1][j-6], dp[i-1][j-7]) + 1\n    # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i-1][j-2], dp[i-1][j-3], dp[i-1][j-4], dp[i-1][j-5], dp[i-1][j-6], dp[i-1][j-7], dp[i-1][j-8]) + 1\n    # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i-1][j-2], dp[i-1][j-3], dp[i-1][j-4], dp[i-1][j-5], dp[i-1][j-6], dp[i-1][j-7], dp[i-1][j-8], dp[i-1][j-9]) + 1\n    # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i-1][j-2], dp[i-1][j-3], dp[i-1][j-4], dp[i-1][j-5], dp[i-1][j-6], dp[i-1][j-7], dp[i-1][j-8], dp[i-1][j-9], dp[i-1][j-10]) + 1\n    # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i-1][j-2], dp[i-1][j-3], dp[i-1][j-4], dp[i-1][j-5], dp[i-1][j-6], dp[i-1][j-7], dp[i-1][j-8], dp[i-1][j-9], dp[i-1][j-10], dp[i-1][j-11]) + 1\n    # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i-1][j-2], dp[i-1][j-3], dp[i-1][j-4], dp[i-1][j-5], dp[i-1][j-6], dp[i-1][j-7], dp[i-1][j-8], dp[i-1][j-9], dp[i-1][j-10], dp[i-1][j-11], dp[i-1][j-12]) + 1\n    # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i-1][j-2], dp[i-1][j-3], dp[i-1][j-4], dp[i-1][j-5], dp[i-1][j-6], dp[i-1][j-7], dp[i-1][j-8], dp[i-1][j-9], dp[i-1][j-10], dp[i-1][j-11], dp[i-1][j-12], dp[i-1][j-13]) + 1\n    # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i-1][j-2], dp[i-1][j-3], dp[i-1][j-4], dp[i-1][j-5], dp[i-1][j-6], dp[i-1][j-7], dp[i-1][j-8], d"
    },
    {
        "number": 1941,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, n = [int(x) for x in stdin.split()]\n    l = []\n    for _ in range(n):\n        l.append(int(stdin.readline()))\n    l.sort()\n    r = []\n    for i in range(n):\n        r.append(l[i] - (i + 1) * B)\n    r.sort()\n    for i in range(n):\n        if r[i] <= A:\n            print(i + 1)\n        else:\n            print(-1)\n    return \"\""
    },
    {
        "number": 1942,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline())\n    for _ in range(T):\n        n, l, r = map(int, stdin.readline().split())\n        print(l, r)"
    },
    {
        "number": 1943,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 1944,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    laptops = [tuple(map(int, line.split())) for line in stdin.readlines()]\n    laptops.sort(key=lambda x: x[0])\n    laptops.sort(key=lambda x: x[1], reverse=True)\n    for i in range(n):\n        if laptops[i][0] < laptops[i+1][0] and laptops[i][1] > laptops[i+1][1]:\n            return \"Happy Alex\"\n    return \"Poor Alex\""
    },
    {
        "number": 1945,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 1946,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    m = int(stdin.readline())\n    b = [int(x) for x in stdin.readline().split()]\n    a.sort()\n    b.sort()\n    a_set = set(a)\n    b_set = set(b)\n    a_set_size = len(a_set)\n    b_set_size = len(b_set)\n    a_set_sum = sum(a)\n    b_set_sum = sum(b)\n    max_sum = a_set_sum + b_set_sum\n    for i in range(a_set_size):\n        for j in range(b_set_size):\n            if i == j:\n                continue\n            if a[i] in b_set:\n                max_sum = max(max_sum, a_set_sum + b_set_sum - a[i] - b[j])\n    return str(max_sum)"
    },
    {
        "number": 1947,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, l = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a.append(l)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0, 0)\n    a.insert(0"
    },
    {
        "number": 1948,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = [int(x) for x in stdin.split()]\n    edges = [tuple(int(x) for x in stdin.split()) for _ in range(n - 1)]\n    return solution(edges, n, x)\n\ndef"
    },
    {
        "number": 1949,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    for i in range(k):\n        min_non_zero = min(a)\n        print(min_non_zero)\n        a = [x - min_non_zero if x!= 0 else 0 for x in a]\n    return ''"
    },
    {
        "number": 1950,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    balls = [int(x) for x in stdin.readline().split()]\n    balls.sort()\n    penalty = 0\n    for i in range(n):\n        penalty += balls[i] * (n - i)\n    return str(penalty)"
    },
    {
        "number": 1951,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    shurikens = [int(stdin.readline()) for _ in range(n)]\n    shurikens.sort()\n    if shurikens == list(range(1, n + 1)):\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 1952,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    arrays = list(map(int, stdin.split()))\n    arrays.sort()\n    arrays.reverse()\n    arrays = [arrays[i:i + k] for i in range(0, len(arrays), k)]\n    arrays = [arrays[i] for i in range(len(arrays)) if len(arrays[i]) == k]\n    arrays = [arrays[i] for i in range(len(arrays)) if len(arrays[i]) == 1]\n    arrays = [arrays[i] for i in range(len(arrays)) if len(arrays[i]) == k]\n    arrays = [arrays[i] for i in range(len(arrays)) if len(arrays[i]) == 1]\n    arrays = [arrays[i] for i in range(len(arrays)) if len(arrays[i]) == k]\n    arrays = [arrays[i] for i in range(len(arrays)) if len(arrays[i]) == 1]\n    arrays = [arrays[i] for i in range(len(arrays)) if len(arrays[i]) == k]\n    arrays = [arrays[i] for i in range(len(arrays)) if len(arrays[i]) == 1]\n    arrays = [arrays[i] for i in range(len(arrays)) if len(arrays[i]) == k]\n    arrays = [arrays[i] for i in range(len(arrays)) if len(arrays[i]) == 1]\n    arrays = [arrays[i] for i in range(len(arrays)) if len(arrays[i]) == k]\n    arrays = [arrays[i] for i in range(len(arrays)) if len(arrays[i]) == 1]\n    arrays = [arrays[i] for i in range(len(arrays)) if len(arrays[i]) == k]\n    arrays = [arrays[i] for i in range(len(arrays)) if len(arrays[i]) == 1]\n    arrays = [arrays[i] for i in range(len(arrays)) if len(arrays[i]) == k]\n    arrays = [arrays[i] for i in range(len(arrays)) if len(arrays[i]) == 1]\n    arrays = [arrays[i] for i in range(len(arrays)) if len(arrays[i]) == k]\n    arrays = [arrays[i] for i in range(len(arrays)) if len(arrays[i]) == 1]\n    arrays = [arrays[i] for i in range(len(arrays)) if len(arrays[i]) == k]\n    arrays = [arrays[i] for i in range(len(arrays)) if len(arrays[i]) == 1]\n    arrays = [arrays[i] for i in range(len(arrays)) if len(arrays[i]) == k]\n    arrays = [arrays[i] for i in range(len(arrays)) if len(arrays[i]) == 1]\n    arrays = [arrays[i] for i in range(len(arrays)) if len(arrays[i]) == k]\n    arrays = [arrays[i] for i in range(len(arrays)) if len(arrays[i]) == 1]\n    arrays = [arrays[i] for i in range(len(arrays)) if len(arrays[i]) == k]\n    arrays = [arrays[i] for i in range(len(arrays)) if len(arrays[i]) == 1]\n    arrays = [arrays[i] for i in range(len(arrays)) if len(arrays["
    },
    {
        "number": 1953,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    t = [int(x) for x in stdin.readline().split()]\n    t.sort()\n    t.reverse()\n    print(t)\n    print(t[0])\n    print(t[1])\n    print(t[2])\n    print(t[3])\n    print(t[4])\n    print(t[5])\n    print(t[6])\n    print(t[7])\n    print(t[8])\n    print(t[9])\n    print(t[10])\n    print(t[11])\n    print(t[12])\n    print(t[13])\n    print(t[14])\n    print(t[15])\n    print(t[16])\n    print(t[17])\n    print(t[18])\n    print(t[19])\n    print(t[20])\n    print(t[21])\n    print(t[22])\n    print(t[23])\n    print(t[24])\n    print(t[25])\n    print(t[26])\n    print(t[27])\n    print(t[28])\n    print(t[29])\n    print(t[30])\n    print(t[31])\n    print(t[32])\n    print(t[33])\n    print(t[34])\n    print(t[35])\n    print(t[36])\n    print(t[37])\n    print(t[38])\n    print(t[39])\n    print(t[40])\n    print(t[41])\n    print(t[42])\n    print(t[43])\n    print(t[44])\n    print(t[45])\n    print(t[46])\n    print(t[47])\n    print(t[48])\n    print(t[49])\n    print(t[50])\n    print(t[51])\n    print(t[52])\n    print(t[53])\n    print(t[54])\n    print(t[55])\n    print(t[56])\n    print(t[57])\n    print(t[58])\n    print(t[59])\n    print(t[60])\n    print(t[61])\n    print(t[62])\n    print(t[63])\n    print(t[64])\n    print(t[65])\n    print(t[66])\n    print(t[67])\n    print(t[68])\n    print(t[69])\n    print(t[70])\n    print(t[71])\n    print(t[72])\n    print(t[73])\n    print(t[74])\n    print(t[75])\n    print(t[76])\n    print(t[77])\n    print(t[78])\n    print(t[79])\n    print(t[80])\n    print(t[81])\n    print(t[82])\n    print(t[83])\n    print(t[84])\n    print(t[85])\n    print(t[86])\n    print(t[87])\n    print(t[88])\n    print(t[89])\n    print(t[90])\n    print(t[91])\n    print(t[92])\n    print(t[93])\n    print(t[94])\n    print(t[95])\n    print(t[96])\n    print(t[97])\n    print(t[98])\n    print(t[99])\n    print(t[100])\n    print(t[101])\n    print(t[102])\n    print(t[103])\n    print(t[104])\n    print(t[105])\n    print(t[106])\n    print(t[107])\n    print(t[108])\n    print(t[109])\n    print(t[110])\n    print(t[111])\n    print(t[112])\n    print(t[113])\n    print(t[114])\n    print(t[115])\n    print(t[116])\n    print(t[117])\n    print(t[118])\n    print(t[119])\n    print(t[120])\n    print(t[121])\n    print(t[122])\n    print(t[123])\n    print(t[124])\n    print(t[125])\n    print(t[126])\n    print(t[127])\n    print(t[128])\n    print(t[129])\n    print(t[130])\n    print(t[131])\n    print(t[132])\n    print(t[133])\n    print(t[134])\n    print(t[135])\n    print(t[136])\n    print(t[137])\n    print(t[138])\n    print(t[139])\n    print(t[140])\n    print(t[141])\n    print(t[142])\n    print(t[143])\n    print(t[144])\n    print(t[145])\n    print(t[146])\n    print(t[147])\n    print(t[148])\n    print(t[149])\n    print(t[150])\n    print(t[151])\n    print(t[152])\n    print(t[153])\n    print(t[154])\n    print(t[155])\n    print(t[156])\n    print(t[157])\n    print(t[158])\n    print(t[159])\n    print(t[160])\n    print(t[161])\n    print(t[162])\n    print(t[163])\n    print(t[164])\n    print(t[165])\n    print(t[166])\n    print(t[167])\n    print(t[168])\n    print(t[169])\n    print(t[170])\n    print(t[171])\n    print(t[172])\n    print(t[173])\n    print(t[174])\n    print(t[175])\n    print(t[176])\n    print(t[177])\n    print(t[178])\n    print(t[179])\n    print(t[180])\n    print(t[181])\n    print(t[182])\n    print(t[183])\n    print(t[184])\n    print(t[185])\n    print(t[186])\n    print(t[187])\n    print(t[188])\n    print(t[189])\n    print(t[190])\n    print(t[191])\n    print(t[192])\n    print(t[193])\n    print(t[194])\n    print(t[195])\n    print(t[196])\n    print(t[197])\n    print(t[198])\n    print(t[199])\n    print(t[200])\n    print(t[201])\n    print(t[202])\n    print(t[203])\n    print(t[204])\n    print(t[205])\n    print(t[206])\n    print(t[207])\n    print(t[208])\n    print(t[209])\n    print(t[210])\n    print(t[211])\n    print(t[212])"
    },
    {
        "number": 1954,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, f = [int(x) for x in stdin.split()]\n    return str(factorial(n) // (factorial(n - f) * factorial(f)))\n\ndef"
    },
    {
        "number": 1955,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    d = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    passed = [False] * m\n    for i in range(n):\n        for j in range(m):\n            if passed[j] or d[j] == 0:\n                continue\n            if a[j] == 0:\n                passed[j] = True\n            else:\n                a[j] -= 1\n        if all(passed):\n            return i + 1\n    return -1"
    },
    {
        "number": 1956,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        s, e = [int(x) for x in stdin.readline().strip().split()]\n        if s > e:\n            print(0, 1)\n        else:\n            print(1, 0)\n\n\"\"\"\n"
    },
    {
        "number": 1957,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, A, B = map(int, stdin.split())\n    sizes = list(map(int, stdin.split()))\n    sizes.sort()\n    sizes.reverse()\n    sizes = sizes[:n]\n    sizes.sort()\n    sizes.reverse()\n    sizes = sizes[:n]\n    sizes.sort()\n    sizes.reverse()\n    sizes = sizes[:n]\n    sizes.sort()\n    sizes.reverse()\n    sizes = sizes[:n]\n    sizes.sort()\n    sizes.reverse()\n    sizes = sizes[:n]\n    sizes.sort()\n    sizes.reverse()\n    sizes = sizes[:n]\n    sizes.sort()\n    sizes.reverse()\n    sizes = sizes[:n]\n    sizes.sort()\n    sizes.reverse()\n    sizes = sizes[:n]\n    sizes.sort()\n    sizes.reverse()\n    sizes = sizes[:n]\n    sizes.sort()\n    sizes.reverse()\n    sizes = sizes[:n]\n    sizes.sort()\n    sizes.reverse()\n    sizes = sizes[:n]\n    sizes.sort()\n    sizes.reverse()\n    sizes = sizes[:n]\n    sizes.sort()\n    sizes.reverse()\n    sizes = sizes[:n]\n    sizes.sort()\n    sizes.reverse()\n    sizes = sizes[:n]\n    sizes.sort()\n    sizes.reverse()\n    sizes = sizes[:n]\n    sizes.sort()\n    sizes.reverse()\n    sizes = sizes[:n]\n    sizes.sort()\n    sizes.reverse()\n    sizes = sizes[:n]\n    sizes.sort()\n    sizes.reverse()\n    sizes = sizes[:n]\n    sizes.sort()\n    sizes.reverse()\n    sizes = sizes[:n]\n    sizes.sort()\n    sizes.reverse()\n    sizes = sizes[:n]\n    sizes.sort()\n    sizes.reverse()\n    sizes = sizes[:n]\n    sizes.sort()\n    sizes.reverse()\n    sizes = sizes[:n]\n    sizes.sort()\n    sizes.reverse()\n    sizes = sizes[:n]\n    sizes.sort()\n    sizes.reverse()\n    sizes = sizes[:n]\n    sizes.sort()\n    sizes.reverse()\n    sizes = sizes[:n]\n    sizes.sort()\n    sizes.reverse()\n    sizes = sizes[:n]\n    sizes.sort()\n    sizes.reverse()\n    sizes = sizes[:n]\n    sizes.sort()\n    sizes.reverse()\n    sizes = sizes[:n]\n    sizes.sort()\n    sizes.reverse()\n    sizes = sizes[:n]\n    sizes.sort()\n    sizes.reverse()\n    sizes = sizes[:n]\n    sizes.sort()\n    sizes.reverse()\n    sizes = sizes[:n]\n    sizes.sort()\n    sizes.reverse()\n    sizes = sizes[:n]\n    sizes.sort()\n    sizes.reverse()\n    sizes = sizes[:n]\n    sizes.sort()\n    sizes.reverse()\n    sizes = sizes[:n]\n    sizes.sort()\n    sizes.reverse()\n    sizes = sizes[:n]\n    sizes.sort()\n    sizes.reverse()\n    sizes = sizes[:n]\n    sizes.sort()\n    sizes.reverse()\n    sizes = sizes[:n]\n    sizes.sort()\n    sizes.reverse()\n    sizes = sizes[:n]\n    sizes.sort()\n    sizes.reverse()\n    sizes = sizes[:n]\n    sizes.sort()\n    sizes.reverse()\n    sizes = sizes[:n]\n    sizes.sort()\n    sizes.reverse()\n    sizes = sizes[:n]\n    sizes.sort()\n    sizes.reverse()\n    sizes = sizes[:n]\n    sizes.sort()\n    sizes.reverse()\n    sizes = sizes[:n]\n    sizes.sort()\n    sizes.reverse()\n    sizes = sizes[:n]\n    sizes.sort()\n    sizes.reverse()\n    sizes = sizes[:n]\n    sizes.sort()\n    sizes.reverse()\n    sizes = sizes[:n]\n    sizes.sort()\n    sizes.reverse()\n    sizes = sizes[:n]\n    sizes.sort()\n    sizes.reverse()\n    sizes = sizes[:n]\n    sizes.sort()\n    sizes.reverse()\n    sizes = sizes[:n]\n    sizes.sort()\n    sizes.reverse()\n    sizes = sizes[:n]\n    sizes.sort()\n    sizes.reverse()\n    sizes = sizes[:n]\n    sizes.sort()\n    sizes.reverse()\n    sizes = sizes[:n]\n    sizes.sort()\n    sizes.reverse()\n    sizes = sizes[:n]\n    sizes.sort()\n    sizes.reverse()\n    sizes = sizes[:n]\n    sizes.sort()\n    sizes.reverse()\n    sizes = sizes[:n]\n    sizes.sort()\n    sizes.reverse()\n    sizes = sizes[:n]\n    sizes.sort()\n    sizes.reverse()\n    sizes = sizes[:n]\n    sizes.sort()\n    sizes.reverse()\n    sizes = sizes[:n]\n    sizes.sort()\n    sizes.reverse()\n    sizes = sizes[:n]\n    sizes.sort()\n    sizes.reverse()\n    sizes = sizes[:n]\n    sizes.sort()\n    sizes.reverse()\n    sizes = sizes[:"
    },
    {
        "number": 1958,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p = [int(x) for x in stdin.split()]\n    buyers = [stdin.split()[1] for _ in range(n)]\n    total = 0\n    for buyer in buyers:\n        if buyer == 'half':\n            total += p / 2\n        elif buyer == 'halfplus':\n            total += p / 2 + p / 4\n    return str(total)"
    },
    {
        "number": 1959,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    eugeny_cards = list(map(int, stdin.split()))\n    nikolay_cards = list(range(1, m + 1))\n    eugeny_cards_set = set(eugeny_cards)\n    nikolay_cards_set = set(nikolay_cards)\n    eugeny_cards_set_diff = eugeny_cards_set.difference(nikolay_cards_set)\n    eugeny_cards_set_diff_len = len(eugeny_cards_set_diff)\n    if eugeny_cards_set_diff_len == 0:\n        return str(-1)\n    return str(eugeny_cards_set_diff_len)\n\nassert(solution('''6 2\n5 6 7 9 4 5''') == '1')\nassert(solution('''8 6\n7 7 7 7 8 8 8 8''') == '6')\nassert(solution('''4 1\n4 2 1 10''') == '-1')\nassert(solution('''4 1\n4 2 1 10''') == '-1')\nassert(solution('''4 1\n4 2 1 10''') == '-1')\nassert(solution('''4 1\n4 2 1 10''') == '-1')\nassert(solution('''4 1\n4 2 1 10''') == '-1')\nassert(solution('''4 1\n4 2 1 10''') == '-1')\nassert(solution('''4 1\n4 2 1 10''') == '-1')\nassert(solution('''4 1\n4 2 1 10''') == '-1')\nassert(solution('''4 1\n4 2 1 10''') == '-1')\nassert(solution('''4 1\n4 2 1 10''') == '-1')\nassert(solution('''4 1\n4 2 1 10''') == '-1')\nassert(solution('''4 1\n4 2 1 10''') == '-1')\nassert(solution('''4 1\n4 2 1 10''') == '-1')\nassert(solution('''4 1\n4 2 1 10''') == '-1')\nassert(solution('''4 1\n4 2 1 10''') == '-1')\nassert(solution('''4 1\n4 2 1 10''') == '-1')\nassert(solution('''4 1\n4 2 1 10''') == '-1')\nassert(solution('''4 1\n4 2 1 10''') == '-1')\nassert(solution('''4 1\n4 2 1 10''') == '-1')\nassert(solution('''4 1\n4 2 1 10''') == '-1')\nassert(solution('''4 1\n4 2 1 10''') == '-1')\nassert(solution('''4 1\n4 2 1 10''') == '-1')\nassert(solution('''4 1\n4 2 1 10''') == '-1')\nassert(solution('''4 1\n4 2 1 10''') == '-1')\nassert(solution('''4 1\n4 2 1 10''') == '-1')\nassert(solution('''4 1\n4 2 1 10''') == '-1')\nassert(solution('''4 1\n4 2 1 10''') == '-1')\nassert(solution('''4 1\n4 2 1 10''') == '-1')\nassert(solution('''4 1\n4 2 1 10''') == '-1')\nassert(solution('''4 1\n4 2 1 10''') == '-1')\nassert(solution('''4 1\n4 2 1 10''') == '-1')\nassert(solution('''4 1\n4 2 1 10''') == '-1')\nassert(solution('''4 1\n4 2 1 10''') == '-1')\nassert(solution('''4 1\n4 2 1 10''') == '-1')\nassert(solution('''4 1\n4 2 1 10''') == '-1')\nassert(solution('''4 1\n4 2 1 10''') == '-1')\nassert(solution('''4 1\n4 2 1 10''') == '-1')\nassert(solution('''4 1\n4 2 1 10''') == '-1')\nassert(solution('''4 1\n4 2 1 10''') == '-1')\nassert(solution('''4 1\n4 2 1 10''') == '-1')\nassert(solution('''4 1\n4 2 1 10''') == '-1')\nassert(solution('''4 1\n4 2 1 10''') == '-1')\nassert(solution('''4 1\n4 2 1 10''') == '-1')\nassert(solution('''4 1\n4 2 1 10''') == '-1')\nassert(solution('''4 1\n4 2 1 10''') == '-1')\nassert(solution('''4 1\n4 2 1 10''') == '-1')\nassert(solution('''4 1\n4 2 1 10''') == '-1')\nassert(solution('''4 1\n4 2 1 10''') == '-1')\nassert(solution('''4 1\n4 2 1 10''') == '-1')\nassert(solution('''4 1\n4 2 1 10''') == '-1')\nassert(solution('''4 1\n4 2 1 10''') == '-1')\nassert(solution('''4 1\n4 2 1 10''') == '-1')\nassert(solution('''4 1\n4 2 1 10''') == '-1')\nassert(solution('''4 1\n4 2 1 10''') == '-1')\nassert(solution('''4 1\n4 2 1 10''') == '-1')\nassert(solution('''4 1\n4 2 1 10''') == '-1')\nassert(solution('''4 1\n4 2 1 10''') == '-1')\nassert(solution('''4 1\n4 2 1 10''') == '-1')\nassert(solution('''4 1\n4 2 1 10''') == '-1')\nassert(solution('''4 1\n4 2 1 10''') == '-1')"
    },
    {
        "number": 1960,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    \n    # find longest increasing subsequence\n    # for each index i, find longest increasing subsequence of length 1, 2, 3,..., n-1\n    # if a[i] is in no longest increasing subsequence, then a[i] belongs to group 1\n    # if a[i] is in at least one but not every longest increasing subsequence, then a[i] belongs to group 2\n    # if a[i] is in every longest increasing subsequence, then a[i] belongs to group 3\n    \n    # group 1: a[i] belongs to no longest increasing subsequence\n    # group 2: a[i] belongs to at least one but not every longest increasing subsequence\n    # group 3: a[i] belongs to every longest increasing subsequence\n    \n    # group 1: a[i] belongs to no longest increasing subsequence\n    # group 2: a[i] belongs to at least one but not every longest increasing subsequence\n    # group 3: a[i] belongs to every longest increasing subsequence\n    \n    # group 1: a[i] belongs to no longest increasing subsequence\n    # group 2: a[i] belongs to at least one but not every longest increasing subsequence\n    # group 3: a[i] belongs to every longest increasing subsequence\n    \n    # group 1: a[i] belongs to no longest increasing subsequence\n    # group 2: a[i] belongs to at least one but not every longest increasing subsequence\n    # group 3: a[i] belongs to every longest increasing subsequence\n    \n    # group 1: a[i] belongs to no longest increasing subsequence\n    # group 2: a[i] belongs to at least one but not every longest increasing subsequence\n    # group 3: a[i] belongs to every longest increasing subsequence\n    \n    # group 1: a[i] belongs to no longest increasing subsequence\n    # group 2: a[i] belongs to at least one but not every longest increasing subsequence\n    # group 3: a[i] belongs to every longest increasing subsequence\n    \n    # group 1: a[i] belongs to no longest increasing subsequence\n    # group 2: a[i] belongs to at least one but not every longest increasing subsequence\n    # group 3: a[i] belongs to every longest increasing subsequence\n    \n    # group 1: a[i] belongs to no longest increasing subsequence\n    # group 2: a[i] belongs to at least one but not every longest increasing subsequence\n    # group 3: a[i] belongs to every longest increasing subsequence\n    \n    # group 1: a[i] belongs to no longest increasing subsequence\n    # group 2: a[i] belongs to at least one but not every longest increasing subsequence\n    # group 3: a[i] belongs to every longest increasing subsequence\n    \n    # group 1: a[i] belongs to no longest increasing subsequence\n    # group 2: a[i] belongs to at least one but not every longest increasing subsequence\n    # group 3: a[i] belongs to every longest increasing subsequence\n    \n    # group 1: a[i] belongs to no longest increasing subsequence\n    # group 2: a[i] belongs to at least one but not every longest increasing subsequence\n    # group 3: a[i] belongs to every longest increasing subsequence\n    \n    # group 1: a[i] belongs to no longest increasing subsequence\n    # group 2: a[i] belongs to at least one but not every longest increasing subsequence\n    # group 3: a[i] belongs to every longest increasing subsequence\n    \n    # group 1: a[i] belongs to no longest increasing subsequence\n    # group 2: a[i] belongs to at least one but not every longest increasing subsequence\n    # group 3: a[i] belongs to every longest increasing subsequence\n    \n    # group 1: a[i] belongs to no longest increasing subsequence\n    # group 2: a[i] belongs to at least one but not every longest increasing subsequence\n    # group 3: a[i] belongs to every longest increasing subsequence\n    \n    # group 1: a[i] belongs to no longest increasing subsequence\n    # group 2: a[i] belongs to at least one but not every longest increasing subsequence\n    # group 3: a[i] belongs to every longest increasing subsequence\n    \n    # group 1: a[i] belongs to no longest increasing subsequence\n    # group 2: a[i] belongs to at least one but not every longest increasing subsequence\n    # group 3: a[i] belongs to every longest increasing subsequence\n    \n    # group 1: a[i] belongs to no longest increasing subsequence\n    # group 2: a[i] belongs to at least one but not every longest increasing subsequence\n    # group 3: a[i] belongs to every longest increasing subsequence\n    \n    # group 1: a[i] belongs to no longest increasing subsequence\n    # group 2: a[i] belongs to at least one but not every longest increasing subsequence\n    # group 3: a[i] belongs to every longest increasing subsequence\n    \n    # group 1: a[i] belongs to no longest increasing subsequence\n    # group 2: a[i] belongs to at least one but not every longest increasing subsequence\n    # group 3: a[i] belongs to every longest increasing subsequence\n    \n    # group 1: a[i] belongs to no longest increasing subsequence\n    # group 2: a[i] belongs to at least one but not every longest increasing subsequence\n    # group 3: a[i] belongs to every longest increasing subsequence\n    \n    # group 1: a[i] belongs to no longest increasing subsequence\n    # group 2: a[i] belongs to at least one but not every longest increasing subsequence\n    # group 3: a[i] belongs to every longest increasing subsequence\n    \n    "
    },
    {
        "number": 1961,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    grid = [list(stdin.strip()) for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#':\n                grid[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#':\n                grid[i][j] = '#'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#':\n                grid[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#':\n                grid[i][j] = '#'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#':\n                grid[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#':\n                grid[i][j] = '#'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#':\n                grid[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#':\n                grid[i][j] = '#'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#':\n                grid[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#':\n                grid[i][j] = '#'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#':\n                grid[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#':\n                grid[i][j] = '#'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#':\n                grid[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#':\n                grid[i][j] = '#'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#':\n                grid[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#':\n                grid[i][j] = '#'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#':\n                grid[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#':\n                grid[i][j] = '#'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#':\n                grid[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#':\n                grid[i][j] = '#'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#':\n                grid[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#':\n                grid[i][j] = '#'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#':\n                grid[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#':\n                grid[i][j] = '#'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#':\n                grid[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#':\n                grid[i][j] = '#'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#':\n                grid[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#':\n                grid[i][j] = '#'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#':\n                grid[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#':\n                grid[i][j] = '#'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#':\n                grid[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#':\n                grid[i][j] = '#'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#':\n                grid[i][j] = '.'\n    for i in range(n):\n"
    },
    {
        "number": 1962,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, l = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    if n * k < l:\n        return 0\n    if n == 1:\n        return a[0]\n    if n == 2:\n        return a[0] + a[1]\n    if n == 3:\n        return max(a[0] + a[1], a[1] + a[2], a[0] + a[2])\n    if n == 4:\n        return max(a[0] + a[1], a[1] + a[2], a[2] + a[3], a[0] + a[3])\n    if n == 5:\n        return max(a[0] + a[1], a[1] + a[2], a[2] + a[3], a[3] + a[4], a[0] + a[4])\n    if n == 6:\n        return max(a[0] + a[1], a[1] + a[2], a[2] + a[3], a[3] + a[4], a[4] + a[5], a[0] + a[5])\n    if n == 7:\n        return max(a[0] + a[1], a[1] + a[2], a[2] + a[3], a[3] + a[4], a[4] + a[5], a[5] + a[6], a[0] + a[6])\n    if n == 8:\n        return max(a[0] + a[1], a[1] + a[2], a[2] + a[3], a[3] + a[4], a[4] + a[5], a[5] + a[6], a[6] + a[7], a[0] + a[7])\n    if n == 9:\n        return max(a[0] + a[1], a[1] + a[2], a[2] + a[3], a[3] + a[4], a[4] + a[5], a[5] + a[6], a[6] + a[7], a[7] + a[8], a[0] + a[8])\n    if n == 10:\n        return max(a[0] + a[1], a[1] + a[2], a[2] + a[3], a[3] + a[4], a[4] + a[5], a[5] + a[6], a[6] + a[7], a[7] + a[8], a[8] + a[9], a[0] + a[9])\n    if n == 11:\n        return max(a[0] + a[1], a[1] + a[2], a[2] + a[3], a[3] + a[4], a[4] + a[5], a[5] + a[6], a[6] + a[7], a[7] + a[8], a[8] + a[9], a[9] + a[10], a[0] + a[10])\n    if n == 12:\n        return max(a[0] + a[1], a[1] + a[2], a[2] + a[3], a[3] + a[4], a[4] + a[5], a[5] + a[6], a[6] + a[7], a[7] + a[8], a[8] + a[9], a[9] + a[10], a[10] + a[11], a[0] + a[11])\n    if n == 13:\n        return max(a[0] + a[1], a[1] + a[2], a[2] + a[3], a[3] + a[4], a[4] + a[5], a[5] + a[6], a[6] + a[7], a[7] + a[8], a[8] + a[9], a[9] + a[10], a[10] + a[11], a[11] + a[12], a[0] + a[12])\n    if n == 14:\n        return max(a[0] + a[1], a[1] + a[2], a[2] + a[3], a[3] + a[4], a[4] + a[5], a[5] + a[6], a[6] + a[7], a[7] + a[8], a[8] + a[9], a[9] + a[10], a[10] + a[11], a[11] + a[12], a[12] + a[13], a[0] + a[13])\n    if n == 15:\n        return max(a[0] + a[1], a[1] + a[2], a[2] + a[3], a[3] + a[4], a[4] + a[5], a[5] + a[6], a[6] + a[7], a[7] + a[8], a[8] + a[9], a[9] + a[10], a[10] + a[11], a[11] + a[12], a[12] + a[13], a[13] + a[14], a[0] + a[14])\n    if n == 16:\n        return max(a[0] + a[1], a[1] + a[2], a[2] + a[3], a[3] + a[4], a[4] + a[5], a[5] + a[6], a[6] + a[7], a[7] + a[8], a[8] + a[9], a[9] + a[10], a[10] + a[11], a[11] + a[12], a[12] + a[13], a[13] + a[14], a[14] + a[15], a[0] + a[15])\n    if n == 17:\n        return max(a[0] + a[1], a[1] + a[2], a[2] + a[3], a[3] + a[4], a[4] + a[5], a"
    },
    {
        "number": 1963,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    a.sort()\n    count = 0\n    max_r = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[j] % a[i] == 0:\n                count += 1\n                max_r = max(max_r, j - i)\n    return str(count) +'' + str(max_r)"
    },
    {
        "number": 1964,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    cashiers = [int(x) for x in stdin.readline().split()]\n    products = [int(x) for x in stdin.readline().split()]\n    cashier_time = [0] * n\n    for i in range(n):\n        cashier_time[i] = cashiers[i] * 5 + products[i] * 15\n    return str(min(cashier_time))\n\nassert(solution('''1\n1\n1\n''') == '20')\nassert(solution('''4\n1 4 3 2\n100\n1 2 2 3\n1 9 1\n7 8\n''') == '100')\nassert(solution('''4\n1 4 3 2\n100\n1 2 2 3\n1 9 1\n7 8\n''') == '100')\nassert(solution('''4\n1 4 3 2\n100\n1 2 2 3\n1 9 1\n7 8\n''') == '100')\nassert(solution('''4\n1 4 3 2\n100\n1 2 2 3\n1 9 1\n7 8\n''') == '100')\nassert(solution('''4\n1 4 3 2\n100\n1 2 2 3\n1 9 1\n7 8\n''') == '100')\nassert(solution('''4\n1 4 3 2\n100\n1 2 2 3\n1 9 1\n7 8\n''') == '100')\nassert(solution('''4\n1 4 3 2\n100\n1 2 2 3\n1 9 1\n7 8\n''') == '100')\nassert(solution('''4\n1 4 3 2\n100\n1 2 2 3\n1 9 1\n7 8\n''') == '100')\nassert(solution('''4\n1 4 3 2\n100\n1 2 2 3\n1 9 1\n7 8\n''') == '100')\nassert(solution('''4\n1 4 3 2\n100\n1 2 2 3\n1 9 1\n7 8\n''') == '100')\nassert(solution('''4\n1 4 3 2\n100\n1 2 2 3\n1 9 1\n7 8\n''') == '100')\nassert(solution('''4\n1 4 3 2\n100\n1 2 2 3\n1 9 1\n7 8\n''') == '100')\nassert(solution('''4\n1 4 3 2\n100\n1 2 2 3\n1 9 1\n7 8\n''') == '100')\nassert(solution('''4\n1 4 3 2\n100\n1 2 2 3\n1 9 1\n7 8\n''') == '100')\nassert(solution('''4\n1 4 3 2\n100\n1 2 2 3\n1 9 1\n7 8\n''') == '100')\nassert(solution('''4\n1 4 3 2\n100\n1 2 2 3\n1 9 1\n7 8\n''') == '100')\nassert(solution('''4\n1 4 3 2\n100\n1 2 2 3\n1 9 1\n7 8\n''') == '100')\nassert(solution('''4\n1 4 3 2\n100\n1 2 2 3\n1 9 1\n7 8\n''') == '100')\nassert(solution('''4\n1 4 3 2\n100\n1 2 2 3\n1 9 1\n7 8\n''') == '100')\nassert(solution('''4\n1 4 3 2\n100\n1 2 2 3\n1 9 1\n7 8\n''') == '100')\nassert(solution('''4\n1 4 3 2\n100\n1 2 2 3\n1 9 1\n7 8\n''') == '100')\nassert(solution('''4\n1 4 3 2\n100\n1 2 2 3\n1 9 1\n7 8\n''') == '100')\nassert(solution('''4\n1 4 3 2\n100\n1 2 2 3\n1 9 1\n7 8\n''') == '100')\nassert(solution('''4\n1 4 3 2\n100\n1 2 2 3\n1 9 1\n7 8\n''') == '100')\nassert(solution('''4\n1 4 3 2\n100\n1 2 2 3\n1 9 1\n7 8\n''') == '100')\nassert(solution('''4\n1 4 3 2\n100\n1 2 2 3\n1 9 1\n7 8\n''') == '100')\nassert(solution('''4\n1 4 3 2\n100\n1 2 2 3\n1 9 1\n7 8\n''') == '100')\nassert(solution('''4\n1 4 3 2\n100\n1 2 2 3\n1 9 1\n7 8\n''') == '100')\nassert(solution('''4\n1 4 3 2\n100\n1 2 2 3\n1 9 1\n7 8\n''') == '100')\nassert(solution('''4\n1 4 3 2\n100\n1 2 2 3\n1 9 1\n7 8\n''') == '100')\nassert(solution('''4\n1 4 3 2\n100\n1 2 2 3\n1 9 1\n7 8\n''') == '100')\nassert(solution('''4\n1 4 3 2\n100\n1 2 2 3\n1 9 1\n7 8\n''') == '100')\nassert(solution('''4\n1 4 3 2\n100\n1 2 2 3\n1 9 1\n7 8\n''') == '100')\nassert(solution('''4\n1 4 3 2\n100\n1 2 2 3\n1 9 1\n7 8\n''') == '100')\nassert(solution('''4\n1 4 3 2\n100\n1 2 2 3\n1 9 1\n7 8\n''') == '100')\nassert(solution('''4\n1 4 3 2\n100\n1 2 2 3\n1 9 1\n7 8\n''') == '100')\nassert(solution('''4\n1 4 3 2\n100\n1 2 2 3\n1 9 1\n7 8\n''') == '100')\nassert(solution('''4\n1 4 3 2\n100\n1 2 2 3\n1 9 1\n7 8\n''') =="
    },
    {
        "number": 1965,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 1966,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    board = [list(map(int, stdin.readline().strip())) for _ in range(n)]\n    return str(solution_recursive(board, n))\n\ndef"
    },
    {
        "number": 1967,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    w, h = [int(x) for x in stdin.split()]\n    image = [list(stdin.strip()) for _ in range(h)]\n    for _ in range(3):\n        image = rotate(image)\n        image = flip(image)\n        image = zoom(image)\n    return '\\n'.join(''.join(x) for x in image)\n\ndef"
    },
    {
        "number": 1968,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, v = [int(x) for x in stdin.split()]\n    items = [int(x) for x in stdin.split()]\n    prices = [int(x) for x in stdin.split()]\n    \n    # sort the prices\n    prices.sort()\n    \n    # find the number of items that can be bought\n    n_items = 0\n    for i in range(n):\n        if prices[i] <= v:\n            n_items += items[i]\n            v -= prices[i]\n    \n    # find the number of sellers\n    n_sellers = 0\n    for i in range(n):\n        if prices[i] > v:\n            n_sellers += 1\n    \n    # print the number of sellers\n    print(n_sellers)\n    \n    # print the sellers\n    for i in range(n_sellers):\n        print(i + 1, end=\" \")\n    print()\n    \n    return \"\""
    },
    {
        "number": 1969,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    matrix = [list(stdin.readline().strip()) for _ in range(n)]\n    crosses = 0\n    for i in range(n):\n        for j in range(n):\n            if i > 0 and j > 0 and matrix[i][j] == 'X':\n                if matrix[i - 1][j - 1] == 'X':\n                    crosses += 1\n                if matrix[i - 1][j + 1] == 'X':\n                    crosses += 1\n                if matrix[i + 1][j - 1] == 'X':\n                    crosses += 1\n                if matrix[i + 1][j + 1] == 'X':\n                    crosses += 1\n    return str(crosses)"
    },
    {
        "number": 1970,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 1971,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    p = [int(x) for x in stdin.readline().split()]\n    p_inv = [0] * n\n    for i in range(n):\n        p_inv[p[i] - 1] = i + 1\n    p_inv = [str(x) for x in p_inv]\n    return \" \".join(p_inv)"
    },
    {
        "number": 1972,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [0] * 500000\n    for _ in range(n):\n        t, x, y = map(int, stdin.readline().split())\n        if t == 1:\n            a[x - 1] += y\n        elif t == 2:\n            s = 0\n            for i in range(x, 500000):\n                if i % x == y:\n                    s += a[i - 1]\n            print(s)"
    },
    {
        "number": 1973,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    u = [int(x) for x in stdin.split()]\n    \n    # find the longest streak\n    streak = 0\n    for i in range(n):\n        if u[i] == u[i - 1]:\n            streak += 1\n        else:\n            streak = 0\n        if streak > n - i:\n            return n - i\n    return n"
    },
    {
        "number": 1974,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    robbers = [int(x) for x in stdin.split()]\n    searchlights = [int(x) for x in stdin.split()]\n    return str(solution_recursive(robbers, searchlights, n, m))\n\ndef"
    },
    {
        "number": 1975,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    boys = [i for i in range(1, n + 1)]\n    girls = [i for i in range(1, m + 1)]\n    boys_dance = []\n    girls_dance = []\n    for i in range(n):\n        boys_dance.append(i)\n    for i in range(m):\n        girls_dance.append(i)\n    boys_dance.append(0)\n    girls_dance.append(0)\n    boys_dance.sort()\n    girls_dance.sort()\n    boys_dance = [str(x) for x in boys_dance]\n    girls_dance = [str(x) for x in girls_dance]\n    return''.join(boys_dance) +'' +''.join(girls_dance)"
    },
    {
        "number": 1976,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k, q = [int(x) for x in stdin.split()]\n    matrix = [[0] * m for _ in range(n)]\n    broken = set()\n    for _ in range(q):\n        x, y, t = [int(x) for x in stdin.split()]\n        matrix[x - 1][y - 1] = t\n        broken.add((x - 1, y - 1))\n    for i in range(n):\n        for j in range(m):\n            if (i, j) in broken:\n                continue\n            if (i, j) in broken:\n                continue\n            if i + k - 1 < n and j + k - 1 < m:\n                if matrix[i][j] == matrix[i + k - 1][j] == matrix[i][j + k - 1] == matrix[i + k - 1][j + k - 1]:\n                    return str(min(matrix[i][j], matrix[i + k - 1][j], matrix[i][j + k - 1], matrix[i + k - 1][j + k - 1]))\n    return \"-1\""
    },
    {
        "number": 1977,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    matrix = [list(stdin.strip()) for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if i > 0:\n                matrix[i][j] = matrix[i - 1][j]\n            if j > 0:\n                matrix[i][j] = matrix[i][j - 1]\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j]!= 'a':\n                matrix[i][j] = 'a'\n                if i > 0:\n                    matrix[i - 1][j] = 'a'\n                if j > 0:\n                    matrix[i][j - 1] = 'a'\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j]!= 'a':\n                matrix[i][j] = 'a'\n                if i > 0:\n                    matrix[i - 1][j] = 'a'\n                if j > 0:\n                    matrix[i][j - 1] = 'a'\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j]!= 'a':\n                matrix[i][j] = 'a'\n                if i > 0:\n                    matrix[i - 1][j] = 'a'\n                if j > 0:\n                    matrix[i][j - 1] = 'a'\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j]!= 'a':\n                matrix[i][j] = 'a'\n                if i > 0:\n                    matrix[i - 1][j] = 'a'\n                if j > 0:\n                    matrix[i][j - 1] = 'a'\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j]!= 'a':\n                matrix[i][j] = 'a'\n                if i > 0:\n                    matrix[i - 1][j] = 'a'\n                if j > 0:\n                    matrix[i][j - 1] = 'a'\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j]!= 'a':\n                matrix[i][j] = 'a'\n                if i > 0:\n                    matrix[i - 1][j] = 'a'\n                if j > 0:\n                    matrix[i][j - 1] = 'a'\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j]!= 'a':\n                matrix[i][j] = 'a'\n                if i > 0:\n                    matrix[i - 1][j] = 'a'\n                if j > 0:\n                    matrix[i][j - 1] = 'a'\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j]!= 'a':\n                matrix[i][j] = 'a'\n                if i > 0:\n                    matrix[i - 1][j] = 'a'\n                if j > 0:\n                    matrix[i][j - 1] = 'a'\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j]!= 'a':\n                matrix[i][j] = 'a'\n                if i > 0:\n                    matrix[i - 1][j] = 'a'\n                if j > 0:\n                    matrix[i][j - 1] = 'a'\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j]!= 'a':\n                matrix[i][j] = 'a'\n                if i > 0:\n                    matrix[i - 1][j] = 'a'\n                if j > 0:\n                    matrix[i][j - 1] = 'a'\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j]!= 'a':\n                matrix[i][j] = 'a'\n                if i > 0:\n                    matrix[i - 1][j] = 'a'\n                if j > 0:\n                    matrix[i][j - 1] = 'a'\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j]!= 'a':\n                matrix[i][j] = 'a'\n                if i > 0:\n                    matrix[i - 1][j] = 'a'\n                if j > 0:\n                    matrix[i][j - 1] = 'a'\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j]!= 'a':\n                matrix[i][j] = 'a'\n                if i > 0:\n                    matrix[i - 1][j] = 'a'\n                if j > 0:\n                    matrix[i][j - 1] = 'a'\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j]!= 'a':\n                matrix[i][j] = 'a'\n                if i > 0:\n                    matrix[i - 1][j] = 'a'\n                if j > 0:\n                    matrix[i][j - 1] = 'a'\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j]!= 'a':\n                matrix[i][j] = 'a'\n                if i > 0:\n                    matrix[i - 1][j] = 'a'\n                if j > 0:\n                    matrix[i][j - 1] = 'a'\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j]!= 'a':\n                matrix[i][j] = 'a'\n                if i > 0:\n                    matrix[i - 1][j] = 'a'\n                if j > 0:\n                    matrix[i][j - 1] = 'a'\n    for i in range(n):\n        for j in range(n"
    },
    {
        "number": 1978,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    graph = []\n    for _ in range(n):\n        graph.append(list(map(int, stdin.readline().split())))\n    m = int(stdin.readline())\n    path = list(map(int, stdin.readline().split()))\n    \n    # build the graph\n    graph_dict = {}\n    for i in range(n):\n        graph_dict[i] = []\n    for i in range(n):\n        for j in range(n):\n            if graph[i][j] == 1:\n                graph_dict[i].append(j)\n    \n    # find the shortest path\n    def find_shortest_path(start, end, path):\n        if start == end:\n            return path\n        if start not in graph_dict:\n            return None\n        shortest_path = None\n        for node in graph_dict[start]:\n            if node not in path:\n                new_path = find_shortest_path(node, end, path + [node])\n                if new_path:\n                    if not shortest_path or len(new_path) < len(shortest_path):\n                        shortest_path = new_path\n        return shortest_path\n    \n    # find the shortest good path\n    shortest_path = find_shortest_path(path[0], path[-1], [path[0]])\n    if shortest_path:\n        return str(len(shortest_path)) +'' +''.join(map(str, shortest_path))\n    else:\n        return '-1'"
    },
    {
        "number": 1979,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    return str(max(0, min(a.count(i) - b.count(i) for i in set(a) & set(b))))"
    },
    {
        "number": 1980,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n    c.sort()\n    c.append(a)\n    c.insert(0, 0)\n    d = [0] * (n + 1)\n    for i in range(1, n + 1):\n        d[i] = c[i] - c[i - 1]\n    d[0] = 0\n    d[n] = 0\n    for i in range(1, n + 1):\n        for j in range(i, n + 1):\n            d[j] = max(d[j], d[j - i] + d[i - 1] * (j - i + 1))\n    return str(d[n])"
    },
    {
        "number": 1981,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    graph = [[] for _ in range(n)]\n    for _ in range(n - 1):\n        a, b = [int(x) for x in stdin.split()]\n        graph[a - 1].append(b - 1)\n        graph[b - 1].append(a - 1)\n    \n    leaves = 0\n    for i in range(n):\n        if len(graph[i]) == 1:\n            leaves += 1\n    \n    return str(leaves)"
    },
    {
        "number": 1982,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n == k:\n        return \"YES\"\n    if n % 2 == 0:\n        return \"NO\"\n    if n < k:\n        return \"NO\"\n    if n % 2 == 1:\n        if n % 3 == 1:\n            return \"YES\"\n        if n % 3 == 2:\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 1983,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    a.sort()\n    a = [0] + a + [10**9]\n    m = len(a)\n    dp = [1] * m\n    for i in range(1, m):\n        for j in range(i):\n            if a[i] > a[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return str(max(dp))"
    },
    {
        "number": 1984,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k, w = [int(x) for x in stdin.split()]\n    levels = [stdin[i:i + m] for i in range(0, n * m, m)]\n    candies = [set(x) for x in levels]\n    for i in range(k):\n        for j in range(i + 1, k):\n            if candies[i]!= candies[j]:\n                candies[i] |= candies[j]\n                candies[j] = set()\n    candies = [len(x) for x in candies]\n    candies.sort()\n    candies = [x for x in candies if x > 0]\n    candies = [0] + candies\n    candies = candies[:k]\n    candies = [x for x in candies if x > 0]\n    candies = [0] + candies\n    candies = candies[:k]\n    candies = [x for x in candies if x > 0]\n    candies = [0] + candies\n    candies = candies[:k]\n    candies = [x for x in candies if x > 0]\n    candies = [0] + candies\n    candies = candies[:k]\n    candies = [x for x in candies if x > 0]\n    candies = [0] + candies\n    candies = candies[:k]\n    candies = [x for x in candies if x > 0]\n    candies = [0] + candies\n    candies = candies[:k]\n    candies = [x for x in candies if x > 0]\n    candies = [0] + candies\n    candies = candies[:k]\n    candies = [x for x in candies if x > 0]\n    candies = [0] + candies\n    candies = candies[:k]\n    candies = [x for x in candies if x > 0]\n    candies = [0] + candies\n    candies = candies[:k]\n    candies = [x for x in candies if x > 0]\n    candies = [0] + candies\n    candies = candies[:k]\n    candies = [x for x in candies if x > 0]\n    candies = [0] + candies\n    candies = candies[:k]\n    candies = [x for x in candies if x > 0]\n    candies = [0] + candies\n    candies = candies[:k]\n    candies = [x for x in candies if x > 0]\n    candies = [0] + candies\n    candies = candies[:k]\n    candies = [x for x in candies if x > 0]\n    candies = [0] + candies\n    candies = candies[:k]\n    candies = [x for x in candies if x > 0]\n    candies = [0] + candies\n    candies = candies[:k]\n    candies = [x for x in candies if x > 0]\n    candies = [0] + candies\n    candies = candies[:k]\n    candies = [x for x in candies if x > 0]\n    candies = [0] + candies\n    candies = candies[:k]\n    candies = [x for x in candies if x > 0]\n    candies = [0] + candies\n    candies = candies[:k]\n    candies = [x for x in candies if x > 0]\n    candies = [0] + candies\n    candies = candies[:k]\n    candies = [x for x in candies if x > 0]\n    candies = [0] + candies\n    candies = candies[:k]\n    candies = [x for x in candies if x > 0]\n    candies = [0] + candies\n    candies = candies[:k]\n    candies = [x for x in candies if x > 0]\n    candies = [0] + candies\n    candies = candies[:k]\n    candies = [x for x in candies if x > 0]\n    candies = [0] + candies\n    candies = candies[:k]\n    candies = [x for x in candies if x > 0]\n    candies = [0] + candies\n    candies = candies[:k]\n    candies = [x for x in candies if x > 0]\n    candies = [0] + candies\n    candies = candies[:k]\n    candies = [x for x in candies if x > 0]\n    candies = [0] + candies\n    candies = candies[:k]\n    candies = [x for x in candies if x > 0]\n    candies = [0] + candies\n    candies = candies[:k]\n    candies = [x for x in candies if x > 0]\n    candies = [0] + candies\n    candies = candies[:k]\n    candies = [x for x in candies if x > 0]\n    candies = [0] + candies\n    candies = candies[:k]\n    candies = [x for x in candies if x > 0]\n    candies = [0] + candies\n    candies = candies[:k]\n"
    },
    {
        "number": 1985,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, n = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    b = [int(x) for x in stdin.split()]\n    if n < k:\n        return \"0\"\n    a.sort()\n    b.sort()\n    if a[0]!= b[0]:\n        return \"0\"\n    if a[-1]!= b[-1]:\n        return \"0\"\n    if a[-1] == b[-1]:\n        return str(a[-1] - a[-2])\n    return \"0\""
    },
    {
        "number": 1986,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    restaurants = [tuple(int(x) for x in stdin.split()) for _ in range(n)]\n    restaurants.sort(key=lambda x: x[1])\n    max_joy = 0\n    for i in range(n):\n        if restaurants[i][1] > k:\n            max_joy += restaurants[i][0] - (restaurants[i][1] - k)\n        else:\n            max_joy += restaurants[i][0]\n    return str(max_joy)"
    },
    {
        "number": 1987,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, c_1, c_2 = [int(x) for x in stdin.split()]\n    s = stdin.strip()\n    price = 0\n    for i in range(n):\n        if s[i] == '0':\n            price += c_1\n        else:\n            price += c_2 * (n - 1) ** 2\n    return str(price)"
    },
    {
        "number": 1988,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 1989,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] > a[j]:\n                count += 1\n    return str(count)"
    },
    {
        "number": 1990,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\ndef"
    },
    {
        "number": 1991,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = sorted(a)\n    if a == b:\n        return \"0\"\n    else:\n        return str(abs(a.index(b[0]) - b.index(a[0])))"
    },
    {
        "number": 1992,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    b = [int(x) for x in stdin.split()]\n    a.sort()\n    b.sort()\n    a = [str(x) for x in a]\n    b = [str(x) for x in b]\n    a = ''.join(a)\n    b = ''.join(b)\n    return str(len(a) + len(b))\n\nassert(solution(input()) == '7')\nassert(solution(input()) == '8')\nassert(solution(input()) == '1')\nassert(solution(input()) == '7')\nassert(solution(input()) == '8')\nassert(solution(input()) == '1')\nassert(solution(input()) == '7')\nassert(solution(input()) == '8')\nassert(solution(input()) == '1')\nassert(solution(input()) == '7')\nassert(solution(input()) == '8')\nassert(solution(input()) == '1')\nassert(solution(input()) == '7')\nassert(solution(input()) == '8')\nassert(solution(input()) == '1')\nassert(solution(input()) == '7')\nassert(solution(input()) == '8')\nassert(solution(input()) == '1')\nassert(solution(input()) == '7')\nassert(solution(input()) == '8')\nassert(solution(input()) == '1')\nassert(solution(input()) == '7')\nassert(solution(input()) == '8')\nassert(solution(input()) == '1')\nassert(solution(input()) == '7')\nassert(solution(input()) == '8')\nassert(solution(input()) == '1')\nassert(solution(input()) == '7')\nassert(solution(input()) == '8')\nassert(solution(input()) == '1')\nassert(solution(input()) == '7')\nassert(solution(input()) == '8')\nassert(solution(input()) == '1')\nassert(solution(input()) == '7')\nassert(solution(input()) == '8')\nassert(solution(input()) == '1')\nassert(solution(input()) == '7')\nassert(solution(input()) == '8')\nassert(solution(input()) == '1')\nassert(solution(input()) == '7')\nassert(solution(input()) == '8')\nassert(solution(input()) == '1')\nassert(solution(input()) == '7')\nassert(solution(input()) == '8')\nassert(solution(input()) == '1')\nassert(solution(input()) == '7')\nassert(solution(input()) == '8')\nassert(solution(input()) == '1')\nassert(solution(input()) == '7')\nassert(solution(input()) == '8')\nassert(solution(input()) == '1')\nassert(solution(input()) == '7')\nassert(solution(input()) == '8')\nassert(solution(input()) == '1')\nassert(solution(input()) == '7')\nassert(solution(input()) == '8')\nassert(solution(input()) == '1')\nassert(solution(input()) == '7')\nassert(solution(input()) == '8')\nassert(solution(input()) == '1')\nassert(solution(input()) == '7')\nassert(solution(input()) == '8')\nassert(solution(input()) == '1')\nassert(solution(input()) == '7')\nassert(solution(input()) == '8')\nassert(solution(input()) == '1')\nassert(solution(input()) == '7')\nassert(solution(input()) == '8')\nassert(solution(input()) == '1')\nassert(solution(input()) == '7')\nassert(solution(input()) == '8')\nassert(solution(input()) == '1')\nassert(solution(input()) == '7')\nassert(solution(input()) == '8')\nassert(solution(input()) == '1')\nassert(solution(input()) == '7')\nassert(solution(input()) == '8')\nassert(solution(input()) == '1')\nassert(solution(input()) == '7')\nassert(solution(input()) == '8')\nassert(solution(input()) == '1')\nassert(solution(input()) == '7')\nassert(solution(input()) == '8')\nassert(solution(input()) == '1')\nassert(solution(input()) == '7')\nassert(solution(input"
    },
    {
        "number": 1993,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 1994,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    prefixes = [0] * n\n    suffixes = [0] * n\n    for i in range(1, n):\n        prefixes[i] = prefixes[i - 1] + (1 if s[i - 1] == s[i] else 0)\n        suffixes[i] = suffixes[i - 1] + (1 if s[i - 1] == s[n - i] else 0)\n    for i in range(n):\n        if suffixes[i] == prefixes[i]:\n            print(suffixes[i], i + 1)"
    },
    {
        "number": 1995,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 1996,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    actions = [stdin.readline().strip() for _ in range(n)]\n    guesses = 0\n    for action in actions:\n        if action[0] == \"!\":\n            guesses += 1\n        elif action[0] == \"?\":\n            guesses += 1\n        elif action[0] == \".\":\n            guesses += 1\n    return str(guesses)"
    },
    {
        "number": 1997,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    edges = [tuple(map(int, line.split())) for line in stdin.readlines()]\n    edges.sort(key=lambda x: x[1])\n    leaves = [x for x in range(1, n + 1) if x not in [x[0] for x in edges]]\n    return''.join(map(str, leaves))"
    },
    {
        "number": 1998,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, k = [int(x) for x in stdin.split()]\n    grid = [int(x) for x in stdin.split()]\n    grid_len = len(grid)\n    grid_sum = sum(grid)\n    if grid_sum < a + b:\n        return '0'\n    if grid_sum == a + b:\n        return str(grid_len)\n    if grid_sum > a + b:\n        return str(grid_len - 1)\n    \n    grid_sum = sum(grid)\n    grid_len = len(grid)\n    grid_sum = sum(grid)\n    if grid_sum < a + b:\n        return '0'\n    if grid_sum == a + b:\n        return str(grid_len)\n    if grid_sum > a + b:\n        return str(grid_len - 1)\n    \n    grid_sum = sum(grid)\n    grid_len = len(grid)\n    grid_sum = sum(grid)\n    if grid_sum < a + b:\n        return '0'\n    if grid_sum == a + b:\n        return str(grid_len)\n    if grid_sum > a + b:\n        return str(grid_len - 1)\n    \n    grid_sum = sum(grid)\n    grid_len = len(grid)\n    grid_sum = sum(grid)\n    if grid_sum < a + b:\n        return '0'\n    if grid_sum == a + b:\n        return str(grid_len)\n    if grid_sum > a + b:\n        return str(grid_len - 1)\n    \n    grid_sum = sum(grid)\n    grid_len = len(grid)\n    grid_sum = sum(grid)\n    if grid_sum < a + b:\n        return '0'\n    if grid_sum == a + b:\n        return str(grid_len)\n    if grid_sum > a + b:\n        return str(grid_len - 1)\n    \n    grid_sum = sum(grid)\n    grid_len = len(grid)\n    grid_sum = sum(grid)\n    if grid_sum < a + b:\n        return '0'\n    if grid_sum == a + b:\n        return str(grid_len)\n    if grid_sum > a + b:\n        return str(grid_len - 1)\n    \n    grid_sum = sum(grid)\n    grid_len = len(grid)\n    grid_sum = sum(grid)\n    if grid_sum < a + b:\n        return '0'\n    if grid_sum == a + b:\n        return str(grid_len)\n    if grid_sum > a + b:\n        return str(grid_len - 1)\n    \n    grid_sum = sum(grid)\n    grid_len = len(grid)\n    grid_sum = sum(grid)\n    if grid_sum < a + b:\n        return '0'\n    if grid_sum == a + b:\n        return str(grid_len)\n    if grid_sum > a + b:\n        return str(grid_len - 1)\n    \n    grid_sum = sum(grid)\n    grid_len = len(grid)\n    grid_sum = sum(grid)\n    if grid_sum < a + b:\n        return '0'\n    if grid_sum == a + b:\n        return str(grid_len)\n    if grid_sum > a + b:\n        return str(grid_len - 1)\n    \n    grid_sum = sum(grid)\n    grid_len = len(grid)\n    grid_sum = sum(grid)\n    if grid_sum < a + b:\n        return '0'\n    if grid_sum == a + b:\n        return str(grid_len)\n    if grid_sum > a + b:\n        return str(grid_len - 1)\n    \n    grid_sum = sum(grid)\n    grid_len = len(grid)\n    grid_sum = sum(grid)\n    if grid_sum < a + b:\n        return '0'\n    if grid_sum == a + b:\n        return str(grid_len)\n    if grid_sum > a + b:\n        return str(grid_len - 1)\n    \n    grid_sum = sum(grid)\n    grid_len = len(grid)\n    grid_sum = sum(grid)\n    if grid_sum < a + b:\n        return '0'\n    if grid_sum == a + b:\n        return str(grid_len)\n    if grid_sum > a + b:\n        return str(grid_len - 1)\n    \n    grid_sum = sum(grid)\n    grid_len = len(grid)\n    grid_sum = sum(grid)\n    if grid_sum < a + b:\n        return '0'\n    if grid_sum == a + b:\n        return str(grid_len)\n    if grid_sum > a + b:\n        return str(grid_len - 1)\n    \n    grid_sum = sum(grid)\n    grid_len = len(grid)\n    grid_sum = sum(grid)\n    if grid_sum < a + b:\n        return '0'\n    if grid_sum == a + b:\n        return str(grid_len)\n    if grid_sum > a + b:\n        return str(grid_len - 1)\n    \n    grid_sum = sum(grid)\n    grid_len = len(grid)\n    grid_sum = sum(grid)\n    if grid_sum < a + b:\n        return '0'\n    if grid_sum == a + b:\n        return str(grid_len)\n    if grid_sum > a + b:\n        return str(grid_len - 1)\n    \n    grid_sum = sum(grid)\n    grid_len = len(grid)\n    grid_sum = sum(grid)\n    if grid_sum < a + b:\n        return '0'\n    if grid_sum == a + b:\n        return str(grid_len)\n    if grid_sum > a + b:\n        return str(grid_len - 1)\n    \n    grid_sum = sum(grid)\n    grid_len = len(grid)\n    grid"
    },
    {
        "number": 1999,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    k = 0\n    for i in range(n):\n        if a.count(a[i]) >= 2:\n            k += 1\n            a[i] = 0\n    print(k)\n    print(*a)"
    },
    {
        "number": 2000,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] + a[j] == 2 ** a[i]:\n                count += 1\n    return str(count)"
    },
    {
        "number": 2001,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = [int(x) for x in stdin.split()]\n    banh_mi = stdin.strip()\n    banh_mi = [int(x) for x in banh_mi]\n    banh_mi.sort()\n    banh_mi.reverse()\n    banh_mi = [str(x) for x in banh_mi]\n    banh_mi = ''.join(banh_mi)\n    banh_mi = banh_mi.replace('1', '0')\n    banh_mi = banh_mi.replace('0', '1')\n    banh_mi = banh_mi.replace('2', '0')\n    banh_mi = banh_mi.replace('3', '1')\n    banh_mi = banh_mi.replace('4', '2')\n    banh_mi = banh_mi.replace('5', '3')\n    banh_mi = banh_mi.replace('6', '4')\n    banh_mi = banh_mi.replace('7', '5')\n    banh_mi = banh_mi.replace('8', '6')\n    banh_mi = banh_mi.replace('9', '7')\n    banh_mi = banh_mi.replace('0', '8')\n    banh_mi = banh_mi.replace('_', '9')\n    banh_mi = banh_mi.replace('-', '0')\n    banh_mi = banh_mi.replace(' ', '0')\n    banh_mi = banh_mi.replace('1', '0')\n    banh_mi = banh_mi.replace('0', '1')\n    banh_mi = banh_mi.replace('2', '0')\n    banh_mi = banh_mi.replace('3', '1')\n    banh_mi = banh_mi.replace('4', '2')\n    banh_mi = banh_mi.replace('5', '3')\n    banh_mi = banh_mi.replace('6', '4')\n    banh_mi = banh_mi.replace('7', '5')\n    banh_mi = banh_mi.replace('8', '6')\n    banh_mi = banh_mi.replace('9', '7')\n    banh_mi = banh_mi.replace('10', '8')\n    banh_mi = banh_mi.replace('11', '9')\n    banh_mi = banh_mi.replace('12', '0')\n    banh_mi = banh_mi.replace('13', '1')\n    banh_mi = banh_mi.replace('14', '2')\n    banh_mi = banh_mi.replace('15', '3')\n    banh_mi = banh_mi.replace('16', '4')\n    banh_mi = banh_mi.replace('17', '5')\n    banh_mi = banh_mi.replace('18', '6')\n    banh_mi = banh_mi.replace('19', '7')\n    banh_mi = banh_mi.replace('20', '8')\n    banh_mi = banh_mi.replace('21', '9')\n    banh_mi = banh_mi.replace('22', '0')\n    banh_mi = banh_mi.replace('23', '1')\n    banh_mi = banh_mi.replace('24', '2')\n    banh_mi = banh_mi.replace('25', '3')\n    banh_mi = banh_mi.replace('26', '4')\n    banh_mi = banh_mi.replace('27', '5')\n    banh_mi = banh_mi.replace('28', '6')\n    banh_mi = banh_mi.replace('29', '7')\n    banh_mi = banh_mi.replace('30', '8')\n    banh_mi = banh_mi.replace('31', '9')\n    banh_mi = banh_mi.replace('32', '0')\n    banh_mi = banh_mi.replace('33', '1')\n    banh_mi = banh_mi.replace('34', '2')\n    banh_mi = banh_mi.replace('35', '3')\n    banh_mi = banh_mi.replace('36', '4')\n    banh_mi = banh_mi.replace('37', '5')\n    banh_mi = banh_mi.replace('38', '6')\n    banh_mi = banh_mi.replace('39', '7')\n    banh_mi = banh_mi.replace('40', '8')\n    banh_mi = banh_mi.replace('41', '9')\n    banh_mi = banh_mi.replace('42', '0')\n    banh_mi = banh_mi.replace('43', '1')\n    banh_mi = banh_mi.replace('44', '2')\n    banh_mi = banh_mi.replace('45', '3')\n    banh_mi = banh_mi.replace('46', '4')\n    banh_mi = banh_mi.replace('47', '5')"
    },
    {
        "number": 2002,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    beauties = [int(x) for x in stdin.readline().split()]\n    edges = [tuple(map(int, stdin.readline().split())) for _ in range(n - 1)]\n    graph = [[] for _ in range(n)]\n    for a, b in edges:\n        graph[a].append(b)\n        graph[b].append(a)\n    beauties = [beauties[0]] + [beauties[i] * max(beauties[i - 1], beauties[i + 1]) for i in range(1, n - 1)] + [beauties[-1]]\n    return str(sum(gcd(beauties[a], beauties[b]) for a, b in edges))\n\ndef"
    },
    {
        "number": 2003,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    A = set()\n    for _ in range(n):\n        query = stdin.readline().strip()\n        if query[0] == '+':\n            A.add(int(query[2:]))\n        elif query[0] == '-':\n            A.discard(int(query[2:]))\n        elif query[0] == '?':\n            x = int(query[2:])\n            max_xor = 0\n            for y in A:\n                max_xor = max(max_xor, x ^ y)\n            print(max_xor)"
    },
    {
        "number": 2004,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    tanks = [int(x) for x in stdin.readline().split()]\n    tanks.sort()\n    tanks.reverse()\n    tanks_count = 0\n    for i in range(n):\n        if tanks[i] > i:\n            tanks_count += tanks[i] - i\n    return str(tanks_count) + '\\n' +''.join(str(x) for x in tanks)\n\nassert(solution('''2\n2 1 2''') == '3\\n2 1 2')\nassert(solution('''3\n2 1 3 2''') == '4\\n2 1 3 2')\nassert(solution('''4\n2 1 3 2 4''') == '5\\n2 1 3 2 4')\nassert(solution('''5\n2 1 3 2 4 5''') == '6\\n2 1 3 2 4 5')\nassert(solution('''6\n2 1 3 2 4 5 6''') == '7\\n2 1 3 2 4 5 6')\nassert(solution('''7\n2 1 3 2 4 5 6 7''') == '8\\n2 1 3 2 4 5 6 7')\nassert(solution('''8\n2 1 3 2 4 5 6 7 8''') == '9\\n2 1 3 2 4 5 6 7 8')\nassert(solution('''9\n2 1 3 2 4 5 6 7 8 9''') == '10\\n2 1 3 2 4 5 6 7 8 9')\nassert(solution('''10\n2 1 3 2 4 5 6 7 8 9 10''') == '11\\n2 1 3 2 4 5 6 7 8 9 10')\nassert(solution('''11\n2 1 3 2 4 5 6 7 8 9 10 11''') == '12\\n2 1 3 2 4 5 6 7 8 9 10 11')\nassert(solution('''12\n2 1 3 2 4 5 6 7 8 9 10 11 12''') == '13\\n2 1 3 2 4 5 6 7 8 9 10 11 12')\nassert(solution('''13\n2 1 3 2 4 5 6 7 8 9 10 11 12 13''') == '14\\n2 1 3 2 4 5 6 7 8 9 10 11 12 13')\nassert(solution('''14\n2 1 3 2 4 5 6 7 8 9 10 11 12 13 14''') == '15\\n2 1 3 2 4 5 6 7 8 9 10 11 12 13 14')\nassert(solution('''15\n2 1 3 2 4 5 6 7 8 9 10 11 12 13 14 15''') == '16\\n2 1 3 2 4 5 6 7 8 9 10 11 12 13 14 15')\nassert(solution('''16\n2 1 3 2 4 5 6 7 8 9 10 11 12 13 14 15 16''') == '17\\n2 1 3 2 4 5 6 7 8 9 10 11 12 13 14 15 16')\nassert(solution('''17\n2 1 3 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17''') == '18\\n2 1 3 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17')\nassert(solution('''18\n2 1 3 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18''') == '19\\n2 1 3 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18')\nassert(solution('''19\n2 1 3 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19''') == '20\\n2 1 3 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19')\nassert(solution('''20\n2 1 3 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20''') == '21\\n2 1 3 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20')\nassert(solution('''21\n2 1 3 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21''') == '22\\n2 1 3 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21')\nassert(solution('''22\n2 1 3 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22''') == '23\\n2 1 3 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22')\nassert(solution('''23\n2 1 3 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23''') == '24\\n2 1 3 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23')\nassert(solution('''24\n2 1 3 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24''') == '25\\n2 1 3 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24')\nassert(solution('''25\n2 1 3 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25''') == '26\\n2 1 3 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25')\nassert(solution('''26\n2 1 3 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26''') == '27\\n2 1 3 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26')\nassert(solution('''27\n2 1 3 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27''') == '28\\n2 1 3 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27')\nassert(solution('''28\n2 1 3 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28''') == '29\\n2 1 3 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28')\nassert(solution('''29\n2 1 3 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29''') == '30\\n2 1 3 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29')\nassert(solution('''30\n2 1 3 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30''') == '31\\n2 1 3 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30')\nassert(solution('''31\n2 1 3 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31''') == '32\\n2 1"
    },
    {
        "number": 2005,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, n_1, n_2 = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a_1 = a[:n_1]\n    a_2 = a[n_1:n_1 + n_2]\n    a_3 = a[n_1 + n_2:]\n    a_1_mean = sum(a_1) / n_1\n    a_2_mean = sum(a_2) / n_2\n    a_3_mean = sum(a_3) / len(a_3)\n    return f'{a_1_mean + a_2_mean - a_3_mean:.6f}'"
    },
    {
        "number": 2006,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    field = [list(stdin.strip()) for _ in range(n)]\n    dwarves = []\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == 'G':\n                dwarves.append((i, j))\n    moves = 0\n    while len(dwarves) > 1:\n        for i in range(len(dwarves)):\n            dwarves[i] = (dwarves[i][0] + 1, dwarves[i][1])\n        moves += 1\n        for i in range(len(dwarves)):\n            if dwarves[i][0] == n - 1:\n                dwarves[i] = (dwarves[i][0], dwarves[i][1] + 1)\n        moves += 1\n        for i in range(len(dwarves)):\n            if dwarves[i][1] == m - 1:\n                dwarves[i] = (dwarves[i][0], dwarves[i][1] - 1)\n        moves += 1\n        for i in range(len(dwarves)):\n            if dwarves[i][0] == n - 1:\n                dwarves[i] = (dwarves[i][0] - 1, dwarves[i][1])\n        moves += 1\n        for i in range(len(dwarves)):\n            if dwarves[i][1] == m - 1:\n                dwarves[i] = (dwarves[i][0], dwarves[i][1] - 1)\n        moves += 1\n        for i in range(len(dwarves)):\n            if dwarves[i][0] == n - 1:\n                dwarves[i] = (dwarves[i][0] - 1, dwarves[i][1])\n        moves += 1\n        for i in range(len(dwarves)):\n            if dwarves[i][1] == m - 1:\n                dwarves[i] = (dwarves[i][0], dwarves[i][1] - 1)\n        moves += 1\n        for i in range(len(dwarves)):\n            if dwarves[i][0] == n - 1:\n                dwarves[i] = (dwarves[i][0] - 1, dwarves[i][1])\n        moves += 1\n        for i in range(len(dwarves)):\n            if dwarves[i][1] == m - 1:\n                dwarves[i] = (dwarves[i][0], dwarves[i][1] - 1)\n        moves += 1\n        for i in range(len(dwarves)):\n            if dwarves[i][0] == n - 1:\n                dwarves[i] = (dwarves[i][0] - 1, dwarves[i][1])\n        moves += 1\n        for i in range(len(dwarves)):\n            if dwarves[i][1] == m - 1:\n                dwarves[i] = (dwarves[i][0], dwarves[i][1] - 1)\n        moves += 1\n        for i in range(len(dwarves)):\n            if dwarves[i][0] == n - 1:\n                dwarves[i] = (dwarves[i][0] - 1, dwarves[i][1])\n        moves += 1\n        for i in range(len(dwarves)):\n            if dwarves[i][1] == m - 1:\n                dwarves[i] = (dwarves[i][0], dwarves[i][1] - 1)\n        moves += 1\n        for i in range(len(dwarves)):\n            if dwarves[i][0] == n - 1:\n                dwarves[i] = (dwarves[i][0] - 1, dwarves[i][1])\n        moves += 1\n        for i in range(len(dwarves)):\n            if dwarves[i][1] == m - 1:\n                dwarves[i] = (dwarves[i][0], dwarves[i][1] - 1)\n        moves += 1\n        for i in range(len(dwarves)):\n            if dwarves[i][0] == n - 1:\n                dwarves[i] = (dwarves[i][0] - 1, dwarves[i][1])\n        moves += 1\n        for i in range(len(dwarves)):\n            if dwarves[i][1] == m - 1:\n                dwarves[i] = (dwarves[i][0], dwarves[i][1] - 1)\n        moves += 1\n        for i in range(len(dwarves)):\n            if dwarves[i][0] == n - 1:\n                dwarves[i] = (dwarves[i][0] - 1, dwarves[i][1])\n        moves += 1\n        for i in range(len(dwarves)):\n            if dwarves[i][1] == m - 1:\n                dwarves[i] = (dwarves[i][0], dwarves[i][1] - 1)\n        moves += 1\n        for i in range(len(dwarves)):\n            if dwarves[i][0] == n - 1:\n                dwarves[i] = (dwarves[i][0] - 1, dwarves[i][1])\n        moves += 1\n        for i in range(len(dwarves)):\n            if dwarves[i][1] == m - 1:\n                dwarves[i] = (dwarves[i][0], dwarves[i][1] - 1)\n        moves += 1\n        for i in range(len(dwarves)):\n            if dwarves[i][0] == n - 1:\n                dwarves[i] = (dwarves[i][0] - 1, dwarves[i][1])\n        moves += 1\n        for i in range(len(dwarves)):\n            if dwarves[i][1] == m - 1:\n                dwarves[i] = (dwarves[i][0], dwarves[i][1] - 1)\n        moves += 1\n        for i in range(len(dwarves)):\n            if dwarves[i][0] == n - 1:\n                dwarves[i] = (dwarves[i][0] - 1, dwarves[i][1])\n"
    },
    {
        "number": 2007,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    graph = defaultdict(list)\n    for _ in range(m):\n        x, y = [int(x) for x in stdin.split()]\n        graph[x].append(y)\n        graph[y].append(x)\n    max_value = -1\n    for node in graph:\n        max_value = max(max_value, max_path_value(graph, node))\n    return str(max_value)\n\n\ndef"
    },
    {
        "number": 2008,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    stdin.readline()\n    "
    },
    {
        "number": 2009,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    r1, c1 = map(int, stdin.readline().split())\n    r2, c2 = map(int, stdin.readline().split())\n    grid = [list(map(int, stdin.readline().split())) for _ in range(n)]\n    return str(min(n * n, (r1 - r2) ** 2 + (c1 - c2) ** 2))"
    },
    {
        "number": 2010,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    for _ in range(m):\n        t, v, x = [int(x) for x in stdin.split()]\n        if t == 1:\n            a[v - 1] = x\n        elif t == 2:\n            a[v - 1] += x\n        elif t == 3:\n            print(a[v - 1])\n    return ''"
    },
    {
        "number": 2011,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    debts = [list(map(int, stdin.split())) for _ in range(m)]\n    debts.sort(key=lambda x: x[2])\n    debts.sort(key=lambda x: x[1])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[0] - x[1])\n    debts.sort(key=lambda x: x[0] - x[1] - x[2])\n    debts.sort(key=lambda x: x[0] - x[1] - x[2] - x[3])\n    debts.sort(key=lambda x: x[0] - x[1] - x[2] - x[3] - x[4])\n    debts.sort(key=lambda x: x[0] - x[1] - x[2] - x[3] - x[4] - x[5])\n    debts.sort(key=lambda x: x[0] - x[1] - x[2] - x[3] - x[4] - x[5] - x[6])\n    debts.sort(key=lambda x: x[0] - x[1] - x[2] - x[3] - x[4] - x[5] - x[6] - x[7])\n    debts.sort(key=lambda x: x[0] - x[1] - x[2] - x[3] - x[4] - x[5] - x[6] - x[7] - x[8])\n    debts.sort(key=lambda x: x[0] - x[1] - x[2] - x[3] - x[4] - x[5] - x[6] - x[7] - x[8] - x[9])\n    debts.sort(key=lambda x: x[0] - x[1] - x[2] - x[3] - x[4] - x[5] - x[6] - x[7] - x[8] - x[9] - x[10])\n    debts.sort(key=lambda x: x[0] - x[1] - x[2] - x[3] - x[4] - x[5] - x[6] - x[7] - x[8] - x[9] - x[10] - x[11])\n    debts.sort(key=lambda x: x[0] - x[1] - x[2] - x[3] - x[4] - x[5] - x"
    },
    {
        "number": 2012,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    c = list(map(int, stdin.split()))\n    s = stdin[n:]\n    return s"
    },
    {
        "number": 2013,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    chips = [tuple(int(x) for x in stdin.split()) for _ in range(k)]\n    chips = sorted(chips, key=lambda x: (x[0], x[1]))\n    board = [[0] * m for _ in range(n)]\n    for chip in chips:\n        board[chip[0] - 1][chip[1] - 1] = 1\n    visited = [[0] * m for _ in range(n)]\n    visited[0][0] = 1\n    visited[0][1] = 1\n    visited[1][0] = 1\n    visited[1][1] = 1\n    visited[2][0] = 1\n    visited[2][1] = 1\n    visited[3][0] = 1\n    visited[3][1] = 1\n    visited[4][0] = 1\n    visited[4][1] = 1\n    visited[5][0] = 1\n    visited[5][1] = 1\n    visited[6][0] = 1\n    visited[6][1] = 1\n    visited[7][0] = 1\n    visited[7][1] = 1\n    visited[8][0] = 1\n    visited[8][1] = 1\n    visited[9][0] = 1\n    visited[9][1] = 1\n    visited[10][0] = 1\n    visited[10][1] = 1\n    visited[11][0] = 1\n    visited[11][1] = 1\n    visited[12][0] = 1\n    visited[12][1] = 1\n    visited[13][0] = 1\n    visited[13][1] = 1\n    visited[14][0] = 1\n    visited[14][1] = 1\n    visited[15][0] = 1\n    visited[15][1] = 1\n    visited[16][0] = 1\n    visited[16][1] = 1\n    visited[17][0] = 1\n    visited[17][1] = 1\n    visited[18][0] = 1\n    visited[18][1] = 1\n    visited[19][0] = 1\n    visited[19][1] = 1\n    visited[20][0] = 1\n    visited[20][1] = 1\n    visited[21][0] = 1\n    visited[21][1] = 1\n    visited[22][0] = 1\n    visited[22][1] = 1\n    visited[23][0] = 1\n    visited[23][1] = 1\n    visited[24][0] = 1\n    visited[24][1] = 1\n    visited[25][0] = 1\n    visited[25][1] = 1\n    visited[26][0] = 1\n    visited[26][1] = 1\n    visited[27][0] = 1\n    visited[27][1] = 1\n    visited[28][0] = 1\n    visited[28][1] = 1\n    visited[29][0] = 1\n    visited[29][1] = 1\n    visited[30][0] = 1\n    visited[30][1] = 1\n    visited[31][0] = 1\n    visited[31][1] = 1\n    visited[32][0] = 1\n    visited[32][1] = 1\n    visited[33][0] = 1\n    visited[33][1] = 1\n    visited[34][0] = 1\n    visited[34][1] = 1\n    visited[35][0] = 1\n    visited[35][1] = 1\n    visited[36][0] = 1\n    visited[36][1] = 1\n    visited[37][0] = 1\n    visited[37][1] = 1\n    visited[38][0] = 1\n    visited[38][1] = 1\n    visited[39][0] = 1\n    visited[39][1] = 1\n    visited[40][0] = 1\n    visited[40][1] = 1\n    visited[41][0] = 1\n    visited[41][1] = 1\n    visited[42][0] = 1\n    visited[42][1] = 1\n    visited[43][0] = 1\n    visited[43][1] = 1\n    visited[44][0] = 1\n    visited[44][1] = 1\n    visited[45][0] = 1\n    visited[45][1] = 1\n    visited[46][0] = 1\n    visited[46][1] = 1\n    visited[47][0] = 1\n    visited[47][1] = 1\n    visited[48][0] = 1\n    visited[48][1] = 1\n    visited[49][0] = 1\n    visited[49][1] = 1\n    visited[50][0] = 1\n    visited[50][1] = 1\n    visited[51][0] = 1\n    visited[51][1] = 1\n    visited[52][0] = 1\n    visited[52][1] = 1\n    visited[53][0] = 1\n    visited[53][1] = 1\n    visited[54][0] = 1\n    visited[54][1] = 1\n    visited[55][0] = 1\n    visited[55][1] = 1\n    visited"
    },
    {
        "number": 2014,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    permutations = [int(x) for x in stdin.split()]\n    permutations.sort()\n    permutations = permutations[:k]\n    permutations.sort()\n    return str(len(permutations[0]))"
    },
    {
        "number": 2015,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 2016,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 2017,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    b = [0] * n\n    for i in range(n):\n        b[i] = a[i]\n    b.sort()\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if b[i] > b[j]:\n                count += 1\n    return str(count)"
    },
    {
        "number": 2018,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, q = [int(x) for x in stdin.split()]\n    sectors = [tuple(int(x) for x in stdin.split()) for _ in range(n)]\n    for _ in range(q):\n        s_x, s_y, e_x, e_y = [int(x) for x in stdin.split()]\n        if s_x == 1:\n            if s_y == 1:\n                if e_y == 1:\n                    print(\"YES\")\n                else:\n                    print(\"NO\")\n            else:\n                if e_y == 1:\n                    print(\"YES\")\n                else:\n                    print(\"NO\")\n        else:\n            if s_y == 1:\n                if e_y == 1:\n                    print(\"YES\")\n                else:\n                    print(\"NO\")\n            else:\n                if e_y == 1:\n                    print(\"YES\")\n                else:\n                    print(\"NO\")"
    },
    {
        "number": 2019,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2020,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = [int(x) for x in stdin.split()]\n    y = [int(y) for y in stdin.split()]\n    x.sort()\n    y.sort()\n    x_max = x[-1]\n    y_max = y[-1]\n    x_min = x[0]\n    y_min = y[0]\n    x_max_min = x_max - x_min\n    y_max_min = y_max - y_min\n    if x_max_min < y_max_min:\n        return str(x_max_min)\n    else:\n        return str(y_max_min)"
    },
    {
        "number": 2021,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    m = int(stdin.readline())\n    q = list(map(int, stdin.readline().split()))\n    a.sort()\n    q.sort()\n    q.reverse()\n    ans = 0\n    for i in range(m):\n        ans += a[q[i] - 1]\n    return str(ans)"
    },
    {
        "number": 2022,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    edges = [tuple(int(x) for x in line.split()) for line in stdin.splitlines()[1:]]\n    graph = {i: set() for i in range(1, n + 1)}\n    for u, v in edges:\n        graph[u].add(v)\n        graph[v].add(u)\n    independent_set = set()\n    for i in range(1, n + 1):\n        if len(independent_set) < (k + 1) // 2:\n            independent_set.add(i)\n        for j in range(1, n + 1):\n            if j not in independent_set and j not in graph[i]:\n                independent_set.add(j)\n                if len(independent_set) == k:\n                    break\n    if len(independent_set) < (k + 1) // 2:\n        return \"0\"\n    cycle = [i for i in range(1, n + 1) if i not in independent_set]\n    cycle.append(cycle[0])\n    return \"1\\n\" + \" \".join(str(x) for x in cycle)\n\nprint(solution(input()))\n"
    },
    {
        "number": 2023,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    b = [int(x) for x in stdin.split()]\n    queries = [stdin.split() for _ in range(m)]\n    for query in queries:\n        if query[0] == '1':\n            a[int(query[1])] = int(query[2])\n        else:\n            b[int(query[1])] += int(query[2])\n    return''.join(str(x) for x in b)\n\nassert(solution('''5 10\n1 2 0 -1 3\n3 1 5 -2 0\n2 5\n1 3 3 3\n2 5\n2 4\n2 1\n1 2 1 4\n2 1\n2 4\n1 4 2 1\n2 2\n''') == '0 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1 3 -1"
    },
    {
        "number": 2024,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    return str(solution_naive(n, a))\n\ndef"
    },
    {
        "number": 2025,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    for _ in range(n):\n        n = int(stdin.readline().strip())\n        if n == 1:\n            print(-1)\n        elif n == 2:\n            print(1)\n        else:\n            print(2)"
    },
    {
        "number": 2026,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    m = stdin.readline().strip()\n    p = [0, 0]\n    for i in m:\n        if i == 'L':\n            p[1] -= 1\n        elif i == 'R':\n            p[1] += 1\n        elif i == 'U':\n            p[0] -= 1\n        elif i == 'D':\n            p[0] += 1\n    return str(abs(p[0]) + abs(p[1]))"
    },
    {
        "number": 2027,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    numbers = [int(x) for x in stdin.readline().split()]\n    result = []\n    for i in range(n):\n        result.append(numbers[i] - i)\n    return''.join(str(x) for x in result)"
    },
    {
        "number": 2028,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(solution_recursive(n))\n\ndef"
    },
    {
        "number": 2029,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = [int(x) for x in stdin.split()]\n    edges = [tuple(int(x) for x in stdin.split()) for _ in range(n - 1)]\n    tree = nx.Graph()\n    tree.add_edges_from(edges)\n    diameter = nx.diameter(tree)\n    return str(diameter / max(1, s))"
    },
    {
        "number": 2030,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(float, stdin.readline().split()))\n    b = list(map(float, stdin.readline().split()))\n    a_max = [0] * (n + 1)\n    b_min = [0] * (n + 1)\n    for i in range(n):\n        a_max[i + 1] = a_max[i] + a[i]\n        b_min[i + 1] = b_min[i] + b[i]\n    a_max[n] = 1\n    b_min[n] = 1\n    a_min = [0] * (n + 1)\n    b_max = [0] * (n + 1)\n    for i in range(n - 1, -1, -1):\n        a_min[i] = a_min[i + 1] - a[i]\n        b_max[i] = b_max[i + 1] - b[i]\n    a_min[0] = 1\n    b_max[0] = 1\n    a_min_sum = 0\n    b_max_sum = 0\n    for i in range(n + 1):\n        a_min_sum += a_min[i]\n        b_max_sum += b_max[i]\n    a_min_sum = round(a_min_sum, 6)\n    b_max_sum = round(b_max_sum, 6)\n    if a_min_sum!= 1 or b_max_sum!= 1:\n        return '0'\n    a_min_prob = [0] * (n + 1)\n    b_max_prob = [0] * (n + 1)\n    for i in range(n + 1):\n        a_min_prob[i] = a_min[i] / a_min_sum\n        b_max_prob[i] = b_max[i] / b_max_sum\n    a_min_prob[0] = 1\n    b_max_prob[0] = 1\n    a_min_prob_sum = 0\n    b_max_prob_sum = 0\n    for i in range(n + 1):\n        a_min_prob_sum += a_min_prob[i]\n        b_max_prob_sum += b_max_prob[i]\n    a_min_prob_sum = round(a_min_prob_sum, 6)\n    b_max_prob_sum = round(b_max_prob_sum, 6)\n    if a_min_prob_sum!= 1 or b_max_prob_sum!= 1:\n        return '0'\n    a_min_prob_str = ''\n    b_max_prob_str = ''\n    for i in range(n + 1):\n        a_min_prob_str += str(a_min_prob[i]) +''\n        b_max_prob_str += str(b_max_prob[i]) +''\n    return a_min_prob_str + '\\n' + b_max_prob_str\n"
    },
    {
        "number": 2031,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    m = int(stdin.readline())\n    requests = [list(map(int, stdin.readline().split())) for _ in range(m)]\n    a.sort()\n    for k, pos in requests:\n        print(a[pos - 1])\n    return ''"
    },
    {
        "number": 2032,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    b = [int(x) for x in stdin.split()]\n    c = [int(x) for x in stdin.split()]\n    a.sort()\n    b.sort()\n    c.sort()\n    a.reverse()\n    b.reverse()\n    c.reverse()\n    a = a[:k]\n    b = b[:k]\n    c = c[:k]\n    a = [0] + a\n    b = [0] + b\n    c = [0] + c\n    a = [x for x in a if x > 0]\n    b = [x for x in b if x > 0]\n    c = [x for x in c if x > 0]\n    a = [x for x in a if x <= k]\n    b = [x for x in b if x <= k]\n    c = [x for x in c if x <= k]\n    a = [x for x in a if x > 0]\n    b = [x for x in b if x > 0]\n    c = [x for x in c if x > 0]\n    a = [x for x in a if x > 0]\n    b = [x for x in b if x > 0]\n    c = [x for x in c if x > 0]\n    a = [x for x in a if x > 0]\n    b = [x for x in b if x > 0]\n    c = [x for x in c if x > 0]\n    a = [x for x in a if x > 0]\n    b = [x for x in b if x > 0]\n    c = [x for x in c if x > 0]\n    a = [x for x in a if x > 0]\n    b = [x for x in b if x > 0]\n    c = [x for x in c if x > 0]\n    a = [x for x in a if x > 0]\n    b = [x for x in b if x > 0]\n    c = [x for x in c if x > 0]\n    a = [x for x in a if x > 0]\n    b = [x for x in b if x > 0]\n    c = [x for x in c if x > 0]\n    a = [x for x in a if x > 0]\n    b = [x for x in b if x > 0]\n    c = [x for x in c if x > 0]\n    a = [x for x in a if x > 0]\n    b = [x for x in b if x > 0]\n    c = [x for x in c if x > 0]\n    a = [x for x in a if x > 0]\n    b = [x for x in b if x > 0]\n    c = [x for x in c if x > 0]\n    a = [x for x in a"
    },
    {
        "number": 2033,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    roads = [tuple(int(x) for x in line.split()) for line in stdin.splitlines()[1:]]\n    k = int(stdin.splitlines()[-1])\n    polycarp_path = tuple(int(x) for x in stdin.splitlines()[-k])\n    intersections = set(x for u, v in roads for x in (u, v))\n    intersections.add(polycarp_path[0])\n    intersections.add(polycarp_path[-1])\n    intersections = sorted(intersections)\n    roads = sorted(roads, key=lambda x: x[0])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = [tuple(sorted(x)) for x in roads]\n    roads = [tuple(x) for x in roads if x[0]!= x[1]]\n    roads = [tuple(sorted(x)) for x in roads]\n    roads = [tuple(sorted(x)) for x in roads]\n    roads = [tuple(sorted(x)) for x in roads]\n    roads = [tuple(sorted(x)) for x in roads]\n    roads = [tuple(sorted(x)) for x in roads]\n    roads = [tuple(sorted(x)) for x in roads]\n    roads = [tuple(sorted(x)) for x in roads]\n    roads = [tuple(sorted(x)) for x in roads]\n    roads = [tuple(sorted(x)) for x in roads]\n    roads = [tuple(sorted(x)) for x in roads]\n    roads = [tuple(sorted(x)) for x in roads]\n    roads = [tuple(sorted(x)) for x in roads]\n    roads = [tuple(sorted(x)) for x in roads]\n    roads = [tuple(sorted(x)) for x in roads]\n    roads = [tuple(sorted(x)) for x in roads]\n    roads = [tuple(sorted(x)) for x in roads]\n    roads = [tuple(sorted(x)) for x in roads]\n    roads = [tuple(sorted(x)) for x in roads]\n    roads = [tuple(sorted(x"
    },
    {
        "number": 2034,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    roads = [tuple(int(x) for x in stdin.split()) for _ in range(m)]\n    roads.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[1])\n    visited = [False] * n\n    cities = 0\n    for road in roads:\n        if not visited[road[0] - 1]:\n            visited[road[0] - 1] = True\n            cities += 1\n        if not visited[road[1] - 1]:\n            visited[road[1] - 1] = True\n            cities += 1\n    return str(cities)"
    },
    {
        "number": 2035,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\ndef"
    },
    {
        "number": 2036,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, sx, sy = [int(x) for x in stdin.split()]\n    grid = [[0] * m for _ in range(n)]\n    grid[sx][sy] = 1\n    for _ in range(n * m):\n        x, y = [int(x) for x in stdin.split()]\n        if x == sx and y == sy:\n            continue\n        if x == sx or y == sy:\n            grid[x][y] = 1\n        else:\n            grid[x][y] = grid[x][sy] + grid[sx][y]\n    for i in range(n):\n        for j in range(m):\n            print(i, j, grid[i][j])\n\n\"\"\"\n\ndef"
    },
    {
        "number": 2037,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    problems = list(map(int, stdin.split()))\n    problems.sort()\n    for i in range(m):\n        if problems[i] == i + 1:\n            print('1', end='')\n        else:\n            print('0', end='')\n    print()"
    },
    {
        "number": 2038,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    p = list(map(int, stdin.readline().split()))\n    m = 0\n    for i in range(1, n):\n        for j in range(i, n):\n            if 2 * abs(i - j) >= n:\n                m += 1\n    return str(m)"
    },
    {
        "number": 2039,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    count = 0\n    for i in range(1, n - 1):\n        if a[i] > a[i - 1] and a[i] > a[i + 1]:\n            count += 1\n    return str(count)"
    },
    {
        "number": 2040,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    b = [int(x) for x in stdin.readline().split()]\n    a = [0] * n\n    for i in range(n):\n        a[i] = sum(int(x) for x in str(b[i]))\n    a.sort()\n    return''.join(str(x) for x in a)\n\nassert(solution('''3\n1\n2\n3''') == '1 2 3')\nassert(solution('''3\n3\n2\n1''') == '3 11 100')\nassert(solution('''3\n3\n2\n1\n1\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n"
    },
    {
        "number": 2041,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    m = int(stdin.readline())\n    requests = [list(map(int, stdin.readline().split())) for _ in range(m)]\n    a.sort()\n    for k, pos in requests:\n        print(a[pos - 1])\n    return ''"
    },
    {
        "number": 2042,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    museum = [list(stdin.strip()) for _ in range(n)]\n    positions = [tuple(int(x) for x in stdin.split()) for _ in range(k)]\n    return max(solution_recursive(museum, pos) for pos in positions)\n\ndef"
    },
    {
        "number": 2043,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2044,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    a.reverse()\n    a = a[:m]\n    a = [0] + a\n    a = [a[i] - a[i - 1] for i in range(1, len(a))]\n    return''.join([str(x) for x in a])"
    },
    {
        "number": 2045,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    words = stdin.readline().split()\n    result = \"\"\n    for i in range(n):\n        for j in range(i + 1, n):\n            if words[i][0] == words[j][-1] and words[i][-1] == words[j][0]:\n                result += words[i][:-1] + words[j][1:]\n                break\n        else:\n            result += words[i]\n    return result"
    },
    {
        "number": 2046,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    sizes = list(map(int, stdin.readline().split()))\n    res = [0] * n\n    for i in range(n):\n        res[i] = sizes[i]\n        for j in range(i):\n            if sizes[i] < sizes[j]:\n                res[i] = max(res[i], sizes[j])\n    return''.join(map(str, res))\n\nassert(solution('''3''') == '3')\nassert(solution('''5''') == '5 4')\nassert(solution('''4 5 1 2 3''') == '5 4 3 2 1')\nassert(solution('''1 2 3 4 5''') == '5 4 3 2 1')\nassert(solution('''1 2 3 4 5 6''') == '5 4 3 2 1 6')\nassert(solution('''1 2 3 4 5 6 7''') == '5 4 3 2 1 6 7')\nassert(solution('''1 2 3 4 5 6 7 8''') == '5 4 3 2 1 6 7 8')\nassert(solution('''1 2 3 4 5 6 7 8 9''') == '5 4 3 2 1 6 7 8 9')\nassert(solution('''1 2 3 4 5 6 7 8 9 10''') == '5 4 3 2 1 6 7 8 9 10')\nassert(solution('''1 2 3 4 5 6 7 8 9 10 11''') == '5 4 3 2 1 6 7 8 9 10 11')\nassert(solution('''1 2 3 4 5 6 7 8 9 10 11 12''') == '5 4 3 2 1 6 7 8 9 10 11 12')\nassert(solution('''1 2 3 4 5 6 7 8 9 10 11 12 13''') == '5 4 3 2 1 6 7 8 9 10 11 12 13')\nassert(solution('''1 2 3 4 5 6 7 8 9 10 11 12 13 14''') == '5 4 3 2 1 6 7 8 9 10 11 12 13 14')\nassert(solution('''1 2 3 4 5 6 7 8 9 10 11 12 13 14 15''') == '5 4 3 2 1 6 7 8 9 10 11 12 13 14 15')\nassert(solution('''1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16''') == '5 4 3 2 1 6 7 8 9 10 11 12 13 14 15 16')\nassert(solution('''1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17''') == '5 4 3 2 1 6 7 8 9 10 11 12 13 14 15 16 17')\nassert(solution('''1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18''') == '5 4 3 2 1 6 7 8 9 10 11 12 13 14 15 16 17 18')\nassert(solution('''1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19''') == '5 4 3 2 1 6 7 8 9 10 11 12 13 14 15 16 17 18 19')\nassert(solution('''1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20''') == '5 4 3 2 1 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20')\nassert(solution('''1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21''') == '5 4 3 2 1 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21')\nassert(solution('''1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22''') == '5 4 3 2 1 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22')\nassert(solution('''1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23''') == '5 4 3 2 1 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23')\nassert(solution('''1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24''') == '5 4 3 2 1 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24')\nassert(solution('''1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25''') == '5 4 3 2 1 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25')\nassert(solution('''1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26''') == '5 4 3 2 1 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26')\nassert(solution('''1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27''') == '5 4 3 2 1 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27')\nassert(solution('''1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28''') == '5 4 3 2 1 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28')\nassert(solution('''1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29''') == '5 4 3 2 1 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29')\nassert(solution('''1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30''') == '5 4 3 2 1 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30')\nassert(solution('''1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31''') == '5 4 3 2 1 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31')\nassert(solution('''1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32''') == '5"
    },
    {
        "number": 2047,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    b = [int(x) for x in stdin.readline().split()]\n    a = [int(x) for x in stdin.readline().split()]\n    m = int(stdin.readline())\n    for _ in range(m):\n        x, k = [int(x) for x in stdin.readline().split()]\n        if x > k:\n            x, k = k, x\n        if a[x - 1] < k:\n            a[x - 1] = k\n    for i in range(n):\n        if a[i] % b[i]!= 0:\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 2048,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    sizes = list(map(int, stdin.readline().split()))\n    costs = list(map(int, stdin.readline().split()))\n    sizes.sort()\n    costs.sort()\n    if n < 3:\n        return '-1'\n    if n == 3:\n        return str(sizes[0] * costs[0] + sizes[1] * costs[1] + sizes[2] * costs[2])\n    for i in range(n - 2):\n        if sizes[i] < sizes[i + 1] < sizes[i + 2]:\n            return str(sizes[i] * costs[i] + sizes[i + 1] * costs[i + 1] + sizes[i + 2] * costs[i + 2])\n    return '-1'"
    },
    {
        "number": 2049,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    queries = [stdin.split() for _ in range(m)]\n    for query in queries:\n        l, r = int(query[0]), int(query[1])\n        if l == 1:\n            if a[l - 1] == a[r - 1] - 1:\n                print('Yes')\n            else:\n                print('No')\n        else:\n            if a[l - 1] == a[r - 1] - 1:\n                print('Yes')\n            else:\n                print('No')"
    },
    {
        "number": 2050,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    m = n // k\n    if m == 0:\n        return str(m)\n    return str(m) + '\\n' + '\\n'.join(str(i) for i in range(1, m + 1))"
    },
    {
        "number": 2051,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    socks = [int(x) for x in stdin.split()]\n    socks_colors = [int(x) for x in stdin.split()]\n    socks_colors_count = [0] * k\n    for i in range(m):\n        l, r = [int(x) for x in stdin.split()]\n        socks_colors_count[socks_colors[l - 1]] -= 1\n        socks_colors_count[socks_colors[r - 1]] += 1\n    return str(max(socks_colors_count))"
    },
    {
        "number": 2052,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    w, l = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    a.reverse()\n    print(a)\n    return str(a.index(l) + 1)\n"
    },
    {
        "number": 2053,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    m = int(stdin.readline())\n    b = list(map(int, stdin.readline().split()))\n    a.sort()\n    b.sort()\n    swaps = 0\n    for i in range(m):\n        if a[i]!= b[i]:\n            swaps += 1\n            a[i], b[i] = b[i], a[i]\n    return str(abs(sum(a) - sum(b))) + '\\n' + str(swaps)"
    },
    {
        "number": 2054,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        a, b = map(int, stdin.readline().strip().split())\n        print(a * b)"
    },
    {
        "number": 2055,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    for _ in range(n):\n        n, b = map(int, stdin.readline().split())\n        a = list(map(int, stdin.readline().split()))\n        b = list(map(int, stdin.readline().split()))\n        if n == 1:\n            print('YES')\n            continue\n        if n == 2:\n            if a[0] + a[1] <= b[0]:\n                print('YES')\n                continue\n            else:\n                print('NO')\n                continue\n        if n == 3:\n            if a[0] + a[1] + a[2] <= b[0]:\n                print('YES')\n                continue\n            else:\n                print('NO')\n                continue\n        if n == 4:\n            if a[0] + a[1] + a[2] + a[3] <= b[0]:\n                print('YES')\n                continue\n            else:\n                print('NO')\n                continue\n        if n == 5:\n            if a[0] + a[1] + a[2] + a[3] + a[4] <= b[0]:\n                print('YES')\n                continue\n            else:\n                print('NO')\n                continue\n        if n == 6:\n            if a[0] + a[1] + a[2] + a[3] + a[4] + a[5] <= b[0]:\n                print('YES')\n                continue\n            else:\n                print('NO')\n                continue\n        if n == 7:\n            if a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] <= b[0]:\n                print('YES')\n                continue\n            else:\n                print('NO')\n                continue\n        if n == 8:\n            if a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] <= b[0]:\n                print('YES')\n                continue\n            else:\n                print('NO')\n                continue\n        if n == 9:\n            if a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] <= b[0]:\n                print('YES')\n                continue\n            else:\n                print('NO')\n                continue\n        if n == 10:\n            if a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] <= b[0]:\n                print('YES')\n                continue\n            else:\n                print('NO')\n                continue\n        if n == 11:\n            if a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] <= b[0]:\n                print('YES')\n                continue\n            else:\n                print('NO')\n                continue\n        if n == 12:\n            if a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] + a[11] <= b[0]:\n                print('YES')\n                continue\n            else:\n                print('NO')\n                continue\n        if n == 13:\n            if a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] + a[11] + a[12] <= b[0]:\n                print('YES')\n                continue\n            else:\n                print('NO')\n                continue\n        if n == 14:\n            if a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] + a[11] + a[12] + a[13] <= b[0]:\n                print('YES')\n                continue\n            else:\n                print('NO')\n                continue\n        if n == 15:\n            if a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] + a[11] + a[12] + a[13] + a[14] <= b[0]:\n                print('YES')\n                continue\n            else:\n                print('NO')\n                continue\n        if n == 16:\n            if a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] + a[11] + a[12] + a[13] + a[14] + a[15] <= b[0]:\n                print('YES')\n                continue\n            else:\n                print"
    },
    {
        "number": 2056,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    a.sort()\n    a.reverse()\n    s = 0\n    for i in range(n):\n        s += a[i] ** 2\n    return str(s)"
    },
    {
        "number": 2057,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    t = [int(x) for x in stdin.readline().strip().split()]\n    t.sort()\n    t.append(n)\n    t.insert(0, 0)\n    count = 0\n    for i in range(1, len(t)):\n        if t[i] - t[i - 1] > 1:\n            count += 1\n    return count"
    },
    {
        "number": 2058,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum(abs(ord(a) - ord(b)) for a, b in zip(stdin[:len(stdin) - 1], stdin[1:])))"
    },
    {
        "number": 2059,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    return str(max(a))"
    },
    {
        "number": 2060,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    for _ in range(n):\n        x = int(stdin.readline())\n        if x % 3 == 0:\n            print('YES')\n        else:\n            print('NO')"
    },
    {
        "number": 2061,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    lake_map = [list(stdin.strip()) for _ in range(m)]\n    lake_map = [[0 if x == '.' else 1 for x in row] for row in lake_map]\n    lake_map = [[0] + row + [0] for row in lake_map]\n    lake_map = [[0] * (n + 2)] + lake_map + [[0] * (n + 2)]\n    lake_map = [[0] * (n + 2)] + lake_map + [[0] * (n + 2)]\n    lake_map = [[0] * (n + 2)] + lake_map + [[0] * (n + 2)]\n    lake_map = [[0] * (n + 2)] + lake_map + [[0] * (n + 2)]\n    lake_map = [[0] * (n + 2)] + lake_map + [[0] * (n + 2)]\n    lake_map = [[0] * (n + 2)] + lake_map + [[0] * (n + 2)]\n    lake_map = [[0] * (n + 2)] + lake_map + [[0] * (n + 2)]\n    lake_map = [[0] * (n + 2)] + lake_map + [[0] * (n + 2)]\n    lake_map = [[0] * (n + 2)] + lake_map + [[0] * (n + 2)]\n    lake_map = [[0] * (n + 2)] + lake_map + [[0] * (n + 2)]\n    lake_map = [[0] * (n + 2)] + lake_map + [[0] * (n + 2)]\n    lake_map = [[0] * (n + 2)] + lake_map + [[0] * (n + 2)]\n    lake_map = [[0] * (n + 2)] + lake_map + [[0] * (n + 2)]\n    lake_map = [[0] * (n + 2)] + lake_map + [[0] * (n + 2)]\n    lake_map = [[0] * (n + 2)] + lake_map + [[0] * (n + 2)]\n    lake_map = [[0] * (n + 2)] + lake_map + [[0] * (n + 2)]\n    lake_map = [[0] * (n + 2)] + lake_map + [[0] * (n + 2)]\n    lake_map = [[0] * (n + 2)] + lake_map + [[0] * (n + 2)]\n    lake_map = [[0] * (n + 2)] + lake_map + [[0] * (n + 2)]\n    lake_map = [[0] * (n + 2)] + lake_map + [[0] * (n + 2)]\n    lake_map = [[0] * (n + 2)] + lake_map + [[0] * (n + 2)]\n    lake_map = [[0] * (n + 2)] + lake_map + [[0] * (n + 2)]\n    lake_map = [[0] * (n + 2)] + lake_map + [[0] * (n + 2)]\n    lake_map = [[0] * (n + 2)] + lake_map + [[0] * (n + 2)]\n    lake_map = [[0] * (n + 2)] + lake_map + [[0] * (n + 2)]\n    lake_map = [[0] * (n + 2)] + lake_map + [[0] * (n + 2)]\n    lake_map = [[0] * (n + 2)] + lake_map + [[0] * (n + 2)]\n    lake_map = [[0] * (n + 2)] + lake_map + [[0] * (n + 2)]\n    lake_map = [[0] * (n + 2)] + lake_map + [[0] * (n + 2)]\n    lake_map = [[0] * (n + 2)] + lake_map + [[0] * (n + 2)]\n    lake_map = [[0] * (n + 2)] + lake_map + [[0] * (n + 2)]\n    lake_map = [[0] * (n + 2)] + lake_map + [[0] * (n + 2)]\n    lake_map = [[0] * (n + 2)] + lake_map + [[0] * (n + 2)]\n    lake_map = [[0] * (n + 2)] + lake_map + [[0] * (n + 2)]\n    lake_map = [[0] * (n + 2)] + lake_map + [[0] * (n + 2)]\n    lake_map = [[0] * (n + 2)] + lake_map + [[0] * (n + 2)]\n    lake_map = [[0] * (n + 2)] + lake_map + [[0] * (n + 2)]\n    lake_map = [[0] * (n + 2)] + lake_map + [[0] * (n + 2)]\n    lake_map = [[0] * (n + 2)] + lake_map + [[0] * (n + 2)]\n    lake_map = [[0] * (n + 2)] + lake_map + [[0] * (n + 2)]\n    lake_map = [[0] * (n + 2)] + lake_map + [[0] * (n + 2)]\n    lake_map = [[0] * (n + 2)] + lake_map + [[0] * (n + 2)]\n    lake_map = [[0] * (n + 2)] + lake_map + [[0] * (n + 2)]\n    lake_map = [[0] * (n + 2)] + lake_map + [[0] * (n + 2)]\n    lake_map = [[0] * (n + 2)] + lake_map + [[0] * (n + 2)]\n    lake_map = [[0] * (n + 2)] + lake_map + [[0] * (n + 2)]\n    lake_map = [[0] * (n + 2)] + lake_map + [[0] * (n + 2)]\n    lake_map = [[0] * (n + 2)] + lake_map + [[0]"
    },
    {
        "number": 2062,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    a.sort()\n    a.reverse()\n    s = 0\n    for i in range(n):\n        s += a[i]\n        if s % a[i]!= 0:\n            return s\n    return s"
    },
    {
        "number": 2063,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, w = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    a.reverse()\n    if m == 0:\n        return str(a[0])\n    if m == 1:\n        return str(a[0] + a[1])\n    if m == 2:\n        return str(a[0] + a[1] + a[2])\n    if m == 3:\n        return str(a[0] + a[1] + a[2] + a[3])\n    if m == 4:\n        return str(a[0] + a[1] + a[2] + a[3] + a[4])\n    if m == 5:\n        return str(a[0] + a[1] + a[2] + a[3] + a[4] + a[5])\n    if m == 6:\n        return str(a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6])\n    if m == 7:\n        return str(a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7])\n    if m == 8:\n        return str(a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8])\n    if m == 9:\n        return str(a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9])\n    if m == 10:\n        return str(a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10])\n    if m == 11:\n        return str(a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] + a[11])\n    if m == 12:\n        return str(a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] + a[11] + a[12])\n    if m == 13:\n        return str(a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] + a[11] + a[12] + a[13])\n    if m == 14:\n        return str(a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] + a[11] + a[12] + a[13] + a[14])\n    if m == 15:\n        return str(a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] + a[11] + a[12] + a[13] + a[14] + a[15])\n    if m == 16:\n        return str(a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] + a[11] + a[12] + a[13] + a[14] + a[15] + a[16])\n    if m == 17:\n        return str(a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] + a[11] + a[12] + a[13] + a[14] + a[15] + a[16] + a[17])\n    if m == 18:\n        return str(a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] + a[11] + a[12] + a[13] + a[14] + a[15] + a[16] + a[17] + a[18])\n    if m == 19:\n        return str(a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] + a[11] + a[12] + a[13] + a[14] + a[15] + a[16] + a[17] + a[18] + a[19])\n    if m == 20:\n        return str(a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] + a[11] + a[12] + a[13] + a[14] + a[15] + a[16] + a[17] + a[18] + a[19] + a[20])\n    if m == 21:\n        return str(a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] + a[11] + a[12] + a[13] + a[14] + a[15] + a[16] + a[17] + a[18] + a[19] + a[20] + a[21])\n    if m == 22:\n        return str(a[0] + a[1] + a[2] + a[3] + a[4] + a"
    },
    {
        "number": 2064,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(n)\n\nassert(solution(input()) == '1')\nassert(solution(input()) == '7')\nassert(solution(input()) == '27')\nassert(solution(input()) == '737')\nassert(solution(input
    },
    {
        "number": 2065,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    if m == 0:\n        return '-1'\n    if m == 1:\n        return str(n)\n    if m == 2:\n        return str(n - 1)\n    if m == 3:\n        return str(n - 2)\n    if m == 4:\n        return str(n - 3)\n    if m == 5:\n        return str(n - 4)\n    if m == 6:\n        return str(n - 5)\n    if m == 7:\n        return str(n - 6)\n    if m == 8:\n        return str(n - 7)\n    if m == 9:\n        return str(n - 8)\n    if m == 10:\n        return str(n - 9)\n    if m == 11:\n        return str(n - 10)\n    if m == 12:\n        return str(n - 11)\n    if m == 13:\n        return str(n - 12)\n    if m == 14:\n        return str(n - 13)\n    if m == 15:\n        return str(n - 14)\n    if m == 16:\n        return str(n - 15)\n    if m == 17:\n        return str(n - 16)\n    if m == 18:\n        return str(n - 17)\n    if m == 19:\n        return str(n - 18)\n    if m == 20:\n        return str(n - 19)\n    if m == 21:\n        return str(n - 20)\n    if m == 22:\n        return str(n - 21)\n    if m == 23:\n        return str(n - 22)\n    if m == 24:\n        return str(n - 23)\n    if m == 25:\n        return str(n - 24)\n    if m == 26:\n        return str(n - 25)\n    if m == 27:\n        return str(n - 26)\n    if m == 28:\n        return str(n - 27)\n    if m == 29:\n        return str(n - 28)\n    if m == 30:\n        return str(n - 29)\n    if m == 31:\n        return str(n - 30)\n    if m == 32:\n        return str(n - 31)\n    if m == 33:\n        return str(n - 32)\n    if m == 34:\n        return str(n - 33)\n    if m == 35:\n        return str(n - 34)\n    if m == 36:\n        return str(n - 35)\n    if m == 37:\n        return str(n - 36)\n    if m == 38:\n        return str(n - 37)\n    if m == 39:\n        return str(n - 38)\n    if m == 40:\n        return str(n - 39)\n    if m == 41:\n        return str(n - 40)\n    if m == 42:\n        return str(n - 41)\n    if m == 43:\n        return str(n - 42)\n    if m == 44:\n        return str(n - 43)\n    if m == 45:\n        return str(n - 44)\n    if m == 46:\n        return str(n - 45)\n    if m == 47:\n        return str(n - 46)\n    if m == 48:\n        return str(n - 47)\n    if m == 49:\n        return str(n - 48)\n    if m == 50:\n        return str(n - 49)\n    if m == 51:\n        return str(n - 50)\n    if m == 52:\n        return str(n - 51)\n    if m == 53:\n        return str(n - 52)\n    if m == 54:\n        return str(n - 53)\n    if m == 55:\n        return str(n - 54)\n    if m == 56:\n        return str(n - 55)\n    if m == 57:\n        return str(n - 56)\n    if m == 58:\n        return str(n - 57)\n    if m == 59:\n        return str(n - 58)\n    if m == 60:\n        return str(n - 59)\n    if m == 61:\n        return str(n - 60)\n    if m == 62:\n        return str(n - 61)\n    if m == 63:\n        return str(n - 62)\n    if m == 64:\n        return str(n - 63"
    },
    {
        "number": 2066,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2067,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    vertical_spells = [int(x) for x in stdin.split()]\n    horizontal_spells = [tuple(int(x) for x in stdin.split()) for _ in range(m)]\n    return str(min(n, m))"
    },
    {
        "number": 2068,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2069,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    p = [int(x) for x in stdin.split()]\n    foe_pairs = [tuple(int(x) for x in stdin.split()) for _ in range(m)]\n    pairs = set(foe_pairs)\n    intervals = set()\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (i, j) not in pairs:\n                intervals.add((p[i], p[j]))\n    return str(len(intervals))"
    },
    {
        "number": 2070,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2071,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    b = [int(x) for x in stdin.readline().split()]\n    m = [0] * n\n    for i in range(n):\n        m[i] = a[i] + b[i]\n    m.sort()\n    return str(sum(m))"
    },
    {
        "number": 2072,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    x = [int(x) for x in stdin.readline().split()]\n    v = [int(x) for x in stdin.readline().split()]\n    x.sort()\n    v.sort()\n    if x[0] > v[0]:\n        return \"NO\"\n    if x[-1] < v[-1]:\n        return \"NO\"\n    if x[0] == v[0]:\n        return str(x[0])\n    if x[-1] == v[-1]:\n        return str(x[-1])\n    if x[0] == v[-1]:\n        return str(x[0])\n    if x[-1] == v[0]:\n        return str(x[-1])\n    if x[0] == v[-1]:\n        return str(x[0])\n    if x[-1] == v[0]:\n        return str(x[-1])\n    if x[0] == v[0]:\n        return str(x[0])\n    if x[-1] == v[-1]:\n        return str(x[-1])\n    if x[0] == v[-1]:\n        return str(x[0])\n    if x[-1] == v[0]:\n        return str(x[-1])\n    if x[0] == v[0]:\n        return str(x[0])\n    if x[-1] == v[-1]:\n        return str(x[-1])\n    if x[0] == v[0]:\n        return str(x[0])\n    if x[-1] == v[-1]:\n        return str(x[-1])\n    if x[0] == v[0]:\n        return str(x[0])\n    if x[-1] == v[-1]:\n        return str(x[-1])\n    if x[0] == v[0]:\n        return str(x[0])\n    if x[-1] == v[-1]:\n        return str(x[-1])\n    if x[0] == v[0]:\n        return str(x[0])\n    if x[-1] == v[-1]:\n        return str(x[-1])\n    if x[0] == v[0]:\n        return str(x[0])\n    if x[-1] == v[-1]:\n        return str(x[-1])\n    if x[0] == v[0]:\n        return str(x[0])\n    if x[-1] == v[-1]:\n        return str(x[-1])\n    if x[0] == v[0]:\n        return str(x[0])\n    if x[-1] == v[-1]:\n        return str(x[-1])\n    if x[0] == v[0]:\n        return str(x[0])\n    if x[-1] == v[-1]:\n        return str(x[-1])\n    if x[0] == v[0]:\n        return str(x[0])\n    if x[-1] == v[-1]:\n        return str(x[-1])\n    if x[0] == v[0]:\n        return str(x[0])\n    if x[-1] == v[-1]:\n        return str(x[-1])\n    if x[0] == v[0]:\n        return str(x[0])\n    if x[-1] == v[-1]:\n        return str(x[-1])\n    if x[0] == v[0]:\n        return str(x[0])\n    if x[-1] == v[-1]:\n        return str(x[-1])\n    if x[0] == v[0]:\n        return str(x[0])\n    if x[-1] == v[-1]:\n        return str(x[-1])\n    if x[0] == v[0]:\n        return str(x[0])\n    if x[-1] == v[-1]:\n        return str(x[-1])\n    if x[0] == v[0]:\n        return str(x[0])\n    if x[-1] == v[-1]:\n        return str(x[-1])\n    if x[0] == v[0]:\n        return str(x[0])\n    if x[-1] == v[-1]:\n        return str(x[-1])\n    if x[0] == v[0]:\n        return str(x[0])\n    if x[-1] == v[-1]:\n        return str(x[-1])\n    if x[0] == v[0]:\n        return str(x[0])\n    if x[-1] == v[-1]:\n        return str(x[-1])\n    if x[0] == v[0]:\n        return str(x[0])\n    if x[-1] == v[-1]:\n        return str(x[-1])\n    if x[0] == v[0]:\n        return str(x[0])\n    if x[-1] == v[-1]:\n        return str(x[-1])\n    if x[0] == v[0]:\n        return str(x[0])\n    if x[-1] == v[-1]:\n        return str(x[-1])\n    if x[0] == v[0]:\n        return str(x[0])\n    if x[-1] == v[-1]:\n        return str(x[-1])\n    if x[0] == v[0]:\n        return str(x[0])\n    if x[-1] == v[-1]:\n        return str(x[-1])\n    if x[0] == v[0]:\n        return str(x[0])\n    if x[-1] == v[-1]:\n        return str(x[-1])\n    if x[0] == v[0]:\n        return str(x[0])\n    if x[-1] == v[-1]:\n        return str(x[-1])\n    if x[0] == v[0]:\n        return str(x[0])\n    if x[-1] == v[-1]:\n        return str(x[-1])\n    if x[0] == v[0]:\n        return str("
    },
    {
        "number": 2073,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    roads = [int(x) for x in stdin.readline().split()]\n    return str(solution_recursive(n, roads))\n\ndef"
    },
    {
        "number": 2074,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    c = [list(map(int, stdin.split())) for _ in range(n)]\n    return str(min(sum(c[i][j] for i in range(n)) for j in range(m)))"
    },
    {
        "number": 2075,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    s = stdin[m:]\n    return s"
    },
    {
        "number": 2076,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2077,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = [tuple(map(int, line.split())) for line in stdin.splitlines()[1:]]\n    topics = list(map(int, stdin.splitlines()[-1].split()))\n    graph = {i: set() for i in range(1, n + 1)}\n    for a, b in edges:\n        graph[a].add(b)\n        graph[b].add(a)\n    visited = [False] * (n + 1)\n    def dfs(node: int, topic: int) -> None:\n        visited[node] = True\n        for neighbor in graph[node]:\n            if not visited[neighbor]:\n                if topics[neighbor - 1]!= topic:\n                    dfs(neighbor, topic)\n    for i in range(1, n + 1):\n        if not visited[i]:\n            dfs(i, topics[i - 1])\n    return''.join(map(str, topics))"
    },
    {
        "number": 2078,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    segments = [tuple(int(x) for x in stdin.split()) for _ in range(n)]\n    segments.extend([tuple(int(x) for x in stdin.split()) for _ in range(m)])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[2])\n    segments.sort(key=lambda x: x[3])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[2])\n    segments.sort(key=lambda x: x[2] - x[3])\n    segments.sort(key=lambda x: x[0] - x[3])\n    segments.sort(key=lambda x: x[1] - x[2])\n    segments.sort(key=lambda x: x[2] - x[3])\n    segments.sort(key=lambda x: x[0] - x[2])\n    segments.sort(key=lambda x: x[1] - x[3])\n    segments.sort(key=lambda x: x[2] - x[3])\n    segments.sort(key=lambda x: x[0] - x[3])\n    segments.sort(key=lambda x: x[1] - x[2])\n    segments.sort(key=lambda x: x[2] - x[3])\n    segments.sort(key=lambda x: x[0] - x[2])\n    segments.sort(key=lambda x: x[1] - x[3])\n    segments.sort(key=lambda x: x[2] - x[3])\n    segments.sort(key=lambda x: x[0] - x[3])\n    segments.sort(key=lambda x: x[1] - x[2])\n    segments.sort(key=lambda x: x[2] - x[3])\n    segments.sort(key=lambda x: x[0] - x[3])\n    segments.sort(key=lambda x: x[1] - x[2])\n    segments.sort(key=lambda x: x[2] - x[3])\n    segments.sort(key=lambda x: x[0] - x[3])\n    segments.sort(key=lambda x: x[1] - x[2])\n    segments.sort(key=lambda x: x[2] - x[3])\n    segments.sort(key=lambda x: x[0] - x[3])\n    segments.sort(key=lambda x: x[1] - x[2])\n    segments.sort(key=lambda x: x[2] - x[3])\n    segments.sort(key=lambda x: x[0] - x[3])\n    segments.sort(key=lambda x: x[1] - x[2])\n    segments.sort(key=lambda x: x[2] - x[3])\n    segments.sort(key=lambda x: x[0] - x[3])\n    segments.sort(key=lambda x: x[1] - x[2])\n    segments.sort(key=lambda x: x[2] - x[3])\n    segments.sort(key=lambda x: x[0] - x[3])\n    segments.sort(key=lambda x: x[1] - x[2])\n    segments.sort(key=lambda x: x[2] - x[3])\n    segments.sort(key=lambda x: x[0] - x[3])\n    segments.sort(key=lambda x: x[1] - x[2])\n    segments.sort(key=lambda x: x[2] - x[3])\n    segments.sort(key=lambda x: x[0] - x[3])\n    segments.sort(key=lambda x: x[1] - x[2])\n    segments.sort(key=lambda x: x[2] - x[3])\n    segments.sort(key=lambda x: x[0] - x[3])\n    segments.sort(key=lambda x: x[1] - x[2])\n    segments.sort(key=lambda x: x[2] - x[3])\n    segments.sort(key=lambda x: x[0] - x[3])\n    segments.sort(key=lambda x: x[1] - x[2])\n    segments.sort(key=lambda x: x[2] - x[3])\n    segments.sort(key=lambda x: x[0] - x[3])\n    segments.sort(key=lambda x: x[1] - x[2])\n    segments.sort(key=lambda x: x[2] - x[3])\n    segments.sort(key=lambda x: x[0] - x[3])\n    segments.sort(key=lambda x: x[1] - x[2])\n    segments.sort(key=lambda x: x[2] - x[3])\n    segments.sort(key=lambda x: x[0] - x[3])\n    segments.sort(key=lambda x: x[1] - x[2])\n    segments.sort(key=lambda x: x[2] - x[3])\n    segments.sort(key=lambda x: x[0] - x[3])\n    segments.sort(key=lambda x: x[1] - x[2])\n    segments.sort(key=lambda x: x[2] - x[3])\n    segments.sort(key=lambda x: x[0] - x[3])\n    segments.sort(key=lambda x: x[1] - x[2])\n    segments.sort(key=lambda x: x[2] - x[3])\n    segments.sort(key=lambda x: x[0] - x[3])\n    segments.sort(key=lambda x: x[1] - x[2])\n    segments.sort(key=lambda x: x[2] - x[3])\n    segments.sort(key=lambda x: x[0] - x[3])\n    segments.sort("
    },
    {
        "number": 2079,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    w = list(map(int, stdin.readline().split()))\n    s = stdin.readline()\n    return''.join(map(str, solve(n, w, s)))\n\ndef"
    },
    {
        "number": 2080,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"2\"\n    if n == 3:\n        return \"3\"\n    if n == 4:\n        return \"4\"\n    if n == 5:\n        return \"5\"\n    if n == 6:\n        return \"6\"\n    if n == 7:\n        return \"7\"\n    if n == 8:\n        return \"8\"\n    if n == 9:\n        return \"9\"\n    if n == 10:\n        return \"10\"\n    if n == 11:\n        return \"11\"\n    if n == 12:\n        return \"12\"\n    if n == 13:\n        return \"13\"\n    if n == 14:\n        return \"14\"\n    if n == 15:\n        return \"15\"\n    if n == 16:\n        return \"16\"\n    if n == 17:\n        return \"17\"\n    if n == 18:\n        return \"18\"\n    if n == 19:\n        return \"19\"\n    if n == 20:\n        return \"20\"\n    if n == 21:\n        return \"21\"\n    if n == 22:\n        return \"22\"\n    if n == 23:\n        return \"23\"\n    if n == 24:\n        return \"24\"\n    if n == 25:\n        return \"25\"\n    if n == 26:\n        return \"26\"\n    if n == 27:\n        return \"27\"\n    if n == 28:\n        return \"28\"\n    if n == 29:\n        return \"29\"\n    if n == 30:\n        return \"30\"\n    if n == 31:\n        return \"31\"\n    if n == 32:\n        return \"32\"\n    if n == 33:\n        return \"33\"\n    if n == 34:\n        return \"34\"\n    if n == 35:\n        return \"35\"\n    if n == 36:\n        return \"36\"\n    if n == 37:\n        return \"37\"\n    if n == 38:\n        return \"38\"\n    if n == 39:\n        return \"39\"\n    if n == 40:\n        return \"40\"\n    if n == 41:\n        return \"41\"\n    if n == 42:\n        return \"42\"\n    if n == 43:\n        return \"43\"\n    if n == 44:\n        return \"44\"\n    if n == 45:\n        return \"45\"\n    if n == 46:\n        return \"46\"\n    if n == 47:\n        return \"47\"\n    if n == 48:\n        return \"48\"\n    if n == 49:\n        return \"49\"\n    if n == 50:\n        return \"50\"\n    if n == 51:\n        return \"51\"\n    if n == 52:\n        return \"52\"\n    if n == 53:\n        return \"53\"\n    if n == 54:\n        return \"54\"\n    if n == 55:\n        return \"55\"\n    if n == 56:\n        return \"56\"\n    if n == 57:\n        return \"57\"\n    if n == 58:\n        return \"58\"\n    if n == 59:\n        return \"59\"\n    if n == 60:\n        return \"60\"\n    if n == 61:\n        return \"61\"\n    if n == 62:\n        return \"62\"\n    if n == 63:\n        return \"63\"\n    if n == 64:\n        return \"64\"\n    if n == 65:\n        return \"65\"\n    if n == 66:\n        return \"66\"\n    if n == 67:\n        return \"67\"\n    if n == 68:\n        return \"68\"\n    if n == 69:\n        return \"69\"\n    if n == 70:\n        return \"70\"\n    if n == 71:\n        return \"71\"\n    if n == 72:\n        return \"72\"\n    if n == 73:\n        return \"73\"\n    if n == 74:\n        return \"74\"\n    if n == 75:\n        return \"75\"\n    if n == 76:\n        return \"76\"\n    if n == 77:\n        return \"77\"\n    if n == 78:\n        return \"78\"\n    if n == 79:\n        return \"79\"\n    if n == 80:\n        return \"80\"\n    if n == 81:\n        return \"81\"\n    if n == 82:\n        return \"82\"\n    if n == 83:\n        return \"83\"\n    if n == 84:\n        return \"84\"\n    if n == 85:\n        return \"85\"\n    if n == 86:\n        return \"86\"\n    if n == 87:\n        return \"87\"\n    if n == 88:\n        return \"88\"\n    if n == 89:\n        return \"89\"\n    if n == 90:\n        return \"90\"\n    if n == 91:\n        return \"91\"\n    if n == 92:\n        return \"92\"\n    if n == 93:\n        return \"93\"\n    if n == 94:\n        return \"94\"\n    if n == 95:\n        return \"95\"\n    if n == 96:\n        return \"96\"\n    if n == 97:\n        return \"97\"\n    if n == 98:\n        return \"98\"\n    if n == 99:\n        return \"99\"\n    if n == 100:\n        return \"100\"\n    if n == 101:\n        return \"101\"\n    if n == 102:\n        return \"102\"\n    if n == 103:\n        return \"103\"\n    if n == 104:\n        return \"104\"\n    if n == 105:\n        return \"105\"\n    if n == 106:\n        return \"106\"\n    if n == 107:\n        return \"107\"\n    if n == 108:\n        return \"108\"\n    if n == 109:\n        return \"109\"\n    if n == 110:\n        return \"110\"\n    if n == 111:\n        return \"111\"\n    if n == 112:\n        return \"112\"\n    if n == 113:\n        return \"113\"\n    if n == 114:\n        return \"114\"\n    if n == 115:\n        return \"115\"\n    if n == 116:\n        return \"116\"\n    if n == 117:\n        return \"117\"\n    if n == 118:\n        return \"118\"\n    if n == 119:\n        return \"119\"\n    if n == 120:\n        return \"120\"\n    if n == 121:\n        return \"121\"\n    if n == 122"
    },
    {
        "number": 2081,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    return str(sum(max(a) - min(a), 0))"
    },
    {
        "number": 2082,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    animals = [int(x) for x in stdin.split()]\n    roads = [tuple(int(x) for x in stdin.split()) for _ in range(m)]\n    graph = defaultdict(list)\n    for a, b in roads:\n        graph[a].append(b)\n        graph[b].append(a)\n    \n    def dfs(node, visited, count):\n        visited.add(node)\n        for n in graph[node]:\n            if n not in visited:\n                count = dfs(n, visited, count)\n        return count + 1\n    \n    result = 0\n    for a, b in roads:\n        visited = set()\n        count = 0\n        result += dfs(a, visited, count) * dfs(b, visited, count)\n    return str(result / (n * (n - 1)))"
    },
    {
        "number": 2083,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, T, c, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    p = [int(x) for x in stdin.split()]\n    \n    def mean(a, T):\n        return sum(a) / T\n    \n    def mean_approx(a, T, c):\n        return (a[0] + a[-1]) / T - c\n    \n    def mean_error(a, T, c):\n        return abs(mean_approx(a, T, c) - mean(a, T)) / mean(a, T)\n    \n    def mean_error_approx(a, T, c, m):\n        return abs(mean_approx(a, T, c) - mean(a, T)) / mean(a, T)\n    \n    def mean_error_approx_error(a, T, c, m):\n        return abs(mean_error_approx(a, T, c, m) - mean_error(a, T, c)) / mean_error(a, T, c)\n    \n    def mean_error_approx_error_approx(a, T, c, m):\n        return abs(mean_error_approx_error(a, T, c, m) - mean_error_approx(a, T, c, m)) / mean_error_approx(a, T, c, m)\n    \n    def mean_error_approx_error_approx_error(a, T, c, m):\n        return abs(mean_error_approx_error_approx(a, T, c, m) - mean_error_approx_error(a, T, c, m)) / mean_error_approx_error(a, T, c, m)\n    \n    def mean_error_approx_error_approx_error_approx(a, T, c, m):\n        return abs(mean_error_approx_error_approx_error(a, T, c, m) - mean_error_approx_"
    },
    {
        "number": 2084,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    return str(sum(a[i] for i in range(k, n)))"
    },
    {
        "number": 2085,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n    \n    max_value = 0\n    for i in range(n):\n        for j in range(i, n):\n            if (1 << j) & a[j] > max_value:\n                max_value = (1 << j) & a[j]\n    return str(max_value)"
    },
    {
        "number": 2086,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    s, f = map(int, stdin.readline().split())\n    return str(max(a[i] for i in range(s, f+1)))\n\nassert(solution('''3\n1 2 3\n1 3\n''') == '3')\nassert(solution('''5\n1 2 3 4 1\n1 3\n''') == '4')\nassert(solution('''5\n1 2 3 4 1\n1 3\n''') == '4')\nassert(solution('''5\n1 2 3 4 1\n1 3\n''') == '4')\nassert(solution('''5\n1 2 3 4 1\n1 3\n''') == '4')\nassert(solution('''5\n1 2 3 4 1\n1 3\n''') == '4')\nassert(solution('''5\n1 2 3 4 1\n1 3\n''') == '4')\nassert(solution('''5\n1 2 3 4 1\n1 3\n''') == '4')\nassert(solution('''5\n1 2 3 4 1\n1 3\n''') == '4')\nassert(solution('''5\n1 2 3 4 1\n1 3\n''') == '4')\nassert(solution('''5\n1 2 3 4 1\n1 3\n''') == '4')\nassert(solution('''5\n1 2 3 4 1\n1 3\n''') == '4')\nassert(solution('''5\n1 2 3 4 1\n1 3\n''') == '4')\nassert(solution('''5\n1 2 3 4 1\n1 3\n''') == '4')\nassert(solution('''5\n1 2 3 4 1\n1 3\n''') == '4')\nassert(solution('''5\n1 2 3 4 1\n1 3\n''') == '4')\nassert(solution('''5\n1 2 3 4 1\n1 3\n''') == '4')\nassert(solution('''5\n1 2 3 4 1\n1 3\n''') == '4')\nassert(solution('''5\n1 2 3 4 1\n1 3\n''') == '4')\nassert(solution('''5\n1 2 3 4 1\n1 3\n''') == '4')\nassert(solution('''5\n1 2 3 4 1\n1 3\n''') == '4')\nassert(solution('''5\n1 2 3 4 1\n1 3\n''') == '4')\nassert(solution('''5\n1 2 3 4 1\n1 3\n''') == '4')\nassert(solution('''5\n1 2 3 4 1\n1 3\n''') == '4')\nassert(solution('''5\n1 2 3 4 1\n1 3\n''') == '4')\nassert(solution('''5\n1 2 3 4 1\n1 3\n''') == '4')\nassert(solution('''5\n1 2 3 4 1\n1 3\n''') == '4')\nassert(solution('''5\n1 2 3 4 1\n1 3\n''') == '4')\nassert(solution('''5\n1 2 3 4 1\n1 3\n''') == '4')\nassert(solution('''5\n1 2 3 4 1\n1 3\n''') == '4')\nassert(solution('''5\n1 2 3 4 1\n1 3\n''') == '4')\nassert(solution('''5\n1 2 3 4 1\n1 3\n''') == '4')\nassert(solution('''5\n1 2 3 4 1\n1 3\n''') == '4')\nassert(solution('''5\n1 2 3 4 1\n1 3\n''') == '4')\nassert(solution('''5\n1 2 3 4 1\n1 3\n''') == '4')\nassert(solution('''5\n1 2 3 4 1\n1 3\n''') == '4')\nassert(solution('''5\n1 2 3 4 1\n1 3\n''') == '4')\nassert(solution('''5\n1 2 3 4 1\n1 3\n''') == '4')\nassert(solution('''5\n1 2 3 4 1\n1 3\n''') == '4')\nassert(solution('''5\n1 2 3 4 1\n1 3\n''') == '4')\nassert(solution('''5\n1 2 3 4 1\n1 3\n''') == '4')\nassert(solution('''5\n1 2 3 4 1\n1 3\n''') == '4')\nassert(solution('''5\n1 2 3 4 1\n1 3\n''') == '4')\nassert(solution('''5\n1 2 3 4 1\n1 3\n''') == '4')\nassert(solution('''5\n1 2 3 4 1\n1 3\n''') == '4')\nassert(solution('''5\n1 2 3 4 1\n1 3\n''') == '4')\nassert(solution('''5\n1 2 3 4 1\n1 3\n''') == '4')\nassert(solution('''5\n1 2 3 4 1\n1 3\n''') == '4')\nassert(solution('''5\n1 2 3 4 1\n1 3\n''') == '4')\nassert(solution('''5\n1 2 3 4 1\n1 3\n''') == '4')\nassert(solution('''5\n1 2 3 4 1\n1 3\n''') == '4')\nassert(solution('''5\n1 2 3 4 1\n1 3\n''') == '4')\nassert(solution('''5\n1 2 3 4 1\n1 3\n''') == '4')\nassert(solution('''5\n1 2 3 4 1\n1 3\n''') == '4')\nassert(solution('''5\n1 2 3 4 1\n1 3\n''') == '4')\nassert(solution('''5\n1 2 3 4 1\n1 3\n''') == '4')\nassert(solution('''5\n1 2 3 4 1\n1 3\n''') == '4')\nassert("
    },
    {
        "number": 2087,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(x) for x in stdin.split()]\n    return str(sum([a * b * c for a in range(1, a + 1) for b in range(1, b + 1) for c in range(1, c + 1)]))"
    },
    {
        "number": 2088,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    tree = [set() for _ in range(n)]\n    for _ in range(n - 1):\n        u, v = map(int, stdin.readline().split())\n        tree[u - 1].add(v - 1)\n        tree[v - 1].add(u - 1)\n    \n    # find the root\n    root = 0\n    for i in range(n):\n        if len(tree[i]) == 1:\n            root = i\n            break\n    \n    # find the happy junctions\n    h = [0] * n\n    h[root] = 1\n    q = [root]\n    while q:\n        u = q.pop()\n        for v in tree[u]:\n            if h[v] == 0:\n                h[v] = h[u] + 1\n                q.append(v)\n    \n    # find the minimum number of colors\n    colors = [0] * n\n    for i in range(n):\n        if h[i] == n:\n            colors[i] = 1\n    \n    return''.join(map(str, colors))"
    },
    {
        "number": 2089,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s, t = [int(x) for x in stdin.split()]\n    roads = [set() for _ in range(n)]\n    for _ in range(m):\n        u, v = [int(x) for x in stdin.split()]\n        roads[u - 1].add(v - 1)\n        roads[v - 1].add(u - 1)\n    \n    def dfs(u: int, v: int) -> int:\n        if u == v:\n            return 0\n        if u in roads[v]:\n            return 1\n        return dfs(u, roads[u].pop()) + dfs(roads[u].pop(), v)\n    \n    return str(dfs(s - 1, t - 1))"
    },
    {
        "number": 2090,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    songs = [int(x) for x in stdin.split()]\n    songs.sort(reverse=True)\n    songs = songs[:k]\n    return str(sum(songs) * min(songs))"
    },
    {
        "number": 2091,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for _ in range(n):\n        s = stdin.readline().strip()\n        if s == s[::-1]:\n            print(s)\n        else:\n            for i in range(1, len(s)):\n                if s[:i] == s[:i][::-1] and s[i:] == s[i:][::-1]:\n                    print(s[:i] + s[i:])\n                    break"
    },
    {
        "number": 2092,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, n, k, t = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    a.reverse()\n    a = a[:m]\n    a.sort()\n    a.reverse()\n    a = a[:m]\n    a.sort()\n    a.reverse()\n    a = a[:m]\n    a.sort()\n    a.reverse()\n    a = a[:m]\n    a.sort()\n    a.reverse()\n    a = a[:m]\n    a.sort()\n    a.reverse()\n    a = a[:m]\n    a.sort()\n    a.reverse()\n    a = a[:m]\n    a.sort()\n    a.reverse()\n    a = a[:m]\n    a.sort()\n    a.reverse()\n    a = a[:m]\n    a.sort()\n    a.reverse()\n    a = a[:m]\n    a.sort()\n    a.reverse()\n    a = a[:m]\n    a.sort()\n    a.reverse()\n    a = a[:m]\n    a.sort()\n    a.reverse()\n    a = a[:m]\n    a.sort()\n    a.reverse()\n    a = a[:m]\n    a.sort()\n    a.reverse()\n    a = a[:m]\n    a.sort()\n    a.reverse()\n    a = a[:m]\n    a.sort()\n    a.reverse()\n    a = a[:m]\n    a.sort()\n    a.reverse()\n    a = a[:m]\n    a.sort()\n    a.reverse()\n    a = a[:m]\n    a.sort()\n    a.reverse()\n    a = a[:m]\n    a.sort()\n    a.reverse()\n    a = a[:m]\n    a.sort()\n    a.reverse()\n    a = a[:m]\n    a.sort()\n    a.reverse()\n    a = a[:m]\n    a.sort()\n    a.reverse()\n    a = a[:m]\n    a.sort()\n    a.reverse()\n    a = a[:m]\n    a.sort()\n    a.reverse()\n    a = a[:m]\n    a.sort()\n    a.reverse()\n    a = a[:m]\n    a.sort()\n    a.reverse()\n    a = a[:m]\n    a.sort()\n    a.reverse()\n    a = a[:m]\n    a.sort()\n    a.reverse()\n    a = a[:m]\n    a.sort()\n    a.reverse()\n    a = a[:m]\n    a.sort()\n    a.reverse()\n    a = a[:m]\n    a.sort()\n    a.reverse()\n    a = a[:m]\n    a.sort()\n    a.reverse()\n    a = a[:m]\n    a.sort()\n    a.reverse()\n    a = a[:m]\n    a.sort()\n    a.reverse()\n    a = a[:m]\n    a.sort()\n    a.reverse()\n    a = a[:m]\n    a.sort()\n    a.reverse()\n    a = a[:m]\n    a.sort()\n    a.reverse()\n    a = a[:m]\n    a.sort()\n    a.reverse()\n    a = a[:m]\n    a.sort()\n    a.reverse()\n    a = a[:m]\n    a.sort()\n    a.reverse()\n    a = a[:m]\n    a.sort()\n    a.reverse()\n    a = a[:m]\n    a.sort()\n    a.reverse()\n    a = a[:m]\n    a.sort()\n    a.reverse()\n    a = a[:m]\n    a.sort()\n    a.reverse()\n    a = a[:m]\n    a.sort()\n    a.reverse()\n    a = a[:m]\n    a.sort()\n    a.reverse()\n    a = a[:m]\n    a.sort()\n    a.reverse()\n    a ="
    },
    {
        "number": 2093,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] > a[j]:\n                count += 1\n    return str(count)"
    },
    {
        "number": 2094,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    h = list(map(int, stdin.split()))\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:k]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:k]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:k]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:k]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:k]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:k]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:k]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:k]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:k]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:k]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:k]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:k]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:k]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:k]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:k]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:k]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:k]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:k]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:k]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:k]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:k]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:k]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:k]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:k]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:k]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:k]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:k]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()\n    h.reverse()\n    h = h[:k]\n    h.sort()\n    h.reverse()\n    h = h[:n]\n    h.sort()"
    },
    {
        "number": 2095,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [list(map(int, stdin.readline().split())) for _ in range(n)]\n    good = 0\n    for i in range(n):\n        for j in range(n):\n            if a[i][j] == 1:\n                if i == j:\n                    good += 1\n                elif a[i][j] == 2:\n                    if i == j - 1 or i == j + 1:\n                        good += 1\n                elif a[i][j] == 3:\n                    if i == j - 1 or i == j + 1 or i == j:\n                        good += 1\n    return str(good) + '\\n' +''.join(map(str, range(good)))\n\nassert(solution('''3\n-1 0 0\n0 -1 1\n0 2 -1''') == '2\\n1 3\\n')\nassert(solution('''4\n-1 3 3 3\n3 -1 3 3\n3 3 -1 3\n3 3 3 -1''') == '0\\n0 1 2 3\\n')\nassert(solution('''5\n-1 3 3 3 3\n3 -1 3 3 3\n3 3 -1 3 3\n3 3 3 -1 3\n3 3 3 3 -1''') == '0\\n0 1 2 3 4\\n')\nassert(solution('''6\n-1 3 3 3 3 3\n3 -1 3 3 3 3\n3 3 -1 3 3 3\n3 3 3 -1 3 3\n3 3 3 3 -1 3\n3 3 3 3 3 -1''') == '0\\n0 1 2 3 4 5\\n')\nassert(solution('''7\n-1 3 3 3 3 3 3\n3 -1 3 3 3 3 3\n3 3 -1 3 3 3 3\n3 3 3 -1 3 3 3\n3 3 3 3 -1 3 3\n3 3 3 3 3 -1 3\n3 3 3 3 3 3 -1''') == '0\\n0 1 2 3 4 5 6\\n')\nassert(solution('''8\n-1 3 3 3 3 3 3 3\n3 -1 3 3 3 3 3 3\n3 3 -1 3 3 3 3 3\n3 3 3 -1 3 3 3 3\n3 3 3 3 -1 3 3 3\n3 3 3 3 3 -1 3 3\n3 3 3 3 3 3 -1 3\n3 3 3 3 3 3 3 -1''') == '0\\n0 1 2 3 4 5 6 7\\n')\nassert(solution('''9\n-1 3 3 3 3 3 3 3 3\n3 -1 3 3 3 3 3 3 3\n3 3 -1 3 3 3 3 3 3\n3 3 3 -1 3 3 3 3 3\n3 3 3 3 -1 3 3 3 3\n3 3 3 3 3 -1 3 3 3\n3 3 3 3 3 3 -1 3 3\n3 3 3 3 3 3 3 -1 3\n3 3 3 3 3 3 3 3 -1''') == '0\\n0 1 2 3 4 5 6 7 8 9\\n')\nassert(solution('''10\n-1 3 3 3 3 3 3 3 3 3\n3 -1 3 3 3 3 3 3 3 3\n3 3 -1 3 3 3 3 3 3 3\n3 3 3 -1 3 3 3 3 3 3\n3 3 3 3 -1 3 3 3 3 3\n3 3 3 3 3 -1 3 3 3 3\n3 3 3 3 3 3 -1 3 3 3\n3 3 3 3 3 3 3 -1 3 3\n3 3 3 3 3 3 3 3 -1 3\n3 3 3 3 3 3 3 3 3 -1''') == '0\\n0 1 2 3 4 5 6 7 8 9 10\\n')\nassert(solution('''11\n-1 3 3 3 3 3 3 3 3 3 3\n3 -1 3 3 3 3 3 3 3 3 3\n3 3 -1 3 3 3 3 3 3 3 3\n3 3 3 -1 3 3 3 3 3 3 3\n3 3 3 3 -1 3 3 3 3 3 3\n3 3 3 3 3 -1 3 3 3 3 3\n3 3 3 3 3 3 -1 3 3 3 3\n3 3 3 3 3 3 3 -1 3 3 3\n3 3 3 3 3 3 3 3 -1 3\n3 3 3 3 3 3 3 3 3 -1''') == '0\\n0 1 2 3 4 5 6 7 8 9 10 11\\n')\nassert(solution('''12\n-1 3 3 3 3 3 3 3 3 3 3\n3 -1 3 3 3 3 3 3 3 3 3\n3 3 -1 3 3 3 3 3 3 3 3\n3 3 3 -1 3 3 3 3 3 3 3\n3 3 3 3 -1 3 3 3 3 3 3\n3 3 3 3 3 -1 3 3 3 3 3\n3 3 3 3 3 3 -1 3 3 3 3\n3 3 3 3 3 3 3 -1 3 3 3\n3 3 3 3 3 3 3 3 -1 3\n3 3 3 3 3 3 3 3 3 -1''') == '0\\n0 1 2 3 4 5 6 7 8 9 10 11 12\\n')\nassert(solution('''13\n-1 3 3 3 3 3 3 3 3 3 3\n3 -1 3 3 3 3 3 3 3 3 3\n3 3 -1 3 3 3 3 3 3 3 3\n3 3 3 -1 3 3 3 3 3 3 3\n3 3 3 3 -1 3 3 3 3 3 3\n3 3 3 3 3 -1 3 3 3 3 3\n3 3 3 3 3 3 -1 3 3 3 3\n3 3 3 3 3 3 3 -1 3 3 3\n3 3 3 3 3 3 3 3 -1 3\n3 3 3 3 3 3 3 3 3 -1''') == '0\\n0 1 2 3 4 5 6 7 8 9 10 11 12 13\\n')\nassert(solution('''14\n-1 3 3 3 3 3 3 3 3 3 3\n3 -1 3 3 3 3 3 3 3 3 3\n3 3 -1 3 3 3 3 3 3 3 3\n3 3 3 -1 3 3 3 3 3 3 3\n3 3 3 3 -1 3 3 3 3 3 3\n3 3 3 3 3 -1 3 3 3 3 3\n3 3 3 3 3 3 -1 3 3 3 3\n3 3 3 3 3 3 3 -1 3 3 3\n3 3 3 3 3 3 3 3 -1 3\n3 3 3 3 3 3 3 3 3 -1''') == '0\\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14\\n')\nassert(solution('''15\n-1 3 3 3 3 3 3 3 3 3 3\n3 -1 3 3 3 3 3"
    },
    {
        "number": 2096,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    cubes = [int(x) for x in stdin.readline().split()]\n    cubes.sort()\n    cubes.reverse()\n    heaps = [cubes[i:i + n] for i in range(0, len(cubes), n)]\n    heaps.sort(key=len)\n    heaps.reverse()\n    heaps = [str(x) for x in heaps]\n    heaps =''.join(heaps)\n    return heaps"
    },
    {
        "number": 2097,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    s = 0\n    p = 1\n    for i in a:\n        s += i\n        p *= i\n    if s == 0:\n        return str(0)\n    if p == 0:\n        return str(0)\n    return str(min(s, p))"
    },
    {
        "number": 2098,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    edges = [tuple(map(int, line.split())) for line in stdin.readlines()]\n    edges = sorted(edges)\n    if not is_tree(edges, n):\n        return \"NO\"\n    return \"YES\\n\" + \"\\n\".join(map(lambda x: str(x[0]) + \" \" + str(x[1]), edges))\n\ndef"
    },
    {
        "number": 2099,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, t = [int(x) for x in stdin.split()]\n    requests = [tuple(int(x) for x in stdin.split(':')) for _ in range(n)]\n    requests.sort()\n    \n    # get the time intervals for each request\n    intervals = []\n    for i in range(n):\n        intervals.append(tuple(int(x) for x in stdin.split(':')))\n    \n    # sort the intervals by the start time\n    intervals.sort(key=lambda x: x[0])\n    \n    # get the unique users\n    users = set()\n    for i in range(n):\n        start, end = intervals[i]\n        for j in range(i + 1, n):\n            start2, end2 = intervals[j]\n            if start <= start2 and end >= end2:\n                users.add(i)\n                users.add(j)\n    \n    # get the number of distinct users\n    distinct_users = len(users)\n    \n    # get the number of distinct users\n    if distinct_users > m:\n        return 'No solution'\n    \n    # get the number of distinct users\n    return str(distinct_users)"
    },
    {
        "number": 2100,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    l = [int(x) for x in stdin.readline().split()]\n    r = [int(x) for x in stdin.readline().split()]\n    t = 0\n    for i in range(n):\n        if l[i] == 0:\n            t += r[i]\n        else:\n            t += l[i]\n    return str(t)\n\nassert(solution('''5\n0 1\n1 0\n0 1\n1 1\n0 1''') == '3')\nassert(solution('''5\n0 1\n1 0\n0 1\n1 1\n0 1''') == '3')\nassert(solution('''5\n0 1\n1 0\n0 1\n1 1\n0 1''') == '3')\nassert(solution('''5\n0 1\n1 0\n0 1\n1 1\n0 1''') == '3')\nassert(solution('''5\n0 1\n1 0\n0 1\n1 1\n0 1''') == '3')\nassert(solution('''5\n0 1\n1 0\n0 1\n1 1\n0 1''') == '3')\nassert(solution('''5\n0 1\n1 0\n0 1\n1 1\n0 1''') == '3')\nassert(solution('''5\n0 1\n1 0\n0 1\n1 1\n0 1''') == '3')\nassert(solution('''5\n0 1\n1 0\n0 1\n1 1\n0 1''') == '3')\nassert(solution('''5\n0 1\n1 0\n0 1\n1 1\n0 1''') == '3')\nassert(solution('''5\n0 1\n1 0\n0 1\n1 1\n0 1''') == '3')\nassert(solution('''5\n0 1\n1 0\n0 1\n1 1\n0 1''') == '3')\nassert(solution('''5\n0 1\n1 0\n0 1\n1 1\n0 1''') == '3')\nassert(solution('''5\n0 1\n1 0\n0 1\n1 1\n0 1''') == '3')\nassert(solution('''5\n0 1\n1 0\n0 1\n1 1\n0 1''') == '3')\nassert(solution('''5\n0 1\n1 0\n0 1\n1 1\n0 1''') == '3')\nassert(solution('''5\n0 1\n1 0\n0 1\n1 1\n0 1''') == '3')\nassert(solution('''5\n0 1\n1 0\n0 1\n1 1\n0 1''') == '3')\nassert(solution('''5\n0 1\n1 0\n0 1\n1 1\n0 1''') == '3')\nassert(solution('''5\n0 1\n1 0\n0 1\n1 1\n0 1''') == '3')\nassert(solution('''5\n0 1\n1 0\n0 1\n1 1\n0 1''') == '3')\nassert(solution('''5\n0 1\n1 0\n0 1\n1 1\n0 1''') == '3')\nassert(solution('''5\n0 1\n1 0\n0 1\n1 1\n0 1''') == '3')\nassert(solution('''5\n0 1\n1 0\n0 1\n1 1\n0 1''') == '3')\nassert(solution('''5\n0 1\n1 0\n0 1\n1 1\n0 1''') == '3')\nassert(solution('''5\n0 1\n1 0\n0 1\n1 1\n0 1''') == '3')\nassert(solution('''5\n0 1\n1 0\n0 1\n1 1\n0 1''') == '3')\nassert(solution('''5\n0 1\n1 0\n0 1\n1 1\n0 1''') == '3')\nassert(solution('''5\n0 1\n1 0\n0 1\n1 1\n0 1''') == '3')\nassert(solution('''5\n0 1\n1 0\n0 1\n1 1\n0 1''') == '3')\nassert(solution('''5\n0 1\n1 0\n0 1\n1 1\n0 1''') == '3')\nassert(solution('''5\n0 1\n1 0\n0 1\n1 1\n0 1''') == '3')\nassert(solution('''5\n0 1\n1 0\n0 1\n1 1\n0 1''') == '3')\nassert(solution('''5\n0 1\n1 0\n0 1\n1 1\n0 1''') == '3')\nassert(solution('''5\n0 1\n1 0\n0 1\n1 1\n0 1''') == '3')\nassert(solution('''5\n0 1\n1 0\n0 1\n1 1\n0 1''') == '3')\nassert(solution('''5\n0 1\n1 0\n0 1\n1 1\n0 1''') == '3')\nassert(solution('''5\n0 1\n1 0\n0 1\n1 1\n0 1''') == '3')\nassert(solution('''5\n0 1\n1 0\n0 1\n1 1\n0 1''') == '3')\nassert(solution('''5\n0 1\n1 0\n0 1\n1 1\n0 1''') == '3')\nassert(solution('''5\n0 1\n1 0\n0 1\n1 1\n0 1''') == '3')\nassert(solution('''5\n0 1\n1 0\n0 1\n1 1\n0 1''') == '3')\nassert(solution('''5\n0 1\n1 0\n0 1\n1 1\n0 1''') == '3')\nassert(solution('''5\n0 1\n1"
    },
    {
        "number": 2101,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, G, B = [int(x) for x in stdin.split()]\n    r = [int(x) for x in stdin.split()]\n    g = [int(x) for x in stdin.split()]\n    b = [int(x) for x in stdin.split()]\n    r.sort()\n    g.sort()\n    b.sort()\n    r.reverse()\n    g.reverse()\n    b.reverse()\n    r_max = r[0]\n    g_max = g[0]\n    b_max = b[0]\n    r_sum = 0\n    g_sum = 0\n    b_sum = 0\n    for i in range(R):\n        r_sum += r[i] * r_max\n        g_sum += g[i] * g_max\n        b_sum += b[i] * b_max\n        r_max -= 1\n        g_max -= 1\n        b_max -= 1\n    return str(max(r_sum, g_sum, b_sum))"
    },
    {
        "number": 2102,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    strings = [int(x) for x in stdin.split()]\n    notes = [int(x) for x in stdin.split()]\n    frets = [0] * 6\n    for i in range(6):\n        frets[i] = strings[i]\n        for j in range(1, notes[i] + 1):\n            frets[i] += j\n    return str(max(frets) - min(frets))"
    },
    {
        "number": 2103,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = [0] * n\n    for i in range(n):\n        b[i] = a[i]\n        for j in range(i + 1, n):\n            if a[i] > a[j]:\n                b[i] = a[j]\n    return''.join(map(str, b))"
    },
    {
        "number": 2104,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l, r = [int(x) for x in stdin.split()]\n    if l == r:\n        return \"NO\"\n    if (r - l + 1) % 2 == 0:\n        return \"NO\"\n    return \"YES\""
    },
    {
        "number": 2105,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 2106,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, k = [int(x) for x in stdin.split()]\n    d = [int(x) for x in stdin.split()]\n    s = [int(x) for x in stdin.split()]\n    return str(solution_old(m, k, d, s))\n\ndef"
    },
    {
        "number": 2107,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k, s = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    q = [int(x) for x in stdin.split()]\n    a = [a[i:i + m] for i in range(0, len(a), m)]\n    q = [q[i:i + m] for i in range(0, len(q), m)]\n    a = [x[::-1] for x in a]\n    q = [x[::-1] for x in q]\n    a = [x[::-1] for x in a]\n    q = [x[::-1] for x in q]\n    a = [x[::-1] for x in a]\n    q = [x[::-1] for x in q]\n    a = [x[::-1] for x in a]\n    q = [x[::-1] for x in q]\n    a = [x[::-1] for x in a]\n    q = [x[::-1] for x in q]\n    a = [x[::-1] for x in a]\n    q = [x[::-1] for x in q]\n    a = [x[::-1] for x in a]\n    q = [x[::-1] for x in q]\n    a = [x[::-1] for x in a]\n    q = [x[::-1] for x in q]\n    a = [x[::-1] for x in a]\n    q = [x[::-1] for x in q]\n    a = [x[::-1] for x in a]\n    q = [x[::-1] for x in q]\n    a = [x[::-1] for x in a]\n    q = [x[::-1] for x in q]\n    a = [x[::-1] for x in a]\n    q = [x[::-1] for x in q]\n    a = [x[::-1] for x in a]\n    q = [x[::-1] for x in q]\n    a = [x[::-1] for x in a]\n    q = [x[::-1] for x in q]\n    a = [x[::-1] for x in a]\n    q = [x[::-1] for x in q]\n    a = [x[::-1] for x in a]\n    q = [x[::-1] for x in q]\n    a = [x[::-1] for x in a]\n    q = [x[::-1] for x in q]\n    a = [x[::-1] for x in a]\n    q = [x[::-1] for x in q]\n    a = [x[::-1] for x in a]\n    q = [x[::-1] for x in q]\n    a = [x[::-1] for x in a]\n    q = [x[::-1] for x in q]\n    a = [x[::-1] for x in a]\n    q = [x[::-1] for x in q]\n    a = [x[::-1] for x in a]\n    q = [x[::-1] for x in q]\n    a = [x[::-1] for x in a]\n    q = [x[::-1] for x in q]\n    a = [x[::-1] for x in a]\n    q = [x[::-1] for x in q]\n    a = [x[::-1] for x in a]\n    q = [x[::-1] for x in q]\n    a = [x[::-1] for x in a]\n    q = [x[::-1] for x in q]\n    a = [x[::-1] for x in a]\n    q = [x[::-1] for x in q]\n    a = [x[::-1] for x in a]\n    q = [x[::-1] for x in q]\n    a = [x[::-1] for x in a]\n    q = [x[::-1] for x in q]\n    a = [x[::-1] for x in a]\n    q = [x[::-1] for x in q]\n    a = [x[::-1] for x in a]\n    q = [x[::-1] for x in q]\n    a = [x[::-1] for x in a]\n    q = [x[::-1] for x in q]\n    a = [x[::-1] for x in a]\n    q = [x[::-1] for x in q]\n    a = [x[::-1] for x in a]\n    q = [x[::-1] for x in q]\n    a = [x[::-1] for x in a]\n    q = [x[::-1] for x in q]\n    a = [x[::-1] for x in a]\n    q = [x[::-1] for x in q]\n    a = [x[::-1] for x in a]\n    q = [x[::-1] for x in q]\n    a = [x[::-1] for x in a]\n    q = [x[::-1] for x in q]\n    a = [x[::-1] for x in a]\n    q = [x[::-1] for x in q]\n    a = [x[::-1] for x in a]"
    },
    {
        "number": 2108,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    n1, n2, n3 = map(int, stdin.split())\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v = map(int, stdin.split())\n        graph[u].append(v)\n        graph[v].append(u)\n    \n    col_1, col_2, col_3 = 0, 0, 0\n    for i in range(n):\n        if i in graph[i]:\n            col_1 += 1\n        if i + 1 in graph[i]:\n            col_2 += 1\n        if i + 2 in graph[i]:\n            col_3 += 1\n    \n    if col_1!= n1 or col_2!= n2 or col_3!= n3:\n        return \"NO\"\n    \n    labels = [0] * n\n    for i in range(n):\n        if i in graph[i]:\n            labels[i] = 1\n        if i + 1 in graph[i]:\n            labels[i + 1] = 2\n        if i + 2 in graph[i]:\n            labels[i + 2] = 3\n    \n    return \"YES\\n\" + \"\".join(map(str, labels))"
    },
    {
        "number": 2109,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = [int(x) for x in stdin.readline().split()]\n    arr.sort()\n    n_1 = 0\n    n_2 = 0\n    n_3 = 0\n    for i in range(n):\n        if arr[i] < 0:\n            n_1 += 1\n        elif arr[i] > 0:\n            n_2 += 1\n        else:\n            n_3 += 1\n    print(n_1)\n    print(*arr[:n_1])\n    print(n_2)\n    print(*arr[n_1:n_1+n_2])\n    print(n_3)\n    print(*arr[n_1+n_2:])"
    },
    {
        "number": 2110,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2111,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = [int(x) for x in stdin.split()]\n    chocolates = [[0] * n for _ in range(n)]\n    for _ in range(q):\n        x, y, direction = [int(x) for x in stdin.split()]\n        if direction == 'L':\n            for i in range(x, y):\n                chocolates[i][y - 1] = chocolates[i][y - 2] + 1\n        else:\n            for i in range(x, y):\n                chocolates[x - 1][i] = chocolates[x - 2][i] + 1\n    for row in chocolates:\n        print(' '.join(str(x) for x in row))\n    return ''"
    },
    {
        "number": 2112,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    return str(solution_naive(a, b))\n\ndef"
    },
    {
        "number": 2113,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    edges = [tuple(map(int, line.split())) for line in stdin.splitlines()[1:]]\n    edges.sort(key=lambda x: x[0])\n    \n    def is_bipartite(edges: List[Tuple[int, int]]) -> bool:\n        n = len(edges)\n        colors = [0] * n\n        for i in range(n):\n            if colors[i] == 0:\n                colors[i] = 1\n                for j in range(i + 1, n):\n                    if colors[j] == 0 and (i, j) in edges:\n                        colors[j] = 1 - colors[i]\n                        break\n        return all(colors)\n    \n    def add_edge(edges: List[Tuple[int, int]], i: int, j: int) -> None:\n        edges.append((i, j))\n        edges.sort(key=lambda x: x[0])\n    \n    def remove_edge(edges: List[Tuple[int, int]], i: int, j: int) -> None:\n        edges.remove((i, j))\n        edges.sort(key=lambda x: x[0])\n    \n    def find_cycle(edges: List[Tuple[int, int]]) -> bool:\n        n = len(edges)\n        colors = [0] * n\n        for i in range(n):\n            if colors[i] == 0:\n                colors[i] = 1\n                for j in range(i + 1, n):\n                    if colors[j] == 0 and (i, j) in edges:\n                        colors[j] = 1 - colors[i]\n                        break\n        return any(colors)\n    \n    def find_cycle_helper(edges: List[Tuple[int, int]], i: int, colors: List[int]) -> bool:\n        colors[i] = 1\n        for j in range(i + 1, len(edges)):\n            if colors[j] == 0 and (i, j) in edges:\n                colors[j] = 1 - colors[i]\n                if find_cycle_helper(edges, j, colors):\n                    return True\n        colors[i] = 0\n        return False\n    \n    def find_cycle_helper2(edges: List[Tuple[int, int]], i: int, colors: List[int]) -> bool:\n        colors[i] = 1\n        for j in range(i + 1, len(edges)):\n            if colors[j] == 0 and (i, j) in edges:\n                colors[j] = 1 - colors[i]\n                if find_cycle_helper2(edges, j, colors):\n                    return True\n        colors[i] = 0\n        return False\n    \n    def find_cycle_helper3(edges: List[Tuple[int, int]], i: int, colors: List[int]) -> bool:\n        colors[i] = 1\n        for j in range(i + 1, len(edges)):\n            if colors[j] == 0 and (i, j) in edges:\n                colors[j] = 1 - colors[i]\n                if find_cycle_helper3(edges, j, colors):\n                    return True\n        colors[i] = 0\n        return False\n    \n    def find_cycle_helper4(edges: List[Tuple[int, int]], i: int, colors: List[int]) -> bool:\n        colors[i] = 1\n        for j in range(i + 1, len(edges)):\n            if colors[j] == 0 and (i, j) in edges:\n                colors[j] = 1 - colors[i]\n                if find_cycle_helper4(edges, j, colors):\n                    return True\n        colors[i] = 0\n        return False\n    \n    def find_cycle_helper5(edges: List[Tuple[int, int]], i: int, colors: List[int]) -> bool:\n        colors[i] = 1\n        for j in range(i + 1, len(edges)):\n            if colors[j] == 0 and (i, j) in edges:\n                colors[j] = 1 - colors[i]\n                if find_cycle_helper5(edges, j, colors):\n                    return True\n        colors[i] = 0\n        return False\n    \n    def find_cycle_helper6(edges: List[Tuple[int, int]], i: int, colors: List[int]) -> bool:\n        colors[i] = 1\n        for j in range(i + 1, len(edges)):\n            if colors[j] == 0 and (i, j) in edges:\n                colors[j] = 1 - colors[i]\n                if find_cycle_helper6(edges, j, colors):\n                    return True\n        colors[i] = 0\n        return False\n    \n    def find_cycle_helper7(edges: List[Tuple[int, int]], i: int, colors: List[int]) -> bool:\n        colors[i] = 1\n        for j in range(i + 1, len(edges)):\n            if colors[j] == 0 and (i, j) in edges:\n                colors[j] = 1 - colors[i]\n                if find_cycle_helper7(edges, j, colors):\n                    return True\n        colors[i] = 0\n        return False\n    \n    def find_cycle_helper8(edges: List[Tuple[int, int]], i: int, colors: List[int]) -> bool:\n        colors[i] = 1\n        for j in range(i + 1, len(edges)):\n            if colors[j] == 0 and (i, j) in edges:\n                colors[j] = 1 - colors[i]\n                if find_cycle_helper8(edges, j, colors):\n                    return True\n        colors[i] = 0\n        return False\n    \n    def find_cycle_helper9(edges: List[Tuple[int, int]], i:"
    },
    {
        "number": 2114,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1 or n > 500:\n        return -1\n    return''.join(map(str, range(1, n ** 2 + 1)))\n\nprint(solution(input()))\n"
    },
    {
        "number": 2115,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    k = 0\n    for i in range(n):\n        if i == 0:\n            if a[i] == a[i+1]:\n                k += 1\n        elif i == n-1:\n            if a[i] == a[i-1]:\n                k += 1\n        else:\n            if a[i] == a[i-1] and a[i] == a[i+1]:\n                k += 1\n    return str(k) + '\\n' +''.join(map(str, a))"
    },
    {
        "number": 2116,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    positions = [int(x) for x in stdin.split()]\n    orders = [int(x) for x in stdin.split()]\n    positions = [0] + positions\n    orders = [0] + orders\n    time = 0\n    for i in range(1, n + 1):\n        time += positions[orders[i]]\n        positions[orders[i]] += 1\n    return str(time)"
    },
    {
        "number": 2117,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    planets = [int(x) for x in stdin.split()]\n    planets.sort()\n    planets.append(planets[-1] + 1)\n    planets.insert(0, 0)\n    planets.append(planets[-1] + 1)\n    planets.insert(0, 0)\n    planets.append(planets[-1] + 1)\n    planets.insert(0, 0)\n    planets.append(planets[-1] + 1)\n    planets.insert(0, 0)\n    planets.append(planets[-1] + 1)\n    planets.insert(0, 0)\n    planets.append(planets[-1] + 1)\n    planets.insert(0, 0)\n    planets.append(planets[-1] + 1)\n    planets.insert(0, 0)\n    planets.append(planets[-1] + 1)\n    planets.insert(0, 0)\n    planets.append(planets[-1] + 1)\n    planets.insert(0, 0)\n    planets.append(planets[-1] + 1)\n    planets.insert(0, 0)\n    planets.append(planets[-1] + 1)\n    planets.insert(0, 0)\n    planets.append(planets[-1] + 1)\n    planets.insert(0, 0)\n    planets.append(planets[-1] + 1)\n    planets.insert(0, 0)\n    planets.append(planets[-1] + 1)\n    planets.insert(0, 0)\n    planets.append(planets[-1] + 1)\n    planets.insert(0, 0)\n    planets.append(planets[-1] + 1)\n    planets.insert(0, 0)\n    planets.append(planets[-1] + 1)\n    planets.insert(0, 0)\n    planets.append(planets[-1] + 1)\n    planets.insert(0, 0)\n    planets.append(planets[-1] + 1)\n    planets.insert(0, 0)\n    planets.append(planets[-1] + 1)\n    planets.insert(0, 0)\n    planets.append(planets[-1] + 1)\n    planets.insert(0, 0)\n    planets.append(planets[-1] + 1)\n    planets.insert(0, 0)\n    planets.append(planets[-1] + 1)\n    planets.insert(0, 0)\n    planets.append(planets[-1] + 1)\n    planets.insert(0, 0)\n    planets.append(planets[-1] + 1)\n    planets.insert(0, 0)\n    planets.append(planets[-1] + 1)\n    planets.insert(0, 0)\n    planets.append(planets[-1] + 1)\n    planets.insert(0, 0)\n    planets.append(planets[-1] + 1)\n    planets.insert(0, 0)\n    planets.append(planets[-1] + 1)\n    planets.insert(0, 0)\n    planets.append(planets[-1] + 1)\n    planets.insert(0, 0)\n    planets.append(planets[-1] + 1)\n    planets.insert(0, 0)\n    planets.append(planets[-1] + 1)\n    planets.insert(0, 0)\n    planets.append(planets[-1] + 1)\n    planets.insert(0, 0)\n    planets.append(planets[-1] + 1)\n    planets.insert(0, 0)\n    planets.append(planets[-1] + 1)\n    planets.insert(0, 0)\n    planets.append(planets[-1] + 1)\n    planets.insert(0, 0)\n    planets.append(planets[-1] + 1)\n    planets.insert(0, 0)\n    planets.append(planets[-1] + 1)\n    planets.insert(0, 0)\n    planets.append(planets[-1] + 1)\n    planets.insert(0, 0)\n    planets.append(planets[-1] + 1)\n    planets.insert(0, 0)\n    planets.append(planets[-1] + 1)\n    planets.insert(0, 0)\n    planets.append(planets[-1] + 1)\n    planets.insert(0, 0)\n    planets.append(planets[-1] + 1)\n    planets.insert(0, 0)\n    planets.append(planets[-1] + 1)\n    planets.insert(0, 0)\n    planets.append(planets[-1] + 1)\n    planets.insert(0, 0)\n    planets.append(planets[-1] + 1)\n    planets.insert(0, 0)\n    planets.append(planets[-1] + 1)\n    planets.insert(0, 0)\n    planets.append(planets[-1] + 1)\n    planets.insert(0, 0)\n    planets.append(planets[-1] + 1)\n    planets.insert(0, 0)\n    planets.append(planets[-1] + 1)\n    planets.insert(0, 0)\n    planets.append(planets[-1] + 1)\n    planets.insert(0, 0)\n    planets.append(planets[-1] + 1)\n    planets.insert(0, 0)\n    planets.append(planets[-1] + 1)\n    planets.insert(0, 0)\n    planets.append(planets[-1] + 1)\n    planets.insert(0, 0)\n    planets.append(planets[-1] + 1)\n    planets.insert(0, 0)\n    planets.append(planets[-1] + 1)\n    planets.insert(0, 0)\n    planets.append(planets[-1] + 1)\n    planets.insert(0, 0)\n    planets.append(planets[-1] + 1)"
    },
    {
        "number": 2118,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = [i for i in range(1, n + 1)]\n    cnt = 0\n    while True:\n        mid = int(n / 2)\n        if cnt == k:\n            break\n        if is_sorted(a, 0, n - 1):\n            cnt += 1\n            if cnt == k:\n                break\n        else:\n            a = merge(a, 0, n - 1)\n            cnt += 1\n            if cnt == k:\n                break\n    return''.join(map(str, a))\n\ndef"
    },
    {
        "number": 2119,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    l = int(stdin)\n    r = int(stdin)\n    return str(solution_aux(a, l, r))\n\ndef"
    },
    {
        "number": 2120,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    v = [int(x) for x in stdin.split()]\n    r = [int(x) for x in stdin.split()]\n    r.sort()\n    r.reverse()\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]\n    r = r[:n]"
    },
    {
        "number": 2121,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    a.reverse()\n    return str(a[k - 1])\n\nassert(solution('''5 3\n3 6 1 4 2\n1 2\n2 4\n2 5\n1 3''') == '3')\nassert(solution('''4 2\n1 5 5 5\n1 2\n1 3\n1 4\n''') == '1')\nassert(solution('''4 2\n1 5 5 5\n1 2\n1 3\n1 4\n''') == '1')\nassert(solution('''4 2\n1 5 5 5\n1 2\n1 3\n1 4\n''') == '1')\nassert(solution('''4 2\n1 5 5 5\n1 2\n1 3\n1 4\n''') == '1')\nassert(solution('''4 2\n1 5 5 5\n1 2\n1 3\n1 4\n''') == '1')\nassert(solution('''4 2\n1 5 5 5\n1 2\n1 3\n1 4\n''') == '1')\nassert(solution('''4 2\n1 5 5 5\n1 2\n1 3\n1 4\n''') == '1')\nassert(solution('''4 2\n1 5 5 5\n1 2\n1 3\n1 4\n''') == '1')\nassert(solution('''4 2\n1 5 5 5\n1 2\n1 3\n1 4\n''') == '1')\nassert(solution('''4 2\n1 5 5 5\n1 2\n1 3\n1 4\n''') == '1')\nassert(solution('''4 2\n1 5 5 5\n1 2\n1 3\n1 4\n''') == '1')\nassert(solution('''4 2\n1 5 5 5\n1 2\n1 3\n1 4\n''') == '1')\nassert(solution('''4 2\n1 5 5 5\n1 2\n1 3\n1 4\n''') == '1')\nassert(solution('''4 2\n1 5 5 5\n1 2\n1 3\n1 4\n''') == '1')\nassert(solution('''4 2\n1 5 5 5\n1 2\n1 3\n1 4\n''') == '1')\nassert(solution('''4 2\n1 5 5 5\n1 2\n1 3\n1 4\n''') == '1')\nassert(solution('''4 2\n1 5 5 5\n1 2\n1 3\n1 4\n''') == '1')\nassert(solution('''4 2\n1 5 5 5\n1 2\n1 3\n1 4\n''') == '1')\nassert(solution('''4 2\n1 5 5 5\n1 2\n1 3\n1 4\n''') == '1')\nassert(solution('''4 2\n1 5 5 5\n1 2\n1 3\n1 4\n''') == '1')\nassert(solution('''4 2\n1 5 5 5\n1 2\n1 3\n1 4\n''') == '1')\nassert(solution('''4 2\n1 5 5 5\n1 2\n1 3\n1 4\n''') == '1')\nassert(solution('''4 2\n1 5 5 5\n1 2\n1 3\n1 4\n''') == '1')\nassert(solution('''4 2\n1 5 5 5\n1 2\n1 3\n1 4\n''') == '1')\nassert(solution('''4 2\n1 5 5 5\n1 2\n1 3\n1 4\n''') == '1')\nassert(solution('''4 2\n1 5 5 5\n1 2\n1 3\n1 4\n''') == '1')\nassert(solution('''4 2\n1 5 5 5\n1 2\n1 3\n1 4\n''') == '1')\nassert(solution('''4 2\n1 5 5 5\n1 2\n1 3\n1 4\n''') == '1')\nassert(solution('''4 2\n1 5 5 5\n1 2\n1 3\n1 4\n''') == '1')\nassert(solution('''4 2\n1 5 5 5\n1 2\n1 3\n1 4\n''') == '1')\nassert(solution('''4 2\n1 5 5 5\n1 2\n1 3\n1 4\n''') == '1')\nassert(solution('''4 2\n1 5 5 5\n1 2\n1 3\n1 4\n''') == '1')\nassert(solution('''4 2\n1 5 5 5\n1 2\n1 3\n1 4\n''') == '1')\nassert(solution('''4 2\n1 5 5 5\n1 2\n1 3\n1 4\n''') == '1')\nassert(solution('''4 2\n1 5 5 5\n1 2\n1 3\n1 4\n''') == '1')\nassert(solution('''4 2\n1 5 5 5\n1 2\n1 3\n1 4\n''') == '1')\nassert(solution('''4 2\n1 5 5 5\n1 2\n1 3\n1 4\n''') == '1')\nassert(solution('''4 2\n1 5 5 5\n1 2\n1 3\n1 4\n''') == '1')\nassert(solution('''4 2\n1 5 5 5\n1 2\n1 3\n1 4\n''') == '1')\nassert(solution('''4 2\n1 5 5 5\n1 2\n1 3\n1 4\n''') == '1')\nassert(solution('''4 2\n1 5 5 5\n1 2\n1 3\n1 4\n''') == '1')\nassert(solution('''4 2\n1 5 5 5\n"
    },
    {
        "number": 2122,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    if n == 1:\n        return '1'\n    if n == 2:\n        return '2'\n    if n == 3:\n        return '3'\n    if n == 4:\n        return '4'\n    if n == 5:\n        return '5'\n    if n == 6:\n        return '6'\n    if n == 7:\n        return '7'\n    if n == 8:\n        return '8'\n    if n == 9:\n        return '9'\n    if n == 10:\n        return '10'\n    if n == 11:\n        return '11'\n    if n == 12:\n        return '12'\n    if n == 13:\n        return '13'\n    if n == 14:\n        return '14'\n    if n == 15:\n        return '15'\n    if n == 16:\n        return '16'\n    if n == 17:\n        return '17'\n    if n == 18:\n        return '18'\n    if n == 19:\n        return '19'\n    if n == 20:\n        return '20'\n    if n == 21:\n        return '21'\n    if n == 22:\n        return '22'\n    if n == 23:\n        return '23'\n    if n == 24:\n        return '24'\n    if n == 25:\n        return '25'\n    if n == 26:\n        return '26'\n    if n == 27:\n        return '27'\n    if n == 28:\n        return '28'\n    if n == 29:\n        return '29'\n    if n == 30:\n        return '30'\n    if n == 31:\n        return '31'\n    if n == 32:\n        return '32'\n    if n == 33:\n        return '33'\n    if n == 34:\n        return '34'\n    if n == 35:\n        return '35'\n    if n == 36:\n        return '36'\n    if n == 37:\n        return '37'\n    if n == 38:\n        return '38'\n    if n == 39:\n        return '39'\n    if n == 40:\n        return '40'\n    if n == 41:\n        return '41'\n    if n == 42:\n        return '42'\n    if n == 43:\n        return '43'\n    if n == 44:\n        return '44'\n    if n == 45:\n        return '45'\n    if n == 46:\n        return '46'\n    if n == 47:\n        return '47'\n    if n == 48:\n        return '48'\n    if n == 49:\n        return '49'\n    if n == 50:\n        return '50'\n    if n == 51:\n        return '51'\n    if n == 52:\n        return '52'\n    if n == 53:\n        return '53'\n    if n == 54:\n        return '54'\n    if n == 55:\n        return '55'\n    if n == 56:\n        return '56'\n    if n == 57:\n        return '57'\n    if n == 58:\n        return '58'\n    if n == 59:\n        return '59'\n    if n == 60:\n        return '60'\n    if n == 61:\n        return '61'\n    if n == 62:\n        return '62'\n    if n == 63:\n        return '63'\n    if n == 64:\n        return '64'\n    if n == 65:\n        return '65'\n    if n == 66:\n        return '66'\n    if n == 67:\n        return '67'\n    if n == 68:\n        return '68'\n    if n == 69:\n        return '69'\n    if n == 70:\n        return '70'\n    if n == 71:\n        return '71'\n    if n == 72:\n        return '72'\n    if n == 73:\n        return '73'\n    if n == 74:\n        return '74'\n    if n == 75:\n        return '75'\n    if n == 76:\n        return '76'\n    if n == 77:\n        return '77'\n    if n == 78:\n        return '78'\n    if n == 79:\n        return '79'\n    if n == 80:\n        return '80'\n    if n == 81:\n        return '81'\n    if n == 82:\n        return '82'\n    if n == 83:\n        return '83'\n    if n == 84:\n        return '84'\n    if n == 85:\n        return '85'\n    if n == 86:\n        return '86'\n    if n == 87:\n        return '87'\n    if n == 88:\n        return '88'\n    if n == 89:\n        return '89'\n    if n == 90:\n        return '90'\n    if n == 91:\n        return '91'\n    if n == 92:\n        return '92'\n    if n == 93:\n        return '93'\n    if n == 94:\n        return '94'\n    if n == 95:\n        return '95'\n    if n == 96:\n        return '96'\n    if n == 97:\n        return '97'\n    if n == 98:\n        return '98'\n    if n == 99:\n        return '99'\n    if n == 100:\n        return '100'\n    if n == 101:\n        return '101'\n    if n == 102:\n        return '102'\n    if n == 103:\n        return '103'\n    if n == 104:\n        return '104'\n    if n == 105:\n        return '105'\n    if n == 106:\n        return '106'\n    if n == 107:\n        return '107'\n    if n == 108:\n        return '108'\n    if n == 109:\n        return '109'\n    if n == 110:\n        return '110'\n    if n == 111:\n        return '111'\n    if n == 112:\n        return '112'\n    if n == 113:\n        return '113'\n    if n == 114:\n        return '114'\n    if n == 115:\n        return '115'\n    if n == 116:\n        return '116'\n    if n == 117:\n        return '117'\n    if n == 118:\n        return '118'\n    if n == 119:\n        return '119'\n    if n == 120:\n        return '120'\n    if n == 121:\n        return '121'\n    if n == 122:\n        return '122'\n    if n == 123:\n        return '123'\n    if n == 124:\n        return '124'\n    if n == 125:\n        return '125'\n    if n == 126:\n        return '126'\n    if n == 127:\n        return '127'\n    if n == 128:\n        return '128'\n    if n == 129:\n        return '129'\n    if n == 130:\n        return '130'\n    if n == 131:\n        return '131'\n    if n == 132:\n        return '132'\n    if n == 133:\n        return '133'\n    if n == 134:\n        return '134'\n    if n == 135:\n        return '135'\n    if n == 136:\n        return '136'\n    if n == 137:\n        return '137'\n    if n == 138:\n        return '138'\n    if n == 139:\n        return '139'\n    if n == 140:\n        return '140'\n    if n == 141:\n        return '141'\n    if n == 142:\n        return '142'\n    if n == 143:\n        return '143'\n    if n == 144:\n        return '144'\n    if n == 145:\n        return '145'\n    if n"
    },
    {
        "number": 2123,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    h = list(map(int, stdin.readline().strip().split()))\n    \n    dp = [0] * (n + 1)\n    dp[0] = 0\n    \n    for i in range(1, n + 1):\n        dp[i] = dp[i - 1] + abs(h[i - 1] - h[i])\n        \n    for i in range(1, n + 1):\n        dp[i] = min(dp[i], dp[i - 1] + 1)\n        \n    return str(dp[n])\n\nassert(solution('''5\n3 4 3 2 4''') == '4')\nassert(solution('''3\n4 4 4''') == '4')\nassert(solution('''3\n4 4 4''') == '4')\nassert(solution('''3\n4 4 4''') == '4')\nassert(solution('''3\n4 4 4''') == '4')\nassert(solution('''3\n4 4 4''') == '4')\nassert(solution('''3\n4 4 4''') == '4')\nassert(solution('''3\n4 4 4''') == '4')\nassert(solution('''3\n4 4 4''') == '4')\nassert(solution('''3\n4 4 4''') == '4')\nassert(solution('''3\n4 4 4''') == '4')\nassert(solution('''3\n4 4 4''') == '4')\nassert(solution('''3\n4 4 4''') == '4')\nassert(solution('''3\n4 4 4''') == '4')\nassert(solution('''3\n4 4 4''') == '4')\nassert(solution('''3\n4 4 4''') == '4')\nassert(solution('''3\n4 4 4''') == '4')\nassert(solution('''3\n4 4 4''') == '4')\nassert(solution('''3\n4 4 4''') == '4')\nassert(solution('''3\n4 4 4''') == '4')\nassert(solution('''3\n4 4 4''') == '4')\nassert(solution('''3\n4 4 4''') == '4')\nassert(solution('''3\n4 4 4''') == '4')\nassert(solution('''3\n4 4 4''') == '4')\nassert(solution('''3\n4 4 4''') == '4')\nassert(solution('''3\n4 4 4''') == '4')\nassert(solution('''3\n4 4 4''') == '4')\nassert(solution('''3\n4 4 4''') == '4')\nassert(solution('''3\n4 4 4''') == '4')\nassert(solution('''3\n4 4 4''') == '4')\nassert(solution('''3\n4 4 4''') == '4')\nassert(solution('''3\n4 4 4''') == '4')\nassert(solution('''3\n4 4 4''') == '4')\nassert(solution('''3\n4 4 4''') == '4')\nassert(solution('''3\n4 4 4''') == '4')\nassert(solution('''3\n4 4 4''') == '4')\nassert(solution('''3\n4 4 4''') == '4')\nassert(solution('''3\n4 4 4''') == '4')\nassert(solution('''3\n4 4 4''') == '4')\nassert(solution('''3\n4 4 4''') == '4')\nassert(solution('''3\n4 4 4''') == '4')\nassert(solution('''3\n4 4 4''') == '4')\nassert(solution('''3\n4 4 4''') == '4')\nassert(solution('''3\n4 4 4''') == '4')\nassert(solution('''3\n4 4 4''') == '4')\nassert(solution('''3\n4 4 4''') == '4')\nassert(solution('''3\n4 4 4''') == '4')\nassert(solution('''3\n4 4 4''') == '4')\nassert(solution('''3\n4 4 4''') == '4')\nassert(solution('''3\n4 4 4''') == '4')\nassert(solution('''3\n4 4 4''') == '4')\nassert(solution('''3\n4 4 4''') == '4')\nassert(solution('''3\n4 4 4''') == '4')\nassert(solution('''3\n4 4 4''') == '4')\nassert(solution('''3\n4 4 4''') == '4')\nassert(solution('''3\n4 4 4''') == '4')\nassert(solution('''3\n4 4 4''') == '4')\nassert(solution('''3\n4 4 4''') == '4')\nassert(solution('''3\n4 4 4''') == '4')\nassert(solution('''3\n4 4 4''') == '4')\nassert(solution('''3\n4 4 4''') == '4')\nassert(solution('''3\n4 4 4''') == '4')\nassert(solution('''3\n4 4 4''') == '4')\nassert(solution('''3\n4 4 4''') == '4')\nassert(solution('''3\n4 4 4''') == '4')\nassert(solution('''3\n4 4 4''') == '4')\nassert(solution('''3\n4 4 4''') == '4')\nassert(solution('''3\n4 4 4''') == '4')\nassert(solution('''3\n4 4 4''') == '4')\nassert(solution('''3\n4 4 4''') == '4')\nassert(solution('''3\n4 4 4''') == '4')\nassert(solution('''3\n4 4 4''') == '4')\nassert(solution('''3\n4 4 4''') == '4')\nassert(solution('''3\n4 4 4''') == '4')\nassert(solution('''3\n4 4 4''') == '4')\nassert(solution('''3\n4 4 4''') == '4')\nassert(solution('''3\n4"
    },
    {
        "number": 2124,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2125,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    rows = [stdin[i:i+m] for i in range(0, n*m, m)]\n    cols = zip(*rows)\n    return str(len(set(rows) ^ set(cols)))"
    },
    {
        "number": 2126,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, h = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    b = [int(x) for x in stdin.split()]\n    t = [int(x) for x in stdin.split()]\n    \n    # build the matrix\n    matrix = [[0 for _ in range(m)] for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if t[i][j] == 1:\n                matrix[i][j] = max(a[j], b[j])\n    \n    # find the max height\n    max_height = 0\n    for i in range(n):\n        max_height = max(max_height, max(matrix[i]))\n    \n    # print the result\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == max_height:\n                print(1, end=\" \")\n            else:\n                print(0, end=\" \")\n        print()\n    return \"\""
    },
    {
        "number": 2127,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for _ in range(n):\n        x, y = [int(x) for x in stdin.split()]\n        h, w = [int(x) for x in stdin.split()]\n        if x * y <= h * w:\n            print(\"NO\")\n        else:\n            print(\"YES\")\n    return \"\""
    },
    {
        "number": 2128,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    p = list(map(int, stdin.readline().split()))\n    return str(p[0] * p[-1] * (p[-1] + 1) % 998244353)"
    },
    {
        "number": 2129,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    roads = [set() for _ in range(n)]\n    for _ in range(m):\n        u, v = [int(x) for x in stdin.split()]\n        roads[u - 1].add(v - 1)\n        roads[v - 1].add(u - 1)\n    cities = [0] * n\n    for i in range(n):\n        for j in roads[i]:\n            cities[j] += 1\n    max_cities = max(cities)\n    for i in range(n):\n        if cities[i] == max_cities:\n            print(i + 1)\n            for j in roads[i]:\n                print(j + 1, end=' ')\n            print()\n    return ''"
    },
    {
        "number": 2130,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    b = list(map(int, stdin.readline().split()))\n    b.sort()\n    if b[0]!= 1:\n        return \"No\"\n    for i in range(1, n):\n        if b[i]!= b[i - 1] + 1:\n            return \"No\"\n    return \"Yes\""
    },
    {
        "number": 2131,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    edges = [tuple(map(int, line.split())) for line in stdin.readlines()]\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0"
    },
    {
        "number": 2132,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    events = [int(stdin.readline()) for _ in range(n)]\n    speed_limit = int(stdin.readline())\n    overtake_allowed = int(stdin.readline())\n    no_overtake_allowed = int(stdin.readline())\n    no_speed_limit = int(stdin.readline())\n    no_overtake_allowed_count = 0\n    speed_limit_count = 0\n    overtake_allowed_count = 0\n    for event in events:\n        if event == 1:\n            speed_limit_count += 1\n        elif event == 2:\n            overtake_allowed_count += 1\n        elif event == 3:\n            no_speed_limit += 1\n        elif event == 4:\n            no_overtake_allowed_count += 1\n        elif event == 5:\n            no_overtake_allowed += 1\n        elif event == 6:\n            speed_limit += 1\n    if overtake_allowed_count == 0:\n        return str(no_speed_limit)\n    elif no_overtake_allowed_count == 0:\n        return str(no_overtake_allowed)\n    elif speed_limit_count == 0:\n        return str(no_speed_limit)\n    elif overtake_allowed_count == 1:\n        return str(no_overtake_allowed)\n    elif no_speed_limit == 1:\n        return str(no_overtake_allowed)\n    elif no_overtake_allowed_count == 1:\n        return str(no_speed_limit)\n    elif overtake_allowed_count == 2:\n        return str(no_overtake_allowed)\n    elif no_speed_limit == 2:\n        return str(no_overtake_allowed)\n    elif no_overtake_allowed_count == 2:\n        return str(no_speed_limit)\n    elif speed_limit_count == 2:\n        return str(no_overtake_allowed)\n    elif overtake_allowed_count == 3:\n        return str(no_overtake_allowed)\n    elif no_speed_limit == 3:\n        return str(no_overtake_allowed)\n    elif no_overtake_allowed_count == 3:\n        return str(no_speed_limit)\n    elif speed_limit_count == 3:\n        return str(no_overtake_allowed)\n    elif overtake_allowed_count == 4:\n        return str(no_overtake_allowed)\n    elif no_speed_limit == 4:\n        return str(no_overtake_allowed)\n    elif no_overtake_allowed_count == 4:\n        return str(no_speed_limit)\n    elif speed_limit_count == 4:\n        return str(no_overtake_allowed)\n    elif overtake_allowed_count == 5:\n        return str(no_overtake_allowed)\n    elif no_speed_limit == 5:\n        return str(no_overtake_allowed)\n    elif no_overtake_allowed_count == 5:\n        return str(no_speed_limit)\n    elif speed_limit_count == 5:\n        return str(no_overtake_allowed)\n    elif overtake_allowed_count == 6:\n        return str(no_overtake_allowed)\n    elif no_speed_limit == 6:\n        return str(no_overtake_allowed)\n    elif no_overtake_allowed_count == 6:\n        return str(no_speed_limit)\n    elif speed_limit_count == 6:\n        return str(no_overtake_allowed)\n    elif overtake_allowed_count == 7:\n        return str(no_overtake_allowed)\n    elif no_speed_limit == 7:\n        return str(no_overtake_allowed)\n    elif no_overtake_allowed_count == 7:\n        return str(no_speed_limit)\n    elif speed_limit_count == 7:\n        return str(no_overtake_allowed)\n    elif overtake_allowed_count == 8:\n        return str(no_overtake_allowed)\n    elif no_speed_limit == 8:\n        return str(no_overtake_allowed)\n    elif no_overtake_allowed_count == 8:\n        return str(no_speed_limit)\n    elif speed_limit_count == 8:\n        return str(no_overtake_allowed)\n    elif overtake_allowed_count == 9:\n        return str(no_overtake_allowed)\n    elif no_speed_limit == 9:\n        return str(no_overtake_allowed)\n    elif no_overtake_allowed_count == 9:\n        return str(no_speed_limit)\n    elif speed_limit_count == 9:\n        return str(no_overtake_"
    },
    {
        "number": 2133,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    colors = [int(x) for x in stdin.readline().split()]\n    edges = [tuple(map(int, stdin.readline().split())) for _ in range(n - 1)]\n    graph = {i: [] for i in range(n)}\n    for u, v in edges:\n        graph[u].append(v)\n        graph[v].append(u)\n    visited = [False] * n\n    visited[0] = True\n    queue = [0]\n    while queue:\n        u = queue.pop(0)\n        for v in graph[u]:\n            if not visited[v]:\n                visited[v] = True\n                queue.append(v)\n    return ''.join(['1' if colors[i] else '0' for i in range(n)])\n\nassert(solution('''11\n0 0 0 1 1 0 1 0 0 1 1\n1 2\n1 3\n2 4\n2 5\n5 6\n5 7\n3 8\n3 9\n3 10\n
    },
    {
        "number": 2134,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    a.sort()\n    b.sort()\n    a_sum = 0\n    b_sum = 0\n    for i in range(n):\n        a_sum += a[i] * (2 ** i)\n        b_sum += b[i] * (2 ** i)\n    if a_sum < b_sum:\n        return str(b_sum)\n    else:\n        return str(a_sum)\n\nprint(solution(input()))\n"
    },
    {
        "number": 2135,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 2136,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2137,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = [int(x) for x in stdin.split()]\n    ghosts = [Ghost(x, y, 0) for x, y in [tuple(map(int, stdin.split())) for _ in range(n)]]\n    return str(sum(ghost.experience for ghost in ghosts))\n\nGhost.__init__(self, x, y, vx, vy)\nGhost.experience = 0\nGhost.collide(Ghost, Ghost)\nGhost.experience += 1\nGhost.collide(Ghost, Ghost)\nGhost.experience += 1\nGhost.collide(Ghost, Ghost)\nGhost.experience += 1\nGhost.collide(Ghost, Ghost)\nGhost.experience += 1\nGhost.collide(Ghost, Ghost)\nGhost.experience += 1\nGhost.collide(Ghost, Ghost)\nGhost.experience += 1\nGhost.collide(Ghost, Ghost)\nGhost.experience += 1\nGhost.collide(Ghost, Ghost)\nGhost.experience += 1\nGhost.collide(Ghost, Ghost)\nGhost.experience += 1\nGhost.collide(Ghost, Ghost)\nGhost.experience += 1\nGhost.collide(Ghost, Ghost)\nGhost.experience += 1\nGhost.collide(Ghost, Ghost)\nGhost.experience += 1\nGhost.collide(Ghost, Ghost)\nGhost.experience += 1\nGhost.collide(Ghost, Ghost)\nGhost.experience += 1\nGhost.collide(Ghost, Ghost)\nGhost.experience += 1\nGhost.collide(Ghost, Ghost)\nGhost.experience += 1\nGhost.collide(Ghost, Ghost)\nGhost.experience += 1\nGhost.collide(Ghost, Ghost)\nGhost.experience += 1\nGhost.collide(Ghost, Ghost)\nGhost.experience += 1\nGhost.collide(Ghost, Ghost)\nGhost.experience += 1\nGhost.collide(Ghost, Ghost)\nGhost.experience += 1\nGhost.collide(Ghost, Ghost)\nGhost.experience += 1\nGhost.collide(Ghost, Ghost)\nGhost.experience += 1\nGhost.collide(Ghost, Ghost)\nGhost.experience += 1\nGhost.collide(Ghost, Ghost)\nGhost.experience += 1\nGhost.collide(Ghost, Ghost)\nGhost.experience += 1\nGhost.collide(Ghost, Ghost)\nGhost.experience += 1\nGhost.collide(Ghost, Ghost)\nGhost.experience += 1\nGhost.collide(Ghost, Ghost)\nGhost.experience += 1\nGhost.collide(Ghost, Ghost)\nGhost.experience += 1\nGhost.collide(Ghost, Ghost)\nGhost.experience += 1\nGhost.collide(Ghost, Ghost)\nGhost.experience += 1\nGhost.collide(Ghost, Ghost)\nGhost.experience += 1\nGhost.collide(Ghost, Ghost)\nGhost.experience += 1\nGhost.collide(Ghost, Ghost)\nGhost.experience += 1\nGhost.collide(Ghost, Ghost)\nGhost.experience += 1\nGhost.collide(Ghost, Ghost)\nGhost.experience += 1\nGhost.collide(Ghost, Ghost)\nGhost.experience += 1\nGhost.collide(Ghost, Ghost)\nGhost.experience += 1\nGhost.collide(Ghost, Ghost)\nGhost.experience += 1\nGhost.collide(Ghost, Ghost)\nGhost.experience += 1\nGhost.collide(Ghost, Ghost)\nGhost.experience += 1\nGhost.collide(Ghost, Ghost)\nGhost.experience += 1\nGhost.collide(Ghost, Ghost)\nGhost.experience += 1\nGhost.collide(Ghost, Ghost)\nGhost.experience += 1\nGhost.collide(Ghost, Ghost)\nGhost.experience += 1\nGhost.collide(Ghost, Ghost)\nGhost.experience += 1\nGhost.collide(Ghost, Ghost)\nGhost.experience += 1\nGhost.collide(Ghost, Ghost)\nGhost.experience += 1\nGhost.collide(Ghost, Ghost)\nGhost.experience += 1\nGhost.collide(Ghost, Ghost)\nGhost.experience += 1\nGhost.collide(Ghost, Ghost)\nGhost.experience += 1\nGhost.collide(Ghost, Ghost)\nGhost.experience += 1\nGhost.collide(Ghost, Ghost)\nGhost.experience += 1\nGhost.collide(Ghost, Ghost)\nGhost.experience += 1\nGhost.collide(Ghost, Ghost)\nGhost.experience += 1\nGhost.collide(Ghost, Ghost)\nGhost.experience += 1\nGhost.collide(Ghost, Ghost)\nGhost.experience += 1\nGhost.collide(Ghost, Ghost)\nGhost.experience += 1\nGhost.collide(Ghost, Ghost)\nGhost.experience += 1\nGhost.collide(Ghost, Ghost)\nGhost.experience += 1\nGhost.collide(Ghost, Ghost)\nGhost.exper"
    },
    {
        "number": 2138,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    d = list(map(int, stdin.readline().split()))\n    d.sort()\n    m = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if d[i] < d[j]:\n                m += 1\n                print(f'{i + 1} {j + 1}')\n    return m"
    },
    {
        "number": 2139,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(stdin))"
    },
    {
        "number": 2140,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    m = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    res = s[::-1]\n    for i in a:\n        res = res[:i-1] + res[i-1:i+1][::-1] + res[i+1:]\n    return res\n\nassert solution('''abcdef\n1\n2\n''') == 'fbdcea'\nassert solution('''vwxyz\n2\n2 2\n''') == 'vwxyz'\nassert solution('''abcdef\n3\n1 2 3\n''') == 'fbdcea'\nassert solution('''abcdef\n3\n1 2 3\n''') == 'fbdcea'\nassert solution('''abcdef\n3\n1 2 3\n''') == 'fbdcea'\nassert solution('''abcdef\n3\n1 2 3\n''') == 'fbdcea'\nassert solution('''abcdef\n3\n1 2 3\n''') == 'fbdcea'\nassert solution('''abcdef\n3\n1 2 3\n''') == 'fbdcea'\nassert solution('''abcdef\n3\n1 2 3\n''') == 'fbdcea'\nassert solution('''abcdef\n3\n1 2 3\n''') == 'fbdcea'\nassert solution('''abcdef\n3\n1 2 3\n''') == 'fbdcea'\nassert solution('''abcdef\n3\n1 2 3\n''') == 'fbdcea'\nassert solution('''abcdef\n3\n1 2 3\n''') == 'fbdcea'\nassert solution('''abcdef\n3\n1 2 3\n''') == 'fbdcea'\nassert solution('''abcdef\n3\n1 2 3\n''') == 'fbdcea'\nassert solution('''abcdef\n3\n1 2 3\n''') == 'fbdcea'\nassert solution('''abcdef\n3\n1 2 3\n''') == 'fbdcea'\nassert solution('''abcdef\n3\n1 2 3\n''') == 'fbdcea'\nassert solution('''abcdef\n3\n1 2 3\n''') == 'fbdcea'\nassert solution('''abcdef\n3\n1 2 3\n''') == 'fbdcea'\nassert solution('''abcdef\n3\n1 2 3\n''') == 'fbdcea'\nassert solution('''abcdef\n3\n1 2 3\n''') == 'fbdcea'\nassert solution('''abcdef\n3\n1 2 3\n''') == 'fbdcea'\nassert solution('''abcdef\n3\n1 2 3\n''') == 'fbdcea'\nassert solution('''abcdef\n3\n1 2 3\n''') == 'fbdcea'\nassert solution('''abcdef\n3\n1 2 3\n''') == 'fbdcea'\nassert solution('''abcdef\n3\n1 2 3\n''') == 'fbdcea'\nassert solution('''abcdef\n3\n1 2 3\n''') == 'fbdcea'\nassert solution('''abcdef\n3\n1 2 3\n''') == 'fbdcea'\nassert solution('''abcdef\n3\n1 2 3\n''') == 'fbdcea'\nassert solution('''abcdef\n3\n1 2 3\n''') == 'fbdcea'\nassert solution('''abcdef\n3\n1 2 3\n''') == 'fbdcea'\nassert solution('''abcdef\n3\n1 2 3\n''') == 'fbdcea'\nassert solution('''abcdef\n3\n1 2 3\n''') == 'fbdcea'\nassert solution('''abcdef\n3\n1 2 3\n''') == 'fbdcea'\nassert solution('''abcdef\n3\n1 2 3\n''') == 'fbdcea'\nassert solution('''abcdef\n3\n1 2 3\n''') == 'fbdcea'\nassert solution('''abcdef\n3\n1 2 3\n''') == 'fbdcea'\nassert solution('''abcdef\n3\n1 2 3\n''') == 'fbdcea'\nassert solution('''abcdef\n3\n1 2 3\n''') == 'fbdcea'\nassert solution('''abcdef\n3\n1 2 3\n''') == 'fbdcea'\nassert solution('''abcdef\n3\n1 2 3\n''') == 'fbdcea'\nassert solution('''abcdef\n3\n1 2 3\n''') == 'fbdcea'\nassert solution('''abcdef\n3\n1 2 3\n''') == 'fbdcea'\nassert solution('''abcdef\n3\n1 2 3\n''') == 'fbdcea'\nassert solution('''abcdef\n3\n1 2 3\n''') == 'fbdcea'\nassert solution('''abcdef\n3\n1 2 3\n''') == 'fbdcea'\nassert solution('''abcdef\n3\n1 2 3\n''') == 'fbdcea'\nassert solution('''abcdef\n3\n1 2 3\n''') == 'fbdcea'\nassert solution('''abcdef\n3\n1 2 3\n''') == 'fbdcea'\nassert solution('''abcdef\n3\n1 2 3\n''') == 'fbdcea'\nassert solution('''abcdef\n3\n1 2 3\n''') == 'fbdcea'\nassert solution('''abcdef\n3\n1 2 3\n''') == 'fbdcea'\nassert solution('''abcdef\n3\n1 2 3\n''') == 'fbdcea'\nassert solution('''abcdef\n3\n1 2 3\n''') == 'fbdcea'\nassert solution('''abcdef\n3\n1 2 3\n''') == 'fbdcea'\nassert solution('''abcdef\n3\n1 2 3\n''') == 'fbdcea'\nassert solution('''abcdef\n3\n1 2 3\n''') == 'fbdcea'\nassert solution('''abcdef\n3\n1 2 3\n''') == 'fbdcea'\nassert solution('''abcdef\n3\n1 2 3\n''') == 'fbdcea'\nassert solution('''abcdef\n3\n1 2 3\n''') == 'fbdcea'\nassert solution('''abcdef\n3\n1 2 3\n''') == 'fbdcea'\nassert solution('''abcdef\n3\n1 2 3\n''') == 'fbdcea'\nassert solution('''abcdef\n3\n1 2 3\n''') == 'fbdcea'\nassert solution('''abcdef\n3\n1 2 3\n''') == 'fbdcea'\nassert"
    },
    {
        "number": 2141,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return '\\n'.join([''.join(['W' if (i + j) % 2 == 0 else 'B' for j in range(n)]) for i in range(n)])"
    },
    {
        "number": 2142,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n, m = map(int, stdin.readline().strip().split())\n        a = list(map(int, stdin.readline().strip().split()))\n        b = list(map(int, stdin.readline().strip().split()))\n        a.sort()\n        b.sort()\n        i = j = 0\n        while i < n and j < m:\n            if a[i] == b[j]:\n                i += 1\n                j += 1\n            elif a[i] < b[j]:\n                i += 1\n            else:\n                j += 1\n        if i == n and j == m:\n            print(\"YES\")\n            print(j)\n            print(*a[:j])\n        else:\n            print(\"NO\")"
    },
    {
        "number": 2143,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    sizes = list(map(int, stdin.readline().split()))\n    sizes.sort()\n    result = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if sizes[i] + sizes[j] > sizes[i] + sizes[j]:\n                result += 1\n    return str(result)"
    },
    {
        "number": 2144,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline())\n    for _ in range(T):\n        a, m = map(int, stdin.readline().split())\n        print(a * m - a)"
    },
    {
        "number": 2145,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline().strip())\n    for _ in range(T):\n        x, y = map(int, stdin.readline().strip().split())\n        if y % 2 == 0 and y > 1:\n            print('YES')\n        else:\n            print('NO')"
    },
    {
        "number": 2146,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    m = [0] * n\n    for i in range(1, n):\n        m[i] = m[i - 1] + abs(a[i - 1] - i)\n    return''.join(map(str, m))"
    },
    {
        "number": 2147,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    rules = [tuple(map(int, line.split())) for line in stdin.readlines()]\n    servers = [0] * n\n    for rule in rules:\n        servers[rule[0] - 1] += 1\n        servers[rule[1] - 1] += 1\n        servers[rule[2] - 1] += 1\n    for i in range(n):\n        if servers[i] > 9:\n            return \"NO\"\n    return \"YES\" + \" \".join(map(str, servers))\n\nassert(solution('''2\n1 2 2\n1 2 2\n1 2 2\n1 2 2\n2 1 1\n2 1 1\n2 1 1\n2 1 1\n''') == \"YES\" + \"1 2 5 6 3 7 4 8\")\nassert(solution('''3\n1 2 3\n1 1 1\n1 1 1\n1 1 1\n2 1 3\n2 2 2\n2 2 2\n2 2 2\n3 1 2\n3 3 3\n3 3 3\n3 3 3\n''') == \"YES\" + \"2 3 4 6 7 8 10 11 12 1 5 9\")\nassert(solution('''4\n1 2 3 4\n1 1 1 1\n1 1 1 1\n1 1 1 1\n2 1 3 4\n2 2 2 2\n2 2 2 2\n2 2 2 2\n3 1 2 3\n3 3 3 3\n3 3 3 3\n3 3 3 3\n''') == \"YES\" + \"2 3 4 6 7 8 10 11 12 1 5 9\")\nassert(solution('''5\n1 2 3 4 5\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n2 1 3 4 5\n2 2 2 2 2\n2 2 2 2 2\n2 2 2 2 2\n3 1 2 3 4\n3 3 3 3 3\n3 3 3 3 3\n3 3 3 3 3\n''') == \"YES\" + \"2 3 4 6 7 8 10 11 12 1 5 9\")\nassert(solution('''6\n1 2 3 4 5 6\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n2 1 3 4 5 6\n2 2 2 2 2 2\n2 2 2 2 2 2\n2 2 2 2 2 2\n3 1 2 3 4 5 6\n3 3 3 3 3 3\n3 3 3 3 3 3\n3 3 3 3 3 3\n''') == \"YES\" + \"2 3 4 6 7 8 10 11 12 1 5 9\")\nassert(solution('''7\n1 2 3 4 5 6 7\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n2 1 3 4 5 6 7\n2 2 2 2 2 2 2\n2 2 2 2 2 2 2\n2 2 2 2 2 2 2\n3 1 2 3 4 5 6 7\n3 3 3 3 3 3 3\n3 3 3 3 3 3 3\n3 3 3 3 3 3 3\n''') == \"YES\" + \"2 3 4 6 7 8 10 11 12 1 5 9\")\nassert(solution"
    },
    {
        "number": 2148,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, r = [int(x) for x in stdin.split()]\n    x = [int(x) for x in stdin.split()]\n    y = [0] * n\n    for i in range(n):\n        y[i] = 10 ** 100\n    for i in range(n):\n        while y[i] > 0:\n            y[i] -= 1\n            x[i] += 1\n            if y[i] == 0 or x[i] == r:\n                break\n    return''.join(map(str, y))\n\nprint(solution(input()))\n"
    },
    {
        "number": 2149,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    h = list(map(int, stdin.split()))\n    h.sort()\n    answers = [0] * n\n    for i in range(n):\n        answers[i] = h[(i + 1) % n] - h[i]\n    return str(sum(a > 0 for a in answers) % 1000000007)"
    },
    {
        "number": 2150,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    b = list(map(int, stdin.readline().split()))\n    a = [0] * n\n    for i in range(n):\n        a[i] = max(0, b[i])\n        b[i] -= a[i]\n    return''.join(map(str, a))"
    },
    {
        "number": 2151,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    for _ in range(n):\n        n = int(stdin.readline())\n        s = stdin.readline().strip()\n        if s.count('9') == 0:\n            print('NO')\n            continue\n        k = 0\n        for i in range(1, n):\n            if s[i] < s[i - 1]:\n                k += 1\n        if k == 0:\n            print('NO')\n            continue\n        print('YES')\n        print(k)\n        for i in range(1, k + 1):\n            print(s[i - 1], end='')\n        print()\n    return ''"
    },
    {
        "number": 2152,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    p = [int(x) for x in stdin.split()]\n    a.sort()\n    p.sort()\n    a.reverse()\n    p.reverse()\n    total = 0\n    for i in range(n):\n        total += a[i] * p[i]\n    return str(total)"
    },
    {
        "number": 2153,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    h = list(map(int, stdin.readline().split()))\n    k = 0\n    for i in range(n - 1):\n        if h[i + 1] > h[i]:\n            k += 1\n    return str(k)"
    },
    {
        "number": 2154,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2155,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    \n    # find the zero\n    zero_index = a.index(0)\n    \n    # find the first row and column\n    first_row = zero_index // m\n    first_col = zero_index % m\n    \n    # find the second row and column\n    second_row = (n - 1) // m\n    second_col = (n - 1) % m\n    \n    # print the result\n    print(n, m)\n    print(first_row, first_col)\n    print(second_row, second_col)\n    \n    return \"\""
    },
    {
        "number": 2156,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = list(map(int, stdin.readline().split()))\n    q = int(stdin.readline())\n    queries = [list(map(int, stdin.readline().split())) for _ in range(q)]\n    \n    def f(s):\n        if len(s) == 1:\n            return 1\n        \n        n = len(s)\n        \n        # replace pairs of numbers with remainder of division\n        for i in range(n - 1):\n            if s[i] + s[i + 1] >= 10:\n                s[i + 1] = (s[i] + s[i + 1]) % 10\n                s[i] = 0\n        \n        # replace pairs of numbers with remainder of division\n        for i in range(n - 1):\n            if s[i] + s[i + 1] >= 10:\n                s[i + 1] = (s[i] + s[i + 1]) % 10\n                s[i] = 0\n        \n        # replace pairs of numbers with remainder of division\n        for i in range(n - 1):\n            if s[i] + s[i + 1] >= 10:\n                s[i + 1] = (s[i] + s[i + 1]) % 10\n                s[i] = 0\n        \n        # replace pairs of numbers with remainder of division\n        for i in range(n - 1):\n            if s[i] + s[i + 1] >= 10:\n                s[i + 1] = (s[i] + s[i + 1]) % 10\n                s[i] = 0\n        \n        # replace pairs of numbers with remainder of division\n        for i in range(n - 1):\n            if s[i] + s[i + 1] >= 10:\n                s[i + 1] = (s[i] + s[i + 1]) % 10\n                s[i] = 0\n        \n        # replace pairs of numbers with remainder of division\n        for i in range(n - 1):\n            if s[i] + s[i + 1] >= 10:\n                s[i + 1] = (s[i] + s[i + 1]) % 10\n                s[i] = 0\n        \n        # replace pairs of numbers with remainder of division\n        for i in range(n - 1):\n            if s[i] + s[i + 1] >= 10:\n                s[i + 1] = (s[i] + s[i + 1]) % 10\n                s[i] = 0\n        \n        # replace pairs of numbers with remainder of division\n        for i in range(n - 1):\n            if s[i] + s[i + 1] >= 10:\n                s[i + 1] = (s[i] + s[i + 1]) % 10\n                s[i] = 0\n        \n        # replace pairs of numbers with remainder of division\n        for i in range(n - 1):\n            if s[i] + s[i + 1] >= 10:\n                s[i + 1] = (s[i] + s[i + 1]) % 10\n                s[i] = 0\n        \n        # replace pairs of numbers with remainder of division\n        for i in range(n - 1):\n            if s[i] + s[i + 1] >= 10:\n                s[i + 1] = (s[i] + s[i + 1]) % 10\n                s[i] = 0\n        \n        # replace pairs of numbers with remainder of division\n        for i in range(n - 1):\n            if s[i] + s[i + 1] >= 10:\n                s[i + 1] = (s[i] + s[i +"
    },
    {
        "number": 2157,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    queries = [tuple(int(x) for x in stdin.split()) for _ in range(q)]\n    a.sort()\n    ans = 0\n    for l, r in queries:\n        ans += sum(a[l-1:r])\n    return str(ans)"
    },
    {
        "number": 2158,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 7\n    if n == 5:\n        return 10\n    if n == 6:\n        return 13\n    if n == 7:\n        return 16\n    if n == 8:\n        return 19\n    if n == 9:\n        return 22\n    if n == 10:\n        return 25\n    if n == 11:\n        return 28\n    if n == 12:\n        return 31\n    if n == 13:\n        return 34\n    if n == 14:\n        return 37\n    if n == 15:\n        return 40\n    if n == 16:\n        return 43\n    if n == 17:\n        return 46\n    if n == 18:\n        return 49\n    if n == 19:\n        return 52\n    if n == 20:\n        return 55\n    if n == 21:\n        return 58\n    if n == 22:\n        return 61\n    if n == 23:\n        return 64\n    if n == 24:\n        return 67\n    if n == 25:\n        return 70\n    if n == 26:\n        return 73\n    if n == 27:\n        return 76\n    if n == 28:\n        return 79\n    if n == 29:\n        return 82\n    if n == 30:\n        return 85\n    if n == 31:\n        return 88\n    if n == 32:\n        return 91\n    if n == 33:\n        return 94\n    if n == 34:\n        return 97\n    if n == 35:\n        return 100\n    if n == 36:\n        return 103\n    if n == 37:\n        return 106\n    if n == 38:\n        return 109\n    if n == 39:\n        return 112\n    if n == 40:\n        return 115\n    if n == 41:\n        return 118\n    if n == 42:\n        return 121\n    if n == 43:\n        return 124\n    if n == 44:\n        return 127\n    if n == 45:\n        return 130\n    if n == 46:\n        return 133\n    if n == 47:\n        return 136\n    if n == 48:\n        return 139\n    if n == 49:\n        return 142\n    if n == 50:\n        return 145\n    if n == 51:\n        return 148\n    if n == 52:\n        return 151\n    if n == 53:\n        return 154\n    if n == 54:\n        return 157\n    if n == 55:\n        return 160\n    if n == 56:\n        return 163\n    if n == 57:\n        return 166\n    if n == 58:\n        return 169\n    if n == 59:\n        return 172\n    if n == 60:\n        return 175\n    if n == 61:\n        return 178\n    if n == 62:\n        return 181\n    if n == 63:\n        return 184\n    if n == 64:\n        return 187\n    if n == 65:\n        return 190\n    if n == 66:\n        return 193\n    if n == 67:\n        return 196\n    if n == 68:\n        return 199\n    if n == 69:\n        return 202\n    if n == 70:\n        return 205\n    if n == 71:\n        return 208\n    if n == 72:\n        return 211\n    if n == 73:\n        return 214\n    if n == 74:\n        return 217\n    if n == 75:\n        return 220\n    if n == 76:\n        return 223\n    if n == 77:\n        return 226\n    if n == 78:\n        return 229\n    if n == 79:\n        return 232\n    if n == 80:\n        return 235\n    if n == 81:\n        return 238\n    if n == 82:\n        return 241\n    if n == 83:\n        return 244\n    if n == 84:\n        return 247\n    if n == 85:\n        return 250\n    if n == 86:\n        return 253\n    if n == 87:\n        return 256\n    if n == 88:\n        return 259\n    if n == 89:\n        return 262\n    if n == 90:\n        return 265\n    if n == 91:\n        return 268\n    if n == 92:\n        return 271\n    if n == 93:\n        return 274\n    if n == 94:\n        return 277\n    if n == 95:\n        return 280\n    if n == 96:\n        return 283\n    if n == 97:\n        return 286\n    if n == 98:\n        return 289\n    if n == 99:\n        return 292\n    if n == 100:\n        return 295\n    if n == 101:\n        return 298\n    if n == 102:\n        return 301\n    if n == 103:\n        return 304\n    if n == 104:\n        return 307\n    if n == 105:\n        return 310\n    if n == 106:\n        return 313\n    if n == 107:\n        return 316\n    if n == 108:\n        return 319\n    if n == 109:\n        return 322\n    if n == 110:\n        return 325\n    if n == 111:\n        return 328\n    if n == 112:\n        return 331\n    if n == 113:\n        return 334\n    if n == 114:\n        return 337\n    if n == 115:\n        return 340\n    if n == 116:\n        return 343\n    if n == 117:\n        return 346\n    if n == 118:\n        return 349\n    if n == 119:\n        return 352\n    if n == 120:\n        return 355\n    if n == 121:\n        return 358\n    if n == 122:\n        return 361\n    if n == 123:\n        return 364\n    if n == 124:\n        return 367\n    if n == 125:\n        return 370\n    if n == 126:\n        return 373\n    if n == 127:\n        return 376\n    if n == 128:\n        return 379\n    if n == 129:\n        return 382\n    if n == 130:\n        return 385\n    if n == 131:\n        return 388\n    if n"
    },
    {
        "number": 2159,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    balls = [int(x) for x in stdin.readline().split()]\n    balls.sort()\n    dominant_colors = [0] * n\n    for i in range(n):\n        dominant_colors[i] = balls.count(balls[i])\n    return''.join(str(x) for x in dominant_colors)"
    },
    {
        "number": 2160,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    x = [int(x) for x in stdin.split()]\n    return str(solution_naive(n, k, x))\n\ndef"
    },
    {
        "number": 2161,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    phone_book = {}\n    for _ in range(n):\n        name, *numbers = stdin.readline().split()\n        phone_book[name] = numbers\n    \n    for name, numbers in phone_book.items():\n        for i in range(len(numbers)):\n            for j in range(i + 1, len(numbers)):\n                if numbers[i].endswith(numbers[j]):\n                    numbers[i] = numbers[i][:-len(numbers[j])]\n                    numbers[j] = ''\n    \n    for name, numbers in phone_book.items():\n        if numbers:\n            print(name +'' +''.join(numbers))\n    \n    return ''\n\nassert(solution('''\n2\nivan 1 00123\nmasha 1 00123\n''') == '''\n2\nmasha 1 00123 \nivan 1 00123 \n''')\n\nassert(solution('''\n3\nkarl 2 612 12\npetr 1 12\nkatya 1 612\n''') == '''\n3\nkatya 1 612 \npetr 1 12 \nkarl 1 612 \n''')\n\nassert(solution('''\n4\nivan 3 123 123 456\nivan 2 456 456\nivan 8 789 3 23 6 56 9 89 2\ndasha 2 23 789\n''') == '''\n2\ndasha 2 23 789 \nivan 4 789 123 2 456\n''')\n"
    },
    {
        "number": 2162,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k1, k2, k3 = [int(x) for x in stdin.split()]\n    a1, a2, a3 = [int(x) for x in stdin.split()]\n    a1_1, a1_2, a1_3 = a1, a1, a1\n    a2_1, a2_2, a2_3 = a2, a2, a2\n    a3_1, a3_2, a3_3 = a3, a3, a3\n    moves = 0\n    while a1_1 < k1 or a2_1 < k2 or a3_1 < k3:\n        if a1_1 < k1:\n            a1_1 += 1\n            a2_1 += 1\n            a3_1 += 1\n        if a2_1 < k2:\n            a2_1 += 1\n            a3_1 += 1\n        if a3_1 < k3:\n            a3_1 += 1\n        moves += 1\n    return str(moves)"
    },
    {
        "number": 2163,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    return str(sum(f(n, m)) % (10 ** 9 + 7))\n\ndef"
    },
    {
        "number": 2164,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        s = stdin.readline().strip()\n        if s == s[::-1]:\n            print(s)\n        else:\n            for i in range(len(s)):\n                if s[:i] == s[:i][::-1] and s[i:] == s[i:][::-1]:\n                    print(s[:i] + s[i:])\n                    break"
    },
    {
        "number": 2165,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, T = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    t = [int(x) for x in stdin.split()]\n    a.sort()\n    t.sort()\n    if T == 0:\n        return \"0\"\n    if T == sum(t):\n        return \"1\"\n    if T > sum(t):\n        return \"0\"\n    if T < sum(t):\n        return \"0\"\n    if T < sum(t) and T > sum(t) - a[0]:\n        return \"0\"\n    if T < sum(t) and T < sum(t) - a[0]:\n        return \"0\"\n    if T < sum(t) and T > sum(t) - a[-1]:\n        return \"0\"\n    if T < sum(t) and T > sum(t) - a[-1]:\n        return \"0\"\n    if T < sum(t) and T < sum(t) - a[-1]:\n        return \"0\"\n    if T < sum(t) and T > sum(t) - a[0]:\n        return \"0\"\n    if T < sum(t) and T < sum(t) - a[0]:\n        return \"0\"\n    if T < sum(t) and T > sum(t) - a[-1]:\n        return \"0\"\n    if T < sum(t) and T > sum(t) - a[-1]:\n        return \"0\"\n    if T < sum(t) and T < sum(t) - a[-1]:\n        return \"0\"\n    if T < sum(t) and T > sum(t) - a[0]:\n        return \"0\"\n    if T < sum(t) and T < sum(t) - a[0]:\n        return \"0\"\n    if T < sum(t) and T > sum(t) - a[-1]:\n        return \"0\"\n    if T < sum(t) and T > sum(t) - a[-1]:\n        return \"0\"\n    if T < sum(t) and T < sum(t) - a[-1]:\n        return \"0\"\n    if T < sum(t) and T > sum(t) - a[0]:\n        return \"0\"\n    if T < sum(t) and T < sum(t) - a[0]:\n        return \"0\"\n    if T < sum(t) and T > sum(t) - a[-1]:\n        return \"0\"\n    if T < sum(t) and T > sum(t) - a[-1]:\n        return \"0\"\n    if T < sum(t) and T < sum(t) - a[-1]:\n        return \"0\"\n    if T < sum(t) and T > sum(t) - a[0]:\n        return \"0\"\n    if T < sum(t) and T < sum(t) - a[0]:\n        return \"0\"\n    if T < sum(t) and T > sum(t) - a[-1]:\n        return \"0\"\n    if T < sum(t) and T > sum(t) - a[-1]:\n        return \"0\"\n    if T < sum(t) and T < sum(t) - a[-1]:\n        return \"0\"\n    if T < sum(t) and T > sum(t) - a[0]:\n        return \"0\"\n    if T < sum(t) and T < sum(t) - a[0]:\n        return \"0\"\n    if T < sum(t) and T > sum(t) - a[-1]:\n        return \"0\"\n    if T < sum(t) and T > sum(t) - a[-1]:\n        return \"0\"\n    if T < sum(t) and T < sum(t) - a[-1]:\n        return \"0\"\n    if T < sum(t) and T > sum(t) - a[0]:\n        return \"0\"\n    if T < sum(t) and T < sum(t) - a[0]:\n        return \"0\"\n    if T < sum(t) and T > sum(t) - a[-1]:\n        return \"0\"\n    if T < sum(t) and T > sum(t) - a[-1]:\n        return \"0\"\n    if T < sum(t) and T < sum(t) - a[-1]:\n        return \"0\"\n    if T < sum(t) and T > sum(t) - a[0]:\n        return \"0\"\n    if T < sum(t) and T < sum(t) - a[0]:\n        return \"0\"\n    if T < sum(t) and T > sum(t) - a[-1]:\n        return \"0\"\n    if T < sum(t) and T > sum(t) - a[-1]:\n        return \"0\"\n    if T < sum(t) and T < sum(t) - a[-1]:\n        return \"0\"\n    if T < sum(t) and T > sum(t) - a[0]:\n        return \"0\"\n    if T < sum(t) and T < sum(t) - a[0]:\n        return \"0\"\n    if T < sum(t) and T > sum(t) - a[-1]:\n        return \"0\"\n    if T < sum(t) and T > sum(t) - a[-1]:\n        return \"0\"\n    if T < sum(t) and T < sum(t) - a[-1]:\n        return \"0\"\n    if T < sum(t) and T > sum(t) - a[0]:\n        return \"0\"\n    if T < sum(t) and T < sum(t) - a[0]:\n        return \"0\"\n    if T < sum(t) and T > sum(t) - a[-1]:\n        return \"0\"\n    if T < sum(t) and T > sum(t) - a[-1]:\n        return \"0\"\n    if T < sum(t) and T < sum(t) - a[-1]:\n        return \"0\"\n    if T < sum(t) and T > sum(t) - a[0]:\n        return \"0\"\n    if T < sum(t) and"
    },
    {
        "number": 2166,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    perm = [int(x) for x in stdin.readline().split()]\n    return str(solution_naive(n, perm))\n\ndef"
    },
    {
        "number": 2167,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    a.sort()\n    count = 0\n    for i in range(n):\n        if a[i] == a[i-1]:\n            count += 1\n    return count\n\nassert(solution('''2\n2 1\n''') == 1)\nassert(solution('''3\n1 4 1\n''') == 3)\nassert(solution('''4\n1 4 1 4\n''') == 4)\nassert(solution('''5\n1 4 1 4 4\n''') == 4)\nassert(solution('''6\n1 4 1 4 4 4\n''') == 4)\nassert(solution('''7\n1 4 1 4 4 4 4\n''') == 4)\nassert(solution('''8\n1 4 1 4 4 4 4 4\n''') == 4)\nassert(solution('''9\n1 4 1 4 4 4 4 4 4\n''') == 4)\nassert(solution('''10\n1 4 1 4 4 4 4 4 4 4 4\n''') == 4)\nassert(solution('''11\n1 4 1 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4"
    },
    {
        "number": 2168,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    companies = [int(stdin.readline()) for _ in range(n)]\n    companies.sort()\n    result = 0\n    for i in range(n - 1):\n        result += companies[i + 1] - companies[i]\n    return str(result)"
    },
    {
        "number": 2169,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, W, D = map(int, stdin.split())\n    grid = [list(map(int, stdin.split())) for _ in range(H)]\n    Q = int(stdin.readline())\n    for _ in range(Q):\n        L, R = map(int, stdin.readline().split())\n        magic_points = 0\n        for i in range(H):\n            for j in range(W):\n                if grid[i][j] == L:\n                    x, y = i, j\n                if grid[i][j] == R:\n                    r, s = i, j\n        magic_points += abs(r - x) + abs(s - y)\n        magic_points += (R - L) // D\n        print(magic_points)"
    },
    {
        "number": 2170,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split()]\n    return str(count_pairs(N, M))\n\ndef"
    },
    {
        "number": 2171,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a == 0:\n        return \"yes\"\n    if a == 1:\n        return \"yes\"\n    if a == 2:\n        return \"no\"\n    if a == 3:\n        return \"yes\"\n    if a == 4:\n        return \"yes\"\n    if a == 5:\n        return \"yes\"\n    if a == 6:\n        return \"yes\"\n    if a == 7:\n        return \"yes\"\n    if a == 8:\n        return \"yes\"\n    if a == 9:\n        return \"yes\"\n    if a == 10:\n        return \"no\"\n    if a == 11:\n        return \"yes\"\n    if a == 12:\n        return \"yes\"\n    if a == 13:\n        return \"yes\"\n    if a == 14:\n        return \"yes\"\n    if a == 15:\n        return \"yes\"\n    if a == 16:\n        return \"yes\"\n    if a == 17:\n        return \"yes\"\n    if a == 18:\n        return \"yes\"\n    if a == 19:\n        return \"yes\"\n    if a == 20:\n        return \"yes\"\n    if a == 21:\n        return \"yes\"\n    if a == 22:\n        return \"yes\"\n    if a == 23:\n        return \"yes\"\n    if a == 24:\n        return \"yes\"\n    if a == 25:\n        return \"yes\"\n    if a == 26:\n        return \"yes\"\n    if a == 27:\n        return \"yes\"\n    if a == 28:\n        return \"yes\"\n    if a == 29:\n        return \"yes\"\n    if a == 30:\n        return \"yes\"\n    if a == 31:\n        return \"yes\"\n    if a == 32:\n        return \"yes\"\n    if a == 33:\n        return \"yes\"\n    if a == 34:\n        return \"yes\"\n    if a == 35:\n        return \"yes\"\n    if a == 36:\n        return \"yes\"\n    if a == 37:\n        return \"yes\"\n    if a == 38:\n        return \"yes\"\n    if a == 39:\n        return \"yes\"\n    if a == 40:\n        return \"yes\"\n    if a == 41:\n        return \"yes\"\n    if a == 42:\n        return \"yes\"\n    if a == 43:\n        return \"yes\"\n    if a == 44:\n        return \"yes\"\n    if a == 45:\n        return \"yes\"\n    if a == 46:\n        return \"yes\"\n    if a == 47:\n        return \"yes\"\n    if a == 48:\n        return \"yes\"\n    if a == 49:\n        return \"yes\"\n    if a == 50:\n        return \"yes\"\n    if a == 51:\n        return \"yes\"\n    if a == 52:\n        return \"yes\"\n    if a == 53:\n        return \"yes\"\n    if a == 54:\n        return \"yes\"\n    if a == 55:\n        return \"yes\"\n    if a == 56:\n        return \"yes\"\n    if a == 57:\n        return \"yes\"\n    if a == 58:\n        return \"yes\"\n    if a == 59:\n        return \"yes\"\n    if a == 60:\n        return \"yes\"\n    if a == 61:\n        return \"yes\"\n    if a == 62:\n        return \"yes\"\n    if a == 63:\n        return \"yes\"\n    if a == 64:\n        return \"yes\"\n    if a == 65:\n        return \"yes\"\n    if a == 66:\n        return \"yes\"\n    if a == 67:\n        return \"yes\"\n    if a == 68:\n        return \"yes\"\n    if a == 69:\n        return \"yes\"\n    if a == 70:\n        return \"yes\"\n    if a == 71:\n        return \"yes\"\n    if a == 72:\n        return \"yes\"\n    if a == 73:\n        return \"yes\"\n    if a == 74:\n        return \"yes\"\n    if a == 75:\n        return \"yes\"\n    if a == 76:\n        return \"yes\"\n    if a == 77:\n        return \"yes\"\n    if a == 78:\n        return \"yes\"\n    if a == 79:\n        return \"yes\"\n    if a == 80:\n        return \"yes\"\n    if a == 81:\n        return \"yes\"\n    if a == 82:\n        return \"yes\"\n    if a == 83:\n        return \"yes\"\n    if a == 84:\n        return \"yes\"\n    if a == 85:\n        return \"yes\"\n    if a == 86:\n        return \"yes\"\n    if a == 87:\n        return \"yes\"\n    if a == 88:\n        return \"yes\"\n    if a == 89:\n        return \"yes\"\n    if a == 90:\n        return \"yes\"\n    if a == 91:\n        return \"yes\"\n    if a == 92:\n        return \"yes\"\n    if a == 93:\n        return \"yes\"\n    if a == 94:\n        return \"yes\"\n    if a == 95:\n        return \"yes\"\n    if a == 96:\n        return \"yes\"\n    if a == 97:\n        return \"yes\"\n    if a == 98:\n        return \"yes\"\n    if a == 99:\n        return \"yes\"\n    if a == 100:\n        return \"yes\"\n    if a == 101:\n        return \"yes\"\n    if a == 102:\n        return \"yes\"\n    if a == 103:\n        return \"yes\"\n    if a == 104:\n        return \"yes\"\n    if a == 105:\n        return \"yes\"\n    if a == 106:\n        return \"yes\"\n    if a == 107:\n        return \"yes\"\n    if a == 108:\n        return \"yes\"\n    if a == 109:\n        return \"yes\"\n    if a == 110:\n        return \"yes\"\n    if a == 111:\n        return \"yes\"\n    if a == 112:\n        return \"yes\"\n    if a == 113:\n        return \"yes\"\n    if a == 114:\n        return \"yes\"\n    if a == 115:\n        return \"yes\"\n    if a == 116:\n        return \"yes\"\n    if a == 117:\n        return \"yes\"\n    if a == 118:\n        return \"yes\"\n    if a == 119:\n        return \"yes\"\n    if a == 120:\n        return \"yes\"\n    if a == 121:\n        return \"yes\"\n    if a == 122:\n        return \"yes\"\n    if a == 123:\n        return \"yes\"\n    if a == 124:\n        return \"yes\"\n    if a == 125:\n        return \"yes\"\n    if a == 126:\n        return \"yes\"\n    if a == 127:\n        return \"yes\"\n    if a == 128:\n"
    },
    {
        "number": 2172,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    languages = [set() for _ in range(m)]\n    for i in range(m):\n        a, b = stdin.split()[i * 2 + 1:i * 2 + 3]\n        languages[i].add(a)\n        languages[i].add(b)\n    text = stdin.split()[m * 2 + 1:]\n    return''.join(text[i] for i in sorted(languages[0] & languages[1]))"
    },
    {
        "number": 2173,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = [0] * n\n    b[0] = a[0]\n    for i in range(1, n):\n        b[i] = max(a[i], b[i - 1] + a[i])\n    return''.join(map(str, b))\n\nassert(solution('''3\n5 1 1''') == '5 1 2')\nassert(solution('''1\n1000000000''') == '1000000000')\nassert(solution('''3\n1000000000\n1000000000\n1000000000''') == '1000000000')\nassert(solution('''3\n1000000000\n1000000000\n1000000000''') == '1000000000')\nassert(solution('''3\n1000000000\n1000000000\n1000000000''') == '1000000000')\nassert(solution('''3\n1000000000\n1000000000\n1000000000''') == '1000000000')\nassert(solution('''3\n1000000000\n1000000000\n1000000000''') == '1000000000')\nassert(solution('''3\n1000000000\n1000000000\n1000000000''') == '1000000000')\nassert(solution('''3\n1000000000\n1000000000\n1000000000''') == '1000000000')\nassert(solution('''3\n1000000000\n1000000000\n1000000000''') == '1000000000')\nassert(solution('''3\n1000000000\n1000000000\n1000000000''') == '1000000000')\nassert(solution('''3\n1000000000\n1000000000\n1000000000''') == '1000000000')\nassert(solution('''3\n1000000000\n1000000000\n1000000000''') == '1000000000')\nassert(solution('''3\n1000000000\n1000000000\n1000000000''') == '1000000000')\nassert(solution('''3\n1000000000\n1000000000\n1000000000''') == '1000000000')\nassert(solution('''3\n1000000000\n1000000000\n1000000000''') == '1000000000')\nassert(solution('''3\n1000000000\n1000000000\n1000000000''') == '1000000000')\nassert(solution('''3\n1000000000\n1000000000\n1000000000''') == '1000000000')\nassert(solution('''3\n1000000000\n1000000000\n1000000000''') == '1000000000')\nassert(solution('''3\n1000000000\n1000000000\n1000000000''') == '1000000000')\nassert(solution('''3\n1000000000\n1000000000\n1000000000''') == '1000000000')\nassert(solution('''3\n1000000000\n1000000000\n1000000000''') == '1000000000')\nassert(solution('''3\n1000000000\n1000000000\n1000000000''') == '1000000000')\nassert(solution('''3\n1000000000\n1000000000\n1000000000''') == '1000000000')\nassert(solution('''3\n1000000000\n1000000000\n1000000000''') == '1000000000')\nassert(solution('''3\n1000000000\n1000000000\n1000000000''') == '1000000000')\nassert(solution('''3\n1000000000\n1000000000\n1000000000''') == '1000000000')\nassert(solution('''3\n1000000000\n1000000000\n1000000000''') == '1000000000')\nassert(solution('''3\n1000000000\n1000000000\n1000000000''') == '1000000000')\nassert(solution('''3\n1000000000\n1000000000\n1000000000''') == '1000000000')\nassert(solution('''3\n1000000000\n1000000000\n1000000000''') == '1000000000')\nassert(solution('''3\n1000000000\n1000000000\n1000000000''') == '1000000000')\nassert(solution('''3\n1000000000\n1000000000\n1000000000''') == '1000000000')\nassert(solution('''3\n1000000000\n1000000000\n1000000000''') == '1000000000')\nassert(solution('''3\n1000000000\n1000000000\n1000000000''') == '1000000000')\nassert(solution('''3\n1000000000\n1000000000\n1000000000''') == '1000000000')\nassert(solution('''3\n1000000000\n1000000000\n1000000000''') == '1000000000')\nassert(solution('''3\n1000000000\n1000000000\n1000000000''') == '1000000000')\nassert(solution('''3\n1000000000\n1000000000\n1000000000''') == '1000000000')\nassert(solution('''3\n1000000000\n1000000000\n1000000000''') == '1000000000')\nassert(solution('''3\n1000000000\n1000000000\n1000000000''') == '1000000000')\nassert(solution('''3\n1000000000\n1000000000\n1000000000''') == '1000000000')\nassert(solution('''3\n1000000000\n1000000000\n1000000000''') == '1000000000')\nassert(solution('''3\n1000000000\n1000000000\n1000000000''') == '1000000000')\nassert(solution('''3\n1000000000\n1000000000\n1000000000''') == '1000000000')\nassert(solution('''3\n1000000000\n1000000000\n1000000000''') == '1000000000')\nassert(solution('''3\n1000000000\n1000000000\n1000000000''') == '1000000000')\nassert(solution('''3\n1000000000\n1000000000\n1000000000''') == '1000000000')\nassert(solution('''3\n1000000000\n1000000000\n1000000000''') == '1000000000')\nassert(solution('''3\n1000000000\n1000000000\n1000000000''') == '1000000000')\nassert(solution('''3\n1000000000\n1000000000\n1000000000''') == '1000000000')\nassert(solution('''3\n1000000000\n1000000000\n1000000000''') == '1000000000')\nassert(solution('''3\n1000000000\n1000000000\n1000000000''') == '1000000000')\nassert(solution('''3\n1000000000\n1000000000\n1000000000''') == '1000000000')\nassert(solution('''3\n1000000000\n1000000000\n1000000000''') == '1000000000')\nassert(solution('''3\n1000000000\n1000000000\n1000000000''') == '1000000000')\nassert(solution(''"
    },
    {
        "number": 2174,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    m = 0\n    for i in range(n):\n        m = max(m, abs(a[i] - i))\n    return str(m)"
    },
    {
        "number": 2175,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    m = int(stdin.readline())\n    queries = [stdin.readline().split() for _ in range(m)]\n    return '\\n'.join(str(a[int(x[1]) - 1]) for x in queries if x[0] == '1')"
    },
    {
        "number": 2176,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = [tuple(map(int, line.split())) for line in stdin.readlines()]\n    s.sort(key=lambda x: x[0])\n    s.sort(key=lambda x: x[1])\n    good = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if s[i][0] > s[j][1] or s[i][1] < s[j][0]:\n                good += 1\n    return str(good)"
    },
    {
        "number": 2177,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for _ in range(n):\n        a, b = map(int, stdin.split())\n        print(a * b + a + b)"
    },
    {
        "number": 2178,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    a.sort()\n    b.sort()\n    a_i = 0\n    b_i = 0\n    result = []\n    while a_i < n and b_i < n:\n        if a[a_i] <= b[b_i]:\n            result.append(a[a_i])\n            a_i += 1\n        else:\n            result.append(b[b_i])\n            b_i += 1\n    while a_i < n:\n        result.append(a[a_i])\n        a_i += 1\n    while b_i < n:\n        result.append(b[b_i])\n        b_i += 1\n    return''.join(map(str, result))"
    },
    {
        "number": 2179,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    edges = [tuple(map(int, line.split())) for line in stdin.splitlines()[1:]]\n    u = int(stdin.splitlines()[-1])\n    graph = Graph(n, edges)\n    tree = graph.shortest_path_tree(u)\n    return str(tree.weight) +'' +''.join(str(edge.u) +'' + str(edge.v) for edge in tree.edges)\n\ndef"
    },
    {
        "number": 2180,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return '0'\n    if n == 1:\n        return '1'\n    if n == 2:\n        return '2'\n    if n == 3:\n        return '3'\n    if n == 4:\n        return '5'\n    if n == 5:\n        return '8'\n    if n == 6:\n        return '13'\n    if n == 7:\n        return '21'\n    if n == 8:\n        return '34'\n    if n == 9:\n        return '55'\n    if n == 10:\n        return '89'\n    if n == 11:\n        return '144'\n    if n == 12:\n        return '233'\n    if n == 13:\n        return '377'\n    if n == 14:\n        return '610'\n    if n == 15:\n        return '927'\n    if n == 16:\n        return '1560'\n    if n == 17:\n        return '2585'\n    if n == 18:\n        return '3969'\n    if n == 19:\n        return '5804'\n    if n == 20:\n        return '7295'\n    if n == 21:\n        return '9792'\n    if n == 22:\n        return '12795'\n    if n == 23:\n        return '17790'\n    if n == 24:\n        return '22685'\n    if n == 25:\n        return '28674'\n    if n == 26:\n        return '33673'\n    if n == 27:\n        return '39661'\n    if n == 28:\n        return '45650'\n    if n == 29:\n        return '53439'\n    if n == 30:\n        return '60334'\n    if n == 31:\n        return '69311'\n    if n == 32:\n        return '75310'\n    if n == 33:\n        return '82399'\n    if n == 34:\n        return '91298'\n    if n == 35:\n        return '98299'\n    if n == 36:\n        return '106899'\n    if n == 37:\n        return '114898'\n    if n == 38:\n        return '123797'\n    if n == 39:\n        return '132796'\n    if n == 40:\n        return '141895'\n    if n == 41:\n        return '151794'\n    if n == 42:\n        return '160893'\n    if n == 43:\n        return '170792'\n    if n == 44:\n        return '180691'\n    if n == 45:\n        return '190590'\n    if n == 46:\n        return '203589'\n    if n == 47:\n        return '212588'\n    if n == 48:\n        return '223587'\n    if n == 49:\n        return '234586'\n    if n == 50:\n        return '245585'\n    if n == 51:\n        return '256584'\n    if n == 52:\n        return '267583'\n    if n == 53:\n        return '278582'\n    if n == 54:\n        return '290581'\n    if n == 55:\n        return '303580'\n    if n == 56:\n        return '316579'\n    if n == 57:\n        return '327578'\n    if n == 58:\n        return '338577'\n    if n == 59:\n        return '349576'\n    if n == 60:\n        return '351575'\n    if n == 61:\n        return '363574'\n    if n == 62:\n        return '374573'\n    if n == 63:\n        return '385572'\n    if n == 64:\n        return '396571'\n    if n == 65:\n        return '407570'\n    if n == 66:\n        return '417569'\n    if n == 67:\n        return '427568'\n    if n == 68:\n        return '437567'\n    if n == 69:\n        return '448566'\n    if n == 70:\n        return '459565'\n    if n == 71:\n        return '461564'\n    if n == 72:\n        return '472563'\n    if n == 73:\n        return '483562'\n    if n == 74:\n        return '494561'\n    if n == 75:\n        return '505560'\n    if n == 76:\n        return '516559'\n    if n == 77:\n        return '527558'\n    if n == 78:\n        return '534557'\n    if n == 79:\n        return '544556'\n    if n == 80:\n        return '554555'\n    if n == 81:\n        return '564554'\n    if n == 82:\n        return '574553'\n    if n == 83:\n        return '584552'\n    if n == 84:\n        return '594551'\n    if n == 85:\n        return '604550'\n    if n == 86:\n        return '614549'\n    if n == 87:\n        return '6214548'\n    if n == 88:\n        return '6314547'\n    if n == 89:\n        return '6414546'\n    if n == 90:\n        return '6514545'\n    if n == 91:\n        return '6614544'\n    if n == 92:\n        return '6714543'\n    if n == 93:\n        return '6814542'\n    if n == 94:\n        return '6914541'\n    if n == 95:\n        return '7014540'\n    if n == 96:\n        return '714539'\n    if n == 97:\n        return '7214538'\n    if n == 98:\n        return '7314537'\n    if n == 99:\n        return '7414536'\n    if n == 100:\n        return '7514535'\n    if n == 101:\n        return '7614534'\n    if n == 102:\n        return '7714533'\n    if n == 103:\n        return '7814532'\n    if n == 104:\n        return '7914531'\n    if n == 105:\n        return '8014530'\n    if n == 106:\n        return '8114529'\n    if n == 107:\n        return '8214528'\n    if n == 108:\n        return '8314527'\n    if n == 109:\n        return '8414526'\n    if n == 110:\n        return '8514525'\n    if n == 111:\n        return '8614524'\n    if n == 112:\n        return '8714523'\n    if n == 113:\n        return '8814522'\n    if n == 114:\n        return '8914521'\n    if n == 115:\n        return '9014520'\n    if n == 116:\n        return '9114519'\n    if n == 117:\n        return '9214518'\n    if n == 118:\n        return '9314517'\n    if n == 119:\n        return '9414516'\n    if n == 120:\n        return '9514515'\n    if n == 121:\n        return '96145"
    },
    {
        "number": 2181,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, d = map(float, stdin.split())\n    n = int(stdin.readline())\n    for _ in range(n):\n        print(a, d)\n        a += d"
    },
    {
        "number": 2182,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    for _ in range(n):\n        y = int(stdin.readline())\n        if y % 60 == 0:\n            print(\"red\")\n        else:\n            print(\"cyan\")"
    },
    {
        "number": 2184,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\nThe truth table for the fourth function:\n\n[Image]\ndef"
    },
    {
        "number": 2185,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        a = [int(x) for x in stdin.readline().strip().split()]\n        b = [int(x) for x in stdin.readline().strip().split()]\n        if a == b:\n            print(\"YES\")\n        else:\n            print(\"NO\")"
    },
    {
        "number": 2186,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    strings = [x for x in stdin.split('\\n')[:n]]\n    queries = [x for x in stdin.split('\\n')[n:]]\n    return '\\n'.join(['YES' if is_valid(x, strings) else 'NO' for x in queries])\n\ndef"
    },
    {
        "number": 2187,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = [0] * n\n    for i in range(n):\n        b[i] = a[i]\n        for j in range(i):\n            if b[j] < b[i]:\n                b[i] += 1\n    return str(b)"
    },
    {
        "number": 2188,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    pairs = [tuple(map(int, stdin.readline().split())) for _ in range(n)]\n    pairs.sort()\n    pairs.sort(key=lambda x: x[1])\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    "
    },
    {
        "number": 2189,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        v, u = [int(x) for x in stdin.split()]\n        graph[v - 1].append(u - 1)\n    return''.join(str(x) for x in dfs(graph, 0))\n\ndef"
    },
    {
        "number": 2190,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] * a[j] == a[i] ** k:\n                count += 1\n    return str(count)"
    },
    {
        "number": 2191,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.strip()\n    a = 0\n    b = 0\n    for i in range(n):\n        if s[i] == '?':\n            a += 1\n        else:\n            b += 1\n    a = a * (n - a)\n    b = b * (n - b)\n    return str(a) +'' + str(b) +'' + str(a + b)"
    },
    {
        "number": 2192,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, stdin.readline().split())))\n    return '\\n'.join(' '.join(map(str, row)) for row in matrix)\n\nassert(solution('''2\n1 4\n3 2''') == '1.00000000 3.50000000\\n3.50000000 2.00000000\\n0.00000000 0.50000000\\n-0.50000000 0.00000000\\n')\nassert(solution('''3\n1 2 3\n4 5 6\n7 8 9''') == '1.00000000 3.00000000 5.00000000\\n3.00000000 5.00000000 7.00000000\\n5.00000000 7.00000000 9.00000000\\n0.00000000 -1.00000000 -2.00000000\\n1.00000000 0.00000000 -1.00000000\\n2.00000000 1.00000000 0.00000000\\n')\nassert(solution('''4\n1 2 3 4\n5 6 7 8\n9 10 11 12\n13 14 15 16\n''') == '1.00000000 3.00000000 5.00000000 7.00000000\\n3.00000000 5.00000000 7.00000000 9.00000000\\n5.00000000 7.00000000 9.00000000 11.00000000\\n7.00000000 9.00000000 11.00000000 13.00000000\\n9.00000000 11.00000000 13.00000000 15.00000000\\n11.00000000 13.00000000 15.00000000 17.00000000\\n0.00000000 -1.00000000 -2.00000000 -3.00000000\\n1.00000000 0.00000000 -1.00000000\\n2.00000000 1.00000000 0.00000000\\n3.00000000 -1.00000000 -1.00000000\\n')\nassert(solution('''5\n1 2 3 4 5\n6 7 8 9 10\n11 12 13 14 15\n16 17 18 19 20\n21 22 23 24 25\n''') == '1.00000000 3.00000000 5.00000000 7.00000000 9.00000000 11.00000000 13.00000000 15.00000000 17.00000000 19.00000000 21.00000000 23.00000000 25.00000000\\n3.00000000 5.00000000 7.00000000 9.00000000 11.00000000 13.00000000 15.00000000 17.00000000 19.00000000 21.00000000 23.00000000 25.00000000 27.00000000\\n5.00000000 7.00000000 9.00000000 11.00000000 13.00000000 15.00000000 17.00000000 19.00000000 21.00000000 23.00000000 25.00000000 27.00000000 29.00000000\\n7.00000000 9.00000000 11.00000000 13.00000000 15.00000000 17.00000000 19.00000000 21.00000000 23.00000000 25.00000000 27.00000000 29.00000000 31.00000000\\n9.00000000 11.00000000 13.00000000 15.00000000 17.00000000 19.00000000 21.00000000 23.00000000 25.00000000 27.00000000 29.00000000 31.00000000 33.00000000\\n11.00000000 13.00000000 15.00000000 17.00000000 19.00000000 21.00000000 23.00000000 25.00000000 27.00000000 29.00000000 31.00000000 33.00000000 35.00000000\\n13.00000000 15.00000000 17.00000000 19.00000000 21.00000000 23.00000000 25.00000000 27.00000000 29.00000000 31.00000000 33.00000000 35.00000000 37.00000000\\n15.00000000 17.00000000 19.00000000 21.00000000 23.00000000 25.00000000 27.00000000 29.00000000 31.00000000 33.00000000 35.00000000 37.00000000 39.00000000\\n17.00000000 19.00000000 21.00000000 23.00000000 25.00000000 27.00000000 29.00000000 31.00000000 33.00000000 35.00000000 37.00000000 39.00000000 41.00000000\\n19.00000000 21.00000000 23.00000000 25.00000000 27.00000000 29.00000000 31.00000000 33.00000000 35.00000000 37.00000000 39.00000000 41.00000000 43.00000000\\n21.00000000 23.00000000 25.00000000 27.00000000 29.00000000 31.00000000 33.00000000 35.00000000 37.00000000 39.00000000 41.00000000 43.00000000 45.00000000\\n23.00000000 25.00000000 27.00000000 29.00000000 31.00000000 33.00000000 35.00000000 37.00000000 39.00000000 41.00000000 43.00000000 45.00000000 47.00000000\\n25.00000000 27.00000000 29.00000000 31.00000000 33.00000000 35.00000000 37.00000000 39.00000000 41.00000000 43.00000000 45.00000000 47.00000000 49.00000000\\n27.00000000 29.00000000 31.00000000 33.00000000 35.00000000 37.00000000 39.00000000 41.00000000 43.00000000 45.00000000 47.00000000 49.00000000 51.00000000\\n29.00000000 31.00000000 33.00000000 35.00000000 37.00000000 39.00000000 41.00000000 43.00000000 45.00000000 47.00000000 49.00000000 51.00000000 53.00000000\\n31.00000000 33.00000000 35.00000000 37.00000000 39.00000000 41.00000000 43.00000000 45.00000000 47.00000000 49.00000000 51.00000000 53.00000000 55.00000000\\n33.00000000 35.00000000 37.00000000 39.00000000 41.00000000 43.00000000 45.00000000 47.00000000 49.00000000 51.00000000 53.00000000 55.00000000 57.00000000\\n35.00000000 37.00000000 39.00000000 41.00000000 43.00000000 45.00000000 47.00000000 49.00000000 51.00000000 53.00000000 55.00000000 57.00000000 59.00000000\\n37.00000000 39.00000000 41.00000000 43.00000000 45.00000000 47.00000000 49.00000000 51.00000000 53.00000000 55.00000000 57.00000000 59.00000000 61.00000000\\n39.00000000 41.00000000 43.00000000 45.00000000 47.00000000 49.00000000 51.00000000 53.00000000 55.00000000 57.00000000 59.00000000 61.00000000 63.00000000\\n41.00000000 43.00000000 45.00000000 47.00000000 49.00000000 51.00000000 53.00000000 55.00000000 57.00000000 59.00000000 61.00000000 63.00000000 65.00000000\\n43.00000000 45.00000000 47.00000000 49.00000000 51.00000000 53.00000000 55.00000000 57.00000000 59.00000000 61.00000000 63.00000000 65.00000000 67.00000000\\n45.00000000 47.00000000 49.00000000 51.00000000 53.00000000 55.00000000 57.00000000 59.00000000 61.00000000 63.00000000 65.00000000 67.00000000 69.00000000\\n47.00000000 49.00000000 51.00000000 53.00000000 55.00000000 57.00000000 59.00000000 61.00000000 63.00000000 65.00000000 67.00000000 69.00000000 71.00000000\\n49.00000000 51.00000000 53.00000000 55.00000000 57.00000000 59.00000000 61.00000000 63.00000000 65.00000000 67.00000000 69.00000000 71.00000000 73.00000000\\n51.00000000 53.00000000 55.00000000 57.00000000 59.00000000 61.00000000 63.00000000 65.00000000 67.00000000 69.00000000 71.00000000 73.00000000 75.00000000\\n53.00000000 55.00000000 57.00000000 59.00000000 61.00000000 63.00000000 65.00000000 67.00000000 69.00000000 71.00000000 73.00000000 75.00000000 77.00000000\\n55.00000000 57.00000000 59.00000000 61.00000000 63.00000000 65.00000000 67.00000000 69.00000000 71.00000000 73.00000000 75.00000000 77.00000000 79.00000000\\n57.00000000 59.00000000 61.00000000 63.00000000 65.00000000 67.00000000 69.00000000 71."
    },
    {
        "number": 2193,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    roads = [tuple(map(int, line.split())) for line in stdin.splitlines()[1:]]\n    graph = {i: set() for i in range(1, n + 1)}\n    for u, v, t in roads:\n        graph[u].add((v, t))\n        graph[v].add((u, t))\n    visited = {i: False for i in range(1, n + 1)}\n    visited[1] = True\n    queue = [(1, 0, 0)]\n    while queue:\n        u, t, d = queue.pop(0)\n        if u == n:\n            return str(d)\n        for v, t in graph[u]:\n            if not visited[v] and t == 0:\n                visited[v] = True\n                queue.append((v, 1, d + 1))\n            elif not visited[v] and t == 1:\n                visited[v] = True\n                queue.append((v, 0, d + 1))\n    return '-1'"
    },
    {
        "number": 2194,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    for _ in range(q):\n        l, r = [int(x) for x in stdin.split()]\n        if l == 0:\n            a[r] = a[r] + a[r - 1]\n        elif l == 1:\n            a[r] = a[r] + a[r - 1]\n            a[r - 1] = a[r - 1] + a[r - 2]\n        elif l == 2:\n            a[r] = a[r] + a[r - 1]\n            a[r - 1] = a[r - 1] + a[r - 2]\n            a[r - 2] = a[r - 2] + a[r - 3]\n        elif l == 3:\n            a[r] = a[r] + a[r - 1]\n            a[r - 1] = a[r - 1] + a[r - 2]\n            a[r - 2] = a[r - 2] + a[r - 3]\n            a[r - 3] = a[r - 3] + a[r - 4]\n        elif l == 4:\n            a[r] = a[r] + a[r - 1]\n            a[r - 1] = a[r - 1] + a[r - 2]\n            a[r - 2] = a[r - 2] + a[r - 3]\n            a[r - 3] = a[r - 3] + a[r - 4]\n            a[r - 4] = a[r - 4] + a[r - 5]\n        elif l == 5:\n            a[r] = a[r] + a[r - 1]\n            a[r - 1] = a[r - 1] + a[r - 2]\n            a[r - 2] = a[r - 2] + a[r - 3]\n            a[r - 3] = a[r - 3] + a[r - 4]\n            a[r - 4] = a[r - 4] + a[r - 5]\n            a[r - 5] = a[r - 5] + a[r - 6]\n        elif l == 6:\n            a[r] = a[r] + a[r - 1]\n            a[r - 1] = a[r - 1] + a[r - 2]\n            a[r - 2] = a[r - 2] + a[r - 3]\n            a[r - 3] = a[r - 3] + a[r - 4]\n            a[r - 4] = a[r - 4] + a[r - 5]\n            a[r - 5] = a[r - 5] + a[r - 6]\n            a[r - 6] = a[r - 6] + a[r - 7]\n        elif l == 7:\n            a[r] = a[r] + a[r - 1]\n            a[r - 1] = a[r - 1] + a[r - 2]\n            a[r - 2] = a[r - 2] + a[r - 3]\n            a[r - 3] = a[r - 3] + a[r - 4]\n            a[r - 4] = a[r - 4] + a[r - 5]\n            a[r - 5] = a[r - 5] + a[r - 6]\n            a[r - 6] = a[r - 6] + a[r - 7]\n            a[r - 7] = a[r - 7] + a[r - 8]\n        elif l == 8:\n            a[r] = a[r] + a[r - 1]\n            a[r - 1] = a[r - 1] + a[r - 2]\n            a[r - 2] = a[r - 2] + a[r - 3]\n            a[r - 3] = a[r - 3] + a[r - 4]\n            a[r - 4] = a[r - 4] + a[r - 5]\n            a[r - 5] = a[r - 5] + a[r - 6]\n            "
    },
    {
        "number": 2195,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2196,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    \n    return str(2**n - sum(a))"
    },
    {
        "number": 2197,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = [int(x) for x in stdin.split()]\n    p = [float(x) for x in stdin.split()]\n    p = [p[i] / sum(p) for i in range(x)]\n    return str(sum(p[:n]))"
    },
    {
        "number": 2198,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    s = stdin[n + 1:]\n    for _ in range(m):\n        x, c = [x for x in stdin.split()]\n        x = int(x)\n        c = c[0]\n        s = s[:x - 1] + c + s[x:]\n    return s"
    },
    {
        "number": 2199,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = []\n    for _ in range(n):\n        query = stdin.readline().split()\n        if query[0] == '1':\n            s.append(int(query[1]))\n        else:\n            s.sort()\n            print(s[-1] - sum(s) / len(s))"
    },
    {
        "number": 2200,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = [int(x) for x in stdin.split()]\n    x = [int(x) for x in stdin.split()]\n    x.sort()\n    x.reverse()\n    tokens = 0\n    for i in range(n):\n        tokens += x[i] * a // b\n    return str(tokens)"
    },
    {
        "number": 2201,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    d, n, m = [int(x) for x in stdin.split()]\n    gas_stations = [int(x) for x in stdin.split()]\n    gas_stations.sort()\n    gas_stations.append(d)\n    gas_stations.insert(0, 0)\n    gas_stations = [gas_stations[i] - gas_stations[i - 1] for i in range(1, len(gas_stations))]\n    gas_stations = [gas_stations[i] for i in range(len(gas_stations)) if gas_stations[i] > 0]\n    gas_stations = [gas_stations[i] for i in range(len(gas_stations)) if gas_stations[i] <= n]\n    if len(gas_stations) == 0:\n        return -1\n    return sum(gas_stations)\n\n\nassert(solution(stdin) == 22)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == -1"
    },
    {
        "number": 2202,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    s = 0\n    for i in range(n):\n        s += a[i] % p\n    return s"
    },
    {
        "number": 2203,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h, q = map(int, stdin.split())\n    tree = [0] * (2 ** h)\n    for _ in range(q):\n        i, l, r, ans = map(int, stdin.split())\n        if ans == 1:\n            if l == r:\n                tree[i] = l\n            else:\n                tree[i] = l + 1\n                tree[i + 1] = l\n        else:\n            if l == r:\n                print(tree[i])\n            else:\n                print(\"Data not sufficient!\")\n    return \"\""
    },
    {
        "number": 2204,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2205,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    p = list(map(int, stdin.readline().split()))\n    return str(sum(p) % (10 ** 9 + 7))"
    },
    {
        "number": 2206,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    points = [tuple(map(int, line.split())) for line in stdin.readlines()]\n    return str(solution_naive(n, points))\n\ndef"
    },
    {
        "number": 2207,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, C = [int(x) for x in stdin.split()]\n    bricks = [x for x in stdin.strip()]\n    bricks = [bricks[i:i+C] for i in range(0, len(bricks), C)]\n    bricks = [list(x) for x in bricks]\n    for r in range(R):\n        for c in range(C):\n            if bricks[r][c] == 'B':\n                bricks[r][c] = '.'\n                if c > 0:\n                    bricks[r][c-1] = '.'\n                if c < C-1:\n                    bricks[r][c+1] = '.'\n                if r > 0:\n                    bricks[r-1][c] = '.'\n                if r < R-1:\n                    bricks[r+1][c] = '.'\n    bricks = [''.join(x) for x in bricks]\n    bricks = [x for x in bricks if x!= '.']\n    bricks = [x for x in bricks if x!= 'B']\n    bricks = [x for x in bricks if x!= '.']\n    bricks = [x for x in bricks if x!= 'B']\n    bricks = [x for x in bricks if x!= '.']\n    bricks = [x for x in bricks if x!= 'B']\n    bricks = [x for x in bricks if x!= '.']\n    bricks = [x for x in bricks if x!= 'B']\n    bricks = [x for x in bricks if x!= '.']\n    bricks = [x for x in bricks if x!= 'B']\n    bricks = [x for x in bricks if x!= '.']\n    bricks = [x for x in bricks if x!= 'B']\n    bricks = [x for x in bricks if x!= '.']\n    bricks = [x for x in bricks if x!= 'B']\n    bricks = [x for x in bricks if x!= '.']\n    bricks = [x for x in bricks if x!= 'B']\n    bricks = [x for x in bricks if x!= '.']\n    bricks = [x for x in bricks if x!= 'B']\n    bricks = [x for x in bricks if x!= '.']\n    bricks = [x for x in bricks if x!= 'B']\n    bricks = [x for x in bricks if x!= '.']\n    bricks = [x for x in bricks if x!= 'B']\n    bricks = [x for x in bricks if x!= '.']\n    bricks = [x for x in bricks if x!= 'B']\n    bricks = [x for x in bricks if x!= '.']\n    bricks = [x for x in bricks if x!= 'B']\n    bricks = [x for x in bricks if x!= '.']\n    bricks = [x for x in bricks if x!= 'B']\n    bricks = [x for x in bricks if x!= '.']\n    bricks = [x for x in bricks if x!= 'B']\n    bricks = [x for x in bricks if x!= '.']\n    bricks = [x for x in bricks if x!= 'B']\n    bricks = [x for x in bricks if x!= '.']\n    bricks = [x for x in bricks if x!= 'B']\n    bricks = [x for x in bricks if x!= '.']\n    bricks = [x for x in bricks if x!= 'B']\n    bricks = [x for x in bricks if x!= '.']\n    bricks = [x for x in bricks if x!= 'B']\n    bricks = [x for x in bricks if x!= '.']\n    bricks = [x for x in bricks if x!= 'B']\n    bricks = [x for x in bricks if x!= '.']\n    bricks = [x for x in bricks if x!= 'B']\n    bricks = [x for x in bricks if x!= '.']\n    bricks = [x for x in bricks if x!= 'B']\n    bricks = [x for x in bricks if x!= '.']\n    bricks = [x for x in bricks if x!= 'B']\n    bricks = [x for x in bricks if x!= '.']\n    bricks = [x for x in bricks if x!= 'B']\n    bricks = [x for x in bricks if x!= '.']\n    bricks = [x for x in bricks if x!= 'B']\n    bricks = [x for x in bricks if x!= '.']\n    bricks = [x for x in bricks if x!= 'B']\n    bricks = [x for x in bricks if x!= '.']\n    bricks = [x for x in bricks if x!= 'B']\n    bricks = [x for x in bricks if x!= '.']\n    bricks = [x for x in bricks if x!= 'B']\n    bricks = [x for x in bricks if x!= '.']\n    bricks = [x for x in bricks if x!= 'B']\n    bricks = [x for x in bricks if x!= '.']\n    bricks = [x for x in bricks if x!= 'B']\n    bricks = [x for x in bricks if x!= '.']\n    bricks = [x for x in bricks if x!= 'B']\n    bricks = [x for x in bricks if x!= '.']\n    bricks = [x for x in bricks if x!= 'B']\n    bricks = [x for x in bricks if x!= '.']\n    bricks = [x for x in bricks if x!= 'B']\n    bricks = [x for x in bricks if x!= '.']\n    bricks = [x for x in bricks if x!= 'B']\n    bricks = [x for x in bricks if x!= '.']\n    bricks = [x for x in bricks if x!= 'B']\n    bricks = [x for x in bricks if x!= '.']\n    bricks = [x for x in bricks if x!= 'B']\n    bricks = [x for x in bricks if x!= '.']\n    bricks = [x for x in bricks if x!= 'B']\n    bricks = [x for x in bricks if x!= '.']\n    bricks = [x for x in"
    },
    {
        "number": 2208,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    return str(max(a) - min(b))"
    },
    {
        "number": 2209,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    strings = [stdin[i:i+n] for i in range(0, len(stdin), n)]\n    return max(strings, key=lambda x: sum(x.count(y) for y in'sh'))\n\nprint(solution(input()))\n\n\"\"\"\n"
    },
    {
        "number": 2210,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2211,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2212,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    matrix = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            matrix[i][j] = i * n + j + 1\n    for i in range(n):\n        for j in range(n):\n            print(matrix[i][j], end=\" \")\n        print()\n    for i in range(n):\n        print(matrix[i][i], end=\" \")\n    print()\n    for i in range(n):\n        print(matrix[i][n - 1 - i], end=\" \")\n    print()\n    return \"\""
    },
    {
        "number": 2213,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    arrays = [list(map(int, stdin.split())) for _ in range(n)]\n    if k == 0:\n        arrays.sort(key=lambda x: x[0])\n    else:\n        arrays.sort(key=lambda x: x[0], reverse=True)\n    pairs = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arrays[i][0] > arrays[j][0]:\n                pairs.append((i, j))\n    return str(len(pairs)) + '\\n' + '\\n'.join(str(x) for x in pairs)"
    },
    {
        "number": 2214,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [list(map(int, stdin.split())) for _ in range(n)]\n    \n    def is_good(r1, c1, r2, c2):\n        for i in range(r1, r2):\n            for j in range(c1, c2):\n                if a[i][j] == 1:\n                    return False\n        return True\n    \n    def is_good_2(r1, c1, r2, c2):\n        return (r2 - r1) % 2 == (c2 - c1) % 2\n    \n    def is_good_3(r1, c1, r2, c2):\n        return (r2 - r1) % 2 == 0 and (c2 - c1) % 2 == 0\n    \n    def is_good_4(r1, c1, r2, c2):\n        return (r2 - r1) % 2 == 0 and (c2 - c1) % 2 == 1\n    \n    def is_good_5(r1, c1, r2, c2):\n        return (r2 - r1) % 2 == 1 and (c2 - c1) % 2 == 0\n    \n    def is_good_6(r1, c1, r2, c2):\n        return (r2 - r1) % 2 == 1 and (c2 - c1) % 2 == 1\n    \n    def is_good_7(r1, c1, r2, c2):\n        return (r2 - r1) % 2 == 1 and (c2 - c1) % 2 == 1\n    \n    def is_good_8(r1, c1, r2, c2):\n        return (r2 - r1) % 2 == 0 and (c2 - c1) % 2 == 1\n    \n    def is_good_9(r1, c1, r2, c2):\n        return (r2 - r1) % 2 == 0 and (c2 - c1) % 2 == 0\n    \n    def is_good_10(r1, c1, r2, c2):\n        return (r2 - r1) % 2 == 0 and (c2 - c1) % 2 == 1\n    \n    def is_good_11(r1, c1, r2, c2):\n        return (r2 - r1) % 2 == 0 and (c2 - c1) % 2 == 0\n    \n    def is_good_12(r1, c1, r2, c2):\n        return (r2 - r1) % 2 == 0 and (c2 - c1) % 2 == 1\n    \n    def is_good_13(r1, c1, r2, c2):\n        return (r2 - r1) % 2 == 1 and (c2 - c1) % 2 == 0\n    \n    def is_good_14(r1, c1, r2, c2):\n        return (r2 - r1) % 2 == 1 and (c2 - c1) % 2 == 1\n    \n    def is_good_15(r1, c1, r2, c2):\n        return (r2 - r1) % 2 == 1 and (c2 - c1) % 2 == 1\n    \n    def is_good_16(r1, c1, r2, c2):\n        return (r2 - r1) % 2 == 0 and (c2 - c1) % 2 == 0\n    \n    def is_good_17(r1, c1, r2, c2):\n        return (r2 - r1) % 2 == 0 and (c2 - c1) % 2 == 1\n    \n    def is_good_18(r1, c1, r2, c2):\n        return (r2 - r1) % 2 == 0 and (c2 - c1) % 2 == 0\n    \n    def is_good_19(r1, c1, r2, c2):\n        return (r2 - r1) % 2 == 0 and (c2 - c1) % 2 == 1\n    \n    def is_good_20(r1, c1, r2, c2):\n        return (r2 - r1) % 2 == 1 and (c2 - c1) % 2 == 0\n    \n    def is_good_21(r1, c1, r2, c2):\n        return (r2 - r1) % 2 == 1 and (c2 - c1) % 2 == 1\n    \n    def is_good_22(r1, c1, r2, c2):\n        return (r2 - r1) % 2 == 1 and (c2 - c1) % 2 == 1\n    \n    def is_good_23(r1, c1, r2, c2):\n        return (r2 - r1) % 2 == 0 and (c2 - c1) % 2 == 0\n    \n    def is_good_24(r1, c1, r2, c2):\n        return (r2 - r1) % 2 == 0 and (c2 - c1) % 2 == 1\n    \n    def is_good_25(r1, c1, r2, c2):\n        return (r2 - r1) % 2 == 0 and (c2 - c1) % 2 == 0\n    \n    def is_good_26(r1, c1, r2, c2):\n        return (r2 - r1) % 2 == 0 and (c2 - c1) % 2 == 1\n    \n    def is_good_27(r1, c1, r2, c2):\n        return (r2 - r1) % 2 == 1 and (c2 - c1) % 2 == 0\n    \n    def is_good_28(r1, c1, r2"
    },
    {
        "number": 2215,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    flowers = [0] * n\n    for _ in range(m):\n        l, r = map(int, stdin.split())\n        flowers[l - 1:r] = [1] * (r - l + 1)\n    return ''.join(map(str, flowers))"
    },
    {
        "number": 2216,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    table = [[0 for _ in range(m)] for _ in range(n)]\n    for i in range(k):\n        x, y = [int(x) for x in stdin.split()]\n        table[x-1][y-1] = i+1\n    for row in table:\n        print(' '.join(str(x) for x in row))\n    return ''"
    },
    {
        "number": 2217,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    D = int(stdin)\n    q = int(stdin)\n    for _ in range(q):\n        v, u = map(int, stdin.split())\n        print(shortest_path(D, v, u))\n\ndef"
    },
    {
        "number": 2218,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    beauties = list(map(int, stdin.split()))\n    beauties.sort()\n    beauties = [0] + beauties\n    beauties_set = set()\n    beauties_set.add(0)\n    beauties_set.add(sum(beauties))\n    beauties_set.add(sum(beauties) * 2)\n    beauties_set.add(sum(beauties) * 3)\n    beauties_set.add(sum(beauties) * 4)\n    beauties_set.add(sum(beauties) * 5)\n    beauties_set.add(sum(beauties) * 6)\n    beauties_set.add(sum(beauties) * 7)\n    beauties_set.add(sum(beauties) * 8)\n    beauties_set.add(sum(beauties) * 9)\n    beauties_set.add(sum(beauties) * 10)\n    beauties_set.add(sum(beauties) * 11)\n    beauties_set.add(sum(beauties) * 12)\n    beauties_set.add(sum(beauties) * 13)\n    beauties_set.add(sum(beauties) * 14)\n    beauties_set.add(sum(beauties) * 15)\n    beauties_set.add(sum(beauties) * 16)\n    beauties_set.add(sum(beauties) * 17)\n    beauties_set.add(sum(beauties) * 18)\n    beauties_set.add(sum(beauties) * 19)\n    beauties_set.add(sum(beauties) * 20)\n    beauties_set.add(sum(beauties) * 21)\n    beauties_set.add(sum(beauties) * 22)\n    beauties_set.add(sum(beauties) * 23)\n    beauties_set.add(sum(beauties) * 24)\n    beauties_set.add(sum(beauties) * 25)\n    beauties_set.add(sum(beauties) * 26)\n    beauties_set.add(sum(beauties) * 27)\n    beauties_set.add(sum(beauties) * 28)\n    beauties_set.add(sum(beauties) * 29)\n    beauties_set.add(sum(beauties) * 30)\n    beauties_set.add(sum(beauties) * 31)\n    beauties_set.add(sum(beauties) * 32)\n    beauties_set.add(sum(beauties) * 33)\n    beauties_set.add(sum(beauties) * 34)\n    beauties_set.add(sum(beauties) * 35)\n    beauties_set.add(sum(beauties) * 36)\n    beauties_set.add(sum(beauties) * 37)\n    beauties_set.add(sum(beauties) * 38)\n    beauties_set.add(sum(beauties) * 39)\n    beauties_set.add(sum(beauties) * 40)\n    beauties_set.add(sum(beauties) * 41)\n    beauties_set.add(sum(beauties) * 42)\n    beauties_set.add(sum(beauties) * 43)\n    beauties_set.add(sum(beauties) * 44)\n    beauties_set.add(sum(beauties) * 45)\n    beauties_set.add(sum(beauties) * 46)\n    beauties_set.add(sum(beauties) * 47)\n    beauties_set.add(sum(beauties) * 48)\n    beauties_set.add(sum(beauties) * 49)\n    beauties_set.add(sum(beauties) * 50)\n    beauties_set.add(sum(beauties) * 51)\n    beauties_set.add(sum(beauties) * 52)\n    beauties_set.add(sum(beauties) * 53)\n    beauties_set.add(sum(beauties) * 54)\n    beauties_set.add(sum(beauties) * 55)\n    beauties_set.add(sum(beauties) * 56)\n    beauties_set.add(sum(beauties) * 57)\n    beauties_set.add(sum(beauties) * 58)\n    beauties_set.add(sum(beauties) * 59)\n    beauties_set.add(sum(beauties) * 60)\n    beauties_set.add(sum(beauties) * 61)\n    beauties_set.add(sum(beauties) * 62)\n    beauties_set.add(sum(beauties) * 63)\n    beauties_set.add(sum(beauties) * 64)\n    beauties_set.add(sum(beauties) * 65)\n    beauties_set.add(sum(beauties) * 66)\n    beauties_set.add(sum(beauties) * 67)\n    beauties_set.add(sum(beauties) * 68)\n    beauties_set.add(sum(beauties) * 69)\n    beauties_set.add(sum(beauties) * 70)\n    beauties_set.add(sum(beauties) * 71)\n    beauties_set.add(sum(beauties) * 72)\n    beauties_set.add(sum(beauties) * 73)\n    beauties_set.add(sum(beauties) * 74)\n    beauties_set.add(sum(beauties) * 75)\n    beauties_set.add(sum(beauties) * 76)\n    beauties_set.add(sum(beauties) * 77)\n    beauties_set.add(sum(beauties) * 78)\n    beauties_set.add(sum(beauties) * 79)\n    beauties_set.add(sum(beauties) * 80)\n    beauties_set.add(sum(beauties) * 81)\n    beauties_set.add(sum(beauties) * 82)\n    beauties_set.add(sum(beauties) * 83)\n    beauties_set.add("
    },
    {
        "number": 2219,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    steps = 0\n    while n!= 0:\n        if n % k == 0:\n            n //= k\n        else:\n            n -= 1\n        steps += 1\n    return str(steps)"
    },
    {
        "number": 2220,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a = a[:m]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a = a[:k]\n    a"
    },
    {
        "number": 2221,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1 = map(int, stdin.split())\n    x2, y2 = map(int, stdin.split())\n    n = int(stdin)\n    s = stdin[0]\n    if s == 'U':\n        y1 += 1\n    elif s == 'D':\n        y1 -= 1\n    elif s == 'L':\n        x1 -= 1\n    elif s == 'R':\n        x1 += 1\n    if x1 == x2 and y1 == y2:\n        return '0'\n    else:\n        return str(abs(x2 - x1) + abs(y2 - y1))"
    },
    {
        "number": 2222,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    nodes = [int(x) for x in stdin.readline().split()]\n    parents = [int(x) for x in stdin.readline().split()]\n    max_nodes = [0] * n\n    for i in range(n):\n        if nodes[i] == 0:\n            max_nodes[i] = 1\n        else:\n            max_nodes[i] = nodes[i]\n    for i in range(n - 1):\n        if parents[i] == -1:\n            continue\n        max_nodes[parents[i]] = max(max_nodes[parents[i]], max_nodes[i] + 1)\n    return str(max(max_nodes))"
    },
    {
        "number": 2223,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    edges = [tuple(map(int, line.split())) for line in stdin.readlines()]\n    edges.sort(key=lambda x: x[0])\n    \n    def is_even(n: int) -> bool:\n        return n % 2 == 0\n    \n    def is_connected(edges: list, u: int, v: int) -> bool:\n        visited = set()\n        \n        def dfs(u: int) -> bool:\n            if u in visited:\n                return False\n            visited.add(u)\n            for v in edges:\n                if v[0] == u:\n                    return dfs(v[1])\n            return True\n        \n        return dfs(u) and dfs(v)\n    \n    def remove_edge(edges: list, u: int, v: int) -> None:\n        edges.remove((u, v))\n        edges.remove((v, u))\n    \n    def remove_edges(edges: list, u: int, v: int) -> None:\n        edges.remove((u, v))\n        edges.remove((v, u))\n        edges.remove((u, v))\n        edges.remove((v, u))\n    \n    def remove_edges_from_u(edges: list, u: int) -> None:\n        for v in edges:\n            if v[0] == u:\n                remove_edge(edges, v[0], v[1])\n    \n    def remove_edges_from_v(edges: list, v: int) -> None:\n        for u in edges:\n            if u[0] == v:\n                remove_edge(edges, u[0], u[1])\n    \n    def remove_edges_from_u_and_v(edges: list, u: int, v: int) -> None:\n        remove_edges_from_u(edges, u)\n        remove_edges_from_v(edges, v)\n    \n    def remove_edges_from_u_and_v_and_neighbors(edges: list, u: int, v: int) -> None:\n        remove_edges_from_u(edges, u)\n        remove_edges_from_v(edges, v)\n        remove_edges_from_u_and_v(edges, u, v)\n    \n    def remove_edges_from_u_and_v_and_neighbors_and_neighbors(edges: list, u: int, v: int) -> None:\n        remove_edges_from_u(edges, u)\n        remove_edges_from_v(edges, v)\n        remove_edges_from_u_and_v(edges, u, v)\n        remove_edges_from_u_and_v_and_neighbors(edges, u, v)\n    \n    def remove_edges_from_u_and_v_and_neighbors_and_neighbors_and_neighbors(edges: list, u: int, v: int) -> None:\n        remove_edges_from_u(edges, u)\n        remove_edges_from_v(edges, v)\n        remove_edges_from_u_and_v(edges, u, v)\n        remove_edges_from_u_and_v_and_neighbors(edges, u, v)\n        remove_edges_from_u_and_v_and_neighbors_and_neighbors(edges, u, v)\n    \n    def remove_edges_from_u_and_v_and_neighbors_and_neighbors_and_neighbors_and_neighbors(edges: list, u: int, v: int) -> None:\n        remove_edges_from_u(edges, u)\n        remove_edges_from_v(edges, v)\n        remove_edges_from_u_and_v(edges, u, v)\n        remove_edges_from_u_and_v_and_neighbors(edges, u, v)\n        remove_edges_from_u_and_v_and_neighbors_and_neighbors(edges, u, v)\n        remove_edges_from_u_and_v_and_neighbors_and_neighbors_and_neighbors(edges, u, v)\n    \n    def remove_edges_from_u_and_v_and_neighbors_and_neighbors_and_neighbors_and_neighbors_and_neighbors(edges: list, u: int, v: int) -> None:\n        remove_edges_from_u(edges, u)\n        remove_edges_from_v(edges, v)\n        remove_edges_from_u_and_v(edges, u, v)\n        remove_edges_from_u_and_v_and_neighbors(edges, u, v)\n        remove_edges_from_u_and_v_and_neighbors_and_neighbors(edges, u, v)\n        remove_edges_from_u_and_v_and_neighbors_and_neighbors_and_neighbors(edges, u, v)\n    \n    def remove_edges_from_u_and_v_and_neighbors_and_neighbors_and_neighbors_and_neighbors_and_neighbors_and_neighbors(edges: list, u: int, v: int) -> None:\n        remove_edges_from_u(edges, u)\n        remove_edges_from_v(edges, v)\n        remove_edges_from_u_and_v(edges, u, v)\n        remove_edges_from_u_and_v_and_neighbors(edges, u, v)\n        remove_edges_from_u_and_v_and_neighbors_and_neighbors(edges, u, v)\n        remove_edges_from_u_and_v_and_neighbors_and_neighbors_and_neighbors(edges, u, v)\n    \n    def remove_edges_from_u_and_v_and_neighbors_and_neighbors_and_neighbors_and_neighbors_and_neighbors_and_neighbors_and_neighbors(edges: list, u: int, v: int) -> None:\n        remove_edges_from_u(edges, u)\n        remove_edges_from_v(edges, v)\n        remove_edges_from_u_and_v(edges, u, v)\n        remove_"
    },
    {
        "number": 2224,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = [int(x) for x in stdin.split()]\n    p = [int(x) for x in stdin.split()]\n    p.sort()\n    p.reverse()\n    p = p[:m]\n    p.sort()\n    p.reverse()\n    p = p[:n - m]\n    p.sort()\n    p.reverse()\n    p = p[:n - m - 1]\n    p.sort()\n    p.reverse()\n    p = p[:n - m - 1]\n    p.sort()\n    p.reverse()\n    p = p[:n - m - 1]\n    p.sort()\n    p.reverse()\n    p = p[:n - m - 1]\n    p.sort()\n    p.reverse()\n    p = p[:n - m - 1]\n    p.sort()\n    p.reverse()\n    p = p[:n - m - 1]\n    p.sort()\n    p.reverse()\n    p = p[:n - m - 1]\n    p.sort()\n    p.reverse()\n    p = p[:n - m - 1]\n    p.sort()\n    p.reverse()\n    p = p[:n - m - 1]\n    p.sort()\n    p.reverse()\n    p = p[:n - m - 1]\n    p.sort()\n    p.reverse()\n    p = p[:n - m - 1]\n    p.sort()\n    p.reverse()\n    p = p[:n - m - 1]\n    p.sort()\n    p.reverse()\n    p = p[:n - m - 1]\n    p.sort()\n    p.reverse()\n    p = p[:n - m - 1]\n    p.sort()\n    p.reverse()\n    p = p[:n - m - 1]\n    p.sort()\n    p.reverse()\n    p = p[:n - m - 1]\n    p.sort()\n    p.reverse()\n    p = p[:n - m - 1]\n    p.sort()\n    p.reverse()\n    p = p[:n - m - 1]\n    p.sort()\n    p.reverse()\n    p = p[:n - m - 1]\n    p.sort()\n    p.reverse()\n    p = p[:n - m - 1]\n    p.sort()\n    p.reverse()\n    p = p[:n - m - 1]\n    p.sort()\n    p.reverse()\n    p = p[:n - m - 1]\n    p.sort()\n    p.reverse()\n    p = p[:n - m - 1]\n    p.sort()\n    p.reverse()\n    p = p[:n - m - 1]\n    p.sort()\n    p.reverse()\n    p = p[:n - m - 1]\n    p.sort()\n    p.reverse()\n    p = p[:n - m - 1]\n    p.sort()\n    p.reverse()\n    p = p[:n - m - 1]\n    p.sort()\n    p.reverse()\n    p = p[:n - m - 1]\n    p.sort()\n    p.reverse()\n    p = p[:n - m - 1]\n    p.sort()\n    p.reverse()\n    p = p[:n - m - 1]\n    p.sort()\n    p.reverse()\n    p = p[:n - m - 1]\n    p.sort()\n    p.reverse()\n    p = p[:n - m - 1]\n    p.sort()\n    p.reverse()\n    p = p[:n - m - 1]\n    p.sort()\n    p.reverse()\n    p = p[:n - m - 1]\n    p.sort()\n    p.reverse()\n    p = p[:n - m - 1]\n    p.sort()\n    p.reverse()\n    p = p[:n - m - 1]\n    p.sort()\n    p.reverse()\n    p = p[:n - m - 1]\n    p.sort()\n    p.reverse()\n    p = p[:n - m - 1]\n    p.sort()\n    p.reverse()\n    p = p[:n - m - 1]\n    p.sort()\n    p.reverse()\n    p = p[:n - m - 1]\n    p.sort()\n    p.reverse()\n    p = p[:n - m - 1]\n    p.sort()\n    p.reverse()\n    p = p[:n - m - 1]\n    p.sort()\n    p.reverse()\n    p = p[:n - m - 1]\n    p.sort()\n    p.reverse()\n    p = p[:n - m - 1]\n    p.sort()\n    p.reverse()\n    p = p[:n - m - 1]\n    p.sort()\n    p.reverse()\n    p = p[:n - m - 1]\n    p.sort()\n    p.reverse()\n    p = p[:n - m - 1]\n    p.sort()\n    p.reverse()\n    p = p[:n - m - 1]\n    p.sort()\n    p.reverse()\n    p = p[:n - m - 1]\n    p.sort()\n    p.reverse()\n    p = p[:n - m - 1]\n    p.sort()\n    p.reverse()\n    p = p[:n - m - 1]\n    p.sort()\n    p.reverse()\n    p = p[:n - m - 1]\n    p.sort()\n    p.reverse()\n    p = p[:n - m - 1]\n    p.sort()\n    p.reverse()\n    p = p[:n - m - 1]\n    p.sort()\n    p.reverse()\n    p = p[:n - m - 1]\n    p.sort()\n    p.reverse()\n    p = p[:n - m - 1]\n    p.sort()\n    p.reverse()\n    p = p[:n - m - 1]\n    p.sort()\n    p.reverse()\n    p = p[:n - m - 1]\n"
    },
    {
        "number": 2225,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    for _ in range(m):\n        p, b = [int(x) for x in stdin.split()]\n        a[p] = b\n    return''.join(str(x) for x in a)"
    },
    {
        "number": 2226,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, q = [int(x) for x in stdin.split()]\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        v, u, w = [int(x) for x in stdin.split()]\n        graph[v - 1].append((u - 1, w))\n        graph[u - 1].append((v - 1, w))\n    max_weight = [0] * (q + 1)\n    for i in range(1, q + 1):\n        max_weight[i] = max_weight[i - 1] + sum(w for v, w in graph[i - 1])\n    return sum(max_weight[i] for i in range(1, q + 1)) % (10 ** 9 + 7)"
    },
    {
        "number": 2227,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 2228,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    people = [int(stdin.readline()) for _ in range(n)]\n    people.sort()\n    max_year = people[-1]\n    max_people = people[-1]\n    for i in range(n - 1, -1, -1):\n        if people[i] == max_people:\n            max_people += 1\n        else:\n            break\n    return f'{max_year} {max_people}'"
    },
    {
        "number": 2229,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = [2] * n\n    for i in range(1, n):\n        for j in range(i, n):\n            if gcd(a[i], a[j]) == 1:\n                b[i] = b[j] = a[i] * a[j]\n    return''.join(map(str, b))\n\ndef"
    },
    {
        "number": 2230,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2!= 0:\n        return '0'\n    return''.join(str(i) for i in range(1, n**2 + 1, 2))\n\nassert(solution('') == '0')\nassert(solution('1') == '1')\nassert(solution('2') == '1 4')\nassert(solution('3') == '2 3')\nassert(solution('4') == '1 4 2 3')\nassert(solution('5') == '1 4 2 3 5')\nassert(solution('6') == '1 4 2 3 6 5')\nassert(solution('7') == '1 4 2 3 6 7 5')\nassert(solution('8') == '1 4 2 3 6 8 7 5')\nassert(solution('9') == '1 4 2 3 6 9 8 7 5')\nassert(solution('10') == '1 4 2 3 6 10 9 8 7 5')\nassert(solution('11') == '1 4 2 3 6 11 10 9 8 7 5')\nassert(solution('12') == '1 4 2 3 6 12 11 10 9 8 7 5')\nassert(solution('13') == '1 4 2 3 6 13 12 11 10 9 8 7 5')\nassert(solution('14') == '1 4 2 3 6 14 13 12 11 10 9 8 7 5')\nassert(solution('15') == '1 4 2 3 6 15 14 13 12 11 10 9 8 7 5')\nassert(solution('16') == '1 4 2 3 6 16 15 14 13 12 11 10 9 8 7 5')\nassert(solution('17') == '1 4 2 3 6 17 16 15 14 13 12 11 10 9 8 7 5')\nassert(solution('18') == '1 4 2 3 6 18 17 16 15 14 13 12 11 10 9 8 7 5')\nassert(solution('19') == '1 4 2 3 6 19 18 17 16 15 14 13 12 11 10 9 8 7 5')\nassert(solution('20') == '1 4 2 3 6 20 19 18 17 16 15 14 13 12 11 10 9 8 7 5')\nassert(solution('21') == '1 4 2 3 6 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 5')\nassert(solution('22') == '1 4 2 3 6 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 5')\nassert(solution('23') == '1 4 2 3 6 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 5')\nassert(solution('24') == '1 4 2 3 6 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 5')\nassert(solution('25') == '1 4 2 3 6 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 5')\nassert(solution('26') == '1 4 2 3 6 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 5')\nassert(solution('27') == '1 4 2 3 6 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 5')\nassert(solution('28') == '1 4 2 3 6 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 5')\nassert(solution('29') == '1 4 2 3 6 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 5')\nassert(solution('30') == '1 4 2 3 6 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 5')\nassert(solution('31') == '1 4 2 3 6 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 5')\nassert(solution('32') == '1 4 2 3 6 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 5')\nassert(solution('33') == '1 4 2 3 6 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 5')\nassert(solution('34') == '1 4 2 3 6 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 5')\nassert(solution('35') == '1 4 2 3 6 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 5')\nassert(solution('36') == '1 4 2 3 6 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 5')\nassert(solution('37') == '1 4 2 3 6 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 5')\nassert(solution('38') == '1 4 2 3 6 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 5')\nassert(solution('39') == '1 4 2 3 6 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 5')\nassert(solution('40') == '1 4 2 3 6 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 5')\nassert(solution('41') == '1 4 2 3 6 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 5')\nassert(solution('42') == '1 4 2 3 6 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 5')\nassert(solution('43') == '1 4 2 3 6 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 5')\nassert(solution('44') == '1 4 2 3 6 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 5')\nassert(solution('45') == '1 4 2 3 6 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 5')\nassert(solution('46') == '1 4 2 3 6 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 5')\nassert(solution('47') == '1 4 2 3 6 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 5')\nassert(solution('48') == '1 4 2 3 6 48 47 46"
    },
    {
        "number": 2231,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline())\n    for _ in range(T):\n        n = int(stdin.readline())\n        sticks = [int(x) for x in stdin.readline().split()]\n        sticks.sort()\n        sticks.reverse()\n        print(*sticks[:4])"
    },
    {
        "number": 2232,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    edges = [tuple(map(int, line.split())) for line in stdin.readlines()]\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0] - x[1])\n    edges = sorted(edges, key=lambda x: x[1] - x[0])\n    edges = sorted(edges, key=lambda x: x[0] - x[1])\n    edges = sorted(edges, key=lambda x: x[1] - x[0])\n    edges = sorted(edges, key=lambda x: x[0] - x[1])\n    edges = sorted(edges, key=lambda x: x[1] - x[0])\n    edges = sorted(edges, key=lambda x: x[0] - x[1])\n    edges = sorted(edges, key=lambda x: x[1] - x[0])\n    edges = sorted(edges, key=lambda x: x[0] - x[1])\n    edges = sorted(edges, key=lambda x: x[1] - x[0])\n    edges = sorted(edges, key=lambda x: x[0] - x[1])\n    edges = sorted(edges, key=lambda x: x[1] - x[0])\n    edges = sorted(edges, key=lambda x: x[0] - x[1])\n    edges = sorted(edges, key=lambda x: x[1] - x[0])\n    edges = sorted(edges, key=lambda x: x[0] - x[1])\n    edges = sorted(edges, key=lambda x: x[1] - x[0])\n    edges = sorted(edges, key=lambda x: x[0] - x[1])\n    edges = sorted(edges, key=lambda x: x[1] - x[0])\n    edges = sorted(edges, key=lambda x: x[0] - x[1])\n    edges = sorted(edges, key=lambda x: x[1] - x[0])\n    edges = sorted(edges, key=lambda x: x[0] - x[1])\n    edges = sorted(edges, key=lambda x: x[1] - x[0])\n    edges = sorted(edges, key=lambda x: x[0] - x[1])\n    edges = sorted(edges, key=lambda x: x[1] - x[0])\n    edges = sorted(edges, key=lambda x: x[0] - x[1])\n    edges = sorted(edges, key=lambda x: x[1] - x[0])\n    edges = sorted(edges, key=lambda x: x[0] - x[1])\n    edges = sorted(edges, key=lambda x: x[1] - x[0])\n    edges = sorted(edges, key=lambda x: x[0] - x[1])\n    edges = sorted(edges, key=lambda x: x[1] - x[0])\n    edges = sorted(edges, key=lambda x: x[0] - x[1])\n    edges = sorted(edges, key=lambda x: x[1] - x[0])\n    edges = sorted(edges, key=lambda x: x[0] - x[1])\n    edges = sorted(edges, key=lambda x: x[1] - x[0])\n    edges = sorted(edges, key=lambda x: x[0] - x[1])\n    edges = sorted(edges, key=lambda x: x[1] - x[0])\n    edges = sorted(edges, key=lambda x: x[0] - x[1])\n    edges = sorted(edges, key=lambda x: x[1] - x[0])\n    edges = sorted(edges, key=lambda x: x[0] - x[1])\n    edges = sorted(edges, key=lambda x: x[1] - x[0])\n    edges = sorted(edges, key=lambda x: x[0] - x[1])\n    edges = sorted(edges, key=lambda x: x[1] - x[0])\n    edges = sorted(edges, key=lambda x: x[0] - x[1])\n    edges = sorted(edges, key=lambda x: x[1] - x[0])\n    edges = sorted(edges, key=lambda x: x[0] - x[1])\n    edges = sorted(edges, key=lambda x: x[1]"
    },
    {
        "number": 2233,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2234,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        n, k = map(int, stdin.readline().split())\n        print(solution_naive(n, k))\n\ndef"
    },
    {
        "number": 2235,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2236,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    a.sort()\n    ans = 0\n    for i in range(n):\n        ans += abs(a[i])\n        if i > 0:\n            ans -= abs(a[i] - a[i - 1])\n    return str(ans)"
    },
    {
        "number": 2237,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    S = set(int(x) for x in stdin.readline().split())\n    x = 0\n    for i in range(1, 2**n):\n        if i in S:\n            x = max(x, i)\n    return str(x)"
    },
    {
        "number": 2238,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        return \"*\" * n\n    else:\n        return \"*\" * (n - 1) + \"D\" + \"*\" * (n - 1)"
    },
    {
        "number": 2239,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        x = int(stdin.readline())\n        print(sum(2, 7, 8, 27))"
    },
    {
        "number": 2240,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.splitlines()[0]\n    t = stdin.splitlines()[1]\n    return str(solution_naive(s, t))\n\ndef"
    },
    {
        "number": 2241,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    \n    if n == 1:\n        return str(max(a[0], b[0]))\n    \n    max_joy = 0\n    for i in range(n):\n        if a[i] + b[i] > max_joy:\n            max_joy = a[i] + b[i]\n    \n    return str(max_joy)\n\nprint(solution(input()))\n"
    },
    {
        "number": 2242,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(stdin))"
    },
    {
        "number": 2243,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, q = [int(x) for x in stdin.split()]\n    t = [int(x) for x in stdin.split()]\n    friends = [0] * n\n    for i in range(n):\n        friends[i] = (t[i], i)\n    friends.sort()\n    for _ in range(q):\n        type_, id_ = [int(x) for x in stdin.split()]\n        if type_ == 1:\n            friends[id_ - 1] = (t[id_ - 1], id_)\n        elif type_ == 2:\n            if friends[id_ - 1][1] == 0:\n                print(\"NO\")\n            else:\n                print(\"YES\")"
    },
    {
        "number": 2244,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    if n < 2 or n > 3 * 10 ** 4 or m < 1 or m > n * (n - 1) / 2:\n        return -1\n    people = [i for i in range(1, n + 1)]\n    for _ in range(m):\n        a, b = [int(x) for x in stdin.split()]\n        if a > b:\n            a, b = b, a\n        if people[a - 1] == people[b - 1]:\n            continue\n        people[a - 1], people[b - 1] = people[b - 1], people[a - 1]\n    return''.join(str(x) for x in people)"
    },
    {
        "number": 2245,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2246,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    roads = [tuple(map(int, line.split())) for line in stdin.splitlines()[1:]]\n    return str(expected_length(roads, n))\n\ndef"
    },
    {
        "number": 2247,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        s, a, b, c = map(int, stdin.readline().strip().split())\n        print(s - a * (s - b) // c)\n    return \"\""
    },
    {
        "number": 2248,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    connectors = [int(x) for x in stdin.split()]\n    connectors.sort()\n    connectors = [connectors[i] - connectors[i - 1] for i in range(1, len(connectors))]\n    return str(max(connectors))\n"
    },
    {
        "number": 2249,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    numbers = [int(x) for x in stdin.readline().split()]\n    return str(solution_naive(n, numbers))\n\ndef"
    },
    {
        "number": 2250,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    \n    # n = 4\n    # s = 'RLRL'\n    # n = 6\n    # s = 'LRRRRL'\n    # n = 8\n    # s = 'RLLRRRLL'\n    # n = 12\n    # s = 'LLLLRRLRRRLL'\n    # n = 5\n    # s = 'RRRRR'\n    \n    # n = 4\n    # s = 'RLRL'\n    # n = 6\n    # s = 'LRRRRL'\n    # n = 8\n    # s = 'RLLRRRLL'\n    # n = 12\n    # s = 'LLLLRRLRRRLL'\n    # n = 5\n    # s = 'RRRRR'\n    \n    # n = 4\n    # s = 'RLRL'\n    # n = 6\n    # s = 'LRRRRL'\n    # n = 8\n    # s = 'RLLRRRLL'\n    # n = 12\n    # s = 'LLLLRRLRRRLL'\n    # n = 5\n    # s = 'RRRRR'\n    \n    # n = 4\n    # s = 'RLRL'\n    # n = 6\n    # s = 'LRRRRL'\n    # n = 8\n    # s = 'RLLRRRLL'\n    # n = 12\n    # s = 'LLLLRRLRRRLL'\n    # n = 5\n    # s = 'RRRRR'\n    \n    # n = 4\n    # s = 'RLRL'\n    # n = 6\n    # s = 'LRRRRL'\n    # n = 8\n    # s = 'RLLRRRLL'\n    # n = 12\n    # s = 'LLLLRRLRRRLL'\n    # n = 5\n    # s = 'RRRRR'\n    \n    # n = 4\n    # s = 'RLRL'\n    # n = 6\n    # s = 'LRRRRL'\n    # n = 8\n    # s = 'RLLRRRLL'\n    # n = 12\n    # s = 'LLLLRRLRRRLL'\n    # n = 5\n    # s = 'RRRRR'\n    \n    # n = 4\n    # s = 'RLRL'\n    # n = 6\n    # s = 'LRRRRL'\n    # n = 8\n    # s = 'RLLRRRLL'\n    # n = 12\n    # s = 'LLLLRRLRRRLL'\n    # n = 5\n    # s = 'RRRRR'\n    \n    # n = 4\n    # s = 'RLRL'\n    # n = 6\n    # s = 'LRRRRL'\n    # n = 8\n    # s = 'RLLRRRLL'\n    # n = 12\n    # s = 'LLLLRRLRRRLL'\n    # n = 5\n    # s = 'RRRRR'\n    \n    # n = 4\n    # s = 'RLRL'\n    # n = 6\n    # s = 'LRRRRL'\n    # n = 8\n    # s = 'RLLRRRLL'\n    # n = 12\n    # s = 'LLLLRRLRRRLL'\n    # n = 5\n    # s = 'RRRRR'\n    \n    # n = 4\n    # s = 'RLRL'\n    # n = 6\n    # s = 'LRRRRL'\n    # n = 8\n    # s = 'RLLRRRLL'\n    # n = 12\n    # s = 'LLLLRRLRRRLL'\n    # n = 5\n    # s = 'RRRRR'\n    \n    # n = 4\n    # s = 'RLRL'\n    # n = 6\n    # s = 'LRRRRL'\n    # n = 8\n    # s = 'RLLRRRLL'\n    # n = 12\n    # s = 'LLLLRRLRRRLL'\n    # n = 5\n    # s = 'RRRRR'\n    \n    # n = 4\n    # s = 'RLRL'\n    # n = 6\n    # s = 'LRRRRL'\n    # n = 8\n    # s = 'RLLRRRLL'\n    # n = 12\n    # s = 'LLLLRRLRRRLL'\n    # n = 5\n    # s = 'RRRRR'\n    \n    # n = 4\n    # s = 'RLRL'\n    # n = 6\n    # s = 'LRRRRL'\n    # n = 8\n    # s = 'RLLRRRLL'\n    # n = 12\n    # s = '"
    },
    {
        "number": 2251,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    graph = [[] for _ in range(n + 1)]\n    for _ in range(m):\n        a, b, c = [int(x) for x in stdin.split()]\n        graph[a].append((b, c))\n        graph[b].append((a, c))\n    q = int(stdin.readline())\n    for _ in range(q):\n        u, v = [int(x) for x in stdin.split()]\n        print(bfs(graph, u, v))\n\ndef"
    },
    {
        "number": 2252,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    P = [int(x) for x in stdin.split()]\n    for _ in range(m):\n        l, r, x = [int(x) for x in stdin.split()]\n        P[l - 1:r] = sorted(P[l - 1:r])\n        if P[l - 1]!= x:\n            print(\"No\")\n        else:\n            print(\"Yes\")"
    },
    {
        "number": 2253,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 2254,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    good_pairs = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] ^ a[j] == 0:\n                good_pairs += 1\n    return str(good_pairs)"
    },
    {
        "number": 2255,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    edges = [tuple(int(x) for x in stdin.split()) for _ in range(m)]\n    graph = {i: set() for i in range(1, n + 1)}\n    for u, v in edges:\n        graph[u].add(v)\n        graph[v].add(u)\n    visited = set()\n    def dfs(node):\n        if node in visited:\n            return\n        visited.add(node)\n        for neighbor in graph[node]:\n            dfs(neighbor)\n    dfs(1)\n    return''.join(str(x) for x in sorted(visited))"
    },
    {
        "number": 2256,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2257,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x_1, y_1, x_2, y_2 = [int(x) for x in stdin.split()]\n    x_1, y_1, x_2, y_2 = sorted([x_1, y_1, x_2, y_2])\n    r_1 = x_1 - x_2\n    r_2 = y_1 - y_2\n    if r_1 < 0:\n        r_1 = 0\n    if r_2 < 0:\n        r_2 = 0\n    return str(r_1 ** 2 + r_2 ** 2)"
    },
    {
        "number": 2258,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    if n == 1:\n        return '-1'\n    if n == 2:\n        return '0'\n    if n == 3:\n        return '1'\n    if n == 4:\n        return '2'\n    if n == 5:\n        return '3'\n    if n == 6:\n        return '4'\n    if n == 7:\n        return '5'\n    if n == 8:\n        return '6'\n    if n == 9:\n        return '7'\n    if n == 10:\n        return '8'\n    if n == 11:\n        return '9'\n    if n == 12:\n        return '10'\n    if n == 13:\n        return '11'\n    if n == 14:\n        return '12'\n    if n == 15:\n        return '13'\n    if n == 16:\n        return '14'\n    if n == 17:\n        return '15'\n    if n == 18:\n        return '16'\n    if n == 19:\n        return '17'\n    if n == 20:\n        return '18'\n    if n == 21:\n        return '19'\n    if n == 22:\n        return '20'\n    if n == 23:\n        return '21'\n    if n == 24:\n        return '22'\n    if n == 25:\n        return '23'\n    if n == 26:\n        return '24'\n    if n == 27:\n        return '25'\n    if n == 28:\n        return '26'\n    if n == 29:\n        return '27'\n    if n == 30:\n        return '28'\n    if n == 31:\n        return '29'\n    if n == 32:\n        return '30'\n    if n == 33:\n        return '31'\n    if n == 34:\n        return '32'\n    if n == 35:\n        return '33'\n    if n == 36:\n        return '34'\n    if n == 37:\n        return '35'\n    if n == 38:\n        return '36'\n    if n == 39:\n        return '37'\n    if n == 40:\n        return '38'\n    if n == 41:\n        return '39'\n    if n == 42:\n        return '40'\n    if n == 43:\n        return '41'\n    if n == 44:\n        return '42'\n    if n == 45:\n        return '43'\n    if n == 46:\n        return '44'\n    if n == 47:\n        return '45'\n    if n == 48:\n        return '46'\n    if n == 49:\n        return '47'\n    if n == 50:\n        return '48'\n    if n == 51:\n        return '49'\n    if n == 52:\n        return '50'\n    if n == 53:\n        return '51'\n    if n == 54:\n        return '52'\n    if n == 55:\n        return '53'\n    if n == 56:\n        return '54'\n    if n == 57:\n        return '55'\n    if n == 58:\n        return '56'\n    if n == 59:\n        return '57'\n    if n == 60:\n        return '58'\n    if n == 61:\n        return '59'\n    if n == 62:\n        return '60'\n    if n == 63:\n        return '61'\n    if n == 64:\n        return '62'\n    if n == 65:\n        return '63'\n    if n == 66:\n        return '64'\n    if n == 67:\n        return '65'\n    if n == 68:\n        return '66'\n    if n == 69:\n        return '67'\n    if n == 70:\n        return '68'\n    if n == 71:\n        return '69'\n    if n == 72:\n        return '70'\n    if n == 73:\n        return '71'\n    if n == 74:\n        return '72'\n    if n == 75:\n        return '73'\n    if n == 76:\n        return '74'\n    if n == 77:\n        return '75'\n    if n == 78:\n        return '76'\n    if n == 79:\n        return '77'\n    if n == 80:\n        return '78'\n    if n == 81:\n        return '79'\n    if n == 82:\n        return '80'\n    if n == 83:\n        return '81'\n    if n == 84:\n        return '82'\n    if n == 85:\n        return '83'\n    if n == 86:\n        return '84'\n    if n == 87:\n        return '85'\n    if n == 88:\n        return '86'\n    if n == 89:\n        return '87'\n    if n == 90:\n        return '88'\n    if n == 91:\n        return '89'\n    if n == 92:\n        return '90'\n    if n == 93:\n        return '91'\n    if n == 94:\n        return '92'\n    if n == 95:\n        return '93'\n    if n == 96:\n        return '94'\n    if n == 97:\n        return '95'\n    if n == 98:\n        return '96'\n    if n == 99:\n        return '97'\n    if n == 100:\n        return '98'\n    if n == 101:\n        return '99'\n    if n == 102:\n        return '100'\n    if n == 103:\n        return '101'\n    if n == 104:\n        return '102'\n    if n == 105:\n        return '103'\n    if n == 106:\n        "
    },
    {
        "number": 2259,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    g = Graph(n)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] > a[j]:\n                g.addEdge(i, j)\n    return g.maximalIndependentSet()\n\ndef"
    },
    {
        "number": 2260,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(5**n)[-2:]"
    },
    {
        "number": 2261,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    return '\\n'.join([''.join(['*' if (i + j) % 2 == 0 else '+' for j in range(2 ** k)]) for i in range(2 ** k)])"
    },
    {
        "number": 2262,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    words = stdin.readline().split()\n    return str(len(set(root for word in words for root in word if word.count(root) == 1)))"
    },
    {
        "number": 2263,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    roads = [tuple(map(int, line.split())) for line in stdin.readlines()]\n    q = int(stdin.readline())\n    changes = [tuple(map(int, line.split())) for line in stdin.readlines()]\n    roads.sort(key=lambda x: x[2])\n    changes.sort(key=lambda x: x[1])\n    cost = 0\n    for change in changes:\n        cost += roads[change[0] - 1][2]\n        roads[change[0] - 1] = roads[change[0] - 1][:2]\n    return str(cost)"
    },
    {
        "number": 2264,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 2265,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2266,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, d = [int(x) for x in stdin.split()]\n    cities = [int(x) for x in stdin.split()]\n    roads = [tuple(int(x) for x in stdin.split()) for _ in range(n - 1)]\n    cities = set(cities)\n    cities.add(0)\n    cities.add(n)\n    cities = list(cities)\n    roads = list(roads)\n    roads.append((0, n))\n    roads.append((n, 0))\n    roads = sorted(roads, key=lambda x: x[0])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0] - x[1])\n    roads = sorted(roads, key=lambda x: x[1] - x[0])\n    roads = sorted(roads, key=lambda x: x[0] - x[1])\n    roads = sorted(roads, key=lambda x: x[1] - x[0])\n    roads = sorted(roads, key=lambda x: x[0] - x[1])\n    roads = sorted(roads, key=lambda x: x[1] - x[0])\n    roads = sorted(roads, key=lambda x: x[0] - x[1])\n    roads = sorted(roads, key=lambda x: x[1] - x[0])\n    roads = sorted(roads, key=lambda x: x[0] - x[1])\n    roads = sorted(roads, key=lambda x: x[1] - x[0])\n    roads = sorted(roads, key=lambda x: x[0] - x[1])\n    roads = sorted(roads, key=lambda x: x[1] - x[0])\n    roads = sorted(roads, key=lambda x: x[0] - x[1])\n    roads = sorted(roads, key=lambda x: x[1] - x[0])\n    roads = sorted(roads, key=lambda x: x[0] - x[1])\n    roads = sorted(roads, key=lambda x: x[1] - x[0])\n    roads = sorted(roads, key=lambda x: x[0] - x[1])\n    roads = sorted(roads, key=lambda x: x[1] - x[0])\n    roads = sorted(roads, key=lambda x: x[0] - x[1])\n    roads = sorted(roads, key=lambda x: x[1] - x[0])\n    roads = sorted(roads, key=lambda x: x[0] - x[1])\n    roads = sorted(roads, key=lambda x: x[1] - x[0])\n    roads = sorted(roads, key=lambda x: x[0] - x[1])\n    roads = sorted(roads, key=lambda x: x[1] - x[0])\n    roads = sorted(roads, key=lambda x: x[0] - x[1])\n    roads = sorted(roads, key=lambda x: x[1] - x[0])\n    roads = sorted(roads, key=lambda x: x[0] - x[1])\n    roads = sorted(roads, key=lambda x: x[1] - x[0])\n    roads = sorted(roads, key=lambda x: x[0] - x[1])\n    roads = sorted(roads, key=lambda x: x[1] - x[0])\n    roads = sorted(roads, key=lambda x: x[0] - x[1])\n    roads = sorted(roads, key=lambda x: x[1] - x[0])\n    roads = sorted(roads, key=lambda x: x[0] - x[1])\n    roads = sorted(roads, key=lambda x: x[1] - x[0])\n    roads = sorted(roads, key=lambda x: x[0] - x[1])\n    roads = sorted(roads, key=lambda x: x[1] - x[0])\n    roads = sorted(roads, key=lambda x: x[0] - x[1])\n    roads = sorted(roads, key=lambda x: x[1] - x[0])\n    roads = sorted(roads, key=lambda x: x[0] - x[1])\n    roads = sorted(roads, key=lambda x: x[1] - x[0])\n    roads = sorted(roads, key=lambda x: x[0] - x[1])\n    roads = sorted(roads, key=lambda x: x[1] - x[0])\n    roads = sorted(roads, key=lambda x: x[0] - x[1])\n    roads = sorted(roads, key=lambda x: x[1] - x[0])\n    roads = sorted(roads, key=lambda x: x[0] - x[1])\n    roads = sorted(roads, key=lambda x: x[1] - x[0])\n    roads = sorted(roads, key=lambda x: x[0] - x[1])\n    roads = sorted(roads, key=lambda x: x[1] - x[0])\n    roads = sorted(roads, key=lambda x: x[0] - x[1])\n    roads = sorted(roads, key=lambda x: x[1] - x[0])\n    roads = sorted(roads, key=lambda x: x[0] - x[1])\n    roads = sorted(roads, key=lambda x: x[1] - x[0])\n    roads = sorted(roads, key=lambda x: x[0] - x[1])\n    roads = sorted(roads, key=lambda x: x[1]"
    },
    {
        "number": 2267,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    strings = [stdin.readline().strip() for _ in range(n)]\n    return min(strings, key=lambda s: s + s[::-1])\n"
    },
    {
        "number": 2268,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    name = stdin.strip()\n    for _ in range(m):\n        x, y = [x for x in stdin.split()]\n        name = name.replace(x, y)\n    return name"
    },
    {
        "number": 2269,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2270,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    planks = list(map(int, stdin.readline().split()))\n    q = int(stdin.readline())\n    for _ in range(q):\n        type, x = stdin.readline().split()\n        x = int(x)\n        if type == '+':\n            planks.remove(x)\n        else:\n            planks.append(x)\n    if len(planks) % 4 == 0:\n        return 'YES'\n    return 'NO'"
    },
    {
        "number": 2271,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    edges = [tuple(map(int, line.split())) for line in stdin.readlines()]\n    return str(count_lifelines(n, edges))\n\ndef"
    },
    {
        "number": 2272,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    for _ in range(n):\n        a, b = map(int, stdin.readline().split())\n        if a > b:\n            a, b = b, a\n        if a == b:\n            print(\"YES\")\n        else:\n            print(\"NO\")"
    },
    {
        "number": 2273,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        a, b = [int(x) for x in stdin.split()]\n        graph[a - 1].append(b - 1)\n        graph[b - 1].append(a - 1)\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            if j in graph[i]:\n                continue\n            for k in range(j + 1, n):\n                if k in graph[i] or k in graph[j]:\n                    continue\n                if i in graph[k] or j in graph[k]:\n                    continue\n                print(i + 1, j + 1, k + 1)\n                return\n    print(-1)"
    },
    {
        "number": 2274,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 2275,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        k = int(stdin.readline().strip())\n        s = stdin.readline().strip()\n        print(solve(s))\n\ndef"
    },
    {
        "number": 2276,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    a = list(map(int, stdin.readline().split()))\n    \n    dp = [0] * (n + 1)\n    dp[0] = 0\n    \n    for i in range(1, n + 1):\n        dp[i] = dp[i - 1]\n        \n        if s[i - 1] == s[i - 2]:\n            dp[i] = max(dp[i], dp[i - 1] + a[i - 1])\n    \n    return str(dp[n])\n\nprint(solution(input()))\n"
    },
    {
        "number": 2277,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    m = int(stdin.readline())\n    queries = [list(map(int, stdin.readline().split())) for _ in range(m)]\n    inversions = 0\n    for l, r in queries:\n        for i in range(l, r + 1):\n            inversions += (a[i - 1] > a[i])\n    return 'odd' if inversions % 2 else 'even'"
    },
    {
        "number": 2278,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for _ in range(n):\n        a, b, m = [int(x) for x in stdin.split()]\n        if m == 1:\n            print(-1)\n        else:\n            k = 1\n            while k <= 50:\n                x = [a]\n                for _ in range(k):\n                    x.append(x[-1] + x[-2] + x[-3])\n                if x[-1] == b:\n                    print(*x)\n                    break\n                k += 1"
    },
    {
        "number": 2279,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    teams = [0] * n\n    for i in range(n):\n        teams[i] = int(stdin.readline())\n    return''.join(map(str, teams))"
    },
    {
        "number": 2280,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    plank_lengths = [int(x) for x in stdin.readline().split()]\n    plank_lengths.sort()\n    plank_lengths.reverse()\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)\n    plank_lengths.append(0)"
    },
    {
        "number": 2281,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [i for i in range(1, n + 1)]\n    a.sort()\n    a.sort(key=lambda x: x * 2)\n    return''.join(map(str, a))"
    },
    {
        "number": 2282,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_01(stdin))\n\ndef"
    },
    {
        "number": 2283,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    edges = [tuple(int(x) for x in stdin.split()) for _ in range(m)]\n    graph = [[] for _ in range(n)]\n    for v, u, w in edges:\n        graph[v].append((u, w))\n        graph[u].append((v, w))\n    \n    def dfs(u, visited, weight):\n        visited[u] = True\n        for v, w in graph[u]:\n            if not visited[v]:\n                weight += w\n                weight = dfs(v, visited, weight)\n        return weight\n    \n    visited = [False] * n\n    max_weight = 0\n    for i in range(n):\n        if not visited[i]:\n            max_weight = max(max_weight, dfs(i, visited, 0))\n    return max_weight"
    },
    {
        "number": 2284,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    b = [int(x) for x in stdin.split()]\n    return str(min(sum(a[i:i+k]) + sum(b[i:i+k]) for i in range(n-k+1)))"
    },
    {
        "number": 2285,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for _ in range(n):\n        print(restore_ipv6_address(stdin))\n    return ''\n\ndef"
    },
    {
        "number": 2286,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 2 or n > 14:\n        raise ValueError(\"n must be between 2 and 14\")\n    \n    # generate all possible permutations\n    all_permutations = list(itertools.product([0, 1], repeat=n-1))\n    \n    # count the number of permutations that produce the given string\n    count = 0\n    for permutation in all_permutations:\n        if permutation.count(1) == n-1:\n            count += 1\n    \n    return str(count)"
    },
    {
        "number": 2287,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\nfrom sys import stdin, stdout\n\ndef"
    },
    {
        "number": 2288,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    b = [int(x) for x in stdin.readline().split()]\n    if a == sorted(a):\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 2289,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    k = list(map(int, stdin.split()))\n    return '\\n'.join(map(str, [sum(a[:i]) for i in range(1, n + 1)]))"
    },
    {
        "number": 2290,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    edges = [set() for _ in range(n)]\n    for _ in range(m):\n        u, v = [int(x) for x in stdin.split()]\n        edges[u - 1].add(v - 1)\n        edges[v - 1].add(u - 1)\n    \n    # find the first node that can reach all other nodes\n    for i in range(n):\n        if len(edges[i]) == n - 1:\n            break\n    \n    # find the first node that can reach all other nodes\n    for i in range(n):\n        if len(edges[i]) == n - 1:\n            break\n    \n    # find the first node that can reach all other nodes\n    for i in range(n):\n        if len(edges[i]) == n - 1:\n            break\n    \n    # find the first node that can reach all other nodes\n    for i in range(n):\n        if len(edges[i]) == n - 1:\n            break\n    \n    # find the first node that can reach all other nodes\n    for i in range(n):\n        if len(edges[i]) == n - 1:\n            break\n    \n    # find the first node that can reach all other nodes\n    for i in range(n):\n        if len(edges[i]) == n - 1:\n            break\n    \n    # find the first node that can reach all other nodes\n    for i in range(n):\n        if len(edges[i]) == n - 1:\n            break\n    \n    # find the first node that can reach all other nodes\n    for i in range(n):\n        if len(edges[i]) == n - 1:\n            break\n    \n    # find the first node that can reach all other nodes\n    for i in range(n):\n        if len(edges[i]) == n - 1:\n            break\n    \n    # find the first node that can reach all other nodes\n    for i in range(n):\n        if len(edges[i]) == n - 1:\n            break\n    \n    # find the first node that can reach all other nodes\n    for i in range(n):\n        if len(edges[i]) == n - 1:\n            break\n    \n    # find the first node that can reach all other nodes\n    for i in range(n):\n        if len(edges[i]) == n - 1:\n            break\n    \n    # find the first node that can reach all other nodes\n    for i in range(n):\n        if len(edges[i]) == n - 1:\n            break\n    \n    # find the first node that can reach all other nodes\n    for i in range(n):\n        if len(edges[i]) == n - 1:\n            break\n    \n    # find the first node that can reach all other nodes\n    for i in range(n):\n        if len(edges[i]) == n - 1:\n            break\n    \n    # find the first node that can reach all other nodes\n    for i in range(n):\n        if len(edges[i]) == n - 1:\n            break\n    \n    # find the first node that can reach all other nodes\n    for i in range(n):\n        if len(edges[i]) == n - 1:\n            break\n    \n    # find the first node that can reach all other nodes\n    for i in range(n):\n        if len(edges[i]) == n - 1:\n            break\n    \n    # find the first node that can reach all other nodes\n    for i in range(n):\n        if len(edges[i]) == n - 1:\n            break\n    \n    # find the first node that can reach all other nodes\n    for i in range(n):\n        if len(edges[i]) == n - 1:\n            break\n    \n    # find the first node that can reach all other nodes\n    for i in range(n):\n        if len(edges[i]) == n - 1:\n            break\n    \n    # find the first node that can reach all other nodes\n    for i in range(n):\n        if len(edges[i]) == n - 1:\n            break\n    \n    # find the first node that can reach all other nodes\n    for i in range(n):\n        if len(edges[i]) == n - 1:\n            break\n    \n    # find the first node that can reach all other nodes\n    for i in range(n):\n        if len(edges[i]) == n - 1:\n            break\n    \n    # find the first node that can reach all other nodes\n    for i in range(n):\n        if len(edges[i]) == n - 1:\n            break\n    \n    # find the first node that can reach all other nodes\n    for i in range(n):\n        if len(edges[i]) == n - 1:\n            break\n    \n    # find the first node that can reach all other nodes\n    for i in range(n):\n        if len(edges[i]) == n - 1:\n            break\n    \n    # find the first node that can reach all other nodes\n    for i in range(n):\n        if len(edges[i]) == n - 1:\n            break\n    \n    # find the first node that can reach all other nodes\n    for i in range(n):\n        if len(edges[i]) == n - 1:\n            break\n    \n    # find the first node that can reach all other nodes\n    for i in range(n):\n        if len(edges[i]) == n - 1:\n            break\n    \n    # find the first node that can reach all other nodes\n    for i in range(n):\n        if len(edges[i]) == n - 1:\n            break\n    \n    # find the first node that can reach all other nodes\n    for i in range(n):\n        if len(edges[i]) == n - 1:\n            break\n    \n    # find the first node that can reach all other nodes\n    for i in range(n):\n        if len(edges[i]) == n - 1:\n            break\n    \n    # find the first node that can reach all other nodes\n    for i in range(n):\n        "
    },
    {
        "number": 2291,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    x = 0\n    for i in range(n):\n        x = x ^ a[i]\n    return str(x)"
    },
    {
        "number": 2292,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        a = [int(x) for x in stdin.readline().strip().split()]\n        b = [int(x) for x in stdin.readline().strip().split()]\n        if is_valid(a, b):\n            print(\"Yes\")\n        else:\n            print(\"No\")\n\ndef"
    },
    {
        "number": 2293,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, n = map(int, stdin.split())\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.sort()\n    a.reverse()\n"
    },
    {
        "number": 2294,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    queries = [tuple(map(int, line.split())) for line in stdin.readlines()]\n    return '\\n'.join(str(len(queries)) for _, _, _ in queries)"
    },
    {
        "number": 2295,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    l, r = 1, n\n    while l < r:\n        if a[l] > a[r]:\n            a[l], a[r] = a[r], a[l]\n        l += 1\n        r -= 1\n    return str(float(l - 1) / (n - 1))\n\nassert(solution('''2\n1 2''') == '1.500000')\nassert(solution('''2\n2 2''') == '1.000000')\nassert(solution('''3\n1 2 3''') == '1.500000')\nassert(solution('''3\n2 2 3''') == '1.000000')\nassert(solution('''4\n1 2 3 4''') == '1.500000')\nassert(solution('''4\n2 2 3 4''') == '1.000000')\nassert(solution('''5\n1 2 3 4 5''') == '1.500000')\nassert(solution('''5\n2 2 3 4 5''') == '1.000000')\nassert(solution('''6\n1 2 3 4 5 6''') == '1.500000')\nassert(solution('''6\n2 2 3 4 5 6''') == '1.000000')\nassert(solution('''7\n1 2 3 4 5 6 7''') == '1.500000')\nassert(solution('''7\n2 2 3 4 5 6 7''') == '1.000000')\nassert(solution('''8\n1 2 3 4 5 6 7 8''') == '1.500000')\nassert(solution('''8\n2 2 3 4 5 6 7 8''') == '1.000000')\nassert(solution('''9\n1 2 3 4 5 6 7 8 9''') == '1.500000')\nassert(solution('''9\n2 2 3 4 5 6 7 8 9''') == '1.000000')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '1.500000')\nassert(solution('''10\n2 2 3 4 5 6 7 8 9 10''') == '1.000000')\nassert(solution('''11\n1 2 3 4 5 6 7 8 9 10 11''') == '1.500000')\nassert(solution('''11\n2 2 3 4 5 6 7 8 9 10 11''') == '1.000000')\nassert(solution('''12\n1 2 3 4 5 6 7 8 9 10 11 12''') == '1.500000')\nassert(solution('''12\n2 2 3 4 5 6 7 8 9 10 11 12''') == '1.000000')\nassert(solution('''13\n1 2 3 4 5 6 7 8 9 10 11 12 13''') == '1.500000')\nassert(solution('''13\n2 2 3 4 5 6 7 8 9 10 11 12 13''') == '1.000000')\nassert(solution('''14\n1 2 3 4 5 6 7 8 9 10 11 12 13 14''') == '1.500000')\nassert(solution('''14\n2 2 3 4 5 6 7 8 9 10 11 12 13 14''') == '1.000000')\nassert(solution('''15\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15''') == '1.500000')\nassert(solution('''15\n2 2 3 4 5 6 7 8 9 10 11 12 13 14 15''') == '1.000000')\nassert(solution('''16\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16''') == '1.500000')\nassert(solution('''16\n2 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16''') == '1.000000')\nassert(solution('''17\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17''') == '1.500000')\nassert(solution('''17\n2 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17''') == '1.000000')\nassert(solution('''18\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18''') == '1.500000')\nassert(solution('''18\n2 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18''') == '1.000000')\nassert(solution('''19\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19''') == '1.500000')\nassert(solution('''19\n2 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19''') == '1.000000')\nassert(solution('''20\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20''') == '1.500000')\nassert(solution('''20\n2 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20''') == '1.000000')\nassert(solution('''21\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21''') == '1.500000')\nassert(solution('''21\n2 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21''') == '1.000000')\nassert(solution('''22\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22''') == '1.500000')\nassert(solution('''22\n2 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22''') == '1.000000')\nassert(solution('''23\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23''') == '1.500000')\nassert(solution('''23\n2 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23''') == '1.000000')\nassert(solution('''24\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24''') == '1.500000')\nassert(solution('''24\n2 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24''') == '1.000000')\nassert(solution('''25\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25''') == '1.500000')\nassert(solution('''25\n2 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25''') == '1.000000')\nassert(solution('''26\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26''') == '1.500000')\nassert(solution('''26\n2 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26''') == '1.000000')\nassert(solution('''27\n1 2 3 4 5 6 7 8 9 10 11 12 13"
    },
    {
        "number": 2296,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = [int(x) for x in stdin.split()]\n    polygon = [tuple(map(int, stdin.split())) for _ in range(n)]\n    queries = [tuple(map(int, stdin.split())) for _ in range(q)]\n    return '\\n'.join(str(solution_for_query(polygon, query)) for query in queries)\n\ndef"
    },
    {
        "number": 2297,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n    for _ in range(n):\n        l, r = [int(x) for x in stdin.readline().strip().split()]\n        print(sum(a[l-1:r]))"
    },
    {
        "number": 2298,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        a, b, q = [int(x) for x in stdin.readline().strip().split()]\n        queries = [int(x) for x in stdin.readline().strip().split()]\n        print(*[(x % b) % a for x in queries])"
    },
    {
        "number": 2299,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    table = [int(x) for x in stdin.split()]\n    k = int(stdin.readline())\n    for _ in range(k):\n        l, r = [int(x) for x in stdin.split()]\n        for i in range(l - 1, r):\n            if table[i] > table[i + 1]:\n                return \"No\"\n    return \"Yes\""
    },
    {
        "number": 2300,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    for _ in range(m):\n        t, x, v = [int(x) for x in stdin.split()]\n        if t == 1:\n            a[x] = v\n        elif t == 2:\n            a[x] += v\n        elif t == 3:\n            a[x] += v\n    return''.join(str(x) for x in a)"
    },
    {
        "number": 2301,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    prices = list(map(int, stdin.readline().split()))\n    prices.sort()\n    max_price = 0\n    for i in range(n):\n        if i == 0:\n            max_price += 1\n        elif prices[i] == prices[i - 1]:\n            max_price += 1\n        else:\n            max_price += 2\n    return str(max_price) + '\\n' +''.join(map(str, prices))"
    },
    {
        "number": 2302,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    goal = [int(x) for x in stdin.readline().split()]\n    goal = [x - 1 for x in goal]\n    q = int(stdin.readline())\n    milestones = []\n    for _ in range(q):\n        s, t, u = [int(x) for x in stdin.readline().split()]\n        if t > goal[s - 1]:\n            milestones.append((s, t, u))\n    milestones.sort(key=lambda x: x[1])\n    milestones.sort(key=lambda x: x[0])\n    milestones.sort(key=lambda x: x[2])\n    milestones.sort(key=lambda x: x[1] - x[0])\n    milestones.sort(key=lambda x: x[2])\n    milestones.sort(key=lambda x: x[1] - x[0])\n    milestones.sort(key=lambda x: x[2])\n    milestones.sort(key=lambda x: x[1] - x[0])\n    milestones.sort(key=lambda x: x[2])\n    milestones.sort(key=lambda x: x[1] - x[0])\n    milestones.sort(key=lambda x: x[2])\n    milestones.sort(key=lambda x: x[1] - x[0])\n    milestones.sort(key=lambda x: x[2])\n    milestones.sort(key=lambda x: x[1] - x[0])\n    milestones.sort(key=lambda x: x[2])\n    milestones.sort(key=lambda x: x[1] - x[0])\n    milestones.sort(key=lambda x: x[2])\n    milestones.sort(key=lambda x: x[1] - x[0])\n    milestones.sort(key=lambda x: x[2])\n    milestones.sort(key=lambda x: x[1] - x[0])\n    milestones.sort(key=lambda x: x[2])\n    milestones.sort(key=lambda x: x[1] - x[0])\n    milestones.sort(key=lambda x: x[2])\n    milestones.sort(key=lambda x: x[1] - x[0])\n    milestones.sort(key=lambda x: x[2])\n    milestones.sort(key=lambda x: x[1] - x[0])\n    milestones.sort(key=lambda x: x[2])\n    milestones.sort(key=lambda x: x[1] - x[0])\n    milestones.sort(key=lambda x: x[2])\n    milestones.sort(key=lambda x: x[1] - x[0])\n    milestones.sort(key=lambda x: x[2])\n    milestones.sort(key=lambda x: x[1] - x[0])\n    milestones.sort(key=lambda x: x[2])\n    milestones.sort(key=lambda x: x[1] - x[0])\n    milestones.sort(key=lambda x: x[2])\n    milestones.sort(key=lambda x: x[1] - x[0])\n    milestones.sort(key=lambda x: x[2])\n    milestones.sort(key=lambda x: x[1] - x[0])\n    milestones.sort(key=lambda x: x[2])\n    milestones.sort(key=lambda x: x[1] - x[0])\n    milestones.sort(key=lambda x: x[2])\n    milestones.sort(key=lambda x: x[1] - x[0])\n    milestones.sort(key=lambda x: x[2])\n    milestones.sort(key=lambda x: x[1] - x[0])\n    milestones.sort(key=lambda x: x[2])\n    milestones.sort(key"
    },
    {
        "number": 2303,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\ndef"
    },
    {
        "number": 2304,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split()]\n    L = [int(x) for x in stdin.split()]\n    R = [int(x) for x in stdin.split()]\n    D = [int(x) for x in stdin.split()]\n    L.sort()\n    R.sort()\n    D.sort()\n    for i in range(M):\n        if L[i] > R[i]:\n            return \"No\"\n    return \"Yes\""
    },
    {
        "number": 2305,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    colors = [int(x) for x in stdin.readline().split()]\n    edges = [tuple(int(x) for x in stdin.readline().split()) for _ in range(N - 1)]\n    graph = [[] for _ in range(N)]\n    for a, b in edges:\n        graph[a - 1].append(b - 1)\n        graph[b - 1].append(a - 1)\n    \n    def dfs(u: int, color: int) -> int:\n        if color == 3:\n            return 0\n        if color == 1:\n            return 1\n        if color == 2:\n            return 1\n        if u == -1:\n            return 0\n        return sum(dfs(v, color - 1) for v in graph[u])\n    \n    return '\\n'.join(str(dfs(u, c)) for u, c in enumerate(colors))"
    },
    {
        "number": 2306,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    t = [int(x) for x in stdin.readline().strip().split()]\n    v = [int(x) for x in stdin.readline().strip().split()]\n    t.sort()\n    v.sort()\n    t_max = t[-1]\n    v_max = v[-1]\n    t_min = t[0]\n    v_min = v[0]\n    if t_max + t_min > v_max + v_min:\n        return str(t_max + t_min)\n    else:\n        return str(v_max + v_min)"
    },
    {
        "number": 2307,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    A = [int(x) for x in stdin.readline().strip().split()]\n    even = 0\n    odd = 0\n    for i in A:\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    if even > odd:\n        return \"READY FOR BATTLE\"\n    else:\n        return \"NOT READY\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 2308,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2309,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    words = [stdin.split()[i] for i in range(n)]\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    vowel_count = [0] * n\n    for i in range(n):\n        for j in range(len(words[i])):\n            if words[i][j] in vowels:\n                vowel_count[i] += 1\n    max_beautiful_lyrics = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if vowel_count[i] == vowel_count[j]:\n                max_beautiful_lyrics += 1\n    return str(max_beautiful_lyrics)"
    },
    {
        "number": 2310,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        m, k = map(int, stdin.readline().split())\n        a = list(map(int, stdin.readline().split()))\n        dishes = [0] * k\n        for _ in range(m - 1):\n            t, r = map(int, stdin.readline().split())\n            dishes[t] = r\n        dishes[-1] = 1\n        for i in range(k):\n            if dishes[i] == 0:\n                dishes[i] = 1\n            else:\n                dishes[i] = 0\n        print(''.join(map(str, dishes)))"
    },
    {
        "number": 2311,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    b = [int(x) for x in stdin.split()]\n    c = [[0] * m for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            c[i][j] = a[i] * b[j]\n    count = 0\n    for i in range(n - k + 1):\n        for j in range(m - k + 1):\n            if c[i][j] == 1:\n                count += 1\n                for x in range(i, i + k):\n                    for y in range(j, j + k):\n                        c[x][y] = 1\n    return str(count)"
    },
    {
        "number": 2312,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    for _ in range(n):\n        n = int(stdin.readline())\n        b = list(map(int, stdin.readline().split()))\n        a = [2**b_ for b_ in b]\n        a.sort()\n        l = 0\n        r = n-1\n        while l < r:\n            if a[l] + a[r] == a[l+1] + a[r-1]:\n                print('YES')\n                break\n            elif a[l] + a[r] < a[l+1] + a[r-1]:\n                l += 1\n            else:\n                r -= 1\n        else:\n            print('NO')"
    },
    {
        "number": 2313,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    c = list(map(int, stdin.readline().split()))\n    return str(solution_naive(n, c))\n\ndef"
    },
    {
        "number": 2314,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, q = [int(x) for x in stdin.split()]\n    picture = [list(stdin.split()[i]) for i in range(n)]\n    options = [list(map(int, stdin.split()[i])) for i in range(q)]\n    max_area = 0\n    for option in options:\n        r1, c1, r2, c2 = option\n        for i in range(r1, r2 + 1):\n            for j in range(c1, c2 + 1):\n                if picture[i][j] == 'G':\n                    max_area = max(max_area, (r2 - r1 + 1) * (c2 - c1 + 1))\n    return str(max_area)\n\nprint(solution(input()))\n"
    },
    {
        "number": 2315,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline().strip())\n    for _ in range(T):\n        l, r = [int(x) for x in stdin.readline().strip().split()]\n        for x in range(l, r + 1):\n            if x % 2 == 0:\n                print(x, x // 2)"
    },
    {
        "number": 2316,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        x, n, m = [int(x) for x in stdin.readline().strip().split()]\n        if x <= 0:\n            print(\"NO\")\n            continue\n        if n == 0 and m == 0:\n            print(\"YES\")\n            continue\n        if n == 0:\n            print(\"YES\")\n            continue\n        if m == 0:\n            print(\"NO\")\n            continue\n        if x < n * m:\n            print(\"NO\")\n            continue\n        if x % n == 0:\n            print(\"YES\")\n            continue\n        if x % m == 0:\n            print(\"YES\")\n            continue\n        if x % n == 0:\n            print(\"YES\")\n            continue\n        if x % m == 0:\n            print(\"YES\")\n            continue\n        print(\"NO\")"
    },
    {
        "number": 2317,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, a, b = [int(x) for x in stdin.split()]\n    A = [int(x) for x in stdin.split()]\n    B = [int(x) for x in stdin.split()]\n    L = [int(x) for x in stdin.split()]\n    \n    A.sort()\n    B.sort()\n    \n    left = 0\n    right = m\n    \n    while left < n and right > 0:\n        if A[left] + B[right - 1] + L[right - 1] < a + b + L[left]:\n            left += 1\n        elif A[left] + B[right - 1] + L[right - 1] > a + b + L[left]:\n            right -= 1\n        else:\n            break\n    \n    return str(left + 1) + \" \" + str(right)\n\nassert(solution(input()) == \"2 2\")\nassert(solution(input()) == \"1 1\")\nassert(solution(input()) == \"1 2\")\nassert(solution(input()) == \"1 1\")\nassert(solution(input()) == \"1 2\")\nassert(solution(input()) == \"1 1\")\nassert(solution(input()) == \"1 2\")\nassert(solution(input()) == \"1 1\")\nassert(solution(input()) == \"1 2\")\nassert(solution(input()) == \"1 1\")\nassert(solution(input()) == \"1 2\")\nassert(solution(input()) == \"1 1\")\nassert(solution(input()) == \"1 2\")\nassert(solution(input()) == \"1 1\")\nassert(solution(input()) == \"1 2\")\nassert(solution(input()) == \"1 1\")\nassert(solution(input()) == \"1 2\")\nassert(solution(input()) == \"1 1\")\nassert(solution(input()) == \"1 2\")\nassert(solution(input()) == \"1 1\")\nassert(solution(input()) == \"1 2\")\nassert(solution(input()) == \"1 1\")\nassert(solution(input()) == \"1 2\")\nassert(solution(input()) == \"1 1\")\nassert(solution(input()) == \"1 2\")\nassert(solution(input()) == \"1 1\")\nassert(solution(input()) == \"1 2\")\nassert(solution(input()) == \"1 1\")\nassert(solution(input()) == \"1 2\")\nassert(solution(input()) == \"1 1\")\nassert(solution(input()) == \"1 2\")\nassert(solution(input()) == \"1 1\")\nassert(solution(input()) == \"1 2\")\nassert(solution(input()) == \"1 1\")\nassert(solution(input()) == \"1 2\")\nassert(solution(input()) == \"1 1\")\nassert(solution(input()) == \"1 2\")\nassert(solution(input()) == \"1 1\")\nassert(solution(input()) == \"1 2\")\nassert(solution(input()) == \"1 1\")\nassert(solution(input()) == \"1 2\")\nassert(solution(input()) == \"1 1\")\nassert(solution(input()) == \"1 2\")\nassert(solution(input()) == \"1 1\")\nassert(solution(input()) == \"1 2\")\nassert(solution(input()) == \"1 1\")\nassert(solution(input()) == \"1 2\")\nassert(solution(input()) == \"1 1\")\nassert(solution(input()) == \"1 2\")\nassert(solution(input()) == \"1 1\")\nassert(solution(input()) == \"1 2\")\nassert(solution(input()) == \"1 1\")\nassert(solution(input()) == \"1 2\")\nassert(solution(input()) == \"1 1\")\nassert(solution(input()) == \"1 2\")\nassert(solution(input()) == \"1 1\")\nassert(solution(input()) == \"1 2\")\nassert(solution(input()) == \"1 1\")\nassert(solution(input()) == \"1 2\")\nassert(solution(input()) == \"1 1\")\nassert(solution(input()) == \"1 2\")\nassert(solution(input()) == \"1 1\")\nassert(solution(input()) == \"1 2\")\nassert(solution(input()) == \"1 1\")\nassert(solution(input()) == \"1 2\")\nassert(solution(input()) == \"1 1\")\nassert(solution(input()) == \"1 2\")\nassert(solution(input()) == \"1 1\")\nassert(solution(input()) == \"1 2\")\nassert(solution(input()) == \"1 1\")\nassert(solution(input()) == \"1 2\")\nassert(solution(input()) == \"1 1\")\nassert(solution(input()) == \"1 2\")\nassert(solution(input()) == \"1 1\")\nassert(solution(input()) == \"1 2\")\nassert(solution(input()) == \"1 1\")\nassert(solution(input()) == \"1 2\")\nassert("
    },
    {
        "number": 2318,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    for _ in range(n):\n        s, t = stdin.readline().split()\n        if t in s:\n            print('YES')\n        else:\n            print('NO')\n    return ''"
    },
    {
        "number": 2319,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    for _ in range(n):\n        n = int(stdin.readline())\n        s = stdin.readline().strip()\n        t = stdin.readline().strip()\n        if s == t:\n            print(0)\n            continue\n        if s == t[::-1]:\n            print(0)\n            continue\n        if s == t[::-1][1:]:\n            print(0)\n            continue\n        if s == t[::-1][1:][::-1]:\n            print(0)\n            continue\n        if s == t[::-1][1:][::-1][1:]:\n            print(0)\n            continue\n        if s == t[::-1][1:][::-1][1:][::-1]:\n            print(0)\n            continue\n        if s == t[::-1][1:][::-1][1:][::-1][1:]:\n            print(0)\n            continue\n        if s == t[::-1][1:][::-1][1:][::-1][1:][::-1]:\n            print(0)\n            continue\n        if s == t[::-1][1:][::-1][1:][::-1][1:][::-1][1:]:\n            print(0)\n            continue\n        if s == t[::-1][1:][::-1][1:][::-1][1:][::-1][1:][::-1]:\n            print(0)\n            continue\n        if s == t[::-1][1:][::-1][1:][::-1][1:][::-1][1:][::-1][1:]:\n            print(0)\n            continue\n        if s == t[::-1][1:][::-1][1:][::-1][1:][::-1][1:][::-1][1:][::-1]:\n            print(0)\n            continue\n        if s == t[::-1][1:][::-1][1:][::-1][1:][::-1][1:][::-1][1:][::-1][1:][::-1]:\n            print(0)\n            continue\n        if s == t[::-1][1:][::-1][1:][::-1][1:][::-1][1:][::-1][1:][::-1][1:][::-1][1:][::-1][1:]:\n            print(0)\n            continue\n        if s == t[::-1][1:][::-1][1:][::-1][1:][::-1][1:][::-1][1:][::-1][1:][::-1][1:][::-1][1:][::-1][1:][::-1]:\n            print(0)\n            continue\n        if s == t[::-1][1:][::-1][1:][::-1][1:][::-1][1:][::-1][1:][::-1][1:][::-1][1:][::-1][1:][::-1][1:][::-1][1:][::-1][1:]:\n            print(0)\n            continue\n        if s == t[::-1][1:][::-1][1:][::-1][1:][::-1][1:][::-1][1:][::-1][1:][::-1][1:][::-1][1:][::-1][1:][::-1][1:][::-1][1:][::-1][1:][::-1]:\n            print(0)\n            continue\n        if s == t[::-1][1:][::-1][1:][::-1][1:][::-1][1:][::-1][1:][::-1][1:][::-1][1:][::-1][1:][::-1][1:][::-1][1:][::-1][1:][::-1][1:][::-1][1:][::-1][1:]:\n            print(0)\n            continue\n        if s == t[::-1][1:][::-1][1:][::-1][1:][::-1][1:][::-1][1:][::-1][1:][::-1][1:][::-1][1:][::-1][1:][::-1][1:][::-1][1:][::-1][1:][::-1][1:][::-1][1:][::-1][1:][::-1]:\n            print(0)\n            continue\n        if s == t[::-1][1:][::-1][1:][::-1][1:][::-1][1:][::-1][1:][::-1][1:][::-1][1:][::-1][1:][::-1][1:][::-1][1:][::-1][1:][::-1][1:][::-1][1:][::-1][1:][::-1][1:][::-1][1:][::-1][1:]:\n            print(0)\n            continue\n        if s == t[::-1][1:][::-1][1:][::-1][1:][::-1][1:][::-1][1:][::-1][1:][::-1][1:][::-1][1:][::-1][1:]["
    },
    {
        "number": 2320,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2321,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2323,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = [int(x) for x in stdin.readline().split()]\n    q = int(stdin.readline())\n    for _ in range(q):\n        l, r = [int(x) for x in stdin.readline().split()]\n        print(len(set(s[l:r+1])))"
    },
    {
        "number": 2324,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2325,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    for _ in range(n):\n        x, y = [int(x) for x in stdin.readline().strip().split()]\n        print(x * y)"
    },
    {
        "number": 2326,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    count = 0\n    for i in range(n):\n        if i == 0:\n            count += 1\n        elif a[i] - a[i - 1] == 1:\n            count += 1\n    return str(count % 998244353)"
    },
    {
        "number": 2327,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return '\\n'.join(str(unfairness(i)) for i in range(n))\n\ndef"
    },
    {
        "number": 2328,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    d = []\n    for i in range(n):\n        d.append(abs(a[i] - a[k]))\n    d.sort()\n    return str(a[k - 1])\n\nassert(solution(input()) == '500000000')"
    },
    {
        "number": 2329,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    towers = [int(x) for x in stdin.split()]\n    towers.sort(reverse=True)\n    towers = [towers[i:i + m] for i in range(0, len(towers), m)]\n    towers.sort(key=lambda x: x[0], reverse=True)\n    towers = [towers[i:i + m] for i in range(0, len(towers), m)]\n    towers.sort(key=lambda x: x[0], reverse=True)\n    towers = [towers[i:i + m] for i in range(0, len(towers), m)]\n    towers.sort(key=lambda x: x[0], reverse=True)\n    towers = [towers[i:i + m] for i in range(0, len(towers), m)]\n    towers.sort(key=lambda x: x[0], reverse=True)\n    towers = [towers[i:i + m] for i in range(0, len(towers), m)]\n    towers.sort(key=lambda x: x[0], reverse=True)\n    towers = [towers[i:i + m] for i in range(0, len(towers), m)]\n    towers.sort(key=lambda x: x[0], reverse=True)\n    towers = [towers[i:i + m] for i in range(0, len(towers), m)]\n    towers.sort(key=lambda x: x[0], reverse=True)\n    towers = [towers[i:i + m] for i in range(0, len(towers), m)]\n    towers.sort(key=lambda x: x[0], reverse=True)\n    towers = [towers[i:i + m] for i in range(0, len(towers), m)]\n    towers.sort(key=lambda x: x[0], reverse=True)\n    towers = [towers[i:i + m] for i in range(0, len(towers), m)]\n    towers.sort(key=lambda x: x[0], reverse=True)\n    towers = [towers[i:i + m] for i in range(0, len(towers), m)]\n    towers.sort(key=lambda x: x[0], reverse=True)\n    towers = [towers[i:i + m] for i in range(0, len(towers), m)]\n    towers.sort(key=lambda x: x[0], reverse=True)\n    towers = [towers[i:i + m] for i in range(0, len(towers), m)]\n    towers.sort(key=lambda x: x[0], reverse=True)\n    towers = [towers[i:i + m] for i in range(0, len(towers), m)]\n    towers.sort(key=lambda x: x[0], reverse=True)\n    towers = [towers[i:i + m] for i in range(0, len(towers), m)]\n    towers.sort(key=lambda x: x[0], reverse=True)\n    towers = [towers[i:i + m] for i in range(0, len(towers), m)]\n    towers.sort(key=lambda x: x[0], reverse=True)\n    towers = [towers[i:i + m] for i in range(0, len(towers), m)]\n    towers.sort(key=lambda x: x[0], reverse=True)\n    towers = [towers[i:i + m] for i in range(0, len(towers), m)]\n    towers.sort(key=lambda x: x[0], reverse=True)\n    towers = [towers[i:i + m] for i in range(0, len(towers), m)]\n    towers.sort(key=lambda x: x[0], reverse=True)\n    towers = [towers[i:i + m] for i in range(0, len(towers), m)]\n    towers.sort(key=lambda x: x[0], reverse=True)\n    towers = [towers[i:i + m] for i in range(0, len(towers), m)]\n    towers.sort(key=lambda"
    },
    {
        "number": 2330,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    ans = -1\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] + a[j] > m:\n                break\n            if m - (a[i] + a[j]) == 0:\n                ans = 0\n                break\n            if m - (a[i] + a[j]) < ans or ans == -1:\n                ans = m - (a[i] + a[j])\n                u = i\n                v = j\n    if ans == -1:\n        print(-1)\n    else:\n        print(ans)\n        print(u + 1, v + 1)\n    return \"\""
    },
    {
        "number": 2331,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2332,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = [int(x) for x in stdin.split()]\n    words = [x for x in stdin.split()[1:]]\n    costs = [int(x) for x in stdin.split()[n + 1:]]\n    groups = [list(map(int, stdin.split()[i:i + n])) for i in range(n, n + k, n)]\n    message = [int(x) for x in stdin.split()[-m:]]\n    cost = 0\n    for i in range(len(message)):\n        for j in groups[message[i] - 1]:\n            if words[j - 1] == message[i]:\n                cost += costs[j - 1]\n                break\n    return str(cost)"
    },
    {
        "number": 2333,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    return str(subpermutations(a))\n\ndef"
    },
    {
        "number": 2334,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2335,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    points = [tuple(map(int, stdin.readline().split())) for _ in range(n)]\n    points.sort(key=lambda x: x[0])\n    red, green, blue = 0, 0, 0\n    for i in range(n):\n        if points[i][1] == 'R':\n            red += points[i][0]\n        elif points[i][1] == 'G':\n            green += points[i][0]\n        else:\n            blue += points[i][0]\n    return str(red + green + blue)\n\nassert(solution('''4\n1 G\n5 R\n10 B\n15 G\n''') == '23')\nassert(solution('''4\n1 G\n2 R\n3 B\n10 G\n''') == '12')\nassert(solution('''4\n1 G\n2 R\n3 B\n10 G\n''') == '12')\nassert(solution('''4\n1 G\n2 R\n3 B\n10 G\n''') == '12')\nassert(solution('''4\n1 G\n2 R\n3 B\n10 G\n''') == '12')\nassert(solution('''4\n1 G\n2 R\n3 B\n10 G\n''') == '12')\nassert(solution('''4\n1 G\n2 R\n3 B\n10 G\n''') == '12')\nassert(solution('''4\n1 G\n2 R\n3 B\n10 G\n''') == '12')\nassert(solution('''4\n1 G\n2 R\n3 B\n10 G\n''') == '12')\nassert(solution('''4\n1 G\n2 R\n3 B\n10 G\n''') == '12')\nassert(solution('''4\n1 G\n2 R\n3 B\n10 G\n''') == '12')\nassert(solution('''4\n1 G\n2 R\n3 B\n10 G\n''') == '12')\nassert(solution('''4\n1 G\n2 R\n3 B\n10 G\n''') == '12')\nassert(solution('''4\n1 G\n2 R\n3 B\n10 G\n''') == '12')\nassert(solution('''4\n1 G\n2 R\n3 B\n10 G\n''') == '12')\nassert(solution('''4\n1 G\n2 R\n3 B\n10 G\n''') == '12')\nassert(solution('''4\n1 G\n2 R\n3 B\n10 G\n''') == '12')\nassert(solution('''4\n1 G\n2 R\n3 B\n10 G\n''') == '12')\nassert(solution('''4\n1 G\n2 R\n3 B\n10 G\n''') == '12')\nassert(solution('''4\n1 G\n2 R\n3 B\n10 G\n''') == '12')\nassert(solution('''4\n1 G\n2 R\n3 B\n10 G\n''') == '12')\nassert(solution('''4\n1 G\n2 R\n3 B\n10 G\n''') == '12')\nassert(solution('''4\n1 G\n2 R\n3 B\n10 G\n''') == '12')\nassert(solution('''4\n1 G\n2 R\n3 B\n10 G\n''') == '12')\nassert(solution('''4\n1 G\n2 R\n3 B\n10 G\n''') == '12')\nassert(solution('''4\n1 G\n2 R\n3 B\n10 G\n''') == '12')\nassert(solution('''4\n1 G\n2 R\n3 B\n10 G\n''') == '12')\nassert(solution('''4\n1 G\n2 R\n3 B\n10 G\n''') == '12')\nassert(solution('''4\n1 G\n2 R\n3 B\n10 G\n''') == '12')\nassert(solution('''4\n1 G\n2 R\n3 B\n10 G\n''') == '12')\nassert(solution('''4\n1 G\n2 R\n3 B\n10 G\n''') == '12')\nassert(solution('''4\n1 G\n2 R\n3 B\n10 G\n''') == '12')\nassert(solution('''4\n1 G\n2 R\n3 B\n10 G\n''') == '12')\nassert(solution('''4\n1 G\n2 R\n3 B\n10 G\n''') == '12')\nassert(solution('''4\n1 G\n2 R\n3 B\n10 G\n''') == '12')\nassert(solution('''4\n1 G\n2 R\n3 B\n10 G\n''') == '12')\nassert(solution('''4\n1 G\n2 R\n3 B\n10 G\n''') == '12')\nassert(solution('''4\n1 G\n2 R\n3 B\n10 G\n''') == '12')\nassert(solution('''4\n1 G\n2 R\n3 B\n10 G\n''') == '12')\nassert(solution('''4\n1 G\n2 R\n3 B\n10 G\n''') == '12')\nassert(solution('''4\n1 G\n2 R\n3 B\n10 G\n''') == '12')\nassert(solution('''4\n1 G\n2 R\n3 B\n10 G\n''') == '12')\nassert(solution('''4\n1 G\n2 R\n3 B\n10 G\n''') == '12')\nassert(solution('''4\n1 G\n2 R\n3 B\n10 G\n''') == '12')\nassert(solution('''4\n1 G\n2 R\n3 B\n10 G\n''') == '12')\nassert(solution('''4\n1 G\n2 R\n3 B\n10 G\n''') == '12')\nassert(solution('''4\n1 G\n2 R\n3 B\n10 G\n''') == '12')\nassert(solution('''4\n1 G\n2 R\n3 B\n10 G\n''') == '12')\nassert(solution('''4\n1 G\n2 R\n3 B\n10 G\n''') == '12')\nassert(solution('''4\n1 G\n2 R\n3 B\n10 G\n''') == '12')\nassert(solution('''4\n1 G\n2 R\n3 B\n10 G\n''') == '12')\n"
    },
    {
        "number": 2336,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, q = [int(x) for x in stdin.split()]\n    recipes = [tuple(int(x) for x in stdin.split()) for _ in range(n)]\n    return '\\n'.join(str(len(get_admissible_temperatures(recipes, int(x)))) for x in stdin.split())\n\ndef"
    },
    {
        "number": 2337,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    a.sort()\n    b.sort()\n    a.reverse()\n    b.reverse()\n    count = 0\n    for i in range(m):\n        if a[i] < b[i]:\n            count += 1\n    return str(count)"
    },
    {
        "number": 2338,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    bombs = [tuple(map(int, stdin.readline().split())) for _ in range(n)]\n    bombs.sort(key=lambda x: x[0]**2 + x[1]**2)\n    bombs = [b for b in bombs if b[0]!= 0 or b[1]!= 0]\n    if len(bombs) == 0:\n        return '0'\n    if len(bombs) == 1:\n        return '1'\n    if len(bombs) == 2:\n        return '2'\n    if len(bombs) == 3:\n        return '3'\n    if len(bombs) == 4:\n        return '4'\n    if len(bombs) == 5:\n        return '5'\n    if len(bombs) == 6:\n        return '6'\n    if len(bombs) == 7:\n        return '7'\n    if len(bombs) == 8:\n        return '8'\n    if len(bombs) == 9:\n        return '9'\n    if len(bombs) == 10:\n        return '10'\n    if len(bombs) == 11:\n        return '11'\n    if len(bombs) == 12:\n        return '12'\n    if len(bombs) == 13:\n        return '13'\n    if len(bombs) == 14:\n        return '14'\n    if len(bombs) == 15:\n        return '15'\n    if len(bombs) == 16:\n        return '16'\n    if len(bombs) == 17:\n        return '17'\n    if len(bombs) == 18:\n        return '18'\n    if len(bombs) == 19:\n        return '19'\n    if len(bombs) == 20:\n        return '20'\n    if len(bombs) == 21:\n        return '21'\n    if len(bombs) == 22:\n        return '22'\n    if len(bombs) == 23:\n        return '23'\n    if len(bombs) == 24:\n        return '24'\n    if len(bombs) == 25:\n        return '25'\n    if len(bombs) == 26:\n        return '26'\n    if len(bombs) == 27:\n        return '27'\n    if len(bombs) == 28:\n        return '28'\n    if len(bombs) == 29:\n        return '29'\n    if len(bombs) == 30:\n        return '30'\n    if len(bombs) == 31:\n        return '31'\n    if len(bombs) == 32:\n        return '32'\n    if len(bombs) == 33:\n        return '33'\n    if len(bombs) == 34:\n        return '34'\n    if len(bombs) == 35:\n        return '35'\n    if len(bombs) == 36:\n        return '36'\n    if len(bombs) == 37:\n        return '37'\n    if len(bombs) == 38:\n        return '38'\n    if len(bombs) == 39:\n        return '39'\n    if len(bombs) == 40:\n        return '40'\n    if len(bombs) == 41:\n        return '41'\n    if len(bombs) == 42:\n        return '42'\n    if len(bombs) == 43:\n        return '43'\n    if len(bombs) == 44:\n        return '44'\n    if len(bombs) == 45:\n        return '45'\n    if len(bombs) == 46:\n        return '46'\n    if len(bombs) == 47:\n        return '47'\n    if len(bombs) == 48:\n        return '48'\n    if len(bombs) == 49:\n        return '49'\n    if len(bombs) == 50:\n        return '50'\n    if len(bombs) == 51:\n        return '51'\n    if len(bombs) == 52:\n        return '52'\n    if len(bombs) == 53:\n        return '53'\n    if len(bombs) == 54:\n        return '54'\n    if len(bombs) == 55:\n        return '55'\n    if len(bombs) == 56:\n        return '56'\n    if len(bombs) == 57:\n        return '57'\n    if len(bombs) == 58:\n        return '58'\n    if len(bombs) == 59:\n        return '59'\n    if len(bombs) == 60:\n        return '60'\n    if len(bombs) == 61:\n        return '61'\n    if len(bombs) == 62:\n        return '62'\n    if len(bombs) == 63:\n        return '63'\n    if len(bombs) == 64:\n        return '64'\n    if len(bombs) == 65:\n        return '65'\n    if len(bombs) == 66:\n        return '66'\n    if len(bombs) == 67:\n        return '67'\n    if len(bombs) == 68:\n        return '68'\n    if len(bombs) == 69:\n        return '69'\n    if len(bombs) == 70:\n        return '70'\n    if len(bombs) == 71:\n        return '71'\n    if len("
    },
    {
        "number": 2339,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    b = [0] * n\n    for i in range(n):\n        b[i] = a[i]\n        for j in range(i):\n            if a[i] % a[j] == 0 and a[i]!= a[j]:\n                b[i] = a[i]\n                break\n    return''.join(map(str, b))"
    },
    {
        "number": 2340,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    for _ in range(n):\n        h, n = map(int, stdin.readline().split())\n        p = list(map(int, stdin.readline().split()))\n        p.sort()\n        c = 0\n        for i in range(n):\n            if p[i] > h:\n                c += p[i] - h\n        print(c)"
    },
    {
        "number": 2341,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    scraps = [stdin.split()[i] for i in range(n)]\n    return str(solution_recursive(scraps, n, m))\n\ndef"
    },
    {
        "number": 2342,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2343,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        n, k = map(int, stdin.readline().split())\n        if k == 0:\n            print(\"YES 0\")\n            continue\n        if n == 1:\n            print(\"YES 1\")\n            continue\n        if n == 2:\n            print(\"YES 2\")\n            continue\n        if n == 3:\n            print(\"YES 3\")\n            continue\n        if n == 4:\n            print(\"YES 4\")\n            continue\n        if n == 5:\n            print(\"YES 5\")\n            continue\n        if n == 6:\n            print(\"YES 6\")\n            continue\n        if n == 7:\n            print(\"YES 7\")\n            continue\n        if n == 8:\n            print(\"YES 8\")\n            continue\n        if n == 9:\n            print(\"YES 9\")\n            continue\n        if n == 10:\n            print(\"YES 10\")\n            continue\n        if n == 11:\n            print(\"YES 11\")\n            continue\n        if n == 12:\n            print(\"YES 12\")\n            continue\n        if n == 13:\n            print(\"YES 13\")\n            continue\n        if n == 14:\n            print(\"YES 14\")\n            continue\n        if n == 15:\n            print(\"YES 15\")\n            continue\n        if n == 16:\n            print(\"YES 16\")\n            continue\n        if n == 17:\n            print(\"YES 17\")\n            continue\n        if n == 18:\n            print(\"YES 18\")\n            continue\n        if n == 19:\n            print(\"YES 19\")\n            continue\n        if n == 20:\n            print(\"YES 20\")\n            continue\n        if n == 21:\n            print(\"YES 21\")\n            continue\n        if n == 22:\n            print(\"YES 22\")\n            continue\n        if n == 23:\n            print(\"YES 23\")\n            continue\n        if n == 24:\n            print(\"YES 24\")\n            continue\n        if n == 25:\n            print(\"YES 25\")\n            continue\n        if n == 26:\n            print(\"YES 26\")\n            continue\n        if n == 27:\n            print(\"YES 27\")\n            continue\n        if n == 28:\n            print(\"YES 28\")\n            continue\n        if n == 29:\n            print(\"YES 29\")\n            continue\n        if n == 30:\n            print(\"YES 30\")\n            continue\n        if n == 31:\n            print(\"YES 31\")\n            continue\n        if n == 32:\n            print(\"YES 32\")\n            continue\n        if n == 33:\n            print(\"YES 33\")\n            continue\n        if n == 34:\n            print(\"YES 34\")\n            continue\n        if n == 35:\n            print(\"YES 35\")\n            continue\n        if n == 36:\n            print(\"YES 36\")\n            continue\n        if n == 37:\n            print(\"YES 37\")\n            continue\n        if n == 38:\n            print(\"YES 38\")\n            continue\n        if n == 39:\n            print(\"YES 39\")\n            continue\n        if n == 40:\n            print(\"YES 40\")\n            continue\n        if n == 41:\n            print(\"YES 41\")\n            continue\n        if n == 42:\n            print(\"YES 42\")\n            continue\n        if n == 43:\n            print(\"YES 43\")\n            continue\n        if n == 44:\n            print(\"YES 44\")\n            continue\n        if n == 45:\n            print(\"YES 45\")\n            continue\n        if n == 46:\n            print(\"YES 46\")\n            continue\n        if n == 47:\n            print(\"YES 47\")\n            continue\n        if n == 48:\n            print(\"YES 48\")\n            continue\n        if n == 49:\n            print(\"YES 49\")\n            continue\n        if n == 50:\n            print(\"YES 50\")\n            continue\n        if n == 51:\n            print(\"YES 51\")\n            continue\n        if n == 52:\n            print(\"YES 52\")\n            continue\n        if n == 53:\n            print(\"YES 53\")\n            continue\n        if n == 54:\n            print(\"YES 54\")\n            continue\n        if n == 55:\n            print(\"YES 55\")\n            continue\n        if n == 56:\n            print(\"YES 56\")\n            continue\n        if n == 57:\n            print(\"YES 57\")\n            continue\n        if n == 58:\n            print(\"YES 58\")\n            continue"
    },
    {
        "number": 2344,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    offers = [tuple(map(int, line.split())) for line in stdin.readlines()]\n    offers.sort(key=lambda offer: offer[2])\n    max_price = 0\n    for offer in offers:\n        max_price += offer[0]\n        max_price -= offer[1]\n    return str(max_price)"
    },
    {
        "number": 2345,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    s = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] + a[j] == 0:\n                s += 1\n    return str(s)"
    },
    {
        "number": 2346,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    tree = [list(map(int, stdin.readline().split())) for _ in range(n)]\n    root = -1\n    for i in range(n):\n        if tree[i][0] == -1:\n            root = i\n            break\n    if root == -1:\n        return -1\n    tree[root][0] = -1\n    tree[root][1] = 0\n    for i in range(n):\n        if tree[i][0]!= -1:\n            tree[i][0] = i\n            tree[i][1] = 0\n    stack = [root]\n    while len(stack) > 0:\n        v = stack.pop()\n        for i in range(n):\n            if tree[i][0] == v:\n                tree[i][0] = -1\n                tree[i][1] = 1\n                stack.append(i)\n    for i in range(n):\n        if tree[i][1] == 0:\n            print(i, end=' ')\n    return ''"
    },
    {
        "number": 2347,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        p = stdin.readline().strip()\n        h = stdin.readline().strip()\n        if h == hash_password(p):\n            print(\"YES\")\n        else:\n            print(\"NO\")"
    },
    {
        "number": 2348,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin[0:7], 16))"
    },
    {
        "number": 2349,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    rating = [0] * n\n    for i in range(n):\n        rating[i] = int(stdin.readline())\n    rating.sort()\n    rating.reverse()\n    rating_increments = [0] * (n + 1)\n    for i in range(n):\n        rating_increments[i + 1] = rating[i] - rating[i] // (i + 1)\n    rating_increments[0] = 0\n    rating_increments.sort()\n    rating_increments.reverse()\n    print(len(rating_increments))\n    for i in rating_increments:\n        print(i)\n    return ''"
    },
    {
        "number": 2350,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nIn the second test case there are three possible sums: $1+2+3=6$, $1+2+4=7$, and $1+3+4=8$. [Image]\ndef"
    },
    {
        "number": 2351,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, l = [int(x) for x in stdin.split()]\n    arr = [int(x) for x in stdin.split()]\n    arr = [x if x!= -1 else random.randint(1, k) for x in arr]\n    print(arr)\n    return str(solution2(n, k, l, arr))\n\ndef"
    },
    {
        "number": 2352,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n, m = map(int, stdin.readline().strip().split())\n        sheet = [list(stdin.readline().strip()) for _ in range(n)]\n        snakes = []\n        for i in range(n):\n            for j in range(m):\n                if sheet[i][j] == '.':\n                    snakes.append((i, j))\n        if len(snakes) == 26:\n            print('YES')\n            continue\n        for i in range(len(snakes)):\n            for j in range(i + 1, len(snakes)):\n                if snakes[i][0] == snakes[j][0] or snakes[i][1] == snakes[j][1]:\n                    print('YES')\n                    continue\n                if snakes[i][0] == snakes[j][1] or snakes[i][1] == snakes[j][0]:\n                    print('YES')\n                    continue\n                if abs(snakes[i][0] - snakes[j][0]) == abs(snakes[i][1] - snakes[j][1]):\n                    print('YES')\n                    continue\n        print('NO')\n    return ''"
    },
    {
        "number": 2353,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        a, b, c, d = map(int, stdin.readline().strip().split())\n        if a + b + c + d < a * d:\n            print(-1)\n        else:\n            print(a + b + c + d)"
    },
    {
        "number": 2354,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = [int(x) for x in stdin.split()]\n    board = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            board[i][j] = i * n + j + 1\n    for _ in range(q):\n        x, y = [int(x) for x in stdin.split()]\n        print(board[x - 1][y - 1])"
    },
    {
        "number": 2355,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p = [int(x) for x in stdin.split()]\n    edges = []\n    for _ in range(n):\n        edges.append([int(x) for x in stdin.split()])\n    return '\\n'.join(str(x) for x in solve(n, p, edges))\n\ndef"
    },
    {
        "number": 2356,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        for i in range(n):\n            for j in range(i + 1, n):\n                if a[j] - a[i]!= j - i:\n                    break\n            else:\n                print(*a)\n                break\n        else:\n            print(-1)"
    },
    {
        "number": 2357,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2358,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 2359,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2360,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2361,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 2362,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    edges = [list(map(int, stdin.readline().split())) for _ in range(n - 1)]\n    edges.sort(key=lambda x: x[1])\n    g = [0] * n\n    for i in range(n):\n        g[i] = a[i]\n    for i in range(n - 1):\n        g[edges[i][1] - 1] = max(g[edges[i][0] - 1], g[edges[i][1] - 1])\n    max_dist = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if g[i] > 1 and g[j] > 1:\n                max_dist = max(max_dist, dist(i, j))\n    return str(max_dist)\n\n\ndef"
    },
    {
        "number": 2363,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    pairs = [tuple(map(int, stdin.readline().split())) for _ in range(n)]\n    return '\\n'.join(str(len(str(a - b))) for a, b in pairs)\n\nassert(solution('''2\n4 17\n7 987654321''') == '8\\n141093479')\nassert(solution('''3\n4 17\n7 987654321\n5 5\n0 0''') == '8\\n141093479\\n0')\nassert(solution('''4\n4 17\n7 987654321\n5 5\n0 0''') == '8\\n141093479\\n0\\n0')\nassert(solution('''5\n4 17\n7 987654321\n5 5\n0 0''') == '8\\n141093479\\n0\\n0\\n0')\nassert(solution('''6\n4 17\n7 987654321\n5 5\n0 0\n0 0''') == '8\\n141093479\\n0\\n0\\n0\\n0')\nassert(solution('''7\n4 17\n7 987654321\n5 5\n0 0\n0 0\n0 0''') == '8\\n141093479\\n0\\n0\\n0\\n0\\n0')\nassert(solution('''8\n4 17\n7 987654321\n5 5\n0 0\n0 0\n0 0\n0 0''') == '8\\n141093479\\n0\\n0\\n0\\n0\\n0\\n0')\nassert(solution('''9\n4 17\n7 987654321\n5 5\n0 0\n0 0\n0 0\n0 0\n0 0''') == '8\\n141093479\\n0\\n0\\n0\\n0\\n0\\n0\\n0')\nassert(solution('''10\n4 17\n7 987654321\n5 5\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0''') == '8\\n141093479\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0')\nassert(solution('''11\n4 17\n7 987654321\n5 5\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0''') == '8\\n141093479\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0')\nassert(solution('''12\n4 17\n7 987654321\n5 5\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0''') == '8\\n141093479\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0')\nassert(solution('''13\n4 17\n7 987654321\n5 5\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0''') == '8\\n141093479\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0')\nassert(solution('''14\n4 17\n7 987654321\n5 5\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0''') == '8\\n141093479\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0')\nassert(solution('''15\n4 17\n7 987654321\n5 5\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0''') == '8\\n141093479\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0')\nassert(solution('''16\n4 17\n7 987654321\n5 5\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0''') == '8\\n141093479\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0')\nassert(solution('''17\n4 17\n7 987654321\n5 5\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0''') == '8\\n141093479\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0')\nassert(solution('''18\n4 17\n7 987654321\n5 5\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0''') == '8\\n141093479\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0')\nassert(solution('''19\n4 17\n7 987654321\n5 5\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0''') == '8\\n141093479\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0')\nassert(solution('''20\n4 17\n7 987654321\n5 5\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0''') == '8\\n141093479\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0')\nassert(solution('''21\n4 17\n7 987654321\n5 5\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0''') == '8\\n141093479\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0')\nassert(solution('''22\n4 17\n7 987654321\n5 5\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0"
    },
    {
        "number": 2364,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    return str(solution_naive(n, a))\n\ndef"
    },
    {
        "number": 2365,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(eval(stdin))"
    },
    {
        "number": 2366,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    a.append(a[-1] + 1)\n    a.append(a[-1] + 1)\n    a.sort()\n    return str(a.count(a[-1]) - 1)"
    },
    {
        "number": 2367,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, W, A, B = [int(x) for x in stdin.split()]\n    if A == 1 and B == 1:\n        return '1'\n    if A == 1:\n        return str(H * B)\n    if B == 1:\n        return str(W * A)\n    return str((H * B) + (W * A) - (H * B) % (10 ** 9 + 7))"
    },
    {
        "number": 2368,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    b = [int(x) for x in stdin.split()]\n    c = [int(x) for x in stdin.split()]\n    for i in range(m):\n        x, y = [int(x) for x in stdin.split()]\n        if a[x-1] > b[y-1]:\n            a[x-1] -= 1\n            b[y-1] += 1\n        elif a[x-1] < b[y-1]:\n            a[x-1] += 1\n            b[y-1] -= 1\n        else:\n            return \"No\"\n    return \"Yes\""
    },
    {
        "number": 2369,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    f = [0] * (n + 1)\n    f[0] = 1\n    for i in range(1, n + 1):\n        for j in range(1, i + 1):\n            f[i] += f[i - j] * a[j - 1]\n    return str(f[n] % (10 ** 9 + 7))"
    },
    {
        "number": 2370,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    A = [list(map(int, stdin.readline().split())) for _ in range(N)]\n    for i in range(N):\n        A[i][i] = 0\n    for i in range(N):\n        for j in range(N):\n            if A[i][j] > 0:\n                A[i][j] = A[j][i] = A[i][j]\n    for i in range(N):\n        for j in range(N):\n            if A[i][j] > 0:\n                for k in range(N):\n                    if A[i][k] > 0 and A[k][j] > 0:\n                        A[i][j] = min(A[i][j], A[i][k] + A[k][j])\n    if A[0][N - 1] == 0:\n        return -1\n    return sum(A[i][N - 1] for i in range(N))"
    },
    {
        "number": 2371,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, Z, W = [int(x) for x in stdin.split()]\n    A = [int(x) for x in stdin.split()]\n    A.sort()\n    X = A[:N//2]\n    Y = A[N//2:]\n    X_score = sum(X)\n    Y_score = sum(Y)\n    return abs(X_score - Y_score)"
    },
    {
        "number": 2372,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2373,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    p = [int(x) for x in stdin.readline().strip().split()]\n    p.sort()\n    count = 0\n    for i in range(1, n):\n        if p[i]!= i:\n            p[i], p[p[i]] = p[p[i]], p[i]\n            count += 1\n    return str(count)"
    },
    {
        "number": 2374,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split()]\n    A = [int(x) for x in stdin.split()]\n    B = [int(x) for x in stdin.split()]\n    C = [int(x) for x in stdin.split()]\n    Cords = [int(x) for x in stdin.split()]\n    Cords.sort()\n    if Cords[0] > M:\n        return -1\n    if Cords[-1] < 1:\n        return -1\n    if Cords[0] > Cords[-1]:\n        return -1\n    if Cords[0] == 1:\n        return \"1\"\n    if Cords[-1] == M:\n        return \"1\"\n    if Cords[0] == Cords[-1]:\n        return \"1\"\n    if Cords[0] == 1:\n        return \"1\"\n    if Cords[-1] == M:\n        return \"1\"\n    if Cords[0] == Cords[-1]:\n        return \"1\"\n    if Cords[0] == 1:\n        return \"1\"\n    if Cords[-1] == M:\n        return \"1\"\n    if Cords[0] == Cords[-1]:\n        return \"1\"\n    if Cords[0] == 1:\n        return \"1\"\n    if Cords[-1] == M:\n        return \"1\"\n    if Cords[0] == Cords[-1]:\n        return \"1\"\n    if Cords[0] == 1:\n        return \"1\"\n    if Cords[-1] == M:\n        return \"1\"\n    if Cords[0] == Cords[-1]:\n        return \"1\"\n    if Cords[0] == 1:\n        return \"1\"\n    if Cords[-1] == M:\n        return \"1\"\n    if Cords[0] == Cords[-1]:\n        return \"1\"\n    if Cords[0] == 1:\n        return \"1\"\n    if Cords[-1] == M:\n        return \"1\"\n    if Cords[0] == Cords[-1]:\n        return \"1\"\n    if Cords[0] == 1:\n        return \"1\"\n    if Cords[-1] == M:\n        return \"1\"\n    if Cords[0] == Cords[-1]:\n        return \"1\"\n    if Cords[0] == 1:\n        return \"1\"\n    if Cords[-1] == M:\n        return \"1\"\n    if Cords[0] == Cords[-1]:\n        return \"1\"\n    if Cords[0] == 1:\n        return \"1\"\n    if Cords[-1] == M:\n        return \"1\"\n    if Cords[0] == Cords[-1]:\n        return \"1\"\n    if Cords[0] == 1:\n        return \"1\"\n    if Cords[-1] == M:\n        return \"1\"\n    if Cords[0] == Cords[-1]:\n        return \"1\"\n    if Cords[0] == 1:\n        return \"1\"\n    if Cords[-1] == M:\n        return \"1\"\n    if Cords[0] == Cords[-1]:\n        return \"1\"\n    if Cords[0] == 1:\n        return \"1\"\n    if Cords[-1] == M:\n        return \"1\"\n    if Cords[0] == Cords[-1]:\n        return \"1\"\n    if Cords[0] == 1:\n        return \"1\"\n    if Cords[-1] == M:\n        return \"1\"\n    if Cords[0] == Cords[-1]:\n        return \"1\"\n    if Cords[0] == 1:\n        return \"1\"\n    if Cords[-1] == M:\n        return \"1\"\n    if Cords[0] == Cords[-1]:\n        return \"1\"\n    if Cords[0] == 1:\n        return \"1\"\n    if Cords[-1] == M:\n        return \"1\"\n    if Cords[0] == Cords[-1]:\n        return \"1\"\n    if Cords[0] == 1:\n        return \"1\"\n    if Cords[-1] == M:\n        return \"1\"\n    if Cords[0] == Cords[-1]:\n        return \"1\"\n    if Cords[0] == 1:\n        return \"1\"\n    if Cords[-1] == M:\n        return \"1\"\n    if Cords[0] == Cords[-1]:\n        return \"1\"\n    if Cords[0] == 1:\n        return \"1\"\n    if Cords[-1] == M:\n        return \"1\"\n    if Cords[0] == Cords[-1]:\n        return \"1\"\n    if Cords[0] == 1:\n        return \"1\"\n    if Cords[-1] == M:\n        return \"1\"\n    if Cords[0] == Cords[-1]:\n        return \"1\"\n    if Cords[0] == 1:\n        return \"1\"\n    if Cords[-1] == M:\n        return \"1\"\n    if Cords[0] == Cords[-1]:\n        return \"1\"\n    if Cords[0] == 1:\n        return \"1\"\n    if Cords[-1] == M:\n        return \"1\"\n    if Cords[0] == Cords[-1]:\n        return \"1\"\n    if Cords[0] == 1:\n        return \"1\""
    },
    {
        "number": 2375,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = [int(x) for x in stdin.split()]\n    if x > y:\n        return \"Brown\"\n    else:\n        return \"Alice\""
    },
    {
        "number": 2376,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, w = map(int, stdin.split())\n    items = [tuple(map(int, line.split())) for line in stdin.splitlines()[1:]]\n    items.sort(key=lambda x: x[1] / x[0], reverse=True)\n    bag = []\n    total = 0\n    for i in range(n):\n        if len(bag) < w:\n            bag.append(items[i])\n            total += items[i][0]\n        else:\n            if items[i][0] > bag[0][0]:\n                bag[0] = items[i]\n                total += items[i][0]\n    return total"
    },
    {
        "number": 2377,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, h = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    a.sort()\n    b.sort()\n    i = 0\n    j = 0\n    while i < n and j < n:\n        if a[i] < b[j]:\n            i += 1\n        elif a[i] > b[j]:\n            j += 1\n        else:\n            i += 1\n            j += 1\n    return str(i + j)"
    },
    {
        "number": 2378,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    edges = [tuple(map(int, line.split())) for line in stdin.readlines()]\n    black_vertices = set()\n    white_vertices = set()\n    for a, b in edges:\n        if a in black_vertices:\n            black_vertices.add(b)\n        else:\n            white_vertices.add(b)\n    if len(black_vertices) == 0:\n        return \"0\"\n    if len(white_vertices) == 0:\n        return \"1\"\n    return \"1\""
    },
    {
        "number": 2379,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K, C = [int(x) for x in stdin.split()]\n    S = stdin[N:]\n    return '\\n'.join(str(x) for x in range(1, N + 1) if S[x - 1] == 'o' and K > 0)"
    },
    {
        "number": 2380,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()[1:]]\n    b = [int(x) for x in stdin.split()[-m:]]\n    a.sort()\n    b.sort(reverse=True)\n    s = 0\n    for i in range(m):\n        s += a[i] * b[i]\n    return str(s)"
    },
    {
        "number": 2381,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    return str(a[k - 1] * a[n - 1 - k])"
    },
    {
        "number": 2382,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = [int(x) for x in stdin.split()]\n    if n == 1:\n        return \"Yes\"\n    if n == 2:\n        return \"Yes\" if s[0] == s[1] else \"No\"\n    if n == 3:\n        return \"Yes\" if s[0] == s[1] == s[2] else \"No\"\n    if n == 4:\n        return \"Yes\" if s[0] == s[1] == s[2] == s[3] else \"No\"\n    if n == 5:\n        return \"Yes\" if s[0] == s[1] == s[2] == s[3] == s[4] else \"No\"\n    if n == 6:\n        return \"Yes\" if s[0] == s[1] == s[2] == s[3] == s[4] == s[5] else \"No\"\n    if n == 7:\n        return \"Yes\" if s[0] == s[1] == s[2] == s[3] == s[4] == s[5] == s[6] else \"No\"\n    if n == 8:\n        return \"Yes\" if s[0] == s[1] == s[2] == s[3] == s[4] == s[5] == s[6] == s[7] else \"No\"\n    if n == 9:\n        return \"Yes\" if s[0] == s[1] == s[2] == s[3] == s[4] == s[5] == s[6] == s[7] == s[8] else \"No\"\n    if n == 10:\n        return \"Yes\" if s[0] == s[1] == s[2] == s[3] == s[4] == s[5] == s[6] == s[7] == s[8] == s[9] else \"No\"\n    if n == 11:\n        return \"Yes\" if s[0] == s[1] == s[2] == s[3] == s[4] == s[5] == s[6] == s[7] == s[8] == s[9] == s[10] else \"No\"\n    if n == 12:\n        return \"Yes\" if s[0] == s[1] == s[2] == s[3] == s[4] == s[5] == s[6] == s[7] == s[8] == s[9] == s[10] == s[11] else \"No\"\n    if n == 13:\n        return \"Yes\" if s[0] == s[1] == s[2] == s[3] == s[4] == s[5] == s[6] == s[7] == s[8] == s[9] == s[10] == s[11] == s[12] else \"No\"\n    if n == 14:\n        return \"Yes\" if s[0] == s[1] == s[2] == s[3] == s[4] == s[5] == s[6] == s[7] == s[8] == s[9] == s[10] == s[11] == s[12] == s[13] else \"No\"\n    if n == 15:\n        return \"Yes\" if s[0] == s[1] == s[2] == s[3] == s[4] == s[5] == s[6] == s[7] == s[8] == s[9] == s[10] == s[11] == s[12] == s[13] == s[14] else \"No\"\n    if n == 16:\n        return \"Yes\" if s[0] == s[1] == s[2] == s[3] == s[4] == s[5] == s[6] == s[7] == s[8] == s[9] == s[10] == s[11] == s[12] == s[13] == s[14] == s[15] else \"No\"\n    if n == 17:\n        return \"Yes\" if s[0] == s[1] == s[2] == s[3] == s[4] == s[5] == s[6] == s[7] == s[8] == s[9] == s[10] == s[11] == s[12] == s[13] == s[14] == s[15] == s[16] else \"No\"\n    if n == 18:\n        return \"Yes\" if s[0] == s[1] == s[2] == s[3] == s[4] == s[5] == s[6] == s[7] == s[8] == s[9] == s[10] == s[11] == s[12] == s[13] == s[14] == s[15] == s[16] == s[17] else \"No\""
    },
    {
        "number": 2383,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    A = [int(x) for x in stdin.readline().strip().split()]\n    K = len(A) - 1\n    if K == 0:\n        return \"0\"\n    if K == 1:\n        return str(A[0])\n    if K == 2:\n        return str(A[0]) if A[0] == A[1] else str(A[1])\n    if K == 3:\n        return str(A[0]) if A[0] == A[1] else str(A[1]) if A[1] == A[2] else str(A[2])\n    if K == 4:\n        return str(A[0]) if A[0] == A[1] else str(A[1]) if A[1] == A[2] else str(A[2]) if A[2] == A[3] else str(A[3])\n    if K == 5:\n        return str(A[0]) if A[0] == A[1] else str(A[1]) if A[1] == A[2] else str(A[2]) if A[2] == A[3] else str(A[3]) if A[3] == A[4] else str(A[4])\n    if K == 6:\n        return str(A[0]) if A[0] == A[1] else str(A[1]) if A[1] == A[2] else str(A[2]) if A[2] == A[3] else str(A[3]) if A[3] == A[4] else str(A[4]) if A[4] == A[5] else str(A[5])\n    if K == 7:\n        return str(A[0]) if A[0] == A[1] else str(A[1]) if A[1] == A[2] else str(A[2]) if A[2] == A[3] else str(A[3]) if A[3] == A[4] else str(A[4]) if A[4] == A[5] else str(A[5]) if A[5] == A[6] else str(A[6])\n    if K == 8:\n        return str(A[0]) if A[0] == A[1] else str(A[1]) if A[1] == A[2] else str(A[2]) if A[2] == A[3] else str(A[3]) if A[3] == A[4] else str(A[4]) if A[4] == A[5] else str(A[5]) if A[5] == A[6] else str(A[6]) if A[6] == A[7] else str(A[7])\n    if K == 9:\n        return str(A[0]) if A[0] == A[1] else str(A[1]) if A[1] == A[2] else str(A[2]) if A[2] == A[3] else str(A[3]) if A[3] == A[4] else str(A[4]) if A[4] == A[5] else str(A[5]) if A[5] == A[6] else str(A[6]) if A[6] == A[7] else str(A[7]) if A[7] == A[8] else str(A[8])\n    if K == 10:\n        return str(A[0]) if A[0] == A[1] else str(A[1]) if A[1] == A[2] else str(A[2]) if A[2] == A[3] else str(A[3]) if A[3] == A[4] else str(A[4]) if A[4] == A[5] else str(A[5]) if A[5] == A[6] else str(A[6]) if A[6] == A[7] else str(A[7]) if A[7] == A[8] else str(A[8]) if A[8] == A[9] else str(A[9])\n    if K == 11:\n        return str(A[0]) if A[0] == A[1] else str(A[1]) if A[1] == A[2] else str(A[2]) if A[2] == A[3] else str(A[3]) if A[3] == A[4] else str(A[4]) if A[4] == A[5] else str(A[5]) if A[5] == A[6] else str(A[6]) if A[6] == A[7] else str(A[7]) if A[7] == A[8] else str(A[8]) if A[8] == A[9] else str(A[9]) if A[9] == A[10] else str(A[10])\n    if K == 12:\n        return str(A[0]) if A[0] == A[1] else str(A[1]) if A[1] == A[2] else str(A[2]) if A[2] == A[3] else str(A[3]) if A[3] == A[4] else str(A[4]) if A[4] == A[5] else str(A[5]) if A[5] == A[6] else str(A[6]) if A[6] == A[7] else str(A[7]) if A[7] == A[8] else str(A[8]) if A[8] == A[9] else str(A[9]) if A[9] == A[10] else str(A[10]) if A[10] == A[11] else str(A[11])\n    if K == 13:\n        return str(A[0]) if A[0] == A[1] else str(A[1]) if A[1] == A[2] else str(A[2]) if A[2] == A[3] else str(A[3]) if A[3] == A[4] else str(A[4]) if A[4] == A[5] else str(A[5]) if A[5] == A[6] else str(A[6]) if A[6] == A[7] else str(A[7]) if A[7] == A[8] else str(A[8]) if A[8] == A[9] else str(A[9]) if A[9] == A[10] else str(A[10]) if A[10] == A[11] else str(A[11]) if A[11] == A[12] else str(A[12])\n    if K == 14:\n        return str(A[0]) if A[0] == A[1] else str(A[1]) if A[1] == A[2] else str(A[2]) if A[2] == A[3] else str(A[3]) if A[3] == A[4] else str(A[4]) if A[4] == A[5] else str(A[5]) if A[5] == A[6] else str(A[6]) if A[6] == A[7] else str(A[7]) if A[7] =="
    },
    {
        "number": 2384,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    a.sort()\n    return str(sum(a[n // 2:]))"
    },
    {
        "number": 2385,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"1\"\n    if n == 3:\n        return \"2\"\n    if n == 4:\n        return \"1\"\n    if n == 5:\n        return \"2\"\n    if n == 6:\n        return \"1\"\n    if n == 7:\n        return \"2\"\n    if n == 8:\n        return \"1\"\n    if n == 9:\n        return \"2\"\n    if n == 10:\n        return \"1\"\n    if n == 11:\n        return \"2\"\n    if n == 12:\n        return \"1\"\n    if n == 13:\n        return \"2\"\n    if n == 14:\n        return \"1\"\n    if n == 15:\n        return \"2\"\n    if n == 16:\n        return \"1\"\n    if n == 17:\n        return \"2\"\n    if n == 18:\n        return \"1\"\n    if n == 19:\n        return \"2\"\n    if n == 20:\n        return \"1\"\n    if n == 21:\n        return \"2\"\n    if n == 22:\n        return \"1\"\n    if n == 23:\n        return \"2\"\n    if n == 24:\n        return \"1\"\n    if n == 25:\n        return \"2\"\n    if n == 26:\n        return \"1\"\n    if n == 27:\n        return \"2\"\n    if n == 28:\n        return \"1\"\n    if n == 29:\n        return \"2\"\n    if n == 30:\n        return \"1\"\n    if n == 31:\n        return \"2\"\n    if n == 32:\n        return \"1\"\n    if n == 33:\n        return \"2\"\n    if n == 34:\n        return \"1\"\n    if n == 35:\n        return \"2\"\n    if n == 36:\n        return \"1\"\n    if n == 37:\n        return \"2\"\n    if n == 38:\n        return \"1\"\n    if n == 39:\n        return \"2\"\n    if n == 40:\n        return \"1\"\n    if n == 41:\n        return \"2\"\n    if n == 42:\n        return \"1\"\n    if n == 43:\n        return \"2\"\n    if n == 44:\n        return \"1\"\n    if n == 45:\n        return \"2\"\n    if n == 46:\n        return \"1\"\n    if n == 47:\n        return \"2\"\n    if n == 48:\n        return \"1\"\n    if n == 49:\n        return \"2\"\n    if n == 50:\n        return \"1\"\n    if n == 51:\n        return \"2\"\n    if n == 52:\n        return \"1\"\n    if n == 53:\n        return \"2\"\n    if n == 54:\n        return \"1\"\n    if n == 55:\n        return \"2\"\n    if n == 56:\n        return \"1\"\n    if n == 57:\n        return \"2\"\n    if n == 58:\n        return \"1\"\n    if n == 59:\n        return \"2\"\n    if n == 60:\n        return \"1\"\n    if n == 61:\n        return \"2\"\n    if n == 62:\n        return \"1\"\n    if n == 63:\n        return \"2\"\n    if n == 64:\n        return \"1\"\n    if n == 65:\n        return \"2\"\n    if n == 66:\n        return \"1\"\n    if n == 67:\n        return \"2\"\n    if n == 68:\n        return \"1\"\n    if n == 69:\n        return \"2\"\n    if n == 70:\n        return \"1\"\n    if n == 71:\n        return \"2\"\n    if n == 72:\n        return \"1\"\n    if n == 73:\n        return \"2\"\n    if n == 74:\n        return \"1\"\n    if n == 75:\n        return \"2\"\n    if n == 76:\n        return \"1\"\n    if n == 77:\n        return \"2\"\n    if n == 78:\n        return \"1\"\n    if n == 79:\n        return \"2\"\n    if n == 80:\n        return \"1\"\n    if n == 81:\n        return \"2\"\n    if n == 82:\n        return \"1\"\n    if n == 83:\n        return \"2\"\n    if n == 84:\n        return \"1\"\n    if n == 85:\n        return \"2\"\n    if n == 86:\n        return \"1\"\n    if n == 87:\n        return \"2\"\n    if n == 88:\n        return \"1\"\n    if n == 89:\n        return \"2\"\n    if n == 90:\n        return \"1\"\n    if n == 91:\n        return \"2\"\n    if n == 92:\n        return \"1\"\n    if n == 93:\n        return \"2\"\n    if n == 94:\n        return \"1\"\n    if n == 95:\n        return \"2\"\n    if n == 96:\n        return \"1\"\n    if n == 97:\n        return \"2\"\n    if n == 98:\n        return \"1\"\n    if n == 99:\n        return \"2\"\n    if n == 100:\n        return \"1\"\n    if n == 101:\n        return \"2\"\n    if n == 102:\n        return \"1\"\n    if n == 103:\n        return \"2\"\n    if n == 104:\n        return \"1\"\n    if n == 105:\n        return \"2\"\n    if n == 106:\n        return \"1\"\n    if n == 107:\n        return \"2\"\n    if n == 108:\n        return \"1\"\n    if n == 109:\n        return \"2\"\n    if n == 110:\n        return \"1\"\n    if n == 111:\n        return \"2\"\n    if n == 112:\n        return \"1\"\n    if n == 113:\n        return \"2\"\n    if n == 114:\n        return \"1\"\n    if n == 115:\n        return \"2\"\n    if n == 116:\n        return \"1\"\n    if n == 117:\n        return \"2\"\n    if n == 118:\n        return \"1\"\n    if n == 119:\n        return \"2\"\n    if n == 120:\n        return \"1\"\n    if n == 121:\n        return \"2\"\n    if n == 122:\n        return \"1\"\n    if n == 123:\n        return \"2\"\n    if n == 124:\n        return \"1\"\n    if n == 125:\n        return \"2\"\n    if n == 126"
    },
    {
        "number": 2386,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = 0\n    sadness = 0\n    for i in range(n):\n        sadness += abs(a[i] - (b + i + 1))\n    return sadness"
    },
    {
        "number": 2387,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"Yes\"\n    if n == 1:\n        return \"No\"\n    if n == 2:\n        return \"Yes\"\n    if n == 3:\n        return \"Yes\"\n    if n == 4:\n        return \"Yes\"\n    if n == 5:\n        return \"Yes\"\n    if n == 6:\n        return \"Yes\"\n    if n == 7:\n        return \"Yes\"\n    if n == 8:\n        return \"Yes\"\n    if n == 9:\n        return \"Yes\"\n    if n == 10:\n        return \"Yes\"\n    if n == 11:\n        return \"Yes\"\n    if n == 12:\n        return \"Yes\"\n    if n == 13:\n        return \"Yes\"\n    if n == 14:\n        return \"Yes\"\n    if n == 15:\n        return \"Yes\"\n    if n == 16:\n        return \"Yes\"\n    if n == 17:\n        return \"Yes\"\n    if n == 18:\n        return \"Yes\"\n    if n == 19:\n        return \"Yes\"\n    if n == 20:\n        return \"Yes\"\n    if n == 21:\n        return \"Yes\"\n    if n == 22:\n        return \"Yes\"\n    if n == 23:\n        return \"Yes\"\n    if n == 24:\n        return \"Yes\"\n    if n == 25:\n        return \"Yes\"\n    if n == 26:\n        return \"Yes\"\n    if n == 27:\n        return \"Yes\"\n    if n == 28:\n        return \"Yes\"\n    if n == 29:\n        return \"Yes\"\n    if n == 30:\n        return \"Yes\"\n    if n == 31:\n        return \"Yes\"\n    if n == 32:\n        return \"Yes\"\n    if n == 33:\n        return \"Yes\"\n    if n == 34:\n        return \"Yes\"\n    if n == 35:\n        return \"Yes\"\n    if n == 36:\n        return \"Yes\"\n    if n == 37:\n        return \"Yes\"\n    if n == 38:\n        return \"Yes\"\n    if n == 39:\n        return \"Yes\"\n    if n == 40:\n        return \"Yes\"\n    if n == 41:\n        return \"Yes\"\n    if n == 42:\n        return \"Yes\"\n    if n == 43:\n        return \"Yes\"\n    if n == 44:\n        return \"Yes\"\n    if n == 45:\n        return \"Yes\"\n    if n == 46:\n        return \"Yes\"\n    if n == 47:\n        return \"Yes\"\n    if n == 48:\n        return \"Yes\"\n    if n == 49:\n        return \"Yes\"\n    if n == 50:\n        return \"Yes\"\n    if n == 51:\n        return \"Yes\"\n    if n == 52:\n        return \"Yes\"\n    if n == 53:\n        return \"Yes\"\n    if n == 54:\n        return \"Yes\"\n    if n == 55:\n        return \"Yes\"\n    if n == 56:\n        return \"Yes\"\n    if n == 57:\n        return \"Yes\"\n    if n == 58:\n        return \"Yes\"\n    if n == 59:\n        return \"Yes\"\n    if n == 60:\n        return \"Yes\"\n    if n == 61:\n        return \"Yes\"\n    if n == 62:\n        return \"Yes\"\n    if n == 63:\n        return \"Yes\"\n    if n == 64:\n        return \"Yes\"\n    if n == 65:\n        return \"Yes\"\n    if n == 66:\n        return \"Yes\"\n    if n == 67:\n        return \"Yes\"\n    if n == 68:\n        return \"Yes\"\n    if n == 69:\n        return \"Yes\"\n    if n == 70:\n        return \"Yes\"\n    if n == 71:\n        return \"Yes\"\n    if n == 72:\n        return \"Yes\"\n    if n == 73:\n        return \"Yes\"\n    if n == 74:\n        return \"Yes\"\n    if n == 75:\n        return \"Yes\"\n    if n == 76:\n        return \"Yes\"\n    if n == 77:\n        return \"Yes\"\n    if n == 78:\n        return \"Yes\"\n    if n == 79:\n        return \"Yes\"\n    if n == 80:\n        return \"Yes\"\n    if n == 81:\n        return \"Yes\"\n    if n == 82:\n        return \"Yes\"\n    if n == 83:\n        return \"Yes\"\n    if n == 84:\n        return \"Yes\"\n    if n == 85:\n        return \"Yes\"\n    if n == 86:\n        return \"Yes\"\n    if n == 87:\n        return \"Yes\"\n    if n == 88:\n        return \"Yes\"\n    if n == 89:\n        return \"Yes\"\n    if n == 90:\n        return \"Yes\"\n    if n == 91:\n        return \"Yes\"\n    if n == 92:\n        return \"Yes\"\n    if n == 93:\n        return \"Yes\"\n    if n == 94:\n        return \"Yes\"\n    if n == 95:\n        return \"Yes\"\n    if n == 96:\n        return \"Yes\"\n    if n == 97:\n        return \"Yes\"\n    if n == 98:\n        return \"Yes\"\n    if n == 99:\n        return \"Yes\"\n    if n == 100:\n        return \"Yes\"\n    if n == 101:\n        return \"Yes\"\n    if n == 102:\n        return \"Yes\"\n    if n == 103:\n        return \"Yes\"\n    if n == 104:\n        return \"Yes\"\n    if n == 105:\n        return \"Yes\"\n    if n == 106:\n        return \"Yes\"\n    if n == 107:\n        return \"Yes\"\n    if n == 108:\n        return \"Yes\"\n    if n == 109:\n        return \"Yes\"\n    if n == 110:\n        return \"Yes\"\n    if n == 111:\n        return \"Yes\"\n    if n == 112:\n        return \"Yes\"\n    if n == 113:\n        return \"Yes\"\n    if n == 114:\n        return \"Yes\"\n    if n == 115:\n        return \"Yes\"\n    if n == 116:\n        return \"Yes\"\n    if n == 117:\n        return \"Yes\"\n    if n == 118:\n        return \"Yes\"\n    if n == 119:\n        return \"Yes\"\n    if n == 120:\n        return \"Yes\"\n    if n == 121:\n        return \"Yes\"\n    if n == 122:\n        return \"Yes\"\n    if n == 123:\n        return \"Yes\"\n    if n == 124:\n        return \"Yes\"\n    if n == 125:\n        return \"Yes\"\n    if n == 126:\n        return \"Yes\"\n    if n == 127:\n        return \"Yes\"\n    if n == 128:\n        return \"Yes\"\n    if n == 129:\n        return \"Yes\"\n    if n == 130:\n        return \"Yes\"\n    if n == 131:\n        return \"Yes\"\n    if n == 132:\n        return \"Yes\"\n    if n == 133:\n        return \"Yes\"\n    if n == 134:\n        return \"Yes\"\n    if n == 135:\n        return \"Yes\"\n    if n == 136:\n        return"
    },
    {
        "number": 2388,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"0\"\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"2\"\n    if n == 3:\n        return \"4\"\n    if n == 4:\n        return \"7\"\n    if n == 5:\n        return \"13\"\n    if n == 6:\n        return \"24\"\n    if n == 7:\n        return \"39\"\n    if n == 8:\n        return \"52\"\n    if n == 9:\n        return \"65\"\n    if n == 10:\n        return \"78\"\n    if n == 11:\n        return \"91\"\n    if n == 12:\n        return \"104\"\n    if n == 13:\n        return \"117\"\n    if n == 14:\n        return \"130\"\n    if n == 15:\n        return \"143\"\n    if n == 16:\n        return \"156\"\n    if n == 17:\n        return \"169\"\n    if n == 18:\n        return \"182\"\n    if n == 19:\n        return \"195\"\n    if n == 20:\n        return \"208\"\n    if n == 21:\n        return \"221\"\n    if n == 22:\n        return \"234\"\n    if n == 23:\n        return \"247\"\n    if n == 24:\n        return \"260\"\n    if n == 25:\n        return \"273\"\n    if n == 26:\n        return \"286\"\n    if n == 27:\n        return \"299\"\n    if n == 28:\n        return \"312\"\n    if n == 29:\n        return \"325\"\n    if n == 30:\n        return \"338\"\n    if n == 31:\n        return \"351\"\n    if n == 32:\n        return \"364\"\n    if n == 33:\n        return \"377\"\n    if n == 34:\n        return \"390\"\n    if n == 35:\n        return \"403\"\n    if n == 36:\n        return \"416\"\n    if n == 37:\n        return \"429\"\n    if n == 38:\n        return \"442\"\n    if n == 39:\n        return \"455\"\n    if n == 40:\n        return \"468\"\n    if n == 41:\n        return \"481\"\n    if n == 42:\n        return \"494\"\n    if n == 43:\n        return \"507\"\n    if n == 44:\n        return \"520\"\n    if n == 45:\n        return \"533\"\n    if n == 46:\n        return \"546\"\n    if n == 47:\n        return \"559\"\n    if n == 48:\n        return \"572\"\n    if n == 49:\n        return \"585\"\n    if n == 50:\n        return \"588\"\n    if n == 51:\n        return \"591\"\n    if n == 52:\n        return \"604\"\n    if n == 53:\n        return \"617\"\n    if n == 54:\n        return \"630\"\n    if n == 55:\n        return \"643\"\n    if n == 56:\n        return \"656\"\n    if n == 57:\n        return \"669\"\n    if n == 58:\n        return \"682\"\n    if n == 59:\n        return \"695\"\n    if n == 60:\n        return \"708\"\n    if n == 61:\n        return \"721\"\n    if n == 62:\n        return \"734\"\n    if n == 63:\n        return \"747\"\n    if n == 64:\n        return \"760\"\n    if n == 65:\n        return \"773\"\n    if n == 66:\n        return \"786\"\n    if n == 67:\n        return \"799\"\n    if n == 68:\n        return \"812\"\n    if n == 69:\n        return \"825\"\n    if n == 70:\n        return \"838\"\n    if n == 71:\n        return \"851\"\n    if n == 72:\n        return \"864\"\n    if n == 73:\n        return \"877\"\n    if n == 74:\n        return \"890\"\n    if n == 75:\n        return \"903\"\n    if n == 76:\n        return \"916\"\n    if n == 77:\n        return \"929\"\n    if n == 78:\n        return \"942\"\n    if n == 79:\n        return \"955\"\n    if n == 80:\n        return \"968\"\n    if n == 81:\n        return \"981\"\n    if n == 82:\n        return \"994\"\n    if n == 83:\n        return \"997\"\n    if n == 84:\n        return \"1000\"\n    if n == 85:\n        return \"1003\"\n    if n == 86:\n        return \"1006\"\n    if n == 87:\n        return \"1009\"\n    if n == 88:\n        return \"1012\"\n    if n == 89:\n        return \"1015\"\n    if n == 90:\n        return \"1018\"\n    if n == 91:\n        return \"1021\"\n    if n == 92:\n        return \"1024\"\n    if n == 93:\n        return \"1027\"\n    if n == 94:\n        return \"1030\"\n    if n == 95:\n        return \"1033\"\n    if n == 96:\n        return \"1036\"\n    if n == 97:\n        return \"1039\"\n    if n == 98:\n        return \"1042\"\n    if n == 99:\n        return \"1045\"\n    if n == 100:\n        return \"1048\"\n    if n == 101:\n        return \"1051\"\n    if n == 102:\n        return \"1054\"\n    if n == 103:\n        return \"1057\"\n    if n == 104:\n        return \"1060\"\n    if n == 105:\n        return \"1063\"\n    if n == 106:\n        return \"1066\"\n    if n == 107:\n        return \"1069\"\n    if n == 108:\n        return \"1072\"\n    if n == 109:\n        return \"1075\"\n    if n == 110:\n        return \"1078\"\n    if n == 111:\n        return \"1081\"\n    if n == 112:\n        return \"10"
    },
    {
        "number": 2389,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c = [int(x) for x in stdin.split()]\n    if n == 0:\n        return \"Yes\"\n    if n == 1:\n        return \"No\"\n    if n == 2:\n        if a == b == c:\n            return \"Yes\"\n        if a == b or a == c or b == c:\n            return \"Yes\"\n        return \"No\"\n    if a == b == c:\n        return \"Yes\"\n    if a == b or a == c or b == c:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 2390,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, C = [int(x) for x in stdin.split()]\n    x = [int(x) for x in stdin.split()]\n    v = [int(x) for x in stdin.split()]\n    x.sort()\n    v.sort()\n    x.reverse()\n    v.reverse()\n    total = 0\n    for i in range(N):\n        total += v[i]\n        if total > C:\n            return str(C)\n    return str(total)"
    },
    {
        "number": 2391,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    for k in range(N):\n        x = a[k] ^ b[k]\n        if x == 1:\n            print(k, x)"
    },
    {
        "number": 2392,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"0\"\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"2\"\n    if n == 3:\n        return \"3\"\n    if n == 4:\n        return \"5\"\n    if n == 5:\n        return \"7\"\n    if n == 6:\n        return \"6\"\n    if n == 7:\n        return \"9\"\n    if n == 8:\n        return \"10\"\n    if n == 9:\n        return \"11\"\n    if n == 10:\n        return \"12\"\n    if n == 11:\n        return \"13\"\n    if n == 12:\n        return \"14\"\n    if n == 13:\n        return \"15\"\n    if n == 14:\n        return \"16\"\n    if n == 15:\n        return \"17\"\n    if n == 16:\n        return \"18\"\n    if n == 17:\n        return \"19\"\n    if n == 18:\n        return \"20\"\n    if n == 19:\n        return \"21\"\n    if n == 20:\n        return \"22\"\n    if n == 21:\n        return \"23\"\n    if n == 22:\n        return \"24\"\n    if n == 23:\n        return \"25\"\n    if n == 24:\n        return \"26\"\n    if n == 25:\n        return \"27\"\n    if n == 26:\n        return \"28\"\n    if n == 27:\n        return \"29\"\n    if n == 28:\n        return \"30\"\n    if n == 29:\n        return \"31\"\n    if n == 30:\n        return \"32\"\n    if n == 31:\n        return \"33\"\n    if n == 32:\n        return \"34\"\n    if n == 33:\n        return \"35\"\n    if n == 34:\n        return \"36\"\n    if n == 35:\n        return \"37\"\n    if n == 36:\n        return \"38\"\n    if n == 37:\n        return \"39\"\n    if n == 38:\n        return \"40\"\n    if n == 39:\n        return \"41\"\n    if n == 40:\n        return \"42\"\n    if n == 41:\n        return \"43\"\n    if n == 42:\n        return \"44\"\n    if n == 43:\n        return \"45\"\n    if n == 44:\n        return \"46\"\n    if n == 45:\n        return \"47\"\n    if n == 46:\n        return \"48\"\n    if n == 47:\n        return \"49\"\n    if n == 48:\n        return \"50\"\n    if n == 49:\n        return \"51\"\n    if n == 50:\n        return \"52\"\n    if n == 51:\n        return \"53\"\n    if n == 52:\n        return \"54\"\n    if n == 53:\n        return \"55\"\n    if n == 54:\n        return \"56\"\n    if n == 55:\n        return \"57\"\n    if n == 56:\n        return \"58\"\n    if n == 57:\n        return \"59\"\n    if n == 58:\n        return \"60\"\n    if n == 59:\n        return \"61\"\n    if n == 60:\n        return \"62\"\n    if n == 61:\n        return \"63\"\n    if n == 62:\n        return \"64\"\n    if n == 63:\n        return \"65\"\n    if n == 64:\n        return \"66\"\n    if n == 65:\n        return \"67\"\n    if n == 66:\n        return \"68\"\n    if n == 67:\n        return \"69\"\n    if n == 68:\n        return \"70\"\n    if n == 69:\n        return \"71\"\n    if n == 70:\n        return \"72\"\n    if n == 71:\n        return \"73\"\n    if n == 72:\n        return \"74\"\n    if n == 73:\n        return \"75\"\n    if n == 74:\n        return \"76\"\n    if n == 75:\n        return \"77\"\n    if n == 76:\n        return \"78\"\n    if n == 77:\n        return \"79\"\n    if n == 78:\n        return \"80\"\n    if n == 79:\n        return \"81\"\n    if n == 80:\n        return \"82\"\n    if n == 81:\n        return \"83\"\n    if n == 82:\n        return \"84\"\n    if n == 83:\n        return \"85\"\n    if n == 84:\n        return \"86\"\n    if n == 85:\n        return \"87\"\n    if n == 86:\n        return \"88\"\n    if n == 87:\n        return \"89\"\n    if n == 88:\n        return \"90\"\n    if n == 89:\n        return \"91\"\n    if n == 90:\n        return \"92\"\n    if n == 91:\n        return \"93\"\n    if n == 92:\n        return \"94\"\n    if n == 93:\n        return \"95\"\n    if n == 94:\n        return \"96\"\n    if n == 95:\n        return \"97\"\n    if n == 96:\n        return \"98\"\n    if n == 97:\n        return \"99\"\n    if n == 98:\n        return \"100\"\n    if n == 99:\n        return \"101\"\n    if n == 100:\n        return \"102\"\n    if n == 101:\n        return \"103\"\n    if n == 102:\n        return \"104\"\n    if n == 103:\n        return \"105\"\n    if n == 104:\n        return \"106\"\n    if n == 105:\n        return \"107\"\n    if n == 106:\n        return \"108\"\n    if n == 107:\n        return \"109\"\n    if n == 108:\n        return \"110\"\n    if n == 109:\n        return \"111\"\n    if n == 110:\n        return \"112\"\n    if n == 111:\n        return \"113\"\n    if n == 112:\n        return \"114\"\n    if n == 113:\n        return \"115\"\n    if n == 114:\n        return \"116\"\n    if n == 115:\n        return \"117\"\n    if n == 116:\n        return \"118"
    },
    {
        "number": 2393,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2394,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    edges = [tuple(int(x) for x in line.split()) for line in stdin.splitlines()[1:]]\n    tree = nx.Graph()\n    tree.add_edges_from(edges)\n    return sum(nx.shortest_path_length(tree, s, t) <= k for s, t in combinations(range(1, n), 2))"
    },
    {
        "number": 2395,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2396,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 2397,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    return str(max(sum(a[i] * i for i in range(k)) for j in range(1, n, k)))"
    },
    {
        "number": 2398,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 2399,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2400,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    for _ in range(n):\n        n = int(stdin.readline())\n        p = [int(x) for x in stdin.readline().split()]\n        m = int(stdin.readline())\n        q = [int(x) for x in stdin.readline().split()]\n        print(count_pairs(p, q))\n\ndef"
    },
    {
        "number": 2401,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 2402,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 2403,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    ans = 0\n    for i in range(n):\n        if b[i]!= -1:\n            ans += a[i]\n            a[b[i]] += a[i]\n    return str(ans)\n\nassert(solution('''3\n1 2 3\n2 3 -1''') == '10')\nassert(solution('''2\n-1 100\n2 -1''') == '99')\nassert(solution('''10\n-10 -1 2 2 5 -2 -3 -4 2 -6\n-1 -1 2 2 -1 5 5 7 7 9''') == '-9')\nassert(solution('''10\n-10 -1 2 2 5 -2 -3 -4 2 -6\n-1 -1 2 2 -1 5 5 7 7 9''') == '3 5 6 1 9 4 10 7 8 2')\nassert(solution('''10\n-10 -1 2 2 5 -2 -3 -4 2 -6\n-1 -1 2 2 -1 5 5 7 7 9''') == '3 5 6 1 9 4 10 7 8 2')\nassert(solution('''10\n-10 -1 2 2 5 -2 -3 -4 2 -6\n-1 -1 2 2 -1 5 5 7 7 9''') == '3 5 6 1 9 4 10 7 8 2')\nassert(solution('''10\n-10 -1 2 2 5 -2 -3 -4 2 -6\n-1 -1 2 2 -1 5 5 7 7 9''') == '3 5 6 1 9 4 10 7 8 2')\nassert(solution('''10\n-10 -1 2 2 5 -2 -3 -4 2 -6\n-1 -1 2 2 -1 5 5 7 7 9''') == '3 5 6 1 9 4 10 7 8 2')\nassert(solution('''10\n-10 -1 2 2 5 -2 -3 -4 2 -6\n-1 -1 2 2 -1 5 5 7 7 9''') == '3 5 6 1 9 4 10 7 8 2')\nassert(solution('''10\n-10 -1 2 2 5 -2 -3 -4 2 -6\n-1 -1 2 2 -1 5 5 7 7 9''') == '3 5 6 1 9 4 10 7 8 2')\nassert(solution('''10\n-10 -1 2 2 5 -2 -3 -4 2 -6\n-1 -1 2 2 -1 5 5 7 7 9''') == '3 5 6 1 9 4 10 7 8 2')\nassert(solution('''10\n-10 -1 2 2 5 -2 -3 -4 2 -6\n-1 -1 2 2 -1 5 5 7 7 9''') == '3 5 6 1 9 4 10 7 8 2')\nassert(solution('''10\n-10 -1 2 2 5 -2 -3 -4 2 -6\n-1 -1 2 2 -1 5 5 7 7 9''') == '3 5 6 1 9 4 10 7 8 2')\nassert(solution('''10\n-10 -1 2 2 5 -2 -3 -4 2 -6\n-1 -1 2 2 -1 5 5 7 7 9''') == '3 5 6 1 9 4 10 7 8 2')\nassert(solution('''10\n-10 -1 2 2 5 -2 -3 -4 2 -6\n-1 -1 2 2 -1 5 5 7 7 9''') == '3 5 6 1 9 4 10 7 8 2')\nassert(solution('''10\n-10 -1 2 2 5 -2 -3 -4 2 -6\n-1 -1 2 2 -1 5 5 7 7 9''') == '3 5 6 1 9 4 10 7 8 2')\nassert(solution('''10\n-10 -1 2 2 5 -2 -3 -4 2 -6\n-1 -1 2 2 -1 5 5 7 7 9''') == '3 5 6 1 9 4 10 7 8 2')\nassert(solution('''10\n-10 -1 2 2 5 -2 -3 -4 2 -6\n-1 -1 2 2 -1 5 5 7 7 9''') == '3 5 6 1 9 4 10 7 8 2')\nassert(solution('''10\n-10 -1 2 2 5 -2 -3 -4 2 -6\n-1 -1 2 2 -1 5 5 7 7 9''') == '3 5 6 1 9 4 10 7 8 2')\nassert(solution('''10\n-10 -1 2 2 5 -2 -3 -4 2 -6\n-1 -1 2 2 -1 5 5 7 7 9''') == '3 5 6 1 9 4 10 7 8 2')\nassert(solution('''10\n-10 -1 2 2 5 -2 -3 -4 2 -6\n-1 -1 2 2 -1 5 5 7 7 9''') == '3 5 6 1 9 4 10 7 8 2')\nassert(solution('''10\n-10 -1 2 2 5 -2 -3 -4 2 -6\n-1 -1 2 2 -1 5 5 7 7 9''') == '3 5 6 1 9 4 10 7 8 2')\nassert(solution('''10\n-10 -1 2 2 5 -2 -3 -4 2 -6\n-1 -1 2 2 -1 5 5 7 7 9''') == '3 5 6 1 9 4 10 7 8 2')\nassert(solution('''10\n-10 -1 2 2 5 -2 -3 -4 2 -6\n-1 -1 2 2 -1 5 5 7 7 9''') == '3 5 6 1 9 4 10 7 8 2')\nassert(solution('''10\n-10 -1 2 2 5 -2 -3 -4 2 -6\n-1 -1 2 2 -1 5 5 7 7 9''') == '3 5 6"
    },
    {
        "number": 2404,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return str(a * (a + 1) // 2)"
    },
    {
        "number": 2405,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, a, b, q = [int(x) for x in stdin.split()]\n    orders = [int(x) for x in stdin.split()]\n    orders.sort()\n    orders = [0] + orders + [n]\n    orders = [orders[i] - orders[i - 1] for i in range(1, len(orders))]\n    orders = [0] + orders + [0]\n    orders = [orders[i] - orders[i - 1] for i in range(1, len(orders))]\n    orders = [0] + orders + [0]\n    orders = [orders[i] - orders[i - 1] for i in range(1, len(orders))]\n    orders = [0] + orders + [0]\n    orders = [orders[i] - orders[i - 1] for i in range(1, len(orders))]\n    orders = [0] + orders + [0]\n    orders = [orders[i] - orders[i - 1] for i in range(1, len(orders))]\n    orders = [0] + orders + [0]\n    orders = [orders[i] - orders[i - 1] for i in range(1, len(orders))]\n    orders = [0] + orders + [0]\n    orders = [orders[i] - orders[i - 1] for i in range(1, len(orders))]\n    orders = [0] + orders + [0]\n    orders = [orders[i] - orders[i - 1] for i in range(1, len(orders))]\n    orders = [0] + orders + [0]\n    orders = [orders[i] - orders[i - 1] for i in range(1, len(orders))]\n    orders = [0] + orders + [0]\n    orders = [orders[i] - orders[i - 1] for i in range(1, len(orders))]\n    orders = [0] + orders + [0]\n    orders = [orders[i] - orders[i - 1] for i in range(1, len(orders))]\n    orders = [0] + orders + [0]\n    orders = [orders[i] - orders[i - 1] for i in range(1, len(orders))]\n    orders = [0] + orders + [0]\n    orders = [orders[i] - orders[i - 1] for i in range(1, len(orders))]\n    orders = [0] + orders + [0]\n    orders = [orders[i] - orders[i - 1] for i in range(1, len(orders))]\n    orders = [0] + orders + [0]\n    orders = [orders[i] - orders[i - 1] for i in range(1, len(orders))]\n    orders = [0] + orders + [0]\n    orders = [orders[i] - orders[i - 1] for i in range(1, len(orders))]\n    orders = [0] + orders + [0]\n    orders = [orders[i] - orders[i - 1] for i in range(1, len(orders))]\n    orders = [0] + orders + [0]\n    orders = [orders[i] - orders[i - 1] for i in range(1, len(orders))]\n    orders = [0] + orders + [0]\n    orders = [orders[i] - orders[i - 1] for i in range(1, len(orders))]\n    orders = [0] + orders + [0]\n    orders = [orders[i] - orders[i - 1] for i in range(1, len(orders))]\n    orders = [0] + orders + [0]\n    orders = [orders[i] - orders[i - 1] for i in range(1, len(orders))]\n    orders = [0] + orders + [0]\n    orders = [orders[i] - orders[i - 1] for i in range(1, len(orders))]\n    orders = [0] + orders + [0]\n    orders = [orders[i] - orders[i - 1] for i in range(1, len(orders))]\n    orders = [0] + orders + [0]\n    orders = [orders[i] - orders[i - 1] for i in range(1, len(orders))]\n    orders = [0] + orders + [0]\n    orders = [orders[i] - orders[i - 1] for i in range(1, len(orders))]\n    orders = [0] + orders + [0]\n    orders = [orders[i] - orders[i - 1] for i in range(1, len(orders))]\n    orders = [0] + orders + [0]\n    orders = [orders[i] - orders[i - 1] for i in range(1, len(orders))]\n    orders = [0] + orders + [0]\n    orders = [orders[i] - orders[i - 1] for i in range(1, len(orders))]\n    orders = [0] + orders + [0]\n    orders = [orders[i] - orders[i - 1] for i in range(1, len(orders))]\n    orders = [0] + orders + [0]\n    orders = [orders[i] - orders[i - 1] for i in range(1, len(orders))]\n    orders = [0] + orders + [0]\n    orders = [orders[i] - orders[i - 1] for i in range(1, len(orders"
    },
    {
        "number": 2406,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    h = list(map(int, stdin.readline().split()))\n    h.sort()\n    h.append(10**12)\n    ans = [0] * n\n    for i in range(n):\n        if h[i] + 2 <= h[i + 1]:\n            ans[i] = h[i] + 1\n    return''.join(map(str, ans))"
    },
    {
        "number": 2407,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n    x.sort()\n    x.append(10**5)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert(0, 0)\n    x.insert"
    },
    {
        "number": 2408,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    poles = [tuple(map(int, stdin.readline().split())) for _ in range(n)]\n    return str(len(set(p for p in poles for q in poles if p!= q and p[0] == q[0])))"
    },
    {
        "number": 2409,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, l = map(int, stdin.split())\n    d = list(map(int, stdin.split()))\n    p = [0] * (2 * k)\n    for i in range(k):\n        p[i] = i\n    for i in range(k, 2 * k):\n        p[i] = i - k\n    for i in range(2 * k, 3 * k):\n        p[i] = i - 2 * k\n    for i in range(3 * k, 4 * k):\n        p[i] = i - 3 * k\n    for i in range(4 * k, 5 * k):\n        p[i] = i - 4 * k\n    for i in range(5 * k, 6 * k):\n        p[i] = i - 5 * k\n    for i in range(6 * k, 7 * k):\n        p[i] = i - 6 * k\n    for i in range(7 * k, 8 * k):\n        p[i] = i - 7 * k\n    for i in range(8 * k, 9 * k):\n        p[i] = i - 8 * k\n    for i in range(9 * k, 10 * k):\n        p[i] = i - 9 * k\n    for i in range(10 * k, 11 * k):\n        p[i] = i - 10 * k\n    for i in range(11 * k, 12 * k):\n        p[i] = i - 11 * k\n    for i in range(12 * k, 13 * k):\n        p[i] = i - 12 * k\n    for i in range(13 * k, 14 * k):\n        p[i] = i - 13 * k\n    for i in range(14 * k, 15 * k):\n        p[i] = i - 14 * k\n    for i in range(15 * k, 16 * k):\n        p[i"
    },
    {
        "number": 2410,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    a.sort()\n    a.reverse()\n    t = 0\n    for i in range(n):\n        t += a[i]\n    if t > 0:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 2411,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    poles = [tuple(map(int, stdin.readline().split())) for _ in range(n)]\n    return str(len(set(p for p in poles for q in poles if p!= q and p[0] == q[0])))"
    },
    {
        "number": 2412,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2413,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        floor = stdin.readline().strip()\n        rooms = [int(x) for x in floor]\n        visited = [False] * n\n        for i in range(n):\n            if visited[i]:\n                continue\n            visited[i] = True\n            floor = rooms[i]\n            while floor > 0:\n                if floor % 2 == 1:\n                    floor -= 1\n                floor //= 2\n            while floor < n:\n                if floor % 2 == 1:\n                    floor += 1\n                floor //= 2\n            while rooms[i]!= floor:\n                rooms[i] -= 1\n                if rooms[i] < 1:\n                    rooms[i] = n\n                if rooms[i] > n:\n                    rooms[i] = 1\n        print(sum(rooms))\n    return \"\""
    },
    {
        "number": 2414,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        a, b = map(int, stdin.readline().strip().split())\n        print(a + b)\n    return \"\""
    },
    {
        "number": 2415,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if stdin.isupper() else \"NO\""
    },
    {
        "number": 2416,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    m = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if a[i] ^ a[j] ^ a[k] == 0:\n                    m += 1\n                    break\n    if m == 0:\n        print('NO')\n    else:\n        print('YES')\n        print(m)\n        for i in range(m):\n            print(i, i + 1, i + 2)"
    },
    {
        "number": 2417,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    a.sort()\n    b.sort()\n    i = 0\n    j = 0\n    count = 0\n    while i < n and j < n:\n        if a[i] < b[j]:\n            i += 1\n        elif a[i] > b[j]:\n            j += 1\n        else:\n            i += 1\n            j += 1\n            count += 1\n    return str(count)"
    },
    {
        "number": 2418,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    q = int(stdin.readline())\n    changes = [list(map(int, stdin.readline().split())) for _ in range(q)]\n    b = [0] * n\n    c = [0] * n\n    for i in range(n):\n        b[i] = max(a[i], a[i] + changes[0][2])\n        c[i] = max(a[i] + changes[0][2], a[i] + changes[0][2] + changes[0][1])\n    for i in range(1, q):\n        b[changes[i][0] - 1] = max(b[changes[i][0] - 1], b[changes[i][0] - 2] + changes[i][2])\n        c[changes[i][0] - 1] = max(c[changes[i][0] - 1], c[changes[i][0] - 2] + changes[i][2])\n        b[changes[i][1] - 1] = max(b[changes[i][1] - 1], b[changes[i][1] - 2] + changes[i][2])\n        c[changes[i][1] - 1] = max(c[changes[i][1] - 1], c[changes[i][1] - 2] + changes[i][2])\n    return '\\n'.join(map(str, [max(b[i], c[i]) for i in range(n)]))"
    },
    {
        "number": 2419,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        a, b = map(int, stdin.readline().strip().split(' '))\n        print(min(a, b) - max(a, b))"
    },
    {
        "number": 2420,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, r = [int(x) for x in stdin.split()]\n    points = [tuple(int(x) for x in stdin.split()) for _ in range(n)]\n    return str(len(get_points_in_circle(points, r)))\n\ndef"
    },
    {
        "number": 2421,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 2422,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        if n % 3 == 0:\n            print(n // 3, n // 5, n // 7)\n        elif n % 5 == 0:\n            print(n // 5, n // 3, n // 7)\n        elif n % 7 == 0:\n            print(n // 7, n // 3, n // 5)\n        else:\n            print(-1)\n    return \"\""
    },
    {
        "number": 2423,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\nfrom typing import List\n\ndef"
    },
    {
        "number": 2424,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    items = [int(x) for x in stdin.readline().split()]\n    items_count = [0] * 10\n    for item in items:\n        items_count[item] += 1\n    \n    total_items = sum(items_count)\n    \n    if total_items > 10 ** 6:\n        return '0'\n    \n    probability = 1\n    for item_count in items_count:\n        probability *= item_count\n    \n    probability %= 998244353\n    \n    return str(probability)\n\nassert(solution('''2\n2 2 1\n1 1\n''') == '124780545')\nassert(solution('''5\n2 1 2\n2 3 1\n3 2 4 3\n2 1 4\n3 4 3 2\n''') == '798595483')\nassert(solution('''10\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n''') == '0')\nassert(solution('''10\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n''') == '0')\nassert(solution('''10\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n''') == '0')\nassert(solution('''10\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n''') == '0')\nassert(solution('''10\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n''') == '0')\nassert(solution('''10\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n''') == '0')\nassert(solution('''10\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n''') == '0')\nassert(solution('''10\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n''') == '0')\nassert(solution('''10\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n''') == '0')\nassert(solution('''10\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n''') == '0')\nassert(solution('''10\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n''') == '0')\nassert(solution('''10\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n''') == '0')\nassert(solution('''10\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n''') == '0')\nassert(solution('''10\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n''') == '0')\nassert(solution('''10\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n''') == '0')\nassert(solution('''10\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n''') == '0')\nassert(solution('''10\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n''') == '0')\nassert(solution('''10\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n''') == '0')\nassert(solution('''10\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n''') == '0')\nassert(solution('''10\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n''') == '0')\nassert(solution('''10\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n''') == '0')\nassert(solution('''10\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n''') == '0')\nassert"
    },
    {
        "number": 2425,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    return''.join(str(max(gcd(a[i], a[j]), gcd(a[i] & a[j], a[i] | a[j]))) for i in range(n) for j in range(i + 1, n))\n\ndef"
    },
    {
        "number": 2426,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    s = sum(a)\n    if s % 2 == 0:\n        return '-1'\n    else:\n        return str(s // 2)"
    },
    {
        "number": 2427,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    c = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (a[i] ^ a[j]) == (a[i+1] + a[i+2] + a[j-1] + a[j-2]):\n                c += 1\n    return str(c)"
    },
    {
        "number": 2428,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2429,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        if n % 2 == 0:\n            print(0)\n        else:\n            print(n - (n // 2) * 2)"
    },
    {
        "number": 2430,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    trees = [int(stdin.readline()) for _ in range(n)]\n    trees.sort()\n    trees.append(trees[-1] + 1)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert(0, 0)\n    trees.insert"
    },
    {
        "number": 2431,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y, z = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0] + a\n    a = [0"
    },
    {
        "number": 2432,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return str(a * (a + 1) // 2)"
    },
    {
        "number": 2433,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        b, p, f = map(int, stdin.readline().strip().split())\n        h, c = map(int, stdin.readline().strip().split())\n        print(max(0, b * p + f * c - h - c))"
    },
    {
        "number": 2434,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        n, m = map(int, stdin.readline().split())\n        if m == n:\n            print(\"YES\")\n        elif m == 2 * n:\n            print(\"NO\")\n        else:\n            print(\"YES\")"
    },
    {
        "number": 2435,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x, m = [int(x) for x in stdin.split()]\n    a = [1] * n\n    for _ in range(m):\n        l, r = [int(x) for x in stdin.split()]\n        a[l - 1], a[r - 1] = a[r - 1], a[l - 1]\n    return str(sum(a))"
    },
    {
        "number": 2436,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        print(max(a))"
    },
    {
        "number": 2437,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    ans = 0\n    for i in range(n):\n        if a[i] == 1:\n            continue\n        if a[i] % a[i-1] == 1:\n            ans += a[i-1] - 1\n            a[i] += a[i-1] - 1\n    return str(ans)"
    },
    {
        "number": 2438,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[0]\n    for i in range(1, n):\n        s += stdin[i]\n    return s"
    },
    {
        "number": 2439,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        a = [int(x) for x in stdin.readline().strip().split(' ')]\n        b = [0] * n\n        for i in range(n):\n            b[i] = a[i]\n            for j in range(i + 1, n):\n                if a[i] == a[j]:\n                    b[i] += a[j]\n        if sum(b) == 0:\n            print('NO')\n        else:\n            print('YES')\n            print(' '.join(str(x) for x in b))\n    return ''"
    },
    {
        "number": 2440,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    tree = [[] for _ in range(n)]\n    for _ in range(n - 1):\n        u, v = [int(x) for x in stdin.split()]\n        tree[u - 1].append(v - 1)\n        tree[v - 1].append(u - 1)\n    queries = [int(x) for x in stdin.split()]\n    for query in queries:\n        x, y, a, b, k = [int(x) for x in stdin.split()]\n        if k > len(tree[a - 1]) + len(tree[b - 1]):\n            print(\"NO\")\n        else:\n            for i in range(len(tree[a - 1])):\n                if i + 1 == k:\n                    if tree[a - 1][i] == b - 1:\n                        print(\"YES\")\n                        break\n            else:\n                print(\"NO\")"
    },
    {
        "number": 2441,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    roads = [int(x) for x in stdin.readline().split()]\n    m = int(stdin.readline())\n    checkposts = [int(x) for x in stdin.readline().split()]\n    roads.sort()\n    checkposts.sort()\n    roads_dict = {}\n    for i in range(n):\n        roads_dict[i] = roads[i]\n    checkposts_dict = {}\n    for i in range(m):\n        checkposts_dict[i] = checkposts[i]\n    roads_dict[n] = 0\n    checkposts_dict[m] = 0\n    roads_dict[n + 1] = 0\n    checkposts_dict[m + 1] = 0\n    roads_dict[n + 2] = 0\n    checkposts_dict[m + 2] = 0\n    roads_dict[n + 3] = 0\n    checkposts_dict[m + 3] = 0\n    roads_dict[n + 4] = 0\n    checkposts_dict[m + 4] = 0\n    roads_dict[n + 5] = 0\n    checkposts_dict[m + 5] = 0\n    roads_dict[n + 6] = 0\n    checkposts_dict[m + 6] = 0\n    roads_dict[n + 7] = 0\n    checkposts_dict[m + 7] = 0\n    roads_dict[n + 8] = 0\n    checkposts_dict[m + 8] = 0\n    roads_dict[n + 9] = 0\n    checkposts_dict[m + 9] = 0\n    roads_dict[n + 10] = 0\n    checkposts_dict[m + 10] = 0\n    roads_dict[n + 11] = 0\n    checkposts_dict[m + 11] = 0\n    roads_dict[n + 12] = 0\n    checkposts_dict[m + 12] = 0\n    roads_dict[n + 13] = 0\n    checkposts_dict[m + 13] = 0\n    roads_dict[n + 14] = 0\n    checkposts_dict[m + 14] = 0\n    roads_dict[n + 15] = 0\n    checkposts_dict[m + 15] = 0\n    roads_dict[n + 16] = 0\n    checkposts_dict[m + 16] = 0\n    roads_dict[n + 17] = 0\n    checkposts_dict[m + 17] = 0\n    roads_dict[n + 18] = 0\n    checkposts_dict[m + 18] = 0\n    roads_dict[n + 19] = 0\n    checkposts_dict[m + 19] = 0\n    roads_dict[n + 20] = 0\n    checkposts_dict[m + 20] = 0\n    roads_dict[n + 21] = 0\n    checkposts_dict[m + 21] = 0\n    roads_dict[n + 22] = 0\n    checkposts_dict[m + 22] = 0\n    roads_dict[n + 23] = 0\n    checkposts_dict[m + 23] = 0\n    roads_dict[n + 24] = 0\n    checkposts_dict[m + 24] = 0\n    roads_dict[n + 25] = 0\n    checkposts_dict[m + 25] = 0\n    roads_dict[n + 26] = 0\n    checkposts_dict[m + 26] = 0\n    roads_dict[n + 27] = 0\n    checkposts_dict[m + 27] = 0\n    roads_dict[n + 28] = 0\n    checkposts_dict[m + 28] = 0\n    roads_dict[n + 29] = 0\n    checkposts_dict[m + 29] = 0\n    roads_dict[n + 30] = 0\n    checkposts_dict[m + 30] = 0\n    roads_dict[n + 31] = 0\n    checkposts_dict[m + 31] = 0\n    roads_dict[n + 32] = 0\n    checkposts_dict[m + 32] = 0\n    roads_dict[n + 33] = 0\n    checkposts_dict[m + 33] = 0\n    roads_dict[n + 34] = 0\n    checkposts_dict[m + 34] = 0\n    roads_dict[n + 35] = 0\n    checkposts_dict[m + 35] = 0\n    roads_dict[n + 36] = 0\n    checkposts_dict[m + 36] = 0\n    roads_dict[n + 37] = 0\n    checkposts_dict[m + 37] = 0\n    roads_dict[n + 38] = 0\n    checkposts_dict[m + 38] = 0\n    roads_dict[n + 39] = 0\n    checkposts_dict[m + 39] = 0\n    roads_dict[n + 40] = 0\n    checkposts_dict[m + 40] = 0\n    roads_dict[n + 41] = 0\n    checkposts_dict[m + 41] = 0\n    roads_dict[n + 42] = 0\n    checkposts_dict[m + 42] = 0\n    roads_dict[n + 43] = 0\n    checkposts_dict[m + 43] = 0\n    roads_dict[n + 44] = 0\n    checkposts_dict[m + 44] = 0\n    roads_dict[n + 45] = 0\n    checkposts_dict[m + 45] = 0\n    roads_dict[n + 46] = 0\n    checkposts_dict[m + 46] = 0\n    roads_dict[n + 47] = 0\n    checkposts_dict[m + 47] = 0\n    roads_dict[n + 48] = 0\n    checkposts_dict[m + 48] = 0\n    roads_dict[n + 49] = 0\n    checkposts_dict[m + 49] = 0\n    roads_dict[n + 50] = 0\n    checkposts_dict[m + 50] = 0\n    roads_dict[n + 51] = 0\n    check"
    },
    {
        "number": 2442,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        a = [int(x) for x in stdin.readline().strip().split()]\n        mex = 0\n        for i in range(n):\n            mex = max(mex, a[i])\n            if i < n - 1:\n                mex += a[i + 1]\n        print(mex)"
    },
    {
        "number": 2443,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    if n == 0:\n        return \"\"\n    else:\n        return \"\".join(str(x) for x in range(n))"
    },
    {
        "number": 2444,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    passengers, time = [int(x) for x in stdin.split()]\n    passengers_time = [int(x) for x in stdin.split()]\n    passengers_time.sort()\n    passengers_time.reverse()\n    passengers_time = [x for x in passengers_time if x <= time]\n    passengers_time.sort()\n    passengers_time.reverse()\n    passengers_time = [x for x in passengers_time if x <= time]\n    passengers_time.sort()\n    passengers_time.reverse()\n    passengers_time = [x for x in passengers_time if x <= time]\n    passengers_time.sort()\n    passengers_time.reverse()\n    passengers_time = [x for x in passengers_time if x <= time]\n    passengers_time.sort()\n    passengers_time.reverse()\n    passengers_time = [x for x in passengers_time if x <= time]\n    passengers_time.sort()\n    passengers_time.reverse()\n    passengers_time = [x for x in passengers_time if x <= time]\n    passengers_time.sort()\n    passengers_time.reverse()\n    passengers_time = [x for x in passengers_time if x <= time]\n    passengers_time.sort()\n    passengers_time.reverse()\n    passengers_time = [x for x in passengers_time if x <= time]\n    passengers_time.sort()\n    passengers_time.reverse()\n    passengers_time = [x for x in passengers_time if x <= time]\n    passengers_time.sort()\n    passengers_time.reverse()\n    passengers_time = [x for x in passengers_time if x <= time]\n    passengers_time.sort()\n    passengers_time.reverse()\n    passengers_time = [x for x in passengers_time if x <= time]\n    passengers_time.sort()\n    passengers_time.reverse()\n    passengers_time = [x for x in passengers_time if x <= time]\n    passengers_time.sort()\n    passengers_time.reverse()\n    passengers_time = [x for x in passengers_time if x <= time]\n    passengers_time.sort()\n    passengers_time.reverse()\n    passengers_time = [x for x in passengers_time if x <= time]\n    passengers_time.sort()\n    passengers_time.reverse()\n    passengers_time = [x for x in passengers_time if x <= time]\n    passengers_time.sort()\n    passengers_time.reverse()\n    passengers_time = [x for x in passengers_time if x <= time]\n    passengers_time.sort()\n    passengers_time.reverse()\n    passengers_time = [x for x in passengers_time if x <= time]\n    passengers_time.sort()\n    passengers_time.reverse()\n    passengers_time = [x for x in passengers_time if x <= time]\n    passengers_time.sort()\n    passengers_time.reverse()\n    passengers_time = [x for x in passengers_time if x <= time]\n    passengers_time.sort()\n    passengers_time.reverse()\n    passengers_time = [x for x in passengers_time if x <= time]\n    passengers_time.sort()\n    passengers_time.reverse()\n    passengers_time = [x for x in passengers_time if x <= time]\n    passengers_time.sort()\n    passengers_time.reverse()\n    passengers_time = [x for x in passengers_time if x <= time]\n    passengers_time.sort()\n    passengers_time.reverse()\n    passengers_time = [x for x in passengers_time if x <= time]\n    passengers_time.sort()\n    passengers_time.reverse()\n    passengers_time = [x for x in passengers_time if x <= time]\n    passengers_time.sort()\n    passengers_time.reverse()\n    passengers_time = [x for x in passengers_time if x <= time]\n    passengers_time.sort()\n    passengers_time.reverse()\n    passengers_time = [x for x in passengers_time if x <= time]\n    passengers_time.sort()\n    passengers_time.reverse()\n    passengers_time = [x for x in passengers_time if x <= time]\n    passengers_time.sort()\n    passengers_time.reverse()\n    passengers_time = [x for x in passengers_time if x <= time]\n    passengers_time.sort()\n    passengers_time.reverse()\n    passengers_time = [x for x in passengers_time if x <= time]\n    passengers_time.sort()\n    passengers_time.reverse()\n    passengers_time = [x for x in passengers_time if x <= time]\n    passengers_time.sort()\n    passengers_time.reverse()\n    passengers_time = [x for x in passengers_time if x <= time]\n    passengers_time.sort()\n    passengers_time.reverse()\n    passengers_time = [x for x in passengers_time if x <= time]\n    passengers_time.sort()\n    passengers_time.reverse()\n    passengers_time = [x for x in passengers_time if x <= time]\n    passengers_time.sort()\n    passengers_time.reverse()\n    passengers_time = [x for x in passengers_time if x <= time]\n    passengers_time.sort()\n    passengers_time.reverse()"
    },
    {
        "number": 2445,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 2446,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n    q = int(stdin.readline().strip())\n    x = [int(x) for x in stdin.readline().strip().split()]\n    res = [0] * q\n    for i in range(q):\n        res[i] = 0\n        for j in range(n):\n            if gcd(a[j], a[j] + 1, x[i]) == x[i]:\n                res[i] += 1\n    return '\\n'.join(map(str, res))\n\ndef"
    },
    {
        "number": 2447,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        s = stdin.readline().strip()\n        if \"010\" in s or \"101\" in s:\n            print(0)\n        else:\n            print(s.count(\"0\") + s.count(\"1\"))"
    },
    {
        "number": 2448,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        a, b, c = map(int, stdin.readline().strip().split())\n        s = stdin.readline().strip()\n        if a + b + c!= n:\n            print(\"NO\")\n            continue\n        if s.count('R') < a:\n            print(\"NO\")\n            continue\n        if s.count('P') < b:\n            print(\"NO\")\n            continue\n        if s.count('S') < c:\n            print(\"NO\")\n            continue\n        print(\"YES\")\n        print(s)"
    },
    {
        "number": 2449,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    T = [int(x, 2) for x in stdin.split()]\n    M = 2 ** m - 1\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if T[i] ^ T[j] < M:\n                count += 1\n    return str(count)"
    },
    {
        "number": 2450,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2451,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, h, a, b, k = map(int, stdin.split())\n    towers = [[] for _ in range(n)]\n    for i in range(n):\n        towers[i] = list(map(int, stdin.split()))\n    queries = [list(map(int, stdin.split())) for _ in range(k)]\n    for query in queries:\n        print(min_time(towers, query[0], query[1], query[2], query[3]))\n\ndef"
    },
    {
        "number": 2452,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for _ in range(n):\n        n = int(stdin)\n        arr = [int(x) for x in stdin.split()]\n        arr.sort()\n        for i in range(n):\n            if i == 0:\n                print(arr[i], end=\" \")\n            else:\n                print(arr[i], end=\" \")\n        print()"
    },
    {
        "number": 2453,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    segments = [tuple(map(int, line.split())) for line in stdin.readlines()]\n    points = set()\n    for segment in segments:\n        points.update(range(segment[0], segment[1] + 1))\n    return''.join(str(len(points & set(range(segment[0], segment[1] + 1)))) for segment in segments)"
    },
    {
        "number": 2454,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 7\n    if n == 5:\n        return 11\n    if n == 6:\n        return 19\n    if n == 7:\n        return 37\n    if n == 8:\n        return 59\n    if n == 9:\n        return 89\n    if n == 10:\n        return 145\n    if n == 11:\n        return 233\n    if n == 12:\n        return 377\n    if n == 13:\n        return 610\n    if n == 14:\n        return 969\n    if n == 15:\n        return 1597\n    if n == 16:\n        return 2584\n    if n == 17:\n        return 4181\n    if n == 18:\n        return 6765\n    if n == 19:\n        return 9762\n    if n == 20:\n        return 15484\n    if n == 21:\n        return 25559\n    if n == 22:\n        return 46656\n    if n == 23:\n        return 73668\n    if n == 24:\n        return 11717\n    if n == 25:\n        return 19299\n    if n == 26:\n        return 37704\n    if n == 27:\n        return 61887\n    if n == 28:\n        return 105958\n    if n == 29:\n        return 162931\n    if n == 30:\n        return 265857\n    if n == 31:\n        return 479630\n    if n == 32:\n        return 774185\n    if n == 33:\n        return 121413\n    if n == 34:\n        return 183868\n    if n == 35:\n        return 297101\n    if n == 36:\n        return 488985\n    if n == 37:\n        return 824276\n    if n == 38:\n        return 124970\n    if n == 39:\n        return 179937\n    if n == 40:\n        return 285986\n    if n == 41:\n        return 496999\n    if n == 42:\n        return 929696\n    if n == 43:\n        return 149995\n    if n == 44:\n        return 217799\n    if n == 45:\n        return 350064\n    if n == 46:\n        return 517073\n    if n == 47:\n        return 969076\n    if n == 48:\n        return 159960\n    if n == 49:\n        return 258547\n    if n == 50:\n        return 477998\n    if n == 51:\n        return 829095\n    if n == 52:\n        return 125972\n    if n == 53:\n        return 183949\n    if n == 54:\n        return 297946\n    if n == 55:\n        return 488997\n    if n == 56:\n        return 829095\n    if n == 57:\n        return 125972\n    if n == 58:\n        return 183949\n    if n == 59:\n        return 297946\n    if n == 60:\n        return 488997\n    if n == 61:\n        return 829095\n    if n == 62:\n        return 125972\n    if n == 63:\n        return 183949\n    if n == 64:\n        return 297946\n    if n == 65:\n        return 488997\n    if n == 66:\n        return 829095\n    if n == 67:\n        return 125972\n    if n == 68:\n        return 183949\n    if n == 69:\n        return 297946\n    if n == 70:\n        return 488997\n    if n == 71:\n        return 829095\n    if n == 72:\n        return 125972\n    if n == 73:\n        return 183949\n    if n == 74:\n        return 297946\n    if n == 75:\n        return 488997\n    if n == 76:\n        return 829095\n    if n == 77:\n        return 125972\n    if n == 78:\n        return 183949\n    if n == 79:\n        return 297946\n    if n == 80:\n        return 488997\n    if n == 81:\n        return 829095\n    if n == 82:\n        return 125972\n    if n == 83:\n        return 183949\n    if n == 84:\n        return 297946\n    if n == 85:\n        return 488997\n    if n == 86:\n        return 829095\n    if n == 87:\n        return 125972\n    if n == 88:\n        return 183949\n    if n == 89:\n        return 297946\n    if n == 90:\n        return 488997\n    if n == 91:\n        return 829095\n    if n == 92:\n        return 125972\n    if n == 93:\n        return 183949\n    if n == 94:\n        return 297946\n    if n == 95:\n        return 488997\n    if n == 96:\n        return 829095\n    if n == 97:\n        return 125972\n    if n == 98:\n        return 183949\n    if n == 99:\n        return 297946\n    if n == 100:\n        return 488997\n    if n == 101:\n        return 829095\n    if n == 102:\n        return 125972\n    if n == 103:\n        return 183949\n    if n == 104:\n        return 297946\n    if n == 105:\n        return 488997\n    if n == 106:\n        return 829095\n    if n == 107:\n        return 125972\n    if n"
    },
    {
        "number": 2455,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2456,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2457,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n, a, b, c, d = map(int, stdin.readline().strip().split())\n        if a + b > c + d:\n            print(\"No\")\n        else:\n            print(\"Yes\")"
    },
    {
        "number": 2458,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        a, b = [int(x) for x in stdin.readline().strip().split()]\n        print(solution_naive(a, b))\n\ndef"
    },
    {
        "number": 2459,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    b = [int(x) for x in stdin.split()]\n    for _ in range(q):\n        t, l, r = [int(x) for x in stdin.split()]\n        if t == 1:\n            a[l - 1:r] = a[l - 1:r][::-1]\n        else:\n            a[l - 1:r] = a[l - 1:r][::-1]\n    return''.join(str(a[b[i] - 1]) for i in range(m))"
    },
    {
        "number": 2460,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n    t = list(map(int, stdin.split()))\n    x.sort()\n    t.sort()\n    i = 0\n    j = 0\n    while i < n and j < m:\n        if x[i] == x[j]:\n            i += 1\n            j += 1\n        elif x[i] < x[j]:\n            i += 1\n        else:\n            j += 1\n    return''.join(map(str, t[:j]))"
    },
    {
        "number": 2461,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    tree = [[] for _ in range(n)]\n    for i in range(n - 1):\n        x, y = [int(x) for x in stdin.readline().split()]\n        tree[x - 1].append(y - 1)\n        tree[y - 1].append(x - 1)\n    max_beauty = [0] * n\n    max_beauty[0] = a[0]\n    for i in range(1, n):\n        max_beauty[i] = max(max_beauty[tree[i][0]], max_beauty[tree[i][1]])\n    return''.join(str(x) for x in max_beauty)"
    },
    {
        "number": 2462,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        if n < 4:\n            print('NO')\n        else:\n            print('YES')\n            for i in range(1, n // 3 + 1):\n                if is_prime(i):\n                    for j in range(1, n // 3 + 1):\n                        if is_prime(j):\n                            for k in range(1, n // 3 + 1):\n                                if is_prime(k):\n                                    if i + j + k == n:\n                                        print(i, j, k)\n                                        break\n                            else:\n                                continue\n                            break\n                    else:\n                        continue\n                    break\n            else:\n                print('NO')\n\ndef"
    },
    {
        "number": 2463,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    prices = list(map(int, stdin.readline().split()))\n    \n    # find the cheapest ice sphere\n    cheapest = prices[0]\n    for i in range(1, n):\n        if prices[i] < cheapest:\n            cheapest = prices[i]\n    \n    # find the number of ice spheres that can be bought\n    count = 0\n    for i in range(n):\n        if prices[i] < cheapest:\n            count += 1\n    \n    # print the number of ice spheres that can be bought\n    print(count)\n    \n    # print the prices of ice spheres in the optimal order\n    for i in range(n):\n        if prices[i] < cheapest:\n            print(prices[i], end=' ')\n    print()\n    return ''"
    },
    {
        "number": 2464,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    edges = [tuple(map(int, stdin.readline().split())) for _ in range(n - 1)]\n    return str(solution_recursive(n, edges))\n\ndef"
    },
    {
        "number": 2465,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2466,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"1,2,3\")\n    '[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]'\n    >>> solution(\"1,2,3,4\")\n    '[1,2,3,4],[1,2,4,3],[1,3,2,4],[1,3,4,2],[1,4,2,3],[1,4,3,2],[2,1,3,4],[2,1,4,3],[2,3,1,4],[2,3,4,1],[2,4,1,3],[2,4,3,1],[3,1,2,4],[3,1,4,2],[3,2,1,4],[3,2,4,1],[3,4,1,2],[3,4,2,1],[4,1,2,3],[4,1,3,2],[4,2,1,3],[4,2,3,1],[4,3,1,2],[4,3,2,1]'\n    \"\"\"\n    nums = list(map(int, stdin.split(',')))\n    res = []\n    permute(nums, 0, res)\n    return '[' + ','.join(map(str, res)) + ']'\n\n\ndef"
    },
    {
        "number": 2467,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 2468,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2469,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 2]\n    if n == 3:\n        return [1]\n    if n == 4:\n        return [1, 2]\n    if n == 5:\n        return [1, 2, 3]\n    if n == 6:\n        return [1, 2, 3]\n    if n == 7:\n        return [1, 2, 3, 4]\n    if n == 8:\n        return [1, 2, 3, 4]\n    if n == 9:\n        return [1, 2, 3, 4, 5]\n    if n == 10:\n        return [1, 2, 3, 4, 5, 6]\n    if n == 11:\n        return [1, 2, 3, 4, 5, 6, 7]\n    if n == 12:\n        return [1, 2, 3, 4, 5, 6, 7, 8]\n    if n == 13:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    if n == 14:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    if n == 15:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n    if n == 16:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    if n == 17:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n    if n == 18:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n    if n == 19:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n    if n == 20:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n    if n == 21:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]\n    if n == 22:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]\n    if n == 23:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]\n    if n == 24:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n    if n == 25:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]\n    if n == 26:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]\n    if n == 27:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]\n    if n == 28:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]\n    if n == 29:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]\n    if n == 30:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]\n    if n == 31:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27]\n    if n == 32:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]\n    if n == 33:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]\n    if n == 34:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]\n    if n == 35:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]\n    if n == 36:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]\n    if n == 37:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]\n    if n == 38:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34]\n    if n == 39:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35]\n    if n == 40:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36]\n    if n == 41:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37]\n    if n == 42:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14"
    },
    {
        "number": 2470,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_dp(stdin))\n\ndef"
    },
    {
        "number": 2471,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, W, N = [int(x) for x in stdin.split()]\n    grid = [[0] * W for _ in range(H)]\n    for _ in range(N):\n        a, b = [int(x) for x in stdin.split()]\n        grid[a - 1][b - 1] = 1\n    \n    # count black cells in each subrectangle\n    counts = [0] * 10\n    for i in range(H):\n        for j in range(W):\n            if grid[i][j] == 1:\n                counts[0] += 1\n                if i > 0:\n                    counts[1] += 1\n                if j > 0:\n                    counts[2] += 1\n                if i > 0 and j > 0:\n                    counts[3] += 1\n                if i > 0 and j < W - 1:\n                    counts[4] += 1\n                if i < H - 1 and j > 0:\n                    counts[5] += 1\n                if i < H - 1 and j < W - 1:\n                    counts[6] += 1\n                if i < H - 1 and j > 0 and j < W - 1:\n                    counts[7] += 1\n                if i > 0 and j > 0 and j < W - 1:\n                    counts[8] += 1\n                if i > 0 and j < W - 1 and j > 0:\n                    counts[9] += 1\n    \n    # print result\n    for i in range(10):\n        print(counts[i])"
    },
    {
        "number": 2472,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    A = [int(x) for x in stdin.readline().split()]\n    B = [int(x) for x in stdin.readline().split()]\n    A.sort()\n    B.sort()\n    if A[0] > B[0]:\n        return \"No\"\n    for i in range(1, N):\n        if A[i] < B[i]:\n            return \"No\"\n    return \"Yes\""
    },
    {
        "number": 2473,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = [int(x) for x in stdin.split()]\n    points = [tuple(int(x) for x in line.split()) for line in stdin.splitlines()[1:]]\n    points.sort(key=lambda x: x[0])\n    x_min, x_max = points[0][0], points[-1][0]\n    y_min, y_max = points[0][1], points[-1][1]\n    x_min, x_max = min(x_min, x_max), max(x_min, x_max)\n    y_min, y_max = min(y_min, y_max), max(y_min, y_max)\n    x_min, x_max = max(x_min, -K), min(x_max, N - K)\n    y_min, y_max = max(y_min, -K), min(y_max, N - K)\n    return str(max(0, (x_max - x_min) * (y_max - y_min)))"
    },
    {
        "number": 2474,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    c = list(map(int, stdin.readline().split()))\n    return str(sum(f(c, n)) % (10 ** 9 + 7))\n\ndef"
    },
    {
        "number": 2475,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = [int(x) for x in stdin.readline().split()]\n    a, b = 0, 0\n    score = 0\n    for i in range(n):\n        if i == n - 1:\n            score += s[i]\n        elif i == 0:\n            a = s[i]\n        else:\n            b = s[i]\n            if i == n - 2:\n                if a > b:\n                    score += a\n                else:\n                    score += b\n            else:\n                if a > b:\n                    score += a\n                else:\n                    score += b\n    return str(score)"
    },
    {
        "number": 2476,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    a.reverse()\n    a = a[:n]\n    a.reverse()\n    return''.join(str(x) for x in a)"
    },
    {
        "number": 2477,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    logs = [int(x) for x in stdin.split()]\n    logs.sort()\n    max_length = 0\n    for i in range(n):\n        max_length = max(max_length, logs[i] - logs[i - 1])\n    return str(int(max_length * (k + 1) / n))"
    },
    {
        "number": 2478,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[1:-1]\n    stack = []\n    for i in s:\n        if i == '(':\n            stack.append(i)\n        else:\n            if len(stack) == 0:\n                return 'NO'\n            else:\n                stack.pop()\n    if len(stack) == 0:\n        return 'YES'\n    else:\n        return 'NO'"
    },
    {
        "number": 2479,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, Q = [int(x) for x in stdin.split()]\n    grid = [[0] * N for _ in range(N)]\n    for _ in range(Q):\n        query = [int(x) for x in stdin.split()]\n        if query[0] == 1:\n            x, y = query[1], query[2]\n            grid[x-1][y-1] = 1\n            for i in range(x-1, 0, -1):\n                if grid[i][y-1] == 1:\n                    grid[i][y-1] = 0\n                    grid[i-1][y-1] = 1\n        elif query[0] == 2:\n            x, y = query[1], query[2]\n            grid[x-1][y-1] = 1\n            for i in range(y-1, N-1):\n                if grid[x-1][i] == 1:\n                    grid[x-1][i] = 0\n                    grid[x-1][i+1] = 1\n        else:\n            x, y = query[1], query[2]\n            grid[x-1][y-1] = 1\n            for i in range(x-1, N-1):\n                if grid[i][y-1] == 1:\n                    grid[i][y-1] = 0\n                    grid[i+1][y-1] = 1\n    return str(sum(sum(x) for x in grid))"
    },
    {
        "number": 2480,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            if (sum(a[i:j+1]) % k) == len(a[i:j+1]):\n                count += 1\n    return count"
    },
    {
        "number": 2481,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n    c = [list(map(int, stdin.split())) for _ in range(H)]\n    A = [list(map(int, stdin.split())) for _ in range(H)]\n    \n    def get_cost(i, j):\n        if c[i][j] == -1:\n            return 0\n        return c[i][j]\n    \n    def get_cost_matrix(i, j):\n        if i == j:\n            return [0] * 10\n        return [get_cost(i, j) for j in range(10)]\n    \n    def get_cost_matrix_row(i):\n        return [get_cost_matrix(i, j) for j in range(W)]\n    \n    def get_cost_matrix_col(j):\n        return [get_cost_matrix_row(i)[j] for i in range(H)]\n    \n    def get_cost_matrix_row_col(i, j):\n        return get_cost_matrix_row(i)[j] + get_cost_matrix_col(j)[i]\n    \n    def get_cost_matrix_row_col_row_col(i, j):\n        return get_cost_matrix_row_col(i, j) + get_cost_matrix_row_col(j, i)\n    \n    def get_cost_matrix_row_col_row_col_row_col(i, j):\n        return get_cost_matrix_row_col_row_col(i, j) + get_cost_matrix_row_col_row_col(j, i)\n    \n    def get_cost_matrix_row_col_row_col_row_col_row_col(i, j):\n        return get_cost_matrix_row_col_row_col(i, j) + get_cost_matrix_row_col_row_col(j, i)\n    \n    def get_cost_matrix_row_col_row_col_row_col_row_col_row_col(i, j):\n        return get_cost_matrix_row_col_row_col_row_col(i, j) + get_cost_matrix_row_col_row_col_row_col(j, i)\n    \n    def get_cost_matrix_row_col_row_col_row_col_row_col_row_col_row_col(i, j):\n        return get_cost_matrix_row_col_row_col_row_col_row_col(i, j) + get_cost_matrix_row_col_row_col_row_col_row_col(j, i)\n    \n    def get_cost_matrix_row_col_row_col_row_col_row_col_row_col_row_col_row_col(i, j):\n        return get_cost_matrix_row_col_row_col_row_col_row_col_row_col(i, j) + get_cost_matrix_row_col_row_col_row_col_row_col_row_col(j, i)\n    \n    def get_cost_matrix_row_col_row_col_row_col_row_col_row_col_row_col_row_col_row_col(i, j):\n        return get_cost_matrix_row_col_row_col_row_col_row_col_row_col_row_col(i, j) + get_cost_matrix_row_col_row_col_row_col_row_col_row_col_row_col(j, i)\n    \n    def get_cost_matrix_row_col_row_col_row_col_row_col_row_col_row_col_row_col_row_col(i, j):\n        return get_cost_matrix_row_col_row_col_row_col_row_col_row_col_row_col(i, j) + get_cost_matrix_row_col_row_col_row_col_row_col_row_col_row_col(j, i)\n    \n    def get_cost_matrix_row_col_row_col_row_col_row_col_row_col_row_col_row_col_row_col(i, j):\n        return get_cost_matrix_row_col_row_col_row_col_row_col_row_col_row_col(i, j) + get_cost_matrix_row_col_row_col_row_col_row_col_row_col_row_col(j, i)\n    \n    def get_cost_matrix_row_col_row_col_row_col_row_col_row_col_row_col_row_col_row_col(i, j):\n        return get_cost_matrix_row_col_row_col_row_col_row_col_row_col_row_col(i, j) + get_cost_matrix_row_col_row_col_row_col_row_col_row_col_row_col(j, i)\n    \n    def get_cost_matrix_row_col_row_col_row_col_row_col_row_col_row_col_row_col_row_col(i, j):\n        return get_cost_matrix_row_col_row_col_row_col_row_col_row_col_row_col(i, j) + get_cost_matrix_row_col_row_col_row_col_row_col_row_col_row_col(j, i)\n    \n    def get_cost_matrix_row_col_row_col_row_col_row_col_row_col_row_col_row_col_row_col(i, j):\n        return get_cost_matrix_row_"
    },
    {
        "number": 2482,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K, L = [int(x) for x in stdin.split()]\n    roads = [tuple(int(x) for x in stdin.split()[1:]) for _ in range(K)]\n    railways = [tuple(int(x) for x in stdin.split()[1:]) for _ in range(L)]\n    cities = [i for i in range(1, N + 1)]\n    roads_connected = [0] * N\n    railways_connected = [0] * N\n    for road in roads:\n        roads_connected[road[0] - 1] += 1\n        roads_connected[road[1] - 1] += 1\n    for railway in railways:\n        railways_connected[railway[0] - 1] += 1\n        railways_connected[railway[1] - 1] += 1\n    for i in range(N):\n        print(roads_connected[i] + railways_connected[i], end=\" \")\n    print()"
    },
    {
        "number": 2483,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, C = [int(x) for x in stdin.split()]\n    s_i, t_i, c_i = [int(x) for x in stdin.split()]\n    recorders = 0\n    for _ in range(N):\n        s_i, t_i, c_i = [int(x) for x in stdin.split()]\n        if c_i == c_i:\n            recorders += 1\n    return str(recorders)"
    },
    {
        "number": 2484,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] ^ a[j] == (a[i] + a[j]) % 2:\n                count += 1\n    return str(count)"
    },
    {
        "number": 2485,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, W, M = map(int, stdin.split())\n    targets = [tuple(map(int, stdin.split())) for _ in range(M)]\n    targets.sort(key=lambda x: x[0] * W + x[1])\n    targets = [targets[i] for i in range(M)]\n    targets.sort(key=lambda x: x[1])\n    targets = [targets[i] for i in range(M)]\n    targets.sort(key=lambda x: x[0])\n    targets = [targets[i] for i in range(M)]\n    targets.sort(key=lambda x: x[1])\n    targets = [targets[i] for i in range(M)]\n    targets.sort(key=lambda x: x[0])\n    targets = [targets[i] for i in range(M)]\n    targets.sort(key=lambda x: x[1])\n    targets = [targets[i] for i in range(M)]\n    targets.sort(key=lambda x: x[0])\n    targets = [targets[i] for i in range(M)]\n    targets.sort(key=lambda x: x[1])\n    targets = [targets[i] for i in range(M)]\n    targets.sort(key=lambda x: x[0])\n    targets = [targets[i] for i in range(M)]\n    targets.sort(key=lambda x: x[1])\n    targets = [targets[i] for i in range(M)]\n    targets.sort(key=lambda x: x[0])\n    targets = [targets[i] for i in range(M)]\n    targets.sort(key=lambda x: x[1])\n    targets = [targets[i] for i in range(M)]\n    targets.sort(key=lambda x: x[0])\n    targets = [targets[i] for i in range(M)]\n    targets.sort(key=lambda x: x[1])\n    targets = [targets[i] for i in range(M)]\n    targets.sort(key=lambda x: x[0])\n    targets = [targets[i] for i in range(M)]\n    targets.sort(key=lambda x: x[1])\n    targets = [targets[i] for i in range(M)]\n    targets.sort(key=lambda x: x[0])\n    targets = [targets[i] for i in range(M)]\n    targets.sort(key=lambda x: x[1])\n    targets = [targets[i] for i in range(M)]\n    targets.sort(key=lambda x: x[0])\n    targets = [targets[i] for i in range(M)]\n    targets.sort(key=lambda x: x[1])\n    targets = [targets[i] for i in range(M)]\n    targets.sort(key=lambda x: x[0])\n    targets = [targets[i] for i in range(M)]\n    targets.sort(key=lambda x: x[1])\n    targets = [targets[i] for i in range(M)]\n    targets.sort(key=lambda x: x[0])\n    targets = [targets[i] for i in range(M)]\n    targets.sort(key=lambda x: x[1])\n    targets = [targets[i] for i in range(M)]\n    targets.sort(key=lambda x: x[0])\n    targets = [targets[i] for i in range(M)]\n    targets.sort(key=lambda x: x[1])\n    targets = [targets[i] for i in range(M)]\n    targets.sort(key=lambda x: x[0])\n    targets = [targets[i] for i in range(M)]\n    targets.sort(key=lambda x: x[1])\n    targets = [targets[i] for i in range(M)]\n    targets.sort(key=lambda x: x[0])\n    targets = [targets[i] for i in range(M)]\n    targets.sort(key=lambda x: x[1])\n    targets = [targets[i] for i in range(M)]\n    targets.sort(key=lambda x: x[0])\n    targets = [targets[i] for i in range(M)]\n    targets.sort(key=lambda x: x[1])\n    targets = [targets[i] for i in range(M)]\n    targets.sort(key=lambda x: x[0])\n    targets = [targets[i] for i in range(M)]\n    targets.sort(key=lambda x: x[1])\n    targets = [targets[i] for i in range(M)]\n    targets.sort(key=lambda x: x[0])\n    targets = [targets[i] for i in range(M)]\n    targets.sort(key=lambda x: x[1])\n    targets = [targets[i] for i in range(M)]\n    targets.sort(key=lambda x: x[0])\n    targets = [targets[i] for i in range(M)]\n    targets.sort(key=lambda x: x[1])\n    targets = [targets[i] for i in range(M)]\n    targets.sort(key=lambda x: x[0])\n    targets = [targets[i] for i in range(M)]\n    targets.sort(key=lambda x: x[1])\n    targets = [targets[i] for i in range(M)]\n    targets.sort(key=lambda x: x[0])\n    targets = [targets[i] for i in range(M)]\n    targets.sort(key=lambda x: x[1])\n    targets = [targets[i] for i in range(M)]\n    targets.sort(key=lambda x: x[0])\n    targets = [targets[i] for i in range(M)]\n    targets.sort(key=lambda x: x[1])\n    targets = [targets[i] for i in range(M"
    },
    {
        "number": 2486,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = [int(x) for x in stdin.split()]\n    A = [int(x) for x in stdin.split()]\n    A.sort()\n    A.reverse()\n    count = 0\n    for i in range(N):\n        if A[i] < K:\n            count += 1\n    return str(count)"
    },
    {
        "number": 2487,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    edges = [tuple(map(int, line.split())) for line in stdin.readlines()]\n    edges.sort(key=lambda x: x[0])\n    components = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if edges[i][1] == edges[j][0]:\n                components += 1\n    return str(components)"
    },
    {
        "number": 2488,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, D, A = map(int, stdin.split())\n    Xs = [int(x) for x in stdin.split()]\n    Hs = [int(x) for x in stdin.split()]\n    Xs.sort()\n    Hs.sort()\n    min_bombs = 0\n    for i in range(N):\n        min_bombs += D - abs(Xs[i] - Xs[i+1])\n        min_bombs += A - abs(Hs[i] - Hs[i+1])\n    return str(min_bombs)"
    },
    {
        "number": 2489,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = [int(x) for x in stdin.readline().strip().split()]\n    count = 0\n    for i in range(1, n):\n        if arr[i] % arr[i-1]!= 0:\n            count += 1\n    return count"
    },
    {
        "number": 2490,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1 or n > 10**6:\n        raise ValueError(\"N must be between 1 and 10^6\")\n    return str(min(n, 10**100))"
    },
    {
        "number": 2491,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    edges = [tuple(int(x) for x in stdin.split()) for _ in range(m)]\n    graph = [[] for _ in range(n)]\n    for a, b, c in edges:\n        graph[a - 1].append((b - 1, c))\n        graph[b - 1].append((a - 1, c))\n    visited = [False] * n\n    visited[0] = True\n    score = 0\n    def dfs(node: int, prev: int) -> int:\n        nonlocal score\n        for n, c in graph[node]:\n            if n == prev:\n                continue\n            if visited[n]:\n                score += c\n                continue\n            visited[n] = True\n            dfs(n, node)\n    dfs(0, -1)\n    return str(score) if score!= float('inf') else 'inf'"
    },
    {
        "number": 2492,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    return str(a[k - 1])"
    },
    {
        "number": 2493,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    a.append(0)\n    a.sort()\n    a.append(n)\n    count = [0] * (n + 1)\n    for i in range(n + 1):\n        count[i] = 1\n        for j in range(i):\n            if a[j] < a[i] and a[j] + 1 == a[i]:\n                count[i] += count[j]\n    return str(count[n])"
    },
    {
        "number": 2494,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    if k < 2:\n        return \"0\"\n    if k == 2:\n        return \"1\"\n    if k == 3:\n        return \"2\"\n    if k == 4:\n        return \"3\"\n    if k == 5:\n        return \"4\"\n    if k == 6:\n        return \"5\"\n    if k == 7:\n        return \"6\"\n    if k == 8:\n        return \"7\"\n    if k == 9:\n        return \"8\"\n    if k == 10:\n        return \"9\"\n    if k == 11:\n        return \"10\"\n    if k == 12:\n        return \"11\"\n    if k == 13:\n        return \"12\"\n    if k == 14:\n        return \"13\"\n    if k == 15:\n        return \"14\"\n    if k == 16:\n        return \"15\"\n    if k == 17:\n        return \"16\"\n    if k == 18:\n        return \"17\"\n    if k == 19:\n        return \"18\"\n    if k == 20:\n        return \"19\"\n    if k == 21:\n        return \"20\"\n    if k == 22:\n        return \"21\"\n    if k == 23:\n        return \"22\"\n    if k == 24:\n        return \"23\"\n    if k == 25:\n        return \"24\"\n    if k == 26:\n        return \"25\"\n    if k == 27:\n        return \"26\"\n    if k == 28:\n        return \"27\"\n    if k == 29:\n        return \"28\"\n    if k == 30:\n        return \"29\"\n    if k == 31:\n        return \"30\"\n    if k == 32:\n        return \"31\"\n    if k == 33:\n        return \"32\"\n    if k == 34:\n        return \"33\"\n    if k == 35:\n        return \"34\"\n    if k == 36:\n        return \"35\"\n    if k == 37:\n        return \"36\"\n    if k == 38:\n        return \"37\"\n    if k == 39:\n        return \"38\"\n    if k == 40:\n        return \"39\"\n    if k == 41:\n        return \"40\"\n    if k == 42:\n        return \"41\"\n    if k == 43:\n        return \"42\"\n    if k == 44:\n        return \"43\"\n    if k == 45:\n        return \"44\"\n    if k == 46:\n        return \"45\"\n    if k == 47:\n        return \"46\"\n    if k == 48:\n        return \"47\"\n    if k == 49:\n        return \"48\"\n    if k == 50:\n        return \"49\"\n    if k == 51:\n        return \"50\"\n    if k == 52:\n        return \"51\"\n    if k == 53:\n        return \"52\"\n    if k == 54:\n        return \"53\"\n    if k == 55:\n        return \"54\"\n    if k == 56:\n        return \"55\"\n    if k == 57:\n        return \"56\"\n    if k == 58:\n        return \"57\"\n    if k == 59:\n        return \"58\"\n    if k == 60:\n        return \"59\"\n    if k == 61:\n        return \"60\"\n    if k == 62:\n        return \"61\"\n    if k == 63:\n        return \"62\"\n    if k == 64:\n        return \"63\"\n    if k == 65:\n        return \"64\"\n    if k == 66:\n        return \"65\"\n    if k == 67:\n        return \"66\"\n    if k == 68:\n        return \"67\"\n    if k == 69:\n        return \"68\"\n    if k == 70:\n        return \"69\"\n    if k == 71:\n        return \"70\"\n    if k == 72:\n        return \"71\"\n    if k == 73:\n        return \"72\"\n    if k == 74:\n        return \"73\"\n    if k == 75:\n        return \"74\"\n    if k == 76:\n        return \"75\"\n    if k == 77:\n        return \"76\"\n    if k == 78:\n        return \"77\"\n    if k == 79:\n        return \"78\"\n    if k == 80:\n        return \"79\"\n    if k == 81:\n        return \"80\"\n    if k == 82:\n        return \"81\"\n    if k == 83:\n        return \"82\"\n    if k == 84:\n        return \"83\"\n    if k == 85:\n        return \"84\"\n    if k == 86:\n        return \"85\"\n    if k == 87:\n        return \"86\"\n    if k == 88:\n        return \"87\"\n    if k == 89:\n        return \"88\"\n    if k == 90:\n        return \"89\"\n    if k == 91:\n        return \"90\"\n    if k == 92:\n        return \"91\"\n    if k == 93:\n        return \"92\"\n    if k == 94:\n        return \"93\"\n    if k == 95:\n        return \"94\"\n    if k == 96:\n        return \"95\"\n    if k == 97:\n        return \"96\"\n    if k == 98:\n        return \"97\"\n    if k == 99:\n        return \"98\"\n    if k == 100:\n        return \"99\"\n    if k == 101:\n        return \"100\"\n    if k == 102:\n        return \"101\"\n    if k == 103:\n        return \"102\"\n    if k == 104:\n        return \"103\"\n    if k == 105:\n        return \"104\"\n    if k == 106:\n        return \"105\"\n    if k == 107:\n        return \"106\"\n    if k == 108:\n        return \"107\"\n    if k == 109:\n        return \"108\"\n    if k == 110:\n        return \"109\"\n    if k == 111:\n        return \"110\"\n    if k == 112:\n        return \"111\"\n    if k == 113:\n        return \"112\"\n    if k == 114:\n        return \"113\"\n    if k == 115:\n        return \"114\"\n    if k == 116:\n        return \"115\"\n    if k == 117:\n        return \"116\"\n    if k == 118:\n        return \"117\"\n    if k == 119:\n        return \"118\"\n    if k == 120:\n        return \"119\"\n    if k == 121:\n        return \"120\"\n    if k == 122:\n        return \"121\"\n    if k == 123:\n        return \"122\"\n    if k == 124:\n        return \"123\"\n    if k == 125:\n        return \"124\"\n    if k == 126:\n        return \"125\"\n    if k == 127:\n        return \"126\"\n    if k == 128:\n        return \"127\"\n    if k == 129:\n        return \"128\"\n    if k == 130:\n        return \"129\"\n    if k == 131:\n        return \"130\"\n    if k == 132:\n        return \"131\"\n    if k == 133:\n        return \"132\"\n    if k == 134:\n        return \"133\"\n    if k == 135:\n        return \"134\"\n    if k == 136:\n        return \"135\"\n    if k == 137:\n        return \"136\"\n    if k == 138:\n        return \"137\"\n    if k == 139:\n        return \"138\"\n    if k == 140:\n        return \"139\"\n    if k == 141:\n        return \"140\"\n    if k == 142:\n        return \"141\"\n    if k == 143:\n        return \"142\"\n    if k == 144:\n        return \"143\"\n    if k == 145:\n        return \"144\"\n    if k == 146:\n        return \"145\"\n    if k == 147:\n        return \""
    },
    {
        "number": 2495,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split(' ')]\n    s = 0\n    for i in range(n):\n        s += a[i]\n    if s == 0:\n        return str(n)\n    if s % 2 == 0:\n        return str(n + 1)\n    return str(n + 2)"
    },
    {
        "number": 2496,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    A = [int(x) for x in stdin.readline().strip().split()]\n    if GCD(A) == 1:\n        print(\"setwise coprime\")\n    elif GCD(A) == 1:\n        print(\"pairwise coprime\")\n    else:\n        print(\"not coprime\")\n\ndef"
    },
    {
        "number": 2497,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    points = []\n    for _ in range(n):\n        x, y, d = stdin.readline().split()\n        points.append((int(x), int(y), d))\n    points.sort(key=lambda x: (x[0], x[1]))\n    x_max, x_min = points[-1][0], points[0][0]\n    y_max, y_min = points[-1][1], points[0][1]\n    return str(x_max - x_min) + \" \" + str(y_max - y_min)"
    },
    {
        "number": 2498,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    count = 0\n    for i in range(1, m + 1):\n        if i % 2 == 0:\n            count += a.count(i)\n    return str(count)"
    },
    {
        "number": 2499,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n    a.sort()\n    a.reverse()\n    res = 0\n    for i in range(n):\n        res ^= a[i]\n    return str(res)"
    },
    {
        "number": 2500,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(bin(n).count(\"1\") * (bin(n).count(\"1\") - 1))"
    },
    {
        "number": 2501,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    A = list(map(int, stdin.readline().strip().split()))\n    return str(len(set(i + j for i in A for j in A if i + j == sum(A))))"
    },
    {
        "number": 2502,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    return '-1' if len(s) + len(t) - len(s) * len(t) > 5 * 10 ** 5 else str(len(s) + len(t) - len(s) * len(t))"
    },
    {
        "number": 2503,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = [int(x) for x in stdin.split()]\n    desires = [tuple(int(x) for x in stdin.split()) for _ in range(N)]\n    desires.sort(key=lambda x: x[2])\n    desires.sort(key=lambda x: x[0] * x[1])\n    desires.sort(key=lambda x: x[0] + x[1])\n    desires.sort(key=lambda x: x[0] * x[1] * x[2])\n    desires.sort(key=lambda x: x[0] * x[1] * x[2] * x[3])\n    desires.sort(key=lambda x: x[0] * x[1] * x[2] * x[3] * x[4])\n    desires.sort(key=lambda x: x[0] * x[1] * x[2] * x[3] * x[4] * x[5])\n    desires.sort(key=lambda x: x[0] * x[1] * x[2] * x[3] * x[4] * x[5] * x[6])\n    desires.sort(key=lambda x: x[0] * x[1] * x[2] * x[3] * x[4] * x[5] * x[6] * x[7])\n    desires.sort(key=lambda x: x[0] * x[1] * x[2] * x[3] * x[4] * x[5] * x[6] * x[7] * x[8])\n    desires.sort(key=lambda x: x[0] * x[1] * x[2] * x[3] * x[4] * x[5] * x[6] * x[7] * x[8] * x[9])\n    desires.sort(key=lambda x: x[0] * x[1] * x[2] * x[3] * x[4] * x[5] * x[6] * x[7] * x[8] * x[9] * x[10])\n    desires.sort(key=lambda x: x[0] * x[1] * x[2] * x[3] * x[4] * x[5] * x[6] * x[7] * x[8] * x[9] * x[10] * x[11])\n    desires.sort(key=lambda x: x[0] * x[1] * x[2] * x[3] * x[4] * x[5] * x[6] * x[7] * x[8] * x[9] * x[10] * x[11] * x[12])\n    desires.sort(key=lambda x: x[0] * x[1] * x[2] * x[3] * x[4] * x[5] * x[6] * x[7] * x[8] * x[9] * x[10] * x[11] * x[12] * x[13])\n    desires.sort(key=lambda x: x[0] * x[1] * x[2] * x[3] * x[4] * x[5] * x[6] * x[7] * x[8] * x[9] * x[10] * x[11] * x[12] * x[13] * x[14])\n    desires.sort(key=lambda x: x[0] * x[1] * x[2] * x[3] * x[4] * x[5] * x[6] * x[7] * x[8] * x[9] * x[10] * x[11] * x[12] * x[13] * x[14] * x[15])\n    desires.sort(key=lambda x: x[0] * x[1] * x[2] * x[3] * x[4] * x[5] * x[6] * x[7] * x[8] * x[9] * x[10] * x[11] * x[12] * x[13] * x[14] * x[15] * x[16])\n    desires.sort(key=lambda x: x[0] * x[1] * x[2] * x[3] * x[4] * x[5] * x[6] * x[7] * x[8] * x[9] * x[10] * x[11] * x[12] * x[13] * x[14] * x[15] * x[16] * x[17])\n    desires.sort(key=lambda x: x[0] * x[1] * x[2] * x[3] * x[4] * x[5] * x[6] * x[7] * x[8] * x[9] * x[10] * x[11] * x[12] * x[13] * x[14] * x[15] * x[16] * x[17] * x[18])\n    desires.sort(key=lambda x: x[0] * x[1] * x[2] * x[3] * x[4] * x[5] * x[6] * x[7] * x[8] * x[9] * x[10] * x[11] * x[12] * x[13] * x[14] * x[15] * x[16] * x[17] * x[18] * x[19])\n    desires.sort(key=lambda x: x[0] * x[1] * x[2] * x[3] * x[4] * x[5] * x[6] * x[7] * x[8] * x[9] * x[10] * x[11] * x[12] * x[13] * x[14] * x[15] * x[16] * x[17] * x[18] * x[19] * x[20])\n    desires.sort(key=lambda x: x[0] * x[1] * x[2] * x[3] * x[4] * x[5] * x[6] * x[7] * x[8] * x[9] * x[10] * x[11] * x[12] * x[13] * x[14] * x[15] * x[16] * x[17] * x[18] * x[19] * x[20] * x[21])\n    desires.sort(key=lambda x: x[0] * x[1] * x[2] * x[3] * x[4] * x[5] * x[6] * x[7] * x[8] * x[9] * x[10] * x[11]"
    },
    {
        "number": 2504,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, L = map(int, stdin.split())\n    A, B, C = [], [], []\n    for _ in range(M):\n        a, b, c = map(int, stdin.split())\n        A.append(a)\n        B.append(b)\n        C.append(c)\n    Q = int(stdin.readline())\n    s, t = [], []\n    for _ in range(Q):\n        s_, t_ = map(int, stdin.split())\n        s.append(s_)\n        t.append(t_)\n    return '\\n'.join(str(solution(stdin)) for _ in range(Q))"
    },
    {
        "number": 2505,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    points = [tuple(map(int, line.split())) for line in stdin.readlines()]\n    points.sort(key=lambda p: p[0])\n    points.sort(key=lambda p: p[1])\n    x_min, x_max = points[0][0], points[-1][0]\n    y_min, y_max = points[0][1], points[-1][1]\n    result = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            if x_min <= points[i][0] <= x_max and y_min <= points[j][1] <= y_max:\n                result += 1\n    return str(result)"
    },
    {
        "number": 2506,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    h = 0\n    for i in range(0, n, 2):\n        h += a[i] + a[i+1]\n    return str(h)"
    },
    {
        "number": 2507,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    f = list(map(int, stdin.split()))\n    a.sort()\n    f.sort()\n    a_sum = 0\n    f_sum = 0\n    for i in range(n):\n        a_sum += a[i]\n        f_sum += f[i]\n    if a_sum < f_sum:\n        return '0'\n    if a_sum == f_sum:\n        return '1'\n    if a_sum > f_sum:\n        return str(f_sum // a_sum)"
    },
    {
        "number": 2508,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, W, K = [int(x) for x in stdin.split()]\n    x1, y1, x2, y2 = [int(x) for x in stdin.split()]\n    c = [stdin[i:i+W] for i in range(0, len(stdin), W)]\n    c = [[c[j][i] for j in range(H)] for i in range(W)]\n    print(solution2(H, W, K, x1, y1, x2, y2, c))\n\ndef"
    },
    {
        "number": 2509,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    return str(int(n * (n - 1) / 2) - int(k * (k - 1) / 2))"
    },
    {
        "number": 2510,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split()]\n    friends = [set() for _ in range(N)]\n    for _ in range(M):\n        A, B = [int(x) for x in stdin.split()]\n        friends[A - 1].add(B - 1)\n        friends[B - 1].add(A - 1)\n    groups = 0\n    for i in range(N):\n        if i not in friends[i]:\n            groups += 1\n    return str(groups)"
    },
    {
        "number": 2511,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    edges = [tuple(int(x) for x in line.split()) for line in stdin.splitlines()[1:]]\n    return str(solution_recursive(n, k, edges))\n\ndef"
    },
    {
        "number": 2512,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, C, K = [int(x) for x in stdin.split()]\n    items = [int(x) for x in stdin.split()]\n    items.sort()\n    items.reverse()\n    items = items[:K]\n    items.sort()\n    items.reverse()\n    return str(sum(items))"
    },
    {
        "number": 2513,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[0]\n    if n == 1:\n        return s\n    if n == 2:\n        return s + s\n    if n == 3:\n        return s + s + s\n    if n == 4:\n        return s + s + s + s\n    if n == 5:\n        return s + s + s + s + s\n    if n == 6:\n        return s + s + s + s + s + s\n    if n == 7:\n        return s + s + s + s + s + s + s\n    if n == 8:\n        return s + s + s + s + s + s + s + s\n    if n == 9:\n        return s + s + s + s + s + s + s + s + s\n    if n == 10:\n        return s + s + s + s + s + s + s + s + s + s\n    if n == 11:\n        return s + s + s + s + s + s + s + s + s + s + s\n    if n == 12:\n        return s + s + s + s + s + s + s + s + s + s + s + s\n    if n == 13:\n        return s + s + s + s + s + s + s + s + s + s + s + s + s\n    if n == 14:\n        return s + s + s + s + s + s + s + s + s + s + s + s + s + s\n    if n == 15:\n        return s + s + s + s + s + s + s + s + s + s + s + s + s + s + s\n    if n == 16:\n        return s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s\n    if n == 17:\n        return s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s\n    if n == 18:\n        return s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s\n    if n == 19:\n        return s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s\n    if n == 20:\n        return s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s\n    if n == 21:\n        return s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s\n    if n == 22:\n        return s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s\n    if n == 23:\n        return s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s\n    if n == 24:\n        return s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s\n    if n == 25:\n        return s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s\n    if n == 26:\n        return s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s\n    if n == 27:\n        return s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s\n    if n == 28:\n        return s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s\n    if n == 29:\n        return s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s\n    if n == 30:\n        return s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s\n    if n == 31:\n        return s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s\n    if n == 32:\n        return s + s + s + s + s + s + s + s + s + s + s + s + s +"
    },
    {
        "number": 2514,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n    q = int(stdin.readline().strip())\n    b = [int(x) for x in stdin.readline().strip().split()]\n    c = [int(x) for x in stdin.readline().strip().split()]\n    for i in range(q):\n        for j in range(n):\n            if b[i] == c[i]:\n                a[j] = c[i]\n    return''.join(str(x) for x in a)"
    },
    {
        "number": 2515,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return '0'\n    if n == 1:\n        return '1'\n    if n == 2:\n        return '2'\n    if n == 3:\n        return '3'\n    if n == 4:\n        return '5'\n    if n == 5:\n        return '7'\n    if n == 6:\n        return '11'\n    if n == 7:\n        return '13'\n    if n == 8:\n        return '17'\n    if n == 9:\n        return '19'\n    if n == 10:\n        return '23'\n    if n == 11:\n        return '29'\n    if n == 12:\n        return '31'\n    if n == 13:\n        return '37'\n    if n == 14:\n        return '41'\n    if n == 15:\n        return '43'\n    if n == 16:\n        return '47'\n    if n == 17:\n        return '53'\n    if n == 18:\n        return '59'\n    if n == 19:\n        return '61'\n    if n == 20:\n        return '67'\n    if n == 21:\n        return '71'\n    if n == 22:\n        return '73'\n    if n == 23:\n        return '79'\n    if n == 24:\n        return '83'\n    if n == 25:\n        return '89'\n    if n == 26:\n        return '97'\n    if n == 27:\n        return '101'\n    if n == 28:\n        return '103'\n    if n == 29:\n        return '107'\n    if n == 30:\n        return '109'\n    if n == 31:\n        return '113'\n    if n == 32:\n        return '127'\n    if n == 33:\n        return '131'\n    if n == 34:\n        return '137'\n    if n == 35:\n        return '139'\n    if n == 36:\n        return '149'\n    if n == 37:\n        return '151'\n    if n == 38:\n        return '157'\n    if n == 39:\n        return '163'\n    if n == 40:\n        return '167'\n    if n == 41:\n        return '173'\n    if n == 42:\n        return '179'\n    if n == 43:\n        return '181'\n    if n == 44:\n        return '191'\n    if n == 45:\n        return '193'\n    if n == 46:\n        return '197'\n    if n == 47:\n        return '199'\n    if n == 48:\n        return '211'\n    if n == 49:\n        return '223'\n    if n == 50:\n        return '227'\n    if n == 51:\n        return '229'\n    if n == 52:\n        return '233'\n    if n == 53:\n        return '239'\n    if n == 54:\n        return '241'\n    if n == 55:\n        return '251'\n    if n == 56:\n        return '257'\n    if n == 57:\n        return '263'\n    if n == 58:\n        return '269'\n    if n == 59:\n        return '271'\n    if n == 60:\n        return '277'\n    if n == 61:\n        return '281'\n    if n == 62:\n        return '283'\n    if n == 63:\n        return '293'\n    if n == 64:\n        return '307'\n    if n == 65:\n        return '311'\n    if n == 66:\n        return '313'\n    if n == 67:\n        return '317'\n    if n == 68:\n        return '331'\n    if n == 69:\n        return '337'\n    if n == 70:\n        return '347'\n    if n == 71:\n        return '349'\n    if n == 72:\n        return '353'\n    if n == 73:\n        return '359'\n    if n == 74:\n        return '361'\n    if n == 75:\n        return '367'\n    if n == 76:\n        return '373'\n    if n == 77:\n        return '379'\n    if n == 78:\n        return '383'\n    if n == 79:\n        return '389'\n    if n == 80:\n        return '397'\n    if n == 81:\n        return '401'\n    if n == 82:\n        return '409'\n    if n == 83:\n        return '419'\n    if n == 84:\n        return '421'\n    if n == 85:\n        return '431'\n    if n == 86:\n        return '433'\n    if n == 87:\n        return '439'\n    if n == 88:\n        return '443'\n    if n == 89:\n        return '449'\n    if n == 90:\n        return '457'\n    if n == 91:\n        return '461'\n    if n == 92:\n        return '463'\n    if n == 93:\n        return '467'\n    if n == 94:\n        return '479'\n    if n == 95:\n        return '487'\n    if n == 96:\n        return '491'\n    if n == 97:\n        return '499'\n    if n == 98:\n        return '503'\n    if n == 99:\n        return '509'\n    if n == 100:\n        return '521'\n    if n == 101:\n        return '523'\n    if n == 102:\n        return '541'\n    if n == 103:\n        return '547'\n    if n == 104:\n        return '557'\n    if n == 105:\n        return '563'\n    if n == 106:\n        return '569'\n    if n == 107:\n        return '571'\n    if n == 108:\n        return '577'\n    if n == 109:\n        return '587'\n    if n == 110:\n        return '593'\n    if n == 111:\n        return '599'\n    if n == 112:\n        return '601'\n    if n == 113:\n        return '607'\n    if n == 114:\n        return '613'\n    if n == 115:\n        return '619'\n    if n == 116:\n        return '631'\n    if n == 117:\n        return '637'\n    if n == 118:\n        return '643'\n    if n == 119:\n        return '649'\n    if n == 120:\n        return '651'\n    if n == 121:\n        return '657'\n    if n == 122:\n        return '661'\n    if n == 123:\n        return '673'\n    if n == 124:\n        return '677'\n    if n == 125:\n        return '683'\n    if n == 126:\n        return '691'\n    if n == 127:\n        return '701'\n    if n == 128:\n        return '709'\n    if n == 129:\n        return '719'\n    if n == 130:\n        return '731'\n    if n == 131:\n        return '"
    },
    {
        "number": 2516,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    s = stdin.strip()\n    return str(len([1 for i in range(n) if int(s[i:i+n], 10) % p == 0]))"
    },
    {
        "number": 2517,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, R = [int(x) for x in stdin.split()]\n    roads = [tuple(int(x) for x in stdin.split()) for _ in range(M)]\n    towns = [tuple(int(x) for x in stdin.split()) for _ in range(N)]\n    towns.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[2])\n    towns_visited = set()\n    towns_visited.add(towns[0][0])\n    towns_visited.add(towns[0][1])\n    distance = 0\n    for road in roads:\n        if road[0] in towns_visited and road[1] in towns_visited:\n            distance += road[2]\n            towns_visited.add(road[0])\n            towns_visited.add(road[1])\n    return str(distance)"
    },
    {
        "number": 2518,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    healths = list(map(int, stdin.split()))\n    healths.sort()\n    healths.reverse()\n    count = 0\n    for i in range(n):\n        if healths[i] > 0:\n            count += 1\n            healths[i] -= a\n            if healths[i] <= 0:\n                healths[i] = 0\n            for j in range(i + 1, n):\n                healths[j] -= b\n                if healths[j] <= 0:\n                    healths[j] = 0\n    return str(count)"
    },
    {
        "number": 2519,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    p = [int(x) for x in stdin.split()]\n    return str(expected_value(p, k, n))\n\ndef"
    },
    {
        "number": 2520,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, K = [int(x) for x in stdin.split()]\n    A = [int(x) for x in stdin.split()]\n    B = [int(x) for x in stdin.split()]\n    C = [int(x) for x in stdin.split()]\n    D = [int(x) for x in stdin.split()]\n    friend_candidates = 0\n    for i in range(M):\n        for j in range(i + 1, M):\n            if A[i]!= B[j] and A[i]!= D[j] and A[j]!= B[i] and A[j]!= D[i]:\n                friend_candidates += 1\n    for i in range(K):\n        for j in range(i + 1, K):\n            if C[i]!= D[j] and C[i]!= A[j] and D[i]!= A[j] and D[i]!= C[j]:\n                friend_candidates += 1\n    return str(friend_candidates)"
    },
    {
        "number": 2521,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n    a_new = a[N:] + a[:N]\n    return str(sum(a_new[:N]) - sum(a_new[N:]))"
    },
    {
        "number": 2522,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = list(map(int, stdin.readline().strip().split()))\n    a.sort()\n    b.sort()\n    if a!= b:\n        return \"No\"\n    else:\n        return \"Yes\\n\" + \" \".join(map(str, b))"
    },
    {
        "number": 2523,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2524,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    A = [int(x) for x in stdin.readline().strip().split()]\n    return str(sum(a ^ b for a, b in zip(A, A[1:])) % (10 ** 9 + 7))"
    },
    {
        "number": 2525,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    q = int(stdin.readline().strip())\n    queries = [stdin.readline().strip() for _ in range(q)]\n    for query in queries:\n        t, f, c = map(int, query.split())\n        if t == 1:\n            s = s[::-1]\n        elif t == 2:\n            s = s + c\n        if f == 1:\n            s = c + s\n        elif f == 2:\n            s = s + c\n    return s"
    },
    {
        "number": 2526,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X, Y, A, B, C = [int(x) for x in stdin.split()]\n    p, q, r = [int(x) for x in stdin.split()]\n    return str(max(X * p + Y * q, X * r + Y * C))"
    },
    {
        "number": 2527,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"happy\""
    },
    {
        "number": 2528,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = [int(x) for x in stdin.readline().strip().split(' ')]\n    max_len = 0\n    for i in range(n):\n        for j in range(i, n):\n            if arr[i] == 0:\n                break\n            if arr[j] == 0:\n                break\n            if arr[i] * arr[j] > 0:\n                max_len = max(max_len, j - i + 1)\n    return str(max_len)"
    },
    {
        "number": 2529,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    pass"
    },
    {
        "number": 2530,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split()]\n    chefs = [stdin.split() for _ in range(N)]\n    chefs.sort(key=lambda x: x[1])\n    chefs.sort(key=lambda x: x[0])\n    chefs.sort(key=lambda x: len(x[0]))\n    chefs.sort(key=lambda x: x[0].lower())\n    chefs.sort(key=lambda x: x[1].lower())\n    chefs.sort(key=lambda x: x[0].lower() + x[1].lower())\n    chefs.sort(key=lambda x: x[0].lower() + x[1].lower())\n    chefs.sort(key=lambda x: x[0].lower() + x[1].lower())\n    chefs.sort(key=lambda x: x[0].lower() + x[1].lower())\n    chefs.sort(key=lambda x: x[0].lower() + x[1].lower())\n    chefs.sort(key=lambda x: x[0].lower() + x[1].lower())\n    chefs.sort(key=lambda x: x[0].lower() + x[1].lower())\n    chefs.sort(key=lambda x: x[0].lower() + x[1].lower())\n    chefs.sort(key=lambda x: x[0].lower() + x[1].lower())\n    chefs.sort(key=lambda x: x[0].lower() + x[1].lower())\n    chefs.sort(key=lambda x: x[0].lower() + x[1].lower())\n    chefs.sort(key=lambda x: x[0].lower() + x[1].lower())\n    chefs.sort(key=lambda x: x[0].lower() + x[1].lower())\n    chefs.sort(key=lambda x: x[0].lower() + x[1].lower())\n    chefs.sort(key=lambda x: x[0].lower() + x[1].lower())\n    chefs.sort(key=lambda x: x[0].lower() + x[1].lower())\n    chefs.sort(key=lambda x: x[0].lower() + x[1].lower())\n    chefs.sort(key=lambda x: x[0].lower() + x[1].lower())\n    chefs.sort(key=lambda x: x[0].lower() + x[1].lower())\n    chefs.sort(key=lambda x: x[0].lower() + x[1].lower())\n    chefs.sort(key=lambda x: x[0].lower() + x[1].lower())\n    chefs.sort(key=lambda x: x[0].lower() + x[1].lower())\n    chefs.sort(key=lambda x: x[0].lower() + x[1].lower())\n    chefs.sort(key=lambda x: x[0].lower() + x[1].lower())\n    chefs.sort(key=lambda x: x[0].lower() + x[1].lower())\n    chefs.sort(key=lambda x: x[0].lower() + x[1].lower())\n    chefs.sort(key=lambda x: x[0].lower() + x[1].lower())\n    chefs.sort(key=lambda x: x[0].lower() + x[1].lower())\n    chefs.sort(key=lambda x: x[0].lower() + x[1].lower())\n    chefs.sort(key=lambda x: x[0].lower() + x[1].lower())\n    chefs.sort(key=lambda x: x[0].lower() + x[1].lower())\n    chefs.sort(key=lambda x: x[0].lower() + x[1].lower())\n    chefs.sort(key=lambda x: x[0].lower() + x[1].lower())\n    chefs.sort(key=lambda x: x[0].lower() + x[1].lower())\n    chefs.sort(key=lambda x: x[0].lower() + x[1].lower())\n    chefs.sort(key=lambda x: x[0].lower() + x[1].lower())\n    chefs.sort(key=lambda x: x[0].lower() + x[1].lower())\n    chefs"
    },
    {
        "number": 2531,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n    avg = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            avg += (a[i] + a[j]) / 2\n    return str(avg)"
    },
    {
        "number": 2532,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    p, q = [int(x) for x in stdin.split()]\n    a, b = [int(x) for x in stdin.split()]\n    n = int(stdin)\n    x = [int(x) for x in stdin.split()]\n    x = x[:n]\n    x = [a * x[i] + b * x[i] ** p for i in range(n)]\n    return''.join(map(str, x))"
    },
    {
        "number": 2533,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    roads = [tuple(int(x) for x in stdin.split()) for _ in range(m)]\n    return \"YES\" if is_tourist_friendly(roads, n) else \"NO\"\n\ndef"
    },
    {
        "number": 2534,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, C = [int(x) for x in stdin.split()]\n    matrix = [list(map(int, stdin.split())) for _ in range(R)]\n    for i in range(R):\n        for j in range(C):\n            if matrix[i][j] == min(matrix[i]):\n                if matrix[i][j] == max(matrix[i]):\n                    return matrix[i][j]\n                else:\n                    return \"GUESS\""
    },
    {
        "number": 2535,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    cars = [list(map(int, stdin.split())) for _ in range(n)]\n    return str(solution_recursive(cars, x))\n\ndef"
    },
    {
        "number": 2536,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split()]\n    A = [int(x) for x in stdin.split()]\n    L = int(stdin.split()[-1])\n    E1 = E2 = -1\n    for i in range(N):\n        for j in range(M):\n            if A[i] == A[j]:\n                E1 = max(E1, i + j)\n            if i == j:\n                E2 = max(E2, i + j)\n    if E1 == -1:\n        E1 = E2 = -1\n    return str(max(E1, E2))"
    },
    {
        "number": 2537,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2538,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2539,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    queries = [list(map(int, stdin.readline().strip().split())) for _ in range(t)]\n    return '\\n'.join(str(solution(queries[i])) for i in range(t))"
    },
    {
        "number": 2540,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    colours = [int(x) for x in stdin.readline().split()]\n    edges = [tuple(map(int, stdin.readline().split())) for _ in range(n - 1)]\n    tree = nx.Graph()\n    tree.add_nodes_from(range(1, n + 1))\n    tree.add_edges_from(edges)\n    dominating_colours = [0] * n\n    for vertex in range(1, n + 1):\n        dominating_colours[vertex - 1] = sum(\n            1 for neighbour in tree.neighbors(vertex) if colours[neighbour - 1] > colours[vertex - 1]\n        )\n    return''.join(str(x) for x in dominating_colours)\n"
    },
    {
        "number": 2541,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_01(stdin))\n\ndef"
    },
    {
        "number": 2542,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        s = stdin.strip()\n        n = len(s)\n        if n == 1:\n            print(0)\n            continue\n        if n == 2:\n            if s[0] == s[1]:\n                print(0)\n                continue\n            print(1)\n            continue\n        if s[0] == s[-1]:\n            print(1)\n            continue\n        if s[0] == s[-2]:\n            print(2)\n            continue\n        if s[0] == s[-3]:\n            print(3)\n            continue\n        if s[0] == s[-4]:\n            print(4)\n            continue\n        if s[0] == s[-5]:\n            print(5)\n            continue\n        if s[0] == s[-6]:\n            print(6)\n            continue\n        if s[0] == s[-7]:\n            print(7)\n            continue\n        if s[0] == s[-8]:\n            print(8)\n            continue\n        if s[0] == s[-9]:\n            print(9)\n            continue\n        print(n - 1)"
    },
    {
        "number": 2543,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, q = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    b = [int(x) for x in stdin.split()]\n    for _ in range(q):\n        l, r, x = [int(x) for x in stdin.split()]\n        a[l - 1:r] = [x + a[l - 1] for x in a[l - 1:r]]\n        b[l - 1:r] = [x + b[l - 1] for x in b[l - 1:r]]\n        print(min(abs(x - a[i]) for i in range(l - 1, r)))\n    return ''"
    },
    {
        "number": 2544,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    graph = defaultdict(list)\n    for _ in range(n - 1):\n        x, y = map(int, stdin.readline().split())\n        graph[x].append(y)\n        graph[y].append(x)\n    \n    def dfs(node: int, visited: set) -> int:\n        visited.add(node)\n        for neighbor in graph[node]:\n            if neighbor not in visited:\n                dfs(neighbor, visited)\n        return len(visited)\n    \n    def dfs2(node: int, visited: set) -> int:\n        visited.add(node)\n        for neighbor in graph[node]:\n            if neighbor not in visited:\n                dfs2(neighbor, visited)\n        return len(visited) - 1\n    \n    centroids = set()\n    for node in graph:\n        if node not in centroids:\n            centroids.add(node)\n            if dfs(node, set()) > 1:\n                centroids.remove(node)\n    \n    for node in graph:\n        if node not in centroids:\n            centroids.add(node)\n            if dfs2(node, set()) > 1:\n                centroids.remove(node)\n    \n    centroids = list(centroids)\n    centroids.sort()\n    return''.join(map(str, centroids))"
    },
    {
        "number": 2545,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        a, b = map(int, stdin.readline().split())\n        if a == b == 0:\n            print('YES')\n        elif a == 0:\n            print('NO')\n        elif b == 0:\n            print('YES')\n        else:\n            print('NO')"
    },
    {
        "number": 2546,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2547,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    books = [map(int, stdin.split()) for _ in range(n)]\n    books.sort(key=lambda x: x[0])\n    alice = 0\n    bob = 0\n    for i in range(n):\n        if books[i][1] == 1:\n            alice += books[i][0]\n        if books[i][2] == 1:\n            bob += books[i][0]\n    if alice < k or bob < k:\n        return -1\n    return str(alice + bob)"
    },
    {
        "number": 2548,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        n = int(stdin.readline())\n        a = list(map(int, stdin.readline().split()))\n        print(solution_naive(a, n))\n\ndef"
    },
    {
        "number": 2549,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    d = list(map(int, stdin.split()))\n    shields = []\n    for _ in range(m):\n        a, b = map(int, stdin.split())\n        shields.append((a, b))\n    shields.sort(key=lambda x: x[0])\n    shields.sort(key=lambda x: x[1], reverse=True)\n    shields = [x[0] for x in shields]\n    shields.sort()\n    shields = [x for x in shields if x > 0]\n    shields.sort(reverse=True)\n    shields = [x for x in shields if x > 0]\n    shields.sort(reverse=True)\n    shields = [x for x in shields if x > 0]\n    shields.sort(reverse=True)\n    shields = [x for x in shields if x > 0]\n    shields.sort(reverse=True)\n    shields = [x for x in shields if x > 0]\n    shields.sort(reverse=True)\n    shields = [x for x in shields if x > 0]\n    shields.sort(reverse=True)\n    shields = [x for x in shields if x > 0]\n    shields.sort(reverse=True)\n    shields = [x for x in shields if x > 0]\n    shields.sort(reverse=True)\n    shields = [x for x in shields if x > 0]\n    shields.sort(reverse=True)\n    shields = [x for x in shields if x > 0]\n    shields.sort(reverse=True)\n    shields = [x for x in shields if x > 0]\n    shields.sort(reverse=True)\n    shields = [x for x in shields if x > 0]\n    shields.sort(reverse=True)\n    shields = [x for x in shields if x > 0]\n    shields.sort(reverse=True)\n    shields = [x for x in shields if x > 0]\n    shields.sort(reverse=True)\n    shields = [x for x in shields if x > 0]\n    shields.sort(reverse=True)\n    shields = [x for x in shields if x > 0]\n    shields.sort(reverse=True)\n    shields = [x for x in shields if x > 0]\n    shields.sort(reverse=True)\n    shields = [x for x in shields if x > 0]\n    shields.sort(reverse=True)\n    shields = [x for x in shields if x > 0]\n    shields.sort(reverse=True)\n    shields = [x for x in shields if x > 0]\n    shields.sort(reverse=True)\n    shields = [x for x in shields if x > 0]\n    shields.sort(reverse=True)\n    shields = [x for x in shields if x > 0]\n    shields.sort(reverse=True)\n    shields = [x for x in shields if x > 0]\n    shields.sort(reverse=True)\n    shields = [x for x in shields if x > 0]\n    shields.sort(reverse=True)\n    shields = [x for x in shields if x > 0]\n    shields.sort(reverse=True)\n    shields = [x for x in shields if x > 0]\n    shields.sort(reverse=True)\n    shields = [x for x in shields if x > 0]\n    shields.sort(reverse=True)\n    shields = [x for x in shields if x > 0]\n    shields.sort(reverse=True)\n    shields = [x for x in shields if x > 0]\n    shields.sort(reverse=True)\n    shields = [x for x in shields if x > 0]\n    shields.sort(reverse=True)\n    shields = [x for x in shields if x > 0]\n    shields.sort(reverse=True)\n    shields = [x for x in shields if x > 0]\n    shields.sort(reverse=True)\n    shields = [x for x in shields if x > 0]\n    shields.sort(reverse=True)\n    shields = [x for x in shields if x > 0]\n    shields.sort(reverse=True)\n    shields = [x for x in shields if x > 0]\n    shields.sort(reverse=True)\n    shields = [x for x in shields if x > 0]\n    shields.sort(reverse=True)\n    shields = [x for x in shields if x > 0]\n    shields.sort(reverse=True)\n    shields = [x for x in shields if x > 0]\n    shields.sort(reverse=True)\n    shields = [x for x in shields if x > 0]\n    shields.sort(reverse=True)\n    shields = [x for x in shields if x > 0]\n    shields.sort(reverse=True)\n    shields = [x for x in shields if x > 0]\n    shields.sort(reverse=True)\n    shields = [x for x in shields if x > 0]\n    shields.sort(reverse=True)\n    shields = [x for x in shields if x > 0]\n    shields.sort(reverse=True)\n    shields = [x for x in shields if x > 0]\n    shields.sort(reverse=True)\n    shields = [x for x in shields if x > 0]\n    shields.sort(reverse=True)\n    shields = [x for x in shields if x > 0]\n    shields.sort(reverse=True)\n    shields = [x for x in shields if x > 0]\n"
    },
    {
        "number": 2550,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2551,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2552,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n    h = list(map(int, stdin.split()))\n    roads = []\n    for _ in range(n - 1):\n        roads.append(tuple(map(int, stdin.split())))\n    cities = [0] * n\n    for i in range(n):\n        cities[i] = City(i, p[i], h[i])\n    for i in range(n - 1):\n        cities[roads[i][0] - 1].add_neighbour(cities[roads[i][1] - 1])\n        cities[roads[i][1] - 1].add_neighbour(cities[roads[i][0] - 1])\n    for i in range(n):\n        cities[i].calculate_happiness()\n    for i in range(n - 1):\n        cities[roads[i][0] - 1].add_neighbour(cities[roads[i][1] - 1])\n        cities[roads[i][1] - 1].add_neighbour(cities[roads[i][0] - 1])\n    for i in range(n):\n        cities[i].calculate_happiness()\n    for i in range(n - 1):\n        cities[roads[i][0] - 1].add_neighbour(cities[roads[i][1] - 1])\n        cities[roads[i][1] - 1].add_neighbour(cities[roads[i][0] - 1])\n    for i in range(n):\n        cities[i].calculate_happiness()\n    for i in range(n - 1):\n        cities[roads[i][0] - 1].add_neighbour(cities[roads[i][1] - 1])\n        cities[roads[i][1] - 1].add_neighbour(cities[roads[i][0] - 1])\n    for i in range(n):\n        cities[i].calculate_happiness()\n    for i in range(n - 1):\n        cities[roads[i][0] - 1].add_neighbour(cities[roads[i][1] - 1])\n        cities[roads[i][1] - 1].add_neighbour(cities[roads[i][0] - 1])\n    for i in range(n):\n        cities[i].calculate_happiness()\n    for i in range(n - 1):\n        cities[roads[i][0] - 1].add_neighbour(cities[roads[i][1] - 1])\n        cities[roads[i][1] - 1].add_neighbour(cities[roads[i][0] - 1])\n    for i in range(n):\n        cities[i].calculate_happiness()\n    for i in range(n - 1):\n        cities[roads[i][0] - 1].add_neighbour(cities[roads[i][1] - 1])\n        cities[roads[i]["
    },
    {
        "number": 2553,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n, x = map(int, stdin.readline().strip().split())\n        a = list(map(int, stdin.readline().strip().split()))\n        if sum(a[:x]) % 2 == 1:\n            print(\"Yes\")\n        else:\n            print(\"No\")"
    },
    {
        "number": 2554,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    s = 0\n    for i in range(n):\n        s += a[i]\n        if i % 2 == 0:\n            s -= a[i]\n    return str(s)"
    },
    {
        "number": 2555,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n, q = map(int, stdin.readline().strip().split())\n        a = list(map(int, stdin.readline().strip().split()))\n        b = list(map(int, stdin.readline().strip().split()))\n        print(q)\n        for _ in range(q):\n            l, r = map(int, stdin.readline().strip().split())\n            a[l], a[r] = a[r], a[l]\n            print(a)"
    },
    {
        "number": 2556,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    rooms = [int(stdin.readline()) for _ in range(n)]\n    return '\\n'.join(str(min(sum(x) for x in combinations(rooms, i))) for i in range(1, n + 1))"
    },
    {
        "number": 2557,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    cities = [int(x) for x in stdin.split()]\n    cities.sort()\n    cities = [str(x) for x in cities]\n    cities =''.join(cities)\n    return cities"
    },
    {
        "number": 2558,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        a, b, c, d = map(int, stdin.readline().strip().split())\n        if a == 0:\n            print(-1)\n        else:\n            print(max(0, a * d - b * c))"
    },
    {
        "number": 2559,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2560,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2561,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        a = int(stdin.readline())\n        print(solution_1(a))\n\ndef"
    },
    {
        "number": 2562,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    res = 0\n    for i in range(1, n):\n        res += a[i] * a[i - 1]\n    return str(res % 1000000007)"
    },
    {
        "number": 2563,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2564,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\nT = int(stdin.readline())\n\nfor _ in range(T):\n    a, b, n = map(int, stdin.readline().split())\n    if a > n:\n        print(a - n)\n    elif b > n:\n        print(b - n)\n    else:\n        print(0)\n"
    },
    {
        "number": 2565,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        x1, y1, z1 = map(int, stdin.readline().strip().split())\n        x2, y2, z2 = map(int, stdin.readline().strip().split())\n        a = [0] * x1 + [1] * y1 + [2] * z1\n        b = [0] * x2 + [1] * y2 + [2] * z2\n        c = [0] * (x1 + y1 + z1)\n        for i in range(x1 + y1 + z1):\n            if a[i] > b[i]:\n                c[i] = a[i]\n            elif a[i] < b[i]:\n                c[i] = b[i]\n            else:\n                c[i] = 0\n        print(sum(c))\n    return \"\""
    },
    {
        "number": 2566,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2567,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    w = ''\n    for i in range(1, n):\n        w += s[i - 1] + s[i]\n    return w"
    },
    {
        "number": 2568,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        s = stdin.readline().strip()\n        res = 0\n        for i in range(len(s)):\n            if s[i] == '+':\n                res += 1\n            else:\n                res -= 1\n            if res < 0:\n                break\n        print(res)\n    return \"\""
    },
    {
        "number": 2569,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        print(solution_helper(n))\n\ndef"
    },
    {
        "number": 2570,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n, x = map(int, stdin.readline().strip().split())\n        a = list(map(int, stdin.readline().strip().split()))\n        b = list(map(int, stdin.readline().strip().split()))\n        a.sort()\n        b.sort()\n        if a[-1] + b[-1] <= x:\n            print('Yes')\n        else:\n            print('No')"
    },
    {
        "number": 2571,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline().strip())\n    for _ in range(T):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        b = []\n        for i in range(n):\n            if a[i] == 0:\n                continue\n            for j in range(i + 1, n):\n                if a[i] * a[j] == 0:\n                    b.append(a[i])\n                    b.append(a[j])\n                    break\n        print(' '.join(map(str, b)))"
    },
    {
        "number": 2572,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [list(map(int, stdin.split())) for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] % 2 == 0:\n                a[i][j] -= 1\n    return str(min(sum(x.count(0) for x in a), sum(x.count(1) for x in a)))"
    },
    {
        "number": 2573,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = [int(x) for x in stdin.split()]\n    board = [[0] * n for _ in range(n)]\n    for _ in range(m):\n        x, y = [int(x) for x in stdin.split()]\n        board[y][x] = 1\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == 1:\n                if j == k:\n                    board[i][j] = 0\n                else:\n                    board[i][j] = 1\n    for i in range(n):\n        if board[i][k] == 1:\n            board[i][k] = 0\n    for i in range(n):\n        if board[i][k] == 1:\n            board[i][k] = 0\n    for i in range(n):\n        if board[i][k] == 1:\n            board[i][k] = 0\n    for i in range(n):\n        if board[i][k] == 1:\n            board[i][k] = 0\n    for i in range(n):\n        if board[i][k] == 1:\n            board[i][k] = 0\n    for i in range(n):\n        if board[i][k] == 1:\n            board[i][k] = 0\n    for i in range(n):\n        if board[i][k] == 1:\n            board[i][k] = 0\n    for i in range(n):\n        if board[i][k] == 1:\n            board[i][k] = 0\n    for i in range(n):\n        if board[i][k] == 1:\n            board[i][k] = 0\n    for i in range(n):\n        if board[i][k] == 1:\n            board[i][k] = 0\n    for i in range(n):\n        if board[i][k] == 1:\n            board[i][k] = 0\n    for i in range(n):\n        if board[i][k] == 1:\n            board[i][k] = 0\n    for i in range(n):\n        if board[i][k] == 1:\n            board[i][k] = 0\n    for i in range(n):\n        if board[i][k] == 1:\n            board[i][k] = 0\n    for i in range(n):\n        if board[i][k] == 1:\n            board[i][k] = 0\n    for i in range(n):\n        if board[i][k] == 1:\n            board[i][k] = 0\n    for i in range(n):\n        if board[i][k] == 1:\n            board[i][k] = 0\n    for i in range(n):\n        if board[i][k] == 1:\n            board[i][k] = 0\n    for i in range(n):\n        if board[i][k] == 1:\n            board[i][k] = 0\n    for i in range(n):\n        if board[i][k] == 1:\n            board[i][k] = 0\n    for i in range(n):\n        if board[i][k] == 1:\n            board[i][k] = 0\n    for i in range(n):\n        if board[i][k] == 1:\n            board[i][k] = 0\n    for i in range(n):\n        if board[i][k] == 1:\n            board[i][k] = 0\n    for i in range(n):\n        if board[i][k] == 1:\n            board[i][k] = 0\n    for i in range(n):\n        if board[i][k] == 1:\n            board[i][k] = 0\n    for i in range(n):\n        if board[i][k] == 1:\n            board[i][k] = 0\n    for i in range(n):\n        if board[i][k] == 1:\n            board[i][k] = 0\n    for i in range(n):\n        if board[i][k] == 1:\n            board[i][k] = 0\n    for i in range(n):\n        if board[i][k] == 1:\n            board[i][k] = 0\n    for i in range(n):\n        if board[i][k] == 1:\n            board[i][k] = 0\n    for i in range(n):\n        if board[i][k] == 1:\n            board[i][k] = 0\n    for i in range(n):\n        if board[i][k] == 1:\n            board[i][k] = 0\n    for i in range(n):\n        if board[i][k] == 1:\n            board[i][k] = 0\n    for i in range(n):\n        if board[i][k] == 1:\n            board[i][k] = 0\n    for i in range(n):\n        if board[i][k] == 1:\n            board[i][k] = 0\n    for i in range(n):\n        if board[i][k] == 1:\n            board[i][k] = 0\n    for i in range(n):\n        if board[i][k] == 1:\n            board[i][k] = 0\n    for i in range(n):\n        if board[i][k] == 1:\n            board[i][k] = 0\n    for i in range(n):\n        if board[i][k] == 1:\n            board[i][k] = 0\n    for i in range(n):\n        if board[i][k] == 1:\n            board[i][k] = 0\n    for i in range(n):\n        if board[i][k] == 1:\n            board[i][k] = 0\n    for i in range(n):\n        if board[i][k] == 1:\n            board[i][k] = 0\n    for i in range(n):\n        if board[i][k] == 1:\n            board[i][k] = 0\n    for i in range(n):\n        if board[i"
    },
    {
        "number": 2574,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        a.sort()\n        print(a[-1] * a[-2] * a[-3] * a[-4] * a[-5])"
    },
    {
        "number": 2575,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        a = int(stdin)\n        if a % 180 == 0:\n            print(\"YES\")\n        elif a % 180 == 90:\n            print(\"NO\")\n        else:\n            print(\"YES\")"
    },
    {
        "number": 2576,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2577,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [[int(x) for x in stdin.split()] for _ in range(n)]\n    b = [[0] * m for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if i == 0 and j == 0:\n                b[i][j] = a[i][j]\n            elif i == 0:\n                b[i][j] = a[i][j] + b[i][j-1]\n            elif j == 0:\n                b[i][j] = a[i][j] + b[i-1][j]\n            else:\n                b[i][j] = a[i][j] + max(b[i-1][j], b[i][j-1])\n    return '\\n'.join(' '.join(str(x) for x in row) for row in b)"
    },
    {
        "number": 2578,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    friends = [set(map(int, stdin.split())) for _ in range(m)]\n    friends_set = set(range(n))\n    for group in friends:\n        friends_set &= group\n    return''.join(str(len(friends_set)) for _ in range(n))\n\nassert(solution('''7 5\n3 2 5 4\n0\n2 1 2\n1 1\n2 6 7''') == '4 4 1 4 4 2 2')\nassert(solution('''7 5\n3 2 5 4\n0\n2 1 2\n1 1\n2 6 7\n1 1\n2 6 7''') == '4 4 1 4 4 2 2')\nassert(solution('''7 5\n3 2 5 4\n0\n2 1 2\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7''') == '4 4 1 4 4 2 2')\nassert(solution('''7 5\n3 2 5 4\n0\n2 1 2\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1\n2 6 7\n1 1"
    },
    {
        "number": 2579,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l, r, x, y, k = map(int, stdin.split())\n    if k <= (r - l + 1) * (y - x + 1):\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 2580,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    edges = [tuple(map(int, stdin.readline().split())) for _ in range(n - 1)]\n    m = int(stdin.readline())\n    pf = [int(stdin.readline()) for _ in range(m)]\n    pf = [pf[i] for i in range(m)]\n    pf.sort()\n    pf = [pf[i] for i in range(m)]\n    pf = [pf[i] for i in range(m)]\n    pf = [pf[i] for i in range(m)]\n    pf = [pf[i] for i in range(m)]\n    pf = [pf[i] for i in range(m)]\n    pf = [pf[i] for i in range(m)]\n    pf = [pf[i] for i in range(m)]\n    pf = [pf[i] for i in range(m)]\n    pf = [pf[i] for i in range(m)]\n    pf = [pf[i] for i in range(m)]\n    pf = [pf[i] for i in range(m)]\n    pf = [pf[i] for i in range(m)]\n    pf = [pf[i] for i in range(m)]\n    pf = [pf[i] for i in range(m)]\n    pf = [pf[i] for i in range(m)]\n    pf = [pf[i] for i in range(m)]\n    pf = [pf[i] for i in range(m)]\n    pf = [pf[i] for i in range(m)]\n    pf = [pf[i] for i in range(m)]\n    pf = [pf[i] for i in range(m)]\n    pf = [pf[i] for i in range(m)]\n    pf = [pf[i] for i in range(m)]\n    pf = [pf[i] for i in range(m)]\n    pf = [pf[i] for i in range(m)]\n    pf = [pf[i] for i in range(m)]\n    pf = [pf[i] for i in range(m)]\n    pf = [pf[i] for i in range(m)]\n    pf = [pf[i] for i in range(m)]\n    pf = [pf[i] for i in range(m)]\n    pf = [pf[i] for i in range(m)]\n    pf = [pf[i] for i in range(m)]\n    pf = [pf[i] for i in range(m)]\n    pf = [pf[i] for i in range(m)]\n    pf = [pf[i] for i in range(m)]\n    pf = [pf[i] for i in range(m)]\n    pf = [pf[i] for i in range(m)]\n    pf = [pf[i] for i in range(m)]\n    pf = [pf[i] for i in range(m)]\n    pf = [pf[i] for i in range(m)]\n    pf = [pf[i] for i in range(m)]\n    pf = [pf[i] for i in range(m)]\n    pf = [pf[i] for i in range(m)]\n    pf = [pf[i] for i in range(m)]\n    pf = [pf[i] for i in range(m)]\n    pf = [pf[i] for i in range(m)]\n    pf = [pf[i] for i in range(m)]\n    pf = [pf[i] for i in range(m)]\n    pf = [pf[i] for i in range(m)]\n    pf = [pf[i] for i in range(m)]\n    pf = [pf[i] for i in range(m)]\n    pf = [pf[i] for i in range(m)]\n    pf = [pf[i] for i in range(m)]\n    pf = [pf[i] for i in range(m)]\n    pf = [pf[i] for i in range(m)]\n    pf = [pf[i] for i in range(m)]\n    pf = [pf[i] for i in range(m)]\n    pf = [pf[i] for i in range(m)]\n    pf = [pf[i] for i in range(m)]\n    pf = [pf[i] for i in range(m)]\n    pf = [pf[i] for i in range(m)]"
    },
    {
        "number": 2581,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    board = [list(map(int, stdin.readline().split())) for _ in range(n)]\n    return max(solution_recursive(board, 0, 0, 0, 0), solution_recursive(board, 0, 0, 0, 1))\n\ndef"
    },
    {
        "number": 2582,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    p = list(map(int, stdin.readline().split()))\n    return str(solution_naive(n, p))\n\ndef"
    },
    {
        "number": 2583,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        if n % 2 == 0:\n            print(\"Ashishgup\")\n        else:\n            print(\"FastestFinger\")"
    },
    {
        "number": 2584,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    a.reverse()\n    m = 0\n    for i in range(n):\n        if p >= a[i]:\n            m += 1\n            p -= a[i]\n        else:\n            break\n    return str(m)"
    },
    {
        "number": 2585,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        print(n - 1)"
    },
    {
        "number": 2586,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\ndef"
    },
    {
        "number": 2587,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        x = int(stdin.readline().strip())\n        k = int(stdin.readline().strip())\n        r = int(stdin.readline().strip())\n        print(min(x, k, r))"
    },
    {
        "number": 2588,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2589,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    s = 0\n    for i in range(n):\n        s += a[i]\n        if s % x!= 0:\n            return str(i + 1)\n    return '-1'"
    },
    {
        "number": 2590,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2591,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        a.sort()\n        for i in range(n):\n            if i > 0 and a[i] == a[i-1]:\n                continue\n            if i < n - 1 and a[i] == a[i+1]:\n                continue\n            if i > 0 and a[i] - a[i-1] > a[i+1] - a[i]:\n                a[i], a[i-1] = a[i-1], a[i]\n            else:\n                a[i], a[i+1] = a[i+1], a[i]\n        print(*a)"
    },
    {
        "number": 2592,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        a, b, c = map(int, stdin.readline().strip().split())\n        print(max(a, b, c))"
    },
    {
        "number": 2593,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    return str(solution_naive(n, a))\n\ndef"
    },
    {
        "number": 2594,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2595,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        a, b = [int(x) for x in stdin.readline().strip().split()]\n        print(min(a, b) * 2 + min(a, b) * 4 + min(a, b) * 8 + (a // 2) * 2 + (a // 4) * 4 + (a // 8) * 8 + (b // 2) * 2 + (b // 4) * 4 + (b // 8) * 8)"
    },
    {
        "number": 2596,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m, t = [int(x) for x in stdin.split()]\n    universes = [0] * n\n    universes[k] = 1\n    for _ in range(t):\n        line = stdin.readline().split()\n        if line[0] == '0':\n            universes[int(line[1])] -= 1\n        else:\n            universes[int(line[1])] += 1\n    return '\\n'.join(str(x) for x in universes)"
    },
    {
        "number": 2597,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    plank_lengths = [int(x) for x in stdin.readline().strip().split()]\n    plank_lengths.sort()\n    plank_lengths.reverse()\n    max_side_length = 0\n    for i in range(n):\n        max_side_length = max(max_side_length, plank_lengths[i] * (i + 1))\n    return str(max_side_length)"
    },
    {
        "number": 2598,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v, c = [x for x in stdin.split()]\n        graph[int(u) - 1].append((int(v) - 1, c))\n        graph[int(v) - 1].append((int(u) - 1, c))\n    visited = [False] * n\n    visited[0] = True\n    queue = [0]\n    moves = 0\n    while queue:\n        u = queue.pop(0)\n        for v, c in graph[u]:\n            if not visited[v]:\n                visited[v] = True\n                if c == 'R':\n                    queue.append(v)\n                else:\n                    queue.insert(0, v)\n                moves += 1\n    return moves"
    },
    {
        "number": 2599,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n == 0:\n        return '0'\n    if n == 1:\n        return '1'\n    if n == 2:\n        return '2'\n    if n == 3:\n        return '3'\n    if n == 4:\n        return '4'\n    if n == 5:\n        return '5'\n    if n == 6:\n        return '6'\n    if n == 7:\n        return '7'\n    if n == 8:\n        return '8'\n    if n == 9:\n        return '9'\n    if n == 10:\n        return '10'\n    if n == 11:\n        return '11'\n    if n == 12:\n        return '12'\n    if n == 13:\n        return '13'\n    if n == 14:\n        return '14'\n    if n == 15:\n        return '15'\n    if n == 16:\n        return '16'\n    if n == 17:\n        return '17'\n    if n == 18:\n        return '18'\n    if n == 19:\n        return '19'\n    if n == 20:\n        return '20'\n    if n == 21:\n        return '21'\n    if n == 22:\n        return '22'\n    if n == 23:\n        return '23'\n    if n == 24:\n        return '24'\n    if n == 25:\n        return '25'\n    if n == 26:\n        return '26'\n    if n == 27:\n        return '27'\n    if n == 28:\n        return '28'\n    if n == 29:\n        return '29'\n    if n == 30:\n        return '30'\n    if n == 31:\n        return '31'\n    if n == 32:\n        return '32'\n    if n == 33:\n        return '33'\n    if n == 34:\n        return '34'\n    if n == 35:\n        return '35'\n    if n == 36:\n        return '36'\n    if n == 37:\n        return '37'\n    if n == 38:\n        return '38'\n    if n == 39:\n        return '39'\n    if n == 40:\n        return '40'\n    if n == 41:\n        return '41'\n    if n == 42:\n        return '42'\n    if n == 43:\n        return '43'\n    if n == 44:\n        return '44'\n    if n == 45:\n        return '45'\n    if n == 46:\n        return '46'\n    if n == 47:\n        return '47'\n    if n == 48:\n        return '48'\n    if n == 49:\n        return '49'\n    if n == 50:\n        return '50'\n    if n == 51:\n        return '51'\n    if n == 52:\n        return '52'\n    if n == 53:\n        return '53'\n    if n == 54:\n        return '54'\n    if n == 55:\n        return '55'\n    if n == 56:\n        return '56'\n    if n == 57:\n        return '57'\n    if n == 58:\n        return '58'\n    if n == 59:\n        return '59'\n    if n == 60:\n        return '60'\n    if n == 61:\n        return '61'\n    if n == 62:\n        return '62'\n    if n == 63:\n        return '63'\n    if n == 64:\n        return '64'\n    if n == 65:\n        return '65'\n    if n == 66:\n        return '66'\n    if n == 67:\n        return '67'\n    if n == 68:\n        return '68'\n    if n == 69:\n        return '69'\n    if n == 70:\n        return '70'\n    if n == 71:\n        return '71'\n    if n == 72:\n        return '72'\n    if n == 73:\n        return '73'\n    if n == 74:\n        return '74'\n    if n == 75:\n        return '75'\n    if n == 76:\n        return '76'\n    if n == 77:\n        return '77'\n    if n == 78:\n        return '78'\n    if n == 79:\n        return '79'\n    if n == 80:\n        return '80'\n    if n == 81:\n        return '81'\n    if n == 82:\n        return '82'\n    if n == 83:\n        return '83'\n    if n == 84:\n        return '84'\n    if n == 85:\n        return '85'\n    if n == 86:\n        return '86'\n    if n == 87:\n        return '87'\n    if n == 88:\n        return '88'\n    if n == 89:\n        return '89'\n    if n == 90:\n        return '90'\n    if n == 91:\n        return '91'\n    if n == 92:\n        return '92'\n    if n == 93:\n        return '93'\n    if n == 94:\n        return '94'\n    if n == 95:\n        return '95'\n    if n == 96:\n        return '96'\n    if n == 97:\n        return '97'\n    if n == 98:\n        return '98'\n    if n == 99:\n        return '99'\n    if n == 100:\n        return '100'\n    if n == 101:\n        return '101'\n    if n == 102:\n        return '102'\n    if n == 103:\n        return '103'\n    if n == 104:\n        return '104'\n    if n == 105:\n        return '105'\n    if n == 106:\n        return '106'\n    if n == 107:\n        return '107'\n    if n == 108:\n        return '108'\n    if n == 109:\n        return '109'\n    if n == 110:\n        return '110'\n    if n == 111:\n        return '111'\n    if n == 112:\n        return '112'\n    if n == 113:\n        return '113'\n    if n == 114:\n        return '114'\n    if n == 115:\n        return '115'\n    if n == 116:\n        return '116'\n    if n == 117:\n        return '117'\n    if n == 118:\n        return '118'\n    if n == 119:\n        return '119'\n    if n == 120:\n        return '120'\n    if n == 121:\n        return '121'\n    if n == 122:\n        return '122'\n    if n == 123:\n        return '123'\n    if n == 124:\n        return '124'\n    if n == 125:\n        return '125'\n    if n == 126:\n        return '126'\n    if n == 127:\n        return '127'\n    if n == 128:\n        return '128'\n    if n == 129:\n        return '129'\n    if n == 130:\n        return '130'\n    if n == 131:\n        return '131'\n    if n == 132:\n        return '132'\n    if n == 133:\n        return '133'\n    if n == 134:\n        return '134'\n    if n == 135:\n"
    },
    {
        "number": 2600,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    matrix = [[int(x) for x in stdin.split()] for _ in range(n)]\n    return str(solution_recursive(matrix, n, m))\n\ndef"
    },
    {
        "number": 2601,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        if n == 1:\n            print(\"YES\")\n        elif n == 2:\n            if a[0] < a[1]:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            if n % 2 == 0:\n                if a[0] < a[1]:\n                    print(\"YES\")\n                else:\n                    print(\"NO\")\n            else:\n                if a[0] < a[1]:\n                    print(\"YES\")\n                else:\n                    print(\"NO\")"
    },
    {
        "number": 2602,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        a, b, n, m = [int(x) for x in stdin.readline().strip().split()]\n        if a + b == 0:\n            print(\"Yes\")\n        elif n + m == 0:\n            print(\"No\")\n        else:\n            print(\"No\")"
    },
    {
        "number": 2603,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    for _ in range(n):\n        n = int(stdin.readline())\n        a = list(map(int, stdin.readline().split()))\n        a.sort()\n        if a == sorted(a):\n            print(\"YES\")\n        else:\n            print(\"NO\")"
    },
    {
        "number": 2604,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, d = map(int, stdin.split())\n    n = int(stdin)\n    s = 0\n    for _ in range(n):\n        x, y, r = map(int, stdin.split())\n        if (x - r) ** 2 + (y - r) ** 2 <= r ** 2:\n            s += 1\n    return str(s)"
    },
    {
        "number": 2605,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    cities = [int(x) for x in stdin.split()]\n    roads = [int(x) for x in stdin.split()]\n    cities_id = [int(x) for x in stdin.split()]\n    cities_id.sort()\n    roads.sort()\n    cities.sort()\n    cities_id_dict = {}\n    for i in range(len(cities_id)):\n        cities_id_dict[cities_id[i]] = i\n    roads_dict = {}\n    for i in range(len(roads)):\n        roads_dict[roads[i]] = i\n    roads_dict[roads[-1]] = roads_dict[roads[0]]\n    roads_dict[roads[0]] = roads_dict[roads[-1]]\n    roads_dict[roads[-1]] = roads_dict[roads[0]]\n    roads_dict[roads[0]] = roads_dict[roads[-1]]\n    roads_dict[roads[-1]] = roads_dict[roads[0]]\n    roads_dict[roads[0]] = roads_dict[roads[-1]]\n    roads_dict[roads[-1]] = roads_dict[roads[0]]\n    roads_dict[roads[0]] = roads_dict[roads[-1]]\n    roads_dict[roads[-1]] = roads_dict[roads[0]]\n    roads_dict[roads[0]] = roads_dict[roads[-1]]\n    roads_dict[roads[-1]] = roads_dict[roads[0]]\n    roads_dict[roads[0]] = roads_dict[roads[-1]]\n    roads_dict[roads[-1]] = roads_dict[roads[0]]\n    roads_dict[roads[0]] = roads_dict[roads[-1]]\n    roads_dict[roads[-1]] = roads_dict[roads[0]]\n    roads_dict[roads[0]] = roads_dict[roads[-1]]\n    roads_dict[roads[-1]] = roads_dict[roads[0]]\n    roads_dict[roads[0]] = roads_dict[roads[-1]]\n    roads_dict[roads[-1]] = roads_dict[roads[0]]\n    roads_dict[roads[0]] = roads_dict[roads[-1]]\n    roads_dict[roads[-1]] = roads_dict[roads[0]]\n    roads_dict[roads[0]] = roads_dict[roads[-1]]\n    roads_dict[roads[-1]] = roads_dict[roads[0]]\n    roads_dict[roads[0]] = roads_dict[roads[-1]]\n    roads_dict[roads[-1]] = roads_dict[roads[0]]\n    roads_dict[roads[0]] = roads_dict[roads[-1]]\n    roads_dict[roads[-1]] = roads_dict[roads[0]]\n    roads_dict[roads[0]] = roads_dict[roads[-1]]\n    roads_dict[roads[-1]] = roads_dict[roads[0]]\n    roads_dict[roads[0]] = roads_dict[roads[-1]]\n    roads_dict[roads[-1]] = roads_dict[roads[0]]\n    roads_dict[roads[0]] = roads_dict[roads[-1]]\n    roads_dict[roads[-1]] = roads_dict[roads[0]]\n    roads_dict[roads[0]] = roads_dict[roads[-1]]\n    roads_dict[roads[-1]] = roads_dict[roads[0]]\n    roads_dict[roads[0]] = roads_dict[roads[-1]]\n    roads_dict[roads[-1]] = roads_dict[roads[0]]\n    roads_dict[roads[0]] = roads_dict[roads[-1]]\n    roads_dict[roads[-1]] = roads_dict[roads[0]]\n    roads_dict[roads[0]] = roads_dict[roads[-1]]\n    roads_dict[roads[-1]] = roads_dict[roads[0]]\n    roads_dict[roads[0]] = roads_dict[roads[-1]]\n    roads_dict[roads[-1]] = roads_dict[roads[0]]\n    roads_dict[roads[0]] = roads_dict[roads[-1]]\n    roads_dict[roads[-1]] = roads_dict[roads[0]]\n    roads_dict[roads[0]] = roads_dict[roads[-1]]\n    roads_dict[roads[-1]] = roads_dict[roads[0]]\n    roads_dict[roads[0]] = roads_dict[roads[-1]]\n    roads_dict[roads[-1]] = roads_dict[roads[0]]\n    roads_dict[roads[0]] = roads_dict[roads[-1]]\n    roads_dict[roads[-1]] = roads_dict[roads[0]]\n    roads_dict[roads[0]] = roads_dict[roads[-1]]\n    roads_dict[roads[-1]] = roads_dict[roads[0]]\n    roads_dict[roads[0]] = roads_dict[roads[-1]]\n    roads_dict[roads[-1]] = roads_dict[roads[0]]\n    roads_dict[roads[0]] = roads_dict[roads[-1]]\n    roads_dict[roads[-1]] = roads_dict[roads[0]]\n    roads_dict[roads[0]] = roads_dict[roads[-1]]\n    roads_dict[roads[-1]] = roads_dict[roads[0]]\n    roads_dict[roads[0]] = roads_dict[roads[-1]]\n    roads_dict[roads[-1]] = roads_dict[roads[0]]\n    "
    },
    {
        "number": 2606,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    dishes = [int(x) for x in stdin.readline().strip().split()]\n    dishes.sort()\n    dishes = [0] + dishes\n    dishes = dishes[::-1]\n    dishes = dishes[1:]\n    dishes = dishes[::-1]\n    dishes = dishes[1:]\n    dishes = dishes[::-1]\n    dishes = dishes[1:]\n    dishes = dishes[::-1]\n    dishes = dishes[1:]\n    dishes = dishes[::-1]\n    dishes = dishes[1:]\n    dishes = dishes[::-1]\n    dishes = dishes[1:]\n    dishes = dishes[::-1]\n    dishes = dishes[1:]\n    dishes = dishes[::-1]\n    dishes = dishes[1:]\n    dishes = dishes[::-1]\n    dishes = dishes[1:]\n    dishes = dishes[::-1]\n    dishes = dishes[1:]\n    dishes = dishes[::-1]\n    dishes = dishes[1:]\n    dishes = dishes[::-1]\n    dishes = dishes[1:]\n    dishes = dishes[::-1]\n    dishes = dishes[1:]\n    dishes = dishes[::-1]\n    dishes = dishes[1:]\n    dishes = dishes[::-1]\n    dishes = dishes[1:]\n    dishes = dishes[::-1]\n    dishes = dishes[1:]\n    dishes = dishes[::-1]\n    dishes = dishes[1:]\n    dishes = dishes[::-1]\n    dishes = dishes[1:]\n    dishes = dishes[::-1]\n    dishes = dishes[1:]\n    dishes = dishes[::-1]\n    dishes = dishes[1:]\n    dishes = dishes[::-1]\n    dishes = dishes[1:]\n    dishes = dishes[::-1]\n    dishes = dishes[1:]\n    dishes = dishes[::-1]\n    dishes = dishes[1:]\n    dishes = dishes[::-1]\n    dishes = dishes[1:]\n    dishes = dishes[::-1]\n    dishes = dishes[1:]\n    dishes = dishes[::-1]\n    dishes = dishes[1:]\n    dishes = dishes[::-1]\n    dishes = dishes[1:]\n    dishes = dishes[::-1]\n    dishes = dishes[1:]\n    dishes = dishes[::-1]\n    dishes = dishes[1:]\n    dishes = dishes[::-1]\n    dishes = dishes[1:]\n    dishes = dishes[::-1]\n    dishes = dishes[1:]\n    dishes = dishes[::-1]\n    dishes = dishes[1:]\n    dishes = dishes[::-1]\n    dishes = dishes[1:]\n    dishes = dishes[::-1]\n    dishes = dishes[1:]\n    dishes = dishes[::-1]\n    dishes = dishes[1:]\n    dishes = dishes[::-1]\n    dishes = dishes[1:]\n    dishes = dishes[::-1]\n    dishes = dishes[1:]\n    dishes = dishes[::-1]\n    dishes = dishes[1:]\n    dishes = dishes[::-1]\n    dishes = dishes[1:]\n    dishes = dishes[::-1]\n    dishes = dishes[1:]\n    dishes = dishes[::-1]\n    dishes = dishes[1:]\n    dishes = dishes[::-1]\n    dishes = dishes[1:]\n    dishes = dishes[::-1]\n    dishes = dishes[1:]\n    dishes = dishes[::-1]\n    dishes = dishes[1:]\n    dishes = dishes[::-1]\n    dishes = dishes[1:]\n    dishes = dishes[::-1]\n    dishes = dishes[1:]\n    dishes = dishes[::-1]\n    dishes = dishes[1:]\n    dishes = dishes[::-1]\n    dishes = dishes[1:]\n    dishes = dishes[::-1]\n    dishes = dishes[1:]\n    dishes = dishes[::-1]\n    dishes = dishes[1:]\n    dishes = dishes[::-1]\n    dishes = dishes[1:]\n    dishes = dishes[::-1]\n    dishes = dishes[1:]\n    dishes = dishes[::-1]\n    dishes = dishes[1:]\n    dishes = dishes[::-1]\n    dishes = dishes[1:]\n    dishes = dishes[::-1]\n    dishes = dishes[1:]\n    dishes = dishes[::-1]\n    dishes = dishes[1:]\n    dishes = dishes[::-1]\n    dishes = dishes[1:]\n    dishes = dishes[::-1]\n    dishes = dishes[1:]\n    dishes = dishes[::-1]\n    dishes = dishes[1:]\n    dishes = dishes[::-1]\n    dishes = dishes[1:]\n    dishes = dishes[::-1]\n    dishes = dishes[1:]\n    dishes = dishes[::-1]\n    dishes = dishes[1:]\n    dishes = dishes[::-1]\n    dishes = dishes[1:]\n    dishes = dishes[::-1]\n    dishes = dishes[1:]\n    dishes = dishes[::-1]\n    dishes = dishes[1:]\n    dishes = dishes[::-1]\n    dishes = dishes[1:]\n    dishes = dishes[::-1]\n    dishes = dishes"
    },
    {
        "number": 2607,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2608,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2609,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    segments = [tuple(map(int, line.split())) for line in stdin.readlines()]\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x: x[1] - x[0])\n    segments.sort(key=lambda x: x[0] - x[1])\n    segments.sort(key=lambda x"
    },
    {
        "number": 2610,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    a.reverse()\n    m = 0\n    for i in range(n):\n        if p >= a[i]:\n            m += 1\n            p -= a[i]\n        else:\n            break\n    return str(m)"
    },
    {
        "number": 2611,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    piles = list(map(int, stdin.split()))\n    queries = [list(map(int, stdin.split())) for _ in range(q)]\n    moves = 0\n    for t, x in queries:\n        if t == 0:\n            piles.remove(x)\n        else:\n            piles.append(x)\n        moves += 1\n    return str(moves)"
    },
    {
        "number": 2612,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    sizes = [int(x) for x in stdin.readline().split()]\n    sizes.sort()\n    sizes.append(0)\n    sizes.append(sizes[-1] + sizes[-2])\n    sizes.append(sizes[-1] + sizes[-2] + sizes[-3])\n    sizes.append(sizes[-1] + sizes[-2] + sizes[-3] + sizes[-4])\n    sizes.append(sizes[-1] + sizes[-2] + sizes[-3] + sizes[-4] + sizes[-5])\n    sizes.append(sizes[-1] + sizes[-2] + sizes[-3] + sizes[-4] + sizes[-5] + sizes[-6])\n    sizes.append(sizes[-1] + sizes[-2] + sizes[-3] + sizes[-4] + sizes[-5] + sizes[-6] + sizes[-7])\n    sizes.append(sizes[-1] + sizes[-2] + sizes[-3] + sizes[-4] + sizes[-5] + sizes[-6] + sizes[-7] + sizes[-8])\n    sizes.append(sizes[-1] + sizes[-2] + sizes[-3] + sizes[-4] + sizes[-5] + sizes[-6] + sizes[-7] + sizes[-8] + sizes[-9])\n    sizes.append(sizes[-1] + sizes[-2] + sizes[-3] + sizes[-4] + sizes[-5] + sizes[-6] + sizes[-7] + sizes[-8] + sizes[-9] + sizes[-10])\n    sizes.append(sizes[-1] + sizes[-2] + sizes[-3] + sizes[-4] + sizes[-5] + sizes[-6] + sizes[-7] + sizes[-8] + sizes[-9] + sizes[-10] + sizes[-11])\n    sizes.append(sizes[-1] + sizes[-2] + sizes[-3] + sizes[-4] + sizes[-5] + sizes[-6] + sizes[-7] + sizes[-8] + sizes[-9] + sizes[-10] + sizes[-11] + sizes[-12])\n    sizes.append(sizes[-1] + sizes[-2] + sizes[-3] + sizes[-4] + sizes[-5] + sizes[-6] + sizes[-7] + sizes[-8] + sizes[-9] + sizes[-10] + sizes[-11] + sizes[-12] + sizes[-13])\n    sizes.append(sizes[-1] + sizes[-2] + sizes[-3] + sizes[-4] + sizes[-5] + sizes[-6] + sizes[-7] + sizes[-8] + sizes[-9] + sizes[-10] + sizes[-11] + sizes[-12] + sizes[-13] + sizes[-14])\n    sizes.append(sizes[-1] + sizes[-2] + sizes[-3] + sizes[-4] + sizes[-5] + sizes[-6] + sizes[-7] + sizes[-8] + sizes[-9] + sizes[-10] + sizes[-11] + sizes[-12] + sizes[-13] + sizes[-14] + sizes[-15])\n    sizes.append(sizes[-1] + sizes[-2] + sizes[-3] + sizes[-4] + sizes[-5] + sizes[-6] + sizes[-7] + sizes[-8] + sizes[-9] + sizes[-10] + sizes[-11] + sizes[-12] + sizes[-13] + sizes[-14] + sizes[-15] + sizes[-16])\n    sizes.append(sizes[-1] + sizes[-2] + sizes[-3] + sizes[-4] + sizes[-5] + sizes[-6] + sizes[-7] + sizes[-8] + sizes[-9] + sizes[-10] + sizes[-11] + sizes[-12] + sizes[-13] + sizes[-14] + sizes[-15] + sizes[-16] + sizes[-17])\n    sizes.append(sizes[-1] + sizes[-2] + sizes[-3] + sizes[-4] + sizes[-5] + sizes[-6] + sizes[-7] + sizes[-8] + sizes[-9] + sizes[-10] + sizes[-11] + sizes[-12] + sizes[-13] + sizes[-14] + sizes[-15] + sizes[-16] + sizes[-17] + sizes[-18])\n    sizes.append(sizes[-1] + sizes[-2] + sizes[-3] + sizes[-4] + sizes[-5] + sizes[-6] + sizes[-7] + sizes[-8] + sizes[-9] + sizes[-10] + sizes[-11] + sizes[-12] + sizes[-13] + sizes[-14] + sizes[-15] + sizes[-16] + sizes[-17] + sizes[-18] + sizes[-19])\n    sizes.append(sizes[-1] + sizes[-2] + sizes[-3] + sizes[-4] + sizes[-5] + sizes[-6] + sizes[-7] + sizes[-8] + sizes[-9] + sizes[-10] + sizes[-11] + sizes[-12] + sizes[-13] + sizes[-14] + sizes[-15] + sizes[-16] + sizes["
    },
    {
        "number": 2613,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2614,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline())\n    for _ in range(T):\n        n = int(stdin.readline())\n        f = [int(x) for x in stdin.readline().split()]\n        print(solution_helper(n, f))\n\ndef"
    },
    {
        "number": 2615,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            continue\n        divisor = 2\n        while divisor * divisor <= i:\n            if i % divisor == 0:\n                break\n            divisor += 1\n        if divisor * divisor == i:\n            count += 1\n    return str(count)"
    },
    {
        "number": 2616,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        a = [int(x) for x in stdin.readline().strip().split()]\n        if n == 1:\n            print(\"First\")\n        else:\n            if a[0] == 1:\n                print(\"First\")\n            else:\n                print(\"Second\")"
    },
    {
        "number": 2617,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        if n % 2!= 0:\n            print(-1)\n        else:\n            d = int(n / 2)\n            print(d)\n            print(*[int(x) for x in stdin.readline().strip().split()])"
    },
    {
        "number": 2618,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    prices = list(map(int, stdin.readline().split()))\n    x, a = map(int, stdin.readline().split())\n    y, b = map(int, stdin.readline().split())\n    k = int(stdin.readline())\n    prices.sort()\n    prices.reverse()\n    total = 0\n    for i in range(n):\n        total += prices[i] * (x + y)\n        if total >= k:\n            return str(i + 1)\n    return '-1'\n\nassert(solution('''1\n100\n50 1\n49 1\n100\n8\n100 200 100 200 100 200 100 100\n10 2\n15 3\n107\n3\n1000000000 1000000000 1000000000\n50 1\n50 1\n3000000000\n5\n200 100 100 100 100\n69 5\n31 2\n90\n''') == '6')\nassert(solution('''1\n1\n100\n50 1\n49 1\n100\n8\n100 200 100 200 100 200 100 100\n10 2\n15 3\n107\n3\n1000000000 1000000000 1000000000\n50 1\n50 1\n3000000000\n5\n200 100 100 100 100\n69 5\n31 2\n90\n''') == '3')\nassert(solution('''1\n1\n100\n50 1\n49 1\n100\n8\n100 200 100 200 100 200 100 100\n10 2\n15 3\n107\n3\n1000000000 1000000000 1000000000\n50 1\n50 1\n3000000000\n5\n200 100 100 100 100\n69 5\n31 2\n90\n''') == '4')\nassert(solution('''1\n1\n100\n50 1\n49 1\n100\n8\n100 200 100 200 100 200 100 100\n10 2\n15 3\n107\n3\n1000000000 1000000000 1000000000\n50 1\n50 1\n3000000000\n5\n200 100 100 100 100\n69 5\n31 2\n90\n''') == '-1')\nassert(solution('''1\n1\n100\n50 1\n49 1\n100\n8\n100 200 100 200 100 200 100 100\n10 2\n15 3\n107\n3\n1000000000 1000000000 1000000000\n50 1\n50 1\n3000000000\n5\n200 100 100 100 100\n69 5\n31 2\n90\n''') == '-1')\nassert(solution('''1\n1\n100\n50 1\n49 1\n100\n8\n100 200 100 200 100 200 100 100\n10 2\n15 3\n107\n3\n1000000000 1000000000 1000000000\n50 1\n50 1\n3000000000\n5\n200 100 100 100 100\n69 5\n31 2\n90\n''') == '-1')\nassert(solution('''1\n1\n100\n50 1\n49 1\n100\n8\n100 200 100 200 100 200 100 100\n10 2\n15 3\n107\n3\n1000000000 1000000000 1000000000\n50 1\n50 1\n3000000000\n5\n200 100 100 100 100\n69 5\n31 2\n90\n''') == '-1')\nassert(solution('''1\n1\n100\n50 1\n49 1\n100\n8\n100 200 100 200 100 200 100 100\n10 2\n15 3\n107\n3\n1000000000 1000000000 1000000000\n50 1\n50 1\n3000000000\n5\n200 100 100 100 100\n69 5\n31 2\n90\n''') == '-1')\nassert(solution('''1\n1\n100"
    },
    {
        "number": 2619,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q, c = [int(x) for x in stdin.split()]\n    stars = [int(x) for x in stdin.split()]\n    stars = sorted(stars, key=lambda x: x[2])\n    stars = sorted(stars, key=lambda x: x[1])\n    stars = sorted(stars, key=lambda x: x[0])\n    stars = sorted(stars, key=lambda x: x[1])\n    stars = sorted(stars, key=lambda x: x[0])\n    stars = sorted(stars, key=lambda x: x[1])\n    stars = sorted(stars, key=lambda x: x[0])\n    stars = sorted(stars, key=lambda x: x[1])\n    stars = sorted(stars, key=lambda x: x[0])\n    stars = sorted(stars, key=lambda x: x[1])\n    stars = sorted(stars, key=lambda x: x[0])\n    stars = sorted(stars, key=lambda x: x[1])\n    stars = sorted(stars, key=lambda x: x[0])\n    stars = sorted(stars, key=lambda x: x[1])\n    stars = sorted(stars, key=lambda x: x[0])\n    stars = sorted(stars, key=lambda x: x[1])\n    stars = sorted(stars, key=lambda x: x[0])\n    stars = sorted(stars, key=lambda x: x[1])\n    stars = sorted(stars, key=lambda x: x[0])\n    stars = sorted(stars, key=lambda x: x[1])\n    stars = sorted(stars, key=lambda x: x[0])\n    stars = sorted(stars, key=lambda x: x[1])\n    stars = sorted(stars, key=lambda x: x[0])\n    stars = sorted(stars, key=lambda x: x[1])\n    stars = sorted(stars, key=lambda x: x[0])\n    stars = sorted(stars, key=lambda x: x[1])\n    stars = sorted(stars, key=lambda x: x[0])\n    stars = sorted(stars, key=lambda x: x[1])\n    stars = sorted(stars, key=lambda x: x[0])\n    stars = sorted(stars, key=lambda x: x[1])\n    stars = sorted(stars, key=lambda x: x[0])\n    stars = sorted(stars, key=lambda x: x[1])\n    stars = sorted(stars, key=lambda x: x[0])\n    stars = sorted(stars, key=lambda x: x[1])\n    stars = sorted(stars, key=lambda x: x[0])\n    stars = sorted(stars, key=lambda x: x[1])\n    stars = sorted(stars, key=lambda x: x[0])\n    stars = sorted(stars, key=lambda x: x[1])\n    stars = sorted(stars, key=lambda x: x[0])\n    stars = sorted(stars, key=lambda x: x[1])\n    stars = sorted(stars, key=lambda x: x[0])\n    stars = sorted(stars, key=lambda x: x[1])\n    stars = sorted(stars, key=lambda x: x[0])\n    stars = sorted(stars, key=lambda x: x[1])\n    stars = sorted(stars, key=lambda x: x[0])\n    stars = sorted(stars, key=lambda x: x[1])\n    stars = sorted(stars, key=lambda x: x[0])\n    stars = sorted(stars, key=lambda x: x[1])\n    stars = sorted(stars, key=lambda x: x[0])\n    stars = sorted(stars, key=lambda x: x[1])\n    stars = sorted(stars, key=lambda x: x[0])\n    stars = sorted(stars, key=lambda x: x[1])\n    stars = sorted(stars, key=lambda x: x[0])\n    stars = sorted(stars, key=lambda x: x[1])\n    stars = sorted(stars, key=lambda x: x[0])\n    stars = sorted(stars, key=lambda x: x[1])\n    stars = sorted(stars, key=lambda x: x[0])\n    stars = sorted(stars, key=lambda x: x[1])\n    stars = sorted(stars, key=lambda x: x[0])\n    stars = sorted(stars, key=lambda x: x[1])\n    stars = sorted(stars, key=lambda x: x[0])\n    stars = sorted(stars, key=lambda x: x[1])\n    stars = sorted(stars, key=lambda x: x[0])\n    stars = sorted(stars, key=lambda x: x[1])\n    stars = sorted(stars, key=lambda x: x[0])\n    stars = sorted(stars, key=lambda x: x[1])\n    stars = sorted(stars, key=lambda x: x[0])\n    stars = sorted(stars, key=lambda x: x[1])\n    stars = sorted(stars, key=lambda x: x[0])\n    stars = sorted(stars, key=lambda x: x[1])\n    stars = sorted(stars, key=lambda x: x[0])\n    stars = sorted(stars, key=lambda x: x[1])\n    stars = sorted(stars, key=lambda x: x[0])\n    stars = sorted(stars, key=lambda x: x[1])\n    stars = sorted(stars, key=lambda x: x[0])\n    stars = sorted(stars, key=lambda x: x[1])\n    stars = sorted"
    },
    {
        "number": 2620,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    for _ in range(q):\n        l, r = [int(x) for x in stdin.split()]\n        if l == 1:\n            print(sum(a[l-1:r]))\n        else:\n            a[l-1], a[r-1] = a[r-1], a[l-1]\n            print(sum(a[l-1:r]))\n    return ''"
    },
    {
        "number": 2621,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    h = [int(x) for x in stdin.split()]\n    if n == 1:\n        return \"YES\"\n    if m == 0:\n        return \"NO\"\n    if k == 0:\n        return \"YES\"\n    if n == 2:\n        return \"NO\"\n    if n == 3:\n        return \"YES\"\n    if n == 4:\n        return \"YES\"\n    if n == 5:\n        return \"YES\"\n    if n == 6:\n        return \"YES\"\n    if n == 7:\n        return \"YES\"\n    if n == 8:\n        return \"YES\"\n    if n == 9:\n        return \"YES\"\n    if n == 10:\n        return \"YES\"\n    if n == 11:\n        return \"YES\"\n    if n == 12:\n        return \"YES\"\n    if n == 13:\n        return \"YES\"\n    if n == 14:\n        return \"YES\"\n    if n == 15:\n        return \"YES\"\n    if n == 16:\n        return \"YES\"\n    if n == 17:\n        return \"YES\"\n    if n == 18:\n        return \"YES\"\n    if n == 19:\n        return \"YES\"\n    if n == 20:\n        return \"YES\"\n    if n == 21:\n        return \"YES\"\n    if n == 22:\n        return \"YES\"\n    if n == 23:\n        return \"YES\"\n    if n == 24:\n        return \"YES\"\n    if n == 25:\n        return \"YES\"\n    if n == 26:\n        return \"YES\"\n    if n == 27:\n        return \"YES\"\n    if n == 28:\n        return \"YES\"\n    if n == 29:\n        return \"YES\"\n    if n == 30:\n        return \"YES\"\n    if n == 31:\n        return \"YES\"\n    if n == 32:\n        return \"YES\"\n    if n == 33:\n        return \"YES\"\n    if n == 34:\n        return \"YES\"\n    if n == 35:\n        return \"YES\"\n    if n == 36:\n        return \"YES\"\n    if n == 37:\n        return \"YES\"\n    if n == 38:\n        return \"YES\"\n    if n == 39:\n        return \"YES\"\n    if n == 40:\n        return \"YES\"\n    if n == 41:\n        return \"YES\"\n    if n == 42:\n        return \"YES\"\n    if n == 43:\n        return \"YES\"\n    if n == 44:\n        return \"YES\"\n    if n == 45:\n        return \"YES\"\n    if n == 46:\n        return \"YES\"\n    if n == 47:\n        return \"YES\"\n    if n == 48:\n        return \"YES\"\n    if n == 49:\n        return \"YES\"\n    if n == 50:\n        return \"YES\"\n    if n == 51:\n        return \"YES\"\n    if n == 52:\n        return \"YES\"\n    if n == 53:\n        return \"YES\"\n    if n == 54:\n        return \"YES\"\n    if n == 55:\n        return \"YES\"\n    if n == 56:\n        return \"YES\"\n    if n == 57:\n        return \"YES\"\n    if n == 58:\n        return \"YES\"\n    if n == 59:\n        return \"YES\"\n    if n == 60:\n        return \"YES\"\n    if n == 61:\n        return \"YES\"\n    if n == 62:\n        return \"YES\"\n    if n == 63:\n        return \"YES\"\n    if n == 64:\n        return \"YES\"\n    if n == 65:\n        return \"YES\"\n    if n == 66:\n        return \"YES\"\n    if n == 67:\n        return \"YES\"\n    if n == 68:\n        return \"YES\"\n    if n == 69:\n        return \"YES\"\n    if n == 70:\n        return \"YES\"\n    if n == 71:\n        return \"YES\"\n    if n == 72:\n        return \"YES\"\n    if n == 73:\n        return \"YES\"\n    if n == 74:\n        return \"YES\"\n    if n == 75:\n        return \"YES\"\n    if n == 76:\n        return \"YES\"\n    if n == 77:\n        return \"YES\"\n    if n == 78:\n        return \"YES\"\n    if n == 79:\n        return \"YES\"\n    if n == 80:\n        return \"YES\"\n    if n == 81:\n        return \"YES\"\n    if n == 82:\n        return \"YES\"\n    if n == 83:\n        return \"YES\"\n    if n == 84:\n        return \"YES\"\n    if n == 85:\n        return"
    },
    {
        "number": 2622,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 2623,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2624,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    b = [0] * n\n    for _ in range(q):\n        s, x = stdin.split()\n        if s == '<':\n            b[int(x)] = -a[int(x)]\n        else:\n            b[int(x)] = a[int(x)]\n    return''.join(str(x) for x in b)"
    },
    {
        "number": 2625,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    answers = []\n    for _ in range(n):\n        k, x = [int(x) for x in stdin.readline().split()]\n        answers.append(str(digital_root(k, x)))\n    return '\\n'.join(answers)\n\ndef"
    },
    {
        "number": 2626,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        n = int(stdin.readline())\n        print(solve(n))\n\ndef"
    },
    {
        "number": 2627,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2628,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return [0]\n    if n == 1:\n        return [0, 1]\n    if n == 2:\n        return [0, 1, 3, 2]\n    if n == 3:\n        return [0, 1, 3, 2, 6, 7, 5, 4]\n    if n == 4:\n        return [0, 1, 3, 2, 6, 7, 5, 4, 8, 9, 10, 11, 13, 12, 14, 15, 16, 17, 18, 19, 21, 20, 22, 23, 24, 25, 26, 27, 29, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730,"
    },
    {
        "number": 2629,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    matrix = [[0] * n for _ in range(n)]\n    x, y = 0, 0\n    dx, dy = 0, 1\n    num = 1\n    while num <= n * n:\n        matrix[x][y] = num\n        if matrix[(x + dx) % n][(y + dy) % n]!= 0:\n            dx, dy = -dy, dx\n        x, y = x + dx, y + dy\n        num += 1\n    return '\\n'.join([' '.join([str(i) for i in row]) for row in matrix])\n\nassert(solution(stdin) == stdin)\n"
    },
    {
        "number": 2630,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 2631,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2632,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2633,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nassert(solution('''\n-2\n-3\n3\n''') == '7')\nassert(solution('''\n-2\n-3\n3\n''') == '7')\nassert(solution('''\n-2\n-3\n3\n''') == '7')\nassert(solution('''\n-2\n-3\n3\n''') == '7')\nassert(solution('''\n-2\n-3\n3\n''') == '7')\nassert(solution('''\n-2\n-3\n3\n''') == '7')\nassert(solution('''\n-2\n-3\n3\n''') == '7')\nassert(solution('''\n-2\n-3\n3\n''') == '7')\nassert(solution('''\n-2\n-3\n3\n''') == '7')\nassert(solution('''\n-2\n-3\n3\n''') == '7')\nassert(solution('''\n-2\n-3\n3\n''') == '7')\nassert(solution('''\n-2\n-3\n3\n''') == '7')\nassert(solution('''\n-2\n-3\n3\n''') == '7')\nassert(solution('''\n-2\n-3\n3\n''') == '7')\nassert(solution('''\n-2\n-3\n3\n''') == '7')\nassert(solution('''\n-2\n-3\n3\n''') == '7')\nassert(solution('''\n-2\n-3\n3\n''') == '7')\nassert(solution('''\n-2\n-3\n3\n''') == '7')\nassert(solution('''\n-2\n-3\n3\n''') == '7')\nassert(solution('''\n-2\n-3\n3\n''') == '7')\nassert(solution('''\n-2\n-3\n3\n''') == '7')\nassert(solution('''\n-2\n-3\n3\n''') == '7')\nassert(solution('''\n-2\n-3\n3\n''') == '7')\nassert(solution('''\n-2\n-3\n3\n''') == '7')\nassert(solution('''\n-2\n-3\n3\n''') == '7')\nassert(solution('''\n-2\n-3\n3\n''') == '7')\nassert(solution('''\n-2\n-3\n3\n''') == '7')\nassert(solution('''\n-2\n-3\n3\n''') == '7')\nassert(solution('''\n-2\n-3\n3\n''') == '7')\nassert(solution('''\n-2\n-3\n3\n''') == '7')\nassert(solution('''\n-2\n-3\n3\n''') == '7')\nassert(solution('''\n-2\n-3\n3\n''') == '7')\nassert(solution('''\n-2\n-3\n3\n''') == '7')\nassert(solution('''\n-2\n-3\n3\n''') == '7')\nassert(solution('''\n-2\n-3\n3\n''') == '7')\nassert(solution('''\n-2\n-3\n3\n''') == '7')\nassert(solution('''\n-2\n-3\n3\n''') == '7')\nassert(solution('''\n-2\n-3\n3\n''') == '7')\nassert(solution('''\n-2\n-3\n3\n''') == '7')\nassert(solution('''\n-2\n-3\n3\n''') == '7')\nassert(solution('''\n-2\n-3\n3\n''') == '7')\nassert(solution('''\n-2\n-3\n3\n''') == '7')\nassert(solution('''\n-2\n-3\n3\n''') == '7')\nassert(solution('''\n-2\n-3\n3\n''') == '7')\nassert(solution('''\n-2\n-3\n3\n''') == '7')\nassert(solution('''\n-2\n-3\n3\n''') == '7')\nassert(solution('''\n-2\n-3\n3\n''') == '7')\nassert(solution('''\n-2\n-3\n3\n''') == '7')\nassert(solution('''\n-2\n-3\n3\n''') == '7')\nassert(solution('''\n-2\n-3\n3\n''') == '7')\nassert(solution('''\n-2\n-3\n3\n''') == '7')\nassert(solution('''\n-2\n-3\n3\n''') == '7')\nassert(solution('''\n-2\n-3\n3\n''') == '7')\nassert(solution('''\n-2\n-3\n3\n''') == '7')\nassert(solution('''\n-2\n-3\n3\n''') == '7')\nassert(solution('''\n-2\n-3\n3\n''') == '7')\nassert(solution('''\n-2\n-3\n3\n''') == '7')\nassert(solution('''\n-2\n-3\n3\n''') == '7')\nassert(solution('''\n-2\n-3\n3\n''') == '7')\nassert(solution('''\n-2\n-3\n3\n''') == '7')\nassert(solution('''\n-2\n-3\n3\n''') == '7')\nassert(solution('''\n-2\n-3\n3\n''') == '7')\nassert(solution('''\n-2\n-3\n3\n''') == '7')\nassert(solution('''\n-2\n-3\n3\n''') == '7')\nassert(solution('''\n-2\n-3\n3\n''') == '7')\nassert(solution('''\n-2\n-3\n3\n''') == '7')\nassert(solution('''\n-2\n-3\n3\n''') == '7')\nassert(solution('''\n-2\n-3\n3\n''') == '7')\nassert(solution('''\n-2\n-3\n3\n''') == '7')\nassert(solution('''\n-2\n-3\n3\n''') == '"
    },
    {
        "number": 2634,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    nums = [int(x) for x in stdin.split(',')]\n    return str(solution_helper(nums, 0))\n\ndef"
    },
    {
        "number": 2635,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2636,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2638,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2639,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 2640,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n    grid = [list(stdin.strip()) for _ in range(H)]\n    lamps = []\n    for i in range(H):\n        for j in range(W):\n            if grid[i][j] == '#':\n                lamps.append((i, j))\n    return max(solve(grid, lamps, H, W))\n\ndef"
    },
    {
        "number": 2641,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, Q = [int(x) for x in stdin.split()]\n    c = [int(x) for x in stdin.split()]\n    l = [int(x) for x in stdin.split()]\n    r = [int(x) for x in stdin.split()]\n    for _ in range(Q):\n        l_i, r_i = [int(x) for x in stdin.split()]\n        print(len(set(c[l_i - 1:r_i])))"
    },
    {
        "number": 2642,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n    b = [int(x) for x in stdin.readline().strip().split()]\n    return str(solution_helper(n, a, b))\n\ndef"
    },
    {
        "number": 2643,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, q = map(int, stdin.split())\n    d = list(map(int, stdin.split()))\n    n = list(map(int, stdin.split()))\n    m = list(map(int, stdin.split()))\n    for i in range(q):\n        n_i, x_i, m_i = map(int, stdin.split())\n        a = [x_i]\n        for j in range(n_i - 1):\n            a.append((a[-1] + d[(j - 1) % k]) % m_i)\n        print(sum(a[j] < a[j + 1] for j in range(n_i - 1)))"
    },
    {
        "number": 2644,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 2:\n        return '-1'\n    p = list(map(int, stdin.split()))\n    if len(p)!= n:\n        return '-1'\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if p[i] > p[j]:\n                p[i], p[j] = p[j], p[i]\n    return''.join(map(str, p))"
    },
    {
        "number": 2645,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.strip()"
    },
    {
        "number": 2646,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split()]\n    A = [int(x) for x in stdin.split()]\n    B = [int(x) for x in stdin.split()]\n    A.insert(0, 0)\n    B.insert(0, 0)\n    A.append(N)\n    B.append(N)\n    A.sort()\n    B.sort()\n    A_set = set(A)\n    B_set = set(B)\n    for i in range(1, N + 1):\n        if i not in A_set:\n            if i not in B_set:\n                print(\"No\")\n                return\n    print(\"Yes\")\n    for i in range(1, N + 1):\n        if i in A_set:\n            print(A.index(i) + 1)\n        else:\n            print(B.index(i) + 1)"
    },
    {
        "number": 2647,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2648,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        return '0'\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    a.reverse()\n    a = a[:n - 2]\n    a.sort()\n    a.reverse()\n    return str(a[0] + 1)"
    },
    {
        "number": 2649,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    points = [tuple(map(int, line.split())) for line in stdin.readlines()]\n    points.sort(key=lambda x: x[0] + x[1])\n    return str(abs(points[0][0] - points[1][0]) + abs(points[0][1] - points[1][1]))"
    },
    {
        "number": 2650,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, Q = map(int, stdin.split())\n    A = [int(x) for x in stdin.split()]\n    B = [int(x) for x in stdin.split()]\n    C = [int(x) for x in stdin.split()]\n    D = [int(x) for x in stdin.split()]\n    evenness = [0] * N\n    for i in range(N):\n        evenness[i] = max(A[i], B[i], C[i], D[i])\n    for _ in range(Q):\n        C, D = map(int, stdin.split())\n        evenness[C - 1] = min(evenness[C - 1], D)\n    return '\\n'.join(map(str, evenness))"
    },
    {
        "number": 2651,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    x = [int(x) for x in stdin.split()]\n    y = [int(x) for x in stdin.split()]\n    return str(sum(x[i] * y[i] for i in range(n)) % (10 ** 9 + 7))"
    },
    {
        "number": 2652,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    towns = []\n    for _ in range(n):\n        x, y = map(int, stdin.readline().strip().split())\n        towns.append((x, y))\n    towns.sort()\n    min_cost = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            min_cost += abs(towns[i][0] - towns[j][0]) + abs(towns[i][1] - towns[j][1])\n    return str(min_cost)"
    },
    {
        "number": 2653,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    tree = [[] for _ in range(n)]\n    for _ in range(n - 1):\n        a, b = map(int, stdin.split())\n        tree[a - 1].append(b - 1)\n        tree[b - 1].append(a - 1)\n    counters = [0] * n\n    for _ in range(q):\n        p, x = map(int, stdin.split())\n        counters[p - 1] += x\n    for i in range(n):\n        counters[i] += cnt(i, tree)\n    return''.join(map(str, counters))\n\ndef"
    },
    {
        "number": 2654,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    A = [int(x) for x in stdin.readline().split()]\n    B = [int(x) for x in stdin.readline().split()]\n    A.sort()\n    B.sort()\n    if N % 2 == 0:\n        median = (A[N // 2] + A[N // 2 + 1]) / 2\n    else:\n        median = A[N // 2]\n    count = 0\n    for i in range(N):\n        if A[i] <= median <= B[i]:\n            count += 1\n    return str(count)"
    },
    {
        "number": 2655,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    A = list(map(int, stdin.readline().split()))\n    A.sort()\n    comfort = 0\n    for i in range(1, N):\n        comfort += min(A[i - 1], A[(i + 1) % N])\n    return str(comfort)"
    },
    {
        "number": 2656,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    s = stdin[1:]\n    return str(len(s) ** k % (10 ** 9 + 7))"
    },
    {
        "number": 2657,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    a.sort()\n    a.reverse()\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] > a[j]:\n                print(a[i], a[j])\n                return"
    },
    {
        "number": 2658,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = [int(x) for x in stdin.split()]\n    A = [int(x) for x in stdin.split()]\n    A.sort()\n    A.reverse()\n    print(A[K - 1])"
    },
    {
        "number": 2659,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 19]\n    for i in range(k):\n        nums.sort()\n        nums[0] += 1\n        nums[-1] -= 1\n        nums[1:-1] = sorted(nums[1:-1])\n    return '\\n'.join(str(n) for n in nums)"
    },
    {
        "number": 2660,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2661,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = [int(x) for x in stdin.readline().strip().split()]\n    t = [int(x) for x in stdin.readline().strip().split()]\n    u = [int(x) for x in stdin.readline().strip().split()]\n    v = [int(x) for x in stdin.readline().strip().split()]\n    a = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if s[i] == 0:\n                a[i][j] = u[i] & v[j]\n            else:\n                a[i][j] = u[i] | v[j]\n    return '\\n'.join([' '.join([str(x) for x in row]) for row in a])"
    },
    {
        "number": 2662,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    c = 0\n    for i in range(n):\n        if i == 0:\n            c += 1\n        elif a[i] == a[i - 1]:\n            c += 1\n    return str(c)"
    },
    {
        "number": 2663,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = [int(x) for x in stdin.split()]\n    A = [int(x) for x in stdin.split()]\n    L = []\n    for i in range(N):\n        for j in range(i, N):\n            L.append(sum(A[i:j+1]))\n    L.sort()\n    return''.join(str(x) for x in L[:K])"
    },
    {
        "number": 2664,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n-----Test-----\nThis is a test file for testing your code. \n\n-----Input-----\nThe first line of the input is the number of test cases, T. T test cases follow. Each test case contains a single line of input, the number of balls in the first pan, followed by the number of balls in the second pan.\n\n-----Output-----\nFor each test case, output the colour of the heavier ball.\n\n-----Example-----\nInput\n1\n3 1 2 5\n0\n\nOutput\n2\n5\n\n-----Example-----\nInput\n2\n3 1 2 5\n0\n3 1 2 5\n0\n\nOutput\n2\n5\n\n-----Example-----\nInput\n2\n3 1 2 5\n0\n3 1 2 5\n0\n\nOutput\n2\n5\n\n-----Example-----\nInput\n2\n3 1 2 5\n0\n3 1 2 5\n0\n\nOutput\n2\n5\n\n-----Example-----\nInput\n2\n3 1 2 5\n0\n3 1 2 5\n0\n\nOutput\n2\n5\n\n-----Example-----\nInput\n2\n3 1 2 5\n0\n3 1 2 5\n0\n\nOutput\n2\n5\n\n-----Example-----\nInput\n2\n3 1 2 5\n0\n3 1 2 5\n0\n\nOutput\n2\n5\n\n-----Example-----\nInput\n2\n3 1 2 5\n0\n3 1 2 5\n0\n\nOutput\n2\n5\n\n-----Example-----\nInput\n2\n3 1 2 5\n0\n3 1 2 5\n0\n\nOutput\n2\n5\n\n-----Example-----\nInput\n2\n3 1 2 5\n0\n3 1 2 5\n0\n\nOutput\n2\n5\n\n-----Example-----\nInput\n2\n3 1 2 5\n0\n3 1 2 5\n0\n\nOutput\n2\n5\n\n-----Example-----\nInput\n2\n3 1 2 5\n0\n3 1 2 5\n0\n\nOutput\n2\n5\n\n-----Example-----\nInput\n2\n3 1 2 5\n0\n3 1 2 5\n0\n\nOutput\n2\n5\n\n-----Example-----\nInput\n2\n3 1 2 5\n0\n3 1 2 5\n0\n\nOutput\n2\n5\n\n-----Example-----\nInput\n2\n3 1 2 5\n0\n3 1 2 5\n0\n\nOutput\n2\n5\n\n-----Example-----\nInput\n2\n3 1 2 5\n0\n3 1 2 5\n0\n\nOutput\n2\n5\n\n-----Example-----\nInput\n2\n3 1 2 5\n0\n3 1 2 5\n0\n\nOutput\n2\n5\n\n-----Example-----\nInput\n2\n3 1 2 5\n0\n3 1 2 5\n0\n\nOutput\n2\n5\n\n-----Example-----\nInput\n2\n3 1 2 5\n0\n3 1 2 5\n0\n\nOutput\n2\n5\n\n-----Example-----\nInput\n2\n3 1 2 5\n0\n3 1 2 5\n0\n\nOutput\n2\n5\n\n-----Example-----\nInput\n2\n3 1 2 5\n0\n3 1 2 5\n0\n\nOutput\n2\n5\n\n-----Example-----\nInput\n2\n3 1 2 5\n0\n3 1 2 5\n0\n\nOutput\n2\n5\n\n-----Example-----\nInput\n2\n3 1 2 5\n0\n3 1 2 5\n0\n\nOutput\n2\n5\n\n-----Example-----\nInput\n2\n3 1 2 5\n0\n3 1 2 5\n0\n\nOutput\n2\n5\n\n-----Example-----\nInput\n2\n3 1 2 5\n0\n3 1 2 5\n0\n\nOutput\n2\n5"
    },
    {
        "number": 2665,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    points = []\n    for _ in range(n):\n        x, y = map(int, stdin.readline().split())\n        points.append((x, y))\n    points.sort()\n    min_points = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if points[i][0] == points[j][0] or points[i][1] == points[j][1]:\n                min_points += 1\n    return str(min_points)"
    },
    {
        "number": 2666,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    prices = [int(x) for x in stdin.split()]\n    profit = 0\n    for i in range(n):\n        if prices[i] < prices[i-1]:\n            profit += prices[i-1] - prices[i]\n    return profit"
    },
    {
        "number": 2667,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    stamps = [int(x) for x in stdin.readline().split()]\n    if n == 1:\n        return \"YES\"\n    if n == 2:\n        return \"NO\"\n    if n == 3:\n        return \"YES\"\n    if n == 4:\n        return \"NO\"\n    if n == 5:\n        return \"YES\"\n    if n == 6:\n        return \"NO\"\n    if n == 7:\n        return \"YES\"\n    if n == 8:\n        return \"NO\"\n    if n == 9:\n        return \"YES\"\n    if n == 10:\n        return \"NO\"\n    if n == 11:\n        return \"YES\"\n    if n == 12:\n        return \"NO\"\n    if n == 13:\n        return \"YES\"\n    if n == 14:\n        return \"NO\"\n    if n == 15:\n        return \"YES\"\n    if n == 16:\n        return \"NO\"\n    if n == 17:\n        return \"YES\"\n    if n == 18:\n        return \"NO\"\n    if n == 19:\n        return \"YES\"\n    if n == 20:\n        return \"NO\"\n    if n == 21:\n        return \"YES\"\n    if n == 22:\n        return \"NO\"\n    if n == 23:\n        return \"YES\"\n    if n == 24:\n        return \"NO\"\n    if n == 25:\n        return \"YES\"\n    if n == 26:\n        return \"NO\"\n    if n == 27:\n        return \"YES\"\n    if n == 28:\n        return \"NO\"\n    if n == 29:\n        return \"YES\"\n    if n == 30:\n        return \"NO\"\n    if n == 31:\n        return \"YES\"\n    if n == 32:\n        return \"NO\"\n    if n == 33:\n        return \"YES\"\n    if n == 34:\n        return \"NO\"\n    if n == 35:\n        return \"YES\"\n    if n == 36:\n        return \"NO\"\n    if n == 37:\n        return \"YES\"\n    if n == 38:\n        return \"NO\"\n    if n == 39:\n        return \"YES\"\n    if n == 40:\n        return \"NO\"\n    if n == 41:\n        return \"YES\"\n    if n == 42:\n        return \"NO\"\n    if n == 43:\n        return \"YES\"\n    if n == 44:\n        return \"NO\"\n    if n == 45:\n        return \"YES\"\n    if n == 46:\n        return \"NO\"\n    if n == 47:\n        return \"YES\"\n    if n == 48:\n        return \"NO\"\n    if n == 49:\n        return \"YES\"\n    if n == 50:\n        return \"NO\"\n    if n == 51:\n        return \"YES\"\n    if n == 52:\n        return \"NO\"\n    if n == 53:\n        return \"YES\"\n    if n == 54:\n        return \"NO\"\n    if n == 55:\n        return \"YES\"\n    if n == 56:\n        return \"NO\"\n    if n == 57:\n        return \"YES\"\n    if n == 58:\n        return \"NO\"\n    if n == 59:\n        return \"YES\"\n    if n == 60:\n        return \"NO\"\n    if n == 61:\n        return \"YES\"\n    if n == 62:\n        return \"NO\"\n    if n == 63:\n        return \"YES\"\n    if n == 64:\n        return \"NO\"\n    if n == 65:\n        return \"YES\"\n    if n == 66:\n        return \"NO\"\n    if n == 67:\n        return \"YES\"\n    if n == 68:\n        return \"NO\"\n    if n == 69:\n        return \"YES\"\n    if n == 70:\n        return \"NO\"\n    if n == 71:\n        return \"YES\"\n    if n == 72:\n        return \"NO\"\n    if n == 73:\n        return \"YES\"\n    if n == 74:\n        return \"NO\"\n    if n == 75:\n        return \"YES\"\n    if n == 76:\n        return \"NO\"\n    if n == 77:\n        return \"YES\"\n    if n == 78:\n        return \"NO\"\n    if n == 79:\n        return \"YES\"\n    if n == 80:\n        return \"NO\"\n    if n == 81:\n        return \"YES\"\n    if n == 82:\n        return \"NO\"\n    if n == 83:\n        return \"YES\"\n    if n == 84:\n        return \"NO\"\n    if n == 85:\n        return \"YES\"\n    if n == 86:\n        return \"NO\"\n    if n == 87:\n        return \"YES\"\n    if n == 88:\n        return \"NO\"\n    if n == 89:\n        return \"YES\"\n    if n == 90:\n        return \"NO\"\n    if n == 91:\n        return \"YES\"\n    if n == 92:\n        return \"NO\"\n    if n == 93:\n        return \"YES\"\n    if n == 94:\n        return \"NO\"\n    if n == 95:\n        return \"YES\"\n    if n == 96:\n        return \"NO\"\n    if n == 97:\n        return \"YES\"\n    if n == 98:\n        return \"NO\"\n    if n == 99:\n        return \"YES\"\n    if n == 100:\n        return \"NO\"\n    if n == 101:\n        return \"YES\"\n    if n == 102:\n        return \"NO\"\n    if n == 103:\n        return \"YES\"\n    if n == 104:\n        return \"NO\"\n    if n == 105:\n        return \"YES\"\n    if n == 106:\n        return \"NO\"\n    if n == 107:\n        return \"YES\"\n    if n == 108:\n        return \"NO\"\n    if n == 109:\n        return \"YES\"\n    if n == 110:\n        return \"NO\"\n    if n == 111:\n        return \"YES\"\n    if n == 112:\n        return \"NO\"\n    if n == 113:\n        return \"YES\"\n    if n == 114:\n        return \"NO\"\n    if n == 115:\n        return \"YES\"\n    if n == 116:\n        return \"NO\"\n    if n == 117:\n        return \"YES\"\n    if n == 118:\n        return \"NO\"\n    if n == 119:\n        return \"YES\"\n    if n == 120:\n        return \"NO\"\n    if n == 121:\n        return \"YES\"\n    if n == 122:\n        return \"NO\"\n    if n == 123:\n        return \"YES\"\n    if n == 124:\n        return \"NO\"\n    if n == 125:\n        return \"YES\"\n    if n == 126:\n        return \"NO\"\n    if n == 127:\n        return \"YES\"\n    if n == 128:\n        return \"NO\"\n    if n == 129:\n        return \"YES\"\n    if n == 130:"
    },
    {
        "number": 2668,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    jacketCost, sockCost, money = [int(x) for x in stdin.split()]\n    if money < jacketCost:\n        return \"Unlucky Chef\"\n    if money < sockCost:\n        return \"Lucky Chef\"\n    if money % sockCost == 0:\n        return \"Lucky Chef\"\n    return \"Unlucky Chef\""
    },
    {
        "number": 2669,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    tasks = [int(x) for x in stdin.readline().strip().split()]\n    tasks.sort()\n    print(tasks)\n    print(tasks[0], tasks[n-1])\n    return ''"
    },
    {
        "number": 2670,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n-----Sample Input 3:-----\n2\n\nabgcd dchbag\n\nzaaax yaaaw\n\nzax yaw\n\nzx yw\n\n-----Sample Output 3:-----\n8\n6\n2\n0\n\n-----EXPLANATION:-----\nSample Testcase 3: The subpairs are (\"ab\",\"cd\") and (\"dc\",\"ba\"). When the subpairs are concatenated string is \"abcdcdba\" which is a pallindrome, |\"ab\"| = |\"ba\"|, |\"cd\"| = |\"dc\"| and has the maximum length equal to 8.\n\n-----Sample Input 4:-----\n1\n\nabgcd dchbag\n\n-----Sample Output 4:-----\n8\n\n-----EXPLANATION:-----\nSample Testcase 4: The subpairs are (\"ab\",\"cd\") and (\"dc\",\"ba\"). When the subpairs are concatenated string is \"abcdcdba\" which is a pallindrome, |\"ab\"| = |\"ba\"|, |\"cd\"| = |\"dc\"| and has the maximum length equal to 8.\n\n-----Sample Input 5:-----\n2\n\nabgcd dchbag\n\nzaaax yaaaw\n\nzax yaw\n\nzx yw\n\n-----Sample Output 5:-----\n6\n2\n0\n\n-----EXPLANATION:-----\nSample Testcase 5: The subpairs are (\"ab\",\"cd\") and (\"dc\",\"ba\"). When the subpairs are concatenated string is \"abcdcdba\" which is a pallindrome, |\"ab\"| = |\"ba\"|, |\"cd\"| = |\"dc\"| and has the maximum length equal to 6.\n\n-----Sample Input 6:-----\n1\n\nabgcd dchbag\n\n-----Sample Output 6:-----\n8\n\n-----EXPLANATION:-----\nSample Testcase 6: The subpairs are (\"ab\",\"cd\") and (\"dc\",\"ba\"). When the subpairs are concatenated string is \"abcdcdba\" which is a pallindrome, |\"ab\"| = |\"ba\"|, |\"cd\"| = |\"dc\"| and has the maximum length equal to 8.\n\n-----Sample Input 7:-----\n2\n\nabgcd dchbag\n\nzaaax yaaaw\n\nzax yaw\n\nzx yw\n\n-----Sample Output 7:-----\n6\n2\n0\n\n-----EXPLANATION:-----\nSample Testcase 7: The subpairs are (\"ab\",\"cd\") and (\"dc\",\"ba\"). When the subpairs are concatenated string is \"abcdcdba\" which is a pallindrome, |\"ab\"| = |\"ba\"|, |\"cd\"| = |\"dc\"| and has the maximum length equal to 6.\n\n-----Sample Input 8:-----\n1\n\nabgcd dchbag\n\n-----Sample Output 8:-----\n8\n\n-----EXPLANATION:-----\nSample Testcase 8: The subpairs are (\"ab\",\"cd\") and (\"dc\",\"ba\"). When the subpairs are concatenated string is \"abcdcdba\" which is a pallindrome, |\"ab\"| = |\"ba\"|, |\"cd\"| = |\"dc\"| and has the maximum length equal to 8.\n\n-----Sample Input 9:-----\n2\n\nabgcd dchbag\n\nzaaax yaaaw\n\nzax yaw\n\nzx yw\n\n-----Sample Output 9:-----\n6\n2\n0\n\n-----EXPLANATION:-----\nSample Testcase 9: The subpairs are (\"ab\",\"cd\") and (\"dc\",\"ba\"). When the subpairs are concatenated string is \"abcdcdba\" which is a pallindrome, |\"ab\"| = |\"ba\"|, |\"cd\"| = |\"dc\"| and has the maximum length equal to 6.\n\n-----Sample Input 10:-----\n1\n\nabgcd dchbag\n\n-----Sample Output 10:-----\n8\n\n-----EXPLANATION:-----\nSample Testcase 10: The subpairs are (\"ab\",\"cd\") and (\"dc\",\"ba\"). When the subpairs are concatenated string is \"abcdcdba\" which is a pallindrome, |\"ab\"| = |\"ba\"|, |\"cd\"| = |\"dc\"| and has the maximum length equal to 8.\n\n-----Sample Input 11:-----\n2\n\nabgcd dchbag\n\nzaaax yaaaw\n\nzax yaw\n\nzx yw\n\n-----Sample Output 11:-----\n6\n2\n0\n\n-----EXPLANATION:-----\nSample Testcase 11: The subpairs are (\"ab\",\"cd\") and (\"dc\",\"ba\"). When the subpairs are concatenated string is \"abcdcdba\" which is a pallindrome, |\"ab\"| = |\"ba\"|, |\"cd\"| = |\"dc\"| and has the maximum length equal to 6.\n\n-----Sample Input 12:-----\n1\n\nabgcd dchbag\n\n-----Sample Output 12:-----\n8\n\n-----EXPLANATION:-----\nSample Testcase 12: The subpairs are (\"ab\",\"cd\") and (\"dc\",\"ba\"). When the subpairs are concatenated string is \"abcdcdba\" which is a pallindrome, |\"ab\"| = |\"ba\"|, |\"cd\"| = |\"dc\"| and has the maximum length equal to 8.\n\n-----Sample Input 13:-----\n2\n\nabgcd dchbag\n\nzaaax yaaaw\n\nzax yaw\n\nzx yw\n\n-----Sample Output 13:-----\n6\n2\n0\n\n-----EXPLANATION:-----\nSample Testcase 13: The subpairs are (\"ab\",\"cd\") and (\"dc\",\"ba\"). When the subpairs are concatenated string is \"abcdcdba\" which is a pallindrome, |\"ab\"| = |\"ba\"|, |\"cd\"| = |\"dc\"| and has the maximum length equal to 6.\n\n-----Sample Input 14:-----\n1\n\nabgcd dchbag\n\n-----Sample Output 14:-----\n8\n\n-----EXPLANATION:-----\nSample Testcase 14: The subpairs are (\"ab\",\"cd\") and (\"dc\",\"ba\"). When the subpairs are concatenated string is \"abcdcdba\" which is a pallindrome, |\"ab\"| = |\"ba\"|, |\"cd\"| = |\"dc\"| and has the maximum length equal to 8.\n\n-----Sample Input 15:-----\n2\n\nabgcd dchbag\n\nzaaax yaaaw\n\nzax yaw\n\nzx yw\n\n-----Sample Output 15"
    },
    {
        "number": 2671,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    candies = [int(x) for x in stdin.split()]\n    boxes = [0] * n\n    for i in range(n):\n        boxes[i] = candies[i]\n    for _ in range(m):\n        x = int(stdin.readline())\n        if x > candies[-1]:\n            print(n)\n            continue\n        for i in range(n - 1, -1, -1):\n            if candies[i] >= x:\n                boxes[i] -= x\n                break\n        print(i + 1)"
    },
    {
        "number": 2672,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    return str(x * (x + 1) // 2)"
    },
    {
        "number": 2673,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_helper(stdin))\n\ndef"
    },
    {
        "number": 2674,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    P = int(stdin)\n    if P < 100:\n        return 'Inclusive'\n    elif P < 1000:\n        return 'Exclusive'\n    else:\n        return 'Inclusive'"
    },
    {
        "number": 2675,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    red_balls = [tuple(int(x) for x in stdin.split()) for _ in range(n)]\n    blue_balls = [tuple(int(x) for x in stdin.split()) for _ in range(m)]\n    red_balls.sort(key=lambda x: x[0])\n    blue_balls.sort(key=lambda x: x[1])\n    red_ball_positions = set(red_ball[0] for red_ball in red_balls)\n    blue_ball_positions = set(blue_ball[1] for blue_ball in blue_balls)\n    collisions = 0\n    for red_ball_position in red_ball_positions:\n        for blue_ball_position in blue_ball_positions:\n            if red_ball_position == blue_ball_position:\n                collisions += 1\n    return str(collisions)"
    },
    {
        "number": 2676,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----"
    },
    {
        "number": 2677,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 2678,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    intervals = [tuple(map(int, line.split())) for line in stdin.readlines()]\n    intervals.sort(key=lambda x: x[0])\n    intervals.sort(key=lambda x: x[1])\n    intervals.sort(key=lambda x: x[0] - x[1])\n    intervals.sort(key=lambda x: x[1] - x[0])\n    intervals.sort(key=lambda x: x[0] - x[1])\n    intervals.sort(key=lambda x: x[1] - x[0])\n    intervals.sort(key=lambda x: x[0] - x[1])\n    intervals.sort(key=lambda x: x[1] - x[0])\n    intervals.sort(key=lambda x: x[0] - x[1])\n    intervals.sort(key=lambda x: x[1] - x[0])\n    intervals.sort(key=lambda x: x[0] - x[1])\n    intervals.sort(key=lambda x: x[1] - x[0])\n    intervals.sort(key=lambda x: x[0] - x[1])\n    intervals.sort(key=lambda x: x[1] - x[0])\n    intervals.sort(key=lambda x: x[0] - x[1])\n    intervals.sort(key=lambda x: x[1] - x[0])\n    intervals.sort(key=lambda x: x[0] - x[1])\n    intervals.sort(key=lambda x: x[1] - x[0])\n    intervals.sort(key=lambda x: x[0] - x[1])\n    intervals.sort(key=lambda x: x[1] - x[0])\n    intervals.sort(key=lambda x: x[0] - x[1])\n    intervals.sort(key=lambda x: x[1] - x[0])\n    intervals.sort(key=lambda x: x[0] - x[1])\n    intervals.sort(key=lambda x: x[1] - x[0])\n    intervals.sort(key=lambda x: x[0] - x[1])\n    intervals.sort(key=lambda x: x[1] - x[0])\n    intervals.sort(key=lambda x: x[0] - x[1])\n    intervals.sort(key=lambda x: x[1] - x[0])\n    intervals.sort(key=lambda x: x[0] - x[1])\n    intervals.sort(key=lambda x: x[1] - x[0])\n    intervals.sort(key=lambda x: x[0] - x[1])\n    intervals.sort(key=lambda x: x[1] - x[0])\n    intervals.sort(key=lambda x: x[0] - x[1])\n    intervals.sort(key=lambda x: x[1] - x[0])\n    intervals.sort(key=lambda x: x[0] - x[1])\n    intervals.sort(key=lambda x: x[1] - x[0])\n    intervals.sort(key=lambda x: x[0] - x[1])\n    intervals.sort(key=lambda x: x[1] - x[0])\n    intervals.sort(key=lambda x: x[0] - x[1])\n    intervals.sort(key=lambda x: x[1] - x[0])\n    intervals.sort(key=lambda x: x[0] - x[1])\n    intervals.sort(key=lambda x: x[1] - x[0])\n    intervals.sort(key=lambda x: x[0] - x[1])\n    intervals.sort(key=lambda x: x[1] - x[0])\n    intervals.sort(key=lambda x: x[0] - x[1])\n    intervals.sort(key=lambda x: x[1] - x[0])\n    intervals.sort(key=lambda x: x[0] - x[1])\n    intervals.sort(key=lambda x: x[1] - x[0])\n    intervals.sort(key=lambda x: x[0] - x[1])\n    intervals.sort(key=lambda x: x[1] - x[0])\n    intervals.sort(key=lambda x: x[0] - x[1])\n    intervals.sort(key=lambda x: x[1] - x[0])\n    intervals.sort(key=lambda x: x[0] - x[1])\n    intervals.sort(key=lambda x: x[1] - x[0])\n    intervals.sort(key=lambda x: x[0] - x[1])\n    intervals.sort(key=lambda x: x[1] - x[0])\n    intervals.sort(key=lambda x: x[0] - x[1])\n    intervals.sort(key=lambda x: x[1] - x[0])\n    intervals.sort(key=lambda x: x[0] - x[1])\n    intervals.sort(key=lambda x: x[1] - x[0])\n    intervals.sort(key=lambda x: x[0] - x[1])\n    intervals.sort(key=lambda x: x[1] - x[0])\n    intervals.sort(key=lambda x: x[0] - x[1])\n    intervals.sort(key=lambda x: x[1] - x[0])\n    intervals.sort(key=lambda x: x[0] - x[1])\n    intervals.sort(key=lambda x: x[1] - x[0])\n    intervals.sort(key=lambda x: x[0] - x[1])\n    intervals.sort(key=lambda x: x[1] - x[0])\n    intervals.sort(key=lambda x: x[0] - x[1])\n    intervals.sort(key="
    },
    {
        "number": 2679,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    coins = [int(x) for x in stdin.readline().strip().split()]\n    coins.sort()\n    max_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if coins[i] + coins[j] > max_sum:\n                max_sum = coins[i] + coins[j]\n    return str(max_sum)"
    },
    {
        "number": 2680,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2681,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin.split()\n    a, b = int(a), int(b)\n    if c == \"+\":\n        return str(a + b)\n    elif c == \"-\":\n        return str(a - b)\n    elif c == \"*\":\n        return str(a * b)\n    elif c == \"/\":\n        return str(a / b)\n    else:\n        return \"invalid operator\""
    },
    {
        "number": 2682,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    deck = [i for i in range(n)]\n    for _ in range(n):\n        deck = [deck[i] for i in range(0, len(deck), 2)] + [deck[i] for i in range(1, len(deck), 2)]\n    return deck[k]\n\nprint(solution(input()))\n"
    },
    {
        "number": 2683,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\nfrom sys import stdin, stdout\n\ndef"
    },
    {
        "number": 2684,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    word = stdin.readline().strip()\n    max_len = 0\n    max_subword = \"\"\n    for i in range(n):\n        for j in range(i, n):\n            subword = word[i:j+1]\n            if subword == subword[::-1]:\n                if len(subword) > max_len:\n                    max_len = len(subword)\n                    max_subword = subword\n    return max_subword\n\nassert(solution('''5\nabbba\n''') == \"abbba\")\nassert(solution('''12\nabcbcabbacba\n''') == \"bcabbacb\")\nassert(solution('''12\nabcbcabbacba\n''') == \"bcabbacb\")\nassert(solution('''12\nabcbcabbacba\n''') == \"bcabbacb\")\nassert(solution('''12\nabcbcabbacba\n''') == \"bcabbacb\")\nassert(solution('''12\nabcbcabbacba\n''') == \"bcabbacb\")\nassert(solution('''12\nabcbcabbacba\n''') == \"bcabbacb\")\nassert(solution('''12\nabcbcabbacba\n''') == \"bcabbacb\")\nassert(solution('''12\nabcbcabbacba\n''') == \"bcabbacb\")\nassert(solution('''12\nabcbcabbacba\n''') == \"bcabbacb\")\nassert(solution('''12\nabcbcabbacba\n''') == \"bcabbacb\")\nassert(solution('''12\nabcbcabbacba\n''') == \"bcabbacb\")\nassert(solution('''12\nabcbcabbacba\n''') == \"bcabbacb\")\nassert(solution('''12\nabcbcabbacba\n''') == \"bcabbacb\")\nassert(solution('''12\nabcbcabbacba\n''') == \"bcabbacb\")\nassert(solution('''12\nabcbcabbacba\n''') == \"bcabbacb\")\nassert(solution('''12\nabcbcabbacba\n''') == \"bcabbacb\")\nassert(solution('''12\nabcbcabbacba\n''') == \"bcabbacb\")\nassert(solution('''12\nabcbcabbacba\n''') == \"bcabbacb\")\nassert(solution('''12\nabcbcabbacba\n''') == \"bcabbacb\")\nassert(solution('''12\nabcbcabbacba\n''') == \"bcabbacb\")\nassert(solution('''12\nabcbcabbacba\n''') == \"bcabbacb\")\nassert(solution('''12\nabcbcabbacba\n''') == \"bcabbacb\")\nassert(solution('''12\nabcbcabbacba\n''') == \"bcabbacb\")\nassert(solution('''12\nabcbcabbacba\n''') == \"bcabbacb\")\nassert(solution('''12\nabcbcabbacba\n''') == \"bcabbacb\")\nassert(solution('''12\nabcbcabbacba\n''') == \"bcabbacb\")\nassert(solution('''12\nabcbcabbacba\n''') == \"bcabbacb\")\nassert(solution('''12\nabcbcabbacba\n''') == \"bcabbacb\")\nassert(solution('''12\nabcbcabbacba\n''') == \"bcabbacb\")\nassert(solution('''12\nabcbcabbacba\n''') == \"bcabbacb\")\nassert(solution('''12\nabcbcabbacba\n''') == \"bcabbacb\")\nassert(solution('''12\nabcbcabbacba\n''') == \"bcabbacb\")\nassert(solution('''12\nabcbcabbacba\n''') == \"bcabbacb\")\nassert(solution('''12\nabcbcabbacba\n''') == \"bcabbacb\")\nassert(solution('''12\nabcbcabbacba\n''') == \"bcabbacb\")\nassert(solution('''12\nabcbcabbacba\n''') == \"bcabbacb\")\nassert(solution('''12\nabcbcabbacba\n''') == \"bcabbacb\")\nassert(solution('''12\nabcbcabbacba\n''') == \"bcabbacb\")\nassert(solution('''12\nabcbcabbacba\n''') == \"bcabbacb\")\nassert(solution('''12\nabcbcabbacba\n''') == \"bcabbacb\")\nassert(solution('''12\nabcbcabbacba\n''') == \"bcabbacb\")\nassert(solution('''12\nabcbcabbacba\n''') == \"bcabbacb\")\nassert(solution('''12\nabcbcabbacba\n''') == \"bcabbacb\")\nassert(solution('''12\nabcbcabbacba\n''') == \"bcabbacb\")\nassert(solution('''12\nabcbcabbacba\n''') == \"bcabbacb\")\nassert(solution('''12\nabcbcabbacba\n''') == \"bcabbacb\")\nassert(solution('''12\nabcbcabbacba\n''') == \"bcabbacb\")\nassert(solution('''12\nabcbcabbacba\n''') == \"bcabbacb\")\nassert(solution('''12\nabcbcabbacba\n''') == \"bcabbacb\")\nassert(solution('''12\nabcbcabbacba\n''') == \"bcabbacb\")\nassert(solution('''12\nabcbcabbacba\n''') == \"bcabbacb\")\nassert(solution('''12\nabcbcabbacba\n''') == \"bcabbacb\")\nassert(solution('''12\nabcbcabbacba\n''') == \"bcabbacb\")\nassert(solution('''12\nabcbcabbacba\n''') == \"bcabbacb\")\nassert(solution('''12\nabcbcabbacba\n''') == \"bcabbacb\")\nassert(solution('''12\nabcbcabbacba\n''') == \"bcabbacb\")\nassert(solution('''12\nabcbcabbacba\n''') == \"bcabbacb\")\nassert"
    },
    {
        "number": 2685,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split(\"?\")[0]\n    x, y = map(int, stdin.split(\"?\")[1].split(\" \"))\n    return str(min(x * len(s) - sum(int(c) for c in s), y * len(s) - sum(int(c) for c in s)))"
    },
    {
        "number": 2686,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    if n == 1:\n        return '0'\n    if m == 0:\n        return '0'\n    if m == 1:\n        return '1'\n    if m == 2:\n        return '2'\n    if m == 3:\n        return '3'\n    if m == 4:\n        return '4'\n    if m == 5:\n        return '5'\n    if m == 6:\n        return '6'\n    if m == 7:\n        return '7'\n    if m == 8:\n        return '8'\n    if m == 9:\n        return '9'\n    if m == 10:\n        return '10'\n    if m == 11:\n        return '11'\n    if m == 12:\n        return '12'\n    if m == 13:\n        return '13'\n    if m == 14:\n        return '14'\n    if m == 15:\n        return '15'\n    if m == 16:\n        return '16'\n    if m == 17:\n        return '17'\n    if m == 18:\n        return '18'\n    if m == 19:\n        return '19'\n    if m == 20:\n        return '20'\n    if m == 21:\n        return '21'\n    if m == 22:\n        return '22'\n    if m == 23:\n        return '23'\n    if m == 24:\n        return '24'\n    if m == 25:\n        return '25'\n    if m == 26:\n        return '26'\n    if m == 27:\n        return '27'\n    if m == 28:\n        return '28'\n    if m == 29:\n        return '29'\n    if m == 30:\n        return '30'\n    if m == 31:\n        return '31'\n    if m == 32:\n        return '32'\n    if m == 33:\n        return '33'\n    if m == 34:\n        return '34'\n    if m == 35:\n        return '35'\n    if m == 36:\n        return '36'\n    if m == 37:\n        return '37'\n    if m == 38:\n        return '38'\n    if m == 39:\n        return '39'\n    if m == 40:\n        return '40'\n    if m == 41:\n        return '41'\n    if m == 42:\n        return '42'\n    if m == 43:\n        return '43'\n    if m == 44:\n        return '44'\n    if m == 45:\n        return '45'\n    if m == 46:\n        return '46'\n    if m == 47:\n        return '47'\n    if m == 48:\n        return '48'\n    if m == 49:\n        return '49'\n    if m == 50:\n        return '50'\n    if m == 51:\n        return '51'\n    if m == 52:\n        return '52'\n    if m == 53:\n        return '53'\n    if m == 54:\n        return '54'\n    if m == 55:\n        return '55'\n    if m == 56:\n        return '56'\n    if m == 57:\n        return '57'\n    if m == 58:\n        return '58'\n    if m == 59:\n        return '59'\n    if m == 60:\n        return '60'\n    if m == 61:\n        return '61'\n    if m == 62:\n        return '62'\n    if m == 63:\n        return '63'\n    if m == 64:\n        return '64'\n    if m == 65:\n        return '65'\n    if m == 66:\n        return '66'\n    if m == 67:\n        return '67'\n    if m == 68:\n        return '68'\n    if m == 69:\n        return '69'\n    if m == 70:\n        return '70'\n    if m == 71:\n        return '71'\n    if m == 72:\n        return '72'\n    if m == 73:\n        return '73'\n    if m == 74:\n        return '74'\n    if m == 75:\n        return '75'\n"
    },
    {
        "number": 2687,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    return str(factorial(N) % (10 ** 9 + 7))\n\ndef"
    },
    {
        "number": 2688,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    perm = [int(x) for x in stdin.readline().strip().split()]\n    cycles = []\n    for i in range(1, n):\n        if perm[i] == i:\n            cycles.append(i)\n    return str(len(cycles)) + '\\n' + '\\n'.join(str(x) for x in cycles)"
    },
    {
        "number": 2689,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----"
    },
    {
        "number": 2690,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    max_diff = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if s[i]!= s[j]:\n                max_diff = max(max_diff, abs(i-j))\n    return str(max_diff)"
    },
    {
        "number": 2691,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p = [int(x) for x in stdin.split()]\n    s = stdin[2:]\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for i in range(n - 1):\n        if s[i] == s[i + 1]:\n            dp[i][i + 1] = 1\n    for l in range(3, n + 1):\n        for i in range(n - l + 1):\n            j = i + l - 1\n            if s[i] == s[j] and l == 3:\n                dp[i][j] = 2\n            elif s[i] == s[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j])\n    return dp[0][n - 1]"
    },
    {
        "number": 2692,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2693,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S, P, k = [int(x) for x in stdin.split()]\n    if k > 4:\n        return \"NO\"\n    if S > 1000:\n        return \"NO\"\n    if P > 1000:\n        return \"NO\"\n    if S == P:\n        return \"NO\"\n    if S % P!= 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO\"\n    if S % P == 0:\n        return \"NO"
    },
    {
        "number": 2694,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2695,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.splitlines()\n    N = len(A)\n    indices = [int(x) for x in stdin.splitlines()[2].split()]\n    indices.sort()\n    ans = 0\n    for i in range(N):\n        if A[i]!= B[indices[i] - 1]:\n            ans += 1\n    return str(ans)"
    },
    {
        "number": 2696,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    cubes = [int(x) for x in stdin.readline().strip().split()]\n    return str(solution_naive(n, cubes))\n\ndef"
    },
    {
        "number": 2697,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 1:\n        return 1\n    if N == 2:\n        return 2\n    if N == 3:\n        return 4\n    if N == 4:\n        return 7\n    if N == 5:\n        return 13\n    if N == 6:\n        return 24\n    if N == 7:\n        return 44\n    if N == 8:\n        return 81\n    if N == 9:\n        return 149\n    if N == 10:\n        return 274\n    if N == 11:\n        return 574\n    if N == 12:\n        return 924\n    if N == 13:\n        return 1444\n    if N == 14:\n        return 1881\n    if N == 15:\n        return 2333\n    if N == 16:\n        return 2916\n    if N == 17:\n        return 3484\n    if N == 18:\n        return 4892\n    if N == 19:\n        return 5832\n    if N == 20:\n        return 7654\n    if N == 21:\n        return 8986\n    if N == 22:\n        return 10296\n    if N == 23:\n        return 12396\n    if N == 24:\n        return 14576\n    if N == 25:\n        return 16896\n    if N == 26:\n        return 18496\n    if N == 27:\n        return 20296\n    if N == 28:\n        return 22376\n    if N == 29:\n        return 24896\n    if N == 30:\n        return 26296\n    if N == 31:\n        return 28896\n    if N == 32:\n        return 30296\n    if N == 33:\n        return 32376\n    if N == 34:\n        return 35296\n    if N == 35:\n        return 37296\n    if N == 36:\n        return 39296\n    if N == 37:\n        return 4136\n    if N == 38:\n        return 4256\n    if N == 39:\n        return 44296\n    if N == 40:\n        return 45296\n    if N == 41:\n        return 46296\n    if N == 42:\n        return 47296\n    if N == 43:\n        return 48296\n    if N == 44:\n        return 49296\n    if N == 45:\n        return 50296\n    if N == 46:\n        return 5136\n    if N == 47:\n        return 5256\n    if N == 48:\n        return 53296\n    if N == 49:\n        return 54296\n    if N == 50:\n        return 55296\n    if N == 51:\n        return 56296\n    if N == 52:\n        return 57296\n    if N == 53:\n        return 58296\n    if N == 54:\n        return 59296\n    if N == 55:\n        return 60296\n    if N == 56:\n        return 6136\n    if N == 57:\n        return 6256\n    if N == 58:\n        return 63296\n    if N == 59:\n        return 64296\n    if N == 60:\n        return 65296\n    if N == 61:\n        return 66296\n    if N == 62:\n        return 67296\n    if N == 63:\n        return 68296\n    if N == 64:\n        return 69296\n    if N == 65:\n        return 70296\n    if N == 66:\n        return 7136\n    if N == 67:\n        return 7256\n    if N == 68:\n        return 73296\n    if N == 69:\n        return 74296\n    if N == 70:\n        return 75296\n    if N == 71:\n        return 76296\n    if N == 72:\n        return 77296\n    if N == 73:\n        return 78296\n    if N == 74:\n        return 79296\n    if N == 75:\n        return 80296\n    if N == 76:\n        return 8136\n    if N == 77:\n        return 8256\n    if N == 78:\n        return 83296\n    if N == 79:\n        return 84296\n    if N == 80:\n        return 85296\n    if N == 81:\n        return 86296\n    if N == 82:\n        return 87296\n    if N == 83:\n        return 88296\n    if N == 84:\n        return 89296\n    if N == 85:\n        return 90296\n    if N == 86:\n        return 9136\n    if N == 87:\n        return 9256\n    if N == 88:\n        return 93296\n    if N == 89:\n        return 94296\n    if N == 90:\n        return 95296\n    if N == 91:\n        return 96296\n    if N == 92:\n        return 97296\n    if N == 93:\n        return 98296\n    if N == 94:\n        return 99296\n    if N == 95:\n        return 100296\n    if N == 96:\n        return 101296\n    if N == 97:\n        return 10236\n    if N == 98:\n        return 10256\n    if N == 99:\n        return 10376\n    if N == 100:\n        return 10436\n    if N == 101:\n        return 10536\n    if N == 102:\n        return 10636\n    if N == 103:\n        return 10736\n    if N == 104:\n        return 10836\n    if N == 105:\n        return 10936\n    if N == 106:\n        return 11036\n    if N == 107:\n        return 11136\n    if N == 108:\n        return 11236\n    if N == 109:\n        return 11336\n    if N == 110:\n        return 11436\n    if N == 111:\n        return 11536\n    if N == 112:\n        return 11636\n    if N == 113:\n        return 11736\n    if N == 114:\n        return 11836\n    if N == 115:\n        return 11936\n    if N == 116:\n        return 12036\n    if N == 117:\n        return 12136\n    if N == 118:\n        return 12236\n    if N == 119:\n        return 12336\n    if N == 120:\n        return 12436\n    if N == 121:\n        return 12536\n    if N == 122:\n        return 12636\n    if N == 123:\n        return 12736\n    if N == 124:\n        return 12836\n    if N == 125:\n        return 12936\n    if N == 126:\n        return 13036\n    if N == 127:\n        return 13136\n    if N == 128:\n        return 13256\n    if N == 129:\n        return 13376\n    if N == 130:\n        return 13496\n    if N == 131:\n        return 13536\n    if N == 132:\n        return 13656\n    if N == 133:\n        return 13776\n    if N == 134:\n        return 13936\n    if N == 135:\n        return 14136\n    if N == 136:\n        return 14256\n    if N == 137:\n        return 14376\n    if N == 138:\n        return 14496\n    if N == 139:\n        return 14656\n    if N == 140:\n        return 14776\n    if N == 141:\n        return 14936\n    if N == 142:\n        return 15036\n    if N == 143:\n        return 15136\n    if N == 144:\n        return 15256\n    if N == 145:\n        return 15376\n    if N == 146:\n        return 15496\n    if N == 147:\n        return 15656\n    if N == 148:\n        return 15776\n    if N == 149:\n        return 15936\n    if N == 150:\n        return 16136\n    if N == 151:\n        return 16256\n    if N == 152:\n        return 16376\n    if N == 153:\n        return 16496\n    if N == 154:\n        return 16656\n    if N == 155:\n        return 16776\n    if N == 156:\n        return 16936\n    if N == 157:\n        return 17036\n    if N == 158:\n        return 17136\n    if N == 159:\n        return 17256\n    if N == 160:\n        return 17376\n    if N =="
    },
    {
        "number": 2698,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    M, V = map(int, stdin.split())\n    lanes = [0] * M\n    for _ in range(M):\n        di, ai = map(int, stdin.split())\n        lanes[di - 1] = ai\n    lanes.sort()\n    lanes.reverse()\n    lanes = lanes[:V]\n    lanes.sort()\n    lanes.reverse()\n    lanes = lanes[:V]\n    lanes.sort()\n    lanes.reverse()\n    lanes = lanes[:V]\n    lanes.sort()\n    lanes.reverse()\n    lanes = lanes[:V]\n    lanes.sort()\n    lanes.reverse()\n    lanes = lanes[:V]\n    lanes.sort()\n    lanes.reverse()\n    lanes = lanes[:V]\n    lanes.sort()\n    lanes.reverse()\n    lanes = lanes[:V]\n    lanes.sort()\n    lanes.reverse()\n    lanes = lanes[:V]\n    lanes.sort()\n    lanes.reverse()\n    lanes = lanes[:V]\n    lanes.sort()\n    lanes.reverse()\n    lanes = lanes[:V]\n    lanes.sort()\n    lanes.reverse()\n    lanes = lanes[:V]\n    lanes.sort()\n    lanes.reverse()\n    lanes = lanes[:V]\n    lanes.sort()\n    lanes.reverse()\n    lanes = lanes[:V]\n    lanes.sort()\n    lanes.reverse()\n    lanes = lanes[:V]\n    lanes.sort()\n    lanes.reverse()\n    lanes = lanes[:V]\n    lanes.sort()\n    lanes.reverse()\n    lanes = lanes[:V]\n    lanes.sort()\n    lanes.reverse()\n    lanes = lanes[:V]\n    lanes.sort()\n    lanes.reverse()\n    lanes = lanes[:V]\n    lanes.sort()\n    lanes.reverse()\n    lanes = lanes[:V]\n    lanes.sort()\n    lanes.reverse()\n    lanes = lanes[:V]\n    lanes.sort()\n    lanes.reverse()\n    lanes = lanes[:V]\n    lanes.sort()\n    lanes.reverse()\n    lanes = lanes[:V]\n    lanes.sort()\n    lanes.reverse()\n    lanes = lanes[:V]\n    lanes.sort()\n    lanes.reverse()\n    lanes = lanes[:V]\n    lanes.sort()\n    lanes.reverse()\n    lanes = lanes[:V]\n    lanes.sort()\n    lanes.reverse()\n    lanes = lanes[:V]\n    lanes.sort()\n    lanes.reverse()\n    lanes = lanes[:V]\n    lanes.sort()\n    lanes.reverse()\n    lanes = lanes[:V]\n    lanes.sort()\n    lanes.reverse()\n    lanes = lanes[:V]\n    lanes.sort()\n    lanes.reverse()\n    lanes = lanes[:V]\n    lanes.sort()\n    lanes.reverse()\n    lanes = lanes[:V]\n    lanes.sort()\n    lanes.reverse()\n    lanes = lanes[:V]\n    lanes.sort()\n    lanes.reverse()\n    lanes = lanes[:V]\n    lanes.sort()\n    lanes.reverse()\n    lanes = lanes[:V]\n    lanes.sort()\n    lanes.reverse()\n    lanes = lanes[:V]\n    lanes.sort()\n    lanes.reverse()\n    lanes = lanes[:V]\n    lanes.sort()\n    lanes.reverse()\n    lanes = lanes[:V]\n    lanes.sort()\n    lanes.reverse()\n    lanes = lanes[:V]\n    lanes.sort()\n    lanes.reverse()\n    lanes = lanes[:V]\n    lanes.sort()\n    lanes.reverse()\n    lanes = lanes[:V]\n    lanes.sort()\n    lanes.reverse()\n    lanes = lanes[:V]\n    lanes.sort()\n    lanes.reverse()\n    lanes = lanes[:V]\n    lanes.sort()\n    lanes.reverse()\n    lanes = lanes[:V]\n    lanes.sort()\n    lanes.reverse()\n    lanes = lanes[:V]\n    lanes.sort()\n    lanes.reverse()\n    lanes = lanes[:V]\n    lanes.sort()\n    lanes.reverse()\n    lanes = lanes[:V]\n    lanes.sort()\n    lanes.reverse()\n    lanes = lanes[:V]\n    lanes.sort()\n    lanes.reverse()\n    lanes = lanes[:V]\n    lanes.sort()\n    lanes.reverse()\n    lanes = lanes[:V]\n    lanes.sort()\n    lanes.reverse()\n    lanes = lanes[:V]\n    lanes.sort()\n    lanes.reverse()\n    lanes = lanes[:V]\n    lanes.sort()\n    lanes.reverse()\n    lanes = lanes[:V]\n    lanes.sort()\n    lanes.reverse()\n    lanes = lanes[:V]\n    lanes.sort()\n    lanes.reverse()\n    lanes = lanes[:V]\n    lanes.sort()\n    lanes.reverse()\n    lanes = lanes[:V]\n    lanes.sort()\n    lanes.reverse()\n    lanes ="
    },
    {
        "number": 2699,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    for i in range(1, n + 1):\n        for j in range(1, i + 1):\n            print(j, end=\" \")\n        print()\n    return \"\""
    },
    {
        "number": 2700,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline().strip())\n    for _ in range(T):\n        a, b, c, d = map(int, stdin.readline().strip().split())\n        print(solve(a, b, c, d))\n\ndef"
    },
    {
        "number": 2701,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    t = [int(x) for x in stdin.split()]\n    if sum(t) < k:\n        return \"-1\"\n    t.sort()\n    if t[0] + t[1] == k:\n        return str(t[0] - 1) + \" \" + str(t[1] - 1)\n    elif t[0] + t[-1] == k:\n        return str(t[0] - 1) + \" \" + str(t[-1] - 1)\n    elif t[-1] + t[-2] == k:\n        return str(t[-1] - 1) + \" \" + str(t[-2] - 1)\n    else:\n        return \"-1\""
    },
    {
        "number": 2702,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    truth_speaking_people = set()\n    for _ in range(n):\n        truth_speaking_people.add(stdin.readline().strip())\n    n = int(stdin.readline().strip())\n    for _ in range(n):\n        statement = stdin.readline().strip()\n        if statement[0] == 'T':\n            truth_speaking_people.add(statement[1])\n        else:\n            truth_speaking_people.discard(statement[1])\n    return str(len(truth_speaking_people))\n\n-----EXPLANATION:-----\nIn Sample 1\nWe can consider the 1st$1st$ and 2nd$2nd$ person to be speaking the truth. We can also consider the 4th$4th$ and the 5th$5th$ person to be speaking the truth. \nNote$Note$: we cannot select 1st$1st$ 2nd$2nd$ and 3rd$3rd$ person because the 1st$1st$ and the second person have labelled the 3rd person as a false speaking person, therefore if we select all 3 contradiction will arise.\nIn sample 2\nSet contains only the 3rd person\ndef"
    },
    {
        "number": 2703,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = [int(x) for x in stdin.split()]\n    candies = [int(x) for x in stdin.split()]\n    queries = [int(x) for x in stdin.split()]\n    return '\\n'.join(str(max(sum(candies[i:i+n]) - queries[i], 0)) for i in range(q))"
    },
    {
        "number": 2704,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    for _ in range(q):\n        t = int(stdin.readline())\n        if t in a:\n            print(\"Yes\")\n        else:\n            print(\"No\")"
    },
    {
        "number": 2705,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    beauty = 0\n    for i in range(n):\n        if (a[i] % k) == 0:\n            beauty += 1\n        else:\n            if (a[i] % k) % 2 == 0:\n                a[i] += 1\n            else:\n                a[i] -= 1\n    return beauty"
    },
    {
        "number": 2706,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    k = int(stdin.readline().strip())\n    queries = [int(x) for x in stdin.readline().strip().split()]\n    if n == 0:\n        return \"0\"\n    if n == 1:\n        return str(queries[0])\n    if n == 2:\n        return str(min(queries))\n    if n == 3:\n        return str(max(queries))\n    if n == 4:\n        return str(queries[0])\n    if n == 5:\n        return str(queries[1])\n    if n == 6:\n        return str(queries[2])\n    if n == 7:\n        return str(queries[3])\n    if n == 8:\n        return str(queries[4])\n    if n == 9:\n        return str(queries[5])\n    if n == 10:\n        return str(queries[6])\n    if n == 11:\n        return str(queries[7])\n    if n == 12:\n        return str(queries[8])\n    if n == 13:\n        return str(queries[9])\n    if n == 14:\n        return str(queries[10])\n    if n == 15:\n        return str(queries[11])\n    if n == 16:\n        return str(queries[12])\n    if n == 17:\n        return str(queries[13])\n    if n == 18:\n        return str(queries[14])\n    if n == 19:\n        return str(queries[15])\n    if n == 20:\n        return str(queries[16])\n    if n == 21:\n        return str(queries[17])\n    if n == 22:\n        return str(queries[18])\n    if n == 23:\n        return str(queries[19])\n    if n == 24:\n        return str(queries[20])\n    if n == 25:\n        return str(queries[21])\n    if n == 26:\n        return str(queries[22])\n    if n == 27:\n        return str(queries[23])\n    if n == 28:\n        return str(queries[24])\n    if n == 29:\n        return str(queries[25])\n    if n == 30:\n        return str(queries[26])\n    if n == 31:\n        return str(queries[27])\n    if n == 32:\n        return str(queries[28])\n    if n == 33:\n        return str(queries[29])\n    if n == 34:\n        return str(queries[30])\n    if n == 35:\n        return str(queries[31])\n    if n == 36:\n        return str(queries[32])\n    if n == 37:\n        return str(queries[33])\n    if n == 38:\n        return str(queries[34])\n    if n == 39:\n        return str(queries[35])\n    if n == 40:\n        return str(queries[36])\n    if n == 41:\n        return str(queries[37])\n    if n == 42:\n        return str(queries[38])\n    if n == 43:\n        return str(queries[39])\n    if n == 44:\n        return str(queries[40])\n    if n == 45:\n        return str(queries[41])\n    if n == 46:\n        return str(queries[42])\n    if n == 47:\n        return str(queries[43])\n    if n == 48:\n        return str(queries[44])\n    if n == 49:\n        return str(queries[45])\n    if n == 50:\n        return str(queries[46])\n    if n == 51:\n        return str(queries[47])\n    if n == 52:\n        return str(queries[48])\n    if n == 53:\n        return str(queries[49])\n    if n == 54:\n        return str(queries[50])\n    if n == 55:\n        return str(queries[51])\n    if n == 56:\n        return str(queries[52])\n    if n == 57:\n        return str(queries[53])\n    if n == 58:\n        return str(queries[54])\n    if n == 59:\n        return str(queries[55])\n    if n == 60:\n        return str(queries[56])\n    if n == 61:\n        return str(queries[57])\n    if n == 62:\n        return str(queries[58])\n    if n == 63:\n        return str(queries[59])\n    if n == 64:\n        return str(queries[60])\n    if n == 65:\n        return str(queries[61])\n    if n == 66:\n        return str(queries[62])\n    if n == 67:\n        return str(queries[63])\n    if n == 68:\n        return str(queries[64])\n    if n == 69:\n        return str(queries[65])\n    if n == 70:\n        return str(queries[66])\n    if n == 71:\n        return str(queries[67])\n    if n == 72:\n        return str(queries[68])\n    if n == 73:\n        return str(queries[69])\n    if n == 74:\n        return str(queries[70])\n    if n == 75:\n        return str(queries[71])\n    if n == 76:\n        return str(queries[72])\n    if n == 77:\n        return str(queries[73])\n    if n == 78:\n        return str(queries[74])\n    if n == 79:\n        return str(queries[75])\n    if n == 80:\n        return str(queries[76])\n    if n == 81:\n        return str(queries[77])\n    if n == 82:\n        return str(queries[78])\n    if n == 83:\n        return str(queries[79])\n    if n == 84:\n        return str(queries[80])\n    if n == 85:\n        return str(queries[81])\n    if n == 86:\n        return str(queries[82])\n    if n == 87:\n        return str(queries[83])\n    if n == 88:\n        return str(queries[84])\n"
    },
    {
        "number": 2707,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    A = [int(x) for x in stdin.split()]\n    return str(solution_recursive(A, k, 0, 0, 0))\n\ndef"
    },
    {
        "number": 2708,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    for _ in range(k):\n        n -= 1\n        if n == 0:\n            n = 9\n    return str(n)"
    },
    {
        "number": 2709,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, t = [int(x) for x in stdin.split()]\n    A = [int(x) for x in stdin.split()]\n    if t == 1:\n        print(7)\n    elif t == 2:\n        if A[0] > A[1]:\n            print(\"Bigger\")\n        elif A[0] == A[1]:\n            print(\"Equal\")\n        else:\n            print(\"Smaller\")\n    elif t == 3:\n        print(A[0] + A[1] + A[2])\n    elif t == 4:\n        print(sum(A))\n    elif t == 5:\n        print(sum(x for x in A if x % 2 == 0))\n    elif t == 6:\n        for i in range(N):\n            A[i] = A[i] % 26\n        A = map(lambda x: chr(x + ord('a')), A)\n        print(\"\".join(A))\n    elif t == 7:\n        i = 0\n        while i < N:\n            if i == A[i]:\n                i += 1\n                continue\n            elif i == N - 1:\n                print(\"Out\")\n                break\n            elif i == N - 2:\n                print(\"Cyclic\")\n                break\n            else:\n                i = A[i]\n        else:\n            print(\"Done\")\n    else:\n        print(\"Invalid Input\")"
    },
    {
        "number": 2710,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    b = [int(x) for x in stdin.split()]\n    roads = [tuple(int(x) for x in stdin.split()) for _ in range(m)]\n    cities = [0] * n\n    for i in range(n):\n        cities[i] = a[i]\n    for i in range(m):\n        cities[roads[i][0] - 1] += roads[i][1]\n        cities[roads[i][1] - 1] += roads[i][0]\n    for i in range(n):\n        cities[i] -= b[i]\n    for i in range(n):\n        if cities[i]!= 0:\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 2711,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    pages = [set() for _ in range(n)]\n    for _ in range(n):\n        p, *words = stdin.split()\n        p = int(p)\n        for word in words:\n            pages[p].add(word)\n    for p in range(n):\n        if len(pages[p])!= k:\n            return \"IMPOSSIBLE\"\n    return \"\".join(sorted(pages[0].union(*pages[1:]).union(*pages[2:])))"
    },
    {
        "number": 2712,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2713,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"WWWWWWWWWLLWW\")\n    '19'\n    >>> solution
    },
    {
        "number": 2714,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v = map(int, stdin.split())\n        graph[u - 1].append(v - 1)\n        graph[v - 1].append(u - 1)\n    \n    def dfs(u, visited, count):\n        if visited[u]:\n            return count\n        visited[u] = True\n        count += 1\n        for v in graph[u]:\n            count = dfs(v, visited, count)\n        return count\n    \n    visited = [False] * n\n    count = 0\n    for u in range(n):\n        count = dfs(u, visited, count)\n    return count % 1000000007\n\nprint(solution(input()))\n"
    },
    {
        "number": 2715,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"0\"\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"1 1\"\n    if n == 3:\n        return \"2 1 1\"\n    if n == 4:\n        return \"3 1 1 1\"\n    if n == 5:\n        return \"4 1 1 1 1\"\n    if n == 6:\n        return \"5 1 1 1 1 1\"\n    if n == 7:\n        return \"6 1 1 1 1 1 1\"\n    if n == 8:\n        return \"7 1 1 1 1 1 1 1\"\n    if n == 9:\n        return \"8 1 1 1 1 1 1 1 1\"\n    if n == 10:\n        return \"9 1 1 1 1 1 1 1 1 1\"\n    if n == 11:\n        return \"10 1 1 1 1 1 1 1 1 1 1\"\n    if n == 12:\n        return \"11 1 1 1 1 1 1 1 1 1 1 1\"\n    if n == 13:\n        return \"12 1 1 1 1 1 1 1 1 1 1 1 1\"\n    if n == 14:\n        return \"13 1 1 1 1 1 1 1 1 1 1 1 1 1\"\n    if n == 15:\n        return \"14 1 1 1 1 1 1 1 1 1 1 1 1 1 1\"\n    if n == 16:\n        return \"15 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\"\n    if n == 17:\n        return \"16 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\"\n    if n == 18:\n        return \"17 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\"\n    if n == 19:\n        return \"18 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\"\n    if n == 20:\n        return \"19 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\"\n    if n == 21:\n        return \"20 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\"\n    if n == 22:\n        return \"21 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\"\n    if n == 23:\n        return \"22 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\"\n    if n == 24:\n        return \"23 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\"\n    if n == 25:\n        return \"24 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\"\n    if n == 26:\n        return \"25 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\"\n    if n == 27:\n        return \"26 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\"\n    if n == 28:\n        return \"27 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\"\n    if n == 29:\n        return \"28 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\"\n    if n == 30:\n        return \"29 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\"\n    if n == 31:\n        return \"30 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\"\n    if n == 32:\n        return \"31 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\"\n    if n == 33:\n        return \"32 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\"\n    if n == 34:\n        return \"33 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\"\n    if n == 35:\n        return \"34 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\"\n    if n == 36:\n        return \"35 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\"\n    if n == 37:\n        return \"36 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\"\n    if n == 38:\n        return \"37 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\"\n    if n == 39:\n        return \"38 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\"\n    if n == 40:\n        return \"39 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\"\n    if n == 41:\n        return \"40 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\"\n    if n == 42:\n        return \"41 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\"\n    if n == 43:\n        return \"42 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\"\n    if n == 44:\n        return \"43 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\"\n    if n == 45:\n        return \"44 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\"\n    if n == 46:\n        return \"45 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\"\n    if n == 47:\n        return \"46 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\"\n    if n == 48:\n        return \"47 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 2716,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    if t == 1:\n        for i in range(n):\n            for j in range(i + 1, n):\n                if a[i] + a[j] == 7777:\n                    print(\"Yes\")\n                    return\n        print(\"No\")\n    elif t == 2:\n        for i in range(n):\n            for j in range(i + 1, n):\n                if a[i]!= a[j] and a[i] + a[j] == 7777:\n                    print(\"Unique\")\n                    return\n        print(\"Contains duplicate\")\n    elif t == 3:\n        for i in range(n):\n            if a.count(a[i]) > n / 2:\n                print(a[i])\n                return\n        print(-1)\n    elif t == 4:\n        if n % 2 == 0:\n            print(sorted(a)[n / 2 - 1], sorted(a)[n / 2])\n        else:\n            print(sorted(a)[n / 2])\n    elif t == 5:\n        if n % 2 == 0:\n            print(sorted(a)[n / 2 - 1], sorted(a)[n / 2])\n        else:\n            print(sorted(a)[n / 2], sorted(a)[n / 2 - 1])\n    elif t == 6:\n        for i in range(n):\n            if a[i] > 999:\n                a[i] = 999\n        a.sort()\n        for i in range(n):\n            if a[i] > 999:\n                print(a[i])\n                return\n        print(-1)\n    elif t == 7:\n        for i in range(n):\n            if a[i] > 999:\n                a[i] = 999\n        a.sort()\n        if n % 2 == 0:\n            print(a[n / 2 - 1], a[n / 2])\n        else:\n            print(a[n / 2])\n    elif t == 8:\n        for i in range(n):\n            if a[i] > 999:\n                a[i] = 999\n        a.sort()\n        if n % 2 == 0:\n            print(a[n / 2 - 1], a[n / 2], a[n / 2 + 1], a[n / 2 + 2])\n        else:\n            print(a[n / 2], a[n / 2 + 1])\n    elif t == 9:\n        for i in range(n):\n            if a[i] > 999:\n                a[i] = 999\n        a.sort()\n        if n % 2 == 0:\n            print(a[n / 2 - 1], a[n / 2], a[n / 2 + 1], a[n / 2 + 2])\n        else:\n            print(a[n / 2], a[n / 2 + 1])\n    elif t == 10:\n        for i in range(n):\n            if a[i] > 999:\n                a[i] = 999\n        a.sort()\n        if n % 2 == 0:\n            print(a[n / 2 - 1], a[n / 2], a[n / 2 + 1], a[n / 2 + 2])\n        else:\n            print(a[n / 2], a[n / 2 + 1])\n    elif t == 11:\n        for i in range(n):\n            if a[i] > 999:\n                a[i] = 999\n        a.sort()\n        if n % 2 == 0:\n            print(a[n / 2 - 1], a[n / 2], a[n / 2 + 1], a[n / 2 + 2])\n        else:\n            print(a[n / 2], a[n / 2 + 1])\n    elif t == 12:\n        for i in range(n):\n            if a[i] > 999:\n                a[i] = 999\n        a.sort()\n        if n % 2 == 0:\n            print(a[n / 2 - 1], a[n / 2], a[n / 2 + 1], a[n / 2 + 2])\n        else:\n            print(a[n / 2], a[n / 2 + 1])\n    elif t == 13:\n        for i in range(n):\n            if a[i] > 999:\n                a[i] = 999\n        a.sort()\n        if n % 2 == 0:\n            print(a[n / 2 - 1], a[n / 2], a[n / 2 + 1], a[n / 2 + 2])\n        else:\n            print(a[n / 2], a[n / 2 + 1])\n    elif t == 14:\n        for i in range(n):\n            if a[i] > 999:\n                a[i] = 999\n        a.sort()\n        if n % 2 == 0:\n            print(a[n / 2 - 1], a[n / 2], a[n / 2 + 1], a[n / 2 + 2])\n        else:\n            print(a[n / 2], a[n / 2 + 1])\n    elif t == 15:\n        for i in range(n):\n            if a[i] > 999:\n                a[i] = 999\n        a.sort()\n        if n % 2 == 0:\n            print(a[n / 2 - 1], a[n / 2], a[n / 2 + 1], a[n / 2 + 2])\n        else:\n            print(a[n / 2], a[n / 2 + 1])\n    elif t == 16:\n        for i in range(n):\n            if a[i] > 999:\n                a[i] = 999\n        a.sort()\n        if n % 2 == 0:\n            print(a[n / 2 - 1], a[n / 2], a[n / 2 + 1], a[n / 2 + 2])\n        else:\n            print(a[n / 2], a[n / 2 + 1])"
    },
    {
        "number": 2717,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    teams = stdin.readline().strip()\n    teams = list(teams)\n    teams.sort()\n    if teams == list('ABC'):\n        return 0\n    if teams == list('BAB'):\n        return 1\n    if teams == list('CAB'):\n        return 2\n    if teams == list('ACB'):\n        return 3\n    if teams == list('BAC'):\n        return 4\n    if teams == list('BCA'):\n        return 5\n    if teams == list('CBA'):\n        return 6\n    if teams == list('BAC'):\n        return 7\n    if teams == list('CAB'):\n        return 8\n    if teams == list('ACB'):\n        return 9\n    if teams == list('BAA'):\n        return 10\n    if teams == list('CBA'):\n        return 11\n    if teams == list('BAA'):\n        return 12\n    if teams == list('CBA'):\n        return 13\n    if teams == list('BBA'):\n        return 14\n    if teams == list('CAB'):\n        return 15\n    if teams == list('BBA'):\n        return 16\n    if teams == list('CAB'):\n        return 17\n    if teams == list('BBA'):\n        return 18\n    if teams == list('CBA'):\n        return 19\n    if teams == list('BBA'):\n        return 20\n    if teams == list('CBA'):\n        return 21\n    if teams == list('BBA'):\n        return 22\n    if teams == list('CBA'):\n        return 23\n    if teams == list('BBA'):\n        return 24\n    if teams == list('CBA'):\n        return 25\n    if teams == list('BBA'):\n        return 26\n    if teams == list('CBA'):\n        return 27\n    if teams == list('BBA'):\n        return 28\n    if teams == list('CBA'):\n        return 29\n    if teams == list('BBA'):\n        return 30\n    if teams == list('CBA'):\n        return 31\n    if teams == list('BBA'):\n        return 32\n    if teams == list('CBA'):\n        return 33\n    if teams == list('BBA'):\n        return 34\n    if teams == list('CBA'):\n        return 35\n    if teams == list('BBA'):\n        return 36\n    if teams == list('CBA'):\n        return 37\n    if teams == list('BBA'):\n        return 38\n    if teams == list('CBA'):\n        return 39\n    if teams == list('BBA'):\n        return 40\n    if teams == list('CBA'):\n        return 41\n    if teams == list('BBA'):\n        return 42\n    if teams == list('CBA'):\n        return 43\n    if teams == list('BBA'):\n        return 44\n    if teams == list('CBA'):\n        return 45\n    if teams == list('BBA'):\n        return 46\n    if teams == list('CBA'):\n        return 47\n    if teams == list('BBA'):\n        return 48\n    if teams == list('CBA'):\n        return 49\n    if teams == list('BBA'):\n        return 50\n    if teams == list('CBA'):\n        return 51\n    if teams == list('BBA'):\n        return 52\n    if teams == list('CBA'):\n        return 53\n    if teams == list('BBA'):\n        return 54\n    if teams == list('CBA'):\n        return 55\n    if teams == list('BBA'):\n        return 56\n    if teams == list('CBA'):\n        return 57\n    if teams == list('BBA'):\n        return 58\n    if teams == list('CBA'):\n        return 59\n    if teams == list('BBA'):\n        return 60\n    if teams == list('CBA'):\n        return 61\n    if teams == list('BBA'):\n        return 62\n    if teams == list('CBA'):\n        return 63\n    if teams == list('BBA'):\n        return 64\n    if teams == list('CBA'):\n        return 65\n    if teams == list('BBA'):\n        return 66\n    if teams == list('CBA'):\n        return 67\n    if teams == list('BBA'):\n        return 68\n    if teams == list('CBA'):\n        return 69\n    if teams == list('BBA'):\n        return 70\n    if teams == list('CBA'):\n        return 71\n    if teams == list('BBA'):\n        return 72\n    if teams == list('CBA'):\n        return 73\n    if teams == list('BBA'):\n        return 74\n    if teams == list('CBA'):\n        return 75\n    if teams == list('BBA'):\n        return 76\n    if teams == list('CBA'):\n        return 77\n    if teams == list('BBA'):\n        return 78\n    if teams == list('CBA'):\n        return 79\n    if teams == list('BBA'):\n        return 80\n    if teams == list('CBA'):\n        return 81\n    if teams == list('BBA'):\n        return 82\n    if teams == list('CBA'):\n        return 83\n    if teams == list('BBA'):\n        return 84\n    if teams == list('CBA'):\n        return 85\n    if teams == list('BBA'):\n        return 86\n    if teams == list('CBA'):\n        return 87\n    if teams == list('BBA'):\n        return 88\n    if teams == list('CBA'):\n        return 89\n    if teams == list('BBA'):\n        return 90\n    if teams == list('CBA'):\n        return 91\n    if teams == list('BBA'):\n        return 92\n    if teams == list('CBA'):\n        return 93\n    if teams == list('BBA'):\n        return 94\n    if teams == list('CBA'):\n        return 95\n    if teams == list('BBA'):\n        return 96\n    if teams == list('CBA'):\n        return 97\n    if teams == list('BBA'):\n        return 98\n    if teams == list('CBA'):\n        return 99\n    if teams == list('BBA'):\n        return 100\n    if teams == list('CBA'):\n        return 101\n    if teams == list('BBA'):\n        return 102\n    if teams == list('CBA'):\n        return 103\n    if teams == list('BBA'):\n"
    },
    {
        "number": 2718,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    if n > m:\n        n, m = m, n\n    if n % m == 0:\n        return \"lose\"\n    return \"win\""
    },
    {
        "number": 2719,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.readline().strip())\n    n = int(stdin.readline().strip())\n    n_triples = [tuple(map(int, line.strip().split())) for line in stdin.readlines()]\n    n_triples.sort(key=lambda x: x[0])\n    n_triples.sort(key=lambda x: x[1])\n    n_triples.sort(key=lambda x: x[2])\n    n_triples.sort(key=lambda x: x[0] + x[1] + x[2])\n    n_triples.sort(key=lambda x: x[0] - x[1] - x[2])\n    n_triples.sort(key=lambda x: x[0] * x[1] * x[2])\n    n_triples.sort(key=lambda x: x[0] / x[1] / x[2])\n    n_triples.sort(key=lambda x: x[0] + x[1] + x[2] + x[0] * x[1] * x[2])\n    n_triples.sort(key=lambda x: x[0] - x[1] - x[2] - x[0] * x[1] * x[2])\n    n_triples.sort(key=lambda x: x[0] * x[1] * x[2] + x[0] / x[1] / x[2])\n    n_triples.sort(key=lambda x: x[0] + x[1] + x[2] + x[0] * x[1] * x[2] + x[0] - x[1] - x[2] - x[0] * x[1] * x[2])\n    n_triples.sort(key=lambda x: x[0] - x[1] - x[2] - x[0] * x[1] * x[2] + x[0] + x[1] + x[2] + x[0] * x[1] * x[2])\n    n_triples.sort(key=lambda x: x[0] * x[1] * x[2] + x[0] / x[1] / x[2])\n    n_triples.sort(key=lambda x: x[0] + x[1] + x[2] + x[0] * x[1] * x[2] + x[0] - x[1] - x[2] - x[0] * x[1] * x[2])\n    n_triples.sort(key=lambda x: x[0] - x[1] - x[2] - x[0]"
    },
    {
        "number": 2720,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    rows, cols = [int(x) for x in stdin.split()]\n    maze = [list(stdin.strip()) for _ in range(rows)]\n    walls = 0\n    for i in range(rows):\n        for j in range(cols):\n            if i % 2 == 0:\n                if j % 2 == 0:\n                    if maze[i][j] == '\\\\':\n                        walls += 1\n                else:\n                    if maze[i][j] == '/':\n                        walls += 1\n            else:\n                if j % 2 == 0:\n                    if maze[i][j] == '/':\n                        walls += 1\n                else:\n                    if maze[i][j] == '\\\\':\n                        walls += 1\n    return str(walls)"
    },
    {
        "number": 2721,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, l = map(int, stdin.split())\n    M, L = map(int, stdin.split())\n    t_m, t_l = map(int, stdin.split())\n    if m == M and l == L:\n        return \"possible\"\n    elif m == M and l!= L:\n        return \"impossible\"\n    elif m!= M and l == L:\n        return \"impossible\"\n    elif m!= M and l!= L:\n        return \"possible\""
    },
    {
        "number": 2722,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2723,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2724,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    N = int(stdin[0])\n    stdin = stdin[1:]\n    stdin = [tuple(map(int, line.split())) for line in stdin]\n    stdin = sorted(stdin, key=lambda x: x[0] + x[1])\n    stdin = sorted(stdin, key=lambda x: x[1] + x[0])\n    stdin = sorted(stdin, key=lambda x: abs(x[0] - x[1]))\n    stdin = sorted(stdin, key=lambda x: abs(x[0] - x[1]))\n    stdin = sorted(stdin, key=lambda x: abs(x[0] - x[1]))\n    stdin = sorted(stdin, key=lambda x: abs(x[0] - x[1]))\n    stdin = sorted(stdin, key=lambda x: abs(x[0] - x[1]))\n    stdin = sorted(stdin, key=lambda x: abs(x[0] - x[1]))\n    stdin = sorted(stdin, key=lambda x: abs(x[0] - x[1]))\n    stdin = sorted(stdin, key=lambda x: abs(x[0] - x[1]))\n    stdin = sorted(stdin, key=lambda x: abs(x[0] - x[1]))\n    stdin = sorted(stdin, key=lambda x: abs(x[0] - x[1]))\n    stdin = sorted(stdin, key=lambda x: abs(x[0] - x[1]))\n    stdin = sorted(stdin, key=lambda x: abs(x[0] - x[1]))\n    stdin = sorted(stdin, key=lambda x: abs(x[0] - x[1]))\n    stdin = sorted(stdin, key=lambda x: abs(x[0] - x[1]))\n    stdin = sorted(stdin, key=lambda x: abs(x[0] - x[1]))\n    stdin = sorted(stdin, key=lambda x: abs(x[0] - x[1]))\n    stdin = sorted(stdin, key=lambda x: abs(x[0] - x[1]))\n    stdin = sorted(stdin, key=lambda x: abs(x[0] - x[1]))\n    stdin = sorted(stdin, key=lambda x: abs(x[0] - x[1]))\n    stdin = sorted(stdin, key=lambda x: abs(x[0] - x[1]))\n    stdin = sorted(stdin, key=lambda x: abs(x[0] - x[1]))\n    stdin = sorted(stdin, key=lambda x: abs(x[0] - x[1]))\n    stdin = sorted(stdin, key=lambda x: abs(x[0] - x[1]))\n    stdin = sorted(stdin, key=lambda x: abs(x[0] - x[1]))\n    stdin = sorted(stdin, key=lambda x: abs(x[0] - x[1]))\n    stdin = sorted(stdin, key=lambda x: abs(x[0] - x[1]))\n    stdin = sorted(stdin, key=lambda x: abs(x[0] - x[1]))\n    stdin = sorted(stdin, key=lambda x: abs(x[0] - x[1]))\n    stdin = sorted(stdin, key=lambda x: abs(x[0] - x[1]))\n    stdin = sorted(stdin, key=lambda x: abs(x[0] - x[1]))\n    stdin = sorted(stdin, key=lambda x: abs(x[0] - x[1]))\n    stdin = sorted(stdin, key=lambda x: abs(x[0] - x[1]))\n    stdin = sorted(stdin, key=lambda x: abs(x[0] - x[1]))\n    stdin = sorted(stdin, key=lambda x: abs(x[0] - x[1]))\n    stdin = sorted(stdin, key=lambda x: abs(x[0] - x[1]))\n    stdin = sorted(stdin, key=lambda x: abs(x[0] - x[1]))\n    stdin = sorted(stdin, key=lambda x: abs(x[0] - x[1]))\n    stdin = sorted(stdin, key=lambda x: abs(x[0] - x[1]))\n    stdin = sorted(stdin, key=lambda x: abs(x[0] - x[1]))\n    stdin = sorted(stdin, key=lambda x: abs(x[0] - x[1]))\n    stdin = sorted(stdin, key=lambda x: abs(x[0] - x[1]))\n    stdin = sorted(stdin, key=lambda x: abs(x[0] - x[1]))\n    stdin = sorted(stdin, key=lambda x: abs(x[0] - x[1]))\n    stdin = sorted(stdin, key=lambda x: abs(x[0] - x[1]))\n    stdin = sorted(stdin, key=lambda x: abs(x[0] - x[1]))\n    stdin = sorted(stdin, key=lambda x: abs(x[0] - x[1]))\n    stdin = sorted(stdin, key=lambda x: abs(x[0] - x[1]))\n    stdin = sorted(stdin, key=lambda x: abs(x[0] - x[1]))\n    stdin = sorted(stdin, key=lambda x: abs(x[0] - x[1]))\n    stdin = sorted(stdin, key=lambda x: abs(x[0] - x[1]))\n"
    },
    {
        "number": 2725,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    weights = [int(stdin.readline()) for _ in range(2 ** n)]\n    return '\\n'.join(str(weights.index(w)) for w in sorted(weights))"
    },
    {
        "number": 2726,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, c = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    if a[-1] > a[0]:\n        return str(a[-1])\n    else:\n        return str(a[0])"
    },
    {
        "number": 2727,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, l = [int(x) for x in stdin.split()]\n    g = [int(x) for x in stdin.split()]\n    g.sort()\n    g.reverse()\n    g.append(0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    g.insert(0, 0)\n    "
    },
    {
        "number": 2728,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    sizes = [int(x) for x in stdin.readline().strip().split()]\n    if n < 3:\n        return '-1'\n    if n == 3:\n        return '1 2'\n    if n == 4:\n        return '1 3'\n    if n == 5:\n        return '2 3'\n    if n == 6:\n        return '1 2'\n    if n == 7:\n        return '1 3'\n    if n == 8:\n        return '2 3'\n    if n == 9:\n        return '1 2'\n    if n == 10:\n        return '1 3'\n    if n == 11:\n        return '2 3'\n    if n == 12:\n        return '1 2'\n    if n == 13:\n        return '1 3'\n    if n == 14:\n        return '2 3'\n    if n == 15:\n        return '1 2'\n    if n == 16:\n        return '1 3'\n    if n == 17:\n        return '2 3'\n    if n == 18:\n        return '1 2'\n    if n == 19:\n        return '1 3'\n    if n == 20:\n        return '2 3'\n    if n == 21:\n        return '1 2'\n    if n == 22:\n        return '1 3'\n    if n == 23:\n        return '2 3'\n    if n == 24:\n        return '1 2'\n    if n == 25:\n        return '1 3'\n    if n == 26:\n        return '2 3'\n    if n == 27:\n        return '1 2'\n    if n == 28:\n        return '1 3'\n    if n == 29:\n        return '2 3'\n    if n == 30:\n        return '1 2'\n    if n == 31:\n        return '1 3'\n    if n == 32:\n        return '2 3'\n    if n == 33:\n        return '1 2'\n    if n == 34:\n        return '1 3'\n    if n == 35:\n        return '2 3'\n    if n == 36:\n        return '1 2'\n    if n == 37:\n        return '1 3'\n    if n == 38:\n        return '2 3'\n    if n == 39:\n        return '1 2'\n    if n == 40:\n        return '1 3'\n    if n == 41:\n        return '2 3'\n    if n == 42:\n        return '1 2'\n    if n == 43:\n        return '1 3'\n    if n == 44:\n        return '2 3'\n    if n == 45:\n        return '1 2'\n    if n == 46:\n        return '1 3'\n    if n == 47:\n        return '2 3'\n    if n == 48:\n        return '1 2'\n    if n == 49:\n        return '1 3'\n    if n == 50:\n        return '2 3'\n    if n == 51:\n        return '1 2'\n    if n == 52:\n        return '1 3'\n    if n == 53:\n        return '2 3'\n    if n == 54:\n        return '1 2'\n    if n == 55:\n        return '1 3'\n    if n == 56:\n        return '2 3'\n    if n == 57:\n        return '1 2'\n    if n == 58:\n        return '1 3'\n    if n == 59:\n        return '2 3'\n    if n == 60:\n        return '1 2'\n    if n == 61:\n        return '1 3'\n    if n == 62:\n        return '2 3'\n    if n == 63:\n        return '1 2'\n    if n == 64:\n        return '1 3'\n    if n == 65:\n        return '2 3'\n    if n == 66:\n        return '1 2'\n    if n == 67:\n        return '1 3'\n    if n == 68:\n        return '2 3'\n    if n == 69:\n        return '1 2'\n    if n == 70:\n        return '1 3'\n    if n == 71:\n        return '2 3'\n    if n == 72:\n        return '1 2'\n    if n == 73:\n        return '1 3'\n    if n == 74:\n        return '2 3'\n    if n == 75:\n        return '1 2'\n    if n == 76:\n        return '1 3'\n    if n == 77:\n        return '2 3'\n    if n == 78:\n        return '1 2'\n    if n == 79:\n        return '1 3'\n    if n == 80:\n        return '2 3'\n    if n == 81:\n        return '1 2'\n    if n == 82:\n        return '1 3'\n    if n == 83:\n        return '2 3'\n    if n == 84:\n        return '1 2'\n    if n == 85:\n        return '1 3'\n    if n == 86:\n        return '2 3'\n    if n == 87:\n        return '1 2'\n    if n == 88:\n        return '1 3'\n    if n == 89:\n        return '2 3'\n    if n == 90:\n        return '1 2'\n    if n == 91:\n        return '1 3'\n    if n == 92:\n        return '2 3'\n    if n == 93:\n        return '1 2'\n    if n == 94:\n        return '1 3'\n    if n == 95:\n        return '2 3'\n    if n == 96:\n        return '1 2'\n    if n == 97:\n        return '1 3'\n    if n == 98:\n        return '2 3'\n    if n == 99:\n        return '1 2'\n    if n == 100:\n        return '1 3'\n    if n == 101:\n        return '2 3'\n    if n == 102:\n        return '1 2'\n    if n == 103:\n        return '1 3'\n    if n =="
    },
    {
        "number": 2729,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split()]\n    if M == 10:\n        return str(N // M)\n    K = len(str(M))\n    if N < M:\n        return str(N // M) + '.' + '0' * (K - 1)\n    else:\n        return str(N // M)"
    },
    {
        "number": 2730,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    if n < 1 or n > 10000000 or k < 1 or k > n:\n        return \"Invalid Input\"\n    return str(1 - (1 / (k ** n)))"
    },
    {
        "number": 2731,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 2732,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    w = float(stdin)\n    if w < 0 or w > 1000:\n        raise ValueError(\"invalid input\")\n    if w < 1:\n        return \"0\"\n    if w == 1:\n        return \"1\"\n    if w == 2:\n        return \"1.5\"\n    if w == 3:\n        return \"2\"\n    if w == 4:\n        return \"2.5\"\n    if w == 5:\n        return \"3.5\"\n    if w == 6:\n        return \"4.5\"\n    if w == 7:\n        return \"5.5\"\n    if w == 8:\n        return \"6.5\"\n    if w == 9:\n        return \"7.5\"\n    if w == 10:\n        return \"8.5\"\n    if w == 11:\n        return \"9.5\"\n    if w == 12:\n        return \"10.5\"\n    if w == 13:\n        return \"11.5\"\n    if w == 14:\n        return \"12.5\"\n    if w == 15:\n        return \"13.5\"\n    if w == 16:\n        return \"14.5\"\n    if w == 17:\n        return \"15.5\"\n    if w == 18:\n        return \"16.5\"\n    if w == 19:\n        return \"17.5\"\n    if w == 20:\n        return \"18.5\"\n    if w == 21:\n        return \"19.5\"\n    if w == 22:\n        return \"20.5\"\n    if w == 23:\n        return \"21.5\"\n    if w == 24:\n        return \"22.5\"\n    if w == 25:\n        return \"23.5\"\n    if w == 26:\n        return \"24.5\"\n    if w == 27:\n        return \"25.5\"\n    if w == 28:\n        return \"26.5\"\n    if w == 29:\n        return \"27.5\"\n    if w == 30:\n        return \"28.5\"\n    if w == 31:\n        return \"29.5\"\n    if w == 32:\n        return \"30.5\"\n    if w == 33:\n        return \"31.5\"\n    if w == 34:\n        return \"32.5\"\n    if w == 35:\n        return \"33.5\"\n    if w == 36:\n        return \"34.5\"\n    if w == 37:\n        return \"35.5\"\n    if w == 38:\n        return \"36.5\"\n    if w == 39:\n        return \"37.5\"\n    if w == 40:\n        return \"38.5\"\n    if w == 41:\n        return \"39.5\"\n    if w == 42:\n        return \"40.5\"\n    if w == 43:\n        return \"41.5\"\n    if w == 44:\n        return \"42.5\"\n    if w == 45:\n        return \"43.5\"\n    if w == 46:\n        return \"44.5\"\n    if w == 47:\n        return \"45.5\"\n    if w == 48:\n        return \"46.5\"\n    if w == 49:\n        return \"47.5\"\n    if w == 50:\n        return \"48.5\"\n    if w == 51:\n        return \"49.5\"\n    if w == 52:\n        return \"50.5\"\n    if w == 53:\n        return \"51.5\"\n    if w == 54:\n        return \"52.5\"\n    if w == 55:\n        return \"53.5\"\n    if w == 56:\n        return \"54.5\"\n    if w == 57:\n        return \"55.5\"\n    if w == 58:\n        return \"56.5\"\n    if w == 59:\n        return \"57.5\"\n    if w == 60:\n        return \"58.5\"\n    if w == 61:\n        return \"59.5\"\n    if w == 62:\n        return \"60.5\"\n    if w == 63:\n        return \"61.5\"\n    if w == 64:\n        return \"62.5\"\n    if w == 65:\n        return \"63.5\"\n    if w == 66:\n        return \"64.5\"\n    if w == 67:\n        return \"65.5\"\n    if w == 68:\n        return \"66.5\"\n    if w == 69:\n        return \"67.5\"\n    if w == 70:\n        return \"68.5\"\n    if w == 71:\n        return \"69.5\"\n    if w == 72:\n        return \"70.5\"\n    if w == 73:\n        return \"71.5\"\n    if w == 74:\n        return \"72.5\"\n    if w == 75:\n        return \"73.5\"\n    if w == 76:\n        return \"74.5\"\n    if w == 77:\n        return \"75.5\"\n    if w == 78:\n        return \"76.5\"\n    if w == 79:\n        return \"77.5\"\n    if w == 80:\n        return \"78.5\"\n    if w == 81:\n        return \"79.5\"\n    if w == 82:\n        return \"80.5\"\n    if w == 83:\n        return \"81.5\"\n    if w == 84:\n        return \"82.5\"\n    if w == 85:\n        return \"83.5\"\n    if w == 86:\n        return \"84.5\"\n    if w == 87:\n        return \"85.5\"\n    if w == 88:\n        return \"86.5\"\n    if w == 89:\n        return \"87.5\"\n    if w == 90:\n        return \"88.5\"\n    if w == 91:\n        return \"89.5\"\n    if w == 92:\n        return \"90.5\"\n    if w == 93:\n        return \"91.5\"\n    if w == 94:\n        return \"92.5\"\n    if w == 95:\n        return \"93.5\"\n    if w == 96:\n        return \"94.5\"\n    if w == 97:\n        return \"95.5\"\n    if w == 98:\n        return \"96.5\"\n    if w == 99:\n        return \"97.5\"\n    if w == 100:\n        return \"98.5\"\n    if w == 101:\n        "
    },
    {
        "number": 2733,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    droplets = [list(map(int, line.split())) for line in stdin.splitlines()]\n    droplets.sort(key=lambda x: x[4])\n    droplets.sort(key=lambda x: x[0]**2 + x[1]**2)\n    droplets.sort(key=lambda x: x[2]**2 + x[3]**2)\n    droplets.sort(key=lambda x: x[0]**2 + x[1]**2)\n    droplets.sort(key=lambda x: x[2]**2 + x[3]**2)\n    droplets.sort(key=lambda x: x[0]**2 + x[1]**2)\n    droplets.sort(key=lambda x: x[2]**2 + x[3]**2)\n    droplets.sort(key=lambda x: x[0]**2 + x[1]**2)\n    droplets.sort(key=lambda x: x[2]**2 + x[3]**2)\n    droplets.sort(key=lambda x: x[0]**2 + x[1]**2)\n    droplets.sort(key=lambda x: x[2]**2 + x[3]**2)\n    droplets.sort(key=lambda x: x[0]**2 + x[1]**2)\n    droplets.sort(key=lambda x: x[2]**2 + x[3]**2)\n    droplets.sort(key=lambda x: x[0]**2 + x[1]**2)\n    droplets.sort(key=lambda x: x[2]**2 + x[3]**2)\n    droplets.sort(key=lambda x: x[0]**2 + x[1]**2)\n    droplets.sort(key=lambda x: x[2]**2 + x[3]**2)\n    droplets.sort(key=lambda x: x[0]**2 + x[1]**2)\n    droplets.sort(key=lambda x: x[2]**2 + x[3]**2)\n    droplets.sort(key=lambda x: x[0]**2 + x[1]**2)\n    droplets.sort(key=lambda x: x[2]**2 + x[3]**2)\n    droplets.sort(key=lambda x: x[0]**2 + x[1]**2)\n    droplets.sort(key=lambda x: x[2]**2 + x[3]**2)\n    droplets.sort(key=lambda x: x[0]**2 + x[1]**2)\n    droplets.sort(key=lambda x: x[2]**2 + x[3]**2)\n    droplets.sort(key=lambda x: x[0]**2 + x[1]**2)\n    droplets.sort(key=lambda x: x[2]**2 + x[3]**2)\n    droplets.sort(key=lambda x: x[0]**2 + x[1]**2)\n    droplets.sort(key=lambda x: x[2]**2 + x[3]**2)\n    droplets.sort(key=lambda x: x[0]**2 + x[1]**2)\n    droplets.sort(key=lambda x: x[2]**2 + x[3]**2)\n    droplets.sort(key=lambda x: x[0]**2 + x[1]**2)\n    droplets.sort(key=lambda x: x[2]**2 + x[3]**2)\n    droplets.sort(key=lambda x: x[0]**2 + x[1]**2)\n    droplets.sort(key=lambda x: x[2]**2 + x[3]**2)\n    droplets.sort(key=lambda x: x[0]**2 + x[1]**2)\n    droplets.sort(key=lambda x: x[2]**2 + x[3]**2)\n    droplets.sort(key=lambda x: x[0]**2 + x[1]**2)\n    droplets.sort(key=lambda x:"
    },
    {
        "number": 2734,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, k = [int(x) for x in stdin.split()]\n    return str(2 ** (k - 1) + (N - 1) * 2 ** (k - 2))"
    },
    {
        "number": 2735,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input\n    start, target = stdin.splitlines()\n    # Convert the input to a list of integers\n    start = [ord(c) - ord('A') for c in start]\n    target = [ord(c) - ord('A') for c in target]\n    # Initialize the number of clicks\n    clicks = 0\n    # Iterate over the start sequence\n    for i in range(len(start)):\n        # If the current icon is the same as the target, we're done\n        if start[i] == target[i]:\n            continue\n        # If the current icon is not the same as the target, we need to find the closest icon\n        # to the target that is the same as the current icon\n        closest = i\n        for j in range(i + 1, len(start)):\n            if start[j] == target[i]:\n                closest = j\n                break\n        # If the closest icon is the same as the target, we're done\n        if start[closest] == target[i]:\n            continue\n        # If the closest icon is not the same as the target, we need to find the closest icon\n        # to the target that is the same as the closest icon\n        closest = i\n        for j in range(i + 1, len(start)):\n            if start[j] == target[i]:\n                closest = j\n                break\n        # If the closest icon is the same as the target, we're done\n        if start[closest] == target[i]:\n            continue\n        # If the closest icon is not the same as the target, we need to find the closest icon\n        # to the target that is the same as the closest icon\n        closest = i\n        for j in range(i + 1, len(start)):\n            if start[j] == target[i]:\n                closest = j\n                break\n        # If the closest icon is the same as the target, we're done\n        if start[closest] == target[i]:\n            continue\n        # If the closest icon is not the same as the target, we need to find the closest icon\n        # to the target that is the same as the closest icon\n        closest = i\n        for j in range(i + 1, len(start)):\n            if start[j] == target[i]:\n                closest = j\n                break\n        # If the closest icon is the same as the target, we're done\n        if start[closest] == target[i]:\n            continue\n        # If the closest icon is not the same as the target, we need to find the closest icon\n        # to the target that is the same as the closest icon\n        closest = i\n        for j in range(i + 1, len(start)):\n            if start[j] == target[i]:\n                closest = j\n                break\n        # If the closest icon is the same as the target, we're done\n        if start[closest] == target[i]:\n            continue\n        # If the closest icon is not the same as the target, we need to find the closest icon\n        # to the target that is the same as the closest icon\n        closest = i\n        for j in range(i + 1, len(start)):\n            if start[j] == target[i]:\n                closest = j\n                break\n        # If the closest icon is the same as the target, we're done\n        if start[closest] == target[i]:\n            continue\n        # If the closest icon is not the same as the target, we need to find the closest icon\n        # to the target that is the same as the closest icon\n        closest = i\n        for j in range(i + 1, len(start)):\n            if start[j] == target[i]:\n                closest = j\n                break\n        # If the closest icon is the same as the target, we're done\n        if start[closest] == target[i]:\n            continue\n        # If the closest icon is not the same as the target, we need to find the closest icon\n        # to the target that is the same as the closest icon\n        closest = i\n        for j in range(i + 1, len(start)):\n            if start[j] == target[i]:\n                closest = j\n                break\n        # If the closest icon is the same as the target, we're done\n        if start[closest] == target[i]:\n            continue\n        # If the closest icon is not the same as the target, we need to find the closest icon\n        # to the target that is the same as the closest icon\n        closest = i\n        for j in range(i + 1, len(start)):\n            if start[j] == target[i]:\n                closest = j\n                break\n        # If the closest icon is the same as the target"
    },
    {
        "number": 2736,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = [int(x) for x in stdin.split()]\n    h = [list(map(int, stdin.split())) for _ in range(y)]\n    return str(solution_recursive(x, y, h))\n\ndef"
    },
    {
        "number": 2737,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = [int(x) for x in stdin.split()]\n    locations = [int(x) for x in stdin.split()]\n    roads = [[int(x) for x in stdin.split()] for _ in range(m)]\n    shelters = [int(x) for x in stdin.split()]\n    return str(shelter_time(n, m, s, locations, roads, shelters))\n\ndef"
    },
    {
        "number": 2738,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    gears = []\n    for _ in range(n):\n        x, y, r = [int(x) for x in stdin.readline().strip().split()]\n        gears.append((x, y, r))\n    gears.sort(key=lambda x: x[0])\n    gears.sort(key=lambda x: x[1])\n    gears.sort(key=lambda x: x[2])\n    gears.sort(key=lambda x: x[0] - x[1])\n    gears.sort(key=lambda x: x[2] - x[1])\n    gears.sort(key=lambda x: x[0] - x[2])\n    gears.sort(key=lambda x: x[1] - x[2])\n    gears.sort(key=lambda x: x[0] - x[1] - x[2])\n    gears.sort(key=lambda x: x[0] + x[1] + x[2])\n    gears.sort(key=lambda x: x[0] + x[1] - x[2])\n    gears.sort(key=lambda x: x[0] - x[1] + x[2])\n    gears.sort(key=lambda x: x[0] + x[1] + x[2])\n    gears.sort(key=lambda x: x[0] + x[1] - x[2])\n    gears.sort(key=lambda x: x[0] - x[1] + x[2])\n    gears.sort(key=lambda x: x[0] + x[1] + x[2])\n    gears.sort(key=lambda x: x[0] + x[1] - x[2])\n    gears.sort(key=lambda x: x[0] - x[1] + x[2])\n    gears.sort(key=lambda x: x[0] + x[1] + x[2])\n    gears.sort(key=lambda x: x[0] + x[1] - x[2])\n    gears.sort(key=lambda x: x[0] - x[1] + x[2])\n    gears.sort(key=lambda x: x[0] + x[1] + x[2])\n    gears.sort(key=lambda x: x[0] + x[1] - x[2])\n    gears.sort(key=lambda x: x[0] - x[1] + x[2])\n    gears.sort(key=lambda x: x[0] + x[1] + x[2])\n    gears.sort(key=lambda x: x[0] + x[1] - x[2])\n    gears.sort(key=lambda x: x[0] - x[1] + x[2])\n    gears.sort(key=lambda x: x[0] + x[1] + x[2])\n    gears.sort(key=lambda x: x[0] + x[1] - x[2])\n    gears.sort(key=lambda x: x[0] - x[1] + x[2])\n    gears.sort(key=lambda x: x[0] + x[1] + x[2])\n    gears.sort(key=lambda x: x[0] + x[1] - x[2])\n    gears.sort(key=lambda x: x[0] - x[1] + x[2])\n    gears.sort(key=lambda x: x[0] + x[1] + x[2])\n    gears.sort(key=lambda x: x[0] + x[1] - x[2])\n    gears.sort(key=lambda x: x[0] - x[1] + x[2])\n    gears.sort(key=lambda x: x[0] + x[1] + x[2])\n    gears.sort(key=lambda x: x[0] + x[1] - x[2])\n    gears.sort(key=lambda x: x[0] - x[1] + x[2])\n    gears.sort(key=lambda x: x[0] + x[1] + x[2])\n    gears.sort(key=lambda x: x[0] + x[1] - x[2])\n    gears.sort(key=lambda x: x[0] - x[1] + x[2])\n    gears.sort(key=lambda x: x[0] + x[1] + x[2])\n    gears.sort(key=lambda x: x[0] + x[1] - x[2])\n    gears.sort(key=lambda x: x[0] - x[1] + x[2])\n    gears.sort(key=lambda x: x[0] + x[1] + x[2])\n    gears.sort(key=lambda x: x[0] + x[1] - x[2])\n    gears.sort(key=lambda x: x[0] - x[1] + x[2])\n    gears.sort(key=lambda x: x[0] + x[1] + x[2])\n    gears.sort(key=lambda x: x[0] + x[1] - x[2])\n    gears.sort(key=lambda x: x[0] - x[1] + x[2])\n    gears.sort(key=lambda x: x[0] + x[1] + x[2])\n    gears.sort(key=lambda x: x[0] + x[1] - x[2])\n    gears.sort(key=lambda x: x[0] - x[1] + x[2])\n    g"
    },
    {
        "number": 2739,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    b = [int(x) for x in stdin.readline().strip().split()]\n    if n == 0:\n        return \"error\"\n    if n == 1:\n        return str(b[0])\n    if n == 2:\n        return str(b[0] * 2)\n    if n == 3:\n        return str(b[0] * 2 + b[1])\n    if n == 4:\n        return str(b[0] * 2 + b[1] * 2)\n    if n == 5:\n        return str(b[0] * 2 + b[1] * 2 + b[2])\n    if n == 6:\n        return str(b[0] * 2 + b[1] * 2 + b[2] * 2)\n    if n == 7:\n        return str(b[0] * 2 + b[1] * 2 + b[2] * 2 + b[3])\n    if n == 8:\n        return str(b[0] * 2 + b[1] * 2 + b[2] * 2 + b[3] * 2)\n    if n == 9:\n        return str(b[0] * 2 + b[1] * 2 + b[2] * 2 + b[3] * 2 + b[4])\n    if n == 10:\n        return str(b[0] * 2 + b[1] * 2 + b[2] * 2 + b[3] * 2 + b[4] * 2)\n    if n == 11:\n        return str(b[0] * 2 + b[1] * 2 + b[2] * 2 + b[3] * 2 + b[4] * 2 + b[5])\n    if n == 12:\n        return str(b[0] * 2 + b[1] * 2 + b[2] * 2 + b[3] * 2 + b[4] * 2 + b[5] * 2)\n    if n == 13:\n        return str(b[0] * 2 + b[1] * 2 + b[2] * 2 + b[3] * 2 + b[4] * 2 + b[5] * 2 + b[6])\n    if n == 14:\n        return str(b[0] * 2 + b[1] * 2 + b[2] * 2 + b[3] * 2 + b[4] * 2 + b[5] * 2 + b[6] * 2)\n    if n == 15:\n        return str(b[0] * 2 + b[1] * 2 + b[2] * 2 + b[3] * 2 + b[4] * 2 + b[5] * 2 + b[6] * 2 + b[7])\n    if n == 16:\n        return str(b[0] * 2 + b[1] * 2 + b[2] * 2 + b[3] * 2 + b[4] * 2 + b[5] * 2 + b[6] * 2 + b[7] * 2)\n    if n == 17:\n        return str(b[0] * 2 + b[1] * 2 + b[2] * 2 + b[3] * 2 + b[4] * 2 + b[5] * 2 + b[6] * 2 + b[7] * 2 + b[8])\n    if n == 18:\n        return str(b[0] * 2 + b[1] * 2 + b[2] * 2 + b[3] * 2 + b[4] * 2 + b[5] * 2 + b[6] * 2 + b[7] * 2 + b[8] * 2)\n    if n == 19:\n        return str(b[0] * 2 + b[1] * 2 + b[2] * 2 + b[3] * 2 + b[4] * 2 + b[5] * 2 + b[6] * 2 + b[7] * 2 + b[8] * 2 + b[9])\n    if n == 20:\n        return str(b[0] * 2 + b[1] * 2 + b[2] * 2 + b[3] * 2 + b[4] * 2 + b[5] * 2 + b[6] * 2 + b[7] * 2 + b[8] * 2 + b[9] * 2)\n    if n == 21:\n        return str(b[0] * 2 + b[1] * 2 + b[2] * 2 + b[3] * 2 + b[4] * 2 + b[5] * 2 + b[6] * 2 + b[7] * 2 + b[8] * 2 + b[9] * 2 + b[10])\n    if n == 22:\n        return str(b[0] * 2 + b[1] * 2 + b[2] * 2 + b[3] * 2 + b[4] * 2 + b[5] * 2 + b[6] * 2 + b[7] * 2 + b[8] * 2 + b[9] * 2 + b[10] * 2)\n    if n == 23:\n        return str(b[0] * 2 + b[1] * 2 + b[2] * 2 + b[3] * 2 + b[4] * 2 + b[5] * 2 + b[6] * 2 + b[7] * 2 + b[8] * 2 + b[9] * 2 + b[10] * 2 + b[11])\n    if n == 24:\n        return str(b[0] * 2 + b[1] * 2 + b[2] * 2 + b[3] * 2 + b[4] * 2 + b[5] * 2 + b[6] * 2 + b[7] * 2 + b[8] * 2 + b[9] * 2 + b[10] * 2 + b[11] * 2)\n    if n == 25:\n        return str(b[0] * 2 + b[1] * 2 + b[2] * 2 + b[3] * 2 + b[4] * 2 + b[5] * 2 + b[6] * 2 + b[7] * 2 + b[8] * 2 + b[9] * 2 + b[10] * 2 + b[11] * 2 + b[12])\n    if n == 26:\n        return str(b[0] * 2 + b[1] * 2 + b[2] * 2 + b[3] * 2 + b[4] * 2 + b[5] * 2 + b[6] * 2 + b[7] * 2 + b[8] * 2 + b[9] * 2 + b[10] * 2 + b[11] * 2 + b[12] * 2)\n    if n == 27:\n        return str(b[0] * 2 + b[1] * 2 + b[2] * 2 + b[3] * 2 + b[4] * 2 + b[5] * 2 + b[6] * 2 + b[7] * 2 + b[8] * 2 + b[9] * 2 + b[10] * 2 + b"
    },
    {
        "number": 2740,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    ribbon, width, height = [int(x) for x in stdin.split()]\n    return str(solution_helper(ribbon, width, height))\n\ndef"
    },
    {
        "number": 2741,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return hex(int(stdin, 8))[2:]\n\nprint(solution(input()))\n"
    },
    {
        "number": 2742,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return 0\n    coins = [1, 10, 100, 1000]\n    coins_count = [0] * len(coins)\n    for i in range(len(coins)):\n        coins_count[i] = n // coins[i]\n        n %= coins[i]\n    return sum(coins_count)"
    },
    {
        "number": 2743,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2744,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    routes = [tuple(int(x) for x in stdin.split()) for _ in range(m)]\n    a = [int(x) for x in stdin.split()]\n    routes = sorted(routes, key=lambda x: x[1])\n    routes = sorted(routes, key=lambda x: x[0])\n    routes = sorted(routes, key=lambda x: x[2])\n    routes = sorted(routes, key=lambda x: x[1])\n    routes = sorted(routes, key=lambda x: x[0])\n    routes = sorted(routes, key=lambda x: x[2])\n    routes = sorted(routes, key=lambda x: x[1])\n    routes = sorted(routes, key=lambda x: x[0])\n    routes = sorted(routes, key=lambda x: x[2])\n    routes = sorted(routes, key=lambda x: x[1])\n    routes = sorted(routes, key=lambda x: x[0])\n    routes = sorted(routes, key=lambda x: x[2])\n    routes = sorted(routes, key=lambda x: x[1])\n    routes = sorted(routes, key=lambda x: x[0])\n    routes = sorted(routes, key=lambda x: x[2])\n    routes = sorted(routes, key=lambda x: x[1])\n    routes = sorted(routes, key=lambda x: x[0])\n    routes = sorted(routes, key=lambda x: x[2])\n    routes = sorted(routes, key=lambda x: x[1])\n    routes = sorted(routes, key=lambda x: x[0])\n    routes = sorted(routes, key=lambda x: x[2])\n    routes = sorted(routes, key=lambda x: x[1])\n    routes = sorted(routes, key=lambda x: x[0])\n    routes = sorted(routes, key=lambda x: x[2])\n    routes = sorted(routes, key=lambda x: x[1])\n    routes = sorted(routes, key=lambda x: x[0])\n    routes = sorted(routes, key=lambda x: x[2])\n    routes = sorted(routes, key=lambda x: x[1])\n    routes = sorted(routes, key=lambda x: x[0])\n    routes = sorted(routes, key=lambda x: x[2])\n    routes = sorted(routes, key=lambda x: x[1])\n    routes = sorted(routes, key=lambda x: x[0])\n    routes = sorted(routes, key=lambda x: x[2])\n    routes = sorted(routes, key=lambda x: x[1])\n    routes = sorted(routes, key=lambda x: x[0])\n    routes = sorted(routes, key=lambda x: x[2])\n    routes = sorted(routes, key=lambda x: x[1])\n    routes = sorted(routes, key=lambda x: x[0])\n    routes = sorted(routes, key=lambda x: x[2])\n    routes = sorted(routes, key=lambda x: x[1])\n    routes = sorted(routes, key=lambda x: x[0])\n    routes = sorted(routes, key=lambda x: x[2])\n    routes = sorted(routes, key=lambda x: x[1])\n    routes = sorted(routes, key=lambda x: x[0])\n    routes = sorted(routes, key=lambda x: x[2])\n    routes = sorted(routes, key=lambda x: x[1])\n    routes = sorted(routes, key=lambda x: x[0])\n    routes = sorted(routes, key=lambda x: x[2])\n    routes = sorted(routes, key=lambda x: x[1])\n    routes = sorted(routes, key=lambda x: x[0])\n    routes = sorted(routes, key=lambda x: x[2])\n    routes = sorted(routes, key=lambda x: x[1])\n    routes = sorted(routes, key=lambda x: x[0])\n    routes = sorted(routes, key=lambda x: x[2])\n    routes = sorted(routes, key=lambda x: x[1])\n    routes = sorted(routes, key=lambda x: x[0])\n    routes = sorted(routes, key=lambda x: x[2])\n    routes = sorted(routes, key=lambda x: x[1])\n    routes = sorted(routes, key=lambda x: x[0])\n    routes = sorted(routes, key=lambda x: x[2])\n    routes = sorted(routes, key=lambda x: x[1])\n    routes = sorted(routes, key=lambda x: x[0])\n    routes = sorted(routes, key="
    },
    {
        "number": 2745,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 2746,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 2747,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    nums = [int(x) for x in stdin.split(' ')]\n    target = int(stdin)\n    left, right = 0, len(nums) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if nums[mid] == target:\n            return [mid, mid]\n        elif nums[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return [-1, -1]"
    },
    {
        "number": 2748,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2749,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, W = [int(x) for x in stdin.split()]\n    N = int(stdin)\n    colors = [int(x) for x in stdin.split()]\n    if N > H * W:\n        return '-1'\n    if N == 1:\n        return '1'\n    if N == H * W:\n        return ''.join(str(x) for x in colors)\n    if N == H:\n        return ''.join(str(colors[i]) for i in range(W))\n    if N == W:\n        return ''.join(str(colors[i]) for i in range(H))\n    if N == H * W - 1:\n        return ''.join(str(colors[i]) for i in range(H)) +'' + ''.join(str(colors[i]) for i in range(W))\n    if N == H * W - 2:\n        return ''.join(str(colors[i]) for i in range(H)) +'' + ''.join(str(colors[i]) for i in range(W)) +'' + ''.join(str(colors[i]) for i in range(H))\n    if N == H * W - 3:\n        return ''.join(str(colors[i]) for i in range(H)) +'' + ''.join(str(colors[i]) for i in range(W)) +'' + ''.join(str(colors[i]) for i in range(H)) +'' + ''.join(str(colors[i]) for i in range(W))\n    if N == H * W - 4:\n        return ''.join(str(colors[i]) for i in range(H)) +'' + ''.join(str(colors[i]) for i in range(W)) +'' + ''.join(str(colors[i]) for i in range(H)) +'' + ''.join(str(colors[i]) for i in range(W)) +'' + ''.join(str(colors[i]) for i in range(H))\n    if N == H * W - 5:\n        return ''.join(str(colors[i]) for i in range(H)) +'' + ''.join(str(colors[i]) for i in range(W)) +'' + ''.join(str(colors[i]) for i in range(H)) +'' + ''.join(str(colors[i]) for i in range(W)) +'' + ''.join(str(colors[i]) for i in range(H)) +'' + ''.join(str(colors[i]) for i in range(W))\n    if N == H * W - 6:\n        return ''.join(str(colors[i]) for i in range(H)) +'' + ''.join(str(colors[i]) for i in range(W)) +'' + ''.join(str(colors[i]) for i in range(H)) +'' + ''.join(str(colors[i]) for i in range(W)) +'' + ''.join(str(colors[i]) for i in range(H)) +'' + ''.join(str(colors[i]) for i in range(W)) +'' + ''.join(str(colors[i]) for i in range(H))\n    if N == H * W - 7:\n        return ''.join(str(colors[i]) for i in range(H)) +'' + ''.join(str(colors[i]) for i in range(W)) +'' + ''.join(str(colors[i]) for i in range(H)) +'' + ''.join(str(colors[i]) for i in range(W)) +'' + ''.join(str(colors[i]) for i in range(H)) +'' + ''.join(str(colors[i]) for i in range(W)) +'' + ''.join(str(colors[i]) for i in range(H)) +'' + ''.join(str(colors[i]) for i in range(W))\n    if N == H * W - 8:\n        return ''.join(str(colors[i]) for i in range(H)) +'' + ''.join(str(colors[i]) for i in range(W)) +'' + ''.join(str(colors[i]) for i in range(H)) +'' + ''.join(str(colors[i]) for i in range(W)) +'' + ''.join(str(colors[i]) for i in range(H)) +'' + ''.join(str(colors[i]) for i in range(W)) +'' + ''.join(str(colors[i]) for i in range(H)) +'' + ''.join(str(colors[i]) for i in range(W)) +'' + ''.join(str(colors[i]) for i in range(H))\n    if N == H * W - 9:\n        return ''.join(str(colors[i]) for i in range(H)) +'' + ''.join(str(colors[i]) for i in range(W)) +'' + ''.join(str(colors[i]) for i in range(H)) +'' + ''.join(str(colors[i]) for i in range(W)) +'' + ''.join(str(colors[i]) for i in range(H)) +'' + ''.join(str(colors[i]) for i in range(W)) +'' + ''.join(str(colors[i]) for i in range(H)) +'' + ''.join(str(colors[i]) for i in range(W)) +'' + ''.join(str(colors[i]) for i in range(H)) +'' + ''.join(str(colors[i]) for i in range(W))\n    if N == H * W - 10:\n        return ''.join(str(colors[i]) for i in range(H)) +'' + ''.join(str(colors[i]) for i in range(W)) +'' + ''.join(str(colors[i]) for i in range(H)) +'' + ''.join(str(colors[i]) for i in range(W)) +'' + ''.join(str(colors[i]) for i in range(H)) +'' + ''.join(str(colors[i]) for i in range(W)) +'' + ''.join(str(colors[i]) for i in range(H)) +'' + ''.join(str(colors[i]) for i in range(W)) +'' + ''.join(str(colors[i]) for i in range(H"
    },
    {
        "number": 2750,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, b = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] + a[j] == b:\n                count += 1\n    return str(count)"
    },
    {
        "number": 2751,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    k = [int(x) for x in stdin.readline().strip().split()]\n    k.sort()\n    k.reverse()\n    k = [x for x in k if x > 1]\n    k.sort()\n    k.reverse()\n    k = [x for x in k if x % 2 == 1]\n    k.sort()\n    k.reverse()\n    k = [x for x in k if x % 3 == 0]\n    k.sort()\n    k.reverse()\n    k = [x for x in k if x % 4 == 0]\n    k.sort()\n    k.reverse()\n    k = [x for x in k if x % 5 == 0]\n    k.sort()\n    k.reverse()\n    k = [x for x in k if x % 6 == 0]\n    k.sort()\n    k.reverse()\n    k = [x for x in k if x % 7 == 0]\n    k.sort()\n    k.reverse()\n    k = [x for x in k if x % 8 == 0]\n    k.sort()\n    k.reverse()\n    k = [x for x in k if x % 9 == 0]\n    k.sort()\n    k.reverse()\n    k = [x for x in k if x % 10 == 0]\n    k.sort()\n    k.reverse()\n    k = [x for x in k if x % 11 == 0]\n    k.sort()\n    k.reverse()\n    k = [x for x in k if x % 12 == 0]\n    k.sort()\n    k.reverse()\n    k = [x for x in k if x % 13 == 0]\n    k.sort()\n    k.reverse()\n    k = [x for x in k if x % 14 == 0]\n    k.sort()\n    k.reverse()\n    k = [x for x in k if x % 15 == 0]\n    k.sort()\n    k.reverse()\n    k = [x for x in k if x % 16 == 0]\n    k.sort()\n    k.reverse()\n    k = [x for x in k if x % 17 == 0]\n    k.sort()\n    k.reverse()\n    k = [x for x in k if x % 18 == 0]\n    k.sort()\n    k.reverse()\n    k = [x for x in k if x % 19 == 0]\n    k.sort()\n    k.reverse()\n    k = [x for x in k if x % 20 == 0]\n    k.sort()\n    k.reverse()\n    k = [x for x in k if x % 21 == 0]\n    k.sort()\n    k.reverse()\n    k = [x for x in k if x % 22 == 0]\n    k.sort()\n    k.reverse()\n    k = [x for x in k if x % 23 == 0]\n    k.sort()\n    k.reverse()\n    k = [x for x in k if x % 24 == 0]\n    k.sort()\n    k.reverse()\n    k = [x for x in k if x % 25 == 0]\n    k.sort()\n    k.reverse()\n    k = [x for x in k if x % 26 == 0]\n    k.sort()\n    k.reverse()\n    k = [x for x in k if x % 27 == 0]\n    k.sort()\n    k.reverse()\n    k = [x for x in k if x % 28 == 0]\n    k.sort()\n    k.reverse()\n    k = [x for x in k if x % 29 == 0]\n    k.sort()\n    k.reverse()\n    k = [x for x in k if x % 30 == 0]\n    k.sort()\n    k.reverse()\n    k = [x for x in k if x % 31 == 0]\n    k.sort()\n    k.reverse()\n    k = [x for x in k if x % 32 == 0]\n    k.sort()\n    k.reverse()\n    k = [x for x in k if x % 33 == 0]\n    k.sort()\n    k.reverse()\n    k = [x for x in k if x % 34 == 0]\n    k.sort()\n    k.reverse()\n    k = [x for x in k if x % 35 == 0]\n    k.sort()\n    k.reverse()\n    k = [x for x in k if x % 36 == 0]\n    k.sort()\n    k.reverse()\n    k = [x for x in k if x % 37 == 0]\n    k.sort()\n    k.reverse()\n    k = [x for x in k if x % 38 == 0]\n    k.sort()\n    k.reverse()\n    k = [x for x in k if x % 39 == 0]\n    k.sort()\n    k.reverse()\n    k = [x for x in k if x % 40 == 0]\n    k.sort()\n    k.reverse()\n    k = [x for x in k if x % 41 == 0]\n    k.sort()\n    k.reverse()\n    k = [x for x in k if x % 42 == 0]\n    k.sort()\n    k.reverse()\n    k = [x for x in k if x % 43 == 0]\n    k.sort()\n    k.reverse()\n    k = [x for x in k if x % 44 == 0]\n    k.sort()\n    k.reverse()\n    k = [x for x in k if x % 45 == 0]\n    k.sort()\n    k.reverse()\n    k = [x for x in k if x % 46 == 0]\n    k.sort()\n    k.reverse()\n    k = [x for x in k if x % 47 == 0]\n    k.sort()\n    k.reverse()\n    k = [x for x in k if x % 48 == 0]\n    k.sort()\n    k.reverse()\n    k = [x for x in k if x % 49 == 0]\n    k.sort()\n    k.reverse()\n    k = [x for x in k if x % 50 == 0]\n    k.sort()\n    k.reverse()\n    k = [x for x in k if x % 51 == 0]\n    k.sort()\n    k.reverse()\n    k = [x for x in k if x % 52 == 0]\n    k.sort()\n    k.reverse()\n    k = [x for x in k if x % 53 == 0]\n    k.sort()\n    k.reverse()\n    k = [x for x in k if x % 54 == 0]\n    k.sort()\n    k.reverse()\n    k"
    },
    {
        "number": 2752,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    b = [int(x) for x in stdin.split()]\n    w = [stdin.split()[i] for i in range(n)]\n    a_b = [a[i] - b[i] for i in range(n)]\n    a_w = [a[i] - w[i] for i in range(n)]\n    b_w = [b[i] - w[i] for i in range(n)]\n    a_b_w = [a_b[i] - w[i] for i in range(n)]\n    a_b_w_b = [a_b_w[i] - b_w[i] for i in range(n)]\n    a_b_w_b_w = [a_b_w_b[i] - w[i] for i in range(n)]\n    a_b_w_b_w_w = [a_b_w_b_w[i] - w[i] for i in range(n)]\n    a_b_w_b_w_w_w = [a_b_w_b_w_w[i] - w[i] for i in range(n)]\n    a_b_w_b_w_w_w_w = [a_b_w_b_w_w_w[i] - w[i] for i in range(n)]\n    a_b_w_b_w_w_w_w_w = [a_b_w_b_w_w_w_w[i] - w[i] for i in range(n)]\n    a_b_w_b_w_w_w_w_w_w = [a_b_w_b_w_w_w_w_w[i] - w[i] for i in range(n)]\n    a_b_w_b_w_w_w_w_w_w_w = [a_b_w_b_w_w_w_w_w[i] - w[i] for i in range(n)]\n    a_b_w_b_w_w_w_w_w_w_w_w = [a_b_w_b_w_w_w_w_w[i] - w[i] for i in range(n)]\n    a_b_w_b_w_w_w_w_w_w_w_w_w = [a_b_w_b_w_w_w_w_w[i] - w[i] for i in range(n)]\n    a_b_w_b_w_w_w_w_w_w_w_w_w_w = [a_b_w_b_w_w_w_w_w[i] - w[i] for i in range(n)]\n    a_b_w_b_w_w_w_w_w_w_w_w_w_w_w = [a_b_w_b_w_w_w_w_w[i] - w[i] for i in range(n)]\n    a_b_w_b_w_w_w_w_w_w_w_w_w_w_w_w = [a_b_w_b_w_w_w_w_w[i] - w[i] for i in range(n)]\n    a_b_w_b_w_w_w_w_w_w_w_w_w_w_w_w_w = [a_b_w_b_w_w_w_w_w[i] - w[i] for i in range(n)]\n    a_b_w_b_w_w_w_w_w_w_w_w_w_w_w_w_w_w = [a_b_w_b_w_w_w_w_w[i] - w[i] for i in range(n)]\n    a_b_w_b_w_w_w_w_w_w_w_w_w_w_w_w_w_w_w = [a_b_w_b_w_w_w_w_w[i] - w[i] for i in range(n)]\n    a_b_w_b_w_w_w_w_w_w_w_w_w_w_w_w_w_w_w_w = [a_b_w_b_w_w_w_w_w[i] - w[i] for i in range(n)]\n    a_b_w_b_w_w_w_w_w_w_w_w_w_w_w_w_w_w_w_w_w = [a_b_w_b_w_w_w_w_w[i] - w[i] for i in range(n)]\n    a_b_w_b_w_w_w_w_w_w_w_w_w_w_w_w_w_w_w_w_w_w_w = [a_b_w_b_w_w_w_w_w[i] - w[i] for i in range(n)]\n    a_b_w_b_w_w_w_w_w_w_w_w_w_w_w_w_w_w_w_w_w_w_w_w_w_w = [a_b_w_b_w_w_w_w_w[i] - w[i] for i in range(n)]\n    a_b_w_b_w_w_w_w_w_w_w_w_w_w_w_w_w_w_w_w_w_w_w_w_w_w_w_w_w_"
    },
    {
        "number": 2753,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''02:20\n   ... 13:00\n   ... 05:50\n   ... 01:00''')\n    'Saturday'\n    >>> solution('''02:20\n   ... 23:28\n   ... 00:40\n   ... 23:50\n   ... ''')\n    'Never'\n    \"\"\"\n    first_star_time, second_star_time, first_star_interval, second_star_interval = [\n        int(time) for time in stdin.split()\n    ]\n    first_star_minute = first_star_time * 60 + first_star_interval\n    second_star_minute = second_star_time * 60 + second_star_interval\n    if first_star_minute == second_star_minute:\n        return \"Never\"\n    elif first_star_minute < second_star_minute:\n        return \"Saturday\"\n    else:\n        return \"Sunday\"\n"
    },
    {
        "number": 2754,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y_low, y_high = [int(x) for x in stdin.split()]\n    if y_low > y_high:\n        return \"impossible\"\n    if y_low == y_high:\n        return \"1\"\n    if y_low == 0:\n        return \"inf\"\n    return \"1\""
    },
    {
        "number": 2755,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    trees = [int(x) for x in stdin.split()]\n    paths = [int(x) for x in stdin.split()]\n    paths_dict = {}\n    for i in range(m):\n        u, v = [int(x) for x in stdin.split()]\n        if u not in paths_dict:\n            paths_dict[u] = [v]\n        else:\n            paths_dict[u].append(v)\n        if v not in paths_dict:\n            paths_dict[v] = [u]\n        else:\n            paths_dict[v].append(u)\n    hives = 0\n    for i in range(n):\n        if i not in paths_dict:\n            continue\n        for j in range(i + 1, n):\n            if j not in paths_dict:\n                continue\n            if j in paths_dict[i]:\n                continue\n            if j in paths_dict[j]:\n                continue\n            hives += 1\n    return str(hives)"
    },
    {
        "number": 2756,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, e = [int(x) for x in stdin.split()]\n    dungeon = [list(stdin.strip()) for _ in range(n)]\n    player_pos = (0, 0)\n    creeper_pos = (0, 0)\n    moves = 0\n    while True:\n        moves += 1\n        if moves > 1000:\n            return \"you're toast\"\n        if player_pos == creeper_pos:\n            return str(moves)\n        if dungeon[player_pos[0]][player_pos[1]] == \"E\":\n            return str(moves)\n        if dungeon[player_pos[0]][player_pos[1]] == \"P\":\n            player_pos = (player_pos[0], player_pos[1] + 1)\n        elif dungeon[player_pos[0]][player_pos[1]] == \"C\":\n            creeper_pos = (creeper_pos[0], creeper_pos[1] + 1)\n        else:\n            if dungeon[player_pos[0]][player_pos[1]] == \"X\":\n                dungeon[player_pos[0]][player_pos[1]] = \".\"\n            elif dungeon[player_pos[0]][player_pos[1]] == \".\":\n                dungeon[player_pos[0]][player_pos[1]] = \"P\"\n                player_pos = (player_pos[0], player_pos[1] + 1)\n            elif dungeon[player_pos[0]][player_pos[1]] == \"E\":\n                dungeon[player_pos[0]][player_pos[1]] = \".\"\n                return str(moves)\n            elif dungeon[player_pos[0]][player_pos[1]] == \"X\":\n                dungeon[player_pos[0]][player_pos[1]] = \".\"\n            elif dungeon[player_pos[0]][player_pos[1]] == \"C\":\n                dungeon[player_pos[0]][player_pos[1]] = \".\"\n                creeper_pos = (creeper_pos[0], creeper_pos[1] + 1)\n            else:\n                dungeon[player_pos[0]][player_pos[1]] = \".\"\n                player_pos = (player_pos[0], player_pos[1] + 1)"
    },
    {
        "number": 2757,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    values = [int(x) for x in stdin.readline().strip().split()]\n    return str(count_minimal_BDDs(n, values))\n\ndef"
    },
    {
        "number": 2758,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''"
    },
    {
        "number": 2759,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    tanks = [list(map(int, stdin.readline().strip().split())) for _ in range(n)]\n    moves = 0\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n            if tanks[i][0] == tanks[j][0] and tanks[i][1] == tanks[j][1]:\n                moves += 1\n    return str(moves)"
    },
    {
        "number": 2760,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = [int(x) for x in stdin.readline().strip().split()]\n    swaps = 0\n    for phase in range(1, n + 1, 2):\n        for i in range(n - 1):\n            if arr[i] > arr[i + 1]:\n                arr[i], arr[i + 1] = arr[i + 1], arr[i]\n                swaps += 1\n    return str(swaps)"
    },
    {
        "number": 2761,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    lines = []\n    for _ in range(n):\n        x1, y1, x2, y2 = [int(x) for x in stdin.readline().strip().split()]\n        lines.append((x1, y1, x2, y2))\n    lines.sort(key=lambda x: x[0] * x[1])\n    lines.sort(key=lambda x: x[2] * x[3])\n    lines.sort(key=lambda x: x[0] + x[1])\n    lines.sort(key=lambda x: x[2] + x[3])\n    lines.sort(key=lambda x: x[0] * x[2])\n    lines.sort(key=lambda x: x[1] * x[3])\n    lines.sort(key=lambda x: x[0] + x[1] + x[2] + x[3])\n    if len(lines) < 3:\n        return \"no triangle\"\n    perimeter = 0\n    for i in range(len(lines) - 2):\n        for j in range(i + 1, len(lines) - 1):\n            for k in range(j + 1, len(lines)):\n                if lines[i][0] * lines[j][1] == lines[j][0] * lines[k][1] or lines[i][1] * lines[j][0] == lines[j][1] * lines[k][0] or lines[i][0] * lines[k][1] == lines[k][0] * lines[j][1]:\n                    perimeter = max(perimeter, lines[i][0] + lines[j][1] + lines[k][1])\n    return str(perimeter)"
    },
    {
        "number": 2762,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, g, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    cost = 0\n    for i in range(n):\n        cost += min(a[i], a[i+1]) * k\n    return str(cost)"
    },
    {
        "number": 2763,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    grid = [list(stdin.readline().strip()) for _ in range(n)]\n    message = stdin.readline().strip()\n    if not is_valid_grid(grid):\n        return \"invalid grille\"\n    return decrypt(message, grid)\n\ndef"
    },
    {
        "number": 2764,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2765,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    denominations = [int(x) for x in stdin.readline().strip().split()]\n    if n == 1:\n        return \"canonical\"\n    if n == 2:\n        if denominations[0] == 1:\n            return \"canonical\"\n        else:\n            return \"non-canonical\"\n    if n == 3:\n        if denominations[0] == 1:\n            return \"non-canonical\"\n        else:\n            return \"canonical\"\n    if n == 4:\n        if denominations[0] == 1:\n            return \"non-canonical\"\n        else:\n            return \"canonical\"\n    if n == 5:\n        if denominations[0] == 1:\n            return \"non-canonical\"\n        else:\n            return \"canonical\"\n    if n == 6:\n        if denominations[0] == 1:\n            return \"non-canonical\"\n        else:\n            return \"canonical\"\n    if n == 7:\n        if denominations[0] == 1:\n            return \"non-canonical\"\n        else:\n            return \"canonical\"\n    if n == 8:\n        if denominations[0] == 1:\n            return \"non-canonical\"\n        else:\n            return \"canonical\"\n    if n == 9:\n        if denominations[0] == 1:\n            return \"non-canonical\"\n        else:\n            return \"canonical\"\n    if n == 10:\n        if denominations[0] == 1:\n            return \"non-canonical\"\n        else:\n            return \"canonical\"\n    if n == 11:\n        if denominations[0] == 1:\n            return \"non-canonical\"\n        else:\n            return \"canonical\"\n    if n == 12:\n        if denominations[0] == 1:\n            return \"non-canonical\"\n        else:\n            return \"canonical\"\n    if n == 13:\n        if denominations[0] == 1:\n            return \"non-canonical\"\n        else:\n            return \"canonical\"\n    if n == 14:\n        if denominations[0] == 1:\n            return \"non-canonical\"\n        else:\n            return \"canonical\"\n    if n == 15:\n        if denominations[0] == 1:\n            return \"non-canonical\"\n        else:\n            return \"canonical\"\n    if n == 16:\n        if denominations[0] == 1:\n            return \"non-canonical\"\n        else:\n            return \"canonical\"\n    if n == 17:\n        if denominations[0] == 1:\n            return \"non-canonical\"\n        else:\n            return \"canonical\"\n    if n == 18:\n        if denominations[0] == 1:\n            return \"non-canonical\"\n        else:\n            return \"canonical\"\n    if n == 19:\n        if denominations[0] == 1:\n            return \"non-canonical\"\n        else:\n            return \"canonical\"\n    if n == 20:\n        if denominations[0] == 1:\n            return \"non-canonical\"\n        else:\n            return \"canonical\"\n    if n == 21:\n        if denominations[0] == 1:\n            return \"non-canonical\"\n        else:\n            return \"canonical\"\n    if n == 22:\n        if denominations[0] == 1:\n            return \"non-canonical\"\n        else:\n            return \"canonical\"\n    if n == 23:\n        if denominations[0] == 1:\n            return \"non-canonical\"\n        else:\n            return \"canonical\"\n    if n == 24:\n        if denominations[0] == 1:\n            return \"non-canonical\"\n        else:\n            return \"canonical\"\n    if n == 25:\n        if denominations[0] == 1:\n            return \"non-canonical\"\n        else:\n            return \"canonical\"\n    if n == 26:\n        if denominations[0] == 1:\n            return \"non-canonical\"\n        else:\n            return \"canonical\"\n    if n == 27:\n        if denominations[0] == 1:\n            return \"non-canonical\"\n        else:\n            return \"canonical\"\n    if n == 28:\n        if denominations[0] == 1:\n            return \"non-canonical\"\n        else:\n            return \"canonical\"\n    if n == 29:\n        if denominations[0] == 1:\n            return \"non-canonical\"\n        else:\n            return \"canonical\"\n    if n == 30:\n        if denominations[0] == 1:\n            return \"non-canonical\"\n        else:\n            return \"canonical\"\n    if n == 31:\n        if denominations[0] == 1:\n            return \"non-canonical\"\n        else:\n            return \"canonical\"\n    if n == 32:\n        if denominations[0] == 1:\n            return \"non-canonical\"\n        else:\n            return \"canonical\"\n    if n == 33:\n        if denominations[0] == 1:\n            return \"non-canonical\"\n        else:\n            return \"canonical\"\n    if n == 34:\n        if denominations[0] == 1:\n"
    },
    {
        "number": 2766,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, p = [int(x) for x in stdin.split()]\n    return str(1 - binomial_coefficient(n, k) * p)\n\ndef"
    },
    {
        "number": 2767,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    d = {}\n    for _ in range(n):\n        word = stdin.readline().strip()\n        if word in d:\n            d[word] += 1\n        else:\n            d[word] = 1\n    return str(len(d))"
    },
    {
        "number": 2768,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    cubes = [int(x) for x in stdin.split()]\n    cubes.sort()\n    cubes = [cubes[i:i + m] for i in range(0, len(cubes), m)]\n    cubes = [cubes[i:i + n] for i in range(0, len(cubes), n)]\n    cubes = [cubes[i:i + n] for i in range(0, len(cubes), n)]\n    cubes = [cubes[i:i + n] for i in range(0, len(cubes), n)]\n    cubes = [cubes[i:i + n] for i in range(0, len(cubes), n)]\n    cubes = [cubes[i:i + n] for i in range(0, len(cubes), n)]\n    cubes = [cubes[i:i + n] for i in range(0, len(cubes), n)]\n    cubes = [cubes[i:i + n] for i in range(0, len(cubes), n)]\n    cubes = [cubes[i:i + n] for i in range(0, len(cubes), n)]\n    cubes = [cubes[i:i + n] for i in range(0, len(cubes), n)]\n    cubes = [cubes[i:i + n] for i in range(0, len(cubes), n)]\n    cubes = [cubes[i:i + n] for i in range(0, len(cubes), n)]\n    cubes = [cubes[i:i + n] for i in range(0, len(cubes), n)]\n    cubes = [cubes[i:i + n] for i in range(0, len(cubes), n)]\n    cubes = [cubes[i:i + n] for i in range(0, len(cubes), n)]\n    cubes = [cubes[i:i + n] for i in range(0, len(cubes), n)]\n    cubes = [cubes[i:i + n] for i in range(0, len(cubes), n)]\n    cubes = [cubes[i:i + n] for i in range(0, len(cubes), n)]\n    cubes = [cubes[i:i + n] for i in range(0, len(cubes), n)]\n    cubes = [cubes[i:i + n] for i in range(0, len(cubes), n)]\n    cubes = [cubes[i:i + n] for i in range(0, len(cubes), n)]\n    cubes = [cubes[i:i + n] for i in range(0, len(cubes), n)]\n    cubes = [cubes[i:i + n] for i in range(0, len(cubes), n)]\n    cubes = [cubes[i:i + n] for i in range(0, len(cubes), n)]\n    cubes = [cubes[i:i + n] for i in range(0, len(cubes), n)]\n    cubes = [cubes[i:i + n] for i in range(0, len(cubes), n)]\n    cubes = [cubes[i:i + n] for i in range(0, len(cubes), n)]\n    cubes = [cubes[i:i + n] for i in range(0, len(cubes), n)]\n    cubes = [cubes[i:i + n] for i in range(0, len(cubes), n)]\n    cubes = [cubes[i:i + n] for i in range(0, len(cubes), n)]\n    cubes = [cubes[i:i + n] for i in range(0, len(cubes), n)]\n    cubes = [cubes[i:i + n] for i in range(0, len(cubes), n)]\n    cubes = [cubes[i:i + n] for i in range(0, len(cubes), n)]\n    cubes = [cubes[i:i + n] for i in range(0, len(cubes), n)]\n    cubes = [cubes[i:i + n] for i in range(0, len(cubes), n)]\n    cubes = [cubes[i:i + n] for i in range(0, len(cubes), n)]\n    cubes = [cubes[i:i + n] for i in range(0, len(cubes), n)]\n    cubes = [cubes[i:i + n] for i in range(0, len(cubes), n)]\n    cubes = [cubes[i:i + n] for i in range(0, len(cubes), n)]\n    cubes = [cubes[i:i + n] for i in range(0, len(cubes), n)]\n    cubes = [cubes[i:i + n] for i in range(0, len(cubes), n)]\n    cubes = [cubes[i:i + n] for i in range(0, len(cubes), n)]\n    cubes = [cubes[i:i + n] for i in range(0, len(cubes), n)]\n    cubes = [cubes[i:i + n] for i in range(0, len(cubes), n)]\n    cubes = [cubes[i:i + n] for i in range(0, len(cubes), n)]\n    cubes = [cubes[i:i + n] for i in range(0, len(cubes), n)]\n    cubes = [cubes[i:i + n] for i in range(0, len(cubes), n)]\n    cubes = [cubes[i:i + n] for i in range(0, len(cubes), n)]\n    cubes = [cubes[i:i + n] for i in range(0, len(cubes), n)]\n    cubes = [cubes[i:i + n] for i in range(0, len(cubes), n)]\n    cubes = [cubes[i:i + n] for i in range(0, len(cubes), n)]\n    cubes = [cubes[i:i + n] for i in range(0, len(cubes), n)]\n    cubes = ["
    },
    {
        "number": 2769,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p, q, s = [int(x) for x in stdin.split()]\n    if n < min(p, q):\n        return -1\n    if p == q:\n        return max(s - p, 0)\n    if p > q:\n        p, q = q, p\n    d = [0] * (n + 1)\n    for i in range(1, p + 1):\n        d[i] = max(d[i - 1] + int(stdin.readline()), s - p)\n    for i in range(1, q + 1):\n        d[i] = max(d[i - 1] + int(stdin.readline()), s - q)\n    for i in range(p, n + 1):\n        d[i] = max(d[i - 1] + int(stdin.readline()), s - p)\n    for i in range(q, n + 1):\n        d[i] = max(d[i - 1] + int(stdin.readline()), s - q)\n    for i in range(1, n + 1):\n        d[i] = max(d[i - 1] + int(stdin.readline()), s - p)\n    for i in range(1, n + 1):\n        d[i] = max(d[i - 1] + int(stdin.readline()), s - q)\n    for i in range(p, n + 1):\n        d[i] = max(d[i - 1] + int(stdin.readline()), s - p)\n    for i in range(q, n + 1):\n        d[i] = max(d[i - 1] + int(stdin.readline()), s - q)\n    for i in range(p, n + 1):\n        d[i] = max(d[i - 1] + int(stdin.readline()), s - p)\n    for i in range(q, n + 1):\n        d[i] = max(d[i - 1] + int(stdin.readline()), s - q)\n    for i in range(p, n + 1):\n        d[i] = max(d[i - 1] + int(stdin.readline()), s - p)\n    for i in range(q, n + 1):\n        d[i] = max(d[i - 1] + int(stdin.readline()), s - q)\n    for i in range(p, n + 1):\n        d[i] = max(d[i - 1] + int(stdin.readline()), s - p)\n    for i in range(q, n + 1):\n        d[i] = max(d[i - 1] + int(stdin.readline()), s - q)\n    for i in range(p, n + 1):\n        d[i] = max(d[i - 1] + int(stdin.readline()), s - p)\n    for i in range(q, n + 1):\n        d[i] = max(d[i - 1] + int(stdin.readline()), s - q)\n    for i in range(p, n + 1):\n        d[i] = max(d[i - 1] + int(stdin.readline()), s - p)\n    for i in range(q, n + 1):\n        d[i] = max(d[i - 1] + int(stdin.readline()), s - q)\n    for i in range(p, n + 1):\n        d[i] = max(d[i - 1] + int(stdin.readline()), s - p)\n    for i in range(q, n + 1):\n        d[i] = max(d[i - 1] + int(stdin.readline()), s - q)\n    for i in range(p, n + 1):\n        d[i] = max(d[i - 1] + int(stdin.readline()), s - p)\n    for i in range(q, n + 1):\n        d[i] = max(d[i - 1] + int(stdin.readline()), s - q)\n    for i in range(p, n + 1):\n        d[i] = max(d[i - 1] + int(stdin.readline()), s - p)\n    for i in range(q, n + 1):\n        d[i] = max(d[i - 1] + int(stdin.readline()), s - q)\n    for i in range(p, n + 1):\n        d[i] = max(d[i - 1] + int(stdin.readline()), s - p)\n    for i in range(q, n + 1):\n        d[i] = max(d[i - 1] + int(stdin.readline()), s - q)\n    for i in range(p, n + 1):\n        d[i] = max(d[i - 1] + int(stdin.readline()), s - p)\n    for i in range(q, n + 1):\n        d[i] = max(d[i - 1] + int(stdin.readline()), s - q)\n    for i in range(p, n + 1):\n        d[i] = max(d[i - 1] + int(stdin.readline()), s - p)\n    for i in range(q, n + 1):\n        d[i] = max(d[i - 1] + int(stdin.readline()), s - q)\n    for i in range(p, n + 1):\n        d[i] = max(d[i - 1] + int(stdin.readline()), s - p)\n    for i in range(q, n + 1):\n        d[i] = max(d[i - 1] + int(stdin.readline()), s - q)\n    for i in range(p, n + 1):\n        d[i] = max(d[i - 1] + int(stdin.readline()), s - p)\n    for i in range(q, n + 1):\n        d[i] = max(d[i - 1] + int(stdin.read"
    },
    {
        "number": 2770,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n    x = [int(x) for x in stdin.readline().strip().split()]\n    q = int(stdin.readline().strip())\n    for _ in range(q):\n        t, m = [int(x) for x in stdin.readline().strip().split()]\n        print(x[t % m])\n    return \"\""
    },
    {
        "number": 2771,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    directions = stdin.readline().strip()\n    houses = [i for i in range(1, n + 1)]\n    visited = [False] * n\n    for i in range(n - 1):\n        if directions[i] == 'L':\n            houses[i + 1:] = houses[i + 1:][::-1]\n        else:\n            houses[:i + 1] = houses[:i + 1][::-1]\n    return ''.join(str(i) for i in houses)"
    },
    {
        "number": 2772,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, d = map(int, stdin.split())\n    h, t = [], []\n    for _ in range(a):\n        h.append(int(stdin.readline().split()[1]))\n    for _ in range(d):\n        t.append(int(stdin.readline().split()[1]))\n    h = sorted(h)\n    t = sorted(t)\n    h_sum, t_sum = 0, 0\n    for i in range(a):\n        h_sum += h[i]\n        t_sum += t[i]\n    h_sum -= h[-1]\n    t_sum -= t[-1]\n    h_sum += h[0]\n    t_sum += t[0]\n    h_sum -= h[0]\n    t_sum -= t[0]\n    h_sum += h[-1]\n    t_sum += t[-1]\n    h_sum -= h[-1]\n    t_sum -= t[-1]\n    h_sum += h[0]\n    t_sum += t[0]\n    h_sum -= h[0]\n    t_sum -= t[0]\n    h_sum += h[-1]\n    t_sum += t[-1]\n    h_sum -= h[-1]\n    t_sum -= t[-1]\n    h_sum += h[0]\n    t_sum += t[0]\n    h_sum -= h[0]\n    t_sum -= t[0]\n    h_sum += h[-1]\n    t_sum += t[-1]\n    h_sum -= h[-1]\n    t_sum -= t[-1]\n    h_sum += h[0]\n    t_sum += t[0]\n    h_sum -= h[0]\n    t_sum -= t[0]\n    h_sum += h[-1]\n    t_sum += t[-1]\n    h_sum -= h[-1]\n    t_sum -= t[-1]\n    h_sum += h[0]\n    t_sum += t[0]\n    h_sum -= h[0]\n    t_sum -= t[0]\n    h_sum += h[-1]\n    t_sum += t[-1]\n    h_sum -= h[-1]\n    t_sum -= t[-1]\n    h_sum += h[0]\n    t_sum += t[0]\n    h_sum -= h[0]\n    t_sum -= t[0]\n    h_sum += h[-1]\n    t_sum += t[-1]\n    h_sum -= h[-1]\n    t_sum -= t[-1]\n    h_sum += h[0]\n    t_sum += t[0]\n    h_sum -= h[0]\n    t_sum -= t[0]\n    h_sum += h[-1]\n    t_sum += t[-1]\n    h_sum -= h[-1]\n    t_sum -= t[-1]\n    h_sum += h[0]\n    t_sum += t[0]\n    h_sum -= h[0]\n    t_sum -= t[0]\n    h_sum += h[-1]\n    t_sum += t[-1]\n    h_sum -= h[-1]\n    t_sum -= t[-1]\n    h_sum += h[0]\n    t_sum += t[0]\n    h_sum -= h[0]\n    t_sum -= t[0]\n    h_sum += h[-1]\n    t_sum += t[-1]\n    h_sum -= h[-1]\n    t_sum -= t[-1]\n    h_sum += h[0]\n    t_sum += t[0]\n    h_sum -= h[0]\n    t_sum -= t[0]\n    h_sum += h[-1]\n    t_sum += t[-1]\n    h_sum -= h[-1]\n    t_sum -= t[-1]\n    h_sum += h[0]\n    t_sum += t[0]\n    h_sum -= h[0]\n    t_sum -= t[0]\n    h_sum += h[-1]\n    t_sum += t[-1]\n    h_sum -= h[-1]\n    t_sum -= t[-1]\n    h_sum += h[0]\n    t_sum += t[0]\n    h_sum -= h[0]\n    t_sum -= t[0]\n    h_sum += h[-1]\n    t_sum += t[-1]\n    h_sum -= h[-1]\n    t_sum -= t[-1]\n    h_sum += h[0]\n    t_sum += t[0]\n    h_sum -= h[0]\n    t_sum -= t[0]\n    h_sum += h[-1]\n    t_sum += t[-1]\n    h_sum -= h[-1]\n    t_sum -= t[-1]\n    h_sum += h[0]\n    t_sum += t[0]\n    h_sum -= h[0]\n    t_sum -= t[0]\n    h_sum += h[-1]\n    t_sum += t[-1]\n    h_sum -= h[-1]\n    t_sum -= t[-1]\n    h_sum += h[0]\n    t_sum += t[0]\n    h_sum -= h[0]\n    t_sum -= t[0]\n"
    },
    {
        "number": 2773,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    roads = [tuple(int(x) for x in stdin.split()) for _ in range(m)]\n    intersections = [0] * n\n    for a, b, d in roads:\n        intersections[a] += d\n        intersections[b] += d\n    for i in range(1, n):\n        intersections[i] += intersections[i - 1]\n    for i in range(n):\n        intersections[i] += intersections[i - 1]\n    for a, b, d in roads:\n        if intersections[a] + intersections[b] < d:\n            return \"impossible\"\n    for i in range(n):\n        if intersections[i] == intersections[0]:\n            return str(i) + \" \" + str(i)\n    return \"impossible\""
    },
    {
        "number": 2774,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = [int(x) for x in stdin.split()]\n    roads = [tuple(int(x) for x in stdin.split()) for _ in range(n - 1)]\n    lamps = [int(x) for x in stdin.split()]\n    return str(solution_recursive(roads, lamps, s))\n\ndef"
    },
    {
        "number": 2775,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    house, workplace = [int(x) for x in stdin.readline().strip().split()]\n    errands = [int(x) for x in stdin.readline().strip().split()]\n    errands.sort()\n    errands.append(house)\n    errands.append(workplace)\n    errands.sort()\n    errands.append(house)\n    errands.append(workplace)\n    errands.sort()\n    errands.append(house)\n    errands.append(workplace)\n    errands.sort()\n    errands.append(house)\n    errands.append(workplace)\n    errands.sort()\n    errands.append(house)\n    errands.append(workplace)\n    errands.sort()\n    errands.append(house)\n    errands.append(workplace)\n    errands.sort()\n    errands.append(house)\n    errands.append(workplace)\n    errands.sort()\n    errands.append(house)\n    errands.append(workplace)\n    errands.sort()\n    errands.append(house)\n    errands.append(workplace)\n    errands.sort()\n    errands.append(house)\n    errands.append(workplace)\n    errands.sort()\n    errands.append(house)\n    errands.append(workplace)\n    errands.sort()\n    errands.append(house)\n    errands.append(workplace)\n    errands.sort()\n    errands.append(house)\n    errands.append(workplace)\n    errands.sort()\n    errands.append(house)\n    errands.append(workplace)\n    errands.sort()\n    errands.append(house)\n    errands.append(workplace)\n    errands.sort()\n    errands.append(house)\n    errands.append(workplace)\n    errands.sort()\n    errands.append(house)\n    errands.append(workplace)\n    errands.sort()\n    errands.append(house)\n    errands.append(workplace)\n    errands.sort()\n    errands.append(house)\n    errands.append(workplace)\n    errands.sort()\n    errands.append(house)\n    errands.append(workplace)\n    errands.sort()\n    errands.append(house)\n    errands.append(workplace)\n    errands.sort()\n    errands.append(house)\n    errands.append(workplace)\n    errands.sort()\n    errands.append(house)\n    errands.append(workplace)\n    errands.sort()\n    errands.append(house)\n    errands.append(workplace)\n    errands.sort()\n    errands.append(house)\n    errands.append(workplace)\n    errands.sort()\n    errands.append(house)\n    errands.append(workplace)\n    errands.sort()\n    errands.append(house)\n    errands.append(workplace)\n    errands.sort()\n    errands.append(house)\n    errands.append(workplace)\n    errands.sort()\n    errands.append(house)\n    errands.append(workplace)\n    errands.sort()\n    errands.append(house)\n    errands.append(workplace)\n    errands.sort()\n    errands.append(house)\n    errands.append(workplace)\n    errands.sort()\n    errands.append(house)\n    errands.append(workplace)\n    errands.sort()\n    errands.append(house)\n    errands.append(workplace)\n    errands.sort()\n    errands.append(house)\n    errands.append(workplace)\n    errands.sort()\n    errands.append(house)\n    errands.append(workplace)\n    errands.sort()\n    errands.append(house)\n    errands.append(workplace)\n    errands.sort()\n    errands.append(house)\n    errands.append(workplace)\n    errands.sort()\n    errands.append(house)\n    errands.append(workplace)\n    errands.sort()\n    errands.append(house)\n    errands.append(workplace)\n    errands.sort()\n    errands.append(house)\n    errands.append(workplace)\n    errands.sort()\n    errands.append(house)\n    errands.append(workplace)\n    errands.sort()\n    errands.append(house)\n    errands.append(workplace)\n    errands.sort()\n    errands.append(house)\n    errands.append(workplace)\n    errands.sort()\n    errands.append(house)\n    errands.append(workplace)\n    errands.sort()\n    errands.append(house)\n    errands.append(workplace)\n    errands.sort()\n    errands.append(house)\n    errands.append(workplace)\n    errands.sort()\n    errands.append(house)\n    errands.append(workplace)\n    errands.sort()\n    errands.append(house)\n    errands.append(workplace)\n    errands.sort()\n    errands.append(house)\n    errands.append(workplace)\n    errands.sort()\n    errands.append(house)\n    errands.append(workplace)\n    errands.sort()\n    errands.append(house)\n    errands.append(workplace)\n    errands.sort()\n    errands.append(house)\n    errands.append(workplace)\n    errands.sort()\n    errands.append(house)\n    errands.append(workplace)\n    errands.sort()\n    errands.append(house)\n    errands.append(workplace)\n    errands.sort()\n    errands.append(house)\n    errands.append(work"
    },
    {
        "number": 2776,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    pizzas = [set() for _ in range(n)]\n    for _ in range(m):\n        a, b = [int(x) for x in stdin.split()]\n        pizzas[a - 1].add(b - 1)\n        pizzas[b - 1].add(a - 1)\n    return str(len(set.union(*pizzas)))"
    },
    {
        "number": 2777,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, n = [int(x) for x in stdin.split()]\n    p = [int(x) for x in stdin.split()]\n    p_max = 2 ** m - 1\n    x_max = 2 ** m - 1\n    x_count = [0] * x_max\n    for i in range(n):\n        x_count[p[i] - 1] += 1\n    ans = 0\n    for i in range(x_max):\n        if x_count[i] > 0:\n            for j in range(i + 1, x_max):\n                if x_count[j] > 0:\n                    ans += x_count[i] * x_count[j]\n    return str(ans % (10 ** 9 + 7))"
    },
    {
        "number": 2778,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, t = [int(x) for x in stdin.split()]\n    return str(factorial(n * k) // (factorial(k) * factorial(n - k)))"
    },
    {
        "number": 2779,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, c = [int(x) for x in stdin.split()]\n    grid = [list(stdin.strip()) for _ in range(n)]\n    costs = [int(x) for x in stdin.split()]\n    costs = [costs[i:i + m] for i in range(0, len(costs), m)]\n    costs = [costs[i:i + n] for i in range(0, len(costs), n)]\n    costs = [costs[i:i + n] for i in range(0, len(costs), n)]\n    costs = [costs[i:i + n] for i in range(0, len(costs), n)]\n    costs = [costs[i:i + n] for i in range(0, len(costs), n)]\n    costs = [costs[i:i + n] for i in range(0, len(costs), n)]\n    costs = [costs[i:i + n] for i in range(0, len(costs), n)]\n    costs = [costs[i:i + n] for i in range(0, len(costs), n)]\n    costs = [costs[i:i + n] for i in range(0, len(costs), n)]\n    costs = [costs[i:i + n] for i in range(0, len(costs), n)]\n    costs = [costs[i:i + n] for i in range(0, len(costs), n)]\n    costs = [costs[i:i + n] for i in range(0, len(costs), n)]\n    costs = [costs[i:i + n] for i in range(0, len(costs), n)]\n    costs = [costs[i:i + n] for i in range(0, len(costs), n)]\n    costs = [costs[i:i + n] for i in range(0, len(costs), n)]\n    costs = [costs[i:i + n] for i in range(0, len(costs), n)]\n    costs = [costs[i:i + n] for i in range(0, len(costs), n)]\n    costs = [costs[i:i + n] for i in range(0, len(costs), n)]\n    costs = [costs[i:i + n] for i in range(0, len(costs), n)]\n    costs = [costs[i:i + n] for i in range(0, len(costs), n)]\n    costs = [costs[i:i + n] for i in range(0, len(costs), n)]\n    costs = [costs[i:i + n] for i in range(0, len(costs), n)]\n    costs = [costs[i:i + n] for i in range(0, len(costs), n)]\n    costs = [costs[i:i + n] for i in range(0, len(costs), n)]\n    costs = [costs[i:i + n] for i in range(0, len(costs), n)]\n    costs = [costs[i:i + n] for i in range(0, len(costs), n)]\n    costs = [costs[i:i + n] for i in range(0, len(costs), n)]\n    costs = [costs[i:i + n] for i in range(0, len(costs), n)]\n    costs = [costs[i:i + n] for i in range(0, len(costs), n)]\n    costs = [costs[i:i + n] for i in range(0, len(costs), n)]\n    costs = [costs[i:i + n] for i in range(0, len(costs), n)]\n    costs = [costs[i:i + n] for i in range(0, len(costs), n)]\n    costs = [costs[i:i + n] for i in range(0, len(costs), n)]\n    costs = [costs[i:i + n] for i in range(0, len(costs), n)]\n    costs = [costs[i:i + n] for i in range(0, len(costs), n)]\n    costs = [costs[i:i + n] for i in range(0, len(costs), n)]\n    costs = [costs[i:i + n] for i in range(0, len(costs), n)]\n    costs = [costs[i:i + n] for i in range(0, len(costs), n)]\n    costs = [costs[i:i + n] for i in range(0, len(costs), n)]\n    costs = [costs[i:i + n] for i in range(0, len(costs), n)]\n    costs = [costs[i:i + n] for i in range(0, len(costs), n)]\n    costs = [costs[i:i + n] for i in range(0, len("
    },
    {
        "number": 2780,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    N, M = int(stdin[0].split()[0]), int(stdin[0].split()[1])\n    prob = [0] * (M + 1)\n    for i in range(1, N + 1):\n        prob[int(stdin[i])] += 1\n    for i in range(1, M + 1):\n        prob[i] += prob[i - 1]\n    for i in range(N, M, -1):\n        prob[i] -= prob[i - 1]\n    for i in range(N, M + 1):\n        prob[i] /= N\n    return''.join(map(str, prob))"
    },
    {
        "number": 2781,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, c = [int(x) for x in stdin.split()]\n    grid = [list(map(int, stdin.split())) for _ in range(r)]\n    return str(solve(grid))\n\ndef"
    },
    {
        "number": 2782,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    passengers, rows, seats = [int(x) for x in stdin.split()]\n    passengers_per_seat = passengers // seats\n    seats_per_row = seats // rows\n    seats_per_passenger = seats_per_row * seats_per_row\n    seats_per_passenger_per_row = seats_per_passenger // passengers\n    seats_per_passenger_per_row_per_seat = seats_per_passenger_per_row // seats_per_row\n    seats_per_passenger_per_row_per_seat_per_seat = seats_per_passenger_per_row_per_seat // seats_per_seat\n    return str(seats_per_passenger_per_row_per_seat_per_seat)\n\nprint(solution(input()))\n"
    },
    {
        "number": 2783,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    shady_spots = []\n    for _ in range(n):\n        x, y = map(int, stdin.readline().split())\n        shady_spots.append((x, y))\n    dormitory, class_ = map(int, stdin.readline().split())\n    shady_spots.append((dormitory, class_))\n    shady_spots.sort(key=lambda x: x[0])\n    shady_spots.sort(key=lambda x: x[1])\n    shady_spots.sort(key=lambda x: x[0] - x[1])\n    shady_spots.sort(key=lambda x: x[0] + x[1])\n    shady_spots.sort(key=lambda x: x[0] * x[1])\n    shady_spots.sort(key=lambda x: x[0] * x[1] * x[0])\n    shady_spots.sort(key=lambda x: x[0] * x[1] * x[0] * x[1])\n    shady_spots.sort(key=lambda x: x[0] * x[1] * x[0] * x[1] * x[0])\n    shady_spots.sort(key=lambda x: x[0] * x[1] * x[0] * x[1] * x[0] * x[1])\n    shady_spots.sort(key=lambda x: x[0] * x[1] * x[0] * x[1] * x[0] * x[1] * x[0])\n    shady_spots.sort(key=lambda x: x[0] * x[1] * x[0] * x[1] * x[0] * x[1] * x[0] * x[1])\n    shady_spots.sort(key=lambda x: x[0] * x[1] * x[0] * x[1] * x[0] * x[1] * x[0] * x[1] * x[0])\n    shady_spots.sort(key=lambda x: x[0] * x[1] * x[0] * x[1] * x[0] * x[1] * x[0] * x[1] * x[0] * x[1])\n    shady_spots.sort(key=lambda x: x[0] * x[1] * x[0] * x[1] * x[0] * x[1] * x[0] * x[1] * x[0] * x[1] * x[0])\n    shady_spots.sort(key=lambda x: x[0] * x[1] * x[0] * x[1] * x[0] * x[1] * x[0] * x[1] * x[0] * x[1] * x[0] * x[1])\n    shady_spots.sort(key=lambda x: x[0] * x[1] * x[0] * x[1] * x[0] * x[1] * x[0] * x[1] * x[0] * x[1] * x[0] * x[1] * x[0])\n    shady_spots.sort(key=lambda x: x[0] * x[1] * x[0] * x[1] * x[0] * x[1] * x[0] * x[1] * x[0] * x[1] * x[0] * x[1] * x[0] * x[1])\n    shady_spots.sort(key=lambda x: x[0] * x[1] * x[0] * x[1] * x[0] * x[1] * x[0] * x[1] * x[0] * x[1] * x[0] * x[1] * x[0] * x[1])\n    shady_spots.sort(key=lambda x: x[0] * x[1] * x[0] * x[1] * x[0] * x[1] * x[0] * x[1] * x[0] * x[1] * x[0] * x[1] * x[0] * x[1])\n    shady_spots.sort(key=lambda x: x[0] * x[1] * x[0] * x[1] * x[0] * x[1] * x[0] * x[1] * x[0] * x[1] * x[0] * x[1] * x[0] * x[1])\n    shady_spots.sort(key=lambda x: x[0] * x[1] * x[0] * x[1] * x[0] * x[1] * x[0] * x[1] * x[0] * x[1] * x[0] * x[1] * x[0] * x[1])\n    shady_spots.sort(key=lambda x: x[0] * x[1] * x[0] * x[1] * x[0] * x[1] * x[0] * x[1] * x[0] * x[1] * x[0] * x[1] * x[0] * x[1])\n    shady_spots.sort(key=lambda x: x[0] * x[1] * x[0] * x[1] * x[0] * x[1] * x[0] * x[1] * x[0] * x[1] * x[0] * x[1] * x[0] * x[1])\n    shady_spots.sort(key=lambda x: x[0] * x[1] * x[0] * x[1] * x[0] * x[1] * x[0] * x[1] * x[0] * x[1] * x[0] * x"
    },
    {
        "number": 2784,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2785,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    prices = [int(x) for x in stdin.split()]\n    return str(solution_naive(n, m, prices))\n\ndef"
    },
    {
        "number": 2786,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    s = s.replace('?', 'a')\n    s = s.replace('[', '{')\n    s = s.replace(']', '}')\n    s = s.replace('(', '[').replace(')', ']')\n    s = s.replace('{', '(').replace('}', ')')\n    s = s.replace('a', '?')\n    s = s.replace('[', '(').replace(']', ')')\n    s = s.replace('(', '[').replace(')', ']')\n    s = s.replace('{', '(').replace('}', ')')\n    s = s.replace('(', '[').replace(')', ']')\n    s = s.replace('[', '{').replace(']', '}')\n    s = s.replace('(', '[').replace(')', ']')\n    s = s.replace('{', '(').replace('}', ')')\n    s = s.replace('(', '[').replace(')', ']')\n    s = s.replace('[', '{').replace(']', '}')\n    s = s.replace('(', '[').replace(')', ']')\n    s = s.replace('{', '(').replace('}', ')')\n    s = s.replace('(', '[').replace(')', ']')\n    s = s.replace('[', '{').replace(']', '}')\n    s = s.replace('(', '(').replace(')', ']')\n    s = s.replace('{', '[').replace('}', ']')\n    s = s.replace('(', '[').replace(')', ']')\n    s = s.replace('[', '{').replace(']', '}')\n    s = s.replace('(', '(').replace(')', ']')\n    s = s.replace('{', '[').replace('}', ']')\n    s = s.replace('(', '[').replace(')', ']')\n    s = s.replace('[', '{').replace(']', '}')\n    s = s.replace('(', '(').replace(')', ']')\n    s = s.replace('{', '[').replace('}', ']')\n    s = s.replace('(', '[').replace(')', ']')\n    s = s.replace('[', '{').replace(']', '}')\n    s = s.replace('(', '(').replace(')', ']')\n    s = s.replace('{', '[').replace('}', ']')\n    s = s.replace('(', '[').replace(')', ']')\n    s = s.replace('[', '{').replace(']', '}')\n    s = s.replace('(', '(').replace(')', ']')\n    s = s.replace('{', '[').replace('}', ']')\n    s = s.replace('(', '[').replace(')', ']')\n    s = s.replace('[', '{').replace(']', '}')\n    s = s.replace('(', '(').replace(')', ']')\n    s = s.replace('{', '[').replace('}', ']')\n    s = s.replace('(', '[').replace(')', ']')\n    s = s.replace('[', '{').replace(']', '}')\n    s = s.replace('(', '(').replace(')', ']')\n    s = s.replace('{', '[').replace('}', ']')\n    s = s.replace('(', '[').replace(')', ']')\n    s = s.replace('[', '{').replace(']', '}')\n    s = s.replace('(', '(').replace(')', ']')\n    s = s.replace('{', '[').replace('}', ']')\n    s = s.replace('(', '[').replace(')', ']')\n    s = s.replace('[', '{').replace(']', '}')\n    s = s.replace('(', '(').replace(')', ']')\n    s = s.replace('{', '[').replace('}', ']')\n    s = s.replace('(', '[').replace(')', ']')\n    s = s.replace('[', '{').replace(']', '}')\n    s = s.replace('(', '(').replace(')', ']')\n    s = s.replace('{', '[').replace('}', ']')\n    s = s.replace('(', '[').replace(')', ']')\n    s = s.replace('[', '{').replace(']', '}')\n    s = s.replace('(', '(').replace(')', ']')\n    s = s.replace('{', '[').replace('}', ']')\n    s = s.replace('(', '[').replace(')', ']')\n    s = s.replace('[', '{').replace(']', '}')\n    s = s.replace('(', '(').replace(')', ']')\n    s = s.replace('{', '[').replace('}', ']')\n    s = s.replace('(', '[').replace(')', ']')\n    s = s.replace('[', '{').replace(']', '}')\n    s = s.replace('(', '(').replace(')', ']')\n    s = s.replace('{', '[').replace('}', ']')\n    s = s.replace('(', '[').replace(')', ']')\n    s = s.replace('[', '{').replace(']', '}')\n    s = s.replace('(', '(').replace(')', ']')\n    s = s.replace('{', '[').replace('}', ']')\n    s = s.replace('(', '[').replace(')', ']')\n    s = s.replace('[', '{').replace(']', '}')\n    s = s.replace('(', '(').replace(')', ']')\n    s = s.replace('{', '[').replace('}', ']')\n    s = s.replace('(', '[').replace(')', ']')\n    s = s.replace('[', '{').replace(']', '}')\n    s = s.replace('(', '(').replace(')', ']')\n    s = s.replace('{', '[').replace('}', ']')\n    s = s.replace('(', '[').replace(')', ']')\n    s = s.replace('[',"
    },
    {
        "number": 2787,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    if n == 1:\n        return '-1'\n    if m == 1:\n        return '0'\n    routes = [{} for _ in range(n)]\n    for _ in range(m):\n        a, b = stdin.split()\n        routes[int(a) - 1][b] = 1\n        routes[int(b) - 1][a] = 1\n    start, target = stdin.split()\n    start = start.upper()\n    target = target.upper()\n    if start == target:\n        return '0'\n    if start not in routes[0]:\n        return '-1'\n    if target not in routes[0]:\n        return '-1'\n    routes = [{} for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n            if j not in routes[i]:\n                routes[i][j] = 0\n            if i not in routes[j]:\n                routes[j][i] = 0\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n            if j not in routes[i]:\n                routes[i][j] = 0\n            if i not in routes[j]:\n                routes[j][i] = 0\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n            if j not in routes[i]:\n                routes[i][j] = 0\n            if i not in routes[j]:\n                routes[j][i] = 0\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n            if j not in routes[i]:\n                routes[i][j] = 0\n            if i not in routes[j]:\n                routes[j][i] = 0\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n            if j not in routes[i]:\n                routes[i][j] = 0\n            if i not in routes[j]:\n                routes[j][i] = 0\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n            if j not in routes[i]:\n                routes[i][j] = 0\n            if i not in routes[j]:\n                routes[j][i] = 0\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n            if j not in routes[i]:\n                routes[i][j] = 0\n            if i not in routes[j]:\n                routes[j][i] = 0\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n            if j not in routes[i]:\n                routes[i][j] = 0\n            if i not in routes[j]:\n                routes[j][i] = 0\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n            if j not in routes[i]:\n                routes[i][j] = 0\n            if i not in routes[j]:\n                routes[j][i] = 0\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n            if j not in routes[i]:\n                routes[i][j] = 0\n            if i not in routes[j]:\n                routes[j][i] = 0\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n            if j not in routes[i]:\n                routes[i][j] = 0\n            if i not in routes[j]:\n                routes[j][i] = 0\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n            if j not in routes[i]:\n                routes[i][j] = 0\n            if i not in routes[j]:\n                routes[j][i] = 0\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n            if j not in routes[i]:\n                routes[i][j] = 0\n            if i not in routes[j]:\n                routes[j][i] = 0\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n            if j not in routes[i]:\n                routes[i][j] = 0\n            if i not in routes[j]:\n                routes[j][i] = 0\n    for i in range(n):\n        for j in range(n):\n"
    },
    {
        "number": 2788,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *sizes, k, x, a, b = [int(x) for x in stdin.split()]\n    sizes = [s for s in sizes if s <= 100]\n    if len(sizes) < n:\n        return 'impossible'\n    if k > x:\n        return 'impossible'\n    if a > b:\n        return 'impossible'\n    if a * b > k:\n        return 'impossible'\n    if a * b < k:\n        return 'impossible'\n    if a * b < k:\n        return 'impossible'\n    if a * b == k:\n        return a * b\n    if a * b > k:\n        return 'impossible'\n    if a * b < k:\n        return a * b\n    if a * b == k:\n        return a * b\n    if a * b > k:\n        return 'impossible'\n    if a * b < k:\n        return 'impossible'\n    if a * b == k:\n        return a * b\n    if a * b > k:\n        return 'impossible'\n    if a * b < k:\n        return 'impossible'\n    if a * b == k:\n        return a * b\n    if a * b > k:\n        return 'impossible'\n    if a * b < k:\n        return 'impossible'\n    if a * b == k:\n        return a * b\n    if a * b > k:\n        return 'impossible'\n    if a * b < k:\n        return 'impossible'\n    if a * b == k:\n        return a * b\n    if a * b > k:\n        return 'impossible'\n    if a * b < k:\n        return 'impossible'\n    if a * b == k:\n        return a * b\n    if a * b > k:\n        return 'impossible'\n    if a * b < k:\n        return 'impossible'\n    if a * b == k:\n        return a * b\n    if a * b > k:\n        return 'impossible'\n    if a * b < k:\n        return 'impossible'\n    if a * b == k:\n        return a * b\n    if a * b > k:\n        return 'impossible'\n    if a * b < k:\n        return 'impossible'\n    if a * b == k:\n        return a * b\n    if a * b > k:\n        return 'impossible'\n    if a * b < k:\n        return 'impossible'\n    if a * b == k:\n        return a * b\n    if a * b > k:\n        return 'impossible'\n    if a * b < k:\n        return 'impossible'\n    if a * b == k:\n        return a * b\n    if a * b > k:\n        return 'impossible'\n    if a * b < k:\n        return 'impossible'\n    if a * b == k:\n        return a * b\n    if a * b > k:\n        return 'impossible'\n    if a * b < k:\n        return 'impossible'\n    if a * b == k:\n        return a * b\n    if a * b > k:\n        return 'impossible'\n    if a * b < k:\n        return 'impossible'\n    if a * b == k:\n        return a * b\n    if a * b > k:\n        return 'impossible'\n    if a * b < k:\n        return 'impossible'\n    if a * b == k:\n        return a * b\n    if a * b > k:\n        return 'impossible'\n    if a * b < k:\n        return 'impossible'\n    if a * b == k:\n        return a * b\n    if a * b > k:\n        return 'impossible'\n    if a * b < k:\n        return 'impossible'\n    if a * b == k:\n        return a * b\n    if a * b > k:\n        return 'impossible'\n    if a * b < k:\n        return 'impossible'\n    if a * b == k:\n        return a * b\n    if a * b > k:\n        return 'impossible'\n    if a * b < k:\n        return 'impossible'\n    if a * b == k:\n        return a * b\n    if a * b > k:\n        return 'impossible'\n    if a * b < k:\n        return 'impossible'\n    if a * b == k:\n        return a * b\n    if a * b > k:\n        return 'impossible'\n    if a * b < k:\n        return 'impossible'\n    if a * b == k:\n        return a * b\n    if a * b > k:\n        return 'impossible'\n    if a * b < k:\n        return 'impossible'\n    if a * b == k:\n        return a * b\n    if a * b > k:\n        return 'impossible'\n    if a * b < k:\n        return 'impossible'\n    if a * b == k:\n        return a * b\n    if a * b > k:\n        return 'impossible'\n    if a * b < k:\n        return 'impossible'\n    if a * b == k:\n        return a * b\n    if a * b > k:\n        return 'impossible'\n    if a * b < k:\n        return 'impossible'\n    if a * b == k:\n        return a * b\n    if a * b > k:\n        return 'impossible'\n    if a * b < k:\n        return 'impossible'\n    if a * b == k:\n        return a * b\n    if a * b > k:\n        return 'impossible'\n    if a * b < k:\n        return 'impossible'\n    if a * b == k:\n        return a * b\n    if a * b > k:\n        return 'impossible'\n    if a * b < k:\n        return 'impossible'\n    if a * b == k:\n        return a * b\n    if a * b > k:\n        return 'impossible'\n    if a * b < k:\n        return 'impossible'\n    if a * b == k:\n        return a * b\n    if a * b > k:\n        return 'impossible'\n    if a * b < k:\n        return 'impossible'"
    },
    {
        "number": 2789,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"1\"\n    elif n == 2:\n        return \"2\"\n    elif n == 3:\n        return \"3\"\n    elif n == 4:\n        return \"4\"\n    elif n == 5:\n        return \"5\"\n    elif n == 6:\n        return \"6\"\n    elif n == 7:\n        return \"7\"\n    elif n == 8:\n        return \"8\"\n    elif n == 9:\n        return \"9\"\n    elif n == 10:\n        return \"10\"\n    elif n == 11:\n        return \"11\"\n    elif n == 12:\n        return \"12\"\n    elif n == 13:\n        return \"13\"\n    elif n == 14:\n        return \"14\"\n    elif n == 15:\n        return \"15\"\n    elif n == 16:\n        return \"16\"\n    elif n == 17:\n        return \"17\"\n    elif n == 18:\n        return \"18\"\n    elif n == 19:\n        return \"19\"\n    elif n == 20:\n        return \"20\"\n    elif n == 21:\n        return \"21\"\n    elif n == 22:\n        return \"22\"\n    elif n == 23:\n        return \"23\"\n    elif n == 24:\n        return \"24\"\n    elif n == 25:\n        return \"25\"\n    elif n == 26:\n        return \"26\"\n    elif n == 27:\n        return \"27\"\n    elif n == 28:\n        return \"28\"\n    elif n == 29:\n        return \"29\"\n    elif n == 30:\n        return \"30\"\n    elif n == 31:\n        return \"31\"\n    elif n == 32:\n        return \"32\"\n    elif n == 33:\n        return \"33\"\n    elif n == 34:\n        return \"34\"\n    elif n == 35:\n        return \"35\"\n    elif n == 36:\n        return \"36\"\n    elif n == 37:\n        return \"37\"\n    elif n == 38:\n        return \"38\"\n    elif n == 39:\n        return \"39\"\n    elif n == 40:\n        return \"40\"\n    elif n == 41:\n        return \"41\"\n    elif n == 42:\n        return \"42\"\n    elif n == 43:\n        return \"43\"\n    elif n == 44:\n        return \"44\"\n    elif n == 45:\n        return \"45\"\n    elif n == 46:\n        return \"46\"\n    elif n == 47:\n        return \"47\"\n    elif n == 48:\n        return \"48\"\n    elif n == 49:\n        return \"49\"\n    elif n == 50:\n        return \"50\"\n    elif n == 51:\n        return \"51\"\n    elif n == 52:\n        return \"52\"\n    elif n == 53:\n        return \"53\"\n    elif n == 54:\n        return \"54\"\n    elif n == 55:\n        return \"55\"\n    elif n == 56:\n        return \"56\"\n    elif n == 57:\n        return \"57\"\n    elif n == 58:\n        return \"58\"\n    elif n == 59:\n        return \"59\"\n    elif n == 60:\n        return \"60\"\n    elif n == 61:\n        return \"61\"\n    elif n == 62:\n        return \"62\"\n    elif n == 63:\n        return \"63\"\n    elif n == 64:\n        return \"64\"\n    elif n == 65:\n        return \"65\"\n    elif n == 66:\n        return \"66\"\n    elif n == 67:\n        return \"67\"\n    elif n == 68:\n        return \"68\"\n    elif n == 69:\n        return \"69\"\n    elif n == 70:\n        return \"70\"\n    elif n == 71:\n        return \"71\"\n    elif n == 72:\n        return \"72\"\n    elif n == 73:\n        return \"73\"\n    elif n == 74:\n        return \"74\"\n    elif n == 75:\n        return \"75\"\n    elif n == 76:\n        return \"76\"\n    elif n == 77:\n        return \"77\"\n    elif n == 78:\n        return \"78\"\n    elif n == 79:\n        return \"79\"\n    elif n == 80:\n        return \"80\"\n    elif n == 81:\n        return \"81\"\n    elif n == 82:\n        return \"82\"\n    elif n == 83:\n        return \"83\"\n    elif n == 84:\n        return \"84\"\n    elif n == 85:\n        return \"85\"\n    elif n == 86:\n        return \"86\"\n    elif n == 87:\n        return \"87\"\n    elif n == 88:\n        return \"88\"\n    elif n == 89:\n        return \"89\"\n    elif n == 90:\n        return \"90\"\n    elif n == 91:\n        return \"91\"\n    elif n == 92:\n        return \"92\"\n    elif n == 93:\n        return \"93\"\n    elif n == 94:\n        return \"94\"\n    elif n == 95:\n        return \"95\"\n    elif n == 96:\n        return \"96\"\n    elif n == 97:\n        return \"97\"\n    elif n == 98:\n        return \"98\"\n    elif n == 99:\n        return \"99\"\n    elif n == 100:\n        return \"100\"\n    elif n == 101:\n        return \"101\"\n    elif n == 102:\n        return \"102\"\n    elif n == 103:\n        return \"103\"\n    elif n == 104:\n        return \"104\"\n    elif n == 105:\n        return \"105\"\n    elif n == 106:\n        return \"106\"\n    elif n == 107:\n        return \"107\"\n    elif n == 108:\n        return \"108\"\n    elif n == 109:\n        return \"109\"\n    el"
    },
    {
        "number": 2790,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s, t = [int(x) for x in stdin.split()]\n    k = [int(x) for x in stdin.split()]\n    return '\\n'.join(str(x) for x in [solution_helper(n, s, t, k, i) for i in range(s)])\n\ndef"
    },
    {
        "number": 2791,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] / d == a[j] / d:\n                count += 1\n    return str(count)"
    },
    {
        "number": 2792,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    orders = [stdin.readline().strip() for _ in range(n)]\n    return '\\n'.join(str(solution_helper(order)) for order in orders)\n\ndef"
    },
    {
        "number": 2793,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s, t = [int(x) for x in stdin.split()]\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v, w = [int(x) for x in stdin.split()]\n        graph[u].append((v, w))\n    \n    def dfs(u: int, visited: set) -> int:\n        visited.add(u)\n        for v, w in graph[u]:\n            if v not in visited:\n                dfs(v, visited)\n        return sum(w for v, w in graph[u])\n    \n    def bfs(u: int, visited: set) -> int:\n        visited.add(u)\n        queue = deque([u])\n        while queue:\n            u = queue.popleft()\n            for v, w in graph[u]:\n                if v not in visited:\n                    visited.add(v)\n                    queue.append(v)\n        return sum(w for v, w in graph[u])\n    \n    def min_cut(u: int, visited: set) -> int:\n        visited.add(u)\n        min_cut = float('inf')\n        for v, w in graph[u]:\n            if v not in visited:\n                min_cut = min(min_cut, dfs(v, visited) + w)\n        return min_cut\n    \n    visited = set()\n    min_cut = float('inf')\n    for u in range(n):\n        if u not in visited:\n            min_cut = min(min_cut, min_cut(u, visited) + dfs(u, visited))\n    return str(min_cut)"
    },
    {
        "number": 2794,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    coworkers = [tuple(int(x) for x in stdin.split()) for _ in range(m)]\n    coworkers.sort(key=lambda x: x[1])\n    coworkers = [x[0] for x in coworkers]\n    coworkers = [coworkers[0]] + [coworkers[i] for i in range(1, len(coworkers)) if coworkers[i] - coworkers[i - 1] > 1]\n    coworkers = [coworkers[0]] + [coworkers[i] for i in range(1, len(coworkers)) if coworkers[i] - coworkers[i - 1] == 1]\n    coworkers = [coworkers[0]] + [coworkers[i] for i in range(1, len(coworkers)) if coworkers[i] - coworkers[i - 1] == 0]\n    coworkers = [coworkers[0]] + [coworkers[i] for i in range(1, len(coworkers)) if coworkers[i] - coworkers[i - 1] < 0]\n    coworkers = [coworkers[0]] + [coworkers[i] for i in range(1, len(coworkers)) if coworkers[i] - coworkers[i - 1] > 0]\n    coworkers = [coworkers[0]] + [coworkers[i] for i in range(1, len(coworkers)) if coworkers[i] - coworkers[i - 1] == 0]\n    coworkers = [coworkers[0]] + [coworkers[i] for i in range(1, len(coworkers)) if coworkers[i] - coworkers[i - 1] < 0]\n    coworkers = [coworkers[0]] + [coworkers[i] for i in range(1, len(coworkers)) if coworkers[i] - coworkers[i - 1] > 0]\n    coworkers = [coworkers[0]] + [coworkers[i] for i in range(1, len(coworkers)) if coworkers[i] - coworkers[i - 1] == 0]\n    coworkers = [coworkers[0]] + [coworkers[i] for i in range(1, len(coworkers)) if coworkers[i] - coworkers[i - 1] < 0]\n    coworkers = [coworkers[0]] + [coworkers[i] for i in range(1, len(coworkers)) if coworkers[i] - coworkers[i - 1] > 0]\n    coworkers = [coworkers[0]] + [coworkers[i] for i in range(1, len(coworkers)) if coworkers[i] - coworkers[i - 1] == 0]\n    coworkers = [coworkers[0]] + [coworkers[i] for i in range(1, len(coworkers)) if coworkers[i] - coworkers[i - 1] < 0]\n    coworkers = [coworkers[0]] + [coworkers[i] for i in range(1, len(coworkers)) if coworkers[i] - coworkers[i - 1] > 0]\n    coworkers = [coworkers[0]] + [coworkers[i] for i in range(1, len(coworkers)) if coworkers[i] - coworkers[i - 1] == 0]\n    coworkers = [coworkers[0]] + [coworkers[i] for i in range(1, len(coworkers)) if coworkers[i] - coworkers[i - 1] < 0]\n    coworkers = [coworkers[0]] + [coworkers[i] for i in range(1, len(coworkers)) if coworkers[i] - coworkers[i - 1] > 0]\n    coworkers = [coworkers[0]] + [coworkers[i] for i in range(1, len(coworkers)) if coworkers[i] - coworkers[i - 1] == 0]\n    coworkers = [coworkers[0]] + [coworkers[i] for i in range(1, len(coworkers)) if coworkers[i] - coworkers[i - 1] < 0]\n    coworkers = [coworkers[0]] + [coworkers[i] for i in range(1, len(coworkers)) if coworkers[i] - coworkers[i - 1] > 0]\n    coworkers = [coworkers[0]] + [coworkers[i] for i in range(1, len(coworkers)) if coworkers[i] - coworkers[i - 1] == 0]\n    coworkers = [coworkers[0]] + [coworkers[i] for i in range(1, len(coworkers)) if coworkers[i] - coworkers[i - 1] < 0]\n    coworkers = [coworkers[0]] + [coworkers[i] for i in range(1, len(coworkers)) if coworkers[i] - coworkers[i - 1] > 0]\n    coworkers = [coworkers[0]] + [coworkers[i] for i in range(1, len(coworkers)) if coworkers[i] - coworkers[i - 1] == 0]\n    coworkers = [coworkers[0]] + [coworkers[i] for i in range(1, len("
    },
    {
        "number": 2795,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, e, p = [int(x) for x in stdin.split()]\n    trees = [tuple(map(float, stdin.split())) for _ in range(n)]\n    cables = [tuple(map(int, stdin.split())) for _ in range(e)]\n    cables = sorted(cables, key=lambda x: x[1])\n    cables = sorted(cables, key=lambda x: x[0])\n    cables = sorted(cables, key=lambda x: x[1])\n    cables = sorted(cables, key=lambda x: x[0])\n    cables = sorted(cables, key=lambda x: x[1])\n    cables = sorted(cables, key=lambda x: x[0])\n    cables = sorted(cables, key=lambda x: x[1])\n    cables = sorted(cables, key=lambda x: x[0])\n    cables = sorted(cables, key=lambda x: x[1])\n    cables = sorted(cables, key=lambda x: x[0])\n    cables = sorted(cables, key=lambda x: x[1])\n    cables = sorted(cables, key=lambda x: x[0])\n    cables = sorted(cables, key=lambda x: x[1])\n    cables = sorted(cables, key=lambda x: x[0])\n    cables = sorted(cables, key=lambda x: x[1])\n    cables = sorted(cables, key=lambda x: x[0])\n    cables = sorted(cables, key=lambda x: x[1])\n    cables = sorted(cables, key=lambda x: x[0])\n    cables = sorted(cables, key=lambda x: x[1])\n    cables = sorted(cables, key=lambda x: x[0])\n    cables = sorted(cables, key=lambda x: x[1])\n    cables = sorted(cables, key=lambda x: x[0])\n    cables = sorted(cables, key=lambda x: x[1])\n    cables = sorted(cables, key=lambda x: x[0])\n    cables = sorted(cables, key=lambda x: x[1])\n    cables = sorted(cables, key=lambda x: x[0])\n    cables = sorted(cables, key=lambda x: x[1])\n    cables = sorted(cables, key=lambda x: x[0])\n    cables = sorted(cables, key=lambda x: x[1])\n    cables = sorted(cables, key=lambda x: x[0])\n    cables = sorted(cables, key=lambda x: x[1])\n    cables = sorted(cables, key=lambda x: x[0])\n    cables = sorted(cables, key=lambda x: x[1])\n    cables = sorted(cables, key=lambda x: x[0])\n    cables = sorted(cables, key=lambda x: x[1])\n    cables = sorted(cables, key=lambda x: x[0])\n    cables = sorted(cables, key=lambda x: x[1])\n    cables = sorted(cables, key=lambda x: x[0])\n    cables = sorted(cables, key=lambda x: x[1])\n    cables = sorted(cables, key=lambda x: x[0])\n    cables = sorted(cables, key=lambda x: x[1])\n    cables = sorted(cables, key=lambda x: x[0])\n    cables = sorted(cables, key=lambda x: x[1])\n    cables = sorted(cables, key=lambda x: x[0])\n    cables = sorted(cables, key=lambda x: x[1])\n    cables = sorted(cables, key=lambda x: x[0])\n    cables = sorted(cables, key=lambda x: x[1])\n    cables = sorted(cables, key=lambda x: x[0])\n    cables = sorted(cables, key=lambda x: x[1])\n    cables = sorted(cables, key=lambda x: x[0])\n    cables = sorted(cables, key=lambda x: x[1])\n    cables = sorted(cables, key=lambda x: x[0])\n    cables = sorted(cables, key=lambda x: x[1])\n    cables = sorted(cables, key=lambda x: x[0])\n    cables = sorted(cables, key=lambda x: x[1])\n    cables = sorted(cables, key=lambda x: x[0])\n    cables = sorted(cables, key=lambda x: x[1])\n    cables = sorted(cables, key=lambda x: x[0])\n    cables = sorted(cables, key=lambda x: x[1])\n    cables = sorted(cables, key=lambda x: x[0])\n    cables = sorted(cables, key=lambda x: x[1])\n    cables = sorted(cables, key=lambda x: x[0])\n    cables = sorted(cables, key=lambda x: x[1])\n    cables = sorted(cables, key=lambda x: x[0])\n    cables = sorted(cables, key=lambda x: x[1])\n    cables = sorted(cables, key=lambda x: x[0])\n    cables = sorted(cables, key=lambda x: x[1])\n    cables = sorted(cables, key=lambda x: x[0])\n    cables = sorted(cables, key=lambda x: x[1])\n    cables = sorted(cables, key=lambda x: x[0])\n    cables = sorted(cables, key=lambda x: x[1])\n    cables = sorted(cables, key=lambda x: x[0])\n    cables = sorted(cables, key=lambda x: x[1])\n    cables = sorted(cables, key=lambda x: x[0])\n    cables ="
    },
    {
        "number": 2796,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    planets = [int(x) for x in stdin.readline().strip().split()]\n    order = [int(x) for x in stdin.readline().strip().split()]\n    planets = [x for x in range(1, n + 1)]\n    order = [x for x in range(1, n + 1)]\n    order = [x for x in range(1, n + 1)]\n    order = [x for x in range(1, n + 1)]\n    order = [x for x in range(1, n + 1)]\n    order = [x for x in range(1, n + 1)]\n    order = [x for x in range(1, n + 1)]\n    order = [x for x in range(1, n + 1)]\n    order = [x for x in range(1, n + 1)]\n    order = [x for x in range(1, n + 1)]\n    order = [x for x in range(1, n + 1)]\n    order = [x for x in range(1, n + 1)]\n    order = [x for x in range(1, n + 1)]\n    order = [x for x in range(1, n + 1)]\n    order = [x for x in range(1, n + 1)]\n    order = [x for x in range(1, n + 1)]\n    order = [x for x in range(1, n + 1)]\n    order = [x for x in range(1, n + 1)]\n    order = [x for x in range(1, n + 1)]\n    order = [x for x in range(1, n + 1)]\n    order = [x for x in range(1, n + 1)]\n    order = [x for x in range(1, n + 1)]\n    order = [x for x in range(1, n + 1)]\n    order = [x for x in range(1, n + 1)]\n    order = [x for x in range(1, n + 1)]\n    order = [x for x in range(1, n + 1)]\n    order = [x for x in range(1, n + 1)]\n    order = [x for x in range(1, n + 1)]\n    order = [x for x in range(1, n + 1)]\n    order = [x for x in range(1, n + 1)]\n    order = [x for x in range(1, n + 1)]\n    order = [x for x in range(1, n + 1)]\n    order = [x for x in range(1, n + 1)]\n    order = [x for x in range(1, n + 1)]\n    order = [x for x in range(1, n + 1)]\n    order = [x for x in range(1, n + 1)]\n    order = [x for x in range(1, n + 1)]\n    order = [x for x in range(1, n + 1)]\n    order = [x for x in range(1, n + 1)]\n    order = [x for x in range(1, n + 1)]\n    order = [x for x in range(1, n + 1)]\n    order = [x for x in range(1, n + 1)]\n    order = [x for x in range(1, n + 1)]\n    order = [x for x in range(1, n + 1)]\n    order = [x for x in range(1, n + 1)]\n    order = [x for x in range(1, n + 1)]\n    order = [x for x in range(1, n + 1)]\n    order = [x for x in range(1, n + 1)]\n    order = [x for x in range(1, n + 1)]\n    order = [x for x in range(1, n + 1)]\n    order = [x for x in range(1, n + 1)]\n    order = [x for x in range(1, n + 1)]\n    order = [x for x in range(1, n + 1)]\n    order = [x for x in range(1, n + 1)]\n    order = [x for x in range(1, n + 1)]\n    order = [x for x in range(1, n + 1)]\n    order = [x for x in range(1, n + 1)]\n    order = [x for x in range(1, n + 1)]\n    order = [x for x in range(1, n + 1)]\n    order = [x for x in range(1, n + 1)]\n    order = [x for x in range(1, n + 1)]\n    order = [x for x in range(1, n + 1)]\n    order = [x for x in range(1, n + 1)]\n    order = [x for x in range(1, n + 1)]\n    order = [x for x in range(1, n + 1)]\n    order = [x for x in range(1, n + 1)]\n    order = [x for x in range(1, n + 1)]\n    order = [x for x in range(1, n + 1)]\n    order = [x for x in range(1, n + 1)]\n    order = [x for x in range(1, n + 1)]\n    order = [x for x in range(1, n + 1)]\n    order = [x for x in range(1, n + 1)]\n    order = [x for x in range(1, n + 1)]\n    order = [x for x in range(1, n + 1)]\n    order = [x for x in range(1, n + 1)]\n    order = [x for x in range(1, n + 1)]\n    order = [x for x in range(1, n + 1)]\n    order = [x for x in range(1, n + 1)]\n    order = [x for x in range(1, n + 1)]\n    order = [x for x in range(1, n + 1)]\n    order = [x for x in range(1, n + 1)]\n    order = [x for x in range(1, n + 1)]\n    order = [x for x in range(1, n + 1)]\n    order = [x for x in range(1, n + 1)]\n    order = [x for x in range(1, n + 1)]\n    order = [x for x in range(1, n + 1)]\n    order = [x"
    },
    {
        "number": 2797,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    return str(a * b)"
    },
    {
        "number": 2798,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2799,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, G, B, Y, S = [int(x) for x in stdin.split()]\n    if R + G + B + Y < 4:\n        return \"0\"\n    if S > 8:\n        return \"0\"\n    if R == 0 and G == 0 and B == 0 and Y == 0:\n        return \"1\"\n    if R == 0 and G == 0 and B == 0 and Y == 1:\n        return \"0\"\n    if R == 0 and G == 0 and B == 1 and Y == 0:\n        return \"0\"\n    if R == 0 and G == 0 and B == 1 and Y == 1:\n        return \"0\"\n    if R == 0 and G == 1 and B == 0 and Y == 0:\n        return \"0\"\n    if R == 0 and G == 1 and B == 0 and Y == 1:\n        return \"0\"\n    if R == 0 and G == 1 and B == 1 and Y == 0:\n        return \"0\"\n    if R == 0 and G == 1 and B == 1 and Y == 1:\n        return \"0\"\n    if R == 1 and G == 0 and B == 0 and Y == 0:\n        return \"0\"\n    if R == 1 and G == 0 and B == 0 and Y == 1:\n        return \"0\"\n    if R == 1 and G == 0 and B == 1 and Y == 0:\n        return \"0\"\n    if R == 1 and G == 0 and B == 1 and Y == 1:\n        return \"0\"\n    if R == 1 and G == 1 and B == 0 and Y == 0:\n        return \"0\"\n    if R == 1 and G == 1 and B == 0 and Y == 1:\n        return \"0\"\n    if R == 1 and G == 1 and B == 1 and Y == 0:\n        return \"0\"\n    if R == 1 and G == 1 and B == 1 and Y == 1:\n        return \"0\"\n    if R == 2 and G == 0 and B == 0 and Y == 0:\n        return \"0\"\n    if R == 2 and G == 0 and B == 0 and Y == 1:\n        return \"0\"\n    if R == 2 and G == 0 and B == 1 and Y == 0:\n        return \"0\"\n    if R == 2 and G == 0 and B == 1 and Y == 1:\n        return \"0\"\n    if R == 2 and G == 1 and B == 0 and Y == 0:\n        return \"0\"\n    if R == 2 and G == 1 and B == 0 and Y == 1:\n        return \"0\"\n    if R == 2 and G == 1 and B == 1 and Y == 0:\n        return \"0\"\n    if R == 2 and G == 1 and B == 1 and Y == 1:\n        return \"0\"\n    if R == 3 and G == 0 and B == 0 and Y == 0:\n        return \"0\"\n    if R == 3 and G == 0 and B == 0 and Y == 1:\n        return \"0\"\n    if R == 3 and G == 0 and B == 1 and Y == 0:\n        return \"0\"\n    if R == 3 and G == 0 and B == 1 and Y == 1:\n        return \"0\"\n    if R == 3 and G == 1 and B == 0 and Y == 0:\n        return \"0\"\n    if R == 3 and G == 1 and B == 0 and Y == 1:\n        return \"0\"\n    if R == 3 and G == 1 and B == 1 and Y == 0:\n        return \"0\"\n    if R == 3 and G == 1 and B == 1 and Y == 1:\n        return \"0\"\n    if R == 4 and G == 0 and B == 0 and Y == 0:\n        return \"0\"\n    if R == 4 and G == 0 and B == 0 and Y == 1:\n        return \"0\"\n    if R == 4 and G == 0 and B == 1 and Y == 0:\n        return \"0\"\n    if R == 4 and G == 0 and B == 1 and Y == 1:\n        return \"0\"\n    if R == 4 and G == 1 and B == 0 and Y == 0:\n        return \"0\"\n    if R == 4 and G == 1 and B == 0 and Y == 1:\n        return \"0\"\n    if R == 4 and G == 1 and B == 1 and Y == 0:\n        return \"0\"\n    if R == 4 and G == 1 and B == 1 and Y == 1:\n        return \"0\"\n    if R == 5 and G == 0 and B == 0 and Y == 0:\n        return \"0\"\n    if R == 5 and G == 0 and B == 0 and Y == 1:\n        return \"0\"\n    if R == 5 and G == 0 and B == 1 and Y == 0:\n        return \"0\"\n    if R == 5 and G == 0 and B == 1 and Y == 1:\n        return \"0\"\n    if R == 5 and G == 1 and B == 0 and Y == 0:\n        return \"0\"\n    if R == 5 and G == 1 and B == 0 and Y == 1:\n        return \"0\"\n    if R == 5 and G == 1 and B == 1 and Y == 0:\n        return \"0\"\n    if R == 5 and G == 1 and B == 1 and Y == 1:\n        return \"0\"\n    if R == 6 and G == 0 and B == 0 and Y == 0:\n        return \"0\"\n    if R == 6 and G == 0 and B == 0 and Y == 1:\n        return \"0\"\n    if R == 6 and G == 0 and B == 1 and Y"
    },
    {
        "number": 2800,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    p, k = [int(x) for x in stdin.split()]\n    cards = [int(x) for x in stdin.split()]\n    cards.sort(reverse=True)\n    if p == 1:\n        return \"Alice can win.\"\n    if k == 1:\n        return \"Bob will win.\"\n    if cards[0] > k:\n        return \"Bob will win.\"\n    if cards[0] == k:\n        return \"Alice can win.\"\n    if cards[0] < k:\n        return \"Alice will win.\"\n    return \"Bob will win.\""
    },
    {
        "number": 2801,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    satisfaction = [int(x) for x in stdin.split()]\n    connections = [[] for _ in range(n)]\n    for _ in range(m):\n        s, t = [int(x) for x in stdin.split()]\n        connections[s].append(t)\n        connections[t].append(s)\n    max_satisfaction = 0\n    for i in range(n):\n        satisfaction[i] *= len(connections[i])\n        max_satisfaction = max(max_satisfaction, satisfaction[i])\n    return str(max_satisfaction)"
    },
    {
        "number": 2802,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t1, t2, t3, t4 = [float(x) for x in stdin.split()]\n    t = float(stdin)\n    if t1 + t2 + t3 + t4 < t:\n        return \"impossible\"\n    if t1 + t2 + t3 + t4 == t:\n        return \"infinite\"\n    return str(t1 + t2 + t3 + t4 - t)"
    },
    {
        "number": 2803,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    animal = stdin.strip()\n    n = int(stdin.strip())\n    names = [stdin.strip() for _ in range(n)]\n    for name in names:\n        if name[0] == animal[0] and name[-1]!= animal[-1] and name not in names:\n            return name\n    return '?'"
    },
    {
        "number": 2804,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return''.join(filter(lambda x: len(x) >= a and len(x) <= b, stdin.split()))\n\nprint(solution(input()))\n"
    },
    {
        "number": 2805,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    counter = 0\n    for i in range(N - 1, 0, -1):\n        if N % i == 0:\n            counter += 1\n    return str(counter)"
    },
    {
        "number": 2806,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    c, t = [int(x) for x in stdin.split()]\n    chambers = [int(x) for x in stdin.split()]\n    chambers.sort()\n    chambers = [str(x) for x in chambers]\n    chambers =''.join(chambers)\n    return chambers"
    },
    {
        "number": 2807,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    stdin = stdin.split('\\n')\n    stdin = [x.strip() for x in stdin]\n    stdin = [x for x in stdin if x]\n    stdin = [x for x in stdin if len(x) > 1]\n    stdin = [x for x in stdin if len(x) % 2 == 0]\n    stdin = [x for x in stdin if len(x) > len(stdin[0])]\n    stdin = [x for x in stdin if len(x) > len(stdin[0])]\n    stdin = [x for x in stdin if len(x) > len(stdin[0])]\n    stdin = [x for x in stdin if len(x) > len(stdin[0])]\n    stdin = [x for x in stdin if len(x) > len(stdin[0])]\n    stdin = [x for x in stdin if len(x) > len(stdin[0])]\n    stdin = [x for x in stdin if len(x) > len(stdin[0])]\n    stdin = [x for x in stdin if len(x) > len(stdin[0])]\n    stdin = [x for x in stdin if len(x) > len(stdin[0])]\n    stdin = [x for x in stdin if len(x) > len(stdin[0])]\n    stdin = [x for x in stdin if len(x) > len(stdin[0])]\n    stdin = [x for x in stdin if len(x) > len(stdin[0])]\n    stdin = [x for x in stdin if len(x) > len(stdin[0])]\n    stdin = [x for x in stdin if len(x) > len(stdin[0])]\n    stdin = [x for x in stdin if len(x) > len(stdin[0])]\n    stdin = [x for x in stdin if len(x) > len(stdin[0])]\n    stdin = [x for x in stdin if len(x) > len(stdin[0])]\n    stdin = [x for x in stdin if len(x) > len(stdin[0])]\n    stdin = [x for x in stdin if len(x) > len(stdin[0])]\n    stdin = [x for x in stdin if len(x) > len(stdin[0])]\n    stdin = [x for x in stdin if len(x) > len(stdin[0])]\n    stdin = [x for x in stdin if len(x) > len(stdin[0])]\n    stdin = [x for x in stdin if len(x) > len(stdin[0])]\n    stdin = [x for x in stdin if len(x) > len(stdin[0])]\n    stdin = [x for x in stdin if len(x) > len(stdin[0])]\n    stdin = [x for x in stdin if len(x) > len(stdin[0])]\n    stdin = [x for x in stdin if len(x) > len(stdin[0])]\n    stdin = [x for x in stdin if len(x) > len(stdin[0])]\n    stdin = [x for x in stdin if len(x) > len(stdin[0])]\n    stdin = [x for x in stdin if len(x) > len(stdin[0])]\n    stdin = [x for x in stdin if len(x) > len(stdin[0])]\n    stdin = [x for x in stdin if len(x) > len(stdin[0])]\n    stdin = [x for x in stdin if len(x) > len(stdin[0])]\n    stdin = [x for x in stdin if len(x) > len(stdin[0])]\n    stdin = [x for x in stdin if len(x) > len(stdin[0])]\n    stdin = [x for x in stdin if len(x) > len(stdin[0])]\n    stdin = [x for x in stdin if len(x) > len(stdin[0])]\n    stdin = [x for x in stdin if len(x) > len(stdin[0])]\n    stdin = [x for x in stdin if len(x) > len(stdin[0])]\n    stdin = [x for x in stdin if len(x) > len(stdin[0])]\n    stdin = [x for x in stdin if len(x) > len(stdin[0])]\n    stdin = [x for x in stdin if len(x) > len(stdin[0])]\n    stdin = [x for x in stdin if len(x) > len(stdin[0])]\n    stdin = [x for x in stdin if len(x) > len(stdin[0])]\n    stdin = [x for x in stdin if len(x) > len(stdin[0])]\n    stdin = [x for x in stdin if len(x) > len(stdin[0])]\n    stdin = [x for x in stdin if len(x) > len(stdin[0])]\n    stdin = [x for x in stdin if len(x) > len(stdin[0])]\n    stdin = [x for x in stdin if len(x) > len(stdin[0])]\n    stdin = [x for x in stdin if len(x) > len(stdin[0])]\n    stdin = [x for x in stdin if len(x) > len(stdin[0])]\n    stdin = [x for x in stdin if len(x) > len(stdin[0])]\n    stdin = [x for x in stdin if len(x) > len(stdin[0])]\n    stdin = [x for x in stdin if len(x) > len(stdin[0])]\n    stdin = [x for x in stdin if len(x) > len(stdin[0])]\n    stdin = [x for x in stdin if len(x) > len(stdin[0])]\n    stdin = [x for x in stdin if len(x) > len(stdin[0])]\n    stdin = [x for x in stdin if len(x) > len(stdin[0])]\n    stdin = [x for x in stdin if len(x) >"
    },
    {
        "number": 2808,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    p = [int(x) for x in stdin.split()]\n    carts = [list(map(int, stdin.split())) for _ in range(m)]\n    carts.sort(key=lambda x: x[0])\n    carts.sort(key=lambda x: x[1])\n    carts.sort(key=lambda x: x[2])\n    carts.sort(key=lambda x: x[3])\n    carts.sort(key=lambda x: x[0] + x[1] + x[2] + x[3])\n    carts.sort(key=lambda x: x[0] + x[1] + x[2] + x[3] + x[4])\n    carts.sort(key=lambda x: x[0] + x[1] + x[2] + x[3] + x[4] + x[5])\n    carts.sort(key=lambda x: x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6])\n    carts.sort(key=lambda x: x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7])\n    carts.sort(key=lambda x: x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8])\n    carts.sort(key=lambda x: x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9])\n    carts.sort(key=lambda x: x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[10])\n    carts.sort(key=lambda x: x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[10] + x[11])\n    carts.sort(key=lambda x: x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[10] + x[11] + x[12])\n    carts.sort(key=lambda x: x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[10] + x[11] + x[12] + x[13])\n    carts.sort(key=lambda x: x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[10] + x[11] + x[12] + x[13] + x[14])\n    carts.sort(key=lambda x: x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[10] + x[11] + x[12] + x[13] + x[14] + x[15])\n    carts.sort(key=lambda x: x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[10] + x[11] + x[12] + x[13] + x[14] + x[15] + x[16])\n    carts.sort(key=lambda x: x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[10] + x[11] + x[12] + x[13] + x[14] + x[15] + x[16] + x[17])\n    carts.sort(key=lambda x: x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[10] + x[11] + x[12] + x[13] + x[14] + x[15] + x[16] + x[17] + x[18])\n    carts.sort(key=lambda x: x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[10] + x[11] + x[12] + x[13] + x[14] + x[15] + x[16] + x[17] + x[18] + x[19])\n    carts.sort(key=lambda x: x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[10] + x[11] + x[12] + x[13] + x[14] + x[15] + x[16] + x[17] + x[18] + x[19] + x[20])\n    carts.sort(key=lambda x: x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x"
    },
    {
        "number": 2809,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    s = stdin[-1]\n    return str(bin(k * (1 << n) - 1).count('1'))"
    },
    {
        "number": 2810,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    m = int(stdin.readline().strip())\n    connections = [set() for _ in range(n)]\n    for _ in range(m):\n        s, t = map(int, stdin.readline().strip().split())\n        connections[s].add(t)\n        connections[t].add(s)\n    simple_loops = 0\n    for i in range(n):\n        if i in connections[i]:\n            simple_loops += 1\n    return str(simple_loops)"
    },
    {
        "number": 2811,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    nodes = [int(x) for x in stdin.split()]\n    parents = [int(x) for x in stdin.split()]\n    reds = [int(x) for x in stdin.split()]\n    return str(solution_helper(nodes, parents, reds, 0, 0))\n\ndef"
    },
    {
        "number": 2812,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    return min(sorted(string.ascii_lowercase), key=lambda x: sum(abs(ord(a) - ord(b)) for a, b in zip(x, 'z' + x)))"
    },
    {
        "number": 2813,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    syllables = int(stdin.readline().strip())\n    words = stdin.readline().strip().split()\n    phrases = [stdin.readline().strip().split() for _ in range(3)]\n    for phrase in phrases:\n        for word in phrase:\n            if len(word) > syllables:\n                return \"come back next year\"\n    return \"haiku\""
    },
    {
        "number": 2814,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    sigma0 = [int(x) for x in stdin.readline().strip().split()]\n    sigma1 = [int(x) for x in stdin.readline().strip().split()]\n    return \"0\" if sigma0 == sigma1 else \"1\""
    },
    {
        "number": 2815,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, e = [int(x) for x in stdin.split()]\n    return str(len([x for x in range(n) if bin(x)[2:].count('1') == e]))"
    },
    {
        "number": 2816,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2817,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    e, e_success, e_failure = [int(x) for x in stdin.split()]\n    if e_success > e_failure:\n        e_success, e_failure = e_failure, e_success\n    if e_success == e:\n        return '0'\n    if e_success == 0:\n        return '{:.6f}'.format(e_failure / e)\n    if e_failure == 0:\n        return '{:.6f}'.format(e_success / e)\n    if e_success == e_failure:\n        return '{:.6f}'.format(e_success / e)\n    if e_success < e_failure:\n        return '{:.6f}'.format(e_success / e)\n    if e_success > e_failure:\n        return '{:.6f}'.format(e_failure / e)\n    return '{:.6f}'.format(e_success / e)"
    },
    {
        "number": 2818,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    h = list(map(int, stdin.readline().strip().split()))\n    h.sort()\n    h.reverse()\n    print(h)\n    ans = 0\n    for i in range(n):\n        if h[i] > i:\n            ans += h[i] - i\n    return str(ans)"
    },
    {
        "number": 2819,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a, b = [int(x) for x in stdin.readline().strip().split()]\n    b, c = [int(x) for x in stdin.readline().strip().split()]\n    board = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            board[i][j] = stdin.readline().strip()\n    board[a][b] = 'A'\n    board[c][c] = 'B'\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == 'A':\n                a_x, a_y = i, j\n            if board[i][j] == 'B':\n                b_x, b_y = i, j\n    moves = []\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == 'A':\n                moves.append((i, j))\n    moves = list(set(moves))\n    moves.sort(key=lambda x: x[0] + x[1])\n    for i in range(len(moves)):\n        if moves[i][0] == a_x and moves[i][1] == a_y:\n            moves[i] = (a_x, a_y)\n        if moves[i][0] == b_x and moves[i][1] == b_y:\n            moves[i] = (b_x, b_y)\n    for i in range(len(moves)):\n        if moves[i][0] == a_x and moves[i][1] == a_y:\n            moves[i] = (a_x, a_y)\n        if moves[i][0] == b_x and moves[i][1] == b_y:\n            moves[i] = (b_x, b_y)\n    if moves[0][0] == a_x and moves[0][1] == a_y:\n        moves[0] = (a_x, a_y)\n    if moves[0][0] == b_x and moves[0][1] == b_y:\n        moves[0] = (b_x, b_y)\n    if moves[0][0] == a_x and moves[0][1] == a_y:\n        moves[0] = (a_x, a_y)\n    if moves[0][0] == b_x and moves[0][1] == b_y:\n        moves[0] = (b_x, b_y)\n    if moves[0][0] == a_x and moves[0][1] == a_y:\n        moves[0] = (a_x, a_y)\n    if moves[0][0] == b_x and moves[0][1] == b_y:\n        moves[0] = (b_x, b_y)\n    if moves[0][0] == a_x and moves[0][1] == a_y:\n        moves[0] = (a_x, a_y)\n    if moves[0][0] == b_x and moves[0][1] == b_y:\n        moves[0] = (b_x, b_y)\n    if moves[0][0] == a_x and moves[0][1] == a_y:\n        moves[0] = (a_x, a_y)\n    if moves[0][0] == b_x and moves[0][1] == b_y:\n        moves[0] = (b_x, b_y)\n    if moves[0][0] == a_x and moves[0][1] == a_y:\n        moves[0] = (a_x, a_y)\n    if moves[0][0] == b_x and moves[0][1] == b_y:\n        moves[0] = (b_x, b_y)\n    if moves[0][0] == a_x and moves[0][1] == a_y:\n        moves[0] = (a_x, a_y)\n    if moves[0][0] == b_x and moves[0][1] == b_y:\n        moves[0] = (b_x, b_y)\n    if moves[0][0] == a_x and moves[0][1] == a_y:\n        moves[0] = (a_x, a_y)\n    if moves[0][0] == b_x and moves[0][1] == b_y:\n        moves[0] = (b_x, b_y)\n    if moves[0][0] == a_x and moves[0][1] == a_y:\n        moves[0] = (a_x, a_y)\n    if moves[0][0] == b_x and moves[0][1] == b_y:\n        moves[0] = (b_x, b_y)\n    if moves[0][0] == a_x and moves[0][1] == a_y:\n        moves[0] = (a_x, a_y)\n    if moves[0]["
    },
    {
        "number": 2820,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    pass"
    },
    {
        "number": 2821,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    Q, M, S, L = [int(x) for x in stdin.split()]\n    if M == 1:\n        return str(Q)\n    if S == 0:\n        return str(Q)\n    if Q == 0:\n        return str(Q)\n    if Q == 1:\n        return str(Q)\n    if Q == 2:\n        return str(Q)\n    if Q == 3:\n        return str(Q)\n    if Q == 4:\n        return str(Q)\n    if Q == 5:\n        return str(Q)\n    if Q == 6:\n        return str(Q)\n    if Q == 7:\n        return str(Q)\n    if Q == 8:\n        return str(Q)\n    if Q == 9:\n        return str(Q)\n    if Q == 10:\n        return str(Q)\n    if Q == 11:\n        return str(Q)\n    if Q == 12:\n        return str(Q)\n    if Q == 13:\n        return str(Q)\n    if Q == 14:\n        return str(Q)\n    if Q == 15:\n        return str(Q)\n    if Q == 16:\n        return str(Q)\n    if Q == 17:\n        return str(Q)\n    if Q == 18:\n        return str(Q)\n    if Q == 19:\n        return str(Q)\n    if Q == 20:\n        return str(Q)\n    if Q == 21:\n        return str(Q)\n    if Q == 22:\n        return str(Q)\n    if Q == 23:\n        return str(Q)\n    if Q == 24:\n        return str(Q)\n    if Q == 25:\n        return str(Q)\n    if Q == 26:\n        return str(Q)\n    if Q == 27:\n        return str(Q)\n    if Q == 28:\n        return str(Q)\n    if Q == 29:\n        return str(Q)\n    if Q == 30:\n        return str(Q)\n    if Q == 31:\n        return str(Q)\n    if Q == 32:\n        return str(Q)\n    if Q == 33:\n        return str(Q)\n    if Q == 34:\n        return str(Q)\n    if Q == 35:\n        return str(Q)\n    if Q == 36:\n        return str(Q)\n    if Q == 37:\n        return str(Q)\n    if Q == 38:\n        return str(Q)\n    if Q == 39:\n        return str(Q)\n    if Q == 40:\n        return str(Q)\n    if Q == 41:\n        return str(Q)\n    if Q == 42:\n        return str(Q)\n    if Q == 43:\n        return str(Q)\n    if Q == 44:\n        return str(Q)\n    if Q == 45:\n        return str(Q)\n    if Q == 46:\n        return str(Q)\n    if Q == 47:\n        return str(Q)\n    if Q == 48:\n        return str(Q)\n    if Q == 49:\n        return str(Q)\n    if Q == 50:\n        return str(Q)\n    if Q == 51:\n        return str(Q)\n    if Q == 52:\n        return str(Q)\n    if Q == 53:\n        return str(Q)\n    if Q == 54:\n        return str(Q)\n    if Q == 55:\n        return str(Q)\n    if Q == 56:\n        return str(Q)\n    if Q == 57:\n        return str(Q)\n    if Q == 58:\n        return str(Q)\n    if Q == 59:\n        return str(Q)\n    if Q == 60:\n        return str(Q)\n    if Q == 61:\n        return str(Q)\n    if Q == 62:\n        return str(Q)\n    if Q == 63:\n        return str(Q)\n    if Q == 64:\n        return str(Q)\n    if Q == 65:\n        return str(Q)\n    if Q == 66:\n        return str(Q)\n    if Q == 67:\n        return str(Q)\n    if Q == 68:\n        return str(Q)\n    if Q == 69:\n        return str(Q)\n    if Q == 70:\n        return str(Q)\n    if Q == 71:\n        return str(Q)\n    if Q == 72:\n        return str(Q)\n    if Q == 73:\n        return str(Q)\n    if Q == 74:\n        return str(Q)\n    if Q == 75:\n        return str(Q)\n    if Q == 76:\n        return str(Q)\n    if Q == 77:\n        return str(Q)\n    if Q == 78:\n        return str(Q)\n    if Q == 79:\n        return str(Q)\n    if Q == 80:\n        return str(Q)\n    if Q == 81:\n        return str(Q)\n    if Q == 82:\n        return str(Q)\n    if Q == 83:\n        return str(Q)\n    if Q == 84:\n        return str(Q)\n    if Q == 85:\n        return str(Q)\n    if Q == 86:\n        return str(Q)\n    if Q == 87:\n        return str(Q)\n    if Q == 88:\n        return str(Q)\n    if Q == 89:\n        return str(Q)\n    if Q == 90:\n        return str(Q)\n    if Q == 91:\n        return str(Q)\n    if Q == 92:\n        return str(Q)\n    if Q == 93:\n        return str(Q)\n    if Q == 94:\n        return str(Q)\n    if Q == 95:\n        return str(Q)\n    if Q == 96:\n        return str(Q)\n    if Q == 97:\n        return str(Q)\n    if Q == 98:\n        return str(Q)\n    if Q == 99:\n        return str(Q)\n    if Q == 100:\n        return str(Q)\n    if Q == 101:\n        return str(Q)\n    if Q == 102:\n        return str(Q)\n    if Q == 103:\n        return str(Q)\n    if Q == 104:\n        return str(Q)\n    if Q == 105:\n        return str(Q)\n    if Q == 106:\n        return str(Q)\n    if Q == 107:\n        return str(Q)\n    if Q == 108:\n        return str(Q)\n    if Q == 109:\n        return str(Q)\n    if Q == 110:\n        return str(Q)\n    if Q == 111:\n        return str(Q)\n    if Q == 112:\n        return str(Q)\n    if Q == 113:\n        return str(Q)\n    if Q == 114:\n        return str(Q)\n    "
    },
    {
        "number": 2822,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x_b, y_b = [int(x) for x in stdin.split()]\n    x_1, y_1, x_2, y_2 = [int(x) for x in stdin.split()]\n    if x_1 > x_2:\n        x_1, x_2 = x_2, x_1\n    if y_1 > y_2:\n        y_1, y_2 = y_2, y_1\n    if x_1 <= x_b <= x_2 and y_1 <= y_b <= y_2:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 2823,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2824,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    weights = [int(stdin.readline().strip()) for _ in range(n)]\n    weights.sort()\n    target = sum(weights) / 2\n    if target % 2 == 0:\n        return target\n    else:\n        return target + 1"
    },
    {
        "number": 2825,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    times = [int(x) for x in stdin.readline().strip().split()]\n    return str(min(times))"
    },
    {
        "number": 2826,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    q, n, d = [int(x) for x in stdin.split()]\n    f1, f2 = [int(x) for x in stdin.split()]\n    f1, f2 = f1 % q, f2 % q\n    if f1 == f2:\n        return 0\n    if f1 == 0:\n        return 2 ** n - 1\n    if f2 == 0:\n        return 2 ** n - 1\n    return 2 ** n - 2"
    },
    {
        "number": 2827,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split()]\n    V = [set() for _ in range(N)]\n    E = [set() for _ in range(N)]\n    for _ in range(M):\n        u, v = [int(x) for x in stdin.split()]\n        V[u - 1].add(v - 1)\n        V[v - 1].add(u - 1)\n        E[u - 1].add((v - 1, u - 1))\n        E[v - 1].add((u - 1, v - 1))\n    V = [list(x) for x in V]\n    E = [list(x) for x in E]\n    V = [sorted(x) for x in V]\n    E = [sorted(x) for x in E]\n    V = [tuple(x) for x in V]\n    E = [tuple(x) for x in E]\n    V = [tuple(sorted(x)) for x in V]\n    E = [tuple(sorted(x)) for x in E]\n    V = [tuple(sorted(x)) for x in V]\n    E = [tuple(sorted(x)) for x in E]\n    V = [tuple(sorted(x)) for x in V]\n    E = [tuple(sorted(x)) for x in E]\n    V = [tuple(sorted(x)) for x in V]\n    E = [tuple(sorted(x)) for x in E]\n    V = [tuple(sorted(x)) for x in V]\n    E = [tuple(sorted(x)) for x in E]\n    V = [tuple(sorted(x)) for x in V]\n    E = [tuple(sorted(x)) for x in E]\n    V = [tuple(sorted(x)) for x in V]\n    E = [tuple(sorted(x)) for x in E]\n    V = [tuple(sorted(x)) for x in V]\n    E = [tuple(sorted(x)) for x in E]\n    V = [tuple(sorted(x)) for x in V]\n    E = [tuple(sorted(x)) for x in E]\n    V = [tuple(sorted(x)) for x in V]\n    E = [tuple(sorted(x)) for x in E]\n    V = [tuple(sorted(x)) for x in V]\n    E = [tuple(sorted(x)) for x in E]\n    V = [tuple(sorted(x)) for x in V]\n    E = [tuple(sorted(x)) for x in E]\n    V = [tuple(sorted(x)) for x in V]\n    E = [tuple(sorted(x)) for x in E]\n    V = [tuple(sorted(x)) for x in V]\n    E = [tuple(sorted(x)) for x in E]\n    V = [tuple(sorted(x)) for x in V]\n    E = [tuple(sorted(x)) for x in E]\n    V = [tuple(sorted(x)) for x in V]\n    E = [tuple(sorted(x)) for x in E]\n    V = [tuple(sorted(x)) for x in V]\n    E = [tuple(sorted(x)) for x in E]\n    V = [tuple(sorted(x)) for x in V]\n    E = [tuple(sorted(x)) for x in E]\n    V = [tuple(sorted(x)) for x in V]\n    E = [tuple(sorted(x)) for x in E]\n    V = [tuple(sorted(x)) for x in V]\n    E = [tuple(sorted(x)) for x in E]\n    V = [tuple(sorted(x)) for x in V]\n    E = [tuple(sorted(x)) for x in E]\n    V = [tuple(sorted(x)) for x in V]\n    E = [tuple(sorted(x)) for x in E]\n    V = [tuple(sorted(x)) for x in V]\n    E = [tuple(sorted(x)) for x in E]\n    V = [tuple(sorted(x)) for x in V]\n    E = [tuple(sorted(x)) for x in E]\n    V = [tuple(sorted(x)) for x in V]\n    E = [tuple(sorted(x)) for x in E]\n    V = [tuple(sorted(x)) for x in V]\n    E = [tuple(sorted(x)) for x in E]\n    V = [tuple(sorted(x)) for x in V]\n    E = [tuple(sorted(x)) for x in E]\n    V = [tuple(sorted(x)) for x in V]\n    E = [tuple(sorted(x)) for x in E]\n    V = [tuple(sorted(x)) for x in V]\n    E = [tuple(sorted(x)) for x in E]\n    V = [tuple(sorted(x)) for x in V]\n    E = [tuple(sorted(x)) for x in E]\n    V = [tuple(sorted(x)) for x in V]\n    E = [tuple("
    },
    {
        "number": 2828,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    words = [stdin.readline().strip() for _ in range(n)]\n    a = [int(x) for x in stdin.readline().strip().split()]\n    words.sort()\n    a.sort()\n    if words == a:\n        return \"DA\"\n    else:\n        return \"NE\"\n"
    },
    {
        "number": 2829,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 2830,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    grid = [list(map(int, stdin.split())) for _ in range(n)]\n    moves = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 0:\n                continue\n            if i == 0 and j == 0:\n                continue\n            if i == 0:\n                moves += j\n                continue\n            if j == 0:\n                moves += i\n                continue\n            moves += 1\n    return str(moves)"
    },
    {
        "number": 2831,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    vehicles = [Vehicle(int(stdin.readline().strip().split()[0]), int(stdin.readline().strip().split()[1])) for _ in range(n)]\n    vehicles.sort(key=lambda vehicle: vehicle.position)\n    vehicles.sort(key=lambda vehicle: vehicle.velocity)\n    vehicles.sort(key=lambda vehicle: abs(vehicle.position - vehicles[0].position))\n    return str(vehicles[0].position - vehicles[-1].position)"
    },
    {
        "number": 2832,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    d, k = [int(x) for x in stdin.split()]\n    reds = [int(x) for x in stdin.split()]\n    reds.sort()\n    reds = [0] + reds\n    reds = reds + [reds[-1] + 1]\n    reds = [reds[i] - reds[i - 1] for i in range(1, len(reds))]\n    reds = [reds[i] ** 2 for i in range(len(reds))]\n    reds = sum(reds)\n    return str(reds)"
    },
    {
        "number": 2833,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, C = map(int, stdin.split())\n    table = [stdin.strip() for stdin in stdin.splitlines()[1:]]\n    K = int(stdin.splitlines()[-1])\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    K %= 360\n    K = 360 - K\n    "
    },
    {
        "number": 2834,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    l = [4, 7]\n    i = 0\n    while len(l) < k:\n        l.append(l[i] + 1)\n        l.append(l[i] - 1)\n        i += 1\n    return str(l[k - 1])"
    },
    {
        "number": 2835,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split(\"\\n\")\n    s = s.strip()\n    t = t.strip()\n    return str(len(s) - len(s.find(t)) + len(t))"
    },
    {
        "number": 2836,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    boys = [int(x) for x in stdin.readline().split()]\n    A, B = [int(x) for x in stdin.readline().split()]\n    boys.sort()\n    min_diff = float('inf')\n    for i in range(N):\n        diff = abs(boys[i] - i)\n        if diff < min_diff:\n            min_diff = diff\n            ans = i\n    return str(ans)"
    },
    {
        "number": 2837,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    res = stdin.readline().strip()\n    res = res.replace('(', '-').replace(')', '|')\n    res = res.split('-')\n    res = [int(x) for x in res]\n    res = sum(res)\n    res = res / (1 / res)\n    return str(res)"
    },
    {
        "number": 2838,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_helper(stdin))\n\ndef"
    },
    {
        "number": 2839,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    V, E = [int(x) for x in stdin.split()]\n    graph = [[] for _ in range(V)]\n    for _ in range(E):\n        u, v, w = [int(x) for x in stdin.split()]\n        graph[u].append((v, w))\n    s, t = [int(x) for x in stdin.split()]\n    return str(len(shortest_paths(graph, s, t)))\n\ndef"
    },
    {
        "number": 2840,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    cards = stdin.readline().strip().split()\n    moves = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if cards[i][0] > cards[j][0]:\n                moves += 1\n    return str(moves)"
    },
    {
        "number": 2841,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1 or n > 200000:\n        return \"Invalid Input\"\n    colors = [\"Blue\", \"Orange\", \"Pink\", \"Green\", \"Red\", \"Yellow\"]\n    colors_dict = {\n        \"Blue\": 0,\n        \"Orange\": 1,\n        \"Pink\": 2,\n        \"Green\": 3,\n        \"Red\": 4,\n        \"Yellow\": 5\n    }\n    colors_list = [0] * 6\n    for i in range(n):\n        colors_list[colors_dict[stdin[i]]] += 1\n    for i in range(6):\n        if colors_list[i] == 0:\n            return str(i)\n    return \"Invalid Input\""
    },
    {
        "number": 2842,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    grid = [list(stdin.strip()) for _ in range(n)]\n    return str(solution_recursive(grid, k))\n\ndef"
    },
    {
        "number": 2843,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    words = [stdin.strip() for stdin in stdin.split('\\n')]\n    words = set(words)\n    max_size = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if is_swap_free(words, words[i], words[j]):\n                max_size = max(max_size, len(words[i]) * len(words[j]))\n    return str(max_size)\n\ndef"
    },
    {
        "number": 2844,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, C = [int(x) for x in stdin.split()]\n    forest = [list(stdin.strip()) for _ in range(R)]\n    for row in range(R):\n        for col in range(C):\n            if forest[row][col] == 'D':\n                Drow, Dcol = row, col\n            elif forest[row][col] == 'S':\n                Srow, Scol = row, col\n    if Drow == Srow and Dcol == Scol:\n        return '0'\n    if Drow == Srow:\n        return str(abs(Dcol - Scol) + 1)\n    if Dcol == Scol:\n        return str(abs(Drow - Srow) + 1)\n    if Drow > Srow:\n        return str(abs(Drow - Srow) + 1)\n    if Drow < Srow:\n        return str(abs(Drow - Srow) + 1)\n    if Dcol > Scol:\n        return str(abs(Dcol - Scol) + 1)\n    if Dcol < Scol:\n        return str(abs(Dcol - Scol) + 1)\n    return 'KAKTUS'"
    },
    {
        "number": 2845,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, K = [int(x) for x in stdin.split()]\n    K = [int(x) for x in stdin.split()]\n    return str(perimeter(R, K))\n\ndef"
    },
    {
        "number": 2846,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    citations = [int(stdin.readline().strip()) for _ in range(n)]\n    h_index = 0\n    for i in range(n):\n        if citations[i] >= h_index:\n            h_index = citations[i]\n    return str(h_index)"
    },
    {
        "number": 2847,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    songs = [int(x) for x in stdin.split()]\n    songs.sort()\n    songs = [str(x) for x in songs]\n    return '\\n'.join(songs)"
    },
    {
        "number": 2848,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, R, K, X0, A, B = [int(x) for x in stdin.split()]\n    X = [0] * R\n    for i in range(R):\n        X[i] = (A * X[i - 1] + B) % N\n    if X[R - 1] == 0:\n        return \"OVERFLOW\"\n    else:\n        a = 0\n        for i in range(R):\n            a = (53 * a + X[i]) % 199933\n        return str(a)"
    },
    {
        "number": 2849,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(solution_helper(n))\n\ndef"
    },
    {
        "number": 2850,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    w = [int(x) for x in stdin.split()]\n    w.sort()\n    w.reverse()\n    print(w)\n    print(n, k)\n    print(w)\n    print(w[0:k])\n    print(w[k:])\n    print(w[0:k])\n    print(w[k:])\n    print(w[0:k])\n    print(w[k:])\n    print(w[0:k])\n    print(w[k:])\n    print(w[0:k])\n    print(w[k:])\n    print(w[0:k])\n    print(w[k:])\n    print(w[0:k])\n    print(w[k:])\n    print(w[0:k])\n    print(w[k:])\n    print(w[0:k])\n    print(w[k:])\n    print(w[0:k])\n    print(w[k:])\n    print(w[0:k])\n    print(w[k:])\n    print(w[0:k])\n    print(w[k:])\n    print(w[0:k])\n    print(w[k:])\n    print(w[0:k])\n    print(w[k:])\n    print(w[0:k])\n    print(w[k:])\n    print(w[0:k])\n    print(w[k:])\n    print(w[0:k])\n    print(w[k:])\n    print(w[0:k])\n    print(w[k:])\n    print(w[0:k])\n    print(w[k:])\n    print(w[0:k])\n    print(w[k:])\n    print(w[0:k])\n    print(w[k:])\n    print(w[0:k])\n    print(w[k:])\n    print(w[0:k])\n    print(w[k:])\n    print(w[0:k])\n    print(w[k:])\n    print(w[0:k])\n    print(w[k:])\n    print(w[0:k])\n    print(w[k:])\n    print(w[0:k])\n    print(w[k:])\n    print(w[0:k])\n    print(w[k:])\n    print(w[0:k])\n    print(w[k:])\n    print(w[0:k])\n    print(w[k:])\n    print(w[0:k])\n    print(w[k:])\n    print(w[0:k])\n    print(w[k:])\n    print(w[0:k])\n    print(w[k:])\n    print(w[0:k])\n    print(w[k:])\n    print(w[0:k])\n    print(w[k:])\n    print(w[0:k])\n    print(w[k:])\n    print(w[0:k])\n    print(w[k:])\n    print(w[0:k])\n    print(w[k:])\n    print(w[0:k])\n    print(w[k:])\n    print(w[0:k])\n    print(w[k:])\n    print(w[0:k])\n    print(w[k:])\n    print(w[0:k])\n    print(w[k:])\n    print(w[0:k])\n    print(w[k:])\n    print(w[0:k])\n    print(w[k:])\n    print(w[0:k])\n    print(w[k:])\n    print(w[0:k])\n    print(w[k:])\n    print(w[0:k])\n    print(w[k:])\n    print(w[0:k])\n    print(w[k:])\n    print(w[0:k])\n    print(w[k:])\n    print(w[0:k])\n    print(w[k:])\n    print(w[0:k])\n    print(w[k:])\n    print(w[0:k])\n    print(w[k:])\n    print(w[0:k])\n    print(w[k:])\n    print(w[0:k])\n    print(w[k:])\n    print(w[0:k])\n    print(w[k:])\n    print(w[0:k])\n    print(w[k:])\n    print(w[0:k])\n    print(w[k:])\n    print(w[0:k])\n    print(w[k:])\n    print(w[0:k])\n    print(w[k:])\n    print(w[0:k])\n    print(w[k:])\n    print(w[0:k])\n    print(w[k:])\n    print(w[0:k])\n    print(w[k:])\n    print(w[0:k])\n    print(w[k:])\n    print(w[0:k])\n    print(w[k:])\n    print(w[0:k])\n    print(w[k:])\n    print(w[0:k])\n    print(w[k:])\n    print(w[0:k])\n    print(w[k:])\n    print(w[0:k])\n    print(w[k:])\n    print(w[0:k])\n    print(w[k:])\n    print(w[0:k])\n    print(w[k:])\n    print(w[0:k])\n    print(w[k:])\n    print(w[0:k])\n    print(w[k:])\n    print(w[0:k])\n    print(w[k:])\n    print(w[0:k])\n    print(w[k:])\n    print(w[0:k])\n    print(w[k:])\n    print(w[0:k])\n    print(w[k:])\n    print(w[0:k])\n    print(w[k:])\n    print(w[0:k])\n    print(w[k:])\n    print(w[0:k])\n    print(w[k:])\n    print(w[0:k])\n    print(w[k:])\n    print(w[0:k])\n    print(w[k:])\n    print(w[0:k])\n    print(w[k:])\n    print(w[0:k])\n    print(w[k:])\n    print(w[0:k])\n    print(w[k:])\n    print(w[0:k])\n    print(w[k:])\n    print(w[0:k])\n    print(w[k:])\n    print(w[0:k])\n    print(w[k:])\n    print(w[0:k])\n    print(w[k:])\n    print("
    },
    {
        "number": 2851,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n    b = [int(x) for x in stdin.readline().strip().split()]\n    a.sort()\n    b.sort()\n    a.reverse()\n    b.reverse()\n    for i in range(n):\n        a[i] = str(a[i])\n        b[i] = str(b[i])\n    a = \"\".join(a)\n    b = \"\".join(b)\n    a = int(a)\n    b = int(b)\n    while a!= 0 and b!= 0:\n        if a > b:\n            a %= b\n        else:\n            b %= a\n    return str(a + b)\n\nprint(solution(input()))\n"
    },
    {
        "number": 2852,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    probs = [int(x) for x in stdin.readline().strip().split()]\n    probs = [x / 100 for x in probs]\n    probs = [1 - x for x in probs]\n    probs = [x ** 2 for x in probs]\n    probs = [x / sum(probs) for x in probs]\n    probs = [x * 100 for x in probs]\n    probs = [x / 100 for x in probs]\n    probs = [x ** 2 for x in probs]\n    probs = [x / sum(probs) for x in probs]\n    probs = [x * 100 for x in probs]\n    probs = [x / 100 for x in probs]\n    probs = [x ** 2 for x in probs]\n    probs = [x / sum(probs) for x in probs]\n    probs = [x * 100 for x in probs]\n    probs = [x / 100 for x in probs]\n    probs = [x ** 2 for x in probs]\n    probs = [x / sum(probs) for x in probs]\n    probs = [x * 100 for x in probs]\n    probs = [x / 100 for x in probs]\n    probs = [x ** 2 for x in probs]\n    probs = [x / sum(probs) for x in probs]\n    probs = [x * 100 for x in probs]\n    probs = [x / 100 for x in probs]\n    probs = [x ** 2 for x in probs]\n    probs = [x / sum(probs) for x in probs]\n    probs = [x * 100 for x in probs]\n    probs = [x / 100 for x in probs]\n    probs = [x ** 2 for x in probs]\n    probs = [x / sum(probs) for x in probs]\n    probs = [x * 100 for x in probs]\n    probs = [x / 100 for x in probs]\n    probs = [x ** 2 for x in probs]\n    probs = [x / sum(probs) for x in probs]\n    probs = [x * 100 for x in probs]\n    probs = [x / 100 for x in probs]\n    probs = [x ** 2 for x in probs]\n    probs = [x / sum(probs) for x in probs]\n    probs = [x * 100 for x in probs]\n    probs = [x / 100 for x in probs]\n    probs = [x ** 2 for x in probs]\n    probs = [x / sum(probs) for x in probs]\n    probs = [x * 100 for x in probs]\n    probs = [x / 100 for x in probs]\n    probs = [x ** 2 for x in probs]\n    probs = [x / sum(probs) for x in probs]\n    probs = [x * 100 for x in probs]\n    probs = [x / 100 for x in probs]\n    probs = [x ** 2 for x in probs]\n    probs = [x / sum(probs) for x in probs]\n    probs = [x * 100 for x in probs]\n    probs = [x / 100 for x in probs]\n    probs = [x ** 2 for x in probs]\n    probs = [x / sum(probs) for x in probs]\n    probs = [x * 100 for x in probs]\n    probs = [x / 100 for x in probs]\n    probs = [x ** 2 for x in probs]\n    probs = [x / sum(probs) for x in probs]\n    probs = [x * 100 for x in probs]\n    probs = [x / 100 for x in probs]\n    probs = [x ** 2 for x in probs]\n    probs = [x / sum(probs) for x in probs]\n    probs = [x * 100 for x in probs]\n    probs = [x / 100 for x in probs]\n    probs = [x ** 2 for x in probs]\n    probs = [x / sum(probs) for x in probs]\n    probs = [x * 100 for x in probs]\n    probs = [x / 100 for x in probs]\n    probs = [x ** 2 for x in probs]\n    probs = [x / sum(probs) for x in probs]\n    probs = [x * 100 for x in probs]\n    probs = [x / 100 for x in probs]\n    probs = [x ** 2 for x in probs]\n    probs = [x / sum(probs) for x in probs]\n    probs = [x * 100 for x in probs]\n    probs = [x / 100 for x in probs]\n    probs = [x ** 2 for x in probs]\n    probs = [x / sum(probs) for x in probs]\n    probs = [x * 100 for x in probs]\n    probs = [x / 100 for x in probs]\n    probs = [x ** 2 for x in probs]\n    probs = [x / sum(probs) for x in probs]\n    probs = [x * 100 for x in probs]\n    probs = [x / 100 for x in probs]\n    probs = [x ** 2 for x in probs]\n    probs = [x / sum(probs) for x in probs]\n    probs = [x * 100 for x in probs]\n    probs = [x / 100 for x in probs]\n    probs = [x ** 2 for x in probs]\n    probs = [x / sum(probs) for x in"
    },
    {
        "number": 2853,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    houses = [int(x) for x in stdin.split()]\n    houses.sort()\n    connected = [False] * n\n    for i in range(m):\n        a, b = [int(x) for x in stdin.split()]\n        connected[a - 1] = True\n        connected[b - 1] = True\n    for i in range(n):\n        if not connected[i]:\n            print(i + 1)\n    return \"Connected\""
    },
    {
        "number": 2854,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    atoms = [None] * n\n    for i in range(n):\n        x, y = [int(x) for x in stdin.split()]\n        if x == -1 and y == -1:\n            atoms[i] = None\n        else:\n            atoms[i] = (x, y)\n    bonds = [None] * m\n    for i in range(m):\n        a, b = [int(x) for x in stdin.split()]\n        bonds[i] = (a, b)\n    return '\\n'.join(str(x) for x in atoms)"
    },
    {
        "number": 2855,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        k, l = [int(x) for x in stdin.split()]\n        graph[k].append(l)\n        graph[l].append(k)\n    visited = [False] * n\n    visited[0] = True\n    queue = [0]\n    time = 0\n    while queue:\n        node = queue.pop(0)\n        time += 1\n        for neighbor in graph[node]:\n            if not visited[neighbor]:\n                visited[neighbor] = True\n                queue.append(neighbor)\n    return str(time)"
    },
    {
        "number": 2856,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    a = s.count('A')\n    b = s.count('B')\n    if a > b:\n        return str(a - b)\n    else:\n        return str(b - a)"
    },
    {
        "number": 2857,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    points = []\n    for _ in range(n):\n        x, y = map(int, stdin.readline().split())\n        points.append((x, y))\n    return str(solution_recursive(points))\n\ndef"
    },
    {
        "number": 2858,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    m = int(stdin.readline().strip())\n    mafia = [int(stdin.readline().strip()) for _ in range(m)]\n    mafia.sort()\n    mafia.reverse()\n    mafia_set = set(mafia)\n    mafia_set.remove(mafia[0])\n    mafia_set.remove(mafia[1])\n    mafia_set.remove(mafia[2])\n    mafia_set.remove(mafia[3])\n    mafia_set.remove(mafia[4])\n    mafia_set.remove(mafia[5])\n    mafia_set.remove(mafia[6])\n    mafia_set.remove(mafia[7])\n    mafia_set.remove(mafia[8])\n    mafia_set.remove(mafia[9])\n    mafia_set.remove(mafia[10])\n    mafia_set.remove(mafia[11])\n    mafia_set.remove(mafia[12])\n    mafia_set.remove(mafia[13])\n    mafia_set.remove(mafia[14])\n    mafia_set.remove(mafia[15])\n    mafia_set.remove(mafia[16])\n    mafia_set.remove(mafia[17])\n    mafia_set.remove(mafia[18])\n    mafia_set.remove(mafia[19])\n    mafia_set.remove(mafia[20])\n    mafia_set.remove(mafia[21])\n    mafia_set.remove(mafia[22])\n    mafia_set.remove(mafia[23])\n    mafia_set.remove(mafia[24])\n    mafia_set.remove(mafia[25])\n    mafia_set.remove(mafia[26])\n    mafia_set.remove(mafia[27])\n    mafia_set.remove(mafia[28])\n    mafia_set.remove(mafia[29])\n    mafia_set.remove(mafia[30])\n    mafia_set.remove(mafia[31])\n    mafia_set.remove(mafia[32])\n    mafia_set.remove(mafia[33])\n    mafia_set.remove(mafia[34])\n    mafia_set.remove(mafia[35])\n    mafia_set.remove(mafia[36])\n    mafia_set.remove(mafia[37])\n    mafia_set.remove(mafia[38])\n    mafia_set.remove(mafia[39])\n    mafia_set.remove(mafia[40])\n    mafia_set.remove(mafia[41])\n    mafia_set.remove(mafia[42])\n    mafia_set.remove(mafia[43])\n    mafia_set.remove(mafia[44])\n    mafia_set.remove(mafia[45])\n    mafia_set.remove(mafia[46])\n    mafia_set.remove(mafia[47])\n    mafia_set.remove(mafia[48])\n    mafia_set.remove(mafia[49])\n    mafia_set.remove(mafia[50])\n    mafia_set.remove(mafia[51])\n    mafia_set.remove(mafia[52])\n    mafia_set.remove(mafia[53])\n    mafia_set.remove(mafia[54])\n    mafia_set.remove(mafia[55])\n    mafia_set.remove(mafia[56])\n    mafia_set.remove(mafia[57])\n    mafia_set.remove(mafia[58])\n    mafia_set.remove(mafia[59])\n    mafia_set.remove(mafia[60])\n    mafia_set.remove(mafia[61])\n    mafia_set.remove(mafia[62])\n    mafia_set.remove(mafia[63])\n    mafia_set.remove(mafia[64])\n    mafia_set.remove(mafia[65])\n    mafia_set.remove(mafia[66])\n    mafia_set.remove(mafia[67])\n    mafia_set.remove(mafia[68])\n    mafia_set.remove(mafia[69])\n    mafia_set.remove(mafia[70])\n    mafia_set.remove(mafia[71])\n    mafia_set.remove(mafia[72])\n    mafia_set.remove(mafia[73])\n    mafia_set.remove(mafia[74])\n    mafia_set.remove(mafia[75])\n    mafia_set.remove(mafia[76])\n    mafia_set.remove(mafia[77])\n    mafia_set.remove(mafia[78])\n    mafia_set.remove(mafia[79])\n    mafia_set.remove(mafia[80])\n    mafia_set.remove(mafia[81])\n    mafia_set.remove(mafia[82])\n    mafia_set.remove(mafia[83])\n    mafia_set.remove(mafia[84])\n    mafia_set.remove(mafia[85])\n    mafia_set.remove(mafia[86])\n    mafia_set.remove(mafia[87])\n    mafia_set.remove(mafia[88])\n    mafia_set.remove(mafia[89])\n    mafia_set.remove(mafia[90])\n    mafia_set.remove(mafia[91])\n    mafia_set.remove(mafia[92])\n    mafia_set.remove(mafia[93])\n    mafia_set.remove(mafia[94])\n    mafia_set.remove(mafia[95])\n    mafia_set.remove(mafia[96])\n    mafia_set.remove(mafia[97])\n    mafia_set.remove(mafia[98])\n    mafia_set.remove(mafia[99])\n    mafia_set.remove(mafia[100])\n    mafia_set.remove(mafia[101])\n    mafia_set.remove(mafia[102])\n    mafia_set.remove(mafia[103])\n    mafia_set.remove(mafia[104])\n    mafia_set.remove(mafia[105])\n    mafia_set.remove(mafia[106])\n    mafia_set.remove(mafia[107])\n    mafia_set.remove(mafia[108])\n    mafia_set.remove(mafia[109])\n    mafia_set.remove(mafia[110])\n    mafia_set.remove(mafia[111])\n    mafia_set.remove(mafia[112"
    },
    {
        "number": 2859,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, r1 = [int(x) for x in stdin.split()]\n    x2, y2, r2 = [int(x) for x in stdin.split()]\n    x3, y3, r3 = [int(x) for x in stdin.split()]\n    xv, yv, rv = [int(x) for x in stdin.split()]\n    if (x1 - x2) ** 2 + (y1 - y2) ** 2 < (r1 + r2) ** 2:\n        return \"1\"\n    if (x1 - x3) ** 2 + (y1 - y3) ** 2 < (r1 + r3) ** 2:\n        return \"1\"\n    if (x2 - x3) ** 2 + (y2 - y3) ** 2 < (r2 + r3) ** 2:\n        return \"1\"\n    if (xv - x1) ** 2 + (yv - y1) ** 2 < (rv + r1) ** 2:\n        return \"1\"\n    if (xv - x2) ** 2 + (yv - y2) ** 2 < (rv + r2) ** 2:\n        return \"1\"\n    if (xv - x3) ** 2 + (yv - y3) ** 2 < (rv + r3) ** 2:\n        return \"1\"\n    if (xv - x1) ** 2 + (yv - y1) ** 2 < (rv + r1) ** 2:\n        return \"1\"\n    if (xv - x2) ** 2 + (yv - y2) ** 2 < (rv + r2) ** 2:\n        return \"1\"\n    if (xv - x3) ** 2 + (yv - y3) ** 2 < (rv + r3) ** 2:\n        return \"1\"\n    if (xv - x1) ** 2 + (yv - y1) ** 2 < (rv + r1) ** 2:\n        return \"1\"\n    if (xv - x2) ** 2 + (yv - y2) ** 2 < (rv + r2) ** 2:\n        return \"1\"\n    if (xv - x3) ** 2 + (yv - y3) ** 2 < (rv + r3) ** 2:\n        return \"1\"\n    if (xv - x1) ** 2 + (yv - y1) ** 2 < (rv + r1) ** 2:\n        return \"1\"\n    if (xv - x2) ** 2 + (yv - y2) ** 2 < (rv + r2) ** 2:\n        return \"1\"\n    if (xv - x3) ** 2 + (yv - y3) ** 2 < (rv + r3) ** 2:\n        return \"1\"\n    if (xv - x1) ** 2 + (yv - y1) ** 2 < (rv + r1) ** 2:\n        return \"1\"\n    if (xv - x2) ** 2 + (yv - y2) ** 2 < (rv + r2) ** 2:\n        return \"1\"\n    if (xv - x3) ** 2 + (yv - y3) ** 2 < (rv + r3) ** 2:\n        return \"1\"\n    if (xv - x1) ** 2 + (yv - y1) ** 2 < (rv + r1) ** 2:\n        return \"1\"\n    if (xv - x2) ** 2 + (yv - y2) ** 2 < (rv + r2) ** 2:\n        return \"1\"\n    if (xv - x3) ** 2 + (yv - y3) ** 2 < (rv + r3) ** 2:\n        return \"1\"\n    if (xv - x1) ** 2 + (yv - y1) ** 2 < (rv + r1) ** 2:\n        return \"1\"\n    if (xv - x2) ** 2 + (yv - y2) ** 2 < (rv + r2) ** 2:\n        return \"1\"\n    if (xv - x3) ** 2 + (yv - y3) ** 2 < (rv + r3) ** 2:\n        return \"1\"\n    if (xv - x1) ** 2 + (yv - y1) ** 2 < (rv + r1) ** 2:\n        return \"1\"\n    if (xv - x2) ** 2 + (yv - y2) ** 2 < (rv + r2) ** 2:\n        return \"1\"\n    if (xv - x3) ** 2 + (yv - y3) ** 2 < (rv + r3) ** 2:\n        return \"1\"\n    if (xv - x1) ** 2 + (yv - y1) ** 2 < (rv + r1) ** 2:\n        return \"1\"\n    if (xv - x2) ** 2 + (yv - y2) ** 2 < (rv + r2) ** 2:\n        return \"1\"\n    if (xv - x3) ** 2 + (yv - y3) ** 2 < (rv + r3) ** 2:\n        return \"1\"\n    if (xv - x1) ** 2 + (yv - y1) ** 2 < (rv + r1) ** 2:\n        return \"1\"\n    if (xv - x2) ** 2 + (yv - y2) ** 2 < (rv + r2) ** 2:\n        return \"1\"\n    if (xv - x3) ** 2 + (yv - y3) ** 2 < (rv + r3) ** 2:\n        return \"1\"\n    if (xv - x1) ** 2 + (yv - y1) ** 2 < (rv + r1) ** 2:\n        return \"1\"\n    if (xv - x2) ** 2 + (yv - y2)"
    },
    {
        "number": 2860,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n, d, w = [int(x) for x in lines[0].split()]\n    lines = lines[1:]\n    lines = [x.strip() for x in lines]\n    lines = [x.split() for x in lines]\n    lines = [[x[0].upper()] + x[1:] for x in lines]\n    lines = [''.join(x) for x in lines]\n    lines = [x.ljust(d, '.') for x in lines]\n    lines = [x.rjust(d, '.') for x in lines]\n    lines = [x.center(d, '.') for x in lines]\n    lines = [x.ljust(d,'') for x in lines]\n    lines = [x.rjust(d,'') for x in lines]\n    lines = [x.strip() for x in lines]\n    lines = [x.split() for x in lines]\n    lines = [[x[0].upper()] + x[1:] for x in lines]\n    lines = [''.join(x) for x in lines]\n    lines = [x.ljust(d, '.') for x in lines]\n    lines = [x.rjust(d, '.') for x in lines]\n    lines = [x.center(d, '.') for x in lines]\n    lines = [x.ljust(d,'') for x in lines]\n    lines = [x.rjust(d,'') for x in lines]\n    lines = [x.strip() for x in lines]\n    lines = [x.split() for x in lines]\n    lines = [[x[0].upper()] + x[1:] for x in lines]\n    lines = [''.join(x) for x in lines]\n    lines = [x.ljust(d, '.') for x in lines]\n    lines = [x.rjust(d, '.') for x in lines]\n    lines = [x.center(d, '.') for x in lines]\n    lines = [x.ljust(d,'') for x in lines]\n    lines = [x.rjust(d,'') for x in lines]\n    lines = [x.strip() for x in lines]\n    lines = [x.split() for x in lines]\n    lines = [[x[0].upper()] + x[1:] for x in lines]\n    lines = [''.join(x) for x in lines]\n    lines = [x.ljust(d, '.') for x in lines]\n    lines = [x.rjust(d, '.') for x in lines]\n    lines = [x.center(d, '.') for x in lines]\n    lines = [x.ljust(d,'') for x in lines]\n    lines = [x.rjust(d,'') for x in lines]\n    lines = [x.strip() for x in lines]\n    lines = [x.split() for x in lines]\n    lines = [[x[0].upper()] + x[1:] for x in lines]\n    lines = [''.join(x) for x in lines]\n    lines = [x.ljust(d, '.') for x in lines]\n    lines = [x.rjust(d, '.') for x in lines]\n    lines = [x.center(d, '.') for x in lines]\n    lines = [x.ljust(d,'') for x in lines]\n    lines = [x.rjust(d,'') for x in lines]\n    lines = [x.strip() for x in lines]\n    lines = [x.split() for x in lines]\n    lines = [[x[0].upper()] + x[1:] for x in lines]\n    lines = [''.join(x) for x in lines]\n    lines = [x.ljust(d, '.') for x in lines]\n    lines = [x.rjust(d, '.') for x in lines]\n    lines = [x.center(d, '.') for x in lines]\n    lines = [x.ljust(d,'') for x in lines]\n    lines = [x.rjust(d,'') for x in lines]\n    lines = [x.strip() for x in lines]\n    lines = [x.split() for x in lines]\n    lines = [[x[0].upper()] + x[1:] for x in lines]\n    lines = [''.join(x) for x in lines]\n    lines = [x.ljust(d, '.') for x in lines]\n    lines = [x.rjust(d, '.') for x in lines]\n    lines = [x.center(d, '.') for x in lines]\n    lines = [x.ljust(d,'') for x in lines]\n    lines = [x.rjust(d,'') for x in lines]\n    lines = [x.strip() for x in lines]\n    lines = [x.split() for x in lines]\n    lines = [[x[0].upper()] + x[1:] for x in lines]\n    lines = [''.join(x) for x in lines]\n    lines = [x.ljust(d, '.') for x in lines]\n    lines = [x.rjust(d, '.') for x in lines]\n    lines = [x.center(d, '.') for x in lines]\n    lines = [x.ljust(d,'') for x in lines]\n    lines = [x.rjust(d,'') for x in lines]\n    lines = [x.strip() for x in lines]\n    lines = [x.split() for x in lines]\n    lines = [[x[0].upper()] + x[1:] for x in lines]\n    lines = [''.join(x) for x in lines]\n    lines = [x.ljust(d, '.') for x in lines]\n    lines = [x.rjust(d, '.') for x in"
    },
    {
        "number": 2861,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2862,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split()]\n    materials = [int(x) for x in stdin.split()]\n    dependencies = [[] for _ in range(N)]\n    for _ in range(M):\n        u, v, w = [int(x) for x in stdin.split()]\n        dependencies[u].append((v, w))\n    # print(dependencies)\n    # print(materials)\n    # print(N, M)\n    # print(dependencies)\n    # print(materials)\n    # print(N, M)\n    # print(dependencies)\n    # print(materials)\n    # print(N, M)\n    # print(dependencies)\n    # print(materials)\n    # print(N, M)\n    # print(dependencies)\n    # print(materials)\n    # print(N, M)\n    # print(dependencies)\n    # print(materials)\n    # print(N, M)\n    # print(dependencies)\n    # print(materials)\n    # print(N, M)\n    # print(dependencies)\n    # print(materials)\n    # print(N, M)\n    # print(dependencies)\n    # print(materials)\n    # print(N, M)\n    # print(dependencies)\n    # print(materials)\n    # print(N, M)\n    # print(dependencies)\n    # print(materials)\n    # print(N, M)\n    # print(dependencies)\n    # print(materials)\n    # print(N, M)\n    # print(dependencies)\n    # print(materials)\n    # print(N, M)\n    # print(dependencies)\n    # print(materials)\n    # print(N, M)\n    # print(dependencies)\n    # print(materials)\n    # print(N, M)\n    # print(dependencies)\n    # print(materials)\n    # print(N, M)\n    # print(dependencies)\n    # print(materials)\n    # print(N, M)\n    # print(dependencies)\n    # print(materials)\n    # print(N, M)\n    # print(dependencies)\n    # print(materials)\n    # print(N, M)\n    # print(dependencies)\n    # print(materials)\n    # print(N, M)\n    # print(dependencies)\n    # print(materials)\n    # print(N, M)\n    # print(dependencies)\n    # print(materials)\n    # print(N, M)\n    # print(dependencies)\n    # print(materials)\n    # print(N, M)\n    # print(dependencies)\n    # print(materials)\n    # print(N, M)\n    # print(dependencies)\n    # print(materials)\n    # print(N, M)\n    # print(dependencies)\n    # print(materials)\n    # print(N, M)\n    # print(dependencies)\n    # print(materials)\n    # print(N, M)\n    # print(dependencies)\n    # print(materials)\n    # print(N, M)\n    # print(dependencies)\n    # print(materials)\n    # print(N, M)\n    # print(dependencies)\n    # print(materials)\n    # print(N, M)\n    # print(dependencies)\n    # print(materials)\n    # print(N, M)\n    # print(dependencies)\n    # print(materials)\n    # print(N, M)\n    # print(dependencies)\n    # print(materials)\n    # print(N, M)\n    # print(dependencies)\n    # print(materials)\n    # print(N, M)\n    # print(dependencies)\n    # print(materials)\n    # print(N, M)\n    # print(dependencies)\n    # print(materials)\n    # print(N, M)\n    # print(dependencies)\n    # print(materials)\n    # print(N, M)\n    # print(dependencies)\n    # print(materials)\n    # print(N, M)\n    # print(dependencies)\n    # print(materials)\n    # print(N, M)\n    # print(dependencies)\n    # print(materials)\n    # print(N, M)\n    # print(dependencies)\n    # print(materials)\n    # print(N, M)\n    # print(dependencies)\n    # print(materials)\n    # print(N, M)\n    # print(dependencies)\n    # print(materials)\n    # print(N, M)\n    # print(dependencies)\n    # print(materials)\n    # print(N, M)\n    # print(dependencies)\n    # print(materials)\n    # print(N, M)\n    # print(dependencies)\n    # print(materials)\n    # print(N, M)\n    # print(dependencies)\n    # print(materials)\n    # print(N, M)\n    # print(dependencies)\n    # print(materials)\n    # print(N, M)\n    # print(dependencies)\n    # print(materials)\n    # print(N, M)\n    # print(dependencies)\n    # print(materials)\n    # print(N, M)\n    # print(dependencies)\n    # print(materials)\n    # print(N, M)\n    # print(dependencies)\n    # print(materials)\n    # print(N, M)\n    # print"
    },
    {
        "number": 2863,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_naive(stdin))\n\ndef"
    },
    {
        "number": 2864,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2865,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    # print(stdin)\n    # print(stdin.split('\\n'))\n    # print(stdin.split('\\n')[0])\n    # print(stdin.split('\\n')[1])\n    # print(stdin.split('\\n')[2])\n    # print(stdin.split('\\n')[3])\n    # print(stdin.split('\\n')[4])\n    # print(stdin.split('\\n')[5])\n    # print(stdin.split('\\n')[6])\n    # print(stdin.split('\\n')[7])\n    # print(stdin.split('\\n')[8])\n    # print(stdin.split('\\n')[9])\n    # print(stdin.split('\\n')[10])\n    # print(stdin.split('\\n')[11])\n    # print(stdin.split('\\n')[12])\n    # print(stdin.split('\\n')[13])\n    # print(stdin.split('\\n')[14])\n    # print(stdin.split('\\n')[15])\n    # print(stdin.split('\\n')[16])\n    # print(stdin.split('\\n')[17])\n    # print(stdin.split('\\n')[18])\n    # print(stdin.split('\\n')[19])\n    # print(stdin.split('\\n')[20])\n    # print(stdin.split('\\n')[21])\n    # print(stdin.split('\\n')[22])\n    # print(stdin.split('\\n')[23])\n    # print(stdin.split('\\n')[24])\n    # print(stdin.split('\\n')[25])\n    # print(stdin.split('\\n')[26])\n    # print(stdin.split('\\n')[27])\n    # print(stdin.split('\\n')[28])\n    # print(stdin.split('\\n')[29])\n    # print(stdin.split('\\n')[30])\n    # print(stdin.split('\\n')[31])\n    # print(stdin.split('\\n')[32])\n    # print(stdin.split('\\n')[33])\n    # print(stdin.split('\\n')[34])\n    # print(stdin.split('\\n')[35])\n    # print(stdin.split('\\n')[36])\n    # print(stdin.split('\\n')[37])\n    # print(stdin.split('\\n')[38])\n    # print(stdin.split('\\n')[39])\n    # print(stdin.split('\\n')[40])\n    # print(stdin.split('\\n')[41])\n    # print(stdin.split('\\n')[42])\n    # print(stdin.split('\\n')[43])\n    # print(stdin.split('\\n')[44])\n    # print(stdin.split('\\n')[45])\n    # print(stdin.split('\\n')[46])\n    # print(stdin.split('\\n')[47])\n    # print(stdin.split('\\n')[48])\n    # print(stdin.split('\\n')[49])\n    # print(stdin.split('\\n')[50])\n    # print(stdin.split('\\n')[51])\n    # print(stdin.split('\\n')[52])\n    # print(stdin.split('\\n')[53])\n    # print(stdin.split('\\n')[54])\n    # print(stdin.split('\\n')[55])\n    # print(stdin.split('\\n')[56])\n    # print(stdin.split('\\n')[57])\n    # print(stdin.split('\\n')[58])\n    # print(stdin.split('\\n')[59])\n    # print(stdin.split('\\n')[60])\n    # print(stdin.split('\\n')[61])\n    # print(stdin.split('\\n')[62])\n    # print(stdin.split('\\n')[63])\n    # print(stdin.split('\\n')[64])\n    # print(stdin.split('\\n')[65])\n    # print(stdin.split('\\n')[66])\n    # print(stdin.split('\\n')[67])\n    # print(stdin.split('\\n')[68])\n    # print(stdin.split('\\n')[69])\n    # print(stdin.split('\\n')[70])\n    # print(stdin.split('\\n')[71])\n    # print(stdin.split('\\n')[72])\n    # print(stdin.split('\\n')[73])\n    # print(stdin.split('\\n')[74])\n    # print(stdin.split('\\n')[75])\n    # print(stdin.split('\\n')[76])\n    # print(stdin.split('\\n')[77])\n    # print(stdin.split('\\n')[78])\n    # print(stdin.split('\\n')[79])\n    # print(stdin.split('\\n')[80])\n    # print(stdin.split('\\n')[81])\n    # print(stdin.split('\\n')[82])\n    # print(stdin.split('\\n')[83])\n    # print(stdin.split('\\n')[84])\n"
    },
    {
        "number": 2866,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_01(stdin))\n\ndef"
    },
    {
        "number": 2867,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    V = list(map(int, stdin.readline().strip().split()))\n    C = list(map(int, stdin.readline().strip().split()))\n    C = [0] + C\n    V = [0] + V\n    C = [0] + C\n    V = [0] + V\n    C = [0] + C\n    V = [0] + V\n    C = [0] + C\n    V = [0] + V\n    C = [0] + C\n    V = [0] + V\n    C = [0] + C\n    V = [0] + V\n    C = [0] + C\n    V = [0] + V\n    C = [0] + C\n    V = [0] + V\n    C = [0] + C\n    V = [0] + V\n    C = [0] + C\n    V = [0] + V\n    C = [0] + C\n    V = [0] + V\n    C = [0] + C\n    V = [0] + V\n    C = [0] + C\n    V = [0] + V\n    C = [0] + C\n    V = [0] + V\n    C = [0] + C\n    V = [0] + V\n    C = [0] + C\n    V = [0] + V\n    C = [0] + C\n    V = [0] + V\n    C = [0] + C\n    V = [0] + V\n    C = [0] + C\n    V = [0] + V\n    C = [0] + C\n    V = [0] + V\n    C = [0] + C\n    V = [0] + V\n    C = [0] + C\n    V = [0] + V\n    C = [0] + C\n    V = [0] + V\n    C = [0] + C\n    V = [0] + V\n    C = [0] + C\n    V = [0] + V\n    C = [0] + C\n    V = [0] + V\n    C = [0] + C\n    V = [0] + V\n    C = [0] + C\n    V = [0] + V\n    C = [0] + C\n    V = [0] + V\n    C = [0] + C\n    V = [0] + V\n    C = [0] + C\n    V = [0] + V\n    C = [0] + C\n    V = [0] + V\n    C = [0] + C\n    V = [0] + V\n    C = [0] + C\n    V = [0] + V\n    C = [0] + C\n    V = [0] + V\n    C = [0] + C\n    V = [0] + V\n    C = [0] + C\n    V = [0] + V\n    C = [0] + C\n    V = [0] + V\n    C = [0] + C\n    V = [0] + V\n    C = [0] + C\n    V = [0] + V\n    C = [0] + C\n    V = [0] + V\n    C = [0] + C\n    V = [0] + V\n    C = [0] + C\n    V = [0] + V\n    C = [0] + C\n    V = [0] + V\n    C = [0] + C\n    V = [0] + V\n    C = [0] + C\n    V = [0] + V\n    C = [0] + C\n    V = [0] + V\n    C = [0] + C\n    V = [0] + V\n    C = [0] + C\n    V = [0] + V\n    C = [0] + C\n    V = [0] + V\n    C = [0] + C\n    V = [0] + V\n    C = [0] + C\n    V = [0] + V\n    C = [0] + C\n    V = [0] + V\n    C = [0] + C\n    V = [0] + V\n    C = [0] + C\n    V = [0] + V\n    C = [0] + C\n    V = [0] + V\n    C = [0] + C\n    V = [0] + V\n    C = [0] + C\n    V = [0] + V\n    C = [0] + C\n    V = ["
    },
    {
        "number": 2868,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... acefdb\n   ... ''')\n    'abcdef'\n    \"\"\"\n    blinks = int(stdin.readline().strip())\n    word = stdin.readline().strip()\n    if blinks == 1:\n        return word\n    if blinks % 2 == 0:\n        return word[:blinks // 2] + word[blinks // 2 - 1::-1]\n    else:\n        return word[:blinks // 2] + word[blinks // 2 - 1:blinks // 2 - 1 + (blinks % 2) - 1:-1]\n"
    },
    {
        "number": 2869,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 2870,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    p, q = [int(x) for x in stdin.split()]\n    return str(max(0, p * q - 2 * (p + q - 1)))"
    },
    {
        "number": 2871,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    v = [int(x) for x in stdin.split()]\n    v.sort()\n    min_time = 0\n    for i in range(n):\n        if i % k == 0:\n            min_time += 1\n        if i % k == k - 1:\n            min_time += 1\n    return str(min_time)"
    },
    {
        "number": 2872,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    pass"
    },
    {
        "number": 2873,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 2874,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    people = [int(x) for x in stdin.split()]\n    trees = [int(x) for x in stdin.split()]\n    people_won = 0\n    for i in range(n):\n        if people[i] == trees[0]:\n            people_won += 1\n            break\n        elif people[i] > trees[0]:\n            break\n    for i in range(n):\n        if people[i] == trees[0]:\n            people_won += 1\n            break\n        elif people[i] > trees[0]:\n            break\n    for i in range(n):\n        if people[i] == trees[0]:\n            people_won += 1\n            break\n        elif people[i] > trees[0]:\n            break\n    for i in range(n):\n        if people[i] == trees[0]:\n            people_won += 1\n            break\n        elif people[i] > trees[0]:\n            break\n    for i in range(n):\n        if people[i] == trees[0]:\n            people_won += 1\n            break\n        elif people[i] > trees[0]:\n            break\n    for i in range(n):\n        if people[i] == trees[0]:\n            people_won += 1\n            break\n        elif people[i] > trees[0]:\n            break\n    for i in range(n):\n        if people[i] == trees[0]:\n            people_won += 1\n            break\n        elif people[i] > trees[0]:\n            break\n    for i in range(n):\n        if people[i] == trees[0]:\n            people_won += 1\n            break\n        elif people[i] > trees[0]:\n            break\n    for i in range(n):\n        if people[i] == trees[0]:\n            people_won += 1\n            break\n        elif people[i] > trees[0]:\n            break\n    for i in range(n):\n        if people[i] == trees[0]:\n            people_won += 1\n            break\n        elif people[i] > trees[0]:\n            break\n    for i in range(n):\n        if people[i] == trees[0]:\n            people_won += 1\n            break\n        elif people[i] > trees[0]:\n            break\n    for i in range(n):\n        if people[i] == trees[0]:\n            people_won += 1\n            break\n        elif people[i] > trees[0]:\n            break\n    for i in range(n):\n        if people[i] == trees[0]:\n            people_won += 1\n            break\n        elif people[i] > trees[0]:\n            break\n    for i in range(n):\n        if people[i] == trees[0]:\n            people_won += 1\n            break\n        elif people[i] > trees[0]:\n            break\n    for i in range(n):\n        if people[i] == trees[0]:\n            people_won += 1\n            break\n        elif people[i] > trees[0]:\n            break\n    for i in range(n):\n        if people[i] == trees[0]:\n            people_won += 1\n            break\n        elif people[i] > trees[0]:\n            break\n    for i in range(n):\n        if people[i] == trees[0]:\n            people_won += 1\n            break\n        elif people[i] > trees[0]:\n            break\n    for i in range(n):\n        if people[i] == trees[0]:\n            people_won += 1\n            break\n        elif people[i] > trees[0]:\n            break\n    for i in range(n):\n        if people[i] == trees[0]:\n            people_won += 1\n            break\n        elif people[i] > trees[0]:\n            break\n    for i in range(n):\n        if people[i] == trees[0]:\n            people_won += 1\n            break\n        elif people[i] > trees[0]:\n            break\n    for i in range(n):\n        if people[i] == trees[0]:\n            people_won += 1\n            break\n        elif people[i] > trees[0]:\n            break\n    for i in range(n):\n        if people[i] == trees[0]:\n            people_won += 1\n            break\n        elif people[i] > trees[0]:\n            break\n    for i in range(n):\n        if people[i] == trees[0]:\n            people_won += 1\n            break\n        elif people[i] > trees[0]:\n            break\n    for i in range(n):\n        if people[i] == trees[0]:\n            people_won += 1\n            break\n        elif people[i] > trees[0]:\n            break\n    for i in range(n):\n        if people[i] == trees[0]:\n            people_won += 1\n            break\n        elif people[i] > trees[0]:\n            break\n    for i in range(n):\n        if people[i] == trees[0]:\n            people_won += 1\n            break\n        elif people[i] > trees[0]:\n            break\n    for i in range(n):\n        if people[i] == trees[0]:\n            people_won += 1\n            break\n        elif people[i] > trees[0]:\n            break\n    for i in range(n):\n        if people[i] == trees[0]:\n            people_won += 1\n            break\n        elif people[i] > trees[0]:\n            break\n    for i in range(n):\n        if people[i] == trees[0]:\n            people_won += 1\n            break\n        elif people[i] > trees[0]:\n            break\n    for i in range(n):\n        if people[i] == trees[0]:\n            people_won += 1\n            break\n        elif people[i] > trees[0]:\n            break\n    for i in range(n):\n        if people[i] == trees[0]:\n            people_won += 1\n            break\n        elif people[i] >"
    },
    {
        "number": 2875,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    v = list(map(int, stdin.readline().strip().split()))\n    v.sort()\n    if v == list(range(1, n + 1)):\n        return \"impossible\"\n    for i in range(n - 1):\n        if v[i] > v[i + 1]:\n            return str(i + 1) + \" \" + str(i + 2)\n    return \"impossible\""
    },
    {
        "number": 2876,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    points = [tuple(map(float, line.split())) for line in stdin.readlines()]\n    points.sort(key=lambda x: x[0])\n    x = [x for x, _ in points]\n    y = [y for _, y in points]\n    x_diff = [x[i] - x[i - 1] for i in range(1, n)]\n    y_diff = [y[i] - y[i - 1] for i in range(1, n)]\n    x_diff_y_diff = [x_diff[i] * y_diff[i] for i in range(n - 1)]\n    return str(sum(x_diff_y_diff) / sum(x_diff))"
    },
    {
        "number": 2877,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.strip()\n\nprint(solution(input()))\n"
    },
    {
        "number": 2878,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    grid = [list(stdin.readline().strip()) for _ in range(n)]\n    triples = 0\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == '.':\n                continue\n            if i > 0 and grid[i - 1][j] == '.':\n                triples += 1\n            if j > 0 and grid[i][j - 1] == '.':\n                triples += 1\n            if i < n - 1 and grid[i + 1][j] == '.':\n                triples += 1\n            if j < n - 1 and grid[i][j + 1] == '.':\n                triples += 1\n    return str(triples)"
    },
    {
        "number": 2879,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h, w = [int(x) for x in stdin.split()]\n    matrix = [list(stdin.strip()) for _ in range(h)]\n    for i in range(h):\n        for j in range(w):\n            if matrix[i][j] == 'X':\n                matrix[i][j] = 1\n            else:\n                matrix[i][j] = 0\n    for i in range(h):\n        for j in range(w):\n            if matrix[i][j] == 1:\n                matrix[i][j] = 2\n    for i in range(h):\n        for j in range(w):\n            if matrix[i][j] == 2:\n                matrix[i][j] = 3\n    for i in range(h):\n        for j in range(w):\n            if matrix[i][j] == 3:\n                matrix[i][j] = 4\n    for i in range(h):\n        for j in range(w):\n            if matrix[i][j] == 4:\n                matrix[i][j] = 5\n    for i in range(h):\n        for j in range(w):\n            if matrix[i][j] == 5:\n                matrix[i][j] = 6\n    for i in range(h):\n        for j in range(w):\n            if matrix[i][j] == 6:\n                matrix[i][j] = 7\n    for i in range(h):\n        for j in range(w):\n            if matrix[i][j] == 7:\n                matrix[i][j] = 8\n    for i in range(h):\n        for j in range(w):\n            if matrix[i][j] == 8:\n                matrix[i][j] = 9\n    for i in range(h):\n        for j in range(w):\n            if matrix[i][j] == 9:\n                matrix[i][j] = 10\n    for i in range(h):\n        for j in range(w):\n            if matrix[i][j] == 10:\n                matrix[i][j] = 11\n    for i in range(h):\n        for j in range(w):\n            if matrix[i][j] == 11:\n                matrix[i][j] = 12\n    for i in range(h):\n        for j in range(w):\n            if matrix[i][j] == 12:\n                matrix[i][j] = 13\n    for i in range(h):\n        for j in range(w):\n            if matrix[i][j] == 13:\n                matrix[i][j] = 14\n    for i in range(h):\n        for j in range(w):\n            if matrix[i][j] == 14:\n                matrix[i][j] = 15\n    for i in range(h):\n        for j in range(w):\n            if matrix[i][j] == 15:\n                matrix[i][j] = 16\n    for i in range(h):\n        for j in range(w):\n            if matrix[i][j] == 16:\n                matrix[i][j] = 17\n    for i in range(h):\n        for j in range(w):\n            if matrix[i][j] == 17:\n                matrix[i][j] = 18\n    for i in range(h):\n        for j in range(w):\n            if matrix[i][j] == 18:\n                matrix[i][j] = 19\n    for i in range(h):\n        for j in range(w):\n            if matrix[i][j] == 19:\n                matrix[i][j] = 20\n    for i in range(h):\n        for j in range(w):\n            if matrix[i][j] == 20:\n                matrix[i][j] = 21\n    for i in range(h):\n        for j in range(w):\n            if matrix[i][j] == 21:\n                matrix[i][j] = 22\n    for i in range(h):\n        for j in range(w):\n            if matrix[i][j] == 22:\n                matrix[i][j] = 23\n    for i in range(h):\n        for j in range(w):\n            if matrix[i][j] == 23:\n                matrix[i][j] = 24\n    for i in range(h):\n        for j in range(w):\n            if matrix[i][j] == 24:\n                matrix[i][j] = 25\n    for i in range(h):\n        for j in range(w):\n            if matrix[i][j] == 25:\n                matrix[i][j] = 26\n    for i in range(h):\n        for j in range(w):\n            if matrix[i][j] == 26:\n                matrix[i][j] = 27\n    for i in range(h):\n        for j in range(w):\n            if matrix[i][j] == 27:\n                matrix[i][j] = 28\n    for i in range(h):\n        for j in range(w):\n            if matrix[i][j] == 28:\n                matrix[i][j] = 29\n    for i in range(h):\n        for j in range(w):\n            if matrix[i][j] == 29:\n                matrix[i][j] = 30\n    for i in range(h):\n        for j in range(w):\n            if matrix[i][j] == 30:\n                matrix[i][j] = 31\n    for i in range(h):\n        for j in range(w):\n            if matrix[i][j] == 31:\n                matrix[i][j] = 32\n    for i in range(h):\n        for j in range(w):\n            if matrix[i][j] == 32:\n                matrix[i][j] = 33\n    for i in range(h):\n        for j in range(w):\n            if matrix[i][j] == 33:\n                matrix[i][j] = 34\n    for i in range(h):\n        for j in range(w):\n            if matrix[i][j] == 34:\n                matrix[i][j] = 35\n    for i in range(h):\n        for j in range(w):\n            if matrix[i][j] == 35:\n                matrix[i][j] = 36\n    for i in range(h):\n        for j in range(w):\n            if matrix[i][j] == 36:\n                matrix[i][j] = 37\n    for i in range(h):\n        for j in range(w):\n            if matrix[i][j] == 37:\n                matrix[i][j] = 38\n    for i in range(h):\n        for j in range(w):\n            if matrix[i][j] == 38:"
    },
    {
        "number": 2880,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, C = [int(x) for x in stdin.split()]\n    table = [stdin.split()[i] for i in range(R)]\n    table.sort(key=lambda x: len(x))\n    table.sort(key=lambda x: x.count('a'))\n    table.sort(key=lambda x: x.count('e'))\n    table.sort(key=lambda x: x.count('i'))\n    table.sort(key=lambda x: x.count('o'))\n    table.sort(key=lambda x: x.count('u'))\n    table.sort(key=lambda x: x.count('y'))\n    table.sort(key=lambda x: x.count('l'))\n    table.sort(key=lambda x: x.count('n'))\n    table.sort(key=lambda x: x.count('r'))\n    table.sort(key=lambda x: x.count('s'))\n    table.sort(key=lambda x: x.count('t'))\n    table.sort(key=lambda x: x.count('p'))\n    table.sort(key=lambda x: x.count('c'))\n    table.sort(key=lambda x: x.count('d'))\n    table.sort(key=lambda x: x.count('g'))\n    table.sort(key=lambda x: x.count('h'))\n    table.sort(key=lambda x: x.count('j'))\n    table.sort(key=lambda x: x.count('k'))\n    table.sort(key=lambda x: x.count('m'))\n    table.sort(key=lambda x: x.count('w'))\n    table.sort(key=lambda x: x.count('z'))\n    table.sort(key=lambda x: x.count('v'))\n    table.sort(key=lambda x: x.count('b'))\n    table.sort(key=lambda x: x.count('x'))\n    table.sort(key=lambda x: x.count('q'))\n    table.sort(key=lambda x: x.count('y'))\n    table.sort(key=lambda x: x.count('f'))\n    table.sort(key=lambda x: x.count('v'))\n    table.sort(key=lambda x: x.count('s'))\n    table.sort(key=lambda x: x.count('h'))\n    table.sort(key=lambda x: x.count('n'))\n    table.sort(key=lambda x: x.count('t'))\n    table.sort(key=lambda x: x.count('j'))\n    table.sort(key=lambda x: x.count('p'))\n    table.sort(key=lambda x: x.count('g'))\n    table.sort(key=lambda x: x.count('c'))\n    table.sort(key=lambda x: x.count('l'))\n    table.sort(key=lambda x: x.count('r'))\n    table.sort(key=lambda x: x.count('d'))\n    table.sort(key=lambda x: x.count('u'))\n    table.sort(key=lambda x: x.count('m'))\n    table.sort(key=lambda x: x.count('w'))\n    table.sort(key=lambda x: x.count('z'))\n    table.sort(key=lambda x: x.count('i'))\n    table.sort(key=lambda x: x.count('o'))\n    table.sort(key=lambda x: x.count('f'))\n    table.sort(key=lambda x: x.count('k'))\n    table.sort(key=lambda x: x.count('v'))\n    table.sort(key=lambda x: x.count('b'))\n    table.sort(key=lambda x: x.count('x'))\n    table.sort(key=lambda x: x.count('q'))\n    table.sort(key=lambda x: x.count('y'))\n    table.sort(key=lambda x: x.count('h'))\n    table.sort(key=lambda x: x.count('n'))\n    table.sort(key=lambda x: x.count('t'))\n    table.sort(key=lambda x: x.count('s'))\n    table.sort(key=lambda x: x.count('r'))\n    table.sort(key=lambda x: x.count('g'))\n    table.sort(key=lambda x: x.count('c'))\n    table.sort(key=lambda x: x.count('l'))\n    table.sort(key=lambda x: x.count('u'))\n    table.sort(key=lambda x: x.count('m'))\n    table.sort(key=lambda x: x.count('w'))\n    table.sort(key=lambda x: x.count('z'))\n    table.sort(key=lambda x: x.count('v'))\n    table.sort(key=lambda x: x.count('b'))\n    table.sort(key=lambda x: x.count('x'))\n    table.sort(key=lambda x: x.count('q'))\n    table.sort(key=lambda x: x.count('y'))\n    table.sort(key=lambda x: x.count('h'))\n    table.sort(key=lambda x: x.count('n'))\n    table.sort(key=lambda x: x.count('t'))\n    table.sort(key=lambda x: x.count('s'))\n    table.sort(key=lambda x: x.count('r'))\n    table.sort(key=lambda x: x.count('g'))\n    table.sort(key=lambda x: x.count('c'))\n    table.sort(key=lambda x: x.count('l'))\n    table.sort(key=lambda x: x.count('u'))\n    table.sort(key=lambda x: x.count('m'))\n    table.sort(key=lambda x: x.count('w'))\n    table.sort(key=lambda x: x.count('z'))\n    table.sort(key=lambda x: x.count('i'))\n    table.sort(key=lambda x: x.count('o'))\n    table.sort(key=lambda x: x.count('f'))\n    table.sort(key=lambda x: x.count('k'))\n    table.sort(key=lambda x: x.count('v'))\n    table.sort(key=lambda x: x.count('b'))\n    table.sort(key=lambda x: x.count('x'))\n    table.sort(key=lambda x: x.count('q'))"
    },
    {
        "number": 2881,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = stdin.split()\n    return \"yes\" if x.count(\"0\") == y.count(\"0\") else \"no\""
    },
    {
        "number": 2882,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"\"\n    if n == 1:\n        return \"()\"\n    if n == 2:\n        return \"()()\"\n    if n == 3:\n        return \"()()()\"\n    if n == 4:\n        return \"()(())()\"\n    if n == 5:\n        return \"()()()()\"\n    if n == 6:\n        return \"()()()()()\"\n    if n == 7:\n        return \"()()()()()()\"\n    if n == 8:\n        return \"()()()()()()()\"\n    if n == 9:\n        return \"()()()()()()()()\"\n    if n == 10:\n        return \"()()()()()()()()()()\"\n    if n == 11:\n        return \"()()()()()()()()()()()()()()\"\n    if n == 12:\n        returnn    if n == 13:\n        return \"()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()\n    if n == 14:\n        return \"()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()\n    if n == 15:\n        return \"()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()\n    if n == 16:\n        return \"()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()\n    if n == 17:\n        return \"()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()\n    if n == 18:\n        return \"()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()\n    if n == 19:\n        return \"()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()\n    if n == 20:\n        return \"()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()\n    if n == 21:\n        return \"()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()"
    },
    {
        "number": 2883,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 2884,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 2885,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 2886,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if len(s) < 2:\n        return '-1 -1'\n    if len(s) == 2:\n        return '1 1'\n    if len(s) == 3:\n        if s[0] == s[2]:\n            return '1 1'\n        else:\n            return '-1 -1'\n    if len(s) % 2 == 0:\n        return '-1 -1'\n    if len(s) % 2 == 1:\n        if s[0] == s[-1]:\n            return '1 1'\n        else:\n            return '-1 -1'"
    },
    {
        "number": 2887,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    soup = [int(x) for x in stdin.readline().strip().split()]\n    temp = [int(x) for x in stdin.readline().strip().split()]\n    soup_vol = [0] * n\n    for i in range(n):\n        soup_vol[i] = soup[i]\n        for j in range(i):\n            if temp[j] < temp[i]:\n                soup_vol[i] -= soup_vol[j]\n        soup_vol[i] += soup[i]\n    return''.join(str(x) for x in soup_vol)"
    },
    {
        "number": 2888,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, Sin = [int(x) for x in stdin.split()]\n    E = [int(x) for x in stdin.split()]\n    \n    # Your code goes here\n    return str(max(Sin*E[0], Sin*E[1], Sin*E[2], Sin*E[3]))"
    },
    {
        "number": 2889,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2890,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, k1, k2 = [int(x) for x in stdin.split()]\n    if k1 * k2 > 800:\n        return -1\n    if k1 + k2 > 800:\n        return -1\n    if k1 > k2:\n        return -1\n    if k1 == 0:\n        return 0\n    if k1 == 1:\n        return k2\n    if k2 == 1:\n        return k1\n    if k1 == 2:\n        return k2 * 2\n    if k2 == 2:\n        return k1 * 2\n    if k1 == 3:\n        return k2 * 3\n    if k2 == 3:\n        return k1 * 3\n    if k1 == 4:\n        return k2 * 4\n    if k2 == 4:\n        return k1 * 4\n    if k1 == 5:\n        return k2 * 5\n    if k2 == 5:\n        return k1 * 5\n    if k1 == 6:\n        return k2 * 6\n    if k2 == 6:\n        return k1 * 6\n    if k1 == 7:\n        return k2 * 7\n    if k2 == 7:\n        return k1 * 7\n    if k1 == 8:\n        return k2 * 8\n    if k2 == 8:\n        return k1 * 8\n    if k1 == 9:\n        return k2 * 9\n    if k2 == 9:\n        return k1 * 9\n    if k1 == 10:\n        return k2 * 10\n    if k2 == 10:\n        return k1 * 10\n    if k1 == 11:\n        return k2 * 11\n    if k2 == 11:\n        return k1 * 11\n    if k1 == 12:\n        return k2 * 12\n    if k2 == 12:\n        return k1 * 12\n    if k1 == 13:\n        return k2 * 13\n    if k2 == 13:\n        return k1 * 13\n    if k1 == 14:\n        return k2 * 14\n    if k2 == 14:\n        return k1 * 14\n    if k1 == 15:\n        return k2 * 15\n    if k2 == 15:\n        return k1 * 15\n    if k1 == 16:\n        return k2 * 16\n    if k2 == 16:\n        return k1 * 16\n    if k1 == 17:\n        return k2 * 17\n    if k2 == 17:\n        return k1 * 17\n    if k1 == 18:\n        return k2 * 18\n    if k2 == 18:\n        return k1 * 18\n    if k1 == 19:\n        return k2 * 19\n    if k2 == 19:\n        return k1 * 19\n    if k1 == 20:\n        return k2 * 20\n    if k2 == 20:\n        return k1 * 20\n    if k1 == 21:\n        return k2 * 21\n    if k2 == 21:\n        return k1 * 21\n    if k1 == 22:\n        return k2 * 22\n    if k2 == 22:\n        return k1 * 22\n    if k1 == 23:\n        return k2 * 23\n    if k2 == 23:\n        return k1 * 23\n    if k1 == 24:\n        return k2 * 24\n    if k2 == 24:\n        return k1 * 24\n    if k1 == 25:\n        return k2 * 25\n    if k2 == 25:\n        return k1 * 25\n    if k1 == 26:\n        return k2 * 26\n    if k2 == 26:\n        return k1 * 26\n    if k1 == 27:\n        return k2 * 27\n    if k2 == 27:\n        return k1 * 27\n    if k1 == 28:\n        return k2 * 28\n    if k2 == 28:\n        return k1 * 28\n    if k1 == 29:\n        return k2 * 29\n    if k2 == 29:\n        return k1 * 29\n    if k1 == 30:\n        return k2 * 30\n    if k2 == 30:\n        return k1 * 30\n    if k1 == 31:\n        return k2 * 31\n    if k2 == 31:\n        return k1 * 31\n    if k1 == 32:\n        return k2 * 32\n    if k2 == 32:\n        return k1 * 32\n    if k1 == 33:\n        return k2 * 33\n    if k2 == 33:\n        return k1 * 33\n    if k1 == 34:\n        return k2 * 34\n    if k2 == 34:\n        return k1 * 34\n    if k1 == 35:\n        return k2 * 35\n    if k2 == 35:\n        return k1 * 35\n    if k1 == 36:\n        return k2 * 36\n    if k2 == 36:\n        return k1 * 36\n    if k1 == 37:\n        return k2 * 37\n    if k2 == 37:\n        return k1 * 37\n    if k1 == 38:\n        return k2 * 38\n    if k2 == 38:\n        return k1 * 38\n    if k1 == 39:\n        return k2 * 39\n    if k2 == 39:\n        return k1 * 39\n    if k1 == 40:\n        return k2 * 40\n    if k2 == 40:\n        return k1 * 40\n    if k1 == 41:\n        return k2 * 41\n    if k2 == 41:\n        return k1 * 41\n    if k1 == 42:\n        return k2 * 42\n    if k2 == 42:\n        return k1 * 42\n    if k1 == 43:\n        return k2 * 43\n    if k2 == 43:\n        return k1 * 43\n    if k1 == 44:\n        return k2 * 44\n    if k2 == 44:\n        return k1 * 44\n    if k1 == 45:\n        return k"
    },
    {
        "number": 2891,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    c = [int(x) for x in stdin.readline().split()]\n    prob = 1\n    for i in range(n):\n        prob *= (365 - c[i]) / 365\n    return str(math.log(prob, 10))"
    },
    {
        "number": 2892,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    sizes = [int(x) for x in stdin.readline().strip().split()]\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"2\"\n    if n == 3:\n        return \"3\"\n    if n == 4:\n        return \"4\"\n    if n == 5:\n        return \"5\"\n    if n == 6:\n        return \"6\"\n    if n == 7:\n        return \"7\"\n    if n == 8:\n        return \"8\"\n    if n == 9:\n        return \"9\"\n    if n == 10:\n        return \"10\"\n    if n == 11:\n        return \"11\"\n    if n == 12:\n        return \"12\"\n    if n == 13:\n        return \"13\"\n    if n == 14:\n        return \"14\"\n    if n == 15:\n        return \"15\"\n    if n == 16:\n        return \"16\"\n    if n == 17:\n        return \"17\"\n    if n == 18:\n        return \"18\"\n    if n == 19:\n        return \"19\"\n    if n == 20:\n        return \"20\"\n    if n == 21:\n        return \"21\"\n    if n == 22:\n        return \"22\"\n    if n == 23:\n        return \"23\"\n    if n == 24:\n        return \"24\"\n    if n == 25:\n        return \"25\"\n    if n == 26:\n        return \"26\"\n    if n == 27:\n        return \"27\"\n    if n == 28:\n        return \"28\"\n    if n == 29:\n        return \"29\"\n    if n == 30:\n        return \"30\"\n    if n == 31:\n        return \"31\"\n    if n == 32:\n        return \"32\"\n    if n == 33:\n        return \"33\"\n    if n == 34:\n        return \"34\"\n    if n == 35:\n        return \"35\"\n    if n == 36:\n        return \"36\"\n    if n == 37:\n        return \"37\"\n    if n == 38:\n        return \"38\"\n    if n == 39:\n        return \"39\"\n    if n == 40:\n        return \"40\"\n    if n == 41:\n        return \"41\"\n    if n == 42:\n        return \"42\"\n    if n == 43:\n        return \"43\"\n    if n == 44:\n        return \"44\"\n    if n == 45:\n        return \"45\"\n    if n == 46:\n        return \"46\"\n    if n == 47:\n        return \"47\"\n    if n == 48:\n        return \"48\"\n    if n == 49:\n        return \"49\"\n    if n == 50:\n        return \"50\"\n    if n == 51:\n        return \"51\"\n    if n == 52:\n        return \"52\"\n    if n == 53:\n        return \"53\"\n    if n == 54:\n        return \"54\"\n    if n == 55:\n        return \"55\"\n    if n == 56:\n        return \"56\"\n    if n == 57:\n        return \"57\"\n    if n == 58:\n        return \"58\"\n    if n == 59:\n        return \"59\"\n    if n == 60:\n        return \"60\"\n    if n == 61:\n        return \"61\"\n    if n == 62:\n        return \"62\"\n    if n == 63:\n        return \"63\"\n    if n == 64:\n        return \"64\"\n    if n == 65:\n        return \"65\"\n    if n == 66:\n        return \"66\"\n    if n == 67:\n        return \"67\"\n    if n == 68:\n        return \"68\"\n    if n == 69:\n        return \"69\"\n    if n == 70:\n        return \"70\"\n    if n == 71:\n        return \"71\"\n    if n == 72:\n        return \"72\"\n    if n == 73:\n        return \"73\"\n    if n == 74:\n        return \"74\"\n    if n == 75:\n        return \"75\"\n    if n == 76:\n        return \"76\"\n    if n == 77:\n        return \"77\"\n    if n == 78:\n        return \"78\"\n    if n == 79:\n        return \"79\"\n    if n == 80:\n        return \"80\"\n    if n == 81:\n        return \"81\"\n    if n == 82:\n        return \"82\"\n    if n == 83:\n        return \"83\"\n    if n == 84:\n        return \"84\"\n    if n == 85:\n        return \"85\"\n    if n == 86:\n        return \"86\"\n    if n == 87:\n        return \"87\"\n    if n == 88:\n        return \"88\"\n    if n == 89:\n        return \"89\"\n    if n == 90:\n        return \"90\"\n    if n == 91:\n        return \"91\"\n    if n == 92:\n        return \"92\"\n    if n == 93:\n        return \"93\"\n    if n == 94:\n        return \"94\"\n    if n == 95:\n        return \"95\"\n    if n == 96:\n        return \"96\"\n    if n == 97:\n        return \"97\"\n    if n == 98:\n        return \"98\"\n    if n == 99:\n        return \"99\"\n    if n == 100:\n        return \"100\"\n    if n == 101:\n        return \"101\"\n    if n == 102:\n        return \"102\"\n    if n == 103:\n        return \"103\"\n    if n == 104:\n        return \"104\"\n    if n == 105:\n        return \"105\"\n    if n == 106:\n        return \"106\"\n    if n == 107:\n        return \"107\"\n    if n == 108:\n        return \"108\"\n    if n =="
    },
    {
        "number": 2893,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    swap = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] > a[j]:\n                a[i], a[j] = a[j], a[i]\n                swap += 1\n    return str(swap)"
    },
    {
        "number": 2894,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    L, K, T1, T2, H = [float(x) for x in stdin.split()]\n    return '{:.6f} {:.6f}'.format(L * K / T1 / T2, L * K / T1)"
    },
    {
        "number": 2895,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nassert(solution('''0 0 0 100\n2\n50\n5 1\n''') == '60')\nassert(solution('''0 0 0 100\n2\n50\n5 1\n''') == '60')\nassert(solution('''0 0 0 100\n2\n50\n5 1\n''') == '60')\nassert(solution('''0 0 0 100\n2\n50\n5 1\n''') == '60')\nassert(solution('''0 0 0 100\n2\n50\n5 1\n''') == '60')\nassert(solution('''0 0 0 100\n2\n50\n5 1\n''') == '60')\nassert(solution('''0 0 0 100\n2\n50\n5 1\n''') == '60')\nassert(solution('''0 0 0 100\n2\n50\n5 1\n''') == '60')\nassert(solution('''0 0 0 100\n2\n50\n5 1\n''') == '60')\nassert(solution('''0 0 0 100\n2\n50\n5 1\n''') == '60')\nassert(solution('''0 0 0 100\n2\n50\n5 1\n''') == '60')\nassert(solution('''0 0 0 100\n2\n50\n5 1\n''') == '60')\nassert(solution('''0 0 0 100\n2\n50\n5 1\n''') == '60')\nassert(solution('''0 0 0 100\n2\n50\n5 1\n''') == '60')\nassert(solution('''0 0 0 100\n2\n50\n5 1\n''') == '60')\nassert(solution('''0 0 0 100\n2\n50\n5 1\n''') == '60')\nassert(solution('''0 0 0 100\n2\n50\n5 1\n''') == '60')\nassert(solution('''0 0 0 100\n2\n50\n5 1\n''') == '60')\nassert(solution('''0 0 0 100\n2\n50\n5 1\n''') == '60')\nassert(solution('''0 0 0 100\n2\n50\n5 1\n''') == '60')\nassert(solution('''0 0 0 100\n2\n50\n5 1\n''') == '60')\nassert(solution('''0 0 0 100\n2\n50\n5 1\n''') == '60')\nassert(solution('''0 0 0 100\n2\n50\n5 1\n''') == '60')\nassert(solution('''0 0 0 100\n2\n50\n5 1\n''') == '60')\nassert(solution('''0 0 0 100\n2\n50\n5 1\n''') == '60')\nassert(solution('''0 0 0 100\n2\n50\n5 1\n''') == '60')\nassert(solution('''0 0 0 100\n2\n50\n5 1\n''') == '60')\nassert(solution('''0 0 0 100\n2\n50\n5 1\n''') == '60')\nassert(solution('''0 0 0 100\n2\n50\n5 1\n''') == '60')\nassert(solution('''0 0 0 100\n2\n50\n5 1\n''') == '60')\nassert(solution('''0 0 0 100\n2\n50\n5 1\n''') == '60')\nassert(solution('''0 0 0 100\n2\n50\n5 1\n''') == '60')\nassert(solution('''0 0 0 100\n2\n50\n5 1\n''') == '60')\nassert(solution('''0 0 0 100\n2\n50\n5 1\n''') == '60')\nassert(solution('''0 0 0 100\n2\n50\n5 1\n''') == '60')\nassert(solution('''0 0 0 100\n2\n50\n5 1\n''') == '60')\nassert(solution('''0 0 0 100\n2\n50\n5 1\n''') == '60')\nassert(solution('''0 0 0 100\n2\n50\n5 1\n''') == '60')\nassert(solution('''0 0 0 100\n2\n50\n5 1\n''') == '60')\nassert(solution('''0 0 0 100\n2\n50\n5 1\n''') == '60')\nassert(solution('''0 0 0 100\n2\n50\n5 1\n''') == '60')\nassert(solution('''0 0 0 100\n2\n50\n5 1\n''') == '60')\nassert(solution('''0 0 0 100\n2\n50\n5 1\n''') == '60')\nassert(solution('''0 0 0 100\n2\n50\n5 1\n''') == '60')\nassert(solution('''0 0 0 100\n2\n50\n5 1\n''') == '60')\nassert(solution('''0 0 0 100\n2\n50\n5 1\n''') == '60')\nassert(solution('''0 0 0 100\n2\n50\n5 1\n''') == '60')\nassert(solution('''0 0 0 100\n2\n50\n5 1\n''') == '60')\nassert(solution('''0 0 0 100\n2\n50\n5 1\n''') == '60')\nassert(solution('''0 0 0 100\n2\n50\n5 1\n''') == '60')\nassert(solution('''0 0 0 100\n2\n50\n5 1\n''') == '60')\nassert(solution('''0 0 0 100\n2\n50\n5 1\n''') == '60')\nassert(solution('''0 0 0 100\n2\n50\n5 1\n''') == '60')\nassert(solution('''0 0 0 100\n2\n50\n5 1\n''') == '60')\nassert(solution("
    },
    {
        "number": 2896,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 2897,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2898,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    drives = [int(x) for x in stdin.split()]\n    drives.sort()\n    extra = 0\n    for i in range(1, n):\n        extra += drives[i] - drives[i - 1]\n    return str(extra)"
    },
    {
        "number": 2899,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    nodes = [int(x) for x in stdin.readline().split()]\n    nodes.sort()\n    nodes = [0] + nodes + [n]\n    nodes = [nodes[i] - nodes[i - 1] for i in range(1, len(nodes))]\n    nodes = [nodes[i] - nodes[i - 1] for i in range(1, len(nodes))]\n    nodes = [nodes[i] - nodes[i - 1] for i in range(1, len(nodes))]\n    nodes = [nodes[i] - nodes[i - 1] for i in range(1, len(nodes))]\n    nodes = [nodes[i] - nodes[i - 1] for i in range(1, len(nodes))]\n    nodes = [nodes[i] - nodes[i - 1] for i in range(1, len(nodes))]\n    nodes = [nodes[i] - nodes[i - 1] for i in range(1, len(nodes))]\n    nodes = [nodes[i] - nodes[i - 1] for i in range(1, len(nodes))]\n    nodes = [nodes[i] - nodes[i - 1] for i in range(1, len(nodes))]\n    nodes = [nodes[i] - nodes[i - 1] for i in range(1, len(nodes))]\n    nodes = [nodes[i] - nodes[i - 1] for i in range(1, len(nodes))]\n    nodes = [nodes[i] - nodes[i - 1] for i in range(1, len(nodes))]\n    nodes = [nodes[i] - nodes[i - 1] for i in range(1, len(nodes))]\n    nodes = [nodes[i] - nodes[i - 1] for i in range(1, len(nodes))]\n    nodes = [nodes[i] - nodes[i - 1] for i in range(1, len(nodes))]\n    nodes = [nodes[i] - nodes[i - 1] for i in range(1, len(nodes))]\n    nodes = [nodes[i] - nodes[i - 1] for i in range(1, len(nodes))]\n    nodes = [nodes[i] - nodes[i - 1] for i in range(1, len(nodes))]\n    nodes = [nodes[i] - nodes[i - 1] for i in range(1, len(nodes))]\n    nodes = [nodes[i] - nodes[i - 1] for i in range(1, len(nodes))]\n    nodes = [nodes[i] - nodes[i - 1] for i in range(1, len(nodes))]\n    nodes = [nodes[i] - nodes[i - 1] for i in range(1, len(nodes))]\n    nodes = [nodes[i] - nodes[i - 1] for i in range(1, len(nodes))]\n    nodes = [nodes[i] - nodes[i - 1] for i in range(1, len(nodes))]\n    nodes = [nodes[i] - nodes[i - 1] for i in range(1, len(nodes))]\n    nodes = [nodes[i] - nodes[i - 1] for i in range(1, len(nodes))]\n    nodes = [nodes[i] - nodes[i - 1] for i in range(1, len(nodes))]\n    nodes = [nodes[i] - nodes[i - 1] for i in range(1, len(nodes))]\n    nodes = [nodes[i] - nodes[i - 1] for i in range(1, len(nodes))]\n    nodes = [nodes[i] - nodes[i - 1] for i in range(1, len(nodes))]\n    nodes = [nodes[i] - nodes[i - 1] for i in range(1, len(nodes))]\n    nodes = [nodes[i] - nodes[i - 1] for i in range(1, len(nodes))]\n    nodes = [nodes[i] - nodes[i - 1] for i in range(1, len(nodes))]\n    nodes = [nodes[i] - nodes[i - 1] for i in range(1, len(nodes))]\n    nodes = [nodes[i] - nodes[i - 1] for i in range(1, len(nodes))]\n    nodes = [nodes[i] - nodes[i - 1] for i in range(1, len(nodes))]\n    nodes = [nodes[i] - nodes[i - 1] for i in range(1, len(nodes))]\n    nodes = [nodes[i] - nodes[i - 1] for i in range(1, len(nodes))]\n    nodes = [nodes[i] - nodes[i - 1] for i in range(1, len(nodes))]\n    nodes = [nodes[i] - nodes[i - 1] for i in range(1, len(nodes))]\n    nodes = [nodes[i] - nodes[i - 1] for i in range(1, len(nodes))]\n    nodes = [nodes[i] - nodes[i - 1] for i in range(1, len(nodes))]\n    nodes = [nodes[i] - nodes[i - 1] for i in range(1, len(nodes))]\n    nodes = [nodes[i] - nodes[i - 1] for i in range(1, len(nodes))]\n    nodes = [nodes[i] - nodes[i - 1] for i in range(1, len(nodes))]\n    nodes = [nodes[i] - nodes[i - 1] for i in range(1, len(nodes))]\n    nodes = [nodes[i] - nodes[i - 1] for i in range(1, len(nodes))]\n    nodes = [nodes[i] - nodes[i - 1] for i in range(1, len(nodes))]\n    nodes = [nodes[i] - nodes[i - 1] for i in range(1, len(nodes))]\n    "
    },
    {
        "number": 2900,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 2901,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    edges = [tuple(map(int, line.strip().split())) for line in stdin.readlines()]\n    nodes = set()\n    for a, b in edges:\n        nodes.add(a)\n        nodes.add(b)\n    nodes = list(nodes)\n    nodes.sort()\n    nodes_to_edges = {nodes[i]: [] for i in range(len(nodes))}\n    for a, b in edges:\n        nodes_to_edges[a].append(b)\n        nodes_to_edges[b].append(a)\n    nodes_to_edges = {k: sorted(v) for k, v in nodes_to_edges.items()}\n    nodes_to_edges = {k: v for k, v in nodes_to_edges.items() if len(v) > 1}\n    nodes_to_edges = {k: v for k, v in nodes_to_edges.items() if len(v) == len(nodes)}\n    nodes_to_edges = {k: v for k, v in nodes_to_edges.items() if len(v) == len(nodes) - 1}\n    nodes_to_edges = {k: v for k, v in nodes_to_edges.items() if len(v) == len(nodes) - 2}\n    nodes_to_edges = {k: v for k, v in nodes_to_edges.items() if len(v) == len(nodes) - 3}\n    nodes_to_edges = {k: v for k, v in nodes_to_edges.items() if len(v) == len(nodes) - 4}\n    nodes_to_edges = {k: v for k, v in nodes_to_edges.items() if len(v) == len(nodes) - 5}\n    nodes_to_edges = {k: v for k, v in nodes_to_edges.items() if len(v) == len(nodes) - 6}\n    nodes_to_edges = {k: v for k, v in nodes_to_edges.items() if len(v) == len(nodes) - 7}\n    nodes_to_edges = {k: v for k, v in nodes_to_edges.items() if len(v) == len(nodes) - 8}\n    nodes_to_edges = {k: v for k, v in nodes_to_edges.items() if len(v) == len(nodes) - 9}\n    nodes_to_edges = {k: v for k, v in nodes_to_edges.items() if len(v) == len(nodes) - 10}\n    nodes_to_edges = {k: v for k, v in nodes_to_edges.items() if len(v) == len(nodes) - 11}\n    nodes_to_edges = {k: v for k, v in nodes_to_edges.items() if len(v) == len(nodes) - 12}\n    nodes_to_edges = {k: v for k, v in nodes_to_edges.items() if len(v) == len(nodes) - 13}\n    nodes_to_edges = {k: v for k, v in nodes_to_edges.items() if len(v) == len(nodes) - 14}\n    nodes_to_edges = {k: v for k, v in nodes_to_edges.items() if len(v) == len(nodes) - 15}\n    nodes_to_edges = {k: v for k, v in nodes_to_edges.items() if len(v) == len(nodes) - 16}\n    nodes_to_edges = {k: v for k, v in nodes_to_edges.items() if len(v) == len(nodes) - 17}\n    nodes_to_edges = {k: v for k, v in nodes_to_edges.items() if len(v) == len(nodes) - 18}\n    nodes_to_edges = {k: v for k, v in nodes_to_edges.items() if len(v) == len(nodes) - 19}\n    nodes_to_edges = {k: v for k, v in nodes_to_edges.items() if len(v) == len(nodes) - 20}\n    nodes_to_edges = {k: v for k, v in nodes_to_edges.items() if len(v) == len(nodes) - 21}\n    nodes_to_edges = {k: v for k, v in nodes_to_edges.items() if len(v) == len(nodes) - 22}\n    nodes_to_edges = {k: v for k"
    },
    {
        "number": 2902,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2903,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = [int(x) for x in stdin.split()]\n    a = [0] * n\n    for _ in range(q):\n        line = stdin.readline().split()\n        if line[0] == '+':\n            a[int(line[1])] += int(line[2])\n        else:\n            i = int(line[1])\n            print(sum(a[:i + 1]))\n    return ''"
    },
    {
        "number": 2904,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2905,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, B = [int(x) for x in stdin.split()]\n    buns = [int(x) for x in stdin.split()]\n    hotdogs = [int(x) for x in stdin.split()]\n    if sum(hotdogs) % H!= 0 or sum(buns) % B!= 0:\n        return \"impossible\"\n    hotdogs_per_buns = sum(hotdogs) // H\n    buns_per_hotdogs = sum(buns) // B\n    if hotdogs_per_buns < buns_per_hotdogs:\n        return str(hotdogs_per_buns)\n    else:\n        return str(buns_per_hotdogs)"
    },
    {
        "number": 2906,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split()]\n    if N < 2 or M < 0:\n        return \"Impossible\"\n    if N == 2:\n        return \"1\"\n    if M == 0:\n        return \"2\"\n    if M == 1:\n        return \"3\"\n    if M == 2:\n        return \"1\"\n    if M == 3:\n        return \"2\"\n    if M == 4:\n        return \"3\"\n    if M == 5:\n        return \"1\"\n    if M == 6:\n        return \"2\"\n    if M == 7:\n        return \"3\"\n    if M == 8:\n        return \"1\"\n    if M == 9:\n        return \"2\"\n    if M == 10:\n        return \"3\"\n    if M == 11:\n        return \"1\"\n    if M == 12:\n        return \"2\"\n    if M == 13:\n        return \"3\"\n    if M == 14:\n        return \"1\"\n    if M == 15:\n        return \"2\"\n    if M == 16:\n        return \"3\"\n    if M == 17:\n        return \"1\"\n    if M == 18:\n        return \"2\"\n    if M == 19:\n        return \"3\"\n    if M == 20:\n        return \"1\"\n    if M == 21:\n        return \"2\"\n    if M == 22:\n        return \"3\"\n    if M == 23:\n        return \"1\"\n    if M == 24:\n        return \"2\"\n    if M == 25:\n        return \"3\"\n    if M == 26:\n        return \"1\"\n    if M == 27:\n        return \"2\"\n    if M == 28:\n        return \"3\"\n    if M == 29:\n        return \"1\"\n    if M == 30:\n        return \"2\"\n    if M == 31:\n        return \"3\"\n    if M == 32:\n        return \"1\"\n    if M == 33:\n        return \"2\"\n    if M == 34:\n        return \"3\"\n    if M == 35:\n        return \"1\"\n    if M == 36:\n        return \"2\"\n    if M == 37:\n        return \"3\"\n    if M == 38:\n        return \"1\"\n    if M == 39:\n        return \"2\"\n    if M == 40:\n        return \"3\"\n    if M == 41:\n        return \"1\"\n    if M == 42:\n        return \"2\"\n    if M == 43:\n        return \"3\"\n    if M == 44:\n        return \"1\"\n    if M == 45:\n        return \"2\"\n    if M == 46:\n        return \"3\"\n    if M == 47:\n        return \"1\"\n    if M == 48:\n        return \"2\"\n    if M == 49:\n        return \"3\"\n    if M == 50:\n        return \"1\"\n    if M == 51:\n        return \"2\"\n    if M == 52:\n        return \"3\"\n    if M == 53:\n        return \"1\"\n    if M == 54:\n        return \"2\"\n    if M == 55:\n        return \"3\"\n    if M == 56:\n        return \"1\"\n    if M == 57:\n        return \"2\"\n    if M == 58:\n        return \"3\"\n    if M == 59:\n        return \"1\"\n    if M == 60:\n        return \"2\"\n    if M == 61:\n        return \"3\"\n    if M == 62:\n        return \"1\"\n    if M == 63:\n        return \"2\"\n    if M == 64:\n        return \"3\"\n    if M == 65:\n        return \"1\"\n    if M == 66:\n        return \"2\"\n    if M == 67:\n        return \"3\"\n    if M == 68:\n        return \"1\"\n    if M == 69:\n        return \"2\"\n    if M == 70:\n        return \"3\"\n    if M == 71:\n        return \"1\"\n    if M == 72:\n        return \"2\"\n    if M == 73:\n        return \"3\"\n    if M == 74:\n        return \"1\"\n    if M == 75:\n        return \"2\"\n    if M == 76:\n        return \"3\"\n    if M == 77:\n        return \"1\"\n    if M == 78:\n        return \"2\"\n    if M == 79:\n        return \"3\"\n    if M == 80:\n        return \"1\"\n    if M == 81:\n        return \"2\"\n    if M == 82:\n        return \"3\"\n    if M == 83:\n        return \"1\"\n    if M == 84:\n        return \"2\"\n    if M == 85:\n        return \"3\"\n    if M == 86:\n        return \"1\"\n    if M == 87:\n        return \"2\"\n    if M == 88:\n        return \"3\"\n    if M == 89:\n        return \"1\"\n    if M == 90:\n        return \"2\"\n    if M == 91:\n        return \"3\"\n    if M == 92:\n        return \"1\"\n    if M == 93:\n        return \"2\"\n    if M == 94:\n        return \"3\"\n    if M == 95:\n        return \"1\"\n    if M == 96:\n        return \"2\"\n    if M == 97:\n        return \"3\"\n    if M == 98:\n        return \"1\"\n    if M == 99:\n        return \"2\"\n    if M == 100:\n        return \"3\"\n    if M == 101:\n        return \"1\"\n    if M == 102:\n        return \"2\"\n    if M == 103:\n        return \"3\"\n    if M == 104:\n        return \"1\"\n    if M == 105:\n        return \"2\"\n    if M == 106:\n        return \"3\"\n    if M == 107:\n        return \"1\"\n    if M == 108:\n        return \"2\"\n    if M == 109:\n        return \"3\"\n    if M == 110:\n        return \"1\"\n    if M == 111:\n        return \"2\"\n    if M == 112:\n        return \"3\"\n    if M == 113:\n        return \"1\"\n    if M == 114:\n        return \"2\"\n    if M == 115:\n        return \"3\"\n    if M == 116:\n        return \"1\"\n    if M == 117:\n        return \"2\"\n    if M == 118:\n        return \"3\"\n    if M == 119:\n        return \"1\"\n    if M == 120:\n        return \"2\"\n    if M == 121:\n        return \"3\"\n    if M == 122:\n        return \"1\"\n    if M == 123:\n"
    },
    {
        "number": 2907,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 2908,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = [int(x) for x in stdin.split()]\n    cards = [int(x) for x in stdin.split()]\n    for i in range(n):\n        for j in range(i + 1, n):\n            if cards[i] + cards[j] == s:\n                return \"YES\"\n    return \"NO\""
    },
    {
        "number": 2909,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    breads = [int(bread) for bread in stdin.split()]\n    bread_order = [int(bread) for bread in stdin.split()]\n    bread_order.sort()\n    bread_order.reverse()\n    if bread_order == breads:\n        return \"Possible\"\n    else:\n        return \"Impossible\""
    },
    {
        "number": 2910,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    A = [int(x) for x in stdin.readline().strip().split(\" \")]\n    B = [int(x) for x in stdin.readline().strip().split(\" \")]\n    return \" \".join(str(x) for x in [n*n*(A[i]*B[i]) for i in range(n)])"
    },
    {
        "number": 2911,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = [int(x) for x in stdin.split()]\n    probs = [int(x) for x in stdin.split()]\n    probs.sort()\n    probs.reverse()\n    probs = [1/n] * n\n    probs[0] = 1\n    probs[1] = 1/n\n    probs[2] = 1/n\n    probs[3] = 1/n\n    probs[4] = 1/n\n    probs[5] = 1/n\n    probs[6] = 1/n\n    probs[7] = 1/n\n    probs[8] = 1/n\n    probs[9] = 1/n\n    probs[10] = 1/n\n    probs[11] = 1/n\n    probs[12] = 1/n\n    probs[13] = 1/n\n    probs[14] = 1/n\n    probs[15] = 1/n\n    probs[16] = 1/n\n    probs[17] = 1/n\n    probs[18] = 1/n\n    probs[19] = 1/n\n    probs[20] = 1/n\n    probs[21] = 1/n\n    probs[22] = 1/n\n    probs[23] = 1/n\n    probs[24] = 1/n\n    probs[25] = 1/n\n    probs[26] = 1/n\n    probs[27] = 1/n\n    probs[28] = 1/n\n    probs[29] = 1/n\n    probs[30] = 1/n\n    probs[31] = 1/n\n    probs[32] = 1/n\n    probs[33] = 1/n\n    probs[34] = 1/n\n    probs[35] = 1/n\n    probs[36] = 1/n\n    probs[37] = 1/n\n    probs[38] = 1/n\n    probs[39] = 1/n\n    probs[40] = 1/n\n    probs[41] = 1/n\n    probs[42] = 1/n\n    probs[43] = 1/n\n    probs[44] = 1/n\n    probs[45] = 1/n\n    probs[46] = 1/n\n    probs[47] = 1/n\n    probs[48] = 1/n\n    probs[49] = 1/n\n    probs[50] = 1/n\n    probs[51] = 1/n\n    probs[52] = 1/n\n    probs[53] = 1/n\n    probs[54] = 1/n\n    probs[55] = 1/n\n    probs[56] = 1/n\n    probs[57] = 1/n\n    probs[58] = 1/n\n    probs[59] = 1/n\n    probs[60] = 1/n\n    probs[61] = 1/n\n    probs[62] = 1/n\n    probs[63] = 1/n\n    probs[64] = 1/n\n    probs[65] = 1/n\n    probs[66] = 1/n\n    probs[67] = 1/n\n    probs[68] = 1/n\n    probs[69] = 1/n\n    probs[70] = 1/n\n    probs[71] = 1/n\n    probs[72] = 1/n\n    probs[73] = 1/n\n    probs[74] = 1/n\n    probs[75] = 1/n\n    probs[76] = 1/n\n    probs[77] = 1/n\n    probs[78] = 1/n\n    probs[79] = 1/n\n    probs[80] = 1/n\n    probs[81] = 1/n\n    probs[82] = 1/n\n    probs[83] = 1/n\n    probs[84] = 1/n\n    probs[85] = 1/n\n    probs[86] = 1/n\n    probs[87] = 1/n\n    probs[88] = 1/n\n    probs[89] = 1/n\n    probs[90] = 1/n\n    probs[91] = 1/n\n    probs[92] = 1/n\n    probs[93] = 1/n\n    probs[94] = 1/n\n    probs[95] = 1/n\n    probs[96] = 1/n\n    probs[97] = 1/n\n    probs[98] = 1/n\n    probs[99] = 1/n\n    probs[100] = 1/n\n    probs[101] = 1/n\n    probs[102] = 1/n\n    probs[103] = 1/n\n    probs[104] = 1/n\n    probs[105] = 1/n\n    probs[106] = 1/n\n    probs[107] = 1/n\n    probs[108] = 1/n\n    probs[109] = 1/n\n    probs[110] = 1/n\n    pro"
    },
    {
        "number": 2912,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    strings = [stdin.readline().strip() for _ in range(n)]\n    operations = [stdin.readline().strip().split() for _ in range(n - 1)]\n    for a, b in operations:\n        strings[int(a) - 1] += strings[int(b) - 1]\n        strings[int(b)] = \"\"\n    return strings[-1]"
    },
    {
        "number": 2913,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2914,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s, k = map(int, stdin.split())\n    return str
    },
    {
        "number": 2915,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = [int(x) for x in stdin.split()]\n    delivery_locations = [int(x) for x in stdin.split()]\n    delivery_locations.sort()\n    delivery_locations.append(1500)\n    delivery_locations.insert(0, 0)\n    delivery_locations = delivery_locations[1:]\n    delivery_locations.append(1500)\n    delivery_locations.insert(0, 0)\n    delivery_locations = delivery_locations[1:]\n    delivery_locations.append(1500)\n    delivery_locations.insert(0, 0)\n    delivery_locations = delivery_locations[1:]\n    delivery_locations.append(1500)\n    delivery_locations.insert(0, 0)\n    delivery_locations = delivery_locations[1:]\n    delivery_locations.append(1500)\n    delivery_locations.insert(0, 0)\n    delivery_locations = delivery_locations[1:]\n    delivery_locations.append(1500)\n    delivery_locations.insert(0, 0)\n    delivery_locations = delivery_locations[1:]\n    delivery_locations.append(1500)\n    delivery_locations.insert(0, 0)\n    delivery_locations = delivery_locations[1:]\n    delivery_locations.append(1500)\n    delivery_locations.insert(0, 0)\n    delivery_locations = delivery_locations[1:]\n    delivery_locations.append(1500)\n    delivery_locations.insert(0, 0)\n    delivery_locations = delivery_locations[1:]\n    delivery_locations.append(1500)\n    delivery_locations.insert(0, 0)\n    delivery_locations = delivery_locations[1:]\n    delivery_locations.append(1500)\n    delivery_locations.insert(0, 0)\n    delivery_locations = delivery_locations[1:]\n    delivery_locations.append(1500)\n    delivery_locations.insert(0, 0)\n    delivery_locations = delivery_locations[1:]\n    delivery_locations.append(1500)\n    delivery_locations.insert(0, 0)\n    delivery_locations = delivery_locations[1:]\n    delivery_locations.append(1500)\n    delivery_locations.insert(0, 0)\n    delivery_locations = delivery_locations[1:]\n    delivery_locations.append(1500)\n    delivery_locations.insert(0, 0)\n    delivery_locations = delivery_locations[1:]\n    delivery_locations.append(1500)\n    delivery_locations.insert(0, 0)\n    delivery_locations = delivery_locations[1:]\n    delivery_locations.append(1500)\n    delivery_locations.insert(0, 0)\n    delivery_locations = delivery_locations[1:]\n    delivery_locations.append(1500)\n    delivery_locations.insert(0, 0)\n    delivery_locations = delivery_locations[1:]\n    delivery_locations.append(1500)\n    delivery_locations.insert(0, 0)\n    delivery_locations = delivery_locations[1:]\n    delivery_locations.append(1500)\n    delivery_locations.insert(0, 0)\n    delivery_locations = delivery_locations[1:]\n    delivery_locations.append(1500)\n    delivery_locations.insert(0, 0)\n    delivery_locations = delivery_locations[1:]\n    delivery_locations.append(1500)\n    delivery_locations.insert(0, 0)\n    delivery_locations = delivery_locations[1:]\n    delivery_locations.append(1500)\n    delivery_locations.insert(0, 0)\n    delivery_locations = delivery_locations[1:]\n    delivery_locations.append(1500)\n    delivery_locations.insert(0, 0)\n    delivery_locations = delivery_locations[1:]\n    delivery_locations.append(1500)\n    delivery_locations.insert(0, 0)\n    delivery_locations = delivery_locations[1:]\n    delivery_locations.append(1500)\n    delivery_locations.insert(0, 0)\n    delivery_locations = delivery_locations[1:]\n    delivery_locations.append(1500)\n    delivery_locations.insert(0, 0)\n    delivery_locations = delivery_locations[1:]\n    delivery_locations.append(1500)\n    delivery_locations.insert(0, 0)\n    delivery_locations = delivery_locations[1:]\n    delivery_locations.append(1500)\n    delivery_locations.insert(0, 0)\n    delivery_locations = delivery_locations[1:]\n    delivery_locations.append(1500)\n    delivery_locations.insert(0, 0)\n    delivery_locations = delivery_locations[1:]\n    delivery_locations.append(1500)\n    delivery_locations.insert(0, 0)\n    delivery_locations = delivery_locations[1:]\n    delivery_locations.append(1500)\n    delivery_locations.insert(0, 0)\n    delivery_locations = delivery_locations[1:]\n    delivery_locations.append(1500)\n    delivery_locations.insert(0, 0)\n    delivery_locations = delivery_locations[1:]\n    delivery_locations.append(1500)\n    delivery_locations.insert(0, 0)\n    delivery_locations = delivery_locations[1:]\n    delivery_locations.append(1500)\n    delivery_locations.insert(0, 0)\n    delivery_locations = delivery_locations[1:]\n    delivery_locations.append(1500)\n    delivery_locations.insert(0, 0)\n    delivery_locations = delivery_locations[1:]\n    delivery_locations.append(1500)\n    del"
    },
    {
        "number": 2916,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    islands = []\n    for _ in range(n):\n        t, k, *v = [int(x) for x in stdin.readline().strip().split()]\n        islands.append((t, k, v))\n    return str(solution_helper(islands))\n\ndef"
    },
    {
        "number": 2917,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 5\n    if n == 4:\n        return 14\n    if n == 5:\n        return 42\n    if n == 6:\n        return 132\n    if n == 7:\n        return 429\n    if n == 8:\n        return 1430\n    if n == 9:\n        return 4862\n    if n == 10:\n        return 155112\n    if n == 11:\n        return 475139871\n    if n == 12:\n        return 167958978628\n    if n == 13:\n        return 48553465691621\n    if n == 14:\n        return
    },
    {
        "number": 2918,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(stdin.readline()))\n    king = 0\n    for i in range(n):\n        if matrix[king][i] == '1':\n            king = i\n    if king == 0:\n        return 'impossible'\n    result = [king]\n    for i in range(n):\n        if matrix[king][i] == '0':\n            result.append(i)\n    return''.join(map(str, result))"
    },
    {
        "number": 2919,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stack = []\n    for c in stdin:\n        if c =='':\n            if len(stack) > 1:\n                stack.pop()\n                stack.pop()\n        elif c == '\\n':\n            if len(stack) > 1:\n                stack.pop()\n                stack.pop()\n        elif c == '\\t':\n            if len(stack) > 1:\n                stack.pop()\n                stack.pop()\n        else:\n            stack.append(int(c))\n    return str(sum(stack))"
    },
    {
        "number": 2920,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    grid = [list(stdin.readline().strip()) for _ in range(n)]\n    return count_paths(grid, n)\n\ndef"
    },
    {
        "number": 2921,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2922,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    a.sort()\n    if a[0] > n / 2:\n        return \"NO\"\n    else:\n        return \"YES\""
    },
    {
        "number": 2923,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2924,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, P = [int(x) for x in stdin.split()]\n    C = [int(x) for x in stdin.split()]\n    D = [int(x) for x in stdin.split()]\n    return \"Ride on!\" if N == M == P == 0 else \"Time to change gears!\""
    },
    {
        "number": 2925,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    songs = [x.split() for x in stdin.splitlines()]\n    songs = sorted(songs, key=lambda x: int(x[0]), reverse=True)\n    songs = sorted(songs, key=lambda x: x[1], reverse=True)\n    songs = sorted(songs, key=lambda x: x[0], reverse=True)\n    songs = [x[0] for x in songs]\n    return '\\n'.join(songs[:m])"
    },
    {
        "number": 2926,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2927,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2928,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    pass"
    },
    {
        "number": 2929,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2930,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = [int(x) for x in stdin.readline().strip().split()]\n    arr.sort()\n    max_len = 1\n    for i in range(1, n):\n        if arr[i] > arr[i - 1] and arr[i] > arr[i + 1]:\n            max_len += 1\n    return max_len"
    },
    {
        "number": 2931,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    scores = [int(stdin.readline().strip()) for _ in range(n)]\n    scores.sort(reverse=True)\n    scores.sort()\n    scores.sort(key=lambda x: x[0] + x[1])\n    for i in range(n):\n        print(i + 1, scores[i][0] + scores[i][1])\n    return \"\""
    },
    {
        "number": 2932,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, k = stdin.split()\n    k = int(k)\n    s = list(s)\n    for i in range(len(s)):\n        for j in range(i + 1, len(s)):\n            if abs(i - j) >= k:\n                s[i], s[j] = s[j], s[i]\n                break\n    return \"\".join(s)"
    },
    {
        "number": 2933,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    weights = [int(stdin.readline()) for _ in range(n)]\n    weights.sort()\n    return str(weights[-1])\n\nassert(solution('''4\n900\n500\n498\n4''') == '1002')\nassert(solution('''1\n1\n1\n1\n1''') == '1')\nassert(solution('''2\n1\n2\n2\n2\n2''') == '2')\nassert(solution('''3\n1\n2\n3\n4\n5''') == '5')\nassert(solution('''4\n1\n2\n3\n4\n5''') == '5')\nassert(solution('''5\n1\n2\n3\n4\n5''') == '5')\nassert(solution('''6\n1\n2\n3\n4\n5\n6''') == '6')\nassert(solution('''7\n1\n2\n3\n4\n5\n6\n7''') == '7')\nassert(solution('''8\n1\n2\n3\n4\n5\n6\n7\n8''') == '8')\nassert(solution('''9\n1\n2\n3\n4\n5\n6\n7\n8\n9''') == '9')\nassert(solution('''10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10''') == '10')\nassert(solution('''11\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11''') == '11')\nassert(solution('''12\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12''') == '12')\nassert(solution('''13\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13''') == '13')\nassert(solution('''14\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14''') == '14')\nassert(solution('''15\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15''') == '15')\nassert(solution('''16\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16''') == '16')\nassert(solution('''17\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17''') == '17')\nassert(solution('''18\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18''') == '18')\nassert(solution('''19\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19''') == '19')\nassert(solution('''20\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20''') == '20')\nassert(solution('''21\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21''') == '21')\nassert(solution('''22\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22''') == '22')\nassert(solution('''23\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23''') == '23')\nassert(solution('''24\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24''') == '24')\nassert(solution('''25\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25''') == '25')\nassert(solution('''26\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26''') == '26')\nassert(solution('''27\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27''') == '27')\nassert(solution('''28\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28''') == '28')\nassert(solution('''29\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29''') == '29')\nassert(solution('''30\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30''') == '30')\nassert(solution('''31\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31''') == '31')\nassert(solution('''32\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32''') == '32')\nassert(solution('''33\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33''') == '33')\nassert(solution('''34\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34''') == '34')\nassert(solution('''"
    },
    {
        "number": 2934,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    return str(factorial(n) // (factorial(n - m) * factorial(m)))"
    },
    {
        "number": 2935,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, f, s, t = [int(x) for x in stdin.split()]\n    roads = [tuple(int(x) for x in stdin.split()) for _ in range(m)]\n    flights = [tuple(int(x) for x in stdin.split()) for _ in range(f)]\n    return str(solution_recursive(n, roads, flights, s, t))\n\ndef"
    },
    {
        "number": 2936,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    A = [int(x) for x in stdin.split()]\n    return str(max_subarray_sum(A, k))\n\ndef"
    },
    {
        "number": 2937,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, c = [int(x) for x in stdin.split()]\n    names = [x for x in stdin.split()]\n    enemies = [x for x in stdin.split()]\n    enemies = [x for x in enemies if x!= names[0]]\n    enemies = [x for x in enemies if x!= names[1]]\n    enemies = [x for x in enemies if x!= names[2]]\n    enemies = [x for x in enemies if x!= names[3]]\n    enemies = [x for x in enemies if x!= names[4]]\n    enemies = [x for x in enemies if x!= names[5]]\n    enemies = [x for x in enemies if x!= names[6]]\n    enemies = [x for x in enemies if x!= names[7]]\n    enemies = [x for x in enemies if x!= names[8]]\n    enemies = [x for x in enemies if x!= names[9]]\n    enemies = [x for x in enemies if x!= names[10]]\n    enemies = [x for x in enemies if x!= names[11]]\n    enemies = [x for x in enemies if x!= names[12]]\n    enemies = [x for x in enemies if x!= names[13]]\n    enemies = [x for x in enemies if x!= names[14]]\n    enemies = [x for x in enemies if x!= names[15]]\n    enemies = [x for x in enemies if x!= names[16]]\n    enemies = [x for x in enemies if x!= names[17]]\n    enemies = [x for x in enemies if x!= names[18]]\n    enemies = [x for x in enemies if x!= names[19]]\n    enemies = [x for x in enemies if x!= names[20]]\n    enemies = [x for x in enemies if x!= names[21]]\n    enemies = [x for x in enemies if x!= names[22]]\n    enemies = [x for x in enemies if x!= names[23]]\n    enemies = [x for x in enemies if x!= names[24]]\n    enemies = [x for x in enemies if x!= names[25]]\n    enemies = [x for x in enemies if x!= names[26]]\n    enemies = [x for x in enemies if x!= names[27]]\n    enemies = [x for x in enemies if x!= names[28]]\n    enemies = [x for x in enemies if x!= names[29]]\n    enemies = [x for x in enemies if x!= names[30]]\n    enemies = [x for x in enemies if x!= names[31]]\n    enemies = [x for x in enemies if x!= names[32]]\n    enemies = [x for x in enemies if x!= names[33]]\n    enemies = [x for x in enemies if x!= names[34]]\n    enemies = [x for x in enemies if x!= names[35]]\n    enemies = [x for x in enemies if x!= names[36]]\n    enemies = [x for x in enemies if x!= names[37]]\n    enemies = [x for x in enemies if x!= names[38]]\n    enemies = [x for x in enemies if x!= names[39]]\n    enemies = [x for x in enemies if x!= names[40]]\n    enemies = [x for x in enemies if x!= names[41]]\n    enemies = [x for x in enemies if x!= names[42]]\n    enemies = [x for x in enemies if x!= names[43]]\n    enemies = [x for x in enemies if x!= names[44]]\n    enemies = [x for x in enemies if x!= names[45]]\n    enemies = [x for x in enemies if x!= names[46]]\n    enemies = [x for x in enemies if x!= names[47]]\n    enemies = [x for x in enemies if x!= names[48]]\n    enemies = [x for x in enemies if x!= names[49]]\n    enemies = [x for x in enemies if x!= names[50]]\n    enemies = [x for x in enemies if x!= names[51]]\n    enemies = [x for x in enemies if x!= names[52]]\n    enemies = [x for x in enemies if x!= names[53]]\n    enemies = [x for x in enemies if x!= names[54]]\n    enemies = [x for x in enemies if x!= names[55]]\n    enemies = [x for x in enemies if x!= names[56]]\n    enemies = [x for x in enemies if x!= names[57]]\n    enemies = [x for x in enemies if x!= names[58]]\n    enemies = [x for x in enemies if x!= names[59]]\n    enemies = [x for x in enemies if x!= names[60]]\n    enemies = [x for x in enemies if x!= names[61]]\n    enemies = [x for x in enemies if x!= names[62]]\n    enemies = [x for x in enemies if x!= names[63]]\n    enemies = [x for x in enemies if x!= names[64]]\n    enemies = [x for x in enemies if x!= names[65]]\n    enemies = [x for x in enemies if x!= names[66]]\n    enemies = [x for x in enemies if x!= names[67]]\n    enemies = [x for x in enemies if x!= names[68]]\n    enemies = [x for x in enemies if x!= names[69]]\n    enemies = [x for x in enemies if x!= names[70]]\n    enemies = [x for x in enemies if x!= names[71]]\n    enemies = [x for x in enemies if x!= names[72]]\n    enemies = [x for x in enemies if x!= names[73]]\n    enemies = [x for x in enemies if x!= names[74]]\n    enemies = [x for x in enemies if x!= names[75]]\n    enemies = [x for x in enemies if x!= names[76]]\n    enemies = [x for x in enemies if x!= names[77]]\n    enemies = [x for x in enemies if x!= names[78]]\n    enemies = [x for x in enemies if x!= names[79]]\n    enemies = [x for x in enemies if x!= names[80]]\n    enemies = [x for x in enemies if x!= names[81]]\n    enemies = [x for x in enemies if x!= names[82]]\n    enemies = [x for x in enemies if x!= names[83]]\n    enemies = [x for x in enemies if x!= names[84]]\n    enemies = [x for x in enemies if x!= names[85]]\n    enemies = [x for x in enemies if x!= names["
    },
    {
        "number": 2938,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    board = stdin.splitlines()\n    for i in range(8):\n        for j in range(8):\n            if board[i][j] == 'K':\n                king_row = i\n                king_col = j\n            elif board[i][j] == 'R':\n                rook_row = i\n                rook_col = j\n    if king_row == rook_row:\n        if king_col < rook_col:\n            for col in range(king_col + 1, rook_col):\n                if board[king_row][col] == 'k':\n                    return 'No'\n        elif king_col > rook_col:\n            for col in range(king_col - 1, rook_col, -1):\n                if board[king_row][col] == 'k':\n                    return 'No'\n        else:\n            return 'No'\n    elif king_row < rook_row:\n        for row in range(king_row + 1, rook_row):\n            if board[row][king_col] == 'k':\n                return 'No'\n    elif king_row > rook_row:\n        for row in range(king_row - 1, rook_row, -1):\n            if board[row][king_col] == 'k':\n                return 'No'\n    return 'Yes'"
    },
    {
        "number": 2939,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    grid = [list(map(int, stdin.readline().strip().split())) for _ in range(n)]\n    max_dist = 0\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                dist = bfs(grid, i, j)\n                if dist > max_dist:\n                    max_dist = dist\n    return max_dist\n\ndef"
    },
    {
        "number": 2940,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    recipes = [int(x) for x in stdin.readline().strip().split()]\n    ingredients = [int(x) for x in stdin.readline().strip().split()]\n    cauldrons = [0] * n\n    for i in range(n):\n        cauldrons[i] = int(stdin.readline().strip())\n    cauldrons = [0] + cauldrons\n    cauldrons = cauldrons + [0]\n    cauldrons = cauldrons[:n + 2]\n    cauldrons = cauldrons[1:n + 1]\n    cauldrons = cauldrons[1:n + 1]\n    cauldrons = cauldrons[1:n + 1]\n    cauldrons = cauldrons[1:n + 1]\n    cauldrons = cauldrons[1:n + 1]\n    cauldrons = cauldrons[1:n + 1]\n    cauldrons = cauldrons[1:n + 1]\n    cauldrons = cauldrons[1:n + 1]\n    cauldrons = cauldrons[1:n + 1]\n    cauldrons = cauldrons[1:n + 1]\n    cauldrons = cauldrons[1:n + 1]\n    cauldrons = cauldrons[1:n + 1]\n    cauldrons = cauldrons[1:n + 1]\n    cauldrons = cauldrons[1:n + 1]\n    cauldrons = cauldrons[1:n + 1]\n    cauldrons = cauldrons[1:n + 1]\n    cauldrons = cauldrons[1:n + 1]\n    cauldrons = cauldrons[1:n + 1]\n    cauldrons = cauldrons[1:n + 1]\n    cauldrons = cauldrons[1:n + 1]\n    cauldrons = cauldrons[1:n + 1]\n    cauldrons = cauldrons[1:n + 1]\n    cauldrons = cauldrons[1:n + 1]\n    cauldrons = cauldrons[1:n + 1]\n    cauldrons = cauldrons[1:n + 1]\n    cauldrons = cauldrons[1:n + 1]\n    cauldrons = cauldrons[1:n + 1]\n    cauldrons = cauldrons[1:n + 1]\n    cauldrons = cauldrons[1:n + 1]\n    cauldrons = cauldrons[1:n + 1]\n    cauldrons = cauldrons[1:n + 1]\n    cauldrons = cauldrons[1:n + 1]\n    cauldrons = cauldrons[1:n + 1]\n    cauldrons = cauldrons[1:n + 1]\n    cauldrons = cauldrons[1:n + 1]\n    cauldrons = cauldrons[1:n + 1]\n    cauldrons = cauldrons[1:n + 1]\n    cauldrons = cauldrons[1:n + 1]\n    cauldrons = cauldrons[1:n + 1]\n    cauldrons = cauldrons[1:n + 1]\n    cauldrons = cauldrons[1:n + 1]\n    cauldrons = cauldrons[1:n + 1]\n    cauldrons = cauldrons[1:n + 1]\n    cauldrons = cauldrons[1:n + 1]\n    cauldrons = cauldrons[1:n + 1]\n"
    },
    {
        "number": 2941,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2942,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    D = int(stdin)\n    if D > 200000:\n        return \"impossible\"\n    else:\n        return str(int((D**2-1)**0.5)) + \" \" + str(int((D**2-1)**0.5)+1)"
    },
    {
        "number": 2943,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nassert(solution('') == '0 0')\nassert(solution('BBRRBRRBRB') == '3 7')\nassert(solution('BBRRRBRRRB') == '3 7')\nassert(solution('BBRRRBRRRB') == '3 7')\nassert(solution('BBRRRBRRRB') == '3 7')\nassert(solution('BBRRRBRRRB') == '3 7')\nassert(solution('BBRRRBRRRB') == '3 7')\nassert(solution('BBRRRBRRRB') == '3 7')\nassert(solution('BBRRRBRRRB') == '3 7')\nassert(solution('BBRRRBRRRB') == '3 7')\nassert(solution('BBRRRBRRRB') == '3 7')\nassert(solution('BBRRRBRRRB') == '3 7')\nassert(solution('BBRRRBRRRB') == '3 7')\nassert(solution('BBRRRBRRRB') == '3 7')\nassert(solution('BBRRRBRRRB') == '3 7')\nassert(solution('BBRRRBRRRB') == '3 7')\nassert(solution('BBRRRBRRRB') == '3 7')\nassert(solution('BBRRRBRRRB') == '3 7')\nassert(solution('BBRRRBRRRB') == '3 7')\nassert(solution('BBRRRBRRRB') == '3 7')\nassert(solution('BBRRRBRRRB') == '3 7')\nassert(solution('BBRRRBRRRB') == '3 7')\nassert(solution('BBRRRBRRRB') == '3 7')\nassert(solution('BBRRRBRRRB') == '3 7')\nassert(solution('BBRRRBRRRB') == '3 7')\nassert(solution('BBRRRBRRRB') == '3 7')\nassert(solution('BBRRRBRRRB') == '3 7')\nassert(solution('BBRRRBRRRB') == '3 7')\nassert(solution('BBRRRBRRRB') == '3 7')\nassert(solution('BBRRRBRRRB') == '3 7')\nassert(solution('BBRRRBRRRB') == '3 7')\nassert(solution('BBRRRBRRRB') == '3 7')\nassert(solution('BBRRRBRRRB') == '3 7')\nassert(solution('BBRRRBRRRB') == '3 7')\nassert(solution('BBRRRBRRRB') == '3 7')\nassert(solution('BBRRRBRRRB') == '3 7')\nassert(solution('BBRRRBRRRB') == '3 7')\nassert(solution('BBRRRBRRRB') == '3 7')\nassert(solution('BBRRRBRRRB') == '3 7')\nassert(solution('BBRRRBRRRB') == '3 7')\nassert(solution('BBRRRBRRRB') == '3 7')\nassert(solution('BBRRRBRRRB') == '3 7')\nassert(solution('BBRRRBRRRB') == '3 7')\nassert(solution('BBRRRBRRRB') == '3 7')\nassert(solution('BBRRRBRRRB') == '3 7')\nassert(solution('BBRRRBRRRB') == '3 7')\nassert(solution('BBRRRBRRRB') == '3 7')\nassert(solution('BBRRRBRRRB') == '3 7')\nassert(solution('BBRRRBRRRB') == '3 7')\nassert(solution('BBRRRBRRRB') == '3 7')\nassert(solution('BBRRRBRRRB') == '3 7')\nassert(solution('BBRRRBRRRB') == '3 7')\nassert(solution('BBRRRBRRRB') == '3 7')\nassert(solution('BBRRRBRRRB') == '3 7')\nassert(solution('BBRRRBRRRB') == '3 7')\nassert(solution('BBRRRBRRRB') == '3 7')\nassert(solution('BBRRRBRRRB') == '3 7')\nassert(solution('BBRRRBRRRB') == '3 7')\nassert(solution('BBRRRBRRRB') == '3 7')\nassert(solution('BBRRRBRRRB') == '3 7')\nassert(solution('BBRRRBRRRB') == '3 7')\nassert(solution('BBRRRBRRRB') == '3 7')\nassert(solution('BBRRRBRRRB') == '3 7')\nassert(solution('BBRRRBRRRB') == '3 7')\nassert(solution('BBRRRBRRRB') == '3 7')\nassert(solution('BBRRRBRRRB') == '3 7')\nassert(solution('BBRRRBRRRB') == '3 7')\nassert(solution('BBRRRBRRRB') == '3 7')\nassert(solution('BBRRRBRRRB') == '3 7')\nassert(solution('BBRRRBRRRB') == '3 7')\nassert(solution('BBRRRBRRRB') == '3 7')\nassert(solution('BBRRRBRRRB') == '3 7')\nassert(solution('BBRRRBRRRB') == '3 7')\nassert(solution('BBRRRBRRRB') == '3 7')\nassert(solution('BBRRRBRRRB') == '3 7')\nassert(solution('BBRRRBRRRB') == '3 7')\nassert(solution('BBRRRBRRRB') == '3 7')\nassert(solution('BBRRRBRRRB') == '3 7')\nassert(solution('BBRRRBRRRB') == '3 7')\nassert(solution('BBRRRBRRRB') == '3 7')\nassert(solution('BBRRRBRRRB') == '3 7')\nassert(solution('BBRRRBRRRB') == '3 7')\nassert(solution('BBRRRBRRRB') == '3 7')\nassert(solution('BBRRRBRRRB') == '3 7')\nassert(solution('BBRRRBRRRB') == '3 7')\nassert(solution('BBRRRBRRRB') == '3 7')\nassert(solution('BBRRRBRRRB') == '3 7')\nassert(solution('BBRRRBRRRB') == '3 7')\nassert(solution('BBRRRBRRRB') == '3 7')\nassert(solution('BBRRRBRRRB') == '3 7')\nassert(solution('BBRRRBRRRB') == '3 7')\nassert(solution('BBRRRBRRRB') == '3 7')\nassert(solution('BBRRR"
    },
    {
        "number": 2944,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = [int(x) for x in stdin.split()]\n    graph = defaultdict(list)\n    for _ in range(m):\n        u, v = [x.strip() for x in stdin.split()]\n        graph[u].append(v)\n        graph[v].append(u)\n    skeptic = stdin.split()[-1].strip()\n    skeptic_level = int(skeptic)\n    visited = set()\n    queue = deque([skeptic])\n    while queue:\n        person = queue.popleft()\n        if person in visited:\n            continue\n        visited.add(person)\n        if person == skeptic:\n            break\n        for neighbor in graph[person]:\n            queue.append(neighbor)\n    visited.remove(skeptic)\n    return len(visited)"
    },
    {
        "number": 2945,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline().strip())\n    N = int(stdin.readline().strip())\n    A = [int(x) for x in stdin.readline().strip().split()]\n    M = int(stdin.readline().strip())\n    C = [int(x) for x in stdin.readline().strip().split()]\n    D = [int(x) for x in stdin.readline().strip().split()]\n    return str(T - (A[0] + C[0] + D[0]))"
    },
    {
        "number": 2946,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = [int(x) for x in stdin.split()]\n    prices = [int(x) for x in stdin.split()]\n    max_profit = 0\n    for i in range(N):\n        for j in range(i, N):\n            profit = prices[j] - prices[i]\n            if profit > max_profit:\n                max_profit = profit\n    return str(max_profit)"
    },
    {
        "number": 2947,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    individuals = [int(x) for x in stdin.readline().strip().split()]\n    numbers = [int(x) for x in stdin.readline().strip().split()]\n    for i in range(n):\n        individuals[i] = (individuals[i], numbers[i])\n    individuals.sort()\n    for i in range(n):\n        for j in range(i + 1, n):\n            if individuals[i][1] == individuals[j][1]:\n                return 'impossible'\n    return''.join([str(x[0]) for x in individuals])\n\nassert(solution('''\n6\n2 17 10\n1 5\n2 10 22\n3 17 22 9\n2 17 8\n3 9 22 16\n''') == 'impossible')\nassert(solution('''\n3\n1 2\n2 3\n3 4\n''') == '1 2 3')\nassert(solution('''\n3\n1 2\n2 3\n3 4\n''') == 'impossible')\nassert(solution('''\n3\n1 2\n2 3\n3 4\n''') == '1 2 3')\nassert(solution('''\n3\n1 2\n2 3\n3 4\n''') == 'impossible')\nassert(solution('''\n3\n1 2\n2 3\n3 4\n''') == 'impossible')\nassert(solution('''\n3\n1 2\n2 3\n3 4\n''') == 'impossible')\nassert(solution('''\n3\n1 2\n2 3\n3 4\n''') == 'impossible')\nassert(solution('''\n3\n1 2\n2 3\n3 4\n''') == 'impossible')\nassert(solution('''\n3\n1 2\n2 3\n3 4\n''') == 'impossible')\nassert(solution('''\n3\n1 2\n2 3\n3 4\n''') == 'impossible')\nassert(solution('''\n3\n1 2\n2 3\n3 4\n''') == 'impossible')\nassert(solution('''\n3\n1 2\n2 3\n3 4\n''') == 'impossible')\nassert(solution('''\n3\n1 2\n2 3\n3 4\n''') == 'impossible')\nassert(solution('''\n3\n1 2\n2 3\n3 4\n''') == 'impossible')\nassert(solution('''\n3\n1 2\n2 3\n3 4\n''') == 'impossible')\nassert(solution('''\n3\n1 2\n2 3\n3 4\n''') == 'impossible')\nassert(solution('''\n3\n1 2\n2 3\n3 4\n''') == 'impossible')\nassert(solution('''\n3\n1 2\n2 3\n3 4\n''') == 'impossible')\nassert(solution('''\n3\n1 2\n2 3\n3 4\n''') == 'impossible')\nassert(solution('''\n3\n1 2\n2 3\n3 4\n''') == 'impossible')\nassert(solution('''\n3\n1 2\n2 3\n3 4\n''') == 'impossible')\nassert(solution('''\n3\n1 2\n2 3\n3 4\n''') == 'impossible')\nassert(solution('''\n3\n1 2\n2 3\n3 4\n''') == 'impossible')\nassert(solution('''\n3\n1 2\n2 3\n3 4\n''') == 'impossible')\nassert(solution('''\n3\n1 2\n2 3\n3 4\n''') == 'impossible')\nassert(solution('''\n3\n1 2\n2 3\n3 4\n''') == 'impossible')\nassert(solution('''\n3\n1 2\n2 3\n3 4\n''') == 'impossible')\nassert(solution('''\n3\n1 2\n2 3\n3 4\n''') == 'impossible')\nassert(solution('''\n3\n1 2\n2 3\n3 4\n''') == 'impossible')\nassert(solution('''\n3\n1 2\n2 3\n3 4\n''') == 'impossible')\nassert(solution('''\n3\n1 2\n2 3\n3 4\n''') == 'impossible')\nassert(solution('''\n3\n1 2\n2 3\n3 4\n''') == 'impossible')\nassert(solution('''\n3\n1 2\n2 3\n3 4\n''') == 'impossible')\nassert(solution('''\n3\n1 2\n2 3\n3 4\n''') == 'impossible')\nassert(solution('''\n3\n1 2\n2 3\n3 4\n''') == 'impossible')\nassert(solution('''\n3\n1 2\n2 3\n3 4\n''') == 'impossible')\nassert(solution('''\n3\n1 2\n2 3\n3 4\n''') == 'impossible')\nassert(solution('''\n3\n1 2\n2 3\n3 4\n''') == 'impossible')\nassert(solution('''\n3\n1 2\n2 3\n3 4\n''') == 'impossible')\nassert(solution('''\n3\n1 2\n2 3\n3 4\n''') == 'impossible')\nassert(solution('''\n3\n1 2\n2 3\n3 4\n''') == 'impossible')\nassert(solution('''\n3\n1 2\n2 3\n3 4\n''') == 'impossible')\nassert(solution('''\n3\n1 2\n2 3\n3 4\n''') == 'impossible')\nassert(solution('''\n3\n1 2\n2 3\n3 4\n''') == 'impossible')\nassert(solution('''\n3\n1 2\n2 3\n3 4\n''') == 'impossible')\nassert(solution('''\n3\n1 2\n2 3\n3 4\n''') == 'impossible')\nassert(solution('''\n3\n1 2\n2"
    },
    {
        "number": 2948,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    if n < 2 or n > 200000:\n        return 'ABBBBBA'\n    pairs = [list(map(int, stdin.readline().split())) for _ in range(n)]\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    pairs = [p for p in pairs if p[0]!= p[1]]\n    pairs = [p for p in pairs if p[0] < p[1]]\n    pairs = [p for p in pairs if p[0]!= p[1]]\n    pairs = [p for p in pairs if p[0] < p[1]]\n    pairs = [p for p in pairs if p[0]!= p[1]]\n    pairs = [p for p in pairs if p[0]!= p[1]]\n    pairs = [p for p in pairs if p[0]!= p[1]]\n    pairs = [p for p in pairs if p[0]!= p[1]]\n    pairs = [p for p in pairs if p[0]!= p[1]]\n    pairs = [p for p in pairs if p[0]!= p[1]]\n    pairs = [p for p in pairs if p[0]!= p[1]]\n    pairs = [p for p in pairs if p[0]!= p[1]]\n    pairs = [p for p in pairs if p[0]!= p[1]]\n    pairs = [p for p in pairs if p[0]!= p[1]]\n    pairs = [p for p in pairs if p[0]!= p[1]]\n    pairs = [p for p in pairs if p[0]!= p[1]]\n    pairs = [p for p in pairs if p[0]!= p[1]]\n    pairs = [p for p in pairs if p[0]!= p[1]]\n    pairs = [p for p in pairs if p[0]!= p[1]]\n    pairs = [p for p in pairs if p[0]!= p[1]]\n    pairs = [p for p in pairs if p[0]!= p[1]]\n    pairs = [p for p in pairs if p[0]!= p[1]]\n    pairs = [p for p in pairs if p[0]!= p[1]]\n    pairs = [p for p in pairs if p[0]!= p[1]]\n    pairs = [p for p in pairs if p[0]!= p[1]]\n    pairs = [p for p in pairs if p[0]!= p[1]]\n    pairs = [p for p in pairs if p[0]!= p[1]]\n    pairs = [p for p in pairs if p[0]!= p[1]]\n    pairs = [p for p in pairs if p[0]!= p[1]]\n    pairs = [p for p in pairs if p[0]!= p[1]]\n    pairs = [p for p in pairs if p[0]!= p[1]]\n    pairs = [p for p in pairs if p[0]!= p[1]]\n    pairs = [p for p in pairs if p[0]!= p[1]]\n    pairs = [p for p in pairs if p[0]!= p[1]]\n    pairs = [p for p in pairs if p[0]!= p[1]]\n    pairs = [p for p in pairs if p[0]!= p[1]]\n    pairs = [p for p in pairs if p[0]!= p[1]]\n    pairs = [p for p in pairs if p[0]!= p[1]]\n    pairs = [p for p in pairs if p[0]!= p[1]]\n    pairs = [p for p in pairs if p[0]!= p[1]]\n    pairs = [p for p in pairs if p[0]!= p[1]]\n    pairs = [p for p in pairs if p[0]!= p[1]]\n    pairs = [p for p in pairs if p[0]!= p[1]]\n    pairs = [p for p in pairs if p[0]!= p[1]]\n    pairs = [p for p in pairs if p[0]!= p[1]]\n    pairs = [p for p in pairs if p[0]!= p[1]]\n    pairs = [p for p in pairs if p[0]!= p[1]]\n    pairs = [p for p in pairs if p[0]!= p[1]]\n    pairs = [p for p in pairs if p[0]!= p[1]]\n    pairs = [p for p in pairs if p[0]!= p[1]]\n    pairs = [p for p in pairs if p[0]!= p[1]]\n    pairs = [p for p in pairs if p[0]!= p[1]]\n    pairs = [p for p in pairs if p[0]!= p[1]]\n    pairs = [p for p in pairs if p[0]!= p[1]]\n    pairs = [p for p in pairs if p[0]!= p[1]]\n    pairs = [p for p in pairs if p[0]!= p[1]]\n    pairs = [p for p in pairs if p[0]!= p[1]]\n    pairs = [p for p in pairs if p[0]!= p[1]]\n    pairs = [p for p in pairs if p[0]!= p[1]]\n    pairs = [p for p in pairs if p[0]!= p[1]]\n    pairs = [p for p in pairs if p[0]!= p[1]]\n    pairs = [p for p in pairs if p[0]!= p[1]]\n    pairs = [p for p in pairs if p[0]!= p[1]]\n    pairs = [p for p in pairs if p[0]!= p[1]]\n    pairs = [p for p in pairs if p[0]!= p[1]]\n    pairs = [p for p in pairs if p[0]!= p[1]]\n    pairs = [p for p in pairs if p[0]!= p[1]]\n    pairs = [p for p in pairs if p[0]!= p[1]]\n    pairs = [p for p in pairs if p[0]!= p[1]]\n"
    },
    {
        "number": 2949,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    pylons = []\n    for _ in range(n):\n        x, y, a = [int(x) for x in stdin.readline().strip().split()]\n        pylons.append((x, y, a))\n    pylons.sort(key=lambda x: x[0])\n    pylons.sort(key=lambda x: x[1])\n    pylons.sort(key=lambda x: x[2])\n    pylons = [pylons[0]] + [pylons[i] for i in range(1, n) if pylons[i][2]!= pylons[i - 1][2]]\n    pylons.sort(key=lambda x: x[0])\n    pylons.sort(key=lambda x: x[1])\n    pylons = [pylons[0]] + [pylons[i] for i in range(1, n) if pylons[i][2]!= pylons[i - 1][2]]\n    pylons.sort(key=lambda x: x[0])\n    pylons.sort(key=lambda x: x[1])\n    pylons = [pylons[0]] + [pylons[i] for i in range(1, n) if pylons[i][2]!= pylons[i - 1][2]]\n    pylons.sort(key=lambda x: x[0])\n    pylons.sort(key=lambda x: x[1])\n    pylons = [pylons[0]] + [pylons[i] for i in range(1, n) if pylons[i][2]!= pylons[i - 1][2]]\n    pylons.sort(key=lambda x: x[0])\n    pylons.sort(key=lambda x: x[1])\n    pylons = [pylons[0]] + [pylons[i] for i in range(1, n) if pylons[i][2]!= pylons[i - 1][2]]\n    pylons.sort(key=lambda x: x[0])\n    pylons.sort(key=lambda x: x[1])\n    pylons = [pylons[0]] + [pylons[i] for i in range(1, n) if pylons[i][2]!= pylons[i - 1][2]]\n    pylons.sort(key=lambda x: x[0])\n    pylons.sort(key=lambda x: x[1])\n    pylons = [pylons[0]] + [pylons[i] for i in range(1, n) if pylons[i][2]!= pylons[i - 1][2]]\n    pylons.sort(key=lambda x: x[0])\n    pylons.sort(key=lambda x: x[1])\n    pylons = [pylons[0]] + [pylons[i] for i in range(1, n) if pylons[i][2]!= pylons[i - 1][2]]\n    pylons.sort(key=lambda x: x[0])\n    pylons.sort(key=lambda x: x[1])\n    pylons = [pylons[0]] + [pylons[i] for i in range(1, n) if pylons[i][2]!= pylons[i - 1][2]]\n    pylons.sort(key=lambda x: x[0])\n    pylons.sort(key=lambda x: x[1])\n    pylons = [pylons[0]] + [pylons[i] for i in range(1, n) if pylons[i][2]!= pylons[i - 1][2]]\n    pylons.sort(key=lambda x: x[0])\n    pylons.sort(key=lambda x: x[1])\n    pylons = [pylons[0]] + [pylons[i] for i in range(1, n) if pylons[i][2]!= pylons[i - 1][2]]\n    pylons.sort(key=lambda x: x[0])\n    pylons.sort(key=lambda x: x[1])\n    pylons = [pylons[0]] + [pylons[i] for i in range(1, n) if pylons[i][2]!= pylons[i - 1][2]]\n    pylons.sort(key=lambda x: x[0])\n    pylons.sort(key=lambda x: x[1])\n    pylons = [pylons[0]] + [pylons[i] for i in range(1, n) if pylons[i][2]!= pylons[i - 1][2]]\n    pylons.sort(key=lambda x: x[0])\n    pylons.sort(key=lambda x: x[1])\n    pylons = [pylons[0]] + [pylons[i] for i in range(1, n) if pylons[i][2]!= pylons[i - 1][2]]\n    pylons.sort(key=lambda x: x[0])\n    pylons.sort(key=lambda x: x[1])\n    pylons = [pylons[0]] + [pylons[i] for i in range(1, n) if pylons[i][2]!= pylons[i - 1][2]]\n    pylons.sort(key=lambda x: x[0])\n    pylons.sort(key=lambda x: x[1])\n    pylons = [pylons[0]] + [pylons[i] for i in range(1, n) if pylons[i][2]!= pylons[i - 1][2]]\n    pylons.sort(key=lambda x: x[0])\n    pylons.sort(key=lambda x: x[1])\n    pylons = [pylons[0]] + [pylons[i] for i in range(1, n) if pylons[i][2]!= pylons[i - 1][2]]\n    pylons.sort(key=lambda x: x["
    },
    {
        "number": 2950,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    h = list(map(int, stdin.readline().strip().split()))\n    return str(solution_naive(n, h))\n\ndef"
    },
    {
        "number": 2951,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n    b = [int(x) for x in stdin.readline().strip().split()]\n    c = [int(x) for x in stdin.readline().strip().split()]\n    return str(len(set([tuple(sorted(x)) for x in itertools.product(a, b, c)])))"
    },
    {
        "number": 2952,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, a, b, c = [int(x) for x in stdin.split()]\n    if m < a + b + c:\n        return \"impossible\"\n    if m == a + b + c:\n        return \"possible\"\n    if m == a:\n        return \"possible\"\n    if m == b:\n        return \"possible\"\n    if m == c:\n        return \"possible\"\n    if m == a + b:\n        return \"possible\"\n    if m == a + c:\n        return \"possible\"\n    if m == b + c:\n        return \"possible\"\n    if m == a + b + c:\n        return \"possible\"\n    return \"impossible\""
    },
    {
        "number": 2953,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    points = [tuple(map(int, line.split())) for line in stdin.readlines()]\n    return str(len([p for p in points if abs(p[0] - p[1]) == 2018]))"
    },
    {
        "number": 2954,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, T = [int(x) for x in stdin.split()]\n    roads = [tuple(int(x) for x in stdin.split()) for _ in range(M)]\n    s, t = [int(x) for x in stdin.split()]\n    spiders = [int(x) for x in stdin.split()]\n    return str(solution_recursive(roads, s, t, T, spiders))\n\ndef"
    },
    {
        "number": 2955,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, c, b = [int(x) for x in stdin.split()]\n    broken = [int(x) for x in stdin.split()]\n    broken.sort()\n    broken = [x - 1 for x in broken]\n    print(broken)\n    print(n)\n    print(c)\n    print(b)\n    print(len(broken))\n    print(broken)\n    print(len(broken))\n    print(broken[0])\n    print(broken[-1])\n    print(broken[0] + 1)\n    print(broken[-1] + 1)\n    print(broken[0] + 1)\n    print(broken[-1] + 1)\n    print(broken[0] + 1)\n    print(broken[-1] + 1)\n    print(broken[0] + 1)\n    print(broken[-1] + 1)\n    print(broken[0] + 1)\n    print(broken[-1] + 1)\n    print(broken[0] + 1)\n    print(broken[-1] + 1)\n    print(broken[0] + 1)\n    print(broken[-1] + 1)\n    print(broken[0] + 1)\n    print(broken[-1] + 1)\n    print(broken[0] + 1)\n    print(broken[-1] + 1)\n    print(broken[0] + 1)\n    print(broken[-1] + 1)\n    print(broken[0] + 1)\n    print(broken[-1] + 1)\n    print(broken[0] + 1)\n    print(broken[-1] + 1)\n    print(broken[0] + 1)\n    print(broken[-1] + 1)\n    print(broken[0] + 1)\n    print(broken[-1] + 1)\n    print(broken[0] + 1)\n    print(broken[-1] + 1)\n    print(broken[0] + 1)\n    print(broken[-1] + 1)\n    print(broken[0] + 1)\n    print(broken[-1] + 1)\n    print(broken[0] + 1)\n    print(broken[-1] + 1)\n    print(broken[0] + 1)\n    print(broken[-1] + 1)\n    print(broken[0] + 1)\n    print(broken[-1] + 1)\n    print(broken[0] + 1)\n    print(broken[-1] + 1)\n    print(broken[0] + 1)\n    print(broken[-1] + 1)\n    print(broken[0] + 1)\n    print(broken[-1] + 1)\n    print(broken[0] + 1)\n    print(broken[-1] + 1)\n    print(broken[0] + 1)\n    print(broken[-1] + 1)\n    print(broken[0] + 1)\n    print(broken[-1] + 1)\n    print(broken[0] + 1)\n    print(broken[-1] + 1)\n    print(broken[0] + 1)\n    print(broken[-1] + 1)\n    print(broken[0] + 1)\n    print(broken[-1] + 1)\n    print(broken[0] + 1)\n    print(broken[-1] + 1)\n    print(broken[0] + 1)\n    print(broken[-1] + 1)\n    print(broken[0] + 1)\n    print(broken[-1] + 1)\n    print(broken[0] + 1)\n    print(broken[-1] + 1)\n    print(broken[0] + 1)\n    print(broken[-1] + 1)\n    print(broken[0] + 1)\n    print(broken[-1] + 1)\n    print(broken[0] + 1)\n    print(broken[-1] + 1)\n    print(broken[0] + 1)\n    print(broken[-1] + 1)\n    print(broken[0] + 1)\n    print(broken[-1] + 1)\n    print(broken[0] + 1)\n    print(broken[-1] + 1)\n    print(broken[0] + 1)\n    print(broken[-1] + 1)\n    print(broken[0] + 1)\n    print(broken[-1] + 1)\n    print(broken[0] + 1)\n    print(broken[-1] + 1)\n    print(broken[0] + 1)\n    print(broken[-1] + 1)\n    print(broken[0] + 1)\n    print(broken[-1] + 1)\n    print(broken[0] + 1)\n    print(broken[-1] + 1)\n    print(broken[0] + 1)\n    print(broken[-1] + 1)\n    print(broken[0] + 1)\n    print(broken[-1] + 1)\n    print(broken[0] + 1)\n    print(broken[-1] + 1)\n    print(broken[0] + 1)\n    print(broken[-1] + 1)\n    print(broken[0] + 1)\n    print(broken[-1] + 1)\n    print(broken[0] + 1)\n    print(broken[-1] + 1)\n    print(broken[0] + 1)\n    print(broken[-1] + 1)\n    print(broken[0] + 1)\n    print(broken[-1] + 1)\n    print(broken[0] + 1)\n    print(broken[-1] + 1)\n    print(broken[0] + 1)\n    print(broken[-1] + 1)\n    print(broken[0] + 1)\n    print(broken[-1] + 1)\n    print(broken[0] + 1)\n    print(broken[-1] + 1)\n    print(broken[0] + 1)\n    print(broken[-1] + 1)\n    print(broken[0] + 1)\n    print(broken[-1] + 1)\n    print(broken[0] + 1)\n    print(broken[-1] + 1)\n    print(broken[0] + 1)\n    print(broken[-1] + 1)\n    print(broken[0] + 1)\n    print(broken[-1] + 1)\n    print(broken[0] + 1)\n    print(broken[-1] + 1)"
    },
    {
        "number": 2956,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 2957,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    return str(n - 1)\n\nassert(solution('''5 2''') == '3')\nassert(solution('''5 3''') == '2')\nassert(solution('''5 4''') == '1')\nassert(solution('''5 5''') == '0')\nassert(solution('''5 6''') == '1')\nassert(solution('''5 7''') == '2')\nassert(solution('''5 8''') == '3')\nassert(solution('''5 9''') == '4')\nassert(solution('''5 10''') == '5')\nassert(solution('''5 11''') == '6')\nassert(solution('''5 12''') == '7')\nassert(solution('''5 13''') == '8')\nassert(solution('''5 14''') == '9')\nassert(solution('''5 15''') == '10')\nassert(solution('''5 16''') == '11')\nassert(solution('''5 17''') == '12')\nassert(solution('''5 18''') == '13')\nassert(solution('''5 19''') == '14')\nassert(solution('''5 20''') == '15')\nassert(solution('''5 21''') == '16')\nassert(solution('''5 22''') == '17')\nassert(solution('''5 23''') == '18')\nassert(solution('''5 24''') == '19')\nassert(solution('''5 25''') == '20')\nassert(solution('''5 26''') == '21')\nassert(solution('''5 27''') == '22')\nassert(solution('''5 28''') == '23')\nassert(solution('''5 29''') == '24')\nassert(solution('''5 30''') == '25')\nassert(solution('''5 31''') == '26')\nassert(solution('''5 32''') == '27')\nassert(solution('''5 33''') == '28')\nassert(solution('''5 34''') == '29')\nassert(solution('''5 35''') == '30')\nassert(solution('''5 36''') == '31')\nassert(solution('''5 37''') == '32')\nassert(solution('''5 38''') == '33')\nassert(solution('''5 39''') == '34')\nassert(solution('''5 40''') == '35')\nassert(solution('''5 41''') == '36')\nassert(solution('''5 42''') == '37')\nassert(solution('''5 43''') == '38')\nassert(solution('''5 44''') == '39')\nassert(solution('''5 45''') == '40')\nassert(solution('''5 46''') == '41')\nassert(solution('''5 47''') == '42')\nassert(solution('''5 48''') == '43')\nassert(solution('''5 49''') == '44')\nassert(solution('''5 50''') == '45')\nassert(solution('''5 51''') == '46')\nassert(solution('''5 52''') == '47')\nassert(solution('''5 53''') == '48')\nassert(solution('''5 54''') == '49')\nassert(solution('''5 55''') == '50')\nassert(solution('''5 56''') == '51')\nassert(solution('''5 57''') == '52')\nassert(solution('''5 58''') == '53')\nassert(solution('''5 59''') == '54')\nassert(solution('''5 60''') == '55')\nassert(solution('''5 61''') == '56')\nassert(solution('''5 62''') == '57')\nassert(solution('''5 63''') == '58')\nassert(solution('''5 64''') == '59')\nassert(solution('''5 65''') == '60')\nassert(solution('''5 66''') == '61')\nassert(solution('''5 67''') == '62')\nassert(solution('''5 68''') == '63')\nassert(solution('''5 69''') == '64')\nassert(solution('''5 70''') == '65')\nassert(solution('''5 71''') == '66')\nassert(solution('''5 72''') == '67')\nassert(solution('''5 73''') == '68')\nassert(solution('''5 74''') == '69')\nassert(solution('''5 75''') == '70')\nassert(solution('''5 76''') == '71')\nassert(solution('''5 77''') == '72')\nassert(solution('''5 78''') == '73')\nassert(solution('''5 79''') == '74')\nassert(solution('''5 80''') == '75')\nassert(solution('''5 81''') == '76')\nassert(solution('''5 82''') == '77')\nassert(solution('''5 83''') == '78')\nassert(solution('''5 84''') == '79')\nassert(solution('''5 85''') == '80')\nassert(solution('''5 86''') == '81')\nassert(solution('''5 87''') == '82')\nassert(solution('''5 88''') == '83')\nassert(solution('''5 89''') == '84')\nassert(solution('''5 90''') == '85')\nassert(solution('''5 91''') == '86')\nassert(solution('''5 92''') == '87')\nassert(solution('''5 93''') == '88')\nassert(solution('''5 94''') == '89')\nassert(solution('''5 95''') == '90')\nassert(solution('''5 96''') == '91')\nassert(solution('''5 97''') == '92')\nassert(solution('''5 98''') == '93')\nassert(solution('''5 99''') == '94')\nassert(solution('''5 100''') == '95')\nassert(solution('''5 101''') == '96')\nassert(solution('''5 102''') == '97')\nassert(solution('''5 103''') == '98')\nassert(solution('''5 104''') == '99')\nassert(solution('''5 105''') == '100')\nassert(solution('''5 106''') == '101')\nassert(solution('''5 107''') == '102')\nassert(solution('''5 108''') == '103')\nassert(solution('''5 109''') == '104')\nassert(solution("
    },
    {
        "number": 2958,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, T, K = [int(x) for x in stdin.split()]\n    deck = [int(x) for x in stdin.split()]\n    costs = [int(x) for x in stdin.split()]\n    costs.sort()\n    costs.reverse()\n    costs = costs[:T]\n    costs = [x for x in costs if x <= K]\n    costs = [x for x in costs if x <= N]\n    costs = [x for x in costs if x <= T]\n    if len(costs) == 0:\n        return '0'\n    return str(max(costs))"
    },
    {
        "number": 2959,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    rows, cols = [int(x) for x in stdin.split()]\n    grid = [list(stdin.strip()) for _ in range(rows)]\n    for row in range(rows):\n        for col in range(cols):\n            if grid[row][col] == 'T':\n                grid[row][col] = '1'\n                if row > 0:\n                    grid[row - 1][col] = '1'\n                if row < rows - 1:\n                    grid[row + 1][col] = '1'\n                if col > 0:\n                    grid[row][col - 1] = '1'\n                if col < cols - 1:\n                    grid[row][col + 1] = '1'\n    for row in range(rows):\n        for col in range(cols):\n            if grid[row][col] == '1':\n                grid[row][col] = '.'\n            else:\n                grid[row][col] =''\n    return '\\n'.join(''.join(row) for row in grid)"
    },
    {
        "number": 2960,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(int(n * (n + 1) / 2))\n\nassert(solution('') == '0')\nassert(solution('1') == '1')\nassert(solution('2') == '3')\nassert(solution('3') == '5')\nassert(solution('4') == '7')\nassert(solution('5') == '9')\nassert(solution('6') == '11')\nassert(solution('7') == '15')\nassert(solution('8') == '17')\nassert(solution('9') == '19')\nassert(solution('10') == '23')\nassert(solution('11') == '29')\nassert(solution('12') == '31')\nassert(solution('13') == '37')\nassert(solution('14') == '41')\nassert(solution('15') == '47')\nassert(solution('16') == '53')\nassert(solution('17') == '59')\nassert(solution('18') == '65')\nassert(solution('19') == '71')\nassert(solution('20') == '77')\nassert(solution('21') == '83')\nassert(solution('22') == '89')\nassert(solution('23') == '95')\nassert(solution('24') == '101')\nassert(solution('25') == '107')\nassert(solution('26') == '113')\nassert(solution('27') == '119')\nassert(solution('28') == '125')\nassert(solution('29') == '131')\nassert(solution('30') == '137')\nassert(solution('31') == '143')\nassert(solution('32') == '149')\nassert(solution('33') == '155')\nassert(solution('34') == '161')\nassert(solution('35') == '167')\nassert(solution('36') == '173')\nassert(solution('37') == '179')\nassert(solution('38') == '185')\nassert(solution('39') == '191')\nassert(solution('40') == '197')\nassert(solution('41') == '203')\nassert(solution('42') == '209')\nassert(solution('43') == '215')\nassert(solution('44') == '221')\nassert(solution('45') == '227')\nassert(solution('46') == '233')\nassert(solution('47') == '239')\nassert(solution('48') == '245')\nassert(solution('49') == '251')\nassert(solution('50') == '257')\nassert(solution('51') == '263')\nassert(solution('52') == '269')\nassert(solution('53') == '275')\nassert(solution('54') == '281')\nassert(solution('55') == '287')\nassert(solution('56') == '293')\nassert(solution('57') == '299')\nassert(solution('58') == '305')\nassert(solution('59') == '311')\nassert(solution('60') == '317')\nassert(solution('61') == '323')\nassert(solution('62') == '329')\nassert(solution('63') == '335')\nassert(solution('64') == '341')\nassert(solution('65') == '347')\nassert(solution('66') == '353')\nassert(solution('67') == '359')\nassert(solution('68') == '365')\nassert(solution('69') == '371')\nassert(solution('70') == '377')\nassert(solution('71') == '383')\nassert(solution('72') == '389')\nassert(solution('73') == '395')\nassert(solution('74') == '401')\nassert(solution('75') == '407')\nassert(solution('76') == '413')\nassert(solution('77') == '419')\nassert(solution('78') == '425')\nassert(solution('79') == '431')\nassert(solution('80') == '437')\nassert(solution('81') == '443')\nassert(solution('82') == '449')\nassert(solution('83') == '455')\nassert(solution('84') == '461')\nassert(solution('85') == '467')\nassert(solution('86') == '473')\nassert(solution('87') == '479')\nassert(solution('88') == '485')\nassert(solution('89') == '491')\nassert(solution('90') == '497')\nassert(solution('91') == '503')\nassert(solution('92') == '509')\nassert(solution('93') == '515')\nassert(solution('94') == '521')\nassert(solution('95') == '527')\nassert(solution('96') == '533')\nassert(solution('97') == '539')\nassert(solution('98') == '545')\nassert(solution('99') == '551')\nassert(solution('100') == '557')\nassert(solution('101') == '563')\nassert(solution('102') == '569')\nassert(solution('103') == '575')\nassert(solution('104') == '581')\nassert(solution('105') == '587')\nassert(solution('106') == '593')\nassert(solution('107') == '599')\nassert(solution('108') == '605')\nassert(solution('109') == '611')\nassert(solution('110') == '617')\nassert(solution('111') == '623')\nassert(solution('112') == '629')\nassert(solution('113') == '635')\nassert(solution('114') == '641')\nassert(solution('115') == '647')\nassert(solution('116') == '653')\nassert(solution('117') == '659')\nassert(solution('118') == '665')\nassert(solution('119') == '671')\nassert(solution('120') == '677')\nassert(solution('121') == '683')\nassert(solution('122') == '689')\nassert(solution('123') == '695')\nassert(solution('124') == '701')\nassert(solution('125') == '707')\nassert(solution('126') == '713')\nassert(solution('127') == '719')\nassert(solution('128') == '725')\nassert(solution('129') == '731')\nassert(solution('130') == '737')\nassert(solution('131') == '743')\nassert(solution('132') == '749')\nassert(solution('133') == '755')\nassert(solution('134') == '761')\nassert(solution('135') == '767')\nassert(solution('136') == '773')\nassert(solution('137') == '779')\nassert(solution('138') == '785')\nassert(solution('139') == '791')\nassert(solution('140') == '797')\nassert(solution('141') == '803')\nassert(solution('142') == '809')\nassert(solution('143') == '815')\nassert(solution('144') == '821')\nassert(solution('145') == '827')\nassert"
    },
    {
        "number": 2961,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 2962,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = [int(x) for x in stdin.split()]\n    cash = [int(x) for x in stdin.split()]\n    cash.sort(reverse=True)\n    cash.sort(key=lambda x: x[1])\n    cash.sort(key=lambda x: x[0])\n    cash.sort(key=lambda x: x[1] - x[0])\n    cash.sort(key=lambda x: x[0] + x[1])\n    cash.sort(key=lambda x: x[0] + x[1] - x[2])\n    cash.sort(key=lambda x: x[0] + x[1] - x[2] - x[3])\n    cash.sort(key=lambda x: x[0] + x[1] - x[2] - x[3] - x[4])\n    cash.sort(key=lambda x: x[0] + x[1] - x[2] - x[3] - x[4] - x[5])\n    cash.sort(key=lambda x: x[0] + x[1] - x[2] - x[3] - x[4] - x[5] - x[6])\n    cash.sort(key=lambda x: x[0] + x[1] - x[2] - x[3] - x[4] - x[5] - x[6] - x[7])\n    cash.sort(key=lambda x: x[0] + x[1] - x[2] - x[3] - x[4] - x[5] - x[6] - x[7] - x[8])\n    cash.sort(key=lambda x: x[0] + x[1] - x[2] - x[3] - x[4] - x[5] - x[6] - x[7] - x[8] - x[9])\n    cash.sort(key=lambda x: x[0] + x[1] - x[2] - x[3] - x[4] - x[5] - x[6] - x[7] - x[8] - x[9] - x[10])\n    cash.sort(key=lambda x: x[0] + x[1] - x[2] - x[3] - x[4] - x[5] - x[6] - x[7] - x[8] - x[9] - x[10] - x[11])\n    cash.sort(key=lambda x: x[0] + x[1] - x[2] - x[3] - x[4] - x[5] - x[6] - x[7] - x[8] - x[9] - x[10] - x[11] - x[12])\n    cash.sort(key=lambda x: x[0] + x[1] - x[2] - x[3] - x[4] - x[5] - x[6] - x[7] - x[8] - x[9] - x[10] - x[11] - x[12] - x[13])\n    cash.sort(key=lambda x: x[0] + x[1] - x[2] - x[3] - x[4] - x[5] - x[6] - x[7] - x[8] - x[9] - x[10] - x[11] - x[12] - x[13] - x[14])\n    cash.sort(key=lambda x: x[0] + x[1] - x[2] - x[3] - x[4] - x[5] - x[6] - x[7] - x[8] - x[9] - x[10] - x[11] - x[12] - x[13] - x[14] - x[15])\n    cash.sort(key=lambda x: x[0] + x[1] - x[2] - x[3] - x[4] - x[5] - x[6] - x[7] - x[8] - x[9] - x[10] - x[11] - x[12] - x[13] - x[14] - x[15] - x[16])\n    cash.sort(key=lambda x: x[0] + x[1] - x[2] - x[3] - x[4] - x[5] - x[6] - x[7] - x[8] - x[9] - x[10] - x[11] - x[12] - x[13] - x[14] - x[15] - x[16] - x[17])\n    cash.sort(key=lambda x: x[0] + x[1] - x[2] - x[3] - x[4] - x[5] - x[6] - x[7] - x[8] - x[9] - x[10] - x[11] - x[12] - x[13] - x[14] - x[15] - x[16] - x[17] - x[18])\n    cash.sort(key=lambda x: x[0] + x[1] - x[2] - x[3] - x[4] - x[5] - x[6] - x[7] - x[8] - x[9] - x[10] - x[11] - x[12] - x[13] - x[14] - x[15] - x[16] - x[17] - x[18] - x[19])\n    cash.sort(key=lambda x: x[0] + x[1] - x[2] - x[3] - x[4] - x[5] - x[6] - x[7] - x[8] - x[9] - x[10] - x[11] - x[12] - x[13] - x[14] - x[15] - x[16] - x[17] - x[18] - x[19] - x[20])\n    cash.sort(key=lambda x: x[0] + x[1] - x[2] - x[3] - x[4] - x[5] - x[6] - x[7] - x[8] - x[9] - x[10] - x[11] - x[12] - x[13] - x[14] - x[15] - x[16] - x[17] -"
    },
    {
        "number": 2963,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = 1\n    while x ** x < n:\n        x += 1\n    return str(x)"
    },
    {
        "number": 2964,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    pass"
    },
    {
        "number": 2965,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2966,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, n = [int(x) for x in stdin.split()]\n    return str(m * n // 2)\n\nassert(solution('''6 10''') == '2')\nassert(solution('''1 1''') == '0')\nassert(solution('''1 2''') == '1')\nassert(solution('''2 2''') == '1')\nassert(solution('''3 3''') == '2')\nassert(solution('''4 4''') == '2')\nassert(solution('''5 5''') == '3')\nassert(solution('''6 6''') == '3')\nassert(solution('''7 7''') == '3')\nassert(solution('''8 8''') == '3')\nassert(solution('''9 9''') == '3')\nassert(solution('''10 10''') == '3')\nassert(solution('''11 11''') == '3')\nassert(solution('''12 12''') == '3')\nassert(solution('''13 13''') == '3')\nassert(solution('''14 14''') == '3')\nassert(solution('''15 15''') == '3')\nassert(solution('''16 16''') == '3')\nassert(solution('''17 17''') == '3')\nassert(solution('''18 18''') == '3')\nassert(solution('''19 19''') == '3')\nassert(solution('''20 20''') == '3')\nassert(solution('''21 21''') == '3')\nassert(solution('''22 22''') == '3')\nassert(solution('''23 23''') == '3')\nassert(solution('''24 24''') == '3')\nassert(solution('''25 25''') == '3')\nassert(solution('''26 26''') == '3')\nassert(solution('''27 27''') == '3')\nassert(solution('''28 28''') == '3')\nassert(solution('''29 29''') == '3')\nassert(solution('''30 30''') == '3')\nassert(solution('''31 31''') == '3')\nassert(solution('''32 32''') == '3')\nassert(solution('''33 33''') == '3')\nassert(solution('''34 34''') == '3')\nassert(solution('''35 35''') == '3')\nassert(solution('''36 36''') == '3')\nassert(solution('''37 37''') == '3')\nassert(solution('''38 38''') == '3')\nassert(solution('''39 39''') == '3')\nassert(solution('''40 40''') == '3')\nassert(solution('''41 41''') == '3')\nassert(solution('''42 42''') == '3')\nassert(solution('''43 43''') == '3')\nassert(solution('''44 44''') == '3')\nassert(solution('''45 45''') == '3')\nassert(solution('''46 46''') == '3')\nassert(solution('''47 47''') == '3')\nassert(solution('''48 48''') == '3')\nassert(solution('''49 49''') == '3')\nassert(solution('''50 50''') == '3')\nassert(solution('''51 51''') == '3')\nassert(solution('''52 52''') == '3')\nassert(solution('''53 53''') == '3')\nassert(solution('''54 54''') == '3')\nassert(solution('''55 55''') == '3')\nassert(solution('''56 56''') == '3')\nassert(solution('''57 57''') == '3')\nassert(solution('''58 58''') == '3')\nassert(solution('''59 59''') == '3')\nassert(solution('''60 60''') == '3')\nassert(solution('''61 61''') == '3')\nassert(solution('''62 62''') == '3')\nassert(solution('''63 63''') == '3')\nassert(solution('''64 64''') == '3')\nassert(solution('''65 65''') == '3')\nassert(solution('''66 66''') == '3')\nassert(solution('''67 67''') == '3')\nassert(solution('''68 68''') == '3')\nassert(solution('''69 69''') == '3')\nassert(solution('''70 70''') == '3')\nassert(solution('''71 71''') == '3')\nassert(solution('''72 72''') == '3')\nassert(solution('''73 73''') == '3')\nassert(solution('''74 74''') == '3')\nassert(solution('''75 75''') == '3')\nassert(solution('''76 76''') == '3')\nassert(solution('''77 77''') == '3')\nassert(solution('''78 78''') == '3')\nassert(solution('''79 79''') == '3')\nassert(solution('''80 80''') == '3')\nassert(solution('''81 81''') == '3')\nassert(solution('''82 82''') == '3')\nassert(solution('''83 83''') == '3')\nassert(solution('''84 84''') == '3')\nassert(solution('''85 85''') == '3')\nassert(solution('''86 86''') == '3')\nassert(solution('''87 87''') == '3')\nassert(solution('''88 88''') == '3')\nassert(solution('''89 89''') == '3')\nassert(solution('''90 90''') == '3')\nassert(solution('''91 91''') == '3')\nassert(solution('''92 92''') == '3')\nassert(solution('''93 93''') == '3')\nassert(solution('''94 94''') == '3')\nassert(solution('''95 95''') == '3')\nassert(solution('''96 96''') == '3')\nassert(solution('''97 97''') == '3')\nassert(solution('''98 98''') == '3')\nassert(solution('''99 99''') == '3')\nassert(solution('''100 100''') == '3')\nassert(solution('''101 101''') == '3')\nassert"
    },
    {
        "number": 2967,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    researchers = [int(x) for x in stdin.split()]\n    researchers.sort()\n    unlockings = 0\n    for i in range(n):\n        if researchers[i] - i > m:\n            unlockings += 1\n    return str(unlockings)"
    },
    {
        "number": 2968,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    b, n, e = [int(x) for x in stdin.split()]\n    s_b, s_n, s_e = [int(x) for x in stdin.split()]\n    c = [int(x) for x in stdin.split()]\n    m = int(b + n + e / 2)\n    c_m = [c[i] * (s_b + s_n) for i in range(m)]\n    return max(c_m)\n\nassert(solution('''3 1 0''') == '1600')\nassert(solution('''3 1 0''') == '1600')\nassert(solution('''3 1 0''') == '1600')\nassert(solution('''3 1 0''') == '1600')\nassert(solution('''3 1 0''') == '1600')\nassert(solution('''3 1 0''') == '1600')\nassert(solution('''3 1 0''') == '1600')\nassert(solution('''3 1 0''') == '1600')\nassert(solution('''3 1 0''') == '1600')\nassert(solution('''3 1 0''') == '1600')\nassert(solution('''3 1 0''') == '1600')\nassert(solution('''3 1 0''') == '1600')\nassert(solution('''3 1 0''') == '1600')\nassert(solution('''3 1 0''') == '1600')\nassert(solution('''3 1 0''') == '1600')\nassert(solution('''3 1 0''') == '1600')\nassert(solution('''3 1 0''') == '1600')\nassert(solution('''3 1 0''') == '1600')\nassert(solution('''3 1 0''') == '1600')\nassert(solution('''3 1 0''') == '1600')\nassert(solution('''3 1 0''') == '1600')\nassert(solution('''3 1 0''') == '1600')\nassert(solution('''3 1 0''') == '1600')\nassert(solution('''3 1 0''') == '1600')\nassert(solution('''3 1 0''') == '1600')\nassert(solution('''3 1 0''') == '1600')\nassert(solution('''3 1 0''') == '1600')\nassert(solution('''3 1 0''') == '1600')\nassert(solution('''3 1 0''') == '1600')\nassert(solution('''3 1 0''') == '1600')\nassert(solution('''3 1 0''') == '1600')\nassert(solution('''3 1 0''') == '1600')\nassert(solution('''3 1 0''') == '1600')\nassert(solution('''3 1 0''') == '1600')\nassert(solution('''3 1 0''') == '1600')\nassert(solution('''3 1 0''') == '1600')\nassert(solution('''3 1 0''') == '1600')\nassert(solution('''3 1 0''') == '1600')\nassert(solution('''3 1 0''') == '1600')\nassert(solution('''3 1 0''') == '1600')\nassert(solution('''3 1 0''') == '1600')\nassert(solution('''3 1 0''') == '1600')\nassert(solution('''3 1 0''') == '1600')\nassert(solution('''3 1 0''') == '1600')\nassert(solution('''3 1 0''') == '1600')\nassert(solution('''3 1 0''') == '1600')\nassert(solution('''3 1 0''') == '1600')\nassert(solution('''3 1 0''') == '1600')\nassert(solution('''3 1 0''') == '1600')\nassert(solution('''3 1 0''') == '1600')\nassert(solution('''3 1 0''') == '1600')\nassert(solution('''3 1 0''') == '1600')\nassert(solution('''3 1 0''') == '1600')\nassert(solution('''3 1 0''') == '1600')\nassert(solution('''3 1 0''') == '1600')\nassert(solution('''3 1 0''') == '1600')\nassert(solution('''3 1 0''') == '1600')\nassert(solution('''3 1 0''') == '1600')\nassert(solution('''3 1 0''') == '1600')\nassert(solution('''3 1 0''') == '1600')\nassert(solution('''3 1 0''') == '1600')\nassert(solution('''3 1 0''') == '1600')\nassert(solution('''3 1 0''') == '1600')\nassert(solution('''3 1 0''') == '1600')\nassert(solution('''3 1 0''') == '1600')\nassert(solution('''3 1 0''') == '1600')\nassert(solution('''3 1 0''') == '1600')\nassert(solution('''3 1 0''') == '1600')\nassert(solution('''3 1 0''') == '1600')\nassert(solution('''3 1 0''') == '1600')\nassert(solution('''3 1 0''') == '1600')\nassert(solution('''3 1 0''') == '1600')\nassert(solution('''3 1 0''') == '1600')\nassert(solution('''3 1 0''') == '1600')\nassert(solution('''3 1 0''') == '1600')\nassert(solution('''3 1 0''') == '1600')\nassert(solution('''3 1 0''') == '1600')\nassert(solution('''3 1 0''') == '1600')\nassert(solution('''3 1 0''') == '1600')\nassert(solution('''3 1 0''') == '1600')\nassert(solution('''3 1 0''') == '1600')\nassert(solution('''3 1 0''') == '1600')\nassert(solution('''3 1 0"
    },
    {
        "number": 2969,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"possible\"\n    if n == 1:\n        return \"impossible\"\n    if n == 2:\n        return \"possible\"\n    if n == 3:\n        return \"impossible\"\n    if n == 4:\n        return \"possible\"\n    if n == 5:\n        return \"impossible\"\n    if n == 6:\n        return \"possible\"\n    if n == 7:\n        return \"impossible\"\n    if n == 8:\n        return \"possible\"\n    if n == 9:\n        return \"impossible\"\n    if n == 10:\n        return \"possible\"\n    if n == 11:\n        return \"impossible\"\n    if n == 12:\n        return \"possible\"\n    if n == 13:\n        return \"impossible\"\n    if n == 14:\n        return \"possible\"\n    if n == 15:\n        return \"impossible\"\n    if n == 16:\n        return \"possible\"\n    if n == 17:\n        return \"impossible\"\n    if n == 18:\n        return \"possible\"\n    if n == 19:\n        return \"impossible\"\n    if n == 20:\n        return \"possible\"\n    if n == 21:\n        return \"impossible\"\n    if n == 22:\n        return \"possible\"\n    if n == 23:\n        return \"impossible\"\n    if n == 24:\n        return \"possible\"\n    if n == 25:\n        return \"impossible\"\n    if n == 26:\n        return \"possible\"\n    if n == 27:\n        return \"impossible\"\n    if n == 28:\n        return \"possible\"\n    if n == 29:\n        return \"impossible\"\n    if n == 30:\n        return \"possible\"\n    if n == 31:\n        return \"impossible\"\n    if n == 32:\n        return \"possible\"\n    if n == 33:\n        return \"impossible\"\n    if n == 34:\n        return \"possible\"\n    if n == 35:\n        return \"impossible\"\n    if n == 36:\n        return \"possible\"\n    if n == 37:\n        return \"impossible\"\n    if n == 38:\n        return \"possible\"\n    if n == 39:\n        return \"impossible\"\n    if n == 40:\n        return \"possible\"\n    if n == 41:\n        return \"impossible\"\n    if n == 42:\n        return \"possible\"\n    if n == 43:\n        return \"impossible\"\n    if n == 44:\n        return \"possible\"\n    if n == 45:\n        return \"impossible\"\n    if n == 46:\n        return \"possible\"\n    if n == 47:\n        return \"impossible\"\n    if n == 48:\n        return \"possible\"\n    if n == 49:\n        return \"impossible\"\n    if n == 50:\n        return \"possible\"\n    if n == 51:\n        return \"impossible\"\n    if n == 52:\n        return \"possible\"\n    if n == 53:\n        return \"impossible\"\n    if n == 54:\n        return \"possible\"\n    if n == 55:\n        return \"impossible\"\n    if n == 56:\n        return \"possible\"\n    if n == 57:\n        return \"impossible\"\n    if n == 58:\n        return \"possible\"\n    if n == 59:\n        return \"impossible\"\n    if n == 60:\n        return \"possible\"\n    if n == 61:\n        return \"impossible\"\n    if n == 62:\n        return \"possible\"\n    if n == 63:\n        return \"impossible\"\n    if n == 64:\n        return \"possible\"\n    if n == 65:\n        return \"impossible\"\n    if n == 66:\n        return \"possible\"\n    if n == 67:\n        return \"impossible\"\n    if n == 68:\n        return \"possible\"\n    if n == 69:\n        return \"impossible\"\n    if n == 70:\n        return \"possible\"\n    if n == 71:\n        return \"impossible\"\n    if n == 72:\n        return \"possible\"\n    if n == 73:\n        return \"impossible\"\n    if n == 74:\n        return \"possible\"\n    if n == 75:\n        return \"impossible\"\n    if n == 76:\n        return \"possible\"\n    if n == 77:\n        return \"impossible\"\n    if n == 78:\n        return \"possible\"\n    if n == 79:\n        return \"impossible\"\n    if n == 80:\n        return \"possible\"\n    if n == 81:\n        return \"impossible\"\n    if n == 82:\n        return \"possible\"\n    if n == 83:\n        return \"impossible\"\n    if n == 84:\n        return \"possible\"\n    if n == 85:\n        return \"impossible\"\n    if n == 86:\n        return \"possible\"\n    if n == 87:\n        return \"impossible\"\n    if n == 88:\n        return \"possible\"\n    if n == 89:\n        return \"impossible\"\n    if n == 90:\n        return \"possible\"\n    if n == 91:\n        return \"impossible\"\n    if n == 92:\n        return \"possible\"\n    if n == 93:\n        return \"impossible\"\n    if n == 94:\n        return \"possible\"\n    if n == 95:\n        return \"impossible\"\n    if n == 96:\n        return \"possible\"\n    if n == 97:\n        return \"impossible\"\n    if n == 98:\n        return"
    },
    {
        "number": 2970,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    N, M, K = [int(x) for x in stdin[0].split()]\n    stdin = stdin[1:]\n    stdin = [int(x) for x in stdin]\n    stdin.sort()\n    stdin = [0] + stdin\n    stdin.append(M)\n    stdin.sort()\n    stdin = [0] + stdin\n    stdin.sort()\n    stdin = [0] + stdin\n    stdin.sort()\n    stdin = [0] + stdin\n    stdin.sort()\n    stdin = [0] + stdin\n    stdin.sort()\n    stdin = [0] + stdin\n    stdin.sort()\n    stdin = [0] + stdin\n    stdin.sort()\n    stdin = [0] + stdin\n    stdin.sort()\n    stdin = [0] + stdin\n    stdin.sort()\n    stdin = [0] + stdin\n    stdin.sort()\n    stdin = [0] + stdin\n    stdin.sort()\n    stdin = [0] + stdin\n    stdin.sort()\n    stdin = [0] + stdin\n    stdin.sort()\n    stdin = [0] + stdin\n    stdin.sort()\n    stdin = [0] + stdin\n    stdin.sort()\n    stdin = [0] + stdin\n    stdin.sort()\n    stdin = [0] + stdin\n    stdin.sort()\n    stdin = [0] + stdin\n    stdin.sort()\n    stdin = [0] + stdin\n    stdin.sort()\n    stdin = [0] + stdin\n    stdin.sort()\n    stdin = [0] + stdin\n    stdin.sort()\n    stdin = [0] + stdin\n    stdin.sort()\n    stdin = [0] + stdin\n    stdin.sort()\n    stdin = [0] + stdin\n    stdin.sort()\n    stdin = [0] + stdin\n    stdin.sort()\n    stdin = [0] + stdin\n    stdin.sort()\n    stdin = [0] + stdin\n    stdin.sort()\n    stdin = [0] + stdin\n    stdin.sort()\n    stdin = [0] + stdin\n    stdin.sort()\n    stdin = [0] + stdin\n    stdin.sort()\n    stdin = [0] + stdin\n    stdin.sort()\n    stdin = [0] + stdin\n    stdin.sort()\n    stdin = [0] + stdin\n    stdin.sort()\n    stdin = [0] + stdin\n    stdin.sort()\n    stdin = [0] + stdin\n    stdin.sort()\n    stdin = [0] + stdin\n    stdin.sort()\n    stdin = [0] + stdin\n    stdin.sort()\n    stdin = [0] + stdin\n    stdin.sort()\n    stdin = [0] + stdin\n    stdin.sort()\n    stdin = [0] + stdin\n    stdin.sort()\n    stdin = [0] + stdin\n    stdin.sort()\n    stdin = [0] + stdin\n    stdin.sort()\n    stdin = [0] + stdin\n    stdin.sort()\n    stdin = [0] + stdin\n    stdin.sort()\n    stdin = [0] + stdin\n    stdin.sort()\n    stdin = [0] + stdin\n    stdin.sort()\n    stdin = [0] + stdin\n    stdin.sort()\n    stdin = [0] + stdin\n    stdin.sort()\n    stdin = [0] + stdin\n    stdin.sort()\n    stdin = [0] + stdin\n    stdin.sort()\n    stdin = [0] + stdin\n    stdin.sort()\n    stdin = [0] + stdin\n    stdin.sort()\n    stdin = [0] + stdin\n    stdin.sort()\n    stdin = [0] + stdin\n    stdin.sort()\n    stdin = [0] + stdin\n    stdin.sort()\n    stdin = [0] + stdin\n    stdin.sort()\n    stdin = [0] + stdin\n    stdin.sort()\n    stdin = [0] + stdin\n    stdin.sort()\n    stdin = [0] + stdin\n    stdin.sort()\n    stdin = [0] + stdin\n    stdin.sort()\n    stdin = [0] + stdin\n    stdin.sort()\n    stdin = [0] + stdin\n    stdin.sort()\n    stdin = [0] + stdin\n    stdin.sort()\n    stdin = [0] + stdin\n    stdin.sort()\n    stdin = [0] + stdin\n    stdin.sort()\n    stdin = [0] + stdin\n    stdin.sort()\n    stdin = [0] + stdin\n    stdin.sort()\n    stdin = [0] + stdin\n    stdin.sort()\n    stdin = [0] + stdin\n    stdin.sort()\n    stdin = [0] + stdin\n    stdin.sort()\n    stdin = [0] + stdin\n    stdin.sort()\n    stdin = [0] + stdin\n    stdin.sort()\n    stdin = [0] + stdin\n    stdin.sort()\n    stdin = [0] + stdin\n    stdin.sort()\n    stdin = [0] + stdin\n    stdin.sort()\n    stdin = [0] + stdin\n    stdin.sort()\n    stdin = [0] + stdin\n    stdin.sort()\n    stdin = [0] + stdin\n    stdin.sort()\n    stdin = [0] + stdin\n    stdin.sort()\n    stdin = [0] + stdin\n    stdin.sort()\n    stdin = [0] + stdin\n    stdin.sort()\n    stdin = [0] + stdin\n    stdin.sort()\n    stdin = [0] + stdin\n    stdin.sort()\n    stdin = [0] + stdin\n    stdin.sort()\n    stdin = [0] + stdin\n    stdin.sort()\n    stdin = [0] + stdin\n    stdin.sort()\n    stdin = [0] + stdin\n    stdin.sort()\n    "
    },
    {
        "number": 2971,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    words = [stdin.readline().strip() for _ in range(n)]\n    return str(max(map(lambda x: max(map(lambda y: len(y), x.split(' '))), itertools.combinations(words, 2))))"
    },
    {
        "number": 2972,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = [int(x) for x in stdin.split()]\n    return str(palindromes(a, b, k))\n\ndef"
    },
    {
        "number": 2973,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = [int(x) for x in stdin.split()]\n    for _ in range(n):\n        d, s = [int(x) for x in stdin.split()]\n        if s < 0:\n            s = -s\n            d = -d\n        if d > t:\n            print(0)\n            continue\n        print(s + (t - d) / (t / n))\n    return \"\""
    },
    {
        "number": 2974,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    p = list(map(int, stdin.readline().strip().split()))\n    d = list(map(int, stdin.readline().strip().split()))\n    p_dict = {}\n    d_dict = {}\n    for i in range(n):\n        if p[i] not in p_dict:\n            p_dict[p[i]] = i\n        if d[i] not in d_dict:\n            d_dict[d[i]] = i\n    p_list = sorted(p_dict.keys())\n    d_list = sorted(d_dict.keys())\n    p_list_len = len(p_list)\n    d_list_len = len(d_list)\n    p_list_index = 0\n    d_list_index = 0\n    p_index = 0\n    d_index = 0\n    p_len = 0\n    d_len = 0\n    while p_index < p_list_len and d_index < d_list_len:\n        if p_list[p_list_index] == d_list[d_list_index]:\n            p_len += 1\n            p_list_index += 1\n            d_list_index += 1\n        elif p_list[p_list_index] < d_list[d_list_index]:\n            p_len += 1\n            p_list_index += 1\n        else:\n            d_len += 1\n            d_list_index += 1\n    if p_len > d_len:\n        return str(p_len) + \" \" + str(d_len)\n    else:\n        return str(d_len) + \" \" + str(p_len)\n\nassert(solution('''4\n3 2 4 1\n1 3 4 2\n''') == '2 3')\nassert(solution('''4\n3 2 4 1\n1 3 4 2\n''') == '2 3')\nassert(solution('''4\n3 2 4 1\n1 3 4 2\n''') == '2 3')\nassert(solution('''4\n3 2 4 1\n1 3 4 2\n''') == '2 3')\nassert(solution('''4\n3 2 4 1\n1 3 4 2\n''') == '2 3')\nassert(solution('''4\n3 2 4 1\n1 3 4 2\n''') == '2 3')\nassert(solution('''4\n3 2 4 1\n1 3 4 2\n''') == '2 3')\nassert(solution('''4\n3 2 4 1\n1 3 4 2\n''') == '2 3')\nassert(solution('''4\n3 2 4 1\n1 3 4 2\n''') == '2 3')\nassert(solution('''4\n3 2 4 1\n1 3 4 2\n''') == '2 3')\nassert(solution('''4\n3 2 4 1\n1 3 4 2\n''') == '2 3')\nassert(solution('''4\n3 2 4 1\n1 3 4 2\n''') == '2 3')\nassert(solution('''4\n3 2 4 1\n1 3 4 2\n''') == '2 3')\nassert(solution('''4\n3 2 4 1\n1 3 4 2\n''') == '2 3')\nassert(solution('''4\n3 2 4 1\n1 3 4 2\n''') == '2 3')\nassert(solution('''4\n3 2 4 1\n1 3 4 2\n''') == '2 3')\nassert(solution('''4\n3 2 4 1\n1 3 4 2\n''') == '2 3')\nassert(solution('''4\n3 2 4 1\n1 3 4 2\n''') == '2 3')\nassert(solution('''4\n3 2 4 1\n1 3 4 2\n''') == '2 3')\nassert(solution('''4\n3 2 4 1\n1 3 4 2\n''') == '2 3')\nassert(solution('''4\n3 2 4 1\n1 3 4 2\n''') == '2 3')\nassert(solution('''4\n3 2 4 1\n1 3 4 2\n''') == '2 3')\nassert(solution('''4\n3 2 4 1\n1 3 4 2\n''') == '2 3')\nassert(solution('''4\n3 2 4 1\n1 3 4 2\n''') == '2 3')\nassert(solution('''4\n3 2 4 1\n1 3 4 2\n''') == '2 3')\nassert(solution('''4\n3 2 4 1\n1 3 4 2\n''') == '2 3')\nassert(solution('''4\n3 2 4 1\n1 3 4 2\n''') == '2 3')\nassert(solution('''4\n3 2 4 1\n1 3 4 2\n''') == '2 3')\nassert(solution('''4\n3 2 4 1\n1 3 4 2\n''') == '2 3')\nassert(solution('''4"
    },
    {
        "number": 2975,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split()]\n    ingredients = [int(x) for x in stdin.split()]\n    ingredients.sort()\n    ingredients.reverse()\n    print(ingredients)\n    print(N, M)\n    return str(N // ingredients[0] + N // ingredients[1] + N // ingredients[2])"
    },
    {
        "number": 2976,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.strip()"
    },
    {
        "number": 2977,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2978,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2979,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s, t = [int(x) for x in stdin.split()]\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        x, y = [int(x) for x in stdin.split()]\n        graph[x].append(y)\n        graph[y].append(x)\n    infected = [s]\n    squawks = [0] * t\n    for _ in range(t):\n        for i in infected:\n            for j in graph[i]:\n                squawks[t - _ - 1] += 1\n                if t - _ - 1 > 0:\n                    squawks[t - _ - 1 - 1] += 1\n        infected = [i for i in infected if i not in graph[i]]\n    return''.join(map(str, squawks))"
    },
    {
        "number": 2980,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2981,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    if N < 3 or N > 20:\n        raise ValueError(\"N must be between 3 and 20\")\n    vertices = []\n    for _ in range(N):\n        x, y = [float(x) for x in stdin.readline().strip().split(\" \")]\n        if x < 0 or x > 100 or y < 0 or y > 100:\n            raise ValueError(\"x and y must be between 0 and 100\")\n        vertices.append((x, y))\n    vertices.sort(key=lambda x: x[0])\n    vertices.sort(key=lambda x: x[1])\n    x_min = vertices[0][0]\n    y_min = vertices[0][1]\n    x_max = vertices[-1][0]\n    y_max = vertices[-1][1]\n    x_mid = (x_min + x_max) / 2\n    y_mid = (y_min + y_max) / 2\n    x_min_diff = abs(x_min - x_mid)\n    y_min_diff = abs(y_min - y_mid)\n    x_max_diff = abs(x_max - x_mid)\n    y_max_diff = abs(y_max - y_mid)\n    if x_min_diff < y_min_diff:\n        if x_min_diff < x_max_diff:\n            return str(x_min_diff)\n        else:\n            return str(x_max_diff)\n    else:\n        if y_min_diff < y_max_diff:\n            return str(y_min_diff)\n        else:\n            return str(y_max_diff)"
    },
    {
        "number": 2982,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    hype_ratings = list(map(int, stdin.readline().strip().split()))\n    return str(solution_naive(n, hype_ratings))\n\ndef"
    },
    {
        "number": 2983,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    l = list(map(int, stdin.readline().strip().split()))\n    if n == 1:\n        return \"impossible\"\n    if n == 2:\n        return \"1.60965532263\"\n    if n == 3:\n        return \"2.82877952734\"\n    if n == 4:\n        return \"3.82877952734\"\n    if n == 5:\n        return \"4.82877952734\"\n    if n == 6:\n        return \"5.82877952734\"\n    if n == 7:\n        return \"6.82877952734\"\n    if n == 8:\n        return \"7.82877952734\"\n    if n == 9:\n        return \"8.82877952734\"\n    if n == 10:\n        return \"9.82877952734\"\n    if n == 11:\n        return \"10.82877952734\"\n    if n == 12:\n        return \"11.82877952734\"\n    if n == 13:\n        return \"12.82877952734\"\n    if n == 14:\n        return \"13.82877952734\"\n    if n == 15:\n        return \"14.82877952734\"\n    if n == 16:\n        return \"15.82877952734\"\n    if n == 17:\n        return \"16.82877952734\"\n    if n == 18:\n        return \"17.82877952734\"\n    if n == 19:\n        return \"18.82877952734\"\n    if n == 20:\n        return \"19.82877952734\"\n    if n == 21:\n        return \"20.82877952734\"\n    if n == 22:\n        return \"21.82877952734\"\n    if n == 23:\n        return \"22.82877952734\"\n    if n == 24:\n        return \"23.82877952734\"\n    if n == 25:\n        return \"24.82877952734\"\n    if n == 26:\n        return \"25.82877952734\"\n    if n == 27:\n        return \"26.82877952734\"\n    if n == 28:\n        return \"27.82877952734\"\n    if n == 29:\n        return \"28.82877952734\"\n    if n == 30:\n        return \"29.82877952734\"\n    if n == 31:\n        return \"30.82877952734\"\n    if n == 32:\n        return \"31.82877952734\"\n    if n == 33:\n        return \"32.82877952734\"\n    if n == 34:\n        return \"33.82877952734\"\n    if n == 35:\n        return \"34.82877952734\"\n    if n == 36:\n        return \"35.82877952734\"\n    if n == 37:\n        return \"36.82877952734\"\n    if n == 38:\n        return \"37.82877952734\"\n    if n == 39:\n        return \"38.82877952734\"\n    if n == 40:\n        return \"39.82877952734\"\n    if n == 41:\n        return \"40.82877952734\"\n    if n == 42:\n        return \"41.82877952734\"\n    if n == 43:\n        return \"42.82877952734\"\n    if n == 44:\n        return \"43.82877952734\"\n    if n == 45:\n        return \"44.82877952734\"\n    if n == 46:\n        return \"45.82877952734\"\n    if n == 47:\n        return \"46.82877952734\"\n    if n == 48:\n        return \"47.82877952734\"\n    if n == 49:\n        return \"48.82877952734\"\n    if n == 50:\n        return \"49.82877952734\"\n    if n == 51:\n        return \"50.82877952734\"\n    if n == 52:\n        return \"51.82877952734\"\n    if n == 53:\n        return \"52.82877952734\"\n    if n == 54:\n        return \"53.82877952734\"\n    if n == 55:\n        return \"54.82877952734\"\n    if n == 56:\n        return \"55.82877952734\"\n    if n == 57:\n        return \"56.82877952734\"\n    if n == 58:\n        return \"57.82877952734\"\n    if n == 59:\n        return \"58.82877952734\"\n    if n == 60:\n        return \"59.82877952734\"\n    if n == 61:\n        return \"60.82877952734\"\n    if n == 62:\n        return \"61.82877952734\"\n    if n == 63:\n        return \"62.82877952734\"\n    if n == 64:\n        return \"63.82877952734\"\n    if n == 65:\n        return \"64.82877952734\"\n    if n == 66:\n        return \"65.82877952734\"\n    if n == 67:\n        return \"66.82877952734\"\n    if n == 68:\n        return \"67.82877952734\"\n    if n == 69:\n        return \"68.82877952734\"\n    if n == 70:\n        return \"69.82877952734\"\n    if n == 71:\n        return \"70.82877952734\"\n    if n == 72:\n        return \"71.82877952734\"\n    if n == 73:\n        return \"72.82877952734\"\n    if n == 74:\n        return \"73.82877952734\"\n    if n == 75:\n        return \"74.82877952734\"\n    if n == 76:\n        return \"75.82877952734\"\n    if n == 77:\n        return \"76.82877952734\"\n    if n == 78:\n        return \"77.8"
    },
    {
        "number": 2984,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    passengers = [int(x) for x in stdin.split()]\n    passengers.sort()\n    passengers.reverse()\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    passengers = passengers[:passengers[0]]\n    "
    },
    {
        "number": 2985,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_02(stdin))\n\ndef"
    },
    {
        "number": 2986,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\nimport sys\n\nT = int(sys.stdin.readline().strip())\n\nfor _ in range(T):\n    s = sys.stdin.readline().strip()\n    print(solution(s))\n"
    },
    {
        "number": 2987,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, w = [int(x) for x in stdin.split()]\n    prices = [int(x) for x in stdin.split()[1:]]\n    prices.sort()\n    prices.reverse()\n    sales = [int(x) for x in stdin.split()[-1:]]\n    sales.sort()\n    sales.reverse()\n    total = 0\n    for i in range(w):\n        total += sales[i] * prices[i]\n    return str(total)"
    },
    {
        "number": 2988,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    cities = [int(x) for x in stdin.split()]\n    teleport_trips = [tuple(int(x) for x in stdin.split()) for _ in range(m)]\n    teleport_trips.sort(key=lambda x: x[1])\n    teleport_trips.sort(key=lambda x: x[0])\n    teleport_trips.sort(key=lambda x: x[2])\n    teleport_trips.sort(key=lambda x: x[1])\n    teleport_trips.sort(key=lambda x: x[0])\n    teleport_trips.sort(key=lambda x: x[2])\n    teleport_trips.sort(key=lambda x: x[1])\n    teleport_trips.sort(key=lambda x: x[0])\n    teleport_trips.sort(key=lambda x: x[2])\n    teleport_trips.sort(key=lambda x: x[1])\n    teleport_trips.sort(key=lambda x: x[0])\n    teleport_trips.sort(key=lambda x: x[2])\n    teleport_trips.sort(key=lambda x: x[1])\n    teleport_trips.sort(key=lambda x: x[0])\n    teleport_trips.sort(key=lambda x: x[2])\n    teleport_trips.sort(key=lambda x: x[1])\n    teleport_trips.sort(key=lambda x: x[0])\n    teleport_trips.sort(key=lambda x: x[2])\n    teleport_trips.sort(key=lambda x: x[1])\n    teleport_trips.sort(key=lambda x: x[0])\n    teleport_trips.sort(key=lambda x: x[2])\n    teleport_trips.sort(key=lambda x: x[1])\n    teleport_trips.sort(key=lambda x: x[0])\n    teleport_trips.sort(key=lambda x: x[2])\n    teleport_trips.sort(key=lambda x: x[1])\n    teleport_trips.sort(key=lambda x: x[0])\n    teleport_trips.sort(key=lambda x: x[2])\n    teleport_trips.sort(key=lambda x: x[1])\n    teleport_trips.sort(key=lambda x: x[0])\n    teleport_trips.sort(key=lambda x: x[2])\n    teleport_trips.sort(key=lambda x: x[1])\n    teleport_trips.sort(key=lambda x: x[0])\n    teleport_trips.sort(key=lambda x: x[2])\n    teleport_trips.sort(key=lambda x: x[1])\n    teleport_trips.sort(key=lambda x: x[0])\n    teleport_trips.sort(key=lambda x: x[2])\n    teleport_trips.sort(key=lambda x: x[1])\n    teleport_trips.sort(key=lambda x: x[0])\n    teleport_trips.sort(key=lambda x: x[2])\n    teleport_trips.sort(key=lambda x: x[1])\n    teleport_trips.sort(key=lambda x: x[0])\n    teleport_trips.sort(key=lambda x: x[2])\n    teleport_trips.sort(key=lambda x: x[1])\n    teleport_trips.sort(key=lambda x: x[0])\n    teleport_trips.sort(key=lambda x: x[2])\n    teleport_trips.sort(key=lambda x: x[1])\n    teleport_trips.sort(key=lambda x: x[0])\n    teleport_trips.sort(key=lambda x: x[2])\n    teleport_trips.sort(key=lambda x: x[1])\n    teleport_trips.sort(key=lambda x: x[0])\n    teleport_trips.sort(key=lambda x: x[2])\n    teleport_trips.sort(key=lambda x: x[1])\n    teleport_trips.sort(key=lambda x: x[0])\n    teleport_trips.sort(key=lambda x: x[2])\n    teleport_trips.sort(key=lambda x: x[1])\n    teleport_trips.sort(key=lambda x: x[0])\n    teleport_trips.sort(key=lambda x: x[2])\n    teleport_trips.sort(key=lambda x: x[1])\n    teleport_trips.sort(key=lambda x: x[0])\n    teleport_trips.sort(key=lambda x: x[2])\n    teleport_trips.sort(key=lambda x: x[1])\n    teleport_trips.sort(key=lambda x: x[0])\n    teleport_trips.sort(key=lambda x: x[2])\n    teleport_trips.sort(key=lambda x: x[1])\n    teleport_trips.sort(key=lambda x: x[0])\n    teleport_trips.sort(key=lambda x: x[2])\n    teleport_trips.sort(key=lambda x: x[1])\n    teleport_trips.sort(key=lambda x: x[0])\n    teleport_trips.sort(key=lambda x: x[2])\n    teleport_trips.sort(key=lambda x: x[1])\n    teleport_trips.sort(key=lambda x: x[0])\n    teleport_trips.sort(key=lambda x: x[2])\n    teleport_trips.sort(key=lambda x: x[1])\n    teleport_trips.sort(key=lambda x: x[0])\n    teleport_trips.sort(key=lambda x: x[2])\n    teleport"
    },
    {
        "number": 2989,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p, k = [int(x) for x in stdin.split()]\n    stations = [int(x) for x in stdin.split()]\n    pipes = [tuple(int(x) for x in stdin.split()) for _ in range(p)]\n    improvements = [tuple(int(x) for x in stdin.split()) for _ in range(k)]\n    stations.append(0)\n    stations.append(n)\n    stations = sorted(stations)\n    pipes = sorted(pipes)\n    improvements = sorted(improvements)\n    max_water = 0\n    for i in range(1, len(stations)):\n        max_water += stations[i] - stations[i - 1]\n    for i in range(len(improvements)):\n        max_water += improvements[i][2]\n    return str(max_water)"
    },
    {
        "number": 2990,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    owners = [stdin.split()[i] for i in range(n)]\n    prefs = [int(x) for x in stdin.split()[n:]]\n    players = [stdin.split()[i] for i in range(n * k, n * k + n)]\n    prefs = sorted(prefs, reverse=True)\n    players = sorted(players, reverse=True)\n    owners = sorted(owners)\n    for i in range(n):\n        owners[i] = sorted(owners[i])\n    for i in range(n):\n        owners[i] =''.join(owners[i])\n    for i in range(n):\n        owners[i] = owners[i].split()\n    for i in range(n):\n        owners[i] = [int(x) for x in owners[i]]\n    for i in range(n):\n        owners[i] = sorted(owners[i])\n    for i in range(n):\n        owners[i] =''.join(owners[i])\n    for i in range(n):\n        owners[i] = owners[i].split()\n    for i in range(n):\n        owners[i] = [int(x) for x in owners[i]]\n    for i in range(n):\n        owners[i] = sorted(owners[i])\n    for i in range(n):\n        owners[i] =''.join(owners[i])\n    for i in range(n):\n        owners[i] = owners[i].split()\n    for i in range(n):\n        owners[i] = [int(x) for x in owners[i]]\n    for i in range(n):\n        owners[i] = sorted(owners[i])\n    for i in range(n):\n        owners[i] =''.join(owners[i])\n    for i in range(n):\n        owners[i] = owners[i].split()\n    for i in range(n):\n        owners[i] = [int(x) for x in owners[i]]\n    for i in range(n):\n        owners[i] = sorted(owners[i])\n    for i in range(n):\n        owners[i] =''.join(owners[i])\n    for i in range(n):\n        owners[i] = owners[i].split()\n    for i in range(n):\n        owners[i] = [int(x) for x in owners[i]]\n    for i in range(n):\n        owners[i] = sorted(owners[i])\n    for i in range(n):\n        owners[i] =''.join(owners[i])\n    for i in range(n):\n        owners[i] = owners[i].split()\n    for i in range(n):\n        owners[i] = [int(x) for x in owners[i]]\n    for i in range(n):\n        owners[i] = sorted(owners[i])\n    for i in range(n):\n        owners[i] =''.join(owners[i])\n    for i in range(n):\n        owners[i] = owners[i].split()\n    for i in range(n):\n        owners[i] = [int(x) for x in owners[i]]\n    for i in range(n):\n        owners[i] = sorted(owners[i])\n    for i in range(n):\n        owners[i] =''.join(owners[i])\n    for i in range(n):\n        owners[i] = owners[i].split()\n    for i in range(n):\n        owners[i] = [int(x) for x in owners[i]]\n    for i in range(n):\n        owners[i] = sorted(owners[i])\n    for i in range(n):\n        owners[i] =''.join(owners[i])\n    for i in range(n):\n        owners[i] = owners[i].split()\n    for i in range(n):\n        owners[i] = [int(x) for x in owners[i]]\n    for i in range(n):\n        owners[i] = sorted(owners[i])\n    for i in range(n):\n        owners[i] =''.join(owners[i])\n    for i in range(n):\n        owners[i] = owners[i].split()\n    for i in range(n):\n        owners[i] = [int(x) for x in owners[i]]\n    for i in range(n):\n        owners[i] = sorted(owners[i])\n    for i in range(n):\n        owners[i] =''.join(owners[i])\n    for i in range(n):\n        owners[i] = owners[i].split()\n    for i in range(n):\n        owners[i] = [int(x) for x in owners[i]]\n    for i in range(n):\n        owners[i] = sorted(owners[i])\n    for i in range(n):\n        owners[i] =''.join(owners[i])\n    for i in range(n):\n        owners[i] = owners[i].split()\n    for i in range(n):\n        owners[i] = [int(x) for x in owners[i]]\n    for i in range(n):\n        owners[i] = sorted(owners[i])\n    for i in range(n):\n        owners[i] =''.join(owners[i])\n    for i in range(n):\n        owners[i] = owners[i].split()\n    for i in range(n):\n        owners[i] = [int(x) for x in owners[i]]\n"
    },
    {
        "number": 2991,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    gnomes = [int(x) for x in stdin.split()]\n    gnomes.sort()\n    permutations = []\n    for i in range(1, n + 1):\n        permutations.append(gnomes[:i])\n    permutations.sort()\n    for permutation in permutations:\n        if permutation == gnomes:\n            return''.join([str(x) for x in permutation])\n    return ''"
    },
    {
        "number": 2992,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    roads = [tuple(int(x) for x in stdin.split()) for _ in range(m)]\n    return 'IMPOSSIBLE' if n < 2 else min(\n        max(x[2] for x in roads) - min(x[0] for x in roads) for x in roads\n    )\n\nassert(solution('''3 3\n0 1 3\n1 2 4\n2 1 5''') == '4')\nassert(solution('''3 3\n0 1 3\n1 2 4\n2 1 5''') == 'IMPOSSIBLE')\nassert(solution('''3 3\n0 1 3\n1 2 4\n2 1 5''') == '4')\nassert(solution('''3 3\n0 1 3\n1 2 4\n2 1 5''') == 'IMPOSSIBLE')\nassert(solution('''3 3\n0 1 3\n1 2 4\n2 1 5''') == '4')\nassert(solution('''3 3\n0 1 3\n1 2 4\n2 1 5''') == 'IMPOSSIBLE')\nassert(solution('''3 3\n0 1 3\n1 2 4\n2 1 5''') == '4')\nassert(solution('''3 3\n0 1 3\n1 2 4\n2 1 5''') == 'IMPOSSIBLE')\nassert(solution('''3 3\n0 1 3\n1 2 4\n2 1 5''') == '4')\nassert(solution('''3 3\n0 1 3\n1 2 4\n2 1 5''') == 'IMPOSSIBLE')\nassert(solution('''3 3\n0 1 3\n1 2 4\n2 1 5''') == '4')\nassert(solution('''3 3\n0 1 3\n1 2 4\n2 1 5''') == 'IMPOSSIBLE')\nassert(solution('''3 3\n0 1 3\n1 2 4\n2 1 5''') == '4')\nassert(solution('''3 3\n0 1 3\n1 2 4\n2 1 5''') == 'IMPOSSIBLE')\nassert(solution('''3 3\n0 1 3\n1 2 4\n2 1 5''') == '4')\nassert(solution('''3 3\n0 1 3\n1 2 4\n2 1 5''') == 'IMPOSSIBLE')\nassert(solution('''3 3\n0 1 3\n1 2 4\n2 1 5''') == '4')\nassert(solution('''3 3\n0 1 3\n1 2 4\n2 1 5''') == 'IMPOSSIBLE')\nassert(solution('''3 3\n0 1 3\n1 2 4\n2 1 5''') == '4')\nassert(solution('''3 3\n0 1 3\n1 2 4\n2 1 5''') == 'IMPOSSIBLE')\nassert(solution('''3 3\n0 1 3\n1 2 4\n2 1 5''') == '4')\nassert(solution('''3 3\n0 1 3\n1 2 4\n2 1 5''') == 'IMPOSSIBLE')\nassert(solution('''3 3\n0 1 3\n1 2 4\n2 1 5''') == '4')\nassert(solution('''3 3\n0 1 3\n1 2 4\n2 1 5''') == 'IMPOSSIBLE')\nassert(solution('''3 3\n0 1 3\n1 2 4\n2 1 5''') == '4')\nassert(solution('''3 3\n0 1 3\n1 2 4\n2 1 5''') == 'IMPOSSIBLE')\nassert(solution('''3 3\n0 1 3\n1 2 4\n2 1 5''') == '4')\nassert(solution('''3 3\n0 1 3\n1 2 4\n2 1 5''') == 'IMPOSSIBLE')\nassert(solution('''3 3\n0 1 3\n1 2 4\n2 1 5''') == '4')\nassert(solution('''3 3\n0 1 3\n1 2 4\n2 1 5''') == 'IMPOSSIBLE')\nassert(solution('''3 3\n0 1 3\n1 2 4\n2 1 5''') == '4')\nassert(solution('''3 3\n0 1 3\n1 2 4\n2 1 5''') == 'IMPOSSIBLE')\nassert(solution('''3 3\n0 1 3\n1 2 4\n2 1 5''') == '4')\nassert(solution('''3 3\n0 1 3\n1 2 4\n2 1 5''') == 'IMPOSSIBLE')\nassert(solution('''3 3\n0 1 3\n1 2 4\n2 1 5''') == '4')\nassert(solution('''3 3\n0 1 3\n1 2 4\n2 1 5''') == 'IMPOSSIBLE')\nassert(solution('''3 3\n0 1 3\n1 2 4\n2 1 5''') == '4')\nassert(solution('''3 3\n0 1 3\n1 2 4\n2 1 5''') == 'IMPOSSIBLE')\nassert(solution('''3 3\n0 1 3\n1 2 4\n2 1 5''') == '4')\nassert(solution('''3 3\n0 1 3\n1 2 4\n2 1 5''') == 'IMPOSSIBLE')\nassert(solution('''3 3\n0 1 3\n1 2 4\n2 1 5''') == '4')\nassert(solution('''3 3\n0 1 3\n1 2 4\n2 1 5''') == 'IMPOSSIBLE')\nassert(solution('''3 3\n0 1 3\n1 2 4\n2 1 5''') == '4')\nassert(solution('''3 3\n0 1 3\n1 2 4\n2 1 5''') == 'IMPOSSIBLE')\nassert(solution('''3 3\n0 1 3\n1 2 4\n2 1 5''') == '4')\nassert(solution('''3 3\n0 1 3\n1 2 4\n2 1 5''') == 'IMPOSSIBLE')\nassert(solution('''3 3\n0 1 3\n1 2 4\n2 1 5''') == '4')\nassert(solution('''3 3\n0 1 3\n1 2 4\n2 1 5''') == 'IMPOSSIBLE')\nassert(solution('''3 3\n0 1 3\n1 2 4\n2 1 5''') == '4')\nassert(solution('''3 3\n0 1 3\n1 2 4\n2 1 5''') == 'IMPOSSIBLE')\nassert(solution('''3 3\n0 1 3\n1 2 4\n2 1 5''') == '4')\nassert(solution('''3 3\n0 1 3\n1 2 4\n2 1 5''') == 'IMPOSSIBLE')\nassert(solution('''3 3\n0 1"
    },
    {
        "number": 2993,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    D = int(stdin.readline().strip())\n    encoded = stdin.readline().strip()\n    encoded = encoded.replace('0', 'A')\n    encoded = encoded.replace('1', 'B')\n    encoded = encoded.replace('A', '0')\n    encoded = encoded.replace('B', '1')\n    encoded = encoded.replace('.', '0')\n    encoded = encoded.replace('0', '.')\n    encoded = encoded.replace('1', '0')\n    encoded = encoded.replace('0', '1')\n    encoded = encoded.replace('1', '0')\n    encoded = encoded.replace('0', 'A')\n    encoded = encoded.replace('1', 'B')\n    encoded = encoded.replace('A', '0')\n    encoded = encoded.replace('B', '1')\n    encoded = encoded.replace('.', '0')\n    encoded = encoded.replace('0', '.')\n    encoded = encoded.replace('1', '0')\n    encoded = encoded.replace('0', '1')\n    encoded = encoded.replace('1', '0')\n    encoded = encoded.replace('0', 'A')\n    encoded = encoded.replace('1', 'B')\n    encoded = encoded.replace('A', '0')\n    encoded = encoded.replace('B', '1')\n    encoded = encoded.replace('.', '0')\n    encoded = encoded.replace('0', '.')\n    encoded = encoded.replace('1', '0')\n    encoded = encoded.replace('0', '1')\n    encoded = encoded.replace('1', '0')\n    encoded = encoded.replace('0', 'A')\n    encoded = encoded.replace('1', 'B')\n    encoded = encoded.replace('A', '0')\n    encoded = encoded.replace('B', '1')\n    encoded = encoded.replace('.', '0')\n    encoded = encoded.replace('0', '.')\n    encoded = encoded.replace('1', '0')\n    encoded = encoded.replace('0', '1')\n    encoded = encoded.replace('1', '0')\n    encoded = encoded.replace('0', 'A')\n    encoded = encoded.replace('1', 'B')\n    encoded = encoded.replace('A', '0')\n    encoded = encoded.replace('B', '1')\n    encoded = encoded.replace('.', '0')\n    encoded = encoded.replace('0', '.')\n    encoded = encoded.replace('1', '0')\n    encoded = encoded.replace('0', '1')\n    encoded = encoded.replace('1', '0')\n    encoded = encoded.replace('0', 'A')\n    encoded = encoded.replace('1', 'B')\n    encoded = encoded.replace('A', '0')\n    encoded = encoded.replace('B', '1')\n    encoded = encoded.replace('.', '0')\n    encoded = encoded.replace('0', '.')\n    encoded = encoded.replace('1', '0')\n    encoded = encoded.replace('0', '1')\n    encoded = encoded.replace('1', '0')\n    encoded = encoded.replace('0', 'A')\n    encoded = encoded.replace('1', 'B')\n    encoded = encoded.replace('A', '0')\n    encoded = encoded.replace('B', '1')\n    encoded = encoded.replace('.', '0')\n    encoded = encoded.replace('0', '.')\n    encoded = encoded.replace('1', '0')\n    encoded = encoded.replace('0', '1')\n    encoded = encoded.replace('1', '0')\n    encoded = encoded.replace('0', 'A')\n    encoded = encoded.replace('1', 'B')\n    encoded = encoded.replace('A', '0')\n    encoded = encoded.replace('B', '1')\n    encoded = encoded.replace('.', '0')\n    encoded = encoded.replace('0', '.')\n    encoded = encoded.replace('1', '0')\n    encoded = encoded.replace('0', '1')\n    encoded = encoded.replace('1', '0')\n    encoded = encoded.replace('0', 'A')\n    encoded = encoded.replace('1', 'B')\n    encoded = encoded.replace('A', '0')\n    encoded = encoded.replace('B', '1')\n    encoded = encoded.replace('.', '0')\n    encoded = encoded.replace('0', '.')\n    encoded = encoded.replace('1', '0')\n    encoded = encoded.replace('0', '1')\n    encoded = encoded.replace('1', '0')\n    encoded = encoded.replace('0', 'A')\n    encoded = encoded.replace('1', 'B')\n    encoded = encoded.replace('A', '0')\n    encoded = encoded.replace('B', '1')\n    encoded = encoded.replace('.', '0')\n    encoded = encoded.replace('0', '.')\n    encoded = encoded.replace('1', '0')\n    encoded = encoded.replace('0', '1')\n    encoded = encoded.replace('1', '0')\n    encoded = encoded.replace('0', 'A')\n    encoded = encoded.replace('1', 'B')\n    encoded = encoded.replace('A', '0')\n    encoded = encoded.replace('B', '1')\n    encoded = encoded.replace('.', '0')\n    encoded = encoded.replace('0', '.')\n    encoded = encoded.replace('1', '0')\n    encoded = encoded.replace('0', '1')\n    encoded = encoded.replace('1', '0')\n    encoded = encoded.replace('0', 'A')\n    encoded = encoded.replace('1', 'B')\n    encoded"
    },
    {
        "number": 2994,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2995,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1 or n > 100000:\n        return \"impossible\"\n    items = [stdin.strip() for stdin in stdin.split(\"\\n\")]\n    if len(items) < n:\n        return \"impossible\"\n    pairs = [stdin.strip() for stdin in stdin.split(\"\\n\")]\n    if len(pairs) < n:\n        return \"impossible\"\n    items = set(items)\n    pairs = set(pairs)\n    if len(items) < n:\n        return \"impossible\"\n    if len(pairs) < n:\n        return \"impossible\"\n    pairs = list(pairs)\n    for pair in pairs:\n        if pair not in items:\n            return \"impossible\"\n    pairs = sorted(pairs)\n    items = sorted(items)\n    if pairs[0] == items[0]:\n        return \"impossible\"\n    if pairs[-1] == items[-1]:\n        return \"impossible\"\n    if pairs[-1] - pairs[0] > n:\n        return \"impossible\"\n    if pairs[0] - items[0] > n:\n        return \"impossible\"\n    if pairs[-1] - items[-1] > n:\n        return \"impossible\"\n    if pairs[0] - items[0] > n:\n        return \"impossible\"\n    if pairs[-1] - items[-1] > n:\n        return \"impossible\"\n    if pairs[0] - items[0] > n:\n        return \"impossible\"\n    if pairs[-1] - items[-1] > n:\n        return \"impossible\"\n    if pairs[0] - items[0] > n:\n        return \"impossible\"\n    if pairs[-1] - items[-1] > n:\n        return \"impossible\"\n    if pairs[0] - items[0] > n:\n        return \"impossible\"\n    if pairs[-1] - items[-1] > n:\n        return \"impossible\"\n    if pairs[0] - items[0] > n:\n        return \"impossible\"\n    if pairs[-1] - items[-1] > n:\n        return \"impossible\"\n    if pairs[0] - items[0] > n:\n        return \"impossible\"\n    if pairs[-1] - items[-1] > n:\n        return \"impossible\"\n    if pairs[0] - items[0] > n:\n        return \"impossible\"\n    if pairs[-1] - items[-1] > n:\n        return \"impossible\"\n    if pairs[0] - items[0] > n:\n        return \"impossible\"\n    if pairs[-1] - items[-1] > n:\n        return \"impossible\"\n    if pairs[0] - items[0] > n:\n        return \"impossible\"\n    if pairs[-1] - items[-1] > n:\n        return \"impossible\"\n    if pairs[0] - items[0] > n:\n        return \"impossible\"\n    if pairs[-1] - items[-1] > n:\n        return \"impossible\"\n    if pairs[0] - items[0] > n:\n        return \"impossible\"\n    if pairs[-1] - items[-1] > n:\n        return \"impossible\"\n    if pairs[0] - items[0] > n:\n        return \"impossible\"\n    if pairs[-1] - items[-1] > n:\n        return \"impossible\"\n    if pairs[0] - items[0] > n:\n        return \"impossible\"\n    if pairs[-1] - items[-1] > n:\n        return \"impossible\"\n    if pairs[0] - items[0] > n:\n        return \"impossible\"\n    if pairs[-1] - items[-1] > n:\n        return \"impossible\"\n    if pairs[0] - items[0] > n:\n        return \"impossible\"\n    if pairs[-1] - items[-1] > n:\n        return \"impossible\"\n    if pairs[0] - items[0] > n:\n        return \"impossible\"\n    if pairs[-1] - items[-1] > n:\n        return \"impossible\"\n    if pairs[0] - items[0] > n:\n        return \"impossible\"\n    if pairs[-1] - items[-1] > n:\n        return \"impossible\"\n    if pairs[0] - items[0] > n:\n        return \"impossible\"\n    if pairs[-1] - items[-1] > n:\n        return \"impossible\"\n    if pairs[0] - items[0] > n:\n        return \"impossible\"\n    if pairs[-1] - items[-1] > n:\n        return \"impossible\"\n    if pairs[0] - items[0] > n:\n        return \"impossible\"\n    if pairs[-1] - items[-1] > n:\n        return \"impossible\"\n    if pairs[0] - items[0] > n:\n        return \"impossible\"\n    if pairs[-1] - items[-1] > n:\n        return \"impossible\"\n    if pairs[0] - items[0] > n:\n        return \"impossible\"\n    if pairs[-1] - items[-1] > n:\n        return \"impossible\"\n    if pairs[0] - items[0] > n:\n        return \"impossible\"\n    if pairs[-1] - items[-1] > n:\n        return \"impossible\"\n    if pairs[0] - items[0] > n:\n        return \"impossible\"\n    if pairs[-1] - items[-1] > n:\n        return \"impossible\"\n    if pairs[0] - items[0] > n:\n        return \"impossible\"\n    if pairs[-1] - items[-1] > n:\n        return \"impossible\"\n    if pairs[0] - items[0] > n:\n        return \"impossible\"\n    if pairs[-1] - items[-1] > n:\n        return \"impossible\"\n    if pairs[0] - items[0] >"
    },
    {
        "number": 2996,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    requests = [int(x) for x in stdin.split()]\n    costs = [int(x) for x in stdin.split()]\n    costs.sort()\n    costs.reverse()\n    costs = [0] + costs\n    costs = [costs[i] - costs[i - 1] for i in range(1, len(costs))]\n    costs = [costs[i] for i in range(len(costs)) if i % k == 0]\n    costs = [costs[i] for i in range(len(costs)) if i % n == 0]\n    return sum(costs)"
    },
    {
        "number": 2997,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split()]\n    edges = [tuple(int(x) for x in stdin.split()) for _ in range(M)]\n    return str(solve(N, edges))\n\ndef"
    },
    {
        "number": 2998,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 2999,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = [int(x) for x in stdin.split()]\n    participants = [x for x in stdin.split()]\n    participants.sort(key=lambda x: int(x.split()[1]), reverse=True)\n    participants.sort(key=lambda x: x.split()[0])\n    participants.sort(key=lambda x: int(x.split()[1]), reverse=True)\n    participants.sort(key=lambda x: x.split()[0])\n    participants.sort(key=lambda x: int(x.split()[1]), reverse=True)\n    participants.sort(key=lambda x: x.split()[0])\n    participants.sort(key=lambda x: int(x.split()[1]), reverse=True)\n    participants.sort(key=lambda x: x.split()[0])\n    participants.sort(key=lambda x: int(x.split()[1]), reverse=True)\n    participants.sort(key=lambda x: x.split()[0])\n    participants.sort(key=lambda x: int(x.split()[1]), reverse=True)\n    participants.sort(key=lambda x: x.split()[0])\n    participants.sort(key=lambda x: int(x.split()[1]), reverse=True)\n    participants.sort(key=lambda x: x.split()[0])\n    participants.sort(key=lambda x: int(x.split()[1]), reverse=True)\n    participants.sort(key=lambda x: x.split()[0])\n    participants.sort(key=lambda x: int(x.split()[1]), reverse=True)\n    participants.sort(key=lambda x: x.split()[0])\n    participants.sort(key=lambda x: int(x.split()[1]), reverse=True)\n    participants.sort(key=lambda x: x.split()[0])\n    participants.sort(key=lambda x: int(x.split()[1]), reverse=True)\n    participants.sort(key=lambda x: x.split()[0])\n    participants.sort(key=lambda x: int(x.split()[1]), reverse=True)\n    participants.sort(key=lambda x: x.split()[0])\n    participants.sort(key=lambda x: int(x.split()[1]), reverse=True)\n    participants.sort(key=lambda x: x.split()[0])\n    participants.sort(key=lambda x: int(x.split()[1]), reverse=True)\n    participants.sort(key=lambda x: x.split()[0])\n    participants.sort(key=lambda x: int(x.split()[1]), reverse=True)\n    participants.sort(key=lambda x: x.split()[0])\n    participants.sort(key=lambda x: int(x.split()[1]), reverse=True)\n    participants.sort(key=lambda x: x.split()[0])\n    participants.sort(key=lambda x: int(x.split()[1]), reverse=True)\n    participants.sort(key=lambda x: x.split()[0])\n    participants.sort(key=lambda x: int(x.split()[1]), reverse=True)\n    participants.sort(key=lambda x: x.split()[0])\n    participants.sort(key=lambda x: int(x.split()[1]), reverse=True)\n    participants.sort(key=lambda x: x.split()[0])\n    participants.sort(key=lambda x: int(x.split()[1]), reverse=True)\n    participants.sort(key=lambda x: x.split()[0])\n    participants.sort(key=lambda x: int(x.split()[1]), reverse=True)\n    participants.sort(key=lambda x: x.split()[0])\n    participants.sort(key=lambda x: int(x.split()[1]), reverse=True)\n    participants.sort(key=lambda x: x.split()[0])\n    participants.sort(key=lambda x: int(x.split()[1]), reverse=True)\n    participants.sort(key=lambda x: x.split()[0])\n    participants.sort(key=lambda x: int(x.split()[1]), reverse=True)\n    participants.sort(key=lambda x: x.split()[0])\n    participants.sort(key=lambda x: int(x.split()[1]), reverse=True)\n    participants.sort(key=lambda x: x.split()[0])\n    participants.sort(key=lambda x: int(x.split()[1]), reverse=True)\n    participants.sort(key=lambda x: x.split()[0])\n    participants.sort(key=lambda x: int(x.split()[1]), reverse=True)\n    participants.sort(key=lambda x: x.split()[0])\n    participants.sort(key=lambda x: int(x.split()[1]), reverse=True)\n    participants.sort(key=lambda x: x.split()[0])\n    participants.sort(key=lambda x: int(x.split()[1]), reverse=True)\n    participants.sort(key=lambda x: x.split()[0])\n    participants.sort(key=lambda x: int(x.split()[1]), reverse=True)\n    participants.sort(key=lambda x: x.split()[0])\n    participants.sort(key=lambda x: int(x.split()[1]), reverse=True)\n    participants.sort(key=lambda x: x.split()[0])\n    participants.sort(key=lambda x: int(x.split()[1]), reverse=True)\n    participants.sort(key=lambda x: x.split()[0])\n    participants.sort(key=lambda x: int(x.split()[1]), reverse=True)\n    particip"
    }
]