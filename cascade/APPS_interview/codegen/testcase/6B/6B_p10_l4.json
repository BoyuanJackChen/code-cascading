[
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('[:|]') == -1\nassert solution('[::]') == 4\nassert solution('[:|::]') == -1\nassert solution('[:||:]') == 4\nassert solution('[:|||:]') == 6\n"
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution([::]) == '-1'\nassert solution(':::') == '-1'\nassert solution(':::') == '-1'\nassert solution('|:||:') == '-1'\nassert solution('|||') == '-1'\n"
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('') == '-1'\nassert solution('[::]') == '4'\nassert solution('[]::') == '4'\nassert solution('[::][:][:]') == '4'\nassert solution('[::][:][|]') == '4'\n"
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('[::]') == 4\nassert solution('[:||:]') == 6\nassert solution('[:|||:]') == 7\nassert solution('[::|:]') == -1\nassert solution('][:||:]') == -1\n"
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"|[a:b:|]\") == 4\nassert solution(\"|]:[|:]\") == -1\nassert solution(\"[::]\") == 4\nassert solution(\"[:||:]\") == -1\nassert solution(\"[:|||:]\") == 6\n"
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution([::]) == 4\nassert solution([:||:]) == -1\nassert solution([::|:]) == -1\nassert solution([:|||:]) == -1\nassert solution([::||:]) == -1\n"
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('[::]') == '4'\nassert solution('[:||:]') == '6'\nassert solution('[:|||:]') == '7'\nassert solution('[::||]') == '6'\nassert solution('[:|||]') == '6'\n"
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('[]') == '-1'\nassert solution('[::]') == '4'\nassert solution('[:||:]') == '6'\nassert solution('[::||:|]') == '7'\nassert solution('[::|||:]') == '7'\n"
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('') == '-1'\nassert solution('[]') == '-1'\nassert solution('[]]') == '-1'\nassert solution('[]::') == '-1'\nassert solution('[]::[]') == '-1'\n"
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('[::]') == 4\nassert solution('[:||:]') == 6\nassert solution('[:|||:]') == 7\nassert solution('[::][::]') == 8\nassert solution('[:||][:]') == -1\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"100\") == \"99\"\nassert solution(\"521\") == \"499\"\nassert solution(\"48\") == \"48\"\nassert solution(\"100\") == \"99\"\n\n\"\"\""
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''100''') == '99'\nassert solution('''48''') == '48'\nassert solution('''521''') == '499'\nprint(solution('''1'''))\nassert solution('''1''') == '1'\nprint(solution('''101'''))\nassert solution('''101''') == '100'\nprint(solution('''1000'''))\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(input()) == output"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('') == None\nassert solution('48') == None\nassert solution('10') == None\nassert solution('100') == None\nassert solution('101') == None\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(input()) == \"499\"\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''100''') == '99'\nassert solution('''48''') == '48'\nassert solution('''521''') == '499'\nassert solution('''926''') == '899'\nassert solution('''123456789''') == '999999'\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == '499'"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"100\") == \"99\"\nassert solution(\"48\") == \"48\"\nassert solution(\"521\") == \"499\"\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(input()) == output()\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('100') == '99'\nassert solution('48') == '48'\nassert solution('521') == '499'\n\n\n\"\"\"\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"4\") == \"1\"\nassert solution(\"201\") == \"99\"\nassert solution(\"4000\") == \"1000\"\nassert solution(\"500\") == \"500\"\nassert solution(\"1\") == \"0\"\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\n    \"4\"\n) == \"1\"\n\nassert solution(\n    \"201\"\n) == \"99\"\n\nassert solution(\n    \"4000\"\n) == \"1000\"\n\nassert solution(\n    \"1234\"\n) == \"100\"\n\nassert solution(\n    \"12\"\n) == \"999\""
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('0') == ''\nassert solution('1') == ''\nassert solution('2') == ''\nassert solution('200') == ''\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('4') == '1'\nassert solution('201') == '99'\nassert solution('4000') == '1000'\nassert solution('12345') == '1000'\nassert solution('1234567') == '999999'\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('4\\n') == '1\\n'\nassert solution('201\\n') == '99\\n'\nassert solution('4000\\n') == '1000\\n'\nassert solution('1000\\n') == '999\\n'\nassert solution('100\\n') == '99\\n'\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1') == 1\nassert solution('4') == 1\nassert solution('10') == 9\nassert solution('100') == 99\nassert solution('1000') == 999\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(4) == \"1\"\nassert solution(201) == \"99\"\nassert solution(4000) == \"1000\"\nassert solution(12345) == \"1000\"\nassert solution(5) == \"100\"\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(4) == \"1\"\nassert solution(201) == \"99\"\nassert solution(4000) == \"1000\"\nassert solution(12345) == \"1000\"\n\n\"\"\"\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(input()) == output\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(4) == \"1\"\nassert solution(201) == \"99\"\nassert solution(4000) == \"1000\"\nassert solution(5) == \"5\"\n\nprint(\"Testcase passed\")\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''7 5\n1 4\n4 5\n5 6\n6 7\n3 5''') == '7'\nassert solution('''4 3\n1 1\n2 2\n2 3\n3 4\n''') == '2'\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == \"5\"\n\nassert solution(\"8 1\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\") == \"10\"\n\nassert solution(\"4 4\\n1 1\\n2 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\") == \"3\"\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\n'''7 5\n1 4\n4 5\n5 6\n6 7\n3 5''') == '7'\nassert solution(\n'''4 3\n1 1\n2 2\n2 3\n3 4\n''') == '2'\nassert solution(\n'''4 4\n1 1\n2 2\n2 3\n3 4\n''') == '3'\nassert solution(\n'''8 4\n1 1\n2 2\n2 3\n3 4\n3 5\n4 5\n5 6\n6 7\n7 8\n''') == '7'\nassert solution(\n'''7 8\n1 1\n2 2\n2 3\n3 4\n3 5\n4 5\n5 6\n6 7\n7 8\n''') == '7'\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1\\n1') == '1'\nassert solution('2\\n1') == '2'\nassert solution('1\\n1\\n2\\n2') == '2'\nassert solution('5\\n5') == '5'\nassert solution('5\\n5\\n5\\n5\\n5') == '5'\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('4 2') == '2'\nassert solution('4 3') == '3'\nassert solution('4 3\\n1 1\\n2 2\\n2 3\\n3 4') == '3'\nassert solution('4 3\\n1 1\\n2 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\\n10 11\\n11 12\\n12 13\\n13 14\\n14 15\\n15 16\\n16 17\\n17 18\\n18 19\\n19 20\\n20 21\\n21 22\\n22 23\\n23 24\\n24 25\\n25 26\\n26 27\\n27 28\\n28 29\\n29 30\\n30 31\\n31 32\\n32 33\\n33 34\\n34 35\\n35 36\\n36 37\\n37 38\\n38 39\\n39 40\\n40 41\\n41 42\\n42 43\\n43 44\\n44 45\\n45 46\\n46 47\\n47 48\\n48 49\\n49 50\\n50 51\\n51 52\\n52 53\\n53 54\\n54 55\\n55 56\\n56 57\\n57 58\\n58 59\\n59 60\\n60 61\\n61 62\\n62 63\\n63 64\\n64 65\\n65 66\\n66 67\\n67 68\\n68 69\\n69 70\\n70 71\\n71 72\\n72 73\\n73 74\\n74 75\\n75 76\\n76 77\\n77 78\\n78 79\\n79 80\\n80 81\\n81 82\\n82 83\\n83 84\\n84 85\\n85 86\\n86 87\\n87 88\\n88 89\\n89 90\\n90 91\\n91 92\\n92 93\\n93 94\\n94 95\\n95 96\\n96 97\\n97 98\\n98 99\\n99 100\\n100 101') == '3'\nassert solution('4 2\\n1 1\\n2 2\\n2 3\\n3 4') == '2'\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('4 3\\n1 1\\n2 2\\n2 3\\n3 4') == '2'\nassert solution('4 3\\n1 1\\n2 2\\n2 3\\n3 4') == '3'\nassert solution('3 2\\n1 1\\n2 2\\n1 2') == '1'\nassert solution('3 4\\n1 1\\n2 2\\n1 2') == '2'\nassert solution('1 4\\n1 2\\n2 3\\n3 4') == '4'\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('3 3\\n1 1\\n4 4\\n2 2\\n2 3\\n3 4\\n') == '3'\nassert solution('4 3\\n1 1\\n2 2\\n2 3\\n3 4\\n') == '2'\nassert solution('3 1\\n1 1\\n4 4\\n2 2\\n2 3\\n3 4\\n') == '3'\nassert solution('1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n') == '1'\nassert solution('4 4\\n1 1\\n2 2\\n2 3\\n3 4\\n') == '3'\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1 4\\n4 5\\n5 6\\n6 7\\n3 5\\n') == '7'\nassert solution('7 5\\n1 4\\n4 5\\n5 6\\n6 7\\n3 5\\n') == '7'\nassert solution('7 5\\n1 1\\n2 2\\n3 4\\n\\n\\n5 6\\n6 7\\n3 5\\n') == '2'\nassert solution('4 3\\n1 1\\n2 2\\n3 4\\n') == '3'\nassert solution('4 4\\n1 1\\n2 2\\n2 3\\n3 4\\n') == '3'"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('3\\n11 23') == '2'\nassert solution('5\\n01 07') == '0'\nassert solution('1\\n00 05') == '4'\nassert solution('1\\n00 15') == '3'\nassert solution('1\\n01 09') == '3'\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"3\\n11 23\") == \"2\"\nassert solution(\"5\\n01 07\") == \"0\"\nassert solution(\"5\\n23 07\") == \"0\"\nassert solution(\"5\\n07 23\") == \"0\"\nassert solution(\"5\\n23 07\") == \"0\"\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"0 2\") == \"1\"\nassert solution(\"4 1\") == \"2\"\nassert solution(\"2 7\") == \"0\"\nassert solution(\"12 4\") == \"1\"\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1\\n01 07') == 0\nassert solution('3\\n11 23') == 2\nassert solution('5\\n01 07') == 0\nassert solution('3\\n11 19') == 1\nassert solution('3\\n01 10') == 1\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('3\\n11 23') == '2'\nassert solution('5\\n01 07') == '0'\nassert solution('5\\n11 07') == '0'\nassert solution('3\\n01 07') == '2'\nassert solution('5\\n31 07') == '0'\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('10 3') == '0'\nassert solution('2 4') == '1'\nassert solution('9 7') == '0'\nassert solution('9 12') == '1'\nassert solution('1 1') == '0'\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"3\") == \"\"\nassert solution(\"3 4\") == \"\"\nassert solution(\"3 4 5\") == \"\"\nassert solution(\"3 4 7\") == \"\"\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('3\\n11 23\\n') == '2'\nassert solution('5\\n01 07\\n') == '0'\nassert solution('5\\n01 07\\n') == '0'\nassert solution('5\\n01 07\\n') == '0'\nassert solution('5\\n01 07\\n') == '0'\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''3\n11 23''') == '2'\nassert solution('''5\n01 07''') == '0'\nassert solution('''1\n01 02\n''') == '1'\nassert solution('''0\n42 02\n''') == '2'\nassert solution('''0\n42 02\n''') == '0'\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('3\\n11 23') == 2\nassert solution('5\\n01 07') == 0\nassert solution('3\\n11 59') == 0\nassert solution('3\\n00 59') == 1\nassert solution('3\\n23 59') == 1\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == expected_output\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"6 3 2 4\") == \"5\"\nassert solution(\"6 3 1 3\") == \"1\"\nassert solution(\"5 2 1 5\") == \"0\"\n\n\n\n\n\"\"\""
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('6 3 2 4') == '5'\nassert solution('6 3 1 3') == '1'\nassert solution('5 2 1 5') == '0'"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"2 3 1 3\") == \"0\"\nassert solution(\"6 3 2 4\") == \"5\"\nassert solution(\"5 2 1 5\") == \"1\"\nassert solution(\"6 1 1 6\") == \"1\"\nassert solution(\"6 5 5 6\") == \"0\"\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"6 3 2 4\") == \"5\"\nassert solution(\"6 3 1 3\") == \"1\"\nassert solution(\"5 2 1 5\") == \"0\"\nassert solution(\"10 4 9 1\") == \"10\"\nassert solution(\"11 4 9 1\") == \"0\"\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\nfrom sys import stdin, stdout\n\nn, pos, l, r = map(int, stdin.readline().split())"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdin\n\n\"\"\"\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdin"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''3\n3 10\n6 3\n8 2\n1 4\n4 10\n4 1\n3 2\n2 6\n1 100\n2 15\n10 11\n14 100\n''') == '2'\nassert solution('''3\n3 10\n6 3\n8 2\n1 4\n4 10\n4 1\n3 2\n2 6\n1 100\n2 15\n10 11\n14 100\n''') == '3'\nassert solution('''3\n3 10\n6 3\n8 2\n1 4\n4 10\n4 1\n3 2\n2 6\n1 100\n2 15\n10 11\n14 100\n''') == '-1'\nassert solution('''3\n3 10\n6 3\n8 2\n1 4\n4 10\n4 1\n3 2\n2 6\n1 100\n2 15\n10 11\n14 100\n''') == '-1'\nassert solution('''3\n3 10\n6 3\n8 2\n1 4\n4 10\n4 1\n3 2\n2 6\n1 100\n2 15\n10 11\n14 100\n''') == '-1'\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('3') == '2'\nassert solution('3 10') == '2'\nassert solution('3 10\\n6 3\\n8 2\\n1 4\\n4 10\\n4 1\\n3 2\\n2 6\\n1 100\\n2 15\\n10 11\\n14 100') == '2'\nassert solution('10\\n1000\\n1 1000\\n1 1000\\n1 1000\\n1 1000\\n1 1000\\n1 1000\\n1 1000\\n1 1000\\n1 1000\\n1 1000\\n1 1000') == '-1'\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == expected\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''3\n3 10\n6 3\n8 2\n1 4\n4 10\n4 1\n3 2\n2 6\n1 100\n2 15\n10 11\n14 100\n''') == \"2\\n3\\n-1\"\nassert solution('''1\n2\n1\n''') == \"2\"\nassert solution('''1\n2\n1\n''') == \"-1\"\n'''\nassert solution('''2\n2\n1\n''') == \"2\"\nassert solution('''1\n2\n1\n''') == \"-1\"\n'''\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''3\n3 10\n6 3\n8 2\n1 4\n4 10\n4 1\n3 2\n2 6\n1 100\n2 15\n10 11\n14 100''') == \"2\\n3\\n-1\"\nassert solution('''5\n7 3\n1 3\n2 4\n3 4\n5 4\n4 3\n3 2\n2 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1''') == \"5\\n3\\n-1\"\nassert solution('''1\n1 1\n1 1\n1 1\n1 1''') == \"1\\n1\\n-1\"\nassert solution('''6\n7 3\n1 3\n2 4\n3 4\n5 4\n4 3\n3 2\n2 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1''') == \"5\\n3\\n-1\"\nassert solution('''2\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('3') == '2'\nassert solution('2 3') == '3'\nassert solution('2 3') == '-1'\nassert solution('1 5') == '-1'\nassert solution('1 100') == '-1'\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('5 2') == '4'\nassert solution('8 1') == '5'\nassert solution('10 2') == '9'\nassert solution('10 3') == '8'\nassert solution('100 1') == '99'\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"5 2\") == \"4\"\nassert solution(\"8 1\") == \"5\"\nassert solution(\"7 3\") == \"3\"\nassert solution(\"100 7\") == \"31\"\nassert solution(\"1000 6\") == \"101\""
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('5 2') == '4'\nassert solution('8 1') == '5'\nassert solution('8 3') == '5'\nassert solution('8 7') == '5'\nassert solution('8 0') == '1'\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('5 2') == '4'\nassert solution('8 1') == '5'\nassert solution('10 3') == '5'\nassert solution('10 10') == '9'\nassert solution('1000000000 1000000000') == '9'\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(input()) == \"\""
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('5 2') == '4'\nassert solution('8 1') == '5'\nassert solution('10 10') == '5'\nassert solution('6 1') == '4'\nassert solution('10 1000') == '4'\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"5 2\") == \"4\"\nassert solution(\"8 1\") == \"5\"\nassert solution(\"8 9\") == \"9\"\nassert solution(\"20 10\") == \"1\"\nassert solution(\"1 1\") == \"1\"\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"5 2\") == \"4\"\nassert solution(\"8 1\") == \"5\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"3 3\") == \"2\"\nassert solution(\"1000 1\") == \"999\"\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('5 2') == '4'\nassert solution('8 1') == '5'\nassert solution('10 1') == '4'\nassert solution('10 0') == '4'\nassert solution('1000000 9 1000000') == '1'\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1m 2m 3m') == '0'\nassert solution('1p 2p 3p') == '0'\nassert solution('1s 2s 3s') == '0'\nassert solution('9m 9m 9m') == '0'\nassert solution('3p 9m 2p') == '1'\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"1s 2s 3s\") == 0\nassert solution(\"9m 9m 9m\") == 0\nassert solution(\"3p 9m 2p\") == 1\nassert solution(\"3p 9m 2p\") == 1\nassert solution(\"9m 9m 9m\") == 0\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"1p 9m 2p\") == \"0\"\nassert solution(\"9m 9m 9m\") == \"0\"\nassert solution(\"3p 9m 2p\") == \"1\"\nassert solution(\"5p 5p 5p\") == \"0\"\nassert solution(\"5p 5p 5p\") == \"0\"\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"1s 2s 3s\") == 0\nassert solution(\"9m 9m 9m\") == 0\nassert solution(\"3p 9m 2p\") == 1\nassert solution(\"9m 2p\") == 1\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('2m 3p 2s 4m 1s 2s 4s') == 0\nassert solution('9m 9m 9m') == 0\nassert solution('3p 9m 2p') == 1\nassert solution('4p 7p 6p') == 0\nassert solution('5p 5s 9m 4p 1s 7p 7m 6p') == 1\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1p 2p 3p') == 0\nassert solution('9m 9m 9m') == 0\nassert solution('3p 9m 2p') == 1\nassert solution('1s 2s 3s') == 0\nassert solution('9m 9m 9m') == 0\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('1s 2s 3s') == '0'\nassert solution('9m 9m 9m') == '0'\nassert solution('3p 9m 2p') == '1'\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"1s 2s 3s\") == 0\nassert solution(\"9m 9m 9m\") == 0\nassert solution(\"3p 9m 2p\") == 1\nassert solution(\"9m 9m 9m\") == 0\nassert solution(\"9m 9m 9m\") == 0\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1s 2s 3s') == '0'\nassert solution('9m 9m 9m') == '0'\nassert solution('3p 9m 2p') == '1'\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\n    \"1s 2s 3s\"\n) == '0'\n\nassert solution(\n    \"9m 9m 9m\"\n) == '0'\n\nassert solution(\n    \"3p 9m 2p\"\n) == '1'"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1 2 1 1\\n1 2 2 2\\n1 0 0 1\\n') == '1'\nassert solution('2 2\\n2 1 1 1\\n1 2 2 2\\n1 0 0 0\\n') == '2'\nassert solution('2 2\\n2 1 1 1\\n1 2 2 2\\n1 0 0 0\\n') == '-1'\nassert solution('2 2\\n2 1 1 1\\n1 2 2 2\\n1 0 0 0\\n') == '-1'\nassert solution('2 2\\n2 1 1 1\\n1 2 2 2\\n1 0 0 0\\n') == '-1'\n\n\n\n\n\nSolution Explanation\n\n\"\"\""
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\n'''\n3\n2 2\n3 1 3 2\n1 2 2 2\n1 0 0 1\n''') == '1'\n\nassert solution(\n'''\n2\n10 10\n1 2 1 1\n5 5 6 5\n6 4 5 4\n2 1 2 0\n''') == '2'\n\nassert solution(\n'''\n2\n2 2\n2 1 1 1\n1 2 2 2\n1 0 0 0\n''') == '-1'\n\nassert solution(\n'''\n2\n2 2\n2 1 1 1\n1 2 2 2\n1 0 0 0\n''') == '-1'\n'''"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"3 2\\n3 1 3 2\\n1 2 2 2\\n1 0 0 1\\n\") == \"1\"\nassert solution(\"3 2\\n3 1 3 2\\n1 2 2 2\\n1 0 0 0\\n\") == \"2\"\nassert solution(\"2 2\\n2 1 1 1\\n1 2 2 2\\n1 0 0 0\\n\") == \"-1\"\nassert solution(\"10 10\\n1 2 1 1\\n5 5 6 5\\n6 4 5 4\\n2 1 2 0\\n\") == \"2\"\nassert solution(\"2 2\\n2 1 1 1\\n1 2 2 2\\n1 0 0 0\\n\") == \"-1\"\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('5 2') == '1'\nassert solution('10 10') == '2'\nassert solution('1 2 1 1') == '1'\nassert solution('5 5 6 5') == '2'\nassert solution('6 4 5 4') == '2'\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('2\\n3 2\\n3 1 3 2\\n1 2 2 2\\n1 0 0 1') == '1'\nassert solution('3\\n10 10\\n1 2 1 1\\n5 5 6 5\\n6 4 5 4\\n2 1 2 0\\n') == '2'\nassert solution('3\\n10 10\\n1 2 1 1\\n1 0 0 0\\n1 0 0 1\\n') == '-1'\n\n\n\"\"\""
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"3\\n3 2\\n3 1 3 2\\n1 2 2 2\\n1 0 0 1\\n\") == \"1\"\nassert solution(\"2\\n2 2\\n2 1 1 1\\n1 2 2 2\\n1 0 0 0\\n\") == \"2\"\nassert solution(\"3\\n10 10\\n1 2 1 1\\n5 5 6 5\\n6 4 5 4\\n2 1 2 0\\n\") == \"-1\""
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('1\\n1\\n') == '1'\nassert solution('2\\n1\\n') == '-1'\nassert solution('2\\n1\\n2\\n1\\n1\\n2\\n1\\n') == '2'\nassert solution('2\\n1\\n2\\n1\\n1\\n2\\n1\\n3\\n1\\n2\\n1\\n2\\n1\\n') == '1'\nassert solution('2\\n1\\n2\\n1\\n1\\n2\\n1\\n3\\n1\\n2\\n1\\n2\\n1\\n') == '-1'\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '2'\nassert solution('10') == '2'\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''2\n3 2\n3 1 3 2\n1 2 2 2\n1 0 0 1\n\n1 2 1 1\n5 5 6 5\n6 4 5 4\n2 1 2 0\n''') == '1'\n\nassert solution('''3\n10 10\n1 2 1 1\n5 5 6 5\n6 4 5 4\n2 1 2 0\n''') == '2'\n\nassert solution('''2\n2 2\n2 1 1 1\n1 2 2 2\n1 0 0 0\n\n1 2 1 1\n1 0 0 0\n''') == '-1'\n'''\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('2\\n3 2\\n3 1 3 2\\n1 2 2 2\\n1 0 0 1') == '1\\n'\nassert solution('2\\n3 2\\n3 1 3 2\\n1 2 2 2\\n1 0 0 0') == '2\\n'\nassert solution('2\\n3 2\\n3 1 3 2\\n1 2 2 2\\n1 0 0 1\\n1 0 0 0') == '-1\\n'\nassert solution('2\\n3 2\\n3 1 3 2\\n1 2 2 2\\n1 0 0 0') == '-1\\n'\nassert solution('2\\n3 2\\n3 1 3 2\\n1 2 2 2\\n1 0 0 0\\n1 0 0 0') == '-1\\n'\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('14') == '4 4'\nassert solution('2') == '0 2'\nassert solution('1') == '0 1'\nassert solution('1000') == '4 4'\nassert solution('1000') == '0 2'\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('14') == '4 4'\nassert solution('2') == '0 2'\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('14') == '4 4'\nassert solution('2') == '0 2'\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('4') == '0 4'\nassert solution('2') == '0 2'\nassert solution('14') == '4 4'\nassert solution('1234') == '0 0'\nassert solution('1345') == '1 2'\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''14''') == '0 4'\nassert solution('''2''') == '0 2'\n\n'''\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"14\") == \"4 4\"\nassert solution(\"2\") == \"0 2\"\nassert solution(\"12345\") == \"0 2\"\nassert solution(\"1234\") == \"0 2\"\nassert solution(\"123\") == \"0 2\"\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\n\nfrom sys import stdin, stdout"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('14') == '4 4'\nassert solution('2') == '0 2'\nassert solution('2') == '0 2'\nassert solution('1') == '0 0'\nassert solution('0') == '0 0'\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('14') == \"4 4\"\nassert solution('2') == \"0 2\"\n\"\"\"\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''14''') == '4 4'\nassert solution('''2''') == '0 2'\nassert solution('''14''') == '4 4'\nassert solution('''2''') == '0 2'\nassert solution('''12''') == '4 4'\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('5 2 3 12 15') == '39'\nassert solution('20 2 3 3 5') == '51'\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('5 2 3 12 15') == '39'\nassert solution('20 2 3 3 5') == '51'\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"5 2 3 12 15\") == \"39\"\nassert solution(\"20 2 3 3 5\") == \"51\"\nassert solution(\"2 3 2 3 1\") == \"5\"\nassert solution(\"20 2 3 3 5\") == \"51\"\nassert solution(\"2 3 2 3 1\") == \"5\"\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('10') == 7\nassert solution('GGGG') == 4\nassert solution('SSS') == 0\nassert solution('GGGGGG') == 4\nassert solution('G') == 0\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdin\n\n\"\"\"\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('10\\nGGGSGGGSGG') == '7'\nassert solution('4\\nSSS') == '0'\nassert solution('3\\nSSS') == '0'\nassert solution('3\\nGGGG') == '4'"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('10') == '7'\nassert solution('GGGG') == '0'\nassert solution('SSS') == '4'\nassert solution('GGGGGGG') == '7'\nassert solution('GGGGGGGSGG') == '7'\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"10\") == 7\nassert solution(\"GGGSGGGSGG\") == 7\nassert solution(\"G\") == 4\nassert solution(\"SSS\") == 0\nassert solution(\"GGGG\") == 4\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('10\\nGGGSGGGSGG\\n') == '7'\nassert solution('4\\nSSS\\n') == '4'\nassert solution('3\\nSSS\\n') == '0'\n\"\"\"\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"10\") == \"7\"\nassert solution(\"4\") == \"4\"\nassert solution(\"3\") == \"0\"\nassert solution(\"GGG\") == \"4\"\nassert solution(\"SSS\") == \"0\"\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(input()) == ''"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\n    '10'\n) == '7'\n\nassert solution(\n    '4'\n) == '4'\n\nassert solution(\n    '3'\n) == '0'\n\nassert solution(\n    'GGGG'\n) == '4'\n\nassert solution(\n    'GGG'\n) == '1'"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"10\") == \"7\"\nassert solution(\"4\") == \"4\"\nassert solution(\"3\") == \"0\"\nassert solution(\"GGG\") == \"4\"\nassert solution(\"SSS\") == \"0\"\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('6 2\\n5 3\\n0\\n0\\n0\\n2 2 1\\n1 4\\n1 5') == '5'\nassert solution('9 3\\n3 9 5\\n0\\n0\\n3 9 4 5\\n0\\n0\\n1 8\\n1 6\\n1 2\\n2 1 2') == '6'\nassert solution('3 3\\n1 2 3\\n1 2\\n1 3\\n1 1') == '-1'\n\n\n'''\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"6 2\\n5 3\\n0\\n0\\n0\\n2 2 1\\n1 4\\n1 5\\n0\\n0\\n0\\n2 2 1\\n1 4\\n1 5\\n\") == \"5\\n1 2 3 4 5\\n\"\nassert solution(\"9 3\\n3 9 5\\n0\\n0\\n3 9 4 5\\n0\\n0\\n1 8\\n1 6\\n1 2\\n2 1 2\\n\") == \"6\\n1 2 9 4 5 3\\n\"\nassert solution(\"3 3\\n1 2 3\\n1 2\\n1 3\\n1 1\\n\") == \"-1\\n\"\nassert solution(\"2 2\\n1 2\\n1 1\\n\") == \"-1\\n\"\nassert solution(\"3 3\\n1 2 3\\n1 2\\n1 3\\n1 1\\n\") == \"-1\\n\"\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"2 3\") == \"1 2 3\"\nassert solution(\"1 2 3\") == \"-1\"\nassert solution(\"1 2 3 4 5\") == \"5 1 2 4 3\"\nassert solution(\"1 2 3 4 5 6 7\") == \"6 1 2 3 4 5\"\nassert solution(\"1 1\") == \"-1\"\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''2 3\n0\n0\n0\n2 2 1\n1 4\n1 5''') == '5'\nassert solution('''3 3\n1 2 3\n1 2\n1 3\n1 1''') == '-1'\nassert solution('''3 3\n1 2 3\n1 2\n1 3\n1 1''') == '-1'\nassert solution('''2 3\n1 2 3\n1 2\n1 3\n1 1''') == '5'\nassert solution('''3 3\n1 2 3\n1 2\n1 3\n1 1''') == '-1'\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"2 3\\n1 2\\n1 3\\n1 1\") == \"-1\"\nassert solution(\"3 3\\n1 2 3\\n1 2\\n1 3\\n1 1\") == \"6\"\nassert solution(\"4 2\\n1 2 3 4\\n1 2\\n1 3\\n1 1\") == \"5\"\nassert solution(\"9 3\\n1 2 3 4 5 6 7 8 9\\n1 2\\n1 3\\n1 1\") == \"1 2 3 4 5 6 7 8 9\"\nassert solution(\"1 1\\n1 1\") == \"-1\"\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('4 3\\n1 2 3\\n1 2\\n1 3\\n1 1') == '6'\nassert solution('4 2\\n1 2 3\\n1 2\\n1 3\\n1 1') == '5'\nassert solution('1 1\\n1') == '-1'\nassert solution('2 2\\n1 1\\n1') == '-1'\nassert solution('3 3\\n1 2 3\\n1 2\\n1 3\\n1 1') == '6'\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"7 4\") == \"-1\"\nassert solution(\"2 3\") == \"5\"\nassert solution(\"3 3\") == \"6\"\nassert solution(\"9 3\") == \"-1\"\nassert solution(\"3 2\") == \"4\"\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"6 2\\n5 3\\n0\\n0\\n0\\n2 2 1\\n1 4\\n1 5\\n0\") == \"5\\n1 2 3 4 5\"\nassert solution(\"9 3\\n3 9 5\\n0\\n0\\n3 9 4 5\\n0\\n0\\n1 8\\n1 6\\n1 2\\n2 1 2\\n\") == \"6\\n1 2 9 4 5 3\"\nassert solution(\"3 3\\n1 2 3\\n1 2\\n1 3\\n1 1\\n\") == \"-\"\n\n-----\n\nfname = 'C:\\Users\\Lenovo\\Desktop\\polycarp-100-problems\\Algorithms_Notes\\Algorithms_Notes_Coursera_Coursera_Algorithms\\Coursera_Algorithms\\Coursera_Algorithms_Week_7\\A.py'\n\nimport sys\nimport os\nsys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), os.path.pardir)))\nimport itertools"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('3 2') == '-1'\nassert solution('3 2\\n1 2\\n1 2\\n1 3\\n1 1') == '5\\n1 2 3 4 5'\n\n\n-----Alternate Solutions (Shorter)-----\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdin"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"\"\"5 3\n3 2 1\"\"\") == \"3 2 1 5 4\"\nassert solution(\"\"\"5 1\n3\"\"\") == \"3 2 1 5 4\"\nassert solution(\"\"\"5 2\n3 4\"\"\") == \"-1\"\nassert solution(\"\"\"5 2\n3 3\"\"\") == \"-1\"\nassert solution(\"\"\"5 2\n1 4\"\"\") == \"1 4 2 3 5\"\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('1\\n3\\n') == '3 2 1'\nassert solution('2\\n1\\n') == '3 2 1'\nassert solution('3\\n1\\n') == '2 3 1'\nassert solution('4\\n1\\n') == '3 2 1'\nassert solution('5\\n1\\n') == '2 3 1'\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''5 3\n3 2 1''') == '3 2 1 5 4'\nassert solution('''5 1\n3''') == '3 2 1 5 4'\nassert solution('''5 2\n3 4''') == '-1'\nassert solution('''3 4\n1 2''') == '-1'\nassert solution('''4 3\n1 2 3 4''') == '1 2 3 4'\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''5 3\n3 2 1\n''') == '3 2 1 5 4'\nassert solution('''5 1\n3\n''') == '-1'\nassert solution('''5 2\n3 4\n''') == '-1'\nassert solution('''5 4\n3 4\n3\n''') == '3 4 3 2 1'\nassert solution('''5 3\n2 3 1\n''') == '3 2 1 5 4'\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('2 3\\n3 2 1') == '3 2 1 5 4'\nassert solution('4 3\\n2 3 1') == '-1'\nassert solution('3 3\\n3 2 1') == '3 2 1 5 4'\nassert solution('3 3\\n2 2 1') == '-1'\nassert solution('4 3\\n2 2 3') == '3 2 1 5 4'\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''5 3\n3 2 1\n''') == '3 2 1 5 4'\nassert solution('''5 1\n3\n''') == '3 2 1 5 4'\nassert solution('''5 2\n3 4\n''') == '-1'\nassert solution('''8 3\n4 3 2 1 6 7 8\n''') == '4 3 2 1 7 6 8'"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"3 2 1\") == \"3 2 1 5 4\"\nassert solution(\"3 2 1\") == \"3 2 1 5 4\"\nassert solution(\"2 3 1\") == \"-1\"\nassert solution(\"5 1\") == \"3 2 1 5 4\"\nassert solution(\"5 1\") == \"3 2 1 5 4\"\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''5 2''') == '3 2 1 5 4'\nassert solution('''3 2 1''') == '3 2 1 5 4'\nassert solution('''5 3''') == '-1'\nassert solution('''3 1''') == '3 2 1 5 4'\nassert solution('''4 1''') == '-1'\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1 7 3\\n') == 'YES'\nassert solution('10 10 0\\n') == 'YES'\nassert solution('1 -4 5\\n') == 'NO'\nassert solution('0 60 50\\n') == 'NO'\nassert solution('1 2 1\\n') == 'NO'\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdin.split()[2]\n\"\"\""
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1 7 3') == 'YES'\nassert solution('10 10 0') == 'YES'\nassert solution('1 -4 5') == 'NO'\nassert solution('0 60 50') == 'NO'\n\n\n\"\"\"\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1 7 3') == 'YES'\nassert solution('10 10 0') == 'YES'\nassert solution('1 -4 5') == 'NO'\nassert solution('0 60 50') == 'NO'\nassert solution('0 -4 5') == 'NO'\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(input(\"\")) == \"YES\"\nassert solution(input(\"\")) == \"NO\"\nassert solution(input(\"1 7 3\\n\")) == \"YES\"\nassert solution(input(\"1 -4 5\\n\")) == \"NO\"\nassert solution(input(\"0 60 50\\n\")) == \"NO\"\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(input()) == output\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(input()) == \"NO\"\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1 7 3') == 'YES'\nassert solution('10 10 0') == 'YES'\nassert solution('0 60 50') == 'NO'\nassert solution('-10 -4 5') == 'YES'\nassert solution('1 -4 5') == 'NO'\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"1 7 3\") == \"YES\"\nassert solution(\"10 10 0\") == \"YES\"\nassert solution(\"1 -4 5\") == \"NO\"\nassert solution(\"0 60 50\") == \"NO\"\nassert solution(\"0 60 50\") == \"NO\"\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(input()) == output\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('(())') == 1\nassert solution(')') == 0\nassert solution('(()(()))') == 1\nassert solution('(()()()())') == 1\nassert solution('(()()((()())))') == 0\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('3') == '1'\nassert solution('1') == '1'\nassert solution('4') == '0'\nassert solution('3') == '1'\nassert solution('0') == '1'\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('((())()()()((()()()())))') == 1\nassert solution('()()()()') == 1\nassert solution('()(((()))()())') == 1\nassert solution('((())()((()))()()())') == 1\nassert solution('()(()') == 0\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('3') == '1'\nassert solution('0') == '1'\nassert solution('0') == '1'\nassert solution('0') == '1'\nassert solution('1') == '0'\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\n\nfrom sys import stdin, stdout"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"1\"\nassert solution(\"()()()()\") == \"1\"\nassert solution(\"(()()())\") == \"1\"\nassert solution(\"((()()(()))(((()))))\") == \"1\"\nassert solution(\"(((()((((((())))))))))\") == \"1\"\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"((()))()(()\") == \"1\"\nassert solution(\"(()((()))(()))(())(()())\") == \"0\"\nassert solution(\"((()()()()()()()()()())()(()(())(())()))\") == \"1\"\nassert solution(\"((()()())()()())()()()(())((()()))()())\") == \"0\"\nassert solution(\"((()()()()()()()()()())()(()(())(())()))\") == \"1\"\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1\\n2\\n3\\n4') == '0'\nassert solution('0\\n0\\n0\\n0') == '1'\nassert solution('1\\n1\\n1\\n1') == '0'\nassert solution('2\\n2\\n2\\n2') == '0'\nassert solution('1\\n2\\n3\\n4') == '1'\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('3' == 3) == 1\nassert solution('0' == 0) == 1\nassert solution('1' == 1) == 1\nassert solution('2' == 0) == 0\nassert solution('3' == 1) == 0\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('10 5 3') == '3'\nassert solution('10 5 7') == '5'\nassert solution('10 5 12') == '3'\n\n\n\"\"\"\n\nimport sys\nfrom typing import List\n\nsys.setrecursionlimit(10 ** 9)\n\nVec = List[int]\nVecVec = List[Vec]\n\n\nclass Solution:\n    def numberOfStandings(self, t: int, k: int, n: int) -> int:\n        return self.numberOfStandingsRecursive(t, k, n)\n\n    def numberOfStandingsRecursive(self, t: int, k: int, n: int) -> int:\n        \"\"\"\n        t: time to finish game\n        k: number of spectators standing at time t\n        n: number of spectators\n        \"\"\"\n        if k == 0:\n            return n\n\n        if t == 0:\n            return 0\n\n        return self.numberOfStandingsRecursive(t - 1, k - 1, n) + n - k + 1\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('10 5 3') == '3'\nassert solution('10 5 7') == '5'\nassert solution('10 5 12') == '3'\nassert solution('10 5 11') == '3'\nassert solution('10 9 15') == '4'\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"10 5 3\") == \"3\"\nassert solution(\"10 5 7\") == \"5\"\nassert solution(\"10 5 12\") == \"3\"\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\""
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('10 5 3') == '3'\nassert solution('10 5 7') == '5'\nassert solution('10 5 12') == '3'\nassert solution('100 200 100') == '0'\nassert solution('99 100 1') == '1'\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('10 5 3') == '3'\nassert solution('10 5 7') == '5'\nassert solution('10 5 12') == '3'\nassert solution('10 5 12') == '3'\nassert solution('10 5 7') == '5'\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('10 5 3') == '3'\nassert solution('10 5 7') == '5'\nassert solution('10 5 12') == '3'\nassert solution('1 2 3 4 5 6 7 8 9 10') == '1'\nassert solution('1 2 2 1') == '1'\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"10 5 3\") == \"3\"\nassert solution(\"10 5 7\") == \"5\"\nassert solution(\"10 5 12\") == \"3\"\nassert solution(\"10 5 1\") == \"3\"\nassert solution(\"10 5 1\") == \"3\"\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('10 5 3') == '3'\nassert solution('10 5 7') == '5'\nassert solution('10 5 12') == '3'\nassert solution('10 10 10') == '0'\nassert solution('10 1000000000') == '0'\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"cab\") == \"abd\"\nassert solution(\"acdb\") == \"abdc\""
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('cab') == 'abc'\nassert solution('acdb') == 'abdc'\nassert solution('cabdf') == 'acbd'\nassert solution('cabdfg') == 'acbd'\nassert solution('cabdfgh') == 'acbd'\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('cab') == 'abc'\nassert solution('acdb') == 'abdc'\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"cab\") == \"abc\"\nassert solution(\"acdb\") == \"abdc\"\nassert solution(\"wzdsxl\") == \"zxlwzd\"\nassert solution(\"dw\") == \"w\"\nassert solution(\"zxcvb\") == \"abc\"\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(input()) == output()\n\n\"\"\""
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdin.strip()\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdin[1:]+stdin[0]\nprint(solution(stdin))\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdin[::-1]\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('ab') == 'a'\nassert solution('abcd') == 'abcd'\nassert solution('a') == 'a'\nassert solution('abc') == 'abc'\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"cab\") == \"abc\"\nassert solution(\"acdb\") == \"abdc\"\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n276\n277\n278\n279\n280\n281\n282\n283\n284\n285\n286\n287\n288\n289\n290\n291\n292\n293\n294\n295\n296\n297\n298\n299\n300\n301\n302\n303\n304\n305\n306\n307\n308\n309\n310\n311\n312\n313\n314\n315\n316\n317\n318\n319\n320\n321\n322\n323\n324\n325\n326\n327\n328\n329\n330\n331\n332\n333\n334\n335\n336\n337\n338\n339\n340\n341\n342\n343\n344\n345\n346\n347\n348\n349\n350\n351\n352\n353\n354\n355\n356\n357\n358\n359\n360\n361\n362\n363\n364\n365\n366\n367\n368\n369\n370\n371\n372\n373\n374\n375\n376\n377\n378\n379\n380\n381\n382\n383\n384\n385\n386\n387\n388\n389\n390\n391\n392\n393\n394\n395\n396\n397\n398\n399\n400\n401\n402\n403\n404\n405\n406\n407\n408\n409\n410\n411\n412\n413\n414\n415\n416\n417\n418\n419\n420\n421\n422\n423\n424\n425\n426\n427\n428\n429\n430\n431\n432\n433\n434\n435\n436\n437\n438\n439\n440\n441\n442\n443\n444\n445\n446\n447\n448\n449\n450\n451\n452\n453\n454\n455\n456\n457\n458\n459\n460\n461\n462\n463\n464\n465\n466\n467\n468\n469\n470\n471\n472\n473\n474\n475\n476\n477\n478\n479\n480\n481\n482\n483\n484\n485\n486\n487\n488\n489\n490\n491\n492\n493\n494\n495\n496\n497\n498\n499\n500\n501\n502\n503\n504\n505\n506\n507\n508\n509\n510\n511\n512\n513\n514\n515\n516\n517\n518\n519\n520\n521\n522\n523\n524\n525\n526\n527\n528\n529\n530\n531\n532\n533\n534\n535\n536\n537\n538\n539\n540\n541\n542\n543\n544\n545\n546\n547\n548\n549\n550\n551\n552\n553\n554\n555\n556\n557\n558\n559\n560\n561\n562\n563\n564\n565\n566\n567\n568\n569\n570\n571\n572\n573"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''\\\n6\n3\n0 0\n1 1\n1 2\n2\n1 0\n1000 3\n4\n10 1\n15 2\n10 2\n15 2\n1\n765 432\n2\n4 4\n4 3\n5\n0 0\n1 0\n1 0\n1 0\n1 0\n1 0''') == 'NO'\n\nassert solution('''\\\n5\n3\n0 0\n1 1\n1 2\n2\n1 0\n1000 3\n4\n10 1\n15 2\n10 2\n15 2\n1\n765 432\n2\n4 4\n4 3\n5\n0 0\n1 0\n1 0\n1 0\n1 0\n1 0''') == 'YES'\n\nassert solution('''\\\n2\n3\n1 2\n1 1\n1 1''') == 'NO'\n\nassert solution('''\\\n3\n1 2\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1''') == 'NO'\n\nassert solution('''\\\n2\n3\n1 2\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''1\n    0 0\n    1 1\n    1 2\n    2''') == 'NO'\nassert solution('''1\n    0 0\n    1 1\n    1 2\n    2''') == 'YES'\nassert solution('''1\n    0 0\n    1 1\n    1 2\n    2''') == 'NO'\nassert solution('''1\n    0 0\n    1 1\n    1 2\n    2''') == 'YES'\nassert solution('''1\n    0 0\n    1 1\n    1 2\n    2''') == 'NO'\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''6\n3\n0 0\n1 1\n1 2\n2\n1 0\n1000 3\n4\n10 1\n15 2\n10 2\n15 2\n1\n765 432\n2\n4 4\n4 3\n5\n0 0\n1 0\n1 0\n1 0\n1 0\n1 0''') == 'NO\\nNO\\nNO\\nNO\\nNO\\nYES'\nassert solution('''1\n2\n1 1\n1 0\n1 1''') == 'NO\\nYES'\nassert solution('''10\n5\n9 8\n2 0\n10 9\n9 9\n1 0\n1 0\n2 1\n1 1\n3 9\n2 8\n2 3\n2 0\n1 3\n1 0\n3 3\n2 1\n1 0''') == 'NO\\nNO\\nYES\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nYES\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nYES\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('6\\n3\\n0 0\\n1 1\\n1 2\\n2\\n1 0\\n1000 3\\n4\\n10 1\\n15 2\\n10 2\\n15 2\\n1\\n765 432\\n2\\n4 4\\n4 3\\n5\\n0 0\\n1 0\\n1 0\\n1 0\\n1 0\\n') == 'NO\\n'\nassert solution('6\\n3\\n0 0\\n1 1\\n1 2\\n2\\n1 0\\n1000 3\\n4\\n10 1\\n15 2\\n10 2\\n15 2\\n1\\n765 432\\n2\\n4 4\\n4 3\\n5\\n0 0\\n1 0\\n1 0\\n1 0\\n1 0\\n') == 'NO\\n'\nassert solution('6\\n3\\n0 0\\n1 1\\n1 2\\n2\\n1 0\\n1000 3\\n4\\n10 1\\n15 2\\n10 2\\n15 2\\n1\\n765 432\\n2\\n4 4\\n4 3\\n5\\n0 0\\n1 0\\n1 0\\n1 0\\n1 0\\n') == 'NO\\n'\nassert solution('6\\n3\\n0 0\\n1 1\\n1 2\\n2\\n1 0\\n1000 3\\n4\\n10 1\\n15 2\\n10 2\\n15 2\\n1\\n765 432\\n2\\n4 4\\n4 3\\n5\\n0 0\\n1 0\\n1 0\\n1 0\\n1 0\\n') == 'NO\\n'\nassert solution('6\\n3\\n0 0\\n1 1\\n1 2\\n2\\n1 0\\n1000 3\\n4\\n10 1\\n15 2\\n10 2\\n15 2\\n1\\n765 432\\n2\\n4 4\\n4 3\\n5\\n0 0\\n1 0\\n1 0\\n1 0\\n1 0\\n') == 'NO\\n'\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''0 0\n1 1\n1 2\n2\n1 0\n1000 3\n4\n10 1\n15 2\n10 2\n15 2\n1\n765 432\n2\n4 4\n4 3\n5\n0 0\n1 0\n1 0\n1 0\n1 0\n1 0\n''') == \"YES\"\nassert solution('''3\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\n\"2\\n\" +\n\"1\\n\" +\n\"0 0\\n\" +\n\"1 1\\n\" +\n\"1 2\\n\" +\n\"2\\n\" +\n\"1 0\\n\" +\n\"1000 3\\n\" +\n\"4\\n\" +\n\"10 1\\n\" +\n\"15 2\\n\" +\n\"10 2\\n\" +\n\"15 2\\n\" +\n\"1\\n\" +\n\"765 432\\n\" +\n\"2\\n\" +\n\"4 4\\n\" +\n\"4 3\\n\" +\n\"5\\n\" +\n\"0 0\\n\" +\n\"1 0\\n\" +\n\"1 0\\n\" +\n\"1 0\\n\" +\n\"1 0\\n\"\n) == \"NO\"\n\nassert solution(\n\"2\\n\" +\n\"1\\n\" +\n\"0 0\\n\" +\n\"1 1\\n\" +\n\"1 2\\n\" +\n\"2\\n\" +\n\"1 0\\n\" +\n\"1000 3\\n\" +\n\"4\\n\" +\n\"10 1\\n\" +\n\"15 2\\n\" +\n\"10 2\\n\" +\n\"15 2\\n\" +\n\"1\\n\" +\n\"765 432\\n\" +\n\"2\\n\" +\n\"4 4\\n\" +\n\"4 3\\n\" +\n\"5\\n\" +\n\"0 0\\n\" +\n\"1 0\\n\" +\n\"1 0\\n\" +\n\"1 0\\n\" +\n\"1 0\\n\"\n) == \"NO\"\n\nassert solution(\n\"2\\n\" +\n\"1\\n\" +\n\"0 0\\n\" +\n\"1 1\\n\" +\n\"1 2\\n\" +\n\"2\\n\" +\n\"1 0\\n\" +\n\"1000 3\\n\" +\n\"4\\n\" +\n\"10 1\\n\" +\n\"15 2\\n\" +\n\"10 2\\n\" +\n\"15 2\\n\" +\n\"1\\n\" +\n\"765 432\\n\" +\n\"2\\n\" +\n\"4 4\\n\" +\n\"4 3\\n\" +\n\"5\\n\" +\n\"0 0\\n\" +\n\"1 0\\n\" +\n\"1 0\\n\" +\n\"1 0\\n\" +\n\"1 0\\n\"\n) == \"NO\"\n\nassert solution(\n\"2\\n\" +\n\"1\\n\" +\n\"0 0\\n\" +\n\"1 1\\n\" +\n\"1 2\\n\" +\n\"2\\n\" +\n\"1 0\\n\" +\n\"1000 3\\n\" +\n\"4\\n\" +\n\"10 1\\n\" +\n\"15 2\\n\" +\n\"10 2\\n\" +\n\"15 2\\n\" +\n\"1\\n\" +\n\"765 432\\n\" +\n\"2\\n\" +\n\"4 4\\n\" +\n\"4 3\\n\" +\n\"5\\n\" +\n\"0 0\\n\" +\n\"1 0\\n\" +\n\"1 0\\n\" +\n\"1 0\\n\" +\n\"1 0\\n\"\n) == \"YES\"\n\nassert solution(\n\"2\\n\" +\n\"1\\n\" +\n\"0 0\\n\" +\n\"1 1\\n\" +\n\"1 2\\n\" +\n\"2\\n\" +\n\"1 0\\n\" +\n\"1000 3\\n\" +\n\"4\\n\" +\n\"10 1\\n\" +\n\"15 2\\n\" +\n\"10 2\\n\" +\n\"15 2\\n\" +\n\"1\\n\" +\n\"765 432\\n\" +\n\"2\\n\" +\n\"4 4\\n\" +\n\"4 3\\n\" +\n\"5\\n\" +\n\"0 0\\n\" +\n\"1 0\\n\" +\n\"1 0\\n\" +\n\"1 0\\n\" +\n\"1 0\\n\"\n) == \"NO\""
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n\n'''\n\nn = int(input())"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('05:39') == '11'\nassert solution('13:31') == '0'\nassert solution('23:59') == '1'\n\n'''\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('05:39') == '11'\nassert solution('13:31') == '0'\nassert solution('23:59') == '1'\nassert solution('13:35') == '0'\nassert solution('13:55') == '1'\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('05:39') == '11'\nassert solution('13:31') == '0'\nassert solution('23:59') == '1'\nassert solution('01:59') == '60'\nassert solution('23:59') == '1'\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"05:39\") == \"11\"\nassert solution(\"13:31\") == \"0\"\nassert solution(\"23:59\") == \"1\"\nassert solution(\"23:59\") == \"1\"\nassert solution(\"00:00\") == \"0\"\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"05:39\") == \"11\"\nassert solution(\"13:31\") == \"0\"\nassert solution(\"23:59\") == \"1\"\nassert solution(\"23:59\") == \"0\"\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('23:59') == 0\nassert solution('05:39') == 11\nassert solution('13:31') == 0\nassert solution('23:59') == 1\nassert solution('23:59') == 1\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('05:39') == '11'\nassert solution('13:31') == '0'\nassert solution('23:59') == '1'"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('05:39') == '11'\nassert solution('13:31') == '0'\nassert solution('23:59') == '1'\nassert solution('23:59') == '1'\n\n\n\"\"\""
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"05:39\") == \"11\"\nassert solution(\"13:31\") == \"0\"\nassert solution(\"23:59\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('05:39') == '11'\nassert solution('13:31') == '0'\nassert solution('23:59') == '1'\nassert solution('05:50') == '0'\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('5\\n4 5 1 3 2') == '3'\nassert solution('7\\n1 6 5 3 4 7 2') == '6'\nassert solution('6\\n6 5 4 3 2 1') == '5'\nassert solution('6\\n6 5 4 3 2 1') == '5'\nassert solution('6\\n6 5 4 3 2 1') == '5'\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"5\\n4 5 1 3 2\\n\") == \"3\"\nassert solution(\"7\\n1 6 5 3 4 7 2\\n\") == \"6\"\nassert solution(\"6\\n6 5 4 3 2 1\\n\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''5\n4 5 1 3 2''') == '3'\nassert solution('''7\n1 6 5 3 4 7 2''') == '6'\nassert solution('''6\n6 5 4 3 2 1''') == '5'\nassert solution('''6\n6 5 4 3 2 1''') == '5'\nassert solution('''7\n1 6 5 3 4 7 2''') == '6'\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\n\"\"\"\n5\n4 5 1 3 2\n\"\"\") == \"3\"\nassert solution(\n\"\"\"\n7\n1 6 5 3 4 7 2\n\"\"\") == \"6\"\nassert solution(\n\"\"\"\n6\n6 5 4 3 2 1\n\"\"\") == \"5\"\n\n\n\"\"\"\nhttps://www.codewars.com/kata/whats-the-maximum-integer-you-can-swap-to-maximize-your-maximum-distance-and-still-keep-your-minimum-distance\n\n##Problem\n\nNicholas has an array a that contains n distinct integers from 1 to n. In other words, Nicholas has a permutation of size n.\n\nNicholas wants the minimum element (integer 1) and the maximum element (integer n) to be as far as possible from each other. He wants to perform exactly one swap in order to maximize the distance between the minimum and the maximum elements. The distance between two elements is considered to be equal to the absolute difference between their positions.\n\nFor example, the minimum element is 5 and the maximum element is 3.\n\nIn the array {1, 2, 3, 4, 5, 6, 7}, the minimum element is 1 and the maximum element is 7.\n\n\n-----Input-----\n\nThe first line of the input contains a single integer n (2 \u2264 n \u2264 100)\u00a0\u2014 the size of the permutation.\n\nThe second line of the input contains n distinct integers a_1, a_2,..., a_{n} (1 \u2264 a_{i} \u2264 n), where a_{i} is equal to the element at the i-th position.\n\n\n-----Output-----\n\nPrint a single integer\u00a0\u2014 the maximum possible distance between the minimum and the maximum elements Nicholas can achieve by performing exactly one swap.\n\n\n-----Examples-----\nInput\n5\n4 5 1 3 2\n\nOutput\n3\n\nInput\n7\n1 6 5 3 4 7 2\n\nOutput\n6\n\nInput\n6\n6 5 4 3 2 1\n\nOutput\n5\n\n\n-----Note-----\n\nIn the first sample, one may obtain the optimal answer by swapping elements 1 and 2.\n\nIn the second sample, the minimum and the maximum elements will be located in the opposite ends of the array if we swap 7 and 2.\n\nIn the third sample, the distance between the minimum and the maximum elements is already maximum possible, so we just perform some unnecessary swap, for example, one can swap 5 and 2.\n\"\"\""
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1\\n1') == '0'\nassert solution('2\\n2') == '0'\nassert solution('3\\n3') == '0'\nassert solution('4\\n4') == '0'\nassert solution('5\\n5') == '0'\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"\n5\n4 5 1 3 2\n\"\"\") == \"3\"\nassert solution(\n\"\"\"\n7\n1 6 5 3 4 7 2\n\"\"\") == \"6\"\nassert solution(\n\"\"\"\n6\n6 5 4 3 2 1\n\"\"\") == \"5\"\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''5''') == '3'\nassert solution('''6''') == '6'\nassert solution('''7''') == '5'\nassert solution('''8''') == '6'\nassert solution('''9''') == '8'\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"5\") == \"\"\nassert solution(\"4 5 1 3 2\") == \"\"\nassert solution(\"6 5 4 3 2 1\") == \"\"\nassert solution(\"7 6 5 4 3 2 1\") == \"\"\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''5''') == ''\nassert solution('''4 5 1 3 2''') == '3'\nassert solution('''6 5 4 3 2 1''') == '6'\nassert solution('''7 5 4 3 2 1''') == '5'\nassert solution('''8 7 6 5 4 3 2 1''') == '5'\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('oXoxoXo') == 'TAK'\nassert solution('bod') == 'NIE'\nassert solution('ER') == 'NIE'\nassert solution('bobobobobobobbobobobobobobobbobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobobob\nassert solution('ccccccccccc') == 'NIE'\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('oXoxoXo') == 'TAK'\nassert solution('bod') == 'NIE'\nassert solution('ER') == 'NIE'\nassert solution('oXoxoXo') == 'TAK'\nassert solution('bod') == 'NIE'\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('bod') == 'NIE'\nassert solution('oXoxoXo') == 'TAK'\nassert solution('ER') == 'NIE'\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(oXoxoXo) == \"TAK\"\nassert solution(bod) == \"NIE\"\nassert solution(ER) == \"NIE\""
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"oXoxoXo\") == \"TAK\"\nassert solution(\"bod\") == \"NIE\"\nassert solution(\"ER\") == \"NIE\"\nassert solution(\"bXbo\") == \"NIE\"\nassert solution(\"oXoXo\") == \"TAK\"\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('oXoxoXo') == 'TAK'\nassert solution('bod') == 'NIE'\nassert solution('ER') == 'NIE'"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('oXoxoXo') == \"TAK\"\nassert solution('bod') == \"NIE\"\nassert solution('ER') == \"NIE\"\nassert solution('teet') == \"NIE\"\nassert solution('rEe') == \"NIE\"\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('oXoxoXo') == 'TAK'\nassert solution('bod') == 'NIE'\nassert solution('ER') == 'NIE'\nassert solution('YOXO') == 'NIE'\n\n\n\n\"\"\"\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"oXoxoXo\") == \"TAK\"\nassert solution(\"bod\") == \"NIE\"\nassert solution(\"ER\") == \"NIE\"\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('oXoxoXo') == \"TAK\"\nassert solution('bod') == \"NIE\"\nassert solution('ER') == \"NIE\"\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\""
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('123', '222') == '213'\nassert solution('123', '123') == '123'\nassert solution('123', '12345') == '12345'\nassert solution('123', '123456789') == '123456789'\nassert solution('12345', '123456789') == '123456789'\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"123\") == \"213\"\nassert solution(\"123456789\") == \"978123456789\"\nassert solution(\"123456789012345678901234567890\") == \"978123456789012345678901234567890\"\nassert solution(\"123456789012345678901234567890\") == \"978123456789012345678901234567890\"\nassert solution(\"987654321\") == \"987654321\"\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''123\n222''') == '213'\nassert solution('''3921\n10000''') == '9321'\nassert solution('''4940\n5000''') == '4940'\nassert solution('''12345\n1234''') == '45123'\nassert solution('''69\n9999999''') == '99999999'\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"1234\") == \"1234\"\nassert solution(\"1234567\") == \"7135\"\nassert solution(\"234567\") == \"234567\"\nassert solution(\"00000\") == \"0000\"\nassert solution(\"0123\") == \"0232\"\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('123', '222') == '213'\nassert solution('3921', '10000') == '9321'\nassert solution('4940', '5000') == '4940'\nprint(solution(stdin))"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == '123'\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('123') == '321'\nassert solution('123456789') == '987654321'\nassert solution('99') == '99'\nassert solution('999') == '9999'\nassert solution('123') == '321'\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"1 2 3 4 5\") == \"135\"\nassert solution(\"1234\") == \"1234\"\nassert solution(\"12345\") == \"12345\"\nassert solution(\"1234 567\") == \"1234567\"\nassert solution(\"1234 567 987\") == \"123456789\"\n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''\nX...\nO.X..\nX.X.X\nO.OX.\nXO..X\nO....\nOX...\nX...O\n.X..O\nXO.O.\n''') == 'YES'\n\nassert solution('''\nX..X\nO.O\nX.X\nO.OX\nX.XX\nO....\nOX...\nX...O\n.X..O\nXO.O.\n''') == 'NO'\n\nassert solution('''\nX...\nO.X..\nX.X.X\nO.OX.\nXO..X\nO....\nOX...\nX...O\n.X..O\nXO.O.\n''') == 'YES'\n\nassert solution('''\nX..X\nO.O\nX.X\nO.OX\nX.XX\nO....\nOX...\nX...O\n.X..O\nXO.O.\n''') == 'NO'\n\nassert solution('''\nX..X\nO.O\nX.X\nO.OX\nX.XX\nO.O.O\nOX...\nX...O\n.X..O\nXO.O.\n''') == 'NO'"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('XX.XX.....\\n.....OOOO.\\n..........\\n..........\\n..........\\n..........\\n..........\\n..........\\n..........') == 'YES'\nassert solution('XXOXX.....\\nOO.O......\\n..........\\n..........\\n..........\\n..........\\n..........\\n..........\\n') == 'NO'\nassert solution('..X....X..\\n........X..\\nX.....X..\\n........X..\\n........X..\\n........X..\\n........X..\\n........X..\\n........X..') == 'YES'\nassert solution('..X.X.X..\\n.......X..\\n.......X..\\n.......X..\\n.......X..\\n.......X..\\n.......X..\\n.......X..\\n.......X..') == 'NO'"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\n    '''\n    XX.XX.....\n    .....OOOO.\n    ..........\n    ..........\n    ..........\n    ..........\n    ..........\n    ..........\n    ..........\n    '''\n    ) == 'YES'\n\nassert solution(\n    '''\n    XXOXX.....\n    OO.O......\n    ..........\n    ..........\n    ..........\n    ..........\n    ..........\n    ..........\n    ..........\n    '''\n    ) == 'NO'\n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''\nXXXXXX....\n..OOOO...O\n...OOOOO.O\n...OO....O\n...OO.....\n...OO.....\n...OO.....\n...OO.....\n...OO.....\n...OO.....\n''') == 'YES'\nassert solution('''\nXXXXXXX....\n..OOOOX...O\n...OOOOO.O\n...O....OO\n...O.....OO\n...O.....OO\n...O.....OO\n...O.....OO\n...O.....OO\n...O.....OO\n''') == 'NO'\nassert solution('''\nX..X....XX\n....XO.X...\nX.....OO....\n....O..X...O\n...X.O..X..X\nX...X.O..X..\nX...X.O..X..\nX...X.O..X..\nX...X.O..X..\n''') == 'YES'\nassert solution('''\nX..X....XX\n....XO.X...\nX.....OO....\n....O..X...O\n...X.O..X..X\nX...X.O..X..\nX...X.O..X..\nX...X.O..X..\nX...X.O..X..\n''') == 'NO'\nassert solution('''\nX.X..XX.X..\nXOOO.OOO.X..\nO.XO.X.O..X\n.O.X.X.O..X\nX.X.X.X.X..\nX.X.X.O..X.\nX.X.O..X.X.\nX..X..X..X..\n''') == 'NO'\n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('XX.XX.....') == 'YES'\nassert solution('XXOXX.....') == 'NO'\nassert solution('XXO.X.....') == 'YES'\nassert solution('XOOX.....') == 'NO'\nassert solution('XOXO..X..') == 'YES'\n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''\nXXXX....\n...O...O\n.OX.OX..\n.X.X.X..\nOX....OO.\n.X.X.X..\n.X.X.X..\nOX....OO.\n.X.X.X..\n''') == 'NO'\nassert solution('''\nXX.XX.....\n...OOOO.\n..........\n..........\n..........\n..........\n..........\n..........\n..........\n..........\n''') == 'YES'\nassert solution('''\nO.O.OOO...\n.XO....OO\n....XXO.O\n...OXX.XO\n.OXO.OXOO.\n.XO.XOXX.\n.XO.O.XX.\nOXOO.OOOXX\n.XOOXOOOXX\n''') == 'YES'\nassert solution('''\n..X.X..\nX..O..\n..X.X..\n..X.X..\nX...X.X\n..X.X..\nX..O..\n..X.X..\nX...X.X\n''') == 'NO'\nassert solution('''\n..X.X..\nX..O..\n..X.X..\n..X.X..\nX...X.X\n..X.X..\nX..O..\n..X.X..\nX...X.X\n''') == 'NO'\n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('XX.XX.....\\n.....OOOO.\\n..........\\n..........\\n..........\\n..........\\n..........\\n..........\\n..........') == 'YES'\nassert solution('XXOXX.....\\nOO.O......\\n..........\\n..........\\n..........\\n..........\\n..........\\n..........\\n') == 'NO'\n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''XXXXXXXX\n.XOOXOOOX.\n.XOOOXOOX.\n.XOOOXOOX.\n.XOOOXOOX.\n.XOOOXOOX.\n.XOOOXOOX.\n.XOOOXOOX.\n.XOOOXOOX.\n.XXXXXXXX''') == 'YES'\nassert solution('''XXXXXXXX\n.OXX.XOXX.\n..O..O..O\n.XOOOXOOX\n.XOOOXOOX\n.XOOOXOOX\n.XOOOXOOX\n.XOOOXOOX\n.XOOOXOOX\n.XXXXXXXX''') == 'YES'\nassert solution('''XXXXXXXX\n.XOXOXOXOX\nXOOOOXOXO\n.XOOOXOOX\n.XOOOXOOX\n.XOOOXOOX\n.XOOOXOOX\n.XOOOXOOX\n.XOOOXOOX\n.XXXXXXXX''') == 'NO'\nassert solution('''XXXXXXXX\n.XOXOXOXOX\nXOOOOXOXO\n.XOOOXOOX\n.XOOOXOOX\n.XOOOXOOX\n.XOOOXOOX\n.XOOOXOOX\n.XOOOXOOX\n.XXXXXXXX''') == 'NO'\nassert solution('''XXXXXXXX\n.XOXOXOXOX\nXOOOOXOXO\n.XOOOXOOX\n.XOOOXOOX\n.XOOOXOOX\n.XOOOXOOX\n.XOOOXOOX\n.XOOOXOOX\n.XXXXXXXX''') == 'NO'\n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('XX.XX.....') == 'YES'\nassert solution('XXOXX.....') == 'NO'\nassert solution('OO.O......') == 'YES'\nassert solution('...OOOO.') == 'YES'\nassert solution('.OOOOOO.') == 'YES'\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('2 1') == '1 0'\nassert solution('3 2') == '1 0 0'\nassert solution('2 5') == '-1'"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''1 1\n''') == '1 0'\nassert solution('''2 2\n1 1\n''') == '1 0'\nassert solution('''3 3\n1 1 1\n1 1 1\n1 1 1\n''') == '1 0 0'\nassert solution('''3 3\n1 1 2\n1 1 1\n1 1 1\n''') == '1 0 0'\nassert solution('''4 4\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n''') == '1 0 0 0'\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"2 1\") == \"1 0\\n0 0\"\nassert solution(\"3 2\") == \"1 0 0\\n0 1 0\\n0 0 0\"\nassert solution(\"2 5\") == \"-1\"\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('2 1') == '1 0'\nassert solution('3 2') == '1 0 0'\nassert solution('2 5') == '-1'\nassert solution('2 10') == '-1'\nassert solution('3 5') == '-1'\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"2 1\") == \"1 0\\n0 0\"\nassert solution(\"3 2\") == \"1 0 0\\n0 1 0\\n0 0 0\"\nassert solution(\"2 5\") == \"-1\"\nassert solution(\"3 3\") == \"1 0 0\\n0 1 0\\n0 0 1\"\nassert solution(\"2 5\") == \"-1\"\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1 2') == '1 0'\nassert solution('3 2') == '1 0 0'\nassert solution('3 4') == '-1'\nassert solution('2 5') == '-1'\nassert solution('4 3') == '-1'\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''2 1''') == '''1 0'''\nassert solution('''3 2''') == '''1 0 0'''\nassert solution('''3 5''') == '''1 0 0 0 0'''\nassert solution('''5 5''') == '''-1'''\nassert solution('''6 2''') == '''-1'''"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"2 1\") == \"1 0\"\nassert solution(\"3 2\") == \"-1\"\nassert solution(\"2 5\") == \"-1\""
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1 2') == '1 0'\nassert solution('2 1') == '1 0'\nassert solution('3 2') == '1 0 0'\nassert solution('2 5') == '-1'\nassert solution('2 4') == '1 0 1'\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''2 1''') == '1 0'\nassert solution('''3 2''') == '1 0 0'\nassert solution('''2 5''') == '-1'\nassert solution('''4 5''') == '-1'\nassert solution('''1 1''') == '1 0'\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(input()) == output()\n\"\"\"\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\n'''1.1 3.4 2.5'''\n) == 'z^y^x'\n\nassert solution(\n'''2.0 2.0 2.0'''\n) == 'x^y^z'\n\nassert solution(\n'''1.9 1.8 1.7'''\n) == '(x^y)^z'\n\nassert solution(\n'''1.1 1.2 1.3'''\n) == 'x^y'\n\nassert solution(\n'''1.1 1.2 1.3'''\n) == 'x'"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"1.1 3.4 2.5\") == \"z^y^x\"\nassert solution(\"2.0 2.0 2.0\") == \"x^y^z\"\nassert solution(\"1.9 1.8 1.7\") == \"(x^y)^z\"\n\n\n\n-----Note-----\n\nThere is no blank line in the input. \n\nNote that the implementation uses exact binary search (with if-else statements) so the time limit is exceeded for some test cases. \n\nThis question is a followup to [Find the Position of a Target Element](https://leetcode.com/problems/find-the-position-of-a-target-number/) problem. \n\n\"\"\"\n\n\n\n\"\"\"\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n "
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1.1 3.4 2.5\\n') == 'z^y^x'\nassert solution('2.0 2.0 2.0\\n') == '(x^y)^z'\nassert solution('1.9 1.8 1.7\\n') == 'x^y^z'\nassert solution('1.0 0.0 0.0\\n') == '0.0'\n\n\n\"\"\"\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\n\n\"\"\"\nThe max of each is the same, so the max is the sum of those three numbers. So the sum is the max of the three numbers.\n\"\"\"\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"1.1 3.4 2.5\"\"\") == \"z^y^x\"\nassert solution(\n\"\"\"2.0 2.0 2.0\"\"\") == \"(x^y)^z\"\nassert solution(\n\"\"\"1.9 1.8 1.7\"\"\") == \"x^y^z\"\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"1.1 3.4 2.5\") == \"z^y^x\"\nassert solution(\"2.0 2.0 2.0\") == \"(x^y)^z\"\nassert solution(\"1.9 1.8 1.7\") == \"x^y^z\"\nassert solution(\"2.1 2.2 2.3\") == \"(x^y)^z\"\nassert solution(\"2.1 2.2 2.3\") == \"(x^y)^z\"\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1.1 3.4 2.5') == 'z^y^x'\nassert solution('2.0 2.0 2.0') == 'x^y^z'\nassert solution('1.9 1.8 1.7') == '(x^y)^z'\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1.1 3.4 2.5') == '(x^y)^z'\nassert solution('2.0 2.0 2.0') == 'z^y^x'\nassert solution('1.9 1.8 1.7') == '(x^y)^z'\n\"\"\"\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"1.1 3.4 2.5\") == \"x^y^z\"\nassert solution(\"2.0 2.0 2.0\") == \"x^y^z\"\nassert solution(\"1.9 1.8 1.7\") == \"(x^y)^z\"\nprint(solution(stdin.strip()))"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('abcabca') == 5\nassert solution('abcdefgh') == 8\nassert solution('aaaaaaaaa') == 4\nassert solution('aaaaaaaaaa') == 4\nassert solution('ab') == 2\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('abcabca') == '5'\nassert solution('abcdefgh') == '8'\nassert solution('abcdefg') == '4'\n\n\n\n'''\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('abcdefgh') == 8\nassert solution('abc') == 1\nassert solution('abcdef') == 3\nassert solution('abcdefgh') == 7\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('abcabca') == 5\nassert solution('abcdefgh') == 8\nassert solution('abc') == 7\nassert solution('aaaaaaaa') == 4\nassert solution('abcabca') == 5\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('abcdefgh') == 8\nassert solution('abcabca') == 5\n\n\n\n\n\n'''\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('') == 0\nassert solution('a') == 1\nassert solution('abc') == 3\nassert solution('abcabc') == 5\nassert solution('aab') == 3\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"abcabca\") == 5\nassert solution(\"abcdefgh\") == 8\nassert solution(\"abcedfgh\") == 7\nassert solution(\"abcd\") == 1\nassert solution(\"a\") == 1\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"abcabca\") == 5\nassert solution(\"abcdefgh\") == 8\n\"\"\"\n\nN = int(input())\n\nstring = input()\n\nresult = 0\n\nfor i in range(N):\n    if string[i]!= string[N-i-1]:\n        result += 1\n\nprint(result)\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('abcabca') == 5\nassert solution('abcdefgh') == 8\nassert solution('a') == 0\nassert solution('abcdefgh') == 8\nassert solution('a') == 0\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(input()) == ''\nassert solution(input()) == 'abcdefgh'\nassert solution(input()) == 'abcdefgh'"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1\\n0\\n2\\n1\\n') == '3\\nmove 1 3\\nmove 2 1\\nmove 3 2'\nassert solution('2\\n1\\n2\\n') == '3\\nmove 1 3\\nmove 2 1\\nmove 3 2'\nassert solution('5\\n1 0\\n11 1\\n111 0\\n1111 1\\n11111 0\\n') == '5\\nmove 1 5\\nmove 11 1\\nmove 1111 2\\nmove 111 4\\nmove 11111 3'\nassert solution('2\\n1\\n2\\n') == '3\\nmove 1 3\\nmove 2 1\\nmove 3 2'\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''5\n01 0\n2 1\n2extra 0\n3 1\n99 0''') == '''4\nmove 3 1\nmove 01 5\nmove 2extra 4\nmove 99 3'''\nassert solution('''2\n1 0\n2 1\n''') == '''3\nmove 1 3\nmove 2 1\nmove 3 2'''\nassert solution('''5\n1 0\n11 1\n111 0\n1111 1\n11111 0''') == '''5\nmove 1 5\nmove 11 1\nmove 1111 2\nmove 111 4\nmove 11111 3'''\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"\"\"5\n1 0\n2 1\n2extra 0\n3 1\n99 0\n\"\"\") == \"\"\"4\nmove 3 1\nmove 01 5\nmove 2extra 4\nmove 99 3\n\"\"\""
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"0\\n0\\n1\\n\") == \"3\\nmove 1 3\\nmove 2 1\\nmove 3 2\\n\"\nassert solution(\"1\\n1\\n1\\n\") == \"2\\nmove 1 2\\nmove 2 1\\nmove 3 1\\n\"\nassert solution(\"1\\n0\\n0\\n0\\n\") == \"3\\nmove 1 3\\nmove 2 2\\nmove 3 3\\nmove 4 4\\nmove 5 5\\nmove 6 6\\nmove 7 7\\nmove 8 8\\nmove 9 9\\nmove 10 10\\nmove 11 11\\nmove 12 12\\nmove 13 13\\nmove 14 14\\nmove 15 15\\nmove 16 16\\nmove 17 17\\nmove 18 18\\nmove 19 19\\nmove 20 20\\nmove 21 21\\nmove 22 22\\nmove 23 23\\nmove 24 24\\nmove 25 25\\nmove 26 26\\nmove 27 27\\nmove 28 28\\nmove 29 29\\nmove 30 30\\nmove 31 31\\nmove 32 32\\nmove 33 33\\nmove 34 34\\nmove 35 35\\nmove 36 36\\nmove 37 37\\nmove 38 38\\nmove 39 39\\nmove 40 40\\nmove 41 41\\nmove 42 42\\nmove 43 43\\nmove 44 44\\nmove 45 45\\nmove 46 46\\nmove 47 47\\nmove 48 48\\nmove 49 49\\nmove 50 50\\nmove 51 51\\nmove 52 52\\nmove 53 53\\nmove 54 54\\nmove 55 55\\nmove 56 56\\nmove 57 57\\nmove 58 58\\nmove 59 59\\nmove 60 60\\nmove 61 61\\nmove 62 62\\nmove 63 63\\nmove 64 64\\nmove 65 65\\nmove 66 66\\nmove 67 67\\nmove 68 68\\nmove 69 69\\nmove 70 70\\nmove 71 71\\nmove 72 72\\nmove 73 73\\nmove 74 74\\nmove 75 75\\nmove 76 76\\nmove 77 77\\nmove 78 78\\nmove 79 79\\nmove 80 80\\nmove 81 81\\nmove 82 82\\nmove 83 83\\nmove 84 84\\nmove 85 85\\nmove 86 86\\nmove 87 87\\nmove 88 88\\nmove 89 89\\nmove 90 90\\nmove 91 91\\nmove 92 92\\nmove 93 93\\nmove 94 94\\nmove 95 95\\nmove 96 96\\nmove 97 97\\nmove 98 98\\nmove 99 99\\n\") == \"3\\nmove 1 5\\nmove 11 1\\nmove 111 3\\nmove 111 4\\nmove 111 11\\n\"\n\nassert solution(\"1\\n0\\n0\\n0\\n\") == \"3\\nmove 1 3\\nmove 2 2\\nmove 3 3\\nmove 4 4\\nmove 5 5\\nmove 6 6\\nmove 7 7\\nmove 8 8\\nmove 9 9\\nmove 10 10\\nmove 11 11\\nmove 12 12\\nmove 13 13\\nmove 14 14\\nmove 15 15\\nmove 16 16\\nmove 17 17\\nmove 18 18\\nmove 19 19\\nmove 20 20\\nmove 21 21\\nmove 22 22\\nmove 23 23\\nmove 24 24\\nmove 25 25\\nmove 26 26\\nmove 27 27\\nmove 28 28\\nmove 29 29\\nmove 30 30\\nmove 31 31\\nmove 32 32\\nmove 33 33\\nmove 34 34\\nmove 35 35\\nmove 36 36\\nmove 37 37\\nmove 38 38\\nmove 39 39\\nmove 40 40\\nmove 41 41\\nmove 42 42\\nmove 43 43\\nmove 44 44\\nmove 45 45\\nmove 46 46\\nmove 47 47\\nmove 48 48\\nmove 49 49\\nmove 50 50\\nmove 51 51\\nmove 52 52\\nmove 53 53\\nmove 54 54\\nmove 55 55\\nmove 56 56\\nmove 57 57\\nmove 58 58\\nmove 59 59\\nmove 60 60\\nmove 61 61\\nmove 62 62\\nmove 63 63\\nmove 64 64\\nmove 65 65\\nmove 66 66\\nmove 67 67\\nmove 68 68\\nmove 69 69\\nmove 70 70\\nmove 71 71\\nmove 72 72\\nmove 73 73\\nmove 74 74\\nmove 75 75\\nmove 76 76\\nmove 77 77\\nmove 78 78\\nmove 79 79\\nmove 80 80\\nmove 81 81\\nmove 82 82\\nmove 83 83\\nmove 84 84\\nmove 85 85\\nmove 86 86\\nmove 87 87\\nmove 88 88\\nmove 89 89\\nmove 90 90\\nmove 91 91\\nmove 92 92\\nmove 93 93\\nmove 94 94\\nmove 95 95\\nmove 96 96\\nmove 97 97\\nmove 98 98\\nmove 99 99\\n\") == \"3\\nmove 1 5\\nmove 11 1\\nmove 111 3\\nmove 111 4\\nmove 111 11\\n\"\n\nassert solution(\"1\\n0\\n0\\n0\\n\") == \"3\\nmove 1 3\\nmove 2 2\\nmove 3 3\\nmove 4 4\\nmove 5 5\\nmove 6 6\\nmove 7 7\\nmove 8 8\\nmove 9 9\\nmove 10 10\\nmove 11 11\\nmove 12 12\\nmove 13 13\\nmove 14 14\\nmove 15"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1 0\") == \"\"\nassert solution(\"1 1\") == \"\"\nassert solution(\"1 2\") == \"\"\nassert solution(\"1 3\") == \"\"\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"\"\nassert solution(\"0\") == \"\"\nassert solution(\"0\\n0\") == \"\"\nassert solution(\"1\\n0\") == \"\"\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''5\n01 0\n2 1\n2extra 0\n3 1\n99 0\n''') == '''4\nmove 3 1\nmove 01 5\nmove 2extra 4\nmove 99 3\n'''\n\nassert solution('''2\n1 0\n2 1\n''') == '''3\nmove 1 3\nmove 2 1\nmove 3 2\n'''\n\nassert solution('''5\n1 0\n11 1\n111 0\n1111 1\n11111 0\n''') == '''5\nmove 1 5\nmove 11 1\nmove 1111 2\nmove 111 4\nmove 11111 3\n'''\n\nassert solution('''10\n5 5\n1 1\n2 1\n2 1\n3 1\n3 1\n4 1\n4 1\n4 1\n4 1\n4 1\n4 1\n''') == '''15\nmove 1 5\nmove 2 1\nmove 3 1\nmove 4 1\nmove 5 1\nmove 6 1\nmove 7 1\nmove 8 1\nmove 9 1\nmove 10 1\nmove 11 1\nmove 12 1\nmove 13 1\nmove 14 1\nmove 15 1\n'''\n\nassert solution('''30\n29 16\n28 17\n27 19\n26 21\n25 22\n24 23\n23 24\n22 25\n21 26\n20 27\n19 29\n19 22\n18 21\n17 19\n16 17\n15 19\n14 19\n13 17\n12 17\n11 19\n10 19\n9 19\n8 19\n7 19\n6 19\n5 19\n4 19\n3 19\n2 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n1 19\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('5') == \"4\\nmove 3 1\\nmove 01 5\\nmove 2extra 4\\nmove 99 3\"\nassert solution('2') == \"3\\nmove 1 3\\nmove 2 1\\nmove 3 2\"\nassert solution('5') == \"4\\nmove 3 1\\nmove 01 5\\nmove 2extra 4\\nmove 99 3\"\nassert solution('2') == \"3\\nmove 1 3\\nmove 2 1\\nmove 3 2\"\nassert solution('5') == \"4\\nmove 3 1\\nmove 01 5\\nmove 2extra 4\\nmove 99 3\"\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\\n\") == \"\"\nassert solution(\"1\\n1\\n\") == \"move 1 2\"\nassert solution(\"1\\n2\\n1\\n\") == \"move 1 4\"\nassert solution(\"1\\n11\\n111\\n1111\\n11111\\n\") == \"move 1 11\\nmove 11 1\\nmove 11111 2\\nmove 1114 3\"\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''5\n01 0\n2 1\n2extra 0\n3 1\n99 0\n''') == '4\\nmove 1 3\\nmove 2 1\\nmove 3 2\\nmove 4 5\\n'\nassert solution('''2\n1 0\n2 1\n''') == '3\\nmove 1 3\\nmove 2 1\\nmove 3 2'\nassert solution('''5\n1 0\n11 1\n111 0\n1111 1\n11111 0\n''') == '5\\nmove 1 5\\nmove 11 1\\nmove 1111 2\\nmove 111 4\\nmove 11111 3'\nassert solution('''3\n1 0\n11 1\n111 0\n1111 1\n11111 0\n''') == '6\\nmove 1 5\\nmove 11 1\\nmove 111 1\\nmove 11111 2\\nmove 111 4\\nmove 11111 3'\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('123456') == '0'\nassert solution('111000') == '1'\nassert solution('000000') == '0'\nassert solution('010101') == '2'\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"000000\") == 0\nassert solution(\"123456\") == 2\nassert solution(\"111000\") == 1\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"000000\") == \"0\"\nassert solution(\"123456\") == \"2\"\nassert solution(\"111000\") == \"1\"\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"000000\") == \"0\"\nassert solution(\"123456\") == \"2\"\nassert solution(\"111000\") == \"1\"\nprint(\"The testing is done.\")\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(input()) == input()\n\n\"\"\"\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('123456') == '0'\nassert solution('111000') == '1'\nassert solution('000000') == '0'\n\nassert solution('12345') == '1'\nassert solution('123') == '2'\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('000000') == '0'\nassert solution('123456') == '2'\nassert solution('111000') == '1'\n\"\"\"\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"000000\") == \"0\"\nassert solution(\"123456\") == \"2\"\nassert solution(\"111000\") == \"1\"\nassert solution(\"000000\") == \"0\"\nassert solution(\"123456\") == \"2\"\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"000000\") == 0\nassert solution(\"123456\") == 2\nassert solution(\"111000\") == 1\nassert solution(\"100000\") == 1\nassert solution(\"101111\") == 2\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"000000\") == 0\nassert solution(\"123456\") == 2\nassert solution(\"111000\") == 1\nassert solution(\"111000\") == 1\nassert solution(\"111000\") == 1\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('4 3') == '3'\nassert solution('5 2') == '2'\nassert solution('5 2') == '2'\nassert solution('5 2') == '2'\nassert solution('5 2') == '2'\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''4 3\n''') == '3'\nassert solution('''5 2\n''') == '2'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('4 3') == '3'\nassert solution('5 2') == '2'\nassert solution('1 4') == '3'\nassert solution('1 10') == '4'\nassert solution('1 1000000000') == '1000000000'\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1 3') == '3'\nassert solution('2 3') == '2'\nassert solution('4 3') == '3'\nassert solution('5 2') == '2'\nassert solution('8 3') == '5'\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''4 3''') == '3'\nassert solution('''5 2''') == '2'\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\n    '4 3'\n) == '3'\nassert solution(\n    '5 2'\n) == '2'\nassert solution(\n    '5 2'\n) == '2'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('5 2') == '2'\nassert solution('2 1') == '0'\nassert solution('10 9') == '4'\nassert solution('11 10') == '5'\nassert solution('14 3') == '0'\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('3 2') == '2'\nassert solution('5 2') == '2'\nassert solution('5 4') == '1'\nassert solution('2 2') == '1'\nassert solution('3 4') == '3'\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('4 3') == '3'\nassert solution('5 2') == '2'\nassert solution('7 1') == '1'\nassert solution('7 2') == '2'\nassert solution('7 3') == '3'\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('3 1') == '1'\nassert solution('4 4') == '2'\nassert solution('2 2') == '0'\nassert solution('5 2') == '2'\nassert solution('1 3') == '1'\n\n\n-----"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(input(\"\")) == output\n\"\"\"\n\nfrom math import gcd\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('3 2') == '1 8'\nassert solution('1 3') == '1 1'\nassert solution('4 3') == '23 128'\n\n\"\"\""
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('3 2') == '1 8'\nassert solution('1 3') == '1 1'\nassert solution('4 3') == '23 128'\n\n\n\n\n\"\"\"\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''3 2''') == '1 8'\nassert solution('''1 3''') == '1 1'\nassert solution('''4 3''') == '23 128'\n'''\n\n'''\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''3 2''') == '1 8'\nassert solution('''1 3''') == '1 1'\nassert solution('''4 3''') == '23 128'\nassert solution('''10 2''') == '1 1'\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('2 3') == '1 8'\nassert solution('1 3') == '1 1'\nassert solution('4 3') == '23 128'\nassert solution('10000000 2'): '1 1'\nassert solution('10000001 1'): '1 1'\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('3 2') == '1 8'\nassert solution('1 3') == '1 1'\nassert solution('4 3') == '23 128'\nassert solution('-1 -1') == '1 1'\nassert solution('4 3') == '23 128'\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == '1 1'\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''3 2''') == '1 8'\nassert solution('''1 3''') == '1 1'\nassert solution('''4 3''') == '23 128'\nassert solution('''4 3''') == '23 128'\nassert solution('''4 3''') == '23 128'\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''0\n150 South\n5000 East\n5000 North\n5500 North\n4444 West\n4000 North\n''') == 'NO'\nassert solution('''0\n5000 East\n5000 North\n5500 North\n4444 West\n4000 North\n''') == 'NO'\nassert solution('''0\n5000 East\n5000 North\n5500 North\n4444 West\n4000 North\n''') == 'NO'\nassert solution('''0\n100 South\n5000 East\n5000 North\n5500 North\n4444 West\n4000 North\n''') == 'NO'\nassert solution('''0\n5000 East\n5000 North\n5500 North\n4444 West\n4000 North\n''') == 'NO'\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('3\\n500 North\\n1000 South\\n1000 North') == 'NO'\nassert solution('2\\n15000 South\\n1000 North') == 'YES'\nassert solution('2\\n400 North\\n2000 South\\n2000 North') == 'NO'\nassert solution('5\\n1000000 North\\n9000 North\\n10000 North\\n15000 North\\n15000 South') == 'NO'\nassert solution('5\\n20000 North\\n100 East\\n5000 North\\n5000 South') == 'YES'\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''5\n7500 South\n10000 East\n3500 North\n4444 West\n4000 North\n''') == \"YES\"\nassert solution('''2\n15000 South\n4000 East\n''') == \"NO\"\nassert solution('''5\n20000 South\n1000 North\n1000000 West\n9000 North\n10000 North\n''') == \"YES\"\nassert solution('''3\n20000 South\n10 East\n20000 North\n''') == \"NO\"\nassert solution('''4\n50 South\n50 North\n15000 South\n15000 North\n''') == \"YES\"\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1\\n0\\n0\\n0\\n0') == 'YES'\nassert solution('2\\n0\\n0\\n0\\n0') == 'NO'\nassert solution('3\\n0\\n0\\n0\\n0') == 'NO'\nassert solution('4\\n0\\n0\\n0\\n0') == 'YES'\nassert solution('5\\n0\\n0\\n0\\n0') == 'YES'\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"100 North\\n1000 South\\n2000 North\\n6000 North\\n3000 South\\n5000 East\") == \"YES\"\nassert solution(\"1 North\\n1 South\\n1 North\\n1000 South\\n2000 North\\n3000 North\") == \"NO\"\nassert solution(\"1000 North\\n3000 South\\n6000 East\") == \"NO\"\nassert solution(\"100 North\\n100 North\\n100 South\\n1000 North\\n1000 North\\n1000 South\\n1000 North\\n100 North\\n100 North\\n1000 South\") == \"NO\"\nassert solution(\"1000 North\\n2000 South\\n3000 East\") == \"NO\"\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"1\"\n    \"2\"\n    \"3\"\n    \"4\") == \"NO\"\n\nassert solution(\"5\"\n    \"1000 North\"\n    \"1000 South\"\n    \"15000 South\"\n    \"15000 North\") == \"NO\"\n\nassert solution(\"2\"\n    \"10 East\"\n    \"20000 North\"\n    \"20000 South\"\n    \"50000 North\"\n    \"1000000 West\") == \"NO\"\n\nassert solution(\"3\"\n    \"20000 South\"\n    \"10000 East\"\n    \"10000 North\"\n    \"1000000 West\"\n    \"100000 South\") == \"NO\"\n\nassert solution(\"4\"\n    \"5000 South\"\n    \"5000 North\"\n    \"15000 South\"\n    \"15000 North\"\n    \"50000 North\"\n    \"50000 South\"\n    \"10000 East\"\n    \"10000 North\"\n    \"10000 South\") == \"YES\""
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''5\n7500 South\n10000 East\n3500 North\n4444 West\n4000 North''') == 'YES'\n\nassert solution('''2\n15000 South\n4000 East''') == 'NO'\n\nassert solution('''5\n20000 South\n1000 North\n1000000 West\n9000 North\n10000 North\n\n''') == 'YES'\n\nassert solution('''3\n20000 South\n10 East\n20000 North\n\n''') == 'NO'\n\nassert solution('''4\n50 South\n50 North\n15000 South\n15000 North\n\n''') == 'YES'\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"\"\nassert solution(\"1\\n1\") == \"YES\"\nassert solution(\"1\\n0\") == \"NO\"\nassert solution(\"1\\n0\\n0\\n1\") == \"YES\"\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\n    \"\"\"\n    n = int(stdin.readline())\n    for _ in range(n):\n        x, y = stdin.readline().split()\n        x = int(x)\n        if (x**2 + y**2)**0.5 == 40.0:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n            \n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"NO\"\nassert solution(\"1\") == \"NO\"\nassert solution(\"1 1\") == \"NO\"\nassert solution(\"1 1 1\") == \"NO\"\nassert solution(\"1 1 1 1\") == \"NO\"\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''2 0 3 3 5 21''') == '3'\nassert solution('''2 4 3 0 6 17''') == '2'\nprint('All set!')\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('2 0 3 3 5 21') == '3'\nassert solution('2 4 3 0 6 17') == '2'\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('2 0 3 3 5 21') == '3'\nassert solution('2 4 3 0 6 17') == '2'\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''2 0 3 3 5 21''') == '3'\nassert solution('''2 4 3 0 6 17''') == '2'\nassert solution('''2 4 3 0 -6 17''') == '2'\nassert solution('''-2 4 3 0 6 17''') == '2'\nassert solution('''-2 4 3 0 -6 17''') == '2'\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('2 0 3 3 5 21') == '3'\nassert solution('2 4 3 0 6 17') == '2'\nassert solution('2 4 3 1 6 17') == '2'\nassert solution('2 4 3 0 6 19') == '4'\nassert solution('2 4 3 1 6 19') == '4'\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('2 0 3 3 5 21') == '3'\nassert solution('2 4 3 0 6 17') == '2'\nassert solution('2 3 0 6 -1 17') == '0'\nassert solution('2 0 0 6 -1 17') == '1'\nassert solution('2 0 0 6 -1 17') == '1'\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''2 0 3 3 5 21''') == '3'\nassert solution('''2 4 3 0 6 17''') == '2'\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == \"\"\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''0 0 3 3 5 21''') == '3'\nassert solution('''2 4 3 0 6 17''') == '2'\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('5 2 3') == '1'\nassert solution('4 7 10') == '3'\nassert solution('1 1 1') == '1'\nassert solution('3 2 1') == '3'"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('5 2 3') == '1'\nassert solution('4 7 10') == '3'\nassert solution('1 11 21 31 1') == '1'\nassert solution('1 10 5 3') == '3'\nassert solution('10 10 10 10') == '10'\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('5 2 3') == '1'\nassert solution('4 7 10') == '3'\nassert solution('3 5 3') == '4'\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1 1 1') == '1'\nassert solution('3 2 5') == '1'\nassert solution('100 100 100') == '100'\nassert solution('4 7 10') == '3'\nassert solution('100 100 100') == '100'\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('5 2 3\\n') == '1\\n'\nassert solution('4 7 10\\n') == '3\\n'\nassert solution('1 1 1\\n') == '1\\n'\nassert solution('3 4 5\\n') == '2\\n'\nassert solution('7 8 9\\n') == '4\\n'\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('5 2 3\\n') == '1\\n'\nassert solution('4 7 10\\n') == '3\\n'\nassert solution('5 7 10\\n') == '2\\n'\nassert solution('3 7 10\\n') == '2\\n'\nassert solution('1 7 10\\n') == '0\\n'\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(input(\"\")) == output\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''5 2 3''') == '1'\nassert solution('''4 7 10''') == '3'\nassert solution('''4 1 2''') == '1'\nassert solution('''1 1 2''') == '1'\nassert solution('''2 2 2''') == '2'\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('5 2 3') == '1'\nassert solution('4 7 10') == '3'\nassert solution('10 9 3') == '4'\nassert solution('10 9 3') == '4'\nassert solution('10 9 3') == '4'\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('5 2 3\\n') == '1'\nassert solution('4 7 10\\n') == '3'\nassert solution('9 5 10\\n') == '5'\nassert solution('1 1 1\\n') == '1'\nassert solution('1 2 3\\n') == '3'\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''2 4\nRRRR\nRRRR\nBBBB\nGGGG''') == 'YES'\nassert solution('''5 6\nRRRGGGG\nRRRGGGG\nRRRGGGG\nRRRBBBB\nRRRBBBB\nRRRBBBB''') == 'NO'\nassert solution('''3 3\nBRG\nBRG\nBRG\nBRG\nBRG\nBRG\n''') == 'YES'\nassert solution('''3 2\nBRG\nBRG\nBRG\nBRG\nBRG\nBRG\n''') == 'NO'\nassert solution('''2 3\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\n''') == 'YES'\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"2 5\") == \"YES\"\nassert solution(\"4 3\") == \"NO\"\nassert solution(\"6 7\") == \"NO\"\nassert solution(\"4 4\") == \"YES\"\nassert solution(\"RRRR\") == \"YES\"\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('5 3\\nRRRRR\\nRRRRR\\nBBBBB\\nBBBBB\\nGGGGG\\nGGGGG') == 'YES'\nassert solution('6 7\\nRRRGGGG\\nRRRGGGG\\nRRRGGGG\\nRRRBBBB\\nRRRBBBB\\nRRRBBBB') == 'YES'\nassert solution('4 4\\nRRRR\\nRRRR\\nBBBB\\nGGGG') == 'NO'\nassert solution('4 3\\nBRG\\nBRG\\nBRG\\nBRG') == 'NO'\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == expected\n\"\"\"\n\n\nfrom typing import Tuple"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('6 5\\nRRRRR\\nRRRRR\\nBBBBB\\nBBBBB\\nGGGGG\\nGGGGG\\n') == 'YES'\nassert solution('4 3\\nBRG\\nBRG\\nBRG\\nBRG\\n') == 'YES'\nassert solution('6 7\\nRRRGGGG\\nRRRGGGG\\nRRRGGGG\\nRRRBBBB\\nRRRBBBB\\nRRRBBBB\\n') == 'NO'\nassert solution('6 7\\nRRRGGGG\\nRRRGGGG\\nRRRGGGG\\nRRRBBBB\\nRRRBBBB\\nRRRBBBB\\n') == 'NO'\n\n'''\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n\n\"\"\"\nEXPLANATION\n\n---\n\n-----\n\n\"\"\"\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''\n3 3\nRRRR\nRRRR\nBBBB\n''') == 'YES'\n\nassert solution('''\n3 3\nRRRR\nRRRR\nRRRR\n''') == 'NO'\n\nassert solution('''\n2 2\nRR\nRR\n''') == 'NO'\n\nassert solution('''\n2 2\nR\nR\n''') == 'NO'\n\nassert solution('''\n2 1\nB\nB\n''') == 'NO'"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('6 5\\nRRRRR\\nRRRRR\\nBBBBB\\nBBBBB\\nGGGGG\\nGGGGG\\n\\n') == 'YES'\nassert solution('4 3\\nBRG\\nBRG\\nBRG\\nBRG\\n\\n') == 'YES'\nassert solution('6 7\\nRRRGGGG\\nRRRGGGG\\nRRRGGGG\\nRRRBBBB\\nRRRBBBB\\nRRRBBBB\\n\\n') == 'NO'\n\n\n\n\"\"\"\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\n6 5\nRRRRR\nRRRRR\nBBBBB\nBBBBB\nGGGGG\nGGGGG\n\"\"\") == \"YES\"\nassert solution(\n\"\"\"\n4 3\nBRG\nBRG\nBRG\nBRG\n\"\"\") == \"YES\"\nassert solution(\n\"\"\"\n6 7\nRRRGGGG\nRRRGGGG\nRRRGGGG\nRRRBBBB\nRRRBBBB\nRRRBBBB\n\"\"\") == \"NO\"\nassert solution(\n\"\"\"\n3 2\nRB\nRB\nRB\n\"\"\") == \"NO\"\nassert solution(\n\"\"\"\n4 4\nRRRR\nRRRR\nBBBB\nGGGG\n\"\"\") == \"NO\"\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''6 5\nRRRRR\nRRRRR\nBBBBB\nBBBBB\nGGGGG\nGGGGG\n''') == 'YES'\nassert solution('''4 3\nBRG\nBRG\nBRG\nBRG\n''') == 'YES'\nassert solution('''6 7\nRRRGGGG\nRRRGGGG\nRRRGGGG\nRRRBBBB\nRRRBBBB\nRRRBBBB\n''') == 'NO'\nassert solution('''4 4\nRRRR\nRRRR\nBBBB\nGGGG\n''') == 'NO'\nassert solution('''7 7\nRRRGGGGBRB\nRRRRRB\nRRRRRB\nRRRRRRR\nRRRRRRR\nRRRRRRR\nRRRRRRR\nRRRRRRR\nRRRRRRR\nRRRRRRR\n''') == 'YES'\n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == expected\n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"-2 0\"\nassert solution(\"7\") == \"3 2\"\n\n\"\"\"\n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('3') == '-2 0'\nassert solution('7') == '3 2'\nassert solution('1') == '0 0'\nassert solution('2') == '0 -1'\nassert solution('0') == '0 0'\n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''3''') == '-2 0'\nassert solution('''7''') == '3 2'\nassert solution('''18''') == '7 9'\nassert solution('''103''') == '17 10'\nassert solution('''10000''') == '6874 8214'\n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''3''') == '-2 0'\nassert solution('''7''') == '3 2'\nassert solution('''10''') == '4 -1'\nassert solution('''16''') == '2 -1'\nassert solution('''21''') == '4 -3'\n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"-2 0\"\nassert solution(\"7\") == \"3 2\"\n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''0''') == '0 0'\nassert solution('''1''') == '-1 0'\nassert solution('''2''') == '-1 -1'\nassert solution('''3''') == '0 -1'\nassert solution('''4''') == '1 0'\n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('') is None\nassert solution('3') == '3 2'\nassert solution('7') == '3 2'"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"-2 0\"\nassert solution(\"7\") == \"3 2\"\n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('3') == '-2 0'\nassert solution('7') == '3 2'\n\n'''\n\n'''"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('4 6 15') == 'No'\nassert solution('3 2 7') == 'Yes'\nassert solution('6 11 6') == 'Yes'\n\n\"\"\"\n\nfrom math import ceil"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('3 2 7') == 'No'\nassert solution('4 6 15') == 'Yes'\nassert solution('3 2 7') == 'No'\nassert solution('6 11 6') == 'Yes'\nassert solution('1 1 2') == 'Yes'\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('4 6 15\\n') == 'No'\nassert solution('3 2 7\\n') == 'Yes'\nassert solution('6 11 6\\n') == 'Yes'\nassert solution('3 3 3\\n') == 'Yes'\nassert solution('3 4 5\\n') == 'Yes'\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('4 6 15') == 'No'\nassert solution('3 2 7') == 'Yes'\nassert solution('6 11 6') == 'Yes'\nassert solution('2 2 4') == 'Yes'\nassert solution('4 3 1') == 'Yes'\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('4 6 15\\n') == 'No'\nassert solution('3 2 7\\n') == 'Yes'\nassert solution('6 11 6\\n') == 'Yes'\n\n\n\"\"\"\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('4 6 15') == 'No'\nassert solution('3 2 7') == 'Yes'\nassert solution('6 11 6') == 'Yes'\nassert solution('6 11 5') == 'No'\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"4 6 15\n\"\"\"\n) == \"No\"\nassert solution(\n\"\"\"3 2 7\n\"\"\"\n) == \"Yes\"\nassert solution(\n\"\"\"6 11 6\n\"\"\"\n) == \"Yes\"\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"4 6 15\") == \"No\"\nassert solution(\"3 2 7\") == \"Yes\"\nassert solution(\"6 11 6\") == \"Yes\""
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"4 6 15\\n\") == \"No\\n\"\nassert solution(\"3 2 7\\n\") == \"Yes\\n\"\nassert solution(\"6 11 6\\n\") == \"Yes\\n\"\n\n\n\"\"\"\n"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('2 4\\n1 3\\n1 2\\n') == 'YES'\nassert solution('3 9\\n2 3 5 8\\n0 1 3 6\\n') == 'YES'\nassert solution('1 10\\n1 3 4\\n1 1 1\\n') == 'NO'\nassert solution('4 8\\n2 3 5 8\\n0 1 3 6\\n') == 'YES'\nassert solution('2 4\\n2 3\\n1 2\\n') == 'NO'\n"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('3 8\\n2 4 6\\n1 5 7\\n') == 'YES'\nassert solution('4 9\\n2 3 5 8\\n0 1 3 6\\n') == 'YES'\nassert solution('2 4\\n1 3\\n1 2\\n') == 'NO'\nassert solution('2 4\\n0 1\\n1 2\\n') == 'NO'\nassert solution('3 4\\n2 3\\n3 1\\n') == 'NO'\n"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == \"YES\"\n\n\"\"\"\n"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\n\"\"\""
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"3 8\\n2 4 6\\n1 5 7\\n\") == \"YES\\n\"\nassert solution(\"4 9\\n2 3 5 8\\n0 1 3 6\\n\") == \"YES\\n\"\nassert solution(\"2 4\\n1 3\\n1 2\\n\") == \"NO\\n\"\n\n\n\n-----\n"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''3 8\n2 4 6\n1 5 7\n''') == 'YES'\n\nassert solution('''4 9\n2 3 5 8\n0 1 3 6\n''') == 'YES'\n\nassert solution('''2 4\n1 3\n1 2\n''') == 'NO'\n\nassert solution('''4 3\n1 3\n1 2\n2 3\n''') == 'YES'\n\nassert solution('''3 4\n2 3\n3 2\n''') == 'NO'"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"4 1\") == \"\"\nassert solution(\"4 3\") == \"\"\nassert solution(\"1 1\") == \"\"\nassert solution(\"1 1 2\") == \"NO\"\n"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('2 3\\n1 2\\n') == 'YES'\nassert solution('3 4\\n0 1 3\\n2 3 1') == 'NO'\nassert solution('2 4\\n1 3\\n1 2') == 'YES'\nassert solution('3 4\\n0 1 3\\n2 3 1') == 'NO'\nassert solution('2 3\\n2 4\\n2 3') == 'YES'\n"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''\n3 8\n2 4 6\n1 5 7\n''') == 'YES'\nassert solution('''\n4 9\n2 3 5 8\n0 1 3 6\n''') == 'NO'\nassert solution('''\n3 4\n1 2 3\n1 2 4\n''') == 'YES'\nassert solution('''\n2 5\n0 1 3\n1 4 2\n''') == 'NO'"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"2 4\") == \"YES\"\nassert solution(\"3 8\") == \"NO\"\nassert solution(\"2 5\") == \"NO\"\nassert solution(\"1 2\") == \"YES\"\nassert solution(\"1 1\") == \"YES\"\n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('mew') =='mew'\nassert solution('wuffuw') == 'wuffuw'\nassert solution('qqqqqqqq') == ''\nassert solution('qqqqqqq') == 'q'\nassert solution('qqqqqqqqqqqqqq') == 'qqqqqqqq'\n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('wuffuw') == 3\nassert solution('mew') == 3\nassert solution('qqqqqqqq') == 0\nassert solution('wqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqw"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"mew\") == 3\nassert solution(\"wuffuw\") == 5\nassert solution(\"qqqqqqqq\") == 0\nassert solution(\"qqqqqqqw\") == 0\nassert solution(\"wewq\") == 3\n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('mew') == '3'\nassert solution('wuffuw') == '5'\nassert solution('qqqqqqqq') == '0'\nassert solution('giaewaai') == '5'\nassert solution('lppcxhuxpkvspqxrzrwwo') == '5'\n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"mew\") == 3\nassert solution(\"wuffuw\") == 5\nassert solution(\"qqqqqqqq\") == 0\nassert solution(\"qqqqqm\") == 4\nassert solution(\"qqqqqqqqqq\") == 0\n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('mew') == '3'\nassert solution('wuffuw') == '5'\nassert solution('qqqqqqqq') == '0'\nassert solution('v') == '1'\nassert solution('x') == '0'\n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"mew\") == \"mew\"\nassert solution(\"wuffuw\") == \"wuffuw\"\nassert solution(\"qqqqqqqq\") == \"qqqqqqqq\"\nassert solution(\"wwwwwwwww\") == \"wwwwwwww\"\nassert solution(\"qwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqw"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('') == 0\nassert solution('mew') == 3\nassert solution('wuffuw') == 5\nassert solution('qqqqqqqq') == 0\nassert solution('qwwq') == 0\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == 'rated'\n\nassert solution(stdin) == 'unrated'\n\nassert solution(stdin) =='maybe'\n\nassert solution(stdin) =='maybe'\n\nassert solution(stdin) =='maybe'"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('6\\n3060 3060\\n2194 2194\\n2876 2903\\n2624 2624\\n3007 2991\\n2884 2884') == 'rated'\nassert solution('4\\n1500 1500\\n1300 1300\\n1200 1200\\n1400 1400') == 'unrated'\nassert solution('5\\n3123 3123\\n2777 2777\\n2246 2246\\n2246 2246\\n1699 1699') =='maybe'\nassert solution('6\\n1550 1550\\n1300 1300\\n1200 1200\\n1400 1400\\n1300 1301\\n1550 1551') =='maybe'\nassert solution('6\\n2079 2079\\n1267 1267\\n1832 1832\\n2045 2045\\n2039 2039\\n1885 1885') =='maybe'\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('3\\n1 1\\n2 2\\n3 3') == 'unrated'\nassert solution('4\\n1 1\\n2 2\\n3 3\\n4 4') == 'rated'\nassert solution('5\\n3123 3123\\n2777 2777\\n2246 2246\\n2246 2246\\n1699 1699') =='maybe'\nassert solution('7\\n2343 2143\\n1574 1763\\n1574 1763\\n1574 1763\\n1574 1763\\n1574 1763') =='maybe'\nassert solution('10\\n9891 9891\\n999999999999\\n999999999999\\n999999999999\\n999999999999\\n999999999999\\n999999999999\\n999999999999\\n999999999999') == 'rated'\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('3\\n3\\n2\\n4\\n2\\n1\\n4\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n1\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('6\\n3060 3060\\n2194 2194\\n2876 2903\\n2624 2624\\n3007 2991\\n2884 2884') == 'rated'\nassert solution('4\\n1500 1500\\n1300 1300\\n1200 1200\\n1400 1400') == 'unrated'\nassert solution('5\\n3123 3123\\n2777 2777\\n2246 2246\\n2246 2246\\n1699 1699') =='maybe'\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\n'''\n6\n3060 3060\n2194 2194\n2876 2903\n2624 2624\n3007 2991\n2884 2884\n''') == \"rated\"\n\nassert solution(\n'''\n4\n1500 1500\n1300 1300\n1200 1200\n1400 1400\n''') == \"unrated\"\n\nassert solution(\n'''\n5\n3123 3123\n2777 2777\n2246 2246\n2246 2246\n1699 1699\n''') == \"maybe\"\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\nimport sys"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''\n6\n3060 3060\n2194 2194\n2876 2903\n2624 2624\n3007 2991\n2884 2884\n''') == 'rated'\n\nassert solution('''\n4\n1500 1500\n1300 1300\n1200 1200\n1400 1400\n''') == 'unrated'\n\nassert solution('''\n5\n3123 3123\n2777 2777\n2246 2246\n2246 2246\n1699 1699\n''') =='maybe'\n'''\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''6\n3060 3060\n2194 2194\n2876 2903\n2624 2624\n3007 2991\n2884 2884\n''') == 'rated'\n\nassert solution('''4\n1500 1500\n1300 1300\n1200 1200\n1400 1400\n''') == 'unrated'\n\nassert solution('''5\n3123 3123\n2777 2777\n2246 2246\n2246 2246\n1699 1699\n''') =='maybe'\nassert solution('''6\n2777 2777\n2296 2196\n2903 2991\n2724 2624\n1699 1699\n2884 2884\n''') =='maybe'\nassert solution('''7\n2777 2777\n2296 2196\n2903 2991\n2724 2624\n1699 1699\n2884 2884\n3123 3123\n''') =='maybe'\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1\\n1\\n2\\n2') =='maybe'\nassert solution('3\\n3\\n4\\n4') =='maybe'\nassert solution('3\\n3\\n2\\n4') =='maybe'\nassert solution('1\\n1\\n2\\n2\\n1') =='maybe'\nassert solution('1\\n2\\n3\\n4\\n5\\n6') == 'rated'\n"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\n'''9\n2 1 0 3 0 0 3 2 4''') == '2 1 0 1 0 0 1 2 3'\nassert solution(\n'''5\n0 1 2 3 4''') == '0 1 2 3 4'\nassert solution(\n'''7\n5 6 0 1 -2 3 4''') == '2 1 0 1 2 3 4'\n"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('1\\n0') == '0'\nassert solution('1\\n0\\n0\\n0\\n0') == '0'\nassert solution('1\\n1') == '0'\nassert solution('1\\n0\\n0\\n0\\n0\\n0\\n0') == '0'\nassert solution('1\\n2\\n3\\n5\\n0\\n0') == '3'\n"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1\\n1') == '0'\nassert solution('2\\n1 0') == '1'\nassert solution('2\\n1 0 0') == '1'\nassert solution('2\\n0 1 0') == '1'\n"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''9\n2 1 0 3 0 0 3 2 4\n''') == '2 1 0 1 0 0 1 2 3'\nassert solution('''5\n0 1 2 3 4\n''') == '0 1 2 3 4'\nassert solution('''7\n5 6 0 1 -2 3 4\n''') == '2 1 0 1 2 3 4'\n"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('3') == '1 0 0'\nassert solution('2 1 0 3 0 0 3 2 4') == '2 1 0 1 0 0 1 2 3'\nassert solution('2 1 0 3 0 0 3 2 4 3') == '2 1 0 1 0 0 1 2 3'\nassert solution('2 1 0 3 0 0 3 2 4 3 3') == '2 1 0 1 0 0 1 2 3'\nassert solution('2 1 0 3 0 0 3 2 4 3 3 3') == '2 1 0 1 0 0 1 2 3'\n"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('9\\n2 1 0 3 0 0 3 2 4\\n') == '2 1 0 1 0 0 1 2 3'\nassert solution('5\\n0 1 2 3 4\\n') == '0 1 2 3 4'\nassert solution('7\\n5 6 0 1 -2 3 4\\n') == '2 1 0 1 2 3 4'\n"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''9\n2 1 0 3 0 0 3 2 4''') == '2 1 0 1 0 0 1 2 3'\nassert solution('''5\n0 1 2 3 4\n''') == '0 1 2 3 4'\nassert solution('''7\n5 6 0 1 -2 3 4\n''') == '2 1 0 1 2 3 4'"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1\\n2') == '1'\nassert solution('9\\n2 1 0 3 0 0 3 2 4') == '2 1 0 1 0 0 1 2 3'\nassert solution('5\\n0 1 2 3 4') == '0 1 0 1 2 3 4'\nassert solution('7\\n5 6 0 1 -2 3 4') == '2 1 0 1 2 3 4'\nassert solution('10\\n5 6 0 1 -2 3 4 5 6 7 8 9') == '2 1 0 1 2 3 4 5 6 7 8 9'\n"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"0\\n0\") == \"0\"\nassert solution(\"1\\n0\") == \"0\"\nassert solution(\"0\\n1\") == \"0\"\nassert solution(\"0\\n2\") == \"0\"\nassert solution(\"2\\n0\") == \"0\"\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('') is None\nassert solution('0101') == '1010'\nassert solution('0') == '1'\nassert solution('11') == '101'\nassert solution('0111') == '101'\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('000001') == '0'\nassert solution
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('01') == '0'\nassert solution('10') == '1'\nassert solution('0111') == '2'\nassert solution('1111') == '0'\nassert solution('11111') == '4'\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('0110001010') == '6'\nassert solution('01101010101010') == '7'\nassert solution
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\n\nfrom sys import stdin,stdout"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''2\n0''') == '3'\nassert solution('''4\n1010''') == '2'\nassert solution('''20\n10101010101010''') == '962'\nassert solution('''3\n011''') == '1'\nassert solution('''10\n0110101101001010101011''') == '144'\n'''\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\n'''\n0\n'''\n) == '3'\n\nassert solution(\n'''\n2\n0\n'''\n) == '3'\n\nassert solution(\n'''\n4\n1010\n'''\n) == '2'\n\nassert solution(\n'''\n20\n10101010101010\n'''\n) == '962'\n\nassert solution(\n'''\n2\n0101\n'''\n) == '2'\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('0') == 1\nassert solution('1010') == 2\nassert solution('0101') == 2\nassert solution('10101010101010') == 962\nassert solution('000001000100001000001010000101110111011010100011000101') == 17\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == expected\n\"\"\"\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('0') == 1\nassert solution('1010') == 2\nassert solution('10101010101010') == 962\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''1 0\n-1 0\n0 -1\n1 1''') == '3 4'\nassert solution('''1 0\n-1 0\n1 1''') == '1 3'\nassert solution('''1 0\n0 -1\n1 1\n1 1''') == '1 3'\nassert solution('''1 0\n-1 0\n-4 -5\n-4 -6''') == '1 2'\nprint('all tests passed')\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\n    \"\"\"\n    4\n    -1 0\n    0 -1\n    1 0\n    1 1\n    \"\"\") == \"3 4\"\n\nassert solution(\n    \"\"\"\n    6\n    -1 0\n    0 -1\n    1 0\n    1 1\n    -4 -5\n    -4 -6\n    \"\"\") == \"6 5\"\n\nassert solution(\n    \"\"\"\n    3\n    -1 2\n    0 1\n    1 1\n    \"\"\") == \"1 1\"\n\nassert solution(\n    \"\"\"\n    1\n    0 1\n    \"\"\") == \"1 1\"\n\nassert solution(\n    \"\"\"\n    3\n    -1 2\n    0 1\n    -1 1\n    \"\"\") == \"1 1\""
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''-1 0\n0 -1\n1 0\n1 1''') == '3 4'\nassert solution('''-1 0\n0 -1\n1 0\n1 1''') == '6 5'\nassert solution('''-1 0\n0 -1\n1 0\n1 1''') == '3 4'\nassert solution('''-1 0\n0 -1\n1 0\n1 1''') == '6 5'\nassert solution('''-1 0\n0 -1\n1 0\n1 1''') == '3 4'\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(input) == expected\n'''"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''\n-1 0\n0 -1\n1 0\n1 1\n''') == '3 4'\n\nassert solution('''\n-1 0\n0 -1\n1 0\n1 1\n''') == '3 4'\n\nassert solution('''\n-1 0\n0 -1\n1 0\n1 1\n-4 -5\n-4 -6\n''') == '6 5'"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''-1 0\n0 -1\n1 0\n1 1''') == '3 4'\nassert solution('''-1 0\n0 -1\n1 0\n1 1''') == '6 5'\nassert solution('''-1 0\n0 -1\n1 0\n1 1\n-4 -5\n-4 -6''') == '6 5'\nassert solution('''-1 0\n0 -1\n1 0\n1 1\n-4 -5\n-4 -6\n-2 2\n-1 0''') == '6 5'\nassert solution('''-1 0\n0 -1\n1 0\n1 1\n-4 -5\n-4 -6\n-2 2\n-1 0''') == '6 5'\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''-1 0\n0 -1\n1 0\n1 1''') == '3 4'\nassert solution('''-1 0\n0 -1\n1 0\n1 1\n-4 -5\n-4 -6''') == '6 5'\nassert solution('''-1 0\n-1 -1\n1 0\n1 1\n-4 -5\n-4 -6''') == '6 5'\nassert solution('''-1 0\n-1 -1\n1 0\n1 1\n-4 -5\n-4 -6\n-4 -6''') == '1 1'\nassert solution('''1 0\n1 1\n1 1\n0 1\n-1 -1\n1 0''') == '1 1'\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''-1 0\n0 -1\n1 0\n1 1''') == '3 4'\nassert solution('''-1 0\n0 -1\n1 0\n1 1\n-4 -5\n-4 -6''') == '6 5'\nassert solution('''4\n-1 0\n0 -1\n1 0\n1 1''') == '3 4'\nassert solution('''6\n-1 0\n0 -1\n1 0\n1 1\n-4 -5\n-4 -6''') == '6 5'\nassert solution('''2\n-1 1\n1 1\n''') == '1 1'\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''\n    1\n    -1 0\n    0 -1\n    1 0\n    1 1\n''') == '3 4'\nassert solution('''\n    2\n    -1 0\n    0 -1\n    1 0\n    1 1\n''') == '1 2'\nassert solution('''\n    3\n    -1 0\n    0 -1\n    1 0\n    1 1\n''') == '2 3'\nassert solution('''\n    3\n    -1 0\n    1 0\n    1 1\n''') == '1 2'\nassert solution('''\n    5\n    -1 0\n    1 0\n    1 1\n    0 1\n    0 0\n''') == '4 3'\n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1 2 1 4 10') == '14'\nassert solution('5 2 1 4 5') == '13'\nassert solution('5 2 1 4 5') == '13'\n\n\n\n\"\"\"\n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('2 2 1 4 10') == '14'\nassert solution('5 2 1 4 5') == '13'\nassert solution('1 2 1 4 5') == '13'\nassert solution('2 2 1 4 6') == '18'\nassert solution('10 10 1 2 3') == '10'\n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('5 2 1 4 10') == '14'\nassert solution('5 2 1 4 5') == '13'\nassert solution('5 1 1 1 1') == '1'\nassert solution('5 1 1 1 1000') == '1000'\nassert solution('5 1000000000 10 100000000') == '0'\n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''5 2 1 4 10''') == \"14\"\nassert solution('''5 2 1 4 5''') == \"13\"\n'''\n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('5 2 1 4 10\\n') == '14'\nassert solution('5 2 1 4 5\\n') == '13'\nassert solution('5 2 1 4 10\\n') == '14'\nassert solution('5 2 1 4 10\\n') == '14'\nassert solution('5 2 1 4 5\\n') == '13'"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''5 2 1 4 10''') == '14'\nassert solution('''5 2 1 4 5''') == '13'\nassert solution('''30 5 5 2 5''') == '1'"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"1 2 1 4 10\") == \"14\"\nassert solution(\"5 2 1 4 5\") == \"13\"\nassert solution(\"1 2 1 4 10\") == \"14\"\nassert solution(\"1 2 1 4 5\") == \"13\"\nassert solution(\"1 2 1 4 1\") == \"1\"\n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('5 2 1 4 10') == '14'\nassert solution('5 2 1 4 5') == '13'"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''6 3''') == '1 2 3'\nassert solution('''8 2''') == '2 6'\nassert solution('''5 3''') == '-1'\nassert solution('''0 0''') == '-1'\nassert solution('''7 0''') == '-1'\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('1 1') == '1'\nassert solution('1 1 1') == '-1'\nassert solution('1 1 1 1') == '1'\nassert solution('1 1 1 1 1') == '1'\nassert solution('2 1') == '2'\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1\\n2') == '1 2'\nassert solution('1\\n3') == '-1'\nassert solution('2\\n2') == '2'\nassert solution('2\\n1') == '-1'\nassert solution('2\\n3') == '-1'\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('5 3\\n') == '2 3'\nassert solution('8 2\\n') == '2 6'\nassert solution('6 3\\n') == '1 2 3'\nassert solution('8 2\\n') == '2 6'\nassert solution('8 8\\n') == '-1'\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('7 2') == '1 2'\nassert solution('7 3') == '2 3'\nassert solution('2 10') == '2 6'\nassert solution('5 3') == '2 3'\nassert solution('1 5') == '-1'\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10') == '1 2 3'\nassert solution('10\\n10\\n10') == '1 2 3'\nassert solution('10\\n1\\n10') == '1 2 3'\nassert solution('2\\n2\\n2') == '1 2 3'\nassert solution('2\\n2\\n2\\n2\\n2\\n2\\n2') == '1 2 3'\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('6 3') == '1 2 3'\nassert solution('8 2') == '2 6'\nassert solution('5 3') == '2 6'\nassert solution('5 3') == '2 6'\nassert solution('8 2') == '2 6'\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('6 3') == '1 2 3'\nassert solution('8 2') == '2 6'\nassert solution('5 3') == '-1'\nassert solution('1 2 3 4 5 6 7 8 9 10') == '1 2 3'\n\nprint('Test success!')"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('8 2\\n') == '2 6'\nassert solution('7 4\\n') == '4 2'\nassert solution('2 2\\n') == '-1'\nassert solution('5 4\\n') == '4 2'\nassert solution('1 3\\n') == '-1'\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('6 3') == '1 2 3'\nassert solution('8 2') == '2 6'\nassert solution('5 3') == '-1'\nassert solution
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1 2') == '1'\nassert solution('1 2') == '1'\nassert solution('1 2') == '1'\nassert solution('3 4') == '5'\nassert solution('4 2') == '2'\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('1 5') == '7'\nassert solution('3 8') == '5'\nassert solution('5 7') == '7'\nassert solution('6 12') == '14'\nassert solution('11 14') == '31'\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1 2') == '1'\nassert solution('1 4') == '1'\nassert solution('1 4\\n1 5') == '1'\nassert solution('1 4\\n2 5') == '1'\nassert solution('1 4\\n3 5') == '1'\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1 3') == '1'\nassert solution('2 4') == '2'\nassert solution('1 4') == '1'\nassert solution('5 10') == '9'\nassert solution('1 3') == '1'\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"6 12\") == \"14\"\nassert solution(\"11 14\") == \"31\"\nassert solution(\"21 21\") == \"88\"\nassert solution(\"1 5\") == \"1\"\nassert solution(\"3 8\") == \"5\"\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('2 3') == '1'\nassert solution('1 1') == '5'\nassert solution('5 6') == '7'\nassert solution('4 7') == '4'\nassert solution('3 8') == '5'\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('6 12') == '14'\nassert solution('11 14') == '31'\nassert solution('1 5') == '1'\nassert solution('3 8') == '5'\nassert solution('5 7') == '7'\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"6 12\") == \"14\"\nassert solution(\"11 14\") == \"31\"\nassert solution(\"21 21\") == \"88\"\nassert solution(\"1 5\") == \"1\"\nassert solution(\"3 8\") == \"5\"\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('6 12') == '14'\nassert solution('11 14') == '31'\nassert solution('21 21') == '88'\nassert solution('5 7') == '7'\nassert solution('3 8') == '5'\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''-1 -2 -3 -4 -5''') == '0'\nassert solution('-3 8 -2 1 -6') == '22'\nassert solution('12 -3') == '0'\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('5 -2') == '22'\nassert solution('12 -3') == '0'\nassert solution('5 10') == '0'\nassert solution('-1 -2 -3 -4 -5') == '0'\nassert solution('1 3 3 7 1 3 3 7 1 3 3 7') == '42'\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\n    stdin = '''5 -2\n-3 8 -2 1 -6\n'''\n) == '22'\n\nassert solution(\n    stdin = '''12 -3\n1 3 3 7 1 3 3 7 1 3 3 7\n'''\n) == '42'\n\nassert solution(\n    stdin = '''5 10\n-1 -2 -3 -4 -5\n'''\n) == '0'\n\nassert solution(\n    stdin = '''10 50\n1 1 1 1 1 1 1 1 1 1 1 1 1\n'''\n) == '98'\n\nassert solution(\n    stdin = '''10 50\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''5 -2\n-3 8 -2 1 -6''') == '22'\nassert solution('''12 -3\n1 3 3 7 1 3 3 7 1 3 3 7''') == '42'\nassert solution('''5 10\n-1 -2 -3 -4 -5''') == '0'\nassert solution('''5 -3\n-1 2 3 -4 -5''') == '0'\nassert solution('''5 10\n-2 1 -3 -4 -5''') == '0'\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('5 -2') == '22'\nassert solution('12 -3') == '0'\nassert solution('5 10') == '0'\nassert solution('-1 -2 -3 -4 -5') == '0'\nassert solution('1 3 3 7 1 3 3 7 1 3 3 7') == '42'\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1\\n5\\n-3\\n1 3 3 7 1 3 3 7 1 3 3 7\\n-1 -2 -3 -4 -5\\n') == '22'\nassert solution('2\\n12\\n-3\\n1 3 3 7 1 3 3 7 1 3 3 7\\n-1 -2 -3 -4 -5\\n') == '42'\nassert solution('2\\n10\\n-1\\n1 3 3 7 1 3 3 7 1 3 3 7\\n-1 -2 -3 -4 -5\\n') == '0'\nassert solution('2\\n5\\n-1\\n1 3 3 7 1 3 3 7 1 3 3 7\\n-1 -2 -3 -4 -5\\n') == '0'\nassert solution('2\\n2\\n-1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1 -1\\n1"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''5 -2''') == '22'\nassert solution('''12 -3''') == '0'\nassert solution('''5 10''') == '0''''"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1\\n2') == '1\\n'\nassert solution('2\\n2') == '-1\\n'\nassert solution('3\\n1') == '3\\n'\nassert solution('5\\n-2') == '22\\n'\nassert solution('12\\n-3') == '0\\n'\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == ''\nassert solution('2 4 6') == '3'\nassert solution('1 10 5') == '5'\nassert solution('2 3 4') == '3'\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"2 2 2\") == \"2\"\nassert solution(\"2 3 4\") == \"3\"\nassert solution(\"1 10 5\") == \"5\""
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1 1 2') == '2'\nassert solution('2 3 4') == '3'\nassert solution('1 10 5') == '5'\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == expected\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdin[-1]\n\n\n\"\"\"\n\"\"\"\nAssumptions:\nn is a positive integer\nm is a positive integer\nk is a positive integer\n\"\"\"\n\"\"\"\nFrom\n\nhttps://www.codewars.com/kata/5553fd6ce06e91c3e2000103"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('2 3 4') == '3'\nassert solution('2 3 4') == '3'\nassert solution('1 10 5') == '5'\nassert solution('2 3 4') == '3'\nassert solution('1 10 5') == '5'\n\"\"\"\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(input()) == \"3\"\nassert solution(input()) == \"5\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"6\"\nassert solution(input()) == \"3\"\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('2 3 4') == '3'\nassert solution('2 3 4') == '3'\nassert solution('1 10 5') == '5'\nassert solution('2 3 4') == '3'\nassert solution('1 10 5') == '5'\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('2 2 2') == '2'\nassert solution('2 3 4') == '3'\nassert solution('1 10 5') == '5'"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('7') == '7'\nassert solution('21') == '5'\nassert solution('21') == '5'\nassert solution('21') == '5'\nassert solution('21') == '5'\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('5') == '5'\nassert solution('7') == '7'\nassert solution('21') == '5'\n\nprint(\"Testcase 1 passed\")\nprint(\"Testcase 2 passed\")\nprint(\"Testcase 3 passed\")\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"42\") == \"5\"\nassert solution(\"7\") == \"7\"\nassert solution(\"21\") == \"5\"\nassert solution(\"63\") == \"6\"\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('\\n') == '\\n'\nassert solution('1\\n') == '1'\nassert solution('23\\n') == '2'\nassert solution('45\\n') == '4'\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('7') == '7'\nassert solution('21') == '5'\nassert solution('1') == '1'\nassert solution('0') == '0'\nassert solution('100') == '1'\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('42') == '8'\nassert solution('7') == '7'\nassert solution('21') == '5'\nassert solution('3412') == '3'\nassert solution('9999999999999') == '9'\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('21') == '5'\nassert solution('7') == '7'\nassert solution('1') == '1'\nassert solution('2') == '0'\nassert solution('3') == '1'\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('7') == '7'\nassert solution('21') == '5'\n\nprint(solution(input()))\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"7\") == \"7\"\nassert solution(\"21\") == \"5\"\nassert solution(\"1234\") == \"4\"\nassert solution(\"6\") == \"6\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdin[-1]\n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"3 4 11\") == \"26\"\nassert solution(\"2 2 50\") == \"50\"\nassert solution(\"3 5 8\") == \"0\"\nassert solution(\"3 4 4\") == \"12\"\nassert solution(\"10 5 5\") == \"0\"\n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''3 4 11''') == '26'\nassert solution('''2 2 50''') == '50'\n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''3 4 11\n4 2 5\n4 4 5 4''') == '26'\nassert solution('''2 2 50\n5 7\n4 2''') == '50'\n'''\n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''3 4 11''') == '26'\nassert solution('''2 2 50''') == '50'\nassert solution('''2 2 10''') == '50'\nassert solution('''3 3 30''') == '40'\nassert solution('''4 3 20''') == '25'\n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('3 4 11\\n4 2 5\\n4 4 5 4') == '26'\nassert solution('2 2 50\\n5 7\\n4 2') == '50'\nprint(solution(stdin))\n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''3 4 11\n4 2 5\n4 4 5 4\n''') == '26'\nassert solution('''2 2 50\n5 7\n4 2\n''') == '50'\nassert solution('''3 3 20\n5 7\n4 2 4\n''') == '24'\nassert solution('''3 2 10\n5 7\n4 2 4\n''') == '24'\nassert solution('''2 3 10\n5 7\n4 2 4\n''') == '18'\n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == expected\n\"\"\"\n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('3 4 11\\n4 2 5\\n4 4 5 4') == '26'\nassert solution('2 2 50\\n5 7\\n4 2') == '50'\nassert solution('1 1 1\\n1 1') == '1'\nassert solution('1 1 1\\n1 1\\n1 1') == '2'\nassert solution('1 1 1\\n1 1\\n1 1') == '2'\n"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution\u0435"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution\u0435"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution\u0435"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution\u0435"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution\u0435"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution\u0435"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution\u0435"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution\u0435"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution\u0435"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution\u0435"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''3''') == '3'\nassert solution('''2''') == '-1'\nassert solution('''4''') == '4'\nassert solution('''1''') == '-1'\nassert solution('''10''') == '-1'\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''3''') == '3'\nassert solution('''25''') == '20'\nassert solution('''2''') == '-1'\nassert solution('''125''') == '20'\nassert solution('''1''') == '-1'\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('3') == '3'\nassert solution('25') == '20'\nassert solution('2') == '-1'"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"-1\"\nassert solution(\"3\") == \"4\"\nassert solution(\"4\") == \"-1\"\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''1\n''') == '1'\n\nassert solution('''1\n2\n''') == '2'\n\nassert solution('''2\n''') == '-1'\n\nassert solution('''3\n''') == '3'\n\nassert solution('''4\n''') == '4'"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"-1\"\nassert solution(\"1\\n1\") == \"1\"\nassert solution(\"2\\n2\") == \"2\"\nassert solution(\"2\\n1\\n2\") == \"2\"\nassert solution(\"2\\n2\\n2\") == \"4\"\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('3\\n') == '3'\nassert solution('25\\n') == '20'\nassert solution('2\\n') == '-1'\nassert solution('\\n') == '-1'\nassert solution('\\n\\n') == '-1'\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''\n3\n''') == '3'\n\nassert solution('''\n25\n''') == '20'\n\nassert solution('''\n2\n''') == '-1'\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''3''') == '3'\nassert solution('''25''') == '20'\nassert solution('''2''') == '-1'\n\nprint(solution(input()))"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('2') == '-1'\nassert solution('25') == '20'\nassert solution('3') == '4'\nassert solution('3\\n2') == '-1'\n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('abacabac') == '8'\nassert solution('abaccaba') == '26'\nassert solution('abaccaba') == '26'\nassert solution('abacabca') == '17'\nassert solution('abacabca') == '17'\n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('abacabac') == '8'\nassert solution('abaccaba') == '26'\nassert solution('abaccaba') == '26'\nassert solution('abacabca') == '17'\nassert solution('abacabca') == '17'\n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('abacabac') == '8'\nassert solution('abaccaba') == '26'\nassert solution('abacabca') == '17'\n\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\ns = sys.stdin.readline().strip()\nb = list(map(int, sys.stdin.readline().strip().split()))\n\ni, j = 0, 0\nt = [0] * n\nfor i in range(n):\n    t[i] = 0\n    for j in range(n):\n        if s[i] == s[j]:\n            t[i] += b[j]\n\nprint(max(t))\n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('abacabac') == '8'\nassert solution('abaccaba') == '26'\nassert solution('abaccaba') == '26'\nassert solution('abacabca') == '17'\nassert solution('abacabca') == '17'\n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('abacabac') == '8'\nassert solution('abaccaba') == '26'\nassert solution('abaccaba') == '17'\nassert solution('abaccaba') == '17'\nassert solution('abaccaba') == '17'\n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''8\nabacabac\n1 1 1 1 1 1 1 1''') == '8'\nassert solution('''8\nabaccaba\n1 2 3 4 4 3 2 1''') == '26'\nassert solution('''8\nabacabca\n1 2 3 4 4 3 2 1''') == '17'\nassert solution('''6\npqrstuv\n1 1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1''') == '8'\nassert solution('''10\nabcdeabcdef\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1''') == '9'\n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''8\nabacabac\n1 1 1 1 1 1 1 1''') == '8'\nassert solution('''8\nabaccaba\n1 2 3 4 4 3 2 1''') == '26'\nassert solution('''8\nabacabca\n1 2 3 4 4 3 2 1''') == '17'\nassert solution('''10\nabcdefghij\n1 1 1 1 1 1 1 1 1 1 1''') == '26'\nassert solution('''10\nxyzabcdefghij\n1 1 1 1 1 1 1 1 1 1 1''') == '26'\n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''8\nabacabac\n1 1 1 1 1 1 1 1''') == '8'\nassert solution('''8\nabaccaba\n1 2 3 4 4 3 2 1''') == '26'\nassert solution('''8\nabacabca\n1 2 3 4 4 3 2 1''') == '17'\n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''8\nabacabac\n1 1 1 1 1 1 1 1''') == '8'\nassert solution('''8\nabaccaba\n1 2 3 4 4 3 2 1''') == '26'\nassert solution('''8\nabacabca\n1 2 3 4 4 3 2 1''') == '17'\nassert solution('''8\nabacabca\n1 2 1 1 1 1 1 1''') == '8'\n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''8\nabacabac\n1 1 1 1 1 1 1 1\n''') == '8'\nassert solution('''8\nabaccaba\n1 2 3 4 4 3 2 1\n''') == '26'\nassert solution('''8\nabcabc\n1 2 3 4 5 6 7 8\n''') == '26'\nassert solution('''8\nabacabca\n1 2 3 4 4 3 2 1\n''') == '17'\nassert solution('''8\nabacabc\n1 2 3 4 4 3 2 1\n''') == '17'\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('3 7') == 'YES'\nassert solution('100 99') == 'YES'\nassert solution('100 50') == 'NO'\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdin\n\"\"\"\n\nfrom sys import stdin, stdout\n\ninput = stdin.readline\n\nw, m = map(int, input().split())"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(input()) == 'NO'\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('3 7') == 'YES'\nassert solution('100 99') == 'YES'\nassert solution('100 50') == 'NO'\nassert solution('5 3') == 'NO'\nassert solution('1 9') == 'YES'\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1 1') == 'NO'\nassert solution('2 2') == 'NO'\nassert solution('3 3') == 'YES'\nassert solution('5 1') == 'YES'\nassert solution('7 1') == 'YES'\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('7 3') == 'YES'\nassert solution('100 99') == 'YES'\nassert solution('100 50') == 'NO'\nassert solution('100 30') == 'NO'\nassert solution('10 7') == 'NO'\n\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('3 7') == 'YES'\nassert solution('100 99') == 'YES'\nassert solution('100 50') == 'NO'\nassert solution('3 5') == 'YES'\nassert solution('5 3') == 'YES'\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('3 7') == 'YES'\nassert solution('100 99') == 'YES'\nassert solution('100 50') == 'NO'\nassert solution('4 1') == 'YES'\nassert solution('100 100') == 'YES'\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('3 7\\n') == 'YES'\nassert solution('100 99\\n') == 'YES'\nassert solution('100 50\\n') == 'NO'\nassert solution('100 99\\n') == 'NO'\nassert solution('100 50\\n') == 'NO'\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('') is None\nassert solution('0') is None\nassert solution('0 0') == 'NO'\nassert solution('1 2') == 'NO'\nassert solution('2 1') == 'NO'\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('3 2') == 'Yes\\n3 3 2 1 0'\nassert solution('13 2') == 'No'\nassert solution('1 2') == 'Yes\\n-1 -1'\nassert solution('2 3') == 'Yes\\n1 0'\nassert solution('14 5') == 'Yes\\n1 2 3 4 5'\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"6 1\") == \"Yes 1 3 2 0\"\nassert solution(\"11 10\") == \"Yes 1 3 2 0\"\nassert solution(\"9 100\") == \"No\"\nassert solution(\"9 9\") == \"No\"\nassert solution(\"11 11\") == \"Yes 0 1 2 3\"\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('2 2 1') == 'Yes 1 2 0'\nassert solution('2 2') == 'Yes 1 1 0'\nassert solution('1 2') == 'No'\nassert solution('1 2 1') == 'Yes 1 1 0'\nassert solution('1 2 1 1') == 'Yes 1 1 0'\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('3 5') == 'Yes\\n3 3 2 1 0'\nassert solution('13 2') == 'No'\nassert solution('1 2') == 'Yes\\n-1 -1'\nassert solution('14 1') == 'No'\nassert solution('1 1') == 'Yes\\n1 -1'\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(input()) == output\nFor more examples, see \"Testcases\"."
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1 2') == 'Yes\\n2 3 1 0'\nassert solution('23 5') == 'No'\nassert solution('13 2') == 'Yes\\n3 3 2 1 0'\nassert solution('1 2\\n2 3') == 'No'\nassert solution('1 2\\n2 3\\n3 2') == 'No'\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(input(\"\")) == \"Yes\"\nassert solution(input(\"3 3 2 1 0\\n\")) == \"Yes\"\nassert solution(input(\"1 2\\n\")) == \"No\"\nassert solution(input(\"2 2 1\\n\")) == \"Yes\"\nassert solution(input(\"13 2\\n\")) == \"No\"\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('23 5') == 'Yes\\n3 3 2 1 0\\n'\nassert solution('13 2') == 'No\\n'\nassert solution('1 2') == 'Yes\\n-1 -1\\n'\nassert solution('1') == 'Yes\\n-1\\n'\nassert solution('0') == 'Yes\\n0\\n'\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('3 2') == 'Yes\\n3 3 2 1 0'\nassert solution('1 2') == 'Yes\\n-1 -1'\nassert solution('2 3') == 'No'\nassert solution('1 2 3') == 'No'\nassert solution('5 3') == 'Yes\\n3 3 2 1 0'\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('23 5') == 'Yes\\n3 3 2 1 0'\nassert solution('13 2') == 'No'\nassert solution('1 2') == 'Yes\\n-1 -1'\nassert solution('7 0') == 'Yes\\n-1 -1'\nassert solution('1 1') == 'Yes\\n0 0'\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('2 3') == '2'\nassert solution('2 5') == '4'\nassert solution('4 8') == '6'\nassert solution('4 8') == '6'\n\n\n\"\"\"\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"3 5\") == \"4\"\nassert solution(\"4 8\") == \"6\"\nassert solution(\"1 2\") == \"3\"\nassert solution(\"1 1\") == \"5\"\nassert solution(\"2 1\") == \"5\"\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\n    \"\"\"3 5\n\"\"\") == \"4\"\n\nassert solution(\n    \"\"\"4 8\n\"\"\") == \"6\"\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''3 5''') == '4'\nassert solution('''4 8''') == '6'\nassert solution('''1 2''') == '2'\n'''\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == expected\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('2 2') == '4'\nassert solution('3 4') == '7'\nassert solution('10 9') == '37'\nassert solution('4 4') == '16'\nassert solution('10 10') == '60'"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"\n3 5\n\"\"\".strip()\n) == \"4\"\n\nassert solution(\n\"\"\"\n4 8\n\"\"\".strip()\n) == \"6\"\n\nassert solution(\n\"\"\"\n4 3\n\"\"\".strip()\n) == \"4\"\n\nassert solution(\n\"\"\"\n6 1\n\"\"\".strip()\n) == \"4\"\n\nassert solution(\n\"\"\"\n6 3\n\"\"\".strip()\n) == \"8\""
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''3 5''') == '4'\nassert solution('''4 8''') == '6'\nassert solution('''2 0''') == '2'\nassert solution('''2 5''') == '5'\nassert solution('''2 4''') == '6'\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''2\n0 0\n1 1''') == '1'\nassert solution('''1\n1 1''') == '-1'\n\n\n'''\nimport sys\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"\") == -1\nassert solution(\"0 0\") == 1\nassert solution(\"0 1\") == -1\nassert solution(\"1 0\") == -1\nassert solution(\"1 1\") == 1\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1\\n1\\n1\\n1') == '1'\nassert solution('2\\n0 0\\n1 1') == '1'\nassert solution('2\\n0 0\\n2 2') == '0'\nassert solution('2\\n0 1\\n0 1') == '0'\nassert solution('1\\n0 0\\n0 1') == '-1'\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('0 0\\n1 1') == '1'\nassert solution('1 1\\n1 1') == '-1'\nassert solution('2\\n0 0\\n1 1') == '1'\nassert solution('2\\n0 0\\n1 1\\n0 0') == '1'\nassert solution('2\\n1 1\\n0 0\\n0 0') == '-1'\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1\\n1') == '-1'\nassert solution('1\\n1\\n1\\n1') == '1'\nassert solution('1\\n1\\n1\\n1\\n1') == '-1'\nassert solution('2\\n1 1\\n1 0\\n1 1') == '2'\nassert solution('2\\n1 1\\n1 0\\n1 1\\n1 1') == '1'\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == ''\nassert solution(stdin) == ''\nassert solution(stdin) == ''\nassert solution(stdin) == ''\n\nprint(solution(stdin))\n\"\"\"\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''2''') == '1'\nassert solution('''0 0\n1 1''') == '1'\nassert solution('''1\n1 1''') == '-1'\nassert solution('''1 1\n1 1''') == '-1'\nassert solution('''0 1\n1 1''') == '-1'\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('0 0\\n1 1\\n') == '1'\nassert solution('2\\n0 0\\n1 1\\n') == '-1'\nassert solution('1\\n1 1\\n') == '-1'\nassert solution('0\\n1 1\\n') == '-1'\nassert solution('0 0\\n0 0\\n1 1\\n') == '-1'\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''2\n0 0\n1 1''') == '1'\nassert solution('''1\n1 1''') == '-1'\nassert solution('''3\n1 1\n0 0\n0 0''') == '0'\nassert solution('''1\n1 1\n1 1''') == '-1'\n'''\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('0 0\\n1 1') == '1'\nassert solution('1 1\\n1 1') == '-1'\n\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''4\n1\n2\n''') == '1'\nassert solution('''5\n3\n4\n''') == '6'\nassert solution('''20\n5\n6\n''') == '2'\nassert solution('''6\n4\n2\n''') == '4'\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''8\n1\n2\n''') == '1'\nassert solution('''5\n3\n4\n''') == '6'\nassert solution('''6\n4\n2\n''') == '4'\n'''\nassert solution('''20\n5\n6\n''') == '2'\n'''\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(input()) == expected\n\"\"\"\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1\\n2\\n\") == \"1\"\nassert solution(\"3\\n5\\n4\\n\") == \"4\"\nassert solution(\"3\\n2\\n4\\n\") == \"4\"\nassert solution(\"3\\n3\\n3\\n\") == \"2\"\nassert solution(\"5\\n4\\n1\\n\") == \"6\"\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('8\\n1\\n2\\n') == '1'\nassert solution('5\\n3\\n4\\n') == '6'\nassert solution('6\\n4\\n2\\n') == '4'\nassert solution('20\\n5\\n6\\n') == '2'\nassert solution('10\\n1\\n2\\n') == '2'\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('8\\n1\\n2\\n') == '1'\nassert solution('5\\n3\\n4\\n') == '6'\nassert solution('20\\n5\\n6\\n') == '4'\nassert solution('20\\n1\\n6\\n') == '2'\nassert solution('20\\n5\\n6\\n') == '4'\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == ''\n'''\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('8\\n1\\n2\\n') == '1'\nassert solution('5\\n3\\n4\\n') == '6'\nassert solution('20\\n5\\n6\\n') == '2'\n\n\"\"\""
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('8') == '1'\nassert solution('5') == '6'\nassert solution('6') == '4'\nassert solution('20') == '2'\nassert solution('50') == '12'\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''8\n1\n2\n''') == '1'\n\nassert solution('''5\n3\n4\n''') == '6'\n\nassert solution('''6\n4\n2\n''') == '4'\n\nassert solution('''20\n5\n6\n''') == '2'\n\nassert solution('''30\n5\n6\n''') == '3'"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"NO\"\nassert solution(\"1\") == \"NO\"\nassert solution(\"1 2 5 3 4 6\") == \"YES\"\nassert solution(\"01110\") == \"YES\"\nassert solution(\"01010\") == \"NO\"\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdin\n\n\n-----\n\n\"\"\"\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1 2 5 3 4 6') == 'YES'\nassert solution('01110') == 'YES'\nassert solution('01010') == 'NO'\n\"\"\"\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('2\\n1 1\\n0') == 'YES'\nassert solution('2\\n1 1\\n1') == 'NO'\nassert solution('10\\n2 2 1 3 4 1 1 2\\n0110000') == 'YES'\nassert solution('10\\n2 2 1 3 4 1 1 2\\n0101001') == 'NO'\n\"\"\"\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n'''\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"1 2 5 3 4 6\") == \"YES\"\nassert solution(\"01110\") == \"YES\"\nassert solution(\"01010\") == \"NO\"\nassert solution(\"000100\") == \"NO\"\nassert solution(\"010001\") == \"NO\"\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''\n4\n1 2 3 4\n0100\n''') == \"YES\"\n\nassert solution('''\n4\n1 2 3 4\n0100\n''') == \"NO\"\n\nassert solution('''\n3\n1 1 1\n000\n''') == \"YES\"\n\nassert solution('''\n3\n1 1 1\n000\n''') == \"NO\"\n\nassert solution('''\n3\n1 2 2\n000\n''') == \"NO\""
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"6\") == \"YES\"\nassert solution(\"1 2 5 3 4 6\") == \"YES\"\nassert solution(\"01110\") == \"YES\"\nassert solution(\"01010\") == \"NO\"\nassert solution(\"0110001010100001\") == \"YES\"\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == 'YES'\nassert solution
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''6\n1 2 5 3 4 6\n01110\n''') == 'YES'\nassert solution('''6\n1 2 5 3 4 6\n01010\n''') == 'NO'\nassert solution('''1\n1\n''') == 'NO'\nassert solution('''2\n1 2\n1 2\n''') == 'YES'\nassert solution('''1\n1\n''') == 'NO'\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1a') == '1'\nassert solution('1b') == '1'\nassert solution('1c') == '1'\nassert solution('1d') == '1'\nassert solution('1e') == '1'\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\n    '1f'\n) == '1'\n\nassert solution(\n    '2d'\n) == '10'\n\nassert solution(\n    '4a'\n) == '11'\n\nassert solution(\n    '5e'\n) == '18'\n\"\"\"\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == \"10\"\nassert solution(stdin) == \"11\"\nassert solution(stdin) == \"18\"\nassert solution(stdin) == \"19\"\nassert solution(stdin) == \"25\"\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1f') == '1'\nassert solution('2d') == '10'\nassert solution('4a') == '11'\nassert solution('5e') == '18'\n\n\n\n'''\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1f') == '1'\nassert solution('2d') == '10'\nassert solution('4a') == '11'\nassert solution('5e') == '18'"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(1f) == \"1\"\nassert solution(2d) == \"10\"\nassert solution(4a) == \"11\"\nassert solution(5e) == \"18\"\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"1f\") == \"1\"\nassert solution(\"2d\") == \"10\"\nassert solution(\"4a\") == \"11\"\nassert solution(\"5e\") == \"18\"\nassert solution(\"2f\") == \"10\"\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1f') == '1'\nassert solution('2d') == '10'\nassert solution('4a') == '11'\nassert solution('5e') == '18'\nassert solution('6a') == '19'\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('') == '10'\nassert solution('1a') == '1'\nassert solution('2f') == '10'\nassert solution('4d') == '11'\nassert solution('5e') == '18'\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1f') == '1'\nassert solution('2d') == '10'\nassert solution('4a') == '11'\nassert solution('5e') == '18'\nassert solution('5e') == '18'\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('6 2\\n1 0 1 1 1 1\\n2 10\\n4 7') == '='\nassert solution('3 3\\n1 0 2\\n2 5\\n2 4') == '<'\n\n\n\"\"\"\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdin\n'''\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"6 2\\n1 0 1 1 1 1\\n2 10\\n4 7\\n\") == \"=\"\nassert solution(\"3 3\\n1 0 2\\n2 5\\n2 4\\n\") == \"<\"\nassert solution(\"7 16\\n15 15 4 0 0 7 10\\n7 9\\n4 8 0 3 1 5 0\\n\") == \">\"\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"6 2\\n1 0 1 1 1 1\\n2 10\\n4 7\\n\") == '<'\nassert solution(\"3 3\\n1 0 2\\n2 5\\n2 4\\n\") == '<'\nassert solution(\"7 16\\n15 15 4 0 0 7 10\\n7 9\\n4 8 0 3 1 5 0\\n\") == '>'\nassert solution(\"1 1\\n1 1\\n\") == '='\nassert solution(\"6 6\\n1 0 2\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"1 0 1 1 1 1\") == \"=\", \"No problem with trivial case\"\nassert solution(\"2 10\") == \"<\", \"No problem with trivial case\"\nassert solution(\"4 7\") == \">\", \"No problem with trivial case\"\nassert solution(\"3 3\") == \"=\", \"No problem with trivial case\"\nassert solution(\"7 16\") == \"<\", \"No problem with trivial case\"\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"\n6 2\n1 0 1 1 1 1\n2 10\n4 7\n\"\"\"\n    ) == '<'\n\nassert solution(\n\"\"\"\n3 3\n1 0 2\n2 5\n2 4\n\"\"\"\n    ) == '='\n\nassert solution(\n\"\"\"\n7 16\n15 15 4 0 0 7 10\n7 9\n4 8 0 3 1 5 0\n\"\"\"\n    ) == '>'\n\nassert solution(\n\"\"\"\n10 10\n
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('3 3') == '=', 'Incorrect result'\nassert solution('7 16') == '>', 'Incorrect result'\nassert solution('4 8 0 3 1 5 0') == '<', 'Incorrect result'\nassert solution('15 15 4 0 0 7 10') == '=', 'Incorrect result'\nassert solution('6 2') == '=', 'Incorrect result'\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('6 2\\n1 0 1 1 1 1\\n2 10\\n4 7') == '='\nassert solution('3 3\\n1 0 2\\n2 5\\n2 4\\n') == '<'\nassert solution('7 16\\n15 15 4 0 0 7 10\\n7 9\\n4 8 0 3 1 5 0\\n') == '>'\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('6 2\\n1 0 1 1 1 1\\n2 10\\n4 7\\n') == '<'\nassert solution('3 3\\n1 0 2\\n2 5\\n2 4\\n') == '<'\nassert solution('7 16\\n15 15 4 0 0 7 10\\n7 9\\n4 8 0 3 1 5 0\\n') == '>'\nassert solution('7 16\\n15 15 4 0 0 7 10\\n7 9\\n4 8 0 3 1 5 0\\n') == '='\nassert solution('1 0 0 1 0 1 1 1 1 0 0 0 0 0 0 0 1\\n1 1 0 0 1 0 1 1 0 0 0 0 0 0 0 0 0 1\\n1 1 0 0 1 0 1 1 0 0 0 0 0 0 0 0 0 0 1\\n1 1 0 0 1 0 1 1 0 0 0 0 0 0 0 0 0 0 1\\n1 1 0 0 1 0 1 1 0 0 0 0 0 0 0 0 0 0 1\\n1 1 0 0 1 0 1 1 0 0 0 0 0 0 0 0 0 0 1\\n1 1 0 0 1 0 1 1 0 0 0 0 0 0 0 0 0 0 1\\n1 1 0 0 1 0 1 1 0 0 0 0 0 0 0 0 0 0 1\\n1 1 0 0 1 0 1 1 0 0 0 0 0 0 0 0 0 0 1\\n1 1 0 0 1 0 1 1 0 0 0 0 0 0 0 0 0 0 1\\n1 1 0 0 1 0 1 1 0 0 0 0 0 0 0 0 0 0 1\\n1 1 0 0 1 0 1 1 0 0 0 0 0 0 0 0 0 0 1\\n1 1 0 0 1 0 1 1 0 0 0 0 0 0 0 0 0 0 1\\n1 1 0 0 1 0 1 1 0 0 0 0 0 0 0 0 0 0 1\\n1 1 0 0 1 0 1 1 0 0 0 0 0 0 0 0 0 0 1\\n1 1 0 0 1 0 1 1 0 0 0 0 0 0 0 0 0 0 1\\n1 1 0 0 1 0 1 1 0 0 0 0 0 0 0 0 0 0 1\\n1 1 0 0 1 0 1 1 0 0 0 0 0 0 0 0 0 0 1\\n1 1 0 0 1 0 1 1 0 0 0 0 0 0 0 0 0 0 1\\n1 1 0 0 1 0 1 1 0 0 0 0 0 0 0 0 0 0 1\\n1 1 0 0 1 0 1 1 0 0 0 0 0 0 0 0 0 0 1\\n1 1 0 0 1 0 1 1 0 0 0 0 0 0 0 0 0 0 1\\n1 1 0 0 1 0 1 1 0 0 0 0 0 0 0 0 0 0 1\\n1 1 0 0 1 0 1 1 0 0 0 0 0 0 0 0 0 0 1\\n1 1 0 0 1 0 1 1 0 0 0 0 0 0 0 0 0 0 1\\n1 1 0 0 1 0 1 1 0 0 0 0 0 0 0 0 0 0 1\\n1 1 0 0 1 0 1 1 0 0 0 0 0 0 0 0 0 0 1\\n1 1 0 0 1 0 1 1 0 0 0 0 0 0 0 0 0 0 1\\n1 1 0 0 1 0 1 1 0 0 0 0 0 0 0 0 0 0 1\\n1 1 0 0 1 0 1 1 0 0 0 0 0 0 0 0 0 0 1\\n1 1 0 0 1 0 1 1 0 0 0 0 0 0 0 0 0 0 1\\n1 1 0 0 1 0 1 1 0 0 0 0 0 0 0 0 0 0 1\\n1 1 0 0 1 0 1 1 0 0 0 0 0 0 0 0 0 0 1\\n1 1 0 0 1 0 1 1 0 0 0 0 0 0 0 0 0 0 1\\n1 1 0 0 1 0 1 1 0 0 0 0 0 0 0 0 0 0 1\\n1 1 0 0 1 0 1 1 0 0 0 0 0 0 0 0 0 0 1\\n1 1 0 0 1 0 1 1 0 0 0 0 0 0 0 0 0 0 1\\n1 1 0 0 1 0 1 1 0 0 0 0 0 0 0 0 0 0 1\\n1 1 0 0 1 0 1 1 0 0 0 0 0 0 0 0 0 0 1\\n1 1 0 0 1 0 1 1 0 0 0 0 0 0 0 0 0 0 1\\n1 1 0 0 1 0 1 1 0 0 0 0 0 0 0 0 0 0 1\\n1 1 0 0 1 0 1 1 0 0 0 0 0 0 0 0 0 0 1\\n1 1 0 0 1 0 1 1 0 0 0 0 0 0 0 0 0 0 1\\n1 1 0 0 1 0 1 1 0 0 0 0 0 0 0 0 0 0 1\\n1 1 0 0 1 0 1 1 0 0 0 0 0 0 0 0 0 0 1\\n1 1 0 0 1 0 1 1 0 0 0 0 0 0 0 0 0 0 1\\n1 1 0 0 1 0 1 1 0 0 0 0 0 0 0 0 0 0 1\\n1 1 0 0 1 0 1 1 0 0 0 0 0 0 0 0 0 0 1\\n1 1 0 0 1 0 1 1 0 0 0 0 0 0 0 0 0 0 1\\n1 1 0 0 1 0 1 1 0 0 0 0 0 0 0 0 0 0 1\\n1 1 0 0 1 0 1 1 0 0 0 0 0 0 0 0 0 0 1\\n1 1 0 0 1 0 1 1 0 0 0 0 0 0 0 0 0 0 1\\n1 1 0 0 1 0 1 1 0 0 0 0 0 0 0 0 0 0 1\\n1 1 0 0 1 0 1 1 0 0 0 0 0 0 0 0 0 0 1\\n1 1 0 0 1 0 1 1 0 0 0 0 0 0 0 0 0 0 1\\n1 1 0 0 1 0 1 1 0 0 0 0 0 0 0 0 0 0 1\\n1 1 0 0 1 0 1 1 0 0 0 0 0 0 0 0 0 0 1\\n1 1 0 0 1 0 1 1 0 0 0 0 0 0 0 0 0 0 1\\n1 1 0 0 1 0 1 1 0 0 0 0 0 0 0 0 0 0 1\\n1 1 0 0 1 0 1 1 0 0 0 0 0 0 0 0 0 0 1\\n1 1 0 0 1 0 1 1 0 0 0 0 0 0 0 0 0 0 1\\n1 1 0 0 1 0 1 1 0 0 0 0 0 0 0 0 0 0 1\\n1 1 0 0 1 0 1 1 0 0 0 0 0 0 0 0"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('4 2\\n1 0 1 1 1\\n2 10\\n4 7\\n') == '=', 'Error'\n\"\"\""
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 1\\n1 2 1\") == \"BitLGM\"\nassert solution(\"1\\n2\\n1\") == \"BitAryo\"\nassert solution(\"2\\n1 2\\n1 2\") == \"BitLGM\"\nassert solution(\"2\\n1 2\\n2 1\") == \"BitAryo\"\nassert solution(\"2\\n1 2\\n2 2\") == \"BitLGM\"\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('1 1') == 'BitLGM'\nassert solution('1 2') == 'BitAryo'\nassert solution('1 2 1') == 'BitLGM'\nassert solution('2 2 1') == 'BitAryo'\nassert solution('1 1') == 'BitLGM'\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''1 1\n2 2''') == 'BitLGM'\nassert solution('''1 2 1\n1 1''') == 'BitAryo'\nassert solution('''1 2 1\n2 2''') == 'BitLGM'\nassert solution('''1 1\n2 1\n1 2''') == 'BitAryo'\nassert solution('''1 1\n2 2\n1 2''') == 'BitLGM'\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(input()) == 'BitLGM'\nassert solution(input()) == 'BitAryo'\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''\\\n2\n1 1\n''') == 'BitLGM'\nassert solution('''\\\n2\n1 2\n''') == 'BitAryo'\nassert solution('''\\\n3\n1 2 1\n''') == 'BitAryo'\nassert solution('''\\\n4\n1 2 3 4\n''') == 'BitLGM'\nassert solution('''\\\n7\n1 2 3 4 5 6 7\n''') == 'BitLGM'\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('1\\n1') == 'BitLGM'\nassert solution('2\\n1 2') == 'BitAryo'\nassert solution('2\\n2 1') == 'BitAryo'\nassert solution('2\\n2 2') == 'BitLGM'\nassert solution('2\\n1 1') == 'BitAryo'\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdin[4]"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"1\\n1\\n\") == \"BitLGM\"\nassert solution(\"2\\n1 2\\n\") == \"BitAryo\"\n\n\n\"\"\"\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''1 1''') == 'BitLGM'\nassert solution('''1 2 1''') == 'BitAryo'\nassert solution('''1 2 1\n1 2 1''') == 'BitAryo'\nassert solution('''2\n1 1\n''') == 'BitLGM'\nassert solution('''2\n1 2 1\n''') == 'BitAryo'\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"3 4\\n6 2 8\") == \"4\"\nassert solution(\"3 6\\n9 1 14\") == \"1\"\nassert solution(\"3 6\\n9 1 14\\n5 4 8\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"2 3\\n1 2 3\") == \"\"\nassert solution(\"3 4\\n6 2 8\") == \"\"\nassert solution(\"3 6\\n9 1 14\") == \"\"\nassert solution(\"3 6\\n1 2 3\") == \"\"\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('3 4\\n6 2 8') == '4'\nassert solution('3 6\\n9 1 14') == '1'\nassert solution('3 6\\n-1 -1 -1') == '0'\nassert solution('3 6\\n2 2 2') == '0'\nassert solution('3 6\\n2 2 3') == '0'\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('inputs/1.in') == '4'\n\"\"\"\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1 10\\n2 9 8 7 6') == '1'\nassert solution('2 9\\n2 8 7 6') == '0'\nassert solution('2 9\\n2 8 7 6\\n2 7 6\\n2 6 5 4 3 1') == '1'\nassert solution('2 10\\n2 9 8 7 6\\n2 7 6\\n2 6 5 4 3 1') == '0'\n\n\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('2 1') == '1'\nassert solution('3 3') == '1'\nassert solution('3 4') == '1'\nassert solution('3 5') == '1'\nassert solution('3 6') == '1'\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"3 6\\n9 1 14\") == \"1\"\nassert solution(\"3 4\\n6 2 8\\n\") == \"4\"\nassert solution(\"3 4\\n9 1 14\\n\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''3 4\n6 2 8''') == '4'\nassert solution('''3 6\n9 1 14''') == '1'\n'''\nn = int(stdin.readline())\nk = int(stdin.readline())\n\na = list(map(int, stdin.readline().split()))"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('5 4') == '4'\nassert solution('3 6') == '1'\nassert solution('6 3') == '0'\nassert solution('9 1 14') == '1'"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''4 2''') == 'YES'\nassert solution('''6 3''') == 'NO'\nassert solution('''3 2''') == 'YES'\nassert solution('''7 3''') == 'NO'\nassert solution('''8 7''') == 'YES'\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''4 2\naabb\n''') == 'YES'\nassert solution('''6 3\naacaab\n''') == 'NO'\nassert solution('''3 3\naaaa\n''') == 'NO'\nassert solution('''4 2\naabb\n''') == 'NO'\nassert solution('''7 4\naaaaaa\n''') == 'NO'\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''4 2\naabb\n''') == 'YES'\n\nassert solution('''6 3\naacaab\n''') == 'NO'\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('5 2') == 'YES'\nassert solution('5 3') == 'NO'\nassert solution('4 2') == 'YES'\nassert solution('4 2') == 'YES'\nassert solution('4 4') == 'YES'\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('4 2\\naabb') == 'YES'\nassert solution('6 3\\naacaab') == 'NO'\nassert solution('5 2\\naab') == 'NO'\n\"\"\"\nfrom sys import stdin\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('6 2') == 'NO'\nassert solution('4 2') == 'YES'\nassert solution('6 3') == 'NO'\nassert solution('2 2') == 'YES'\nassert solution('2 1') == 'YES'\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''4 2\naabb\n''') == 'YES'\n\nassert solution('''6 3\naacaab\n''') == 'NO'\n\nassert solution('''3 2\nabc\n''') == 'YES'\nassert solution('''2 1\na\n''') == 'NO'\nassert solution('''2 1\na\n''') == 'YES'\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('4 2\\naabb') == 'YES'\nassert solution('6 3\\naacaab') == 'NO'\nassert solution('5 6\\naabbccdd') == 'YES'\nassert solution('4 4\\naaabbb') == 'YES'\nassert solution('3 3\\naaaa') == 'YES'\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\n'''\n5 2\naabb\n'''\n) == 'YES'\n\nassert solution(\n'''\n5 2\naacaab\n'''\n) == 'NO'\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('4 2\\naabb\\n') == 'YES'\nassert solution('6 3\\naacaab\\n') == 'NO'\nassert solution('4 2\\naabb\\n') == 'YES'\nassert solution('6 3\\naacaab\\n') == 'NO'\nassert solution('4 2\\naabb\\n') == 'YES'\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1\\n1') == '0'\nassert solution('2\\n1') == '1'\nassert solution('3\\n1') == '0'\nassert solution('4\\n1') == '1'\nassert solution('5\\n1') == '0'\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''2\n3 3\n\n''') == '1'\nassert solution('''3\n5 6 5\n\n''') == '2'\nassert solution('''9\n2 1 3 5 4 1 2 3 1\n\n''') == '3'\nassert solution('''9\n2 1 3 5 4 1 2 3 1\n\n''') == '2'\nassert solution('''10\n3 3 3 3 3 3 3 3 3 3 3\n\n''') == '1'\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''3\n1 2 3''') == '3'\nassert solution('''9\n2 1 3 5 4 1 2 3 1''') == '3'\nassert solution('''8\n2 1 3 5 4 1 2 3 1''') == '3'\nassert solution('''8\n2 3 2 1 3 5 4 1 2''') == '3'\nassert solution('''5\n5 4 3 2 1''') == '3'\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''3\n3 3\n3 3\n''') == '3'\nassert solution('''5\n5 6 5\n3 4 3\n4 1 2\n1 2 3\n''') == '3'\nassert solution('''5\n5 6 5\n5 6 5\n''') == '0'\nassert solution('''4\n1 2 2 3\n3 4 4\n5 6 7\n8 9 9\n''') == '2'\nassert solution('''10\n1 2 2 3 4 5 6 7 8 9 10\n''') == '3'\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1\\n3') == '1'\nassert solution('2\\n3') == '1'\nassert solution('3\\n3') == '0'\nassert solution('9\\n1') == '3'\nassert solution('1\\n2') == '1'\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''2\n3 3''') == '1'\nassert solution('''9\n2 1 3 5 4 1 2 3 1''') == '3'\n\nprint('All tests passed successfully!')\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1\\n1') == '0'\nassert solution('2\\n1') == '0'\nassert solution('2\\n1 2') == '1'\nassert solution('2\\n1 2 3') == '2'\nassert solution('2\\n1 2 3 4') == '1'\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1\\n1') == '0'\nassert solution('1\\n1 2\\n3') == '1'\nassert solution('2\\n1 1\\n2 2\\n3') == '1'\nassert solution('1\\n1 2\\n3 4\\n2\\n3') == '0'\nassert solution('1\\n1 2\\n3 4\\n2\\n5') == '2'\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''3\n3 3\n\n2 1 3\n\n1 2 3\n''') == '1'\nassert solution('''9\n2 1 3 5 4 1 2 3 1\n''') == '3'\nassert solution('''9\n2 1 3 5 4 1 2 3 1\n''') == '3'\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('10 3 2') == '3/10'\nassert solution('7 1 2') == '3/7'\nassert solution('10 6 2') == '1/4'\nassert solution('7 1 2') == '3/7'\n\n\n\n\"\"\"\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"10 3 2\") == \"3/10\"\nassert solution(\"7 1 2\") == \"3/7\"\nassert solution(\"10 4 2\") == \"6/10\"\nassert solution(\"5 6 2\") == \"2/5\"\nassert solution(\"100 2 3\") == \"3/100\"\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('10 3 2') == '3/10'\nassert solution('7 1 2') == '3/7'\nassert solution('7 0 3') == '1/3'\nassert solution('0 2 5') == '1/10'\nassert solution('0 5 3') == '0'\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('10 3 2') == '3/10'\nassert solution('7 1 2') == '3/7'\n\n\n\n\n\n\"\"\"\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(input()) == '3/10'\n\"\"\"\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"10 3 2\") == \"3/10\"\nassert solution(\"7 1 2\") == \"3/7\"\nassert solution(\"10 1 2\") == \"3/10\"\nassert solution(\"7 1 2\") == \"3/7\"\nassert solution(\"10 3 2\") == \"3/10\"\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('5 3 2') == '3/10'\nassert solution('7 1 2') == '3/7'\nassert solution('100 4 2') == '1/100'\nassert solution('100 4 1') == '100/100'\nassert solution('100 5 2') == '5/100'\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('10 3 2') == '3/10'\nassert solution('10 3 2') == '3/10'\nassert solution('7 1 2') == '3/7'\nassert solution('7 1 2') == '3/7'\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('10 3 2') == '3/10'\nassert solution('7 1 2') == '3/7'\nassert solution('7 3 1') == '6/7'\nassert solution('7 3 2') == '3/7'\nassert solution('7 3 3') == '7/7'\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('3 7 0') == '-'\nassert solution('2 0 1') == '+'\nassert solution('1 1 0') == '0'\nassert solution('0 0 1') == '?'\n\n\n\"\"\"\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"3 7 0\") == '-'\nassert solution(\"2 0 1\") == '+'\nassert solution(\"1 1 0\") == '0'\nassert solution(\"0 0 1\") == '?'\nassert solution(\"0 0 2\") == '?'\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('3 7 0\\n') == '-'\nassert solution('2 0 1\\n') == '+'\nassert solution('1 1 0\\n') == '0'\nassert solution('0 0 1\\n') == '?'\n\nassert solution('3 7 0\\n') == '-'\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('3 7 0') == '-'\nassert solution('2 0 1') == '+'\nassert solution('1 1 0') == '0'\nassert solution('0 0 1') == '?'\nassert solution('0 0 0') == '?'"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdin[0]"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"3 7 0\") == \"-\nassert solution(\"2 0 1\") == \"+\nassert solution(\"1 1 0\") == \"0\"\nassert solution(\"0 0 1\") == \"?\"\nassert solution(\"0 0 2\") == \"?\"\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"3 7 0\"\"\") == \"-\", \"solution(3,7,0) == -\"\nassert solution(\n\"\"\"2 0 1\"\"\") == \"+\", \"solution(2,0,1) == +\"\nassert solution(\n\"\"\"1 1 0\"\"\") == \"0\", \"solution(1,1,0) == 0\"\nassert solution(\n\"\"\"0 0 1\"\"\") == \"?\", \"solution(0,0,1) ==?\"\n\n\n-----Alternate Solutions (Beginner Version)-----\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('3 7 0') == '-'\nassert solution('2 0 1') == '+'\nassert solution('1 1 0') == '0'\nassert solution('0 0 1') == '?'\nassert solution('0 0 1') == '?'\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''5''') == '3'\nassert solution('''RURUU''') == '3'\nassert solution('''-2 3''') == '3'\nassert solution('''1 1''') == '0'\nassert solution('''RULR''') == '-1'\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''5\nRURUU\n-2 3\n''') == '3'\n\nassert solution('''4\nRULR\n1 1\n''') == '0'\n\nassert solution('''3\nUUU\n100 100\n''') == '-1'\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''\n5\nRURUU\n-2 3\n''') == '3'\n\nassert solution('''\n4\nRULR\n1 1\n''') == '0'\n\nassert solution('''\n3\nUUU\n100 100\n''') == '-1'\n\nassert solution('''\n6\nLLLLLLR\n-1 -1\n''') == '0'\n\nassert solution('''\n10\nLLLLLLLLLLR\n4 3\n''') == '6'\n'''\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('RURUU\\n-2 3') == '3'\nassert solution('RULR\\n1 1') == '0'\nassert solution('UUU\\n100 100') == '-1'\nassert solution('LLLL\\n100 100') == '-1'\nassert solution('RRRR\\n100 100') == '-1'\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''5\nRURUU\n-2 3\n''') == '3'\n\nassert solution('''4\nRULR\n1 1\n''') == '0'\n\nassert solution('''3\nUUU\n100 100\n''') == '-1'\n\nassert solution('''1\nR\n-1 1\n''') == '-1'\n\nassert solution('''6\nRDRRLDLLRR\n1 1\n''') == '1'"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''4\nRDDDD\n1 1''') == '3'\nassert solution('''4\nRURUU\n-2 3''') == '3'\nassert solution('''3\nUURRUUU\n-1 -1''') == '0'\nassert solution('''4\nRULR\n1 1''') == '0'\nassert solution('''5\nDDUDRDDUUULURUDDLLRLRRRRRRUUUUDRLUUDDUUDDLLDDDDDLRRRRRRRUUUDDDDLLRLDUDDRUUDDLLRRRUUUDDLRLDUDDRUUDDLLRRRRRRRRRRUUUDDDDRUUDDLLRRRRRRUUUDDDDRUUDDLLRDRRLDUDDRULRRUUDDRRRUUUDDLRRRUUUDDDLLRLDDRRLDUDDLLRLRRRRRRUUUDDDDRURURDULRUDUDRRLRRLUDURDDURULRRRLUDDRDDDDLRUUUDDRRLDURDDDLLDDDRULDUDRUUDDURDRUDDRRUUUDDDUUDDLLDDRURDULRUDDDLLDDRULRRRRRRUDDDDUUDDLLDDDRUDDUUDDLLDDDRUUUDDDRUUDDRUUUUDUUUDDLRRRRRRUUUDUDDLRLDUDDRUUDDDRUUDDDRULRUUUDULRRUDDRLUUDURDUUDDLRLRRLRUUUDDRUDDURUDULRULRRURUUDLDRRLDUUDDRRLDDRUDRUUUDDDRURDULRDRLRRUDDUUDDLLDDRUDRDDDUUUDDDRUDDLRRLRUDDUUDULRLRRUUDULRRUULUUUDDLRRRRUUUDDLLDRUDURUUDLRLDRULDDUUDRUUUDDRRLRUUUDDRDRLUUDDUUDDRLRRDDRUUUDDUUDDRDRRUUDULDULRRUDDLLRRRUUUUDDDRUUUDDLRRUUUDULRRUDDRUUUDDULUDULRRUDDRUUDDRUUDUDRUUUDDLRRRRRRUUUUUDULRRUDULRUUDDLRRRUUUDDLRUUUDDRLLRLUUUDDLLDRURUUDDDRUDDLLDRRUUUUUDDDRLRUUDDRRRRUUUDUUDLRLDDRRRRUUUUUUDULDRRLRUUUUDDRUDDRUUUUDDDRUDDDRRUUUUUDDRDUUDDRUUDDDRULRUUUDDRDDRUUUUDDLRRRRRUUUUUDDRULRRUUUDDLLDDRRLRUUUDDRDDDRUUDDDRLUUDDRDLRRUUUDDDRDRUUUUDDDRULRRUUUDDDLRRRUUUDDDRUDDLRRUUUUDDRLRRURDRULUUUDDLRRURUUDDDDRULDDRRLDUDDRDLRDRUUDUUDDDRULRUUDDDRULRDRRUUUDDDRULURUDDRLLRLRUUDDDDUUDDDRUDRUUDDRURDULRDDDDUUUUUDULDRRDRUUUDDDRULULUDDLRRDDDDUUUDDRULRULRLRRUUUDDLRRUUUDDLRRUUDDLRULULDDRLDRRUUUDDDRULULUUUDDLLLRRUUUDDDRULULUUDULRLRRRRUUUUUDDLRLRRLDUUDDRULRRDRDDRUUUDULDUDDLRLRRRRRRUUUDDLRLRLRLRRRRRUUUDDRDRUDDDRLDRDLRRUUUDDRULRULRULULRRUUUDULDRLLLRRUUUDDLRRDRLRUUDDDRULRUDDRLRRULDUDDLRRULDDRULRLRRUUUDDLRRDLRLDRDRUUUUDDDRDRUUUUDDLRRLLRUUUUDDDRULRDULRUDUULRDLRRLLRRUUUUDDDRULULRRURUUDDDRULRLRRUUUDDDRDRUUUUDDLRLRRULDRRLRRUUUDUUDDRULRLRRUUUUDDRURRLUDLRRUUUUDDDRULRULRULUDULRRRUUUDUDRUDDRURRLUDLRRLRRUUUDDDRULULULRULDDULRULRDRDUUUUUDRLDLRUUUDDDRULDRULRULDRULRLRRUUUDDDRULULDRRLRUUUDDLRRULRLDDRRRUUUUDDULDRUUDDRUULRRRUUUDDDRULULRRRRUUUUDDDRULRLRLDRRLDUUDDRULRLUDDRDRDUUUUDDDRULRLRLRLRRUUUUDDDRULULULURUUUDDLRLRRRRUUUUDDRULULULRRUUUDDLRRULULRLRRUUUUDDLRRULULULRRRRUUUUDDRULULULURDDRRLUUUDULURUUUDDLRRRRULRUUUDDDRULULULRLRLRRUUUDDDRULULDRLRRUUUUUDDDRULULULRLRLUDDLRRLLRUUUUDDDRULULULRLULRLRLDULRULDLRUUUUDDLRRULULULULURUUUUDDLRLRULLRRUUUUDDLRLULULDLRRRLUUUUDDLRLULULULRLRRRUUUUDDDRULULULULRRRLUUUUDDLRLRLUL"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"5\\nRURUU\\n-2 3\\n\") == \"3\"\nassert solution(\"4\\nRULR\\n1 1\\n\") == \"0\"\nassert solution(\"3\\nUUU\\n100 100\\n\") == \"-1\"\n\n\n\"\"\"\nfrom collections import deque\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"RURUU\") == \"3\"\nassert solution(\"RULR\") == \"0\"\nassert solution(\"RULRUDUDDUDUDD\") == \"-1\"\nassert solution
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''6 10\n010010\n5 3\n10101\n1 0\n0\n2 0\n01\n''') == '3'\n\nassert solution('''100 10\n01000\n1 2\n1 2\n0\n0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n1 0\n0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0\n1 0\n0\n1 0"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''6 10\n010010\n5 3\n10101\n1 0\n0\n2 0\n01\n''') == '3'\nassert solution('''6 10\n6 7\n3 2\n1 1\n0\n2 0\n1\n''') == '0'\nassert solution('''6 10\n4 1\n10101\n1 0\n0\n2 0\n01\n''') == '1'\nassert solution('''6 10\n1 1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\n\nfrom typing import List\n\nT = int(input())\nfor _ in range(T):\n    n, x = map(int, input().split())\n    s = input()\n    r = 0\n    for i in range(n):\n        if s[i] == '0':\n            r += 1\n        else:\n            r -= 1\n        if r == x:\n            r = 0\n            print(i + 1)\n            break\n    else:\n        print(-1)"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1 0\\n1 0\\n0\\n1 0\\n0\\n0\\n0\\n0\\n0\\n1 1\\n0\\n1 0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('010010') == 3\nassert solution('10101') == 1\nassert solution('11100') == -1\nassert solution('1111010101110101010111') == 12\nassert solution('01') == 1\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == ''\n\n'''"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"010010\") == \"3\"\nassert solution(\"01\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"1\") == \"1\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('010010') == 3\nassert solution('10101') == 0\nassert solution('0') == -1\nassert solution('01') == -1\nassert solution('1010') == 1\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('00010') == '1'\nassert solution('10010') == '5'\nassert solution('01010') == '3'\nassert solution('10101') == '0'\nassert solution('00101') == '1'\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('') == -1\n'''\n\n'''\nThe code is supposed to give\n\nTrue\nTrue\nTrue\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"30020 3\") == \"1\"\nassert solution(\"100 9\") == \"2\"\nassert solution(\"10203049 2\") == \"3\"\nassert solution(\"1022001 5\") == \"4\"\nassert solution(\"001009 1\") == \"1\"\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''30020 3''') == '1'\nassert solution('''100 9''') == '2'\nassert solution('''10203049 2''') == '3'\nassert solution('''116912312 1234''') == '10'\nassert solution('''3456789 123456789 123456789''') == '0'\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"30020 3\") == \"1\"\nassert solution(\"100 9\") == \"2\"\nassert solution(\"10203049 2\") == \"3\"\n\n\n-----\n\n\"\"\"\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('30020 3') == '1'\nassert solution('100 9') == '2'\nassert solution('10203049 2') == '3'\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"30020 3\") == \"1\"\nassert solution(\"100 9\") == \"2\"\nassert solution(\"10203049 2\") == \"3\"\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"30020 3\") == \"1\"\nassert solution(\"100 9\") == \"2\"\nassert solution(\"10203049 2\") == \"3\"\nassert solution(\"0\") == \"1\"\nassert solution(\"1000000000\") == \"2\"\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"30020 3\") == \"1\"\nassert solution(\"100 9\") == \"2\"\nassert solution(\"10203049 2\") == \"3\"\n\n\n-----\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('100 9') == '1'\nassert solution('30020 3') == '1'\nassert solution('10203049 2') == '3'\nassert solution('10203049 0') == '0'\n\n\n\n\"\"\"\n\nfrom typing import Tuple"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\n    '30020 3'\n) == '1'\nassert solution(\n    '100 9'\n) == '2'\nassert solution(\n    '10203049 2'\n) == '3'\n\n\n\n\n\"\"\""
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('30020 3') == '1'\nassert solution('100 9') == '2'\nassert solution('10203049 2') == '3'\nassert solution('1023005 1') == '3'\nassert solution('100203049 1') == '0'\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''1 3 8 1 1''') == '3 2 3'\nassert solution('''4 2 9 4 2''') == '2 1 1'\nassert solution('''5 5 25 4 3''') == '1 1 1'\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\n'''\n1 3 8 1 1\n'''\n    ) == '3 2 3'\n\nassert solution(\n'''\n4 2 9 4 2\n'''\n    ) == '2 1 1'\n\nassert solution(\n'''\n5 5 25 4 3\n'''\n    ) == '1 1 1'\n\nassert solution(\n'''\n100 100 1000000000000000000 100 100\n'''\n    ) == '101010101010101 50505050505051 50505050505051'\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''1 3 8 1 1''') == '3 2 3'\nassert solution('''4 2 9 4 2''') == '2 1 1'\nassert solution('''5 5 25 4 3''') == '1 1 1'\nassert solution('''100 100 1000000000000000000 100 100''') == '101010101010101 50505050505051 50505050505051'\nassert solution('''1000 1000 1000 1000 1000 1000''') == '10000000000 1000000000000000000 1'\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1 3 8 1 1') == '3 2 3'\nassert solution('4 2 9 4 2') == '2 1 1'\nassert solution('5 5 25 4 3') == '1 1 1'\nassert solution('100 100 1000000000000000000 100 100') == '101010101010101 50505050505051 50505050505051'\nassert solution('100 100 1000000000000000000 100 100') == '101010101010101 50505050505051 50505050505051'\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1 3 8 1 1') == '3 2 3'\nassert solution('4 2 9 4 2') == '2 1 1'\nassert solution('5 5 25 4 3') == '1 1 1'\nassert solution('100 100 1000000000000000000 100 100') == '101010101010101 50505050505051 50505050505051'\nassert solutionn"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''1 3 8 1 1''') == '3 2 3'\nassert solution('''4 2 9 4 2''') == '2 1 1'\nassert solution('''5 5 25 4 3''') == '1 1 1'\nassert solution('''100 100 1000000000000000000 100 100''') == '101010101010101 50505050505051 50505050505051'\nassert solution('''5 5 1000000000 1000000000''') == '1 1 1'\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('1 3 8 1 1') == '3 2 3'\nassert solution('4 2 9 4 2') == '2 1 1'\nassert solution('5 5 25 4 3') == '1 1 1'\nassert solution('100 100 1000000000000000000 100 100') == '101010101010101 50505050505051 50505050505051'\nassert solution('500 500 25000000000 3 2') == '1 1 1'"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1 3 8 1 1') == '3 2 3'\nassert solution('4 2 9 4 2') == '2 1 1'\nassert solution('5 5 25 4 3') == '1 1 1'\nassert solution('100 100 1000000000000000000 100 100') == '101010101010101 50505050505051 50505050505051'\n\n\n\"\"\""
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1 3 8 1 1') == '3 2 3'\nassert solution('4 2 9 4 2') == '2 1 1'\nassert solution('5 5 25 4 3') == '1 1 1'\nassert solution('100 100 1000000000000000000 100 100') == '101010101010101 50505050505051 50505050505051'\nassert solution('1 1 1') == '1'\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"1 3 8 1 1\") == \"3 2 3\"\nassert solution(\"4 2 9 4 2\") == \"2 1 1\"\nassert solution(\"5 5 25 4 3\") == \"1 1 1\"\nassert solution(\"100 100 1000000000000000000 100 100\") == \"101010101010101 50505050505051 50505050505051\"\nassert solution(\"6 6 16 4 6 4\") == \"2 1 1\"\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(input()) == \"Kuro\"\nassert solution(input()) == \"Shiro\"\nassert solution(input()) == \"Draw\"\nassert solution(input()) == \"Shiro\"\nassert solution(input()) == \"Draw\"\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"3\\nKuroo\\nShiro\\nKatie\") == \"Kuro\"\nassert solution(\"7\\ntreasurehunt\\ntreasurehunt\\nthreefriends\\nhiCodeforces\\n\") == \"Draw\"\nassert solution(\"1\\nabcabc\\ncbabac\\nababca\\n\") == \"Katie\"\nassert solution(\"15\\nfoPaErcvJ\\nmZaxowpbt\\nmkuOlaHRE\\n\") == \"Draw\"\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('5') == 'Kuro'\nassert solution('3') == 'Shiro'\nassert solution('7') == 'Shiro'\nassert solution('15') == 'Draw'\nassert solution('15') == 'Draw'\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('4\\nGfvcdOu\\nklsvCcte\\nKwJbF_qK\\n\\n') == 'KwJbF_qK'\nassert solution('7\\nccbababcdc\\nbbbbbbbbb\\nccccccccc\\ncccbbcccc\\nbbbbbbbb\\nbbbbbbbb\\ncccccccc\\n\\n') == 'cccbbcccc'\nassert solution('15\\ncccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('3\\nKuro\\nShiro\\nKatie\\n') == 'Kuro'\nassert solution('7\\ntreasurehunt\\nthreefriends\\nhiCodeforces\\n') == 'Shiro'\nassert solution('15\\nfoPaErcvJ\\nmZaxowpbt\\nmkuOlaHRE\\n') == 'Draw'\nassert solution('1\\nabcabc\\ncbabac\\nababca\\n') == 'Katie'\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''3''') == 'Kuro'\nassert solution('''treasurehunt''') == 'Shiro'\nassert solution('''threefriends''') == 'Shiro'\nassert solution('''a''') == 'Kuro'\nassert solution('''abcabc''') == 'Kuro'\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"Draw\"\nassert solution(\"2\") == \"Draw\"\nassert solution(\"3\") == \"Draw\"\nassert solution(\"4\") == \"Draw\"\nassert solution(\"5\") == \"Draw\"\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"Kuro\"\nassert solution(\"7\") == \"Shiro\"\nassert solution(\"1\") == \"Katie\"\nassert solution(\"15\") == \"Draw\"\nassert solution(\"treasurehunt\") == \"Shiro\"\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n3\nKuroo\nShiro\nKatie\n\"\"\") == \"Kuro\"\n\nassert solution(\"\"\"\n7\ntreasurehunt\nthreefriends\nhiCodeforces\n\"\"\") == \"Shiro\"\n\nassert solution(\"\"\"\n1\nabcabc\ncbabac\nababca\n\"\"\") == \"Katie\"\n\nassert solution(\"\"\"\n15\nfoPaErcvJ\nmZaxowpbt\nmkuOlaHRE\n\"\"\") == \"Draw\"\n\"\"\"\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('') is None\nassert solution('Kuroo') == 'Kuro'\nassert solution('threefriends') == 'Draw'\nassert solution('hiCodeforces') == 'Draw'\nassert solution('mkuOlaHRE') == 'Kuro'\n"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('5 5 10 5 4\\n') == '1\\n'\nassert solution('12 4 12 4 1\\n') == '3\\n'\nassert solution('15 1 100 0 0\\n') == '15\\n'\n\n\n\"\"\"\n\na, b, c, d, e = (int(x) for x in input().split())\n\nday = 1\npages = 0\n\nwhile pages < b:\n    pages += a\n    day += 1\n\nwhile pages < e:\n    pages += a + b\n    day += 1\n\nprint(day)\n"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"5 5 10 5 4\") == \"1\"\nassert solution(\"12 4 12 4 1\") == \"3\"\nassert solution(\"15 1 100 0 0\") == \"15\""
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('5 5 10 5 4') == '1'\nassert solution('12 4 12 4 1') == '3'\nassert solution('15 1 100 0 0') == '15'\n\n\"\"\"\n"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''5 5 10 5 4''') == '1'\nassert solution('''12 4 12 4 1''') == '3'\nassert solution('''15 1 100 0 0''') == '15'\nassert solution('''7 16 14 22 21 9''') == '7'\n"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1 2 3 4 5 6') == '6'\nassert solution('1 1 1 1 1 1') == '1'\nassert solution('1 1 1 1 1 1 1') == '1'\nassert solution('1 1 1 1 1 1 1 1 1') == '1'\nassert solution
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('5 5 10 5 4') == '1'\nassert solution('12 4 12 4 1') == '3'\nassert solution('15 1 100 0 0') == '15'\n"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''5 5 10 5 4''') == '1'\nassert solution('''12 4 12 4 1''') == '3'\nassert solution('''15 1 100 0 0''') == '15'\nassert solution('''3 2 4 2 0''') == '3'\nassert solution('''5 5 10 5 4''') == '1'\n"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1 1 2 2 4') == '15'\nassert solution('4 4 5 2 1') == '3'\nassert solution('12 4 12 4 1') == '15'\nassert solution('15 1 100 0 0') == '15'\nassert solution('15 2 10 2 1') == '4'\n"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('10 5 10 5 4') == '1'\nassert solution('12 4 12 4 1') == '3'\nassert solution('15 1 100 0 0') == '15'\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('27') == '3\\n5 11 11'\nassert solution('10000000000') == '1'\nassert solution('123456789') == '1'\nassert solution('99999') == '1'\nassert solution('123456789012345678901234567890123456789012345678901234567890') == '2'\n\n\"\"\""
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('27') == '3\\n5 11 11'\nassert solution('13') == '2'\nassert solution('5') == '1'\nassert solution('5') == '1'\nassert solution('5') == '1'\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('27') == '3 1 11 11'\nassert solution('29') == '1 3 5 11'\nassert solution('3') == '1'\nassert solution('7') == '1 3 5 7'\nassert solution('5') == '1 3'\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('27') == '3\\n5 11 11'\nassert solution('14') == '1\\n2 3'\nassert solution('11') == '1'\nassert solution('1000') == '0'\nassert solution('12') == '1 2'\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('27') == '3 1 5 11'\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('27') == '3\\n5 11 11'\nassert solution('10') == '3\\n5 7'\nassert solution('1000000000') == '5\\n1000000000'\nassert solution('3') == '3\\n1'\nassert solution('4') == '3\\n1 3'\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('27') == '3\\n5 11 11'\n\n\n\n------"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('27') == '3 5 11'\nassert solution('4') == '2'\nassert solution('0') == '0'\nassert solution('1000') == '0'\nassert solution('10000') == '0'\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('27') == '3 5 11'"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('27') == '3\\n5 11 11'\nassert solution('9') == '3\\n5 7'\nassert solution('12') == '3\\n5 7 11'\nassert solution('25') == '3\\n5 7 11 13'\nassert solution('13') == '3\\n5 7 11 13'\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\".*..\") == \"YES\"\nassert solution(\".*..\") == \"NO\"\nassert solution(\"..*.\") == \"YES\"\nassert solution(\".*..\") == \"NO\"\nassert solution(\".*..\") == \"NO\"\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"3 4\"\"\"\n) == \"\"\"YES\n1 2\"\"\"\n\nassert solution(\n\"\"\"5 3\"\"\"\n) == \"\"\"NO\"\"\"\n\nassert solution(\n\"\"\"6 5\"\"\"\n) == \"\"\"YES\n1 2\"\"\"\n\nassert solution(\n\"\"\"3 3\"\"\"\n) == \"\"\"NO\"\"\"\n\nassert solution(\n\"\"\"6 6\"\"\"\n) == \"\"\"YES\n1 1\"\"\"\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\n'''3 4''') == 'YES'\nassert solution(\n'''3 3''') == 'NO'\nassert solution(\n'''6 5''') == 'YES'\nassert solution(\n'''4 4''') == 'NO'\nassert solution(\n'''6 3\n.**.\n.*..\n..*..\n.*..\n.*..\n.***\n''') == 'YES'\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''3 4\n.*..\n....\n.*..\n''') == 'YES'\nassert solution('''3 3\n..*\n.*.\n*..\n''') == 'NO'\nassert solution('''6 5\n..*..\n..*..\n*****\n..*..\n..*..\n..*..\n''') == 'YES'\nassert solution('''6 5\n..*..\n..*..\n.*.*\n.*.*\n.*.*\n''') == 'NO'\nassert solution('''6 5\n..*..\n..*..\n.*.*\n.*.*\n.*.*\n''') == 'YES'\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''3 4\n.*..\n....\n.*..\n''') == 'YES 3 3'\nassert solution('''3 3\n..*\n.*.\n*****\n..*\n..*''') == 'NO'\nassert solution('''6 5\n..*..\n..*..\n*****\n..*..\n..*..\n..*..\n''') == 'YES 3 3'\nassert solution('''6 5\n..*..\n..*..\n*****\n..*..\n..*..\n..*..\n''') == 'YES 3 3'\nassert solution('''3 4\n.*..\n....\n.*..\n''') == 'YES 3 3'\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\n'''3 4\n.*..\n....\n.*..\n'''\n) == 'NO'\n\nassert solution(\n'''3 3\n..*\n.*.\n*..\n'''\n) == 'YES'\n\nassert solution(\n'''5 6\n.*..\n.*..\n.*..\n.*..\n.*..\n'''\n) == 'YES'\n\nassert solution(\n'''5 5\n..*..\n.*..\n.*..\n.*..\n.*..\n'''\n) == 'YES'\n\nassert solution(\n'''5 5\n*.*.*\n*.*.*\n*.*.*\n*.*.*\n.*.*.*\n'''\n) == 'YES'"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"2 1\") == \"NO\"\nassert solution(\"1 1\") == \"YES\"\nassert solution(\"2 2\") == \"NO\"\nassert solution(\"1 2\") == \"YES\"\nassert solution(\"1 4\") == \"YES\"\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdin"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('3 4\\n.*..\\n....\\n.*..\\n') == 'YES\\n1 2'\nassert solution('3 3\\n..*\\n.*.\\n*..\\n') == 'NO'\nassert solution('6 5\\n..*..\\n..*..\\n*****\\n..*..\\n..*..\\n') == 'YES\\n3 3'\nprint(solution('3 3\\n..*\\n.*.\\n*..\\n'))\n'''"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"9 7 3 8\") == \"15\"\nassert solution(\"2 7 3 7\") == \"14\"\nassert solution(\"30 6 17 19\") == \"0\"\nassert solution(\"1 2 1 1\") == \"1\"\nassert solution(\"30 7 5 3\") == \"15\"\n"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('9 7 3 8') == '15'\nassert solution('2 7 3 7') == '14'\nassert solution('30 6 17 19') == '0'\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1 2 3 4') == \"0\"\nassert solution('2 7 3 7') == \"14\"\nassert solution('30 6 17 19') == \"0\"\nassert solution('6 10 4 3') == \"2\"\nassert solution('10 100 99 99') == \"1\"\n"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('9 7 3 8\\n') == '15'\nassert solution('2 7 3 7\\n') == '14'\nassert solution('30 6 17 19\\n') == '0'\n\"\"\"\n"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('9 7 3 8') == '15'\nassert solution('2 7 3 7') == '14'\nassert solution('30 6 17 19') == '0'\nprint(\"All tests passed successfully.\")\n\n\"\"\""
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('9 7 3 8') == '15'\nassert solution('2 7 3 7') == '14'\nassert solution('30 6 17 19') == '0'\nassert solution('1 1 1 1') == '1'\nassert solution('2 2 2 2') == '0'\n"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1 2 3 4') == '0'\nassert solution('2 7 3 7') == '14'\nassert solution('30 6 17 19') == '0'\n"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('9 7 3 8') == '15'\nassert solution('2 7 3 7') == '14'\nassert solution('30 6 17 19') == '0'\n\n\n\"\"\""
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n\nfrom sys import stdin,stdout\n\nn, m, a, b = map(int, stdin.readline().split())"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(''.join(stdin.splitlines())) == '3'\n'''"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('5\\n-2 2 -3 1') == '3'\nassert solution('3\\n2 -5 -3') == '-1'\nassert solution('10\\n3 5 -9 3 2 -8 2 3 4 -5 4 -6 -7 -8 -9 -10') == '-1'\nassert solution('9\\n8 -9 -8 -7 -6 -5 -4 -3 -2 -1') == '8'"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('2') == '-1'\nassert solution('-2 -3 1') == '3'\nassert solution('-2 -3 1 -4 -5 -6') == '-1'\nassert solution('2 -5 -3') == '-1'\nassert solution('2 -5 -3 -6 -8') == '-1'\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(input_data) == '3'\n\n'''"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdin\n\n\"\"\"\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == expected\n\"\"\"\n\nimport sys"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('1\\n0') == '1'\nassert solution('1\\n0\\n0') == '0'\nassert solution('1\\n0\\n1') == '1'\nassert solution('1\\n0\\n-1') == '-1'\nassert solution('1\\n0\\n1\\n-1') == '1'\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('4\\n-2 2 -3 1\\n') == '3'\nassert solution('3\\n2 -5 -3\\n') == '-1'\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1\\n-1\\n2\\n3\\n-2\\n1') == -2\nassert solution('1\\n-1\\n2\\n3\\n-2\\n1') == -2\nassert solution('-1\\n1\\n2\\n-3\\n-2\\n1') == -2\nassert solution('1\\n2\\n-3\\n-2\\n1') == 3\nassert solution('-1\\n1\\n2\\n-3\\n-2\\n1') == 3\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"2\") == \"0\"\nassert solution(\"2 -3 1\") == \"3\"\nassert solution(\"2 -5 -3\") == \"-1\"\n\"\"\"\n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"3 3\\n1 1\\n1 2\\n1 3\") == \"6\"\nassert solution(\"3 3\\n1 1\\n1 1\\n1 3\\n\") == \"2\"\nassert solution(\"4 10\\n5 3\\n2 1\\n3 2\\n5 1\\n\") == \"10\""
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''1 1\n1 2\n1 3''') == '6'\nassert solution('''3 3\n1 1\n1 1\n1 3''') == '2'\nassert solution('''4 10\n5 3\n2 1\n3 2\n5 1\n''') == '10'\n'''\n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1 2\\n1 3') == '2'\nassert solution('2 1\\n2 3') == '2'\nassert solution('1 2\\n1 2') == '2'\nassert solution('2 2\\n2 3') == '2'\nassert solution('1 2\\n1 3\\n1 2') == '6'\n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('2 3') == '6'\nassert solution('3 3') == '2'\nassert solution('4 10') == '10'\nassert solution('5 3') == '2'\nassert solution('1 2') == '1'\n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('3 3') == '6'\nassert solution('3 3\\n1 1\\n1 2\\n1 3') == '2'\nassert solution('4 10\\n5 3\\n2 1\\n3 2\\n5 1\\n3 4\\n4 3\\n3 5') == '10'\nassert solution('3 10\\n2 1\\n3 2\\n4 1\\n4 2\\n1 1\\n4 1\\n2 1\\n1 2\\n3 3') == '0'\nassert solution('3 10\\n2 1\\n1 1\\n1 1\\n1 3\\n4 2\\n2 1\\n4 2\\n1 2\\n1 1\\n1 3\\n1 3\\n3 2\\n2 1\\n1 1\\n1 2\\n1 1\\n1 3\\n1 3\\n1 1') == '2'\n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == solution(stdin)\n\"\"\"\n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''3 3\n1 1\n1 2\n1 3\n''') == '6'\nassert solution('''3 3\n1 1\n1 1\n1 3\n''') == '2'\nassert solution('''4 10\n5 3\n2 1\n3 2\n5 1\n''') == '10'\nassert solution('''4 10\n5 3\n2 1\n3 2\n5 1\n''') == '10'\nassert solution('''4 10\n1 1\n1 1\n1 3\n''') == '6'\n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('3 3') == '6'\nassert solution('3 3') == '2'\nassert solution('4 10') == '10'\nassert solution('1 1') == '1'\nassert solution('2 2') == '1'\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1') == ''\nassert solution('1\\n2') == '2'\nassert solution('1\\n1\\n1') == '2'\nassert solution('2\\n2\\n2') == '4'\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('1') == 1\nassert solution('2') == 2\nassert solution('4') == 3333\nassert solution('8') == 50\nassert solution('16') == 100\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('4') == '333333338'\nassert solution('5') == '333333338'\nassert solution('10') == '333333338'\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1\\n') == '1'\nassert solution('2\\n') == '2'\nassert solution('4\\n') == '333333338'\n'''\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '1'\nassert solution('4') == '333333338'\nassert solution('5') == '115888226849'\nassert solution('6') == '1636797020940'\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''1''') == '1'\nassert solution('''2''') == '2'\nassert solution('''4''') == '333333338'\n\n\n-----Alternate Solution-----"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('1\\n') == '1'\nassert solution('2\\n') == '1'\nassert solution('4\\n') == '333333338'"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('') == '2'\nassert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('5') == '333333338'\nassert solution('50000') == '333333338'\n'''\n\nfrom functools import lru_cache\nfrom math import gcd"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('4') == '333333338'\nassert solution('2') == '1'\nassert solution('1') == '1'\nassert solution('3') == '33333333'\nassert solution('2') == '1'\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('4') == \"333333338\"\nassert solution('2') == \"2\"\nassert solution('1') == \"1\"\nassert solution('6') == \"333333338\"\nassert solution('10') == \"333333338\"\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1 2 1 2') == '2'\nassert solution('1 12 1 12') == '4'\nassert solution('50 100 3 30') == '0'\nprint(\"All set? Click 'Check' to earn cool rewards!\")\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('1 2 1 2') == '2'\nassert solution('1 12 1 12') == '4'\nassert solution('50 100 3 30') == '0'\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1 2 1 2') == '2'\nassert solution('1 12 1 12') == '4'\nassert solution('50 100 3 30') == '0'\n\n\n\"\"\""
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"1 2 1 2\") == \"2\"\nassert solution(\"1 12 1 12\") == \"4\"\nassert solution(\"50 100 3 30\") == \"0\"\nassert solution(\"1 2 1 2\") == \"2\"\n\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1 2 1 2') == '2'\nassert solution('1 12 1 12') == '4'\nassert solution('50 100 3 30') == '0'\nassert solution('50 100 1 3') == '0'\nassert solution('50 100 3 30') == '0'\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''1 2 1 2''') == '2'\nassert solution('''1 12 1 12''') == '4'\nassert solution('''50 100 3 30''') == '0'"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\n'''\n1 2 1 2\n''') == '2'\nassert solution(\n'''\n1 12 1 12\n''') == '4'\nassert solution(\n'''\n50 100 3 30\n''') == '0'\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"1 2 1 2\") == \"2\"\nassert solution(\"1 12 1 12\") == \"4\"\nassert solution(\"50 100 3 30\") == \"0\"\nassert solution(\"50 100 3 30\") == \"0\"\nassert solution(\"50 100 3 30\") == \"0\"\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1 2 1 2') == '2'\nassert solution('1 12 1 12') == '4'\nassert solution('50 100 3 30') == '0'\nassert solution('10 100 2 30') == '0'"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1 2 1 2') == '2'\nassert solution('1 12 1 12') == '4'\nassert solution('50 100 3 30') == '0'\n\"\"\"\n"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdin\nassert solution(stdin) == '2'\nassert solution(stdin) == '9'\n\"\"\""
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('6 10\\n') == '2'\nassert solution('21 31\\n') == '9'\nassert solution('5 10\\n') == '0'\nassert solution('1 2\\n') == '-1'\nassert solution('10 9\\n') == '0'\n"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('21 31') == '9'\nassert solution('5 10') == '0'\nassert solution('6 10') == '2'\nassert solution('3 4') == '2'\nassert solution('1 1') == '0'\n"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('6 10') == '2'\nassert solution('21 31') == '9'\nassert solution('5 10') == '0'\nassert solution('1000000001 1000000000') == '1'\n\nassert solution('6 10') == '2'\n"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('6 10') == '2'\nassert solution('21 31') == '9'\nassert solution('5 10') == '0'\nassert solution('12 17') == '6'\n\n\n\"\"\"\n"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('6 10') == '2'\nassert solution('21 31') == '9'\nassert solution('5 10') == '0'\nassert solution('1 1') == '0'\nassert solution('2 3') == '1'\n"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\n\na,b = [int(x) for x in stdin.split(\" \")]\n\nc = 1\nwhile True:\n    c = c * a\n    if c % b == 0:\n        break\n\nprint(c/b)"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n'''\n'''\nThe best idea is to calculate the least common multiple of the two integers first, then find the least common multiple of this number and the sum of the integers. We need to check if this is a valid solution.\n'''\na, b = map(int, stdin.split())\nleast_common_multiple = a*b//gcd(a, b)\nk = 1\nwhile least_common_multiple < a+k*b:\n    k += 1\nprint(k-1)\n"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('6 10') == '2'\nassert solution('21 31') == '9'\nassert solution('5 10') == '0'\nassert solution('1 2') == '0'\nassert solution('100 9999') == '0'\n"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('6 10\\n') == '2'\nassert solution('21 31\\n') == '9'\nassert solution('5 10\\n') == '0'\nassert solution('100 200\\n') == '50'\nassert solution('51 55\\n') == '0'\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"3 10\") == \"3\"\nassert solution(\"2 10\") == \"4\"\nassert solution(\"8 10\") == \"4\"\nassert solution(\"6 7\") == \"3\"\nassert solution(\"5 10\") == \"3\"\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('2 10\\n8 9\\n') == '4'\nassert solution('3 5\\n4 4 4\\n') == '3'\nassert solution('1 5\\n4 4 4\\n') == '2'\nassert solution('1 5\\n4 4 4\\n') == '2'\n\n\n-----"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('inputs/3.txt') == '3'\nassert solution('inputs/5.txt') == '5'\nassert solution('inputs/7.txt') == '7'\nassert solution('inputs/10.txt') == '3'\nassert solution('inputs/11.txt') == '5'\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('10 10') == '4'\nassert solution('3 5') == '3'\nassert solution('6 3') == '4'\nassert solution('10 3') == '3'\nassert solution('8 9') == '4'\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(input(\"\")) == input(\"\")\n\"\"\"\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('5 10\\n5 5 5') == '3'\nassert solution('3 5\\n5 5 5') == '4'\nassert solution('10 100\\n5 5 5') == '4'\nassert solution('5 5\\n5 5 5') == '4'\nassert solution('5 100\\n5 5 5') == '3'\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('5 10') == '4'\nassert solution('4 9') == '3'\nassert solution('3 5') == '3'\nassert solution('3 6') == '3'\nassert solution('5 5 5') == '3'\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('2 10') == '4'\nassert solution('2 3') == '1'\nassert solution('2 4') == '1'\nassert solution('2 4') == '2'\nassert solution('3 4') == '2'\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\n\"\"\""
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''2 10\n8 9\n''') == '4'\n\nassert solution('''3 5\n4 4 4\n''') == '3'\n'''"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''5\n10 0 -7 2 6''') == '4'\nassert solution('''7\n0 0 1 -1 0 0 2''') == '0'\nassert solution('''7\n0 0 1 -1 0 0 2''') == '0'\nassert solution('''7\n10 0 -7 2 6''') == '4'\nassert solution('''7\n0 0 1 -1 0 0 2''') == '0'\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('5\\n10 0 -7 2 6\\n') == '4'\nassert solution('7\\n0 0 1 -1 0 0 2\\n') == '0'\nassert solution('7\\n0 0 1 -1 0 0 2\\n') == '0'\n\n\n-----"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''5\n10 0 -7 2 6''') == '4'\nassert solution('''7\n0 0 1 -1 0 0 2''') == '0'\nassert solution('''4\n0 0 1 -1 0 0 2''') == '0'\nassert solution('''2\n1 1''') == '0'\nassert solution('''5\n1 1 1 1 1''') == '0'\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(input()) == output\n\"\"\"\n\nN = int(input())\n\na = [int(x) for x in input().split()]\n\np = 0\nfor x in a:\n    if x > 0:\n        p += 1"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 2 3 4\\n\") == \"1\"\nassert solution(\"4\\n1 2 3 0\\n\") == \"0\"\nassert solution(\"4\\n1 2 3 1\\n\") == \"0\"\nassert solution(\"4\\n1 2 3 2\\n\") == \"1\"\nassert solution(\"4\\n1 2 3 3\\n\") == \"0\"\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == ''\n\n\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline().strip())\na = list(map(int, sys.stdin.readline().strip().split(' ')))\n\nd = 0\nfor i in a:\n    if i >= 0:\n        if i/d >= n/2:\n            d = i\n        else:\n            pass\n    else:\n        pass"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(input()) == output()\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''5\n10 0 -7 2 6''') == '4'\nassert solution('''7\n0 0 1 -1 0 0 2''') == '0'\nassert solution('''7\n0 0 1 -1 0 0 2''') == '0'\nassert solution('''7\n0 0 1 -1 0 0 2''') == '0'\nassert solution('''7\n0 0 1 -1 0 0 2''') == '0'\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdin\n\n\n'''\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == ''\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\n'''7''') == '3'\nassert solution(\n'''14''') == '9'\nassert solution(\n'''50''') == '1'\nassert solution(\n'''1''') == '0'\nassert solution(\n'''2''') == '0'\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('1\\n') == '0'\nassert solution('2\\n') == '1'\nassert solution('10\\n') == '9'\nassert solution('14\\n') == '2'\nassert solution('20\\n') == '5'\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('7\\n') == '3'\nassert solution('14\\n') == '9'\nassert solution('50\\n') == '1'\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"7\") == \"3\"\nassert solution(\"14\") == \"9\"\nassert solution(\"50\") == \"1\"\n\"\"\"\n\n\"\"\"\nsolution\n\"\"\""
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('7') == '3'\nassert solution('14') == '9'\nassert solution('50') == '1'\nassert solution('1') == '0'\nassert solution('12') == '1'\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''7''') == '3'\nassert solution('''14''') == '9'\nassert solution('''50''') == '1'\n\n'''\n    pass\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"7\") == \"3\"\nassert solution(\"14\") == \"9\"\nassert solution(\"50\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''7''') == '3'\nassert solution('''14''') == '9'\nassert solution('''50''') == '1'\nassert solution('''1''') == '0'\nassert solution('''10''') == '1'\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"7\\n\") == \"3\\n\"\nassert solution(\"14\\n\") == \"9\\n\"\nassert solution(\"50\\n\") == \"1\\n\"\n\"\"\"\n\n\"\"\"\nBrute force O(n^2)\n\"\"\"\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"7\") == \"3\"\nassert solution(\"14\") == \"9\"\nassert solution(\"50\") == \"1\"\n\n\n\"\"\"\n\nn = int(input())"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''2 6\n2 3''') == '''1\n1 6\n2 3'''\n\nassert solution('''36 5\n10 16''') == '''3\n16 5\n5 16'''\n\nassert solution('''3 5\n2 1''') == '''-1'''\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''2 6\n2 3''') == '1'\nassert solution('''36 5\n10 16''') == '3'\nassert solution('''3 5\n2 1''') == '-1'\nassert solution('''32 5\n1 1''') == '-1'\nassert solution('''2 0\n5 0''') == '-1'\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"2 6\\n2 3\\n\") == \"1\\n1 6\\n2 3\\n\"\nassert solution(\"36 5\\n10 16\\n\") == \"3\\n16 5\\n5 16\\n\"\nassert solution(\"3 5\\n2 1\\n\") == \"-1\\n\"\nassert solution(\"100 5\\n5 2\\n\") == \"1\\n5 2\\n5 2\\n\"\nassert solution(\"15 3\\n3 1\\n\") == \"5\\n5 3\\n3 1\\n\"\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n\n\n\n\"\"\"\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''2 6''') == '''1\n1 6'''\nassert solution('''36 5''') == '''3\n16 5\n5 16'''\nassert solution('''3 5''') == '''-1'''\nassert solution('''36 5''') == '''-1\n16 5\n5 16'''\nassert solution('''10 16''') == '''3\n16 5\n5 16'''\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''2 6\n2 3''') == '1\\n1 6\\n2 3'\nassert solution('''36 5\n10 16''') == '3\\n16 5\\n5 16'\nassert solution('''3 5\n2 1''') == '-1\\n16 5\\n5 16'\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''2 6\n2 3\n''') == '''1\n1 6\n2 3\n'''\n\nassert solution('''36 5\n10 16\n''') == '''3\n16 5\n5 16\n'''\n\nassert solution('''3 5\n2 1\n''') == '''-1\n'''\n\nassert solution('''7 8\n5 3\n''') == '''3\n5 3\n5 7\n3 7\n3 5\n'''\n\nassert solution('''3 4\n2 1\n''') == '''-1\n'''"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdin"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('2 1 2 2') == 'Polycarp'\nassert solution('4 7 7 4') == 'Vasiliy'\nassert solution('1 1 1 2') == 'Polycarp'\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\n    '2 1 2 2'\n) == 'Polycarp'\nassert solution(\n    '4 7 7 4'\n) == 'Vasiliy'\nassert solution(\n    '4 1 2 2'\n) == 'Polycarp'\nassert solution(\n    '4 7 7 4'\n) == 'Vasiliy'\nassert solution(\n    '3 3 3 3'\n) == 'Draw'\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\n    \"\"\"2 1 2 2\n2 1 2 2\n\"\"\") == \"Polycarp\"\nassert solution(\n    \"\"\"4 7 7 4\n4 7 7 4\n\"\"\") == \"Vasiliy\"\nassert solution(\n    \"\"\"4 6 7 5\n6 7 7 5\n\"\"\") == \"Polycarp\"\nassert solution(\n    \"\"\"1 1 1 1\n1 1 1 1\n\"\"\") == \"Vasiliy\"\nassert solution(\n    \"\"\"2 1 1 1\n1 1 1 1\n\"\"\") == \"Polycarp\"\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''2 1 2 2''') == 'Polycarp'\nassert solution('''4 7 7 4''') == 'Vasiliy'\nassert solution('''0 0 0 0''') == 'Polycarp'\nassert solution('''0 0 0 0''') == 'Polycarp'\nassert solution('''2 1 2 2''') == 'Polycarp'\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"2 1 2 2\") == \"Polycarp\"\nassert solution(\"4 7 7 4\") == \"Vasiliy\"\n\n\n\"\"\"\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1 1 2 2') == 'Polycarp'\nassert solution('4 7 7 4') == 'Vasiliy'\nassert solution('2 1 2 2') == 'Polycarp'\nassert solution('4 7 7 4') == 'Vasiliy'\nassert solution('1 2 2 2') == 'Polycarp'\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('1 1 2 2') == \"Polycarp\"\nassert solution('4 7 7 4') == \"Vasiliy\"\nassert solution('4 7 7 4') == \"Vasiliy\"\nassert solution('4 7 7 4') == \"Vasiliy\"\nassert solution('4 7 7 4') == \"Vasiliy\"\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"2 1 2 2\") == \"Polycarp\"\nassert solution(\"4 7 7 4\") == \"Vasiliy\"\nassert solution(\"7 2 1 3\") == \"Polycarp\"\nassert solution(\"5 2 1 2\") == \"Vasiliy\"\nassert solution(\"1 2 1 1\") == \"Polycarp\"\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('2 1 2 2') == 'Polycarp'\nassert solution('4 7 7 4') == 'Vasiliy'\nassert solution('3 3 1 1') == 'Polycarp'\nassert solution('2 3 3 1') == 'Vasiliy'\nassert solution('4 3 1 2') == 'Polycarp'\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''2 1 2 2''') == 'Polycarp'\nassert solution('''4 7 7 4''') == 'Vasiliy'\nassert solution('''1 2 1 1''') == 'Polycarp'\nassert solution('''2 1 2 1''') == 'Vasiliy'\nassert solution('''1 2 2 1''') == 'Polycarp'\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1 7') == '6'\nassert solution('1 1') == '5'\nassert solution('11 6') == '5'\nassert solution('11 11') == '1'\nassert solution('12 6') == '5'\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('1 7') == '6'\nassert solution('1 1') == '5'\nassert solution('11 6') == '5'\nassert solution('1 3') == '5'\nassert solution('2 1') == '4'\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == \"\"\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1 7') == '6'\nassert solution('1 1') == '5'\nassert solution('11 6') == '5'\n\"\"\"\nfrom math import ceil\nm, d = map(int, stdin.split())\ndw = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\ndw_num = ['', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30']\n\ndays_in_month = {1: 31, 2: 29, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31}\n\nweek = ceil(d / 7)\ndays = d % 7\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1 7') == '6'\nassert solution('1 1') == '5'\nassert solution('11 6') == '5'\nassert solution('11 7') == '6'"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"1 7\") == \"6\"\nassert solution(\"1 1\") == \"5\"\nassert solution(\"11 6\") == \"5\""
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('1 7') == '6'\nassert solution('1 1') == '5'\nassert solution('11 6') == '5'\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == '5'\n\"\"\"\nfrom datetime import date\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1 7') == '6'\nassert solution('1 1') == '5'\nassert solution('11 6') == '5'\nassert solution('11 4') == '3'\nassert solution('11 1') == '5'\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('100 200') == '2'\nassert solution('2015 2015') == '1'\nassert solution('72057594000000000 72057595000000000') == '0'\nassert solution('10 72057594000000000 72057595000000000') == '0'\nassert solution('72057594000000000 72057595000000000 72057596000000000') == '2'\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"5 10\") == \"2\"\nassert solution(\"2015 2015\") == \"1\"\nassert solution(\"72057594000000000 72057595000000000\") == \"0\"\nassert solution(\"72057594000000000 72057595000000000\") == \"0\"\nassert solution(\"100 105\") == \"0\"\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('5 10') == '2'\nassert solution('2015 2015') == '1'\nassert solution('72057594000000000 72057595000000000') == '0'\nassert solution('100 105') == '0'\nassert solution('100 105') == '0'\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('5 10') == '2'\nassert solution('2015 2015') == '1'\nassert solution('72057594000000000 72057595000000000') == '26'\nassert solution('100 105') == '0'\nassert solution('72057594000000000 72057595000000000') == '26'\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('5 10') == '2'\nassert solution('2015 2015') == '1'\nassert solution('72057594000000000 72057595000000000') == '0'\nassert solution('100 105') == '0'\nassert solution('456667 5666') == '2'\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('5 10\\n') == '2'\nassert solution('2015 2015\\n') == '1'\nassert solution('72057594000000000 72057595000000000\\n') == '26'\nassert solution('100 105\\n') == '0'\n\n\"\"\"\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('2015 2015') == '0'\nassert solution('5 10') == '2'\nassert solution('72057594000000000 72057595000000000') == '26'\nassert solution('100 105') == '0'\n\n\n\n'''\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('5 10') == '2'\nassert solution('2015 2015') == '1'\nassert solution('72057594000000000 72057595000000000') == '0'\nassert solution('100 105') == '0'\nassert solution('100 105') == '0'\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('100 105') == '0'\nassert solution('2015 2015') == '1'\nassert solution('72057594000000000 72057595000000000') == '26'\nassert solution('856789') == '0'\nassert solution('15951595') == '0'\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('5 10') == '2'\nassert solution('2015 2015') == '1'\nassert solution('100 105') == '0'\nassert solution('72057594000000000 72057595000000000') == '26'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"4\"\nassert solution(\"4\") == \"6\"\nassert solution(\"5\") == \"10\"\nassert solution(\"6\") == \"12\"\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('2') == ''\nassert solution('3') == ''\nassert solution('4') == ''\nassert solution('5') == ''\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"4\"\nassert solution(\"4\") == \"6\"\n\n'''"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''2''') == '2'\nassert solution('''3''') == '4'\nassert solution('''4''') == '6'\nassert solution('''8''') == '10'\nassert solution('''11''') == '14'\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''2''') == '2'\nassert solution('''3''') == '4'\nassert solution('''4''') == '6'\nassert solution('''5''') == '8'\nassert solution('''6''') == '10'\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\n\nimport sys\n\nT = int(sys.stdin.readline().strip())"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''1\n''') == '1'\nassert solution('''2\n''') == '2'\nassert solution('''3\n''') == '4'\nassert solution('''4\n''') == '6'\nassert solution('''5\n''') == '8'\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('') == None\nassert solution('1') == None\nassert solution('5') == None\nassert solution('2') == None\nassert solution('3') == None\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(2) == 2\nassert solution(3) == 4\nassert solution(4) == 6\nassert solution(5) == 9\nassert solution(6) == 17\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('2 2 30') == '1'\nassert solution('2 2 7') == '1'\nassert solution('3 1 1') == '6'\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''2 2 30''') == '1'\nassert solution('''2 2 7''') == '1'\nassert solution('''3 1 1''') == '6'\nassert solution('''3 2 6''') == '6'\nassert solution('''4 1 1''') == '6'\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('2 2 30') == '1'\nassert solution('2 2 7') == '1'\nassert solution('3 1 1') == '6'\nassert solution('1 1 1') == '1'\nassert solution('4 1 1') == '1'\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''2 2 30''') == '1'\nassert solution('''3 1 1''') == '6'\nassert solution('''2 2 7''') == '1'\nassert solution('''3 4 4''') == '2'\nassert solution('''3 4 1''') == '8'\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''2 2 30''') == '1'\nassert solution('''2 2 7''') == '1'\nassert solution('''3 1 1''') == '6'\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3\") == 1\nassert solution(\"1 1 2\") == 1\nassert solution(\"2 3 1\") == 0\nassert solution(\"2 3 3\") == 0\nassert solution(\"3 1 1\") == 6\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"2 2 30\\n4 3\\n\") == \"1\\n\"\nassert solution(\"2 2 7\\n4 3\\n\") == \"1\\n\"\nassert solution(\"3 1 1\\n1 1 1\\n\") == \"6\\n\""
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('2 1 30\\n4 3') == '1'\nassert solution('2 2 7\\n4 3') == '1'\nassert solution('3 1 1\\n1 1 1') == '6'\nassert solution('3 1 1\\n1 1 1') == '6'\nassert solution('2 1 30\\n4 3') == '1'\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''4 100\n0 0 0 0\n1 2\n1\n3 4\n1 4 1\n3 2\n0 1 3\n3 9\n0 59049 810''') == 'YES'\nassert solution('''4 100\n0 0 0 0\n1 2\n1\n3 4\n1 4 1\n3 2\n0 1 3\n3 9\n0 59049 810''') == 'NO'\nassert solution('''4 100\n0 0 0 0\n1 2\n1\n3 4\n1 4 1\n3 2\n0 1 3\n3 9\n1 2 2 1 2 1 2 1\n1 2 2 1 1 2 1 2 1\n1 1 2 1 1 2 1 2 1\n1 1 2 1 1 2 1 2 1''') == 'YES'\nassert solution('''4 100\n0 0 0 0\n1 2\n1\n3 4\n1 4 1\n3 2\n0 1 3\n3 9\n0 59049 810''') == 'NO'\nassert solution('''4 100\n0 0 0 0\n1 2\n1\n3 4\n1 4 1\n3 2\n0 1 3\n3 9\n0 1 3\n1 2 2 1 2 1 2 1\n1 2 2 1 1 2 1 2 1\n1 1 2 1 1 2 1 2 1\n1 1 2 1 1 2 1 2 1''') == 'YES'\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('inputs/expected/minimal_steps_after_array') == 'NO'\nassert solution('inputs/expected/random_steps_after_array') == 'YES'\nassert solution('inputs/expected/random_steps_after_array2') == 'YES'\nassert solution('inputs/expected/random_steps_after_array3') == 'YES'\nassert solution('inputs/expected/random_steps_after_array4') == 'YES'\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('test_case') == 'YES'\nassert solution('a b') == 'NO'\nassert solution('a b c') == 'NO'\nassert solution('0 1 2') == 'NO'\nassert solution('3 4') == 'YES'\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''5\n4 100\n0 0 0 0\n1 2\n1\n3 4\n1 4 1\n3 2\n0 1 3\n3 9\n0 59049 810\n''') == 'YES'\n\nassert solution('''5\n5 5\n0 0 0 0\n1 2\n1\n3 4\n1 4 1\n3 2\n0 1 3\n3 9\n0 59049 810\n''') == 'YES'\n\nassert solution('''5\n5 10\n0 0 0 0\n1 2\n1\n3 4\n1 4 1\n3 2\n0 1 3\n3 9\n0 59049 810\n''') == 'NO'\n\nassert solution('''5\n5 10\n0 0 0 0\n1 2\n1\n3 4\n1 4 1\n3 2\n0 1 3\n3 9\n0 59049 810\n''') == 'YES'\n\nassert solution('''5\n5 5\n0 0 0 0\n1 2\n1\n3 4\n1 4 1\n3 2\n0 1 3\n3 9\n0 59049 810\n''') == 'YES'"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('2\\n2 1') == 'YES'\nassert solution('1\\n1 1') == 'NO'\nassert solution('2\\n2 2') == 'YES'\nassert solution('2\\n2 5') == 'NO'\nassert solution('2\\n2 100') == 'YES'\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''5\n4 100\n0 0 0 0\n1 2\n1\n3 4\n1 4 1\n3 2\n0 1 3\n3 9\n0 59049 810''') == 'YES'\n\nassert solution('''5\n4 100\n0 0 0 0\n1 2\n1\n3 4\n1 4 1\n3 2\n0 1 3\n3 9\n0 59049 810''') == 'NO'\n\nassert solution('''5\n4 100\n0 0 0 0\n3 2\n0 1 3\n3 9\n0 59049 810''') == 'YES'\n\nassert solution('''5\n3 100\n0 0 0 0\n1 2\n1\n1 1 1\n1 1 1\n1 1 1\n1 1 1''') == 'YES'\n\nassert solution('''5\n3 100\n0 0 0 0\n1 2\n1\n1 1 1\n1 1 1\n1 1 1\n1 1 1''') == 'NO'"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('6\\n'\n    '2 10\\n'\n    '0 0 0 0\\n'\n    '1 2\\n'\n    '1\\n'\n    '3 4\\n'\n    '1 4 1\\n'\n    '3 2\\n'\n    '0 1 3\\n'\n    '3 9\\n'\n    '0 59049 810\\n') == 'YES'\n\n\n\n'''\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\n\"\"\"\n2 2 2\n\"\"\".strip()) == \"20\"\n\nassert solution(\n\"\"\"\n5 6 7\n\"\"\".strip()) == \"1520\""
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('2 2 2') == '20'\nassert solution('5 6 7') == '1520'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == '20'\n'''"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1 1 1') == 20\nassert solution('5 6 7') == 1520\n\nassert solution('2 2 2') == 20\nassert solution('5 6 7') == 1520\n\"\"\""
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"2 2 2\") == \"20\"\nassert solution(\"5 6 7\") == \"1520\""
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('2 2 2') == '20'\nassert solution('5 6 7') == '1520'\nassert solution('2 2 3') == '9'\nassert solution('1 2 3') == '6'\nassert solution('9 9 9') == '81'\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''2 2 2''') == '20'\nassert solution('''5 6 7''') == '1520'\nassert solution('''4 5 5''') == '18'\nassert solution('''4 3 7''') == '48'\nassert solution('''5 3 5''') == '30'\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('2 2 2') == '20'\nassert solution('5 6 7') == '1520'\nassert solution('3 10 100') == '2385876380'\nassert solution('100 200 200') == '16454768600'\nassert solution('1 1 1') == '1'\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('2 2 2') == '20'\nassert solution('5 6 7') == '1520'\nassert solution('6 7 1') == '4'\nassert solution('3 6 4') == '10'\nassert solution('3 5 8') == '5'\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('2 2 2') == '20'\nassert solution('5 6 7') == '1520'\nassert solution('3 4 3') == '12'\nassert solution('4 5 6') == '120'\nassert solution('5 6 7') == '1520'\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''\nAB\nXC\nXB\nAC\n''') == 'YES'\nassert solution('''\nAB\nXC\nAC\nBX\n''') == 'NO'\n'''\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(input) == output\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(open(\"Test.txt\").read()) == 'YES'\nassert solution(open(\"Test2.txt\").read()) == 'NO'\nassert solution(open(\"Test3.txt\").read()) == 'YES'\nassert solution(open(\"Test4.txt\").read()) == 'NO'\nassert solution(open(\"Test5.txt\").read()) == 'YES'\n\n\n\"\"\"\n\nfrom collections import Counter\nfrom typing import Tuple\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''\nAB\nXC\nXB\nAC\n''') == 'YES'\nassert solution('''\nAB\nXC\nAC\nBX\n''') == 'NO'\nassert solution('''\nAB\nXC\nAC\nBB\n''') == 'YES'\nassert solution('''\nAB\nXC\nAC\nBB\n''') == 'NO'\nassert solution('''\nAA\nBB\n''') == 'NO'\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('AB') == 'YES'\nassert solution('XC') == 'NO'\nassert solution('XB') == 'NO'\nassert solution('AC') == 'NO'\n\"\"\""
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\n    \"AB\"\n    \"XC\"\n    \"XB\"\n    \"AC\") == \"YES\"\n\nassert solution(\n    \"AB\"\n    \"XC\"\n    \"AC\"\n    \"BX\") == \"NO\"\n\nassert solution(\n    \"AB\"\n    \"XC\"\n    \"AC\"\n    \"BX\"\n) == \"NO\"\n\nassert solution(\n    \"ABC\"\n    \"ABC\"\n    \"ABC\"\n    \"ABC\") == \"NO\"\n\nassert solution(\n    \"ABC\"\n    \"ABC\"\n    \"ABC\"\n    \"AB\"\n) == \"YES\""
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"\nAB\nXC\nXB\nAC\n\"\"\") == \"YES\"\nassert solution(\n\"\"\"\nAB\nXC\nAC\nBX\n\"\"\") == \"NO\"\nassert solution(\n\"\"\"\nAB\nXC\nAC\nBX\n\"\"\") == \"NO\"\n\n\"\"\"\n\n\"\"\""
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''\nXC\nXB\nAC\n''') == 'YES'\nassert solution('''\nAB\nXC\nXB\nAC\n''') == 'NO'\nassert solution('''\nABC\nXYZ\n''') == 'NO'\nassert solution('''\nXC\nXB\nAC\n''') == 'YES'\nassert solution('''\nXC\nXB\nXA\n''') == 'YES'\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\nAB\nXC\nXB\nAC\"\"\"\n) == 'YES'\n\n\nassert solution(\n\"\"\"\nAB\nXC\nAC\nBX\"\"\"\n) == 'NO'\n\n\nassert solution(\n\"\"\"\nAB\nXC\nAC\nXB\n\"\"\"\n) == 'NO'\n\n\nassert solution(\n\"\"\"\nXA\nXB\n\"\"\"\n) == 'NO'\n\n\nassert solution(\n\"\"\"\nXA\nXB\n\"\"\"\n) == 'YES'\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"AB\") == \"YES\"\nassert solution(\"XC\") == \"NO\"\nassert solution(\"XB\") == \"NO\"\nassert solution(\"AC\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('15') == '6'\nassert solution('16') == '19'\nassert solution('17') == '22'\nassert solution('18') == '29'\nassert solution('13') == '9'\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"13\") == \"12\"\nassert solution(\"12\") == \"12\"\nassert solution(\"16\") == \"11311\"\nassert solution(\"17\") == \"2016\"\nassert solution(\"20\") == \"3789\"\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"10\"\nassert solution(\"3\") == \"11\"\nassert solution(\"4\") == \"100\"\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(input()) == output()\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('2\\n1') == '1'\nassert solution('3\\n2') == '2'\nassert solution('2\\n0') == '0'\nassert solution('3\\n0') == '0'\nassert solution('15\\n1') == '1'\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''13''') == '12'\nassert solution('''16''') == '11311'\nassert solution('''20''') == '999'\n\n'''"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\n'''1\n1\n'''\n) == \"1\"\nassert solution(\n'''7\n27\n'''\n) == \"27\"\nassert solution(\n'''2\n98\n'''\n) == \"98\"\nassert solution(\n'''18\n27\n'''\n) == \"27\"\nassert solution(\n'''19\n17\n'''\n) == \"17\"\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''13''') == '12'\nassert solution('''12''') == '12'\nassert solution('''16''') == '11311'\nassert solution('''2016''') == '594'\n'''\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1\\n2\\n') == '2'\nassert solution('2\\n3\\n') == '3'\nassert solution('8\\n7\\n') == '23'\nassert solution('10\\n3\\n') == '33'\nassert solution('16\\n12913\\n') == '12891'\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('10') == 'A'\nassert solution('1') == '1'\nassert solution('12') == '12'\nassert solution('10') == 'A'\nassert solution('100') == 'BA'\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"5\\n5 5 5 5 4 2\\n\") == \"YES\"\nassert solution(\"7\\n3 3 3 3 3 3 3\\n\") == \"YES\"\nassert solution(\"6\\n1 5 5 5 4 2\\n\") == \"NO\"\nassert solution(\"7\\n1 2 1 2 1 2\\n\") == \"NO\"\nassert solution(\"7\\n4 4 4 4 4 4 4\\n\") == \"NO\"\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''6\n1 5 5 5 4 2''') == 'YES'\nassert solution('''5\n10 20 30 20 10''') == 'YES'\nassert solution('''4\n1 2 1 2''') == 'NO'\nassert solution('''7\n3 3 3 3 3 3 3''') == 'YES'\nassert solution('''7\n3 3 3 3 3 3 3''') == 'NO'"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''\n6\n1 5 5 5 4 2\n''') == 'YES'\n\nassert solution('''\n5\n10 20 30 20 10\n''') == 'YES'\n\nassert solution('''\n4\n1 2 1 2\n''') == 'NO'\n\nassert solution('''\n7\n3 3 3 3 3 3 3\n''') == 'YES'"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1\\n2\\n3') == 'YES'\nassert solution('2\\n1\\n3') == 'NO'\nassert solution('3\\n3\\n2') == 'YES'\nassert solution('3\\n2\\n1') == 'NO'\nassert solution('3\\n2\\n2') == 'YES'\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1 2 1 2') == 'YES'\nassert solution('3 3 3 3 3 3 3') == 'YES'\nassert solution('4 4 4 4 4 4 4') == 'NO'\nassert solution('7') == 'YES'\nassert solution('6') == 'NO'\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1\\n2\\n1') == 'YES'\nassert solution('2\\n1\\n2') == 'YES'\nassert solution('2\\n2\\n1') == 'NO'\nassert solution('2\\n1\\n2\\n2') == 'YES'\nassert solution('1\\n1\\n1\\n1') == 'NO'\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''6\n1 5 5 5 4 2''') == 'YES'\nassert solution('''5\n10 20 30 20 10''') == 'YES'\nassert solution('''4\n1 2 1 2''') == 'NO'\nassert solution('''7\n3 3 3 3 3 3 3''') == 'YES'\n\n\n'''\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"1 5 5 5 4 2\\n\") == \"YES\"\nassert solution(\"5\\n1 5 5 5 4 2\\n\") == \"YES\"\nassert solution(\"3\\n3 3 3 3 3 3 3\\n\") == \"NO\"\nassert solution(\"7\\n3 3 3 3 3 3 3\\n\") == \"YES\"\nassert solution(\"6\\n1 5 5 5 4 2\\n\") == \"YES\"\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''\n5\n1 5 5 5 4 2\n''') == 'YES'\n\nassert solution('''\n4\n1 2 1 2\n''') == 'NO'\n\nassert solution('''\n7\n3 3 3 3 3 3 3\n''') == 'YES'\n\nassert solution('''\n6\n1 5 5 5 4 2\n''') == 'YES'\n\nassert solution('''\n10\n1 2 3 4 5 6 7 8 9 10\n''') == 'YES'\n'''\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''\n6\n1 5 5 5 4 2\n''') == 'YES'\nassert solution('''\n5\n10 20 30 20 10\n''') == 'YES'\nassert solution('''\n4\n1 2 1 2\n''') == 'NO'\nassert solution('''\n7\n3 3 3 3 3 3 3\n''') == 'YES'\nassert solution('''\n5\n3 3 3 3 3\n''') == 'NO'\n'''\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\n'''\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('11 3') == '5'\nassert solution('11 6') == '4'\nassert solution('20 20') == '1'\nassert solution('14 5') == '6'\nassert solution('1000000 100') == '31248'"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('11 3') == '5'\nassert solution('11 6') == '4'\nassert solution('20 20') == '1'\nassert solution('14 5') == '6'\nassert solution('1000000 100') == '31248'\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"11 3\") == \"5\"\nassert solution(\"11 6\") == \"4\"\nassert solution(\"20 20\") == \"1\"\nassert solution(\"14 5\") == \"6\"\nassert solution(\"1000000 100\") == \"31248\"\n\"\"\"\nimport sys\nstdin = sys.stdin.read()\nn, k = map(int, stdin.split())\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1 3') == '5'\nassert solution('11 6') == '4'\nassert solution('20 20') == '1'\nassert solution('100 100') == '31248'\nassert solution('14 5') == '6'\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''\n11 3\n''') == '5'\n\nassert solution('''\n11 6\n''') == '4'\n\nassert solution('''\n20 20\n''') == '1'\n\nassert solution('''\n1000000 100\n''') == '31248'\n\nassert solution('''\n100000 200\n''') == '8'"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdin\n\n'''\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('11 3\\n') == '5'\nassert solution('11 6\\n') == '4'\nassert solution('20 20\\n') == '1'\nassert solution('14 5\\n') == '6'\nassert solution('1000000 100\\n') == '31248'"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdin[0]\n\n\"\"\"\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('4 3 2 2 -1 1') == '0 0'\nassert solution('4 4 2 0 1 1') == '-1'\nassert solution('10 10 10 1 -1 0') == '-1'\nassert solution('10 10 10 1 -1 0') == '-1'\nassert solution('2 3 2 2 -1 1') == '0 0'\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('4 3 2 2 -1 1') == '0 0'\nassert solution('4 4 2 0 1 1') == '-1'\nassert solution('10 10 10 1 -1 0') == '-1'\nassert solution('10 10 10 1 -1 0') == '-1'\nassert solution('10 10 10 1 -1 0') == '-1'\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\n    \"4 3 2 2 -1 1\"\n) == \"0 0\"\nassert solution(\n    \"4 4 2 0 1 1\"\n) == \"-1\"\nassert solution(\n    \"10 10 10 1 -1 0\"\n) == \"-1\"\nassert solution(\n    \"10 10 100 1 -1 0\"\n) == \"0 0\"\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('4 3 2 2 -1 1') == '0 0'\nassert solution('4 4 2 0 1 1') == '-1'\nassert solution('10 10 10 1 -1 0') == '-1'\n\"\"\"\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(input()) == expected\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == expect(stdin)\nprint(solution(stdin))\n\"\"\"\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdin\n\"\"\"\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"\n4 4 2 0 1 1\n\"\"\") == \"0 0\"\nassert solution(\n\"\"\"\n10 10 10 1 -1 0\n\"\"\") == \"-1\"\nassert solution(\n\"\"\"\n10 10 10 1 -1 1\n\"\"\") == \"-1\"\nassert solution(\n\"\"\"\n100 1000 100 1 0\n\"\"\") == \"-1\"\nassert solution(\n\"\"\"\n10 10 10 1 -1 -1\n\"\"\") == \"-1\"\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''4 3 2 2 -1 1''') == '0 0'\nassert solution('''4 4 2 0 1 1''') == '-1'\nassert solution('''10 10 10 1 -1 0''') == '-1'\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''4 3 2 2 -1 1''') == '0 0'\nassert solution('''4 4 2 0 1 1''') == '-1'\nassert solution('''10 10 10 1 -1 0''') == '-1'\n'''\n\nn, m, x, y, v_x, v_y = [int(x) for x in stdin.split()]\n\nv_x = v_x / abs(v_x)\nv_y = v_y / abs(v_y)"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdin\n\n\"\"\""
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('1 2') == \"NO\"\nassert solution('2 3') == \"YES\"\nassert solution('1 3') == \"YES\"\nassert solution('2 1') == \"YES\"\nassert solution('4 2') == \"NO\"\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('3 2\\n1 3\\n2 1') == 'YES'\nassert solution('5 5\\n3 3\\n3 3') == 'NO'\nassert solution('4 2\\n2 3\\n1 2') == 'YES'\nassert solution('3 2\\n1 2\\n2 1') == 'NO'\n\n\n\n###"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"2 1\") == \"NO\"\nassert solution(\"3 2\") == \"YES\"\nassert solution(\"4 2\") == \"NO\"\nassert solution(\"5 5\") == \"YES\"\nassert solution(\"6 5\") == \"NO\"\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('4 2\\n2 3\\n1 2\\n') == 'YES'\nassert solution('5 5\\n3 3\\n3 3\\n') == 'NO'\nassert solution('4 2\\n3 1\\n1 1\\n') == 'NO'\nassert solution('1 1\\n1 1\\n') == 'YES'\nassert solution('1 1\\n1 1\\n') == 'YES'\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''3 2''') == 'YES'\nassert solution('''5 5''') == 'YES'\nassert solution('''4 2''') == 'NO'\nassert solution('''2 3''') == 'NO'\nassert solution('''3 3''') == 'NO'\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdin\n\n\"\"\"\nfrom typing import Tuple\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\n\nimport sys\nfrom itertools import chain"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(input('')) == output('')\n'''"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''3 2''') == 'YES'\nassert solution('''5 5''') == 'NO'\nassert solution('''4 2''') == 'YES'\nassert solution('''2 3''') == 'NO'\nassert solution('''1 2''') == 'YES'\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"3 2 30 4\") == \"3\"\nassert solution(\"6 14 25 48\") == \"3\"\nassert solution(\"123 1 2143435 4\") == \"inf\"\nassert solution(\"123 1 2143435 4\") == \"inf\"\nassert solution(\"123 1 2143435 4\") == \"inf\"\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('1 2 3 4') == '3'\nassert solution('2 1 3 4') == 'inf'\nassert solution('-2 1 -3 4') == 'inf'\nassert solution('-2 1 -3 4 1') == 'inf'\nassert solution('0 2 3 4') == 'inf'\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == ''\n\"\"\"\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('3 2 30 4\\n6 14 25 48') == '3'\nassert solution('123 1 2143435 4\\n123 11 -5453 141245') == '0'\nassert solution('123 1 2143435 4\\n54343 -13 6 124') == 'inf'\nassert solution('123 1 2143435 4\\n54343 -13 6 124\\n6 14 25 48') == 'inf'\nassert solution('123 1 2143435 4\\n54343 -13 6 124\\n6 14 25 48\\n1 1234 4 5') == 'inf'\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdin\n\"\"\"\nfrom sys import stdin,stdout\nfrom math import log10\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''3 2 30 4''') == '3'\nassert solution('''6 14 25 48''') == '0'\nassert solution('''123 1 2143435 4''') == 'inf'\nassert solution('''123 1 2143435 4''') == 'inf'\nassert solution('''123 1 2143435 4''') == 'inf'\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == 'inf'"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3 4\") == \"3\"\nassert solution(\"4 3 2 1\") == \"inf\"\nassert solution(\"2 1 1\") == \"inf\"\nassert solution(\"12 1 1\") == \"inf\"\nassert solution(\"1 1 1\") == \"inf\"\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''3 2 30 4''') == '3'\nassert solution('''6 14 25 48''') == '3'\nassert solution('''123 1 2143435 4''') == '3'\nassert solution('''123 1 2143435 4''') == '0'\nassert solution('''123 1 2143435 4''') == 'inf'\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"4 8\\n..w..w..\\n........\\n........\\n..w..w..\\n\") == \"\\n\".join([\"..w++w..\", \"..+..+..\", \"..+..+..\", \"..w++w..\"])\n\n\"\"\""
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('3 6\\n....\\n.w...\\n...w..') == '....\\n.w++w..\\n++w+...\\n+w+...'\nassert solution('2 4\\n....\\n.w..\\n....\\n...w\\n.w..\\n....\\n....\\n...w\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdin\n\"\"\"\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == expected\nprint(solution(stdin))\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\n'''4 4\n..w..w..\n........\n........\n..w..w..\n'''\n) == '..w++w..\\n..+..+..\\n..+..+..\\n..w++w..\\n'\n\n\nassert solution(\n'''4 4\n....\n.w..\n....\n..w..\n'''\n) == '....\\nw.+..\\n....\\n....\\nw.+..\\n'\n\n\nassert solution(\n'''4 4\n......\n.w....\n......\n..w...\n......\n'''\n) == '+w+...\\n++.+..\\n++.+..\\n+w+...\\n'\n\n\nassert solution(\n'''6 6\n.w...\n......\n......\n.w....\n......\n.w....\n'''\n) == '+w+...\\n++.+..\\n++.+..\\n+w+...\\n'\n\n\nassert solution(\n'''2 4\n....\n.w..\n....\n..w..\n'''\n) == '....\\nw.+..\\n....\\n....\\nw.+..\\n'\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\n'''\n1 6\n....\n.w..\n''') == '''\n+w+...\n+.+...\n++w...\n'''\nassert solution(\n'''\n3 4\n..w..w..\n........\n........\n..w..w..\n''') == '''\n+w++w..\n..+..+..\n..+..+..\n..w++w..\n'''\nassert solution(\n'''\n5 6\n......\n.w....\n......\n..w...\n......\n''') == '''\n...w+...\n+.+...\n++w+...\n......\n'''\nassert solution(\n'''\n2 4\n....\n.w..\n''') == '''\n.w..\n+w..\n'''\nassert solution(\n'''\n3 4\n....\n.w..\n''') == '''\n+w++w..\n..+..+..\n..+..+..\n..w++w..\n'''\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"2 4\\n....\\nw....\\n....\\nw....\\n....\") == \"....\\n.w..\\n.+..\\n.+..\\nw..\\n\"\nassert solution(\"2 4\\n....\\nw....\\nw....\\nw....\\n....\") == \"....\\nw....\\nw....\\n....\\n\"\nassert solution(\"2 6\\nw..w.w\\n...w..\\n..w...\\n..w...\\nw..w.w\\n....w.w\") == \"..w++w..\\n+.+...\\n++w...\\n......\\n....w.w\\n\"\nassert solution(\"4 6\\n.w....\\nw....\\nw....\\nw....\\n....\\nw....\\n....\\nw....\\n....\") == \"....\\nw....\\nw....\\nw....\\n....\\nw....\\n....\\n.w++w..\\n.+..+..\\n.+..+..\\nw++w..\\n\"\nassert solution(\"4 6\\nw....\\nw....\\nw....\\nw....\\n....\\nw....\\n....\\nw....\\n....\") == \"....\\nw....\\nw....\\nw....\\n....\\nw....\\n....\\nw....\\n....\\n\"\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"4 8\n..w..w..\n........\n........\n..w..w..\n\"\"\") == \"\"\"..w++w..\n..+..+..\n..+..+..\n..w++w..\n\"\"\"\n\nassert solution(\n\"\"\"5 6\n......\n.w....\n......\n..w...\n......\n\"\"\") == \"\"\"......\n+w+...\n+.+...\n++w...\n......\n\"\"\"\n\nassert solution(\n\"\"\"2 4\n....\n.w..\n\"\"\") == \"\"\"....\n.w..\n\"\"\"\n\nassert solution(\n\"\"\"2 6\nw..w.w\n...w..\n\"\"\") == \"-1\"\n\nassert solution(\n\"\"\"2 8\n....\n.w..\n....\n..w..\n....\n....\n\"\"\") == \"\"\"....\n.w..\n....\n....\n....\n\"\"\""
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('') == '-1'\nassert solution('1 1\\nw') == 'w'\nassert solution('2 1\\nww\\n') == 'ww'\nassert solution('2 1\\nww\\n') == 'ww'\nassert solution('2 2\\nww\\n') == 'ww'\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"3 4\\n....\\n.w..\\n....\\n.w..\") == \"\\n....\\n.w..\\n....\\n.w..\\n\"\nassert solution(\"3 6\\nw..w.w\\nw..w..\\n....w.\\n...w..\\n....w.\\n....w.\\n....w.\\n....w.\\n\") == \"-1\"\nassert solution(\"2 6\\nw..w.w\\nw..w..\\n....w.\\n...w..\\n....w.\\n....w.\\n....w.\\n\") == \"\\nw..\\n.w.\\n.w.\\n.w.\\n.w.\\n.w.\\n\"\nassert solution(\"2 4\\n....\\n.w..\\n....\\n.w..\") == \"....\\n.w..\\n....\\n.w..\\n\"\nassert solution(\"1 1\\n.\\n.\") == \"+\\n\""
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''7''') == '''YES'''\nassert solution('''100''') == '''YES'''\nassert solution('''9960594''') == '''YES'''\nassert solution('''2551''') == '''NO'''\nassert solution('''2557''') == '''NO'''\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''7''') == 'YES'\nassert solution('''100''') == 'YES'\nassert solution('''100''') == 'YES'\nassert solution('''9960594''') == 'YES'\nassert solution('''50''') == 'NO'\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''7''') == 'YES'\nassert solution('''100''') == 'YES'\nassert solution('''15''') == 'NO'\nassert solution('''9960594''') == 'YES'\nassert solution('''2551''') == 'YES'\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('7') == 'YES\\n2 1'\nassert solution('100') == 'YES\\n1951 1949'\nassert solution('15') == 'NO'\nassert solution('9960594') == 'YES\\n1951 1949'\nassert solution('1537506937') == 'YES\\n31 1205'\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('4') == 'YES'\nassert solution('2') == 'YES'\nassert solution('4') == 'NO'\nassert solution('15') == 'YES'\nassert solution('9960594') == 'YES'\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"5\\n2\\n3\\n\") == \"YES\\n2 1\"\nassert solution(\"100\\n25\\n10\\n\") == \"YES\\n0 10\"\nassert solution(\"9960594\\n2551\\n2557\\n\") == \"YES\\n1951 1949\"\nassert solution(\"9960594\\n2551\\n2557\\n\") == \"NO\"\n\n\"\"\""
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''7''') == 'YES'\nassert solution('''100''') == 'YES'\nassert solution('''15''') == 'NO'\n'''\nn = int(stdin.readline())\na = int(stdin.readline())\nb = int(stdin.readline())\ns = str(a*b - n)\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"7\\n2\\n3\") == \"YES\\n2 1\"\nassert solution(\"100\\n25\\n10\") == \"YES\\n1951 1949\"\nassert solution(\"9960594\\n2551\\n2557\") == \"YES\\n1951 1949\"\nassert solution(\"15\\n4\\n8\") == \"NO\"\nassert solution(\"9960594\\n2551\\n2557\") == \"NO\"\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"7\") == \"YES\"\nassert solution(\"100\") == \"YES\"\nassert solution(\"15\") == \"NO\"\nassert solution(\"9960594\") == \"YES\"\nassert solution(\"9960594\") == \"YES\"\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"7\") == \"YES\"\nassert solution(\"100\") == \"YES\"\nassert solution(\"9960594\") == \"YES\"\nassert solution(\"15\") == \"NO\"\nassert solution(\"1539\") == \"YES\"\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"6\") == \"six\"\nassert solution(\"99\") == \"ninety-nine\"\nassert solution(\"20\") == \"twenty\""
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('6') =='six'\nassert solution('99') == 'ninety-nine'\nassert solution('20') == 'twenty'\nassert solution('0') == ''\nassert solution('09') == 'ninety-nine'\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"6\") == \"six\"\nassert solution(\"99\") == \"ninety-nine\"\nassert solution(\"20\") == \"twenty\"\nassert solution(\"79\") == \"ninety-seven\"\n\n\n\"\"\"\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('6') =='six'\nassert solution('99') == 'ninety-nine'\nassert solution('20') == 'twenty'\nassert solution('123') == 'one-twenty-three'\nassert solution('98') == 'ninety-eight'\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('6') =='six'\nassert solution('99') == 'ninety-nine'\nassert solution('20') == 'twenty'\nassert solution('0') == 'zero'\nassert solution('100') == 'one-hundred'\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('5') == 'five'\nassert solution('10') == 'ten'\nassert solution('2') == 'two'\nassert solution('15') == 'fifteen'\nassert solution('22') == 'twenty-two'\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('6') =='six'\nassert solution('99') == 'ninety-nine'\nassert solution('20') == 'twenty'\n\"\"\"\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('6') =='six'\nassert solution('99') == 'ninety-nine'\nassert solution('20') == 'twenty'\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"6\") == \"six\"\nassert solution(\"99\") == \"ninety-nine\"\nassert solution(\"20\") == \"twenty\"\nassert solution(\"36\") == \"thirty-six\"\nassert solution(\"34\") == \"thirty-four\"\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"6\") == \"six\"\nassert solution(\"99\") == \"ninety-nine\"\nassert solution(\"20\") == \"twenty\"\n\n\n\"\"\"\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1 2 3 4\") == \"1\"\nassert solution(\"998 999 1000\") == \"0\"\nassert solution(\"1 2 3 4 5\") == \"2\"\nassert solution(\"998 999 1000 2\") == \"2\"\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('2\\n' + '1 2\\n') == '2'\nassert solution('2\\n' + '1 3\\n') == '2'\nassert solution('2\\n' + '998 999 1000\\n') == '2'\nassert solution('2\\n' + '998 999 998\\n') == '2'\nassert solution('2\\n' + '998 999 999\\n') == '0'\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('6\\n1 3 4 5 6 9') == '2'\nassert solution('3\\n998 999 1000') == '2'\nassert solution('5\\n1 2 3 4 5') == '4'\nassert solution('5\\n998 999 1000') == '2'\nassert solution('6\\n1 3 4 5 6 9') == '2'\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''6\n1 3 4 5 6 9\n''') == '2'\nassert solution('''3\n998 999 1000\n''') == '2'\nassert solution('''5\n1 2 3 4 5\n''') == '4'\nassert solution('''1000\n1 2 3 4 5 6 7 8 9 10\n''') == '0'\nassert solution('''10\n4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10\n''') == '2'\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 3 4 5\\n9\\n999 1000 1000\\n\") == \"2\"\nassert solution(\"5\\n1 2 3 4 5\\n9\\n998 999 999\\n\") == \"2\"\nassert solution(\"6\\n1 3 4 5 6 9\\n9\\n998 999 1000\\n\") == \"2\"\nassert solution(\"7\\n1 2 3 4 5 6 7\\n9\\n998 999 999 999\\n\") == \"2\"\nassert solution(\"8\\n1 2 3 4 5 6 7 8\\n9\\n998 999 999 999 9\\n\") == \"2\"\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == ''\n\n'''\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('6\\n1 3 4 5 6 9\\n') == '2'\nassert solution('3\\n998 999 1000\\n') == '2'\nassert solution('5\\n1 2 3 4 5\\n') == '4'\nassert solution('5\\n1 2 3 4 5\\n') == '4'\n\n\n\"\"\"\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('6\\n1 3 4 5 6 9\\n') == '2'\nassert solution('3\\n998 999 1000\\n') == '2'\nassert solution('5\\n1 2 3 4 5\\n') == '4'\nassert solution('5\\n1 2 3 4 5\\n') == '4'\nassert solution('3\\n1 3 4 5\\n') == '1'\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('4\\n1 3 4 5') == '2'\nassert solution('5\\n1 3 4 5 9') == '2'\nassert solution('6\\n1 3 4 5 6 9') == '2'\nassert solution('10\\n1 3 4 5 6 7 8 9 10') == '4'\nassert solution('1000\\n1 3 4 5 6 7 8 9 10') == '4'\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('4\\n1 3 2 1') == '2'\nassert solution('6\\n2 2 2 2 2 2') == '3'\nassert solution('10\\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdin\n\n\n\n### Other solutions\n\nfrom math import ceil"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('4\\n1 3 2 1') == '2'\nassert solution('6\\n2 2 2 2 2 2') == '3'\nassert solution('6\\n2 2 2 2 2 2') == '3'\nassert solution('6\\n2 2 2 2 2 2') == '3'\nassert solution('6\\n2 2 2 2 2 2') == '3'\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''4\n1 3 2 1''') == '2'\nassert solution('''6\n2 2 2 2 2 2''') == '3'\nassert solution('''10\n10 10 10 10 10 10 10 10''') == '9'\nassert solution('''10\n3 1 3 1 3 1 3 1''') == '4'\nassert solution('''20\n
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('4\\n1 3 2 1') == '2'\nassert solution('6\\n2 2 2 2 2 2') == '3'\nassert solution('2\\n1') == '1'\nassert solution('10\\n
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == expected\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"\"\"4\n1 3 2 1\"\"\") == \"2\"\nassert solution(\"\"\"6\n2 2 2 2 2 2\"\"\") == \"3\"\nassert solution(\"\"\"5\n2 2 2 2 2\"\"\") == \"2\"\nassert solution(\"\"\"5\n2 2 2\"\"\") == \"2\"\nassert solution(\"\"\"5\n2\"\"\") == \"2\"\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 3 2 1\") == \"2\"\nassert solution(\"6\\n2 2 2 2 2 2\") == \"3\"\nassert solution(\"1000\\n3 4 4 4 4 4 4\") == \"6\"\nassert solution(\"1000\\n3 4 4 4 4 4 4\") == \"9\"\nassert solution(\"1000\\n2 2 2 2 2 2\") == \"5\"\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\n'''\n4\n1 3 2 1\n'''\n) == '2'\n\nassert solution(\n'''\n6\n2 2 2 2 2 2\n'''\n) == '3'\n\nassert solution(\n'''\n10\n2 2 2 2 2 2 2 2 2 2\n'''\n) == '9'\n\nassert solution(\n'''\n1000\n100000000000000000\n'''\n) == '999'\n\nassert solution(\n'''\n1000\n
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\n\"\"\"3\"\"\") == \"\"\"1 1\"\"\"\n\nassert solution(\n\"\"\"8\"\"\") == \"\"\"0 1\"\"\"\n\nassert solution(\n\"\"\"9\"\"\") == \"\"\"0 0\"\"\"\n\nassert solution(\n\"\"\"10\"\"\") == \"\"\"0 1\"\"\"\n\nassert solution(\n\"\"\"17\"\"\") == \"\"\"8 0\"\"\""
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''3\n1 9 3\n8 6 7\n4 2 5''') == '12 1'\n'''assert solution('''3\n1 9 3\n8 6 7\n4 2 5''') == '12 1'\nassert solution('''3\n4 5 2\n5 8 3\n3 7 9''') == '10 1'\n'''assert solution('''4\n2 1 1 1\n1 1 2 1\n1 1 1 1\n1 1 2 1\n1 1 1 1''') == '2 1'\nassert solution('''5\n5 4 4 4 4\n4 4 4 4 4\n4 4 4 4 4\n4 4 4 4 4\n4 4 4 4 4''') == '4 1'\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('3\\n1 9 3\\n8 6 7\\n4 2 5\\n') == '12 1'\n\"\"\"\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\nfrom sys import stdin,stdout\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''3\n1 9 3\n8 6 7\n4 2 5''') == '12 1'\nassert solution('''3\n9 8 7\n4 6 5\n2 3 4\n''') == '21 22'\nassert solution('''8\n1 9 3\n8 6 7\n4 2 5\n2 3 4\n2 3 4\n2 3 4\n2 3 4\n2 3 4\n2 3 4\n''') == '24'\nassert solution('''8\n1 9 3\n8 6 7\n4 2 5\n2 3 4\n2 3 4\n2 3 4\n2 3 4\n2 3 4\n2 3 4\n''') == '24'\nassert solution('''8\n1 9 3\n8 6 7\n4 2 5\n2 3 4\n2 3 4\n2 3 4\n2 3 4\n2 3 4\n2 3 4\n''') == '24'\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''8\n1 9 3\n8 6 7\n4 2 5''') == '12 1'\n\n\nassert solution('''4\n1 9 3\n8 6 7\n4 2 5''') == '12 1'\n\n\nassert solution('''5\n1 9 3\n8 6 7\n4 2 5\n3 4 5\n''') == '9 3'\n\n\nassert solution('''5\n2 3 3 3\n2 3 3 3\n2 3 3 3\n2 3 3 3\n2 3 3 3\n''') == '1 2'\n\n\nassert solution('''5\n2 3 3 3\n2 3 3 3\n2 3 3 3\n2 3 3 3\n2 3 3 3\n''') == '1 2'\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''\n3\n1 9 3\n8 6 7\n4 2 5\n''') == '12 1'\n\nassert solution('''\n4\n1 9 3\n8 6 7\n4 2 5\n''') == '7 1'\n\nassert solution('''\n6\n1 2 3 4 5 6\n''') == '1 1'\n\nassert solution('''\n5\n5 4 3 2 1\n''') == '1 1'\n\nassert solution('''\n10\n1 2 3 4 5 6 7 8 9 10\n''') == '8 7'"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"1\\n2\"\nassert solution(\"3\\n1 9 3\\n8 6 7\\n4 2 5\") == \"12 1\"\nassert solution(\"5\\n3 1 3 4 4\\n2 2 2 4 4\\n5 1 4 3 4\\n6 6 5 5 4\\n5 2 4 4 4\\n4 2 2 4 4\\n6 6 5 5 4\") == \"32\\n2\""
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''3''') == '12 1'\nassert solution('''3''') == '0 0'\nassert solution('''5''') == '15 4'\nassert solution('''8''') == '40 9'\nassert solution('''9''') == '49 18'\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1\\n9\\n3') == '12 1'\n\"\"\"\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution\u0434"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution\u0434"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution\u0434"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution\u0434"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution\u0434"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution\u0434"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution\u0434"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution\u0434"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution\u0434"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution\u0434"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('100010001') == 'yes'\nassert solution('100') == 'no'\nassert solution('00101') == 'yes'\nassert solution('1000') == 'no'\n\"\"\""
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('100010001') == 'yes'\nassert solution('100') == 'no'\nassert solution('10') == 'yes'\n\n\"\"\"\n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"100010001\") == \"yes\"\nassert solution(\"100\") == \"no\"\nassert solution(\"01000100\") == \"yes\"\nassert solution(\"10101010\") == \"yes\"\nassert solution(\"10101010\") == \"yes\"\n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"100010001\") == \"yes\"\nassert solution(\"100\") == \"no\"\nassert solution(\"1000\") == \"yes\"\nassert solution(\"0\") == \"no\"\nassert solution(\"11111\") == \"yes\"\n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"100010001\") == \"yes\"\nassert solution(\"100\") == \"no\"\nassert solution(\"100\") == \"no\"\nassert solution(\"\") == \"no\"\nassert solution(\"111\") == \"yes\"\n\"\"\""
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"100010001\") == \"yes\"\nassert solution(\"100\") == \"no\"\nassert solution(\"111111\") == \"no\"\nassert solution(\"001011\") == \"no\"\nassert solution(\"11111101\") == \"yes\"\n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('100010001') == 'yes'\nassert solution('100') == 'no'\nassert solution('1001') == 'yes'\nassert solution('0') == 'no'\nassert solution('1') == 'no'\n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(100010001) == \"yes\"\nassert solution(100) == \"no\"\nassert solution(\"100000001\") == \"no\"\nassert solution(\"1\") == \"no\"\nassert solution(\"1000000\") == \"no\"\n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('') == 'no'\nassert solution('10101') == 'yes'\nassert solution('100') == 'no'\nassert solution('100000001') == 'yes'\nassert solution('0000') == 'no'\n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('100010001') == 'yes'\nassert solution('100') == 'no'\nassert solution('10101001') == 'yes'\nassert solution('101') == 'no'\nassert solution('10111') == 'yes'\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('aacceeggiikkmmooqqssuuwwyy') == 'abcdefghijklmnopqrstuvwxyz'\nassert solution('thereisnoanswer') == '-1'\nassert solution('aaaaaa') == '-1'\nassert solution('aaacceeggiikkmmooqqssuuwwyy') == 'abcdefghijklmnopqrstuvwxyz'\nassert solution('aaacceee') == '-1'\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"aacceeggiikkmmooqqssuuwwyy\") == \"abcdefghijklmnopqrstuvwxyz\"\nassert solution(\"thereisnoanswer\") == \"-1\"\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('aacceeggiikkmmooqqssuuwwyy') == 'abcdefghijklmnopqrstuvwxyz'\nassert solution('thereisnoanswer') == '-1'\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('aacceeggiikkmmooqqssuuwwyy') == 'abcdefghijklmnopqrstuvwxyz'\nassert solution('thereisnoanswer') == '-1'\nassert solution('aacceeggiikkmmooqqssuuwwyy') == 'abcdefghijklmnopqrstuvwxyz'\nassert solution('thereisnoanswer') == '-1'\nassert solution('aacceeggiikkmmooqqssuuwwyy') == 'abcdefghijklmnopqrstuvwxyz'\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\n'''aacceggiikkmmooqqssuuwwyy'''\n) == 'abcdefghijklmnopqrstuvwxyz'\nassert solution(\n'''thereisnoanswer'''\n) == '-1'\nprint(\"solution: OK\")\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('aacceeggiikkmmooqqssuuwwyy') == 'abcdefghijklmnopqrstuvwxyz'\nassert solution('thereisnoanswer') == '-1'\nprint(solution(input()))\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('abcdefghijklmnopqrstuvwxyz') == 'abcdefghijklmnopqrstuvwxyz'\nassert solution('thereisnoanswer') == '-1'\nassert solution('aaaaa') == 'a'\nassert solution('aacceeggiikkmmooqqssuuwwyy') == 'abcdefghijklmnopqrstuvwxyz'\nassert solution('aacceeeggiikkmmooqqssuuwwyy') == '-1'\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(input()) == 'abcdefghijklmnopqrstuvwxyz'\n\"\"\"\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('') == '-1'\nassert solution('aacceeggiikkmmooqqssuuwwyy') == 'abcdefghijklmnopqrstuvwxyz'\nassert solution('thereisnoanswer') == '-1'\nassert solution('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa') == '-1'"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('aacceeggiikkmmooqqssuuwwyy') == 'abcdefghijklmnopqrstuvwxyz'\nassert solution('thereisnoanswer') == '-1'\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''3 3 2 3''') == '2.0000000000'\nassert solution('''12 17 9 40''') == '32.8333333333'\nassert solution('''\n3 3 2 3\n''') == '2.0000000000'\nassert solution('''\n12 17 9 40\n''') == '32.8333333333'\nassert solution('''\n
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('3 3 2 3\\n') == '2.0000000000'\nassert solution('12 17 9 40\\n') == '32.8333333333'\nassert solution('50 300 50 300\\n') == '8.77777777778'\nassert solution('100000000000 0 0 1000000000\\n') == '1.00000000000'\nassert solution('2 1 1 1\\n') == '2.0000000000'\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == ''\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == '32.8333333333'\nassert solution(stdin) == '2.0000000000'\nassert solution(stdin) == '32.8333333333'\nassert solution(stdin) == '32.8333333333'\nassert solution(stdin) == '32.8333333333'\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n\n-----\n\nThis\nproblem\nis\nan\niterative\nalgorithm,\nand\nits\nsolution\nwill\nbe\ndiscussed\nseparately.\n\"\"\"\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''3 3 2 3''') == '2.0000000000'\nassert solution('''12 17 9 40''') == '32.8333333333'\n\n\n-----\n\n'''\n\nimport sys\nfrom math import ceil, floor, sqrt"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''3 3 2 3''') == '2.0000000000'\nassert solution('''12 17 9 40''') == '32.8333333333'\nassert solution('''10 15 2 7''') == '32.9333333333'\n'''\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"3 3 2 3\") == \"2.0000000000\"\nassert solution(\"12 17 9 40\") == \"32.8333333333\"\n\n\n\"\"\""
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == '2.0000000000'\n\n\"\"\"\n\n__author__ = '__L1n__w@tch'\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"3 3 2 3\") == \"2.0000000000\"\nassert solution(\"12 17 9 40\") == \"32.8333333333\"\nassert solution(\"3 4 2 4\") == \"2.0\"\nassert solution(\"1 3 1 4\") == \"3.0\"\nassert solution(\"10 3 10 3\") == \"4.5\"\n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"4\\n2 2 2 2\") == \"-3 -3 -3 -3\"\nassert solution(\"1\\n0\") == \"0\"\nassert solution(\"3\\n-3 -3 2\") == \"-3 -3 2\"\nassert solution(\"5\\n-3 -3 2 1\") == \"-3 -3 2 1\"\nassert solution(\"10\\n-3 -3 2 1 5 8 9\") == \"-3 -3 2 1 5 8 9\"\n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''4\n2 2 2 2''') == '-3 -3 -3 -3'\nassert solution('''1\n0''') == '0'\nassert solution('''3\n-3 -3 2''') == '-3 -3 2'\nassert solution('''4\n2 2 2 2''') == '-3 -3 -3 -3'\nassert solution('''4\n0 0 0 0''') == '0'\n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"0\") == \"\"\nassert solution(\"1\") == \"\"\nassert solution(\"2\") == \"0\"\nassert solution(\"3\") == \"-3\"\n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''4\n2 2 2 2\n''') == '-3 -3 -3 -3'\nassert solution('''1\n0\n''') == '0'\nassert solution('''3\n-3 -3 2\n''') == '-3 -3 2'\n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''4\n2 2 2 2''') == '-3 -3 -3 -3'\nassert solution('''1\n0''') == '0'\nassert solution('''3\n-3 -3 2''') == '-3 -3 2'\nassert solution('''4\n2 2 2 2''') == '-3 -3 -3 -3'\nassert solution('''1\n-3 -3 2''') == '-3 -3 2'\n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('0\\n') == '0'\nassert solution('1\\n') == '0'\nassert solution('2\\n') == '0'\nassert solution('3\\n') == '0'\nassert solution('4\\n') == '0'\n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('4\\n2 2 2 2') == '-3 -3 -3 -3'\nassert solution('1\\n0') == '0'\nassert solution('3\\n-3 -3 2') == '-3 -3 2'\nassert solution('4\\n-3 -3 2') == '-3 -3 2'\nassert solution('4\\n0 1 0 0') == '0'\n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''4\n2 2 2 2\n''') == '-3 -3 -3 -3'\nassert solution('''1\n0\n''') == '0'\nassert solution('''3\n-3 -3 2\n''') == '-3 -3 2'\n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('4\\n2 2 2 2\\n0') == '-3 -3 -3 -3'\nassert solution('1\\n0') == '0'\nassert solution('3\\n-3 -3 2') == '-3 -3 2'\nassert solution('9\\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1') == '-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1'\nassert solution('10\\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1') == '-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1'"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('2\\n2\\n2\\n2') == '-3 -3 -3 -3'\nassert solution('2\\n0\\n2\\n2') == '0'\nassert solution('1\\n1\\n1\\n1') == '0'\nassert solution('1\\n2\\n2\\n2') == '-3 -3 2'\nassert solution('3\\n-3 -3 2\\n-3 -3 2\\n-3 -3 2') == '-3 -3 -3'\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1 2') == '2'\nassert solution('2 3') == '-1'\nassert solution('4 5') == '5'\nassert solution('9 9') == '3'\nassert solution('12 7') == '6'\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"4 2\") == \"2\"\nassert solution(\"5 3\") == \"-1\"\nassert solution(\"12 5\") == \"6\"\nassert solution(\"-2 11\") == \"10\"\nassert solution(\"-2 -11\") == \"2\"\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"4 2\") == \"2\"\nassert solution(\"5 3\") == \" -1\"\nassert solution(\"12 5\") == \"6\"\n\n\"\"\"\n\n\"\"\""
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('4 2') == '2'\nassert solution('5 3') == '-1'\nassert solution('12 5') == '6'"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('5 3') == '2'\nassert solution('4 2') == '2'\nassert solution('12 5') == '6'\nassert solution('12 6') == '6'\nassert solution('12 7') == '-1'\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1 2') == '2'\nassert solution('4 2') == '2'\nassert solution('5 3') == '-1'\nassert solution('12 5') == '6'\nassert solution('100 55') == '-1'\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"4 2\") == \"2\"\nassert solution(\"5 3\") == \"-1\"\nassert solution(\"12 5\") == \"6\"\nassert solution(\"10000000 50000000\") == \"10000000\"\nassert solution(\"10000000 50000000\") == \"10000000\"\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('4 2') == '2'\nassert solution('12 5') == '6'\nassert solution('5 3') == '-1'\n\n\n'''\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"2\\n4\\n\") == \"4\"\nassert solution(\"5\\n3\\n\") == \"-1\"\nassert solution(\"12 5\\n\") == \"6\"\nassert solution(\"12 10\\n\") == \"2\"\nassert solution(\"13\\n1\\n\") == \"13\"\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"4 2\") == \"2\"\nassert solution(\"5 3\") == \"-1\"\nassert solution(\"12 5\") == \"6\"\nassert solution(\"4 3\") == \"3\"\nassert solution(\"100 16\") == \"16\"\n"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"3\") == \"0\"\nassert solution(\"5\") == \"0\"\nassert solution(\"9\") == \"0\"\nassert solution(\"4\") == \"0\"\n"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''3\n0 1 2 3 4 5\n6 7 8 9 0 1\n2 3 4 5 6 7\n''') == '87'\nassert solution('''3\n0 1 3 5 6 8\n1 2 4 5 7 8\n2 3 4 6 7 9\n''') == '98'\n'''\n\n\nimport sys\n"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('3\\n0 1 2 3 4 5\\n6 7 8 9 0 1\\n2 3 4 5 6 7\\n') == '87'\nassert solution('3\\n0 1 3 5 6 8\\n1 2 4 5 7 8\\n2 3 4 6 7 9\\n') == '98'\nassert solution('3\\n1 0 2 3 4 5\\n1 2 4 5 7 8\\n1 3 4 6 7 9\\n') == '98'\nassert solution('3\\n1 0 2 3 4 5\\n6 7 8 9 0 1\\n2 3 4 5 6 7\\n2 3 4 6 7 9\\n') == '98'\nassert solution('3\\n1 0 2 3 4 5\\n6 7 8 9 0 1\\n0 1 2 3 4 5\\n2 3 4 5 6 7\\n') == '98'\n"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == \"\"\n\n\"\"\"\n\nn = int(input())"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"\"\"0 1 2 3 4 5\n6 7 8 9 0 1\n2 3 4 5 6 7\n\"\"\") == \"87\"\n\nassert solution(\"\"\"0 1 3 5 6 7\n1 2 4 5 7 8\n2 3 4 6 7 9\n\"\"\") == \"98\"\n\nassert solution(\"\"\"0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n\"\"\") == \"98\"\n\nassert solution(\"\"\"0 1 2 3 4 5\n6 7 8 9 0 1\n2 3 4 5 6 7\n\"\"\") == \"87\""
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"87\"\nassert solution(\"3\\n0 1 2 3 4 5\\n6 7 8 9 0 1\\n2 3 4 5 6 7\") == \"98\"\nassert solution(\"5\\n0 1 3 5 6 8\\n1 2 4 5 7 8\\n2 3 4 6 7 9\\n3 4 5 6 7 8\\n4 5 6 7 8 9\") == \"73\"\nassert solution(\"6\\n0 1 3 5 6 8\\n1 2 4 5 7 8\\n2 3 4 6 7 9\\n3 4 5 6 8 9\\n4 5 6 7 9\") == \"73\""
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('3\\n0 1 2 3 4 5\\n6 7 8 9 0 1\\n2 3 4 5 6 7\\n') == '87'\nassert solution('3\\n0 1 3 5 6 8\\n1 2 4 5 7 8\\n2 3 4 6 7 9\\n') == '98'\nassert solution('3\\n0 1 3 5 6 8\\n1 2 4 5 7 8\\n2 3 4 6 7 9\\n') == '98'\nassert solution('3\\n9 9 8 8 8 8 8 8\\n9 8 9 9 9 9 9 9\\n8 8 8 8 8 8 8 8\\n') == '98'\nassert solution('3\\n9 9 8 8 8 8 8 8\\n9 8 9 9 9 9 9 9\\n8 8 8 8 8 8 8 8\\n') == '98'\n"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''0 1 2 3 4 5\n6 7 8 9 0 1\n2 3 4 5 6 7\n''') == '87'\nassert solution('''0 1 3 5 6 8\n1 2 4 5 7 8\n2 3 4 6 7 9\n''') == '98'\nassert solution('''0 1 3 5 6 8\n1 2 4 5 7 8\n2 3 4 6 7 9\n''') == '0'\nassert solution('''0 1 2 3 4 5\n6 7 8 9 0 1\n2 3 4 5 6 7\n''') == '98'\nassert solution('''0 1 2 3 4 5\n6 7 8 9 0 1\n2 3 4 5 6 7\n''') == '0'\n"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''3\n0 1 2 3 4 5\n6 7 8 9 0 1\n2 3 4 5 6 7\n''') == '87'\n\nassert solution('''3\n0 1 3 5 6 8\n1 2 4 5 7 8\n2 3 4 6 7 9\n''') == '98'\n\nassert solution('''4\n0 1 2 3 4 5\n6 7 8 9 0 1\n2 3 4 5 6 7\n3 4 5 6 7 8\n4 5 6 7 8 9\n''') == '108'\n'''"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''3''') == ''\nassert solution('''0 1 2 3 4 5''') == '0'\nassert solution('''6 7 8 9 0 1''') == '87'\nassert solution('''0 1 3 5 6 7''') == '98'\nassert solution('''0 1 2 3 4 5''') == '0'\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"\"\":\n    n, k = [int(x) for x in stdin.split(' ')]\n    print (n * pow(10, k) // n)\n    return \"\""
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''375 4''') == '30000'\nassert solution('''10000 1''') == '10000'\nassert solution('''38101 0''') == '38101'\nassert solution('''123456789 8''') == '12345678900000000'"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('38101 0') == '38101'\nassert solution('375 4') == '30000'\nassert solution('10000 1') == '10000'\nassert solution('123456789 8') == '12345678900000000'\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"1 4\") == \"1\"\nassert solution(\"2323 16\") == \"2323\"\nassert solution(\"1111 11\") == \"11111\"\nassert solution(\"222222222222 22\") == \"222222222222\"\nassert solution(\"1 2\") == \"3\"\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1000 0') == '1000'\nassert solution('2222 0') == '2222'\nassert solution('4 1') == '4'\nassert solution('22222 1') == '22444'\nassert solution('666 0') == '666'\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('375 4\\n') == '30000'\nassert solution('10000 1\\n') == '10000'\nassert solution('38101 0\\n') == '38101'\nassert solution('123456789 8\\n') == '12345678900000000'\nprint(solution(input()))\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"3125 5\") == \"3125\"\nassert solution(\"38101 0\") == \"38101\"\nassert solution(\"123456789 8\") == \"12345678900000000\"\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('375 4') == '30000'\nassert solution('10000 1') == '10000'\nassert solution('38101 0') == '38101'\nassert solution('123456789 8') == '12345678900000000'\nassert solution('38101 8') == '381018'\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"375 4\") == \"30000\"\nassert solution(\"10000 1\") == \"10000\"\nassert solution(\"38101 0\") == \"38101\"\nassert solution(\"123456789 8\") == \"12345678900000000\"\nprint(solution(input()))"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''3 3\n1 1 1\n1 1 1\n0 1 1''') == '3'\nassert solution('''3 2\n0 0\n0 0\n0 0\n''') == '0'\nassert solution('''3 2\n0 0\n0 0\n0 0\n''') == '-1'\nassert solution('''3 2\n1 0 1\n1 0 1\n0 0 0''') == '0'\nassert solution('''3 2\n1 0 1\n1 0 1\n0 0 0''') == '1 1'\n"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('') == -1\nassert solution('1 1 1') == -1\nassert solution('1 1 1\\n1 1 1\\n0 1 1\\n') == -1\nassert solution('1 1 1\\n1 1 1\\n0 1 1\\n') == -1\nassert solution('1 1 1\\n1 1 1\\n1 1 1\\n') == -1\n"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''3 3\n1 1 1\n1 1 1\n0 1 1''') == '3'\nassert solution('''3 2\n0 0\n0 0\n0 0''') == '0'\nassert solution('''3 2\n0 0\n0 0\n0 0''') == '-1'\nassert solution('''2 2\n0 0\n0 0''') == '-1'\nassert solution('''1 1\n0 0''') == '-1'\n"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(input_data) == solution_data\n\"\"\""
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''3 3\n1 1 1\n1 1 1\n0 1 1''') == '3'\nassert solution('''3 2\n0 0\n0 0\n0 0\n''') == '-1'\nassert solution('''3 2\n0 0\n0 0\n0 0\n''') == '0'\nassert solution('''3 2\n0 0\n0 0\n0 0\n''') == '0'\nassert solution('''3 2\n1 0 1\n1 0 1\n0 0 0\n''') == '1 1'\n"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"3 2\\n0 0\\n0 0\\n0 0\\n\") == \"0\\n1\\n1\\n1\"\nassert solution(\"3 3\\n0 0 0\\n0 0 0\\n0 0 0\\n\") == \"-1\"\n"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\n'''\n"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('3 3\\n1 1 1\\n1 1 1\\n0 1 1\\n') == '3'\nassert solution('3 2\\n0 0\\n0 0\\n0 0\\n') == '0'\nassert solution('3 2\\n0 0\\n0 0\\n0 0\\n') == '-1'\nassert solution('3 2\\n0 0\\n0 0\\n0 0\\n') == '0'\nassert solution('3 3\\n1 1 1\\n1 1 1\\n0 1 1\\n') == '3'\n"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == ''\n"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\n\nfrom collections import deque\n\nimport sys\n\nsys.setrecursionlimit(10 ** 6)\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"2 2 2\") == \"0.333333333333 0.333333333333 0.333333333333\"\nassert solution(\"2 1 2\") == \"0.150000000000 0.300000000000 0.550000000000\"\nassert solution(\"1 1 3\") == \"0.057142857143 0.657142857143 0.285714285714\"\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''2 2 2''') == '0.333333333333 0.333333333333 0.333333333333'\nassert solution('''2 1 2''') == '0.150000000000 0.300000000000 0.550000000000'\nassert solution('''1 1 3''') == '0.057142857143 0.657142857143 0.285714285714'\nassert solution('''4 4 4''') == '1.0'\nassert solution('''4 1 2''') == '0.300000000000 0.371428571429 0.285714285714'\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"2 2 2\") == \"0.333333333333 0.333333333333 0.333333333333\"\nassert solution(\"2 1 2\") == \"0.150000000000 0.300000000000 0.550000000000\"\nassert solution(\"1 1 3\") == \"0.057142857143 0.657142857143 0.285714285714\"\nassert solution(\"4 5 6\") == \"0.225317437724 0.142679918331 0.079589895915\"\nassert solution(\"5 5 5\") == \"0.052422057074 0.307766247764 0.554242205707\"\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"1 1 3\") == \"0.150000000000 0.300000000000 0.550000000000\"\nassert solution(\"2 2 2\") == \"0.333333333333 0.333333333333 0.333333333333\"\nassert solution(\"2 1 2\") == \"0.150000000000 0.300000000000 0.550000000000\"\nassert solution(\"2 1 1\") == \"0.142857142857 0.285714285714 0.400000005960464\"\nassert solution(\"2 1 1\") == \"0.142857142857 0.285714285714 0.400000005960464\"\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(input()) == output()\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == expected\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''2 2 2''') == '0.333333333333 0.333333333333 0.333333333333'\nassert solution('''2 1 2''') == '0.150000000000 0.300000000000 0.550000000000'\nassert solution('''1 1 3''') == '0.057142857143 0.657142857143 0.285714285714'\nassert solution('''2 3 4''') == '0.12500000000 0.37500000000 0.2500000000'\nassert solution('''3 3 4''') == '0.037777777778 0.070277777778 0.03666666667'\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"2 2 2\") == \"0.333333333333 0.333333333333 0.333333333333\"\nassert solution(\"2 1 2\") == \"0.150000000000 0.300000000000 0.550000000000\"\nassert solution(\"1 1 3\") == \"0.057142857143 0.657142857143 0.285714285714\"\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('2 1 2') == '0.333333333333 0.333333333333 0.333333333333'\nassert solution('2 2 2') == '0.333333333333 0.333333333333 0.333333333333'\nassert solution('1 1 3') == '0.150000000000 0.300000000000 0.550000000000'\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('1 10 9 20 1') == '2'\nassert solution('1 100 50 200 75') == '50'\nassert solution('1 100 50 200 75') == '50'\nassert solution('1 10 9 20 1') == '2'\nassert solution('1 100 50 200 75') == '50'\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1 10 9 20 1') == '2'\nassert solution('1 100 50 200 75') == '50'\nassert solution('1 100 50 200 100') == '0'\nassert solution('1 100 50 200 1') == '0'\nassert solution('1 10 50 200 75') == '50'\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"1 10 9 20 1\") == \"2\"\nassert solution(\"1 100 50 200 75\") == \"50\"\nassert solution(\"1 100 50 200 75 4\") == \"46\"\nassert solution(\"1 10 9 1\") == \"0\"\nassert solution(\"1 10 9 1 4\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1 10 9 20 1') == '2'\nassert solution('1 100 50 200 75') == '50'\nassert solution('1 100 50 200 75 1') == '50'\nassert solution('1 10 9 20 1') == '2'\nassert solution('1 100 50 200 75') == '50'\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == \"50\"\n\"\"\"\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1 10 9 20 1') == '2'\nassert solution('1 100 50 200 75') == '50'\nassert solution('1 10 0 10 10') == '5'\nassert solution('1 100 50 200 75') == '50'\nassert solution('1 10 0 10 50') == '5'\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1 2 0'\n    '0 1 1'\n    '0 2 2'\n    '-3 4 -1'\n    '-2 6 3'\n    '1 0 1'\n    '0 1 2'\n    '2 0 2'\n    '-1 -4 5'\n    '3 -2 4'\n    '1 2 4'\n    ) == '13'\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('5 6\\n1 2 0\\n0 1 1\\n0 2 2\\n-3 4 -1\\n-2 6 3\\n1 0 1\\n0 1 2\\n2 0 2\\n-1 -4 5\\n3 -2 4\\n1 2 4') == '13'\nassert solution('5 6\\n1 2 0\\n0 1 1\\n0 2 2\\n-3 4 -1\\n-2 6 3\\n1 0 1\\n0 1 2\\n2 0 2\\n-1 -4 5\\n3 -2 4\\n1 2 4') == '13'\nprint(solution(''))\n'''\n\nimport sys"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"INF\"\nassert solution(\"5 6\\n1 2 0\\n0 1 1\\n0 2 2\\n-3 4 -1\\n-2 6 3\\n1 0 1\\n0 1 2\\n2 0 2\\n-1 -4 5\\n3 -2 4\\n1 2 4\\n\") == \"13\"\nprint(\"All test cases passed successfully.\")\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"1 2 0\") == \"13\"\nassert solution(\"0 1 1\") == \"13\"\nassert solution(\"0 2 2\") == \"13\"\nassert solution(\"-3 4 -1\") == \"13\"\nassert solution(\"-2 6 3\") == \"13\"\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1 2 0\\n0 1 1\\n0 2 2\\n-3 4 -1\\n-2 6 3\\n1 0 1\\n0 1 2\\n2 0 2\\n-1 -4 5\\n3 -2 4\\n1 2 4') == '13'\nassert solution('1 2 0\\n0 1 1\\n0 2 2\\n3 4 -1\\n2 6 3\\n1 0 1\\n0 1 2\\n2 0 2\\n1 -4 5\\n3 -2 4\\n1 2 4') == '13'\nprint(solution('1 2 0\\n0 1 1\\n0 2 2\\n3 4 -1\\n2 6 3\\n1 0 1\\n0 1 2\\n2 0 2\\n1 -4 5\\n3 -2 4\\n1 2 4'))\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"1 2 0\") == \"1\"\nassert solution(\"0 1 1\") == \"1\"\nassert solution(\"0 2 2\") == \"0\"\nassert solution(\"-3 4 -1\") == \"0\"\nassert solution(\"-2 6 3\") == \"0\"\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''1 2 0\n0 1 1\n0 2 2''') == '13'\nassert solution('''5 6\n1 2 0\n0 1 1\n0 2 2\n-3 4 -1\n-2 6 3\n1 0 1\n0 1 2\n2 0 2\n-1 -4 5\n3 -2 4\n1 2 4''') == '13'\n'''"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\n    input(\n        \"N M\\n\"\n        \"A_1 B_1 C_1\\n\"\n        \": \\n\"\n        \"A_N B_N C_N\\n\"\n        \"D_1 E_1 F_1\\n\"\n        \": \\n\"\n        \"D_M E_M F_M\\n\"\n    )) == \"13\"\n\nassert solution(\n    input(\n        \"5 6\\n\"\n        \"1 2 0\\n\"\n        \"0 1 1\\n\"\n        \"0 2 2\\n\"\n        \"-3 4 -1\\n\"\n        \"-2 6 3\\n\"\n        \"1 0 1\\n\"\n        \"0 1 2\\n\"\n        \"2 0 2\\n\"\n        \"-1 -4 5\\n\"\n        \"3 -2 4\\n\"\n        \"1 2 4\\n\"\n    )) == \"13\"\n\nassert solution(\n    input(\n        \"2 3\\n\"\n        \"0 1 2\\n\"\n        \"0 2 3\\n\"\n        \"1 2 2\\n\"\n        \"1 3 2\\n\"\n    )) == \"3\"\n\nassert solution(\n    input(\n        \"1\\n\"\n        \"1 1\\n\"\n    )) == \"1\"\n\nassert solution(\n    input(\n        \"5\\n\"\n        \"-1 1\\n\"\n        \"-1 2\\n\"\n        \"-1 3\\n\"\n        \"-1 4\\n\"\n    )) == \"INF\""
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1 2 0') == '13'\nassert solution('0 1 1') == '13'\nassert solution('0 2 2') == '13'\nassert solution('-3 4 -1') == '13'\nassert solution('-2 6 3') == '13'\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(input_str) == output_str\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"1 2 5\") == \"YES\"\nassert solution(\"1 3 6\") == \"NO\"\nassert solution(\"1 4 10\") == \"YES\"\nassert solution(\"1 5 11\") == \"YES\"\nassert solution(\"2 3 4\") == \"NO\"\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"3 10 4\") == \"NO\"\nassert solution(\"3 10 3\") == \"YES\"\nassert solution(\"3 8 51\") == \"YES\"\nassert solution(\"3 8 52\") == \"YES\"\nassert solution(\"3 8 53\") == \"NO\"\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"3 10 4\\n\") == \"NO\\n\"\nassert solution(\"3 10 3\\n\") == \"YES\\n\"\nassert solution(\"3 8 51\\n\") == \"YES\\n\"\nassert solution(\"3 8 52\\n\") == \"YES\\n\"\nassert solution(\"3 8 53\\n\") == \"NO\\n\"\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''3 10 4''') == 'NO'\nassert solution('''3 10 3''') == 'YES'\nassert solution('''3 8 51''') == 'YES'\nassert solution('''3 8 52''') == 'YES'\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''3 10 4''') == 'NO'\nassert solution('''3 10 3''') == 'YES'\nassert solution('''3 8 51''') == 'YES'\nassert solution('''3 8 52''') == 'YES'\nassert solution('''3 8 55''') == 'YES'\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('3 10 4') == 'NO'\nassert solution('3 10 3') == 'YES'\nassert solution('3 8 51') == 'YES'\nassert solution('3 8 52') == 'YES'\nassert solution('3 8 23') == 'NO'\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(input(\"\")) == \"YES\"\nassert solution(input(\"3 10 4\\n\")) == \"NO\"\nassert solution(input(\"3 10 3\\n\")) == \"YES\"\nassert solution(input(\"3 8 51\\n\")) == \"YES\"\nassert solution(input(\"3 8 52\\n\")) == \"NO\"\nprint(\"Well done!\")\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == 'YES'\n\n'''\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''5\n1 10\n2 9\n3 9\n2 3\n2 9\n''') == '2 1'\n\nassert solution('''3\n1 5\n2 6\n6 20\n''') == '-1 -1'\n\nassert solution('''5\n1 10\n2 9\n3 9\n2 3\n2 9\n''') == '2 1'\n'''\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('1\\n2\\n3') == '1\\n2'\nassert solution('1\\n2\\n3\\n4\\n5') == '-1\\n-1'\nassert solution('1\\n2\\n3\\n4\\n5\\n6') == '1\\n6'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7') == '2\\n7'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9') == '-1\\n-1'\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1 10\\n2 9\\n3 9\\n2 3\\n2 9\\n') == '2 1\\n'\nassert solution('5\\n1 10\\n2 9\\n3 9\\n2 3\\n2 9\\n') == '2 1\\n'\nassert solution('5\\n1 10\\n2 10\\n3 9\\n2 3\\n2 9\\n') == '2 -1\\n'\nassert solution('5\\n1 10\\n2 10\\n3 10\\n2 3\\n2 9\\n') == '2 -1\\n'\nassert solution('5\\n1 10\\n2 9\\n3 9\\n2 3\\n2 10\\n') == '2 -1\\n'\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1 10') == '2 1'\nassert solution('2 9') == '2 1'\nassert solution('3 9') == '2 1'\nassert solution('2 3') == '2 1'\nassert solution('2 9') == '2 1'\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1 10\\n2 9\\n3 9\\n2 3\\n2 9\\n') == '2 1'\nassert solution('2 5\\n2 6\\n6 20\\n') == '2 1'\nassert solution('1 10\\n2 9\\n3 9\\n2 3\\n2 9\\n') == '-1 -1'\nassert solution('1 5\\n2 6\\n6 20\\n') == '-1 -1'\nassert solution('1 10\\n2 9\\n3 9\\n2 3\\n2 9\\n') == '2 1'\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == expected\n\"\"\"\n\nn = int(input())\na = []\nfor i in range(n):\n    l, r = map(int, input().split())\n    a.append((l, r))\na = sorted(a, key = lambda x: x[0])\na = sorted(a, key = lambda x: x[1])\n\nans = (-1, -1)\nfor i in range(n):\n    if i == 0:\n        ans = (1, i + 1)\n    else:\n        if a[i - 1][1] < a[i][0]:\n            ans = (i + 1, 1)\nprint(*ans)"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('1 10\\n2 9\\n3 9\\n2 3\\n2 9\\n') == '2 1\\n'\nassert solution('5\\n1 10\\n2 9\\n3 9\\n2 3\\n2 9\\n') == '2 1\\n'\nassert solution('3\\n1 5\\n2 6\\n6 20\\n') == '-1 -1\\n'\nassert solution('1 5\\n2 6\\n6 20\\n') == '-1 -1\\n'\nassert solution('5\\n1 10\\n2 9\\n6 7\\n7 8\\n7 9\\n6 7\\n4 5\\n1 2\\n2 3\\n3 4\\n3 5\\n3 6\\n2 1\\n') == '3 2\\n'\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''\n5\n1 10\n2 9\n3 9\n2 3\n2 9\n''') == '2 1'\n\nassert solution('''\n3\n1 5\n2 6\n6 20\n''') == '-1 -1'\n\nassert solution('''\n2\n1 5\n2 6\n''') == '-1 -1'\n'''\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1 10\\n2 9\\n3 9\\n2 3\\n2 9\\n') == '2 1'\nassert solution('1 10\\n2 9\\n3 9\\n2 3\\n2 9\\n') == '2 1'\nassert solution('1 5\\n2 6\\n6 20\\n') == '-1 -1'\nassert solution('1 5\\n2 6\\n6 20\\n') == '-1 -1'\nassert solution('1 5\\n2 6\\n6 20\\n') == '-1 -1'\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''\n5\n1 10\n2 9\n3 9\n2 3\n2 9\n''') == '2 1'\n\nassert solution('''\n3\n1 5\n2 6\n6 20\n''') == '-1 -1'\n\nassert solution('''\n3\n1 5\n2 6\n6 20\n''') == '1 1'\n\nassert solution('''\n6\n1 10\n2 9\n3 9\n2 3\n2 9\n''') == '1 1'\n\nassert solution('''\n10\n1 10\n2 9\n3 9\n2 3\n2 9\n''') == '1 1'"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('8\\nAG?C??CT') == 'AGACGTCT'\nassert solution('4\\nAGCT') == 'AGACGTCT'\nassert solution('6\\n????G?') == '==='\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"8\") == \"AG?C??CT\"\nassert solution(\"4\") == \"AGCT\"\nassert solution(\"6\") == \"????G?\"\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('8\\nAG?C??CT\\n') == 'AGACGTCT\\n'\nassert solution('4\\nAGCT\\n') == 'AGCT\\n'\nassert solution('6\\n????G?\\n') == '===\\n'"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''4\nAG?C??CT\n''') == 'AGACGTCT'\nassert solution('''6\n????G?\n''') == '==='\nassert solution('''8\nAG?C??CT\n''') == 'AGACGTCT'\nassert solution('''4\nAA??\n''') == '==='\nassert solution('''6\n????G?\n''') == '==='\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('8\\nAG?C??CT') == 'AGACGTCT'\nassert solution('4\\nAGCT') == 'AGACGTCT'\nassert solution('6\\n????G?') == '==='\n\n\n-----"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdin\n\nprint(solution(input()))"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''8\nAG?C??CT''') == 'AGACGTCT'\nassert solution('''4\nAGCT''') == 'AGCT'\nassert solution('''6\n????G?''') == '==='\nassert solution('''4\nAA??''') == '==='"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(input()) == '==='\nassert solution(input()) == '==='\nassert solution(input()) == '==='\nassert solution(input()) == '==='\nassert solution(input()) == '==='\n\n\n\n'''\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('AG?C??CT') == 'AGACGTCT'\nassert solution('AA??') == '==='\nassert solution('????G?') == '==='\nassert solution('AAG') == 'AAG'\nassert solution('AAG?G') == '==?'\n\n\n-----\n\nimport sys"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('???') == '==='\nassert solution('AA??') == '==='\nassert solution('AA????') == '===='\nassert solution('AG?C??CT') == 'AGACGTCT'\n"
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"x.ox\\nxoxx\\nooxo\\nooox\") == \"YES\"\nassert solution(\"x.ox\\nxoxx\\nxoxo\\nooox\") == \"YES\"\nassert solution(\"o.x.\\nooxo\\nooox\\nooox\") == \"NO\"\nassert solution(\"o.x.\\nooxo\\nooox\\nooox\") == \"NO\"\nassert solution(\"x.ox\\nox..\\nxoxx\\nooox\") == \"NO\"\n"
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"xx..\\n.oo.\\nx...\\noox.\\n\") == \"YES\"\nassert solution(\"x.ox\\nox..\\nx.o.\\noo.x\\n\") == \"YES\"\nassert solution(\"x..x\\n..oo\\no...\\nx.xo\\n\") == \"NO\"\nassert solution(\"o.x.\\no...\\n.x..\\nooxx\\n\") == \"NO\"\nassert solution(\"ox..\\nox..\\nox..\\nox..\\n\") == \"NO\"\n\n\n\n-----Alternate Solutions-----\n"
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''\n..\n.\n''') == 'YES'\nassert solution('''\n.\no\n''') == 'YES'\nassert solution('''\n.\nx\n''') == 'NO'\nassert solution('''\nx.\nx\n''') == 'NO'\nassert solution('''\no..\n.o\n''') == 'YES'\n"
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('xx..\\n.oo.\\nx...\\noox.\\n') == 'YES'\nassert solution('x.ox\\no...\\n.x..\\nooxx\\n') == 'YES'\nassert solution('x..x\\n..oo\\no...\\nx.xo\\n') == 'NO'\nassert solution('o.x.\\no...\\n.x..\\nooxx\\n') == 'NO'\n\n\n\"\"\""
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\\\nx..\n..oo\no...\nx.xo\n\"\"\") == 'YES'\nassert solution(\"\"\"\\\nx.ox\nox..\nx.o.\noo.x\n\"\"\") == 'NO'\nassert solution(\"\"\"\\\no.x.\no...\n.x..\nooxx\n\"\"\") == 'NO'\nassert solution(\"\"\"\\\no.x.\no...\n.x..\nooxx\n\"\"\") == 'YES'\nassert solution(\"\"\"\\\nx..x\n..oo\no...\nx.xo\n\"\"\") == 'YES'\n"
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('x.ox\\no...\\n.x..\\nooxx\\n') == 'YES'\nassert solution('o.x.\\no...\\n.x..\\nooxx\\n') == 'NO'\nassert solution('x..x\\n..oo\\no...\\nx.xo\\n') == 'NO'\nassert solution('x..x\\nooxo\\nooox\\nxoxo\\n') == 'YES'\nassert solution('o..o\\nooxo\\nooox\\nxoxo\\n') == 'NO'\n"
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('..x') == 'YES'\nassert solution('x..') == 'YES'\nassert solution('x.ox') == 'NO'\nassert solution('o.x.\\nx..\\nx.o\\noo.x') == 'NO'\nassert solution('o.x.\\nx..\\nx.o\\noo.x\\n') == 'YES'\n\n\n\"\"\"\n"
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\n\"xx..\\n.oo.\\nx...\\noox.\\n\"\n) == 'YES'\nassert solution(\n\"x.ox\\nox..\\nx.o.\\noo.x\\n\"\n) == 'YES'\nassert solution(\n\"o.x.\\no...\\n.x..\\nooxx\\n\"\n) == 'NO'\nassert solution(\n\"x..x\\n..oo\\no...\\nx.xo\\n\"\n) == 'NO'\nassert solution(\n\"o.x.\\no...\\n.x..\\nooxx\\n\"\n) == 'NO'\n"
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('xx..\\n.oo.\\nx...\\noox.\\n') == 'YES'\nassert solution('x.ox\\nox..\\nx.o.\\noo.x\\n') == 'YES'\nassert solution('o.x.\\no...\\n.x..\\nooxx\\n') == 'NO'\nassert solution('x..x\\n..oo\\no...\\nx.xo\\n') == 'NO'\n"
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('x..x') == \"YES\"\nassert solution('o...') == \"NO\"\nassert solution('o.x.') == \"NO\"\nassert solution('x.xo') == \"NO\"\nassert solution('x..x') == \"YES\"\n"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1\\n3 2\\n') == 'YES'\nassert solution('5\\n1 2 3 4 5\\n') == 'NO'\nassert solution('1\\n2 2 3 4 5\\n') == 'YES'\nassert solution('3\\n2 3 4 5\\n') == 'YES'\nassert solution('4\\n1 2 3 4 5\\n') == 'YES'\n"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('1\\n3 2\\n') == 'YES'\nassert solution('3\\n1 3 2\\n') == 'NO'\nassert solution('2\\n1 3 2\\n') == 'NO'\nassert solution('1\\n3 2\\n') == 'YES'\nassert solution('1\\n2 2 3\\n') == 'YES'\n"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1 3 2\\n') == 'YES'\nassert solution('5\\n1 2 3 4 5\\n') == 'YES'\nassert solution('5\\n2 2 3 4 5\\n') == 'NO'\nassert solution('1 3 2\\n') == 'YES'\nassert solution('5\\n2 2 3 4 5\\n') == 'YES'\n"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"1\\n3\\n2\") == \"YES\"\nassert solution(\"2\\n2\\n2\") == \"NO\"\nassert solution(\"5\\n2\\n3\\n4\\n5\") == \"YES\"\nassert solution(\"5\\n1\\n2\\n3\\n4\\n5\") == \"NO\"\n\n\n\n\"\"\""
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\nimport sys"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('3\\n1 3 2\\n') == 'YES'\nassert solution('5\\n1 2 3 4 5\\n') == 'NO'\nassert solution('5\\n2 2 3 4 5\\n') == 'YES'\nassert solution('5\\n1 2 1 2 2\\n') == 'YES'\nassert solution('5\\n1 1 1 1 1\\n') == 'NO'\n"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\n    \"\"\"3\n1 3 2\"\"\"\n) == \"YES\"\n\nassert solution(\n    \"\"\"5\n1 2 3 4 5\"\"\"\n) == \"NO\"\n"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''3\n1 3 2\n''') == 'YES'\nassert solution('''5\n1 2 3 4 5\n''') == 'NO'\nassert solution('''5\n2 2 3 4 5\n''') == 'YES'\n'''\n\n'''\n"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1\\n3\\n2\\n') == 'YES'\nassert solution('2\\n2\\n2\\n') == 'NO'\nassert solution('4\\n4\\n4\\n4\\n') == 'YES'\nassert solution('3\\n3\\n3\\n') == 'YES'\nassert solution('6\\n6\\n6\\n6\\n6\\n') == 'YES'\n"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"1 2 3 4 5\") == 'YES'\nassert solution(\"1 2 3 4 5\") == 'NO'\nassert solution(\"1 2 3 4 5\") == 'YES'\nassert solution(\"1 2 3 4 5\") == 'NO'\nassert solution(\"1 2 3 4 5\") == 'YES'\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('4 2\\n11 0 0 14\\n5 4\\n') == 'Yes'\nassert solution('6 1\\n2 3 0 8 9 10\\n5\\n') == 'No'\nassert solution('7 7\\n0 0 0 0 0 0 0\\n1 2 3 4 5 6 7\\n') == 'Yes'\nassert solution('7 7\\n0 0 0 0 0 0 0\\n9 8 7 6 5 4 3 2 1\\n') == 'Yes'\nassert solution('7 7\\n0 0 0 0 0 0 0\\n1 2 3 4 5 6 7\\n') == 'Yes'\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('4 2\\n11 0 0 14\\n5 4\\n') == 'Yes'\nassert solution('6 1\\n2 3 0 8 9 10\\n5\\n') == 'No'\nassert solution('7 7\\n0 0 0 0 0 0 0\\n1 2 3 4 5 6 7\\n') == 'Yes'\nassert solution('4 1\\n8 94 0 4\\n89\\n') == 'No'\nassert solution('7 7\\n0 0 0 0 0 0 0\\n1 2 3 4 5 6 7\\n') == 'Yes'\n\n\"\"\""
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\n'''\n4 2\n11 0 0 14\n5 4\n''') == 'Yes'\n\nassert solution(\n'''\n6 1\n2 3 0 8 9 10\n5\n''') == 'Yes'\n\nassert solution(\n'''\n7 7\n0 0 0 0 0 0 0\n1 2 3 4 5 6 7\n''') == 'Yes'\n\nassert solution(\n'''\n7 1\n1 2 3 4 5 6 7\n9\n''') == 'Yes'\n\nassert solution(\n'''\n7 7\n9 9 0 0 0 0 0\n1 2 3 4 5 6 7\n''') == 'No'\n'''"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('3 4') == 'Yes'\nassert solution('4 1') == 'No'\nassert solution('5 7') == 'Yes'\nassert solution('7 7') == 'No'\nassert solution('1 3 0 4 5 6 7') == 'Yes'\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(input()) == \"Yes\"\nassert solution(input()) == \"No\"\n\"\"\""
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''4 2\n11 0 0 14\n5 4''') == 'Yes'\n\nassert solution('''6 1\n2 3 0 8 9 10\n5\n''') == 'Yes'\n\nassert solution('''4 1\n8 94 0 4\n89\n''') == 'Yes'\n\nassert solution('''7 7\n0 0 0 0 0 0 0\n1 2 3 4 5 6 7\n''') == 'Yes'\n\nassert solution('''8 8\n0 0 0 0 0 0 0 0 0\n1 2 3 4 5 6 7 8 9 10 11\n''') == 'No'\n'''\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(input(\"\")) == output\n'''"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('4 2\\n11 0 0 14\\n5 4\\n') == 'Yes'\nassert solution('7 7\\n0 0 0 0 0 0 0\\n1 2 3 4 5 6 7\\n') == 'Yes'\nassert solution('7 7\\n0 0 0 0 0 0 0\\n2 3 4 5 6 7 8\\n') == 'No'\nassert solution('3 1\\n1 2 0\\n2\\n') == 'Yes'\nassert solution('4 1\\n8 94 0 4\\n89\\n') == 'No'\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('4 2\\n11 0 0 14\\n5 4\\n') == 'Yes'\nassert solution('4 2\\n11 0 0 14\\n5 4\\n') == 'No'\nassert solution('6 1\\n2 3 0 8 9 10\\n5\\n') == 'Yes'\nassert solution('6 1\\n2 3 0 8 9 10\\n5\\n') == 'No'\nassert solution('7 7\\n0 0 0 0 0 0 0\\n1 2 3 4 5 6 7\\n') == 'Yes'\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == 'NO'\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''1 6 2''') == 'YES'\nassert solution('''5 1 1''') == 'NO'\nassert solution('''5 1 3''') == 'YES'\nassert solution('''5 1 5''') == 'NO'\nassert solution('''5 1 5''') == 'NO'\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\n'''1 6 2'''\n) == 'YES'\n\nassert solution(\n'''5 1 1'''\n) == 'NO'\n\nassert solution(\n'''2 5 3'''\n) == 'NO'\n\nassert solution(\n'''1 1 1'''\n) == 'NO'\n\nassert solution(\n'''2 1 2'''\n) == 'YES'"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1 6 2') == 'YES'\nassert solution('5 1 1') == 'NO'\n\"\"\"\nimport sys"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''1 6 2''') == 'YES'\nassert solution('''5 1 1''') == 'NO'\nassert solution('''1 6 2''') == 'YES'\nassert solution('''5 1 1''') == 'NO'\nassert solution('''1 6 2''') == 'YES'\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\n'''1 6 2''') == 'YES'\nassert solution(\n'''5 1 1''') == 'NO'\nassert solution(\n'''5 4 1''') == 'YES'\nassert solution(\n'''5 3 4''') == 'YES'\nassert solution(\n'''5 4 2''') == 'NO'\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('1 6 2') == 'YES'\nassert solution('5 1 1') == 'NO'\nassert solution('5 1 5') == 'YES'\nassert solution('5 3 3') == 'NO'\nassert solution('5 1 1') == 'YES'\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''1 6 2''') == 'YES'\nassert solution('''5 1 1''') == 'NO'\nassert solution('''2 3 4\n2 1 2''') == 'YES'\nassert solution('''1 2 1''') == 'YES'\nassert solution('''1 1 1''') == 'NO'\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('3 4 2\\n4 3 3') == \"YES\"\nassert solution('2 5 4\\n5 2 2') == \"NO\"\nassert solution('1 1 1\\n1 1 1') == \"YES\"\nassert solution('1 1 1\\n1 1 1') == \"YES\"\nassert solution('1 1 1\\n1 1 1') == \"YES\"\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''1 6 2''') == \"YES\"\nassert solution('''5 1 1''') == \"NO\"\nassert solution('''5 1 1''') == \"NO\"\nassert solution('''1 1 1''') == \"NO\"\nassert solution('''1 1 1''') == \"NO\"\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1 0 0 1') == 'YES'\nassert solution('0 1 0 0') == 'NO'\nassert solution('0 0 1 0') == 'NO'\nassert solution('0 0 0 1') == 'NO'\nassert solution('1 0 0 0') == 'NO'\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n0 0 0 1') == \"YES\"\nassert solution('0 1 0 0\\n1 0 1 0\\n1 1 0 0\\n0 0 0 1\\n') == \"NO\"\nassert solution('1 0 0 0\\n0 0 0 1\\n0 0 0 0\\n1 0 1 0\\n') == \"NO\"\nassert solution('1 0 0 0\\n0 0 0 1\\n0 0 0 0\\n1 0 1 0\\n') == \"NO\"\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"0 1 0 0\\n0 0 0 1\\n0 0 0 0\\n0 0 0 1\\n\") == \"YES\"\nassert solution(\"1 0 0 0\\n0 0 0 1\\n0 0 0 0\\n0 0 0 1\\n\") == \"NO\"\nassert solution(\"1 0 0 0\\n1 0 1 0\\n1 0 0 0\\n0 0 0 1\\n\") == \"YES\"\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"\n1 0 0 1\n0 1 0 0\n0 0 1 0\n0 0 0 1\n\"\"\"\n    ) == 'YES'\n\nassert solution(\n\"\"\"\n0 1 0 0\n1 0 1 0\n1 1 0 0\n0 0 0 1\n\"\"\"\n    ) == 'NO'\n\nassert solution(\n\"\"\"\n1 0 0 0\n0 0 0 1\n0 0 0 0\n1 0 1 0\n\"\"\"\n    ) == 'NO'\n\nassert solution(\n\"\"\"\n1 0 0 0\n0 0 0 1\n0 0 0 0\n1 0 1 0\n\"\"\"\n    ) == 'YES'\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1 0 0 1') == 'YES'\nassert solution('0 1 0 0') == 'NO'\nassert solution('0 0 1 0') == 'NO'\nassert solution('0 0 0 1') == 'NO'\nassert solution('1 0 0 0') == 'NO'\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('0 0 0 1\\n0 0 0 0\\n0 0 1 0\\n0 0 0 1\\n') == 'YES'\nassert solution('0 0 0 1\\n1 0 1 0\\n0 0 1 0\\n0 0 0 1\\n') == 'NO'\nassert solution('1 0 0 0\\n0 0 0 1\\n0 0 1 0\\n0 0 0 1\\n') == 'NO'\nassert solution('1 0 0 0\\n1 0 1 0\\n0 0 1 0\\n0 0 0 1\\n') == 'NO'\nassert solution('1 0 0 0\\n1 1 0 0\\n0 0 1 0\\n0 0 0 1\\n') == 'YES'\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"1 0 0 1\") == \"YES\"\nassert solution(\"0 1 0 0\") == \"NO\"\nassert solution(\"0 0 1 0\") == \"NO\"\nassert solution(\"0 0 0 1\") == \"NO\"\nassert solution(\"1 0 1 0\") == \"NO\"\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"1 0 0 0\") == \"NO\"\nassert solution(\"0 0 0 1\") == \"NO\"\nassert solution(\"0 1 0 0\") == \"NO\"\nassert solution(\"1 0 1 0\") == \"NO\"\nassert solution(\"0 1 0 1\") == \"YES\"\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''0 0 0 0\n1 0 1 0\n0 0 0 1\n0 0 0 0''') == 'NO'\nassert solution('''0 1 0 0\n1 0 1 0\n0 0 1 0\n0 0 0 1''') == 'NO'\nassert solution('''0 0 1 0\n0 0 1 0\n0 0 0 1\n0 0 0 0''') == 'NO'\nassert solution('''1 0 0 0\n0 0 0 1\n0 0 0 0\n1 0 1 0''') == 'YES'\nassert solution('''0 1 0 0\n0 0 0 1\n0 0 0 0\n1 0 1 0''') == 'YES'\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''1 0 0 1\n0 1 0 0\n0 0 1 0\n0 0 0 1\n''') == \"YES\"\n\nassert solution('''0 1 1 0\n1 0 1 0\n1 1 0 0\n0 0 0 1\n''') == \"NO\"\n\nassert solution('''1 0 0 0\n0 0 0 1\n0 0 0 0\n1 0 1 0\n''') == \"NO\"\n\n\n-----\n\ntry:\n    assert solution('''1 0 0 1\n0 1 0 0\n0 0 1 0\n0 0 0 1\n''') == \"YES\"\n    assert solution('''0 1 1 0\n1 0 1 0\n1 1 0 0\n0 0 0 1\n''') == \"NO\"\n    "
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"NO\"\nassert solution(\"09\") == \"NO\"\nassert solution(\"3\") == \"NO\"\nassert solution(\"123456789\") == \"NO\"\nassert solution(\"911\") == \"YES\"\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('', '123') == 'NO'\nassert solution('', '09') == 'NO'\nassert solution('', '123456789') == 'YES'\nassert solution('', '12345') == 'NO'\nassert solution('', '123456789') == 'YES'\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('2') == 'NO'\nassert solution('3') == 'YES'\nassert solution('9') == 'YES'\nassert solution('123456789') == 'YES'\nassert solution('911') == 'YES'\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('8') == 'NO'\nassert solution('8') == 'NO'\nassert solution('0') == 'YES'\nassert solution('0') == 'YES'\nassert solution('2') == 'NO'\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('0') == 'NO'\nassert solution('1') == 'NO'\nassert solution('6') == 'NO'\nassert solution('9') == 'YES'\nassert solution('01') == 'NO'\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''3\n586\n''') == 'NO'\nassert solution('''2\n09\n''') == 'NO'\nassert solution('''9\n123456789\n''') == 'YES'\nassert solution('''5\n4569\n''') == 'NO'\nassert solution('''9\n157891\n''') == 'YES'\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"a\") == \"\"\nassert solution(\"1\") == \"\"\nassert solution(\"123456789\") == \"\"\nassert solution(\"123456789123456789\") == \"\"\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"NO\"\nassert solution(\"56\") == \"NO\"\nassert solution(\"123456789\") == \"NO\"\nassert solution(\"911\") == \"YES\"\nassert solution(\"0123456789\") == \"YES\"\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1 2 3') == 'NO'\nassert solution('4 5 6') == 'YES'\nassert solution('1 2 3 4 5 6 7 8 9') == 'YES'\nassert solution('9') == 'YES'\nassert solution('123456789') == 'YES'\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"NO\"\nassert solution(\"3\") == \"NO\"\nassert solution(\"4\") == \"NO\"\nassert solution(\"9\") == \"YES\"\nassert solution(\"123456789\") == \"YES\"\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('2 1') == '10'\nassert solution('3 5') == '15'\nassert solution('1 1') == '1'\nassert solution('2 3') == '5'\nassert solution('3 6') == '7'\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"4 2\") == \"10\"\nassert solution(\"4 1\") == \"5\"\nassert solution(\"0 2\") == \"0\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"3 5\") == \"10\"\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"\"\"4 2\n2 1\n3 5\n2 3\n1 5\"\"\") == \"10\"\nassert solution(\"\"\"4 1\n0 2\n0 3\n3 5\n0 6\"\"\") == \"5\"\nassert solution(\"\"\"4 1\n2 1\n3 5\n2 3\n1 5\"\"\") == \"10\"\nassert solution(\"\"\"4 1\n2 1\n3 5\n2 3\n1 5\n5 5\"\"\") == \"5\"\nassert solution(\"\"\"4 1\n2 1\n3 5\n2 3\n1 5\n4 4\"\"\") == \"5\"\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('4 2') == '10'\nassert solution('4 1') == '5'\nassert solution('3 5') == '10'\nassert solution('2 1') == '10'\nassert solution('0 2') == '5'\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"4 2\") == \"10\"\nassert solution(\"4 1\") == \"5\"\nassert solution(\"2 1\") == \"5\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"1 2\") == \"5\"\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('4 2') == '10'\nassert solution('4 1') == '5'\nassert solution('1 10') == '10'\nassert solution('0 10') == '0'\nassert solution('2 1') == '2'\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == '10'\n\n'''\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdin.split()[1]\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\n    input='''\n4 2\n2 1\n3 5\n2 3\n1 5\n''') == '10'\n\nassert solution(\n    input='''\n4 1\n0 2\n0 3\n3 5\n0 6\n''') == '5'\n\nassert solution(\n    input='''\n4 1\n2 1\n3 5\n2 3\n1 5\n3 6\n''') == '6'\n\nassert solution(\n    input='''\n4 1\n0 1\n0 1\n3 5\n0 6\n''') == '6'\n\nassert solution(\n    input='''\n4 1\n0 1\n0 1\n3 5\n0 6\n3 6\n''') == '6'"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('5 2') == '10'\nassert solution('1 10') == '0'"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''5 2''') == '10'\nassert solution('''1 10''') == '0'\nassert solution('''10 3''') == '0'\nassert solution('''1000000000 1000000000''') == '0'\nassert solution('''1000000000 1000000000''') == '0'\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"5 2\") == \"10\"\nassert solution(\"1 10\") == \"0\"\nassert solution(\"3 5\") == \"1\"\nassert solution(\"3 5\") == \"0\"\nassert solution(\"5 2\") == \"10\"\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"5 2\") == \"10\"\nassert solution(\"1 10\") == \"0\"\nassert solution(\"1 10\") == \"0\"\nassert solution(\"1 10\") == \"0\"\nassert solution(\"1 10\") == \"0\"\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('5 2') == '10'\nassert solution('1 10') == '0'\n\n\"\"\"\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1 10') == '0'\nassert solution('2 10') == '1'\nassert solution('5 2') == '10'\nassert solution('5 3') == '2'\nassert solution('10 4') == '1'\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''5 2''') == '10'\nassert solution('''1 10''') == '0'\nassert solution('''10 100''') == '0'\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(input(\">\")) == None\n\n\"\"\""
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1 2') == 0\nassert solution('5 3') == 10\nassert solution('1 10') == 0\nassert solution('2 4') == 0\nassert solution('3 5') == 0\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''5 2''') == '10'\nassert solution('''1 10''') == '0'\nassert solution('''1 10''') == '0'\nassert solution('''100000 1000''') == '0'\nassert solution('''100000 100000''') == '0'\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == '-1'\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('20 15 2 3\\n') == '1\\n'\nassert solution('10 11 2 4\\n') == '-1\\n'\nassert solution('10 100 2 3\\n') == '3\\n'\nassert solution('10 100 2 10\\n') == '4\\n'\nassert solution('10 100 2 10\\n') == '-1\\n'\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''20 15 2 3''') == '1'\nassert solution('''10 11 2 4''') == '-1'\nassert solution('''10 11 2 4''') == '-1'\nassert solution('''10 11 2 4''') == '-1'\nassert solution('''10 11 2 4''') == '-1'\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == '1'\nassert solution('10 11 2 4') == '-1'\nassert solution('10 11 2 3') == '4'\nassert solution('20 15 2 3') == '1'\nassert solution('10 11 2 4') == '-1'\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''20 15 2 3''') == '1'\nassert solution('''10 11 2 4''') == '-1'\nassert solution('''1000 10000 2000 1000''') == '-1'\nassert solution('''200 1000 2000 2000''') == '1'\nassert solution('''1000 10000 2000 1000''') == '-1'\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('20 15 2 3') == '1'\nassert solution('10 11 2 4') == '-1'\nassert solution('10 11 2 4') == '-1'\nassert solution('10 11 2 4') == '-1'\nassert solution('10 11 2 4') == '-1'\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('20 15 2 3') == '1'\nassert solution('10 11 2 4') == '-1'\nassert solution('10 10 10 10') == '-1'\nassert solution('10 10 10 10') == '-1'\nassert solution('10 10 10 10') == '-1'\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(input) == \"\"\"\"\"\"\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('20 15 2 3') == '1'\nassert solution('10 11 2 4') == '-1'\nassert solution('10 11 22 11') == '4'\nassert solution('100 5 2 3') == '9'\nassert solution('100000001 100000001 100000001 1000000000') == '1'\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''5 4\nWWWW\nWWWB\nWWWB\nWWBB\nWWWW''') == \"5\"\nassert solution('''1 2\nBB\n''') == \"-1\"\nassert solution('''3 3\nWWW\nWWW\nWWW\n''') == \"1\"\nassert solution('''4 4\nWWBB\nBBWB\nBBBB\nWBWB\n''') == \"2\"\nassert solution('''5 4\nWWWW\nWWWB\nWWWB\nWWBB\nWWWW\n''') == \"1\"\n'''\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('1 2\\nWWW') == '-1'\nassert solution('1 2\\nWWW') == '-1'\nassert solution('1 2\\nWWWBB') == '1'\nassert solution('1 2\\nWWWBB') == '1'\nassert solution('1 2\\nWWWBB') == '1'\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('5 4\\nWWWW\\nWWWB\\nWWWB\\nWWBB\\nWWWW') == '5'\nassert solution('1 2\\nBB') == '-1'\nassert solution('3 3\\nWWW\\nWWW\\nWWW\\n') == '1'\nassert solution('3 3\\nWWW\\nWWW\\nWWW\\n') == '-1'\n\n\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('3 1') == '-1'\nassert solution('4 2') == '-1'\nassert solution('5 2') == '3'\nassert solution('5 4') == '1'\nassert solution('5 10') == '5'\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdin\n'''\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('5 4\\nWWWW\\nWWWB\\nWWWB\\nWWBB\\nWWWW') == '5'\nassert solution('1 2\\nBB') == '-1'\nassert solution('3 3\\nWWW\\nWWW\\nWWW') == '1'\nassert solution('3 2\\nWWW\\nWWW\\nWWW') == '-1'\nassert solution('3 2\\nWBB\\nWWW') == '-1'\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''5 4\nWWWW\nWWWB\nWWWB\nWWBB\nWWWW''') == \"5\"\nassert solution('''1 2\nBB''') == \"-1\"\nassert solution('''3 3\nWWW\nWWW\nWWW''') == \"1\"\nassert solution('''5 5\nWWWWWWWW\nWWWWWWWW\nWWWWWWWW\nWWWWWWWW\nWWWWWWWW''') == \"6\"\nassert solution('''5 5\nWWWWWWWW\nWWWWWWWW\nWWWWWWWW\nWWWWWWWW\nWWWWWWWW''') == \"5\"\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''5 4\nWWWW\nWWWB\nWWWB\nWWBB\nWWWW\n''') == '5'\n\nassert solution('''1 2\nBB\n''') == '-1'\n\nassert solution('''3 3\nWWW\nWWW\nWWW\n''') == '1'\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('5 4\\nWWWW\\nWWWB\\nWWWB\\nWWBB\\nWWWW\\n') == '5'\nassert solution('2 2\\nBB\\n') == '-1'\nassert solution('1 2\\nBB\\n') == '-1'\nassert solution('3 3\\nWWW\\nWWW\\nWWW\\n') == '1'\nassert solution('3 4\\nWWW\\nWWW\\nWWW\\nWWW\\n') == '1'\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('5 4\\nWWWW\\nWWWB\\nWWWB\\nWWBB\\nWWWW') == '5\\n'\nassert solution('1 2\\nBB\\n') == '-1\\n'\nassert solution('3 3\\nWWW\\nWWW\\nWWW\\n') == '1\\n'\nassert solution('1 1\\nBB') == '-1\\n'\nassert solution('1 2\\nWWW') == '-1\\n'\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n2 1 4 3 5\") == \"Yes\\n\"\nassert solution(\"5\\n1 1 1 1 1\\n1 0 1 0 1\\n\") == \"Yes\\n\"\nassert solution(\"3\\n2 3 9\\n1 7 9\\n\") == \"No\\n\"\nassert solution(\"3\\n2 3 9\\n1 7 9\\n\") == \"No\\n\"\nassert solution(\"1\\n1 1 1 1 1\\n1 0 1 0 1\\n\") == \"Yes\\n\"\n\n\n\"\"\""
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('5') == 'Yes'\nassert solution('3') == 'No'\nassert solution('1 0 1 0 1') == 'Yes'\nassert solution('1 1 1 1 1') == 'Yes'\nassert solution('2 3 9') == 'No'\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('5\\n1 2 3 4 5\\n2 1 4 3 5\\n') == 'Yes'\nassert solution('3\\n2 3 9\\n1 7 9\\n') == 'No'\nassert solution('3\\n1 1 1 1 1\\n1 0 1 0 1\\n') == 'Yes'\nassert solution('1\\n1\\n') == 'Yes'\nassert solution('2\\n2\\n') == 'No'\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('5') == 'Yes'\nassert solution('5') == 'Yes'\nassert solution('3') == 'No'\nassert solution('1 2 3 4 5') == 'Yes'\nassert solution('1 0 1 0 1') == 'Yes'\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"No\"\nassert solution(\"1\") == \"Yes\"\nassert solution(\"1 2 3 4 5\") == \"No\"\nassert solution(\"1 2 3 4 5 1 2 3 4 5\") == \"No\"\nassert solution(\"1 1 1 1 1\") == \"Yes\"\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('4\\n1 2 3 4\\n2 1 4 3\\n') == 'Yes'\nassert solution('5\\n1 2 3 4 5\\n2 1 4 3 5\\n') == 'Yes'\nassert solution('3\\n2 3 9\\n1 7 9\\n') == 'No'\nassert solution('10\\n1 1 1 1 1 1 1 1 1\\n1 0 1 0 1 0 1 0 1\\n') == 'Yes'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\"\"\"\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"5\") == \"Yes\"\nassert solution(\"1 2 3 4 5\") == \"Yes\"\nassert solution(\"2 1 4 3 5\") == \"Yes\"\nassert solution(\"3\") == \"No\"\nassert solution(\"1 1 1 1 1\") == \"Yes\"\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''5\n1 2 3 4 5\n2 1 4 3 5\n''') == 'Yes'\nassert solution('''5\n1 1 1 1 1\n1 0 1 0 1\n''') == 'Yes'\nassert solution('''3\n2 3 9\n1 7 9\n''') == 'No'\nassert solution('''3\n2 3 9\n1 7 9\n''') == 'No'\nassert solution('''4\n4 4 4 4\n2 1 4 3\n''') == 'Yes'\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdin\n\n\"\"\""
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('2\\n120 90\\n180 100\\n240 110\\n') == '0'\nassert solution('3\\n0 90 90\\n180 100 160\\n') == '0'\nassert solution('4\\n180 110 180 110\\n180 110 180 110\\n180 110 180 110\\n180 110 180 110\\n') == '0'\nassert solution('4\\n180 110 180 110\\n180 110 180 110\\n180 110 180 110\\n180 110 180 110\\n') == '0'\nassert solution('4\\n180 110 180 110\\n180 110 180 110\\n180 110 180 110\\n180 110 180 110\\n') == '0'\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\n    '''\n    4\n    90 90 90 90\n    '''\n    ) == '0'\n\nassert solution(\n    '''\n    3\n    100 100 160\n    '''\n    ) == '40'\n\nassert solution(\n    '''\n    1\n    360\n    '''\n    ) == '360'\n\nassert solution(\n    '''\n    4\n    170 30 150 10\n    '''\n    ) == '0'\n\"\"\"\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('4\\n90 90 90 90') == '0'\nassert solution('4\\n100 100 160') == '0'\nassert solution('3\\n100 100 160') == '40'\nassert solution('3\\n170 30 150 10') == '0'\nassert solution('3\\n170 30 150 10') == '0'\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1 2 3 4') == '0'\nassert solution('1 2 3 4 3 4') == '0'\nassert solution('1 3 4') == '0'\nassert solution('4') == '0'\nassert solution('1 1 1 1') == '360'\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('4\\n90 90 90 90\\n') == '0'\nassert solution('3\\n100 100 160\\n') == '40'\nassert solution('1\\n360\\n') == '360'\nassert solution('4\\n170 30 150 10\\n') == '0'\nassert solution('4\\n170 30 150 10\\n') == '0'\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"4\\n90 90 90 90\\n\") == \"0\"\nassert solution(\"3\\n100 100 160\\n\") == \"40\"\nassert solution(\"1\\n360\\n\") == \"360\"\nassert solution(\"4\\n170 30 150 10\\n\") == \"0\"\nassert solution(\"4\\n170 30 150 10\\n\") == \"0\"\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(input_data) == output_data\n\n\"\"\"\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('0\\n1') == '1'\nassert solution('2\\n2') == '2'\nassert solution('1\\n1') == '0'\nassert solution('1\\n2') == '1'\nassert solution('1\\n3') == '2'\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('4\\n90 90 90 90\\n') == '0'\nassert solution('3\\n100 100 160\\n') == '40'\nassert solution('1\\n360\\n') == '360'\nassert solution('4\\n170 30 150 10\\n') == '0'\nassert solution('0\\n') == '0'\n\"\"\"\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n\nfrom math import pi, atan, sin, cos\n\nn = int(input())\n\na = list(map(int,input().split()))"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1 3') == '7'\nassert solution('2 2') == '9'\n\"\"\"\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdin\n\"\"\"\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == '7'\nassert solution(stdin) == '9'\nassert solution(stdin) == '4'\nassert solution(stdin) == '6'\nassert solution(stdin) == '5'\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1 3') == '7'\nassert solution('2 2') == '9'\nassert solution('1 1') == '1'\nassert solution('1 3') == '7'\nassert solution('2 1') == '9'"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == '7'\nassert solution(stdin) == '9'\nassert solution(stdin) == '9'\nassert solution(stdin) == '9'\nassert solution(stdin) == '9'\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == ''\nassert solution('1 3') == '7'\nassert solution('2 2') == '9'\nassert solution('2 1') == '0'\nassert solution('100 9') == '0'\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('1 3') == '7'\nassert solution('2 2') == '9'\nassert solution('3 6') == '2'\nassert solution('2 2') == '9'\nassert solution('1 3') == '7'\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(input()) == \"7\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1 3') == '7'\nassert solution('2 2') == '9'\n\n\n\"\"\"\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''3''') == '4 5'\nassert solution('''6''') == '8 10'\nassert solution('''1''') == '-1'\nassert solution('''17''') == '144 145'\nassert solution('''67''') == '2244 2245'\n\n\n\n-----Alternative Solutions-----\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"4 5\"\nassert solution(\"6\") == \"8 10\"\nassert solution(\"1\") == \"-1\"\nassert solution(\"17\") == \"144 145\"\nassert solution(\"67\") == \"2244 2245\"\n\"\"\"\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('3') == '4 5'\nassert solution('6') == '8 10'\nassert solution('1') == '-1'\nassert solution('17') == '144 145'\nassert solution('67') == '2244 2245'"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('3') == '4 5'\nassert solution('1') == '-1'\nassert solution('5') == '4 5'\nassert solution('10') == '-1'\nassert solution('15') == '-1'\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('3') == '4 5'\nassert solution('6') == '8 10'\nassert solution('1') == '-1'\nassert solution('17') == '144 145'\nassert solution('67') == '2244 2245'\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('3') == '4 5'\nassert solution('6') == '8 10'\nassert solution('1') == '-1'\nassert solution('17') == '144 145'\nassert solution('67') == '2244 2245'\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('3') == '4 5'\nassert solution('6') == '8 10'\nassert solution('1') == '-1'\nassert solution('17') == '144 145'\nassert solution('67') == '2244 2245'\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('3') == '4 5'\nassert solution('6') == '8 10'\nassert solution('1') == '-1'\nassert solution('67') == '2244 2245'\nassert solution('17') == '144 145'\n\n\"\"\"\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == \"4 5\"\nInput\n3\n\nOutput\n4 5\nInput\n6\n\nOutput\n8 10\nInput\n1\n\nOutput\n-1\nInput\n17\n\nOutput\n144 145\nInput\n67\n\nOutput\n2244 2245\nInput\n300\n\nOutput\n2900 2355\nNote\n\nInput data is the only argument of function solution.\nIn the first sample, there are three right triangles with sides of lengths 3, 4 and 5. The corresponding pairs of sides are (3, 4), (3, 5), (4, 5) and the lengths are (3, 5), (4, 5) and (5, 5). The Pythagorean triples are (3, 4, 5), (5, 12, 13) and (6, 8, 10).\n\nIn the second sample, there are no right triangles.\n\nIn the third sample, there are two right triangles with sides of lengths 6, 8 and 10. The corresponding pairs of sides are (6, 8), (6, 10) and (8, 10) and the lengths are (6, 10) and (8, 10). The Pythagorean triples are (6, 8, 10), (8, 12, 13) and (10, 10, 10).\n\nIn the last sample, there are no right triangles.\n\"\"\""
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('3') == '4 5'\nassert solution('6') == '8 10'\nassert solution('1') == '-1'\nassert solution('17') == '144 145'\nassert solution('67') == '2244 2245'\n\n'''"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('4 4') == 'Yes'\nassert solution('5 3') == 'No'\nassert solution('5 3') == 'No'\nassert solution('4 5') == 'Yes'\nassert solution('5 5') == 'Yes'\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('4 4') == 'No'\nassert solution('5 3') == 'Yes'\nassert solution('4 1000000000 4') == 'No'"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(4, 4) == \"No\"\nassert solution(5, 3) == \"Yes\"\n\n'''\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('4 4') == 'No'\nassert solution('5 3') == 'Yes'\nassert solution('6 4') == 'Yes'\nassert solution('5 5') == 'No'\nassert solution('4 6') == 'Yes'\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(input) == output\n\n'''"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('4 4') == 'No'\nassert solution('5 3') == 'Yes'\nassert solution('3 4') == 'No'\nassert solution('10000000 1000000') == 'Yes'\nassert solution('2 3') == 'No'\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdin\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('4 4') == \"No\"\nassert solution('5 3') == \"Yes\"\nassert solution('10000000 9') == \"Yes\"\nassert solution('10000000 9') == \"No\"\nassert solution('10000000 9') == \"Yes\"\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('4 4') == 'No'\nassert solution('5 3') == 'Yes'\n\n'''\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''4 4''') == \"No\"\nassert solution('''5 3''') == \"Yes\"\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''9\n10''') == '<'\nassert solution('''11\n10''') == '>'\nassert solution('''00012345\n12345\n\n''') == '='\nassert solution('''0123\n9\n\n''') == '>'\n\nprint(\"Passed\")\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('9') == '<'\nassert solution('10') == '>'\nassert solution('11') == '='\nassert solution('00012345') == '>'\nassert solution('12345') == '<'\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('9\\n10') == '<'\nassert solution('11\\n10') == '>'\nassert solution('00012345\\n12345') == '='\nassert solution('0123\\n9') == '>'\nassert solution('0123\\n111') == '<'\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"9\\n10\\n\") == \">\"\nassert solution(\"11\\n10\\n\") == \"<\"\nassert solution(\"0123\\n12345\\n\") == \"=\"\nassert solution(\"0123\\n111\\n\") == \">\"\nassert solution(\"00012345\\n12345\\n\") == \">\"\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('9\\n10\\n') == '<'\nassert solution('11\\n10\\n') == '>'\nassert solution('00012345\\n12345\\n') == '='\nassert solution('0123\\n9\\n') == '>'\nassert solution('0123\\n111\\n') == '>'\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1\") == \">\"\nassert solution(\"1\\n1\") == \"=\"\nassert solution(\"1\\n2\") == \"<\"\nassert solution(\"2\\n1\") == \"<\"\nassert solution(\"9\\n10\") == \"<\"\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('9\\n10\\n') == '<'\nassert solution('11\\n10\\n') == '>'\nassert solution('00012345\\n12345\\n') == '='.\nassert solution('0123\\n9\\n') == '>'\nassert solution('0123\\n111\\n') == '>'\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('0123456789') == '>'\nassert solution('0123456789') == '='.\nassert solution('0123456789') == '<'.\nassert solution('0123456789') == '>'.\nassert solution('0123456789') == '='.\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\n9\n10\n\"\"\") == \"<\"\nassert solution(\n\"\"\"\n11\n10\n\"\"\") == \">\"\nassert solution(\n\"\"\"\n00012345\n12345\n\"\"\") == \"=\"\nassert solution(\n\"\"\"\n0123\n9\n\"\"\") == \">\"\nassert solution(\n\"\"\"\n0123\n111\n\"\"\") == \"<\"\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''9\n10\n''') == '<'\nassert solution('''11\n10\n''') == '>'\nassert solution('''00012345\n12345\n''') == '='\nassert solution('''0123\n9\n''') == '>'\nassert solution('''0123\n111\n''') == '<'\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == expected\nprint(solution(stdin))\n\n\"\"\"\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''3 1\n-1 0 1\n\n3 1\n1 0\n''') == '6'\n\nassert solution('''2 1\n1 0\n\n2 1\n1 0\n''') == '1'\n\nassert solution('''1 1\n-1\n\n1 1\n-1\n''') == '2'\n'''"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('3 1\\n-1 0 1\\n') == '6'\nassert solution('2 1\\n1 0\\n') == '1'\nassert solution('1 1\\n-1\\n') == '2'\n\"\"\"\n\nimport sys\nfrom functools import lru_cache\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''3 1\n-1 0 1''') == '6'\nassert solution('''2 1\n1 0''') == '1'\nassert solution('''1 1\n-1''') == '2'\nassert solution('''10 10\n-1 0 1 0 1 0 1 0 1 0 1''') == '6'\n\n'''\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''3 1\n-1 0 1\n''') == '6'\nassert solution('''2 1\n1 0\n''') == '1'\n'''\n\"\"\"\n\nn, p = map(int, stdin.readline().strip().split())\ncolors = list(map(int, stdin.readline().strip().split()))\n\nprint((pow(2, n, MOD) - sum(colors[i] * colors[n - i - 1] for i in range(n))) % MOD)\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('3 1\\n-1 0 1\\n') == '6'\nassert solution('2 1\\n1 0\\n') == '1'\nassert solution('1 1\\n-1\\n') == '2'\n\"\"\"\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"2 1\") == \"1\"\nassert solution(\"3 1\") == \"6\"\nassert solution(\"2 1\") == \"1\"\nassert solution(\"3 1\") == \"6\"\nassert solution(\"4 1\") == \"12\"\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''3 1\n-1 0 1\n''') == '6'\n\nassert solution('''2 1\n1 0\n''') == '1'\n\nassert solution('''1 1\n-1\n''') == '2'\n\n'''\n\n'''"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\n\"\"\"\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"3 1\") == \"6\"\nassert solution(\"2 1\") == \"1\"\nassert solution(\"1 1\") == \"2\"\n\n\n\n\"\"\"\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1 1 3 4') == '3'\nassert solution('6 2 1 1') == '1'\nassert solution('4 4 4 4') == '0'\nassert solution('999999999 1000000000 1000000000 1000000000') == '1000000000'\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('1 1 3 4') == '3'\nassert solution('6 2 1 1') == '1'\nassert solution('4 4 4 4') == '0'\nassert solution('999999999 1000000000 1000000000 1000000000') == '1000000000'\n\"\"\"\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"1 1 3 4\") == \"3\"\nassert solution(\"6 2 1 1\") == \"1\"\nassert solution(\"4 4 4 4\") == \"0\"\nassert solution(\"999999999 1000000000 1000000000 1000000000\") == \"1000000000\"\n\"\"\"\n\n\"\"\"\nAt first, I thought that we could solve the problem by brute-force, but it was a pretty complex operation. I should use dynamic programming to solve it.\n\nThe result is that I don't need to make any changes to the result, because we can directly use the previous result for the next step.\n\nIn the dp table, we have dp[i][j] where j is the number of copies of the ith subject. If n + j is divisible by 4, then we can split the jth copybook among the subjects.\n\nIn the case that j > 0 and i == 0, there is no need to split the 0th copybook among the subjects.\n\nIn the case that i > 0 and j == 0, there is no need to split the 0th copybook among the subjects.\n\nIn the case that i > 0 and j > 0, we only need to add the costs of splitting the ith copybook among the subjects, and the costs of splitting the jth copybook among the subjects.\n\nThis is the most intuitive approach, and is optimal.\n\n\"\"\"\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"1 1 3 4\\n\") == \"3\\n\"\nassert solution(\"6 2 1 1\\n\") == \"1\\n\"\nassert solution(\"4 4 4 4\\n\") == \"0\\n\"\nassert solution(\"999999999 1000000000 1000000000 1000000000\\n\") == \"1000000000\\n\"\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1 1 3 4') == '3'\nassert solution('6 2 1 1') == '1'\nassert solution('4 4 4 4') == '0'\nassert solution('999999999 1000000000 1000000000 1000000000') == '1000000000'\n\"\"\"\n\nfrom sys import stdin, stdout\nfrom collections import Counter\n\ninputs = stdin.readline()\nn, a, b, c = map(int, inputs.split())\n\ncnt = Counter([a,b,c])\n\ntotal = a + b + c"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1 1 3 4') == '3'\nassert solution('6 2 1 1') == '1'\nassert solution('4 4 4 4') == '0'\nassert solution('999999999 1000000000 1000000000 1000000000') == '1000000000'\nprint('tests passed')\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('6 2 1 1') == '1'\nassert solution('1000000000') == '1000000000'\nassert solution('999999999 1000000000 1000000000 1000000000') == '1000000000'\nassert solution('999999999 1000000000 1000000000 1000000000') == '1000000000'\nassert solution('99999999999999999999999999999999999999999999999999999999999999999999') == '99999999999999999999999999999999999999999999999999999999999999999'\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''1 1 3 4''') == '3'\nassert solution('''6 2 1 1''') == '1'\nassert solution('''4 4 4 4''') == '0'\nassert solution('''999999999 1000000000 1000000000 1000000000''') == '1000000000'\n\n'''\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('') is None\nassert solution('1 1 3 4') == '3'\nassert solution('6 2 1 1') == '1'\nassert solution('999999999 1000000000 1000000000 1000000000') == '1000000000'\n'''\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"1 2\\n2 3\") == \"YES\"\nassert solution(\"1 2\\n2 1\\n3 1\") == \"NO\"\nassert solution(\"1 2\\n2 3\\n3 2\") == \"NO\"\nassert solution(\"3 4\\n1 2\\n2 3\\n3 2\") == \"NO\"\nassert solution(\"4 5\\n1 2\\n2 3\\n3 2\") == \"YES\"\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('3 4\\n1 2\\n2 3\\n3 2\\n3 1\\n2 1\\n4 5\\n') == 'YES'\nassert solution('5 6\\n1 2\\n2 3\\n3 2\\n3 1\\n2 1\\n4 5\\n') == 'NO'"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\n\n\n\nhttps://www.codewars.com/kata/526f3b12ef9e2e4a0400002c\n\nWe are given an array of integers from 0 to n - 1. We can swap any two elements of the array (i, j), where i and j are the indices of any two elements in the array.\n\nThe value of the array, arr, is the maximum possible value of the array after any number of swaps.\n\nGiven an array of integers, find the minimum number of swaps to make any possible value in the array equal to the maximum possible value.\n\nExample:\n\narr = [3, 1, 2, 5, 4]\n\nThe maximum possible value is 5, which is the result of swapping the elements at indices 0 and 1 (i.e. arr = [5, 1, 2, 3, 4]).\n\nYou can swap elements at indices 0 and 1, this results in the value 5.\n\nIf the maximum possible value is 5, there are two possible ways to make this array equal to this maximum value:\n\n[3, 1, 2, 5, 4]\n[3, 1, 4, 5, 2]\n\nYou may return any one of these possible values.\n\nNote:\n\narr will be a non-empty array of unique integers.\narr is guaranteed to have at least two elements.\nTry to solve it in linear time.\n\n---\n\nWe can use a greedy algorithm to solve this problem. Since we have to swap elements, we can use a similar logic as we did in the previous kata to find the maximum possible value.\n\nFirst, we sort the array in reverse order.\n\nFor each element, if it is greater than the previous element, we can swap the two elements to get the maximum possible value.\n\nIf the element is greater than the previous element, we can ignore it since we cannot increase the max value.\n\nSince the array is sorted in reverse order, we can stop after index 1.\n\nComplexity:\n\nTime complexity is O(n log n), because of the sorting.\n\nSpace complexity is O(n), for the result array.\n\"\"\"\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''3 4\n1 2\n2 3\n3 2\n3 1\n2 1\n4 5''') == 'YES'\nassert solution('''3 4\n1 2\n2 3\n3 2\n3 1\n2 1\n4 4''') == 'NO'\nassert solution('''5 6\n1 2\n2 3\n3 2\n3 1\n2 1\n4 5\n4 5\n1 4\n4 2\n3 1\n1 4\n4 2\n1 4\n1 5\n2 4\n1 5\n2 4\n2 5\n2 4\n4 5\n5 1\n4 5\n4 5\n5 1\n5 4\n5 1\n4 5\n4 5\n5 1\n5 4\n5 1\n5 4\n5 1\n4 5\n4 5\n5 1\n5 4\n5 1\n5 4\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n5 4\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n5 4\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5\n4 5\n5 1\n4 5"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''3 4\n1 2\n2 3\n3 2\n3 1''') == \"YES\"\nassert solution('''5 6\n1 2\n2 3\n3 2\n3 1\n2 1\n4 5''') == \"NO\"\n'''\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"NO\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"3 4\") == \"YES\"\nassert solution(\"5 6\") == \"NO\"\nassert solution(\"1 2\\n2 3\\n3 2\\n3 1\") == \"YES\"\nassert solution(\"2 3\\n3 2\\n1 2\") == \"NO\"\nassert solution(\"5 6\\n1 2\\n2 3\\n3 2\\n3 1\") == \"YES\"\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''4 4\n1 2\n2 3\n3 2\n3 1\n2 1\n4 5\n''') == 'YES'\nassert solution('''3 4\n1 2\n2 3\n3 2\n3 1\n2 1\n''') == 'YES'\nassert solution('''5 6\n1 2\n2 3\n3 2\n3 1\n2 1\n4 5\n''') == 'NO'\n'''\n\ntest = open('test.txt', 'r')\ndata = test.read()\nprint(data)\nprint(solution(data))"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('5 4\\n1 2\\n2 3\\n3 2\\n3 1\\n2 1\\n4 5') == 'YES'\nassert solution('2 4\\n1 2\\n2 3\\n3 2\\n3 1\\n2 1\\n4 5') == 'NO'\n\n\n\"\"\"\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1 2') == '0'\nassert solution('2 2') == '0'\nassert solution('1 2 3 4') == '1'\nassert solution('1 1') == '0'\nassert solution('1 1 3') == '1'\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('3 595') == '281'\nassert solution('1 1') == '0'\nassert solution('2 50') == '30'\nassert solution('5 240') == '26'"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"3 595\\n43 2\\n300 4\\n554 10\") == \"281\"\nassert solution(\"1 1\\n1 1\\n\") == \"0\"\nassert solution(\"2 50\\n20 0\\n3 1\\n\") == \"30\"\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"3 595\") == \"281\"\nassert solution(\"3 1\") == \"0\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"2 50\") == \"30\"\nassert solution(\"5 240\") == \"26\"\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''3 595\n43 2\n300 4\n554 10''') == '281'\nassert solution('''1 1\n1 1''') == '0'\nassert solution('''2 50\n20 0\n3 1\n''') == '30'\n'''\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\""
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == expected\n\"\"\"\n\nimport sys"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('2 0\\n0 1') == '0'\nassert solution('3 1\\n0 1\\n1 1') == '30'\nassert solution('2 1\\n0 1\\n1 1') == '0'\nassert solution('3 0\\n3 1\\n0 1') == '30'\nassert solution('10 50\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\n    r'3 595'\n) == '281'\n\nassert solution(\n    r'1 1'\n) == '0'\n\nassert solution(\n    r'2 50'\n) == '30'\n\nassert solution(\n    r'5 240'\n) == '26'\n\nassert solution(\n    r'3 100'\n) == '0'"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('3 595') == '281'\nassert solution('1 1') == '0'\nassert solution('2 50') == '30'\nassert solution('5 240') == '26'\nassert solution('3 51') == '2'\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('') is None\nassert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '1'\nassert solution('4') == '2'\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''10\n1 2 3 4 5 6 7 8''') == '10'\nassert solution('''0\n0 0 0 0 0 0 0 0''') == '0'\nassert solution('''3\n0 4 1 0 0 9 8 3''') == '3'\nassert solution('''5\n1 2 3 4 5 6''') == '6'\nassert solution('''7\n1 2 3 4 5 6 7''') == '7'\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''100''') == 100\nassert solution('''10''') == 10\nassert solution('''1 2 3 4 5 6 7 8''') == 10\nassert solution('''0''') == 0\nassert solution('''0 4 1 0 0 9 8 3''') == 3\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1 2 3 4 5 6 7 8\") == \"10\"\nassert solution(\"0 0 0 0 0 0 0 0\") == \"0\"\nassert solution(\"3\") == \"3\"\nassert solution(\"0 4 1 0 0 9 8 3\") == \"3\"\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('1 2 3 4 5 6 7 8') == '10'\nassert solution('0 0 0 0 0 0 0 0') == '0'\nassert solution('3 0 4 1 0 0 9 8 3') == '3'\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''10\n1 2 3 4 5 6 7 8\n''') == '10'\nassert solution('''0\n0 0 0 0 0 0 0 0\n''') == '0'\nassert solution('''3\n0 4 1 0 0 9 8 3\n''') == '3'\nassert solution('''15\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\n''') == '15'\n\n\nprint('Test passed')\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''10''') == 10\nassert solution('''0''') == 0\nassert solution('''3''') == 3\nassert solution('''4 0 1 0 0 9 8 3''') == 3\nassert solution('''1 2 3 4 5 6 7 8''') == 10\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"10\") == \"\"\nassert solution(\"0\") == \"\"\nassert solution(\"1 2 3 4 5 6 7 8\") == \"\"\nassert solution(\"1 2 3 4 5 6 7 8 9\") == \"\"\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"4 12\") == \"150\"\nassert solution(\"4 3\") == \"10\"\nassert solution(\"5 787787787\") == \"44981600785557577\"\n\n\"\"\"\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('5 2') == '0'\nassert solution('3 4') == '5'\nassert solution('4 3') == '10'\nassert solution('4 3') == '10'\nassert solution('5 787787787') == '44981600785557577'\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''4 12\n20 30 70 90\n''') == '150'\nassert solution('''4 3\n10000 1000 100 10\n''') == '10'\nassert solution('''5 787787787\n123456789 234567890 345678901 456789012 987654321\n''') == '44981600785557577'\n'''\n\"\"\"\n\nfrom functools import lru_cache\n\nfrom sys import stdin"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('4 12\\n20 30 70 90\\n') == '150'\nassert solution('4 3\\n10000 1000 100 10\\n') == '10'\nassert solution('5 787787787\\n123456789 234567890 345678901 456789012 987654321\\n') == '44981600785557577'\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''4 12\n20 30 70 90''') == '150'\nassert solution('''4 3\n10000 1000 100 10''') == '10'\nassert solution('''4 3\n10 100 1000 10000''') == '30'\nassert solution('''5 787787787\n123456789 234567890 345678901 456789012 987654321''') == '44981600785557577'\n\n'''"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('4 12') == '150'\nassert solution('4 3') == '10'\nassert solution('5 787787787') == '44981600785557577'\n\"\"\"\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('5 8\\n' + '2 3 4 1') == '15'\nassert solution('4 12\\n' + '20 30 70 90\\n') == '150'\nassert solution('5 787787787\\n' + '123456789 234567890 345678901 456789012 987654321\\n') == '44981600785557577'\n\n\"\"\"\n\nfrom itertools import combinations\nfrom functools import lru_cache\n\nn, L = map(int, stdin.readline().strip().split(' '))\ncosts = list(map(int, stdin.readline().strip().split(' ')))\ncosts = [costs[i] - (i+1) for i in range(n)]\n\n@lru_cache(maxsize=None)\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"4 12\") == \"150\"\nassert solution(\"4 3\") == \"10\"\nassert solution(\"5 787787787\") == \"44981600785557577\"\n\n\"\"\"\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('4 12\\n20 30 70 90') == '150'\nassert solution('4 3\\n10000 1000 100 10') == '10'\nassert solution('5 787787787\\n123456789 234567890 345678901 456789012 987654321') == '44981600785557577'\n\n\n\"\"\"\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('4 12\\n20 30 70 90') == '150'\nassert solution('4 3\\n10000 1000 100 10') == '30'\nassert solution('5 787787787\\n123456789 234567890 345678901 456789012 987654321') == '44981600785557577'\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == \"\"\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == answer\n\"\"\"\n\nn = int(stdin.readline().strip())\narr = [int(x) for x in stdin.readline().strip().split(' ')]\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"\"\"5\n1 3 3 3 6\n\"\"\") == \"5\"\nassert solution(\"\"\"2\n2 1\n\"\"\") == \"3\"\nassert solution(\"\"\"3\n1 1 1\n\"\"\") == \"2\"\nassert solution(\"\"\"3\n2 2 1\n\"\"\") == \"1\"\nassert solution(\"\"\"3\n3 5 1\n\"\"\") == \"4\"\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"1\\n2\") == \"2\"\nassert solution(\"3\\n1\") == \"3\"\nassert solution(\"1\\n1\") == \"1\"\nassert solution(\"1\\n1\\n1\") == \"1\"\nassert solution(\"1\\n1\\n1\\n1\") == \"1\"\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(input) == expected\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1\\n5\\n1 3 3 3 6') == '5'\nassert solution('2\\n2 1') == '3'\nassert solution('3\\n2 3 1') == '3'\nassert solution('4\\n1 1 1 1') == '1'\nassert solution('5\\n2 1') == '3'\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\n    '''5\n1 3 3 3 6\n'''\n) == '5'\n\nassert solution(\n    '''2\n2 1\n'''\n) == '3'\n\nassert solution(\n    '''3\n2 1 1\n'''\n) == '1'\n\nassert solution(\n    '''4\n2 1 1 2\n'''\n) == '3'\n\nassert solution(\n    '''5\n2 1 2 3 4\n'''\n) == '2'"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdin\n\"\"\"\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('2\\n2 1') == '3'\nassert solution('2\\n2 2') == '1'\nassert solution('2\\n2 3') == '3'\nassert solution('2\\n2 4') == '3'\nassert solution('3\\n3 3 3 3') == '3'\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\n    '''\n    5\n    1 3 3 3 6\n    ''') == '5'\n\nassert solution(\n    '''\n    2\n    2 1\n    ''') == '3'\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''5\n73452\n''') == 'YES'\nassert solution('''4\n1248\n''') == 'NO'\n\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''5\n73452''') == 'YES'\nassert solution('''4\n1248''') == 'NO'\nassert solution('''7\n73452''') == 'YES'\nassert solution('''8\n7732''') == 'YES'\nassert solution('''9\n94712''') == 'NO'\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"5\\n73452\") == \"YES\"\nassert solution(\"4\\n1248\") == \"NO\"\nassert solution(\"2\\n123\") == \"NO\"\nassert solution(\"4\\n987654321\") == \"YES\""
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('5') == 'YES'\nassert solution('5\\n73452') == 'NO'\nassert solution('2') == 'YES'\nassert solution('4\\n1248') == 'NO'\nassert solution('3\\n1234567') == 'YES'\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''5\n73452\n''') == 'YES'\n\nassert solution('''4\n1248\n''') == 'NO'\n\nassert solution('''6\n1123\n''') == 'NO'\n\nassert solution('''8\n22222\n''') == 'YES'\n\nassert solution('''8\n2699\n''') == 'NO'"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('5\\n73452') == 'YES'\nassert solution('4\\n1248') == 'NO'\nassert solution('2\\n9999') == 'YES'\nassert solution('7\\n7345') == 'NO'\nassert solution('9\\n7345') == 'NO'\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''5''') == 'YES'\nassert solution('''73452''') == 'YES'\nassert solution('''4''') == 'NO'\nassert solution('''1248''') == 'NO'\nassert solution('''361231321''') == 'YES'\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''5''') == 'YES'\nassert solution('''10''') == 'YES'\nassert solution('''15''') == 'NO'\nassert solution('''1000''') == 'YES'\nassert solution('''1024''') == 'NO'\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('', None) is None\nassert solution('3', None) == 'YES'\nassert solution('', None) == 'NO'\nassert solution('3', None) == 'NO'\nassert solution('', None) == 'NO'\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''5\n73452''') == 'YES'\nassert solution('''4\n1248''') == 'NO'\nassert solution('''3\n12''') == 'YES'\nassert solution('''3\n123''') == 'NO'\nassert solution('''3\n11''') == 'YES'\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"wjmzbmr\") == \"CHAT WITH HER!\"\nassert solution(\"xiaodao\") == \"IGNORE HIM!\"\nassert solution(\"sevenkplus\") == \"CHAT WITH HER!\"\n\n\n\n-----Note-----\n\nFor the first example, the number of distinct characters in the user name is 6.\n\nFor the second example, the number of distinct characters in the user name is 2.\n\nFor the third example, the number of distinct characters in the user name is 0.\n\nFor the fourth example, the number of distinct characters in the user name is 4.\n\nFor the fifth example, the number of distinct characters in the user name is 10.\n\nFor the sixth example, the number of distinct characters in the user name is 3.\n\nFor the seventh example, the number of distinct characters in the user name is 4.\n\n\n\"\"\""
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\n'''\nwjmzbmr\n'''\n) == 'CHAT WITH HER!'\n\nassert solution(\n'''\n    sevenkplus\n'''\n) == 'IGNORE HIM!'\n\nassert solution(\n'''\n    wjmzbmr\n'''\n) == 'CHAT WITH HER!'\n\nassert solution(\n'''\nxmqmfyp\n'''\n) == 'IGNORE HIM!'\n\nassert solution(\n'''\nmxmzrjxn\n'''\n) == 'IGNORE HIM!'"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"wjmzbmr\") == \"CHAT WITH HER!\"\nassert solution(\"xiaodao\") == \"IGNORE HIM!\"\nassert solution(\"sevenkplus\") == \"CHAT WITH HER!\"\nassert solution(\"bbbbbb\") == \"IGNORE HIM!\"\nassert solution(\"baaaaaa\") == \"IGNORE HIM!\"\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(input()) == 'CHAT WITH HER!'\nassert solution(input()) == 'IGNORE HIM!'\nassert solution(input()) == 'CHAT WITH HER!'\nassert solution(input()) == 'IGNORE HIM!'\nassert solution(input()) == 'CHAT WITH HER!'\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n\n'''\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"wjmzbmr\") == \"CHAT WITH HER!\"\nassert solution(\"xiaodao\") == \"IGNORE HIM!\"\nassert solution(\"sevenkplus\") == \"CHAT WITH HER!\"\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"wjmzbmr\") == \"CHAT WITH HER!\"\nassert solution(\"xiaodao\") == \"IGNORE HIM!\"\nassert solution(\"sevenkplus\") == \"CHAT WITH HER!\"\nassert solution(\"zwxyuioejm\") == \"IGNORE HIM!\"\nassert solution(\"jxrhfn\") == \"IGNORE HIM!\"\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"wjmzbmr\") == \"CHAT WITH HER!\"\nassert solution(\"xiaodao\") == \"IGNORE HIM!\"\nassert solution(\"sevenkplus\") == \"CHAT WITH HER!\"\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"wjmzbmr\") == \"CHAT WITH HER!\"\nassert solution(\"xiaodao\") == \"IGNORE HIM!\"\nassert solution(\"sevenkplus\") == \"CHAT WITH HER!\"\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"wjmzbmr\") == \"CHAT WITH HER!\"\nassert solution(\"xiaodao\") == \"IGNORE HIM!\"\nassert solution(\"sevenkplus\") == \"CHAT WITH HER!\"\nassert solution(\"wjdwzfwyjuzljckrvxhszgsvhqhqhvqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqhqh"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('4 2') == '2'\nassert solution('14 3') == '9'\nassert solution('1 1 -1 1') == '2'\nassert solution('-1 1 -1 -1 1 -1 -1 1 -1 -1 1 -1 -1 1') == '9'\nassert solution('4 2') == '2'\n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('2\\n2\\n1 1 1 1 1 -1 1 -1 1 -1 -1 1') == '2'\nassert solution('14 3\\n-1 1 -1 -1 -1 1 -1 -1 1 -1 -1 -1 1') == '9'\n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''4 2\n1 1 -1 1\n''') == '2'\nassert solution('''14 3\n-1 1 -1 -1 1 -1 -1 1 -1 -1 1 -1 -1 1\n''') == '9'\nassert solution('''10 2\n2 2 2 2 2 2 2 2 2 2 2 2 2\n''') == '0'\nassert solution('''10 2\n-2 2 2 2 2 2 2 2 2 2 2 2\n-2 2 2 2 2 2 2 2 2 2 2 2\n-2 2 2 2 2 2 2 2 2 2 2 2\n-2 2 2 2 2 2 2 2 2 2 2 2\n-2 2 2 2 2 2 2 2 2 2 2 2\n-2 2 2 2 2 2 2 2 2 2 2 2\n-2 2 2 2 2 2 2 2 2 2 2 2\n-2 2 2 2 2 2 2 2 2 2 2 2\n-2 2 2 2 2 2 2 2 2 2 2 2\n-2 2 2 2 2 2 2 2 2 2 2 2\n-2 2 2 2 2 2 2 2 2 2 2 2\n-2 2 2 2 2 2 2 2 2 2 2 2\n-2 2 2 2 2 2 2 2 2 2 2 2\n-2 2 2 2 2 2 2 2 2 2 2 2\n-2 2 2 2 2 2 2 2 2 2 2 2\n-2 2 2 2 2 2 2 2 2 2 2 2\n-2 2 2 2 2 2 2 2 2 2 2 2\n-2 2 2 2 2 2 2 2 2 2 2 2\n-2 2 2 2 2 2 2 2 2 2 2 2\n-2 2 2 2 2 2 2 2 2 2 2 2\n-2 2 2 2 2 2 2 2 2 2 2 2\n-2 2 2 2 2 2 2 2 2 2 2 2\n-2 2 2 2 2 2 2 2 2 2 2 2\n-2 2 2 2 2 2 2 2 2 2 2 2\n-2 2 2 2 2 2 2 2 2 2 2 2\n-2 2 2 2 2 2 2 2 2 2 2 2\n-2 2 2 2 2 2 2 2 2 2 2 2\n-2 2 2 2 2 2 2 2 2 2 2 2\n-2 2 2 2 2 2 2 2 2 2 2 2\n-2 2 2 2 2 2 2 2 2 2 2 2\n-2 2 2 2 2 2 2 2 2 2 2 2\n-2 2 2 2 2 2 2 2 2 2 2 2\n-2 2 2 2 2 2 2 2 2 2 2 2\n-2 2 2 2 2 2 2 2 2 2 2 2\n-2 2 2 2 2 2 2 2 2 2 2 2\n-2 2 2 2 2 2 2 2 2 2 2 2\n-2 2 2 2 2 2 2 2 2 2 2 2\n-2 2 2 2 2 2 2 2 2 2 2 2\n-2 2 2 2 2 2 2 2 2 2 2 2\n-2 2 2 2 2 2 2 2 2 2 2 2\n-2 2 2 2 2 2 2 2 2 2 2 2\n-2 2 2 2 2 2 2 2 2 2 2 2\n-2 2 2 2 2 2 2 2 2 2 2 2\n-2 2 2 2 2 2 2 2 2 2 2 2\n-2 2 2 2 2 2 2 2 2 2 2 2\n-2 2 2 2 2 2 2 2 2 2 2 2\n-2 2 2 2 2 2 2 2 2 2 2 2\n-2 2 2 2 2 2 2 2 2 2 2 2\n-2 2 2 2 2 2 2 2 2 2 2 2\n-2 2 2 2 2 2 2 2 2 2 2 2\n-2 2 2 2 2 2 2 2 2 2 2 2\n-2 2 2 2 2 2 2 2 2 2 2 2\n-2 2 2 2 2 2 2 2 2 2 2 2\n-2 2 2 2 2 2 2 2 2 2 2 2\n-2 2 2 2 2 2 2 2 2 2 2 2\n-2 2 2 2 2 2 2 2 2 2 2 2\n-2 2 2 2 2 2 2 2 2 2 2 2\n-2 2 2 2 2 2 2 2 2 2 2 2\n-2 2 2 2 2 2 2 2 2 2 2 2\n-2 2 2 2 2 2 2 2 2 2 2 2\n-2 2 2 2 2 2 2 2 2 2 2 2\n-2 2 2 2 2 2 2 2 2 2 2 2\n-2 2 2 2 2 2 2 2 2 2 2 2\n-2 2 2 2 2 2 2 2 2 2 2 2\n-2 2 2 2 2 2 2 2 2 2 2 2\n-2 2 2 2 2 2 2 2 2 2 2 2\n-2 2 2 2 2 2 2 2 2 2 2 2\n-2 2 2 2 2 2 2 2 2 2 2 2\n-2 2 2 2 2 2 2 2 2 2 2 2\n-2 2 2 2 2 2 2 2 2 2 2 2\n-2 2 2 2 2 2 2 2 2 2 2 2\n-2 2 2 2 2 2 2 2 2 2 2 2\n-2 2 2 2 2 2 2 2 2 2 2 2\n-2 2 2 2 2 2 2 2 2 2 2 2\n-2 2 2 2 2 2 2 2 2 2 2 2\n-2 2 2 2 2 2 2 2 2 2 2 2\n-2 2 2 2 2 2 2 2 2 2 2 2\n-2 2 2 2 2 2 2 2 2 2 2 2\n-2 2 2 2 2 2 2 2 2 2 2 2\n-2 2 2 2 2 2 2 2 2 2 2 2\n-2 2 2 2 2 2 2 2 2 2 2 2\n-2 2 2 2 2 2 2 2 2 2 2 2\n-2 2 2 2 2 2 2 2 2 2 2 2\n-2 2 2 2 2 2 2 2 2 2 2 2\n-2 2 2 2 2 2 2 2 2 2 2 2\n-2 2 2 2 2 2 2 2 2 2 2 2\n-2 2 2 2 2 2 2 2 2 2 2 2\n-2 2 2 2 2 2 2 2 2 2 2 2\n-2 2 2 2 2 2 2 2 2 2 2 2\n-2 2 2 2 2 2 2 2 2 2 2 2\n-2 2 2 2 2 2 2 2 2 2 2 2\n-2 2 2 2 2 2 2 2 2 2 2 2\n-2 2 2 2 2 2 2 2 2 2 2 2\n-"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('4 2\\n1 1 -1 1\\n') == '2'\nassert solution('14 3\\n-1 1 -1 -1 1 -1 -1 1 -1 -1 1 -1 -1 1') == '9'\nassert solution('4 2\\n1 -1 1 1\\n') == '2'\nassert solution('14 3\\n-1 -1 -1 -1 1 -1 -1 1 -1 -1 -1 -1 1') == '9'\nassert solution('6 2\\n1 1 1 1 1 1 1\\n') == '2'\n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\n    \"4 2\\n1 1 -1 1\\n\"\n) == \"2\"\n\nassert solution(\n    \"14 3\\n-1 1 -1 -1 1 -1 -1 1 -1 -1 1 -1 -1 1\\n\"\n) == \"9\"\n\nassert solution(\n    \"4 2\\n-1 -1 1 1\\n\"\n) == \"0\"\n\nassert solution(\n    \"14 3\\n-1 -1 -1 -1 1 -1 -1 1 -1 -1 1 -1 1 1\\n\"\n) == \"9\"\n\nassert solution(\n    \"14 3\\n1 1 -1 1\\n\"\n) == \"0\""
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('4 2') == '2'\nassert solution('14 3') == '9'\nassert solution('7 2') == '1'\nassert solution('17 4') == '0'\nassert solution('3 1') == '2'\n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"2 3\\n1 1 -1 1\\n\") == \"2\"\nassert solution(\"4 3\\n1 1 -1 1 -1 -1 1 -1 -1 1 -1 -1 1\\n\") == \"9\"\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"4 2\") == \"2\"\nassert solution(\"14 3\") == \"9\"\nassert solution(\"-1 1 -1 -1 -1 1 -1 -1 1 -1 -1 -1 1\") == \"9\"\nassert solution(\"14 3\") == \"9\"\nassert solution(\"1 1 -1 1\") == \"2\"\n"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"4 1 2\") == \"12\""
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\n    \"4 1 2\"\n) == \"12\"\n\n\"\"\"\n\nclass Solution:\n    def __init__(self, stdin: str):\n        self.c0 = int(stdin.split()[1])\n        self.c1 = int(stdin.split()[2])\n\n    def solve(self) -> str:\n        return \"{0:b}\".format(2 ** (self.c1 + self.c0) - 1).replace(\"0\", \" \").replace(\"1\", \"#\")\n\nassert Solution(\"4 1 2\").solve() == \"12\"\n"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == '0101101'\nassert solution(stdin) == '0101100'\nassert solution(stdin) == '0101001'\nassert solution(stdin) == '0100010'\nassert solution(stdin) == '0100011'\n"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('4 1 2') == '12'\nassert solution('4 5 7') == '11'\nassert solution('5 2 4') == '12'\nassert solution('5 7 2') == '10'\nassert solution('7 5 2') == '12'\n"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('4 1 2') == '12'\nassert solution('3 4 2') == '9'\nassert solution('5 1 3') == '14'\nassert solution('2 1 3') == '2'\nassert solution('1 2 3') == '1'\n"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == 12\n\nassert solution(\"4 1 2\") == 12\n\nassert solution(\"0 1 2\") == 6\n\nassert solution(\"2 3 1\") == 5\n\nassert solution(\"3 1 2\") == 4"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdin.split()[2]\n\"\"\"\n"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"4 1 2\") == \"12\"\nassert solution(\"5 5 5\") == \"75\"\nassert solution(\"5 1 3\") == \"11\"\nassert solution(\"10 10 10\") == \"237\"\nassert solution(\"5 4 4\") == \"13\"\n"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"4 1 2\") == 12\n\"\"\""
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"4 1 2\") == \"12\"\nassert solution(\"3 1 2\") == \"2\"\nassert solution(\"3 2 1\") == \"1\"\nassert solution(\"5 4 3\") == \"4\"\nassert solution(\"3 3 3\") == \"5\"\n"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('5 1 4 3 2') == 'YES'\nassert solution('10 2 1 9 10') == 'NO'\nassert solution('3 2 1 9 10') == 'NO'\nassert solution('10 3 4 3 4 2') == 'NO'"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('5 1 4 3 2') == 'YES'\nassert solution('10 2 1 9 10') == 'NO'\nassert solution('5 4 3 2 1') == 'YES'\nassert solution('1 1 1 1 1') == 'YES'\nassert solution('10 1 10 1 10') == 'NO'\n"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('5 1 4 3 2') == 'YES'\nassert solution('10 2 1 9 10') == 'NO'\n"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('5 1 4 3 2') == 'YES'\nassert solution('10 2 1 9 10') == 'NO'\nassert solution('5 1 2 5 3') == 'YES'\nassert solution('3 1 2 3') == 'NO'\nassert solution('1 1 1 1') == 'YES'\n"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"5 1 4 3 2\") == \"YES\"\nassert solution(\"10 2 1 9 10\") == \"NO\"\nassert solution(\"6 4 1 2 3\") == \"YES\"\nassert solution(\"5 1 4 3 2\") == \"NO\"\nassert solution(\"10 2 1 9 10\") == \"NO\"\n"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('5 1 4 3 2') == 'YES'\nassert solution('10 2 1 9 10') == 'NO'\nassert solution('10 2 1 9 10') == 'NO'\nassert solution('5 1 4 3 2') == 'YES'\n\"\"\"\n"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''\n5 1 4 3 2\n''') == 'YES'\nassert solution('''\n10 2 1 9 10\n''') == 'NO'\nassert solution('''\n5 1 4 3 2\n''') == 'YES'\nassert solution('''\n10 2 1 9 10\n''') == 'NO'\nassert solution('''\n4 1 3 3\n''') == 'YES'\n"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('5 1 4 3 2') == 'YES'\nassert solution('10 2 1 9 10') == 'NO'\nassert solution('3 3 1 1 1') == 'YES'\nassert solution('11 22 3 13 4') == 'YES'\n\n\n-----Note-----\n\nIn the first example, Daniel and Vlad are not at the same station at the same moment because they are at different stations, so the question is not meaningful.\n\nIn the second example, there is no moment when Daniel and Vlad are at the same station, so the question is meaningful.\n\nIn the third example, the two trains are not moving at the same time.\n\nIn the fourth example, the two trains are moving at the same time.\n\nIn the fifth example, the two trains are moving at the same time.\n\n\"\"\""
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('5 1 4 3 2') == 'YES'\nassert solution('10 2 1 9 10') == 'NO'\nassert solution('2 4 1 3') == 'NO'\nassert solution('4 3 2 1') == 'YES'\nassert solution('7 3 1 2') == 'YES'\n"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('5 1 4 3 2') == 'YES'\nassert solution('10 2 1 9 10') == 'NO'\nassert solution('5 1 4 3 2') == 'YES'\nassert solution('10 2 1 9 10') == 'NO'\nassert solution('2 5 1 2') == 'YES'\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('2 3 1 10') == '1'\nassert solution('3 5 10 22') == '8'\nassert solution('2 3 3 5') == '0'\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('2 3 1 10') == '1'\nassert solution('3 5 10 22') == '8'\nassert solution('2 3 3 5') == '0'\n\n\n\n------"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''2 3 1 10''') == '1'\nassert solution('''3 5 10 22''') == '8'\nassert solution('''2 3 3 5''') == '0'\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('2 3 1 10') == '1'\nassert solution('3 5 10 22') == '8'\nassert solution('2 3 3 5') == '0'\nassert solution('2 3 3 15') == '8'\nassert solution('2 3 3 15 22') == '8'\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('2 3 1 10') == '1'\nassert solution('3 5 10 22') == '8'\nassert solution('2 3 3 5') == '0'\nassert solution('2 3 3 6') == '1'\nassert solution('2 3 3 5 6') == '1'\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('2 3 1 10') == '1'\nassert solution('3 5 10 22') == '8'\nassert solution('2 3 3 5') == '0'\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"2 3 1 10\") == \"1\"\nassert solution(\"3 5 10 22\") == \"8\"\nassert solution(\"2 3 3 5\") == \"0\"\n\"\"\""
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"2 3 1 10\") == \"1\"\nassert solution(\"3 5 10 22\") == \"8\"\nassert solution(\"2 3 3 5\") == \"0\"\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''2 3 1 10''') == '1'\nassert solution('''3 5 10 22''') == '8'\nassert solution('''2 3 3 5''') == '0'\nassert solution('''2 3 3 4''') == '0'\nassert solution('''2 3 3 4 5''') == '8'\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"2 3 1 10\") == \"1\"\nassert solution(\"3 5 10 22\") == \"8\"\nassert solution(\"2 3 3 5\") == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1\\n') == '2'\nassert solution('2\\n') == '1'\nassert solution('3\\n') == '2'\nassert solution('4\\n') == '3'\nassert solution('27\\n') == '3'"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == '5'\n\nassert solution('1 2 3 4 5 6 7 8 9 10') == '1'\nassert solution('11') == '1'\nassert solution('7 9 10 11 16 17 18 19 21 22 25 26') == '2'\nassert solution
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''\n4\n''') == '2'\n\nassert solution('''\n27\n''') == '3'\n"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1' * 1000) == '1'\nassert solution('1' * 1001) == '2'\nassert solution('1' * 1002) == '3'\nassert solution('1' * 1003) == '4'\nassert solution('1' * 1004) == '5'\n"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('3\\n'\n'2\\n') == '1'\nassert solution('10\\n'\n'9\\n') == '3'\nassert solution('1000000000\\n'\n'1000000000\\n') == '10'\nassert solution('1000000000\\n'\n'100000\\n') == '3'\nassert solution('1000000000\\n'\n'9\\n') == '3'\n"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('4') == '2'\nassert solution('27') == '3'\nassert solution('15') == '5'\nassert solution('2') == '1'\nassert solution('1') == '0'\n"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''1''') == ''\nassert solution('''0''') == '0'\nassert solution('''2''') == '1'\nassert solution('''10''') == '3'\nassert solution('''100''') == '4'\n"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''1\n''') == '1'\nassert solution('''2\n''') == '1'\nassert solution('''3\n''') == '1'\nassert solution('''4\n''') == '2'\nassert solution('''5\n''') == '2'\n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''abcde\nxyzxy\nxyzzy\nzazaa\nzyzaa''') == 'abcde\\nxyzxy\\nxyzzy\\nzazaa\\nyzyaa'\nassert solution('''abcde\nxyzxy\nxyzzy\nzazaa\nzyzaa''') == 'abcde\\nxyzxy\\nxyzzy\\nzazaa\\nyzyaa'\nassert solution('''hello\nhowdy\nhello\nhola\nholla''') == 'hello\\nhowdy\\nhello\\nhello\\nholla'\nassert solution('''hello\nhowdy\nhello\nhola\nholla''') == 'hello\\nhowdy\\nhello\\nhello\\nholla'\nassert solution('''hello\nhowdy\nhello\nhola\nholla''') == 'hello\\nhowdy\\nhello\\nhello\\nholla'\n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"hellno\") == \"hell no\"\nassert solution(\"abacaba\") == \"abacaba\"\nassert solution(\"asdfasdf\") == \"asd fasd f\"\nassert solution(\"yukon\") == \"yukon\"\nassert solution(\"shami\") == \"shami\"\n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('hellno') == 'hell no'\nassert solution('abacaba') == 'abacaba'\nassert solution('asdfasdf') == 'asd fasd f'\nassert solution('fghghghgghgghgghgghhgh') == 'fghghghgghgghgghgghhgh'\nassert solution('aabbbcccccddddd') == 'aabbb cccc dddd d'\n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"hellno\") == \"hell no\"\nassert solution(\"helllllooooo\") == \"helllllooooo\"\nassert solution(\"abacaba\") == \"abacaba\"\nassert solution(\"asdfasdf\") == \"asdfasdf\"\nassert solution(\"qwertyuiop\") == \"qwertyuiop\"\n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"hellno\") == \"hell no\"\nassert solution(\"abacaba\") == \"abacaba\"\nassert solution(\"asdfasdf\") == \"asd fasd f\"\nassert solution(\"fghlkjhgfdj\") == \"fghlkjhgfdj\""
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"hellno\") == \"hell no\"\nassert solution(\"helllllooooo\") == \"helllllooooo\"\nassert solution(\"abacaba\") == \"abacaba\"\nassert solution(\"tobeornottobe\") == \"tobeornottobe\"\nassert solution(\"aaaaaaaaaaaaaaaaaaaaaaaaaabbbbbbbbbbbbbbbccccccccccccccccdddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"hellno\") == \"hell no\"\nassert solution(\"hackcerrs\") == \"hack errs\"\nassert solution(\"backtothefutttture\") == \"back to the futtture\"\nassert solution(\"aaaaaaa\") == \"aaaaaaa\"\nassert solution(\"tobeornottobe\") == \"to be or not to be\"\n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('hellno') == 'hell no'\nassert solution('abacaba') == 'abacaba'\nassert solution('asdfasdf') == 'asd fasd f'\n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('hellno') == 'hell no'\nassert solution('hackcerrs') == 'hackeerrs'\nassert solution('backtothefutttture') == 'backtotethefurture'\nassert solution('helllllooooo') == 'helllllllooo'\nassert solution('tobeornottobe') == 'tobeorntobe'\n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"hellno\") == \"hell no\"\nassert solution(\"abacaba\") == \"abacaba\"\nassert solution(\"asdfasdf\") == \"asd fasd f\"\nassert solution(\"asdfasdf\") == \"asd fasd f\""
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == \"200\"\n\n-----Solution Summary-----\n\nSince the given problem is not asking for the optimal answer, I decided to calculate the minimum amount of time and then round it to the nearest second.\n\nThe first part of the problem was to calculate the number of seconds that Anton is required to spend in order to prepare a potion. In order to do this, I first calculate the total number of manapoints required to prepare the potion, and then subtract that number from the total number of seconds required to prepare the potion.\n\nI also know that the minimum number of seconds that it takes to prepare the potion is equal to the number of seconds taken to prepare it without the potions. This can be found out by subtracting the number of potions already prepared from the number of seconds required to prepare the potion, and if we don't have enough manapoints, we can't prepare the potion.\n\nAfter this step, I calculate the number of seconds to prepare the potions (the one from the spells of the first type) and then subtract the number of manapoints used for the first type from the number of seconds that are required to prepare the potions (the one from the spells of the second type). Then I can calculate the minimum number of seconds that Anton is required to spend.\n"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''20 3 2''') == '20'\nassert solution('''20 3 2'''\n''') == '20'\nassert solution('''20 3 2'''\n'''10 99'''\n'''2 4 3'''\n'''20 10 40'''\n'''4 15'''\n'''10 80''') == '200'\nassert solution('''20 3 2'''\n'''10 99'''\n'''2 4 3'''\n'''200 100 400'''\n'''4 15'''\n'''100 800''') == '200'\nassert solution('''20 3 2'''\n'''10 99'''\n'''2 4 3'''\n'''200 100 400'''\n'''4 15'''\n'''100 800'''\n'''10''') == '400'\n"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('20 3 2\\n10 99\\n2 4 3\\n200 100 400\\n4 15\\n100 800') == '200'\nassert solution('20 3 2\\n10 99\\n2 4 3\\n200 100 400\\n4 15\\n100 800') == '200'\nassert solution('5 2 2\\n1 2\\n2 1\\n3 1\\n4 1') == '5'\nassert solution('5 2 2\\n1 2\\n2 1\\n3 1\\n4 1') == '5'\nassert solution('100 1 1\\n1 1') == '100'\n"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''20 3 2\n10 99\n2 4 3\n20 10 40\n4 15\n10 80''') == '200'\nassert solution('''20 3 2\n10 99\n2 4 3\n200 100 400\n4 15\n100 800''') == '200'\nassert solution('''20 3 2\n10 99\n2 4 3\n200 100 400\n4 15\n100 800''') == '200'\n'''\n"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''20 3 2\n10 99\n2 4 3\n20 10 40''') == '20'\nassert solution('''20 3 2\n10 99\n2 4 3\n200 100 400\n4 15\n100 800''') == '200'\nassert solution('''10 2 10\n10 99\n2 4 3\n200 100 400\n4 15\n100 800''') == '20'"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\n\n\n\"\"\"\n"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('20 3 2\\n10 99\\n2 4 3\\n20 10 40\\n4 15\\n10 80') == '20'\nassert solution('20 3 2\\n10 99\\n2 4 3\\n200 100 400\\n4 15\\n100 800') == '200'\n"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"20 3 2\\n10 99\\n2 4 3\\n200 100 400\\n4 15\\n100 800\") == \"200\"\nassert solution(\"30 5 2\\n7 9 3\\n5 5 5\\n10 10 10\\n8 5 4\\n4 3\") == \"30\"\nassert solution(\"30 3 2\\n1 1 1\\n1 1 1\\n2 2 2\\n2 2 2\\n2 2 2\\n1 1 1\\n1 1 1\\n1 1 1\") == \"10\"\nassert solution(\"10 10 10\\n5 5 5\\n5 5 5\\n5 5 5\\n5 5 5\\n5 5 5\\n5 5 5\\n5 5 5\") == \"5\"\n"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''20 3 2\n10 99\n2 4 3\n20 10 40\n4 15\n10 80''') == '200'\nassert solution('''20 3 2\n10 99\n2 4 3\n200 100 400\n4 15\n100 800''') == '200'\nassert solution('''20 3 2\n10 99\n2 4 3\n200 100 400\n4 15\n100 800''') == '200'\nassert solution('''20 3 2\n10 99\n2 4 3\n40 40 40 40 40 40\n4 15\n10 80\n5 5 5 5 5 5 5''') == '400'\nassert solution('''20 3 2\n10 99\n2 4 3\n200 100 400\n4 15\n100 800\n5 5 5 5 5 5 5''') == '400'\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('3 4 11') == '6'\nassert solution('5 5 10') == '7'\nassert solution('1 2 3 4') == '6'\nassert solution('1 2 4 8 16') == '7'\n\"\"\"\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''3 4 11''') == '6'\nassert solution('''5 5 10''') == '7'\n'''\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''3 4 11\n1 2 3 4\n''') == '6'\n\nassert solution('''5 5 10\n1 2 4 8 16\n''') == '7'\n\n\n\n\n\"\"\"\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == '7'\n\"\"\"\n\nn, k, M = [int(x) for x in stdin.split()]\nt = [int(x) for x in stdin.split()]\n\npoints = 0"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == ''\n'''\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('3 4 11') == '6'\nassert solution('5 5 10') == '7'\nassert solution('1 2 4 8 16') == '7'\nassert solution('3 4 3') == '4'\nassert solution('5 5 10') == '7'\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"3 4 11\") == \"6\"\nassert solution(\"5 5 10\") == \"7\"\nassert solution(\"1 2 3 4\") == \"6\"\nassert solution(\"1 2 4 8 16\") == \"7\"\nassert solution(\"0\") == \"0\"\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('10 3 9') == '7'\nassert solution('3 2 1') == '4'\nassert solution('5 5 10') == '7'\nassert solution('1 2 4 8 16') == '7'\nassert solution('3 4 11') == '6'\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"3 4 11\") == \"6\"\nassert solution(\"5 5 10\") == \"7\"\nassert solution(\"1 2 3 4\") == \"6\"\nassert solution(\"1 2 4 8 16\") == \"7\"\nassert solution(\"2 5 5\") == \"7\"\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('3 4 11\\n1 2 3 4\\n') == '6'\nassert solution('5 5 10\\n1 2 4 8 16\\n') == '7'\nassert solution
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''4''') == '1'\nassert solution('''3''') == '0'\nassert solution('''16''') == '0'\nassert solution('''10''') == '0'\nassert solution('''37''') == '0'\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == ''\n\n\n'''\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('4') == '1'\nassert solution('3') == '0'\n\n\"\"\"\n\nfrom math import ceil\nfrom bisect import bisect_left\nfrom functools import lru_cache\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''4''') == ''\nassert solution('''3''') == ''\nassert solution('''1''') == ''\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('4\\n') == '1'\nassert solution('3\\n') == '0'\n\n\n\"\"\""
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('4') == '1'\nassert solution('3') == '0'\n\n'''\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('4') == '1'\nassert solution('3') == '0'\nassert solution('2') == '0'\nassert solution('1') == '0'\nassert solution('0') == '0'\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(input()) == ''\n\n\"\"\"\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '0'\nassert solution('3') == '0'\nassert solution('4') == '0'\nassert solution('5') == '0'\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == '0'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('4 3 0') == '1 1'\nassert solution('4 3 11') == '1 2'\nassert solution('4 3 7') == '3 2'\nassert solution('4 3 14') == '3 2'\nassert solution('4 3 7') == '3 2'\n\"\"\"\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"4 3 0\") == \"1 1\"\nassert solution(\"4 3 11\") == \"1 2\"\nassert solution(\"4 3 7\") == \"3 2\"\nassert solution(\"4 3 7\") == \"3 2\"\nassert solution(\"4 3 4\") == \"3 4\"\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"4 3 0\") == \"1 1\"\nassert solution(\"4 3 11\") == \"1 2\"\nassert solution(\"4 3 7\") == \"3 2\"\nassert solution(\"4 3 2\") == \"4 3\"\nassert solution(\"4 3 3\") == \"4 3\"\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(input()) == expected\n\"\"\"\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"4 3 0\") == \"1 1\"\nassert solution(\"4 3 11\") == \"1 2\"\nassert solution(\"4 3 7\") == \"3 2\"\nassert solution(\"4 3 9\") == \"3 4\"\nassert solution(\"4 3 13\") == \"4 4\"\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == expected\nprint(solution(stdin))\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('4 3 0') == '1 1'\nassert solution('4 3 11') == '1 2'\nassert solution('4 3 7') == '3 2'\nassert solution('4 3 27') == '5 4'\nassert solution('4 3 81') == '5 5'\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''4 3 0''') == '1 1'\nassert solution('''4 3 11''') == '1 2'\nassert solution('''4 3 7''') == '3 2'\nassert solution('''4 3 4''') == '4 4'\nassert solution('''4 3 6''') == '2 2'\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('4 3 0') == '1 1'\nassert solution('4 3 11') == '1 2'\nassert solution('4 3 7') == '3 2'\nassert solution('4 3 -1') == '3 2'\nassert solution('4 3 -2') == '1 1'\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"1 2\") == \"1 1\"\nassert solution(\"4 3 0\") == \"1 1\"\nassert solution(\"4 3 11\") == \"1 2\"\nassert solution(\"4 3 7\") == \"3 2\"\nassert solution(\"5 4 5 1\") == \"2 2\"\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''2''') == '1 2'\nassert solution('''6''') == '2 3'\nassert solution('''4''') == '1 4'\nassert solution('''1''') == '1 1'\nassert solution('''3''') == '2 3'\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('2') == '1 2'\nassert solution('1') == '1 1'\nassert solution('6') == '2 3'\nassert solution('4') == '1 4'\nassert solution('1') == '1 1'\nprint(\"All tests past, you're probably good to go!\")\n\n\"\"\""
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''2''') == '1 2'\nassert solution('''6''') == '2 3'\nassert solution('''4''') == '1 4'\nassert solution('''1''') == '1 1'"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''2''') == '1 2'\nassert solution('''6''') == '2 3'\nassert solution('''4''') == '1 4'\nassert solution('''1''') == '1 1'\nassert solution('''3''') == '3 2'\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\n\"\"\"\n\"\"\") == \"\"\nassert solution(\n\"\"\"\n1\n\"\"\") == \"1 1\"\nassert solution(\n\"\"\"\n2\n\"\"\") == \"1 2\"\nassert solution(\n\"\"\"\n6\n\"\"\") == \"2 3\"\nassert solution(\n\"\"\"\n4\n\"\"\") == \"1 4\"\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''2''') == '''1 2'''\nassert solution('''6''') == '''2 3'''\nassert solution('''4''') == '''1 4'''\nassert solution('''1''') == '''1 1'''\nprint('Passed')\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"1 2\"\nassert solution(\"6\") == \"2 3\"\nassert solution(\"4\") == \"1 4\"\nassert solution(\"1\") == \"1 1\"\n\nprint(\"tests passed\")\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('2\\n') == '1 2'\nassert solution('6\\n') == '2 3'\nassert solution('4\\n') == '1 4'\nassert solution('1\\n') == '1 1'\nassert solution('7\\n') == '3 4'\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('2') == '1 2'\nassert solution('6') == '2 3'\nassert solution('4') == '1 4'\nassert solution('1') == '1 1'\nassert solution('1 2') == '1 2'\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''2''') == '1 2'\nassert solution('''3''') == '1 2'\nassert solution('''6''') == '1 2'\nassert solution('''4''') == '1 4'\nassert solution('''1''') == '1 1'\n"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('2\\n5\\n7\\n') == '7'\nassert solution('2\\n7\\n13\\n') == '21'\nassert solution('4\\n7\\n2\\n') == '0'\n"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(input) == '7\\n21\\n0'\nprint(solution(input))\n"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''2\n5\n7\n''') == '7'\nassert solution('''4\n7\n13\n''') == '21'\nassert solution('''2\n3\n2\n''') == '0'\n"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''2\n5\n7\n''') == '7'\nassert solution('''4\n7\n13\n''') == '21'\nassert solution('''2\n3\n2\n''') == '0'"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''2\n5\n7\n''') == '7'\nassert solution('''4\n7\n13\n''') == '21'\nassert solution('''2\n3\n2\n''') == '0'\nassert solution('''10\n2\n2\n''') == '0'\nassert solution('''5\n2\n2\n''') == '0'\n"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('2\\n5\\n7') == '7'\nassert solution('2\\n3\\n2') == '0'\nassert solution('4\\n7\\n13') == '21'\nassert solution('2\\n7\\n2') == '0'\nassert solution('10\\n10\\n10') == '0'\n"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('2\\n5\\n7') == '7'\nassert solution('4\\n7\\n13') == '21'\nassert solution('2\\n3\\n2') == '0'\n"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1\\n1\\n1\\n') == '1'\nassert solution('1\\n1\\n1\\n2\\n2\\n2\\n') == '2'\nassert solution('1\\n1\\n1\\n2\\n3\\n3\\n') == '3'\nassert solution('1\\n1\\n1\\n2\\n3\\n3\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n') == '6'\nassert solution('1\\n1\\n1\\n2\\n3\\n3\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('2\\n5\\n7') == '7'\nassert solution('4\\n7\\n13') == '21'\nassert solution('2\\n3\\n2') == '0'\nassert solution('2\\n4\\n2') == '0'\nassert solution('2\\n3\\n0') == '0'\n"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"2\\n5\\n7\") == \"7\"\nassert solution(\"2\\n7\\n13\") == \"21\"\nassert solution(\"2\\n3\\n2\") == \"0\"\nassert solution(\"4\\n7\\n13\") == \"21\"\n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1\\n3 3\\n') == 'YES'\nassert solution('1\\n3 2 4\\n') == 'NO'\nassert solution('1\\n5 3 2 4 1\\n') == 'YES'\nassert solution('1\\n3 2 3 4 1\\n') == 'NO'\nassert solution('1\\n5 3 2 3 4 1\\n') == 'NO'\n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''3\n1 3 2 4\n''') == 'NO'\nassert solution('''2\n1 2\n''') == 'YES'\nassert solution('''4\n1 4 2 3 4\n''') == 'NO'\nassert solution('''6\n1 5 2 4 3 4 5\n''') == 'YES'\nassert solution('''6\n1 5 2 4 3 4 5\n''') == 'YES'\n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1\\n2\\n3') == 'YES'\nassert solution('1\\n3\\n2') == 'NO'\nassert solution('2\\n1\\n3') == 'NO'\nassert solution('2\\n3\\n1') == 'YES'\nassert solution('1\\n2\\n3\\n4') == 'YES'\n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1\\n1') == 'YES'\nassert solution('2\\n1 3 2 4') == 'YES'\nassert solution('1\\n2 4 3') == 'YES'\nassert solution('2\\n2 1 3 4') == 'YES'\nassert solution('1\\n1') == 'NO'\n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\n'''\n1\n3 3\n\n'''\n) == 'YES'\n\nassert solution(\n'''\n2\n1 3 2 4\n\n'''\n) == 'YES'\n\nassert solution(\n'''\n1\n1 1\n\n'''\n) == 'NO'\n\nassert solution(\n'''\n2\n2 3 3\n\n'''\n) == 'YES'\n\nassert solution(\n'''\n2\n2 3\n\n'''\n) == 'NO'"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1\\n1') == 'YES'\nassert solution('2\\n1 3') == 'YES'\nassert solution('2\\n2 3') == 'NO'\nassert solution('2\\n1 3 2') == 'YES'\nassert solution('2\\n2 3 1') == 'NO'\n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''2\n1 3 2 4''') == 'YES'\nassert solution('''2\n4 3 2 1''') == 'YES'\nassert solution('''2\n1 3 2 4''') == 'NO'\nassert solution('''2\n1 3 2 4''') == 'NO'\nassert solution('''3\n1 3 2 4 5 6\n6 7 8 9 10 11 12''') == 'YES'\n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1\\n1\\n') == 'YES'\nassert solution('2\\n1 3\\n') == 'NO'\nassert solution('1\\n3\\n') == 'YES'\nassert solution('2\\n3 4\\n') == 'NO'\nassert solution('1\\n3\\n1\\n3\\n') == 'YES'\n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''1\n3 2 4''') == 'YES'\nassert solution('''1\n1 3 2 4\n2 4 1 3\n2 3 4 1\n1 3 2 4''') == 'YES'\nassert solution('''2\n1 3 2 4\n2 4 1 3\n2 3 4 1\n1 3 2 4''') == 'NO'\nassert solution('''3\n1 2 3 4 5\n2 4 5 1 3\n3 4 5 1 2\n4 5 1 3 2\n5 1 2 3 4\n1 3 2 4 5\n2 4 5 1 3\n3 4 5 1 2\n4 5 1 3 2\n5 1 2 3 4''') == 'YES'\nassert solution('''3\n4 3 5 2 1\n2 3 5 4 1\n5 2 3 4 1\n4 3 5 2 1\n3 5 2 4 1\n2 3 5 4 1\n1 3 5 2 4\n2 3 5 4 1\n5 2 3 4 1\n4 3 5 2 1\n5 2 3 4 1\n5 2 3 4 1\n1 3 5 2 4\n2 3 5 4 1\n2 3 5 4 1\n2 3 5 4 1\n1 3 5 2 4\n2 3 5 4 1\n2 3 5 4 1\n2 3 5 4 1\n1 3 5 2 4\n2 3 5 4 1\n2 3 5 4 1\n2 3 5 4 1\n2 3 5 4 1\n2 3 5 4 1\n1 3 5 2 4\n2 3 5 4 1\n2 3 5 4 1\n2 3 5 4 1\n2 3 5 4 1\n2 3 5 4 1''') == 'NO'\n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''3\n2 7 28\n''') == '1\\n2 7 9 28'\nassert solution('''5\n2 4 5 3 1\n''') == '2\\n2 4 5 1 3'\nassert solution('''1\n1\n''') == '0\\n1'\nassert solution('''100\n1000000000\n''') == '1\\n1000000000'\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20') == '1\\n2 7 9 28\\n'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28') == '1\\n2 7 9 28\\n'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n') == '1\\n2 7 9 28\\n'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n') == '1\\n2 7 9 28\\n'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n') == '1\\n2 7 9 28\\n'\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''\n3\n2 7 28\n''') == '1'\nassert solution('''\n3\n5 8 19\n''') == '2'\nassert solution('''\n3\n1 2 3\n''') == '2'\nassert solution('''\n3\n1 4 5\n''') == '2'\nassert solution('''\n3\n1 1 1\n''') == '1'\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1 2 3') == '1'\nassert solution('2 7 28') == '1'\nassert solution('3 7 28') == '2'\nassert solution('9 7 28') == '3'\nassert solution('9 7 28') == '3'\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''3\n2 7 28''') == '1'\nassert solution('''5\n3 7 9 14 22''') == '2'\nassert solution('''6\n1 2 3 4 5 6''') == '1'\nassert solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '1'\nassert solution('''7\n1 2 3 4 5 6 7''') == '3'\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''2 7 28''') == '1'\nassert solution('''3''') == '0'\nassert solution('''7''') == '0'\nassert solution('''10''') == '0'\nassert solution('''9''') == '0'\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''2 7 28''') == '1'\nassert solution('''7 9 28''') == '2 7 9 28'\nassert solution('''28''') == '1'\nassert solution('''2 7 9 28''') == '1'\nassert solution('''7 9 28''') == '2 7 9 28'\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"3\\n2 7 28\") == \"1\\n2 7 9 28\"\nassert solution(\"1\\n1\") == \"0\"\nassert solution(\"2\\n1\") == \"1\"\nassert solution(\"2\\n2\") == \"0\"\nassert solution(\"2\\n3\") == \"1\"\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == '7'\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''2 3\n8 20''') == '7'\n'''\nimport sys\n\nT = int(sys.stdin.readline().strip())\nfor _ in range(T):\n    N, K = list(map(int, sys.stdin.readline().strip().split()))\n    A = list(map(int, sys.stdin.readline().strip().split()))\n    if sum(A) % K!= 0:\n        print(-1)\n    else:\n        max_div = 0\n        for i in range(N):\n            if A[i] >= 0:\n                A[i] += K\n            else:\n                A[i] += (-K)\n        for i in range(N):\n            max_div = max(max_div, abs(A[i] / K))\n        print(max_div)\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('2 3') == '7'\nassert solution('8 20') == '7'\nassert solution('2 4') == '4'\nassert solution('10 5') == '5'\nassert solution('10 5') == '5'\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdin[0]\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('8 2\\n8 20') == '7'\nassert solution('8 2\\n8 21') == '8'\nassert solution('8 2\\n8 20') == '7'\nassert solution('8 2\\n8 21') == '8'\nassert solution('8 3\\n8 20') == '7'\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\n    '''2 3\n8 20'''\n) == '7'\nassert solution(\n    '''2 1\n10 4'''\n) == '2'\nassert solution(\n    '''2 1\n9 4'''\n) == '2'\n'''\n1\n1\n'''\n) == '1'\n\nassert solution(\n    '''1 2\n1 1'''\n) == '1'\n\nassert solution(\n    '''5 3\n2 5 1 2 4'''\n) == '7'\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdin[1]\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('2 3') == 7\nassert solution('8 20') == 7\nprint(solution('2 3'))\nprint(solution('8 20'))\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1 2') == '7'\nassert solution('3 2') == '1'\nassert solution('2 3') == '1'\nassert solution('4 2') == '4'\nassert solution('5 2') == '1'\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('2 3') == '7'\nassert solution('8 20') == '7'\nassert solution('1 2') == '1'\nassert solution('5 1') == '1'\nassert solution('1000000000 2') == '1'\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('39') == '4 5 3'\nassert solution('1') == '0'\nassert solution('7') == '0'\nassert solution('9') == '0'\nassert solution('13') == '0'\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('0') == ''\nassert solution('3') == '3'\nassert solution('7') == '7'\nassert solution('15') == '3'\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('39') == '4\\n5 3'\nassert solution('1') == '0'\nassert solution('7') == '0'\nassert solution('15') == '1\\n2\\n3'\nassert solution('89') == '3\\n4\\n5'\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(39) == \"5 3\"\nassert solution(1) == \"0\"\nassert solution(7) == \"0\"\nassert solution(39) == \"5 3\"\nassert solution(49) == \"7 3\"\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('40') == '0'\nassert solution('39') == '4'\nassert solution('39') == '4'\nassert solution('36') == '5 3'\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''39''') == '''4\n5 3 \n'''\nassert solution('''1''') == '''0\n'''\nassert solution('''7''') == '''0\n'''\n\n'''\n\"BENCHMARK TESTS (50 numbers, each number is a number between 0 and 10^6, no zero)\"\npython3 solution.py <(python3 data_cat_furrier.txt)\n'''"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdin\n'''\n\nfrom collections import deque"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\n\"39\") == \"4 5 3\"\nassert solution(\n\"1\") == \"0\"\nassert solution(\n\"7\") == \"0\"\nassert solution(\n\"9\") == \"4 3 2\"\n\n\n\"\"\""
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == \"\"\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('2 3 5') == 2\nassert solution('6 7') == 7\nassert solution('6 5') == 5\nassert solution('6 6') == 5\nassert solution('6 7') == 7\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('3 6') == 2\nassert solution('6 7') == 7\n\"\"\"\n\nfrom sys import stdin\n\nn, k = map(int, stdin.readline().split())\narr = list(map(int, stdin.readline().split()))\n\ntotal = 0\nmax_buckets = k\nbuckets = set()\n\nfor i in arr:\n    total += i\n    if total <= k:\n        buckets.add(i)\n\nprint(total)\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''2 6\n2 3 5''') == '2'\nassert solution('''6 7\n1 2 3 4 5 6''') == '7'\nassert solution('''6 7\n2 3 5''') == '2'\nassert solution('''7 7\n2 3 5''') == '2'\nassert solution('''1 2 3 4 5 6\n2 3 5''') == '7'\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''3 6\n2 3 5''') == '2'\nassert solution('''6 7\n1 2 3 4 5 6''') == '7'\nassert solution('''10 10\n1 2 3 4 5 6 7 8 9 10''') == '7'\nassert solution('''1 10\n1 2 3 4 5 6 7 8 9 10''') == '8'\n\n\n'''\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('2 3 5\\n2 3 5') == '2'\nassert solution('6 7\\n1 2 3 4 5 6') == '7'\nassert solution('7 5\\n1 2 3 4 5 6 7') == '7'\nassert solution('8 7\\n1 2 3 4 5 6 7 8') == '7'\nassert solution('10 8\\n1 2 3 4 5 6 7 8 9 10') == '8'\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"3 6\\n2 3 5\") == \"2\"\nassert solution(\"6 7\\n1 2 3 4 5 6\") == \"7\"\nassert solution(\"7 8\\n2 3 4 5 6 7\") == \"7\"\nassert solution(\"9 10\\n3 4 5 6 7 8 9\") == \"7\"\nassert solution(\"9 10\\n1 2 3 4 5 6 7\") == \"7\"\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"3 6\\n2 3 5\") == \"2\"\nassert solution(\"6 7\\n1 2 3 4 5 6\") == \"7\"\nassert solution(\"3 6\\n2 3 5\") == \"2\"\nassert solution(\"6 7\\n1 2 3 4 5 6\") == \"7\"\nassert solution(\"7 6\\n1 2 3 4 5 6 7\") == \"7\"\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('2 3 5\\n2 3 5') == '2'\nassert solution('6 7\\n1 2 3 4 5 6') == '7'\nassert solution('3 2\\n1 2 3') == '2'\nassert solution('4 4\\n1 2 3 4') == '3'\nassert solution('4 3\\n1 1 2') == '3'\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\n'''5 2\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(input) == expected\n\"\"\"\n\nn, k = map(int, stdin.split())\nlines = stdin.strip()\nobstacles = [i for i, x in enumerate(lines) if x == '#']\nprint(\"YES\" if len(obstacles) <= k else \"NO\")\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\n    \"...G.T.#\"\n) == \"YES\"\nassert solution(\n    \"T...G\"\n) == \"YES\"\nassert solution(\n    \"GGT..\"\n) == \"NO\"\nassert solution(\n    \"G....G\"\n) == \"YES\"\nassert solution(\n    \".G.T.#\"\n) == \"YES\"\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('5 2') == 'YES'\nassert solution('6 1') == 'YES'\nassert solution('7 3') == 'NO'\nassert solution('5 3') == 'YES'\nassert solution('5 2') == 'NO'\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('5 2') == 'YES'\nassert solution('6 1') == 'YES'\nassert solution('7 3') == 'NO'\nassert solution('..GT..') == 'NO'\nassert solution('T..#..G') == 'YES'\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('5 2\\n#G#T#\\n') == 'YES'\nassert solution('6 1\\n..GT..\\n') == 'YES'\nassert solution('7 3\\nT..#..G\\n') == 'NO'\nassert solution('6 2\\n..GT..\\n') == 'NO'\n\n\n\"\"\"\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"\"\"5 2\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('5 2\\n#G#T#\\n') == 'YES'\nassert solution('6 1\\nT....G\\n') == 'YES'\nassert solution('7 3\\nT..#..G\\n') == 'NO'\nassert solution('6 2\\n..GT..\\n') == 'NO'\nassert solution('6 2\\n..GT..\\n') == 'NO'\n\n\n\"\"\"\nfrom collections import defaultdict\nimport sys"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('3 2') == 'YES'\nassert solution('3 1') == 'YES'\nassert solution('7 3') == 'NO'\nassert solution('7 2') == 'NO'\nassert solution('5 2') == 'YES'\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('5 2') == 'YES'\nassert solution('6 1') == 'YES'\nassert solution('7 3') == 'NO'\nassert solution('6 2') == 'NO'\nassert solution('..GT..') == 'NO'\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == expected\n\n'''"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"1 2 3 1 1\") == \"1.5000000000000\"\nassert solution(\"4 10 13 10 3 1\") == \"4.375\"\nassert solution(\"1 4 6 2 2 1\") == \"-1\"\nassert solution(\"3 10 15 17 9 2\") == \"11.3333333333\"\nassert solution(\"3 10 15 17 9 2\") == \"-1\"\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1 10 13 10 3 1') == '4.375'\nassert solution('4 10 13 10 3 1') == '4.375'\nassert solution('1 4 6 2 2 1') == '-1'\nassert solution('3 10 15 17 9 2') == '11.3333333333'\nassert solution('1 4 8 10 8 1') == '3.875'\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"4 10 13 10 3 1\") == \"4.375\"\nassert solution(\"1 4 6 2 2 1\") == \"-1\"\nassert solution(\"3 10 15 17 9 2\") == \"11.3333333333\"\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('4 10 13 10 3 1\\n') == '4.3750000000'\nassert solution('1 4 6 2 2 1\\n') == '-1'\nassert solution('3 10 15 17 9 2\\n') == '11.3333333333'\nassert solution('1 1 1 1 1 1\\n') == '1.0'\nassert solution('1 1 1 1 1 1\\n') == '1.0'\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('4 10 13 10 3 1') == '4.375'\nassert solution('1 4 6 2 2 1') == '-1'\nassert solution('3 10 15 17 9 2') == '11.3333333333'\nassert solution('1 3 5 2 1 3') == '-1'\n\"\"\"\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('4 10 13 10 3 1') == \"4.375\"\nassert solution('1 4 6 2 2 1') == \"-1\"\nassert solution('3 10 15 17 9 2') == \"11.3333\"\nassert solution('3 10 15 17 9 2') == \"11.3333\"\nassert solution('3 10 15 17 9 2') == \"11.3333\"\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\n'''4 10 13 10 3 1''') == '4.375'\nassert solution('''1 4 6 2 2 1''') == '-1'\nassert solution('''3 10 15 17 9 2''') == '11.3333'\nassert solution('''4 5 10 10 2 2 1''') == '-1'\nassert solution('''4 5 6 2 2 1''') == '5'\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"4 10 13 10 3 1\") == \"4.3750000000\"\nassert solution(\"1 4 6 2 2 1\") == \"-1\"\nassert solution(\"3 10 15 17 9 2\") == \"11.3333333333\"\nassert solution(\"3 10 15 17 9 2\") == \"11.3333333333\"\nassert solution(\"2 1 2 1 1\") == \"0\"\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"4 10 13 10 3 1\") == \"4.375\"\nassert solution(\"1 4 6 2 2 1\") == \"-1\"\nassert solution(\"3 10 15 17 9 2\") == \"11.3333\"\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1 0 0') == '1'\nassert solution('3 2 1') == '1'\nassert solution('1000000000000000000 0 1000000000000000000') == '999999999999999999'\nassert solution('1 0 0') == '0'\nassert solution('1 1 1') == '0'\n\n\n\n\"\"\""
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == expected\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('3 2 1') == '1'\nassert solution('1 0 0') == '0'\nassert solution('1 1 1') == '0'\nassert solution('1000000000000000000 0 1000000000000000000') == '999999999999999999'\nassert solution('1 0 0') == '0'\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(input()) == \"\"\n\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''3 2 1''') == '1'\nassert solution('''1 0 0''') == '0'\nassert solution('''1 1 1''') == '0'\nassert solution('''1000000000000000000 0 1000000000000000000''') == '999999999999999999'"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''3 2 1''') == '1'\nassert solution('''1 0 0''') == '0'\nassert solution('''1 1 1''') == '0'\nassert solution('''1000000000000000000 0 1000000000000000000''') == '999999999999999999'\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('3 2 1') == '1'\nassert solution('1 0 0') == '0'\nassert solution('1 1 1') == '0'\nassert solution('1000000000000000000 0 1000000000000000000') == '999999999999999999'\nassert solution('0 0 0') == '0'\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('3 2 1') == '1'\nassert solution('1 0 0') == '0'\nassert solution('1 1 1') == '0'\nassert solution('1000000000000000000 0 1000000000000000000') == '999999999999999999'"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('3 2 1') == '1'\nassert solution('1 0 0') == '0'\nassert solution('1 1 1') == '0'\nassert solution('1000000000000000000 0 1000000000000000000') == '999999999999999999'\n\n\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''8\n1 2 3 6 9 8 5 2\n''') == 'NO'\nassert solution('''6\n1 2 1 2 5 3\n''') == 'YES'\nassert solution('''2\n1 10\n''') == 'YES'\nassert solution('''3\n1 2 1 2 5 3\n''') == 'NO'"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('1\\n8') == \"YES\\n3 3\"\nassert solution('2\\n1 2\\n') == \"NO\"\nassert solution('1\\n10\\n') == \"YES\\n4 9\"\n\n\n\n\"\"\"\n\nx = int(input())\n\na = [int(i) for i in input().split()]\n\ncount = 0\n\nfor i in range(len(a)):\n    for j in range(len(a)):\n        if i < j:\n            count += 1"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1 2 3 4\\n1 2 3 4\\n1 2 3 4\\n1 2 3 4\\n1 2 3 4\\n1 2 3 4\\n1 2 3 4\\n1 2 3 4\\n1 2 3 4') == 'YES'\nassert solution('1 2 3 4\\n1 2 3 4\\n1 2 3 4\\n1 2 3 4\\n1 2 3 4\\n1 2 3 4\\n1 2 3 4\\n1 2 3 4\\n1 2 3 4\\n1 2 3 4') == 'NO'\nassert solution('1 2 3 4\\n1 2 3 4\\n1 2 3 4\\n1 2 3 4\\n1 2 3 4\\n1 2 3 4\\n1 2 3 4\\n1 2 3 4\\n1 2 3 4\\n1 2 3 4\\n1 2 3 4') == 'YES'\nassert solution('1 2 3 4\\n1 2 3 4\\n1 2 3 4\\n1 2 3 4\\n1 2 3 4\\n1 2 3 4\\n1 2 3 4\\n1 2 3 4\\n1 2 3 4\\n1 2 3 4\\n1 2 3 4') == 'NO'\nassert solution('1 2 3 4\\n1 2 3 4\\n1 2 3 4\\n1 2 3 4\\n1 2 3 4\\n1 2 3 4\\n1 2 3 4\\n1 2 3 4\\n1 2 3 4\\n1 2 3 4\\n1 2 3 4') == 'NO'\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('8\\n1 2 3 6 9 8 5 2') == 'YES\\n3 3'\nassert solution('8\\n1 2 1 2 5 3') == 'NO'\nassert solution('6\\n1 2 1 2 5 3') == 'YES\\n4 9'\n\n\n\nMore tests:\n\nIf you can think of two examples, which are contradicting, please help them to fix the program.\n\nFor example, there are two pairs of contradicting solutions (4, 9) and (1, 10).\n\nIf your solution is better than any of the contradicting solutions, please fix the program.\n\nIf there are two conflicting solutions, it's guaranteed that it's the only one.\n\nFor example, if your solution is (1, 10), you can easily make all of the contradicting solutions (1, 3), (1, 6), (1, 8), (1, 9), (2, 5), (2, 7), (3, 4), (3, 6), (3, 8), (3, 9), (4, 6), (4, 8), (5, 6), (5, 8), (6, 7), (7, 8), (8, 9), (9, 10), you must fix this problem.\n\nInput/Output\n\n[time limit] 4000ms (py)\n\n[input] integer n\n\nThe number of cells visited on your path (if some cell is visited twice, then it's listed twice).\n\nA line containing n integers a_1, a_2,..., a_{n} (1 \u2264 a_{i} \u2264 10^9).\n\nGuaranteed constraints:\n1 \u2264 n \u2264 200000.\n\n[output] string\n\nYES if the paths are possible with the given numbers, or NO otherwise.\n\"\"\""
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1\\n1\\n') == 'NO'\nassert solution('1\\n1\\n') == 'NO'\nassert solution('1\\n1\\n') == 'NO'\nassert solution('1\\n1\\n') == 'NO'\nassert solution('1\\n1\\n') == 'NO'\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''4\n1 2 3 4\n5 6 7 8''') == 'YES'\nassert solution('''4\n1 2 1 2\n5 3 6 7''') == 'NO'\nassert solution('''4\n1 2 1 2\n5 3 6 7''') == 'NO'\nassert solution('''5\n1 2 1 2 2\n5 3 6 7 8''') == 'NO'\nassert solution('''5\n1 2 1 2 2\n5 3 6 7 8''') == 'YES'\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('2\\n1 10') == 'YES\\n4 9\\n'\nassert solution('3\\n1 2 1 2 5 3\\n') == 'NO\\n'\nassert solution('1\\n1\\n') == 'YES\\n1 1\\n'\nassert solution('2\\n1 2\\n') == 'NO\\n'\nassert solution('3\\n1 2 1 2 5 3\\n') == 'NO\\n'\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''8\n1 2 3 6 9 8 5 2\n''') == 'YES\\n3 3'\n\nassert solution('''6\n1 2 1 2 5 3\n''') == 'NO'\n\nassert solution('''2\n1 10\n''') == 'YES\\n4 9'\n\nassert solution('''5\n11 6 5 4 3 2 1\n''') == 'NO'\n\nassert solution('''10\n3 4 3 4 1 5 4 5 5 4 5\n''') == 'NO'"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''8\n1 2 3 6 9 8 5 2\n''') == 'YES'\nassert solution('''6\n1 2 1 2 5 3\n''') == 'NO'\nassert solution('''2\n1 10\n''') == 'YES'\nassert solution('''2\n1 2\n''') == 'NO'\nassert solution('''6\n1 2 1 2 5 3\n''') == 'YES'\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1\\n1') == 'NO'\nassert solution('2\\n1 2') == 'NO'\nassert solution('3\\n1 2 3') == 'NO'\nassert solution('4\\n1 2 1 2') == 'NO'\nassert solution('5\\n1 2 1 2 3') == 'YES'\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('hi') == 'hi'\nassert solution('bob') == 'bob'\nassert solution('abca') == 'ac'\nassert solution('abacaba') == 'abcba'\nassert solution('abcdcba') == 'abcdcba'\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('hi\\nbob') == '-'\nassert solution('abca\\naccepted') == 'ac'\nassert solution('abacaba\\nabcdcba') == 'abcba'"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('abc') == ''\nassert solution('a') == '-'\nassert solution('abacaba') == 'ac'\nassert solution('abcdcba') == 'abcba'\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('hi\\nbob') == '-'\nassert solution('abca\\nbob') == '-'\nassert solution('abca\\nabcdcba') == 'abcba'\nassert solution('abacaba\\nabcdcba') == 'abcba'\nassert solution('abacaba\\nabcdcba') == 'abcba'"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('hi\\nbob') == '-', 'Hi bob'\nassert solution('abca\\n\\nbob') == 'ac', 'abca\\n\\nbob'\nassert solution('abca\\nabcdcba') == 'abcba', 'abca\\nabcdcba'\nassert solution('abacaba\\nabcdcba') == 'abcba', 'abacaba\\nabcdcba'\nassert solution('abacaba\\nabcdcba') == 'abcba', 'abacaba\\nabcdcba'\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''hi\nbob''') == '-', \"Hi bob\"\nassert solution('''abca\naccepted''') == 'ac', \"abca accepted\"\nassert solution('''abacaba\nabcdcba''') == 'abcba', \"abacaba abcdcba\"\n\n\"\"\"\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('hi') == '-'\nassert solution('bob') == '-'\nassert solution('abca') == '-'\nassert solution('abacaba') == '-'\nassert solution('abacaba') == '-'\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('hi') == '-'\nassert solution('bob') == '-'\nassert solution('abca') == 'ac'\nassert solution('abcdcba') == 'abcba'\nassert solution('abacaba') == 'ac'\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('hi') == '-'\nassert solution('bob') == '-'\nassert solution('abca') == 'ac'\nassert solution('abacaba') == 'acba'\nassert solution('abcdcba') == 'acdb'\n\"\"\"\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('hi') == '-'\nassert solution('bob') == '-'\nassert solution('abca') == '-'\nassert solution('abcdcba') == 'abcba'\nassert solution('abcdceba') == 'abcba'\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('3') == '0'\nassert solution('4') == '4'\nassert solution('2') == '1'\nassert solution('5++-++') == '3'\nassert solution('++++') == '0'\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('4\\n++-++') == '4'\nassert solution('4\\n-++-++') == '0'\nassert solution('2\\n++-++') == '1'\nassert solution('3\\n++-++') == '2'\nassert solution('0\\n++-++') == '0'\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"0\"\nassert solution(\"4\") == \"4\"\nassert solution(\"2\") == \"1\"\nassert solution(\"5++-++\") == \"3\"\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('3\\n---\\n') == '0'\nassert solution('4\\n++++\\n') == '4'\nassert solution('2\\n-+\\n') == '1'\nassert solution('5\\n++-++\\n') == '3'\nassert solution('4\\n-++-++\\n') == '4'\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('0\\n') == '0'\nassert solution('3\\n-++-') == '0'\nassert solution('4\\n+++') == '4'\nassert solution('4\\n++-++') == '4'\nassert solution('2\\n--') == '1'\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1') == '0'\nassert solution('++') == '1'\nassert solution('+++') == '2'\nassert solution('++++') == '3'\nassert solution('+++-') == '1'\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(input()) == ''\n\n\"\"\"\n\n\"\"\"\nTESTING\n\n.solution(''.join(input().split('-')))\n''.join(input().split('-'))\n''\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"0\"\nassert solution(\"4\") == \"4\"\nassert solution(\"2\") == \"1\"\nassert solution(\"5\") == \"3\"\nassert solution(\"++-++\") == \"3\"\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('0') == '0'\nassert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '4'\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdin\n\"\"\""
    },
    {
        "number": 169,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"10\") == \"2\"\nassert solution(\"11\") == \"2\"\nassert solution(\"100\") == \"1\"\nassert solution(\"1000\") == \"2\"\n"
    },
    {
        "number": 169,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n"
    },
    {
        "number": 169,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''10''') == '2'\nassert solution('''1''') == '0'\nassert solution('''7''') == '2'\nassert solution('''11''') == '3'\nassert solution('''10''') == '2'\n"
    },
    {
        "number": 169,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('10\\n11\\n9\\n8') == '2'\nassert solution('10\\n5\\n6\\n1') == '2'\nassert solution('10\\n11\\n5\\n1') == '2'\nassert solution('10\\n10\\n10\\n10') == '0'\nassert solution('10\\n10\\n10\\n100') == '9'\n"
    },
    {
        "number": 169,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(input()) == output\n"
    },
    {
        "number": 169,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"10\") == \"2\"\nassert solution(\"15\") == \"3\"\nassert solution(\"1\") == \"1\"\nassert solution(\"10\") == \"2\"\nassert solution(\"10\") == \"2\"\n"
    },
    {
        "number": 169,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''10\n11\n9\n8''') == '2'\nassert solution('''10\n5\n6\n1''') == '2'\nassert solution('''10\n11\n7\n10\n9\n3\n6\n4\n5\n2''') == '2'\nassert solution('''1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11''') == '10'\nassert solution('''20\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n22\n"
    },
    {
        "number": 169,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''10''') == '2'\nassert solution('''11''') == '2'\nassert solution('''9''') == '2'\nassert solution('''8''') == '2'\nassert solution('''7''') == '1'\n"
    },
    {
        "number": 169,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''10\n11\n9\n8''') == '2'\n\nassert solution('''10\n5\n6\n1\n''') == '2'\n\nassert solution('''2\n11\n3\n4\n''') == '2'\n\nassert solution('''1\n1\n1\n''') == '1'\n\nassert solution('''10\n20\n1\n10\n''') == '2'"
    },
    {
        "number": 169,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('10') == '2'\nassert solution('10\\n11\\n9\\n8') == '2'\nassert solution('10\\n5\\n6\\n1') == '2'\nassert solution('10\\n5\\n6\\n1\\n9\\n8') == '2'\nassert solution('10\\n5\\n6\\n1\\n9\\n8\\n10') == '2'\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('4\\n2 1 3\\n2 4 2') == '6 2'\nassert solution('3\\n1 2\\n2 1 3') == '-1'\nassert solution('2\\n1 1\\n2 2') == '-1'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''4\n2 1 3\n2 4 2\n''') == \"6 2\"\nassert solution('''3\n1 2\n2 1 3\n\n''') == \"-1\"\n'''"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('4\\n2 1 3\\n2 4 2\\n') == '6 2'\nassert solution('3\\n1 2\\n2 1 3\\n') == '-1'\n\"\"\"\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdin\nassert solution(stdin) == stdin\nassert solution(stdin) == stdin\nassert solution(stdin) == stdin\nassert solution(stdin) == stdin\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('4\\n2 1 3\\n2 4 2\\n') == '6 2'\nassert solution('3\\n1 2\\n2 1 3\\n') == '-1'\n\n\n\n'''\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"4\") == \"2 1\"\nassert solution(\"2 1 3\") == \"-1\"\nassert solution(\"2 4 2\") == \"6 2\"\nassert solution(\"1 2\") == \"-1\"\n\n\n\"\"\""
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''2\n2\n1 3\n2 4 2''') == '6 2'\nassert solution('''3\n1 2\n2 1 3\n2 4 2''') == '-1'\nassert solution('''4\n1 2\n2 1 3\n2 4 2\n4 3 1''') == '2 4'\nassert solution('''5\n1 2\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1''') == '-1'\nassert solution('''10\n1 2\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1\n2 1 3\n2 4 2\n4 3 1"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('4\\n2 1 3\\n2 4 2') == '6 2'\nassert solution('3\\n2 1 3\\n2 4 2') == '-1'\nassert solution('1\\n1') == '1 1'\nassert solution('2\\n1\\n1') == '-1 -1'\n\n\n-----Best Practice-----\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('abacaba') == 'Too weak'\nassert solution('X12345') == 'Too weak'\nassert solution('CONTEST_is_STARTED!!11') == 'Correct'\nassert solution('abacaba') == 'Too weak'\nassert solution('X12345') == 'Too weak'\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"abacaba\") == \"Too weak\"\nassert solution(\"X12345\") == \"Too weak\"\nassert solution(\"CONTEST_is_STARTED!!11\") == \"Correct\"\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('abacaba') == \"Too weak\"\nassert solution('X12345') == \"Too weak\"\nassert solution('CONTEST_is_STARTED!!11') == \"Correct\"\n\"\"\"\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"abacaba\") == \"Too weak\"\nassert solution(\"X12345\") == \"Too weak\"\nassert solution(\"CONTEST_is_STARTED!!11\") == \"Correct\"\nassert solution(\"ABC\") == \"Too weak\"\nassert solution(\"1234\") == \"Too weak\"\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('abacaba') == 'Too weak'\nassert solution('X12345') == 'Too weak'\nassert solution('CONTEST_is_STARTED!!11') == 'Correct'\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('abacaba') == 'Too weak'\nassert solution('X12345') == 'Too weak'\nassert solution('CONTEST_is_STARTED!!11') == 'Correct'\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('abacaba') == 'Too weak'\nassert solution('X12345') == 'Too weak'\nassert solution('CONTEST_is_STARTED!!11') == 'Correct'\nprint('Test cases passed')\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('abacaba') == 'Too weak'\nassert solution('X12345') == 'Too weak'\nassert solution('CONTEST_is_STARTED!!11') == 'Correct'\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"abacaba\") == \"Too weak\"\nassert solution(\"X12345\") == \"Too weak\"\nassert solution(\"CONTEST_is_STARTED!!11\") == \"Correct\"\nprint(\"All tests passed successfully.\")"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"abacaba\") == \"Too weak\"\nassert solution(\"X12345\") == \"Too weak\"\nassert solution(\"CONTEST_is_STARTED!!11\") == \"Correct\"\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"4\\n5 4 4 4\\n5 5 4 5 5\\n\") == \"1\"\nassert solution(\"6\\n1 1 1 1 1 1\\n5 5 5 5 5 5\\n\") == \"3\"\nassert solution(\"9\\n3 2 5 5 2 3 3 3 2\\n4 1 4 1 1 2 4 4 1\\n\") == \"-1\"\nassert solution(\"9\\n3 2 5 5 2 3 3 3 2\\n1 3 5 5 3 2 2 3 1\\n\") == \"-1\"\nassert solution(\"1\\n5\\n3\") == \"-1\"\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('1\\n2') == '1'\nassert solution('1\\n2\\n3') == '1'\nassert solution('1\\n2\\n3\\n4') == '1'\nassert solution('1\\n2\\n3\\n4\\n5') == '1'\nassert solution('1\\n2\\n3\\n4\\n5\\n6') == '2'\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"\\n\") == \"\"\nassert solution(\"1\\n\") == \"1\"\nassert solution(\"\\n1\") == \"1\"\nassert solution(\"1\\n2\") == \"-1\"\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"-1\"\nassert solution(\"1\\n1\") == \"-1\"\nassert solution(\"1\\n1\\n1\") == \"-1\"\nassert solution(\"1\\n1\\n1\\n1\") == \"-1\"\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(input()) == output\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"2 2 1 1 2 3\") == \"2\"\nassert solution(\"6 4 5 4 3 2 3 1\") == \"-1\"\nassert solution(\"1 1 1 1 1 1\") == \"1\"\nassert solution(\"9 4 5 5 5 5 5 4\") == \"3\"\nassert solution(\"6 3 2 5 5 2 3 3 1\") == \"-1\"\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"-1\"\nassert solution(\"3\") == \"-1\"\nassert solution(\"4\") == \"3\"\nassert solution(\"5\") == \"2\"\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"4\\n5 4 4 4\\n5 5 4 5 5\\n\") == \"1\\n\"\nassert solution(\"6\\n1 1 1 1 1 1\\n5 5 5 5 5 5\\n\") == \"3\\n\"\nassert solution(\"1\\n5\\n3\\n\") == \"-1\\n\"\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"0\\n5\\n4 5 4 4\\n5 5 4 5 5\\n\") == \"1\\n\"\nassert solution(\"1\\n5\\n3\\n\") == \"-1\\n\"\nassert solution(\"0\\n5\\n4 1 4 1 1\\n5 5 4 5 5 5\\n\") == \"3\\n\"\nassert solution(\"1\\n5\\n3\\n\") == \"-1\\n\"\nassert solution(\"1\\n1\\n3\\n\") == \"-1\\n\"\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('6') == '1'\nassert solution('5') == '1'\nassert solution('1') == '-1'\nassert solution('9') == '3'\nassert solution('3') == '-1'\n"
    },
    {
        "number": 173,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('3 5') == 'NO'\nassert solution('1 10') == 'YES'\nassert solution('1 10') == 'NO'\nassert solution('<><>') == 'YES'\nassert solution('^<>') == 'NO'\n"
    },
    {
        "number": 173,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('') == 'NO'\nassert solution('<><>') == 'NO'\nassert solution('^v^v^v') == 'YES'\nassert solution('><>') == 'NO'\nassert solution('<>^v') == 'YES'\n"
    },
    {
        "number": 173,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('5 5') == \"NO\"\nassert solution('5 5') == \"NO\"\nassert solution('>><>') == \"YES\"\nassert solution('<><>') == \"NO\"\nassert solution('^vv^v^') == \"YES\"\n"
    },
    {
        "number": 173,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\">^>\") == \"YES\"\nassert solution(\"^v^\") == \"YES\"\nassert solution(\"^v^v^v^v^v^\") == \"YES\"\nassert solution(\"<v^<v^<v^<v^v^\") == \"YES\"\nassert solution(\"^^^\") == \"YES\"\n"
    },
    {
        "number": 173,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1\\n1') == 'NO'\nassert solution('1\\n1') == 'NO'\nassert solution('1\\n><>') == 'YES'\nassert solution('3\\n><>^<>') == 'NO'\nassert solution('3\\n><>^v') == 'YES'\n"
    },
    {
        "number": 173,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('3 3\\n><>\\nv^v\\n') == 'NO'\nassert solution('3 3\\n><>\\nv^v\\n') == 'YES'\nassert solution('5 6\\n>^^v^vv^v^v\\n') == 'YES'\nassert solution('2 1\\n>v>\\n') == 'YES'\nassert solution('2 1\\n<v<\\n') == 'YES'\n"
    },
    {
        "number": 173,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"2 3\") == \"NO\"\nassert solution(\"3 3\") == \"YES\"\nassert solution(\"5 7\") == \"YES\"\nassert solution(\"<><>\") == \"NO\"\nassert solution(\"^v^v^v^\") == \"YES\"\n"
    },
    {
        "number": 173,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('3 3') == 'NO'\nassert solution('4 6') == 'YES'\nassert solution('>^v<>') == 'YES'\nassert solution('^v^v^v^') == 'YES'\nassert solution('^>v<') == 'YES'\n"
    },
    {
        "number": 173,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"3 3\") == \"NO\"\nassert solution(\"4 6\") == \"YES\"\nassert solution(\"<><>\") == \"YES\"\nassert solution(\"v^v^v^\") == \"YES\"\nassert solution(\"^v^v^v\") == \"YES\"\n"
    },
    {
        "number": 173,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 174,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"4\\n0 1 1 0\\n\") == \"YES\\n(((0)->1)->(1->0))\"\nassert solution(\"1\\n1\\n\") == \"NO\"\nassert solution(\"2\\n1 1\\n\") == \"NO\"\nassert solution(\"1\\n0\\n\") == \"YES\\n0\"\nassert solution(\"2\\n0 1\\n\") == \"NO\"\n"
    },
    {
        "number": 174,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('0->1') == 'NO'\nassert solution('0->1->0') == 'YES'\nassert solution('0->(0->1)->(1->0)->(0->1)') == 'NO'\nassert solution('(1->1)->(0->1)->(1->0)->(1->1)->(0->0)->(1->1)->(0->1)') == 'YES'\nassert solution('0->(1->1)->(0->1)->(1->0)->(1->1)->(0->0)->(1->1)->(0->1)->(1->1)->(0->1)') == 'NO'\n"
    },
    {
        "number": 174,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''4\n0 1 1 0''') == 'YES'\nassert solution('''2\n1 1''') == 'NO'\nassert solution('''1\n0''') == 'YES'\nassert solution('''1\n1''') == 'YES'\nassert solution('''1\n1''') == 'YES'\n"
    },
    {
        "number": 174,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''0\n''') == 'YES'\nassert solution('''0\n''') == 'NO'\nassert solution('''0\n''') == 'NO'\nassert solution('''0\n''') == 'NO'\nassert solution('''0\n''') == 'NO'\n"
    },
    {
        "number": 174,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(input) == output\n\n\"\"\"\n"
    },
    {
        "number": 174,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(input) == output\n'''\n"
    },
    {
        "number": 174,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('0 -> 0') == 'YES\\n(0)'\nassert solution('0 -> 1') == 'YES\\n(0->1)'\nassert solution('0 -> 1 -> 0') == 'YES\\n((0->1)->(1->0))'\nassert solution('0 -> 1 -> 0 -> 1') == 'NO'\nassert solution('1 -> 0 -> 0') == 'NO'\n"
    },
    {
        "number": 174,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"0 1 1 0\") == \"YES\"\nassert solution(\"0 1 1 1\") == \"YES\"\nassert solution(\"0 0 0 1\") == \"YES\"\nassert solution(\"1 0 0 1\") == \"NO\"\nassert solution(\"0 1 1 0\") == \"YES\"\n"
    },
    {
        "number": 174,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''0\n0\n0\n0\n0''') == 'NO'\n\nassert solution('''0\n0\n0\n0\n1\n0\n0\n0\n0''') == 'YES'\n\nassert solution('''1\n1\n1\n1\n0\n0\n0\n1\n0''') == 'YES'\n\nassert solution('''0\n0\n0\n0\n1\n0\n0\n0\n1''') == 'NO'\n\nassert solution('''1\n1\n1\n1\n0\n0\n0\n0\n0''') == 'NO'"
    },
    {
        "number": 174,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''0 1 1 0\n''') == 'YES\\n(((0)->1)->(1->0))'\nassert solution('''0 1 1\n''') == 'NO'\nassert solution('''0 0 0\n''') == 'YES\\n0'\nassert solution('''1 1 1\n''') == 'YES\\n(((1)->(1))->(1->(1)))'\nassert solution('''1 1\n''') == 'NO'\n"
    },
    {
        "number": 175,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('12 5') == '0 1'\nassert solution('31 12') == '7 12'\nassert solution('3 5') == '7 4'\nassert solution('3 3') == '0 0'\nassert solution('0 0') == ''\n\"\"\"\n"
    },
    {
        "number": 175,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('1 1') == '0 1'\nassert solution('2 4') == '1 1'\nassert solution('1000000000 4000000000') == '1000000000 1'\nassert solution('3 2') == '1 1'\nassert solution('0 1') == '0 1'\n"
    },
    {
        "number": 175,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('2 5') == '0 1'\nassert solution('7 12') == '7 12'\nassert solution('31 12') == '7 12'\nassert solution('4 4') == '0 0'\nassert solution('17 10') == '0 0'\n"
    },
    {
        "number": 175,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"0 0\") == \"0 1\"\nassert solution(\"3 10\") == \"2 5\"\nassert solution(\"1 1\") == \"0 1\"\nassert solution(\"2 10\") == \"0 1\"\nassert solution(\"10 1\") == \"0 1\"\n"
    },
    {
        "number": 175,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 175,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('12 5') == '0 1'\nassert solution('31 12') == '7 12'\nassert solution('12 8') == '0 1'\nassert solution('11 32') == '0 1'\nassert solution('12 9') == '0 1'\n"
    },
    {
        "number": 175,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == result_for_sample_input_1)\nassert solution(stdin) == result_for_sample_input_2)"
    },
    {
        "number": 175,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1 1') == '0 1'\nassert solution('10 10') == '0 1'\nassert solution('100 12') == '7 12'\nassert solution('3 5') == '0 1'\nassert solution('11 10') == '7 12'\n"
    },
    {
        "number": 175,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1 2') == '0 1'\nassert solution('1 2') == '0 1'\nassert solution('0 1') == '0 1'\nassert solution('3 9') == '3 6'\nassert solution('3 9') == '3 6'\n"
    },
    {
        "number": 175,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == \"2 1\"\n\"\"\"\n"
    },
    {
        "number": 176,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''1 1 10''') == '10'\nassert solution('''-4 -4 10''') == '5'\nassert solution('''2 -4 4''') == '5'\n'''\n\na,b,k = map(int,stdin.split(' '))\n"
    },
    {
        "number": 176,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 176,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1 1 10') == '10'\nassert solution('2 -4 4') == '5'\nassert solution('1 1 1000000000') == '1'\n\n\n\"\"\"\nfrom math import gcd\n"
    },
    {
        "number": 176,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 176,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1 1 10') == '10'\nassert solution('2 -4 4') == '5'\nassert solution('1 1 10') == '10'\nassert solution('2 -4 4') == '5'\nassert solution('-1 -1 -1') == '0'\n"
    },
    {
        "number": 176,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''1 1 10''') == '10'\nassert solution('''-1 -1 10''') == '10'\nassert solution('''-1 -4 4''') == '5'\nassert solution('''-1 -4 0''') == '10'\nassert solution('''-1 -4 5''') == '0'\n"
    },
    {
        "number": 176,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''1 1 10''') == '10'\nassert solution('''-4 -1 10''') == '5'\nassert solution('''2 -4 4''') == '5'\nassert solution('''2 -4 4''') == '5'\nassert solution('''2 4 4''') == '5'\n"
    },
    {
        "number": 176,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1 1 10') == '10'\nassert solution('2 -4 4') == '5'\nassert solution('1 1 10') == '10'\nassert solution('2 -4 4') == '5'\nassert solution('2 2 2') == '0'\n"
    },
    {
        "number": 176,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1 1 10') == '10'\nassert solution('2 -4 4') == '5'"
    },
    {
        "number": 176,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1 1 10') == '10'\nassert solution('2 -4 4') == '5'\n\n\"\"\"\n"
    },
    {
        "number": 177,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\n'''7''') == '7'\nassert solution(\n'''21''') == '5'\nassert solution(\n'''5000''') == '0'\nassert solution(\n'''7''') == '7'\nassert solution(\n'''100''') == '0'\n"
    },
    {
        "number": 177,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('') == '0'\nassert solution(' ') == '0'\nassert solution('2') == '0'\nassert solution('3') == '0'\nassert solution('1234') == '1'\n"
    },
    {
        "number": 177,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"2\") == \"2\"\nassert solution(\"123\") == \"1\"\nassert solution(\"123456789101112131415161718192021222324252627282930313233343536\") == \"5\"\nassert solution(\"12345678910111213141516171819202122232425262728293031323334353687654321\") == \"2\"\n"
    },
    {
        "number": 177,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('') == 0\nassert solution('1') == 1\nassert solution('2') == 0\nassert solution('3') == 0\nassert solution('4') == 2\n"
    },
    {
        "number": 177,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('2') == '0'\nassert solution('10') == '1'\nassert solution('12') == '2'\n"
    },
    {
        "number": 177,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('2') == '2'\nassert solution('7') == '7'\nassert solution('21') == '5'\nassert solution('200') == '0'\nassert solution('123456789101112131415161718192021222324252627282930313233343536') == '8'\n"
    },
    {
        "number": 177,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('12345678') == '5'\nassert solution('1234') == '1'\nassert solution('123450') == '4'\n"
    },
    {
        "number": 177,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '4'\nassert solution('5') == '5'\n"
    },
    {
        "number": 177,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('7') == '7'\nassert solution('7') == '7'\nassert solution('7') == '7'\nassert solution('7') == '7'\nassert solution('7') == '7'\n"
    },
    {
        "number": 177,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('') == None\nassert solution('2') == 2\nassert solution('3') == 5\nassert solution('5') == 7\nassert solution('7') == 11\n"
    },
    {
        "number": 178,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 178,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == \"YES\"\n'''\n"
    },
    {
        "number": 178,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('8380011223344') == 'YES'\nassert solution('807345619350641') == 'NO'\nassert solution('10') == 'YES'\nassert solution('9') == 'NO'\nassert solution('999874') == 'YES'\n"
    },
    {
        "number": 178,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('8380011223344') == 'YES'\nassert solution('807345619350641') == 'NO'\nassert solution('8073456193569341') == 'YES'\nassert solution('807345619356934') == 'NO'\nassert solution('8073456193569346466') == 'NO'\n"
    },
    {
        "number": 178,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('8380011223344') == 'YES'\nassert solution('807345619350641') == 'NO'\n"
    },
    {
        "number": 178,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"8380011223344\") == \"YES\"\nassert solution(\"807345619350641\") == \"NO\""
    },
    {
        "number": 178,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('8380011223344') == 'YES'\nassert solution('807345619350641') == 'NO'\nassert solution('807412568452') == 'YES'\nassert solution('807525748976') == 'NO'\n"
    },
    {
        "number": 178,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('8380011223344') == 'YES'\nassert solution('807345619350641') == 'NO'"
    },
    {
        "number": 178,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('') is None\nassert solution('123') is None\nassert solution('12345') is None\nassert solution('123456789') is None\nassert solution('1234567890') == 'YES'\n"
    },
    {
        "number": 178,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('8380011223344') == 'YES'\nassert solution('807345619350641') == 'NO'\nassert solution('93') == 'YES'\nassert solution('1234567890') == 'NO'\nassert solution('987654321') == 'NO'\n"
    },
    {
        "number": 179,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1 2') == '2'\nassert solution('1 2 3') == '2 3'\nassert solution('1 2 3 4') == '2 3 4'\n"
    },
    {
        "number": 179,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"4 1 2\") == \"6\"\nassert solution(\"123 42 24\") == \"824071958\"\n\n\"\"\"\nfrom __future__ import print_function\nfrom builtins import range\nfrom past.builtins import xrange\n\nimport sys\n\nn, x, pos = [int(i) for i in sys.stdin.readline().split()]"
    },
    {
        "number": 179,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('4 1 2') == '6'\nassert solution('123 42 24') == '824071958'\n\n\n\"\"\"\n"
    },
    {
        "number": 179,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"1 2\") == \"1\"\nassert solution(\"2 3\") == \"2\"\nassert solution(\"3 4\") == \"4\"\nassert solution(\"2 3 4\") == \"5\"\nassert solution(\"4 3 2 1\") == \"6\"\n"
    },
    {
        "number": 179,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(input) == output\n\"\"\"\n\nn, x, pos = [int(x) for x in input().split()]"
    },
    {
        "number": 179,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 179,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 179,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"4 1 2\") == \"6\"\nassert solution(\"123 42 24\") == \"824071958\"\nassert solution(\"\") == \"\"\nassert solution(\"1 2\") == \"\"\nassert solution(\"\") == \"\"\n"
    },
    {
        "number": 179,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('4 1 2') == '6'\nassert solution('123 42 24') == '824071958'\nassert solution('1 2 3') == '0'\nassert solution('2 2 3') == '3'\nassert solution('3 2 3') == '0'\n"
    },
    {
        "number": 179,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''4 1 2''') == '6'\nassert solution('''123 42 24''') == '824071958'\nassert solution('''10 99 6''') == '0'\nassert solution('''10 11 22''') == '8'\nassert solution('''10 100 100''') == '4'\n"
    },
    {
        "number": 180,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''hw?ap*yn?eww*ye*ar''') == 'happynewyear'\nassert solution('''ab?a''') == 'aa'\nassert solution('''ab?a''') == 'Impossible'\nassert solution('''ab?a''') == 'Impossible'\nassert solution('''ab?a''') == 'aa'\n"
    },
    {
        "number": 180,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('hw?ap*yn?eww*ye*ar') == \"happynewyear\"\nassert solution('ab?a') == \"aa\"\nassert solution('ab?a') == \"aa\"\nassert solution('ab?a') == \"aa\"\nassert solution('ab?a') == \"aa\"\n"
    },
    {
        "number": 180,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('hw?ap*yn?eww*ye*ar') == 'happynewyear'\nassert solution('ab?a') == 'aa'\nassert solution('ab?a') == 'aa'\nassert solution('ab?a') == 'aa'\nassert solution('ab?a') == 'aa'\n"
    },
    {
        "number": 180,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"hw?ap*yn?eww*ye*ar\") == \"happynewyear\"\nassert solution(\"ab?a\") == \"aa\"\nassert solution(\"ab?a\") == \"Impossible\"\nassert solution(\"ab?a\") == \"aa\"\nassert solution(\"ab?a\") == \"Impossible\"\n"
    },
    {
        "number": 180,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('hw?ap*yn?eww*ye*ar') == 'happynewyear'\nassert solution('ab?a') == 'aa'\nassert solution('ab?a') == 'aa'\nassert solution('ab?a') == 'Impossible'\nassert solution('ab?a') == 'Impossible'\n"
    },
    {
        "number": 180,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('hw?ap*yn?eww*ye*ar') == 'happynewyear'\nassert solution('ab?a') == 'aa'\nassert solution('ab?a') == 'aa'\nassert solution('ab?a') == 'aa'\nassert solution('ab?a') == 'aa'\n"
    },
    {
        "number": 180,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"hw?ap*yn?eww*ye*ar\") == \"happynewyear\"\nassert solution(\"ab?a\") == \"aa\"\nassert solution(\"ab?a\") == \"aa\"\nassert solution(\"ab?a\") == \"aa\"\nassert solution(\"ab?a\") == \"aa\"\n"
    },
    {
        "number": 180,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('hw?ap*yn?eww*ye*ar') == 'happynewyear'\nassert solution('ab?a') == 'aa'\nassert solution('ab?a') == 'Impossible'\n"
    },
    {
        "number": 180,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('hw?ap*yn?eww*ye*ar') == 'happynewyear'\nassert solution('ab?a') == 'aa'\nassert solution('ab?a') == 'aa'\nassert solution('ab?a') == 'aa'\nassert solution('ab?a') == 'aa'\n"
    },
    {
        "number": 180,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"hw?ap*yn?eww*ye*ar\") == \"happynewyear\"\nassert solution(\"ab?a\") == \"aa\"\nassert solution(\"ab?a\") == \"aa\"\nassert solution(\"ab?a\") == \"aa\"\nassert solution(\"ab?a\") == \"aa\"\n"
    },
    {
        "number": 181,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(input()) == \"3\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 181,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"60\") == \"1\"\nassert solution(\"-60\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 181,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(input()) == '30'\n'''\n"
    },
    {
        "number": 181,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"60\") == \"1\"\nassert solution(\"-60\") == \"3\"\nassert solution(\"1\") == \"1\"\nassert solution(\"-1\") == \"1\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 181,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('60') == '1'\nassert solution('-60') == '3'\nassert solution('1') == '1'\nassert solution('-1') == '1'\nassert solution('-10') == '3'\n"
    },
    {
        "number": 181,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('60') == '1'\nassert solution('-60') == '3'\nassert solution('-60') == '3'\nassert solution('-50') == '2'\nassert solution('-40') == '1'\n"
    },
    {
        "number": 181,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('60') == '1'\nassert solution('-60') == '3'\nassert solution('-45') == '1'\nassert solution('-10') == '2'\nassert solution('45') == '2'\n"
    },
    {
        "number": 181,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == \"30\"\n\n\"\"\""
    },
    {
        "number": 181,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('60') == '1'\nassert solution('-60') == '3'\n\"\"\"\n\n\nfrom math import ceil\n"
    },
    {
        "number": 181,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('60') == '1'\nassert solution('-60') == '3'\nassert solution('-12') == '-3'\nassert solution('-1234') == '-4'\nassert solution('-1234 567') == '-7'\n"
    },
    {
        "number": 182,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('2 4 0') == 'Yes'\nassert solution('5 6 1') == 'No'\nassert solution('3 3 3') == 'Yes'\n"
    },
    {
        "number": 182,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''4 4 0''') == 'Yes'\nassert solution('''5 6 1''') == 'No'\nassert solution('''3 3 3''') == 'Yes'\nassert solution('''2 2 2''') == 'Yes'\nassert solution('''5 6 0''') == 'Yes'\n"
    },
    {
        "number": 182,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1 1 1') == 'Yes'\nassert solution('4 4 0') == 'Yes'\nassert solution('5 6 1') == 'No'\nassert solution('3 3 3') == 'Yes'\n\n\"\"\""
    },
    {
        "number": 182,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('4 4 0\\n2 1 2') == 'Yes'\nassert solution('5 6 1\\n2 7 2') == 'No'\nassert solution('3 3 3\\n2 2 2') == 'Yes'\nassert solution('5 6 1\\n2 7 2') == 'No'\nassert solution('0 3 0\\n1 1 1') == 'Yes'\n"
    },
    {
        "number": 182,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"2 3 0\") == \"Yes\"\nassert solution(\"5 6 1\") == \"No\"\nassert solution(\"3 3 3\") == \"Yes\"\nassert solution(\"1 0 0\") == \"Yes\"\nassert solution(\"6 9 3\") == \"Yes\"\n"
    },
    {
        "number": 182,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''4 4 0''') == 'Yes'\nassert solution('''5 6 1''') == 'No'\nassert solution('''3 3 3''') == 'Yes'\nassert solution('''2 2 2''') == 'Yes'\nassert solution('''2 1 2''') == 'Yes'\n"
    },
    {
        "number": 182,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('4 4 0\\n2 1 2\\n') == 'Yes'\nassert solution('5 6 1\\n2 7 2\\n') == 'No'\nassert solution('3 3 3\\n2 2 2\\n') == 'Yes'\nassert solution('5 5 5\\n2 2 2\\n') == 'Yes'\nassert solution('5 5 5\\n2 2 2\\n') == 'Yes'\n"
    },
    {
        "number": 182,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"1 0 0\") == \"Yes\"\nassert solution(\"4 4 0\") == \"Yes\"\nassert solution(\"5 6 1\") == \"No\"\nassert solution(\"3 3 3\") == \"Yes\"\nassert solution(\"2 2 2\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 182,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 182,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('5 6 1') == 'Yes'\nassert solution('5 6 1') == 'Yes'\nassert solution('3 3 3') == 'Yes'\nassert solution('1 1 1') == 'Yes'\nassert solution('1 1 2') == 'No'\n"
    },
    {
        "number": 183,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 183,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdin\n\"\"\"\n\nfrom math import log10\nfrom functools import reduce\nimport sys"
    },
    {
        "number": 183,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1 2 1000') == '4'\nassert solution('2 2 1000') == '45'\nassert solution('5 3 1103') == '590'\nassert solution('10 3 1003') == '606'\nassert solution('1 2 3') == '0'\n"
    },
    {
        "number": 183,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"1 2 1000\") == \"4\"\nassert solution(\"2 2 1000\") == \"45\"\nassert solution(\"5 3 1103\") == \"590\"\nprint(\"Tests passed successfully.\")\n"
    },
    {
        "number": 183,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1 2 1000') == '4'\nassert solution('2 2 1000') == '45'\nassert solution('5 3 1103') == '590'\n\n\"\"\"\n\nfrom math import log10"
    },
    {
        "number": 183,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1 2 1000') == '4'\nassert solution('2 2 1000') == '45'\nassert solution('5 3 1103') == '590'\n\n\n-----\n\"\"\"\n"
    },
    {
        "number": 183,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(input) == output\n"
    },
    {
        "number": 183,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1 2 1000') == '4'\nassert solution('2 2 1000') == '45'\nassert solution('5 3 1103') == '590'\nassert solution('5 3 1') == '4'\nassert solution('5 3 1') == '4'\n"
    },
    {
        "number": 183,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1 2 1000') == '4'\nassert solution('2 2 1000') == '45'\nassert solution('5 3 1103') == '590'\nassert solution('5 3 109') == '5'\nassert solution('5 3 1111') == '5'\n"
    },
    {
        "number": 183,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"1 2 1000\") == \"4\"\nassert solution(\"2 2 1000\") == \"45\"\nassert solution(\"5 3 1103\") == \"590\"\n\"\"\""
    },
    {
        "number": 184,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1 4 2') == '6'\nassert solution('5 5 5') == '14'\nassert solution('0 2 0') == '0'"
    },
    {
        "number": 184,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('2 3 1') == '0'\nassert solution('1 1 1') == '0'\nassert solution('1 1 1') == '0'\nassert solution('1 1 1') == '0'\nassert solution('1 1 1') == '0'\n"
    },
    {
        "number": 184,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1 1 1') == ''\nassert solution('1 1 3') == '0'\nassert solution('3 2 1') == '1'\nassert solution('3 3 3') == '2'\n"
    },
    {
        "number": 184,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1 4 2') == '6'\nassert solution('5 5 5') == '14'\nassert solution('0 2 0') == '0'\nassert solution('3 3 4') == '8'\nassert solution('0 1 3') == '4'\n"
    },
    {
        "number": 184,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''4 5 2''') == '6'\nassert solution('''5 5 5''') == '14'\nassert solution('''0 2 0''') == '0'\n'''\n"
    },
    {
        "number": 184,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1 4 2') == '6'\nassert solution('5 5 5') == '14'\nassert solution('0 2 0') == '0'\n\n\n\n\n\n\"\"\"\n"
    },
    {
        "number": 184,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('1 4 2') == '6'\nassert solution('5 5 5') == '14'\nassert solution('0 2 0') == '0'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 184,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1 4 2') == '6'\nassert solution('5 5 5') == '14'\nassert solution('0 2 0') == '0'\n"
    },
    {
        "number": 184,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"1 4 2\") == \"6\"\nassert solution(\"5 5 5\") == \"14\"\nassert solution(\"0 2 0\") == \"0\"\n"
    },
    {
        "number": 184,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 185,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 185,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('2 2') == '6'\nassert solution('4 2') == '13'\nassert solution('5 1') == '15'\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 185,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('2 2') == '6'\nassert solution('4 2') == '13'\nassert solution('5 1') == '15'"
    },
    {
        "number": 185,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == ''\nassert solution('') == ''\nassert solution('1 1') == ''\nassert solution('1 1 1') == ''\nassert solution('2 1') == ''\n"
    },
    {
        "number": 185,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('2 1') == '6'\nassert solution('4 2') == '13'\nassert solution('5 1') == '15'\nassert solution('10 5') == '12'\nassert solution('7 4') == '15'\n"
    },
    {
        "number": 185,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1 2') == '4'\nassert solution('1 4') == '5'\nassert solution('1 4') == '5'\nassert solution('1 4') == '5'\n"
    },
    {
        "number": 185,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''2 2''') == '6'\nassert solution('''4 2''') == '13'\nassert solution('''5 1''') == '15'\nassert solution('''10 10''') == '60'\nassert solution('''15 9''') == '65'\n"
    },
    {
        "number": 185,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"2 2\") == \"6\"\nassert solution(\"4 2\") == \"13\"\nassert solution(\"5 1\") == \"15\"\nassert solution(\"5 5\") == \"15\"\nassert solution(\"1 3\") == \"6\"\n"
    },
    {
        "number": 185,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('2 2') == '6'\nassert solution('4 2') == '13'\nassert solution('5 1') == '15'\n"
    },
    {
        "number": 185,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"2 1\") == \"6\"\nassert solution(\"4 2\") == \"13\"\nassert solution(\"5 1\") == \"15\"\n\"\"\"\nfrom sys import stdin"
    },
    {
        "number": 186,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"3 2\") == \"8\"\nassert solution(\"1 3\") == \"9\"\nassert solution(\"5 0\") == \"10\"\nassert solution(\"5 2\") == \"10\"\nassert solution(\"2 2\") == \"4\"\n"
    },
    {
        "number": 186,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 186,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1 3') == '9'\nassert solution('3 2') == '8'\nassert solution('5 0') == '10'\n"
    },
    {
        "number": 186,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"1 3\") == \"9\"\nassert solution(\"3 2\") == \"8\"\nassert solution(\"5 0\") == \"10\"\nassert solution(\"5 1\") == \"5\"\nassert solution(\"2 0\") == \"2\"\n"
    },
    {
        "number": 186,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 186,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 186,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('1 3') == '9'\nassert solution('3 2') == '8'\nassert solution('5 0') == '10'\nassert solution('3 3') == '7'\n"
    },
    {
        "number": 186,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 186,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''0 0''') == '10'\nassert solution('''1 0''') == '10'\nassert solution('''10 1''') == '10'\nassert solution('''100 1''') == '10'\nassert solution('''1 0''') == '10'\n"
    },
    {
        "number": 186,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"2 3\") == \"9\"\nassert solution(\"5 0\") == \"10\"\nassert solution(\"3 2\") == \"8\"\nassert solution(\"5 2\") == \"8\""
    },
    {
        "number": 187,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('4') == 'NO'\nassert solution('2\\n6') == 'NO'\nassert solution('5\\n5') == 'NO'\nassert solution('6\\n1') == 'NO'\n"
    },
    {
        "number": 187,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('1\\n1') == 'NO'\nassert solution('2\\n2') == 'NO'\nassert solution('2\\n1') == 'YES'\nassert solution('3\\n2') == 'NO'\nassert solution('3\\n1') == 'NO'\n"
    },
    {
        "number": 187,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(input()) == 'NO'\nassert solution(input()) == 'NO'\nassert solution(input()) == 'NO'\nassert solution(input()) == 'NO'\nassert solution(input()) == 'YES'\n"
    },
    {
        "number": 187,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('8\\n1 2 3 4 5 6 7 8\\n8 7 6 5 4 3 2 1') == 'NO'\nassert solution('8\\n1 2 3 4 5 6 7 8\\n8 7 6 5 4 3 2 1\\n8 6 5 4 3 2 1\\n8 7 6 5 4 3 2 1\\n8 7 6 5 4 3 2 1') == 'NO'\nassert solution('8\\n1 2 3 4 5 6 7 8\\n1 2 3 4 5 6 7 8\\n1 2 3 4 5 6 7 8\\n1 2 3 4 5 6 7 8') == 'NO'\nassert solution('8\\n1 2 3 4 5 6 7 8\\n1 2 3 4 5 6 7 8\\n1 2 3 4 5 6 7 8\\n1 2 3 4 5 6 7 8\\n1 2 3 4 5 6 7 8') == 'NO'\nassert solution('8\\n1 2 3 4 5 6 7 8\\n1 2 3 4 5 6 7 8\\n1 2 3 4 5 6 7 8\\n1 2 3 4 5 6 7 8\\n1 2 3 4 5 6 7 8\\n1 2 3 4 5 6 7 8') == 'NO'\n"
    },
    {
        "number": 187,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"4\\n11\\n27\\n27\\n11\\n\") == \"NO\"\nassert solution(\"2\\n6\\n6\\n\") == \"NO\"\nassert solution(\"6\\n1\\n1\\n2\\n2\\n3\\n3\\n\") == \"NO\"\nassert solution(\"6\\n10\\n20\\n30\\n20\\n10\\n20\\n\") == \"NO\"\nassert solution(\"6\\n1\\n1\\n2\\n2\\n3\\n3\\n\") == \"YES\\n1\\n1\"\n"
    },
    {
        "number": 187,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''4\n11\n27\n27\n11''') == 'YES\\n11 27'\nassert solution('''2\n6\n6''') == 'NO'\nassert solution('''6\n1\n1\n2\n2\n3\n3\n''') == 'NO'\nassert solution('''6\n10\n20\n30\n20\n10\n20\n''') == 'NO'\nassert solution('''6\n1\n1\n2\n2\n3\n3\n''') == 'NO'\n"
    },
    {
        "number": 187,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('3\\n1\\n2\\n') == 'NO'\nassert solution('4\\n1\\n2\\n3\\n4\\n5\\n') == 'NO'\nassert solution('2\\n6\\n6\\n') == 'NO'\nassert solution('6\\n10\\n20\\n30\\n20\\n10\\n20\\n') == 'NO'\nassert solution('6\\n1\\n1\\n2\\n2\\n3\\n3\\n') == 'NO'\n"
    },
    {
        "number": 187,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == \"YES\"\n\n\"\"\"\n\nfrom sys import stdin, stdout\nimport re\n\nregex = re.compile(r'\\d+')"
    },
    {
        "number": 187,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('6\\n1\\n1\\n2\\n2\\n3\\n3\\n') == 'NO'\nassert solution('6\\n1\\n1\\n2\\n2\\n3\\n3\\n') == 'NO'\nassert solution('6\\n1\\n1\\n1\\n1\\n1\\n1\\n') == 'NO'\nassert solution('6\\n1\\n1\\n1\\n1\\n1\\n1\\n') == 'NO'\nassert solution('6\\n1\\n1\\n1\\n1\\n1\\n1\\n') == 'NO'\n"
    },
    {
        "number": 187,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"3\\n6\\n10\\n15\\n20\") == \"YES\"\nassert solution(\"3\\n6\\n10\\n15\\n20\") == \"YES\"\nassert solution(\"3\\n6\\n10\\n15\\n20\") == \"NO\"\nassert solution(\"3\\n6\\n10\\n15\\n20\") == \"NO\"\nassert solution(\"3\\n6\\n10\\n15\\n20\") == \"NO\"\n"
    },
    {
        "number": 188,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''2 2\n5 8\n''') == 'YES'\nassert solution('''1 2\n7 1\n''') == 'NO'\nassert solution('''1 4\n2 2 1 2\n''') == 'YES'\nassert solution('''2 4\n4 4 4 4\n''') == 'NO'\nassert solution('''5 3\n2 7 1 1\n''') == 'YES'\n"
    },
    {
        "number": 188,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('2 2\\n5 8\\n') == 'YES'\nassert solution('1 2\\n7 1\\n') == 'NO'\nassert solution('1 4\\n2 2 1 2\\n') == 'YES'\nassert solution('1 4\\n2 2 1 2\\n') == 'NO'\nassert solution('1 4\\n2 2 1 2\\n') == 'NO'\n"
    },
    {
        "number": 188,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"1 2\\n7 1\") == \"NO\"\nassert solution(\"1 4\\n2 2 1 2\") == \"YES\"\nassert solution(\"1 2\\n4 4\") == \"YES\"\n"
    },
    {
        "number": 188,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"3 3\") == \"YES\"\nassert solution(\"3 4\") == \"NO\"\nassert solution(\"1 2\") == \"YES\"\nassert solution(\"1 4\") == \"YES\"\nassert solution(\"2 2\") == \"YES\"\n"
    },
    {
        "number": 188,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('5 2\\n5 8\\n') == 'YES'\nassert solution('1 2\\n7 1\\n') == 'NO'\nassert solution('1 4\\n2 2 1 2\\n') == 'YES'\nassert solution('1 4\\n3 2 1 2\\n') == 'NO'\nassert solution('1 4\\n2 2 1 2\\n') == 'NO'\n"
    },
    {
        "number": 188,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('2 2\\n5 8\\n') == 'YES'\nassert solution('1 2\\n7 1\\n') == 'NO'\nassert solution('1 4\\n2 2 1 2\\n') == 'YES'\nassert solution('1 4\\n2 2 1 2\\n') == 'NO'\nassert solution('1 4\\n2 2 1 2\\n') == 'NO'\n"
    },
    {
        "number": 188,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('2 2') == 'YES'\nassert solution('1 2') == 'NO'\nassert solution('1 4') == 'YES'\nassert solution('1 2 1 2') == 'YES'\nassert solution('1 2 1 2 3') == 'NO'\n"
    },
    {
        "number": 188,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''2 2\n5 8''') == 'YES'\nassert solution('''1 2\n7 1''') == 'NO'\nassert solution('''1 4\n2 2 1 2''') == 'YES'\nassert solution('''1 4\n2 2 1 2''') == 'YES'\nassert solution('''1 4\n2 2 1 2''') == 'YES'\n"
    },
    {
        "number": 188,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''2 2\n5 8\n''') == 'YES'\n\nassert solution('''1 2\n7 1\n''') == 'NO'\n\nassert solution('''1 4\n2 2 1 2\n''') == 'YES'\n\nassert solution('''1 4\n4 4\n''') == 'YES'\n\nassert solution('''1 4\n4 4\n''') == 'NO'"
    },
    {
        "number": 188,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"3 3\\n5 8\\n\") == \"YES\"\nassert solution(\"1 2\\n7 1\\n\") == \"NO\"\nassert solution(\"1 4\\n2 2 1 2\\n\") == \"YES\"\nassert solution(\"1 4\\n2 2 1 2\\n\") == \"YES\"\nassert solution(\"1 4\\n2 2 1 2\\n\") == \"YES\"\n"
    },
    {
        "number": 189,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''3\n10 1 4''') == '3 7'\nassert solution('''5\n1 1 2 2 3''') == '2 0'\n'''\n"
    },
    {
        "number": 189,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('3\\n10 1 4\\n') == '3 7'\nassert solution('5\\n1 1 2 2 3\\n') == '2 0'\nassert solution('1\\n1\\n') == '0 0'\nassert solution('1\\n1\\n1\\n1\\n1\\n') == '0 0'\nassert solution('1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\"
    },
    {
        "number": 189,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\n'''\n\nfrom functools import lru_cache\n\n@lru_cache(maxsize=None)\n"
    },
    {
        "number": 189,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 189,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('3\\n10 1 4') == '3 7'\nassert solution('5\\n1 1 2 2 3') == '2 0'\nassert solution('10\\n1 1 2 2 3') == '2 0'\nassert solution('5\\n1 1 2 2 3') == '2 0'\nassert solution('5\\n1 1 2 2 3') == '2 0'\n"
    },
    {
        "number": 189,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"3\\n10 1 4\") == \"3 7\"\nassert solution(\"5\\n1 1 2 2 3\") == \"2 0\"\nassert solution(\"10\\n1 1 2 2 3 4 5 6 7 8 9 10\") == \"7 1\"\n"
    },
    {
        "number": 189,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''3\n10 1 4''') == '3 7'\nassert solution('''5\n1 1 2 2 3''') == '2 0'\nassert solution('''7\n6 6 4 2 8 7''') == '2 0'\nassert solution('''5\n1 1 2 2 3''') == '2 0'\nassert solution('''10\n1 1 2 2 3 4 5 6 7 8 9 10''') == '5 0'\n"
    },
    {
        "number": 189,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1\\n1\\n1\\n1\\n1\\n') == '3 7'\nassert solution('1\\n1\\n2\\n2\\n3\\n') == '2 0'\nassert solution('1\\n1\\n2\\n2\\n3\\n') == '2 0'\nassert solution('1\\n1\\n2\\n2\\n3\\n') == '2 0'\nassert solution('1\\n1\\n2\\n2\\n3\\n') == '2 0'\n"
    },
    {
        "number": 189,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''3\n10 1 4''') == '3 7'\nassert solution('''5\n1 1 2 2 3''') == '2 0'\nassert solution('''10\n1 1 2 2 3 4 5 6 7 8 9 10''') == '0 0'\nassert solution('''3\n1 1 2''') == '0 2'\nassert solution('''4\n1 2 3 4''') == '1 1'\n"
    },
    {
        "number": 189,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('4\\n1 2 3 4\\n') == '2 0'\nassert solution('5\\n1 2 2 2 3\\n') == '2 0'\nassert solution('2\\n1 1\\n') == '1 0'\nassert solution('3\\n1 1 1\\n') == '0 0'\nassert solution('4\\n1 1 2 3\\n') == '2 0'\n"
    },
    {
        "number": 190,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''\n4 4\n....\n..*.\n...*\n..**\n''') == '3'\nassert solution('''\n2 1\n.\n*\n''') == '1'\nassert solution('''\n1 3\n*.*\n''') == '3'\nassert solution('''\n1 3\n*.*\n''') == '3'\nassert solution('''\n3 2\n....\n...*\n.**\n''') == '1'\n"
    },
    {
        "number": 190,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('2 1') == 1\nassert solution('2 4') == 3\nassert solution('3 4') == 3\nassert solution('2 1') == 1\nassert solution('3 1') == 1\n"
    },
    {
        "number": 190,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\n'''\n4 4\n....\n..*.\n...*\n..**\n''') == '3'\nassert solution(\n'''\n1 3\n*.*\n''') == '3'\nassert solution(\n'''\n2 1\n.\n*\n''') == '1'\n\n\n\"\"\"\n"
    },
    {
        "number": 190,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('4 4\\n....\\n..*.\\n...*\\n..**\\n') == '3'\nassert solution('1 3\\n*.*\\n') == '3'\nassert solution('2 1\\n.\\n*\\n') == '1'\n\n\n\n\n\"\"\"\nimport sys\nfrom math import ceil\n\nn, m = map(int, sys.stdin.readline().split())\ndata = [list(sys.stdin.readline().strip()) for _ in range(n)]"
    },
    {
        "number": 190,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n.***.\n*.*.*\n.***.\n*.*.*\n\"\"\") == 3\nassert solution(\"\"\"\n....\n.*..\n.*.*\n.*.*\n\"\"\") == 1\nassert solution(\"\"\"\n..**.\n.*.*\n.*.*\n*.*.*\n\"\"\") == 3\nassert solution(\"\"\"\n***.\n.*.*\n.*.*\n.*.*\n\"\"\") == 3\nassert solution(\"\"\"\n*.*.*\n.*.*.\n*.*.*\n.*.*.\n\"\"\") == 1\n"
    },
    {
        "number": 190,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('3 3\\n...\\n.**\\n.*.*') == 3\nassert solution('3 3\\n...\\n.**\\n.**') == 1\nassert solution('3 3\\n**.\\n***\\n****\\n') == 1\nassert solution('2 2\\n.\\n*') == 2\nassert solution('3 3\\n*.*\\n.***\\n****') == 1\n"
    },
    {
        "number": 190,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''\n.**\n*.*\n''') == '3'\nassert solution('''\n*.*\n''') == '1'\nassert solution('''\n*.*\n.**\n''') == '2'\nassert solution('''\n....\n.*.*\n..**\n''') == '3'\nassert solution('''\n...*\n.*.*\n.*.*\n''') == '3'\n"
    },
    {
        "number": 190,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('....\\n..*.\\n...*') == 3\nassert solution('...\\n.*.\\n.*') == 1\nassert solution('..*.\\n.*.*') == 1\nassert solution('*.*.*') == 1\nassert solution('....\\n.**.\\n.*.*') == 1\n"
    },
    {
        "number": 190,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == 3\n\n\"\"\""
    },
    {
        "number": 190,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('..*') == '1'\nassert solution('..**') == '1'\nassert solution('*.*') == '2'\nassert solution('..**') == '3'\n"
    },
    {
        "number": 191,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''3 2\n0 1 0\n''') == '3'\nassert solution('''5 1\n1 1 1 0 0\n''') == '0'\nassert solution('''6 4\n1 0 0 1 1 0\n''') == '968493834'\nassert solution('''12 4\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n''') == '468493834'\n'''\n"
    },
    {
        "number": 191,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''5 1''') == '0'\nassert solution('''6 4''') == '968493834'\nassert solution('''3 2''') == '333333336'\nassert solution('''5 2''') == '0'\nassert solution('''100 4''') == '18089291675633406530832839167224289319227849591749949695780654345002314149329963164824696161180459167848035481487290313470460709420273743439792079330474553050643915404585194083169613930992507240850116498830680044068483560962569654975796698760028791694646022915046024292755426983743755697380721060391438803401955891088591654925290299987078191059338513993311643548364745069793001306319093043758509285480492359802016976238074690567044366904698566172902335250563797407376912897059800476608955996968887766915036004531317939447509634457856506958357625391230293493243411988290532145181484681435409609820861512663004955643723162905987612244769690516593103316343806909757024089363472729662142058399549056346483755220840352654113377348661348509935864993214296631386117272301109209839041415060585510040675575245592952252107467145989375762347285700900246945773859388087421436157645151820231669970929057415689486097375426994301454060943518222811134139616966264925607832129593301594591054980520295825171585719354736761725903854109025133588953348079299613993550591458064070831540382045148427351661186296079573805967251707503750011627343751862502929742756348421464130069791666432306063609913103045216573218333053394626704425307775797944188024721617604913883783060664062956718245241952234235855572450261249336656261701280942945001706329735883880034366394908649591337261463313233925491925482049470148266628184638937060179429729322388813369631047172802200829091334924821019808687070805591503791524585065753780441421105144985995494413202548173554977377306069552818266647415952868880004812894522336853866131408207895281148252416091163362404298832319372933136629506038346713896655571595721646396903714585963055207218697560842834860785415550816175941054453627642996775873928463746399427897629395195790707368053381048640076134640636479097559803579967644532049043986210433468837864086340785475192301366526169726882353029356169601356454433773260166513981379288021389294736154541302838683094794579798878806047300179880743977301326372496639393500972003909403910361488332900940395414762560444075882810374089057057280286917745231853708329431605970107662806349077489655600905553375147704537763691419286991379284048652616105220834080658215936106988371330502807150266505983233466918095469051736375847497767214651034114735590718109067369034357393857464400963215466234157344890810456500886524960038802768691134805204645851484397512471030259375941855784169927072695813101766643914965102541429304802624212648634515230143647593184807884470665566905845886370644936106909217774924850009043582065068884409792195977806575825682515588611595835768451751880970805824793196621673270920462005948004050390501837540572890312528653120699691754757048372317099490963614262534003716476290896403725979476270834010973835376674026505963803324975719071626305896498400994078282808017032739018848092828857166668002838"
    },
    {
        "number": 191,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(input(\"\")) == \"0\"\nprint(solution(input(\"\")))\nassert solution(input(\"\")) == \"333333336\"\nprint(solution(input(\"\")))\nassert solution(input(\"\")) == \"968493834\"\nprint(solution(input(\"\")))\nassert solution(input(\"\")) == \"968493834\"\nprint(solution(input(\"\")))"
    },
    {
        "number": 191,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == '0'\n\"\"\"\n"
    },
    {
        "number": 191,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"4 3\") == \"0\"\nassert solution(\"4 3\") == \"0\"\nassert solution(\"4 3\") == \"0\"\nassert solution(\"4 3\") == \"0\"\nassert solution(\"4 3\") == \"0\"\n"
    },
    {
        "number": 191,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('6 4\\n1 0 0 1 1 0') == '0'\nassert solution('3 2\\n0 1 0\\n') == '333333336'\nassert solution('5 1\\n1 1 1 0 0\\n') == '0'\n\"\"\""
    },
    {
        "number": 191,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('4 2') == '333333336'\nassert solution('5 1') == '0'\nassert solution('6 4') == '968493834'\nassert solution('6 4') == '968493834'\nassert solution('5 1') == '0'\n"
    },
    {
        "number": 191,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('3 2\\n0 1 0\\n') == '333333336'\nassert solution('5 1\\n1 1 1 0 0\\n') == '0'\nassert solution('6 4\\n1 0 0 1 1 0\\n') == '968493834'\nassert solution('6 3\\n1 0 0 0 1 1\\n') == '3'\nassert solution('6 3\\n1 1 0 0 0 1\\n') == '0'\n"
    },
    {
        "number": 191,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"3 2\\n0 1 0\\n\") == \"0\"\nassert solution(\"5 1\\n1 1 1 0 0\\n\") == \"0\"\nassert solution(\"6 4\\n1 0 0 1 1 0\\n\") == \"0\"\n"
    },
    {
        "number": 191,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdin.split('\\n')[1]\n\n\"\"\"\n"
    },
    {
        "number": 192,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdin\n\"\"\"\n"
    },
    {
        "number": 192,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n\"\"\""
    },
    {
        "number": 192,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('6 3') == '4'\nassert solution('8 5') == '3'\nassert solution('22 4') == '6'\nassert solution('3749 02') == '6'\n\n\n\"\"\"\n\nfrom math import ceil"
    },
    {
        "number": 192,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('4 3') == '4'\nassert solution('8 5') == '3'\nassert solution('22 4') == '6'\nassert solution('22 22') == '6'\nassert solution('22 22 22') == '4'\n"
    },
    {
        "number": 192,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('8 5') == '3'\nassert solution('22 4') == '6'\nassert solution('6 3') == '4'\nassert solution('8 5') == '3'\nassert solution('22 4') == '6'\n"
    },
    {
        "number": 192,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 192,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('6 3') == '4'\nassert solution('8 5') == '3'\nassert solution('22 4') == '6'\nassert solution('0 0') == '0'\nassert solution('1 1') == '1'\n"
    },
    {
        "number": 192,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('6 3') == '4'\nassert solution('8 5') == '3'\nassert solution('22 4') == '6'\nassert solution('11 1') == '3'\nassert solution('2 4') == '2'\n"
    },
    {
        "number": 192,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('6 3') == '4'\nassert solution('8 5') == '3'\nassert solution('22 4') == '6'\n\"\"\"\n\nfrom math import ceil,sqrt"
    },
    {
        "number": 192,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == expected\n"
    },
    {
        "number": 193,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"2 4\\n1 2\\n3 4\\n0 0\") == \"0.2000000000\"\nassert solution(\"1 0\\n0 1\\n0 1\\n1 0\") == \"0.5000000000\"\n\n\n\"\"\"\n\nimport sys\nfrom functools import reduce"
    },
    {
        "number": 193,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('0 2') == '0.2000000000'\nassert solution('1 2') == '0.5000000000'\nassert solution('1 0') == '0.5000000000'\nassert solution('1 1') == '0.5000000000'\nassert solution('2 2') == '0.5000000000'\n"
    },
    {
        "number": 193,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1 2\\n3 4') == '0.2000000000'\nassert solution('1 0\\n0 1') == '0.5000000000'\nassert solution('1 0\\n1 1') == '0.3333333333'\nassert solution('0.5 0.5\\n0.5 0.5') == '0.0625'\nassert solution('0.5 0.5\\n0.5 0.5') == '0.0625'\n"
    },
    {
        "number": 193,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1 2\\n3 4\\n') == '0.2000000000'\nassert solution('1 0\\n0 1\\n') == '0.5000000000'\nassert solution('1 0\\n1 1\\n') == '1.9999999999'\nassert solution('1 0\\n0 0\\n') == '0.0000000000'\nassert solution('0 0\\n0 0\\n') == '0.0000000000'\n"
    },
    {
        "number": 193,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''1 2\n3 4''') == '0.2000000000'\nassert solution('''1 0\n0 1''') == '0.5000000000'\n'''\nassert solution('''1 1\n1 1''') == '0'\nassert solution('''1 1\n1 1''') == '0'\nassert solution('''1 1\n0 1''') == '0'\n"
    },
    {
        "number": 193,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1 2') == '0.2000000000'\nassert solution('1 0') == '0.5000000000'\nassert solution('1 2 3') == '0.0'\nassert solution('2 2') == '0.0'\nassert solution('2 1 1') == '0.0'\n"
    },
    {
        "number": 193,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\n    \"\"\"1 2\n3 4\"\"\"\n) == \"0.2000000000\"\n\nassert solution(\n    \"\"\"1 0\n0 1\"\"\"\n) == \"0.5000000000\"\n\nassert solution(\n    \"\"\"5 10\n1 2\n5 4\"\"\"\n) == \"1.84883774\"\n\nassert solution(\n    \"\"\"1 10\n2 3\n6 7\"\"\"\n) == \"7.715509576\"\n\nassert solution(\n    \"\"\"5 10\n1 2\n1 1\"\"\"\n) == \"0\""
    },
    {
        "number": 193,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"1 2\\n3 4\\n\") == \"0.2000000000\"\nassert solution(\"1 0\\n0 1\\n\") == \"0.5000000000\"\nassert solution(\"1 1\\n0 1\\n\") == \"0.0\"\nassert solution(\"1 0\\n1 1\\n\") == \"1.0\""
    },
    {
        "number": 193,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"1 2\\n3 4\\n\") == 0.2000000000\nassert solution(\"1 0\\n0 1\\n\") == 0.5000000000\nassert solution(\"1 0\\n0 1\\n\") == 0.5000000000\nassert solution(\"1 0\\n0 1\\n\") == 0.5000000000\nassert solution(\"1 0\\n0 1\\n\") == 0.5000000000\n"
    },
    {
        "number": 193,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1 2\\n3 4\\n') == '0.2000000000'\nassert solution('1 0\\n0 1\\n') == '0.5000000000'\nassert solution('1 0\\n0 1\\n') == '0.5000000000'\nassert solution('1 2\\n3 4\\n') == '0.2000000000'\nassert solution('1 0\\n0 1\\n') == '0.5000000000'\n"
    },
    {
        "number": 194,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''4 1 2''') == '0'\nassert solution('''4 1 1''') == '2'\nassert solution('''1 2 1 1''') == '2'\nassert solution('''4 1 1''') == '2'\nassert solution('''1 1 2 1''') == '2'\n"
    },
    {
        "number": 194,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''4 1 2''') == '0'\nassert solution('''4 1 1''') == '2'\nassert solution('''2 1 2''') == '0'\nassert solution('''1 1 2''') == '2'\nassert solution('''4 1 2''') == '2'\n"
    },
    {
        "number": 194,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('2 4 2') == '0'\nassert solution('4 1 1') == '2'\n"
    },
    {
        "number": 194,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('4 1 2\\n1 2 1 1\\n') == '0'\nassert solution('4 1 1\\n1 1 2 1\\n') == '2'\nassert solution('4 1 2\\n1 2 2 1\\n') == '0'\nassert solution('4 1 1\\n1 1 2 1\\n') == '2'\nassert solution('4 1 2\\n1 2 1 1\\n') == '0'\n\n\n'''"
    },
    {
        "number": 194,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n4 1 2\n1 2 1 1\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n4 1 1\n1 1 2 1\n\"\"\") == \"2\"\n"
    },
    {
        "number": 194,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('4 1 2\\n1 2 1 1') == '0'\nassert solution('4 1 1\\n1 1 2 1') == '2'\n\n\n\n\"\"\"\n\nn, a, b = [int(x) for x in stdin.readline().split()]\nt = [int(x) for x in stdin.readline().split()]\n\nx = 0\n\nfor i in t:\n    if i == 1:\n        x += 1\n    elif i == 2:\n        x -= 1\n    else:\n        x += 1\n\nprint(x)\n"
    },
    {
        "number": 194,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"4 1 2\\n1 2 1 1\") == \"0\"\nassert solution(\"4 1 1\\n1 1 2 1\") == \"2\"\nassert solution(\"4 1 1\\n1 1 1 1\") == \"2\"\nassert solution(\"5 1 1\\n1 1 1 1 1 1 1\") == \"0\""
    },
    {
        "number": 194,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1 1 1') == '0'\nassert solution('1 1 2 1') == '2'\nassert solution('4 1 2') == '0'\nassert solution('4 1 1') == '2'\nassert solution('4 1 1 2 1') == '2'\n"
    },
    {
        "number": 194,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('4 1 2\\n1 2 1 1') == '0'\nassert solution('4 1 1\\n1 1 2 1') == '2'\nassert solution('4 3 4\\n1 1 1 1\\n2 1 2 2\\n2 1 1 1\\n1 1 1 1\\n1 1 1 1') == '3'\nassert solution('4 3 4\\n1 1 1 1\\n1 1 1 1\\n2 1 2 2\\n2 1 1 1\\n1 1 1 1\\n1 1 1 1') == '3'\nassert solution('3 2 1\\n1 2 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1') == '1'\n"
    },
    {
        "number": 194,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''4 1 2''') == '0'\nassert solution('''4 1 1''') == '2'"
    },
    {
        "number": 195,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('10 10 5 20') == '5'\nassert solution('2 2 0 4') == '-1'\nassert solution('2 2 2 1') == '-1'\nassert solution('10 10 10 10') == '10'\nassert solution('5 5 5 5') == '0'\n"
    },
    {
        "number": 195,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == expected\n\n\"\"\"\n"
    },
    {
        "number": 195,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('10 10 5 20') == '5'\nassert solution('2 2 0 4') == '-1'\nassert solution('2 2 2 1') == '-1'\nassert solution('2 2 0 1') == '-1'\n\n\"\"\""
    },
    {
        "number": 195,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\n'''\n"
    },
    {
        "number": 195,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1 1 1 1') == '5'\nassert solution('1 1 1 2') == '-1'\nassert solution('2 2 2 1') == '-1'\nassert solution('2 2 1 2') == '4'\nassert solution('2 2 1 3') == '1'\n"
    },
    {
        "number": 195,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('2 2 0 4\\n') == '5'\nassert solution('2 2 2 1\\n') == '-1'\nassert solution('2 0 0 4\\n') == '-1'\nassert solution('10 10 5 20\\n') == '5'\nassert solution('2 2 0 4\\n') == '5'\n"
    },
    {
        "number": 195,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"10 10 5 20\"\"\") == \"5\"\nassert solution(\n\"\"\"2 2 0 4\"\"\") == \"-1\"\nassert solution(\n\"\"\"2 2 2 1\"\"\") == \"-1\"\n\n\"\"\"\n\"\"\""
    },
    {
        "number": 195,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('10 10 5 20') == '5'\nassert solution('2 2 0 4') == '-1'\nassert solution('2 2 2 1') == '-1'\nassert solution('1 2 2 3 4') == '-1'\nassert solution('1 1 1 1') == '-1'\n"
    },
    {
        "number": 195,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"10 10 5 20\n\"\"\") == \"\"\"5\"\"\"\nassert solution(\n\"\"\"2 2 0 4\n\"\"\") == \"\"\"-1\"\"\"\nassert solution(\n\"\"\"2 2 2 1\n\"\"\") == \"\"\"-1\"\"\"\n"
    },
    {
        "number": 195,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('10 10 5 20\\n') == '5\\n'\nassert solution('2 2 0 4\\n') == '-1\\n'\nassert solution('2 2 2 1\\n') == '-1\\n'\nassert solution('10 2 2 2 1\\n') == '-1\\n'\nassert solution('10 10 5 20\\n') == '5\\n'\n\n\"\"\""
    },
    {
        "number": 196,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"2 0\") == \"4\"\nassert solution(\"2 1\") == \"7\"\nassert solution(\"3 2\") == \"21\"\nassert solution(\"4 3\") == \"28\"\nassert solution(\"6 5\") == \"42\"\n"
    },
    {
        "number": 196,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"2 0\") == \"4\"\nassert solution(\"2 1\") == \"7\"\nassert solution(\"3 2\") == \"21\"\nassert solution(\"2 1\") == \"7\"\nassert solution(\"2 2\") == \"7\"\n"
    },
    {
        "number": 196,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('') == 0\nassert solution('1') == 0\nassert solution('2 1') == 1\nassert solution('2 2') == 0\nassert solution('3 2') == 1\n"
    },
    {
        "number": 196,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"2 0\") == \"\"\nassert solution(\"2 1\") == \"7\"\nassert solution(\"3 2\") == \"21\"\nassert solution(\"3 4\") == \"30\"\n"
    },
    {
        "number": 196,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('2 0') == '4'\nassert solution('2 1') == '7'\nassert solution('3 2') == '21'\nassert solution('3 3') == '7'\nassert solution('4 3') == '10'\n"
    },
    {
        "number": 196,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('2 0') == '4'\nassert solution('2 1') == '7'\nassert solution('3 2') == '21'\nassert solution('2 5') == '9'\nassert solution('6 5') == '15'\n"
    },
    {
        "number": 196,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"2 0\") == \"4\"\nassert solution(\"2 1\") == \"7\"\nassert solution(\"3 2\") == \"21\"\nassert solution(\"3 2\") == \"21\"\nassert solution(\"3 2\") == \"21\"\n"
    },
    {
        "number": 196,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"0 2\") == \"7\"\nassert solution(\"1 1\") == \"4\"\nassert solution(\"2 2\") == \"12\"\nassert solution(\"4 3\") == \"16\"\nassert solution(\"2 0\") == \"4\"\n"
    },
    {
        "number": 196,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('2 0') == '4'\nassert solution('2 1') == '7'\nassert solution('3 2') == '21'\nassert solution('4 1') == '20'\nassert solution('5 1') == '50'\n"
    },
    {
        "number": 196,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('0 2') == '4'\nassert solution('2 0') == '7'\nassert solution('2 1') == '21'\nassert solution('3 2') == '21'\nassert solution('3 2') == '21'\n"
    },
    {
        "number": 197,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''3\n1 2\n1 2\n1 2\n''') == '499122177'\nassert solution('''2\n42 1337\n13 420\n''') == '578894053'\nassert solution('''2\n1 1\n1 1\n''') == '1'\nassert solution('''4\n0 1\n0 1\n0 1\n0 1\n''') == '8'"
    },
    {
        "number": 197,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == '1/2'\n\"\"\"\n"
    },
    {
        "number": 197,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == '1/2'\nassert solution('1 2\\n1 2\\n1 2') == '499122177'\nassert solution('42 1337\\n13 420') == '578894053'\nassert solution('2\\n1 1\\n1 1') == '1'\nassert solution('2\\n1 1\\n1 1') == '1'\n"
    },
    {
        "number": 197,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1\\n0\\n') == 1\nassert solution('3\\n2\\n1\\n1\\n0\\n0\\n1\\n2\\n1\\n1\\n1\\n1\\n0\\n1\\n1\\n1\\n0\\n1\\n0\\n0\\n0\\n1\\n1\\n0\\n1\\n0\\n1\\n0\\n1\\n1\\n1\\n1\\n0\\n0\\n1\\n0\\n1\\n1\\n1\\n0\\n0\\n1\\n0\\n1\\n1\\n0\\n1\\n1\\n1\\n1\\n1\\n0\\n1\\n1\\n1\\n1\\n1\\n0\\n0\\n1\\n1\\n0\\n1\\n1\\n1\\n1\\n1\\n0\\n0\\n1\\n1\\n0\\n1\\n1\\n1\\n0\\n0\\n1\\n1\\n1\\n1\\n0\\n1\\n0\\n1\\n1\\n1\\n1\\n1\\n0\\n1\\n1\\n1\\n1\\n0\\n0\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n0\\n0\\n1\\n1\\n1\\n1\\n1\\n1\\n0\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n0\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n0\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n0\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n0\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n0\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n0\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n0\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n0\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n0\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n0\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n0\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\"
    },
    {
        "number": 197,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1 2\\n1 2\\n1 2\\n') == '499122177'\nassert solution('42 1337\\n13 420\\n') == '578894053'\nassert solution('2\\n1 1\\n1 1\\n') == '1'\nassert solution('2\\n1 1\\n1 1\\n') == '1'\n'''\n"
    },
    {
        "number": 197,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\n'''3\n1 2\n1 2\n1 2'''\n) == '499122177'\n\nassert solution(\n'''2\n42 1337\n13 420'''\n) == '578894053'\n"
    },
    {
        "number": 197,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('1 2\\n1 2\\n1 2\\n') == '499122177'\n\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 197,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(input(\"\")) == \"499122177\"\n\"\"\"\n"
    },
    {
        "number": 197,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1 2\") == \"499122177\"\nassert solution(\"42 1337\") == \"578894053\"\nassert solution(\"2 1\") == \"1\"\nassert solution(\"1 1\") == \"1\"\n"
    },
    {
        "number": 197,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"\"\"3\n1 2\n1 2\n1 2\"\"\") == \"499122177\"\nassert solution(\"\"\"2\n42 1337\n13 420\"\"\") == \"578894053\"\nassert solution(\"\"\"2\n1 1\n1 1\"\"\") == \"1\""
    },
    {
        "number": 198,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\n\"\"\"6\"\"\") == \"\"\"1\"\"\"\nassert solution(\n\"\"\"20\"\"\"\n) == \"\"\"4\"\"\"\nassert solution(\n\"\"\"3\n5\n1\n10\n1\n15\n1\"\"\"\n) == \"\"\"2\"\"\"\nassert solution(\n\"\"\"4\n5\n1\n10\n1\n15\n1\"\"\"\n) == \"\"\"1\"\"\"\nassert solution(\n\"\"\"1\n1\n1\n1\n1\n1\"\"\"\n) == \"\"\"1\"\"\"\n"
    },
    {
        "number": 198,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''6''') == '1'\nassert solution('''20''') == '4'\nassert solution('''5''') == '1'\nassert solution('''4''') == '1'\nassert solution('''3''') == '2'\n"
    },
    {
        "number": 198,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\n'''6''') == '1'\n\nassert solution('''20''') == '4'\n"
    },
    {
        "number": 198,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"6\") == \"1\"\nassert solution(\"20\") == \"4\"\n"
    },
    {
        "number": 198,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1\\n1\\n2\\n2\\n2\\n3\\n3\\n3\\n4\\n4\\n4\\n5\\n5\\n5\") == \"1\\n4\\n8\\n16\\n32\\n64\\n128\\n256\"\nassert solution(\"4\\n1\\n1\\n2\\n2\\n2\\n3\\n3\\n3\\n4\\n4\\n4\\n5\\n5\\n5\") == \"4\\n16\\n64\\n256\"\nassert solution(\"20\\n\") == \"4\\n16\\n64\\n256\"\nassert solution(\"6\\n\") == \"1\\n1\\n2\\n2\\n2\\n3\\n3\\n3\\n4\\n4\\n4\\n5\\n5\""
    },
    {
        "number": 198,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '2'\n"
    },
    {
        "number": 198,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('1\\n') == '1'\nassert solution('2\\n') == '0'\nassert solution('3\\n') == '0'\nassert solution('4\\n') == '0'\nassert solution('5\\n') == '0'\n"
    },
    {
        "number": 198,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1\\n') == '1'\nassert solution('2\\n') == '0'\nassert solution('20\\n') == '4'\n\n'''\n"
    },
    {
        "number": 198,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('6') == '1'\nassert solution('20') == '4'\nassert solution('2') == '1'\nassert solution('9') == '1'\nassert solution('6') == '1'\n"
    },
    {
        "number": 198,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('6') == '1'\nassert solution('20') == '4'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 199,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\nfrom math import ceil\nn, s = list(map(int, stdin.split()))\nkegs = [int(stdin) for _ in range(n)]\nkegs.sort()\n\nkegs = kegs[::-1]\nkeg_sum = 0\nkeg_sum += s\nkeg_sum += kegs[0]\n\nfor i in range(n):\n    if keg_sum < s:\n        keg_sum += kegs[i]\n        keg_sum -= kegs[i]\n    else:\n        keg_sum -= kegs[i]\n        keg_sum += kegs[i]\n        break"
    },
    {
        "number": 199,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('1\\n2') == '1'\nassert solution('2\\n1') == '2'\nassert solution('1\\n1') == '-1'\nassert solution('3\\n4\\n5') == '3'\nassert solution('4\\n3 4 5') == '3'\n"
    },
    {
        "number": 199,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1\\n0') == '0'\nassert solution('3\\n1 2 3') == '3'\nassert solution('3\\n1 2 3 4') == '-1'\nassert solution('3 7\\n1 2 3 4') == '-1'\nassert solution('4 5\\n1 2 3 4') == '2'\n"
    },
    {
        "number": 199,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('2 3\\n4 3 5') == '2'\nassert solution('3 7\\n1 2 3') == '-1'\nassert solution('4 3\\n1 2 3 4') == '2'\nassert solution('7 4\\n1 2 3 4 5 6 7') == '-1'\nassert solution('3 7\\n1 2 3') == '-1'\n"
    },
    {
        "number": 199,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(input) == \"1\\n\"\n\"\"\"\n"
    },
    {
        "number": 199,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('3 3') == '3'\nassert solution('3 4') == '2'\nassert solution('3 7') == '-1'\nassert solution('4 4') == '2'\nassert solution('4 7') == '-1'\n"
    },
    {
        "number": 199,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('3 3\\n4 3 5\\n') == '3'\nassert solution('3 4\\n5 3 4\\n') == '2'\nassert solution('3 7\\n1 2 3\\n') == '-1'"
    },
    {
        "number": 199,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('3 3\\n4 3 5\\n') == '3'\nassert solution('3 7\\n1 2 3\\n') == '-1'\n"
    },
    {
        "number": 199,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('3 3\\n4 3 5\\n') == '3\\n'\nassert solution('3 7\\n1 2 3\\n') == '-1\\n'\n\n\n\n\"\"\"\n"
    },
    {
        "number": 199,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1\\n3\\n2\\n3\\n4\\n4\\n4\\n5\\n5\\n5') == '3'\nassert solution('1\\n7\\n2\\n3\\n4\\n4\\n4\\n5\\n5\\n5') == '2'\nassert solution('1\\n7\\n2\\n3\\n4\\n4\\n4\\n5\\n5\\n5') == '-1'\nassert solution('1\\n7\\n2\\n3\\n4\\n4\\n4\\n5\\n5\\n5') == '-1'\nassert solution('1\\n7\\n2\\n3\\n4\\n4\\n4\\n5\\n5\\n5') == '-1'\n"
    },
    {
        "number": 200,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 200,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('10 30\\n2 1\\n') == '1\\n'\nassert solution('10 13\\n1 1\\n') == '0\\n'\nassert solution('10 19\\n1 2\\n') == '-1\\n'\nassert solution('1 50\\n5 4\\n') == '1\\n'\nassert solution('1 50\\n2 1\\n') == '0\\n'\n"
    },
    {
        "number": 200,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\n'''10 30'''\n'''2 1'''\n) == '1'\n\nassert solution(\n'''10 13'''\n'''1 1'''\n) == '0'\n\nassert solution(\n'''10 19'''\n'''1 2'''\n) == '-1'\n\nassert solution(\n'''1 50'''\n'''5 4'''\n) == '1'\n\nassert solution(\n'''10 40'''\n'''1 1'''\n) == '0'"
    },
    {
        "number": 200,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('10 30') == '1'\nassert solution('10 13') == '0'\nassert solution('10 19') == '-1'\nassert solution('1 50') == '1'\n\n\n\n\"\"\"\n"
    },
    {
        "number": 200,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"10 30\\n2 1\") == \"1\"\nassert solution(\"10 13\\n1 1\") == \"0\"\nassert solution(\"10 19\\n1 2\") == \"-1\"\nassert solution(\"1 50\\n5 4\") == \"1\"\nassert solution(\"10 50\\n5 4\") == \"0\"\n"
    },
    {
        "number": 200,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 200,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\n'''10 30\n2 1'''\n    ) == '1'\n\nassert solution(\n'''10 13\n1 1'''\n    ) == '0'\n\nassert solution(\n'''10 19\n1 2'''\n    ) == '-1'\n\nassert solution(\n'''1 50\n5 4'''\n    ) == '1'\n"
    },
    {
        "number": 200,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('10 30') == '1'\nassert solution('10 13') == '0'\nassert solution('10 19') == '-1'\nassert solution('1 50') == '1'\nassert solution('100 123') == '100'"
    },
    {
        "number": 200,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('10 30\\n2 1\\n') == '1'\nassert solution('10 13\\n1 1\\n') == '0'\nassert solution('10 19\\n1 2\\n') == '-1'\nassert solution('1 50\\n5 4\\n') == '1'\n\"\"\"\n\nfrom datetime import datetime"
    },
    {
        "number": 200,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 201,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('10 3 5 2 3') == 16\nassert solution('10 30 10 10 10') == 60\nassert solution('1 1 1 1 1') == 0\n"
    },
    {
        "number": 201,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"10 3 5 2 3\") == \"16\"\nassert solution(\"10 3 5 2 3\") == \"16\"\nassert solution(\"10 3 5 2 3\") == \"16\"\nassert solution(\"10 3 5 2 3\") == \"16\"\nassert solution(\"10 3 5 2 3\") == \"16\"\n"
    },
    {
        "number": 201,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('10 3 5 2 3') == 16\nassert solution('20 4 10 3 9') == 36\nassert solution('100 20 1 1 1') == 1\nassert solution('100 1 1 1 1') == 2\nassert solution('1000 1 1 1 1') == 3\n"
    },
    {
        "number": 201,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('10 3 5 2 3') == '16'\n\n'''\n"
    },
    {
        "number": 201,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == 16\n'''\n"
    },
    {
        "number": 201,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''10 3 5 2 3''') == '16'\nassert solution('''10 3 3 5 2 3''') == '24'\nassert solution('''10 3 3 3 5 2 3''') == '36'\nassert solution('''10 3 3 3 3 5 2 3''') == '48'\nassert solution('''10 3 3 3 3 3 5 2 3''') == '60'\n"
    },
    {
        "number": 201,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == '16'\n"
    },
    {
        "number": 201,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('10 3 5 2 3') == '16'\nassert solution('1 3 5 2 3') == '16'\nassert solution('100 3 5 2 3') == '0'\nassert solution('100 3 5 3 3') == '0'\nassert solution('100 3 5 3 4') == '0'\n"
    },
    {
        "number": 201,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"10 3 5 2 3\") == \"16\"\nassert solution(\"2 0 0 0 0\") == \"0\"\nassert solution(\"1 0 0 0 0\") == \"0\"\nassert solution(\"0 0 0 0 0\") == \"0\"\nassert solution(\"1 1 1 1 1\") == \"0\"\n"
    },
    {
        "number": 201,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('5 3 5 2 3') == 16\n'''\n"
    },
    {
        "number": 202,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('0 0') == '5'\nassert solution('4 5') == '5'\nassert solution('3 4') == '3'\n"
    },
    {
        "number": 202,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"\n0 0\n4 5\n\"\"\") == '5'\nassert solution(\n\"\"\"\n3 4\n6 1\n\"\"\") == '3'\n"
    },
    {
        "number": 202,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''0 0''') == '5'\nassert solution('''4 5''') == '5'\nassert solution('''3 4''') == '3'\nassert solution('''6 1''') == '3'"
    },
    {
        "number": 202,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('0 0') == '5'\nassert solution('3 4') == '3'"
    },
    {
        "number": 202,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('0 0\\n4 5') == '5'\nassert solution('3 4\\n6 1') == '3'\nassert solution('-2 4\\n4 -1') == '3'\nassert solution('3 -2\\n4 1') == '3'\nassert solution('3 2\\n5 -1') == '4'\n"
    },
    {
        "number": 202,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('0 0\\n4 5\\n') == '5\\n'\nassert solution('3 4\\n6 1\\n') == '3\\n'\n\"\"\"\n"
    },
    {
        "number": 202,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == ''\n\n\"\"\"\n"
    },
    {
        "number": 202,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('0 0\\n4 5') == '5'\nassert solution('3 4\\n6 1') == '3'\nassert solution('-1 2\\n-2 3') == '2'\nassert solution('0 0\\n0 0') == '0'\n\"\"\"\n"
    },
    {
        "number": 202,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == result\n\"\"\"\n"
    },
    {
        "number": 202,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 203,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('5') == 'D'\nassert solution('DDRRR') == 'D'\nassert solution('DDRRRR') == 'R'\nassert solution('DDDRRRR') == 'R'\nassert solution('DDRRRRDD') == 'D'\n"
    },
    {
        "number": 203,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(input()) == 'D'\n\n\"\"\"\n"
    },
    {
        "number": 203,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == \"D\"\nassert solution(stdin) == \"R\"\nassert solution(stdin) == \"D\"\nassert solution(stdin) == \"D\"\nassert solution(stdin) == \"D\"\n"
    },
    {
        "number": 203,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('5') == 'D'\nassert solution('DDRRR') == 'D'\nassert solution('DDRRRR') == 'R'\nassert solution('DDRRRRR') == 'D'\nassert solution('DDRRRRRR') == 'D'\n"
    },
    {
        "number": 203,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\n\nfrom sys import stdin, stdout\n"
    },
    {
        "number": 203,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('5\\nDRRR') == 'D'\nassert solution('6\\nDRRRR') == 'R'\nassert solution('7\\nDRRDRD') == 'D'\nassert solution('6\\nDRRDRD') == 'D'\nassert solution('7\\nDRRDRDR') == 'D'\n"
    },
    {
        "number": 203,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''4\nDR''') == 'D'\nassert solution('''3\nRDR''') == 'R'\nassert solution('''1\nDR''') == 'D'\nassert solution('''2\nDRR''') == 'R'\nassert solution('''2\nDR''') == 'D'\n"
    },
    {
        "number": 203,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"\") is None\nassert solution(\"\\t\") is None\nassert solution(\"\\t\\t\") is None\nassert solution(\"\\t\\t\\t\") is None\nassert solution(\"1\") == \"D\"\n"
    },
    {
        "number": 203,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('5\\nDDRRR\\n') == 'D'\nassert solution('6\\nDDRRRR\\n') == 'R'\nassert solution('5\\nDRRRRR\\n') == 'R'\nassert solution('3\\nRRRRR\\n') == 'R'\nassert solution('4\\nRRRRRR\\n') == 'R'\n"
    },
    {
        "number": 203,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('') == 'D'\nassert solution('D') == 'D'\nassert solution('DDRRR') == 'D'\nassert solution('DDDRRRR') == 'R'\nassert solution('DDRRRR') == 'R'"
    },
    {
        "number": 204,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 204,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''17 15 5 3''') == '3'\nassert solution('''14 16 7 22''') == '0'\nassert solution('''4 2 6 4''') == '1'\nassert solution('''1000000000000000000 1000000000000000000 999999866000004473 999999822000007597''') == '1000000063'\nassert solution('''14 16 7 22''') == '0'\n\n\n\"\"\"\n\na, b, x, y = [int(x) for x in stdin.split()]\n\ncount = 0\n\nfor w in range(1, a+1):\n    if w > x:\n        continue\n    for h in range(1, b+1):\n        if h > y:\n            continue\n        if float(w) / h == float(x) / y:\n            count += 1\n\nprint(count)"
    },
    {
        "number": 204,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"\n17 15 5 3\n\"\"\") == \"3\"\n\nassert solution(\n\"\"\"\n14 16 7 22\n\"\"\") == \"0\"\n\nassert solution(\n\"\"\"\n4 2 6 4\n\"\"\") == \"1\"\n\nassert solution(\n\"\"\"\n1000000000000000000 1000000000000000000 999999866000004473 999999822000007597\n\"\"\") == \"1000000063\"\n"
    },
    {
        "number": 204,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(input()) == None"
    },
    {
        "number": 204,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdin\n\n\"\"\""
    },
    {
        "number": 204,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('17 15 5 3') == '3'\nassert solution('14 16 7 22') == '0'\nassert solution('4 2 6 4') == '1'\nassert solution('1000000000000000000 1000000000000000000 999999866000004473 999999822000007597') == '1000000063'\nassert solution('4 2 6 4') == '1'\n"
    },
    {
        "number": 204,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == expected\nprint(solution(stdin))\n\n\"\"\"\n\n\"\"\"\n10 10 9 9\n\n\"\"\"\n"
    },
    {
        "number": 204,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdin\n\n\"\"\"\n"
    },
    {
        "number": 204,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(input()) == \"3\"\nassert solution(input()) == \"0\"\nassert solution(input()) == \"1000000063\"\nassert solution(input()) == \"1000000063\"\n\"\"\"\n\na, b, x, y = [int(x) for x in input().split()]\n"
    },
    {
        "number": 204,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 205,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"1\"\n"
    },
    {
        "number": 205,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('6 9') == '1'\nassert solution('38 11') == '3'\nassert solution('5 2') == '3'\nassert solution('5 10') == '1'"
    },
    {
        "number": 205,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('3 3') == '2'\nassert solution('25 1') == '3'\nassert solution('123 45 62 123') == '3'\nassert solution('1 0') == '1'\nassert solution('12 3') == '1'\n"
    },
    {
        "number": 205,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"6 9\") == \"1\"\nassert solution(\"38 11\") == \"3\"\nassert solution(\"5 2\") == \"3\"\nassert solution(\"5 10\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 205,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('9 2') == '1'\nassert solution('38 11') == '3'\nassert solution('5 2') == '3'\nassert solution('5 10') == '1'\nassert solution('5 15') == '0'\n"
    },
    {
        "number": 205,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('2 7') == '5'\nassert solution('7 7') == '3'\nassert solution('7 9') == '1'\nassert solution('17 29') == '10'\nassert solution('69 93') == '5'\n"
    },
    {
        "number": 205,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('6 9') == '1'\nassert solution('38 11') == '3'\nassert solution('5 2') == '3'\nassert solution('5 10') == '1'\nassert solution('5 26') == '2'\n"
    },
    {
        "number": 205,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(read_input('(6, 9)')) == '1'\nassert solution(read_input('(38, 11)')) == '3'\nassert solution(read_input('(5, 2)')) == '3'\nassert solution(read_input('(5, 10)')) == '1'\n\"\"\"\n"
    },
    {
        "number": 205,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(input()) == output\n\n'''\n"
    },
    {
        "number": 205,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('6 9') == '1'\nassert solution('38 11') == '3'\nassert solution('5 2') == '3'\nassert solution('5 10') == '1'\nassert solution('6 9') == '1'\n"
    },
    {
        "number": 206,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('7 5 3') == '19'\nassert solution('1000000000 1 2019') == '500000001500000001'\nassert solution('100 100000 1') == '101'\nassert solution('6 4 5') == '10'\n\"\"\"\n"
    },
    {
        "number": 206,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('3 2 1') == '3'\nassert solution('100000 1 2019') == '500000001500000001'\nassert solution('6 4 5') == '10'\nassert solution('1000000000 1 2019') == '500000001500000001'\nassert solution('100 100000 1') == '101'\n"
    },
    {
        "number": 206,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('7 5 3') == '19'\nassert solution('1000000000 1 2019') == '500000001500000001'\nassert solution('100 100000 1') == '101'\nassert solution('6 4 5') == '10'\n\n\n\"\"\""
    },
    {
        "number": 206,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\n'''7 5 3'''\n) == '19'\n\nassert solution(\n'''1000000000 1 2019'''\n) == '500000001500000001'\n\nassert solution(\n'''100 100000 1'''\n) == '101'\n\nassert solution(\n'''6 4 5'''\n) == '10'\n\nassert solution(\n'''1 2 3'''\n) == '3'\n"
    },
    {
        "number": 206,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('7 5 3') == '19'\nassert solution('1000000000 1 2019') == '500000001500000001'\nassert solution('100 100000 1') == '101'\nassert solution('6 4 5') == '10'"
    },
    {
        "number": 206,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('7 5 3') == '19'\nassert solution('1000000000 1 2019') == '500000001500000001'\nassert solution('100 100000 1') == '101'\nassert solution('6 4 5') == '10'\nassert solution('0 1 2') == '3'\n"
    },
    {
        "number": 206,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''7 5 3''') == '19'\nassert solution('''1000000000 1 2019''') == '500000001500000001'\nassert solution('''100 100000 1''') == '101'\nassert solution('''6 4 5''') == '10'\nassert solution('''1000000000 0 0 1''') == '101'"
    },
    {
        "number": 206,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1 10 1') == '11'\nassert solution('7 4 3') == '19'\nassert solution('100 1 2') == '101'\nassert solution('100 1000 1') == '500000001500000001'\nassert solution('100 100001 1') == '500000001500000001'\n"
    },
    {
        "number": 206,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('7 5 3\\n') == '19'\nassert solution('1000000000 1 2019\\n') == '500000001500000001'\nassert solution('100 100000 1\\n') == '101'\nassert solution('6 4 5\\n') == '10'\nassert solution('1000000000 1\\n') == '101'\n\"\"\""
    },
    {
        "number": 206,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == solution(stdout) # type: ignore\n'''\n"
    },
    {
        "number": 207,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('3\\n1 3 5\\n') == 'Yes'\nassert solution('5\\n1 0 1 5 1\\n') == 'Yes'\nassert solution('3\\n4 3 1\\n') == 'No'\nassert solution('4\\n3 9 9 3\\n') == 'No'\nassert solution('5\\n1 0 1 5 1\\n') == 'Yes'\n"
    },
    {
        "number": 207,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('1 3 5') == \"Yes\"\nassert solution('1 0 1 5 1') == \"Yes\"\nassert solution('3 9 9 3') == \"No\"\nassert solution('4 3 1') == \"No\"\nassert solution('9 9 9 9') == \"No\"\n"
    },
    {
        "number": 207,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1 3 5\") == \"Yes\"\nassert solution(\"1 0 1 5 1\") == \"Yes\"\nassert solution(\"3 9 9 3\") == \"No\"\nassert solution(\"4 3 1\") == \"No\"\n"
    },
    {
        "number": 207,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1 3 5\\n') == 'Yes'\nassert solution('5 1 3 5 1\\n') == 'No'\nassert solution('1 0 1 5 1\\n') == 'Yes'\nassert solution('3 9 9 3\\n') == 'No'\nassert solution('4 3 1\\n') == 'No'\n"
    },
    {
        "number": 207,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1 3 5\\n4 3 1') == 'Yes'\nassert solution('3 9 9 3\\n4 3 1') == 'No'\nassert solution('1 0 1 5 1\\n3 9 9 3\\n4 3 1') == 'Yes'\nassert solution('3 9 9 3\\n4 3 1') == 'No'\nassert solution('3 9 9 3\\n4 3 1') == 'No'\n\n\n\n\n\n\n\n\n\n\n\"\"\"\n"
    },
    {
        "number": 207,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\n'''3\n1 3 5'''\n) == 'Yes'\nassert solution(\n'''5\n1 0 1 5 1'''\n) == 'Yes'\nassert solution(\n'''3\n4 3 1'''\n) == 'No'\nassert solution(\n'''4\n3 9 9 3'''\n) == 'No'\nassert solution(\n'''6\n1 1 1 1 1 1'''\n) == 'No'\n"
    },
    {
        "number": 207,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdin\n\"\"\"\n"
    },
    {
        "number": 207,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1 3 5\\n') == 'Yes'\nassert solution('5\\n1 0 1 5 1\\n') == 'Yes'\nassert solution('3\\n4 3 1\\n') == 'No'\nassert solution('4\\n3 9 9 3\\n') == 'No'\n\n\n\nimport sys\n"
    },
    {
        "number": 207,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('input/a') == 'Yes'\nassert solution('input/b') == 'No'\nassert solution('input/c') == 'Yes'\nassert solution('input/d') == 'Yes'\nassert solution('input/e') == 'No'\n"
    },
    {
        "number": 207,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('3\\n1 3 5') == 'Yes'\nassert solution('5\\n1 0 1 5 1') == 'Yes'\nassert solution('3\\n4 3 1') == 'No'\nassert solution('4\\n3 9 9 3') == 'No'\nassert solution('5\\n3 9 9 3 9') == 'No'"
    },
    {
        "number": 208,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"0 0 0 1\") == \"1 0 1 1\"\nassert solution(\"0 0 1 1\") == \"0 1 1 0\"\nassert solution(\"0 0 1 2\") == \"-1\"\nassert solution(\"0 0 1 1\") == \"0 1 1 0\"\nassert solution(\"0 0 1 1\") == \"0 1 1 0\"\n"
    },
    {
        "number": 208,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('0 0 0 1') == '1 0 1 1'\nassert solution('0 0 1 1') == '0 1 1 0'\nassert solution('0 0 1 2') == '-1'\nassert solution('0 0 2 1') == '-1'\nassert solution('0 1 1 2') == '-1'\n"
    },
    {
        "number": 208,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\n    \"0 0 0 1\") == \"1 0 1 1\"\nassert solution(\n    \"0 0 1 1\") == \"0 1 1 0\"\nassert solution(\n    \"0 0 1 2\") == \"-1\"\nassert solution(\n    \"0 0 2 2\") == \"-1\"\nassert solution(\n    \"0 0 2 3\") == \"-1\"\n"
    },
    {
        "number": 208,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('0 0 0 1') == '1 0 1 1'\nassert solution('0 0 1 1') == '0 1 1 0'\nassert solution('0 0 1 2') == '0 1 1 0'\nassert solution('0 0 1 2') == '0 1 1 0'\nassert solution('0 0 1 2') == '0 1 1 0'\n"
    },
    {
        "number": 208,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"0 0 0 1\") == \"1 0 1 1\"\nassert solution(\"0 0 1 1\") == \"0 1 1 0\"\nassert solution(\"0 0 1 2\") == \"0 1 1 0\"\nassert solution(\"0 0 2 1\") == \"-1\"\nassert solution(\"0 1 0 1\") == \"-1\"\n"
    },
    {
        "number": 208,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''0 0 0 1''') == '1 0 1 1'\nassert solution('''0 0 1 1''') == '0 1 1 0'\nassert solution('''0 0 1 2''') == '-1'\nassert solution('''0 0 1 0''') == '-1'\nassert solution('''0 0 1 1''') == '0 1 1 0'\n"
    },
    {
        "number": 208,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('0 0 0 1') == '1 0 1 1'\nassert solution('0 0 1 1') == '0 1 1 0'\nassert solution('0 0 1 2') == '-1'\n"
    },
    {
        "number": 208,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('0 0 0 1') == '1 0 1 1'\nassert solution('0 0 1 1') == '0 1 1 0'\nassert solution('0 0 1 2') == '0 1 1 0'\nassert solution('0 0 2 2') == '-1'\n\n\n\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n"
    },
    {
        "number": 208,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 208,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"0 0 0 1\") == \"1 0 1 1\"\nassert solution(\"0 0 1 1\") == \"0 1 1 0\"\nassert solution(\"0 0 1 2\") == \"0 1 1 0\"\nassert solution(\"0 0 1 2\") == \"-1\"\nassert solution(\"0 0 1 2\") == \"-1\"\n"
    },
    {
        "number": 209,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('0 -1') == '1000000006'\nassert solution('1 2') == '1'\nassert solution('-1') == '1000000006'\n"
    },
    {
        "number": 209,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('2 3\\n3') == '1'\nassert solution('0 -1\\n2') == '1000000006'\nassert solution('1 1\\n1') == '1'\nassert solution('-1 -1\\n1') == '1'\nassert solution('0 0\\n1') == '1'\n"
    },
    {
        "number": 209,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('2 3') == '1'\nassert solution('0 -1') == '1000000006'\nassert solution('1 1') == '2'\nassert solution('0 1') == '1'\nassert solution('-1 -1') == '1'\n"
    },
    {
        "number": 209,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''2 3''') == '1'\nassert solution('''0 -1''') == '1000000006'\nassert solution('''2 3''') == '1'\nassert solution('''0 -1''') == '1000000006'\nassert solution('''1 0''') == '0'\n"
    },
    {
        "number": 209,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('0 -1\\n3') == '1000000006'\nassert solution('2 3\\n3') == '1'\nassert solution('1 0\\n1') == '1'\nassert solution('-1 1\\n1') == '1'\nassert solution('0 -1\\n1') == '1'\n"
    },
    {
        "number": 209,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\n    \"0 -1\\n3\") == \"1000000006\"\nassert solution(\n    \"-1 3\\n2\") == \"1000000006\"\nassert solution(\n    \"0 -1\\n3\") == \"1000000006\"\n\n\n\"\"\"\nfrom functools import lru_cache\n\n\n@lru_cache(maxsize=None)\n"
    },
    {
        "number": 209,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == \"1000000006\"\n\n\n\"\"\""
    },
    {
        "number": 209,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('2 3\\n3') == '1'\nassert solution('0 -1\\n2') == '1000000006'\n\n\n\"\"\"\n"
    },
    {
        "number": 209,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == expected\n\"\"\""
    },
    {
        "number": 209,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"0 -1\\n3\") == \"1000000006\"\nassert solution(\"2 3\\n3\") == \"1\"\nassert solution(\"0 -1\\n2\") == \"1\"\nassert solution(\"2 1\\n1\") == \"1\"\nassert solution(\"2 0\\n1\") == \"1\"\n"
    },
    {
        "number": 210,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\n'''3\n1 2 -3\n''') == 'YES\\n2\\n1 2\\n3 3\\n'\nassert solution(\n'''8\n9 -12 3 4 -4 -10 7 3\n''') == 'YES\\n2\\n1 2\\n3 8\\n'\nassert solution(\n'''1\n0\n''') == 'NO\\n'\nassert solution(\n'''4\n1 2 3 -5\n''') == 'YES\\n2\\n1 1\\n2 2\\n3 3\\n4 4\\n'\nassert solution(\n'''10\n1 2 3 -5 4 6 -8 3 1\n''') == 'YES\\n2\\n1 1\\n1 2\\n1 3\\n3 4\\n2 5\\n5 6\\n'\n"
    },
    {
        "number": 210,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 210,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1 2 -3\\n') == 'YES\\n2\\n1 2\\n3 3'\nassert solution('8\\n9 -12 3 4 -4 -10 7 3\\n') == 'YES\\n2\\n1 2\\n3 8\\n4 4\\n5 5\\n6 6\\n7 7'\nassert solution('4\\n1 2 3 -5\\n') == 'YES\\n2\\n1 2\\n3 4\\n5 6'\nassert solution('4\\n1 2 3 -5\\n') == 'YES\\n2\\n1 2\\n3 4\\n5 6'\nassert solution('4\\n1 2 3 -5\\n') == 'NO'\n"
    },
    {
        "number": 210,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''3\n1 2 -3\n''') == 'YES'\nassert solution('''8\n9 -12 3 4 -4 -10 7 3\n''') == 'YES'\nassert solution('''1\n0\n''') == 'NO'\nassert solution('''4\n1 2 3 -5\n''') == 'YES'\nassert solution('''5\n1 2 3 4 -5\n''') == 'NO'\n"
    },
    {
        "number": 210,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 2 3 -5\\n\") == \"YES\\n4\\n1 1\\n2 2\\n3 3\\n4 4\\n\"\nassert solution(\"1\\n0\\n\") == \"NO\\n\"\nassert solution(\"2\\n1 2\\n\") == \"NO\\n\"\nassert solution(\"3\\n1 2\\n2 3\\n\") == \"NO\\n\"\nassert solution(\"4\\n1 2 -3\\n\") == \"NO\\n\"\n"
    },
    {
        "number": 210,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''3\n1 2 -3''') == 'YES'\nassert solution('''8\n9 -12 3 4 -4 -10 7 3''') == 'YES'\nassert solution('''1\n0''') == 'NO'\nassert solution('''4\n1 2 3 -5''') == 'YES'\nassert solution('''2\n1 2''') == 'NO'\n"
    },
    {
        "number": 210,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''3\n1 2 -3\n''') == 'YES'\n\nassert solution('''8\n9 -12 3 4 -4 -10 7 3\n''') == 'YES'\n\nassert solution('''1\n0\n''') == 'NO'\n\nassert solution('''4\n1 2 3 -5\n''') == 'YES'\n\nassert solution('''9\n-9 -8 -7 -6 -5 -4 -3 -2 -1\n''') == 'NO'"
    },
    {
        "number": 210,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1 2 -3') == 'YES\\n2\\n1 2\\n3 3'\nassert solution('1 2 -3\\n4 5 6\\n7 8 9\\n10 11 12') == 'YES\\n2\\n1 2\\n3 4\\n5 6'\nassert solution('1 2 -3\\n4 5 6\\n7 8 9\\n10 11 12\\n13 14 15') == 'NO'\nassert solution('1 2 -3\\n4 5 6\\n7 8 9\\n10 11 12\\n13 14 15\\n16 17 18 19\\n20 21 22 23\\n24 25 26 27') == 'YES\\n2\\n1 2\\n3 4\\n5 6\\n7 8'\nassert solution('1 2 -3\\n4 5 6\\n7 8 9\\n10 11 12\\n13 14 15\\n16 17 18 19\\n20 21 22 23\\n24 25 26 27\\n28 29 30 31\\n32 33 34 35\\n36 37 38 39\\n40 41 42 43\\n44 45 46 47\\n48 49 50 51\\n52 53 54 55\\n56 57 58 59\\n60 61 62 63\\n64 65 66 67\\n68 69 70 71\\n72 73 74 75\\n76 77 78 79\\n80 81 82 83\\n84 85 86 87\\n88 89 90 91\\n92 93 94 95\\n96 97 98 99') == 'YES\\n2\\n1 2\\n3 4\\n5 6\\n7 8\\n10 11'\n"
    },
    {
        "number": 210,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''3\n1 2 -3''') == \"YES\"\nassert solution('''8\n9 -12 3 4 -4 -10 7 3''') == \"YES\"\nassert solution('''1\n0''') == \"NO\"\nassert solution('''4\n1 2 3 -5''') == \"YES\"\nassert solution('''4\n1 2 3 -5''') == \"YES\"\n"
    },
    {
        "number": 210,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''3''') == 'YES'\nassert solution('''0''') == 'NO'\nassert solution('''1''') == 'YES'\nassert solution('''10''') == 'YES'\nassert solution('''4''') == 'YES'\n"
    },
    {
        "number": 211,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\n    '''5 3 2'''\n) == '3'\nassert solution(\n    '''5 4 2'''\n) == '6'\nassert solution(\n    '''2 2 3'''\n) == '0'\nassert solution(\n    '''2 4 2'''\n) == '0'\nassert solution(\n    '''4 2 2'''\n) == '1'\n"
    },
    {
        "number": 211,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('5 3 2') == '3'\nassert solution('5 4 2') == '6'\nassert solution('9 4 2') == '1'\nassert solution('6 4 2') == '2'\nassert solution('6 5 2') == '5'\n"
    },
    {
        "number": 211,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"3 2 1\") == \"3\"\nassert solution(\"5 4 2\") == \"6\"\nassert solution(\"5 4 3\") == \"0\"\nassert solution(\"1 2 3 4\") == \"9\"\nassert solution(\"5 2 1\") == \"0\"\n"
    },
    {
        "number": 211,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == '98'\nprint(solution(stdin))\n"
    },
    {
        "number": 211,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''5 3 2''') == '3'\nassert solution('''5 4 2''') == '6'\nassert solution('''5 5 2''') == '0'\nassert solution('''5 7 2''') == '3'\nassert solution('''5 8 2''') == '4'\n"
    },
    {
        "number": 211,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('5 3 2') == '3'\nassert solution('5 4 2') == '6'\nassert solution('5 4 1') == '0'\nassert solution('5 4 0') == '0'\nassert solution('5 10 2') == '3'\n"
    },
    {
        "number": 211,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == \"30\"\nassert solution(\"4 6 2\") == \"6\"\nassert solution(\"8 7 2\") == \"1\"\nassert solution(\"1 1 1\") == \"0\"\nassert solution(\"1 1 1\") == \"0\"\n"
    },
    {
        "number": 211,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('5 3 2') == '3'\nassert solution('5 4 2') == '6'\nassert solution('6 5 2') == '3'\nassert solution('6 6 2') == '6'\nassert solution('4 4 2') == '6'\n"
    },
    {
        "number": 211,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('5 3 2') == '3'\nassert solution('5 4 2') == '6'"
    },
    {
        "number": 211,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('5 3 2') == '3'\nassert solution('5 4 2') == '6'\nassert solution('5 4 1') == '5'\nassert solution('5 4 2') == '6'\nassert solution('10 2 4') == '1'\n"
    },
    {
        "number": 212,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(3454) == \"YES\"\nassert solution(10) == \"YES\"\nassert solution(111111) == \"NO\"\n\n'''\n"
    },
    {
        "number": 212,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(input()) == 'YES'\nassert solution(input()) == '0'\nassert solution(input()) == 'NO'\nassert solution(input()) == 'YES'\nassert solution(input()) == 'NO'\n"
    },
    {
        "number": 212,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1') == 'NO'\nassert solution('4') == 'NO'\nassert solution('10') == 'NO'\nassert solution('1089') == 'NO'\nassert solution('1009') == 'NO'\n"
    },
    {
        "number": 212,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(input()) == output"
    },
    {
        "number": 212,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('11111') == 'YES'\nassert solution('01111') == 'NO'\nassert solution('1111') == 'YES'\nassert solution('10') == 'YES'\nassert solution('111111') == 'NO'\n"
    },
    {
        "number": 212,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('3454') == 'YES'\nassert solution('10') == 'YES'\nassert solution('111111') == 'YES'\n\nassert solution('28149876') == 'NO'\nassert solution('10000000000000000') == 'YES'\n"
    },
    {
        "number": 212,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(3445) == \"YES\"\nassert solution(111111) == \"YES\"\nassert solution(12345) == \"NO\"\nassert solution(1234) == \"NO\"\nassert solution(2345) == \"NO\"\n"
    },
    {
        "number": 212,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"321\") == \"YES\"\nassert solution(\"123\") == \"YES\"\nassert solution(\"666\") == \"NO\"\nassert solution(\"88888\") == \"NO\"\nassert solution(\"9\") == \"YES\"\n"
    },
    {
        "number": 212,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('3454') == 'YES'\nassert solution('10') == 'YES'\nassert solution('11111') == 'NO'\nassert solution('6') == 'NO'\nassert solution('10') == 'YES'\n"
    },
    {
        "number": 212,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(12345) == \"YES\"\nassert solution(1234567) == \"YES\"\nassert solution(123456789) == \"YES\"\nassert solution(2345) == \"NO\"\nassert solution(234) == \"NO\"\n"
    },
    {
        "number": 213,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdin\n\n\"\"\""
    },
    {
        "number": 213,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('5 2') == '-1'\nassert solution('5 4') == '3'\nassert solution('8 4') == '-1'\nassert solution('3 1') == '4'\nassert solution('2 1') == '2'\n"
    },
    {
        "number": 213,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"3 1\") == \"-1\"\nassert solution(\"2 1\") == \"4\"\nassert solution(\"4 3\") == \"4\"\nassert solution(\"5 3\") == \"1\"\nassert solution(\"6 3\") == \"2\"\n"
    },
    {
        "number": 213,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''10 3\n6 2\n2 1\n7 3\n''') == '4'\n\nassert solution('''8 4\n3 1\n6 2\n5 2\n2 1\n''') == '-1'"
    },
    {
        "number": 213,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"10 3\") == \"4\"\nassert solution(\"8 4\") == \"-1\"\nassert solution(\"8 1\") == \"4\"\nassert solution(\"5 1\") == \"-1\"\nassert solution(\"7 3\") == \"4\"\n"
    },
    {
        "number": 213,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('10 3') == '4'\nassert solution('8 4') == '-1'\nassert solution('8 7') == '-1'\nassert solution('5 6') == '5'\nassert solution('1 7') == '-1'\n"
    },
    {
        "number": 213,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"10 3\\n6 2\\n2 1\\n7 3\\n\") == \"4\"\nassert solution(\"8 4\\n3 1\\n6 2\\n5 2\\n2 1\\n\") == \"-1\"\nassert solution(\"10 4\\n3 1\\n6 2\\n5 2\\n2 1\\n\") == \"-1\"\nassert solution(\"6 4\\n3 1\\n6 2\\n5 2\\n2 1\\n\") == \"-1\"\nassert solution(\"2 4\\n3 1\\n6 2\\n5 2\\n2 1\\n\") == \"-1\"\n"
    },
    {
        "number": 213,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == '4'\n\n'''\n'''\n\n'''\n'''\n"
    },
    {
        "number": 213,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''10 3\n6 2\n2 1\n7 3\n''') == '4'\n\nassert solution('''8 4\n3 1\n6 2\n5 2\n2 1\n''') == '-1'\n\nassert solution('''12 6\n3 2\n6 3\n1 2\n7 2\n5 3\n3 4\n4 2\n2 1\n''') == '3'\n\nassert solution('''20 1\n19 6\n6 19\n19 1\n18 5\n5 19\n17 18\n16 18\n15 19\n14 19\n13 19\n12 19\n11 19\n10 19\n9 19\n8 19\n7 19\n6 19\n5 19\n4 19\n3 19\n2 19\n1 19\n''') == '19'\n\nassert solution('''40 9\n9 5\n5 8\n8 3\n8 7\n7 6\n6 5\n5 4\n4 3\n3 2\n2 1\n1 2\n''') == '2'"
    },
    {
        "number": 213,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''10 3\n6 2\n2 1\n7 3''') == '4'\nassert solution('''8 4\n3 1\n6 2\n5 2\n2 1''') == '-1'\n\n'''"
    },
    {
        "number": 214,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdin.strip()\n"
    },
    {
        "number": 214,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''00\n00\n''') == '1'\nassert solution('''00X00X0XXX0\n0XXX0X00X00\n''') == '1'\nassert solution('''0X0X0\n0X0X0\n''') == '0'\nassert solution('''0XXX0\n00000\n''') == '2'\nassert solution('''0X0X0\n0X0X0\n''') == '0'\n"
    },
    {
        "number": 214,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('00') == '1'\nassert solution('00') == '1'\nassert solution('0XXX0') == '0'\nassert solution('0X0X0') == '0'\nassert solution('0X0X0') == '0'\n"
    },
    {
        "number": 214,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\n'''00\n00\n''') == '1'\nassert solution(\n'''00X00X0XXX0\n0XXX0X00X00\n''') == '4'\nassert solution(\n'''0X0X0\n0X0X0\n''') == '0'\nassert solution(\n'''0XXX0\n00000\n''') == '2'\n"
    },
    {
        "number": 214,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"00\") == 1\nassert solution(\"00X00X0XXX0\") == 1\nassert solution(\"0XXX0X00X00\") == 4\nassert solution(\"0X0X0\") == 0\nassert solution(\"0XXX0\") == 2\n"
    },
    {
        "number": 214,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''00''') == '1'\nassert solution('''00X00X0XXX0''') == '1'\nassert solution('''0XXX0X00X00''') == '4'\nassert solution('''0X0X0''') == '0'\nassert solution('''0XXX0''') == '2'\n"
    },
    {
        "number": 214,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('0X0X0') == '0'\nassert solution('0XXX0') == '2'\nassert solution('0X0X0') == '0'\nassert solution('0X0X0') == '0'\nassert solution('00') == '1'\n"
    },
    {
        "number": 214,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('0') == '0'\nassert solution('00') == '1'\nassert solution('00X00X0XXX0') == '1'\nassert solution('0XXX0X00X00') == '4'\n"
    },
    {
        "number": 214,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('00') == '1'\nassert solution('00X00X0XXX0') == '1'\nassert solution('0XXX0X00X00') == '4'\nassert solution('0X0X0') == '0'\nassert solution('0XXX0') == '2'\n"
    },
    {
        "number": 214,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"00\") == \"1\"\nassert solution(\"00\") == \"1\"\nassert solution(\"00X00X0XXX0\") == \"1\"\nassert solution(\"0XXX0X00X00\") == \"4\"\nassert solution(\"0X0X0\") == \"0\"\n"
    },
    {
        "number": 215,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('z') == ''\nassert solution('Abc') == ''\nassert solution('aBc') == ''\nassert solution('AbC') == ''\n"
    },
    {
        "number": 215,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('11') == 2\nassert solution('zACaAbbaazzC') == 3\nassert solution('ABC') == 0\nassert solution('aaaaBaabAbA') == 2\nassert solution('aABaaaABAaaaABA') == 4\n"
    },
    {
        "number": 215,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdin"
    },
    {
        "number": 215,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\nfrom __future__ import annotations\n\n__author__ = \"Kirill Timofeyev\"\n__date__ = \"20.11.2016\"\n__email__ = \"kirill.t.timofeyev@gmail.com\"\n__license__ = \"MIT\"\n__version__ = \"0.1\"\n\nfrom collections import Counter\nfrom typing import Tuple\n\n_ = int(input())\nS = input().strip()\n\nprint(len(S) - max(Counter(S[:x] for x in range(1, len(S) + 1))[\"a\"] - max(Counter(S[:x] for x in range(1, len(S) + 1))[\"b\"] for x in range(1, len(S)) if S[x].isupper()) for x in range(1, len(S) + 1)))\n"
    },
    {
        "number": 215,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('11\\naaaaaaaabAbaabA\\n') == '2'\nassert solution('12\\nzACaAbbaazzC\\n') == '3'\nassert solution('3\\nABC\\n') == '0'\n\n\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 215,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('11\\naaaaaaaaaaabAbA\\n') == 2\nassert solution('12\\nzACaAbbaazzC\\n') == 3\nassert solution('3\\nABC\\n') == 0"
    },
    {
        "number": 215,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('11\\naaaaaBaabAbA\\n') == '2'\nassert solution('12\\nzACaAbbaazzC\\n') == '3'\nassert solution('3\\nABC\\n') == '0'\nassert solution('4\\nABCD\\n') == '0'\nassert solution('5\\nABCDE\\n') == '0'\n"
    },
    {
        "number": 215,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('11\\naaaaBaabAbA\\n') == '2'\nassert solution('12\\nzACaAbbaazzC\\n') == '3'\nassert solution('3\\nABC\\n') == '0'\nassert solution('5\\nACCBAAAB\\n') == '3'\nassert solution('1\\nA\\n') == '0'\n"
    },
    {
        "number": 215,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"11\") == \"2\"\nassert solution(\"12\") == \"3\"\nassert solution(\"3\") == \"0\"\nassert solution(\"abc\") == \"0\"\nassert solution(\"zzzz\") == \"0\"\n"
    },
    {
        "number": 215,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"aaaaBaabAbA\") == 2\nassert solution(\"zACaAbbaazzC\") == 3\nassert solution(\"ABC\") == 0\nassert solution(\"ABCab\") == 0\n\n\n\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 216,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"1\\n-2 0\") == \"3\"\nassert solution(\"6\\n16 23 16 15 42 8\") == \"120\""
    },
    {
        "number": 216,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('3\\n1 -2 0') == '3'\nassert solution('6\\n16 23 16 15 42 8') == '120'\n\"\"\""
    },
    {
        "number": 216,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1\\n-2\\n0') == '3'\nassert solution('1\\n-2\\n0') == '3'\nassert solution('1\\n0\\n1') == '-1'\nassert solution('1\\n0\\n1') == '-1'\nassert solution('1\\n0\\n1') == '-1'\n"
    },
    {
        "number": 216,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1\\n1') == '0'\nassert solution('1\\n-1') == '-1'\nassert solution('2\\n1 2') == '1'\nassert solution('1\\n-2') == '-1'\nassert solution('2\\n1 2') == '-1'\n"
    },
    {
        "number": 216,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"\"\"3\n1 -2 0\n\"\"\") == \"3\"\nassert solution(\"\"\"6\n16 23 16 15 42 8\n\"\"\") == \"120\"\n\"\"\""
    },
    {
        "number": 216,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''1\n-2 0''') == '3'\nassert solution('''6\n16 23 16 15 42 8''') == '120'\n'''\n\nimport sys"
    },
    {
        "number": 216,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('1\\n-2 0') == '3'\nassert solution('3\\n1 -2 0') == '3'\nassert solution('6\\n16 23 16 15 42 8') == '120'\nassert solution('5\\n-2 3 -1 2') == '-3'\nassert solution('7\\n5 -4 3 1 -2 -1') == '-1'\n"
    },
    {
        "number": 216,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == expected\n\"\"\"\n"
    },
    {
        "number": 216,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('3\\n1 -2 0') == '3'\nassert solution('6\\n16 23 16 15 42 8') == '120'\nassert solution('10\\n1 2 3 4 5 6 7 8 9 10') == '55'\nassert solution('10\\n1 2 3 4 5 6 7 8 9 10') == '55'\nassert solution('10\\n1 2 3 4 5 6 7 8 9 10') == '55'\n"
    },
    {
        "number": 216,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''3\n1 -2 0''') == '3'\nassert solution('''6\n16 23 16 15 42 8''') == '120'\n"
    },
    {
        "number": 217,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 217,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('6 9 2 4') == '4'\nassert solution('6 10 2 4') == '2'\nassert solution('6 5 4 3') == '-1'\n\n\n\"\"\"\n"
    },
    {
        "number": 217,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''6 9 2 4''') == '4'\nassert solution('''6 10 2 4''') == '2'\nassert solution('''6 5 4 3''') == '-1'\n\n\"\"\""
    },
    {
        "number": 217,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('6 9 2 4') == '4'\nassert solution('6 10 2 4') == '2'\nassert solution('6 5 4 3') == '-1'\nassert solution('4 6 2 2') == '2'\nassert solution('10 6 2 2') == '1'\n"
    },
    {
        "number": 217,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"6 9 2 4\") == \"4\"\nassert solution(\"6 10 2 4\") == \"-1\"\nassert solution(\"6 5 4 3\") == \"2\"\n\n\"\"\"\n\nA, B, F, K = [int(x) for x in stdin.split()]"
    },
    {
        "number": 217,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('2 4 6 8') == '1'\nassert solution('2 3 4 5') == '2'\nassert solution('2 4 6 8') == '2'\nassert solution('2 4 6 8') == '2'\nassert solution('2 4 6 8') == '2'\n"
    },
    {
        "number": 217,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('6 9 2 4') == '4'\nassert solution('6 10 2 4') == '2'\nassert solution('6 5 4 3') == '-1'\n\"\"\"\n\na, b, f, k = map(int, stdin.split())\n\nc = b//a\n\nn = 1"
    },
    {
        "number": 217,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"6 9 2 4\") == \"4\"\nassert solution(\"6 10 2 4\") == \"2\"\nassert solution(\"6 5 4 3\") == \"-1\"\nassert solution(\"6 3 2 2\") == \"2\"\nassert solution(\"6 5 5 5\") == \"-1\"\n"
    },
    {
        "number": 217,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''6 9 2 4''') == '4'\nassert solution('''6 10 2 4''') == '2'\nassert solution('''6 5 4 3''') == '-1'\nassert solution('''8 5 4 3''') == '-1'\nassert solution('''8 6 4 3''') == '-1'\n"
    },
    {
        "number": 217,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1 2 3 4') == '2'\nassert solution('3 4 4 2') == '-1'\nassert solution('10 9 2 4') == '4'\nassert solution('7 11 2 4') == '-1'\nassert solution('100 9 2 4') == '-1'\n"
    },
    {
        "number": 218,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''5 2 3\nHello\n''') == '2\\nHe\\nllo'\n\nassert solution('''10 9 5\nCodeforces\n''') == '2\\nCodef\\norces'\n\nassert solution('''6 4 5\nPrivet\n''') == '2\\nPrivet'\n\nassert solution('''8 1 1\nabacabac\n''') == '8\\na\\nb\\na\\nc\\na\\nb\\na\\nc'\n"
    },
    {
        "number": 218,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('2 3 5') == '3'\nassert solution('10 9 5') == '2'\nassert solution('6 4 5') == '2'\nassert solution('Privet') == '-1'\nassert solution('Codeforces') == '2'\n"
    },
    {
        "number": 218,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('5 2 3\\nHello\\n') == '2\\nHe\\nllo'\nassert solution('10 9 5\\nCodeforces\\n') == '2\\nCodef\\norces'\nassert solution('6 4 5\\nPrivet\\n') == '2\\nPrivet'\n"
    },
    {
        "number": 218,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 218,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('3 2 1') == '0'\nassert solution('5 2 3') == '2'\nassert solution('9 5 1') == '2'\nassert solution('8 1 1') == '8'\nassert solution('6 4 5') == '2'\n"
    },
    {
        "number": 218,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(input) == output\n"
    },
    {
        "number": 218,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('Hello') == 'He'\nassert solution('Hello') == 'hel'\nassert solution('Hello') == 'Hel'\nassert solution('Hello') == 'lo'\nassert solution('Hello') == 'llo'\n"
    },
    {
        "number": 218,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''5 2 3\nHello''') == '2\\nHe\\nllo'\nassert solution('''10 9 5\nCodeforces''') == '2\\nCodef\\norces'\nassert solution('''6 4 5\nPrivet''') == '2\\nCodef\\nors'\nassert solution('''8 1 1\nabacabac''') == '8\\na\\nb\\na\\nc\\na\\nb\\na'\nassert solution('''6 4 3\nJupPbbrR''') == '-1'\n"
    },
    {
        "number": 218,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 218,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('Hello') == 'He'\nassert solution('codeforces') == 'Codef'\n"
    },
    {
        "number": 219,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''3 10 1 3\n3 4 7''') == 'RUN 2\\nJUMP 3\\nRUN 1\\nJUMP 2\\nRUN 2'\n\nassert solution('''3 10 2 3\n3 4 7''') == 'IMPOSSIBLE'\n\nassert solution('''2 9 2 3\n6 4''') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 219,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"3 10 1 3\\n3 4 7\\n\") == \"RUN 2\\nJUMP 3\\nRUN 1\\nJUMP 2\\nRUN 2\"\nassert solution(\"2 9 2 3\\n6 4\\n\") == \"IMPOSSIBLE\"\nassert solution(\"3 2 1\\n1\\n\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 219,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''3 10 1 3\n3 4 7\n''') == 'RUN 2\\nJUMP 3\\nRUN 1\\nJUMP 2\\nRUN 2'\nassert solution('''2 9 2 3\n6 4\n''') == 'IMPOSSIBLE'\n'''"
    },
    {
        "number": 219,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('3 10 1 3\\n3 4 7') == 'RUN 2\\nJUMP 3\\nRUN 1\\nJUMP 2\\nRUN 2'\nassert solution('2 9 2 3\\n6 4') == 'IMPOSSIBLE'\nassert solution('1 11 3 4\\n1 5') == 'RUN 4'\nassert solution('2 9 2 3\\n6 4') == 'IMPOSSIBLE'\nassert solution('1 11 3 4\\n1 5') == 'RUN 4'\n"
    },
    {
        "number": 219,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''3 10 1 3\n3 4 7\n''') == \"RUN 2\\nJUMP 3\\nRUN 1\\nJUMP 2\\nRUN 2\"\nassert solution('''2 9 2 3\n6 4\n''') == \"IMPOSSIBLE\"'''"
    },
    {
        "number": 219,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"3 10 1 3\") == \"RUN 2\\nJUMP 3\\nRUN 1\\nJUMP 2\\nRUN 2\"\nassert solution(\"2 9 2 3\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 219,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\n'''3 10 1 3'''\n) == 'RUN 2\\nJUMP 3\\nRUN 1\\nJUMP 2\\nRUN 2'\nassert solution(\n'''2 9 2 3'''\n) == 'IMPOSSIBLE'"
    },
    {
        "number": 219,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('3 10 1 3') == 'RUN 2\\nJUMP 3\\nRUN 1\\nJUMP 2\\nRUN 2'\nassert solution('3 4 7') == 'IMPOSSIBLE'\nassert solution('2 9 2 3') == 'IMPOSSIBLE'\nassert solution('6 4') == 'RUN 1\\nJUMP 2\\nRUN 2'\nassert solution('2 3 1') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 219,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''3 10 1 3''') == '''RUN 2\nJUMP 3\nRUN 1\nJUMP 2\nRUN 2'''\n\nassert solution('''2 9 2 3''') == '''IMPOSSIBLE'''\n\nassert solution('''6 4''') == '''RUN 2\nJUMP 3'''\n\nassert solution('''5 9 3''') == '''RUN 5\nJUMP 3'''\n"
    },
    {
        "number": 219,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"3 10 1 3\n3 4 7\n\"\"\") == \"\"\"RUN 2\nJUMP 3\nRUN 1\nJUMP 2\nRUN 2\n\"\"\""
    },
    {
        "number": 220,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\n    stdin='''9 5\n'''\n) == '4'\n\nassert solution(\n    stdin='''3 3\n'''\n) == '2'\n\nassert solution(\n    stdin='''5 2\n'''\n) == '0'\n\nassert solution(\n    stdin='''2 5\n'''\n) == '0'\n\n\n'''\n\n'''"
    },
    {
        "number": 220,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"9 5\") == \"4\"\nassert solution(\"3 3\") == \"2\"\nassert solution(\"5 2\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 220,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('9 5\\n') == '4'\nassert solution('3 3\\n') == '2'\nassert solution('5 2\\n') == '0'\nassert solution('6 4\\n') == '2'\nassert solution('2 2\\n') == '0'\n"
    },
    {
        "number": 220,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('9 5\\n') == '4'\nassert solution('3 3\\n') == '2'\nassert solution('5 2\\n') == '0'\n\n\"\"\"\n"
    },
    {
        "number": 220,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == expected\n"
    },
    {
        "number": 220,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('5 2') == '0'\nassert solution('3 3') == '2'\nassert solution('9 5') == '4'\n"
    },
    {
        "number": 220,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''9 5\n''') == '4'\nassert solution('''3 3\n''') == '2'\nassert solution('''5 2\n''') == '0'\nassert solution('''1 2\n''') == '0'\n'''\n"
    },
    {
        "number": 220,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"9 5\") == \"4\"\nassert solution(\"3 3\") == \"2\"\nassert solution(\"5 2\") == \"0\"\nassert solution(\"3 1\") == \"1\"\nassert solution(\"5 4\") == \"1\"\n"
    },
    {
        "number": 220,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"\") == 0\nassert solution(\"5 2\") == 0\nassert solution(\"3 3\") == 2\nassert solution(\"5 2\") == 2\nassert solution(\"9 5\") == 4\n"
    },
    {
        "number": 220,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('5 2') == '0'\nassert solution('5 9') == '4'\nassert solution('9 3') == '2'\nassert solution('3 9') == '2'\nassert solution('5 9') == '4'\n"
    },
    {
        "number": 221,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"7 2\") == \"2\\n1 6\"\nassert solution(\"5 1\") == \"2\\n1 4\"\nassert solution(\"4 5\") == \"2\\n1 4\"\nassert solution(\"5 5\") == \"2\\n1 4\"\nassert solution(\"5 5\\n5 4\") == \"2\\n1 4\"\n"
    },
    {
        "number": 221,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''7 2''') == '''2\n1 6'''\nassert solution('''5 1''') == '''2\n1 4'''\nassert solution('''123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789''') == '''2\n1 4'''\nassert solution('''1 2''') == '''1\n2'''\nassert solution('''1 2 3 4''') == '''1\n2\n3\n4'''\n"
    },
    {
        "number": 221,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == expected\n\"\"\"\n"
    },
    {
        "number": 221,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('7 2') == '2\\n1 6'\nassert solution('5 1') == '2\\n1 4'\nassert solution('2 1') == '2\\n1 4'\nassert solution('1 2') == '2\\n1 4'\nassert solution('2 2') == '2\\n1 4'\n"
    },
    {
        "number": 221,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('7 2\\n') == '2\\n1 6'\nassert solution('5 1\\n') == '2\\n1 4'\n\n\n\"\"\"\n"
    },
    {
        "number": 221,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"7 2\") == \"2\\n1 6\"\nassert solution(\"5 1\") == \"2\\n1 4\"\nassert solution(\"8 1\") == \"3\\n1 4\"\nassert solution(\"6 2\") == \"2\\n1 4\"\nassert solution(\"7 1\") == \"2\\n1 4\"\n"
    },
    {
        "number": 221,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('1 2') == '1 6'\nassert solution('7 2') == '2'\nassert solution('5 1') == '2 1 4'\nassert solution('5 1') == '2 1 4'\nassert solution('8 1') == '2 1 4'\n"
    },
    {
        "number": 221,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('7 2') == '2'\nassert solution('5 1') == '2'\nassert solution('1 2') == '1 4'\nassert solution('1 5') == '2 4'\nassert solution('10 1') == '2'\n"
    },
    {
        "number": 221,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\n    '7 1'\n) == '2\\n1 6'\n\nassert solution(\n    '5 1'\n) == '2\\n1 4'\n\nassert solution(\n    '7 3'\n) == '2\\n1 4'\n\nassert solution(\n    '10 2'\n) == '5\\n1 5 3 6 4 2'\n\n\n-----Alternate Solutions (Shorter)-----\n"
    },
    {
        "number": 221,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('8314') == '2'\nassert solution('625') == '0'\nassert solution('333') == '-1'\n\"\"\""
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('84') == '2'\nassert solution('42') == '0'\nassert solution('9') == '0'\nassert solution('1000000000') == '2'\nassert solution('100000') == '0'\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdin\n\n-----"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('8314') == '2'\nassert solution('625') == '0'\nassert solution('333') == '-1'\nassert solution('9') == '0'\nassert solution('9') == '0'\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('8314') == '2'\nassert solution('625') == '0'\nassert solution('333') == '-1'\nassert solution('33333') == '-1'"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('8314') == '2'\nassert solution('625') == '0'\nassert solution('333') == '-1'\n\n\"\"\"\n\n__author__ = \"Daniel Kukiel\"\n__date__ = \"2016-06-26\"\n\n\nimport sys"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('8314') == '2'\nassert solution('625') == '0'\nassert solution('333') == '-1'\n\"\"\"\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('8314') == '2'\nassert solution('625') == '0'\nassert solution('333') == '-1'\n\n\"\"\"\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"123456789\") == \"0\"\nassert solution(\"22233445566778899\") == \"2\"\nassert solution(\"333\") == \"-1\"\nassert solution(\"8314\") == \"2\"\nassert solution(\"85464\") == \"0\"\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '4'\nassert solution('6') == '120'\nassert solution('1') == '1'\nassert solution('2') == '1'\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\n    '''2'''\n    ) == '1'\nassert solution(\n    '''3'''\n    ) == '4'\nassert solution(\n    '''6'''\n    ) == '120'\nassert solution(\n    '''10'''\n    ) == '7'"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"2\") == \"1\"\nassert solution(\"6\") == \"120\"\nassert solution(\"5\") == \"4\"\nassert solution(\"9\") == \"120\"\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '4'\nassert solution('6') == '120'\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\n'''\n3\n'''\n) == '4'\n\n\nassert solution(\n'''\n6\n'''\n) == '120'\n\n\nassert solution(\n'''\n9\n'''\n) == '0'\n\n\nassert solution(\n'''\n27\n'''\n) == '0'\n\n\nassert solution(\n'''\n28\n'''\n) == '0'\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('') == 0\nassert solution('1') == 1\nassert solution('2') == 1\nassert solution('3') == 1\nassert solution('4') == 2\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''2''') == '1'\nassert solution('''3''') == '4'\nassert solution('''6''') == '120'\nassert solution('''1000''') == '1'\nassert solution('''100000''') == '4'\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '4'\nassert solution('6') == '120'\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '4'\nassert solution('6') == '120'\nassert solution('10') == '7'\nassert solution('1000') == '10'\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"1\"\nassert solution(\"3\") == \"4\"\nassert solution(\"6\") == \"120\"\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('ABABBBACFEYUKOTT') == 4\nassert solution('AAA') == 1\nassert solution('AAAAAA') == 1\nassert solution('AACACAC') == 0\nassert solution('AACACAFE') == 1\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(input()) == output()\n\n\n\"\"\"\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('ABABBBACFEYUKOTT') == 4\nassert solution('AAA') == 1\nassert solution('ABCDEFG') == 3\nassert solution('ABCDEFGHIJKLMNOP') == 5\nassert solution('ABCDEFGHIJKLMNOPQ') == 5\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('ABABBBACFEYUKOTT') == 4\nassert solution('AAA') == 1\nassert solution('AABABBBA') == 1\nassert solution('ABBABABABABBBAA') == 2\nassert solution('A') == 1\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('') == None\nassert solution('ABABBBACFEYUKOTT') == 4\nassert solution('AAA') == 1\n\nassert solution('A') == 1\nassert solution('AA') == 2\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"ABABBBACFEYUKOTT\") == 4\nassert solution(\"AA\") == 1\nassert solution(\"AAAA\") == 1\nassert solution(\"AAABBB\") == 4\nassert solution(\"A\") == 1\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('ABABBBACFEYUKOTT') == '4'\nassert solution('AAA') == '1'\nassert solution('AAAEAA') == '2'\nassert solution('A') == '1'\n\n\n\"\"\"\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"ABABBBACFEYUKOTT\") == 4\nassert solution(\"AAA\") == 1\nassert solution(\"ABBB\") == 2\nassert solution(\"ABCDE\") == 5\nassert solution(\"ABCDEF\") == 5\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('ABABBBACFEYUKOTT') == 4\nassert solution('AAA') == 1\nassert solution('A') == 1\nassert solution('ABBBBACFEYUKOTT') == 4\nassert solution('ABBBBBACFEYUKOTT') == 4\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('') == 0\nassert solution('AA') == 1\nassert solution('AB') == 1\nassert solution('ABA') == 2\nassert solution('ABC') == 2\n"
    },
    {
        "number": 225,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"7 3 2 5\") == \"YES\"\nassert solution(\"1 7 11 5\") == \"YES\"\nassert solution(\"7 3 2 5\") == \"NO\"\nassert solution(\"7 3 2 5\") == \"NO\"\nassert solution(\"7 3 2 5\") == \"NO\"\n"
    },
    {
        "number": 225,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('1 7 11 5') == 'YES'\nassert solution('7 3 2 5') == 'NO'\nassert solution('1 1 1 1') == 'YES'\nassert solution('1 1 1 1') == 'YES'\nassert solution('1 1 1 1') == 'YES'\n"
    },
    {
        "number": 225,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''1 7 11 5''') == 'YES'\nassert solution('''7 3 2 5''') == 'NO'\n"
    },
    {
        "number": 225,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''7 3 2 5''') == 'YES'\nassert solution('''1 7 11 5''') == 'YES'\nassert solution('''7 3 2 5''') == 'NO'\nassert solution('''7 4 3 6''') == 'YES'\nassert solution('''1 2 3 4''') == 'YES'\n"
    },
    {
        "number": 225,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1 7 11 5') == 'YES'\nassert solution('7 3 2 5') == 'NO'\n\"\"\"\n"
    },
    {
        "number": 225,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdin\n\"\"\""
    },
    {
        "number": 225,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('1 7 11 5') == 'YES'\nassert solution('7 3 2 5') == 'NO'\nassert solution('7 3 2 5') == 'NO'\n\n\"\"\""
    },
    {
        "number": 225,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdin"
    },
    {
        "number": 225,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''1 7 11 5''') == 'YES'\nassert solution('''7 3 2 5''') == 'NO'\n'''\n"
    },
    {
        "number": 225,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"1 7 11 5\") == \"YES\"\nassert solution(\"7 3 2 5\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"    \") == \"\"\nassert solution(\"1\") == \"\"\nassert solution(\"1 2\") == \"2\"\nassert solution(\"1 2 3\") == \"5\"\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''3\n141 592 653\n''') == '653 733'\nassert solution('''5\n10 21 10 21 10\n''') == '31 41'\n\n\n'''\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == expected\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"3\\n141 592 653\\n\") == \"653 733\"\nassert solution(\"5\\n10 21 10 21 10\\n\") == \"31 41\"\nassert solution(\"5\\n10 1 2 3 4\\n\") == \"3 2\"\nassert solution(\"5\\n10 1 2 3 4\\n\") == \"3 2\"\nassert solution(\"5\\n10 2 2 2 2 2\\n\") == \"6 6\"\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('141\\n592\\n653') == '653 733'\nassert solution('5\\n10 21 10 21 10') == '31 41'\nassert solution('3\\n141 592 653') == '653 733'\nassert solution('5\\n10 21 10 21 10') == '31 41'\nassert solution('5\\n10 21 10 21 10\\n10 21 10 21 10\\n10 21 10 21 10\\n10 21 10 21 10\\n10 21 10 21 10\\n10 21 10 21 10\\n10 21 10 21 10\\n10 21 10 21 10\\n10 21 10 21 10\\n10 21 10 21 10') == '20 20'\n\n'''"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == expected\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''3\n141 592 653''') == '653 733'\nassert solution('''5\n10 21 10 21 10''') == '31 41'\nassert solution('''1\n1\n1\n1\n1''') == '1 1'\nassert solution('''10\n9 8 7 6 5 4 3 2 1\n''') == '6 6'\nassert solution('''100\n99 998 997 996 995 994 993 992 991 990 989 988 987 986 985 984 983 982 981 979 977 978 976 975 974 973 972 971 969 970 967 966 965 964 963 962 961 959 958 947 946 945 944 943 942 941 939 938 936 935 934 933 932 931 929 928 927 926 925 924 923 922 921 919 918 917 916 915 914 913 912 911 910 909 908 907 906 905 904 903 902 901 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 901 902 903 904 905 906 907 908 909 910 911 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960 961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 986 987 988 989 990 991 992 993 994 995 996 997 998 999''') == '1 1'\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''3\n141 592 653\n''') == '653 733'\nassert solution('''5\n10 21 10 21 10\n''') == '31 41'\nassert solution('''5\n0 1 2 3 4\n''') == '5 1'\nassert solution('''5\n0 1 1 1 1\n''') == '5 1'\nassert solution('''5\n1 2 1 1 1\n''') == '1 2'\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1') == '0'\nassert solution('3') == '2'\nassert solution('10') == '5'\nassert solution('13') == '8'\nassert solution('15') == '13'\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1 2 3 4 5 6') == 2\nassert solution('2 4 6 8 10 12 14 16 18 22') == 3\nassert solution('3 6 5') == -1\nassert solution('10 2 3 4 5 6') == 2\nassert solution('10 2 8 6 4 3') == 2\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n'''\n\nn = int(input())\na = [int(x) for x in input().split()]\n\nm = 0\nwhile m < len(a):\n    t = m + 1\n    while t < len(a):\n        if a[t] == a[m] + a[t-1]:\n            m += 1\n            t += 1\n        else:\n            break\n    if t == len(a):\n        break\n    else:\n        m = t"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''3\n3 6 5''') == '3'\nassert solution('''6\n2 4 8 6 10 18''') == '3'\nassert solution('''10\n0 1 2 3 4 5 6 7 8 9''') == '3'\nassert solution('''4\n2 4 8 6''') == '-1'\nassert solution('''1\n2 3 4''') == '-1'\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1 2 3 6 8\") == \"2\"\nassert solution(\"3 6 5\") == \"-1\"\nassert solution(\"2 4 8 6 10 18\") == \"3\"\nassert solution(\"2 4 8 6 10 18 10 2 3\") == \"3\"\n\n\n\n\n\n\"\"\"\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''5\n1 2 3 6 8''') == '2'\nassert solution('''3\n3 6 5''') == '-1'\nassert solution('''6\n2 4 8 6 10 18''') == '3'\nassert solution('''1\n1''') == '-1'\nassert solution('''4\n1 2 3 4''') == '-1'\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1 2 3') == '2'\nassert solution('1 2 3 6 8') == '2'\nassert solution('2 4 8 6 10 18') == '3'\nassert solution('3 6 5') == '-1'\nassert solution('2 1 1 2 1 1 1') == '2'\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''5\n1 2 3 6 8''') == '2'\nassert solution('''3\n3 6 5''') == '-1'\nassert solution('''6\n2 4 8 6 10 18''') == '3'\n\n\n-----Solution Details-----"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3 4 5\") == \"3\"\nassert solution(\"1 2 3 4 5 6\") == \"3\"\nassert solution(\"1 2 3 4 5 6 7\") == \"4\"\nassert solution(\"1 2 3 4 5 6 7 8\") == \"4\"\nassert solution(\"1 2 3 4 5 6 7 8 9\") == \"-1\"\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1 2 3 6 8') == 2\nassert solution('3 6 5') == -1\nassert solution('2 4 8 6 10 18') == 3\n\n\n\"\"\"\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1 2 3 4 5') == 2\nassert solution('3 6 5') == -1\nassert solution('1 2 3 4 5 6 7 8 9 10') == 3\nassert solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22') == 3\n\n\n\"\"\"\n\n\"\"\""
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('2\\n8 8') == \"Bob\"\nassert solution('4\\n3 1 4 1') == \"Alice\"\n\n\"\"\"\n\n\"\"\"\nFollowing a single sided game, the probability of losing is the sum of all odds and the sum of all evens.\n\nHowever, the odds for the following game are as follows:\n\nAlice vs Bob\n\nIf you think of the game as alternating, one who first gets a full win is the winner of the game.\n\nIf Alice rolls first, then Bob wins with probability:\n\n$$\\frac{n}{2} + \\frac{n}{2}$$\n\nIf Bob rolls first, then Alice wins with probability:\n\n$$\\frac{n}{2} + \\frac{n}{2}$$\n\nIf they are equally likely to roll first, the probability of Alice winning is:\n\n$$\\frac{n}{4} + \\frac{n}{4}$$\n\nIf the first player rolls more than the second, then Alice is guaranteed to win with a probability of:\n\n$$\\frac{n}{4} + \\frac{n}{4}$$\n\nIf both players roll the same number of rolls, then it is a tie.\n\nThe sum of all odds and sum of all evens (including the first roll) is:\n\n$$\\frac{n}{2} + \\frac{n}{2} + \\frac{n}{2} + \\frac{n}{2} = \\frac{n}{2} + \\frac{n}{2} + \\frac{n}{2} + \\frac{n}{2}$$\n\nThe sum of all odds and sum of all evens (excluding the first roll) is:\n\n$$\\frac{n}{2} + \\frac{n}{2} + \\frac{n}{2} + \\frac{n}{2} - \\frac{n}{2} - \\frac{n}{2}$$\n\nIn other words, Alice's odds are:\n\n$$\\frac{n}{2} + \\frac{n}{2}$$\n\nand Bob's odds are:\n\n$$\\frac{n}{2} + \\frac{n}{2} - \\frac{n}{2} - \\frac{n}{2}$$\n\nSo Alice is guaranteed to win with a probability of:\n\n$$\\frac{n}{2} + \\frac{n}{2}$$\n\nIf Alice rolls first, then Bob wins with probability:\n\n$$\\frac{n}{4} + \\frac{n}{4}$$\n\nIf Bob rolls first, then Alice wins with probability:\n\n$$\\frac{n}{4} + \\frac{n}{4}$$\n\nIf they are equally likely to roll first, the probability of Alice winning is:\n\n$$\\frac{n}{8} + \\frac{n}{8}$$\n\nIf the first player rolls more than the second, then Alice is guaranteed to win with a probability of:\n\n$$\\frac{n}{8} + \\frac{n}{8}$$\n\nIf both players roll the same number of rolls, then it is a tie.\n\nThe sum of all odds and sum of all evens (excluding the first roll) is:\n\n$$\\frac{n}{2} + \\frac{n}{2} + \\frac{n}{2} + \\frac{n}{2} - \\frac{n}{2} - \\frac{n}{2}$$\n\nThe sum of all odds and sum of all evens (excluding the first roll) is:\n\n$$\\frac{n}{2} + \\frac{n}{2} + \\frac{n}{2} + \\frac{n}{2}$$\n\nIn other words, Bob's odds are:\n\n$$\\frac{n}{2} + \\frac{n}{2}$$\n\nand Alice's odds are:\n\n$$\\frac{n}{2} + \\frac{n}{2} - \\frac{n}{2} - \\frac{n}{2}$$\n\nSo Bob is guaranteed to win with a probability of:\n\n$$\\frac{n}{8} + \\frac{n}{8}$$\n\nIf Alice rolls first, then Bob wins with probability:\n\n$$\\frac{n}{8} + \\frac{n}{8}$$\n\nIf Bob rolls first, then Alice wins with probability:\n\n$$\\frac{n}{8} + \\frac{n}{8}$$\n\nIf they are equally likely to roll first, the probability of Alice winning is:\n\n$$\\frac{n}{16} + \\frac{n}{16}$$\n\nIf the first player rolls more than the second, then Alice is guaranteed to win with a probability of:\n\n$$\\frac{n}{16} + \\frac{n}{16}$$\n\nIf both players roll the same number of rolls, then it is a tie.\n\nThe sum of all odds and sum of all evens (excluding the first roll) is:\n\n$$\\frac{n}{2} + \\frac{n}{2} + \\frac{n}{2} + \\frac{n}{2} - \\frac{n}{2} - \\frac{n}{2}$$\n\nThe sum of all odds and sum of all evens (excluding the first roll) is:\n\n$$\\frac{n}{2} + \\frac{n}{2} + \\frac{n}{2} + \\frac{n}{2}$$\n\nIn other words, Bob's odds are:\n\n$$\\frac{n}{2} + \\frac{n}{2}$$\n\nand Alice's odds are:\n\n$$\\frac{n}{2} + \\frac{n}{2} - \\frac{n}{2} - \\frac{n}{2}$$\n\nSo Bob is guaranteed to win with a probability of:\n\n$$\\frac{n}{16} + \\frac{n}{16}$$\n\nIf Alice rolls first, then Bob wins with probability:\n\n$$\\frac{n}{16} + \\frac{n}{16}$$\n\nIf Bob rolls first, then Alice wins with probability:\n\n$$\\frac{n}{16} + \\frac{n}{16}$$\n\nIf they are equally likely to roll first, the probability of Alice winning is:\n\n$$\\frac{n}{32} + \\frac{n}{32}$$\n\nIf the first player rolls more than the second, then Alice is guaranteed to win with a probability of:\n\n$$\\frac{n}{32} + \\frac{n}{32}$$\n\nIf both players roll the same number of rolls, then it is a tie.\n\nThe sum of all odds and sum of all evens (excluding the first roll) is:\n\n$$\\frac{n}{2} + \\frac{n}{2} + \\frac{n}{2} + \\frac{n}{2} - \\frac{n}{2} - \\frac{n}{2}$$\n\nThe sum of all odds and sum of all evens (excluding the first roll) is:\n\n$$\\frac{n}{2} + \\frac{n}{2} + \\frac{n}{2} + \\frac{n}{2}$$\n\nIn other words"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('2\\n8 8') == 'Bob'\nassert solution('4\\n3 1 4 1') == 'Alice'\nassert solution('6\\n3 1 4 1 5 6') == 'Bob'\n\n\n\n'''\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('3\\n4 1 1') == 'Bob'\nassert solution('8\\n8 8') == 'Alice'\nassert solution('4\\n3 1 4 1') == 'Alice'\nassert solution('2\\n1') == 'Alice'\nassert solution('2\\n2') == 'Bob'\n\n\n\"\"\"\n\nn = int(input())\ns = input().split()\na = [int(i) for i in s]"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('8 8') == 'Bob'\nassert solution('4 3 1 4 1') == 'Alice'\nassert solution('4 5 1 2 3') == 'Bob'\nassert solution('2 4 1 5 2') == 'Bob'\nassert solution('2 4 4 5 3') == 'Alice'\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''8\n8\n''') == 'Alice'\nassert solution('''4\n3 1 4 1\n''') == 'Bob'\nassert solution('''2\n8\n''') == 'Alice'"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('2') == 'Alice'\nassert solution('8 8') == 'Bob'\nassert solution('4 3 1 4 1') == 'Alice'\nassert solution('3 1 4 1') == 'Bob'\n\n\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == \"Bob\"\n\n\n-----Solution-----\n\"\"\"\n\"\"\"\nsimulate the game\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"2\\n8 8\\n\") == \"Bob\"\nassert solution(\"4\\n3 1 4 1\\n\") == \"Alice\"\nassert solution(\"4\\n1 1 1 1\\n\") == \"Alice\"\nassert solution(\"4\\n1 1 1 1\\n\") == \"Bob\"\nassert solution(\"4\\n1 1 1 1\\n\") == \"Bob\"\n\n\n-----"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"4\\n3 1 4 1\") == \"Alice\"\nassert solution(\"2\\n1\") == \"Bob\"\nassert solution(\"1\\n1\") == \"Bob\"\nassert solution(\"2\\n1 1\") == \"Bob\"\nassert solution(\"2\\n1 2\") == \"Bob\"\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('8 8\\n8 8') == 'Bob'\nassert solution('4\\n3 1 4 1') == 'Alice'\nassert solution('4\\n4 3 2 1') == 'Alice'\nassert solution('2\\n1') == 'Alice'\nassert solution('10\\n7 1 2 1 2 1 2 1 2 1 2 1 2 1 1 2 2 1') == 'Bob'\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"1\\n3 3 2 1\") == \"YES\"\nassert solution(\"1\\n2 3 4 5\") == \"NO\"\n\n\n\n\"\"\""
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('5\\n1 3 3 2 1') == 'YES'\nassert solution('5\\n1 2 3 4 5') == 'NO'\n\n\n\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3 4 5\") == \"YES\"\nassert solution(\"1 2 3 4 6\") == \"NO\"\nassert solution(\"1 2 3 4 5\") == \"NO\"\nassert solution(\"1 2 3 4 4\") == \"YES\"\nassert solution(\"1 2 3 4 4\") == \"YES\"\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1\\n1') == 'YES'\nassert solution('1\\n2') == 'NO'\nassert solution('1\\n3') == 'YES'\nassert solution('1\\n4') == 'YES'\nassert solution('1\\n5') == 'YES'\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1 3 3 2 1') == 'YES'\nassert solution('1 2 3 4 5') == 'NO'\n'''\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\n\nIn the second sample Filya should select x = 4 and add it to all of the array elements.\n'''\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"1 3 3 2 1\") == \"YES\"\nassert solution(\"1 2 3 4 5\") == \"NO\"\nassert solution(\"1 2 3 4 5\") == \"NO\"\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1\\n1') == 'YES'\nassert solution('2\\n1 2') == 'YES'\nassert solution('3\\n2 2') == 'NO'\nassert solution('3\\n3 2') == 'YES'\nassert solution('3\\n1 2 3') == 'NO'\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1\\n1\\n') == 'YES'\nassert solution('2\\n1\\n') == 'NO'\n\n\n\"\"\"\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"1 3 3 2 1\") == \"YES\"\nassert solution(\"1 2 3 4 5\") == \"NO\"\nassert solution(\"1 2 3 4 5\") == \"NO\"\nassert solution(\"1 3 3 2 1\") == \"YES\"\nassert solution(\"1 2 3 4 1\") == \"NO\"\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('ababa') == 2\nassert solution('ababaa') == 2\nassert solution('ababab') == 1\nassert solution('abab') == 0\nassert solution('a') == 1\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('ababa') == 2\nassert solution('ababaa') == 2\nassert solution('abbaba') == 0\nassert solution('aaaaa') == 0\nassert solution('abababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"ababa\") == \"2\"\nassert solution(\"ab\") == \"1\"\nassert solution(\"ba\") == \"1\"\nassert solution(\"baab\") == \"2\"\nassert solution(\"aa\") == \"0\"\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''5\nababa''') == '2'\nassert solution('''5\nababa''') == '2'\nassert solution('''7\naaaaa''') == '0'\nassert solution('''7\nababa''') == '2'\nassert solution('''8\nabbbbbba''') == '2'\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('ababa') == 2\nassert solution('ab') == 0\nassert solution('a') == 1\nassert solution('aa') == 0\nassert solution('aaaaa') == 1\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"ababa\") == \"2\"\nassert solution(\"baab\") == \"2\"\nassert solution(\"aabb\") == \"3\"\nassert solution(\"baaba\") == \"2\"\nassert solution(\"aabba\") == \"2\"\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('ababa') == '2'\nassert solution('ababac') == '2'\nassert solution('abc') == '0'\nassert solution('aabcdddd') == '3'\nassert solution('aaaaaaa') == '0'\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('ababa') == 2\nassert solution('acdcbca') == 0\nassert solution('cdcd') == 2\nassert solution('ccc') == 0\nassert solution('c') == 0\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''5\nababa''') == '2'\nassert solution('''7\nababa''') == '2'\nassert solution('''8\nababa''') == '2'\nassert solution('''9\nababa''') == '2'\nassert solution('''10\nababa''') == '2'\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"2\\nababa\\n\") == \"2\"\nassert solution(\"1\\nababa\\n\") == \"0\"\nassert solution(\"2\\nabababa\\n\") == \"2\"\nassert solution(\"2\\nbaaaaa\\n\") == \"0\"\nassert solution(\"2\\nbaaaaaa\\n\") == \"0\"\n"
    },
    {
        "number": 231,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(input('')) == ''\nassert solution(input('')) == ''\nassert solution(input('')) == ''\nassert solution(input('')) == ''\nassert solution(input('')) == ''\n"
    },
    {
        "number": 231,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''4 2''') == '2'\nassert solution('''8 5''') == '3'\nassert solution('''2 4''') == '2'\nassert solution('''3 7''') == '3'\nassert solution('''2 1''') == '1'\n"
    },
    {
        "number": 231,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(input()) == output\n\"\"\"\n\nimport sys"
    },
    {
        "number": 231,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('4 2') == '2'\nassert solution('8 5') == '3'\n\"\"\"\n"
    },
    {
        "number": 231,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('4 2\\n') == '2'\nassert solution('8 5\\n') == '3'\nassert solution('6 1\\n') == '3'\nassert solution('1 1\\n') == '0'\n\"\"\"\nimport sys"
    },
    {
        "number": 231,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('5 2') == 2\nassert solution('8 5') == 3\nassert solution('4 2') == 2\nassert solution('8 5') == 3\nassert solution('8 4') == 4\n"
    },
    {
        "number": 231,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('4 2\\n') == '2'\nassert solution('8 5\\n') == '3'\nassert solution('8 5\\n') == '3'\nassert solution('10 10\\n') == '6'\nassert solution('10 11\\n') == '7'\n"
    },
    {
        "number": 231,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == '2'\nassert solution(stdin) == '3'\nassert solution(stdin) == '1'\n\n'''\n"
    },
    {
        "number": 231,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1 2') == '1'\nassert solution('3 4') == '3'\nassert solution('2 3') == '1'\nassert solution('2 4') == '2'\nassert solution('3 5') == '2'\n"
    },
    {
        "number": 231,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(open(\"/home/olya/git/geekbrains/python-practice/data-structures/l2-7/test/input.txt\").read()) == \"2\\n\"\nassert solution(open(\"/home/olya/git/geekbrains/python-practice/data-structures/l2-7/test/input2.txt\").read()) == \"3\\n\"\nassert solution(open(\"/home/olya/git/geekbrains/python-practice/data-structures/l2-7/test/input3.txt\").read()) == \"1\\n\"\nassert solution(open(\"/home/olya/git/geekbrains/python-practice/data-structures/l2-7/test/input4.txt\").read()) == \"2\\n\"\nassert solution(open(\"/home/olya/git/geekbrains/python-practice/data-structures/l2-7/test/input5.txt\").read()) == \"0\\n\"\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1 1 2 2 1\\n1 2') == 'YES'\nassert solution('1 2\\n2 1') == 'NO'\nassert solution('1 2\\n1 2') == 'NO'\n\n\n'''\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\n'''\n5 2\n1 1 2 2 1\n1 2\n'''\n) == 'YES'\n\nassert solution(\n'''\n5 2\n1 1 2 2 1\n1 2\n'''\n) == 'NO'\n\nassert solution(\n'''\n6 4\n1 1 2 2 1 1\n1 2\n'''\n) == 'YES'\n\nassert solution(\n'''\n6 4\n1 1 2 2 1 1\n1 2\n'''\n) == 'NO'\n\nassert solution(\n'''\n7 7\n1 1 2 2 1 1 1\n1 2\n'''\n) == 'YES'"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''5 2\n1 1 2 2 1\n1 2\n''') == 'YES'\nassert solution('''5 2\n1 1 2 2 1\n1 2\n''') == 'NO'\nassert solution('''5 2\n2 3 4 5 6\n1 4\n''') == 'NO'\nassert solution('''4 2\n1 2 1 1\n1 2\n''') == 'YES'\nassert solution('''7 2\n1 1 1 1 1 1 1\n1 2\n''') == 'YES'\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"\".join(map(chr, [1, 1, 2, 2, 1]))) == \"YES\"\nassert solution(\"\".join(map(chr, [1, 2]))) == \"NO\"\nassert solution(\"\".join(map(chr, [1, 1, 1]))) == \"YES\"\nassert solution(\"\".join(map(chr, [2, 1]))) == \"NO\"\nassert solution(\"\".join(map(chr, [2, 1, 1, 1]))) == \"YES\"\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''5 2\n1 1 2 2 1\n1 2\n''') == 'YES'\nassert solution('''5 2\n1 1 2 2 1\n1 2\n''') == 'NO'\nassert solution('''5 3\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(\"2 2\") == \"YES\"\nassert solution(\"3 3\") == \"YES\"\nassert solution(\"2 2 2 1\") == \"YES\"\nassert solution(\"2 2 2 2\") == \"YES\"\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == 'YES'\n\"\"\"\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == 'YES'\nassert solution('1 1 1 2 1') == 'NO'\nassert solution('1 1 1 2 2') == 'YES'\nassert solution('2 2 1 1 2 2 1') == 'NO'\nassert solution('1 1 1 1 2 1') == 'NO'\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"3 2\") == \"YES\"\nassert solution(\"1 1 2 2 1\") == \"NO\"\nassert solution(\"1 2\") == \"NO\"\nassert solution(\"1 2 3\") == \"NO\"\nassert solution(\"1 1 3\") == \"YES\"\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''3\n3 5\n2 1\n4 2''') == 'Mishka'\nassert solution('''2\n6 1\n1 6''') == 'Chris'\nassert solution('''3\n1 5\n3 3\n2 2''') == 'Friendship is magic!^^'\n'''\n\n'''\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''3\n3 5\n2 1\n4 2''') == 'Mishka'\nassert solution('''2\n6 1\n1 6''') == 'Chris'\nassert solution('''3\n1 5\n3 3\n2 2''') == 'Friendship is magic!^^'\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == 'Chris'\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('3\\n3 5\\n2 1\\n4 2\\n') == \"Mishka\"\nassert solution('2\\n6 1\\n1 6\\n') == \"Chris\"\nassert solution('3\\n1 5\\n3 3\\n2 2\\n') == \"Friendship is magic!^^\"\nassert solution('3\\n1 5\\n3 3\\n2 2\\n') == \"Chris\"\nassert solution('3\\n1 5\\n3 3\\n2 2\\n') == \"Friendship is magic!^^\"\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('2\\n3\\n2\\n2') == \"Chris\"\nassert solution('3\\n5\\n2\\n4') == \"Mishka\"\nassert solution('1\\n6\\n1\\n6') == \"Friendship is magic!^^\"\nassert solution('1\\n1\\n1\\n1') == \"Friendship is magic!^^\"\nassert solution('6\\n5\\n2\\n4') == \"Chris\"\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"\"\"3\n3 5\n2 1\n4 2\"\"\") == \"Chris\"\nassert solution(\"\"\"2\n6 1\n1 6\"\"\") == \"Mishka\"\nassert solution(\"\"\"3\n1 5\n3 3\n2 2\"\"\") == \"Friendship is magic!^^\"\nassert solution(\"\"\"3\n2 3\n2 2\n2 1\"\"\") == \"Chris\"\nassert solution(\"\"\"2\n6 1\n1 6\"\"\") == \"Mishka\"\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('1\\n2') == 'Chris'\nassert solution('3\\n3') == 'Friendship is magic!^^'\nassert solution('3\\n1') == 'Chris'\nassert solution('4\\n2') == 'Mishka'\nassert solution('4\\n2') == 'Friendship is magic!^^'\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''3\n3 5\n2 1\n4 2''') == 'Chris'\nassert solution('''2\n6 1\n1 6''') == 'Mishka'\nassert solution('''3\n1 5\n3 3\n2 2''') == 'Friendship is magic!^^'\n'''"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('3\\n3 5\\n2 1') == 'Mishka'\nassert solution('2\\n6 1\\n1 6') == 'Chris'\nassert solution('3\\n1 5\\n3 3\\n2 2') == 'Friendship is magic!^^'\n\"\"\"\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('5') == 'Mishka'\nassert solution('3') == 'Chris'\nassert solution('2') == 'Friendship is magic!^^'\nassert solution('3') == 'Chris'\nassert solution('3') == 'Friendship is magic!^^'\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''2 4\n*.*.\n1211''') == 'YES'\nassert solution('''2 3\n111\n1*1\n111\n''') == 'NO'\nassert solution('''2 3\n**.*.\n1211''') == 'NO'\nassert solution('''2 3\n*.*.\n1111''') == 'YES'\nassert solution('''1 1\n*.*\n1*1''') == 'NO'\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdin[0]\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\n
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"3 3\\n111\\n1*1\\n111\") == \"YES\"\nassert solution(\"3 3\\n11111\\n1*1\\n111\") == \"NO\"\nassert solution(\"3 3\\n11111\\n1*1\\n111\") == \"YES\"\nassert solution(\"2 4\\n*.*.\\n1211\") == \"NO\"\nassert solution(\"2 4\\n*.*.\\n11111\") == \"YES\"\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution(' ') == ''\nassert solution('1 1') == 'YES'\nassert solution('1 2') == 'NO'\nassert solution('3 3') == 'YES'\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"2 3\\n111\\n1*1\\n111\\n\") == \"NO\"\nassert solution(\"1 2\\n0 0\\n1*1\\n0 0\\n\") == \"YES\"\nassert solution(\"1 1\\n1*1\\n\") == \"YES\"\nassert solution(\"1 2\\n1 1\\n1*1\\n\") == \"NO\"\nassert solution(\"3 3\\n1111\\n1*1\\n111\\n1*1\\n111\\n\") == \"NO\"\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('2 4') == 'YES'\nassert solution('3 3') == 'YES'\nassert solution('111') == 'YES'\nassert solution('*111') == 'NO'\nassert solution('*1*1') == 'YES'\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"3 3\\n111\\n1*1\\n111\\n\") == \"YES\"\nassert solution(\"2 4\\n*.*.\\n1211\\n\") == \"NO\"\nassert solution(\"1 4\\n0.0.\\n*\\n1*\") == \"NO\"\nassert solution(\"1 1\\n*\") == \"NO\"\nassert solution(\"2 1\\n1.0\\n*\") == \"NO\"\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('68') == '3'\n\nassert solution('127') == '3'\n\nassert solution('100') == '1'\n\nassert solution('16') == '2'\n\nassert solution('5') == '0'"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\n'''\n68\n'''\n    ) == '3'\n\nassert solution(\n'''\n59\n'''\n    ) == '3'\n\nassert solution(\n'''\n1000\n'''\n    ) == '9'\n\nassert solution(\n'''\n1111\n'''\n    ) == '0'\n\nassert solution(\n'''\n1000000000000000\n'''\n    ) == '99999999999999'\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\n'''\n68\n'''\n) == '3'\n\nassert solution(\n'''\n102\n'''\n) == '2'\n\nassert solution(\n'''\n100\n'''\n) == '1'\n\nassert solution(\n'''\n898049\n'''\n) == '1'\n\nassert solution(\n'''\n829229\n'''\n) == '1'"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''68''') == '3'\n'''\n68\n'''\n\nassert solution('''91884''') == '3'\n'''\n91884\n'''\n\nassert solution('''567346''') == '0'\n'''\n567346\n'''\n\nassert solution('''1000000000''') == '3'\n'''\n1000000000\n'''\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(input()) == '3'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(input()) == \"23\"\n\n'''\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == '3'\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('68') == '3'\nassert solution('1') == '0'\nassert solution('1000000000') == '1000000000'\n\"\"\"\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('64') == '3'\nassert solution('68') == '3'\nassert solution('69') == '3'\nassert solution('7') == '1'\nassert solution('70') == '3'\n"
    },
    {
        "number": 236,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"-o-o--\") == \"YES\"\nassert solution(\"-o---\") == \"YES\"\nassert solution(\"ooo\") == \"YES\"\nassert solution(\"-o---o-\") == \"NO\"\nassert solution(\"oo-oo-o\") == \"NO\"\n\n\n\"\"\""
    },
    {
        "number": 236,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('-o-o--') == 'YES'\nassert solution('-o---') == 'YES'\nassert solution('ooo') == 'YES'\nassert solution('-o---o-') == 'NO'"
    },
    {
        "number": 236,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('-o-o--') == 'YES'\nassert solution('-o---') == 'YES'\nassert solution('ooo') == 'YES'\nassert solution('-o---o-') == 'NO'\nassert solution('--o--') == 'YES'\n"
    },
    {
        "number": 236,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('-o-o--') == 'YES'\nassert solution('-o---') == 'YES'\nassert solution('ooo') == 'YES'\nassert solution('-o---o-') == 'NO'\nassert solution('--') == 'YES'\n"
    },
    {
        "number": 236,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('-o---o-') == 'YES'\nassert solution('ooo') == 'YES'\nassert solution('-o---o--') == 'NO'\nassert solution('ooo') == 'NO'\nassert solution('-o-o-o-o-o-') == 'YES'\n"
    },
    {
        "number": 236,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('ooo') == \"YES\"\nassert solution('---') == \"YES\"\nassert solution('----') == \"NO\"\nassert solution('o--o') == \"YES\"\nassert solution('-o-o-o-o-') == \"YES\"\n"
    },
    {
        "number": 236,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('oo-o--') == 'YES'\nassert solution('-o---') == 'YES'\nassert solution('ooo') == 'YES'\nassert solution('-o-o') == 'YES'\nassert solution('-o-o-o') == 'NO'\n"
    },
    {
        "number": 236,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"-o-o--\") == \"YES\"\nassert solution(\"-o---\") == \"YES\"\nassert solution(\"ooo\") == \"YES\"\nassert solution(\"-o---o-\") == \"NO\"\nassert solution(\"-o---o---o-o\") == \"NO\""
    },
    {
        "number": 236,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('') == 'YES'\nassert solution('-o-o--') == 'YES'\nassert solution('-o---') == 'YES'\nassert solution('ooo') == 'YES'\nassert solution('-o-o--o') == 'YES'\n"
    },
    {
        "number": 236,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('-o-o--') == 'YES'\nassert solution('-o---') == 'YES'\nassert solution('ooo') == 'YES'\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''4 6 2''') == '2'\nassert solution('''3 10 3''') == '4'\nassert solution('''3 6 1''') == '3'\nassert solution('''1 10 1''') == '1'\nassert solution('''100000 100000 1''') == '1'\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"4 6 2\") == \"2\"\nassert solution(\"3 10 3\") == \"4\"\nassert solution(\"3 6 1\") == \"3\"\nassert solution(\"1 1 1\") == \"0\"\nassert solution(\"1 1 1 1\") == \"0\"\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('4 6 2') == '2'\nassert solution('3 10 3') == '4'\nassert solution('3 6 1') == '3'\nassert solution('2 3 1') == '4'\nassert solution('2 1 1') == '2'\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"6\"\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1 1 1') == '1'\nassert solution('2 2 1') == '1'\nassert solution('2 2 2') == '2'\nassert solution('5 1 3') == '4'\nassert solution('8 6 4') == '6'\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''4 6 2''') == '2'\nassert solution('''3 10 3''') == '4'\nassert solution('''3 6 1''') == '3'\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('3 10 3') == '4'\nassert solution('4 6 2') == '2'\nassert solution('3 6 1') == '3'\nassert solution('2 2 2') == '0'\nassert solution('4 1 2') == '2'\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('4 6 2') == '2'\nassert solution('3 10 3') == '4'\nassert solution('3 6 1') == '3'\n\n\"\"\"\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''7 3 10\n2 -4 15 -3 4 8 3''') == '7'\nassert solution('''5 2 1000\n-13 -4 -9 -20 -11''') == '0'\nassert solution('''7 3 10\n2 -4 15 -3 4 8 3''') == '7'\nassert solution('''7 3 10\n-13 -4 -9 -20 -11''') == '0'\nassert solution('''7 3 10\n-13 -4 -9 -20 -11''') == '0'\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"\"\"7 3 10\"\"\") == \"7\"\nassert solution(\"\"\"5 2 1000\"\"\") == \"0\"\nassert solution(\"\"\"-13 -4 -9 -20 -11\"\"\") == \"0\"\n\"\"\"\nimport sys"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('4 3 5') == '6'\nassert solution('5 2 1000') == '0'\nassert solution('1 1 100') == '100'\nassert solution('100 100 100') == '100'\nassert solution('4 5 2') == '2'\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdin\n\n\"\"\"\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\n'''7 3 10\n2 -4 15 -3 4 8 3''') == '7'\nassert solution(\n'''5 2 1000\n-13 -4 -9 -20 -11''') == '0'\nassert solution(\n'''5 3 100000\n-13 -4 -9 -20 -11''') == '0'\nassert solution(\n'''5 3 100000000\n-13 -4 -9 -20 -11''') == '0'\nassert solution(\n'''5 4 2''') == '2'\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == '7'\nassert stdout == '7'\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('4\\n-13 -4 -9 -20 -11\\n2\\n1000') == '2'\nassert solution('7\\n-13 -4 -9 -20 -11\\n2\\n1000') == '7'\nassert solution('1\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100\\n') == '2'\nassert solution('2\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100\\n') == '2'\nassert solution('5\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100\\n') == '2'\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == ''\n\n'''\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('5 3 10\\n2 -4 15 -3 4 8 3\\n') == '7'\nassert solution('5 2 1000\\n-13 -4 -9 -20 -11\\n') == '0'\n\n\"\"\"\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('5 2 1000') == '7'\nassert solution('7 3 10') == '7'\nassert solution('2 -4 15 -3 4 8 3') == '7'\nassert solution('-13 -4 -9 -20 -11') == '0'\nassert solution('-14 -4 -9 -20 -11') == '0'\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"1 1\") == \"1 1\"\nassert solution(\"0 10\") == \"0 1\"\nassert solution(\"0 10\") == \"0 10\"\nassert solution(\"0 10\") == \"0 9\"\nassert solution(\"0 10\") == \"0 8\"\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(1, 1) == '1 1'\nassert solution(0, 10) == '0 1'\nassert solution(10, 0) == '1 0'\nassert solution(10, 10) == '0 0'\nassert solution(10, 1) == '0 9'\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(input) == '0 1\\n0 10\\n0 0\\n0 9'\nassert solution(input2) == '1 1\\n0 0\\n1 0\\n0 1'\nassert solution(input3) == '0 1\\n0 10\\n0 0\\n0 9'\nassert solution(input4) == '0 1\\n0 10\\n0 0\\n0 9'\nassert solution(input5) == '1 1\\n0 0\\n1 0\\n0 1'\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(input( )) == \"0 1\\n0 10\\n0 0\\n0 9\"\nassert solution(input( )) == \"1 1\\n0 0\\n1 0\\n0 1\"\nassert solution(input( )) == \"1 1\\n0 0\\n1 0\\n0 1\"\nassert solution(input( )) == \"0 1\\n0 10\\n0 0\\n0 9\"\nassert solution(input( )) == \"0 1\\n0 10\\n0 0\\n0 9\"\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1 1') == '1 1'\nassert solution('0 10') == '0 1'\nassert solution('1 1 1 1 1 1') == '1 1'\nassert solution('1 1 1 1 1 1') == '1 1'\nassert solution('1 1 1 1 1 1') == '1 1'\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"1 1\") == \"1 1\\n0 0\\n1 0\\n0 1\"\nassert solution(\"0 10\") == \"0 1\\n0 10\\n0 0\\n0 9\"\nassert solution(\"0 10\\n0 0\") == \"0 1\\n0 10\\n0 0\\n0 9\"\nassert solution(\"1 1\\n0 0\") == \"1 1\\n0 0\\n1 0\\n0 1\"\nassert solution(\"0 0\\n0 0\") == \"0 0\\n0 0\\n0 0\\n0 0\"\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''1 1''') == '1 1'\nassert solution('''0 10''') == '0 1'\nassert solution('''100 10''') == '0 1'\nassert solution('''0 10''') == '0 1'\nassert solution('''100 10''') == '0 1'\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\n\"0 1\") == \"0 1\\n0 10\\n0 0\\n0 9\"\nassert solution(\"1 1\") == \"1 1\\n0 0\\n1 0\\n0 1\"\nassert solution(\"2 2\") == \"2 2\\n0 0\\n1 0\\n0 1\\n0 1\"\nassert solution(\"10 10\") == \"2 2\\n0 0\\n1 0\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\"\nassert solution(\"1 10\") == \"2 2\\n0 0\\n1 0\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\"\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1 1') == '1 1'\nassert solution('0 10') == '0 1 0 1'\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"0 1\\n0 1\\n0 10\\n0 9\") == \"0 1\\n0 1\\n0 10\\n0 9\"\nassert solution(\"1 1\") == \"1 1\\n0 0\\n1 0\\n0 1\"\nassert solution(\"0 10\") == \"0 1\\n0 10\\n0 0\\n0 9\"\n\n\nimport sys\n\nclass TestCases:\n    def __init__(self):\n        self.test_cases = []\n\n    def add_test(self, *args):\n        self.test_cases.append(TestCase(*args))\n\n    def __str__(self):\n        return \"\\n\".join([str(tc) for tc in self.test_cases])\n\nclass TestCase:\n    def __init__(self, *args):\n        self.input = args[0]\n        self.expected_output = args[1]\n\ntc = TestCases()\ntc.add_test((\"0 1\\n0 1\\n0 10\\n0 9\", \"0 1\\n0 1\\n0 10\\n0 9\"), \"0 1\\n0 1\\n0 10\\n0 9\")\ntc.add_test((\"1 1\", \"1 1\\n0 0\\n1 0\\n0 1\"), \"1 1\\n0 0\\n1 0\\n0 1\")\ntc.add_test((\"0 10\", \"0 1\\n0 10\\n0 0\\n0 9\"), \"0 1\\n0 10\\n0 0\\n0 9\")\n\nfor line in sys.stdin:\n    tc.add_test(line, solution(line))\n\nsys.stdin = sys.__stdin__\n\nprint(\"\\n\\n\\n\".join([str(tc) for tc in tc.test_cases]))\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('003512') == '30021'\nassert solution('199966633300') == '3036366999'\nassert solution('1234567890') == '123456789'\nassert solution('123456789') == '123456789'\nassert solution('1234567890123456789012345678901234567890123456789012345678901234567890') == '1234567890123456789012345678901234567890123456789012345678901234567890'\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('003512') == '30021'\nassert solution('2019') == '20016'\nassert solution('0') == '0'\nassert solution('1') == '1'\nassert solution('001') == '101'\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(input()) == output()\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"003512\") == \"30021\"\nassert solution(\"99951337\") == \"299927\"\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('123456789') == '123456789'\nassert solution('0123456789') == '0123456789'\nassert solution
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(input()) == '3036366999'"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"003512\") == \"30021\"\nassert solution(\"199966633300\") == \"3036366999\"\nassert solution(\"1356\") == \"3156\"\nassert solution(\"3994\") == \"3999\"\nassert solution(\"00\") == \"0\"\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''003512''') == '30021'\nassert solution('''99966633300''') == '3036366999'\nassert solution('''99999999966633300''') == '9999999996666636330'\nassert solution('''9999966633300''') == '9999996666636330'\nassert solution('''999999666336333''') == '9999996666636333'\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(input()) == \"3036366999\"\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('003512') == '30021'\nassert solution('199866633300') == '3036366999'\nassert solution('0') == '0'\nassert solution('0') == '0'\n"
    },
    {
        "number": 241,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\n'''3 1 1 3\n2'''\n) == 'Correct'\nassert solution(\n'''2 1 1 3\n2'''\n) == 'Correct'\nassert solution(\n'''3 1 1 3\n1\n'''\n) == 'Correct'\nassert solution(\n'''3 1 1 3\n3\n'''\n) == 'Correct'\nassert solution(\n'''3 1 1 3\n1\n'''\n) == 'Correct'\n"
    },
    {
        "number": 241,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('2 1 1 2\\n1\\n') == 'Correct'\nassert solution('2 1 1 3\\n2\\n') == 'Incorrect'\nassert solution('2 1 1 3\\n2\\n') == 'Correct'\nassert solution('2 1 1 3\\n2\\n') == 'Correct'\nassert solution('2 1 1 3\\n2\\n') == 'Correct'\n"
    },
    {
        "number": 241,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('2 1 1 2') == 'Correct'\nassert solution('3 1 1 3') == 'Correct'\nassert solution('2 1 1 3') == 'Incorrect'\nassert solution('1') == 'Correct'\nassert solution('1 1 1 1') == 'Correct'\n"
    },
    {
        "number": 241,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\n\"2 1 1 2\") == 'Correct'\nassert solution(\n\"3 1 1 3\") == 'Correct'\nassert solution(\n\"2 1 1 3\") == 'Incorrect'\nassert solution(\n\"3 1 1 4\") == 'Correct'\nassert solution(\n\"4 1 1 5\") == 'Correct'\n"
    },
    {
        "number": 241,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('2 1 1 2') == 'Correct'\nassert solution('2 1 1 3') == 'Incorrect'\nassert solution('3 1 1 3') == 'Correct'\nassert solution('3 1 1 3') == 'Incorrect'\nassert solution('3 1 1 3') == 'Correct'\n"
    },
    {
        "number": 241,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('2 1 1 2') == 'Correct'\nassert solution('3 1 1 3') == 'Correct'\nassert solution('2 1 1 3') == 'Incorrect'\n\"\"\"\n"
    },
    {
        "number": 241,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"2 1 1 2\") == \"Correct\"\nassert solution(\"3 1 1 3\") == \"Correct\"\nassert solution(\"2 1 1 3\") == \"Incorrect\"\n\nprint(\"All test passed successfully.\")\n"
    },
    {
        "number": 241,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''2 1 1 2''') == 'Correct'\nassert solution('''3 1 1 3''') == 'Correct'\nassert solution('''2 1 1 3''') == 'Incorrect'\nassert solution('''2 1 1 3''') == 'Incorrect'\nassert solution('''1 1 1 1''') == 'Correct'\n"
    },
    {
        "number": 241,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''2 1 1 2\n1''') == 'Correct'\nassert solution('''3 1 1 3\n2''') == 'Correct'\nassert solution('''2 1 1 3\n2''') == 'Incorrect'"
    },
    {
        "number": 241,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"2 1 1 2\") == \"Correct\"\nassert solution(\"3 1 1 3\") == \"Correct\"\nassert solution(\"2 1 1 3\") == \"Incorrect\"\n\n\n\n\"\"\"\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1') == ''\nassert solution('5') == '5'\nassert solution('5123') == '5'\nassert solution('123') == '1'\nassert solution('321') == '1'\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"5\"\nassert solution(\"5\") == \"5 6 7 8 9\"\nassert solution(\"5\") == \"0\"\nassert solution(\"100\") == \"0\"\nassert solution(\"1000\") == \"0\"\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1') == '5'\nassert solution('5') == '5 6 7 8 9'\nassert solution('5') == '5 6 7 8 9'\nassert solution('5') == '5 6 7 8 9'\nassert solution('5') == '5 6 7 8 9'\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"5\"\nassert solution(\"5\") == \"5 6 7 8 9\"\nassert solution(\"5\") == \"0\"\nassert solution(\"4\") == \"0\"\nassert solution(\"2\") == \"0\"\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''1''') == '5'\nassert solution('''2''') == '5'\nassert solution('''3''') == '5'\nassert solution('''4''') == '5'\nassert solution('''5''') == '5'\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''1''') == '1'\nassert solution('''2''') == '0'\nassert solution('''5''') == '1'\nassert solution('''5010''') == '2'\nassert solution('''501030''') == '3'\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"\\n\") == \"\"\nassert solution(\"1\\n\") == \"\"\nassert solution(\"123\\n\") == \"\"\nassert solution(\"10\\n\") == \"\"\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"5\"\nassert solution(\"5\") == \"5 6 7 8 9\"\nassert solution(\"5\") == \"0\"\nassert solution(\"15\") == \"0\"\nassert solution(\"0\") == \"\"\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''1''') == '1'\nassert solution('''5''') == '5'\nassert solution('''2''') == '0'\nassert solution('''3''') == '1'\nassert solution('''4''') == '2'\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == ''\n'''"
    },
    {
        "number": 243,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"2 3 2\\n2 1\\n1 2 3\\n1 2 2\\n2 2 1\") == \"2 2\"\nassert solution(\"4 5 3\\n1 2 3\\n1 2 5\\n4 2 1\\n2 3 2\\n1 4 4\\n1 3 3\") == \"3 3 3\"\nassert solution(\"3 4 3\\n1 2 3\\n1 2 5\\n4 2 1\\n2 3 2\\n1 4 4\\n1 3 3\") == \"2 2 2\"\n\n\n-----\n\n\n-----\n\n\n-----\n\n-----\n\"\"\"\n"
    },
    {
        "number": 243,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('2 3 2\\n2 1\\n1 2 3\\n1 2 2\\n2 2 1') == '2 2'\nassert solution('2 3 2\\n2 1\\n1 2 3\\n1 2 2\\n2 2 1') == '3 3 3'\nassert solution('4 5 3\\n1 2 3\\n1 2 5\\n4 2 1\\n2 3 2\\n1 4 4\\n1 3 3') == '3 3 3'\nassert solution('2 3 4\\n1 2 1\\n3 2 1\\n4 2 1\\n1 3 1\\n2 3 1\\n1 4 1\\n1 2 3\\n2 3 1\\n1 4 1') == '1 2'\nassert solution('2 3 4\\n1 2 1\\n3 2 1\\n4 2 1\\n1 3 1\\n2 3 1\\n1 4 1\\n1 2 3\\n2 3 1\\n1 4 1') == '2 2'\n"
    },
    {
        "number": 243,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('2 3 2\\n2 1\\n1 2 3\\n1 2 2\\n2 2 1\\n1 2 3\\n1 2 5\\n4 2 1\\n2 3 2\\n1 4 4\\n1 3 3\\n') == '2 2\\n3 3 3'\nassert solution('4 5 3\\n1 2 3\\n1 2 5\\n4 2 1\\n2 3 2\\n1 4 4\\n1 3 3\\n') == '3 3 3\\n2 2 2'\n\"\"\"\n"
    },
    {
        "number": 243,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('2 3 2') == '2 2'\nassert solution('2 1') == '2 2'\nassert solution('1 2 3') == '2 2'\nassert solution('1 2 5') == '3 3 3'\nassert solution('1 2 1') == '3 3'\n"
    },
    {
        "number": 243,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(input) == output\n"
    },
    {
        "number": 243,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == '3 3 3'\nassert stdin == ''\n\"\"\"\n"
    },
    {
        "number": 243,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('2 2') == '2 2'\nassert solution('2 3 2') == '2 2'\nassert solution('2 1') == '2 2'\nassert solution('2 4 3') == '2 3 3'\nassert solution('3 4 5') == '2 2'\n"
    },
    {
        "number": 243,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"2 3 2\") == \"2 2\"\nassert solution(\"2 1\") == \"2 2\"\nassert solution(\"1 2 3\") == \"2 2\"\nassert solution(\"1 2 2\") == \"2 2\"\nassert solution(\"2 2 1\") == \"2 2\"\n"
    },
    {
        "number": 243,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(input) == output\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 243,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\n\n\n\nimport sys\nsys.path.append('../')\nfrom tools.python.geometry import min_max, min_dist\nimport numpy as np\nstdin = sys.stdin.read()\n\nn, m, k = map(int, stdin.split())\nx = list(map(int, stdin.split()))\n\nx_min, x_max = min_max(x)\n\np = np.zeros(shape=(n, n))\nfor i in range(m):\n    u, v, w = map(int, stdin.split())\n    p[u-1, v-1] = p[v-1, u-1] = max(w, p[u-1, v-1])\n\nd_max = np.zeros(shape=(n, k))\nfor i in range(n):\n    d_max[i, :] = min_dist(x_min, x_max, i, p, k)\n\nfor i in range(k):\n    print(int(d_max[:, i].max()))\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('4\\n2\\n') == '1'\nassert solution('1\\n1\\n') == '0'\nassert solution('2\\n1\\n') == '0'\nassert solution('10\\n9\\n') == '0'\nassert solution('100\\n99\\n') == '0'\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"\n4\n2\n\"\"\"\n) == \"1\"\n\nassert solution(\n\"\"\"\n1\n1\n\"\"\"\n) == \"0\"\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''4\n2''') == '1'\nassert solution('''1\n1''') == '0'\nassert solution('''9\n2''') == '3'\nassert solution('''1\n0''') == '0'\nassert solution('''9\n8''') == '7'\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('5\\n2') == '1'\nassert solution('1\\n1') == '0'"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == '1'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''4\n2''') == '1'\nassert solution('''1\n1''') == '0'\nassert solution('''5\n1''') == '0'\nassert solution('''7\n2''') == '2'\nassert solution('''0\n1''') == '0'\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\n\n\n\"\"\"\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == '1'\n\"\"\""
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('4\\n2\\n') == '1\\n'\nassert solution('1\\n1\\n') == '0\\n'\nassert solution('0\\n0\\n') == '0\\n'"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''5''') == 'YES'\nassert solution('''4''') == 'NO'\nassert solution('''1 2 10 50''') == 'YES'\nassert solution('''2 2 30 30''') == 'NO'\nassert solution('''2 2 30 30''') == 'NO'\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''0 0 2 3''') == \"YES\"\nassert solution('''0 3 3 5''') == \"NO\"\nassert solution('''2 0 5 2''') == \"YES\"\nassert solution('''3 2 5 5''') == \"NO\"\nassert solution('''2 2 3 3''') == \"NO\"\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('0 0 2 3\\n0 3 3 5\\n2 0 5 2\\n3 2 5 5') == 'YES'\nassert solution('0 0 2 3\\n0 3 3 5\\n2 0 5 2\\n3 2 5 5') == 'NO'\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == 'YES'\nassert solution(stdin) == 'NO'\n'''\nimport sys\n\nsys.setrecursionlimit(10 ** 6)\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''0 0 2 3\n0 3 3 5\n2 0 5 2\n3 2 5 5\n2 2 3 3''') == 'YES'\nassert solution('''0 0 2 3\n0 3 3 5\n2 0 5 2\n3 2 5 5\n2 2 3 3''') == 'NO'\nassert solution('''0 0 2 3\n0 3 3 5\n2 0 5 2\n3 2 5 5''') == 'NO'\nassert solution('''1\n0 0 2 3\n0 3 3 5\n2 0 5 2\n3 2 5 5''') == 'NO'\n'''\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"0 0 2 3\") == \"YES\"\nassert solution(\"0 3 3 5\") == \"YES\"\nassert solution(\"2 0 5 2\") == \"YES\"\nassert solution(\"3 2 5 5\") == \"YES\"\nassert solution(\"2 2 3 3\") == \"NO\"\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''0 0 2 3\n0 3 3 5\n2 0 5 2\n3 2 5 5\n2 2 3 3''') == 'YES'\nassert solution('''0 0 2 3\n0 3 3 5\n2 0 5 2\n3 2 5 5\n2 2 3 3''') == 'NO'\nassert solution('''2 4 2 4\n2 2 4 2\n4 2 2 4\n4 2 2 2\n2 2 4 2\n2 2 2 2\n2 2 4 2\n2 2 4 2''') == 'YES'\nassert solution('''2 4 2 4\n2 2 4 2\n4 2 2 4\n4 2 2 2\n2 2 4 2\n2 2 2 2\n2 2 4 2\n2 2 4 2''') == 'NO'\nprint('test passed')\n'''"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('0 0 2 3\\n0 3 3 5\\n2 0 5 2\\n3 2 5 5\\n2 2 3 3') == 'YES'\nassert solution('1 1 2 3\\n1 2 2 5\\n2 1 5 2\\n3 2 5 5') == 'NO'\nassert solution('2 2 3 3\\n2 2 3 3\\n2 2 3 3') == 'YES'\nassert solution('0 0 2 3\\n0 3 3 5\\n2 0 5 2\\n3 2 5 5') == 'NO'\nassert solution('1 1 2 3\\n1 2 2 5\\n2 1 5 2\\n3 2 5 5') == 'NO'\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''0 0 2 3\n0 3 3 5\n2 0 5 2\n3 2 5 5\n2 2 3 3''') == 'YES'\nassert solution('''0 0 2 3\n0 3 3 5\n2 0 5 2\n3 2 5 5\n2 2 3 3''') == 'NO'\nassert solution('''10 10 11 21\n
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('10 9') == '1'\nassert solution('25 20') == '0'\nassert solution('10 9') == '1'\nassert solution('13 0') == '2'\nassert solution('4 13') == '0'\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''12 1''') == '3'\nassert solution('''25 20''') == '0'\nassert solution('''10 9''') == '1'\n\nprint('Test passed')\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1\\n1') == '0'\nassert solution('10\\n9') == '1'\nassert solution('100\\n9') == '0'\nassert solution('1000\\n9') == '1'\nassert solution('99\\n9') == '1'\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''12 1''') == '3'\nassert solution('''25 20''') == '0'\nassert solution('''10 9''') == '1'\nprint(solution(stdin))\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1 1') == '0'\nassert solution('12 1') == '3'\nassert solution('25 20') == '0'\nassert solution('10 9') == '1'\nassert solution('40 10') == '0'\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1 1') == '0'\nassert solution('10 9') == '1'\nassert solution('25 20') == '0'\nassert solution('12 1') == '3'\nassert solution('11 22') == '2'\n\n\n\"\"\"\n\nN, S = map(int, stdin.split())\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1 1') == '0'\nassert solution('12 1') == '3'\nassert solution('25 20') == '0'\nassert solution('10 9') == '1'\nassert solution('10 2') == '0'\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(input(\"\")) == \"3\"\n\"\"\""
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1\\n2 3\\n4 5') == 'YES'\nassert solution('1\\n2 1\\n4 5\\n5 4\\n2 3') == 'NO'\nassert solution('1\\n0 0\\n-1 -1\\n2 3') == 'YES'\n\n\n-----\n\n\"\"\"\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''0 0\n1 0\n2 1\n1 1\n2 3''') == \"YES\"\nassert solution('''0 0\n0 1\n1 1\n1 -1\n2 2''') == \"NO\"\nassert solution('''0 0\n0 1\n1 1\n1 -1\n2 2\n2 1\n2 2\n2 3\n2 3\n2 4\n2 4\n2 5''') == \"YES\"\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''0 0\n0 1\n1 1\n1 -1\n2 2''') == \"YES\"\nassert solution('''0 0\n1 0\n2 1\n1 1\n2 3''') == \"NO\"\nassert solution('''0 0\n1 0\n2 1\n1 1\n2 3''') == \"YES\"\nassert solution('''0 0\n0 1\n1 1\n1 -1\n2 2\n2 3''') == \"NO\"\nassert solution('''0 0\n-1 0\n0 1\n-1 1\n1 1\n0 2\n-2 1\n-2 3\n-2 3\n-1 3\n-2 3''') == \"YES\"\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == 'YES'\n\"\"\"\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''0 0\n0 1\n1 1\n1 -1\n2 2''') == 'YES'\nassert solution('''0 0\n1 0\n2 1\n1 1\n2 3''') == 'NO'\nassert solution('''0 0\n0 1\n1 1\n1 -1\n2 2\n''') == 'YES'\nassert solution('''0 0\n0 1\n1 1\n1 -1\n2 2\n''') == 'NO'\nassert solution('''0 0\n0 1\n1 1\n1 -1\n2 2\n1 2\n''') == 'NO'\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('4\\n0 0\\n0 1\\n1 1\\n1 -1') == 'YES'\nassert solution('3\\n0 0\\n0 1\\n1 1') == 'NO'\nassert solution('5\\n0 0\\n0 1\\n1 1\\n2 2') == 'YES'\nassert solution('5\\n0 0\\n0 1\\n1 1\\n2 3') == 'NO'\nassert solution('1\\n0 0') == 'YES'\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('1 2 3 4 5 6 7 8 9 10') == 'YES'\nassert solution('1 1 1 1 1 1 1 1 1 1 1') == 'NO'\nassert solution('1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10') == 'YES'\nassert solution('1 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10') == 'YES'\nassert solution('1 1 1 1 1 1 1 1 1 1 1') == 'NO'\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('0 0') == 'NO'\nassert solution('0 1') == 'NO'\nassert solution('1 1') == 'YES'\nassert solution('0 0 1 1') == 'YES'\nassert solution('1 1 1') == 'YES'\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"0 0\\n0 1\\n1 1\\n1 -1\\n2 2\\n\") == \"YES\"\nassert solution(\"0 0\\n0 1\\n1 1\\n1 -1\\n2 2\\n\") == \"NO\"\nassert solution(\"0 0\\n0 1\\n1 1\\n1 -1\\n2 2\\n\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdin\"\"\"\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1 2 2 1') == '6'\nassert solution('1 1 1 2') == '31'\nassert solution('2 12 3 1') == '0'"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n\nfrom collections import defaultdict\nfrom functools import lru_cache\nfrom typing import List, Tuple\n\nMOD = 10 ** 9 + 7\nN = int(input())\nM = int(input())\nK = int(input())\nT = int(input())\n\ntotal = (2 * K + 1) ** 2 * T\n\n@lru_cache(maxsize=None)\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"1 2 2 1\") == \"6\"\nassert solution(\"1 1 1 2\") == \"31\"\nassert solution(\"2 12 3 1\") == \"0\"\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"1 2 2 1\") == \"6\"\nassert solution(\"1 1 1 2\") == \"31\"\nassert solution(\"2 12 3 1\") == \"0\"\nassert solution(\"2 11 2 1\") == \"1\"\nassert solution(\"1 1 1 2\") == \"0\"\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\n    '1 2 2 1'\n) == '6'\nassert solution(\n    '1 1 1 2'\n) == '31'\nassert solution(\n    '2 12 3 1'\n) == '0'\n\n\n\"\"\"\nfrom functools import lru_cache\n\n\n@lru_cache(maxsize=None)\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1 2 2 1') == '6'\nassert solution('1 1 1 2') == '31'\nassert solution('2 12 3 1') == '0'\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == expected\n\"\"\"\n\nimport sys\nfrom math import factorial"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"1 2 2 1\") == \"6\"\nassert solution(\"1 1 1 2\") == \"31\"\nassert solution(\"2 12 3 1\") == \"0\"\nassert solution(\"1 1 1 2\") == \"0\"\nassert solution(\"1 2 2 1\") == \"6\"\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == \"6\"\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''1 2 2 1''') == '6'\nassert solution('''1 1 1 2''') == '31'\nassert solution('''2 12 3 1''') == '0'"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(input()) == output\n\"\"\""
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"5 3 10 50\") == \"1\"\nassert solution(\"4 3 10 50\") == \"0\"\nassert solution(\"2 3 10 50\") == \"2\"\nassert solution(\"3 10 50\") == \"2\"\nassert solution(\"100 1 10 50\") == \"100\"\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('5 250 185 230\\n0 185 250\\n') == '1\\n230'\nassert solution('3 250 185 230\\n0 185 250\\n') == '0'\nassert solution('2 300 185 230\\n0 300\\n') == '2\\n185 230'\nassert solution('3 60 4 59\\n4 3 59') == '2\\n60 59'\nassert solution('1 1 1\\n1') == '0'\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('3 250 185 230') == '1'\nassert solution('4 250 185 230') == '0'\nassert solution('2 300 185 230') == '2'\n\n\n-----Alternate Solutions (Shorter)-----\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('2 300 185 230') == '0'\nassert solution('0 300') == '2'\nassert solution('4 250 185 230') == '0'\nassert solution('0 400') == '1'\nassert solution('3 250 185 230') == '1'\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\n\n\"\"\"\n\n4 50 50 100\n0 10 30 50\n\n1\n20 30 40 50\n30 40 45 50\n\n\"\"\""
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('3 250 185 230') == '1'\nassert solution('4 250 185 230') == '0'\nassert solution('2 300 185 230') == '2'\nassert solution('0 300') == '2'\nassert solution('0 200') == '0'\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\n'''\n2\n100 30\n40 10\n\n'''\n) == '942477.796077000'\n\nassert solution(\n'''\n4\n1 1\n9 7\n1 4\n10 7\n\n'''\n) == '3983.539484752'\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''2\n100 30\n40 10\n''') == '942477.796077000'\n\nassert solution('''4\n1 1\n9 7\n1 4\n10 7\n''') == '3983.539484752'\n'''\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"2\\n100 30\\n40 10\\n\") == \"942477.796077000\"\nassert solution(\"4\\n1 1\\n9 7\\n1 4\\n10 7\\n\") == \"3983.539484752\"\n\n\n-----\n\"\"\"\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\n'''\n1\n100 30\n40 10\n''') == '942477.796077000'\nassert solution(\n'''\n2\n100 30\n40 10\n''') == '3983.539484752'\nassert solution(\n'''\n4\n1 1\n9 7\n1 4\n10 7\n''') == '3983.539484752'\nassert solution(\n'''\n2\n1 1\n9 7\n1 4\n10 7\n''') == '3983.539484752'\nassert solution(\n'''\n3\n1 1\n9 7\n1 4\n10 7\n''') == '3983.539484752'\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"\"\nassert solution(\"1 2\") == \"\"\nassert solution(\"1 2 3 4\") == \"\"\nassert solution(\"1 2 3 4 5\") == \"\"\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('2\\n100 30\\n40 10') == '942477.796077000'\nassert solution('2\\n1 1\\n9 7\\n1 4\\n10 7') == '3983.539484752'\nassert solution('4\\n1 1\\n9 7\\n1 4\\n10 7') == '3983.539484752'\nassert solution('4\\n1 1\\n1 1\\n1 1\\n1 1') == '1.00000'\nassert solution('2\\n1 1\\n1 1\\n1 1') == '1.00000'\n\n\n-----Solution Summary-----\n\n* I first read the description of the problem and realized that the problem has simple solution.\n\n* I used brute force algorithm to solve this problem. For each possible cake order, I computed the volume of the cake and the maximum of the difference between the volumes. I decided to sort the cakes by increasing order of their volumes.\n\n* I made a few adjustments to the brute force algorithm, e.g., first I fixed the maximum of the difference between the volumes of the first two cakes, and then I checked that the sum of the differences between adjacent cakes is always greater than zero.\n\n* Time complexity is O(n^2).\n\n* The maximum possible total volume of the cake is given by $$ (n \\choose 2) \\cdot (\\max(r_i, r_j)^2 \\cdot h_i)$$, where $i, j$ are indices of the cakes.\n\n* It's given by $$ (n \\choose 2) \\cdot (\\max(r_i, r_j)^2 \\cdot h_i) + (n - 2) \\cdot (\\max(r_i, r_j)^2 \\cdot h_i)$$,\nwhere $$ (n \\choose 2) $$ is the number of ways to order the cakes, and $$ (\\max(r_i, r_j)^2 \\cdot h_i) $$ is the maximum volume of the cake with number $i$ placed on top of the cake number $j$.\n\n* Another solution can be derived from the brute force algorithm. The cakes are ordered by increasing order of the volumes. The maximum volume of the cake is the maximum of the differences between adjacent two cakes. The solution is $$ (n - 2) \\cdot (\\max(r_i, r_j)^2 \\cdot h_i) $$.\n\n* Time complexity is O(n^2) for the first solution, and O(nlogn) for the second solution.\n\"\"\"\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''2\n100 30\n40 10\n''') == '942477.796077000'\nassert solution('''4\n1 1\n9 7\n1 4\n10 7\n''') == '3983.539484752'\nassert solution('''3\n1 1\n9 7\n1 4\n10 7\n''') == '942477.796077000'\nassert solution('''5\n2 2\n7 5\n5 4\n7 6\n6 3\n''') == '942477.796077000'\nassert solution('''7\n2 2\n8 5\n5 4\n7 6\n6 3\n8 2\n''') == '942477.796077000'\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''2\n100 30\n40 10\n''') == '942477.796077000'\nassert solution('''4\n1 1\n9 7\n1 4\n10 7\n''') == '3983.539484752'\n\n\n'''\n\nimport sys"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''2\n100 30\n40 10\n''') == '942477.796077000'\nassert solution('''4\n1 1\n9 7\n1 4\n10 7\n''') == '3983.539484752'\n\n\n\n\"\"\"\nimport sys"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\n    \n\"\"\"\n\n\"\"\"\nOn each iteration of the outer loop you have to remove the number of towers from the height so that the height is divisible by $k$. \nThe height is divided by $k$ so its left over is the number of cubes to be removed.\nWe can calculate the cost of removing the number of cubes and the total height of the building, and take the minimum.\n\n\"\"\"\n\nn, k = [int(x) for x in stdin.readline().split()]\nheights = [int(x) for x in stdin.readline().split()]\n\ntotal_cost = 0\ntotal_height = 0\n\nfor height in heights:\n    if height > k:\n        total_cost += height - k\n    total_height += height\n\nprint(total_cost)"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''5 5\n3 1 2 2 4''') == '2'\nassert solution('''4 5\n2 3 4 5''') == '2'\nassert solution('''2 2\n1 1''') == '0'\nassert solution('''2 1\n1 2''') == '1'\nassert solution('''1 1\n1 1''') == '0'\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''5 5\n3 1 2 2 4\n''') == '2'\nassert solution('''4 5\n2 3 4 5\n''') == '2'\nassert solution('''8 1\n2 3 4 5 6 7 8\n''') == '8'\nassert solution('''10 1\n8 5 4 3 2 1 6 7 8 9 10\n''') == '18'\nassert solution('''10 3\n9 6 5 3 2 1 6 7 8 9 10\n''') == '22'\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''5 5\n3 1 2 2 4\n''') == '2'\nassert solution('''4 5\n2 3 4 5\n''') == '2'\nassert solution('''6 8\n1 2 3 4 5 6 7 8\n''') == '1'\nassert solution('''7 10\n5 6 7 8 9 10 11 12\n''') == '2'\nassert solution('''5 10\n9 1 2 3 4 5 6 7 8\n''') == '3'\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('5 5') == '2'\nassert solution('4 5') == '2'\nassert solution('1 2 2 3 4') == '2'\nassert solution('2 3 4 5') == '2'\nassert solution('2 1 2 3 4') == '2'\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('5 5\\n3 1 2 2 4') == '2'\nassert solution('4 5\\n2 3 4 5') == '2'\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"2\\n1\") == \"1\"\nassert solution(\"5 5\\n3 1 2 2 4\") == \"2\"\nassert solution(\"4 5\\n2 3 4 5\") == \"2\"\nassert solution(\"5 10\\n1 2 3 4 5\") == \"0\"\nassert solution(\"4 3\\n1 2 3\") == \"0\"\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('5 5\\n3 1 2 2 4\\n') == '2'\nassert solution('4 5\\n2 3 4 5\\n') == '2'\nassert solution('1 10\\n10\\n') == '0'\nassert solution('2 3\\n1 2\\n') == '2'\nassert solution('3 4\\n1 2 2\\n') == '3'\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"1 2 2 4\") == 2\nassert solution(\"1 2 2 4\") == 2\nassert solution(\"1 2 2 4\") == 2\nassert solution(\"1 2 2 4\") == 2\nassert solution(\"1 2 2 4\") == 2\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''5 5\n3 1 2 2 4''') == '2'\nassert solution('''4 5\n2 3 4 5''') == '2'\nassert solution('''6 4\n2 2 2 3 2 4''') == '3'\nassert solution('''6 4\n2 3 1 2 3 4''') == '3'\nassert solution('''6 4\n2 3 1 2 3 4''') == '3'\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\n\"\"\"\n\n\"\"\"\nACCEPTED\nRuntime: 164 ms, faster than 5.41% of Python3 online submissions for The Score of the Remaining Cards.\nMemory Usage: 14.3 MB, less than 69.57% of Python3 online submissions for The Score of the Remaining Cards.\n\"\"\""
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('5\\n5 -2 10 -1 4') == '6'\nassert solution('8\\n5 2 5 3 -30 -30 6 9') == '10'\nassert solution('3\\n-10 6 -15') == '0'\nassert solution('4\\n5 5 5 5 -30 -30 6 9') == '0'\nassert solution('2\\n-10 6 -15') == '0'\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('5\\n5 -2 10 -1 4') == '6'\nassert solution('8\\n5 2 5 3 -30 -30 6 9') == '10'\nassert solution('3\\n-10 6 -15') == '0'\nassert solution('7\\n2 3 -1 -1 0 1 -1 -1 1') == '8'\nassert solution('2\\n1 2 1') == '1'\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('5\\n5 -2 10 -1 4') == '6'\nassert solution('8\\n5 2 5 3 -30 -30 6 9') == '10'\nassert solution('3\\n-10 6 -15') == '0'\nassert solution('8\\n-10 -9 -3 -5 -7 -6 -8 -2 -4 -1') == '0'\n\n\n\n\"\"\"\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == '6'\nassert solution(stdin) == '10'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('5\\n5 -2 10 -1 4') == '6'\nassert solution('8\\n5 2 5 3 -30 -30 6 9') == '10'\nassert solution('3\\n-10 6 -15') == '0'\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1\\n-10\\n5\\n-15') == '6'\nassert solution('1\\n2\\n5\\n-30\\n-30\\n6\\n9') == '10'\nassert solution('1\\n2\\n5\\n-30\\n-30\\n6\\n9') == '0'\nassert solution('1\\n2\\n5\\n-30\\n-30\\n6\\n9') == '0'\nassert solution('1\\n2\\n5\\n-30\\n-30\\n6\\n9') == '0'\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\n    '5\\n'\n    '5 -2 10 -1 4'\n) == '6'\nassert solution(\n    '8\\n'\n    '5 2 5 3 -30 -30 6 9'\n) == '10'\nassert solution(\n    '3\\n'\n    '-10 6 -15'\n) == '0'\nassert solution(\n    '5\\n'\n    '5 2 5 3 -30 -30 6 9'\n) == '0'\nassert solution(\n    '3\\n'\n    '-10 6 -15'\n) == '0'\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''2 2 3''') == 'YES'\nassert solution('''4 2 3''') == 'NO'\nassert solution('''1 1 1''') == 'NO'\nassert solution('''2 2 3''') == 'YES'\nassert solution('''4 2 3''') == 'NO'\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''2 2 3''') == 'YES'\nassert solution('''4 2 3''') == 'NO'\nassert solution('''1 2 3''') == 'NO'\nassert solution('''1 1 1''') == 'YES'\nassert solution('''2 2 1''') == 'YES'\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('4 2 3') == 'NO'\nassert solution('2 2 3') == 'YES'\nassert solution('4 2 3') == 'NO'\nassert solution('2 2 3') == 'YES'\nassert solution('4 3 3') == 'NO'\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"2 2 3\") == \"YES\"\nassert solution(\"4 2 3\") == \"NO\"\nassert solution(\"1 1 1\") == \"NO\"\nassert solution(\"4 1 2\") == \"YES\"\nassert solution(\"3 3 3\") == \"YES\"\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''2 2 3''') == 'YES'\nassert solution('''4 2 3''') == 'NO'\nassert solution('''1 2 3''') == 'YES'\nassert solution('''4 3 2''') == 'YES'\nassert solution('''1 3 2''') == 'YES'\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1 2 3') == 'YES'\nassert solution('4 2 3') == 'NO'\nassert solution('1 1 2') == 'YES'\nassert solution('1 2 2') == 'YES'\nassert solution('2 2 2') == 'YES'\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('2 2 3') == 'YES'\nassert solution('4 2 3') == 'NO'\n\n\"\"\"\n\n\"\"\"\n\nThe ancient Egyptians used to express fractions as a sum of several terms where each numerator is one greater than the denominator.\n\nFor example, 4/7 = 1/3 + 2/7.\n\nYou are given an integer P and two integers A and B. You have to calculate the number of ways in which the integer P can be expressed as a sum of A and B.\n\nInput\n\nThe first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows.\nThe first line of each test case contains a single integer P.\nThe second line of each test case contains two space-separated integers A and B.\n\nOutput\n\nFor each test case, print a single line containing one integer \u2014 the number of ways in which the integer P can be expressed as a sum of A and B.\n\nConstraints\n\n1 \u2264 T \u2264 10\n2 \u2264 P \u2264 10000\n1 \u2264 A \u2264 10\n1 \u2264 B \u2264 10\n\nSubtasks\n\nSubtask #1 (10 points): original constraints\n\n3 \u2264 A + B \u2264 10\n\nSubtask #2 (100 points): original constraints\n\n1 \u2264 A + B \u2264 105\n\nExample\n\nInput:\n2\n7 5\n6 7\n9 19\n\nOutput:\n7\n26\n\nExplanation\n\nTest Case 1: P = 7, A = 5, B = 7. We can express P as 7 + 5 = 22 and 22 + 7 = 25, or as 7 + 5 + 7 = 22.\n\nTest Case 2: P = 9, A = 19, B = 19. We can express P as 9 + 19 = 33 or 33 + 19 = 37, or as 9 + 19 + 19 = 37.\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('2 2 3') == 'YES'\nassert solution('4 2 3') == 'NO'\nassert solution('1 1 1') == 'YES'\nassert solution('1 1 3') == 'YES'\nassert solution('1 1 3') == 'NO'\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('2 2 3') == 'YES'\nassert solution('4 2 3') == 'NO'\nassert solution('2 1 2') == 'YES'\nassert solution('1 1 1') == 'NO'\nassert solution('1 2 2') == 'NO'\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(input()) == 'NO'\nassert solution(input()) == 'YES'\nassert solution(input()) == 'NO'\nassert solution(input()) == 'YES'\nassert solution(input()) == 'NO'\n"
    },
    {
        "number": 254,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''\\\n5\nabaca\n''') == '3'\nassert solution('''\\\n8\nabcddcba\n''') == '4'\nassert solution('''\\\n8\nadddcaabca\n''') == '2'\nassert solution('''\\\n5\nabba\n''') == '3'\nassert solution('''\\\n6\nabba\n''') == '3'\n"
    },
    {
        "number": 254,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('abaca') == 3\nassert solution('abcddcba') == 4\nassert solution('ababa') == 0\nassert solution('abab') == 1\nassert solution('abc') == 1\n"
    },
    {
        "number": 254,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"abaca\") == 3\nassert solution(\"abcddcba\") == 4\n"
    },
    {
        "number": 254,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('abaca') == 3\nassert solution('abcddcba') == 4\nassert solution('cbd') == 2\nassert solution('axb') == 1\nassert solution('ab') == 1\n"
    },
    {
        "number": 254,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 254,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('abaca') == 3\nassert solution('abcddcba') == 4\nassert solution('x') == 1\nassert solution('xabcddcba') == 2\nassert solution('z') == 0\n"
    },
    {
        "number": 254,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 254,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\n'''5\nabaca'''\n) == '3'\n\nassert solution(\n'''8\nabcddcba'''\n) == '4'\n"
    },
    {
        "number": 254,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(input()) == \"abcddcba\"\n"
    },
    {
        "number": 254,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('') == 0\nassert solution('abaca') == 3\nassert solution('abcddcba') == 4\nassert solution('abbbaaa') == 2\nassert solution('ababaababaa') == 1\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''4\n1 4 6 2\n5\n5 1 5 7 9''') == '3'\nassert solution('''4\n1 2 3 4\n4\n10 11 12 13\n\n''') == '0'\nassert solution('''4\n1 2 3 4\n4\n1 2 1 1 1\n\n''') == '2'\nassert solution('''4\n1 2 1 2\n4\n1 2 1 1\n\n''') == '2'\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''4\n1 4 6 2\n5\n5 1 5 7 9''') == '3'\nassert solution('''4\n1 2 3 4\n4\n10 11 12 13''') == '0'\nassert solution('''4\n1 2 3 4\n4\n1 1 1 1 1''') == '2'\nassert solution('''4\n1 2 3 4\n4\n1 1 1 1 1''') == '0'\nassert solution('''1\n1\n1\n1\n1\n1\n1''') == '0'\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1 4 6 2') == '3'\nassert solution('1 2 3 4') == '0'\nassert solution('1 1 1 1 1') == '2'\nassert solution('1 2 3 4') == '0'\nassert solution('1 1 2 3 4') == '1'\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"1\\n1\") == \"0\"\nassert solution(\"3\\n2\") == \"0\"\nassert solution(\"1\\n1\\n1\\n1\") == \"1\"\nassert solution(\"1\\n3\\n2\") == \"1\"\nassert solution(\"1\\n1\\n1\\n1\") == \"2\"\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 4 6 2\\n5\\n5 1 5 7 9\") == \"3\"\nassert solution(\"4\\n1 2 3 4\\n4\\n10 11 12 13\") == \"0\"\nassert solution(\"5\\n1 1 1 1 1\\n3\\n1 2 3\") == \"2\"\nassert solution(\"5\\n1 1 1 1 1\\n3\\n1 2 3\") == \"0\"\nassert solution(\"4\\n1 2 3 4\\n4\\n10 11 12 13\") == \"2\"\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''1 4 6 2\n5\n5 1 5 7 9''') == '3'\nassert solution('''1 2 3 4\n4\n10 11 12 13''') == '0'\nassert solution('''1 1 1 1 1\n3\n1 2 3''') == '2'\nassert solution('''1 1 1 1 1\n4\n1 1 1 1 1''') == '0'\nassert solution('''1 1 1 1 1\n5\n1 1 1 1 1 1''') == '0'\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"1\\n1\\n1\\n1\\n1\") == \"0\"\nassert solution(\"1\\n1\\n1\\n1\\n1\") == \"1\"\nassert solution(\"2\\n3\\n4\\n5\\n6\") == \"0\"\nassert solution(\"1\\n2\\n3\\n4\\n5\") == \"1\"\nassert solution(\"5\\n3\\n2\\n4\\n1\") == \"3\"\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1 4 6 2\\n5\\n5 1 5 7 9\\n') == '3'\nassert solution('4\\n1 4 6 2\\n5\\n5 1 5 7 9\\n') == '0'\nassert solution('1 2 3 4\\n4\\n10 11 12 13\\n') == '2'\nassert solution('1 2 3 4\\n4\\n10 11 12 13\\n') == '0'\nassert solution('2\\n1 1 1 1 1\\n2\\n1 2 3\\n') == '2'\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1 4 6 2\\n5\\n5 1 5 7 9') == '3'\nassert solution('4\\n1 4 6 2\\n5\\n5 1 5 7 9') == '0'\nassert solution('1 2 3 4\\n4\\n10 11 12 13') == '2'\nassert solution('5\\n1 1 1 1 1\\n3\\n1 2 3') == '0'\nassert solution('10\\n1 1 1 1 1\\n3\\n1 2 3') == '2'\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"1 100\\n100 1\\n99 99\\n99 99\") == \"Team 1\"\nassert solution(\"1 1\\n2 2\\n3 3\\n2 2\") == \"Team 2\"\nassert solution(\"3 3\\n2 2\\n1 1\\n2 2\") == \"Draw\"\nassert solution(\"3 3\\n2 2\\n1 1\\n2 2\\n1 1\") == \"Team 1\"\nassert solution(\"3 3\\n2 2\\n1 1\\n2 2\\n1 1\\n2 2\") == \"Team 2\"\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('1 100\\n100 1\\n99 99\\n99 99') == 'Team 1'\nassert solution('1 1\\n2 2\\n3 3\\n2 2') == 'Team 2'\nassert solution('3 3\\n2 2\\n1 1\\n2 2') == 'Draw'\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"1 100\") == \"Team 1\"\nassert solution(\"1 1\") == \"Team 2\"\nassert solution(\"3 3\") == \"Draw\"\nassert solution(\"2 2\") == \"Team 2\"\nassert solution(\"3 3\") == \"Draw\"\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\n'''\n1 100\n100 1\n99 99\n99 99\n''') == 'Team 1'\n\nassert solution(\n'''\n1 1\n2 2\n3 3\n2 2\n''') == 'Team 2'\n\nassert solution(\n'''\n3 3\n2 2\n1 1\n2 2\n''') == 'Draw'\n\nassert solution(\n'''\n1 100\n100 1\n99 99\n99 99\n''') == 'Team 1'\n\nassert solution(\n'''\n1 1\n2 2\n3 3\n2 2\n''') == 'Team 2'"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"1 100\") == \"Team 1\"\nassert solution(\"1 1\") == \"Team 2\"\nassert solution(\"3 3\") == \"Draw\"\n\n\n\n'''\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''1 100\n100 1\n99 99\n99 99''') == 'Team 1'\n\nassert solution('''1 1\n2 2\n3 3\n2 2''') == 'Team 2'\n\nassert solution('''3 3\n2 2\n1 1\n2 2\n''') == 'Draw'\n'''\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''1 100\n100 1\n99 99\n99 99''') == 'Team 1'\nassert solution('''1 1\n2 2\n3 3\n2 2''') == 'Team 2'\nassert solution('''3 3\n2 2\n1 1\n2 2''') == 'Draw'\nassert solution('''1 1\n2 2\n3 3\n1 1''') == 'Draw'\nassert solution('''1 1\n1 1\n1 1\n1 1''') == 'Draw'\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"1 100\\n100 1\\n99 99\\n99 99\\n\") == \"Team 1\"\nassert solution(\"1 1\\n2 2\\n3 3\\n2 2\\n\") == \"Team 2\"\nassert solution(\"3 3\\n2 2\\n1 1\\n2 2\\n\") == \"Draw\"\nassert solution(\"1 1\\n2 2\\n3 3\\n2 2\\n\") == \"Draw\"\nassert solution(\"1 1\\n2 2\\n3 3\\n3 3\\n\") == \"Draw\"\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == \"Team 1\""
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == \"Team 2\"\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('-1 0 3\\n0 0 3\\n1 0 2\\n1 1 40') == '2.4'\nassert solution('-1 0 3\\n0 0 3\\n1 0 2\\n1 1 40\\n-1 0 3') == '2.4'\nassert solution('-1 0 3\\n0 0 3\\n1 0 2\\n1 1 40\\n-1 0 3\\n0 0 3\\n1 0 2\\n1 1 40') == '2.4'\nassert solution('-1 0 3\\n0 0 3\\n1 0 2\\n1 1 40\\n-1 0 3\\n0 0 3\\n1 0 2\\n1 1 40\\n-1 0 3\\n0 0 3\\n1 0 2\\n1 1 40\\n-1 0 3') == '2.4'\nassert solution('-1 0 3\\n0 0 3\\n1 0 2\\n1 1 40\\n-1 0 3\\n0 0 3\\n1 0 2\\n1 1 40\\n-1 0 3\\n0 0 3\\n1 0 2\\n1 1 40\\n-1 0 3\\n0 0 3\\n1 0 2\\n1 1 40\\n-1 0 3\\n0 0 3\\n1 0 2\\n1 1 40\\n-1 0 3\\n0 0 3\\n1 0 2\\n1 1 40\\n-1 0 3\\n0 0 3\\n1 0 2\\n1 1 40\\n-1 0 3\\n0 0 3\\n1 0 2\\n1 1 40\\n-1 0 3\\n0 0 3\\n1 0 2\\n1 1 40\\n-1 0 3\\n0 0 3\\n1 0 2\\n1 1 40\\n-1 0 3\\n0 0 3\\n1 0 2\\n1 1 40\\n-1 0 3\\n0 0 3\\n1 0 2\\n1 1 40\\n-1 0 3\\n0 0 3\\n1 0 2\\n1 1 40\\n-1 0 3\\n0 0 3\\n1 0 2\\n1 1 40\\n-1 0 3\\n0 0 3\\n1 0 2\\n1 1 40\\n-1 0 3\\n0 0 3\\n1 0 2\\n1 1 40\\n-1 0 3\\n0 0 3\\n1 0 2\\n1 1 40\\n-1 0 3\\n0 0 3\\n1 0 2\\n1 1 40\\n-1 0 3\\n0 0 3\\n1 0 2\\n1 1 40\\n-1 0 3\\n0 0 3\\n1 0 2\\n1 1 40\\n-1 0 3\\n0 0 3\\n1 0 2\\n1 1 40\\n-1 0 3\\n0 0 3\\n1 0 2\\n1 1 40\\n-1 0 3\\n0 0 3\\n1 0 2\\n1 1 40\\n-1 0 3\\n0 0 3\\n1 0 2\\n1 1 40\\n-1 0 3\\n0 0 3\\n1 0 2\\n1 1 40\\n-1 0 3\\n0 0 3\\n1 0 2\\n1 1 40\\n-1 0 3\\n0 0 3\\n1 0 2\\n1 1 40\\n-1 0 3\\n0 0 3\\n1 0 2\\n1 1 40\\n-1 0 3\\n0 0 3\\n1 0 2\\n1 1 40\\n-1 0 3\\n0 0 3\\n1 0 2\\n1 1 40\\n-1 0 3\\n0 0 3\\n1 0 2\\n1 1 40\\n-1 0 3\\n0 0 3\\n1 0 2\\n1 1 40\\n-1 0 3\\n0 0 3\\n1 0 2\\n1 1 40\\n-1 0 3\\n0 0 3\\n1 0 2\\n1 1 40\\n-1 0 3\\n0 0 3\\n1 0 2\\n1 1 40\\n-1 0 3\\n0 0 3\\n1 0 2\\n1 1 40\\n-1 0 3\\n0 0 3\\n1 0 2\\n1 1 40\\n-1 0 3\\n0 0 3\\n1 0 2\\n1 1 40\\n-1 0 3\\n0 0 3\\n1 0 2\\n1 1 40\\n-1 0 3\\n0 0 3\\n1 0 2\\n1 1 40\\n-1 0 3\\n0 0 3\\n1 0 2\\n1 1 40\\n-1 0 3\\n0 0 3\\n1 0 2\\n1 1 40\\n-1 0 3\\n0 0 3\\n1 0 2\\n1 1 40\\n-1 0 3\\n0 0 3\\n1 0 2\\n1 1 40\\n-1 0 3\\n0 0 3\\n1 0 2\\n1 1 40\\n-1 0 3\\n0 0 3\\n1 0 2\\n1 1 40\\n-1 0 3\\n0 0 3\\n1 0 2\\n1 1 40\\n-1 0 3\\n0 0 3\\n1 0 2\\n1 1 40\\n-1 0 3\\n0 0 3\\n1 0 2\\n1 1 40\\n-1 0 3\\n0 0 3\\n1 0 2\\n1 1 40\\n-1 0 3\\n0 0 3\\n1 0 2\\n1 1 40\\n-1 0 3\\n0 0 3\\n1 0 2\\n1 1 40\\n-1 0 3\\n0 0 3\\n1 0 2\\n1 1 40\\n-1 0 3\\n0 0 3\\n1 0 2\\n1 1 40\\n-1 0 3\\n0 0 3\\n1 0 2\\n1 1 40\\n-1 0 3\\n0 0 3\\n1 0 2\\n1 1 40\\n-1 0 3\\n0 0 3\\n1 0 2\\n1 1 40\\n-1 0 3\\n0 0 3\\n1 0 2\\n1 1 40\\n-1 0 3\\n0 0 3\\n1 0 2\\n1 1 40\\n-1 0 3\\n0 0 3\\n1 0 2\\n1 1 40\\n-1 0 3\\n0 0 3\\n1 0 2\\n1 1 40\\n-1 0 3\\n0 0 3\\n1 0 2\\n1 1 40\\n-1 0 3\\n0 0 3\\n1 0 2\\n1 1 40\\n-1 0 3\\n0 0 3\\n1 0 2\\n1 1 40\\n-1 0 3\\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('4 3\\n-1 0 3\\n0 0 3\\n1 0 2\\n1 1 40') == '2.4'\nassert solution('5 6\\n-2 2 0\\n1 1 1\\n2 2 0\\n-2 2 -1\\n0 0 4\\n-1 0 -1\\n-1 1 -1\\n0 0 3\\n-1 1 3\\n0 0 3') == '6.5'\nassert solution('10 10\\n1 1 1\\n2 2 2\\n3 3 3\\n4 4 4\\n5 5 5\\n6 6 6\\n7 7 7\\n8 8 8\\n9 9 9\\n10 10 10') == '5.0'\nassert solution('10 10\\n1 1 1\\n2 2 2\\n3 3 3\\n4 4 4\\n5 5 5\\n6 6 6\\n7 7 7\\n8 8 8\\n9 9 9\\n10 10 10') == '6.5'\nassert solution('100 100\\n0 0 0\\n1 1 1\\n2 2 2\\n3 3 3\\n4 4 4\\n5 5 5\\n6 6 6\\n7 7 7\\n8 8 8\\n9 9 9\\n10 10 10') == '5.0'\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == answer\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdin\n\n\"\"\"\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1 2') == '2.0'\nassert solution('-3 0 1') == '2.0'\nassert solution('1 1 1') == '0.0'\nassert solution('1 1 2') == '2.0'\nassert solution('-1 -2 -3') == '3.0'\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"\n4 3\n-1 0 3\n0 0 3\n1 0 2\n1 1 40\n\"\"\"\n) == \"2.4\"\n\nassert solution(\n\"\"\"\n6 3\n0 0 3\n0 -2 0 2\n-1 -1 2\n1 -2 0 1\n-1 0 0\n\"\"\"\n) == \"1.0\"\n\nassert solution(\n\"\"\"\n12 6\n-1 -1 6\n-1 0 0\n-1 -1 2\n1 -1 -2\n0 -1 -2\n-1 -1 2\n1 -1 0\n-1 0 1\n1 0 1\n-1 -1 2\n0 -1 -2\n\"\"\"\n) == \"1.0\"\n\nassert solution(\n\"\"\"\n4 10\n-1 -1 4\n-1 -2 -2\n-1 -3 -3\n1 -4 -4\n\"\"\"\n) == \"2.0\"\n\nassert solution(\n\"\"\"\n5 10\n-1 -1 4\n-1 -2 -2\n-1 -3 -3\n1 -4 -4\n1 -5 -5\n\"\"\"\n) == \"1.0\""
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(SAMPLE_INPUT) == SAMPLE_OUTPUT\n\"\"\"\nimport sys\nfrom typing import List\n\nfrom shared.util import timeit, print_answer\n\n\n@timeit\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"0 0 3\") == \"2.4\"\nassert solution(\"-1 0 3\") == \"2.4\"\nassert solution(\"0 0 3\") == \"2.4\"\nassert solution(\"1 0 2\") == \"4.2\"\nassert solution(\"1 1 40\") == \"5.1\"\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('4 3') == '2.4'\nassert solution('1 1 40') == '0.0'\nassert solution('0 0 3') == '2.4'\nassert solution('0 0 3') == '2.4'\nassert solution('1 0 2') == '2.0'\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('4 3\\n-1 0 3\\n0 0 3\\n1 0 2\\n1 1 40') == '2.4'\nassert solution('5 6\\n-3 6 -4 4 1\\n1 2 2 1\\n2 2 2 1\\n2 3 3 1\\n-3 -3 -4 4') == '0.390625'\nassert solution('3 3\\n-1 0 3\\n0 0 3\\n1 0 2\\n1 1 40') == '2.4'\nassert solution('5 5\\n-5 5 -3 3 -1 1\\n-3 -3 -3 3 -2 2\\n1 1 1 1 1 1\\n-5 -3 -3 3 -2 2') == '0.6'\nassert solution('8 8\\n2 2 -2 -1 1 -1 1 -1 1 1\\n2 -2 -2 -2 -1 -1 1 1\\n2 -2 -2 -2 1 1 1\\n2 -2 -2 -2 1 1 1\\n2 -2 -2 -2 1 1 1\\n2 -2 -2 -2 1 1 1') == '0.5'\n"
    },
    {
        "number": 258,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''4''') == 'Bicarp'\nassert solution('''2''') == 'Bicarp'\nassert solution('''??''') == 'Bicarp'\nassert solution('''00?''') == 'Bicarp'\nassert solution('''?054??0?''') == 'Monocarp'\n"
    },
    {
        "number": 258,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('5\\n0523') == 'Bicarp'\nassert solution('2\\n??') == 'Bicarp'\nassert solution('8\\n?054??0?') == 'Bicarp'\nassert solution('6\\n???00?') == 'Monocarp'\nassert solution('8\\n?054??0?0?') == 'Bicarp'\n"
    },
    {
        "number": 258,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == \"\" \"\"\"\n\nimport sys"
    },
    {
        "number": 258,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('4\\n0523\\n') == 'Bicarp'\nassert solution('2\\n??\\n') == 'Bicarp'\nassert solution('8\\n?054??0?\\n') == 'Bicarp'\nassert solution('6\\n???00?\\n') == 'Monocarp'\nassert solution('1\\n0000000\\n') == 'Monocarp'\n"
    },
    {
        "number": 258,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"0\") == \"Monocarp\"\nassert solution(\"1234\") == \"Bicarp\"\nassert solution(\"0000\") == \"Bicarp\"\nassert solution(\"1234\") == \"Bicarp\"\n"
    },
    {
        "number": 258,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\n    '''\n    4\n    0523\n    '''\n    ) == 'Bicarp'\nassert solution(\n    '''\n    2\n    ??\n    '''\n    ) == 'Bicarp'\nassert solution(\n    '''\n    8\n    ?054??0?\n    '''\n    ) == 'Bicarp'"
    },
    {
        "number": 258,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\n    \"4\\n\"\n    \"0523\\n\"\n) == \"Monocarp\"\n\nassert solution(\n    \"2\\n\"\n    \"?054??0?\\n\"\n) == \"Bicarp\"\n\nassert solution(\n    \"8\\n\"\n    \"?054??0?\\n\"\n) == \"Monocarp\"\n\n\n\n\"\"\"\n"
    },
    {
        "number": 258,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"\n7\n0523\n\n\"\"\"\n) == \"Monocarp\"\n\nassert solution(\n\"\"\"\n2\n??\n\n\"\"\"\n) == \"Bicarp\"\n\nassert solution(\n\"\"\"\n8\n?054??0?\n\n\"\"\"\n) == \"Bicarp\"\n\nassert solution(\n\"\"\"\n6\n???00?\n\n\"\"\"\n) == \"Monocarp\"\n\nassert solution(\n\"\"\"\n1\n2\n\n\"\"\"\n) == \"Bicarp\""
    },
    {
        "number": 258,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == \"Monocarp\"\n\n\"\"\"\n\nfrom sys import stdin, stdout\nfrom functools import reduce\nfrom itertools import product"
    },
    {
        "number": 258,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdin.splitlines()[0]\n\"\"\"\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == '1'\nassert solution('2 3\\n2 5\\n4 9') == '1'\nassert solution('2 2\\n2 3\\n2 4\\n5 6\\n4 9\\n6 1\\n') == '3'\nassert solution('5 5\\n3 3\\n2 5\\n5 6\\n4 9\\n6 1\\n') == '1'"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdin.strip()"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''2 5\n2 3\n2 4\n''') == '1'\nassert solution('''5 7\n2 2\n2 3\n2 4\n2 5\n2 6\n''') == '1'\nassert solution('''3 7\n2 2\n2 3\n2 4\n''') == '2'\nassert solution('''3 7\n2 2\n2 3\n2 4\n2 5\n2 6\n''') == '3'\nassert solution('''3 7\n2 2\n2 3\n2 4\n2 5\n2 6\n''') == '2'\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"2 2\") == \"1\"\nassert solution(\"5 5\") == \"1\"\nassert solution(\"3 7\") == \"1\"\nassert solution(\"5 4\") == \"1\"\nassert solution(\"5 5\") == \"1\"\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''3 7\n2 2\n2 3\n2 4\n''') == '1'\n\nassert solution('''5 5\n3 3\n2 5\n5 6\n4 9\n6 1\n''') == '3'\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('2 2') == '1'\nassert solution('5 5') == '1'\nassert solution('3 7') == '1'\nassert solution('2 2') == '1'\nassert solution('5 5') == '1'\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(input()) == output()\n\n\n'''\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''2 2''') == '1'\nassert solution('''5 5''') == '1'\nassert solution('''3 7''') == '1'\nassert solution('''2 2''') == '1'\nassert solution('''2 3''') == '1'\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1 5') == '1'\nassert solution('2 5') == '2'\nassert solution('1 2') == '1'\nassert solution('1 2') == '1'\nassert solution('1 2') == '1'\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''2 1\n2 2''') == '1'\nassert solution('''5 7\n2 2\n2 3\n2 4\n5 6\n4 9\n6 1''') == '1'\nassert solution('''3 7\n2 2\n2 3\n2 4\n''') == '1'\nassert solution('''1 1\n2 2\n1 3\n1 4\n2 5\n1 6\n3 7\n1 8\n2 9\n2 10\n1 11\n1 12\n1 13\n1 14\n2 15\n2 16\n1 17\n2 18\n2 19\n1 20\n2 21\n1 22\n1 23\n1 24\n2 25\n2 26\n1 27\n2 28\n2 29\n1 30\n2 31\n1 32\n2 33\n2 34\n1 35\n2 36\n2 37\n1 38\n2 39\n2 40\n2 41\n1 42\n2 43\n1 44\n2 45\n1 46\n2 47\n1 48\n2 49\n2 50\n1 51\n2 52\n2 53\n1 54\n2 55\n1 56\n2 57\n2 58\n1 59\n1 60\n2 61\n2 62\n2 63\n1 64\n2 65\n2 66\n1 67\n1 68\n2 69\n2 70\n2 71\n1 72\n2 73\n2 74\n2 75\n1 76\n1 77\n2 78\n2 79\n1 80\n1 81\n2 82\n1 83\n2 84\n2 85\n1 86\n1 87\n2 88\n2 89\n1 90\n2 91\n1 92\n1 93\n2 94\n1 95\n2 96\n2 97\n1 98\n1 99\n2 100\n1 101\n2 102\n1 103\n2 104\n1 105\n2 106\n1 107\n1 108\n2 109\n1 110\n1 111\n2 112\n1 113\n2 114\n1 115\n2 116\n1 117\n2 118\n1 119\n1 120\n2 121\n1 122\n1 123\n1 124\n2 125\n1 126\n1 127\n1 128\n2 129\n2 130\n1 131\n1 132\n1 133\n1 134\n1 135\n2 136\n2 137\n1 138\n2 139\n2 140\n1 141\n2 142\n1 143\n1 144\n2 145\n1 146\n2 147\n1 148\n2 149\n1 150\n1 151\n2 152\n1 153\n1 154\n2 155\n1 156\n1 157\n2 158\n1 159\n1 160\n1 161\n2 162\n1 163\n1 164\n2 165\n1 166\n1 167\n1 168\n1 169\n2 170\n1 171\n2 172\n1 173\n1 174\n2 175\n1 176\n1 177\n1 178\n2 179\n2 180\n1 181\n1 182\n1 183\n1 184\n1 185\n2 186\n1 187\n1 188\n1 189\n1 190\n1 191\n1 192\n1 193\n1 194\n1 195\n1 196\n1 197\n1 198\n1 199\n1 200\n1 201\n1 202\n1 203\n1 204\n1 205\n1 206\n1 207\n1 208\n1 209\n1 210\n1 211\n1 212\n1 213\n1 214\n1 215\n1 216\n1 217\n1 218\n1 219\n1 220\n1 221\n1 222\n1 223\n1 224\n1 225\n1 226\n1 227\n1 228\n1 229\n1 230\n1 231\n1 232\n1 233\n1 234\n1 235\n1 236\n1 237\n1 238\n1 239\n1 240\n1 241\n1 242\n1 243\n1 244\n1 245\n1 246\n1 247\n1 248\n1 249\n1 250\n1 251\n1 252\n1 253\n1 254\n1 255\n1 256\n1 257\n1 258\n1 259\n1 260\n1 261\n1 262\n1 263\n1 264\n1 265\n1 266\n1 267\n1 268\n1 269\n1 270\n1 271\n1 272\n1 273\n1 274\n1 275\n1 276\n1 277\n1 278\n1 279\n1 280\n1 281\n1 282\n1 283\n1 284\n1 285\n1 286\n1 287\n1 288\n1 289\n1 290\n1 291\n1 292\n1 293\n1 294\n1 295\n1 296\n1 297\n1 298\n1 299\n1 300\n1 301\n1 302\n1 303\n1 304\n1 305\n1 306\n1 307\n1 308\n1 309\n1 310\n1 311\n1 312\n1 313\n1 314\n1 315\n1 316\n1 317\n1 318\n1 319\n1 320\n1 321\n1 322\n1 323\n1 324\n1 325\n1 326\n1 327\n1 328\n1 329\n1 330\n1 331\n1 332\n1 333\n1 334\n1 335\n1 336\n1 337\n1 338\n1 339\n1 340\n1 341\n1 342\n1 343\n1 344\n1 345\n1 346\n1 347\n1 348\n1 349\n1 350\n1 351\n1 352\n1 353\n1 354\n1 355\n1 356\n1 357\n1 358\n1 359\n1 360\n1 361\n1 362\n1 363\n1 364\n1 365\n1 366\n1 367\n1 368\n1 369\n1 370\n1 371\n1 372\n1 373\n1 374\n1 375\n1 376\n1 377\n1 378\n1 379\n1 380\n1 381\n1 382\n1 383\n1 384\n1 385\n1 386\n1 387\n1 388\n1 389\n1 390\n1 391\n1 392\n1 393\n1 394\n1 395\n1 396\n1 397\n1 398\n1 399\n1 400\n1 401\n1 402\n1 403\n1 404\n1 405\n1 406\n1 407\n1 408\n1 409\n1 410\n1 411\n1 412\n1 413\n1 414\n1 415\n1 416\n1 417\n1 418\n1 419\n1 420\n1 421\n1 422\n1 423\n1 424\n1 425\n1 426\n1 427\n1 428\n1 429\n1 430\n1 431\n1 432\n1 433\n1 434\n1 435\n1 436\n1 437\n1 438\n1 439\n1"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''1 1''') == '1'\nassert solution('''3 2''') == '5'\nassert solution('''10 2''') == '27'\nassert solution('''10 3''') == '27'\nassert solution('''10 4''') == '27'\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('1 1') == '1'\nassert solution('3 2') == '5'\nassert solution('3 2') == '5'\nassert solution('3 2') == '5'\nassert solution('3 2') == '5'\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1 1') == '1'\nassert solution('3 2') == '5'\nassert solution('2 3') == '3'\nassert solution('3 3') == '5'\nassert solution('3 1') == '3'\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('') == 1\nassert solution('1 1') == 1\nassert solution('1 2') == 5\nassert solution('1 3') == 9\nassert solution('1 4') == 17\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1 1') == '1'\nassert solution('3 2') == '5'\nassert solution('2 4') == '7'\nassert solution('10 10') == '13'\nassert solution('1000000 1') == '1000000'\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\n    '''1 1\n''') == '1'\n\nassert solution(\n    '''3 2\n''') == '5'\n\nassert solution(\n    '''0 0\n''') == '1'\n\nassert solution(\n    '''1 1\n''') == '2'\n\nassert solution(\n    '''0 0\n''') == '2'"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == '5'\nprint(solution(stdin))\n\n\"\"\"\n\nfrom math import log10\nfrom functools import lru_cache\n\n@lru_cache(maxsize=None)\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1 1') == '1'\nassert solution('3 2') == '5'\nassert solution('3 4') == '1'\nassert solution('1000 100') == '10'\nassert solution('1000 1001') == '101'\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''1 1''') == '1'\nassert solution('''3 2''') == '5'\nassert solution('''999 2''') == '5'\n'''\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1 1') == '1'\nassert solution('3 2') == '5'\nassert solution('3 3') == '7'\nassert solution('4 4') == '11'\nassert solution('2 3') == '7'\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''\n5\n*.*.*.*.*\n''') == 'yes'\nassert solution('''\n10\n.*.*.*.*.*.*.*\n''') == 'no'\nassert solution('''\n20\n.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*\n''') == 'yes'\nassert solution('''\n15\n.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*\n''') == 'no'\nassert solution('''\n10\n*.*.*.*.*.*\n''') == 'no'\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"16\\n.**.*..*.***.**.\\n\") == \"yes\"\nassert solution(\"11\\n.*.*...*.*.\\n\") == \"no\"\nassert solution(\"1\\n*.*.*.*.\\n\") == \"yes\"\nassert solution(\"11\\n.*.*...*.*.\\n\") == \"no\"\nassert solution(\"10\\n.*.*.*.*.\\n\") == \"yes\"\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"16\\n.**.*..*.***.**.\") == \"yes\"\nassert solution(\"11\\n.*.*...*.*.\") == \"no\"\n\n\n\n------"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('16\\n.**.*..*.***.**.\\n') == 'yes'\nassert solution('11\\n.*.*...*.*.\\n') == 'no'\n\n\n-----\n\"\"\"\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('7\\n.**.*.**.\\n') == 'yes'\nassert solution('2\\n.*.*.*.\\n') == 'no'\nassert solution('10\\n.*.*.*.*.*.*.*.*.*.*.*.*.*.\\n') == 'yes'\nassert solution('10\\n.*.*.*.*.*.*.*.*.*.*.*.*.*.*.\\n') == 'no'\nassert solution('5\\n*.*.*.*.*.*.*.*\\n') == 'no'\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"16\\n\".join(stdin.splitlines())) == \"yes\"\nassert solution(\"11\\n\".join(stdin.splitlines())) == \"no\"\nassert solution(\"16\\n\".join(stdin.splitlines())) == \"yes\"\nassert solution(\"11\\n\".join(stdin.splitlines())) == \"no\"\nassert solution(\"1\\n\".join(stdin.splitlines())) == \"no\"\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('16\\n.**.*..*.***.**.\\n') == 'yes'\nassert solution('11\\n.*.*...*.*.\\n') == 'no'\nassert solution('1\\n.\\n') == 'yes'\nassert solution('2\\n.**.\\n') == 'no'\nassert solution('4\\n*.*.***.*.\\n') == 'yes'\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\".**.*..*.***.**.\") == \"yes\"\nassert solution(\".*.*...*.*.\") == \"no\"\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == 'yes'\n\n'''\n\n'''\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('3') == '9'\nassert solution('4') == '1'\nassert solution('5') == '-1'\nassert solution('6') == '-1'\nassert solution('7') == '1'\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\n    '''\n    3\n    4 0 2\n    3 5 7\n    8 1 6\n    ''') == '9'\nassert solution(\n    '''\n    4\n    1 1 1 1\n    1 1 0 1\n    1 1 1 1\n    1 1 1 1\n    ''') == '1'\nassert solution(\n    '''\n    4\n    1 1 1 1\n    1 1 0 1\n    1 1 2 1\n    1 1 1 1\n    ''') == '-1'\nassert solution(\n    '''\n    4\n    1 1 1 1\n    1 1 0 1\n    1 1 2 1\n    1 1 1 1\n    ''') == '-1'\nassert solution(\n    '''\n    4\n    1 1 1 1\n    1 1 0 1\n    1 1 2 1\n    1 1 1 1\n    ''') == '-1'\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"4\\n3 5 7\\n8 1 6\") == \"-1\"\nassert solution(\"4\\n1 1 1 1\\n1 1 0 1\\n1 1 1 1\\n1 1 1 1\") == \"1\"\nassert solution(\"4\\n1 1 1 1\\n1 1 0 1\\n1 1 2 1\\n1 1 1 1\") == \"-1\"\nassert solution(\"4\\n1 1 1 1\\n1 1 0 1\\n1 1 2 1\\n1 1 1 1\") == \"1\"\nassert solution(\"4\\n4 2 0 0\\n3 5 7 0\\n8 1 6 0\\n0 1 2 0\") == \"1\"\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdin\n'''\n'''\nThe second example should be:\n\n7\n1 1 1 1 1 1 1\n1 1 0 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n\nOutput:\n\n1\n\n'''\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"9\"\nassert solution(\"4\") == \"1\"\nassert solution(\"4 0 2\") == \"-1\"\nassert solution(\"4 0 2 0 0 2 0\") == \"-1\"\nassert solution(\"1 1 1 1 1 1\") == \"1\"\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('3\\n4 0 2\\n3 5 7\\n8 1 6') == '9'\nassert solution('4\\n1 1 1 1\\n1 1 0 1\\n1 1 1 1\\n1 1 1 1') == '-1'\nassert solution('4\\n1 1 1 1\\n1 1 0 1\\n1 1 2 1\\n1 1 1 1') == '-1'\nassert solution('4\\n1 1 1 1\\n1 1 0 1\\n1 1 2 1\\n1 1 1 1') == '1'\nassert solution('4\\n1 1 1 1\\n1 1 0 1\\n1 1 2 1\\n1 1 1 1') == '-1'\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('3\\n4 0 2\\n3 5 7\\n8 1 6') == '9'\nassert solution('4\\n1 1 1 1\\n1 1 0 1\\n1 1 1 1\\n1 1 1 1\\n') == '-1'\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('5\\n5 3 4 2\\n3 5 7\\n8 1 6\\n') == '9'\nassert solution('5\\n1 1 1 1\\n1 1 0 1\\n1 1 1 1\\n1 1 1 1\\n') == '1'\nassert solution('4\\n1 1 1 1\\n1 1 0 1\\n1 1 2 1\\n1 1 1 1\\n') == '-1'\nassert solution('1\\n1 1 1 1\\n1 1 0 1\\n1 1 2 1\\n1 1 1 1\\n') == '1'\nassert solution('10\\n1 1 1 1 1 1 1 1 1 1\\n1 1 0 1 1 1 1 1 1\\n1 1 2 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1\\n') == '-1'\n\n\n\n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''3\n4 0 2\n3 5 7\n8 1 6''') == '9'\nassert solution('''4\n1 1 1 1\n1 1 0 1\n1 1 1 1\n1 1 1 1''') == '1'\nassert solution('''4\n1 1 1 1\n1 1 0 1\n1 1 2 1\n1 1 1 1''') == '-1'\nassert solution('''4\n1 1 1 1\n1 1 0 1\n1 1 2 1\n1 1 1 1''') == '-1'\nassert solution('''4\n1 1 1 1\n1 1 0 1\n1 1 2 1\n1 1 1 1''') == '-1'\n"
    },
    {
        "number": 263,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == expected\n\n\n\n\"\"\"\n"
    },
    {
        "number": 263,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == expected\n\"\"\""
    },
    {
        "number": 263,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1\\n4') == '3 7'\nassert solution('2\\n10') == '15 15'\nassert solution('1\\n3') == '6 12'\nassert solution('1\\n1') == '15 15'\nassert solution('3\\n5') == '15 15'\n"
    },
    {
        "number": 263,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 263,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('4\\n6\\n1\\n1\\n1\\n1') == '3 7\\n'\nassert solution('1\\n10\\n5\\n') == '15 15\\n'\nassert solution('3\\n6\\n1\\n6\\n5\\n') == '6 12\\n'\n\n\n\"\"\"\n"
    },
    {
        "number": 263,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 263,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdin\n\n\"\"\"\n\nimport sys\nsys.path.append('../../')\nfrom math import ceil"
    },
    {
        "number": 263,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('3\\n6\\n1\\n1\\n1\\n1') == '6 12'\nassert solution('1\\n10\\n5') == '15 15'\nassert solution('3\\n7\\n1\\n6\\n5') == '7 13'\nassert solution('3\\n7\\n1\\n6\\n5\\n4') == '8 15'\nassert solution('3\\n7\\n1\\n6\\n5\\n4\\n3') == '8 13'\n"
    },
    {
        "number": 263,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"2\\n2\\n1\\n1\\n\") == \"3 7\"\nassert solution(\"1\\n10\\n5\\n\") == \"15 15\"\nassert solution(\"3\\n6\\n1\\n6\\n5\\n\") == \"6 12\"\nassert solution(\"3\\n7\\n1\\n6\\n5\\n\") == \"7 13\"\n\n\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 263,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''4\n6\n1\n1\n1\n1''') == '3 7'\nassert solution('''1\n10\n5''') == '15 15'\nassert solution('''3\n6\n1\n6\n5''') == '7 13'\n\n\n\"\"\""
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''3 3\n''') == '128'\nassert solution('''3 4\n''') == '48'\nassert solution('''4 4\n''') == '256'\nassert solution('''4 5\n''') == '256'\nassert solution('''6 6\n''') == '256'\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == '128'\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"3 3\") == \"128\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"2 2\") == \"3\"\nassert solution(\"2 2\") == \"3\"\nassert solution(\"4 3\") == \"77\"\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == \"128\"\n\n\"\"\"\n\nclass Solution:\n    def numWays(self, n: int, k: int) -> int:\n        return (k * pow(k - 1, n - 1) + (k - 1) * pow(k, n - 1)) % 1000000007"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"2 2\") == \"2\"\nassert solution(\"3 3\") == \"128\"\nassert solution(\"3 3\") == \"128\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"4 4\") == \"15\"\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('3 3') == '128'\nassert solution('2 1') == '1'\nassert solution('3 1') == '1'\nassert solution('1 1') == '1'\nassert solution('2 2') == '2'\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"3 1\") == \"128\"\nassert solution(\"3 3\") == \"128\"\nassert solution(\"4 6\") == \"1024\"\nassert solution(\"5 10\") == \"65536\"\nassert solution(\"5 12\") == \"65536\"\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"3 3\") == \"128\"\nassert solution(\"2 3\") == \"1\"\nassert solution(\"10 3\") == \"152\"\nassert solution(\"10 10\") == \"5040\"\nassert solution(\"10 100000\") == \"63939691643597\"\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''3 3''') == '128'\n'''\n3 3\n'''\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\n\"3 3\") == \"128\"\n\nassert solution(\n\"3 1\") == \"1\"\n\nassert solution(\n\"2 2\") == \"2\"\n\nassert solution(\n\"2 1\") == \"1\"\n\nassert solution(\n\"1 2\") == \"1\""
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\n'''3 4\n2 6 7\n4 2 3 9 5\n3 2 3 9\n100 1 7\n400 3 3 2 5\n100 2 9 2\n500 3 2 9 5'''\n) == '2 3'\n\nassert solution(\n'''4 3\n1 1\n1 2\n1 3\n1 4\n10 4 1 2 3 4\n20 4 1 2 3 4\n30 4 1 2 3 4'''\n) == '1 2'\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('1 2') == '1 2'\nassert solution('2 3') == '1 2'\nassert solution('4 2') == '1 2'\nassert solution('4 3') == '1 2'\nassert solution('4 5') == '1 2'\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == expected\n\n\n---"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''3 4''') == '2 3'\nassert solution('''2 4''') == '1 2'\nassert solution('''1 2''') == '1 2'\nassert solution('''4 5''') == '1 2'\nassert solution('''1 2''') == '1 2'\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('3 4\\n2 6 7\\n4 2 3 9 5\\n3 2 3 9\\n100 1 7\\n400 3 3 2 5\\n100 2 9 2\\n500 3 2 9 5') == '2 3'\nassert solution('4 3\\n1 1\\n1 2\\n1 3\\n1 4\\n10 4 1 2 3 4\\n20 4 1 2 3 4\\n30 4 1 2 3 4\\n') == '1 2'\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''3 4\n2 6 7\n4 2 3 9 5\n3 2 3 9''') == '2 3'\nassert solution('''4 3\n1 1\n1 2\n1 3\n1 4\n10 4 1 2 3 4\n20 4 1 2 3 4\n30 4 1 2 3 4''') == '1 2'\nassert solution('''1 5\n9 9 8 7 6 5 4 3 2 1\n3 4 1 2 3 4\n1 4 5 6 7 8\n4 4 1 3 5 7\n1 4 2 4 6 8\n5 4 1 9 2 8''') == '2 4'\nassert solution('''7 9\n9 9 8 7 6 5 4 3 2 1\n3 4 1 2 3 4\n1 4 5 6 7 8\n4 4 1 3 5 7\n1 4 2 4 6 8\n5 4 1 9 2 8\n7 9 8 1 2 3 4\n1 1 5 1 7 3''') == '1 1'\nassert solution('''8 4\n1 1\n1 2\n1 3\n1 4\n10 4 1 2 3 4\n20 4 1 2 3 4\n30 4 1 2 3 4\n60 4 1 2 3 4\n\n1 4 5 6 7 8\n4 4 1 3 5 7\n1 4 2 4 6 8\n5 4 1 9 2 8\n7 9 8 1 2 3 4\n1 1 5 1 7 3''') == '5 6'\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''3 4\n2 6 7\n4 2 3 9 5\n3 2 3 9\n100 1 7\n400 3 3 2 5\n100 2 9 2\n500 3 2 9 5''') == '2 3'\n'''\n\nassert solution('''4 3\n1 1\n1 2\n1 3\n1 4\n10 4 1 2 3 4\n20 4 1 2 3 4\n30 4 1 2 3 4\n''') == '1 2'\n'''\n\nassert solution('''1 5\n9 9 8 7 6 5 4 3 2 1\n3 4 1 2 3 4\n1 4 5 6 7 8\n4 4 1 3 5 7\n1 4 2 4 6 8\n5 4 1 9 2 8\n''') == '2 4'\n'''\n\nassert solution('''1 5\n9 9 8 7 6 5 4 3 2 1\n3 4 1 2 3 4\n1 4 5 6 7 8\n4 4 1 3 5 7\n1 4 2 4 6 8\n5 4 1 9 2 8\n1 2 3 4 5 6\n7 4 1 2 3 4\n1 2 3 4 5 6\n7 4 1 2 3 4\n1 2 3 4 5 6\n7 4 1 2 3 4\n1 2 3 4 5 6\n7 4 1 2 3 4\n1 2 3 4 5 6\n7 4 1 2 3 4\n1 2 3 4 5 6\n7 4 1 2 3 4\n1 2 3 4 5 6\n7 4 1 2 3 4\n1 2 3 4 5 6\n7 4 1 2 3 4\n1 2 3 4 5 6\n7 4 1 2 3 4\n1 2 3 4 5 6\n7 4 1 2 3 4\n1 2 3 4 5 6\n7 4 1 2 3 4\n1 2 3 4 5 6\n7 4 1 2 3 4\n1 2 3 4 5 6\n7 4 1 2 3 4\n1 2 3 4 5 6\n7 4 1 2 3 4\n1 2 3 4 5 6\n7 4 1 2 3 4\n1 2 3 4 5 6\n7 4 1 2 3 4\n1 2 3 4 5 6\n7 4 1 2 3 4\n1 2 3 4 5 6\n7 4 1 2 3 4\n1 2 3 4 5 6\n7 4 1 2 3 4\n1 2 3 4 5 6\n7 4 1 2 3 4\n1 2 3 4 5 6\n7 4 1 2 3 4\n1 2 3 4 5 6\n7 4 1 2 3 4\n1 2 3 4 5 6\n7 4 1 2 3 4\n1 2 3 4 5 6\n7 4 1 2 3 4\n1 2 3 4 5 6\n7 4 1 2 3 4\n1 2 3 4 5 6\n7 4 1 2 3 4\n1 2 3 4 5 6\n7 4 1 2 3 4\n1 2 3 4 5 6\n7 4 1 2 3 4\n1 2 3 4 5 6\n7 4 1 2 3 4\n1 2 3 4 5 6\n7 4 1 2 3 4\n1 2 3 4 5 6\n7 4 1 2 3 4\n1 2 3 4 5 6\n7 4 1 2 3 4\n1 2 3 4 5 6\n7 4 1 2 3 4\n1 2 3 4 5 6\n7 4 1 2 3 4\n1 2 3 4 5 6\n7 4 1 2 3 4\n1 2 3 4 5 6\n7 4 1 2 3 4\n1 2 3 4 5 6\n7 4 1 2 3 4\n1 2 3 4 5 6\n7 4 1 2 3 4\n1 2 3 4 5 6\n7 4 1 2 3 4\n1 2 3 4 5 6\n7 4 1 2 3 4\n1 2 3 4 5 6\n7 4 1 2 3 4\n1 2 3 4 5 6\n7 4 1 2 3 4\n1 2 3 4 5 6\n7 4 1 2 3 4\n1 2 3 4 5 6\n7 4 1 2 3 4\n1 2 3 4 5 6\n7 4 1 2 3 4\n1 2 3 4 5 6\n7 4 1 2 3 4\n1 2 3 4 5 6\n7 4 1 2 3 4\n1 2 3 4 5 6\n7 4 1 2 3 4\n1 2 3 4 5 6\n7 4 1 2 3 4\n1 2 3 4 5 6\n7 4 1 2 3 4\n1 2 3 4 5 6\n7 4 1 2 3 4\n1 2 3 4 5 6\n7 4 1 2 3 4\n1 2 3 4 5 6\n7 4 1 2 3 4\n1 2 3 4 5 6\n7 4 1 2 3 4\n1 2 3 4 5 6\n7 4 1 2 3 4\n1 2 3 4 5 6\n7 4 1 2 3 4\n1 2 3 4 5 6\n7 4 1 2 3 4\n1 2 3 4 5 6\n7 4 1 2 3 4\n1 2 3 4 5 6\n7 4 1 2 3 4\n1 2 3 4 5 6\n7 4 1 2 3 4\n1 2 3 4 5 6\n7 4 1 2 3 4\n1 2 3 4 5 6\n7 4 1 2 3 4\n1 2 3 4 5 6\n7 4 1 2 3 4\n1 2 3 4 5 6\n7 4 1 2 3 4\n1 2 3 4 5 6\n7 4 1 2 3 4\n1 2 3 4 5 6\n7 4 1 2 3 4\n1 2 3 4 5 6\n7 4 1 2 3 4\n1 2 3 4 5 6\n7 4 1 2 3 4\n1 2 3 4 5 6\n7 4 1"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('2 15') == '69 96'\nassert solution('3 0') == '-1 -1'\nassert solution('3 1') == '3 3'\nassert solution('3 2') == '3 5'\nassert solution('3 3') == '3 9'\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"2 15\") == \"69 96\"\nassert solution(\"3 0\") == \"-1 -1\"\nassert solution(\"3 7\") == \"-1 -1\"\nassert solution(\"4 4\") == \"69 76\"\nassert solution(\"6 5\") == \"69 76\"\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(input()) == expect\n\n\"\"\"\n\nfrom math import pow\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''2 15''') == '69 96'\nassert solution('''3 0''') == '-1 -1'\nassert solution('''1 10''') == '11 11'\nassert solution('''5 10''') == '59 60'\nassert solution('''1000 10''') == '-1 -1'\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''2 15''') == '69 96'\nassert solution('''3 0''') == '-1 -1'\nassert solution('''7 26''') == '67 92'\nassert solution('''3 7''') == '67 92'\nassert solution('''5 2''') == '69 96'\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''3 0''') == '-1 -1'\nassert solution('''2 15''') == '69 96'\nassert solution('''3 0''') == '-1 -1'\nassert solution('''0 0''') == '-1 -1'\nassert solution('''1 2''') == '-1 -1'\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('2 15') == '69 96'\nassert solution('3 0') == '-1 -1'\n\nimport sys\nassert sys.argv[0] == \"./solution.py\"\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''2 15''') == '69 96'\nassert solution('''3 0''') == '-1 -1'\nassert solution('''123456789 123456789''') == '987654321 987654321'\nassert solution('''123 456 789''') == '987654321 98765432'\nassert solution('''1 10''') == '1 1'\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('3 0') == '-1 -1'\nassert solution('2 15') == '69 96'"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('2 15') == '69 96'\nassert solution('3 0') == '-1 -1'\nassert solution('10 2') == '9998999 10000000000'\nassert solution('10 0') == '-1 -1'\nassert solution('5 0') == '-1 -1'\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('10 50 2') == '1230'\nassert solution('1 2345 10') == '2750685'\nassert solution('101 154 2') == '2189'\n'''\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('1 2 3') == '6'\nassert solution('10 50 2') == '1230'\nassert solution('101 154 2') == '2189'\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''10 50 2''') == '1230'\nassert solution('''1 2345 10''') == '2750685'\nassert solution('''101 154 2''') == '2189'\n\n'''\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"10 50 2\") == \"1230\"\nassert solution(\"1 2345 10\") == \"2750685\"\nassert solution(\"101 154 2\") == \"2189\"\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('10 50 2') == '1230'\nassert solution('1 2345 10') == '2750685'\nassert solution('101 154 2') == '2189'\nassert solution('101 100 100') == '0'\nassert solution('1000000000000000 1000000000 1000000000') == '1000000000000000'\nprint(solution(stdin))\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == expected\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(input) == output\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == '2189'\n'''\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == \"\""
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''6 2 3''') == 'YES'\nassert solution('''6 2 5''') == 'NO'\nassert solution('''3 2 5''') == 'YES'\nassert solution('''10 16 22''') == 'YES'\nassert solution('''10 2 3''') == 'YES'\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\nfrom sys import stdin,stdout\nimport bisect\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"4 3 2\\n7 2 7 7 4 2\") == \"YES\"\nassert solution(\"6 2 3\\n4 5 3 13 4 10\") == \"YES\"\nassert solution(\"3 2 5\\n10 16 22\") == \"NO\"\nassert solution(\"1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''6 3 10\n7 2 7 7 4 2''') == 'YES'\nassert solution('''6 2 3\n4 5 3 13 4 10''') == 'YES'\nassert solution('''3 2 5\n10 16 22\n''') == 'NO'\nassert solution('''3 2 3\n10 22 22\n''') == 'YES'\nassert solution('''3 2 2\n10 22 22\n''') == 'YES'\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"4 1 1\") == \"YES\"\nassert solution(\"7 2 7 7 4 2\") == \"YES\"\nassert solution(\"3 2 5\") == \"NO\"\nassert solution(\"10 16 22\") == \"YES\"\nassert solution(\"5 5 5\") == \"YES\"\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"6 2 3\\n7 2 7 7 4 2\") == \"YES\"\nassert solution(\"6 2 2\\n7 2 7 7 4 2\") == \"NO\"\nassert solution(\"3 2 5\\n10 16 22\") == \"YES\"\nassert solution(\"3 2 3\\n10 16 22\") == \"NO\"\nassert solution(\"6 2 5\\n7 4 3 9 4\") == \"YES\"\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('6 3 10\\n7 2 7 7 4 2') == 'YES'\nassert solution('6 2 3\\n4 5 3 13 4 10') == 'YES'\nassert solution('3 2 5\\n10 16 22') == 'NO'\nassert solution('7 2 7 7 4 2') == 'NO'\nassert solution('10 2 10 1 10 10') == 'YES'\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"RYBGRYBGRY\") == '0 0 0 0'\nassert solution(\"!RG\") == '0 1 0 0'\nassert solution(\"GB!\") == '1 1 1 1'\nassert solution(\"BGBY\") == '1 1 1 0'\nassert solution(\"!GB\") == '2 1 1 0'\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''RYBGRYBGRY''') == '0 0 0 0'\nassert solution('''RBYBGRGGRY''') == '0 1 0 0'\nassert solution('''GBGGRB''') == '1 1 1 1'\nassert solution('''GBBGRGGB''') == '2 1 1 0'\nassert solution('''!!!YGRB''') == '1 1 1 1'\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"RYBGRYBGR\") == \"0 0 0 0\"\nassert solution(\"!RGYB\") == \"0 1 0 0\"\nassert solution(\"!!!YGRB\") == \"1 1 1 1\"\nassert solution(\"!GB!RG!Y!\") == \"2 1 1 0\"\nassert solution(\"!!!!YGRB\") == \"1 1 1 1\"\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('RYBGRYBGR') == '0 0 0 0'\nassert solution('!RGYB') == '0 1 0 0'\nassert solution('!!!!YGRB') == '1 1 1 1'\nassert solution('!GB!RG!Y!') == '2 1 1 0'\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('RR') == '0 0 0 0'\nassert solution('RBG') == '0 0 0 0'\nassert solution('RYBGRYBGR') == '0 0 0 0'\nassert solution('RGBYBGGB') == '0 0 0 0'\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('RRYBGBYBGR') == '0 0 0 0'\nassert solution('RYBGRYBGR') == '0 0 0 0'\nassert solution('BGYBGY') == '1 1 1 1'\nassert solution('BGBGBGB') == '3 4 4 4'\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('RYBGRYBGR') == '0 0 0 0'\nassert solution('!RGYB') == '0 1 0 0'\nassert solution('!!!!YGRB') == '1 1 1 1'\nassert solution('!GB!RG!Y!') == '2 1 1 0'\nassert solution('!GBRGYY') == '2 1 1 1'\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(INPUT) == OUTPUT\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(INPUT) == OUTPUT\n\"\"\"\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1 4\\n2 3\\n1 3\\n1 2\\n3 4\\n2 4') == '1.5000000000'\nassert solution('2 2\\n1 2\\n2 1') == '0.000000000'\nassert solution('3 3\\n1 3\\n2 3\\n3 1') == '0.000000000'\nassert solution('2 3\\n2 1') == '0.000000000'\nassert solution('1 1\\n1 1') == '0.000000000'\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('1 4\\n2 3\\n1 3\\n1 2\\n3 4\\n2 4') == '1.5000000000'\nassert solution('4 6\\n1 4\\n2 3\\n1 3\\n1 2\\n3 4\\n2 4') == '1.5000000000'\nassert solution('2 2\\n2 1\\n1 1') == '0.5'\nassert solution('2 2\\n2 1\\n1 1') == '0.5'\nassert solution('2 2\\n1 1\\n1 1') == '0.5'\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(input) == output\n'''\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(sample_input_1) == expected_output_1\nassert solution(sample_input_2) == expected_output_2\nprint(solution(stdin))\n\"\"\"\n\n\"\"\"\n------Alternate Solutions------\n\n\"\"\"\n\nimport sys\nfrom math import sqrt"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == 1.5\n'''\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\n    '4 6'\n    '1 4'\n    '2 3'\n    '1 3'\n    '1 2'\n    '3 4'\n    '2 4'\n) == '1.5000000000'\nassert solution(\n    '4 6'\n    '1 3'\n    '1 2'\n    '3 4'\n    '2 4'\n) == '1.000000000'\nassert solution(\n    '4 6'\n    '1 3'\n    '1 2'\n    '3 4'\n    '2 4'\n) == '0.500000'\nassert solution(\n    '6 6'\n    '1 3'\n    '1 2'\n    '3 4'\n    '2 4'\n    '3 5'\n    '4 6'\n) == '1.500000'\nassert solution(\n    '6 6'\n    '1 3'\n    '1 2'\n    '3 4'\n    '2 4'\n    '3 5'\n    '4 6'\n) == '0.750000'\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(SAMPLE_INPUT) == SAMPLE_OUTPUT\n\"\"\"\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''4 6\n1 4\n2 3\n1 3\n1 2\n3 4\n2 4''') == '1.5000000000'\nassert solution('''3 4\n1 2\n2 3\n1 2''') == '0'\nassert solution('''3 4\n1 2\n2 3\n1 2''') == '1.5000000000'\nassert solution('''10 8\n5 6\n2 3\n1 4\n5 2\n3 5\n2 3\n5 3\n1 3\n1 1''') == '1.0'\nassert solution('''10 8\n5 6\n2 3\n1 4\n5 2\n3 5\n2 3\n5 3\n1 3\n1 1''') == '0'\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('3 6\\n1 4\\n2 3\\n1 3\\n1 2\\n3 4\\n2 4\\n') == '1.5000000000'\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == \"1.5000000000\"\n\"\"\"\n\nimport sys\nfrom fractions import Fraction\nfrom random import choice"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('5') == '0'\nassert solution('113') == '110'\nassert solution('1000000000') == '1000000000'\nassert solution('5432359') == '5432360'\nassert solution('11') == '12'\n\n\n'''"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(5) == \"0\"\nassert solution(3) == \"2\"\nassert solution(99999999) == \"99999998\"\nassert solution(2) == \"0\"\nassert solution(15) == \"14\"\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"5\") == \"0\"\nassert solution(\"5432359\") == \"5432360\"\nassert solution(\"5432360\") == \"5432360\"\nassert solution(\"3423\") == \"3500\"\nassert solution(\"2222\") == \"2220\"\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\n'5'\n) == '0'\n\nassert solution(\n'113'\n) == '110'\n\nassert solution(\n'1000000000'\n) == '1000000000'\n\nassert solution(\n'5432359'\n) == '5432360'\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"1000000000\") == \"1000000000\"\nassert solution(\"5432359\") == \"5432360\"\nassert solution(\"5\") == \"0\"\nassert solution(\"113\") == \"110\"\nassert solution(\"123456789\") == \"123456789\"\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('5') == '0'\nassert solution('113') == '110'\nassert solution('1000000000') == '1000000000'\nassert solution('5432359') == '5432360'\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(input()) == output\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline().strip())"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"5\") == \"0\"\nassert solution(\"113\") == \"110\"\nassert solution(\"1000000000\") == \"1000000000\"\nassert solution(\"5432359\") == \"5432360\"\n\n\"\"\""
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''5''') == '5'\nassert solution('''112''') == '111'\nassert solution('''2034''') == '2034'\nassert solution('''90000000''') == '90000000'\nassert solution('''10000000''') == '100000'\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"5\") == \"0\"\nassert solution(\"113\") == \"110\"\nassert solution(\"1000000000\") == \"1000000000\"\nassert solution(\"5432359\") == \"5432360\"\nassert solution(\"5432359\") == \"5432360\"\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('helloworld') == 'h e l l o world'\nassert solution('hastalavistababy') == 'h e a t a b a y b a'\nassert solution('merrychristmas') == 'c h r s t a m r y c r i s t s'\nassert solution('hastalavistababy') == 'h e a t a b a y b a'\n\n\n\"\"\"\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdin\n\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"helloworld\") == \"h e l l o w o r l d\"\nassert solution(\"hastalavistababy\") == \"h a s t a l a v i s t b a y\"\nassert solution(\"merrychristmas\") == \"-1\"\nassert solution(\"christmasmerry\") == \"-1\"\nassert solution(\"hastalavistababy\") == \"h a s t a l a v i s t b a y\"\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('') == '-1'\nassert solution('a') == '-1'\nassert solution('ab') == '-1'\nassert solution('abcd') == '-1'\nassert solution('abcdce') == '-1'\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('hello world') == 'h e l l o w o r d'\nassert solution('hastalavistababy') == 'h e l l o z a b y'\nassert solution('merry christmas') == '-1'\nassert solution('hastalavistababy') == '-1'\n\n\n\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('helloworld') == 'h e l l o w o r l d'\nassert solution('hastalavistababy') == 'h a t a b a y a v i s t a b a y a t a b a y a t a b a y a t a b a y a t a b a y a t a b a y a t a b a y a t a b a y'\nassert solution('merrychristmas') =='m r e y ch r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t c h r i s t ch r i s t c h r i s t ch r i s t ch ri s t c h r i s t ch r i s t ch ri s t ch ri s t ch ri s t ch ri s t ch ri s t ch ri s t ch ri s t ch ri s t ch ri s t ch ri s t ch ri s t ch ri s t ch ri s t ch ri s t ch ri s t ch ri s t ch ri s t ch ri s t ch ri s t ch ri s t ch ri s t ch ri s t ch ri s t ch ri s t ch ri s t ch ri s t ch ri s t ch ri s t ch ri s t ch ri s t ch ri s t ch ri s t ch ri s t ch ri s t ch ri s t"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('helloworld') == '-1'\nassert solution('hastalavistababy') == '3'\nassert solution('merrychristmas') == '0'\nassert solution('christmasmerry') == '-1'"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"helloworld\") == \"h e\\nl o\\nd z\"\nassert solution(\"hastalavistababy\") == \"h e\\nl o\\nd z\"\nassert solution(\"merrychristmas\") == \"0\""
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('harry potter') == 'hap'\nassert solution('tom riddle') == 'tomr'\nassert solution('riddle potter') == 'riddlep'\nassert solution('brian riddle') == 'brianr'\nassert solution('brian riddle') == 'brianr'\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\n    \"harry potter\"\n) == \"hap\"\nassert solution(\n    \"tom riddle\"\n) == \"tomr\"\nassert solution(\n    \"marry gayle\"\n) == \"gayle\"\nassert solution(\n    \"felix jones\"\n) == \"felix\"\nassert solution(\n    \"fernanda florence\"\n) == \"flfrn\"\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"harry potter\") == \"hap\"\nassert solution(\"tom riddle\") == \"tomr\"\n\nprint(\"Testcase 1 Passed\")\nassert solution(\"willy fuller\") == \"willf\"\nprint(\"Testcase 2 Passed\")\nassert solution(\"miley cyrus\") == \"cyrm\"\nprint(\"Testcase 3 Passed\")\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('harry potter') == 'hap'\nassert solution('tom riddle') == 'tomr'\nassert solution('hello world') == 'helloworld'\nassert solution('marry potter') =='mppot'\nassert solution('marry verypotter') =='mvppot'\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('harry potter') == 'hap'\nassert solution('tom riddle') == 'tomr'\nassert solution('harry Potter') == 'hap'\nassert solution('harry Potter') == 'hap'\nassert solution('harrypotter') == 'hap'\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"harry potter\") == \"hap\"\nassert solution(\"tom riddle\") == \"tomr\"\n\nprint(\"Testcases passed\")\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('harry potter') == 'hap'\nassert solution('tom riddle') == 'tomr'\nassert solution('tommarrowd') == 'tomr'\nassert solution('J kaepp') == 'jkaepp'\nassert solution('aHZhfdzg8f') == 'aHZhfdzg8f'\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('harry potter') == 'hap'\nassert solution('tom riddle') == 'tomr'\nassert solution('harry jriddle') == 'jriddle'\nassert solution('harry jriddle') == 'jriddle'\nassert solution('harry jriddle') == 'jriddle'\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('harry potter') == 'hap'\nassert solution('tom riddle') == 'tomr'\nassert solution('horace') == 'orace'\nassert solution('henry') == 'henry'\nassert solution('i am a boy') == 'iamaboy'\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('[[[]]]') == '+-     -+\\n|   ||   |\\n+- -++- -+\\n|   ||   |\\n+- -++- -+'\nassert solution('[[][]][]') == '+-        -++- -+\\n|+- -++- -+||   |\\n||   ||   |||   |\\n|+- -++- -+||   |\\n+-        -++- -+'\nassert solution('[[[]]]') == '+-        -++- -+\\n|+- -++- -+||   |\\n||   ||   |||   |\\n|+- -++- -+||   |\\n+-        -++- -+'\nassert solution('[[[]]]') == '+-        -++- -+\\n|+- -++- -+||   |\\n||   ||   |||   |\\n|+- -++- -+||   |\\n+-        -++- -+'\nassert solution('[[[]]]') == '+-        -++- -+\\n|+- -++- -+||   |\\n||   ||   |||   |\\n|+- -++- -+||   |\\n+-        -++- -+'\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('[])') == '+- -++- -+'\nassert solution('[[]]') == '+- -++- -+'\nassert solution('[]') == '+- -++- -+'\nassert solution('[][]') == '+- -++- -+'\nassert solution('[[][]]') == '+- -++- -+'\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''8\n[[][]][]''') == '''+-        -++- -+\n|+- -++- -+||   |\n||   ||   |||   |\n|+- -++- -+||   |\n+-        -++- -+\n\n+-        -++- -+\n|+- -++- -+||   |\n||   ||   |||   |\n|+- -++- -+||   |\n+-        -++- -+\n\n+-        -++- -+\n|+- -++- -+||   |\n||   ||   |||   |\n|+- -++- -+||   |\n+-        -++- -+\n\n+-        -++- -+\n|+- -++- -+||   |\n||   ||   |||   |\n|+- -++- -+||   |\n+-        -++- -+\n\n+-        -++- -+\n|+- -++- -+||   |\n||   ||   |||   |\n|+- -++- -+||   |\n+-        -++- -+\n\n+-        -++- -+\n|+- -++- -+||   |\n||   ||   |||   |\n|+- -++- -+||   |\n+-        -++- -+\n\n+-        -++- -+\n|+- -++- -+||   |\n||   ||   |||   |\n|+- -++- -+||   |\n+-        -++- -+\n\n+-        -++- -+\n|+- -++- -+||   |\n||   ||   |||   |\n|+- -++- -+||   |\n+-        -++- -+\n\n+-        -++- -+\n|+- -++- -+||   |\n||   ||   |||   |\n|+- -++- -+||   |\n+-        -++- -+\n\n+-        -++- -+\n|+- -++- -+||   |\n||   ||   |||   |\n|+- -++- -+||   |\n+-        -++- -+\n\n+-        -++- -+\n|+- -++- -+||   |\n||   ||   |||   |\n|+- -++- -+||   |\n+-        -++- -+\n\n+-        -++- -+\n|+- -++- -+||   |\n||   ||   |||   |\n|+- -++- -+||   |\n+-        -++- -+\n\n+-        -++- -+\n|+- -++- -+||   |\n||   ||   |||   |\n|+- -++- -+||   |\n+-        -++- -+\n\n+-        -++- -+\n|+- -++- -+||   |\n||   ||   |||   |\n|+- -++- -+||   |\n+-        -++- -+\n\n+-        -++- -+\n|+- -++- -+||   |\n||   ||   |||   |\n|+- -++- -+||   |\n+-        -++- -+\n\n+-        -++- -+\n|+- -++- -+||   |\n||   ||   |||   |\n|+- -++- -+||   |\n+-        -++- -+\n\n+-        -++- -+\n|+- -++- -+||   |\n||   ||   |||   |\n|+- -++- -+||   |\n+-        -++- -+\n\n+-        -++- -+\n|+- -++- -+||   |\n||   ||   |||   |\n|+- -++- -+||   |\n+-        -++- -+\n\n+-        -++- -+\n|+- -++- -+||   |\n||   ||   |||   |\n|+- -++- -+||   |\n+-        -++- -+\n\n+-        -++- -+\n|+- -++- -+||   |\n||   ||   |||   |\n|+- -++- -+||   |\n+-        -++- -+\n\n+-        -++- -+\n|+- -++- -+||   |\n||   ||   |||   |\n|+- -++- -+||   |\n+-        -++- -+\n\n+-        -++- -+\n|+- -++- -+||   |\n||   ||   |||   |\n|+- -++- -+||   |\n+-        -++- -+\n\n+-        -++- -+\n|+- -++- -+||   |\n||   ||   |||   |\n|+- -++- -+||   |\n+-        -++- -+\n\n+-        -++- -+\n|+- -++- -+||   |\n||   ||   |||   |\n|+- -++- -+||   |\n+-        -++- -+\n\n+-        -++- -+\n|+- -++- -+||   |\n||   ||   |||   |\n|+- -++- -+||   |\n+-        -++- -+\n\n+-        -++- -+\n|+- -++- -+||   |"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('[[[]]]') == '+-     -+\\n|   ||   |\\n+- -++- -+\\n'\nassert solution('[[[]]]') == '+- -++- -+\\n|   ||   |\\n+- -++- -+\\n'\nassert solution('[[[]]]') == '+- -++- -+\\n|   ||   |\\n+- -++- -+\\n'\nassert solution('[[[]]]') == '+- -++- -+\\n|   ||   |\\n+- -++- -+\\n'\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"a\") == \"a\"\nassert solution(\"a\" * 100) == \"a\" * 100\nassert solution(\"a\" * 200) == \"a\" * 200\n\nassert solution(\"[][]\") == \"[]{}[]\"\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"[[[]]]\") == \"+-        -++- -+\\n|   ||   |\\n+- -++- -+\"\nassert solution(\"[][]\") == \"+-        -++- -+\\n|   ||   |\\n+- -++- -+\"\nassert solution(\"[][][][][][][][][][][]\") == \"+-        -++- -+\\n|   ||   |\\n+- -++- -+\\n|   ||   |\\n+- -++- -+\\n|   ||   |\\n+- -++- -+\\n|   ||   |\\n+- -++- -+\\n|   ||   |\\n+- -++- -+\\n|   ||   |\\n+- -++- -+\"\nassert solution(\"[][][]\") == \"+-        -++- -+\\n|   ||   |\\n+- -++- -+\\n|   ||   |\\n+- -++- -+\"\nassert solution(\"[][][][][]\") == \"+-        -++- -+\\n|   ||   |\\n+- -++- -+\\n|   ||   |\\n+- -++- -+\\n|   ||   |\\n+- -++- -+\\n|   ||   |\\n+- -++- -+\\n|   ||   |\\n+- -++- -+\"\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('[[][]][]') == '+-        -++- -+\\n|+- -++- -+||   |\\n||   ||   |||   |\\n|+- -++- -+||   |\\n+-        -++- -+'\nassert solution('[][]') == '+-        -++- -+\\n|   ||   |\\n+- -++- -+'\nassert solution('[]') == '+-        -++- -+'\nassert solution('[[]]') == '+-        -++- -+\\n|   ||   |\\n+- -++- -+'\nassert solution('[[][]]') == '+-        -++- -+\\n|   ||   |\\n+- -++- -+'\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''8''') == '''+-        -++- -+\n|+- -++- -+||   |\n||   ||   |||   |\n|+- -++- -+||   |\n+-        -++- -+\n'''\n\nassert solution('''6''') == '''+-     -+\n|+-   -+|\n||+- -+||\n|||   |||\n||+- -+||\n|+-   -+|\n+-     -+\n'''\n\nassert solution('''2''') == '''+- -+\n|   |\n+- -+\n'''\n\nassert solution('''4''') == '''+-     -+\n|   |\n+- -+\n|   |\n+- -+\n'''\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\n    \"8\\n[[][]][]\") == \"+-        -++- -+\\n|+- -++- -+||   |\\n||   ||   |||   |\\n|+- -++- -+||   |\\n+-        -++- -+\\n\"\nassert solution(\n    \"6\\n[[[]]]\") == \"+-     -+\\n|+- -++- -+|\\n||   ||   ||\\n|+- -++- -+|\\n+-        -++- -+\\n\"\nassert solution(\n    \"6\\n[[][]]\") == \"+-     -+\\n|+- -++- -+|\\n||   ||   ||\\n|+- -++- -+|\\n+-        -++- -+\\n\"\nassert solution(\n    \"2\\n[]\") == \"+- -+\\n|   |\\n+- -+\\n\"\nassert solution(\n    \"4\\n[][]\") == \"+- -++- -+\\n|   ||   |\\n+- -++- -+\\n\"\n"
    },
    {
        "number": 275,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1000\\n111') == '<'\nassert solution('00100\\n11') == '=', \"0 ^ 1\"\nassert solution('110\\n101') == '>'\n\n\n\n\"\"\"\n"
    },
    {
        "number": 275,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('1000\\n111') == '<'\nassert solution('00100\\n11') == '=\nassert solution('110\\n101') == '>'\nassert solution('110\\n101') == '='''\n"
    },
    {
        "number": 275,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1000\\n111\\n') == '<'\nassert solution('00100\\n11\\n') == '='\nassert solution('110\\n101\\n') == '>'\nassert solution('100\\n100\\n') == '='\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 275,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('') == '>'\nassert solution('1000') == '>'\nassert solution('1000000000') == '<'\nassert solution('10011') == '>'\nassert solution('01111') == '<'\n"
    },
    {
        "number": 275,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"1000\\n111\") == \">\"\nassert solution(\"00100\\n11\") == \"=\"\nassert solution(\"110\\n101\") == \">\"\nassert solution(\"50\\n10\") == \">\"\nassert solution(\"10\\n10\") == \"=\"\n"
    },
    {
        "number": 275,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"1000\") == \">\"\nassert solution(\"00100\") == \"=\"\nassert solution(\"110\") == \">\"\nassert solution(\"101\") == \">\"\nassert solution(\"0\") == \"=\"\n"
    },
    {
        "number": 275,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"1000\") == '<'\nassert solution(\"111\") == '='\nassert solution(\"00100\") == '>'\nassert solution(\"11\") == '<'\nassert solution(\"101\") == '='\n"
    },
    {
        "number": 275,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"1000\\n111\\n\") == \">\"\nassert solution(\"00100\\n11\\n\") == \"<\"\nassert solution(\"110\\n101\\n\") == \"=\"\nassert solution(\"1000\\n1100\\n\") == \">\"\nassert solution(\"00100\\n11\\n\") == \"<\"\n"
    },
    {
        "number": 275,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''1000\n111\n''') == '>'\n\nassert solution('''00100\n11\n''') == '='\n\nassert solution('''110\n101\n''') == '<'\n\n\nassert solution('''1145\n5222\n''') == '='\n\nassert solution('''872\n1482\n''') == '>'"
    },
    {
        "number": 275,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"1000\\n111\\n\") == \">\"\nassert solution(\"00100\\n11\\n\") == \"=\"\nassert solution(\"110\\n101\\n\") == \"<\"\nassert solution(\"2\\n2\\n\") == \"=\"\nassert solution(\"1\\n1\\n\") == \">\"\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''4\nred\npurple\nyellow\norange''') == '2\\nSpace\\nTime\\nPower\\nMind'\nassert solution('''0''') == '6\\nTime\\nMind\\nSoul\\nSpace\\nReality'\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''4''') == '2'\nassert solution('''0''') == '6'\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('0') == '6'\nassert solution('4') == '2'\nassert solution('2') == '6'\nassert solution('3') == '0'\nassert solution('3') == '0'\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''4\nred\npurple\nyellow\norange\n''') == '2\\nSpace\\nTime'\n\nassert solution('''0\n''') == '6\\nTime\\nMind\\nSoul\\nPower\\nReality\\nSpace'\n\nassert solution('''10\nred\npurple\nyellow\norange\nred\nyellow\npurple\nred\nred\nred\nred\nred\nred\n''') == '0\\nTime\\nSpace\\nReality'\n\nassert solution('''4\nred\npurple\nyellow\norange\n''') == '2\\nSpace\\nTime'\n\nassert solution('''4\nblue\nblue\nblue\nblue\n''') == '2\\nTime'"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''4\nred\npurple\nyellow\norange''') == '2\\nSpace\\nTime'\nassert solution('''0''') == '6\\nTime\\nMind\\nSoul\\nPower\\nReality'\nassert solution('''6''') == '0\\nSpace\\nTime\\nMind\\nSoul\\nPower'\nassert solution('''12''') == '0\\nSpace\\nTime\\nMind\\nSoul\\nPower\\nReality'\nassert solution('''3''') == '2\\nTime\\nSpace'\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1') == ''\nassert solution('1\\n') == '6'\nassert solution('5\\nred\\nblue\\nblue\\ngreen\\ngreen\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\nblue\\"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''4''') == '''2'''\nassert solution('''0''') == '''6'''\nassert solution('''red\npurple\nyellow\norange''') == '''Space\nTime\nPower\nSoul'''\nassert solution('''blue\ngreen\norange\nred\npurple\ngreen\nblue\ngreen\nblue\npurple\nyellow\nyellow\ngreen\ngreen\nblue\nblue\nblue\npurple\ngreen\ngreen\nblue\nblue\nblue\ngreen\npurple\nyellow\npurple\norange\nred\norange\nblue\nblue\nblue\nred\nblue\npurple\nblue\nblue\ngreen\norange\ngreen\nblue\nblue\norange\nblue\npurple\npurple\nyellow\npurple\nblue\nblue\ngreen\ngreen\nblue\npurple\nblue\nblue\nblue\nblue\npurple\nblue\nblue\npurple\norange\norange\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\npurple\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\npurple\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\npurple\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue\nblue"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('') == 0\nassert solution('12') == 0\nassert solution('1234') == 0\nassert solution('red') == 0\nassert solution('red blue') == 1\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('red') == ''\nassert solution('purple') == 'Space'\nassert solution('yellow') == 'Time'\nassert solution('orange') == 'Space'\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"1\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\nblue\\nred\\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == 'Final!'\n\"\"\"\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1 1 1') == 'Final!'\nassert solution('3 3 3') == '1'\nassert solution('2 2 1') == 'Final!'\nassert solution('1 1 1') == 'Final!'\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('4 1 2') == '1'\nassert solution('8 2 6') == 'Final!'\nassert solution('8 7 5') == '2'\nassert solution('8 7 5') == '2'\nassert solution('8 7 5') == '2'\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('2 1 2') == '1'\nassert solution('8 2 6') == 'Final!'\nassert solution('8 7 5') == '2'\n\n\"\"\"\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdin\n'''\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('4 1 2') == '1'\nassert solution('8 2 6') == 'Final!'\nassert solution('8 7 5') == '2'\nassert solution('8 2 6') == 'Final!'\nassert solution('1 2 2') == '1'\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('4 1 2') == '1'\nassert solution('8 2 6') == 'Final!'\nassert solution('8 7 5') == '2'"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('5 4 3') == 'Final!'\nassert solution('8 7 5') == 2\nassert solution('8 7 3') == 1\nassert solution('8 7 7') == 3\nassert solution('8 6 7') == 2\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"4 1 2\") == \"1\"\nassert solution(\"8 2 6\") == \"Final!\"\nassert solution(\"8 7 5\") == \"2\"\nassert solution(\"1 2 3\") == \"1\"\nassert solution(\"9 2 1\") == \"Final!\"\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''4\n4 3 2 1\n0 1 1 1\n''') == '2'\nassert solution('''3\n2 3 1\n0 0 0\n''') == '1'\nassert solution('''3\n2 3 1\n0 0 0\n''') == '0'\nassert solution('''3\n5 6 7 8\n2 3 1 0\n0 0 0 0\n''') == '2'\nassert solution('''3\n5 6 7 8\n2 3 1 0\n0 0 0 0\n''') == '1'\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('4\\n4 3 2 1\\n0 1 1 1\\n') == '2'\nassert solution('3\\n2 3 1\\n0 0 0\\n') == '1'\nassert solution('3\\n2 3 1\\n0 0 0\\n') == '1'\nassert solution('6\\n2 3 1 2 4 5 6\\n0 0 0 1 1 1 1\\n') == '1'\nassert solution('6\\n2 3 1 2 4 5 6\\n0 0 0 1 1 1 1\\n') == '1'\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''4\n4 3 2 1\n0 1 1 1\n''') == '2'\n\nassert solution('''3\n2 3 1\n0 0 0\n''') == '1'\n\nassert solution('''6\n5 6 4 3 2 1\n0 1 0 0 0 0\n''') == '2'\n\nassert solution('''15\n3 4 2 1 6 5 9 7 10 8 11 12 13 14 15\n1 0 1 1 1 1 1 0 1 0 1 0 1 1 1\n''') == '7'\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('4\\n4 3 2 1\\n0 1 1 1\\n') == '2'\nassert solution('3\\n2 3 1\\n0 0 0\\n') == '1'\n\n\"\"\"\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('4\\n4 3 2 1\\n0 1 1 1\\n') == 2\nassert solution('3\\n2 3 1\\n0 0 0\\n') == 1\nassert solution('1\\n0\\n') == 1\nassert solution('6\\n3 4 2 5 1 6\\n1 0 0 1 0 1\\n') == 2\n\n\n\n\"\"\"\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\n'''4\n4 3 2 1\n0 1 1 1\n''') == '2'\n\nassert solution(\n'''3\n2 3 1\n0 0 0\n''') == '1'\n'''\nn = int(stdin.readline().strip())\np = tuple(map(int, stdin.readline().strip().split()))\nb = tuple(map(int, stdin.readline().strip().split()))\n\nprint(solution(stdin))\n'''"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(input()) == output\n\n\n\n>>> \n\n>>> \n\n\"\"\"\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''4\n4 3 2 1\n0 1 1 1\n''') == '2'\nassert solution('''3\n2 3 1\n0 0 0\n''') == '1'\nassert solution('''7\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n''') == '5'\n'''\n\n'''\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"\"\"4\n4 3 2 1\n0 1 1 1\n\"\"\") == \"2\"\nassert solution(\"\"\"3\n2 3 1\n0 0 0\n\"\"\") == \"1\"\nassert solution(\"\"\"2\n2 3 1\n0 0 0\n\"\"\") == \"1\"\nassert solution(\"\"\"1\n1\n\"\"\") == \"1\"\nassert solution(\"\"\"2\n2\n\"\"\") == \"2\"\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('5 6\\n4 2') == '26'\nassert solution('10 10\\n10 0') == '100'\nassert solution('10 10\\n10 -1') == '99'\nassert solution('10 10\\n10 -2') == '99'\nassert solution('10 10\\n10 -99') == '99'\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == expected\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('2 10') == '100'\nassert solution('5 6') == '26'\nassert solution('10 10') == '100'\n\"\"\""
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == '100'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('5 6') == '26'\nassert solution('10 10') == '100'\nassert solution('1 11') == '2'\nassert solution('1 11') == '2'\nassert solution('1 10') == '100'\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('5 6') == '26'\nassert solution('10 10') == '100'\n\n\n-----\n\n\"\"\"\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"5 6\\n4 2\") == \"26\"\nassert solution(\"10 10\\n10 0\") == \"100\"\nassert solution(\"2 2\\n1 1\") == \"1\"\nassert solution(\"10 10\\n0 0\") == \"100\"\nassert solution(\"5 5\\n3 1\") == \"26\"\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"5 6\\n4 2\") == \"26\"\nassert solution(\"10 10\\n10 0\") == \"100\"\nassert solution(\"15 6\\n4 2\") == \"26\"\nassert solution(\"5 6\\n2 3\\n1 2\") == \"3\"\nassert solution(\"2 5\\n3 3\\n2 2\") == \"6\"\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''5 6\n4 2''') == '26'\nassert solution('''10 10\n10 0''') == '100'\nassert solution('''7 15\n0 3''') == '2'\nassert solution('''15 11\n0 4''') == '5'\n'''\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('5 6') == '26'\nassert solution('10 10') == '100'\n\"\"\""
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1 2\\n1 1\\n3 2\\n') == '10'\nassert solution('2 3\\n4 5\\n6 7\\n') == '7'\nassert solution('2 3\\n4 6\\n6 7\\n') == '-1'\nassert solution('1 2\\n1 1\\n3 2\\n') == '10'\nassert solution('2 3\\n4 5\\n6 7\\n') == '7'\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''3 2\n1 4 2\n10 4\n2 6\n''') == \"10\"\n\nassert solution('''3 2\n1 4 2\n10 4\n2 6\n''') == \"-1\"\n\nassert solution('''6 8\n4 6\n4 2\n4 3\n4 1\n2 2\n3 1\n2 2\n3 3\n3 4\n4 5\n5 1\n3 4\n5 5\n5 6\n3 4\n''') == \"1\""
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"1 2\") == -1\nassert solution(\"3 2\") == 10\nassert solution(\"5 3\") == 7\nassert solution(\"3 1\") == -1\nassert solution(\"3 3\") == 3\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('2 2\\n1 4 2\\n10 4\\n2 6') == '10'\nassert solution('2 2\\n1 4 2\\n10 4\\n2 6\\n0 0\\n1 1\\n2 2\\n3 3\\n4 4\\n5 5\\n6 6') == '-1'\nassert solution('2 2\\n1 4 2\\n10 4\\n2 6\\n0 0\\n1 1\\n2 2\\n3 3\\n4 4\\n5 5\\n6 6\\n7 7\\n8 8\\n9 9\\n10 10') == '0'\nprint(solution(stdin))"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1 4 2\\n10 4') == '10'\nassert solution('1 2\\n1 1') == '-1'\nassert solution('1 2\\n10 1') == '10'\nassert solution('1 1\\n10 1') == '-1'\nassert solution('2 3\\n1 2 3\\n1 1') == '2'\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\n'''\n3 2\n1 4 2\n10 4\n2 6\n''') == '10'\n\nassert solution(\n'''\n5 2\n5 5\n1 2\n2 5\n1 3\n1 4\n1 5\n1 6\n''') == '1'\n\nassert solution(\n'''\n5 2\n3 2\n2 3\n1 3\n1 4\n1 5\n1 6\n1 7\n''') == '-1'\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\n'''\n3 2\n1 4 2\n10 4\n2 6\n''') == '10'\nassert solution(\n'''\n3 2\n1 4 2\n10 4\n2 6\n''') == '-1'\nassert solution(\n'''\n3 2\n1 4 2\n10 4\n1 4 3\n''') == '10'\nassert solution(\n'''\n3 2\n1 4 2\n10 4\n1 6 1\n''') == '-1'\nassert solution(\n'''\n3 2\n1 4 2\n10 4\n1 6 1\n''') == '2'\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"3 2\") == \"10\"\nassert solution(\"3 2\") == \"-1\"\nassert solution(\"1 2\") == \"-1\"\nassert solution(\"1 2 3 4\") == \"-1\"\nassert solution(\"1 1 1 1\") == \"0\"\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdin\n'''\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('3 2\\n1 4 2\\n10 4\\n2 6') == '10'\nassert solution('3 2\\n1 4 2\\n10 4\\n2 6\\n4 4\\n2 4') == '10'\nassert solution('3 2\\n1 4 2\\n10 4\\n2 6\\n1 1\\n4 4') == '-1'\nassert solution('3 2\\n1 4 2\\n10 4\\n2 6\\n1 1\\n4 4\\n2 4') == '10'\nassert solution('3 2\\n1 4 2\\n10 4\\n2 6\\n1 1\\n4 4\\n2 4\\n3 3') == '5'\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('0 10') == '0'\nassert solution('2 4') == '2'\nassert solution('107 109') == '2'\nassert solution('54 56') == '8'\nassert solution('43 46') == '0'\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('2 4') == '2'\nassert solution('0 10') == '0'\nassert solution('107 109') == '2'\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''2 4''') == '2'\nassert solution('''0 10''') == '0'\nassert solution('''107 109''') == '2'\n'''\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('0 1') == '0'\nassert solution('1 2') == '1'\nassert solution('2 3') == '1'\nassert solution('2 0') == '0'\nassert solution('5 3') == '2'\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('2 4\\n') == '2'\nassert solution('0 10\\n') == '0'\nassert solution('107 109\\n') == '2'\nassert solution('108 109\\n') == '0'\nassert solution('1111 1111\\n') == '3'\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('2 4') == '2'\nassert solution('0 10') == '0'\nassert solution('107 109') == '2'\nassert solution('0') == '0'\nassert solution('0') == '0'\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('0 10') == '0'\nassert solution('2 4') == '2'\nassert solution('108 109') == '2'\nassert solution('10 107') == '2'\nassert solution('108 108') == '2'\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('2 4\\n') == '2'\nassert solution('0 10\\n') == '0'\nassert solution('107 109\\n') == '2'\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('2 4') == '2'\nassert solution('0 10') == '0'\nassert solution('107 109') == '2'\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('8 4\\n10010101\\n') == '2\\n'\nassert solution('4 2\\n1001\\n') == '-1\\n'\nassert solution('12 3\\n101111100101\\n') == '4\\n'\n'''"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"8 4\\n10010101\\n\") == \"2\\n\"\nassert solution(\"4 2\\n1001\\n\") == \"-1\\n\"\nassert solution(\"12 3\\n101111100101\\n\") == \"4\\n\"\n\n\n-----Alternate solutions-----\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('8 4\\n10010101\\n') == '2'\nassert solution('4 2\\n1001\\n') == '-1'\nassert solution('12 3\\n101111100101\\n') == '4'\nassert solution('5 2\\n1011111\\n') == '-1'\nassert solution('5 2\\n11111111111\\n') == '-1'\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''8 4''') == '2'\nassert solution('''4 2''') == '-1'\nassert solution('''8 4\n10010101''') == '2'\nassert solution('''8 4\n11100101''') == '3'\nassert solution('''12 3\n101111100101''') == '4'\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('4 2') == '-1'\nassert solution('10 4') == '4'\nassert solution('1 1') == '0'\nassert solution('8 4') == '2'\nassert solution('10110101') == '2'\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('8 4\\n10010101\\n') == '2'\nassert solution('4 2\\n1001\\n') == '-1'\nassert solution('12 3\\n101111100101\\n') == '4'\nassert solution('8 3\\n1011101\\n') == '4'\nassert solution('8 6\\n1101000110001\\n') == '-1'\n\n\n\n\n\n'''"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''8 4\n10010101\n''') == '2'\nassert solution('''4 2\n1001\n''') == '-1'\nassert solution('''12 3\n101111100101\n''') == '4'\nassert solution('''8 4\n11100101\n''') == '3'\nassert solution('''11 7\n11100101\n''') == '3'\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('8 4\\n10010101') == '2'\nassert solution('4 2\\n1001') == '-1'\nassert solution('8 4\\n11100101') == '3'\nassert solution('12 3\\n101111100101') == '4'\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''1 2\n0''') == '-1'\nassert solution('''2 3\n10110101''') == '3'\nassert solution('''6 2\n11100101''') == '-1'\nassert solution('''10 3\n10110101111''') == '4'\nassert solution('''5 4\n0101''') == '2'\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"1\"\nassert solution(\"6\") == \"2\"\nassert solution(\"7\") == \"1\"\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''3''') == '1'\nassert solution('''4''') == '2'\nassert solution('''5''') == '2'\nassert solution('''6''') == '2'\nassert solution('''7''') == '2'\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''3''') == '1'\nassert solution('''4''') == '2'\nassert solution('''5''') == '3'\nassert solution('''6''') == '4'\nassert solution('''7''') == '5'\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('3') == '1'\nassert solution('4') == '2'\nassert solution('5') == '3'\nassert solution('6') == '7'\nassert solution('7') == '8'\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"2\"\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''3\n''') == '1'\nassert solution('''4\n''') == '2'\nassert solution('''5\n''') == '2'\nassert solution('''6\n''') == '3'\nassert solution('''7\n''') == '3'\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''3''') == '1'\nassert solution('''4''') == '2'\nassert solution('''''') == ''\nassert solution('''0''') == ''\nassert solution('''100''') == ''\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('4') == '2'\nassert solution('3') == '1'\nassert solution('3') == '1'\nassert solution('3') == '1'\nassert solution('5') == '2'\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''3''') == '1'\nassert solution('''4''') == '2'\nassert solution('''1''') == '1'\n'''\n[Finished in 0.3s]\n'''\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''3''') == '1'\nassert solution('''4''') == '2'\nassert solution('''1000000''') == '10^3'\nassert solution('''1100001''') == '10^3'\n'''"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1359257') == 'YES'\nassert solution('17851817') == 'NO'\n\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"1359257\") == \"YES\"\nassert solution(\"17851817\") == \"NO\"\n\n\"\"\""
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"1359257\") == \"YES\"\nassert solution(\"17851817\") == \"NO\"\nassert solution(\"100000000000\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(input()) == 'YES'\nassert solution(input()) == 'NO'\nassert solution(input()) == 'YES'\nassert solution(input()) == 'YES'\nassert solution(input()) == 'NO'\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"1453\") == \"NO\"\nassert solution(\"1359257\") == \"YES\"\nassert solution(\"17851817\") == \"NO\"\nassert solution(\"100100100\") == \"YES\"\nassert solution(\"100\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(1359257) == 'YES'\nassert solution(17851817) == 'NO'\n\"\"\"\nimport sys"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('1359257') == 'YES'\nassert solution('17851817') == 'NO'\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('') == None\nassert solution('1359257') == 'YES'\nassert solution('17851817') == 'NO'\nassert solution('135925726143634') == 'NO'\nassert solution('1476136280472896') == 'YES'\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1359257') == 'YES'\nassert solution('17851817') == 'NO'\n\n\n\"\"\"\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == 'YES'\n\"\"\"\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('3\\n1 2\\n1 2\\n1 0\\n0 1\\n0 2\\n') == 'NO'\nassert solution('2\\n1 3\\n1 0\\n0 2\\n') == 'YES'\n\n\n\"\"\""
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 2\\n1 2\\n1 0\\n0 1\\n0 2\\n-1 3\") == \"NO\"\nassert solution(\"2\\n1 3\\n1 0\\n0 2\\n0 3\") == \"YES\"\nassert solution(\"2\\n1 3\\n1 0\\n0 3\") == \"NO\"\nassert solution(\"2\\n1 3\\n1 0\\n0 3\\n1 3\") == \"YES\"\n\n\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''2\n1 2\n1 2\n1 0\n0 1\n0 2\n''') == 'NO'\nassert solution('''2\n1 3\n1 0\n0 3\n''') == 'YES'\nassert solution('''2\n1 3\n1 0\n0 3\n''') == 'YES'\nassert solution('''1\n1\n1\n1\n1\n1\n1\n''') == 'NO'\nassert solution('''2\n1 3\n1 0\n0 3\n''') == 'YES'\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"4\n1 2\n1 2\n1 0\n0 1\n0 2\n\"\"\"\n) == \"NO\"\n\nassert solution(\n\"\"\"2\n1 3\n1 0\n-1 3\n\"\"\"\n) == \"YES\"\n\nassert solution(\n\"\"\"2\n1 3\n1 0\n0 2\n\"\"\"\n) == \"YES\"\n\nassert solution(\n\"\"\"2\n1 3\n1 0\n0 3\n\"\"\"\n) == \"NO\"\n\"\"\"\n\n3\n1 3\n1 0\n0 3\n1 3\n1 0\n0 3\n\"\"\"\n) == \"NO\"\n\nassert solution(\n\"\"\"2\n1 3\n1 0\n0 3\n1 3\n1 0\n0 3\n\"\"\"\n) == \"YES\""
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''4\n1 2\n1 2\n1 0\n0 1\n0 2\n''') == \"NO\"\nassert solution('''2\n1 3\n1 0\n0 2\n''') == \"YES\"\nassert solution('''2\n1 3\n1 0\n0 3\n''') == \"NO\"\n'''\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"No\"\nassert solution(\"1\\n1\\n1\\n1\") == \"No\"\nassert solution(\"1\\n1\\n1\\n1\") == \"No\"\nassert solution(\"1\\n1\\n1\\n1\") == \"No\"\nassert solution(\"1\\n1\\n1\\n1\") == \"No\"\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"\"\"4\n1 2\n1 2\n1 0\n0 1\n0 2\n\"\"\") == \"YES\"\nassert solution(\"\"\"2\n1 3\n1 0\n0 2\n\"\"\") == \"NO\"\nassert solution(\"\"\"2\n1 3\n1 0\n0 3\n\"\"\") == \"NO\"\nassert solution(\"\"\"2\n1 3\n1 0\n0 3\n\"\"\") == \"NO\"\nassert solution(\"\"\"4\n1 2\n1 2\n1 0\n0 1\n0 2\n\"\"\") == \"YES\"\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1 2\\n1 2\\n1 0\\n0 1\\n0 2') == 'NO'\nassert solution('1 3\\n1 0\\n-1 3\\n') == 'YES'\nassert solution('1 3\\n1 0\\n0 3\\n') == 'NO'\nassert solution('1 3\\n1 0\\n0 3\\n') == 'NO'\nassert solution('1 3\\n1 0\\n0 3\\n') == 'NO'\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"1\\n1 2\\n1 0\\n0 1\\n0 2\") == \"NO\"\nassert solution(\"2\\n1 3\\n1 0\\n0 2\") == \"YES\"\nassert solution(\"2\\n1 3\\n1 0\\n0 3\\n\") == \"NO\"\nassert solution(\"1\\n1 2\\n1 0\\n0 2\\n\") == \"NO\"\nassert solution(\"1\\n1 2\\n1 0\\n0 3\\n\") == \"NO\"\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(input(4)) == output(4)\nassert solution(input(2)) == output(2)\n\"\"\""
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('') == 0\nassert solution('0') == 0\nassert solution('1') == 1\nassert solution('2') == 1\nassert solution('3') == 1\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('1\\n7') == '4'\nassert solution('2\\n7') == '5'\nassert solution('3\\n7') == '2'\nassert solution('4\\n7') == '5'\nassert solution('5\\n7') == '2'\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"3\") == \"\"\nassert solution(\"8\") == \"\"\nassert solution(\"7\") == \"5\"\nassert solution(\"7\") == \"5\"\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('7') == '4'\nassert solution('8') == '5'\nassert solution('9') == '5'\nassert solution('10') == '5'\nassert solution('11') == '5'\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"\"\"7\"\"\") == \"\"\"4\"\"\"\n\nassert solution(\"\"\"8\"\"\") == \"\"\"5\"\"\"\n\nassert solution(\"\"\"9\"\"\") == \"\"\"5\"\"\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''7''') == '5'\nassert solution('''8''') == '5'\nassert solution('''9''') == '5'\nassert solution('''10''') == '1'\nassert solution
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('7') == '4'\nassert solution('8') == '5'\nassert solution('9') == '5'\nassert solution('10') == '6'\nassert solution('1010') == '10'\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('') == '0'\nassert solution('0') == '0'\nassert solution('1') == '1'\nassert solution('10') == '1'\nassert solution('100') == '2'\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\n8\n\"\"\") == '5'\n\nassert solution(\n\"\"\"\n9\n\"\"\") == '5'\n\nassert solution(\n\"\"\"\n4\n\"\"\") == '4'\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('8') == '4'\nassert solution('9') == '5'\nassert solution('10') == '5'\nassert solution('11') == '5'\nassert solution('12') == '6'\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1 2 3 4 5 6') == '1 3'\nassert solution('2 3 4 5 6') == '1 3'\nassert solution('3 4 5 6') == '1 3'\nassert solution('4 5 6') == '1 3'\nassert solution('5 6') == '1 3'\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"6 3\\n\") == \"1 3\"\nassert solution(\"0 3\\n\") == \"0 3\"\nassert solution(\"10 3\\n\") == \"1 3\"\nassert solution(\"10 7\\n\") == \"2 6\"\n\"\"\"\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == expected\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"6 3\") == \"1 3\"\nassert solution(\"3 3\") == \"1 3\"\nassert solution(\"4 4\") == \"1 3\"\nassert solution(\"4 6\") == \"1 3\"\nassert solution(\"7 3\") == \"1 3\"\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''6 3''') == '1 3'"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('6 3') == '1 3'\n\"\"\"\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('6 3') == '1 3'\nassert solution('5 3') == '1 3'\nassert solution('1 10') == '1 10'\nassert solution('2 5') == '1 8'\nassert solution('1 1000') == '1 1098'"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('6 3') == '1 3'\n'''\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"6 3\\n\") == \"1 3\"\nassert solution(\"7 2\\n\") == \"1 3\"\nassert solution(\"9 4\\n\") == \"1 3\"\nassert solution(\"9 3\\n\") == \"1 3\"\nassert solution(\"9 2\\n\") == \"1 3\"\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('6 3\\n') == '1 3'\nassert solution('6 4\\n') == '1 3'\nassert solution('6 5\\n') == '1 3'\nassert solution('6 6\\n') == '1 3'\nassert solution('6 7\\n') == '1 3'\n"
    },
    {
        "number": 288,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\n'''2\n''') == '1'\nassert solution(\n'''3\n''') == '2'\nassert solution(\n'''4\n''') == '2'\nassert solution(\n'''10\n''') == '4'\n"
    },
    {
        "number": 288,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"2\"\nassert solution(\"10\") == \"4\"\n\n\"\"\""
    },
    {
        "number": 288,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '2'\nassert solution('10') == '4'\nassert solution('11') == '5'\n"
    },
    {
        "number": 288,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '2'\nassert solution('5') == '3'\nassert solution('6') == '4'\n"
    },
    {
        "number": 288,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''2''') == '1'\nassert solution('''3''') == '2'\nassert solution('''4''') == '2'\nassert solution('''5''') == '3'\nassert solution('''6''') == '3'\n"
    },
    {
        "number": 288,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('2\\n') == '1'\nassert solution('3\\n') == '2'\nassert solution('4\\n') == '2'\nassert solution('10\\n') == '4'\nassert solution('5\\n') == '3'\n"
    },
    {
        "number": 288,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '2'\nassert solution('10') == '4'\nassert solution('100') == '4'\n"
    },
    {
        "number": 288,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '2'\nassert solution('10') == '4'\nassert solution('100') == '8'\n"
    },
    {
        "number": 288,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('2') == 1\nassert solution('3') == 2\nassert solution('4') == 2\nassert solution('10') == 4\nassert solution('100') == 40\n"
    },
    {
        "number": 288,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('') == None\nassert solution('2') == None\nassert solution('3') == None\nassert solution('4') == None\nassert solution('10') == None\n"
    },
    {
        "number": 289,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('VK') == 1\nassert solution('V') == 0\nassert solution('VV') == 1\nassert solution('VKKKKKKKKKVVVVVVVVK') == 3\nassert solution('KVKV') == 1\n"
    },
    {
        "number": 289,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(VK) == 1\nassert solution(V) == 0\nassert solution(VKKKKKKKKKVVVVVVVVK) == 3\nassert solution(KVK) == 1\nassert solution(K) == 0\n"
    },
    {
        "number": 289,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('VK') == 1\nassert solution('V') == 0\nassert solution('VV') == 1\nassert solution('VKKKKKKKKKVVVVVVVVK') == 3\n"
    },
    {
        "number": 289,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('VK') == '1'\nassert solution('V') == '0'\nassert solution('VKKKKKKKKKVVVVVVVVK') == '3'\nassert solution('KVKV') == '1'\nassert solution('VKK') == '0'\n"
    },
    {
        "number": 289,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"VK\") == \"1\"\nassert solution(\"V\") == \"0\"\nassert solution(\"V\") == \"0\"\nassert solution(\"K\") == \"0\"\nassert solution(\"K\") == \"0\"\n"
    },
    {
        "number": 289,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('VK') == 1\nassert solution('V') == 0\nassert solution('VKKKKKKKKKVVVVVVVVK') == 3\nassert solution('KVKV') == 1\nassert solution('VKKKKKKKKKVVVVVVVVK') == 3\n"
    },
    {
        "number": 289,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"VK\") == \"1\"\nassert solution(\"V\") == \"0\"\nassert solution(\"VKKKKKKKKKVVVVVVVVK\") == \"3\"\nassert solution(\"KVK\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 289,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('VK') == 1\nassert solution('V') == 0\nassert solution('VV') == 1\nassert solution('VKKKKKKKKKVVVVVVVVK') == 3\nassert solution('KVK') == 1\n"
    },
    {
        "number": 289,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"VK\") == 1\nassert solution(\"VV\") == 1\nassert solution(\"V\") == 0\nassert solution(\"VKKKKKKKKKVVVVVVVVK\") == 3\nassert solution(\"KVK\") == 1\n"
    },
    {
        "number": 289,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('VK') == 1\nassert solution('V') == 0\nassert solution('VK') == 1\nassert solution('VKKKKKKKKKVVVVVVVVK') == 3\nassert solution('KVK') == 1\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''1''') == '2'\nassert solution('''2''') == '3'\nassert solution('''4''') == '4'\nassert solution('''10''') == '9'\nassert solution('''10^9''') == '49'\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"1\") == 2\nassert solution(\"2\") == 3\nassert solution(\"4\") == 4"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1') == '2'\nassert solution('2') == '3'\nassert solution('4') == '4'\nassert solution('5') == '5'\nassert solution('100') == '11'\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\n'') == 1\nassert solution(\n'1'\n) == 1\nassert solution(\n'2'\n) == 2\nassert solution(\n'4'\n) == 4\nassert solution(\n'5'\n) == 5\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1') == 2\nassert solution('2') == 3\nassert solution('4') == 4\nassert solution('3') == 5\nassert solution('10') == 24\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('0') == ''\nassert solution('1') == ''\nassert solution('10') == ''\nassert solution('11') == ''\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('') == 0\nassert solution('1') == 0\nassert solution('1\\n') == 0\nassert solution('1\\n1') == 1\nassert solution('1\\n2') == 1\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == 2\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1') == \"2\"\nassert solution('2') == \"3\"\nassert solution('4') == \"4\"\nassert solution('8') == \"5\"\nassert solution('10') == \"6\"\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1 2') == '1'\nassert solution('4 7') == '2'\nassert solution('1 1') == '1'\nassert solution('4 9') == '3'\nassert solution('1 2') == '1'\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('4 7') == '2'\nassert solution('4 9') == '3'\nassert solution('1 1') == '1'\n\n\n\"\"\"\n\na, b = map(int, input().split())\n\nn = 0\n\nwhile (a > b or a < b) and (n < 100):\n    a *= 3\n    b *= 2\n    n += 1\n\nprint(n)"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('4 7') == '2'\nassert solution('1 1') == '1'\nassert solution('4 9') == '3'\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('2 7') == '2'\nassert solution('4 9') == '3'\nassert solution('1 1') == '1'\nassert solution('1 1') == '1'\n\"\"\"\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"4 7\") == \"2\"\nassert solution(\"4 9\") == \"3\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"2 2\") == \"0\"\nassert solution(\"1 2\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('4 7') == '2'\nassert solution('4 9') == '3'\nassert solution('1 1') == '1'\nassert solution('5 7') == '3'\nassert solution('10 10') == '5'\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('4 7') == '2'\nassert solution('4 9') == '3'\nassert solution('1 1') == '1'\nassert solution('2 2') == '1'\nassert solution('2 1') == '1'\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('4 7') == '2'\nassert solution('4 9') == '3'\nassert solution('1 1') == '1'\nassert solution('10 3') == '3'\n\n\"\"\"\n\n\"\"\"\n----Thoughts----\nI have to figure out how to find the equation of what has to be larger:\n        w_L * (1 + 2 * n) = w_B * (1 + 2 * n)\nIf I know that w_L = w_B and 2 * n is equal to 1:\n        w_L = w_B\nThen\n        w_L = (w_B * n) / (n + 1)\nThen\n        w_L = w_B / (n + 1)\n\n\"\"\"\n\na, b = map(int, input().split())\n\nw_L = a / (a + 1)\nw_B = b / (b + 1)\n\nprint((w_B * (a + b - 1)) / (a + b))\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == ''\n\n\"\"\"\n\nimport sys\n\nT = int(sys.stdin.readline().strip())\nfor _ in range(T):\n    a, b = map(int, sys.stdin.readline().strip().split())\n    print(int((b - a) / 3))\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == \"\"\n\"\"\""
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"1 2\") == \"2\"\nassert solution(\"2 3\") == \"5\"\nassert solution(\"3 6\") == \"10\"\nassert solution(\"10 1024\") == \"2046\"\nassert solution(\"16 20\") == \"40\"\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"1 2\") == \"2\"\nassert solution(\"2 3\") == \"5\"\nassert solution(\"3 6\") == \"10\"\nassert solution(\"10 1024\") == \"2046\"\n\"\"\"\n\nfrom math import ceil, log2"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1 2') == '2'\nassert solution('2 3') == '5'\nassert solution('3 6') == '10'\nassert solution('10 1024') == '2046'\n\n\n-----\n\nFor test run in IDE\nRun: File\nRun: Edit Run Configurations... -> Run Type -> Python 3\n[Finished in 2.3s]\n\n\"\"\""
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"1 2\") == \"2\"\nassert solution(\"2 3\") == \"5\"\nassert solution(\"3 6\") == \"10\"\nassert solution(\"10 1024\") == \"2046\"\nassert solution(\"1015 604\") == \"214\"\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('') == 0\nassert solution('1 2') == 0\nassert solution('1 2') == 0\nassert solution('2 3') == 5\nassert solution('2 3') == 5\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1 2\") == \"\"\nassert solution(\"1 2 3\") == \"\"\nassert solution(\"1 2 3 4\") == \"\"\nassert solution(\"1 2 3 4 5\") == \"\"\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1 2') == ''\nassert solution('2 3') == ''\nassert solution('3 6') == ''\nassert solution('10 1024') == ''\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"1 2\") == \"2\"\nassert solution(\"2 3\") == \"5\"\nassert solution(\"3 6\") == \"10\"\nassert solution(\"10 1024\") == \"2046\"\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1 2') == '2'\nassert solution('2 3') == '5'\nassert solution('3 6') == '10'\nassert solution('10 1024') == '2046'\n\"\"\"\n\nn, h = map(int, stdin.split())\n\nans = (2 ** h - 1) * (n - 1)\n\nprint(ans)\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"1 2\") == \"2\"\nassert solution(\"2 3\") == \"5\"\nassert solution(\"3 6\") == \"10\"\nassert solution(\"10 1024\") == \"2046\"\n\n\"\"\""
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''26''') == '6'\nassert solution('''2''') == '2'\nassert solution('''8''') == '4'"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"26\") == \"6\"\nassert solution(\"2\") == \"2\"\nassert solution(\"8\") == \"4\"\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('26') == '6'\nassert solution('2') == '2'\nassert solution('8') == '4'\nassert solution('26') == '6'\nassert solution('8') == '4'\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == expected\n\"\"\"\nfrom functools import lru_cache\n\n@lru_cache(maxsize=None)\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\n'''26'''\n    ) == '''6\n1 26\n2 9\n3 5\n5 3\n9 2\n26 1'''\n\nassert solution(\n'''2'''\n    ) == '''2\n1 2\n2 1'''\n\nassert solution(\n'''8'''\n    ) == '''4\n1 8\n2 3\n3 2\n8 1'''\n\nassert solution(\n'''9'''\n    ) == '''4\n1 9\n2 5\n3 3\n5 2\n9 1'''\n\nassert solution(\n'''99'''\n    ) == '''1\n99 1'''"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"26\") == \"6\"\nassert solution(\"2\") == \"2\"\nassert solution(\"8\") == \"4\"\nassert solution(\"1\") == \"2\"\nassert solution(\"3\") == \"3\"\n\n\"\"\"\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('1') == '1'\nassert solution('26') == '6'\nassert solution('8') == '4'\n\"\"\"\nimport sys"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('26') == '6'\nassert solution('2') == '2'\nassert solution('8') == '4'\n\n-----Test cases-----"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''26''') == '6'\nassert solution('''2''') == '2'\nassert solution('''8''') == '4'\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('26') == '6'\nassert solution('2') == '2'\nassert solution('8') == '4'\n\"\"\"\n\nfrom itertools import combinations\n\nn = int(input())\n\nprint(sum([len(set(x)) for x in combinations(range(1, n+1), 2)]))\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"3\") == \"NO\"\nassert solution(\"3 4 2\") == \"YES\"\nassert solution(\"6 6 6\") == \"NO\"\nassert solution(\"6 6 6 4 2 1\") == \"YES\"\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24') == 'NO'\nassert solution('2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24') == 'Yes'\nassert solution('2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"NO\"\nassert solution(\"31 31 30 31\") == \"YES\"\nassert solution(\"31 31 28\") == \"NO\"\nassert solution(\"31 31 30 30 30\") == \"YES\"\nassert solution(\"31 31 30 31 30\") == \"NO\"\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"4\") == \"NO\"\nassert solution(\"31 31 30 31\") == \"NO\"\nassert solution(\"29 31 30 31 30\") == \"NO\"\nassert solution(\"31 28 30\") == \"NO\"\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('30 30 30 30') == 'NO'\nassert solution('31 31 30 31 30') == 'YES'\nassert solution('28 29 30 31 31 30 31 31 31 31 31 31 30 30 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 30 31 31 30 31 31 30 31 31 30 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 30 31 31 30 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('31 31 30 31\\n29 31 30 31 30') == 'Yes'\nassert solution('31 31 28\\n29 31 30') == 'No'\nassert solution
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''\n5\n31 31 30 31 30\n''') == 'No'\n\nassert solution('''\n3\n31 28 30\n''') == 'Yes'\n\nassert solution('''\n4\n31 31 30 31\n''') == 'Yes'\n\nassert solution('''\n2\n30 30\n''') == 'No'\n\nassert solution('''\n1\n31\n''') == 'Yes'"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''4\n31 31 30 31\n''') == 'YES'\nassert solution('''2\n30 30\n''') == 'NO'\nassert solution('''5\n29 31 30 31 30\n''') == 'YES'\nassert solution('''3\n31 28 30\n''') == 'NO'\nassert solution('''3\n31 31 28\n''') == 'YES'\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''2''') == 'NO'\nassert solution('''6''') == 'YES'\nassert solution('''3''') == 'NO'\nassert solution('''15''') == 'YES'\nassert solution('''12''') == 'NO'\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''2''') == 'NO'\nassert solution('''6''') == 'YES'\nassert solution('''2''') == 'NO'\nassert solution('''3''') == 'YES'\nassert solution('''4''') == 'YES'\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"4\") == \"NO\"\nassert solution(\"5\") == \"YES\"\nassert solution(\"2\") == \"NO\"\nassert solution(\"5 2\") == \"YES\"\nassert solution(\"8\") == \"NO\"\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('2') == 'NO'\nassert solution('6') == 'YES'\nassert solution('2') == 'NO'\nassert solution('6') == 'YES'\n\n\n\"\"\""
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('2\\n') == 'NO'\nassert solution('6\\n') == 'YES'\nassert solution('3\\n') == 'YES'\nassert solution('5\\n') == 'YES'\nassert solution('8\\n') == 'YES'\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('2') == 'NO'\nassert solution('6') == 'YES'\nassert solution('2') == 'NO'\nassert solution('6') == 'YES'\n\n'''\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('2') == 'NO'\nassert solution('6') == 'YES'\nassert solution('10') == 'NO'\nassert solution('16') == 'YES'\nassert solution('100') == 'NO'\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('2') == \"NO\"\nassert solution('6') == \"YES\"\nassert solution('6') == \"YES\"\nassert solution('2') == \"NO\"\nassert solution('6') == \"YES\"\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('2') == \"NO\"\nassert solution('6') == \"YES\"\nassert solution('2') == \"NO\"\nassert solution('6') == \"YES\"\nassert solution('3') == \"NO\"\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('') == 'NO'\nassert solution('1') == 'NO'\nassert solution('2') == 'NO'\nassert solution('3') == 'NO'\nassert solution('4') == 'NO'\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"1\\n3\\n3\\n1\") == \"1\"\nassert solution(\"2\\n5\\n10\") == \"8\"\nassert solution(\"5\\n10\\n5\\n5\\n5\") == \"0\"\nassert solution(\"4\\n5\\n10\\n5\") == \"-1\""
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('4\\n5 7\\n3 3 4 1') == '3'\nassert solution('3\\n3 3\\n2 2 2') == '2'\nassert solution('3\\n2 3\\n1 3 1') == '-1'\nassert solution('3\\n3 3\\n1 1 1') == '-1'\nassert solution('2\\n3 3\\n1 3 1') == '2'\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1\\n2') == '1'\nassert solution('1\\n2\\n3\\n4') == '4'\nassert solution('1\\n2\\n3\\n4\\n5\\n6') == '-1'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7') == '-1'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8') == '-1'\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''\n4\n5 7\n3 3 4 1\n''') == '3'\nassert solution('''\n3\n2 3\n1 3 1\n''') == '-1'\nassert solution('''\n4\n2 3\n1 3 1\n''') == '2'\nassert solution('''\n1\n2 2\n1 1\n''') == '1'\nassert solution('''\n4\n1 1 2 2\n2 2 1 1\n''') == '1'\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"3\") == \"\"\nassert solution(\"1 2\") == \"\"\nassert solution(\"1 2 3\") == \"\"\nassert solution(\"1 2 1 3\") == \"\"\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"4\n5 7\n3 3 4 1\n\"\"\") == \"3\"\n\nassert solution(\n\"\"\"3\n2 3\n1 3 1\n\"\"\") == \"-1\"\n\nassert solution(\n\"\"\"1\n1\n1\n1\n1\n\"\"\") == \"-1\"\n\nassert solution(\n\"\"\"1\n1\n1\n1\n1\n\"\"\") == \"-1\"\n\nassert solution(\n\"\"\"1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''4\n5 7\n3 3 4 1\n''') == '3'\nassert solution('''3\n3 3\n2 2 2\n''') == '-1'\nassert solution('''5\n9 7\n8 9 8 5\n''') == '-1'\nassert solution('''7\n99999 99998\n999 999 998 999\n9999 99 997 999\n9999 9999 999\n99999999999999\n999999999999999\n''') == '4'\nassert solution('''9\n10 1000000000\n10000000 1000000000\n100000000100000000\n''') == '-1'\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"1 2\\n2 1\") == 3\nassert solution(\"2 3\\n3 2\\n1 3\\n3 1\") == 3\nassert solution(\"1 3\\n3 1\\n1 3\\n3 1\") == 6\nassert solution(\"3 3\\n3 2\\n3 1\\n2 1\\n1 3\\n3 1\") == -1\nassert solution(\"2 2\\n2 1\\n1 1\") == 2\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''4\n5 7\n3 3 4 1\n''') == '3'\nassert solution('''3\n2 3\n1 3 1\n''') == '2'\nassert solution('''3\n3 3\n2 2 2\n''') == '-1'\nassert solution('''5\n4 1\n2 1 2 3\n''') == '2'\nassert solution('''3\n4 6\n4 1 3\n''') == '1'\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''4\n5 7\n3 3 4 1\n''') == '3'\nassert solution('''3\n2 3\n1 3 1\n''') == '2'\nassert solution('''3\n3 3\n2 2 2\n''') == '-1'\nassert solution('''5\n10 10\n4 4 4 4 4 4 4 4 4 4\n3 3 3 3 3 3 3 3 3 3\n''') == '10'\nassert solution('''3\n3 3\n2 2 2\n''') == '-1'\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''4 3 3''') == 'YES'\nassert solution('''4 4 7''') == 'NO'\n\n'''\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"4 4 7\") == \"NO\"\nassert solution(\"4 3 3\") == \"YES\"\nassert solution(\"4 4 1\") == \"YES\"\nassert solution(\"4 1 1\") == \"YES\"\nassert solution(\"1 1 1\") == \"NO\"\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == \"YES\" # should be \"NO\"\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == 'YES' or 'NO'\n\n\n-----\n\n\"\"\"\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('4 3 3') == 'YES\\n1 0\\n2 3\\n4 1'\nassert solution('4 4 7') == 'NO'\n\n\n\"\"\"\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('4 3 3') == 'YES\\n1 0\\n2 3\\n4 1'\nassert solution('4 4 7') == 'NO'\n\n\"\"\"\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('4 3 3') == 'YES'\nassert solution('4 4 7') == 'NO'\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''4 4 7''') == 'NO'\nassert solution('''4 4 5''') == 'YES'\nassert solution('''7 7 7''') == 'YES'\nassert solution('''7 7 3''') == 'YES'\nassert solution('''1 1 1''') == 'YES'\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('4 3 3') == 'YES\\n1 0\\n2 3\\n4 1\\n'\nassert solution('4 4 7') == 'NO'\nassert solution('2 5 5') == 'NO'\nassert solution('1 2 4') == 'NO'"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('4 3 3') == 'YES\\n1 0\\n2 3\\n4 1'\nassert solution('4 4 7') == 'NO'\n\n\"\"\"\n\n\nfrom math import sqrt"
    },
    {
        "number": 298,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''1 1''') == 'YES'\nassert solution('''10 4''') == 'NO'\nassert solution('''1 1''') == 'YES'\nassert solution('''10 5''') == 'NO'\nassert solution('''1 10''') == 'YES'\n"
    },
    {
        "number": 298,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"1 1\") == \"YES\"\nassert solution(\"10 4\") == \"NO\"\nassert solution(\"100 10\") == \"YES\"\nassert solution(\"5 1\") == \"YES\"\nassert solution(\"1 1\") == \"YES\"\n"
    },
    {
        "number": 298,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''1 1''') == 'YES'\nassert solution('''10 4''') == 'NO'\nassert solution('''1 1''') == 'YES'\nassert solution('''100000 1''') == 'YES'\nassert solution('''100000 1000000''') == 'YES'\n"
    },
    {
        "number": 298,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 298,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1 2') == 'NO'\nassert solution('10 4') == 'YES'\nassert solution('10 9') == 'YES'\nassert solution('10 9') == 'NO'\nassert solution('10 10') == 'NO'\n"
    },
    {
        "number": 298,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"2 3\\n1 2\\n\") == \"NO\"\nassert solution(\"2 1\\n1 2\\n\") == \"YES\"\nassert solution(\"1 10\\n1 9\\n\") == \"NO\"\nassert solution(\"1 4\\n1 4\\n\") == \"YES\"\nassert solution(\"2 10\\n1 9\\n\") == \"YES\"\n"
    },
    {
        "number": 298,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('10 4\\n1 1\\n') == 'NO'\nassert solution('1 1\\n') == 'YES'\nassert solution('10 3\\n1 2 3\\n4 5\\n') == 'NO'\nassert solution('10 4\\n1 4 3\\n4 3\\n') == 'YES'\nassert solution('10 5\\n1 4 3\\n4 4\\n') == 'NO'\n"
    },
    {
        "number": 298,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('10 4') == 'NO'\nassert solution('1 1') == 'YES'\nassert solution('10 2') == 'NO'\nassert solution('2 1') == 'NO'\nassert solution('1000000000 9') == 'NO'\n"
    },
    {
        "number": 298,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1 1') == 'YES'\nassert solution('10 4') == 'NO'\nassert solution('10 10') == 'YES'\nassert solution('10 10') == 'YES'\nassert solution('10 10') == 'YES'\n"
    },
    {
        "number": 298,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1 1') == 'YES'\nassert solution('10 4') == 'NO'\nassert solution('1 2') == 'YES'\nassert solution('1 2 3 4 5 6 7 8 9 10') == 'YES'\nassert solution('2 3 4 5 6 7 8 9 10') == 'NO'\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == \"back\"\n\nassert solution(\"2\\n2 8\\n\") == \"biceps\"\n\nassert solution(\"3\\n5 1 10\\n\") == \"chest\"\n\nassert solution(\"7\\n3 3 2 7 9 6 8\\n\") == \"back\"\n\nassert solution(\"1\\n1\\n\") == \"back\""
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('stdin') == 'back'\nassert solution('stdout') == 'biceps'\nassert solution('sys.stdout') == 'biceps'\n\"\"\""
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1\\n2\\n') == 'biceps'\nassert solution('2\\n8\\n') == 'chest'\nassert solution('3\\n5 1 10\\n') == 'back'\nassert solution('7\\n3 3 2 7 9 6 8\\n') == 'chest'\nassert solution('4\\n5 1 10 2\\n') == 'biceps'\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('2\\n2 8') == 'biceps'\nassert solution('3\\n5 1 10') == 'back'\nassert solution('7\\n3 3 2 7 9 6 8') == 'chest'\nassert solution('8\\n7 4 2 1 5 7 3') == 'chest'\nassert solution('8\\n3 2 1 5 7 3') == 'back'\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('3 2 1\\n') == 'biceps'\nassert solution('1 1 1\\n') == 'chest'\nassert solution('1 1 1 1 1 1 1 1 1 1 1 1 1\\n') == 'back'\nassert solution('2 2 1\\n') == 'biceps'\nassert solution('1 1 1\\n') == 'chest'\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''2\n2 8\n''') == 'biceps'\nassert solution('''3\n5 1 10\n''') == 'back'\nassert solution('''7\n3 3 2 7 9 6 8\n''') == 'chest'\nassert solution('''6\n9 4 3 3 8 4 2\n''') == 'chest'\nassert solution('''8\n7 2 6 5 4 3 3 8\n''') == 'chest'\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"2\") == \"biceps\"\nassert solution(\"3\") == \"back\"\nassert solution(\"7\") == \"chest\"\nassert solution(\"3 3 2 7 9 6 8\") == \"back\"\n\n\n-----"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1\\n1') == 'chest'\nassert solution('2\\n2 3') == 'biceps'\nassert solution('3\\n5 1 10') == 'back'\nassert solution('7\\n3 3 2 7 9 6 8') == 'chest'\nassert solution('8\\n3 1 2 7 1 1 1') == 'biceps'\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('3\\n5 1 10\\n') == 'biceps'\nassert solution('2\\n8\\n') == 'chest'\nassert solution('7\\n3 3 2 7 9 6 8\\n') == 'chest'\n\"\"\"\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('2\\n2 8\\n') == 'biceps'\nassert solution('3\\n5 1 10\\n') == 'back'\nassert solution('7\\n3 3 2 7 9 6 8\\n') == 'chest'\nassert solution('7\\n3 3 2 7 9 6 8\\n') == 'biceps'\nassert solution('7\\n3 3 2 7 9 6 8\\n') == 'chest'\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"0\") == \"\"\nassert solution(\"1\") == \"\"\nassert solution(\"2\") == \"\"\nassert solution(\"3\") == \"\"\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"4 4 4\") == \"2\"\nassert solution(\"5 4 5 5\") == \"0\"\nassert solution(\"4 5 3 3 5\") == \"1\"\nassert solution(\"5 3 3 5\") == \"0\"\nassert solution(\"4 3 2 2 2\") == \"1\"\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('   ') == ''\nassert solution('5') == '0'\nassert solution('4 4 4') == '2'\nassert solution('3 3 3 5') == '1'\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('5') == \"0\"\nassert solution('2') == \"1\"\nassert solution('3') == \"1\"\nassert solution('4') == \"0\"\nassert solution('4.5') == \"1\"\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"\n3\n4 4 4\n\"\"\") == \"\"\"\n2\n\"\"\"\n\nassert solution(\n\"\"\"\n4\n5 4 5 5\n\"\"\") == \"\"\"\n0\n\"\"\"\n\nassert solution(\n\"\"\"\n4\n5 3 3 5\n\"\"\") == \"\"\"\n1\n\"\"\"\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"0\") == \"\"\nassert solution(\"4\") == \"0\"\nassert solution(\"4 4 4\") == \"0\"\nassert solution(\"4 4 4 4\") == \"1\"\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"1\\n2\\n3\\n4\\n5\") == \"1\"\nassert solution(\"3\\n3\\n3\\n3\\n3\") == \"0\"\nassert solution(\"1\\n2\\n3\\n4\\n5\") == \"1\"\nassert solution(\"2\\n1\\n1\\n1\\n1\") == \"0\"\nassert solution(\"1\\n2\\n3\\n4\\n5\") == \"1\"\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1\\n3') == '0'\nassert solution('3\\n4 4 4') == '2'\nassert solution('5\\n5 4 5 5') == '0'\nassert solution('5\\n5 3 3 5') == '1'\nassert solution('6\\n5 4 5 4 4') == '1'\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('2\\n2\\n') == '0'\nassert solution('2\\n3\\n') == '1'\nassert solution('4\\n4\\n5 4 5\\n') == '2'\nassert solution('2\\n3\\n4\\n5 4\\n') == '0'\nassert solution('1\\n2\\n3\\n4\\n5 4\\n') == '1'\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('2 4') == '2'\nassert solution('1 3') == '3 1'\nassert solution('8 5') == '-1'\nassert solution('0 0') == '0'\nassert solution('1 1 1') == '1 1 1'\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('2 4\\n') == '2\\n3 1'\nassert solution('1 3\\n') == '-1'\nassert solution('8 5\\n') == '-1'\nassert solution('0 0\\n') == '0'\nassert solution('1 1 1\\n') == '1 1 1'\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('2 4\\n') == '-1'\nassert solution('1 3\\n') == '3'\nassert solution('8 5\\n') == '-1'\nassert solution('0 0\\n') == '0'\nassert solution('0 1\\n') == '1'\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\n    \"2 4\"\n) == \"2\\n3 1\"\nassert solution(\n    \"1 3\"\n) == \"3\\n1 1 1\"\nassert solution(\n    \"0 0\"\n) == \"-1\"\nassert solution(\n    \"8 5\"\n) == \"3\\n1 1 1\"\nassert solution(\n    \"3 4\"\n) == \"2\\n3 1\"\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''0 0''') == '0'\nassert solution('''2 4''') == '2'\nassert solution('''2 5''') == '-1'\nassert solution('''0 0''') == '0'\nassert solution('''8 5''') == '-1'\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"2 4\") == \"-1\"\nassert solution(\"1 3\") == \"3 1\"\nassert solution(\"0 0\") == \"0\"\nassert solution(\"8 5\") == \"-1\"\nassert solution(\"0 0\") == \"0\"\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''2 4''') == '-1'\nassert solution('''1 3''') == '3 1'\nassert solution('''8 5''') == '3 1 1 1'\nassert solution('''0 0''') == '0'\nassert solution('''0 0''') == '0'\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 302,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"121\") == 6\nassert solution(\"1234\") == 1\nassert solution(\"12345\") == 1\nassert solution(\"100100\") == 1\nassert solution(\"101101\") == 1\n"
    },
    {
        "number": 302,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"121\") == 6\nassert solution(\"0\") == 0\nassert solution(\"-1\") == 1\n\"\"\""
    },
    {
        "number": 302,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('121') == '6'\nassert solution('42') == '3'\nassert solution('93') == '4'\nassert solution('912') == '6'\nassert solution('9123') == '6'\n"
    },
    {
        "number": 302,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('121') == 6\nassert solution('10011') == 3\nassert solution('10000') == 1\nassert solution
    },
    {
        "number": 302,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('121') == '6'\nassert solution('11') == '2'\nassert solution('111') == '3'\nassert solution('1111') == '4'\nassert solution('11111') == '5'\n"
    },
    {
        "number": 302,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(121) == \"6\"\nassert solution(2) == \"1\"\nassert solution(3) == \"2\"\nassert solution(7) == \"3\"\nassert solution(10) == \"3\"\n"
    },
    {
        "number": 302,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(121) == 6\nassert solution(11) == 1\nassert solution(15) == 1\nassert solution(14) == 2\nassert solution(19) == 1\n"
    },
    {
        "number": 302,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(121) == \"6\"\nassert solution(23) == \"6\"\nassert solution(115) == \"7\"\nassert solution(112) == \"5\"\nassert solution(123) == \"5\"\n"
    },
    {
        "number": 302,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(121) == \"6\"\nassert solution(15) == \"5\"\nassert solution(10) == \"2\"\nassert solution(0) == \"1\"\nassert solution(-1) == \"1\"\n"
    },
    {
        "number": 302,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(121) == \"6\"\nassert solution(11111) == \"2\"\nassert solution(121011) == \"6\"\nassert solution(123456789) == \"1\"\nassert solution(112) == \"2\"\n"
    },
    {
        "number": 303,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"0 0 0 6\") == \"YES\"\nassert solution(\"2 3\") == \"YES\"\nassert solution(\"1 1 3 6\") == \"NO\"\nassert solution(\"1 5\") == \"NO\"\nassert solution(\"1 1 1 1\") == \"YES\"\n"
    },
    {
        "number": 303,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''0 0 0 6\n2 3''') == 'YES'\nassert solution('''1 1 3 6\n1 5''') == 'NO'\nassert solution('''0 0 0 0\n1 1 1 1''') == 'NO'\n\n\n\"\"\""
    },
    {
        "number": 303,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdin\"\"\"\n\nimport sys\n\nx_1, y_1, x_2, y_2 = map(int, sys.stdin.readline().strip().split())\nx, y = map(int, sys.stdin.readline().strip().split())\n\nresult = \"YES\" if ((abs(x_1 - x_2) <= x <= (abs(x_1 - x_2) + abs(y_1 - y_2))) or (abs(x_1 - x_2) + abs(y_1 - y_2) <= x <= (abs(x_1 - x_2) + abs(y_1 - y_2) + abs(y_1 - y_2)))) else \"NO\"\nprint(result)"
    },
    {
        "number": 303,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''0 0 0 6''') == 'YES'\nassert solution('''1 1 3 6''') == 'YES'\nassert solution('''1 5''') == 'NO'\nassert solution('''0 0 0 6''') == 'NO'\nassert solution('''0 0 0 6''') == 'NO'\n"
    },
    {
        "number": 303,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(input()) == \"NO\"\nassert solution(input()) == \"YES\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"NO\"\n"
    },
    {
        "number": 303,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''0 0 0 6\n2 3\n''') == 'YES'\n\nassert solution('''1 1 3 6\n1 5\n''') == 'NO'\n\nassert solution('''-1 -1 -1 -1\n1 1 1 1\n1 1 1 1\n-1 -1 -1 -1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n-1 -1 -1 -1\n1 1 1 1\n1 1 1 1\n-1 -1 -1 -1\n1 1 1 1\n1 1 1 1\n-1 -1 -1 -1\n1 1 1 1\n1 1 1 1\n-1 -1 -1 -1\n1 1 1 1\n1 1 1 1\n-1 -1 -1 -1\n1 1 1 1\n1 1 1 1\n-1 -1 -1 -1\n1 1 1 1\n1 1 1 1\n-1 -1 -1 -1\n1 1 1 1\n1 1 1 1\n-1 -1 -1 -1\n1 1 1 1\n1 1 1 1\n-1 -1 -1 -1\n1 1 1 1\n1 1 1 1\n-1 -1 -1 -1\n1 1 1 1\n1 1 1 1\n-1 -1 -1 -1\n1 1 1 1\n1 1 1 1\n-1 -1 -1 -1\n1 1 1 1\n1 1 1 1\n-1 -1 -1 -1\n1 1 1 1\n1 1 1 1\n-1 -1 -1 -1\n1 1 1 1\n1 1 1 1\n-1 -1 -1 -1\n1 1 1 1\n1 1 1 1\n-1 -1 -1 -1\n1 1 1 1\n1 1 1 1\n-1 -1 -1 -1\n1 1 1 1\n1 1 1 1\n-1 -1 -1 -1\n1 1 1 1\n1 1 1 1\n-1 -1 -1 -1\n1 1 1 1\n1 1 1 1\n-1 -1 -1 -1\n1 1 1 1\n1 1 1 1\n-1 -1 -1 -1\n1 1 1 1\n1 1 1 1\n-1 -1 -1 -1\n1 1 1 1\n1 1 1 1\n-1 -1 -1 -1\n1 1 1 1\n1 1 1 1\n-1 -1 -1 -1\n1 1 1 1\n1 1 1 1\n-1 -1 -1 -1\n1 1 1 1\n1 1 1 1\n-1 -1 -1 -1\n1 1 1 1\n1 1 1 1\n-1 -1 -1 -1\n1 1 1 1\n1 1 1 1\n-1 -1 -1 -1\n1 1 1 1\n1 1 1 1\n-1 -1 -1 -1\n1 1 1 1\n1 1 1 1\n-1 -1 -1 -1\n1 1 1 1\n1 1 1 1\n-1 -1 -1 -1\n1 1 1 1\n1 1 1 1\n-1 -1 -1 -1\n1 1 1 1\n1 1 1 1\n-1 -1 -1 -1\n1 1 1 1\n1 1 1 1\n-1 -1 -1 -1\n1 1 1 1\n1 1 1 1\n-1 -1 -1 -1\n1 1 1 1\n1 1 1 1\n-1 -1 -1 -1\n1 1 1 1\n1 1 1 1\n-1 -1 -1 -1\n1 1 1 1\n1 1 1 1\n-1 -1 -1 -1\n1 1 1 1\n1 1 1 1\n-1 -1 -1 -1\n1 1 1 1\n1 1 1 1\n-1 -1 -1 -1\n1 1 1 1\n1 1 1 1\n-1 -1 -1 -1\n1 1 1 1\n1 1 1 1\n-1 -1 -1 -1\n1 1 1 1\n1 1 1 1\n-1 -1 -1 -1\n1 1 1 1\n1 1 1 1\n-1 -1 -1 -1\n1 1 1 1\n1 1 1 1\n-1 -1 -1 -1\n1 1 1 1\n1 1 1 1\n-1 -1 -1 -1\n1 1 1 1\n1 1 1 1\n-1 -1 -1 -1\n1 1 1 1\n1 1 1 1\n-1 -1 -1 -1\n1 1 1 1\n1 1 1 1\n-1 -1 -1 -1\n1 1 1 1\n1 1 1 1\n-1 -1 -1 -1\n1 1 1 1\n1 1 1 1\n-1 -1 -1 -1\n1 1 1 1\n1 1 1 1\n-1 -1 -1 -1\n1 1 1 1\n1 1 1 1\n-1 -1 -1 -1\n1 1 1 1\n1 1 1 1\n-1 -1 -1 -1\n1 1 1 1\n1 1 1 1\n-1 -1 -1 -1\n1 1 1 1\n1 1 1 1\n-1 -1 -1 -1\n1 1 1 1\n1 1 1 1\n-1 -1 -1 -1\n1 1 1 1\n1 1 1 1\n-1 -1 -1 -1\n1 1 1 1\n1 1 1 1\n-1 -1 -1 -1\n1 1 1 1\n1 1 1 1\n-1 -1 -1 -1\n1 1 1 1\n1 1 1 1\n-1 -1 -1 -1\n1 1 1 1\n1 1 1 1\n-1 -1 -1 -1\n1 1 1 1\n1 1 1 1\n-1 -1 -1 -1\n1 1 1 1\n1 1 1 1\n-1 -1 -1 -1\n1 1 1 1\n1 1 1 1\n-1 -1 -1 -1\n1 1 1 1\n1 1 1 1\n-1 -1 -1 -1\n1 1 1 1\n1 1 1 1\n-1 -1 -1 -1\n1 1 1 1\n1 1 1 1\n-1 -1 -1 -1\n1 1 1 1\n1 1 1 1\n-1 -1 -1 -1\n1 1 1 1\n1 1 1 1\n-1 -1 -1 -1\n1 1 1 1\n1 1 1 1\n-1 -1 -1 -1\n1 1 1 1\n1 1 1 1\n-1 -1 -1 -1\n1 1 1 1\n1 1 1 1\n-1 -1 -1 -1\n1 1 1 1\n1 1 1 1\n-1 -1 -1 -1\n1 1 1 1\n1 1 1 1\n-1 -1 -1 -1\n1 1 1 1\n1 1 1 1\n-1 -1 -1 -1\n1 1 1 1\n1 1 1 1\n"
    },
    {
        "number": 303,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''0 0 0 6\n2 3\n''') == \"YES\"\nassert solution('''1 1 3 6\n1 5\n''') == \"NO\"\nassert solution('''2 1 2 1\n1 1\n''') == \"YES\"\nassert solution('''2 1 2 1\n1 1\n''') == \"NO\"\nassert solution('''1 1 1 1\n1 1\n''') == \"YES\"\n"
    },
    {
        "number": 303,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(input(\"\")) == output\n\n\"\"\"\n"
    },
    {
        "number": 303,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == 'YES'\n\n\"\"\"\nfrom collections import deque\n"
    },
    {
        "number": 303,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('0 0 0 6') == 'YES'\nassert solution('1 1 3 6') == 'NO'\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\n\"\"\"97\n\"\"\") == \"2\\n\"\nassert solution(\n\"\"\"2028\n\"\"\") == \"13\\n\"\nassert solution(\n\"\"\"919\n\"\"\") == \"0\\n\"\nassert solution(\n\"\"\"0\n\"\"\") == \"0\\n\"\nassert solution(\n\"\"\"0\n\"\"\") == \"0\\n\"\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\n'97'\n) == '2'\nassert solution(\n'2028'\n) == '13'\n\n\n\"\"\""
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('97') == '2'\nassert solution('2028') == '13'\n\nassert solution('10') == '1'\nassert solution('1') == '1'\nassert solution('99') == '99'\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''97''') == 2\nassert solution('''2028''') == 13\nassert solution('''79''') == 1\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('97') == '2'\nassert solution('2028') == '13'\nassert solution('2082') == '13'\nassert solution('2200') == '13'\nassert solution('2220') == '13'\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdin.strip()\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('97') == '2'\nassert solution('2028') == '13'\n\"\"\"\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('97\\n') == '2'\nassert solution('2028\\n') == '13'\n\nassert solution('2027\\n') == '3'\nassert solution('2029\\n') == '2'\nassert solution('2030\\n') == '3'\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('97') == '2'\nassert solution('2028') == '13'\nassert solution('2104') == '2'\nassert solution('20129') == '2'\nassert solution('209') == '3'\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('97\\n') == '2'\nassert solution('2028\\n') == '13'\nassert solution('248\\n') == '10'\nassert solution('499\\n') == '1'\nassert solution('649\\n') == '1'\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('4\\n5\\n6\\n3\\n1\\n2\\n') == '6'\nassert solution('12\\n11\\n13\\n20\\n4\\n6\\n') == '102'\nassert solution('17\\n14\\n5\\n21\\n15\\n17\\n') == '325'\n\n\n-----Method 2. Divide and Conquer Approach----\n\nWe can solve the problem recursively: every time we call a function, we will have three sub-problems:\n\n(1) Is there a way to solve the problem with one tie?\n(2) Is there a way to solve the problem with two ties?\n(3) Is there a way to solve the problem with three ties?\nWe can solve each of the sub-problems in three steps:\n\n(1) Split the problem into three parts:\n(a) Is there a way to solve the problem with one tie?\n(b) Is there a way to solve the problem with two ties?\n(c) Is there a way to solve the problem with three ties?\n\n(2) Divide the problem into two parts:\n(a) Is there a way to solve the problem with one tie?\n(b) Is there a way to solve the problem with two ties?\n\n(3) Split the problem into one parts:\n(a) Is there a way to solve the problem with one tie?\n\nRecursively, we can solve each of the sub-problems in four steps:\n\n(1) Is there a way to solve the problem with one tie?\n(2) Is there a way to solve the problem with two ties?\n(3) Is there a way to solve the problem with three ties?\n(4) Is there a way to solve the problem with one tie?\n\nOn each step, we recursively solve the sub-problems, each solving one tie, two ties, or three ties.\n\n\n-----Method 1. Dynamic Programming Approach----\n\nThe approach is similar to method 2, but we are not able to solve the problem with one tie, because in the recursive step, we need to solve the sub-problems recursively with two ties, which requires three times of a lot of calculations.\n\nFor each sub-problem, we have three possible solutions:\n\n(a) Add one tie.\n(b) Add two ties.\n(c) Add three ties.\n\nIf we decide to solve the problem with one tie, we can add one tie to each of the three solutions, and then recursively solve the rest of the problem. If we decide to solve the problem with two ties, we can add two ties to one solution and recursively solve the rest of the problem. If we decide to solve the problem with three ties, we can add three ties to one solution and recursively solve the rest of the problem.\n\nIf we don't decide to solve the problem with one tie, we can add one tie to one solution and recursively solve the rest of the problem. If we decide to solve the problem with two ties, we can add two ties to one solution and recursively solve the rest of the problem. If we decide to solve the problem with three ties, we can add three ties to one solution and recursively solve the rest of the problem.\n\nWe can see that this problem is a lot easier to solve if we consider all three ways to solve the problem.\n\nWe will build a three-dimensional array:\n\n$dp[a][b][c]$ represents the maximum possible value of a set of three ties with $a$ ties, $b$ scarves, and $c$ vests.\n\nFor each sub-problem, we can find the maximum value of each sub-problem by recursively solving the sub-problem using three different ways:\n\n(a) Add one tie.\n(b) Add two ties.\n(c) Add three ties.\n\nEach of these ways will take three times of a lot of calculations, so we build the three-dimensional array of maximum values of the sub-problem first.\n\nWe can solve the problem recursively:\n\n(1) When we are given three sub-problems, we have to solve each sub-problem recursively, each solving one tie, two ties, or three ties.\n\n(2) After solving each sub-problem recursively, we can add the maximum value of the sub-problem to the global result.\n\n(3) After solving each sub-problem recursively, we can return the maximum value of the sub-problem.\n\nFor each sub-problem, we can find the maximum value by recursively solving the sub-problem using three different ways:\n\n(a) Add one tie.\n(b) Add two ties.\n(c) Add three ties.\n\nThe maximum value of the sub-problem is the maximum value of the three ways to solve the sub-problem.\n\nThe maximum value of the sub-problem is determined by the maximum values of the three ways to solve the sub-problem recursively.\n\nBy applying the above method recursively, we can build the three-dimensional array of maximum values.\n\nFor each sub-problem, we can build the three-dimensional array of maximum values recursively.\n\nThe maximum value of the three-dimensional array is the maximum value of the sub-problem.\n\n------\n\nThe maximum value of the three-dimensional array is the maximum value of the sub-problem.\n\nThe maximum value of the sub-problem is the maximum value of the three ways to solve the sub-problem recursively.\n\nThe maximum value of the sub-problem is the maximum value of the three ways to solve the sub-problem recursively.\n\n------\n\nThe maximum value of the sub-problem is the maximum value of the three ways to solve the sub-problem recursively.\n\nThe maximum value of the sub-problem is the maximum value of the three ways to solve the sub-problem recursively.\n\n------\n\nThe maximum value of the sub-problem is the maximum value of the three ways to solve the sub-problem recursively.\n\nThe maximum value of the sub-problem is the maximum value of the three ways to solve the sub-problem recursively.\n\n------\n\nThe maximum value of the sub-problem is the maximum value of the three ways to solve the sub-problem recursively.\n\nThe maximum value of the sub-problem is the maximum value of the three ways to solve the sub-problem recursively.\n\n------\n\nThe maximum value of the sub-problem is the maximum value of the three ways to solve the sub-problem recursively.\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('4\\n5\\n6\\n3\\n1\\n2\\n') == '6'\nassert solution('12\\n11\\n13\\n20\\n4\\n6\\n') == '102'\nassert solution('17\\n14\\n5\\n21\\n15\\n17\\n') == '325'\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"3\") == \"\"\nassert solution(\"1\") == \"\"\nassert solution(\"2\") == \"\"\nassert solution(\"4\") == \"\"\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''4\n5\n6\n3\n1\n2\n''') == '6'\nassert solution('''12\n11\n13\n20\n4\n6\n''') == '102'\nassert solution('''17\n14\n5\n21\n15\n17\n''') == '325'\nassert solution('''4\n4\n4\n4\n1\n4\n''') == '24'\n\n\"\"\"\n\nfrom collections import Counter\nfrom functools import reduce"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"4\\n5\\n6\\n3\\n1\\n2\\n\") == \"6\"\nassert solution(\"12\\n11\\n13\\n20\\n4\\n6\\n\") == \"102\"\nassert solution(\"17\\n14\\n5\\n21\\n15\\n17\\n\") == \"325\"\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"3\") == \"\"\nassert solution(\"1\") == \"\"\nassert solution(\"1\") == \"\"\nassert solution(\"1\") == \"\"\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''4\n5\n6\n3\n1\n2\n''') == '6'\nassert solution('''12\n11\n13\n20\n4\n6\n''') == '102'\nassert solution('''17\n14\n5\n21\n15\n17\n''') == '325'\n'''\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''4\n5\n6\n3\n1\n2\n''') == '6'\nassert solution('''12\n11\n13\n20\n4\n6\n''') == '102'\nassert solution('''17\n14\n5\n21\n15\n17\n''') == '325'\nassert solution('''5\n3\n10\n2\n15\n7\n''') == '106'\nassert solution('''12\n10\n2\n6\n4\n20\n''') == '124'\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"1\\n1\\n1\\n1\\n1\\n1\\n1\") == \"1\"\nassert solution(\"1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('4\\n5\\n6\\n3\\n1\\n2') == '6'\nassert solution('12\\n11\\n13\\n20\\n4\\n6\\n') == '102'\nassert solution('17\\n14\\n5\\n21\\n15\\n17\\n') == '325'\nassert solution('16\\n2\\n9\\n16\\n2\\n4\\n') == '40'\n\n\n\n\n\"\"\"\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''2 3 5 8''') == '2'\nassert solution('''4 6 7 13''') == '1'\nassert solution('''233 233 10007 1''') == '1'\nassert solution('''233 233 10007 16531919''') == '1'\nassert solution('''233 233 10007 26589913''') == '0'\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('2 3 5 8') == '2'\nassert solution('4 6 7 13') == '1'\nassert solution('233 233 10007 1') == '1'\nassert solution('233 233 233 233') == '0'\nassert solution('233 233 233 233') == '0'\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == '2'\n'''\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('2 3 5 8') == '2'\nassert solution('4 6 7 13') == '1'\nassert solution('233 233 10007 1') == '1'\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('2 3 5 8') == '2'\nassert solution('4 6 7 13') == '1'\nassert solution('233 233 10007 1') == '1'\n\"\"\"\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"1 2 3 4\") == \"1\\n\"\nassert solution(\"2 3 4 5\") == \"2\\n\"\nassert solution(\"1 2 3 4\") == \"2\\n\"\nassert solution(\"1 2 3 4\") == \"2\\n\"\nassert solution(\"1 2 3 4\") == \"2\\n\"\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(input()) == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == expected\n\"\"\""
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('2 3 5 8') == '2'\nassert solution('4 6 7 13') == '1'\nassert solution('233 233 10007 1') == '1'\nassert solution('3 2 2 4') == '3'\nassert solution('3 4 5 6') == '0'\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('2 3 5 8') == '2'\nassert solution('4 6 7 13') == '1'\n\n\n\"\"\"\n\nimport sys\nsys.stdin = open('input.txt')\nfrom math import log10\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('5 1 3 4') == '800'\nassert solution('1 1 1 1') == '256'\nassert solution('1 2 3 4') == '256'\nassert solution('1 2 3 4 5') == '256'\nassert solution('1 2 3 4 5 6') == '256'\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdin\n\"\"\"\nimport sys\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('5 1 3 4') == '800'\nassert solution('1 1 1 1') == '256'\nassert solution('5 1 2 2') == '5'\nassert solution('1 1 1 1') == '256'\nassert solution('1 1 1 1') == '256'\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdin\n\"\"\""
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('5 1 3 4') == '800'\nassert solution('1 1 1 1') == '256'\n\n\n\n\"\"\"\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('5 1 3 4') == '800'\nassert solution('1 1 1 1') == '256'\nassert solution('5 1 1 2') == '100'\nassert solution('5 1 2 3') == '2'\nassert solution('5 1 1 3') == '80'\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('5 1 3 4') == '800'\nassert solution('1 1 1 1') == '256'\n\"\"\"\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''5 1 3 4''') == '800'\nassert solution('''1 1 1 1''') == '256'\nassert solution('''1 2 3 4''') == '256'\nassert solution('''5 4 5 3''') == '8856'\nassert solution('''5 6 5 7''') == '1656'\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('5 1 3 4') == '800'\nassert solution('1 1 1 1') == '256'\nassert solution('1 1 1 0') == '256'\nassert solution('2 2 2 2') == '8'\nassert solution('2 3 5 4') == '450'\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('5 1 3 4') == '800'\nassert solution('1 1 1 1') == '256'\nassert solution('5 1 3 4') == '800'\nassert solution('1 1 1 1') == '256'\n\n\"\"\""
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('6 4 3 1') == '0'\nassert solution('9 3 8 10') == '2'\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('6 4 3 1') == '0'\nassert solution('9 3 8 10') == '2'\nassert solution('1 1 1 1 1') == '2'\nassert solution('2 2 2 2 2') == '0'\nassert solution('2 2 2 2 2') == '0'\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('6 4 3 1') == '0'\nassert solution('9 3 8 10') == '2'\nassert solution('1 2 3 4 5 6 7 8 9 10') == '2'\nassert solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40') == '2'\nassert solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100') == '2'\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == '2'\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdin\n\n\"\"\"\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''6 4 3 1''') == '0'\nassert solution('''9 3 8 10''') == '2'\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"6 4 3 1\") == \"0\"\nassert solution(\"9 3 8 10\") == \"2\"\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(input()) == \"0\"\nassert solution(input()) == \"0\"\nassert solution(input()) == \"0\"\nassert solution(input()) == \"0\"\nassert solution(input()) == \"0\"\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('1 2') == '3'\nassert solution('8 16') == '31'\nassert solution('1 1') == '0'\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''1 2''') == '3'\nassert solution('''8 16''') == '31'\nassert solution('''1 1''') == '0'\nassert solution('''3 3''') == '0'\nassert solution('''4 5''') == '7'\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1 2') == 3\nassert solution('8 16') == 31\nassert solution('1 1') == 0\nassert solution('1 10') == 1\nassert solution('1 9999999') == 0\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1 2') == '3'\nassert solution('8 16') == '31'\nassert solution('1 1') == '0'\nassert solution('1 2') == '3'"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1 2\\n') == '3'\nassert solution('8 16\\n') == '31'\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''1 2''') == 3\nassert solution('''1 1''') == 0\nassert solution('''1 10''') == 9\nassert solution('''100 1000''') == 497\nassert solution('''999999 1000''') == 999949\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''1 2''') == '3'\nassert solution('''8 16''') == '31'\nassert solution('''1 1''') == '0'\nprint(\"All set? Click 'Check' to earn cool rewards!\")\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdin"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''4 3''') == '1'\nassert solution('''4 12''') == '3'\nassert solution('''999999999999999999 999999999999999986''') == '1'\n\n\"\"\"\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('4 3') == '1'\nassert solution('4 12') == '3'\nassert solution('999999999999999999 999999999999999986') == '1'"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('4 3') == '1'\nassert solution('4 12') == '3'\nassert solution('999999999999999999 999999999999999986') == '1'\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('4 3\\n') == '1'\nassert solution('4 12\\n') == '3'\nassert solution('999999999999999999 999999999999999986\\n') == '1'\nassert solution('7 11\\n') == '3'\nassert solution('10000000000 1000000000\\n') == '9999999999'\n\"\"\"\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1 1') == '1'\nassert solution('2 2') == '1'\nassert solution('4 4') == '1'\nassert solution('5 5') == '1'\nassert solution('7 7') == '3'\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1 2\\n3 4') == '1'\nassert solution('10 20\\n20 10') == '3'\nassert solution('1000000000 1000000000\\n1000000001 100000000') == '1'\nassert solution('1000000000 1000000000\\n1000000001 100000000\\n1000000000 1000000000\\n1000000001 100000000\\n1000000001 100000000') == '3'\nassert solution('1000000000 1000000000\\n1000000001 100000000\\n1000000000 1000000000\\n1000000001 100000000\\n1000000001 100000000') == '3'\n\n\n\n\"\"\""
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"0 1\") == \"0\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"2 3\") == \"2\"\nassert solution(\"3 4\") == \"3\"\nassert solution(\"4 5\") == \"4\"\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''2 3''') == '1'\nassert solution('''5 12''') == '3'\nassert solution('''999999999999999999 999999999999999986''') == '1'\n\n\n\"\"\"\n\"\"\""
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('4 3') == '1'\nassert solution('4 12') == '3'\nassert solution('999999999999999999 999999999999999986') == '1'\nassert solution('0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 4711 4712 4713 4714 4715 4716 4717 4718 4719 4720 4721 4722 4723 4724 4725 4726 4727 4728 4729 4730 4731 4732 4733 4734 4735 4736 4737 4738 4739 4740 4741 4742 4743 4744 4745 4746 4747 4748 4749 4750 4751 4752 4753 4754 4755 4756 4757 4758 4759 4760 4761 4762 4763 4764 4765 4766 4777 4778 4779 4780 4781 4782 4783 4784 4785 4786 4787 4788 4789 4790 4791 4792 4793 4794 4795 4796 4797 4798 4799 4800 4801 4802 4803 4804 4805 4806 4807 4808 4809 4810 4811 4812 4813 4814 4815 4816 4817 4818 4819 4820 4821 4822 4823 4824 4825 4826 4827 4828 4829 4830 4831 4832 4833 4834 4835 4836 4837 4838 4839 4840 4841 4842 4843 4844 4845 4846 4847 4848 4849 4850 4851 4852 4853 4854 4855 4856 4857 4858 4859 4860 4861 4862 4863 4864 4865 4866 4867 4868 4869 4870 4871 4872 4873 4874 4875 4876 4877 4878 4879 4880 4881 4882 4883 4884 4885 4886 4887 4888 4889 4891 4900 4901 4902 4903 4904 4905 4906 4907 4908 4909 4910 4911 4912 4913 4914 4915 4916 4917 4918 4919 4920 4921 4922 4923 4924 4925 4926 4927 4928 4929 4930 4931 4932 4933 4934 4935 4936 4937 4938 4939 4940 4941 4942 4943 4944 4945 4946 4947 4948 4949 4950 4951 4952 4953 4954 4954 4955 4956 4957 4958 4959 4960 4961 4962 4963 4964 4965 4966 4967 4968 4969 4970 4971 4972 4973 4974 4975 4976 4977 4978 4979 4980 4981 4981 4982 4983 4984 4985 4986 4987 4989 4900 4901 4902 4903 4904 4905 4906 4907 4908 4909 4910 4911 4912 4913 4914 4915 4916 4917 4918 4919 4920 4921 4922 4923 4924 4925 4926 4927 4928 4929 4930 4931 4932 4933 4934 4935 4936 4937 4938 4939 4940 4941 4942 4943 4944 4945 4946 4947 4948 4949 4950 4951 4952 4953 4954 4954 4955 4956 4957 4958 4959 4960 4961 4962 4963 4964 4965 4966 4967 4968 4969 4970 4971 4972 4973 4974 4975 4976 4977 4978 4979 4980 4981 4981 4982 4983 4984 4985 4986 4987 4989 4900 4901 4902 4903 4904 4905 49"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('5 12') == '1'\nassert solution('999999999999999999 999999999999999986') == '1'\nassert solution('6 1') == '1'\nassert solution('6 1000000000') == '1'\nassert solution('1 1') == '1'\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"5 1 4 4 2 1\") == \"YES\"\nassert solution(\"1 6 6 2 1 1\") == \"NO\"\nassert solution(\"4 1 7 4 1 2\") == \"YES\"\n\n\n\n\"\"\"\n\nfrom math import ceil\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('5 1 4 4 2 1') == 'YES'\nassert solution('1 6 6 2 1 1') == 'NO'\nassert solution('4 1 7 4 1 2') == 'YES'\nassert solution('1 4 6 2 1 1') == 'YES'\nassert solution('3 4 1 2 1 2') == 'YES'\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('5 1 4 4 2 1\\n') == 'YES'\nassert solution('1 6 6 2 1 1\\n') == 'NO'\nassert solution('4 1 7 4 1 2\\n') == 'YES'\nassert solution('3 2 3 2 3 3\\n') == 'YES'\nassert solution('4 1 7 4 1 2\\n') == 'NO'\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"5 1 4 4 2 1\") == \"YES\"\nassert solution(\"1 6 6 2 1 1\") == \"NO\"\nassert solution(\"4 1 7 4 1 2\") == \"YES\"\nassert solution(\"1 5 5 2 1 1\") == \"NO\"\nassert solution(\"6 1 7 4 1 2\") == \"NO\"\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('5 1 4 4 2 1\\n') == 'YES\\n'\nassert solution('1 6 6 2 1 1\\n') == 'NO\\n'\nassert solution('4 1 7 4 1 2\\n') == 'YES\\n'"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('5 1 4 4 2 1') == 'YES'\nassert solution('1 6 6 2 1 1') == 'NO'\nassert solution('4 1 7 4 1 2') == 'YES'"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('5 1 4 4 2 1') == 'YES'\nassert solution('1 6 6 2 1 1') == 'NO'\nassert solution('4 1 7 4 1 2') == 'YES'\nassert solution('4 1 7 4 1 2') == 'YES'\nassert solution('4 1 7 4 1 2') == 'YES'\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('5 1 4 4 2 1\\n') == 'YES'\nassert solution('1 6 6 2 1 1\\n') == 'NO'\nassert solution('4 1 7 4 1 2\\n') == 'YES'\n\"\"\"\nx, y, z, t_1, t_2, t_3 = [int(x) for x in stdin.strip().split()]"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('5 1 4 4 2 1') == 'YES'\nassert solution('1 6 6 2 1 1') == 'NO'\nassert solution('4 1 7 4 1 2') == 'YES'\nassert solution('4 1 7 4 1 2') == 'NO'\nassert solution('1 1 1 1 1 1') == 'YES'\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"5 1 4 4 2 1\") == \"YES\"\nassert solution(\"1 6 6 2 1 1\") == \"NO\"\nassert solution(\"4 1 7 4 1 2\") == \"YES\"\nassert solution(\"4 1 7 4 1 2\") == \"NO\"\nassert solution(\"4 1 6 4 1 2\") == \"NO\"\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1\\n3\\n') == '2'\nassert solution('1\\n2\\n') == '2'\nassert solution('2\\n2\\n') == '1'\nassert solution('1\\n2\\n') == '1'\nassert solution('1\\n1\\n') == '1'\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == '2'\nassert solution('3 1') == '2'\nassert solution('4 3') == '2'\n\"\"\"\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('2 1') == '2'\nassert solution('3 1') == '2'\nassert solution('4 3') == '2'\nassert solution('4 3') == '2'\nassert solution('4 3') == '2'\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1 2\\n') == '1'\nassert solution('2 4\\n') == '1'\nassert solution('2 5\\n') == '2'\nassert solution('1 2\\n1 4\\n') == '2'\nassert solution('2 2\\n1 2\\n') == '1'"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''1 1''') == '2'\nassert solution('''5 2''') == '3'\nassert solution('''1000000000 1000000000''') == '1'\nassert solution('''10000000 1000000000''') == '1'\nassert solution('''7 6''') == '2'\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('4 3') == '2'\nassert solution('2 3') == '1'\nassert solution('5 2') == '2'\nassert solution('100000 1000000') == '1000000'\nassert solution('100000 1000001') == '1000000'\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('1 1') == '1'\nassert solution('1 2') == '2'\nassert solution('1 3') == '1'\nassert solution('1 4') == '1'\nassert solution('1 5') == '1'\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == \"2\"\n\"\"\"\n\nimport sys\nfrom random import randint\n\nN, M = [int(x) for x in sys.stdin.readline().split()]\na = randint(1, N)\nprint(a)\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1 1') == '1'\nassert solution('4 3') == '2'\nassert solution('3 1') == '2'\nassert solution('3 5') == '2'\nassert solution('7 6') == '3'\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"1 1\") == \"2\"\nassert solution(\"2 2\") == \"2\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"2 1\") == \"1\"\nassert solution(\"1 3\") == \"2\"\n"
    },
    {
        "number": 313,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('5') == '4'\nassert solution('7') == '4'\nassert solution('1') == '0'\nassert solution('0 1 0 1 1') == '4'\nassert solution('1 0 1 0 0 1 0') == '4'\n\n\"\"\""
    },
    {
        "number": 313,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('5\\n0 1 0 1 1') == '4\\n'\nassert solution('7\\n1 0 1 0 0 1 0\\n') == '4\\n'\nassert solution('1\\n0\\n') == '0\\n'\nassert solution('11\\n1 1 0 0 1 0 1 1 1 1\\n') == '1\\n'\n"
    },
    {
        "number": 313,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"3\\n0 0 1 0 1\") == \"4\"\nassert solution(\"5\\n0 1 0 1 1 1\") == \"4\"\nassert solution(\"7\\n0 0 1 0 0 1 0\") == \"4\"\nassert solution(\"1\\n0\") == \"0\"\nassert solution(\"3\\n1 0 1\") == \"0\"\n"
    },
    {
        "number": 313,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''5''') == '''4'''\nassert solution('''7''') == '''4'''\nassert solution('''1''') == '''0'''\n\n'''\n"
    },
    {
        "number": 313,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"5\\n0 1 0 1 1\") == \"4\"\nassert solution(\"7\\n1 0 1 0 0 1 0\") == \"4\"\nassert solution(\"1\\n0\") == \"0\"\nassert solution(\"3\\n1 0 1 0\") == \"0\"\nassert solution(\"1\\n0 0\") == \"0\"\n"
    },
    {
        "number": 313,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"5\") == \"4\"\nassert solution(\"7\") == \"4\"\nassert solution(\"1\") == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 313,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('5\\n0 1 0 1 1\\n') == '4'\nassert solution('7\\n1 0 1 0 0 1 0\\n') == '4'\nassert solution('1\\n0\\n') == '0'\nassert solution('3\\n0 0 1\\n') == '0'\nassert solution('2\\n0 0\\n') == '1'\n"
    },
    {
        "number": 313,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"5\\n0 1 0 1 1\") == \"4\"\nassert solution(\"7\\n1 0 1 0 0 1 0\") == \"4\"\nassert solution(\"1\\n0\") == \"0\"\nassert solution(\"3\\n1 0 1 0\") == \"0\"\nassert solution(\"4\\n1 0 1 0 1\") == \"2\"\n"
    },
    {
        "number": 313,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('4\\n0 1 0 1 1') == '4'\nassert solution('3\\n1 0 1 0') == '0'\nassert solution('7\\n1 0 1 0 0 1 0') == '4'\nassert solution('1\\n0') == '0'\nassert solution('7\\n0 1 0 0 0 1 0') == '4'\n"
    },
    {
        "number": 313,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('5\\n0 1 0 1 1') == '4'\nassert solution('7\\n1 0 1 0 0 1 0') == '4'\nassert solution('1\\n0') == '0'\n"
    },
    {
        "number": 314,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''2 3\n1 2\n''') == '2'\nassert solution('''3 17\n10 10 10\n''') == '3'\nassert solution('''1 9\n10\n''') == '-1'\nassert solution('''3 3\n1 2 3 4\n''') == '3'\nassert solution('''4 2\n2 1 3 4\n''') == '-1'\n"
    },
    {
        "number": 314,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('1 2\\n1 2') == '2'\nassert solution('2 3\\n1 2') == '2'\nassert solution('3 17\\n10 10 10') == '3'\nassert solution('1 9\\n10') == '-1'\nassert solution('1 22\\n10') == '-1'\n"
    },
    {
        "number": 314,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1 2\\n1 2') == '2'\nassert solution('2 17\\n10 10 10') == '3'\nassert solution('3 17\\n10 10 10') == '-1'\nassert solution('3 2\\n1 2') == '-1'\nassert solution('3 1\\n1') == '-1'\n"
    },
    {
        "number": 314,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdin\n\n'''\n'''\nTime Limit Exceeded\n'''\n"
    },
    {
        "number": 314,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''2 3\n1 2\n''') == '2'\nassert solution('''3 17\n10 10 10\n''') == '3'\nassert solution('''1 9\n10\n''') == '-1'\nassert solution('''6 4\n5 4 3 2 1\n''') == '3'\nassert solution('''4 3\n3 3 3 3\n''') == '-1'\n"
    },
    {
        "number": 314,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"1 2\") == \"-1\"\nassert solution(\"3 17\") == \"3\"\nassert solution(\"10 10 10\") == \"3\"\nassert solution(\"1 9\") == \"-1\"\nassert solution(\"4 1\") == \"2\"\n"
    },
    {
        "number": 314,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''3 17''') == '3'\nassert solution('''3 10''') == '-1'\nassert solution('''3 10''') == '-1'\nassert solution('''3 10''') == '-1'\nassert solution('''3 10''') == '-1'\n"
    },
    {
        "number": 314,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1\\n2') == '2'\nassert solution('2\\n2') == '1'\nassert solution('2\\n4') == '2'\nassert solution('2\\n3') == '2'\nassert solution('2\\n1') == '-1'\n"
    },
    {
        "number": 314,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"2 3\\n1 2\\n\") == \"2\\n\"\nassert solution(\"3 17\\n10 10 10\\n\") == \"3\\n\"\nassert solution(\"1 9\\n10\\n\") == \"-1\\n\"\nprint(\"All tests passed successfully.\")\n\n\"\"\"\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\ncount = 0\n\nfor i in range(n):\n    if a[i] > k:\n        break\n    count += 1\n    k -= a[i]"
    },
    {
        "number": 314,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1 2\\n1 2\\n') == '2'\nassert solution('2 9\\n10 10 10\\n') == '-1'\nassert solution('3 17\\n10 10 10\\n') == '3'\nassert solution('3 9\\n10 10 10\\n') == '-1'\nassert solution('1 10\\n10\\n') == '1'\n"
    },
    {
        "number": 315,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('2 3') == '4'\nassert solution('1 2') == '0'\nassert solution('3 1') == '1'\nassert solution('5 5') == '0'\nassert solution('10 15') == '1'\n"
    },
    {
        "number": 315,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\n'''3 5\n2 0 1\n''') == '4'\nassert solution(\n'''3 1\n0 0 0\n''') == '0 1 0'\nassert solution(\n'''4 6\n2 4 3 5\n''') == '2 3 2'\n"
    },
    {
        "number": 315,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''3 5\n2 0 1\n''') == '4'\nassert solution('''3 1\n0 0 0\n''') == '1'\nassert solution('''4 6\n2 4 3 5\n''') == '0'\n\n\n-----"
    },
    {
        "number": 315,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('3 5\\n2 0 1\\n') == '4'\nassert solution('3 1\\n0 0 0\\n') == '1'\nassert solution('4 6\\n2 4 3 5\\n') == '0'\nassert solution('1\\n1\\n') == '0'\nassert solution('3 3\\n2 2 0\\n') == '2'\n"
    },
    {
        "number": 315,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1 2') == '1'\nassert solution('2 4') == '0'\nassert solution('2 4 3 5') == '2 3 2'\nassert solution('2 4 3 5 6 7') == '0 2 4 3 5'\nassert solution('2 4 3 5 6 7 8 9 10') == '0 2 4 3 5'\n"
    },
    {
        "number": 315,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''3 5\n2 0 1''') == '4'\nassert solution('''3 1\n0 0 0''') == '1'\nassert solution('''4 6\n2 4 3 5''') == '0'\nassert solution('''4 0\n2 4 3 5''') == '2'"
    },
    {
        "number": 315,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''3 5\n2 0 1\n''') == '4'\nassert solution('''3 1\n0 0 0\n''') == '1'\nassert solution('''4 6\n2 4 3 5\n''') == '0'\n"
    },
    {
        "number": 315,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('0 0 0') == '0'\nassert solution('1 0 1') == '1'\nassert solution('1 2 3') == '1'\nassert solution('2 4 3 5') == '0'"
    },
    {
        "number": 315,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\n'''5 5\n2 0 1\n''') == '4'\n\nassert solution(\n'''6 1\n2 4 3 5 6\n''') == '0'\n\nassert solution(\n'''10 10\n10 0 10 10 10 10 10 10 10 10\n''') == '5'\n\nassert solution(\n'''10 5\n1 2 3 4 5 6 7 8 9 10\n''') == '5'\n\nassert solution(\n'''10 1\n1 0 1 1 1 1 1 1 1 1\n''') == '5'"
    },
    {
        "number": 315,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"3 5\\n2 0 1\\n\") == \"4\\n2 3 2\"\nassert solution(\"3 1\\n0 0 0\\n\") == \"1\\n0 1 0\"\nassert solution(\"4 6\\n2 4 3 5\\n\") == \"0\\n2 4 3 5\"\nassert solution(\"6 2\\n3 2 1 4 5 6\") == \"0\\n3 3 3 3 3\"\nassert solution(\"6 2\\n3 2 1 4 5 6\\n\") == \"0\\n3 3 3 3 3\"\n"
    },
    {
        "number": 316,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(1) == 1\nassert solution(2) == 5\nassert solution(3) == 13\nassert solution(4) == 35\nassert solution(5) == 97\n"
    },
    {
        "number": 316,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"\") == 0\nassert solution(\"1\") == 1\nassert solution(\"2\") == 5\nassert solution(\"3\") == 13\nassert solution(\"4\") == 25\n"
    },
    {
        "number": 316,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == expected\n\n\"\"\"\n"
    },
    {
        "number": 316,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\n'''1'''\n) == 1\nassert solution(\n'''2'''\n) == 5\nassert solution(\n'''3'''\n) == 13\nassert solution(\n'''4'''\n) == 34\nassert solution(\n'''5'''\n) == 65\n"
    },
    {
        "number": 316,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('2') == '5'\nassert solution('3') == '13'\nassert solution('4') == '20'\n"
    },
    {
        "number": 316,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '5'\nassert solution('3') == '13'\nassert solution('4') == '31'\nassert solution('5') == '91'\n"
    },
    {
        "number": 316,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 316,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '5'\nassert solution('3') == '13'\nassert solution('4') == '33'\nassert solution('5') == '55'\n"
    },
    {
        "number": 316,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"1\") == 1\nassert solution(\"2\") == 5\nassert solution(\"3\") == 13\n"
    },
    {
        "number": 316,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''1''') == '1'\nassert solution('''2''') == '5'\nassert solution('''3''') == '13'\nassert solution('''10''') == '190'\nassert solution('''20''') == '1050'\n"
    },
    {
        "number": 317,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''12''') == 'NO'\nassert solution('toosmallword') == 'NO'\nassert solution('TheQuickBrownFoxJumpsOverTheLazyDog') == 'YES'\nassert solution('Xyz') == 'NO'\nassert solution('xyz') == 'NO'\n"
    },
    {
        "number": 317,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('asdf') == 'NO'\nassert solution('asdF') == 'NO'\nassert solution('asdfasdf') == 'NO'\nassert solution('TheQuickBrownFoxJumpsOverTheLazyDog') == 'YES'\nassert solution('toosmallword') == 'NO'\n"
    },
    {
        "number": 317,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"toosmallword\") == \"NO\"\nassert solution(\"TheQuickBrownFoxJumpsOverTheLazyDog\") == \"YES\"\n\n\"\"\""
    },
    {
        "number": 317,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"toosmallword\") == \"NO\"\nassert solution(\"TheQuickBrownFoxJumpsOverTheLazyDog\") == \"YES\"\n"
    },
    {
        "number": 317,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('toosmallword') == 'NO'\nassert solution('TheQuickBrownFoxJumpsOverTheLazyDog') == 'YES'\nassert solution('toobigword') == 'NO'\nassert solution('TheQuickBrownFoxJumpsOverTheLazyDog!') == 'YES'\nassert solution('ToOsmALLwoRd!') == 'NO'\n"
    },
    {
        "number": 317,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('') is None\nassert solution(' ') is None\nassert solution('toosmallword') is None\nassert solution('TheQuickBrownFoxJumpsOverTheLazyDog') == 'YES'\nassert solution('verylongword') == 'NO'\n"
    },
    {
        "number": 317,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('hello') == 'NO'\nassert solution('Hello world!') == 'YES'\nassert solution('abcd') == 'NO'\nassert solution('abcd') == 'NO'\n"
    },
    {
        "number": 317,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"toosmallword\") == \"NO\"\nassert solution(\"TheQuickBrownFoxJumpsOverTheLazyDog\") == \"YES\"\nassert solution(\"TCE\") == \"YES\"\nassert solution(\"ToOSMALLWORD\") == \"NO\"\nassert solution(\"ToOsmALLWORD\") == \"NO\"\n"
    },
    {
        "number": 317,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''toosmallword''') == 'NO'\nassert solution('''TheQuickBrownFoxJumpsOverTheLazyDog''') == 'YES'\nassert solution('''The Quick Brown Fox Jumps Over The Lazy Dog''') == 'YES'\nassert solution('''the quick brown fox jumps over the lazy dog''') == 'YES'\nassert solution('''the quick Brown Fox Jumps Over The Lazy Dog''') == 'NO'\n"
    },
    {
        "number": 317,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('12') == 'NO'\nassert solution('1234') == 'NO'\nassert solution('To') == 'NO'\nassert solution('TheQuickBrownFoxJumpsOverTheLazyDog') == 'YES'\nassert solution('toosmallword') == 'NO'\n"
    },
    {
        "number": 318,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"23:59\") == \"00:09\"\nassert solution(\"23:59\") == \"00:09\"\nassert solution(\"20:20\") == \"22:21\"\nassert solution(\"10:10\") == \"10:10\"\nassert solution(\"2:59\") == \"2:59\"\n"
    },
    {
        "number": 318,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('23:59') == '00:00'\nassert solution('23:59') == '23:59'\nassert solution('11:59') == '00:59'\nassert solution('10:59') == '01:59'\nassert solution('0:59') == '00:59'\n"
    },
    {
        "number": 318,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('23:59') == '00:09'\nassert solution('20:20') == '22:21'\nassert solution('10:10') == '10:10'\nassert solution('20:21') == '22:21'\nassert solution('23:59') == '00:09'\n"
    },
    {
        "number": 318,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\n    \"23:59\"\n    \"10\"\n) == \"00:09\"\n\nassert solution(\n    \"20:20\"\n    \"121\"\n) == \"22:21\"\n\nassert solution(\n    \"10:10\"\n    \"0\"\n) == \"10:10\""
    },
    {
        "number": 318,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"23:59\") == \"00:09\"\nassert solution(\"11:49\") == \"00:09\"\nassert solution(\"10:59\") == \"23:59\"\nassert solution(\"10:00\") == \"00:00\"\nassert solution(\"23:59\") == \"00:00\"\n"
    },
    {
        "number": 318,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('23:59') == '00:09'\nassert solution('20:20') == '22:21'\nassert solution('10:10') == '10:10'\nassert solution('0:0') == '10:10'\nassert solution('11:59') == '12:00'\n"
    },
    {
        "number": 318,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('23:59') == '00:00'\nassert solution('20:20') == '22:21'\nassert solution('10:10') == '10:11'\nassert solution('0:0') == '0:1'\nassert solution('0:59') == '1:0'\n"
    },
    {
        "number": 318,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"23:59\") == \"00:09\"\nassert solution(\"20:20\") == \"22:21\"\nassert solution(\"10:10\") == \"10:10\"\nassert solution(\"0:0\") == \"0:0\"\nassert solution(\"0:10\") == \"0:10\"\n"
    },
    {
        "number": 318,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"23:59\") == \"00:09\"\nassert solution(\"20:20\") == \"22:21\"\nassert solution(\"10:10\") == \"10:10\"\nassert solution(\"13:31\") == \"22:18\"\nassert solution(\"60:23\") == \"01:38\"\n"
    },
    {
        "number": 318,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('23:59') == '00:09'\nassert solution('23:59') == '00:09'\nassert solution('20:20') == '22:21'\nassert solution('10:10') == '10:10'\nassert solution('21:42') == '22:43'\n"
    },
    {
        "number": 319,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''4 5\n10101\n01000\n00111\n10000''') == 'YES'\nassert solution('''4 5\n10100\n01000\n00110\n00101''') == 'NO'\nassert solution('''4 5\n10100\n10101\n00111\n10000''') == 'NO'\nassert solution('''5 5\n01010\n01010\n10100\n00010\n10000''') == 'YES'\nassert solution('''5 5\n01010\n10100\n00010\n10000''') == 'NO'\n"
    },
    {
        "number": 319,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('1 1\\n0') == 'YES'\nassert solution('1 1\\n1') == 'NO'\nassert solution('1 1\\n0 1\\n0') == 'YES'\nassert solution('1 1\\n0 1\\n1') == 'NO'\nassert solution('1 1\\n0 1\\n0') == 'YES'\n"
    },
    {
        "number": 319,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"0\") == \"NO\"\nassert solution(\"1\") == \"NO\"\nassert solution(\"11\") == \"NO\"\nassert solution(\"1010\") == \"NO\"\n"
    },
    {
        "number": 319,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('') is None\nassert solution('1 1') == 'NO'\nassert solution('1 2') == 'YES'\nassert solution('0 1') == 'YES'\nassert solution('1 1') == 'YES'\n"
    },
    {
        "number": 319,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"4 5\\n10101\\n01000\\n00111\\n10000\") == \"YES\"\nassert solution(\"4 5\\n10100\\n01000\\n00110\\n00101\") == \"NO\"\nassert solution(\"3 5\\n100000\\n00011\\n00100\\n10111\") == \"YES\"\nassert solution(\"3 5\\n100000\\n00011\\n00100\\n10111\") == \"NO\"\nassert solution(\"3 5\\n100000\\n00011\\n00100\\n10111\") == \"NO\"\n"
    },
    {
        "number": 319,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(input()) == 'YES'\nassert solution(input()) == 'NO'\nassert solution(input()) == 'YES'\nassert solution(input()) == 'NO'\nassert solution(input()) == 'YES'\n"
    },
    {
        "number": 319,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\\\n4 5\n10101\n01000\n00111\n10000\n\"\"\") == \"YES\"\nassert solution(\"\"\"\\\n4 5\n10100\n01000\n00110\n00101\n\"\"\") == \"NO\"\nassert solution(\"\"\"\\\n6 6\n000000\n000000\n000000\n000000\n000000\n000000\n000000\n\"\"\") == \"YES\"\nassert solution(\"\"\"\\\n7 7\n000000\n000000\n000000\n000000\n000000\n000000\n000000\n000000\n000000\n\"\"\") == \"NO\"\nassert solution(\"\"\"\\\n6 6\n10101\n01000\n00111\n10000\n10111\n00001\n\"\"\") == \"NO\"\n"
    },
    {
        "number": 319,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1 5\\n10101\\n01000\\n00111\\n10000') == 'YES'\nassert solution('2 4\\n10001\\n00101\\n00000\\n10000') == 'NO'\nassert solution('5 4\\n01001\\n10001\\n00001\\n10000\\n10000') == 'NO'\nassert solution('5 4\\n10001\\n10001\\n00001\\n10000\\n10000') == 'NO'\nassert solution('5 4\\n10000\\n10000\\n00001\\n10000\\n10000') == 'NO'\n"
    },
    {
        "number": 319,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''4 5\n10101\n01000\n00111\n10000''') == \"YES\"\nassert solution('''4 5\n10100\n01000\n00110\n00101''') == \"NO\"\nassert solution('''4 2\n1 1\n0 1\n0 1\n1 0''') == \"NO\"\nassert solution('''5 1\n0 0\n1 1\n0 0\n0 1\n1 0''') == \"NO\"\nassert solution('''5 1\n0 0\n1 1\n0 0\n0 0\n0 1''') == \"NO\"\n"
    },
    {
        "number": 319,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1 2\\n2 1') == 'YES'\nassert solution('1 2\\n2 1') == 'NO'\nassert solution('1 1\\n1 1') == 'NO'\nassert solution('1 3\\n1 1') == 'YES'\nassert solution('1 2\\n1 1') == 'NO'\n"
    },
    {
        "number": 320,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1\\n1') == '0'\nassert solution('2\\n2') == '0'\nassert solution('3\\n2') == '1'\nassert solution('4\\n4') == '0'\nassert solution('5\\n4') == '1'\n"
    },
    {
        "number": 320,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('1\\n2 3\\n4 4') == '0'\nassert solution('2\\n4 2\\n6 4\\n') == '-1'\nassert solution('3\\n1 4\\n2 3\\n4 4\\n') == '1'\nassert solution('10\\n1 1\\n2 2\\n3 3\\n4 4\\n5 5\\n6 6\\n7 7\\n8 8\\n9 9\\n10 10') == '0'\nassert solution('100\\n1 1\\n2 2\\n3 3\\n4 4\\n5 5\\n6 6\\n7 7\\n8 8\\n9 9\\n10 10\\n11 11\\n12 12\\n13 13\\n14 14\\n15 15\\n16 16\\n17 17\\n18 18\\n19 19\\n20 20\\n21 21\\n22 22\\n23 23\\n24 24\\n25 25\\n26 26\\n27 27\\n28 28\\n29 29\\n30 30\\n31 31\\n32 32\\n33 33\\n34 34\\n35 35\\n36 36\\n37 37\\n38 38\\n39 39\\n40 40\\n41 41\\n42 42\\n43 43\\n44 44\\n45 45\\n46 46\\n47 47\\n48 48\\n49 49\\n50 50') == '0'\n"
    },
    {
        "number": 320,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"1\\n4\\n2\\n3\\n6\\n4\\n2\\n1\") == \"0\\n\"\nassert solution(\"2\\n3\\n4\\n6\\n4\\n2\\n1\") == \"-1\\n\"\nassert solution(\"1\\n2\\n3\\n6\\n4\\n2\\n1\") == \"1\\n\"\nassert solution(\"3\\n1\\n2\\n4\\n6\\n4\\n2\\n1\") == \"-1\\n\"\nassert solution(\"3\\n1\\n2\\n6\\n4\\n2\\n1\") == \"1\\n\"\n"
    },
    {
        "number": 320,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''2\n4 2\n6 4''') == '0'\n\nassert solution('''1\n2 3\n4 4\n''') == '-1'\n\nassert solution('''3\n1 4\n2 3\n4 4\n''') == '1'\n\nassert solution('''4\n1 4\n2 3\n4 4\n3 2\n''') == '2'\n\nassert solution('''10\n1 1\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n1 11\n1 12\n1 13\n''') == '1'"
    },
    {
        "number": 320,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''2\n4 2\n6 4''') == '0'\nassert solution('''1\n2 3''') == '-1'\nassert solution('''3\n1 4\n2 3\n4 4''') == '1'\nassert solution('''2\n1 4\n2 3''') == '-1'\nassert solution('''4\n1 4\n2 3\n4 4\n5 5''') == '1'\n"
    },
    {
        "number": 320,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"2\\n4 2\\n6 4\") == \"0\"\nassert solution(\"1\\n2 3\\n4 4\") == \"-1\"\nassert solution(\"3\\n1 4\\n2 3\\n4 4\") == \"1\"\nassert solution(\"3\\n1 4\\n2 3\") == \"1\"\nassert solution(\"2\\n4 1\\n6 4\") == \"0\"\n"
    },
    {
        "number": 320,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('2\\n4 2\\n6 4\\n') == '0\\n'\nassert solution('1\\n2 3\\n4 4\\n') == '-1\\n'\nassert solution('3\\n1 4\\n2 3\\n4 4\\n') == '1\\n'\n\n\n-----"
    },
    {
        "number": 320,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\n"
    },
    {
        "number": 320,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1\\n1') == '1'\nassert solution('2\\n1\\n2\\n1') == '1'\nassert solution('1\\n1\\n1\\n1') == '-1'\nassert solution('1\\n1\\n1\\n1\\n1\\n1\\n1') == '-1'\nassert solution('2\\n1\\n2\\n2\\n2\\n2\\n2') == '0'\n"
    },
    {
        "number": 320,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('4 2\\n6 4\\n') == '0'\nassert solution('1 2\\n2 3\\n') == '-1'\nassert solution('3\\n1 4\\n2 3\\n4 4\\n') == '1'\n"
    },
    {
        "number": 321,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('4\\n6 5\\n16 13\\n61690850361 24777622630\\n34 33') == 'NO\\nNO\\nNO\\nYES'\nassert solution('1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1"
    },
    {
        "number": 321,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''6\n16 13\n61690850361 24777622630\n34 33\n''') == 'YES\\nNO\\nNO\\nYES'\n'''"
    },
    {
        "number": 321,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('2\\n1 1\\n2 2') == 'NO'\nassert solution('1\\n1\\n1') == 'YES'\nassert solution('1\\n2\\n1') == 'NO'\nassert solution('1\\n1\\n3') == 'YES'\nassert solution('1\\n2\\n3') == 'YES'\n"
    },
    {
        "number": 321,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"NO\"\nassert solution(\"2\") == \"NO\"\nassert solution(\"3\") == \"NO\"\nassert solution(\"4\") == \"YES\"\n"
    },
    {
        "number": 321,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''6\n6 5\n16 13\n61690850361 24777622630''') == 'YES'\nassert solution('''6\n2 9\n16 1\n16 9\n16 9\n16 9''') == 'NO'\nassert solution('''6\n2 9\n16 1\n16 9\n16 9\n16 9''') == 'YES'\nassert solution('''6\n2 9\n7 9\n16 1\n16 9\n16 9\n16 9''') == 'NO'\nassert solution('''6\n2 9\n7 9\n7 1\n16 1\n16 9\n16 9\n16 9''') == 'YES'\n"
    },
    {
        "number": 321,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''3\n4 3\n3 5\n7 6''') == \"YES\"\nassert solution('''2\n6 6\n12 10''') == \"NO\"\nassert solution('''2\n7 2\n12 9''') == \"YES\"\n\n\n\n\n'''"
    },
    {
        "number": 321,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('1\\n2') == 'NO'\nassert solution('1\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2"
    },
    {
        "number": 321,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('6 5') == 'YES'\nassert solution('16 13') == 'NO'\nassert solution('61690850361 24777622630') == 'YES'\nassert solution('34 33') == 'NO'\nassert solution('8 1') == 'YES'\n"
    },
    {
        "number": 321,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('inputs/test_1') == 'YES'\nassert solution('inputs/test_2') == 'NO'\nassert solution('inputs/test_3') == 'NO'\nassert solution('inputs/test_4') == 'NO'\nassert solution('inputs/test_5') == 'YES'\n"
    },
    {
        "number": 321,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''4\n6 5\n16 13\n61690850361 24777622630\n34 33''') == 'YES\\nNO\\nNO\\nYES'\nassert solution('''2\n1 1\n2 2''') == 'NO'\nassert solution('''1\n2\n1''') == 'NO'\nassert solution('''2\n1\n1''') == 'YES'\nassert solution('''2\n1\n2''') == 'YES'\n"
    },
    {
        "number": 322,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('3\\n1 1\\n-1 -1\\n2 -1') == 'Yes'\nassert solution('3\\n1 1\\n-1 -1\\n2 -1\\n4 60') == 'No'\nassert solution('4\\n1 1\\n2 2\\n-1 1\\n-2 2') == 'Yes'\nassert solution('1\\n1\\n1 1\\n1 1\\n1 1') == 'Yes'\nassert solution('3\\n1 1\\n-1 -1\\n2 -1\\n4 60\\n4 60\\n-2 2') == 'No'\n"
    },
    {
        "number": 322,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('5\\n1 1\\n-1 -1\\n2 -1\\n1 1\\n2 1\\n4 60') == 'No'\nassert solution('3\\n1 1\\n-1 -1\\n2 -1') == 'Yes'\nassert solution('3\\n1 2\\n2 1\\n4 60') == 'No'\nassert solution('3\\n1 2\\n2 1\\n4 60\\n1 1\\n2 2\\n4 60') == 'No'\nassert solution('3\\n1 2\\n2 1\\n4 60\\n1 1\\n2 2\\n4 60\\n1 1\\n2 2\\n4 60') == 'No'\n"
    },
    {
        "number": 322,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1 1\") == \"Yes\"\nassert solution(\"2 1\") == \"No\"\nassert solution(\"1 2\") == \"No\"\nassert solution(\"2 2\") == \"Yes\"\n"
    },
    {
        "number": 322,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('2\\n1 1\\n-1 -1') == 'No'\nassert solution('2\\n1 1\\n2 2\\n-1 1\\n-2 2') == 'Yes'\nassert solution('3\\n1 1\\n2 2\\n-1 1\\n-2 2\\n4 60') == 'Yes'\n\n\n\n\"\"\"\n\nN = int(input())\n\nX = []\nY = []\n\nfor _ in range(N):\n    x, y = input().split()\n    X.append(float(x))\n    Y.append(float(y))"
    },
    {
        "number": 322,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('3\\n1 1\\n2 2\\n-1 -1') == 'Yes'\nassert solution('4\\n1 1\\n2 2\\n-1 1\\n-2 2') == 'No'\nassert solution('1\\n2\\n3\\n5\\n2') == 'Yes'\n\n\"\"\"\n\nfrom sys import stdin, stdout\nfrom math import sqrt"
    },
    {
        "number": 322,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"\"\"3\n1 1\n-1 -1\n2 -1\"\"\") == \"Yes\"\nassert solution(\"\"\"4\n1 1\n2 2\n-1 1\n-2 2\n\"\"\") == \"No\"\nassert solution(\"\"\"3\n1 2\n2 1\n4 60\n\"\"\") == \"Yes\"\n\n\"\"\"\n\n\n\"\"\""
    },
    {
        "number": 322,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"Yes\"\nassert solution(\"1 1\") == \"Yes\"\nassert solution(\"2 -1\") == \"No\"\nassert solution(\"1 2\") == \"No\"\nassert solution(\"2 2\") == \"Yes\"\n"
    },
    {
        "number": 322,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''3''') == 'No'\nassert solution('''1 1''') == 'Yes'\nassert solution('''1 1\n2 2''') == 'No'\nassert solution('''1 1\n2 2''') == 'No'\nassert solution('''1 1\n-1 -1''') == 'Yes'\n"
    },
    {
        "number": 322,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('4') == \"No\"\nassert solution('3') == \"Yes\"\nassert solution('3\\n1 2\\n2 1\\n4 60') == \"Yes\"\nassert solution('5') == \"No\"\nassert solution('5\\n1 1\\n2 2\\n-1 1\\n-2 2') == \"No\"\n"
    },
    {
        "number": 322,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n"
    },
    {
        "number": 323,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('4 3') == '6'\nassert solution('5 10') == '10'\nassert solution('1 3') == '1'\nassert solution('1 1') == '1'\nassert solution('2 2') == '2'\n"
    },
    {
        "number": 323,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"1 2\") == \"1\"\nassert solution(\"4 3\") == \"6\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 323,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"4 3\") == \"6\"\nassert solution(\"2 1\") == \"1\"\nassert solution(\"1 0\") == \"0\"\nassert solution(\"3 0\") == \"0\"\nassert solution(\"1 1\") == \"1\"\n"
    },
    {
        "number": 323,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('4 3') == '6'\n'''\n"
    },
    {
        "number": 323,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('4 3') == '6'\n\n\"\"\"\n"
    },
    {
        "number": 323,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''3 3''') == '6'\nassert solution('''3 10''') == '6'\nassert solution('''6 5''') == '3'\nassert solution('''100 29''') == '1'\nassert solution('''100 29''') == '1'\n"
    },
    {
        "number": 323,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"4 3\") == \"6\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"1 2 3 4\") == \"1\"\nassert solution(\"5 7\") == \"1\"\nassert solution(\"1 0\") == \"1\"\n"
    },
    {
        "number": 323,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''3 3''') == '6'\n'''\nassert solution('''12 1''') == '1'\n'''\n"
    },
    {
        "number": 323,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('3 3') == '6'\nassert solution('4 3') == '6'\nassert solution('7 9') == '1'\nassert solution('9 7') == '1'\nassert solution('11 15') == '1'\n"
    },
    {
        "number": 323,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\n'''3 3'''\n) == '6'\nassert solution(\n'''6 2'''\n) == '2'\nassert solution(\n'''10 7'''\n) == '2'\nassert solution(\n'''15 8'''\n) == '2'\nassert solution(\n'''300 200'''\n) == '1'\n"
    },
    {
        "number": 324,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"\"\nassert solution(\"4\") == \"\"\nassert solution(\"16\") == \"\"\nassert solution(\"512\") == \"\"\n"
    },
    {
        "number": 324,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1') == ''\nassert solution('2') == ''\nassert solution('3') == ''\nassert solution('4') == ''\n"
    },
    {
        "number": 324,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"\"\nassert solution(\"2\") == \"\"\nassert solution(\"3\") == \"\"\nassert solution(\"4\") == \"\"\n"
    },
    {
        "number": 324,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1') == '9 8'\nassert solution('512') == '4608 4096'"
    },
    {
        "number": 324,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1') == '1 1'\nassert solution('512') == '4608 4096'\n"
    },
    {
        "number": 324,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('512') == '4608 4096'\nassert solution('1024') == '1024 1024'\nassert solution('10') == '1 1'\nassert solution('50') == '37 1'\nassert solution('4') == '2 2'\n"
    },
    {
        "number": 324,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1') == ''\nassert solution('2') == '1 2'\nassert solution('3') == '1 3'\nassert solution('4') == '1 4'\n"
    },
    {
        "number": 324,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(input()) == output(input())\n"
    },
    {
        "number": 324,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1') == '1 1'\nassert solution('123456789') == '45 8191'\nassert solution('1234567890') == '45 8191'\nassert solution('1234567890ABCDEF') == '45 8191'\n"
    },
    {
        "number": 324,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(input()) == output()\n"
    },
    {
        "number": 325,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\n'''3 3 10\n1 2 20\n2 3 30\n1 3 45'''\n    ) == '35'\n\nassert solution(\n'''3 3 10\n1 2 20\n2 3 30\n1 3 45'''\n    ) == '35'\n"
    },
    {
        "number": 325,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('3 3 10\\n1 2 20\\n2 3 30\\n1 3 45') == '35'\nassert solution('2 2 100\\n1 2 100\\n1 2 100') == '-1'\nassert solution('4 10 10\\n1 3 10\\n1 2 20\\n1 3 50\\n2 4 40\\n3 4 30\\n1 3 50\\n1 2 50') == '130'\nassert solution('4 10 10\\n1 2 10\\n1 3 50\\n1 2 10\\n2 4 50\\n3 4 30\\n1 3 50\\n1 2 50') == '130'\nassert solution('4 10 10\\n1 2 10\\n1 3 50\\n1 2 10\\n2 4 50\\n3 4 30\\n1 3 50\\n1 2 50') == '130'\n"
    },
    {
        "number": 325,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('3 3 10') == '35'\nassert solution('5 5 1') == '-1'\nassert solution('2 1 3') == '0'\nassert solution('3 2 15') == '0'\nassert solution('1 1 1') == '0'\n"
    },
    {
        "number": 325,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\n'''3 3 10\n1 2 20\n2 3 30\n1 3 45'''\n) == '35'\n\nassert solution(\n'''7 7 100\n1 2 3 4 5 6 7\n1 2 3 4 5 6 7\n1 2 3 4 5 6 7\n1 2 3 4 5 6 7\n1 2 3 4 5 6 7\n1 2 3 4 5 6 7\n1 2 3 4 5 6 7'''\n) == '280'\n\nassert solution(\n'''1 2 3\n4 5 6\n1 2 3'''\n) == '-1'"
    },
    {
        "number": 325,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdin\n\"\"\""
    },
    {
        "number": 325,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"3 3 10\\n1 2 20\\n2 3 30\\n1 3 45\") == 35\nassert solution(\"1 2 10\\n2 3 10\\n1 3 10\") == -1\nassert solution(\"3 3 10\\n1 2 100\\n2 3 100\\n1 3 100\") == -1\nassert solution(\"1 2 10\\n2 3 10\\n1 3 10\") == -1\nassert solution(\"2 3 10\\n1 2 10\\n2 3 10\\n1 3 10\") == -1\n"
    },
    {
        "number": 325,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''3 3 10\n1 2 20\n2 3 30\n1 3 45''') == '35'\nassert solution('''3 2 10\n1 2 20\n2 3 30\n1 3 45''') == '-1'\nassert solution('''8 3 100\n1 2 10\n2 3 5\n1 3 10\n3 4 25\n1 5 8\n1 6 7\n3 7 15\n''') == '49'\nassert solution('''8 3 100\n1 2 10\n2 3 5\n1 3 10\n3 4 25\n1 5 8\n1 6 7\n3 7 15\n1 7 40\n''') == '41'\nassert solution('''8 3 100\n1 2 10\n2 3 5\n1 3 10\n3 4 25\n1 5 8\n1 6 7\n3 7 15\n1 7 40\n1 7 40\n''') == '50'\n"
    },
    {
        "number": 325,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('3 2 10') == '35'\nassert solution('3 3 10') == '50'\nassert solution('3 3 10\\n1 2 20\\n2 3 30\\n1 3 45\\n') == '50'\nassert solution('3 3 10\\n1 2 20\\n2 3 30\\n1 3 45\\n') == '50'\nassert solution('3 3 10\\n1 2 20\\n2 3 30\\n1 3 45\\n1 2 10\\n2 3 50\\n1 3 60\\n2 3 70\\n1 3 80\\n1 2 90\\n2 3 100\\n1 3 110\\n2 3 120\\n1 3 130\\n2 3 140\\n1 3 150\\n2 3 160\\n1 3 170\\n2 3 180\\n1 3 190\\n2 3 200\\n1 3 210\\n2 3 220\\n1 3 230\\n2 3 240\\n1 3 250\\n2 3 260\\n1 3 270\\n2 3 280\\n1 3 290\\n2 3 300\\n1 3 310\\n2 3 320\\n1 3 330\\n2 3 340\\n1 3 350\\n2 3 360\\n1 3 370\\n2 3 380\\n1 3 390\\n2 3 400\\n1 3 410\\n2 3 420\\n1 3 430\\n2 3 440\\n1 3 450\\n2 3 460\\n1 3 470\\n2 3 480\\n1 3 490\\n2 3 500\\n1 3 510\\n2 3 520\\n1 3 530\\n2 3 540\\n1 3 550\\n2 3 560\\n1 3 570\\n2 3 580\\n1 3 590\\n2 3 600\\n1 3 610\\n2 3 620\\n1 3 630\\n2 3 640\\n1 3 650\\n2 3 660\\n1 3 670\\n2 3 680\\n1 3 690\\n2 3 700\\n1 3 710\\n2 3 720\\n1 3 730\\n2 3 740\\n1 3 750\\n2 3 760\\n1 3 770\\n2 3 780\\n1 3 790\\n2 3 800\\n1 3 810\\n2 3 820\\n1 3 830\\n2 3 840\\n1 3 850\\n2 3 860\\n1 3 870\\n2 3 880\\n1 3 890\\n2 3 900\\n1 3 910\\n2 3 920\\n1 3 930\\n2 3 940\\n1 3 950\\n2 3 960\\n1 3 970\\n2 3 980\\n1 3 990\\n2 3 1000\\n1 4 1000\\n2 4 1000\\n1 4 1000\\n2 4 1000\\n1 4 1000\\n2 4 1000\\n1 4 1000\\n2 4 1000\\n1 4 1000\\n2 4 1000\\n1 4 1000\\n2 4 1000\\n1 4 1000\\n2 4 1000\\n1 4 1000\\n2 4 1000\\n1 4 1000\\n2 4 1000\\n1 4 1000\\n2 4 1000\\n1 4 1000\\n2 4 1000\\n1 4 1000\\n2 4 1000\\n1 4 1000\\n2 4 1000\\n1 4 1000\\n2 4 1000\\n1 4 1000\\n2 4 1000\\n1 4 1000\\n2 4 1000\\n1 4 1000\\n2 4 1000\\n1 4 1000\\n2 4 1000\\n1 4 1000\\n2 4 1000\\n1 4 1000\\n2 4 1000\\n1 4 1000\\n2 4 1000\\n1 4 1000\\n2 4 1000\\n1 4 1000\\n2 4 1000\\n1 4 1000\\n2 4 1000\\n1 4 1000\\n2 4 1000\\n1 4 1000\\n2 4 1000\\n1 4 1000\\n2 4 1000\\n1 4 1000\\n2 4 1000\\n1 4 1000\\n2 4 1000\\n1 4 1000\\n2 4 1000\\n1 4 1000\\n2 4 1000\\n1 4 1000\\n2 4 1000\\n1 4 1000\\n2 4 1000\\n1 4 1000\\n2 4 1000\\n1 4 1000\\n2 4 1000\\n1 4 1000\\n2 4 1000\\n1 4 1000\\n2 4 1000\\n1 4 1000\\n2 4 1000\\n1 4 1000\\n2 4 1000\\n1 4 1000\\n2 4 1000\\n1 4 1000\\n2 4 1000\\n1 4 1000\\n2 4 1000\\n1 4 1000\\n2 4 1000\\n1 4 1000\\n2 4 1000\\n1 4 1000\\n2 4 1000\\n1 4 1000\\n2 4 1000\\n1 4 1000\\n2 4 1000\\n1 4 1000\\n2 4 1000\\n1 4 1000\\n2 4 1000\\n1 4 1000\\n2 4 1000\\n1 4 1000\\n2 4 1000\\n1 4 1000\\n2 4 1000\\n1 4 1000\\n2 4 1000\\n1 4 1000\\n2 4 1000\\n1 4 1000\\n2 4 1000\\n1 4 1000\\n2 4 1000\\n1 4 1000\\n2 4 1000\\n1 4 1000\\n2 4 1000\\n1 4 1000\\n2 4 1000\\n1 4 1000\\n2 4 1000\\n1 4 1000\\n2 4 1000\\n1 4 1000\\n2 4 1000\\n1 4 1000\\n2 4 1000\\n1 4 1000\\n2 4 1000\\n1 4 1000\\n2 4 1000\\n1 4 1000\\n2 4 1000\\n1 4 1000\\n2 4 1000\\n1 4 1000\\n2 4 1000\\n1 4 1000\\n2 4 1000\\n1 4 1000\\n2 4 1000\\n1 4 1000\\n2 4 1000\\n1 4 1000\\n2 4 1000\\n1 4 1000\\n2 4 1000\\n1 4 1000\\n2 4 1000\\n1 4 1000\\n2 4 1000\\n1 4 1000\\n2 4 1000\\n1 4 1000\\"
    },
    {
        "number": 325,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"2 3 10\") == \"35\"\n\"\"\"\nfrom sys import stdin, stdout\nfrom collections import deque\n"
    },
    {
        "number": 325,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1 2 3') == '35'\nassert solution('1 2 3\\n1 2 10\\n1 3 10\\n2 1 10') == '35'\nassert solution('1 2 3\\n1 2 10\\n1 3 10\\n2 1 10\\n2 3 10\\n3 4 10') == '35'\nassert solution('1 2 3\\n1 2 10\\n1 3 10\\n2 1 10\\n2 3 10\\n3 4 10\\n4 5 10') == '35'\nassert solution('1 2 3\\n1 2 10\\n1 3 10\\n2 1 10\\n2 3 10\\n3 4 10\\n4 5 10\\n5 6 10') == '35'\n"
    },
    {
        "number": 326,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('ba 3\\nabc 4\\ncbaa 5\\n') == '7'\nassert solution('ba 3\\nabc 4\\ncbaa 5\\n') == '7'\nassert solution('ba 3\\nabc 4\\ncbaa 5\\n') == '7'\nassert solution('ba 3\\nabc 4\\ncbaa 5\\n') == '7'\nassert solution('ba 3\\nabc 4\\ncbaa 5\\n') == '7'\n"
    },
    {
        "number": 326,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''3\nba 3\nabc 4\ncbaa 5''') == '7'\nassert solution('''2\nba 3\nabc 4\ncbaa 5''') == '7'\nassert solution('''7\nba 3\nabc 4\ncbaa 5''') == '7'\nassert solution('''10\nba 3\nabc 4\ncbaa 5''') == '-1'\nassert solution('''50\ncbaa 10\nabcd 11\nefg 17\ndgcd 18\n''') == '38'\n"
    },
    {
        "number": 326,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('ba 3\\nabc 4\\ncbaa 5\\n') == '7'\n\n\"\"\""
    },
    {
        "number": 326,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''3\nba 3\nabc 4\ncbaa 5''') == '7'\nassert solution('''3\nabcd 5\neafd 6\nfaed 7''') == '10'\nassert solution('''3\nabcd 6\neafd 5\nfaed 4''') == '10'\nassert solution('''3\nabcd 5\neafd 6\nfaed 7''') == '-1'\nassert solution('''4\nabcd 4\neafd 6\nfaed 5\ngfed 4''') == '13'\n"
    },
    {
        "number": 326,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('ba 3\\nabc 4\\ncbaa 5\\n') == '7'\nassert solution('1\\n1\\n1\\n') == '-1'\nassert solution('2\\n1 1\\n') == '-1'\nassert solution('3\\n1 1\\n') == '-1'\nassert solution('4\\n1 1 1\\n') == '-1'\n"
    },
    {
        "number": 326,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1\\n1 1') == '1'\nassert solution('2\\n2 1') == '-1'\nassert solution('2\\n1 1') == '-1'\nassert solution('3\\n1 1') == '-1'\nassert solution('3\\n1 2') == '-1'\n"
    },
    {
        "number": 326,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"\") == -1\nassert solution(\"ba 3\") == 7\nassert solution(\"abc 4\") == 9\nassert solution(\"cbaa 5\") == 19\n"
    },
    {
        "number": 326,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdin\n\n\"\"\"\n\n\"\"\"\nA palindrome is a string that reads the same forwards and backwards.\nFor example, \"racecar\" is a palindrome.\n\nGiven a string, find the minimum cost to make that string a palindrome.\nThe cost of making the string a palindrome is the minimum cost to make a substring of the string a palindrome.\n\n------\n\n-----Algorithm-----\n\nThe idea is to use two pointers, left and right, to move through the string, and calculate the cost for making the string palindrome.\nIn order to find the substring palindrome, the cost for moving the left pointer to the next character is the minimum cost for making a palindrome substring.\nSimilarly, the cost for moving the right pointer to the next character is the minimum cost for making a palindrome substring.\n\nIf the current character is the same as the next character, the cost for moving the left and right pointers is the same.\nIf the current character is different from the next character, the cost for moving the left pointer to the next character is 1 + the cost for moving the right pointer to the next character.\nWe keep the minimum cost for moving the left and right pointers together, and add them together at the end.\n\n------\n\n------\n\n------\n\n------\n\n------\n\"\"\""
    },
    {
        "number": 326,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('ba 3\\nabc 4\\ncbaa 5') == 7\nassert solution('aba 3\\nabc 4\\nacbaa 5') == -1\nassert solution('aaa 3\\nabc 4\\nacbaa 5') == -1\nassert solution('baa 3\\nabc 4\\nacbaa 5') == -1\nassert solution('aba 3\\nabc 4\\nacbaa 5') == -1\n"
    },
    {
        "number": 326,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"ba 3\\nabc 4\\ncbaa 5\\n\") == \"7\"\nassert solution(\"ba\\ncba\\n\") == \"-1\"\nassert solution(\"ba\\ncba\\ncba\\n\") == \"7\"\nassert solution(\"ba\\ncba\\ncba\\n\") == \"-1\"\nassert solution(\"ba\\ncba\\ncba\\n\") == \"-1\"\n"
    },
    {
        "number": 327,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"4 3\") == \"7\"\nassert solution(\"6 6\") == \"7\"\nassert solution(\"1 2 3 4 5 6\") == \"7\"\nassert solution(\"4 6\") == \"7\"\nassert solution(\"7 9 8 10 7 5 3\") == \"7\"\n"
    },
    {
        "number": 327,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('1 2') == '7'\nassert solution('4 6') == '7'\nassert solution('6 6') == '7'\n"
    },
    {
        "number": 327,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == '7'\n"
    },
    {
        "number": 327,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('2 3\\n') == '7'\nassert solution('2 6\\n') == '7'\nassert solution('5 2\\n') == '7'\nassert solution('1000000000 3\\n') == '7'\nassert solution('1000000000 2\\n') == '7'\n"
    },
    {
        "number": 327,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 327,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"4 3\") == \"7\"\nassert solution(\"6 6\") == \"7\"\nassert solution(\"1 2\") == \"3\"\nassert solution(\"2 1\") == \"3\"\nassert solution(\"1 2 3 4 5\") == \"3\"\n"
    },
    {
        "number": 327,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''4 3''') == '7'\nassert solution('''6 6''') == '7'\nassert solution('''2 2''') == '2'\nassert solution('''2 3''') == '4'\nassert solution('''1 2''') == '3'\n"
    },
    {
        "number": 327,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('4 3') == '7'\nassert solution('6 6') == '7'\nassert solution('6 7') == '6'\nassert solution('7 7') == '7'\nassert solution('7 8') == '7'\n"
    },
    {
        "number": 327,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == 7\n\n\"\"\"\n\n###############################################################\n\"\"\"\nSolution:\n\"\"\""
    },
    {
        "number": 327,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('4 3') == '7'\nassert solution('6 6') == '7'\nassert solution('10 9') == '7'\nassert solution('9 11') == '7'\nassert solution('5 12') == '7'\n"
    },
    {
        "number": 328,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('4\\n1 1\\n1 2\\n2 1\\n2 2') == 4\nassert solution('3\\n1 1\\n1 2\\n2 1') == 3\nassert solution('5\\n1 1\\n1 2\\n2 1\\n3 1') == 5\nassert solution('5\\n1 1\\n1 2\\n2 1\\n4 1') == 5\n\"\"\""
    },
    {
        "number": 328,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdin\nprint(solution(stdin))\n\"\"\""
    },
    {
        "number": 328,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('4\\n1 1\\n1 2\\n2 1\\n2 2') == '4'\nassert solution('3\\n1 1\\n1 2\\n2 1') == '3'\nassert solution('5\\n1 1\\n1 2\\n2 1\\n1 2\\n1 2') == '4'\n\"\"\"\n"
    },
    {
        "number": 328,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('3\\n1 1\\n1 2\\n2 1') == 3\nassert solution('4\\n1 1\\n1 2\\n2 1\\n2 2') == 4\nassert solution('10\\n2 1\\n2 2\\n3 1\\n3 2\\n4 1\\n4 2\\n5 1\\n5 2') == 2\nassert solution('10\\n5 1\\n5 2\\n6 1\\n6 2\\n7 1\\n7 2\\n8 1\\n8 2') == 1\n\n\n'''\n"
    },
    {
        "number": 328,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == '4'\n\n\"\"\""
    },
    {
        "number": 328,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1\\n1\\n1\\n2\\n2\\n2\\n1\\n1\\n2\\n2\\n2\\n1') == '1'\nassert solution('2\\n1\\n1\\n2\\n2\\n2\\n1\\n1\\n2\\n2\\n2\\n1') == '4'\nassert solution('4\\n1 1\\n1 2\\n2 1\\n2 2\\n2 1\\n1 1\\n1 2\\n2 1\\n2 2\\n2 1') == '4'\nassert solution('6\\n1 1\\n1 2\\n2 1\\n2 2\\n2 1\\n1 1\\n1 2\\n2 1\\n2 2\\n2 1') == '6'\nassert solution('8\\n1 1\\n1 2\\n2 1\\n2 2\\n2 1\\n1 1\\n1 2\\n2 1\\n2 2\\n2 1') == '6'\n"
    },
    {
        "number": 328,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('3') == 3\nassert solution('4') == 4\nassert solution('3\\n1 1\\n1 2\\n2 1') == 3\nassert solution('2\\n1 1\\n2 1') == 2\nassert solution('2\\n1 1\\n1 2\\n2 1') == 2\n"
    },
    {
        "number": 328,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 328,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1 1\") == \"\"\nassert solution(\"1 2\") == \"\"\nassert solution(\"2 1\") == \"\"\nassert solution(\"2 2\") == \"\"\n"
    },
    {
        "number": 328,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\n    \"\"\"3\n1 1\n1 2\n2 1\"\"\"\n) == 3\nassert solution(\n    \"\"\"4\n1 1\n1 2\n2 1\n2 2\"\"\"\n) == 4\nassert solution(\n    \"\"\"5\n1 1\n1 2\n2 1\n2 2\n2 3\"\"\"\n) == 4\nassert solution(\n    \"\"\"6\n1 1\n1 2\n2 1\n2 2\n2 3\n2 4\"\"\"\n) == 5\nassert solution(\n    \"\"\"7\n1 1\n1 2\n2 1\n2 2\n2 3\n2 4\n2 5\"\"\"\n) == 5\n"
    },
    {
        "number": 329,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"nineteenineteen\") == 2\nassert solution(\"nneteenabcnneteenabcnneteenabcnneteenabcnneteenabcii\") == 2\nassert solution(\"nniinneetteeeenn\") == 2\nassert solution(\"nineteenineteen\") == 2\nassert solution(\"nneteenabcnneteenabcnneteenabcnneteenabcnneteenabcii\") == 2\n"
    },
    {
        "number": 329,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\n'''\nnineteenineteen\n''') == 2\nassert solution(\n'''\nnneteenabcnneteenabcnneteenabcnneteenabcnneteenabcii\n''') == 2\nassert solution(\n'''\nnineteenineteen\n''') == 2\n"
    },
    {
        "number": 329,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"nineteenineteen\") == 2\nassert solution(\"nneteenabcnneteenabcnneteenabcnneteenabcnneteenabcii\") == 2\nassert solution(\"nniinneetteeeenn\") == 2\nassert solution(\"nneteenabcnneteenabcnneteenabcnneteenabcnneteenabcii\") == 2\nassert solution(\"nineteenineteen\") == 2\n"
    },
    {
        "number": 329,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"nineteenineteen\") == 2\nassert solution(\"nneteenabcnneteenabcnneteenabcnneteenabcnneteenabcii\") == 2\nassert solution(\"nniinneetteeeenn\") == 2\nassert solution(\"nneteenabcnneteenabcnneteenabcnneteenabcnneteenabcii\") == 2\nassert solution(\"nneteenabcnneteenabcnneteenabcnneteenabcnneteenabcii\") == 2\n"
    },
    {
        "number": 329,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 329,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('nineteenineteen') == 2\nassert solution('nneteenabcnneteenabcnneteenabcnneteenabcnneteenabcii') == 2\nassert solution('nniinneetteeeenn') == 2\nassert solution('nneteenabcnneteenabcnneteenabcnneteenabcnneteenabcii') == 2\nassert solution('nineteenineteen') == 2\n"
    },
    {
        "number": 329,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('nineteenineteen') == 2\nassert solution('nniinneetteeeenn') == 2\nassert solution('nneteenabcnneteenabcnneteenabcnneteenabcnneteenabcii') == 2\nassert solution('nineteenineteen') == 2\n"
    },
    {
        "number": 329,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('') == 0\nassert solution('nineteenineteen') == 2\nassert solution('nneteenabcnneteenabcnneteenabcnneteenabcnneteenabcii') == 2\nassert solution('nniinneetteeeenn') == 2\nassert solution('nineteenineteen') == 2\n"
    },
    {
        "number": 329,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\n\"nniinneetteeeenn\"\n) == 2\nassert solution(\n\"nneteenabcnneteenabcnneteenabcnneteenabcnneteenabcii\"\n) == 2\nassert solution(\n\"nineteenineteen\"\n) == 2\nassert solution(\n\"nineteen\"\n) == 1\n\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 329,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('nniinneetteeeenn') == '2'\nassert solution('nneteenabcnneteenabcnneteenabcnneteenabcnneteenabcii') == '2'\nassert solution('nineteenineteen') == '2'\nprint(\"all tests passed successfully\")\n"
    },
    {
        "number": 330,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\n    '''3 6'''\n) == '5'\n\nassert solution(\n    '''3 4'''\n) == '-1'\n'''\n\nThe idea of the problem is to find the highest branch that cannot be reached by any of the grasshoppers.\nIn the example the highest branch that cannot be reached is the branch y.\nIn case we start from the branch y, we can reach branch y+1 and beyond by jumping y+1.\nThe rest of the branches cannot be reached by the grasshopper.\n\nBy the pigeonhole principle, each branch in the graph is connected to the others by one path.\nFor each branch, we can calculate the number of hops that can be reached by a grasshopper.\nThe number of hops for a branch is the number of branches that are not visited by the grasshopper.\nIn the previous example, the number of hops for the branch y is y-1.\nTo reach branch y we would have to jump 1 more than the number of hops for the previous branch.\nThis can be done by jumping 1 more than the number of hops for the previous branch plus the number of hops for the previous branch plus 1.\n\nIf the number of hops is zero, we can reach that branch.\nIf the number of hops is greater than zero, we cannot reach that branch.\nThe number of hops for y is y-1 plus y+1.\nThis means that the number of hops for y is y+1.\n\nTo reach the last branch, we would have to jump y+1 times (since every branch in the graph is connected to the previous one).\n\nTo solve the problem we will use the greedy approach.\nGiven the number of hops for each branch, we want to find the highest number of hops that cannot be reached by a grasshopper.\nStarting with the branch that is not visited by any of the grasshoppers, we will jump through each branch in order until we reach the branch that cannot be reached by any of the grasshoppers.\n\nEach time we will jump to the next branch. If the branch cannot be reached by any of the grasshoppers, we will use the greedy approach again.\n\nWe will stop when we reach a branch that cannot be reached by any of the grasshoppers.\n\nTime complexity: O(n)\nSpace complexity: O(n)\n\n'''\n"
    },
    {
        "number": 330,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 330,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == ''\n\n'''\n"
    },
    {
        "number": 330,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('3 6') == '5'\nassert solution('3 4') == '-1'\nassert solution('3 2') == '-1'\nassert solution('3 3') == '-1'\nassert solution('3 5') == '-1'\n"
    },
    {
        "number": 330,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdin\n\"\"\"\nfrom math import floor"
    },
    {
        "number": 330,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdin\n\"\"\"\nfrom __future__ import annotations\n\nimport sys\n\nsys.setrecursionlimit(100000)\n"
    },
    {
        "number": 330,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == expected\n\n\n\n\n\"\"\"\n\n\"\"\"\n\nSolution:\n\nWe can use a breadth-first search (BFS) to find the first suitable branch.\nFirst, we need to initialize the data structures for both:\n- The set of visited nodes (BFS)\n- The children of each visited node (BFS)\n- The position of each visited node (BFS)\n\nTo start, we need to initialize a queue with the root node and enqueue it. We also need to mark the root node as visited.\n\nNext, we can dequeue the root node and mark it as visited. If it has no children, we can report the result.\n\nTo mark the current node as visited, we just remove it from the queue and add it to the visited set. If it has children, we add them to the queue and to the visited set.\n\nFinally, we need to mark the current node as visited and add all of its children to the visited set.\n\nWe can do this in O(1) time since we're only using a queue and a visited set, and O(n) space, where n is the number of nodes in the tree, as we need to store all the nodes.\n\n\"\"\""
    },
    {
        "number": 330,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(input()) == '5'\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 330,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('3 6') == '5'\nassert solution('3 4') == '-1'\n\n\n\n\n'''\n"
    },
    {
        "number": 330,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('2 4') == '-1'\nassert solution('1 2') == '2'\nassert solution('2 3') == '2'\nassert solution('1 2') == '2'\nassert solution('3 4') == '-1'\n"
    },
    {
        "number": 331,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 331,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == result, \"Check your solution\"\n\n\n-----Best Practice----"
    },
    {
        "number": 331,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(input()) == output\n\n\"\"\""
    },
    {
        "number": 331,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''5 1 20\n0 27 32 21 19''') == '40'\nassert solution('''7 3 50\n62 0 0 0 99 33 22''') == '30'\nassert solution('''10 5 100\n1 0 1 0 0 0 0 0 1 1''') == '20'\n\n'''"
    },
    {
        "number": 331,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''5 1 20\n0 27 32 21 19\n''') == '40'\n\nassert solution('''7 3 50\n62 0 0 0 99 33 22\n''') == '30'\n\nassert solution('''10 5 100\n1 0 1 0 0 0 0 0 1 1\n''') == '20'\n\nassert solution('''5 1 20\n1 0 1 0 0 0 0 0 1 1\n''') == '40'\n\nassert solution('''7 3 50\n62 0 0 0 99 33 22\n''') == '30'"
    },
    {
        "number": 331,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 331,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"5 1 20\\n0 27 32 21 19\") == \"40\"\nassert solution(\"7 3 50\\n62 0 0 0 99 33 22\") == \"30\"\nassert solution(\"10 5 100\\n1 0 1 0 0 0 0 0 1 1\") == \"20\"\n"
    },
    {
        "number": 331,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"7 3 50\") == \"30\"\nassert solution(\"10 5 100\") == \"20\"\nassert solution(\"5 1 20\") == \"40\"\n"
    },
    {
        "number": 331,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == \"\"\"\"\"\"\n\n\"\"\"\nfrom sys import stdin, stdout\n\nn, m, k = list(map(int, stdin.readline().split()))\n\nl = list(map(int, stdin.readline().split()))"
    },
    {
        "number": 331,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('5 1 20') == '40'\nassert solution('7 3 50') == '30'\nassert solution('10 5 100') == '20'\nassert solution('0 0 0 0 0 0 0 0 0 0') == '0'\nassert solution('1 0 1 0 0 0 0 0 1 1') == '20'\n"
    },
    {
        "number": 332,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(input()) == \"YES\"\n\"\"\""
    },
    {
        "number": 332,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n"
    },
    {
        "number": 332,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''2 2\n1 1\n6 1\n1 6''') == 'YES'\nassert solution('''2 2\n4 4\n4 5\n5 4\n4 4''') == 'NO'\nassert solution('''3 3\n1 2 3\n4 5 6\n7 8 9\n1 4 7\n2 5 6\n3 8 9''') == 'YES'\n\n'''\n\n'''"
    },
    {
        "number": 332,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''2 2''') == 'YES'\nassert solution('''3 3''') == 'NO'\nassert solution('''3 3''') == 'YES'\nassert solution('''4 4''') == 'NO'\nassert solution('''3 3''') == 'YES'\n"
    },
    {
        "number": 332,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''2 2''') == 'YES'\nassert solution('''2 2\n1 1\n6 1\n1 6''') == 'YES'\nassert solution('''3 3\n1 2 3\n4 5 6\n7 8 9\n1 4 7\n2 5 6\n3 8 9''') == 'YES'\nassert solution('''2 2\n1 1\n6 1\n1 6''') == 'NO'\nassert solution('''3 3\n1 2 3\n4 5 6\n7 8 9\n1 4 7\n2 5 6\n3 8 9''') == 'NO'\n"
    },
    {
        "number": 332,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''2 2\n1 1\n6 1\n1 6\n1 1\n''') == 'YES'\nassert solution('''2 2\n4 4\n4 5\n5 4\n4 4\n''') == 'NO'\nassert solution('''3 3\n1 2 3\n4 5 6\n7 8 9\n1 4 7\n2 5 6\n3 8 9\n''') == 'YES'\nassert solution('''3 3\n1 2 3\n4 5 6\n7 8 9\n1 4 7\n2 5 6\n3 8 9\n''') == 'NO'\nassert solution('''4 4\n1 2 3 4\n5 6 7 8\n9 10 11 12\n13 14 15 16\n17 18 19 20\n21 22 23 24\n25 26 27 28\n29 30 31 32\n''') == 'YES'\n"
    },
    {
        "number": 332,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == 'YES'\n\n\"\"\"\n"
    },
    {
        "number": 332,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('2 2') == 'YES'\nassert solution('2 2') == 'YES'\nassert solution('3 3') == 'NO'\nassert solution('2 2') == 'YES'\nassert solution('3 3') == 'NO'\n"
    },
    {
        "number": 332,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"2 2\") == \"YES\"\nassert solution(\"2 2\") == \"YES\"\nassert solution(\"3 3\") == \"NO\"\nassert solution(\"4 3\") == \"NO\"\nassert solution(\"3 4\") == \"YES\"\n"
    },
    {
        "number": 332,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('2 2') == 'YES'\nassert solution('3 3') == 'YES'\nassert solution('2 2') == 'NO'\nassert solution('3 3') == 'NO'\nassert solution('1 1') == 'YES'\n"
    },
    {
        "number": 333,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('abcd') == '5'\nassert solution('defgh') == '-1'\nassert solution('a') == '-1'\nassert solution('a') == '-1'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 333,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('abcd', 'defgh') == 5\nassert solution('a', 'a') == -1\n\nprint('all tests passed successfully')\n"
    },
    {
        "number": 333,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('abcd\\ndefgh') == '5'\nassert solution('a\\na') == '-1'\n\n\n\"\"\""
    },
    {
        "number": 333,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('a') == '-1'\nassert solution('ab') == '1'\nassert solution('aab') == '2'\nassert solution('abac') == '3'\nassert solution('aabac') == '4'\n"
    },
    {
        "number": 333,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('') == '-1'\nassert solution('a') == '-1'\nassert solution('abcd') == '5'\nassert solution('abcd') == '5'\nassert solution('abc') == '-1'\n"
    },
    {
        "number": 333,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"abcd\") == \"5\"\nassert solution(\"defgh\") == \"-1\"\nassert solution(\"a\") == \"1\"\nassert solution(\"a\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 333,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('abcd\\nabc') == '-1'\nassert solution('abc\\na') == '1'\nassert solution('abc\\nb') == '2'\nassert solution('abc\\nc') == '2'\nassert solution('abc\\nd') == '2'\n"
    },
    {
        "number": 333,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('abcd', 'defgh') == 5\nassert solution('a', 'a') == -1\nassert solution('abcd', 'a') == -1\nassert solution('', '') == -1\nassert solution('', 'a') == -1\n"
    },
    {
        "number": 333,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('abcd\\ndefgh') == '5'\nassert solution('a\\na') == '-1'\nassert solution('a\\na\\n') == '-1'\nassert solution('\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na"
    },
    {
        "number": 333,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('abcd') == '-1'\nassert solution('defgh') == '5'\nassert solution('a') == '-1'\nassert solution('aa') == '-1'\nassert solution('bbb') == '-1'\n\n\n\n\"\"\""
    },
    {
        "number": 334,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('2 1\\n9 19') == '82'\nassert solution('20 2\\n9 19') == '-1'\nassert solution('2 1\\n16 12') == '82'\nassert solution('2 1\\n16 19') == '-1'\nassert solution('2 1\\n9 19\\n16 19') == '-1'\n"
    },
    {
        "number": 334,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('20 2\\n9 19\\n') == '82'\nassert solution('2 1\\n16 12\\n') == '-1'"
    },
    {
        "number": 334,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('20 2\\n9 19\\n') == '82'\nassert solution('2 1\\n16 12\\n') == '-1'\nassert solution('21 22\\n6 8\\n') == '22'\nassert solution('21 22\\n6 8\\n') == '22'\nassert solution('20 2\\n9 19\\n') == '82'\n"
    },
    {
        "number": 334,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('20 2\\n9 19\\n') == '82'\nassert solution('2 1\\n16 12\\n') == '-1'\n\n'''\n"
    },
    {
        "number": 334,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(input) == expected_output\n\n'''"
    },
    {
        "number": 334,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('2 1') == '-1'\nassert solution('20 2') == '82'\nassert solution('9 19') == '-1'\nassert solution('16 12') == '-1'\n\"\"\""
    },
    {
        "number": 334,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('2 1\\n9 19') == '82'\nassert solution('2 1\\n16 12') == '-1'\nassert solution('5 2\\n9 19') == '25'\nassert solution('5 2\\n16 12') == '-1'\nassert solution('4 3\\n9 19') == '28'\n"
    },
    {
        "number": 334,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 334,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('10 11') == 22\nassert solution('1 2') == -1\nassert solution('0 1') == -1\nassert solution('0 2') == 1\nassert solution('100 100') == 1\n"
    },
    {
        "number": 334,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == ''\n"
    },
    {
        "number": 335,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('3') == '1 1 1'\nassert solution('233') == '77 77 79'\nassert solution('233333') == '77 77 79'\nassert solution('23344') == '77 77 79'\n"
    },
    {
        "number": 335,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('3') == \"1 1 1\"\nassert solution('233') == \"77 77 79\"\nassert solution('333') == \"77 77 79\"\nassert solution('33333') == \"7777\"\nassert solution('33322') == \"7777\"\n"
    },
    {
        "number": 335,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('3') == '1 1 1'\nassert solution('233') == '77 77 79'\nassert solution('233') == '77 77 79'\nassert solution('233') == '77 77 79'\n"
    },
    {
        "number": 335,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(input()) == output()\n\nInput\n3\nOutput\n1 1 1\nInput\n233\nOutput\n77 77 79\n\nassert solution(input()) == output()\n\"\"\"\n"
    },
    {
        "number": 335,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(input()) == '77 77 79'"
    },
    {
        "number": 335,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('233') == '77 77 79'\nassert solution('3') == '1 1 1'\nassert solution('123') == '1 2 3'\nassert solution('124') == '1 2 4'\nassert solution('1234') == '1 2 3 4'\n"
    },
    {
        "number": 335,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"1 1 1\"\nassert solution(\"3\") == \"77 77 79\"\nassert solution(\"233\") == \"77 77 79\"\nassert solution(\"233\") == \"77 79 79\"\nassert solution(\"2333\") == \"77 77 79\"\n"
    },
    {
        "number": 335,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(input()) == '77 77 79'\n\nsolution = lambda stdin:''.join(map(str, [2, 3, 5, 7, 11][:int(stdin) % 5]))\n"
    },
    {
        "number": 335,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(3) == \"1 1 1\"\nassert solution(233) == \"77 77 79\"\nassert solution(9) == \"11 11 13\"\nassert solution(9) == \"13 11 13\"\nassert solution(27) == \"11 11 11\"\n"
    },
    {
        "number": 335,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('3') == \"1 1 1\"\nassert solution('233') == \"77 77 79\"\nassert solution('4') == \"4 4 4\"\nassert solution('5') == \"1 1 1\"\nassert solution('6') == \"4 1 2\"\n"
    },
    {
        "number": 336,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(input) == output"
    },
    {
        "number": 336,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"2 1 1 1 2\") == \"2\"\nassert solution(\"3 3 1 2 3\") == \"6\"\nassert solution(\"3 3 1 2 3\") == \"6\"\nassert solution(\"3 3 1 2 3\") == \"6\"\nassert solution(\"3 3 1 2 3\") == \"6\"\n"
    },
    {
        "number": 336,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == '4'\nassert solution(stdin) == '0'\nassert solution(stdin) == '4'\nassert solution(stdin) == '3'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 336,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == \"6\"\n\nassert solution(stdin) == \"6\"\n\nassert solution(stdin) == \"6\"\n"
    },
    {
        "number": 336,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('2 1 1 1 2') == 2\nassert solution('3 3 1 2 3') == 6\nassert solution('2 1 1 1 2') == 2\nassert solution('3 3 1 2 3') == 6\nassert solution('2 1 1 1 2') == 2\n"
    },
    {
        "number": 336,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"1 2 1 1 2\") == \"2\"\nassert solution(\"3 3 1 2 3\") == \"6\"\nassert solution(\"3 3 1 2 3\") == \"6\"\n\n\n-----Solution-----\n\nFirst, we get the maximum possible value in the cell by creating the maximum length of the sides.\n\nFrom the maximum length, we can derive the maximum possible sum of four squares.\n\nThe sum of four squares is equal to the sum of the first two cells. Therefore, we can create a set of all possible sums, sorted, and use two pointers to find out the first difference.\n\nWe should not use the four cells that cannot satisfy the condition."
    },
    {
        "number": 336,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('2 1 1 1 2') == '2'\nassert solution('3 3 1 2 3') == '6'\nassert solution('1 2 1 2 2') == '2'\nassert solution('3 1 1 1 2') == '2'\nassert solution('1 2 1 2 2') == '2'\n"
    },
    {
        "number": 336,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\n'''\n2 1 1 1 2\n''') == '2'\n\nassert solution(\n'''\n3 3 1 2 3\n''') == '6'\nassert solution(\n'''\n2 1 1 1 2\n''') == '2'\nassert solution(\n'''\n3 3 1 2 3\n''') == '6'\nassert solution(\n'''\n2 1 1 1 2\n''') == '2'\n"
    },
    {
        "number": 336,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"1 1 1 1 2\\n2 1 1 1 2\\n3 1 1 1 2\\n3 3 1 2 3\\n3 3 1 2 3\\n2 1 1 1 2\\n1 1 1 1 2\\n2 1 1 1 2\\n3 1 1 1 2\\n3 3 1 2 3\\n3 3 1 2 3\\n2 1 1 1 2\\n1 1 1 1 2\\n2 1 1 1 2\\n3 1 1 1 2\\n3 3 1 2 3\\n3 3 1 2 3\") == \"2\"\nassert solution(\"1 1 1 1 2\\n2 1 1 1 2\\n3 1 1 1 2\\n3 3 1 2 3\\n3 3 1 2 3\\n2 1 1 1 2\\n3 3 1 2 3\\n3 3 1 2 3\\n2 1 1 1 2\\n3 3 1 2 3\\n3 3 1 2 3\\n2 1 1 1 2\\n3 3 1 2 3\\n3 3 1 2 3\\n2 1 1 1 2\\n3 3 1 2 3\\n3 3 1 2 3\\n2 1 1 1 2\\n3 3 1 2 3\\n3 3 1 2 3\\n2 1 1 1 2\\n3 3 1 2 3\\n3 3 1 2 3\\n2 1 1 1 2\\n3 3 1 2 3\\n3 3 1 2 3\\n2 1 1 1 2\\n3 3 1 2 3\\n3 3 1 2 3\\n2 1 1 1 2\\n3 3 1 2 3\\n3 3 1 2 3\\n2 1 1 1 2\\n3 3 1 2 3\\n3 3 1 2 3\\n2 1 1 1 2\\n3 3 1 2 3\\n3 3 1 2 3\\n2 1 1 1 2\\n3 3 1 2 3\\n3 3 1 2 3\\n2 1 1 1 2\\n3 3 1 2 3\\n3 3 1 2 3\\n2 1 1 1 2\\n3 3 1 2 3\\n3 3 1 2 3\\n2 1 1 1 2\\n3 3 1 2 3\\n3 3 1 2 3\\n2 1 1 1 2\\n3 3 1 2 3\\n3 3 1 2 3\\n2 1 1 1 2\\n3 3 1 2 3\\n3 3 1 2 3\\n2 1 1 1 2\\n3 3 1 2 3\\n3 3 1 2 3\\n2 1 1 1 2\\n3 3 1 2 3\\n3 3 1 2 3\\n2 1 1 1 2\\n3 3 1 2 3\\n3 3 1 2 3\\n2 1 1 1 2\\n3 3 1 2 3\\n3 3 1 2 3\\n2 1 1 1 2\\n3 3 1 2 3\\n3 3 1 2 3\\n2 1 1 1 2\\n3 3 1 2 3\\n3 3 1 2 3\\n2 1 1 1 2\\n3 3 1 2 3\\n3 3 1 2 3\\n2 1 1 1 2\\n3 3 1 2 3\\n3 3 1 2 3\\n2 1 1 1 2\\n3 3 1 2 3\\n3 3 1 2 3\\n2 1 1 1 2\\n3 3 1 2 3\\n3 3 1 2 3\\n2 1 1 1 2\\n3 3 1 2 3\\n3 3 1 2 3\\n2 1 1 1 2\\n3 3 1 2 3\\n3 3 1 2 3\\n2 1 1 1 2\\n3 3 1 2 3\\n3 3 1 2 3\\n2 1 1 1 2\\n3 3 1 2 3\\n3 3 1 2 3\") == \"6\"\n\nassert solution(\"1 1 1 1 2\\n2 1 1 1 2\\n3 1 1 1 2\\n3 3 1 2 3\\n3 3 1 2 3\\n2 1 1 1 2\\n3 3 1 2 3\\n3 3 1 2 3\\n2 1 1 1 2\\n3 3 1 2 3\\n3 3 1 2 3\\n2 1 1 1 2\\n3 3 1 2 3\\n3 3 1 2 3\\n2 1 1 1 2\\n3 3 1 2 3\\n3 3 1 2 3\\n2 1 1 1 2\\n3 3 1 2 3\\n3 3 1 2 3\\n2 1 1 1 2\\n3 3 1 2 3\\n3 3 1 2 3\\n2 1 1 1 2\\n3 3 1 2 3\\n3 3 1 2 3\\n2 1 1 1 2\\n3 3 1 2 3\\n3 3 1 2 3\\n2 1 1 1 2\\n3 3 1 2 3\\n3 3 1 2 3\\n2 1 1 1 2\\n3 3 1 2 3\\n3 3 1 2 3\\n2 1 1 1 2\\n3 3 1"
    },
    {
        "number": 336,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('2 1 1 1 2') == '2'\nassert solution('3 3 1 2 3') == '6'\nassert solution('2 2 1 1 2') == '1'\nassert solution('3 3 1 2 3') == '6'\nassert solution('2 2 1 1 2') == '0'\n"
    },
    {
        "number": 337,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == '4'\n\n\"\"\"\n\n\"\"\"\nTLE.\n\"\"\"\n"
    },
    {
        "number": 337,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\n    '4 3\\n1 1\\n1 2\\n'\n) == '8'\nassert solution(\n    '4 3\\n9 2\\n0 1\\n'\n) == '1'\n\n'''\n"
    },
    {
        "number": 337,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"1 2\") == \"1\"\nassert solution(\"1 2 1 2\") == \"1\"\nassert solution(\"4 3\") == \"8\"\nassert solution(\"4 3 1 2\") == \"1\"\nassert solution(\"9 2 0 1\") == \"1\"\n"
    },
    {
        "number": 337,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('3 2') == '1'\nassert solution('4 3') == '8'\nassert solution('9 2') == '1'\nassert solution('4 3') == '1'\nassert solution('10 3') == '0'\n"
    },
    {
        "number": 337,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('4 3') == '8'\nassert solution('3 3') == '1'\nassert solution('6 5') == '4'\nassert solution('10 9') == '5'\nassert solution('5 3') == '1'\n"
    },
    {
        "number": 337,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdin"
    },
    {
        "number": 337,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('4 3\\n1 1\\n1 2\\n') == '8'\nassert solution('5 4\\n9 2\\n0 1\\n') == '1'\nassert solution('10 4\\n9 2\\n0 1\\n') == '10'\nassert solution('15 4\\n9 2\\n0 1\\n') == '15'\nassert solution('5 7\\n9 2\\n0 1\\n') == '7'\n"
    },
    {
        "number": 337,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"4 3\\n1 1\\n1 2\\n\") == \"8\"\nassert solution(\"1 1\\n1 2\\n\") == \"1\"\nassert solution(\"4 3\\n9 2\\n0 1\\n\") == \"1\"\nassert solution(\"2 3\\n5 1\\n1 2\\n\") == \"1\"\nassert solution(\"7 5\\n1 1\\n1 2\\n\") == \"8\"\n"
    },
    {
        "number": 337,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''4 3''') == '8'\nassert solution('''4 3''') == '1'\nassert solution('''4 3''') == '1'\nassert solution('''8 2''') == '1'\nassert solution('''7 7''') == '8'\n"
    },
    {
        "number": 337,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(input()) == '8'\nassert solution(input()) == '1'\nassert solution(input()) == '0'\n"
    },
    {
        "number": 338,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1\\n2\\n2\\n') == 0\nassert solution('3\\n2\\n3\\n') == 0\nassert solution('2\\n2\\n3\\n') == 0\nassert solution('2\\n3\\n2\\n') == 0\nassert solution('2\\n3\\n3\\n') == 0\n"
    },
    {
        "number": 338,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"3\\n6 4 5 2 1\") == \"3\"\nassert solution(\"3\\n2 10\") == \"0\"\nassert solution(\"4\\n6 8 7 5 3\") == \"4\"\nassert solution(\"2\\n2 5\") == \"0\"\nassert solution(\"5\\n3 4 3 2 1\") == \"3\"\n"
    },
    {
        "number": 338,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('') == 0\nassert solution('1 2 3 4') == 0\nassert solution('1 2 3 4 5') == 0\nassert solution('1 2 3 4 5 6') == 0\nassert solution('1 2 3 4 5 6 7') == 0\n"
    },
    {
        "number": 338,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"3\"\nassert solution(\"5\") == \"4\"\n"
    },
    {
        "number": 338,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('5\\n3 4 3 2 1\\n6 8') == '3'\nassert solution('5\\n0 3 3 4 2\\n3 10') == '4'\nassert solution('2\\n2 5\\n3 6\\n') == '0'\nassert solution('2\\n0 5\\n3 6\\n') == '0'\n"
    },
    {
        "number": 338,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('3 4 3 2 1') == '3'\nassert solution('6 8') == '0'\nassert solution('2 5') == '0'\nassert solution('6 5') == '0'\nassert solution('6 3') == '3'\n"
    },
    {
        "number": 338,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('2\\n2\\n1') == '1'\nassert solution('3\\n2\\n1') == '2'\nassert solution('1\\n1\\n1') == '1'\nassert solution('1\\n1\\n1') == '0'\nassert solution('2\\n2\\n2') == '0'\n"
    },
    {
        "number": 338,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1\\n1') == '0'\nassert solution('2\\n3') == '1'\nassert solution('2\\n3\\n1') == '1'\nassert solution('2\\n3\\n4') == '2'\nassert solution('3\\n2\\n1') == '1'\n"
    },
    {
        "number": 338,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 338,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1\\n2\\n1') == '1'\nassert solution('2\\n1\\n1') == '1'\nassert solution('1\\n1\\n1\\n1\\n1') == '1'\nassert solution('1\\n1\\n1\\n1\\n1\\n1') == '1'\nassert solution('1\\n1\\n1\\n1\\n1\\n1\\n1') == '1'\n"
    },
    {
        "number": 339,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('9\\n2\\n3\\n1') == '6'\nassert solution('5\\n5\\n2\\n20') == '8'\nassert solution('19\\n3\\n4\\n2') == '12'\n\"\"\"\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport sys"
    },
    {
        "number": 339,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"0\"\nassert solution(\"1\\n1\") == \"0\"\nassert solution(\"1\\n1\\n1\") == \"0\"\nassert solution(\"1\\n1\\n1\\n1\") == \"0\"\n"
    },
    {
        "number": 339,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1\\n1\\n1\\n1') == '4'\nassert solution('9\\n2\\n3\\n1\\n') == '6'\nassert solution('19\\n3\\n4\\n2\\n') == '12'\n"
    },
    {
        "number": 339,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"9\\n2\\n3\\n1\") == '6'\nassert solution(\"5\\n5\\n2\\n20\\n\") == '8'\nassert solution(\"19\\n3\\n4\\n2\\n\") == '12'\n\n\n\"\"\""
    },
    {
        "number": 339,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''\n9\n2\n3\n1\n''') == '6'\n\nassert solution('''\n5\n5\n2\n20\n''') == '8'\n\nassert solution('''\n19\n3\n4\n2\n''') == '12'\n"
    },
    {
        "number": 339,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\n'''\n9\n2\n3\n1\n'''\n) == '6'\n\nassert solution(\n'''\n5\n5\n2\n20\n'''\n) == '8'\n"
    },
    {
        "number": 339,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('9\\n2\\n3\\n1') == '6'\nassert solution('5\\n5\\n2\\n20') == '8'\nassert solution('19\\n3\\n4\\n2') == '12'\n\"\"\""
    },
    {
        "number": 339,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1\\n1\\n1\\n1\") == \"3\"\nassert solution(\"9\\n2\\n3\\n1\\n1\") == \"6\"\nassert solution(\"19\\n3\\n4\\n2\\n2\") == \"12\"\nassert solution(\"5\\n5\\n2\\n20\\n2\") == \"8\"\nassert solution(\"5\\n2\\n20\\n20\\n20\") == \"5\"\n"
    },
    {
        "number": 339,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('9\\n2\\n3\\n1\\n') == '6'\nassert solution('5\\n5\\n2\\n20\\n') == '8'\nassert solution('19\\n3\\n4\\n2\\n') == '12'\n"
    },
    {
        "number": 339,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"9\\n2\\n3\\n1\") == \"6\"\nassert solution(\"5\\n5\\n2\\n20\") == \"8\"\nassert solution(\"19\\n3\\n4\\n2\") == \"12\""
    },
    {
        "number": 340,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"20\") == \"10 2\"\nassert solution(\"5184\") == \"6 4\"\nassert solution(\"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051\") == \"10 4\"\n\"\"\"\n\nfrom math import sqrt, floor"
    },
    {
        "number": 340,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''20''') == '10 2'\nassert solution('''5184''') == '6 4'\n"
    },
    {
        "number": 340,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''20''') == '10 2'\nassert solution('''5184''') == '6 4'\n\n\n\n\n\n'''\n"
    },
    {
        "number": 340,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdin\n\n\n------Solution 1-------\n\nIt can be proved that for any $n$, the sequence of operations is uniquely determined by the following theorem:\n\n$\\forall n>0$, $a_n = \\sqrt{n}$, and\n$\\forall n>0$, $a_n = (a_{n-1}^2 - n) \\cdot a_{n-1}$\n\nFor this problem we will test this theorem for all reasonable values of $n$.\n\nFor each of these values of $n$, we will start with $a_0 = 1$, and try to solve for $a_{n-1}$ and $a_n$ starting from this value.\n\nAt the first step we can see that $a_{n-1}$ will be the value of $a_{n-2}$ squared minus $n$, and similarly for $a_{n-2}$. So this sequence starts with this value, and we have to replace it with its square.\n\nAt the second step we can see that the new value of $a_{n-2}$ is the same as $a_{n-1}$ squared minus $n$. We have to replace the value of $a_{n-1}$ with this value, and so on.\n\nSo the sequence of operations is:\n\n$n$    $a_{n-1}$    $a_{n-2}$    $a_{n-3}$    $a_{n-4}$    $a_{n-5}$    $a_{n-6}$    $a_{n-7}$    $a_{n-8}$    $a_{n-9}$    $a_{n-10}$\n1    1    1    1    1    1    1    1    1    1    1\n2    2    2    2    4    6    8    10    12    14    16\n3    3    3    6    9    12    15    18    21    24    28\n4    4    8    12    16    20    24    29    36    40    48\n5    5    5    10    15    20    25    30    45    55    70\n6    6    6    6    6    6    6    6    6    6    6    6\n7    7    7    7    7    7    7    7    7    7    7    7\n8    8    8    8    8    8    8    8    8    8    8    8\n9    9    9    9    9    9    9    9    9    9    9    9\n10    10    10    10    10    10    10    10    10    10    10\n\nThis sequence is uniquely determined by the following theorem:\n\n$\\forall n>0$, $a_n = (a_{n-1}^2 - n) \\cdot a_{n-1}$, and\n$\\forall n>0$, $a_n = \\sqrt{n}$ and\n$\\forall n>0$, $a_n = (a_{n-1}^2 - n) \\cdot a_{n-1}$\n\nHere we have $a_{n-1}$ and $a_{n-1}$ only depending on $n-1$, and $a_{n}$ depends on $n-1$ and $n-2$.\n\nSo for each value of $n$ we will test if we can solve for the corresponding values of $a_{n-1}$ and $a_{n}$. If so, we have found the sequence of operations.\n\n-----Solution 2-------\n\nWe can solve this problem recursively, and for each value of $n$ we will try to find the pair of values $a_n$ and $a_{n-1}$ such that $a_{n-1}$ is greater than $n$. For this purpose, we will use a list to store the values $a_n$ and $a_{n-1}$ we have found so far, and keep a dictionary to keep track of the number of operations.\n\nAt the beginning we will store $a_{0} = 1$ and $a_{1} = 1$, since this value is the same for all values of $n$.\n\nWe will store the value $a_{n-1}$ for the value of $n$ in the list and the value of $a_{n}$ in the dictionary. For each value of $n$, we will replace the value of $a_{n-1}$ with the value of $a_{n-2}$ squared minus $n$. The same thing happens for $a_{n}$. If the value of $a_{n-1}$ is greater than $n$, we replace the value of $a_{n-1}$ with the value of $a_{n-2}$ squared minus $n$. If the value of $a_{n-2}$ is greater than $n$, we replace the value of $a_{n-2}$ with the value of $a_{n-3}$ squared minus $n$.\n\nIf $a_{n-1}$ is less than or equal to $n$, then we know we have found the sequence of operations, so we stop the recursion. Otherwise, we store the value of $a_{n-1}$ in the list, and we add 1 to the value of $a_{n}$ in the dictionary.\n\nAt the end we will have the following values in the dictionary:\n\n$n$    $a_{n}$    $a_{n-1}$    $a_{n-2}$    $a_{n-3}$    $a_{n-4}$    $a_{n-5}$    $a_{n-6}$    $a_{n-7}$    $a_{n-8}$    $a_{n-9}$    $a_{n-10}$\n1    1    1    1    1    1    1    1    1    1    1\n2    2    4    6    8    10    12    14    16    18    20\n3    3    6    9    12    15    18    21    24    28    30\n4    4    8    12    16    20    24    29    36    40    44\n5    5    5    10    15    20    25    30    45    55    70\n6    6    6    6    6    6    6    6    6    6    6    6\n7    7    7    7    7    7    7    7    7    7    7    7\n8    8    8    8    8    8    8    8    8    8    8    8\n9    9    9    9    9    9    9    9    9    9    9    9\n10    10    10    10    10    10    10    10    10    10    10\n\nWe also need to keep track of the number of operations, so we will start with a list of 0 elements. Then we will add one to the value of the first element of this list, since we already have $a_{0} = 1$."
    },
    {
        "number": 340,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(input()) == output\n"
    },
    {
        "number": 340,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('20') == '10 2'\nassert solution('5184') == '6 4'\nassert solution('100') == '10 2'\nassert solution('999') == '10 2'\nassert solution('749') == '6 4'\n"
    },
    {
        "number": 340,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''20''') == '''10 2'''\nassert solution('''5184''') == '''6 4'''\nassert solution('''1000000000''') == '''50000 3'''\nassert solution('''8000000000''') == '''50000 4'''\nassert solution('''12000000000''') == '''50000 5'''\n"
    },
    {
        "number": 340,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\n    '''20'''\n) == '10 2'\n\nassert solution(\n    '''5184'''\n) == '6 4'\n'''\n"
    },
    {
        "number": 340,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(input()) == '10 2'\nassert solution(input()) == '6 4'\n\n\n'''\n"
    },
    {
        "number": 340,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"\"\"20\"\"\") == \"\"\"10 2\"\"\"\nassert solution(\"\"\"5184\"\"\") == \"\"\"6 4\"\"\""
    },
    {
        "number": 341,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('5 2') == '27'\nassert solution('8 7 6') == '27'\nassert solution('1 2') == '2'\nassert solution('2 1') == '1'\nassert solution('1 1') == '0'\n"
    },
    {
        "number": 341,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('8 7 6\\nrsrpr\\n') == '27'\nassert solution('10 10\\nrsrsrs\\n') == '30'\nassert solution('8 3\\n1 2 3\\nrrprp\\n') == '30'\nassert solution('8 3\\n1 2 3\\nrrprr\\n') == '36'\nassert solution('8 3\\n1 2 3\\nrrprrr\\n') == '42'\n"
    },
    {
        "number": 341,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"2 2\") == \"1\"\nassert solution(\"5 2\") == \"6\"\nassert solution(\"2 10\") == \"21\"\nassert solution(\"5 5\") == \"10\"\nassert solution(\"1 10\") == \"1\"\n"
    },
    {
        "number": 341,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"8 2\") == \"27\"\nassert solution(\"6 3\") == \"18\"\nassert solution(\"8 1\") == \"14\"\nassert solution(\"5 1\") == \"13\"\nassert solution(\"1 2\") == \"0\"\n"
    },
    {
        "number": 341,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('5 2') == '27'\nassert solution('8 7 6') == '27'\nassert solution('1 3') == '1'\nassert solution('4 2') == '2'\nassert solution('3 2') == '0'\n"
    },
    {
        "number": 341,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\n'''5 2\n8 7 6\nrsrpr''') == '27'\nassert solution(\n'''4 1\n1 2 3 4\n2''') == '10'\nassert solution(\n'''4 1\n1 2 3 4\n4''') == '0'\nassert solution(\n'''5 2\n8 7 6\npsrrs''') == '0'\nassert solution(\n'''5 2\n8 7 6\nrrrpr''') == '27'\n"
    },
    {
        "number": 341,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == \"27\"\n\"\"\""
    },
    {
        "number": 341,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"1 2\") == \"1\"\nassert solution(\"10 5\") == \"15\"\nassert solution(\"10 5 2\") == \"22\"\nassert solution(\"5 5\") == \"10\"\nassert solution(\"1 1\") == \"1\"\n"
    },
    {
        "number": 341,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('5 2\\n8 7 6\\nrsrpr') == '27'"
    },
    {
        "number": 341,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''5 2\n8 7 6\nrsrpr\n''') == '27'\nassert solution('''5 2\n1 1 1\nrspb\n''') == '6'\nassert solution('''5 2\n1 1 1\nprpsr\n''') == '4'\nassert solution('''5 2\n7 7 3\nprsprs\n''') == '0'\nassert solution('''5 2\n1 1 1\nrspbr\n''') == '0'\n"
    },
    {
        "number": 342,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdin"
    },
    {
        "number": 342,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"1 1 1\") == 4\nassert solution(\"2 1 2\") == 7\nassert solution(\"3 5 2\") == 11\nassert solution(\"1000000000 1000000000 1000000000\") == 4000000000\n"
    },
    {
        "number": 342,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"3 2 1\") == \"bababababab\"\nassert solution(\"3 5 2\") == \"baba\"\nassert solution(\"3 1 1\") == \"aba\"\nassert solution(\"2 1 2\") == \"ababababab\"\nassert solution(\"1000000000 1000000000 1000000000\") == \"4000000000\""
    },
    {
        "number": 342,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('') is None\nassert solution('1 1 1') == 4\nassert solution('2 1 2') == 7\nassert solution('3 5 2') == 11\nassert solution('2 2 1') == 6\n"
    },
    {
        "number": 342,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"1 1 1\\n\") == \"4\"\nassert solution(\"2 1 2\\n\") == \"7\"\nassert solution(\"3 5 2\\n\") == \"11\"\nassert solution(\"2 2 1\\n\") == \"6\"\nassert solution(\"1000000000 1000000000 1000000000\\n\") == \"4000000000\""
    },
    {
        "number": 342,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1 1 1') == '4'\nassert solution('2 1 2') == '7'\nassert solution('3 5 2') == '11'\nassert solution('2 2 1') == '6'\nassert solution('1000000000 1000000000 1000000000') == '4000000000'\n"
    },
    {
        "number": 342,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('1 1 1') == 4\nassert solution('2 1 2') == 7\nassert solution('3 5 2') == 11\nassert solution('2 2 1') == 6\nassert solution('1000000000 1000000000 1000000000') == 4000000000\n"
    },
    {
        "number": 342,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdin\n'''\n"
    },
    {
        "number": 342,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\n    '1 1 1'\n) == 4\n\nassert solution(\n    '2 1 2'\n) == 7\n\nassert solution(\n    '3 5 2'\n) == 11\n\nassert solution(\n    '2 2 1'\n) == 6\n\nassert solution(\n    '1000000000 1000000000 1000000000'\n) == 4000000000"
    },
    {
        "number": 342,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(input()) == input()[0]\n"
    },
    {
        "number": 343,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''5 3 5 18 4''') == '4 1'\nassert solution('''5 5 5''') == '-1'\nassert solution('''5 3 5 16 4''') == '-1'\nassert solution('''5 3 5 14 4''') == '4 1'\nassert solution('''5 3 5 14 16 4''') == '-1'\n"
    },
    {
        "number": 343,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 343,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('5 3 5 18 4') == '4 1'\nassert solution('5 3 5 16 4') == '-1'\nassert solution('5 5 5') == '-1'\nassert solution('5 5 5 2') == '1 3'\nassert solution('5 5 5 4') == '-1'\n"
    },
    {
        "number": 343,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\n\nimport sys\nfrom math import floor"
    },
    {
        "number": 343,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdin\nassert solution(\"5 3 5 18 4\") == \"4 1\"\nassert solution(\"5 3 5 16 4\") == \"-1\"\nassert solution(\"5 3 5 18 6\") == \"3 1\"\nassert solution(\"5 3 5 16 4\") == \"-1\"\n"
    },
    {
        "number": 343,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('5 3 5 18 4\\n3 5 4\\n') == '4 1'\nassert solution('5 3 5 16 4\\n5 5 5\\n') == '-1'\nassert solution('5 3 5 6 4\\n5 5 5\\n') == '4 1'\nassert solution('5 3 5 6 4\\n5 5 5\\n') == '4 1'\nassert solution('5 3 5 6 4\\n5 5 5\\n') == '4 1'\n"
    },
    {
        "number": 343,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('5 3 5 18 4') == '4 1'\nassert solution('5 3 5 16 4') == '-1'\nassert solution('5 3 5 19 4') == '5 4'\nassert solution('5 3 5 19 4') == '5 4'\nassert solution('5 3 5 19 4') == '5 4'\n"
    },
    {
        "number": 343,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1 2 3 4 5') == '5 1'\nassert solution('2 3 4 5') == '-1'\nassert solution('2 3 4 5 3') == '3 1'\nassert solution('2 3 4 5 5') == '-1'\nassert solution('2 3 4 5 6') == '-1'\n"
    },
    {
        "number": 343,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == expected\n\n\n\n\"\"\"\n\nn, k, p, x, y = [int(x) for x in stdin.split()]\nmarks = [int(x) for x in stdin.split()]"
    },
    {
        "number": 343,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 344,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 344,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('codeforces') == 'NO'\nassert solution('ninja') == 'YES'\nassert solution('sumimasen') == 'YES'\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 344,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('sumimasen') == 'YES'\nassert solution('ninja') == 'YES'\nassert solution('codeforces') == 'NO'\nassert solution('frua') == 'YES'\nassert solution('uruk') == 'YES'\n"
    },
    {
        "number": 344,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('a') == 'YES'\nassert solution('an') == 'YES'\nassert solution('ban') == 'NO'\nassert solution('aab') == 'YES'\nassert solution('aabb') == 'NO'\n"
    },
    {
        "number": 344,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('sumimasen') == \"YES\"\nassert solution('ninja') == \"YES\"\nassert solution('codeforces') == \"NO\"\nassert solution('abcd') == \"NO\"\nassert solution('excellent') == \"NO\"\n"
    },
    {
        "number": 344,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('sumimasen') == 'YES'\nassert solution('ninja') == 'YES'\nassert solution('codeforces') == 'NO'\n\n\n\n------\n\n## my solution\n"
    },
    {
        "number": 344,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"harakiri\") == \"YES\"\nassert solution(\"yupie\") == \"YES\"\nassert solution(\"man\") == \"YES\"\nassert solution(\"nbo\") == \"NO\"\nassert solution(\"horse\") == \"NO\"\n"
    },
    {
        "number": 344,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('sumimasen') == 'YES'\nassert solution('ninja') == 'YES'\nassert solution('codeforces') == 'NO'\nassert solution('paksi') == 'YES'\nassert solution('teshayakudu') == 'YES'\n"
    },
    {
        "number": 344,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('sumimasen') == 'YES'\nassert solution('ninja') == 'YES'\nassert solution('codeforces') == 'NO'\nassert solution('codeforces') == 'NO'\nassert solution('piano') == 'YES'\n"
    },
    {
        "number": 344,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"sumimasen\") == \"YES\"\nassert solution(\"ninja\") == \"YES\"\nassert solution(\"codeforces\") == \"NO\"\nassert solution(\"codeforces\") == \"NO\"\nassert solution(\"codeforces\") == \"NO\"\n"
    },
    {
        "number": 345,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\n'''4 4\n1 2\n2 3\n3 4\n4 1''') == '4'\n\nassert solution(\n'''7 0\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n2 3\n2 4\n2 5\n2 6\n2 7\n3 4\n3 5\n3 6\n3 7\n4 5\n4 6\n4 7\n5 6\n5 7\n6 7''') == '0'\n\nassert solution(\n'''3 1\n1 3\n''') == '1'\n"
    },
    {
        "number": 345,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('4 4\\n1 2\\n2 3\\n3 4\\n4 1') == '4'\nassert solution('7 0\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\\n1 7\\n2 3\\n2 4\\n2 5\\n2 6\\n2 7\\n3 4\\n3 5\\n3 6\\n3 7\\n4 5\\n4 6\\n4 7\\n5 6\\n5 7\\n6 7') == '0'\nassert solution('7 21\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\\n1 7\\n2 3\\n2 4\\n2 5\\n2 6\\n2 7\\n3 4\\n3 5\\n3 6\\n3 7\\n4 5\\n4 6\\n4 7\\n5 6\\n5 7\\n6 7') == '1'\nassert solution('7 21\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\\n1 7\\n2 3\\n2 4\\n2 5\\n2 6\\n2 7\\n3 4\\n3 5\\n3 6\\n3 7\\n4 5\\n4 6\\n4 7\\n5 6\\n5 7\\n6 7') == '1'\nassert solution('7 21\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\\n1 7\\n2 3\\n2 4\\n2 5\\n2 6\\n2 7\\n3 4\\n3 5\\n3 6\\n3 7\\n4 5\\n4 6\\n4 7\\n5 6\\n5 7\\n6 7') == '1'\n"
    },
    {
        "number": 345,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('0 1\\n1 2\\n2 1') == '0'\nassert solution('1 1\\n1 2\\n2 1') == '1'\nassert solution('1 1\\n2 2\\n3 1') == '0'\nassert solution('1 2\\n1 3\\n1 4\\n1 5\\n1 6\\n1 7\\n2 3\\n2 4\\n2 5\\n2 6\\n2 7\\n3 4\\n3 5\\n3 6\\n3 7\\n4 5\\n4 6\\n4 7\\n5 6\\n5 7\\n6 7') == '1'\nassert solution('7 1\\n1 3\\n1 4\\n1 5\\n1 6\\n1 7\\n2 3\\n2 4\\n2 5\\n2 6\\n2 7\\n3 4\\n3 5\\n3 6\\n3 7\\n4 5\\n4 6\\n4 7\\n5 6\\n5 7\\n6 7') == '16'\nprint(solution(stdin))\n\n'''\n\nimport sys"
    },
    {
        "number": 345,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('4 4\\n1 2\\n2 3\\n3 4\\n4 1\\n') == '4'\nassert solution('7 0\\n') == '0'\nassert solution('3 1\\n1 3\\n') == '1'\nassert solution('7 21\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\\n1 7\\n2 3\\n2 4\\n2 5\\n2 6\\n2 7\\n3 4\\n3 5\\n3 6\\n3 7\\n4 5\\n4 6\\n4 7\\n5 6\\n5 7\\n6 7') == '16'"
    },
    {
        "number": 345,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1 2') == '4'\nassert solution('1 2\\n1 3') == '4'\nassert solution('1 2\\n1 3\\n1 4') == '4'\nassert solution('1 2\\n1 3\\n1 4\\n1 5') == '4'\nassert solution('1 2\\n1 3\\n1 4\\n1 5\\n1 6') == '4'\n"
    },
    {
        "number": 345,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('4 4') == '4'\nassert solution('7 0') == '0'\nassert solution('3 1') == '1'\nassert solution('7 21') == '16'\nassert solution('3 2') == '0'\n"
    },
    {
        "number": 345,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(input1) == expected1\nassert solution(input2) == expected2\nassert solution(input3) == expected3\nassert solution(input4) == expected4\nassert solution(input5) == expected5\n"
    },
    {
        "number": 345,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('3 2') == '1'\nassert solution('5 3') == '3'\nassert solution('7 21') == '16'\nassert solution('7 0') == '0'\nassert solution('5 2') == '1'\n"
    },
    {
        "number": 345,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 345,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 346,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"1 2\") == \"400\"\nassert solution(\"2 3\") == \"40\"\nassert solution(\"3 4\") == \"12\"\nassert solution(\"4 5\") == \"24\"\nassert solution(\"5 6\") == \"20\"\n"
    },
    {
        "number": 346,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 346,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 346,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"4 1\\n1 3 7 5\\n3\") == \"18\"\nassert solution(\"3 2\\n10 3 8\\n2 3\") == \"40\"\nassert solution(\"2 2\\n100 200\\n1 2\") == \"400\"\nassert solution(\"2 2\\n100 200\\n1 1\") == \"400\"\nassert solution(\"1 1\\n1\") == \"1\"\n"
    },
    {
        "number": 346,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 346,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''4 1\n1 3 7 5\n3\n''') == \"18\"\nassert solution('''3 2\n10 3 8\n2 3\n''') == \"40\"\nassert solution('''2 2\n100 200\n1 2\n''') == \"400\"\n\n'''\n1 2\n1 2\n1 2\n'''\n'''\n1 2\n3\n'''\n'''\n1 2\n5\n'''\n'''\n1 2\n3\n'''\n'''\n1 2\n3\n'''\n'''\n1 2\n2\n'''\n'''\n1 2\n2\n'''\n'''\n1 2\n1\n'''\n'''\n1 2\n4\n'''\n'''\n1 2\n3\n'''\n'''\n1 2\n4\n'''\n'''\n1 2\n3\n'''\n'''\n1 2\n4\n'''\n'''\n1 2\n3\n'''\n'''\n1 2\n4\n'''\n'''\n1 2\n2\n'''\n'''\n1 2\n2\n'''\n'''\n1 2\n2\n'''\n'''\n1 2\n2\n'''\n'''\n1 2\n2\n'''\n'''\n1 2\n2\n'''\n'''\n1 2\n3\n'''\n'''\n1 2\n3\n'''\n'''\n1 2\n3\n'''\n'''\n1 2\n3\n'''\n'''\n1 2\n3\n'''\n'''\n1 2\n3\n'''\n'''\n1 2\n4\n'''\n'''\n1 2\n4\n'''\n'''\n1 2\n4\n'''\n'''\n1 2\n4\n'''\n'''\n1 2\n4\n'''\n'''\n1 2\n4\n'''\n'''\n1 2\n4\n'''\n'''\n1 2\n4\n'''\n'''\n1 2\n4\n'''\n'''\n1 2\n4\n'''\n'''\n1 2\n4\n'''\n'''\n1 2\n4\n'''\n'''\n1 2\n4\n'''\n'''\n1 2\n4\n'''\n'''\n1 2\n4\n'''\n'''\n1 2\n4\n'''\n'''\n1 2\n4\n'''\n'''\n1 2\n4\n'''\n'''\n1 2\n4\n'''\n'''\n1 2\n4\n'''\n'''\n1 2\n4\n'''\n'''\n1 2\n4\n'''\n'''\n1 2\n4\n'''\n'''\n1 2\n4\n'''\n'''\n1 2\n4\n'''\n'''\n1 2\n4\n'''\n'''\n1 2\n4\n'''\n'''\n1 2\n4\n'''\n'''\n1 2\n4\n'''\n'''\n1 2\n4\n'''\n'''\n1 2\n4\n'''\n'''\n1 2\n4\n'''\n'''\n1 2\n4\n'''\n'''\n1 2\n4\n'''\n'''\n1 2\n4\n'''\n'''\n1 2\n4\n'''\n'''\n1 2\n4\n'''\n'''\n1 2\n4\n'''\n'''\n1 2\n4\n'''\n'''\n1 2\n4\n'''\n'''\n1 2\n4\n'''\n'''\n1 2\n4\n'''\n'''\n1 2\n4\n'''\n'''\n1 2\n4\n'''\n'''\n1 2\n4\n'''\n'''\n1 2\n4\n'''\n'''\n1 2\n4\n'''\n'''\n1 2\n4\n'''\n'''\n1 2\n4\n'''\n'''\n1 2\n4\n'''\n'''\n1 2\n4\n'''\n'''\n1 2\n4\n'''\n'''\n1 2\n4\n'''\n'''\n1 2\n4\n'''\n'''\n1 2\n4\n'''\n'''\n1 2\n4\n'''\n'''\n1 2\n4\n'''\n'''\n1 2\n4\n'''\n'''\n1 2\n4\n'''\n'''\n1 2\n4\n'''\n'''\n1 2\n4\n'''\n'''\n1 2\n4\n'''\n'''\n1 2\n4\n'''\n'''\n1 2\n4\n'''\n'''\n1 2\n4\n'''\n'''\n1 2\n4\n'''\n'''\n1 2\n4\n'''\n'''\n1 2\n4\n'''\n'''\n1 2\n4\n'''\n'''\n1 2\n4\n'''\n'''\n1 2\n4\n'''\n'''\n1 2\n4\n'''\n'''\n1 2\n4\n'''\n'''\n1 2\n4\n'''\n'''\n1 2\n4\n'''\n'''\n1 2\n4\n'''\n'''\n1 2\n4\n'''\n'''\n1 2\n4\n'''\n'''\n1 2\n4\n'''\n'''\n1 2\n4\n'''\n'''\n1 2\n4\n'''\n'''\n1 2\n4\n'''\n'''\n1 2\n4\n'''\n'''\n1 2\n4\n'''\n'''\n1 2\n4\n'''\n'''\n1 2\n4\n'''\n'''\n1 2\n4\n'''\n'''\n1 2\n4\n'''\n'''\n1 2\n4\n'''\n'''\n1 2\n4\n'''\n'''\n1 2\n4\n'''\n'''\n1 2\n4\n'''\n'''\n1 2\n4\n'''\n'''\n1 2\n4\n'''\n'''\n1 2\n4\n'''\n'''\n1 2\n4\n'''\n'''\n1 2\n4\n'''\n'''\n"
    },
    {
        "number": 346,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''4 1\n1 3 7 5\n3\n''') == '18'\nassert solution('''3 2\n10 3 8\n2 3\n''') == '40'\nassert solution('''2 2\n100 200\n1 2\n''') == '400'\nassert solution('''4 3\n1 3 7 5\n3\n3 5 7\n2 1\n''') == '40'\nassert solution('''4 2\n1 3 7 5\n3\n3 5 7\n2 1\n''') == '28'\n"
    },
    {
        "number": 346,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('4 1\\n1 3 7 5\\n3\\n') == '18'\nassert solution('4 1\\n1 3 7 5\\n3\\n') == '40'\nassert solution('3 2\\n10 3 8\\n2 3\\n') == '400'\nassert solution('3 2\\n100 200\\n1 2\\n') == '400'\nassert solution('5 1\\n20 5 40 10 60 10\\n1\\n') == '140'\n"
    },
    {
        "number": 346,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''4 1\n1 3 7 5\n3\n''') == '18'\nassert solution('''3 2\n10 3 8\n2 3\n''') == '40'"
    },
    {
        "number": 346,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''4 1\n1 3 7 5\n3\n''') == '18'\nassert solution('''3 2\n10 3 8\n2 3\n''') == '40'\nassert solution('''2 2\n100 200\n1 2\n''') == '400'\nprint(\"tests passed\")\n"
    },
    {
        "number": 347,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''20 40 60 80 100''') == '4900'\nassert solution('''20 40 60 80 100''') == '4930'\nassert solution('''120 120 120 120 120''') == '4930'\nassert solution('''0 1 2 3 4''') == '4930'\nassert solution('''0 0 0 0 0''') == '4930'\n"
    },
    {
        "number": 347,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 347,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\n'''\n"
    },
    {
        "number": 347,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''20 40 60 80 100''') == '4930'\nassert solution('''119 119 119 119 119''') == '4930'\nassert solution('''119 119 119 119 119'''\n                '''0 0 0 0 0'''\n                '''10 0''') == '4930'\n'''\n"
    },
    {
        "number": 347,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('20 40 60 80 100') == '4900'\nassert solution('119 119 119 119 119') == '4930'\nassert solution('119 119 119 119 119') == '4930'\nassert solution('119 119 119 119 119') == '4930'\nassert solution('20 40 60 80 100') == '4900'\n"
    },
    {
        "number": 347,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''20 40 60 80 100\n0 1 2 3 4\n1 0\n''') == '4900'\nassert solution('''119 119 119 119 119\n0 0 0 0 0\n10 0\n''') == '4930'\n'''\n\nThere are some problems, you have to solve them and get as much points as possible. The points are divided among problems. One problem is worth one point. The problems are numbered 0 through 4. You have to give your solution the following points:\n\n\nFor each problem, you have to give a point to your submission. If the submitted solution is correct, you can receive a point for each wrong submission you made on that particular problem, and a point for each successful hack. If the submitted solution is wrong, then you do not receive any points for this problem. You must print the final score.\n\nFor example, if the time of Kevin's last submission for problem i is 20 minutes and his number of wrong submissions on that problem is 2, then his score for problem i is $\\operatorname{max}(0.3 x,(1 - \\frac{2}{250}) x - 50 2) = 1.4$.\n\nYou have to make a total score, where the sum of points for all problems is equal to your final score. If the time of Kevin's last submission is 120 minutes, then your total score is $\\sum_{i = 0}^{4} \\operatorname{max}(0.3 x,(1 - \\frac{120}{250}) x - 50 2) = 8.5$.\n\nYour final score must be an integer.\n\nYou have to take into account the fact that the tasks have different point values. If you have 5 problems, then your total score is equal to $\\sum_{i = 0}^{4} \\operatorname{max}(0.3 x,(1 - \\frac{5}{250}) x - 50 2) = 50$.\n\nInput\n\nThe first line contains five space-separated integers m_1, m_2, m_3, m_4, m_5, where m_{i} (0 \u2264 m_{i} \u2264 119) is the time of Kevin's last submission for problem i. His last submission is always correct and gets accepted.\n\nThe second line contains five space-separated integers w_1, w_2, w_3, w_4, w_5, where w_{i} (0 \u2264 w_{i} \u2264 10) is Kevin's number of wrong submissions on problem i.\n\nThe last line contains two space-separated integers h_{s} and h_{u} (0 \u2264 h_{s}, h_{u} \u2264 20), denoting the Kevin's numbers of successful and unsuccessful hacks, respectively.\n\nOutput\n\nPrint a single integer, the value of Kevin's final score.\n\nConstraints\n0 \u2264 m_i \u2264 120\n0 \u2264 w_i \u2264 10\n1 \u2264 h_{s}, h_{u} \u2264 20\n\n0 \u2264 m_i \u2264 120\n0 \u2264 w_i \u2264 10\n1 \u2264 h_{s}, h_{u} \u2264 20\n\nSAMPLE INPUT\n20 40 60 80 100\n0 1 2 3 4\n1 0\n\nSAMPLE OUTPUT\n4900\n\nExplanation\nIn the first sample, Kevin takes 119 minutes on all of the problems. Therefore, he gets $(1 - \\frac{119}{250}) = \\frac{131}{250}$ of the points on each problem. So his score from solving problems is $\\frac{131}{250}(500 + 1000 + 1500 + 2000 + 2500) = 3930$. Adding in 10\u00b7100 = 1000 points from hacks, his total score becomes 3930 + 1000 = 4930.\n\nIn the second sample, Kevin takes 119 minutes on all of the problems. Therefore, he gets $(1 - \\frac{119}{250}) = \\frac{131}{250}$ of the points on each problem. So his score from solving problems is $\\frac{131}{250}(500 + 1000 + 1500 + 2000 + 2500) = 3930$. Adding in 10\u00b7100 = 1000 points from hacks, his total score becomes 3930 + 1000 = 4930.\n\nIn the third sample, Kevin takes 120 minutes on all of the problems. Therefore, he gets $(1 - \\frac{120}{250}) = \\frac{124}{250}$ of the points on each problem. So his score from solving problems is $\\frac{124}{250}(500 + 1000 + 1500 + 2000 + 2500) = 3930$. Adding in 10\u00b7100 = 1000 points from hacks, his total score becomes 3930 + 1000 = 4930.\n\nIn the fourth sample, Kevin takes 120 minutes on all of the problems. Therefore, he gets $(1 - \\frac{120}{250}) = \\frac{124}{250}$ of the points on each problem. So his score from solving problems is $\\frac{124}{250}(500 + 1000 + 1500 + 2000 + 2500) = 3930$. Adding in 10\u00b7100 = 1000 points from hacks, his total score becomes 3930 + 1000 = 4930.\n\nThus, your total score is $4930 + 1000 = 4930$.\n\nIn the fifth sample, Kevin takes 119 minutes on all of the problems. Therefore, he gets $(1 - \\frac{119}{250}) = \\frac{131}{250}$ of the points on each problem. So his score from solving problems is $\\frac{131}{250}(500 + 1000 + 1500 + 2000 + 2500) = 3930$. Adding in 10\u00b7100 = 1000 points from hacks, his total score becomes 3930 + 1000 = 4930.\n\nThus, your total score is $4930 + 1000 = 4930$.\n'''"
    },
    {
        "number": 347,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\n    '20 40 60 80 100\\n0 1 2 3 4\\n1 0\\n'\n) == '4900'\nassert solution(\n    '119 119 119 119 119\\n0 0 0 0 0\\n10 0\\n'\n) == '4930'\n\n\n-----\n'''\n"
    },
    {
        "number": 347,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(input(\"\")) == ''\n"
    },
    {
        "number": 347,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''20 40 60 80 100\n0 1 2 3 4\n1 0''') == '4900'\nassert solution('''119 119 119 119 119\n0 0 0 0 0\n10 0''') == '4930'\nassert solution('''119 119 119 119 119\n0 0 0 0 0\n15 0''') == '7000'\nassert solution('''119 119 119 119 119\n0 0 0 0 0\n20 0''') == '6120'\nassert solution('''20 40 60 80 100\n0 1 2 3 4\n1 0\n20 0''') == '4930'\n"
    },
    {
        "number": 347,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''20 40 60 80 100''') == '4900'\nassert solution('''119 119 119 119 119''') == '4930'"
    },
    {
        "number": 348,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('2 2 1 1') == '1'\nassert solution('1 2 1 2') == '2'\n"
    },
    {
        "number": 348,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 348,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"2 2 1 1\") == \"1\"\nassert solution(\"1 2 1 2\") == \"2\"\nassert solution(\"2 2 1 1\") == \"1\"\nassert solution(\"2 2 1 1\") == \"1\"\nassert solution(\"2 2 1 1\") == \"1\"\n"
    },
    {
        "number": 348,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"2 2 1 1\") == \"1\"\nassert solution(\"1 2 1 2\") == \"2\"\nassert solution(\"2 1 1 2\") == \"2\"\n\n'''"
    },
    {
        "number": 348,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''2 2 1 1''') == '1'\nassert solution('''1 2 1 2''') == '2'\nassert solution('''1 2 1 2''') == '2'\nassert solution('''2 2 1 2''') == '2'\nassert solution('''3 2 1 3''') == '5'\n"
    },
    {
        "number": 348,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('2 2 1 1') == '1'\nassert solution('1 2 1 2') == '2'"
    },
    {
        "number": 348,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == \"2\"\n\"\"\"\n"
    },
    {
        "number": 348,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"1 2 1 2\") == \"2\"\nassert solution(\"2 2 1 1\") == \"1\"\n\n\n\"\"\"\n"
    },
    {
        "number": 348,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''2 2 1 1''') == '1'\nassert solution('''1 2 1 2''') == '2'\nassert solution('''1 2 1 2''') == '2'\n'''\n"
    },
    {
        "number": 348,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == ''\n"
    },
    {
        "number": 349,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('') is None\nassert solution('1 2') == 'Possible'\nassert solution('1 2\\n2 4') == 'Possible'\nassert solution('2 2\\n2 10') == 'Possible'\nassert solution('2 2\\n2 4\\n4 10') == 'Possible'\n"
    },
    {
        "number": 349,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\n'''2 2\n2 10\n11 5'''\n) == 'Possible'\n\nassert solution(\n'''2 3\n2 4 5\n4 5 6\n3 6 7'''\n) == 'Impossible'\n\nassert solution(\n'''3 2\n1 3\n2 4\n5 10\n3 1\n3 6\n4 8'''\n) == 'Possible'\n\nassert solution(\n'''3 2\n1 3\n2 4\n5 10\n3 1\n3 6\n4 8\n4 4\n'''\n) == 'Possible'\n\n\n-----Alternate Solutions (Shorter)-----\n"
    },
    {
        "number": 349,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('2 2\\n2 10\\n11 5\\n9 4') == 'Possible'\nassert solution('2 3\\n2 4 5\\n4 5 6\\n3 6 7\\n8 10 11\\n3 1 3\\n3 6 7') == 'Possible'\nassert solution('3 2\\n1 3\\n2 4\\n5 10\\n3 1\\n3 6\\n4 8') == 'Impossible'\n\n\n-----Add---\n\nT: O(n*m)\nS: O(n*m)\n\"\"\""
    },
    {
        "number": 349,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\n'''2 2\n2 10\n11 5\n9 4\n3 12'''\n) == 'Possible'\n\nassert solution(\n'''2 3\n2 4 5\n4 5 6\n3 6 7\n8 10 11\n'''\n) == 'Impossible'\n\nassert solution(\n'''3 2\n1 3\n2 4\n5 10\n3 1\n3 6\n4 8\n'''\n) == 'Possible'\n\nassert solution(\n'''5 2\n9 4\n1 3\n2 4\n5 10\n3 1\n3 6\n4 8'''\n) == 'Impossible'\n"
    },
    {
        "number": 349,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('2 2\\n2 10\\n11 5') == 'Possible'\nassert solution('2 3\\n2 4 5\\n4 5 6\\n3 6 7\\n8 10 11') == 'Possible'\nassert solution('3 2\\n1 3\\n2 4\\n5 10\\n3 1\\n3 6\\n4 8') == 'Impossible'\nassert solution('3 2\\n1 3\\n2 4\\n5 10\\n3 1\\n3 6\\n4 8') == 'Possible'\nassert solution('3 2\\n1 3\\n2 4\\n5 10\\n3 1\\n3 6\\n4 8') == 'Possible'\n"
    },
    {
        "number": 349,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"2 2\") == \"Possible\"\nassert solution(\"2 3\") == \"Possible\"\nassert solution(\"3 2\") == \"Possible\"\nassert solution(\"3 3\") == \"Impossible\"\nassert solution(\"3 2\\n2 1\") == \"Possible\"\n"
    },
    {
        "number": 349,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\""
    },
    {
        "number": 349,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''2 2\n2 10\n11 5\n9 4\n3 12\n''') == 'Possible'\n\nassert solution('''2 3\n2 4 5\n4 5 6\n3 6 7\n8 10 11\n''') == 'Impossible'\n\nassert solution('''3 2\n1 3\n2 4\n5 10\n3 1\n3 6\n4 8\n''') == 'Possible'\n'''\n"
    },
    {
        "number": 349,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"2 3\") == \"Impossible\"\nassert solution(\"2 3\") == \"Possible\"\nassert solution(\"2 3\") == \"Possible\"\nassert solution(\"2 3\") == \"Possible\"\nassert solution(\"2 3\") == \"Possible\"\n"
    },
    {
        "number": 349,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == expected"
    },
    {
        "number": 350,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''3\n2 5 5''') == '11'\nassert solution('''3\n1 1 2''') == '3'\nassert solution('''3\n1 1 1''') == '3'\nassert solution('''3\n1 2 1''') == '2'\nassert solution('''3\n2 5 5''') == '11'\n"
    },
    {
        "number": 350,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''3''') == 3\nassert solution('''2 5 5''') == 11\nassert solution('''3''') == 3\nassert solution('''1 1 2''') == 3\nassert solution('''3''') == 3\n"
    },
    {
        "number": 350,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('aa') == 'aa'\nassert solution('aab') == 'aab'\nassert solution('ba') == 'aab'\nassert solution('baa') == 'aab'\nassert solution('a') == 'a'\n"
    },
    {
        "number": 350,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('abac') == 7\nassert solution('abacbabacbbc') == 11\nassert solution('abcabcbbc') == 11\nassert solution('aabcbcbcbcb') == 11\nassert solution('aaaaaabcbcbcb') == 11\n"
    },
    {
        "number": 350,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"a\") == 1\nassert solution(\"ab\") == 2\nassert solution(\"abb\") == 3\nassert solution(\"bbbbb\") == 1\nassert solution(\"bba\") == 2\n"
    },
    {
        "number": 350,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('abccabc') == 7\nassert solution('accc') == 1\nassert solution('aababaaab') == 9\nassert solution('bccb') == 3\nassert solution('abcc') == 7\n"
    },
    {
        "number": 350,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('1') == '1'\nassert solution('1 1 2') == '3'\nassert solution('1 2 1') == '2'\nassert solution('1 2 2') == '3'\nassert solution('1 2 2 3') == '4'\n"
    },
    {
        "number": 350,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == expected\n\n\n\n\"\"\"\n\nalphabet = stdin.readline().split()\nlimitations = [int(x) for x in stdin.readline().split()]\n\nn = int(stdin.readline())\n\npossible_strings = [a * x for x in range(1, 26) for a in limitations]\n\ncurrent_string = \"\"\n\nfor p in possible_strings:\n    if len(current_string) + len(p) <= n:\n        current_string += p\n    else:\n        break\n\nprint(len(current_string))\n"
    },
    {
        "number": 350,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\n'''\n3\n2 5 5\n\n3\n1 1 2\n\n''') == '11'\nassert solution(\n'''\n3\n1 1 2\n\n3\n1 1 2\n\n''') == '3'\nassert solution(\n'''\n1\n1\n\n''') == '1'\nassert solution(\n'''\n2\n1 1 2\n\n1\n2\n\n''') == '3'\nassert solution(\n'''\n2\n1 1 2\n\n2\n2\n\n''') == '3'\n"
    },
    {
        "number": 350,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == \"\"\n"
    },
    {
        "number": 351,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''3 3\n2 1 9\n''') == '1'\n\nassert solution('''4 20\n10 3 6 3\n''') == '0'\n\nassert solution('''2 3\n2 2 2\n''') == '1'\n"
    },
    {
        "number": 351,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('1\\n2\\n') == '1'\nassert solution('2\\n1\\n') == '0'\nassert solution('1\\n2\\n3\\n') == '2'\nassert solution('1\\n2\\n3\\n4\\n') == '4'\nassert solution('1\\n2\\n3\\n4\\n5\\n') == '5'\n"
    },
    {
        "number": 351,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == ''\n"
    },
    {
        "number": 351,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''3 3\n2 1 9''') == '1'\nassert solution('''4 20\n10 3 6 3''') == '0'\nassert solution('''100 100000 1000\n
    },
    {
        "number": 351,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\nfrom collections import deque, defaultdict\n"
    },
    {
        "number": 351,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''3 3\n2 1 9\n''') == '1'\n\nassert solution('''4 20\n10 3 6 3\n''') == '0'\n'''\n\nimport sys\ninput = sys.stdin.readline\nfrom functools import lru_cache\n\n@lru_cache(None)\n"
    },
    {
        "number": 351,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''3 3\n2 1 9\n''') == '1'\nassert solution('''4 20\n10 3 6 3\n''') == '0'\nassert solution('''4 2\n1 2 1\n''') == '1'\nassert solution('''3 3\n2 1 9\n''') == '0'\n"
    },
    {
        "number": 351,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1 2') == '1'\nassert solution('4 5') == '0'\nassert solution('10 7') == '0'\nassert solution('10 10') == '0'\nassert solution('10 10 2') == '0'\n"
    },
    {
        "number": 351,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''3 3''') == '1'\nassert solution('''4 20''') == '0'\nassert solution('''10 3 6 3''') == '0'\nassert solution('''20 30 10 10''') == '3'\nassert solution('''10 3 6 3 2 1 9''') == '1'\n"
    },
    {
        "number": 351,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"3 3\\n2 1 9\\n\") == \"1\"\nassert solution(\"4 20\\n10 3 6 3\\n\") == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 352,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''6\n1 5\n2 6\n3 7''') == '1 2 3'\nassert solution('''10\n1 2\n1 3\n1 5\n''') == '2 3 5'\nassert solution('''6\n1 3\n2 2\n2 2\n''') == '2 2 2'\n"
    },
    {
        "number": 352,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''6\n1 5\n2 6\n3 7\n''') == '1 2 3'\nassert solution('''10\n1 2\n1 3\n1 5\n''') == '2 3 5'\nassert solution('''6\n1 3\n2 2\n2 2\n''') == '2 2 2'\nassert solution('''10\n1 2\n1 3\n1 5\n''') == '2 3 5'\nassert solution('''100\n1 2\n1 3\n1 5\n''') == '2 3 5'\n"
    },
    {
        "number": 352,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('6\\n1 5\\n2 6\\n3 7\\n') == '1 2 3\\n'\nassert solution('10\\n1 2\\n1 3\\n1 5\\n') == '2 3 5\\n'\nassert solution('6\\n1 3\\n2 2\\n2 2\\n') == '2 2 2\\n'\nassert solution('10\\n1 2\\n1 3\\n1 5\\n1 7\\n') == '2 3 5\\n'\nassert solution('10\\n1 2\\n1 3\\n1 5\\n1 7\\n1 9\\n') == '2 3 5\\n'\n"
    },
    {
        "number": 352,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(input) == output\n"
    },
    {
        "number": 352,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''6\n1 5\n2 6\n3 7\n''') == '1 2 3'\nassert solution('''10\n1 2\n1 3\n1 5\n''') == '2 3 5'\nassert solution('''6\n1 3\n2 2\n2 2\n''') == '2 2 2'\nassert solution('''9\n1 2\n1 3\n1 5\n''') == '2 2 2'\nassert solution('''8\n1 2\n1 3\n1 5\n1 7\n1 9\n1 11\n1 13\n1 15\n1 17\n''') == '2 2 2'\n"
    },
    {
        "number": 352,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('3\\n1 5\\n2 6\\n3 7\\n') == '1 2 3'\nassert solution('6\\n1 3\\n2 2\\n2 2\\n') == '2 2 2'\nassert solution('10\\n1 2\\n1 3\\n1 5\\n') == '2 3 5'\nassert solution('10\\n1 3\\n2 2\\n2 2\\n') == '2 2 2'\nassert solution('10\\n1 3\\n2 2\\n2 3\\n') == '2 2 3'\n"
    },
    {
        "number": 352,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout"
    },
    {
        "number": 352,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 352,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"4\") == \"1 1 1\"\nassert solution(\"5\") == \"2 1 1\"\nassert solution(\"6\") == \"2 2 1\"\nassert solution(\"7\") == \"3 1 1\"\nassert solution(\"8\") == \"4 1 1\"\n"
    },
    {
        "number": 352,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1\\n1 2\\n1 3\\n1 5\\n' == '2 3 5'\nassert solution('6\\n1 2\\n1 3\\n1 5\\n' == '2 3 5'\nassert solution('10\\n1 2\\n1 3\\n1 5\\n' == '2 3 5'\nassert solution('6\\n1 3\\n2 2\\n2 2\\n' == '2 2 2'\nassert solution('6\\n1 3\\n1 5\\n1 7\\n' == '2 2 2'\n"
    },
    {
        "number": 353,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('5\\n3 4 5 6 7\\n') == 'UP'\nassert solution('7\\n12 13 14 15 14 13 12\\n') == 'DOWN'\nassert solution('1\\n8\\n') == '-1'\nassert solution('1\\n1\\n') == '-1'\nassert solution('2\\n1 1\\n') == '-1'\n"
    },
    {
        "number": 353,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('5') == 'UP'\nassert solution('7') == 'DOWN'\nassert solution('1') == '-1'\nassert solution('8') == 'UP'\nassert solution('10') == 'DOWN'\n"
    },
    {
        "number": 353,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('10\\n' + '0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1'.split()) == 'UP'\nassert solution('9\\n' + '0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1'.split()) == 'UP'\nassert solution('8\\n' + '0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1'.split()) == 'DOWN'\nassert solution('7\\n' + '0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1'.split()) == 'DOWN'\nassert solution('6\\n' + '0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1'.split()) == 'DOWN'\n"
    },
    {
        "number": 353,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''5''') == '''UP'''\nassert solution('''7''') == '''DOWN'''\nassert solution('''1''') == '''-1'''\nassert solution('''8''') == '''DOWN'''\nassert solution('''9''') == '''UP'''\n"
    },
    {
        "number": 353,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"-1\"\nassert solution(\"5\") == \"UP\"\nassert solution(\"7\") == \"DOWN\"\nassert solution(\"8\") == \"UP\"\n"
    },
    {
        "number": 353,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''5\n3 4 5 6 7''') == 'UP'\nassert solution('''7\n12 13 14 15 14 13 12''') == 'DOWN'\nassert solution('''1\n8''') == '-1'\n"
    },
    {
        "number": 353,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('5\\n3 4 5 6 7\\n') == 'UP'\nassert solution('7\\n12 13 14 15 14 13 12\\n') == 'DOWN'\nassert solution('1\\n8\\n') == '-1'\nassert solution('7\\n9 9 9 9 9 9 9 9\\n') == '-1'\nassert solution('7\\n7 7 7 7 7 7 7\\n') == '-1'\n"
    },
    {
        "number": 353,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == \"UP\"\n"
    },
    {
        "number": 353,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''3\n4 5 6 7''') == 'DOWN'\nassert solution('''7\n12 13 14 15 14 13 12''') == 'UP'\nassert solution('''1\n8''') == '-1'\nassert solution('''2\n0 1''') == '-1'\nassert solution('''10\n0 1 2 3 4 5 6 7 8 9 10''') == 'UP'\n"
    },
    {
        "number": 353,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''5\n3 4 5 6 7''') == 'UP'\nassert solution('''7\n12 13 14 15 14 13 12''') == 'DOWN'\nassert solution('''1\n8''') == '-1'\nassert solution('''1\n8\n12 13 14 15 14 13 12''') == '-1'\n"
    },
    {
        "number": 354,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('a') == 'Yes'\nassert solution('ab') == 'No'\nassert solution('ak') == 'No'\nassert solution('a') == 'Yes'\nassert solution('ab') == 'No'\n"
    },
    {
        "number": 354,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"a\") == \"Yes\"\nassert solution(\"u\") == \"Yes\"\nassert solution(\"ab\") == \"No\"\nassert solution(\"au\") == \"Yes\"\nassert solution(\"a\") == \"Yes\"\n"
    },
    {
        "number": 354,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('a') == 'Yes'\nassert solution('u') == 'Yes'\nassert solution('akm') == 'No'\nassert solution('ua') == 'No'\n"
    },
    {
        "number": 354,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"a\") == \"Yes\"\nassert solution(\"a\") == \"Yes\"\nassert solution(\"a\") == \"Yes\"\nassert solution(\"a\") == \"Yes\"\nassert solution(\"a\") == \"Yes\"\n"
    },
    {
        "number": 354,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == ''\n\n'''\n"
    },
    {
        "number": 354,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('abccc', 'cccaa') == 'Yes'\nassert solution('abccc', 'cccab') == 'No'\nassert solution('abcde', 'dedcc') == 'No'\nassert solution('akm','makm') == 'Yes'\nassert solution('akm','makm') == 'Yes'\n"
    },
    {
        "number": 354,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('abc', 'ukm') == 'Yes'\nassert solution('akm', 'ua') == 'No'\nassert solution('a', 'u') == 'Yes'\n\n\n'''\n"
    },
    {
        "number": 354,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('a') == 'Yes'\nassert solution('u') == 'Yes'\nassert solution('akm') == 'No'\nassert solution('a') == 'Yes'\nassert solution('u') == 'Yes'\n"
    },
    {
        "number": 354,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('a') == 'Yes'\nassert solution('u') == 'Yes'\nassert solution('akm') == 'No'\nassert solution('akm') == 'No'\nassert solution('abc') == 'Yes'\n"
    },
    {
        "number": 354,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"akm\") == \"No\"\nassert solution(\"a\") == \"Yes\"\nassert solution(\"aKm\") == \"No\"\nassert solution(\"aBm\") == \"Yes\"\nassert solution(\"aAk\") == \"Yes\"\n"
    },
    {
        "number": 355,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('..B.....\\n..W.....\\n......B.\\n........\\n.....W..\\n......B.\\n........\\n........') == 'B'\nassert solution('........\\n...W...\\n....B..\\n.....W..\\n......B.\\n........\\n........') == 'A'\nassert solution('......B.\\n......B.\\n......B.\\n......B.\\n......B.\\n......B.\\n......B.\\n') == 'B'\nassert solution('.......\\n.......\\n.......\\n.......\\n.......\\n.......\\n.......\\n.......\\n') == 'A'\nassert solution('.......\\n.......\\n.......\\n.......\\n.......\\n.......\\n.......\\n.......\\n') == 'B'\n"
    },
    {
        "number": 355,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('........\\n........\\n.B....B.\\n....W...\\n........\\n..W.....\\n........\\n........') == 'A'\nassert solution('..B.....\\n..W.....\\n......B.\\n........\\n.....W..\\n......B.\\n........\\n........') == 'B'\nassert solution('........\\n........\\n.B....B.\\n....W...\\n........\\n..W.....\\n........\\n........') == 'A'\nassert solution('..B.....\\n..W.....\\n......B.\\n........\\n.....W..\\n......B.\\n........\\n........') == 'B'\nassert solution('........\\n........\\n.B....B.\\n....W...\\n........\\n..W.....\\n........\\n........') == 'A'\n"
    },
    {
        "number": 355,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''........\n........\n.B....B.\n....W...\n........\n..W.....\n........\n........\n''') == 'A'\nassert solution('''..B.....\n..W.....\n......B.\n........\n.....W..\n......B.\n........\n........\n''') == 'B'\nassert solution('''......B.\n........\n.....W..\n......B.\n........\n....W...\n........\n........\n''') == 'A'\nassert solution('''......B.\n........\n.....W..\n......B.\n........\n....W...\n........\n........\n''') == 'B'\nassert solution('''......B.\n........\n.....W..\n......B.\n........\n....W...\n........\n........\n''') == 'A'\n"
    },
    {
        "number": 355,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == 'A'\n\n\n\n## Other people's solutions:"
    },
    {
        "number": 355,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''\n........\n........\n.B....B.\n....W...\n........\n..W.....\n........\n........\n''') == 'A'\nassert solution('''\n..B.....\n..W.....\n......B.\n........\n.....W..\n......B.\n........\n........\n''') == 'B'\nassert solution('''\n.B....B.\n....W...\n........\n..W.....\n........\n........\n........\n.......\n''') == 'A'\nassert solution('''\n..B.....\n..W.....\n......B.\n........\n.....W..\n......B.\n........\n........\n''') == 'B'\nassert solution('''\n.B....B.\n....W...\n........\n..W.....\n........\n........\n........\n.......\n''') == 'A'\n"
    },
    {
        "number": 355,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\n    \".B....B.\\n\"\n    \"....W...\\n\"\n    \"........\\n\"\n    \"..W.....\\n\"\n    \"........\\n\"\n    \"........\\n\"\n) == \"A\"\n\nassert solution(\n    \"..B.....\\n\"\n    \"..W.....\\n\"\n    \"......B.\\n\"\n    \"........\\n\"\n    \".....W..\\n\"\n    \"......B.\\n\"\n    \"........\\n\"\n    \"........\"\n) == \"B\"\n\nassert solution(\n    \"........\\n\"\n    \"........\\n\"\n    \"..B.....\\n\"\n    \"..W.....\\n\"\n    \"......B.\\n\"\n    \"........\\n\"\n    \"........\\n\"\n    \"........\"\n) == \"A\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 355,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\n'''\n......\n......\n..B.....\n..W.....\n......\n........\n........\n''') == 'A'\n\nassert solution(\n'''\nB....B.\n....W...\n........\n..W.....\n........\n........\n''') == 'B'\n\nassert solution(\n'''\n........\n.B....B.\n....W...\n........\n..W.....\n........\n........\n''') == 'A'\n\nassert solution(\n'''\n..B.....\n..W.....\n......B.\n........\n.....W..\n......B.\n........\n........\n''') == 'B'\n\nassert solution(\n'''\n........\n.B....B.\n....W...\n........\n..W.....\n........\n........\n''') == 'A'"
    },
    {
        "number": 355,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('........\\n....W.....\\n........\\n..W.....\\n........\\n........\\n........\\n........') == 'A'\nassert solution('..B.....\\n..W.....\\n......B.\\n........\\n.....W..\\n......B.\\n........\\n........') == 'B'\n\n\"\"\"\nfrom __future__ import annotations\n\nfrom collections import defaultdict\nfrom typing import Dict, List\n"
    },
    {
        "number": 355,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"B....B.\\n....W...\\n........\\n..W.....\\n........\\n........\\n........\") == \"A\"\nassert solution(\"..B.....\\n..W.....\\n......B.\\n........\\n.....W..\\n......B.\\n........\\n........\") == \"B\"\n\n\n\n-----Best Practice-----"
    },
    {
        "number": 355,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == 'A'\n\n\"\"\""
    },
    {
        "number": 356,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 356,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''5\n11 2 3 5 7\n4\n11 7 3 7\n''') == '3'\nassert solution('''2\n1 2\n1\n100\n''') == '-1'\nassert solution('''3\n1 2 3\n3\n1 2 3\n''') == '3'\nassert solution('''3\n1 2 3\n2\n1 2 3\n''') == '-1'\nassert solution('''3\n1 2 3\n3\n1 2 3\n''') == '-1'\n"
    },
    {
        "number": 356,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"1\\n100\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n"
    },
    {
        "number": 356,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''5\n11 2 3 5 7\n4\n11 7 3 7''') == '3'\nassert solution('''2\n1 2\n1\n100''') == '-1'\nassert solution('''3\n1 2 3\n3\n1 2 3''') == '3'\nassert solution('''6\n1 4 1 5 5 3\n5\n1 1 1 1 1 1''') == '5'\nassert solution('''6\n1 4 1 5 5 3\n6\n1 1 1 1 1 1''') == '6'\n"
    },
    {
        "number": 356,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"3\\n2\\n1\") == \"3\"\nassert solution(\"3\\n3\\n1\") == \"-1\"\nassert solution(\"1\\n2\\n3\") == \"3\"\nassert solution(\"3\\n3\\n3\") == \"-1\"\nassert solution(\"1\\n2\\n3\\n4\") == \"4\"\n"
    },
    {
        "number": 356,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"5\\n11 2 3 5 7\\n4\\n11 7 3 7\\n\") == \"3\"\nassert solution(\"5\\n11 2 3 5 7\\n4\\n11 7 3 7\\n7\\n1 2 3 4 5 6\\n1\\n2 3 4 5 6\\n\") == \"5\"\nassert solution(\"5\\n11 2 3 5 7\\n4\\n11 7 3 7\\n7\\n1 2 3 4 5 6\\n1\\n2 3 4 5 6\\n3\\n4 5 6 7\\n1\\n2\\n\") == \"5\"\nassert solution(\"5\\n11 2 3 5 7\\n4\\n11 7 3 7\\n7\\n1 2 3 4 5 6\\n1\\n2 3 4 5 6\\n3\\n4 5 6 7\\n1\\n2\\n7\\n8\\n9\\n10\\n\") == \"5\"\nassert solution(\"10\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\\n3\\n3\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\\n3\\n3\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\\n3\\n3\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\\n3\\n3\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\\n3\\n3\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\\n3\\n3\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\\n3\\n3\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\\n3\\n3\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\\n3\\n3\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\\n3\\n3\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\\n3\\n3\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\\n3\\n3\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\\n3\\n3\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\\n3\\n3\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\\n3\\n3\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\\n3\\n3\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\\n3\\n3\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\\n3\\n3\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\\n3\\n3\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\\n3\\n3\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\\n3\\n3\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\\n3\\n3\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\\n3\\n3\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\\n3\\n3\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\\n3\\n3\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\\n3\\n3\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\\n3\\n3\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\\n3\\n3\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\\n3\\n3\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\\n3\\n3\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\\n3\\n3\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\\n3\\n3\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\\n3\\n3\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\\n3\\n3\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\\n3\\n3\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\\n3\\n3\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\\n3\\n3\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\\n3\\n3\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\\n3\\n3\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\\n3\\n3\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\\n3\\n3\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\\n3\\n3\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\\n3\\n3\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\\n3\\n3\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\\n3\\n3\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\\n3\\n3\\n1 2"
    },
    {
        "number": 356,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''5\n11 2 3 5 7\n4\n11 7 3 7\n''') == '3'\nassert solution('''2\n1 2\n1\n100\n''') == '-1'\nassert solution('''3\n1 2 3\n3\n1 2 3\n''') == '3'\nassert solution('''3\n1 2 3\n3\n1 2 3\n''') == '-1'\nassert solution('''8\n6 6 1\n4\n1 2 3 4 5 6 7 8\n7\n2 3 4 5 6 7 8 9 10\n''') == '3'\n"
    },
    {
        "number": 356,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('11 2 3 5 7\\n4\\n11 7 3 7\\n') == 3\nassert solution('3\\n1 2\\n1\\n100') == -1\nassert solution('11\\n1 2\\n1\\n100\\n') == -1\nassert solution('3\\n1 2\\n1\\n100\\n') == -1\nassert solution('5\\n1 2 3 4 5\\n1\\n1 2 3 4 5\\n') == 3\n"
    },
    {
        "number": 356,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''5\n11 2 3 5 7\n4\n11 7 3 7\n''') == '3'\nassert solution('''2\n1 2\n1\n100\n''') == '-1'\nassert solution('''3\n1 2 3\n3\n1 2 3\n''') == '3'\nassert solution('''4\n1 2 3 4\n4\n1 2 3 4\n''') == '-1'\n\nassert solution('''4\n10 5 7 9\n5\n10 7 9 4\n''') == '3'\n"
    },
    {
        "number": 356,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''5\n11 2 3 5 7\n4\n11 7 3 7\n''') == \"3\"\n\nassert solution('''2\n1 2\n1\n100\n''') == \"-1\"\n\nassert solution('''3\n1 2 3\n3\n1 2 3\n''') == \"3\"\n"
    },
    {
        "number": 357,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"Alex_and_broken_contest\") == \"NO\"\nassert solution(\"NikitaAndString\") == \"YES\"\nassert solution(\"Danil_and_Olya\") == \"NO\"\nassert solution(\"daniil_and_olya\") == \"NO\"\n"
    },
    {
        "number": 357,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('Alex_and_broken_contest') == 'NO'\nassert solution('Nikita_and_String') == 'YES'\nassert solution('Nikita_and_Nikita') == 'NO'\nassert solution('Alex_and_Nikita_and_Nikita') == 'YES'\nassert solution('Alex_and_broken_contest') == 'NO'\n"
    },
    {
        "number": 357,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"Alex_and_broken_contest\") == \"NO\"\nassert solution(\"NikitaAndString\") == \"YES\"\nassert solution(\"Danil_and_Olya\") == \"NO\"\nassert solution(\"DaniL_and_Olya\") == \"NO\"\nassert solution(\"Alex_And_Broken_Contest\") == \"NO\"\n"
    },
    {
        "number": 357,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(Alex_and_broken_contest) == \"NO\"\nassert solution(Nikita_and_String) == \"YES\"\nassert solution(Danil_and_Olya) == \"NO\"\nprint(\"Tests passed successfully!\")"
    },
    {
        "number": 357,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('Alex_and_broken_contest') == 'NO'\nassert solution('NikitaAndString') == 'YES'\nassert solution('Danil_and_Olya') == 'NO'"
    },
    {
        "number": 357,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('Alex_and_broken_contest') == 'NO'\nassert solution('Nikita_and_String') == 'YES'\nassert solution('Danil_and_Olya') == 'NO'\nassert solution('Alex_and_broken_contest') == 'NO'\n"
    },
    {
        "number": 357,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('Alex_and_broken_contest') == 'NO'\nassert solution('NikitaAndString') == 'YES'\nassert solution('Danil_and_Olya') == 'NO'\n\nprint(\"All set? Click \\\"Check\\\" to review your code and earn rewards!\")\n"
    },
    {
        "number": 357,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(Alex_and_broken_contest) == \"NO\"\nassert solution(Nikita_and_String) == \"YES\"\nassert solution(Nikita_and_big_string) == \"YES\"\nassert solution(Nikita_and_big_string_2) == \"YES\"\nassert solution(Nikita_and_big_string_3) == \"YES\"\n"
    },
    {
        "number": 357,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(Alex_and_broken_contest) == 'NO'\nassert solution(NikitaAndString) == 'YES'\nassert solution(Danil_and_Olya) == 'NO'\nassert solution(Hi_and_Awesome) == 'YES'\nassert solution(Is_it_Peter_and_Lily) == 'YES'\n"
    },
    {
        "number": 357,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"Alex_and_broken_contest\") == \"NO\"\nassert solution(\"NikitaAndString\") == \"YES\"\nassert solution(\"Danil_and_Olya\") == \"NO\"\nassert solution(\"Alex_and_broken_contest\") == \"NO\"\nassert solution(\"NikitaAndString\") == \"YES\"\n"
    },
    {
        "number": 358,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4\"\n\n\"\"\"\n\"\"\"\n"
    },
    {
        "number": 358,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"2 4 2\") == \"3\"\nassert solution(\"6 13 1\") == \"4\"\nassert solution(\"1 4 3\") == \"-1\"\nassert solution(\"2 6 3\") == \"3\"\nassert solution(\"5 2 4\") == \"3\"\n"
    },
    {
        "number": 358,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('2 4 2') == '3'\nassert solution('6 13 1') == '4'\nassert solution('1 4 3') == '-1'\nassert solution('1 3 2') == '-1'\n\n\n\"\"\"\n\na, b, k = map(int, stdin.split())\n\nprimes = [1, 2, 3]"
    },
    {
        "number": 358,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''2 4 2''') == '3'\nassert solution('''6 13 1''') == '4'\nassert solution('''1 4 3''') == '-1'\nassert solution('''1 9 3''') == '-1'\nassert solution('''1 9 1''') == '-1'\n"
    },
    {
        "number": 358,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''2 4 2''') == '3'\nassert solution('''6 13 1''') == '4'\nassert solution('''1 4 3''') == '-1'\n"
    },
    {
        "number": 358,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == '4'\nassert solution(stdin) == '3'\nassert solution(stdin) == '-1'\nassert solution(stdin) == '4'\nassert solution(stdin) == '3'\n"
    },
    {
        "number": 358,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('2 4 2') == '3'\nassert solution('6 13 1') == '4'\nassert solution('1 4 3') == '-1'\nassert solution('12 5 2') == '5'\nassert solution('7 13 1') == '4'\n"
    },
    {
        "number": 358,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('2 4 2') == '3'\nassert solution('6 13 1') == '4'\nassert solution('1 4 3') == '-1'\n\nassert solution('2 3 1') == '-1'\nassert solution('6 5 3') == '-1'\n"
    },
    {
        "number": 358,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"2 4 2\") == \"3\"\nassert solution(\"6 13 1\") == \"4\"\nassert solution(\"1 4 3\") == \"-1\"\n"
    },
    {
        "number": 358,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 359,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('3 2 3') == '0.5'\nassert solution('2 18 13') == '0.5'\nassert solution('4 4 4') == '0'\nassert solution('3 4 3') == '-1'\n\nassert solution('2 3 1') == '1.5'\n"
    },
    {
        "number": 359,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 359,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 359,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 359,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''2 18 13''') == '0.5'\nassert solution('''4 4 4''') == '0'\nassert solution('''3 4 3''') == '-1'\nassert solution('''2 1 2''') == '-1'\nassert solution('''1 1 2''') == '-1'\n"
    },
    {
        "number": 359,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"2 18 13\") == \"0.5\"\nassert solution(\"4 4 4\") == \"-1\"\nassert solution(\"3 4 3\") == \"-1\"\nassert solution(\"-5 12 4\") == \"0\"\nassert solution(\"-5 -12 -4\") == \"0\"\n"
    },
    {
        "number": 359,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 359,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('4 4 3') == '0.5'\nassert solution('2 18 13') == '0.5'\nassert solution('3 4 3') == '-1'\nassert solution('4 4 4') == '-1'\nassert solution('4 4 3') == '0.5'\n"
    },
    {
        "number": 359,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('2 18 13') == '0.5'\nassert solution('4 4 4') == '0'\nassert solution('3 4 3') == '-1'\nassert solution('3 8 7') == '1.142857142857142857142857143'\nassert solution('2 13 3') == '0.5'\n"
    },
    {
        "number": 359,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('2 18 13') == '0.5'\nassert solution('4 4 4') == '0'\nassert solution('3 4 3') == '-1'\n\n\n\"\"\"\nfrom math import sqrt\n"
    },
    {
        "number": 360,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 3\\n4 7\\n8 11\\n2\\n\") == \"3\"\nassert solution(\"3\\n1 4\\n5 9\\n10 12\\n9\\n\") == \"2\"\nassert solution(\"1\\n1 7\\n4\\n\") == \"1\"\nassert solution(\"1\\n1 7\\n4\\n\") == \"1\"\nassert solution(\"1\\n1 7\\n4\\n\") == \"1\"\n"
    },
    {
        "number": 360,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('1\\n1 2\\n2\\n1 2 2 3 3\\n1 2') == '3'\nassert solution('1\\n1 2\\n2\\n1 2 2 3 3\\n1 2 2\\n2') == '3'\nassert solution('1\\n1 2\\n2\\n1 2 2 3 3\\n1 2 2\\n2 2') == '3'\nassert solution('1\\n1 2\\n2\\n1 2 2 3 3\\n1 2 2\\n2 1') == '2'\nassert solution('1\\n1 2\\n2\\n1 2 2 3 3\\n1 2 2\\n2 3') == '2'\n"
    },
    {
        "number": 360,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''3''') == '3'\nassert solution('''1 3''') == '3'\nassert solution('''4 7''') == '3'\nassert solution('''8 11''') == '2'\nassert solution('''9''') == '1'\n"
    },
    {
        "number": 360,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''3\n1 3\n4 7\n8 11\n2''') == '3'\nassert solution('''3\n1 4\n5 9\n10 12\n9\n''') == '2'\nassert solution('''1\n1 7\n4\n''') == '1'\nassert solution('''3\n1 4\n5 9\n10 12\n9\n''') == '0'\nassert solution('''1\n1 7\n4\n''') == '0'\n"
    },
    {
        "number": 360,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1\\n2\\n3') == '2'\nassert solution('1\\n4\\n5\\n6\\n7') == '3'\nassert solution('1\\n2\\n3\\n4\\n5\\n6') == '1'\nassert solution('1\\n3\\n4\\n5\\n6\\n7') == '2'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12') == '3'\n"
    },
    {
        "number": 360,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10 11 12\") == \"12\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10 11 12\") == \"12\"\nassert solution(\"2 2 3 4 5 6 7 8 9 10 11 12\") == \"0\"\nassert solution(\"1 4 7 8 11 12\") == \"3\"\n"
    },
    {
        "number": 360,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('1 3\\n4 7\\n8 11\\n2\\n') == '3'\nassert solution('3\\n1 4\\n5 9\\n10 12\\n9\\n') == '2'\n\"\"\"\nfrom sys import stdin,stdout"
    },
    {
        "number": 360,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1\\n1\\n1\\n1') == '0'\nassert solution('1\\n2\\n3\\n4') == '1'\nassert solution('2\\n2\\n3\\n4') == '2'\nassert solution('1\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\"
    },
    {
        "number": 360,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdin"
    },
    {
        "number": 360,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''3''') == '3'\nassert solution('''1 3''') == '3'\nassert solution('''4 7''') == '3'\nassert solution('''8 11''') == '2'\nassert solution('''2''') == '1'\n"
    },
    {
        "number": 361,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('CODEWAITFORITFORCES') == 'YES'\nassert solution('BOTTOMCODER') == 'NO'\nassert solution('DECODEFORCES') == 'YES'\nassert solution('DOGEFORCES') == 'NO'\n\nprint(solution(input()))"
    },
    {
        "number": 361,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('CODEWAITFORITFORCES') == 'YES'\nassert solution('BOTTOMCODER') == 'NO'\nassert solution('DECODEFORCES') == 'YES'\nassert solution('DOGEFORCES') == 'NO'\n"
    },
    {
        "number": 361,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('TEMPLATE') == 'NO'\nassert solution('AT') == 'NO'\nassert solution('EMPLATE') == 'NO'\nassert solution('CODEFORCES') == 'YES'\nassert solution('CODEWAITFORITFORCES') == 'YES'\n"
    },
    {
        "number": 361,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('CODEWAITFORITFORCES') == 'YES'\nassert solution('BOTTOMCODER') == 'NO'\nassert solution('DECODEFORCES') == 'YES'\nassert solution('DOGEFORCES') == 'NO'\nprint(\"All set? Click 'Check' to review your solution and earn rewards!\")\n\"\"\"\n"
    },
    {
        "number": 361,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('') == 'NO'\nassert solution('GOD') == 'NO'\nassert solution('TEMPLATE') == 'YES'\nassert solution('DECODEFORCES') == 'YES'\nassert solution('CODEFORCES') == 'NO'\n"
    },
    {
        "number": 361,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('CODEFORCES') == 'YES'\nassert solution('BOTTOMCODER') == 'NO'\nassert solution('DECODEFORCES') == 'YES'\nassert solution('DOGEFORCES') == 'NO'\n\"\"\"\n"
    },
    {
        "number": 361,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('CODEWAITFORITFORCES') == 'YES'\nassert solution('BOTTOMCODER') == 'NO'\nassert solution('DECODEFORCES') == 'YES'\nassert solution('DOGEFORCES') == 'NO'"
    },
    {
        "number": 361,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('') == 'YES'\nassert solution('CODEFORCES') == 'YES'\nassert solution('POKEMON') == 'NO'\nassert solution('BOT') == 'NO'\nassert solution('ROBOT') == 'NO'\n"
    },
    {
        "number": 361,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('BOTTOMCODER') == 'NO'\nassert solution('CODEFORCES') == 'YES'\nassert solution('DECODEFORCES') == 'YES'\nassert solution('DOGEFORCES') == 'NO'\n"
    },
    {
        "number": 361,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('CODEWAITFORITFORCES') == 'YES'\nassert solution('BOTTOMCODER') == 'NO'\nassert solution('DECODEFORCES') == 'YES'\nassert solution('DOGEFORCES') == 'NO'\n"
    },
    {
        "number": 362,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(input()) == str(solution(input()))\n\n\"\"\"\n\nfrom functools import lru_cache\n\n@lru_cache(maxsize=None)\n"
    },
    {
        "number": 362,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdin"
    },
    {
        "number": 362,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('5') == '6'\nassert solution('4') == '18'\nassert solution('3') == '6'\n\n\"\"\"\n\n\nfrom math import factorial"
    },
    {
        "number": 362,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('3') == '6'\nassert solution('4') == '18'\nprint(solution(input()))\n\"\"\""
    },
    {
        "number": 362,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('3\\n') == '6'\nassert solution('4\\n') == '18'\n"
    },
    {
        "number": 362,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('3') == '6'\nassert solution('4') == '18'\nassert solution('1000') == '2_1018_879_424_5580_2_1008_158_975_584_5_418_879_400_355_5_256_534_823_341_4_62_879_258_71_5_22_34_4_10_179_879_879_568_33_5_2_9_2_5_879_1_7_6_22_879_41_80_70_26_9_2_6_58_60_3_88_7_10_82_8_71_11_26_7_57_98_43_5_25_41_24_18_1_21_5_1_5_2_56_3_8_3_10_1_2_3_3_4_8_20_4_3_7_3_10_1_5_7_34_4_6_3_14_1_12_8_1_8_8_1_7_8_80_5_82_23_4_8_8_9_18_7_88_22_12_9_8_9_46_1_27_9_81_4_4_6_37_5_76_1_1_3_3_1_2_3_3_1_4_5_1_1_8_1_6_5_8_2_8_18_9_7_8_7_10_1_4_1_5_2_5_1_1_9_1_5_5_1_1_2_8_18_1_4_2_6_1_3_1_1_2_2_1_6_18_1_6_2_3_1_3_3_1_2_2_9_1_1_9_8_1_9_8_1_7_9_1_4_1_5_1_1_3_2_5_1_2_7_1_7_8_1_8_1_8_3_1_8_5_1_9_6_1_8_4_1_8_9_2_8_6_1_9_4_1_8_8_1_8_9_3_1_2_2_1_4_1_2_4_2_1_7_1_2_2_1_2_7_1_9_1_1_2_7_5_1_9_1_3_1_1_4_9_1_5_7_1_8_1_4_2_1_4_1_6_1_1_3_1_1_2_1_5_1_2_6_1_7_1_1_7_1_1_2_1_1_9_1_1_6_1_1_1_5_2_9_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_"
    },
    {
        "number": 362,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('3') == '6'\nassert solution('4') == '18'\nassert solution('6') == '36'\nassert solution('7') == '49'\nassert solution('8') == '64'\n"
    },
    {
        "number": 362,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('3') == '6'\nassert solution('4') == '18'\n\n\n\n\"\"\"\n"
    },
    {
        "number": 362,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''3''') == '6'\nassert solution('''4''') == '18'\n"
    },
    {
        "number": 362,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"6\"\nassert solution(\"4\") == \"18\"\nassert solution(\"10\") == \"26\"\nassert solution(\"99\") == \"1048576\"\nassert solution(\"8\") == \"60\"\n"
    },
    {
        "number": 363,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"4\"\n"
    },
    {
        "number": 363,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == answer_01\n\"\"\""
    },
    {
        "number": 363,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('13') == '17'\nassert solution('4') == '4'\nassert solution('1') == '1'\nassert solution('10') == '2'\nassert solution('100') == '3'\n"
    },
    {
        "number": 363,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('13') == 17\nassert solution('4') == 4\n\"\"\"\nfrom math import log\n"
    },
    {
        "number": 363,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"4\"\nassert solution(\"13\") == \"17\"\nassert solution(\"4\") == \"4\"\nassert solution(\"5\") == \"5\"\n"
    },
    {
        "number": 363,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('13') == '17'\nassert solution('4') == '4'\nassert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\n"
    },
    {
        "number": 363,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''13''') == '17'\nassert solution('''4''') == '4'"
    },
    {
        "number": 363,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''13''') == '17'\nassert solution('''4''') == '4'\nassert solution('''5''') == '5'\nassert solution('''6''') == '6'\nassert solution('''7''') == '7'\n"
    },
    {
        "number": 363,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('13') == 17\nassert solution('4') == 4\n\n'''"
    },
    {
        "number": 363,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('9') == '9'\nassert solution('11') == '2'\nassert solution('111') == '3'\n"
    },
    {
        "number": 364,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('2\\n2\\n2\\n2\\n2') == '2'\nassert solution('2\\n2\\n2\\n2\\n2\\n2\\n2\\n2') == '4'\nassert solution('2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2') == '-1'\nassert solution('1\\n1\\n1\\n1\\n1') == '1'\nassert solution('1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1') == '-1'\n"
    },
    {
        "number": 364,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"4 1\") == \"2\"\nassert solution(\"5 2\") == \"4\"\nassert solution(\"3 10\") == \"4\""
    },
    {
        "number": 364,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"2 1\") == 2\nassert solution(\"5 2\") == -1\nassert solution(\"3 10\") == 4\n\n\n\n\"\"\""
    },
    {
        "number": 364,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\""
    },
    {
        "number": 364,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('4 1\\n2 1 4 2') == '2'\nassert solution('5 2\\n2 2 4 5 3') == '-1'\nassert solution('3 10\\n1 2 3') == '4'\n\n\n\"\"\"\n\nn, A = map(int, stdin.split())\nc = list(map(int, stdin.split()))\n\ncnt = [0] * n\n\nfor i in range(n):\n    cnt[i] = c[i]\n    for j in range(i):\n        if cnt[i] < cnt[j]:\n            cnt[i] = cnt[j]\n    if cnt[i] < A:\n        cnt[i] = A"
    },
    {
        "number": 364,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''4 1''') == '2'\nassert solution('''5 2''') == '-1'\nassert solution('''3 10''') == '4'\nassert solution('''1 2 3''') == '-1'\nassert solution('''1 2 4 2''') == '2'\n"
    },
    {
        "number": 364,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('1 2') == '2'\nassert solution('2 2') == '-1'\nassert solution('1 1') == '1'\nassert solution('2 3') == '-1'\nassert solution('3 3') == '-1'\n"
    },
    {
        "number": 364,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1 1\\n2 1 4 2\\n') == 2\nassert solution('5 2\\n2 2 4 5 3\\n') == -1\nassert solution('3 10\\n1 2 3\\n') == 4\nassert solution('1000000 1000000\\n1000000 1 1000000 1 1000000 1 1000000 1 1\\n') == -1\nassert solution('100000 100000\\n1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\\n') == 2\n\n\n-----Alternate solutions-----\n"
    },
    {
        "number": 364,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1 1') == '1'\nassert solution('2 1') == '1'\nassert solution('1 2') == '2'\nassert solution('2 2') == '2'\nassert solution('1 1 2') == '1'\n"
    },
    {
        "number": 364,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == '2'\nassert solution(stdin) == '-1'\nassert solution(stdin) == '4'\nassert solution(stdin) == '2'\nassert solution(stdin) == '4'\n"
    },
    {
        "number": 365,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''2 4\n1 3\n''') == 'NO'\nassert solution('''2 10\n3 3 2\n''') == 'YES'\nassert solution('''2 10\n1 3\n''') == 'NO'\nassert solution('''2 10\n1 3\n''') == 'NO'\nassert solution('''2 10\n1 3\n''') == 'NO'\n"
    },
    {
        "number": 365,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"0 1\\n1 2\\n3 3\\n4 4\") == \"NO\"\nassert solution(\"0 2\\n1 3\\n2 4\") == \"NO\"\nassert solution(\"0 2\\n1 3\\n3 2\") == \"NO\"\nassert solution(\"0 1\\n1 2\\n3 3\") == \"NO\"\nassert solution(\"0 3\\n1 2\\n2 3\") == \"NO\"\n"
    },
    {
        "number": 365,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''2 4\n1 3\n''') == 'NO'\n\nassert solution('''3 10\n3 3 2\n''') == 'YES'\n\nassert solution('''2 10\n1 3\n''') == 'NO'\n\nassert solution('''3 10\n3 3 2\n''') == 'NO'\n\nassert solution('''2 10\n1 3\n''') == 'NO'"
    },
    {
        "number": 365,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\n'''2 4\n1 3\n''') == 'NO'\n\nassert solution(\n'''3 10\n3 3 2\n''') == 'YES'\n"
    },
    {
        "number": 365,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('2\\n1 3') == 'NO'\nassert solution('2\\n1 3\\n2 4') == 'NO'\nassert solution('3\\n3 3 2') == 'YES'\nassert solution('2\\n3 3 2') == 'NO'\nassert solution('2\\n1 2\\n3 3') == 'YES'\n"
    },
    {
        "number": 365,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''2 4\n1 3\n''') == 'NO'\nassert solution('''2 10\n3 3 2\n''') == 'YES'\nassert solution('''2 10\n1 3\n''') == 'NO'\nassert solution('''4 11\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4"
    },
    {
        "number": 365,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdin[1:]\n\nimport sys\nassert sys.argv[1:] == [sys.argv[0]]"
    },
    {
        "number": 365,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''2 4\n1 3''') == 'NO'\nassert solution('''2 10\n3 3 2''') == 'YES'\nassert solution('''2 10\n1 3''') == 'NO'\nassert solution('''2 10\n3 3 2''') == 'YES'\nassert solution('''2 10\n1 3''') == 'NO'\n"
    },
    {
        "number": 365,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('2 4\\n1 3\\n') == 'NO'\nassert solution('3 10\\n3 3 2\\n') == 'YES'\nassert solution('2 10\\n1 3\\n') == 'NO'\nassert solution('2 10\\n1 3\\n') == 'NO'\nassert solution('2 2\\n1 3\\n') == 'YES'\n"
    },
    {
        "number": 365,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"2 10\\n1 3\") == \"NO\"\nassert solution(\"3 10\\n3 3 2\") == \"YES\"\nassert solution(\"2 10\\n1 3\") == \"NO\"\nassert solution(\"3 10\\n3 3 2\") == \"YES\"\nassert solution(\"3 10\\n3 3 2\") == \"NO\"\n"
    },
    {
        "number": 366,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == expected\n"
    },
    {
        "number": 366,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(input()) == \"\"\n"
    },
    {
        "number": 366,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('5 11') == '3'\nassert solution('6 16') == '3'\nassert solution('5 11') == '3'\nassert solution('6 16') == '3'\nassert solution('2 2') == '2'\n"
    },
    {
        "number": 366,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1 2') == '3'\nassert solution('5 11') == '3'\nassert solution('6 16') == '3'\nassert solution('5 1') == '-1'\nassert solution('6 1') == '-1'\n"
    },
    {
        "number": 366,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('5 11') == '3'\nassert solution('6 16') == '3'\nprint(solution(stdin))\n"
    },
    {
        "number": 366,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(input(\"\")) == \"\"\n\n\n\"\"\""
    },
    {
        "number": 366,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"3 4\") == \"3\"\nassert solution(\"3 5\") == \"2\"\nassert solution(\"5 11\") == \"3\"\nassert solution(\"6 16\") == \"3\"\nassert solution(\"5 10\") == \"1\"\n"
    },
    {
        "number": 366,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('5 11') == '3'\nassert solution('6 16') == '3'\nprint(solution(stdin))\n\n'''"
    },
    {
        "number": 366,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('5 11') == '3'\nassert solution('6 16') == '3'\nassert solution('1 10') == '0'\nassert solution('2 19') == '0'\nassert solution('3 18') == '1'\n"
    },
    {
        "number": 366,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1 1') == '3'\nassert solution('1 2') == '5'\nassert solution('1 5') == '6'\nassert solution('3 5') == '3'\nassert solution('3 1') == '2'\n"
    },
    {
        "number": 367,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(input()) == \"abba\"\nassert solution(input()) == \"abcba\"\nassert solution(input()) == \"defgh\"\nassert solution(input()) == \"abcdgf\"\nassert solution(input()) == \"dddhdhd\"\n"
    },
    {
        "number": 367,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('aabc') == 'abbc'\nassert solution('aabcd') == 'abcba'\nassert solution('abbc') == 'abbc'\nassert solution('abcd') == 'bacd'\n"
    },
    {
        "number": 367,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(aabc) == \"abba\"\nassert solution(aabcd) == \"abcba\"\nassert solution(\"aabcd\") == \"abcba\"\n"
    },
    {
        "number": 367,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''aabc''') == 'abba'\nassert solution('''aabcd''') == 'abcba'"
    },
    {
        "number": 367,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"aabc\") == \"abba\"\nassert solution(\"aabcd\") == \"abcba\"\n"
    },
    {
        "number": 367,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"aabc\") == \"abba\"\nassert solution(\"aabcd\") == \"abcba\"\nassert solution(\"tatata\") == \"ttataa\"\nassert solution(\"tacacac\") == \"tacacac\"\nassert solution(\"tacgac\") == \"tacgac\"\n"
    },
    {
        "number": 367,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(aabc) == \"abba\"\nassert solution(aabcd) == \"abcba\"\nassert solution(aabbccdd) == \"abbccdd\"\nassert solution(\"abac\") == \"abac\"\nassert solution(\"ac\") == \"ac\"\n"
    },
    {
        "number": 367,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"aabc\") == \"abba\"\nassert solution(\"aabcd\") == \"abcba\"\nassert solution(\"abdca\") == \"abdcba\"\nassert solution(\"zolpidem\") == \"zolpidem\"\nassert solution(\"abab\") == \"baab\"\n"
    },
    {
        "number": 367,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('aabc') == 'abba'\nassert solution('aabcd') == 'abcba'\nassert solution('abcd') == 'dcba'\nassert solution('abcd') == 'dcba'\nassert solution('abb') == 'bbba'\n"
    },
    {
        "number": 367,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('aabc') == 'abba'\nassert solution('aabcd') == 'abcba'\nassert solution('abcdabcd') == 'abcba'\nassert solution('abcdabcdd') == 'abcba'\nassert solution('abcdabcdddd') == 'abcba'\n"
    },
    {
        "number": 368,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('rnbqkbnr') == 'White'\nassert solution('rnbqkbnrpppppppp') == 'Draw'\nassert solution('rnbqkbnrppppppppp') == 'Black'\nassert solution('rnbqkbnrpppppppppq') == 'White'\nassert solution('rnbqkbnrpppppppppqppp') == 'Draw'\n"
    },
    {
        "number": 368,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('rnbqkbnr') == 'Black'\nassert solution('pppppppp') == 'Draw'\nassert solution('rnbqkbnr') == 'Black'\nassert solution('rnbqkbnr') == 'Draw'\nassert solution('rppppppr') == 'White'\n"
    },
    {
        "number": 368,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''QK''') == 'White'\nassert solution('''rnbqkbnr''') == 'Draw'\nassert solution('''rppppppr''') == 'Black'\nassert solution('''rnbqkbnr''') == 'Black'\nassert solution('''QKBWBcK''') == 'White'\n"
    },
    {
        "number": 368,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('rnbqkbnr') == 'White'\nassert solution('rnbqkbnr') == 'Black'\nassert solution('pppppppp') == 'Draw'\nassert solution('rnbqkbnr') == 'Draw'\nassert solution('rppppppr') == 'Black'\n"
    },
    {
        "number": 368,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('rnbqkbnr\\n'\n'pppppppp\\n'\n'........\\n'\n'........\\n'\n'........\\n'\n'........\\n'\n'PPPPPPPP\\n'\n'RNBQKBNR') == \"White\"\n\nassert solution('rnbqkbnr\\n'\n'pppppppp\\n'\n'........\\n'\n'........\\n'\n'........\\n'\n'PPPPPPPP\\n'\n'rnbqkbnr') == \"Draw\"\n\nassert solution('rnbqkbnr\\n'\n'pppppppp\\n'\n'......p\\n'\n'.....P\\n'\n'........\\n'\n'.......P\\n'\n'PPPPPPPP\\n'\n'RNBQKBNR') == \"Black\"\n\nassert solution('rnbqkbnr\\n'\n'pppppppp\\n'\n'..p...P\\n'\n'...p..P\\n'\n'...P.P.\\n'\n'...P.P.\\n'\n'PPPPPPPP\\n'\n'rnbqkbnr') == \"Draw\"\n\nassert solution('rnbqkbnr\\n'\n'pppppppp\\n'\n'p..P...\\n'\n'P...P...\\n'\n'...P.P.\\n'\n'P..P...\\n'\n'PPPPPPPP\\n'\n'rnbqkbnr') == \"Black\""
    },
    {
        "number": 368,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('rnbqkbnr') == 'White'\nassert solution('rnbqkbnr') == 'Black'\nassert solution('rnbqkbnr') == 'Draw'\nassert solution('rnbqkbnr') == 'Draw'\nassert solution('rnbqkbnr') == 'Draw'\n"
    },
    {
        "number": 368,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('rnbqkbnr') == 'White'\nassert solution('pppppppp') == 'Draw'\nassert solution('rnbqkbnr') == 'Black'\nassert solution('rnbqkbnr') == 'Draw'\nassert solution('rnbqkbnr') == 'Draw'\n"
    },
    {
        "number": 368,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR\") == \"White\"\nassert solution(\"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR\") == \"Black\"\nassert solution(\"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR\") == \"Draw\"\nassert solution(\"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKB1R\") == \"White\"\nassert solution(\"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKB1R\") == \"Black\"\n"
    },
    {
        "number": 368,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('rnbqkbnr\\n'\n'pppppppp\\n'\n'........\\n'\n'........\\n'\n'........\\n'\n'PPPPPPPP\\n'\n'RNBQKBNR\\n') == 'White'\nassert solution('rnbqkbnr\\n'\n'pppppppp\\n'\n'........\\n'\n'........\\n'\n'........\\n'\n'PPPPPPPP\\n'\n'B...Q...\\n') == 'Black'\nassert solution('rnbqkbnr\\n'\n'pppppppp\\n'\n'.......\\n'\n'.......\\n'\n'.......\\n'\n'PPPPPPPP\\n'\n'RBKQKBNR\\n') == 'Draw'\nassert solution('rnbqkbnr\\n'\n'pppppppp\\n'\n'........\\n'\n'........\\n'\n'PPPPPPPP\\n'\n'RNBQKBNR\\n') == 'Draw'\nassert solution('rnbqkbnr\\n'\n'pppppppp\\n'\n'r.......\\n'\n'r.......\\n'\n'r.......\\n'\n'PPPPPPPP\\n'\n'B...Q...\\n') == 'Draw'\n"
    },
    {
        "number": 368,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''QK...\n........\n........\n........\n........\n........\n........\n...rk...\n''') == 'White'\nassert solution('''rnbqkbnr\npppppppp\n........\n........\n........\n........\nPPPPPPPP\nRNBQKBNR\n''') == 'Draw'\nassert solution('''rppppppr\n...k....\n........\n........\n........\n........\nK...Q...\n........\n''') == 'Black'\nassert solution('''rnbqkbnr\npppppppp\n...k....\n........\n........\n........\n........\nPPPPPPPP\nRNBQKBNR\n''') == 'Draw'\nassert solution('''rnbqk1nr\npppppppp\n...k....\n........\n........\n........\n........\nPPPPPPPP\nRNBQKBNR\n''') == 'White'\n"
    },
    {
        "number": 369,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"0 0\\n01101110\") == \"1 3 2 3\"\nassert solution(\"0 0\\n10001001\") == \"-1\"\nassert solution(\"0 0\\n01010101\") == \"-1\"\nassert solution(\"0 0\\n10010010\") == \"-1\"\nassert solution(\"0 0\\n10010011\") == \"-1\"\n"
    },
    {
        "number": 369,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"9 3\\n0001000100\\n\") == \"1 3 2 3\\n\"\nassert solution(\"3 3\\n000000000\\n\") == \"-1\\n\"\nassert solution(\"3 3\\n0001000100\\n\") == \"1 3 2 3\\n\"\nassert solution(\"3 4\\n0011100000\\n\") == \"1 3 4 5\\n\"\nassert solution(\"3 4\\n0011100000\\n\") == \"1 3 4 5\\n\"\n"
    },
    {
        "number": 369,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('11 10') == '1 3 2 3'\nassert solution('01 10') == '1 3'\nassert solution('11 10 11') == '1 3 2 3'\nassert solution('00 10 11') == '1 3'\nassert solution('01 10 10') == '1 2 3'\n"
    },
    {
        "number": 369,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"8 2\") == '1 3 2 3'\nassert solution(\"0 1\") == '-1'\nassert solution(\"1 1\") == '-1'\nassert solution(\"1 1 1\") == '-1'\nassert solution(\"0101\") == '1 3 2 3'\n"
    },
    {
        "number": 369,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('9 3\\n0001000100') == '1 3 2 3'\nassert solution('9 5\\n0001000100') == '1 3 2 4'\nassert solution('9 11\\n0001000100') == '1 3 2 4 5'\nassert solution('9 11\\n0101111100') == '1 3 2 4 5 6'\nassert solution('9 11\\n0011111111') == '-1'\n"
    },
    {
        "number": 369,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''9 3\n0001000100\n''') == '1 3 2 3'\nassert solution('''9 3\n0001000100\n''') == '1 3 2 3'\nassert solution('''9 2\n001101\n''') == '1'\nassert solution('''9 3\n0001000100\n''') == '1 3 2 3'\nassert solution('''9 2\n001101\n''') == '1'\n"
    },
    {
        "number": 369,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''9 3\n0001000100\n''') == '1 3 2 3'\n\nassert solution('''9 4\n0001000100\n0001000\n''') == '1 2 3'\n\nassert solution('''8 2\n0001000100\n''') == '1 2'\n\nassert solution('''1 0\n0\n''') == '1'\n\nassert solution('''2 1\n00\n''') == '-1'"
    },
    {
        "number": 369,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"9 3\") == \"1 3 2 3\"\nassert solution(\"1 3\") == \"1 3\"\nassert solution(\"9 4\") == \"1 3 2 4\"\nassert solution(\"111 1\") == \"-1\"\nassert solution(\"0 1\") == \"1\"\n"
    },
    {
        "number": 369,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"9 3\\n0001000100\") == '1 3 2 3'\nassert solution(\"1 1\\n1\") == '-1'\nassert solution(\"10 9\\n0000000000000111111111\") == '3 4 5 6 7 8 9'\nassert solution(\"3 9\\n0 0 0\") == '1 3 2'\nassert solution(\"5 9\\n0 0 1 0\") == '1 4 5 6 7'\n"
    },
    {
        "number": 369,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('9 3') == '1 3 2 3'\nassert solution('5 2') == '1 2 -1'\nassert solution('1 1') == '-1'\nassert solution('11 10') == '-1'\nassert solution('0110') == '1 2 3 4'\n"
    },
    {
        "number": 370,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1\\n-1 2\\n') == '3\\n7 4\\n2 10'\nassert solution('1\\n2 3\\n') == '-1 2'\nassert solution('1\\n1 2\\n') == '1 2'\nassert solution('1\\n1 0\\n') == '1 0'\nassert solution('1\\n-1 -1\\n') == '-1 -1'\n"
    },
    {
        "number": 370,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"1\\n3\\n4\") == \"\"\nassert solution(\"1\\n2\\n4\\n2\\n3\") == \"2 3\"\nassert solution(\"2\\n2\\n2\\n2\\n2\") == \"-1\"\nassert solution(\"1\\n5\\n2\\n2\\n2\") == \"-1\"\nassert solution(\"1\\n1\\n5\\n2\\n2\\n2\") == \"-1\"\n"
    },
    {
        "number": 370,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"11\\n-1 2\") == \"3\\n7 4\\n2 10\"\nassert solution(\"11\\n1 2\") == \"-1 2\"\nassert solution(\"11\\n-1 2\\n1 2\") == \"3\\n7 4\\n2 10\"\nassert solution(\"11\\n-1 2\\n1 2\\n3 2\") == \"3\\n7 4\\n2 10\"\nassert solution(\"11\\n-1 2\\n1 2\\n-3 2\") == \"-1 2\"\n"
    },
    {
        "number": 370,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\""
    },
    {
        "number": 370,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdin"
    },
    {
        "number": 370,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('') is None\nassert solution('2') == '2'\nassert solution('11') == '3 7 4 2 10'\nassert solution('-1 2') == '3 7 4 2 10'\nassert solution('-11 2') == '3 7 4 2 10'\n"
    },
    {
        "number": 370,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('11\\n-1 2') == '3\\n7 4\\n2 10\\n-1 2'\nassert solution('1\\n0 0') == '-1 -1'\nassert solution('0\\n0 0') == '-1 -1'\nassert solution('10\\n10 10') == '-1 -1'\nassert solution('1\\n1 1') == '0 0'\n"
    },
    {
        "number": 370,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('11\\n-1 2') == '3\\n7 4\\n2 10\\n-1 2'\nassert solution('11\\n-1 1') == '3\\n4 2\\n2 10\\n-1 1'\nassert solution('11\\n0 0') == '3\\n4 4\\n2 10\\n-1 1'\nassert solution('11\\n2 2') == '3\\n4 4\\n2 10\\n-1 1'\nassert solution('11\\n1 2') == '3\\n7 4\\n2 10\\n-1 1'\n"
    },
    {
        "number": 370,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == \"3\\n7 4\\n2 10\"\n\"\"\""
    },
    {
        "number": 370,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1\\n2\\n') == '3\\n7 4\\n2 10\\n-1 2'\nassert solution('11\\n-1 2\\n') == '3\\n7 4\\n2 10\\n-1 2'\nassert solution('11\\n10\\n') == '3\\n7 4\\n2 10\\n-1 2'\nassert solution('11\\n9\\n') == '3\\n7 4\\n2 10\\n-1 2'\nassert solution('11\\n10\\n') == '3\\n7 4\\n2 10\\n-1 2'\n"
    },
    {
        "number": 371,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1') == '8'\nassert solution('8') == '54'\nassert solution('10') == '-1'\n"
    },
    {
        "number": 371,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(input()) == ''\n\"\"\"\n"
    },
    {
        "number": 371,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"8\"\nassert solution(\"8\") == \"54\"\nassert solution(\"10\") == \"-1\"\nassert solution(\"10\") == \"54\"\nassert solution(\"10\") == \"54\"\n"
    },
    {
        "number": 371,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"8\"\nassert solution(\"8\") == \"54\"\nassert solution(\"10\") == \"-1\"\n\n\n\"\"\"\n\n\"\"\"\n---2nd attempt: 6 minutes\n\nThe answer is: 1820\n\n\"\"\""
    },
    {
        "number": 371,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('8') == '8'\nassert solution('10') == '-1'\nassert solution('9') == '-1'\nassert solution('4') == '4'\nassert solution('5') == '-1'\n"
    },
    {
        "number": 371,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"8\"\nassert solution(\"8\") == \"54\"\nassert solution(\"10\") == \"-1\"\n\n\"\"\""
    },
    {
        "number": 371,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(input()) == output\n"
    },
    {
        "number": 371,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1') == '8'\nassert solution('8') == '54'\nassert solution('10') == '-1'\nassert solution('10') == '54'\n"
    },
    {
        "number": 371,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''1\n''') == '8'\nassert solution('''8\n''') == '54'\nassert solution('''10\n''') == '-1'\nassert solution('''2\n4\n''') == '-1'\nassert solution('''1\n8\n''') == '54'\n"
    },
    {
        "number": 371,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''1''') == '8'\nassert solution('''8''') == '54'\nassert solution('''10''') == '-1'\n\n\n\n\n\n'''\n"
    },
    {
        "number": 372,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"0 0 4\") == \"7.25298806364175601379\"\nassert solution(\"0 0 5\") == \"0.00000000000000000000\"\nprint(solution(stdin))\n\"\"\"\n"
    },
    {
        "number": 372,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''0 0 4''') == '7.25298806364175601379'\nassert solution('''0 0 5''') == '0.00000000000000000000'\nassert solution('''7.25298806364175601379\n0 0 5''') == '0.00000000000000000000'\nassert solution('''0 0 4\n6 0 4''') == '7.25298806364175601379'\nassert solution('''7.25298806364175601379\n0 0 5''') == '0.00000000000000000000'\n"
    },
    {
        "number": 372,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('0 0 4\\n6 0 4\\n') == '7.25298806364175601379'\nassert solution('0 0 5\\n11 0 5\\n') == '0.00000000000000000000'\nprint(solution('0 0 5\\n11 0 5\\n'))\n"
    },
    {
        "number": 372,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''0 0 4\n6 0 4''') == '7.25298806364175601379'\nassert solution('''0 0 5\n11 0 5''') == '0.00000000000000000000'\nassert solution('''3 2 3\n5 5 4\n''') == '1.0'\nassert solution('''2 2 3\n2 2 1\n''') == '0.5'\nassert solution('''2 2 3\n1 3 1\n''') == '2.2'\n"
    },
    {
        "number": 372,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"0 0 4\\n6 0 4\") == \"7.25298806364175601379\"\nassert solution(\"0 0 5\\n11 0 5\") == \"0.00000000000000000000\"\nprint(\"Tests passed successfully!\")\n"
    },
    {
        "number": 372,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''0 0 4''') == '''7.25298806364175601379'''\nassert solution('''0 0 5''') == '''0.00000000000000000000'''\n\nassert solution('''0 0 4''') == '''7.25298806364175601379'''\nassert solution('''0 0 5''') == '''0.00000000000000000000'''\n\nassert solution('''0 1 4''') == '''7.5390583508578403466'''\n"
    },
    {
        "number": 372,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''0 0 4''') == '7.25298806364175601379'\nassert solution('''6 0 4''') == '7.25298806364175601379'\nassert solution('''0 0 5''') == '0.00000000000000000000'\nassert solution('''11 0 5''') == '0.00000000000000000000'\n'''\n"
    },
    {
        "number": 372,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 372,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''0 0 4''') == '7.25298806364175601379'\nassert solution('''0 0 5''') == '0.00000000000000000000'\nassert solution('''6 0 4''') == '7.25298806364175601379'\nassert solution('''11 0 5''') == '0.00000000000000000000'\nassert solution('''0 0 4''') == '7.25298806364175601379'\n"
    },
    {
        "number": 372,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''0 0 4''') == '7.25298806364175601379'\nassert solution('''0 0 5''') == '0.00000000000000000000'\n\n'''"
    },
    {
        "number": 373,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 373,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('') == None\nassert solution('8') == 1\nassert solution('1') == 1\nassert solution('2') == 1\nassert solution('3') == 2\n"
    },
    {
        "number": 373,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\n'8'\n) == '1'\nassert solution(\n'1'\n) == '1'\n\n\n\"\"\"\n"
    },
    {
        "number": 373,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\n"
    },
    {
        "number": 373,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''8''') == '1'\nassert solution('''1''') == '1'\nassert solution('''10''') == '1'\nassert solution('''100''') == '1'\nassert solution('''1000000001''') == '1'\n"
    },
    {
        "number": 373,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('8') == 1\nassert solution('1') == 1\nassert solution('2') == 1\nassert solution('3') == 3\nassert solution('4') == 1\n"
    },
    {
        "number": 373,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"1\") == 1\nassert solution(\"2\") == 2\nassert solution(\"8\") == 1\nassert solution(\"10\") == 2\nassert solution(\"10\") == 2\n"
    },
    {
        "number": 373,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('') == '1'\nassert solution('1') == '1'\nassert solution('2') == '3'\nassert solution('3') == '4'\nassert solution('4') == '5'\n"
    },
    {
        "number": 373,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('8') == '1'\nassert solution('1') == '1'\nassert solution('0') == '0'\nassert solution('3') == '2'\nassert solution('7') == '2'\n"
    },
    {
        "number": 373,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('8') == 1\nassert solution('1') == 1\nassert solution('100000000000000') == 1\nassert solution('1000000000000000') == 1\nassert solution('1000000000000000000') == 1\n"
    },
    {
        "number": 374,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 374,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('3\\n1 1\\n3 1 2') == '3'\nassert solution('3\\n1 1\\n3 1 3') == '4'\nassert solution('3\\n1 1\\n3 1 3') == '4'\nassert solution('3\\n1 1\\n3 1 3') == '4'\nassert solution('3\\n1 1\\n3 1 3') == '4'\n\n\n-----\n\n\"\"\"\n"
    },
    {
        "number": 374,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 1\\n3 1 3\") == \"3\"\nassert solution(\"4\\n1 1 1 1\\n3 1 3 3 3 3 3\") == \"4\"\nassert solution(\"4\\n1 1 1 1\\n1 1 1 1 1 1 1 1\") == \"0\"\n\n\n-----\n\n\"\"\"\n"
    },
    {
        "number": 374,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n\nn = int(input())\nroads = list(map(int, input().split()))\nnum_citizens = list(map(int, input().split()))"
    },
    {
        "number": 374,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 1\\n3 1 3\\n\") == 3\nassert solution(\"3\\n1 1\\n3 1 3\\n\") == 4\nassert solution(\"3\\n1 1\\n3 1 3\\n\") == 4\nassert solution(\"3\\n1 1\\n3 1 3\\n\") == 4\nassert solution(\"5\\n1 2 3 4 5\\n0 1 2 0 4 3\\n\") == 4\n"
    },
    {
        "number": 374,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == expected_output\n\n\"\"\"\n"
    },
    {
        "number": 374,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\n'''3\n1 1\n3 1 3\n''') == '4'\n\nassert solution(\n'''3\n1 1\n3 1 3\n''') == '4'\n'''\nassert solution(\n'''\n''') == '-1'\n\nassert solution(\n'''\n''') == '-1'\n\nassert solution(\n'''\n''') == '-1'"
    },
    {
        "number": 374,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('3\\n1 1\\n3 1 2') == '3'\nassert solution('3\\n1 1\\n3 1 3') == '4'\nassert solution('3\\n1 1\\n3 1 3\\n3 1 3') == '5'\nassert solution('3\\n1 1\\n3 1 3\\n3 1 3\\n3 1 3') == '6'\nassert solution('3\\n1 1\\n3 1 3\\n3 1 3\\n3 1 3\\n3 1 3') == '7'\n"
    },
    {
        "number": 374,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''3''') == '3'\nassert solution('''3\n1 1\n3 1 3''') == '4'\nassert solution('''5\n1 2 1 2 1\n2 1 1 1 1 1\n3 1 1 1 1 1\n2 1 1 1 1 1\n1 1 1 1 1 1''') == '1'\nassert solution('''3\n1 2 1 2 1\n2 1 1 1 1 1\n3 1 1 1 1 1''') == '0'\nassert solution('''10\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1''') == '0'\n"
    },
    {
        "number": 374,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == \"4\"\n\n\"\"\"\n\n\"\"\"\nComplete the code so that it does the following:\n\n* Reads a line of input from stdin, $n$\n* Finds the number of citizens on each square, $a_1, a_2, \\dots, a_n$\n* Finds the number of citizens on the main square, $a_0$\n* Finds the number of 1-way roads, $p_1, p_2, \\dots, p_n$\n* Finds the number of 1-way roads that connect the main square to the rest of the city, $p_0$\n* Finds the number of 2-way roads, $q_1, q_2, \\dots, q_n$\n* Finds the number of 2-way roads that connect the main square to the rest of the city, $q_0$\n* Finds the number of cities, $n$\n* Finds the number of 1-way roads that connect the cities to the main square, $n-q_0$\n* Finds the number of 1-way roads that connect the cities to the rest of the city, $n-q_0-q_1$\n* Finds the number of 2-way roads that connect the cities to the rest of the city, $n-q_0-q_1-q_2$\n* Finds the number of 2-way roads that connect the cities to the rest of the city, $n-q_0-q_1-q_2-q_3$\n* Finds the number of 2-way roads that connect the cities to the main square, $n-q_0-q_1-q_2-q_3-q_4$\n* Finds the number of 2-way roads that connect the cities to the rest of the city, $n-q_0-q_1-q_2-q_3-q_4-q_5$\n* Finds the number of 2-way roads that connect the cities to the rest of the city, $n-q_0-q_1-q_2-q_3-q_4-q_5-q_6$\n* Finds the number of 2-way roads that connect the cities to the main square, $n-q_0-q_1-q_2-q_3-q_4-q_5-q_6-q_7$\n* Finds the number of 2-way roads that connect the cities to the rest of the city, $n-q_0-q_1-q_2-q_3-q_4-q_5-q_6-q_7-q_8$\n* Finds the number of 2-way roads that connect the cities to the rest of the city, $n-q_0-q_1-q_2-q_3-q_4-q_5-q_6-q_7-q_8-q_9$\n* Finds the number of 2-way roads that connect the cities to the main square, $n-q_0-q_1-q_2-q_3-q_4-q_5-q_6-q_7-q_8-q_9-q_10$\n* Finds the number of 2-way roads that connect the cities to the rest of the city, $n-q_0-q_1-q_2-q_3-q_4-q_5-q_6-q_7-q_8-q_9-q_10-q_11$\n* Finds the number of 2-way roads that connect the cities to the rest of the city, $n-q_0-q_1-q_2-q_3-q_4-q_5-q_6-q_7-q_8-q_9-q_10-q_11-q_12$\n* Finds the number of 2-way roads that connect the cities to the main square, $n-q_0-q_1-q_2-q_3-q_4-q_5-q_6-q_7-q_8-q_9-q_10-q_11-q_12-q_13$\n* Finds the number of 2-way roads that connect the cities to the rest of the city, $n-q_0-q_1-q_2-q_3-q_4-q_5-q_6-q_7-q_8-q_9-q_10-q_11-q_12-q_13-q_14$\n* Finds the number of 2-way roads that connect the cities to the rest of the city, $n-q_0-q_1-q_2-q_3-q_4-q_5-q_6-q_7-q_8-q_9-q_10-q_11-q_12-q_13-q_14-q_15$\n* Finds the number of 2-way roads that connect the cities to the main square, $n-q_0-q_1-q_2-q_3-q_4-q_5-q_6-q_7-q_8-q_9-q_10-q_11-q_12-q_13-q_14-q_15-q_16$\n* Finds the number of 2-way roads that connect the cities to the rest of the city, $n-q_0-q_1-q_2-q_3-q_4-q_5-q_6-q_7-q_8-q_9-q_10-q_11-q_12-q_13-q_14-q_15-q_16-q_17$\n* Finds the number of 2-way roads that connect the cities to the rest of the city, $n-q_0-q_1-q_2-q_3-q_4-q_5-q_6-q_7-q_8-q_9-q_10-q_11-q_12-q_13-q_14-q_15-q_16-q_17-q_18$\n* Finds the number of 2"
    },
    {
        "number": 375,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('reading\\ntrading\\n') == '1'\nassert solution('sweet\\sheep\\n') == '0'\nassert solution('toy\\ntry\\n') == '2'\nassert solution('toy\\ntry\\n') == '2'\nassert solution('trading\\ntry\\n') == '1'\n"
    },
    {
        "number": 375,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''7\nreading\ntrading\n''') == '1'\n\nassert solution('''5\nsweet\nsheep\n''') == '0'\n\nassert solution('''3\ntoy\ntry\n''') == '2'\n\nassert solution('''3\ntoy\ntry\n''') == '2'\n\nassert solution('''3\ntoy\ntrading\n''') == '0'"
    },
    {
        "number": 375,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"7\\nreading\\ntrading\\n\") == \"1\"\nassert solution(\"5\\nsweet\\nsheep\\n\") == \"0\"\nassert solution(\"3\\ntoy\\ntry\\n\") == \"2\"\nprint(solution(stdin))\n\n\"\"\"\n"
    },
    {
        "number": 375,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('7\\nreading\\ntrading\\n') == '1\\n'\nassert solution('5\\nsweet\\nsheep\\n') == '0\\n'\nassert solution('3\\ntoy\\ntry\\n') == '2\\n'\n\nprint('All tests passed successfully')"
    },
    {
        "number": 375,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('reading\\ntrading\\n'): '1\\n'\nassert solution('sweet\\nsheep\\n'): '0\\n'\nassert solution('toy\\ntry\\n'): '2\\n'\nassert solution('sort\\nsort\\n'): '0\\n'\nassert solution('rent\\nrent\\n'): '2\\n'\n"
    },
    {
        "number": 375,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('reading') == 'treading'\nassert solution('trading') == 'troy'\nassert solution('toy') == 'try'\nassert solution('try') == 'try'\nassert solution('sweet') =='sheep'\n"
    },
    {
        "number": 375,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''reading\ntrading\n''') == '1'\nassert solution('''toy\ntry\n''') == '2'\nassert solution('''sweet\nsheep\n''') == '0'\nassert solution('''toy\ntroy\n''') == '2'\nassert solution('''reading\ntoy\n''') == '2'\n"
    },
    {
        "number": 375,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('7\\nreading\\ntrading\\n') == '1\\n'\nassert solution('5\\nsweet\\nsheep\\n') == '0\\n'\nassert solution('3\\ntoy\\ntry\\n') == '2\\n'\n\nprint('solution is correct')\n"
    },
    {
        "number": 375,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('reading\\ntrading\\n'\n'7\\ntoy\\ntry\\n'\n'5\\nsweet\\nsheep\\n'\n'3\\ntoy\\ntry\\n'\n'5\\ntry\\ntry\\n') == '1\\n0\\n2'\nassert solution('toy\\ntry\\n'\n'5\\ntry\\ntry\\n'\n'5\\ntry\\ntry\\n') == '0\\n0\\n2'\nassert solution('toy\\ntry\\n'\n'5\\ntry\\ntry\\n'\n'5\\ntry\\ntry\\n') == '0\\n0\\n2'\nassert solution('toy\\ntry\\n'\n'5\\ntry\\ntry\\n'\n'5\\ntry\\ntry\\n') == '0\\n0\\n2'\nassert solution('toy\\ntry\\n'\n'5\\ntry\\ntry\\n'\n'5\\ntry\\ntry\\n') == '0\\n0\\n2'\n"
    },
    {
        "number": 375,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(input) == expect\n\"\"\"\n"
    },
    {
        "number": 376,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"1 2 3 4 5\") == 5\nassert solution(\"1 2\") == 3\nassert solution(\"1 2 2 2 2 2\") == 5\nassert solution(\"1 2 3 4 5\") == 5\nassert solution(\"1 2 1 3 2 2\") == 5\n"
    },
    {
        "number": 376,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''5\n1 2 3 4 5\n1 2\n2 3\n3 4\n4 5\n''') == '5'\nassert solution('''7\n38 -29 87 93 39 28 -55\n1 2\n2 5\n3 2\n2 4\n1 7\n7 6\n''') == '93'\nassert solution('''5\n1 2 7 6 7\n1 5\n5 3\n3 4\n2 4\n''') == '8'\nassert solution('''2\n1 1\n2 2\n''') == '2'\nassert solution('''3\n1 2 3\n1 2\n1 3\n2 3\n''') == '3'\n"
    },
    {
        "number": 376,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1\\n1 2\\n2 3\\n3 4\\n4 5') == '5'\nassert solution('5\\n1 2\\n2 3\\n3 4\\n4 5') == '5'\nassert solution('7\\n38 -29 87 93 39 28 -55') == '93'\nassert solution('5\\n1 2\\n2 5\\n3 2\\n2 4\\n1 7\\n7 6') == '8'\n\n\n-----\n\nThis problem was recently asked by Uber.\n\nGiven a matrix of 0s and 1s, find the number of islands. An island is a vertically or horizontally connected region of 1s.\n\nFor example, this matrix may look like this:\n\n011010000\n011010000\n001001001\n000100011\n\nIn this matrix, there are two islands. The first is bounded by the 1s on the top\nand left, the second is bounded by 1s on the bottom and right.\n\n[Image](https://www.hackerrank.com/challenges/ctci-connected-cell-in-a-grid/image.png)\n\nWrite a function which takes a 2D array of 1s and 0s and returns the number of\nislands.\n\"\"\"\n"
    },
    {
        "number": 376,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"1\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"1 2 3 4 5\") == \"5\"\nassert solution(\"1 2\\n2 3\") == \"2\"\n"
    },
    {
        "number": 376,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''5\n1 2 3 4 5\n1 2\n2 3\n3 4\n4 5\n''') == '5'\nassert solution('''7\n38 -29 87 93 39 28 -55\n1 2\n2 5\n3 2\n2 4\n1 7\n7 6\n''') == '93'\n\n-----\n\n'''\nfrom collections import defaultdict\nclass Bank:\n    def __init__(self, i: int) -> None:\n        self.i = i\n        self.neighbors = set()\n        self.strength = 0\n        self.online = True\n    \n    def setOnline(self) -> None:\n        self.online = True\n    \n    def setOffline(self) -> None:\n        self.online = False\n        for neighbor in self.neighbors:\n            neighbor.strength += 1\n        self.neighbors.clear()\n\nclass Solution:\n    def __init__(self) -> None:\n        self.banks = defaultdict(Bank)\n        self.banks[0].setOnline()\n        self.curr_strength = 0\n        \n    def init(self, stdin: str) -> None:\n        n = int(stdin.readline().strip())\n        for i in range(1, n + 1):\n            self.banks[i].setOnline()\n        \n        for line in stdin:\n            u, v = map(int, line.strip().split())\n            self.banks[u].neighbors.add(self.banks[v])\n            self.banks[v].neighbors.add(self.banks[u])\n    \n    def solve(self, stdin: str) -> int:\n        while True:\n            for i in range(1, len(self.banks) + 1):\n                if self.banks[i].online:\n                    self.curr_strength += 1\n                    self.banks[i].setOffline()\n            for i in range(1, len(self.banks) + 1):\n                if not self.banks[i].online:\n                    self.curr_strength -= 1\n                    self.banks[i].setOnline()\n            if self.curr_strength <= int(stdin.readline().strip()):\n                return self.curr_strength\n\nassert Solution().solve('''5\n1 2 3 4 5\n1 2\n2 3\n3 4\n4 5\n''') == '5'\nassert Solution().solve('''7\n38 -29 87 93 39 28 -55\n1 2\n2 5\n3 2\n2 4\n1 7\n7 6\n''') == '93'\n\nprint(Solution().solve('''5\n1 2 3 4 5\n1 2\n2 3\n3 4\n4 5\n'''))\nprint(Solution().solve('''7\n38 -29 87 93 39 28 -55\n1 2\n2 5\n3 2\n2 4\n1 7\n7 6\n'''))\n"
    },
    {
        "number": 376,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\n\n\"\"\"\n------Alternate Solution (Works but Time Limit Exceeded)------"
    },
    {
        "number": 376,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''5\n1 2 3 4 5\n1 2\n2 3\n3 4\n4 5\n''') == '5'\nassert solution('''7\n38 -29 87 93 39 28 -55\n1 2\n2 5\n3 2\n2 4\n1 7\n7 6\n''') == '93'\nassert solution('''5\n1 2 7 6 7\n1 5\n5 3\n3 4\n2 4\n''') == '8'\n\n\n-----Alternate Approach-----\n"
    },
    {
        "number": 376,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == expected_stdout\nprint(solution(stdin))\n\"\"\"\n"
    },
    {
        "number": 376,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"3\\n3 1 2\\n1 2 3\") == \"2\"\nassert solution(\"3\\n3 1 2\\n1 5\\n3 2\\n2 4\\n1 7\") == \"93\"\nassert solution(\"7\\n38 -29 87 93 39 28 -55\\n1 2\\n2 5\\n3 2\\n2 4\\n1 7\") == \"93\"\n\n\n\"\"\""
    },
    {
        "number": 376,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == ''\n\"\"\"\n"
    },
    {
        "number": 377,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('7 2\\n') == '0'\nassert solution('6 2\\n') == '0'\nassert solution('3 0\\n') == '1'\nassert solution('2 2\\n') == '0'\nassert solution('3 3\\n') == '2'\n"
    },
    {
        "number": 377,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('7 4') == '3'\nassert solution('6 2') == '2'\nassert solution('3 0') == '1'\nassert solution('2 2') == '0'\nassert solution('2 2') == '0'\n"
    },
    {
        "number": 377,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''7 4''') == '3'\nassert solution('''6 2''') == '2'\nassert solution('''3 0''') == '1'\nassert solution('''2 2''') == '0'\n"
    },
    {
        "number": 377,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('7 4') == '3'\nassert solution('6 2') == '2'\nassert solution('3 0') == '1'\nassert solution('2 2') == '0'\nassert solution('1 0') == '0'\n\n\n\"\"\""
    },
    {
        "number": 377,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('2 2') == '0'\nassert solution('1 0') == '1'\nassert solution('2 3') == '0'\nassert solution('2 4') == '0'\nassert solution('7 2') == '3'\n"
    },
    {
        "number": 377,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''7 4''') == '3'\nassert solution('''6 2''') == '2'\nassert solution('''3 0''') == '1'\nassert solution('''2 2''') == '0'\nassert solution('''7 2''') == '0'\n"
    },
    {
        "number": 377,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('7 4') == '3'\nassert solution('6 2') == '2'\nassert solution('3 0') == '1'\nassert solution('2 2') == '0'\nassert solution('2 0') == '0'\n"
    },
    {
        "number": 377,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('') == 1\nassert solution('1 0') == 0\nassert solution('1 0') == 1\nassert solution('7 4') == 3\nassert solution('5 0') == 0\n"
    },
    {
        "number": 377,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"7 4\") == \"3\"\nassert solution(\"6 2\") == \"2\"\nassert solution(\"3 0\") == \"1\"\nassert solution(\"2 2\") == \"0\"\nassert solution(\"3 1\") == \"1\"\n"
    },
    {
        "number": 377,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == ''\n\"\"\"\n"
    },
    {
        "number": 378,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('117 3') == 9\nassert solution('237 7') == 1\nassert solution('15 2') == 2\nassert solution('118 4') == 1\nassert solution('36 49') == 2\n"
    },
    {
        "number": 378,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('117 3') == 9\nassert solution('237 7') == 1\nassert solution('15 2') == 2\nassert solution('1 3') == 0\nassert solution('2 4') == 0\n"
    },
    {
        "number": 378,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('100 3') == '9'\nassert solution('237 7') == '1'\nassert solution('15 2') == '2'\nassert solution('15 2') == '2'\nassert solution('15 1') == '0'\n"
    },
    {
        "number": 378,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"117 3\") == \"9\"\nassert solution(\"237 7\") == \"1\"\nassert solution(\"15 2\") == \"2\"\nassert solution(\"10 10\") == \"0\"\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 378,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"3 3\") == \"1\"\nassert solution(\"10 5\") == \"1\"\nassert solution(\"7 2\") == \"2\"\nassert solution(\"15 2\") == \"1\"\nassert solution(\"1 1\") == \"1\"\n"
    },
    {
        "number": 378,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('117 3') == '9'\nassert solution('237 7') == '1'\nassert solution('15 2') == '2'\nassert solution('9 2') == '1'\nassert solution('60 4') == '1'\n"
    },
    {
        "number": 378,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('0 11') == '2'\nassert solution('0 4') == '1'\nassert solution('15 2') == '1'\nassert solution('0 7') == '1'\nassert solution('237 7') == '1'\n"
    },
    {
        "number": 378,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''117 3''') == '9'\nassert solution('''237 7''') == '1'\nassert solution('''15 2''') == '2'\nassert solution('''17 1''') == '17'\nassert solution('''71 6''') == '14'\n"
    },
    {
        "number": 378,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('5 1') == '9'\nassert solution('1 2') == '1'\nassert solution('7 1') == '1'\nassert solution('15 2') == '2'\nassert solution('37 9') == '1'\n"
    },
    {
        "number": 378,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('6 2') == 1\nassert solution('2 7') == 2\nassert solution('2 3') == 1\nassert solution('2 5') == 0\nassert solution('3 2') == 1\n"
    },
    {
        "number": 379,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''2 3\nXXX\nXXX''') == \"YES\"\nassert solution('''2 2\n.X\nXX''') == \"NO\"\nassert solution('''5 5\n.....\n..X..\n.....\n.....\n.....\n\n.....\n''') == \"YES\"\nassert solution('''4 4\n...X...\n....X..\n....X..\n....X..\n\n...X...\n\n....X..\n....X..\n....X..\n....X..\n\n''') == \"NO\"\nassert solution('''4 4\n...X...\n....X..\n....X..\n....X..\n\n...X...\n\n....X..\n....X..\n....X..\n....X..\n\n''') == \"YES\"\n"
    },
    {
        "number": 379,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"3 4\") == \"YES\"\nassert solution(\"1 2\") == \"NO\"\nassert solution(\"5 5\") == \"YES\"\nassert solution(\"2 2\") == \"YES\"\nassert solution(\"5 3\") == \"NO\"\n"
    },
    {
        "number": 379,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(INPUT) == OUTPUT\n\n\"\"\"\nfrom collections import deque"
    },
    {
        "number": 379,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''2 3\nXXX\nXXX\n''') == 'YES'\n\nassert solution('''2 2\n.X\nXX\n''') == 'NO'\n\nassert solution('''5 5\n.....\n..X..\n.....\n.....\n.....\n\n.....\n''') == 'YES'\n"
    },
    {
        "number": 379,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"\") is None\nassert solution(\"1 2\") == \"NO\"\nassert solution(\"1 3\") == \"NO\"\nassert solution(\"5 5\") == \"YES\"\nassert solution(\"1 1\") == \"YES\"\n"
    },
    {
        "number": 379,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('2 2\\nXXXX\\nXXXX\\n') == 'YES'\nassert solution('2 2\\n.XX\\nXX\\n') == 'YES'\nassert solution('2 2\\n..X\\nXX\\n') == 'NO'\nassert solution('5 5\\n...\\n...\\n...\\n...\\n') == 'YES'\nassert solution('5 5\\n.X..\\n.X..\\n.X..\\n.X..\\n') == 'YES'\n"
    },
    {
        "number": 379,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''4 4\nXXX\nXXX\nXXX\nXXX''') == 'YES'\nassert solution('''4 4\n..X..\nXX..\nXXX\n..X.\n''') == 'NO'\nassert solution('''10 10\n.X.\n.X.\n.X.\n.X.\n.X.\n.X.\n.X.\n.X.\n.X.\n.X.\n''') == 'YES'\nassert solution('''4 4\n....\n....\n....\n....\n''') == 'NO'\nassert solution('''2 2\n..\n..\n''') == 'NO'\n"
    },
    {
        "number": 379,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"1 2\") == \"NO\"\nassert solution(\"3 3\") == \"YES\"\nassert solution(\"1 4\") == \"NO\"\nassert solution(\"2 3\") == \"NO\"\nassert solution(\"2 3\") == \"NO\"\n"
    },
    {
        "number": 379,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''2 3\nXXX\nXXX''') == 'YES'\nassert solution('''2 2\n.X\nXX''') == 'NO'\nassert solution('''5 5\n.....\n..X..\n.....\n.....\n.....\n''') == 'YES'\nassert solution('''5 5\n.....\n..X..\n.....\n.....\n.....\n''') == 'YES'\nassert solution('''5 5\n.....\n.....\n.....\n.....\n.....\n''') == 'YES'\n"
    },
    {
        "number": 379,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(INPUT) == OUTPUT"
    },
    {
        "number": 380,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"1 -1\\n1 1\\n1 2\\n\") == \"1\"\nassert solution(\"-1 -1\\n-1 3\\n4 3\\n\") == \"2\"\nassert solution(\"1 1\\n2 3\\n3 2\\n\") == \"3\"\n\n-----"
    },
    {
        "number": 380,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('1 -1\\n1 1\\n1 2\\n') == '1'\nassert solution('-1 -1\\n-1 3\\n4 3\\n') == '2'\nassert solution('1 1\\n2 3\\n3 2\\n') == '3'\n\"\"\"\n"
    },
    {
        "number": 380,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1 -1\\n1 1\\n1 2\\n') == '1'\nassert solution('-1 -1\\n-1 3\\n4 3\\n') == '2'\nassert solution('1 1\\n2 3\\n3 2\\n') == '3'\nassert solution('1 -1\\n-1 3\\n4 3\\n') == '3'\nassert solution('1 1\\n2 3\\n3 2\\n') == '3'\n"
    },
    {
        "number": 380,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1 -1') == '1'\nassert solution('1 1') == '1'\nassert solution('1 2') == '2'\nassert solution('-1 -1') == '1'\nassert solution('-1 3') == '2'\n"
    },
    {
        "number": 380,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"1 -1\\n1 1\\n1 2\\n\") == \"1\"\nassert solution(\"-1 -1\\n-1 3\\n4 3\\n\") == \"2\"\nassert solution(\"1 1\\n2 3\\n3 2\\n\") == \"3\"\nassert solution(\"1 1\\n2 3\\n3 2\\n\") == \"3\"\nassert solution(\"-1 -1\\n-1 3\\n4 3\\n\") == \"2\"\n"
    },
    {
        "number": 380,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''1 -1''') == '1'\nassert solution('''1 1''') == '1'\nassert solution('''1 2''') == '1'\nassert solution('''-1 -1''') == '1'\nassert solution('''-1 3''') == '2'\n"
    },
    {
        "number": 380,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('1 -1\\n1 1\\n1 2\\n') == '1'\nassert solution('-1 -1\\n-1 3\\n4 3\\n') == '2'\nassert solution('1 1\\n2 3\\n3 2\\n') == '3'\nassert solution('1 1\\n2 3\\n3 2\\n') == '3'\nassert solution('1 -1\\n-1 3\\n4 3\\n') == '2'\n"
    },
    {
        "number": 380,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''1 -1\n1 1\n1 2\n''') == '1'\n\nassert solution('''-1 -1\n-1 3\n4 3\n''') == '2'\n\nassert solution('''1 1\n2 3\n3 2\n''') == '3'\n\nassert solution('''1 2\n2 3\n3 2\n''') == '1'\n"
    },
    {
        "number": 380,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(input()) == output\n\n\"\"\"\n"
    },
    {
        "number": 380,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"1 -1\\n1 1\\n1 2\") == \"1\"\nassert solution(\"-1 -1\\n-1 3\\n4 3\") == \"2\"\nassert solution(\"1 1\\n2 3\\n3 2\") == \"3\"\nassert solution(\"-1 -1\\n-1 3\\n4 3\") == \"2\"\nassert solution(\"1 1\\n1 2\\n1 3\") == \"1\"\n"
    },
    {
        "number": 381,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\n    '1'\n) == 'YES\\n2 1'\nassert solution(\n    '2'\n) == 'YES\\n2 1'\nassert solution(\n    '3'\n) == 'NO'\nassert solution(\n    '3 4'\n) == 'YES\\n1 2'\nassert solution(\n    '4'\n) == 'NO'\n"
    },
    {
        "number": 381,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == \"\"\n\n\"\"\""
    },
    {
        "number": 381,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"NO\"\nassert solution(\"2 1\") == \"YES\"\nassert solution(\"2 2\") == \"YES\"\nassert solution(\"2 1\") == \"NO\"\nassert solution(\"3 3\") == \"YES\"\n"
    },
    {
        "number": 381,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"2 1\") == \"NO\"\nassert solution(\"1 2\") == \"YES\"\nassert solution(\"1\") == \"NO\"\nassert solution(\"3 2\") == \"NO\"\nassert solution(\"2 2\") == \"YES\"\n"
    },
    {
        "number": 381,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1\\n') == 'NO'\nassert solution('2 3\\n1 2\\n2 3\\n1 3\\n') == 'YES'\nassert solution('3 2\\n1 2\\n2 3\\n1 3\\n') == 'NO'\nassert solution('5 1\\n1 5\\n') == 'YES'\nassert solution('10 3\\n1 2\\n2 3\\n1 3\\n2 4\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\\n') == 'NO'\n\n\n-----\n'''\n"
    },
    {
        "number": 381,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"2\\n1 2\") == \"YES\\n1 2\"\nassert solution(\"2\\n1 2\\n2 1\") == \"NO\"\nassert solution(\"3\\n2 3\\n3 2\") == \"YES\\n2 3\\n3 2\"\nassert solution(\"1\\n1\") == \"YES\\n1 1\"\nassert solution(\"1\\n2\") == \"NO\"\n"
    },
    {
        "number": 381,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('') == 'YES'\nassert solution('1') == 'NO'\nassert solution('2 1') == 'YES 1 1'\nassert solution('2 2') == 'YES 2 2'\nassert solution('3 1') == 'YES 1 2'\n"
    },
    {
        "number": 381,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''1''') == 'NO'\nassert solution('''2 1''') == 'YES'\nassert solution('''1 2''') == 'YES'\nassert solution('''1 2''') == 'YES'\nassert solution('''2 1''') == 'NO'\n"
    },
    {
        "number": 381,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\n'''3\n'''\n) == 'YES'\n\nassert solution(\n'''1\n'''\n) == 'NO'\n\nassert solution(\n'''2 1\n1 2\n'''\n) == 'NO'\n\nassert solution(\n'''2 2\n1 2\n2 1\n'''\n) == 'NO'\n\nassert solution(\n'''2 3\n1 2\n2 3\n2 1\n3 1\n'''\n) == 'NO'"
    },
    {
        "number": 381,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"NO\"\nassert solution(\"2 1\") == \"NO\"\nassert solution(\"1 2\") == \"YES\"\nassert solution(\"1 2 1\") == \"NO\"\nassert solution(\"1 1 2\") == \"NO\"\n"
    },
    {
        "number": 382,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == expected\n\"\"\"\n\nfrom sys import stdin, stdout\nfrom collections import Counter\nfrom bisect import bisect_left\n"
    },
    {
        "number": 382,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(input_1) == output_1\nassert solution(input_2) == output_2\nassert solution(input_3) == output_3\nassert solution(input_4) == output_4\nassert solution(input_5) == output_5\n"
    },
    {
        "number": 382,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n\n\"\"\"\nI have solved this problem in Java. The logic is the same.\n\nclass Solution {\n    public static void main(String[] args) {\n        Scanner stdin = new Scanner(System.in);\n        int n, m, q;\n        n, m, q = stdin.nextInt(), stdin.nextInt(), stdin.nextInt();\n        char[] s = stdin.next();\n        char[] t = stdin.next();\n        char[] l = new char[q];\n        int[] r = new int[q];\n        for (int i = 0; i < q; i++) {\n            l[i] = stdin.nextInt();\n            r[i] = stdin.nextInt();\n        }\n\n        for (int i = 0; i < q; i++) {\n            int len = (r[i] - l[i] + 1);\n            for (int j = l[i]; j <= r[i]; j++) {\n                if (t.charAt(j - l[i]) == s.charAt(j - l[i])) {\n                    len--;\n                }\n            }\n            System.out.print(len);\n        }\n    }\n}\n\"\"\"\n"
    },
    {
        "number": 382,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(input()) == output()\n\"\"\"\n"
    },
    {
        "number": 382,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 382,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\n\nimport sys\n\nn, m, q = [int(x) for x in sys.stdin.readline().split()]\ns, t = sys.stdin.readline().strip(), sys.stdin.readline().strip()"
    },
    {
        "number": 382,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == expected\n\"\"\"\n"
    },
    {
        "number": 382,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n\nimport sys"
    },
    {
        "number": 382,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n"
    },
    {
        "number": 382,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n"
    },
    {
        "number": 383,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('2 3 2') == '2'\nassert solution('3 3 2') == '6'\nassert solution('3 3 3') == '1'\nassert solution('4 3 2') == '7'\n"
    },
    {
        "number": 383,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''3 3 2''') == '3'\nassert solution('''3 3 3''') == '1'\nassert solution('''4 3 2''') == '6'\nassert solution('''4 5 2''') == '7'"
    },
    {
        "number": 383,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('') == None\nassert solution('1 2 3') == None\nassert solution('1 2 3 4') == None\nassert solution('1 2 3 4 5') == None\nassert solution('1 2 3 4') == None\n"
    },
    {
        "number": 383,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"2 3 2\") == \"3\"\nassert solution(\"3 3 2\") == \"3\"\nassert solution(\"3 3 3\") == \"1\"\nassert solution(\"4 3 2\") == \"6\"\nassert solution(\"4 5 2\") == \"7\"\n"
    },
    {
        "number": 383,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == '6'\nassert solution(stdin) == '1'\nassert solution(stdin) == '7'"
    },
    {
        "number": 383,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''3 3 2''') == '3'\nassert solution('''3 3 3''') == '1'\nassert solution('''4 5 2''') == '6'\nassert solution('''4 4 1''') == '7'\nassert solution('''4 6 2''') == '9'\n"
    },
    {
        "number": 383,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('3 3 2') == '3'\nassert solution('3 3 3') == '1'\nassert solution('4 3 2') == '6'\nassert solution('4 5 2') == '7'\nassert solution('6 4 2') == '34'\n"
    },
    {
        "number": 383,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 383,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1\\n1\\n1\\n') == '1'\nassert solution('2\\n3\\n1\\n') == '6'\nassert solution('2\\n3\\n4\\n') == '42'\nassert solution('2\\n3\\n4\\n5\\n') == '210'\nassert solution('2\\n3\\n4\\n6\\n') == '252'\n"
    },
    {
        "number": 383,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"2 2 1\") == \"1\"\nassert solution(\"3 3 1\") == \"1\"\nassert solution(\"4 4 1\") == \"1\"\n"
    },
    {
        "number": 384,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"BBBB\") == \"4\"\nassert solution(\"WWWW\") == \"0\"\nassert solution(\"BBBB\") == \"1\"\nassert solution(\"WBBBBWWWWWW\") == \"3\"\nassert solution(\"WWWWBBWWW\") == \"2\"\n"
    },
    {
        "number": 384,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''3''') == '1'\nassert solution('''BBW''') == '2'\nassert solution('''BWBWB''') == '3'\nassert solution('''WWWW''') == '0'\nassert solution('''WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW"
    },
    {
        "number": 384,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('3') == '1'\nassert solution('BBW') == '2'\nassert solution('BBBB') == '3'\nassert solution('WWWW') == '0'\nassert solution('WBBBBWWWWWWBBW') == '3'\n"
    },
    {
        "number": 384,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"BBW\") == \"2\"\nassert solution(\"BWBWB\") == \"3\"\nassert solution(\"WWWW\") == \"0\"\nassert solution
    },
    {
        "number": 384,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('3\\nBBW\\n') == '1\\n2'\nassert solution('4\\nWWWW\\n') == '3\\n1 1 1'\nassert solution('4\\nBBBB\\n') == '1\\n4'\nassert solution('5\\nBBBBBB\\n') == '1\\n1 1'\nassert solution('13\\nWWWWWWWWWWWW\\n') == '3\\n1 1 1'\n"
    },
    {
        "number": 384,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''\n3\nBBW\n''') == '''\n1\n2 \n'''\n\nassert solution('''\n5\nBWBWB\n''') == '''\n3\n1 1 1 \n'''\n\nassert solution('''\n4\nWWWW\n''') == '''\n0\n4 \n1 1 1 \n'''\n\nassert solution('''\n13\nWBBBBWWBWBBBW\n''') == '''\n3\n4 1 3 \n'''\n\nassert solution('''\n4\nBBBB\n''') == '''\n1\n4 \n1 1 1 \n'''"
    },
    {
        "number": 384,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"BBW\n\"\"\") == \"\"\"1\"\"\"\n\nassert solution(\n\"\"\"WWWW\n\"\"\") == \"\"\"0\"\"\"\n\nassert solution(\n\"\"\"WWWWWWWWWWWW\n\"\"\") == \"\"\"0\"\"\"\n\nassert solution(\n\"\"\"WWWWWWWWWWWWWWWWW\n\"\"\") == \"\"\"1\"\"\"\n\nassert solution(\n\"\"\"WWWWWWWWWWWWWWWWWWWW\n\"\"\") == \"\"\"3\"\"\""
    },
    {
        "number": 384,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('WWWW') == '1'\nassert solution('BBBBBB') == '3'\nassert solution('BWWWWWW') == '1'\nassert solution
    },
    {
        "number": 384,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"BWBWB\") == \"3\"\nassert solution(\"WWWW\") == \"0\"\nassert solution(\"BBBB\") == \"1\"\nassert solution(\"WBBBBWWBWBBBW\") == \"3\"\nassert solution(\"BWBWB\") == \"1\"\n"
    },
    {
        "number": 384,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"\\n\") == \"\"\nassert solution(\"\\n\\n\") == \"\"\nassert solution(\"\\n\\n\\n\") == \"\"\nassert solution(\"\\n\\n\\n\\n\") == \"\"\n"
    },
    {
        "number": 385,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"(()(()))\") == \"()()\"\nassert solution(\"(())()\") == \"()()\"\nassert solution(\"()()\") == \"()()\"\nassert solution(\"()(())\") == \"(())()\"\nassert solution(\"(()(()))\") == \"(()())\"\n"
    },
    {
        "number": 385,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('8 4 5') == '()()()'\nassert solution('12 5 3') == '(()())(()))'\nassert solution('8 8 8') == '()()()'\nassert solution('(()())()') == '()()()'\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 385,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(input) == '(()())'\n\n\n\n'''\n"
    },
    {
        "number": 385,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('(())()') == '()()'\nassert solution('(()())()') == '()(())'\nassert solution('(()(()))') == '()()'\nassert solution('(()())(())') == '()()()'\nassert solution('(()(()))') == '()()'\n"
    },
    {
        "number": 385,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"8 4 5\\n(())()()\\nRDLD\\n\") == \"()\"\nassert solution(\"12 5 3\\n((()())(()))\\nRRDLD\\n\") == \"(()(()))\"\nassert solution(\"8 8 8\\n(())()()\\nLLLLLLDD\\n\") == \"(()())\"\nassert solution(\"12 5 3\\n((()())(()))\\nLLLLLLDD\\n\") == \"(()(()))\"\n"
    },
    {
        "number": 385,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('8 4 5') == '()'\nassert solution('12 5 3') == '(()(()))'\nassert solution('8 8 8') == '()()'\nassert solution('(())()') == '(()(()))'\nassert solution('())()') == '()'\n"
    },
    {
        "number": 385,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"(())()()\") == \"()()()\"\nassert solution(\"(()())(()))\") == \"()()()\"\nassert solution(\"(())()()\") == \"()()()\"\nassert solution(\"\") == \"\"\nassert solution(\"()\") == \"\"\n"
    },
    {
        "number": 385,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"8 4 5\") == \"(()()())\"\nassert solution(\"12 5 3\") == \"(()())(())\"\nassert solution(\"8 8 8\") == \"(()(()))\"\nassert solution(\"(())()()\") == \"(()())(())\"\nassert solution(\"LLLLLLDD\") == \"(()())(())\"\n\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 385,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"8 4 5\") == \"(()()())\"\nassert solution(\"12 5 3\") == \"(()(()))\"\nassert solution(\"12 8 8\") == \"()()()\"\n"
    },
    {
        "number": 385,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"8 4 5\") == \"()\"\nassert solution(\"12 5 3\") == \"()()()\"\nassert solution(\"12 8 8\") == \"()()()\"\nassert solution(\"(())()()\") == \"()()()\"\nassert solution(\"()(())()\") == \"()()()\"\n"
    },
    {
        "number": 386,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\">= 1 Y < -3 N <= 55 N\") == \"17\"\nassert solution(\">= -3 N < 2 Y\") == \"Impossible\"\nassert solution(\"> 55 N\") == \"Impossible\"\nassert solution(\">= -3 N < 2 Y\") == \"17\"\nassert solution(\">= -3 N < 2\") == \"Impossible\"\n"
    },
    {
        "number": 386,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\">= 1 Y\\n< 3 N\\n<= -3 N\\n> 55 N\") == '17'\nassert solution(\"1\") == '17'\nassert solution(\"3\") == '17'\nassert solution(\"0\") == '17'\nassert solution(\"< 2 Y\") == '17'\n"
    },
    {
        "number": 386,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1 2 3 4') == 1\nassert solution('4 3 2 1') == 4\nassert solution('5 4 3 2 1') == 4\nassert solution('5 4 3 2 1') == 4\nassert solution('1 1 1 1 1') == 1\n"
    },
    {
        "number": 386,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == \"\""
    },
    {
        "number": 386,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n4\n>= 1 Y\n< 3 N\n<= -3 N\n> 55 N\n\"\"\") == \"17\"\nassert solution(\"\"\"\n2\n> 100 Y\n< -100 Y\n\"\"\") == \"Impossible\"\n\nprint(solution(open(\"/home/vadim/learning/algorithms/algorithm_fun/algorithm_fun/a1/input.txt\").read()))"
    },
    {
        "number": 386,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(input_of_n()) == output_of_n()\nprint('Test case passed')\n\"\"\""
    },
    {
        "number": 386,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1 2 3 4\") == \"\"\nassert solution(\"2> 3 < 4\") == \"Impossible\"\nassert solution(\"< -3 4>\") == \"17\"\nassert solution(\"< 2 4>\") == \"Impossible\"\n"
    },
    {
        "number": 386,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"4\") == \"\"\nassert solution(\"4\") == \"17\"\nassert solution(\"3\") == \"17\"\nassert solution(\"1\") == \"17\"\n"
    },
    {
        "number": 386,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"\"\"1 2 3 4\n>= 1 Y\n< 3 N\n<= -3 N\n> 50 N\n\"\"\") == \"17\"\nassert solution(\"\"\"1 2 3 4\n>= 1 Y\n< 3 N\n<= -3 N\n> -10 N\n\"\"\") == \"Impossible\"\nassert solution(\"\"\"1 2 3 4\n>= 1 Y\n< 3 N\n<= -3 N\n> -10 N\n\"\"\") == \"17\"\nassert solution(\"\"\"1 2 3 4\n>= 1 Y\n< 3 N\n<= -3 N\n> -10 N\n\"\"\") == \"17\"\nassert solution(\"\"\"1 2 3 4\n>= 1 Y\n< 3 N\n<= -3 N\n> -10 N\n\"\"\") == \"17\"\n"
    },
    {
        "number": 386,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''\n    4\n    >= 1 Y\n    < 3 N\n    <= -3 N\n    > 55 N\n    ''') == 17\nassert solution('''\n    2\n    > 100 Y\n    < -100 Y\n    ''') == 'Impossible'\nassert solution('''\n    4\n    >= 1 Y\n    < 3 N\n    <= -3 N\n    > -55 N\n    ''') == 'Impossible'\n"
    },
    {
        "number": 387,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('2 4') == '4'\nassert solution('5 3') == '5'\nassert solution('5 3') == '5'\nassert solution('5 3') == '5'\nassert solution('5 3') == '5'\n"
    },
    {
        "number": 387,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('2 4\\n') == '4'\nassert solution('5 3\\n') == '5'\nassert solution('5 3\\n') == '5'\nassert solution('6 7\\n') == '8'\nassert solution('4 4\\n') == '3'\n"
    },
    {
        "number": 387,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('2 4') == '4'\nassert solution('5 3') == '5'\nassert solution('5 3') == '5'\n\n\n\"\"\"\n"
    },
    {
        "number": 387,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 387,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('2 4') == '4'\nassert solution('5 3') == '5'\nassert solution('5 3') == '5'\nassert solution('5 3') == '5'\nassert solution('5 3') == '5'\n"
    },
    {
        "number": 387,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 387,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 387,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"2 4\\n\") == \"4\"\nassert solution(\"5 3\\n\") == \"5\"\nassert solution(\"5 3\\n\") == \"5\"\nassert solution(\"5 3\\n\") == \"5\"\nassert solution(\"5 3\\n\") == \"5\"\n"
    },
    {
        "number": 387,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1 2\\n1') == '0'\nassert solution('4 2\\n1') == '4'\nassert solution('1 1\\n1') == '0'\nassert solution('5 3\\n1') == '5'\nassert solution('6 3\\n1') == '6'\n"
    },
    {
        "number": 387,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n2 4\n\"\"\") == \"\"\"\n4\n\"\"\"\n\nassert solution(\n\"\"\"\n5 3\n\"\"\") == \"\"\"\n5\n\"\"\"\n\nassert solution(\n\"\"\"\n5 5\n\"\"\") == \"\"\"\n10\n\"\"\"\n\nassert solution(\n\"\"\"\n10000000 1\n\"\"\") == \"\"\"\n15\n\"\"\"\n\nassert solution(\n\"\"\"\n10000000 1000000000\n\"\"\") == \"\"\"\n24\n\"\"\""
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == expected_output\n\"\"\"\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"\"\"8 3\nNO NO YES YES YES NO\"\"\") == \"\"\"Adam Bob Bob Cpqepqwer Limak Adam Bob Adam\"\"\"\nassert solution(\"\"\"9 8\nYES NO\"\"\") == \"\"\"R Q Ccccccccc Ccocc Ccc So Strong Samples Ccc\"\"\"\nassert solution(\"\"\"3 2\nNO NO\"\"\") == \"\"\"Na Na Na\"\"\"\nassert solution(\"\"\"4 8\nNO NO YES YES YES NO\"\"\") == \"\"\"N D F R D D N D D N D D R R\"\"\"\nassert solution(\"\"\"6 4\nNO NO NO NO\"\"\") == \"\"\"Q M N O N Q M N O N Q M N O N\"\"\"\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('8 3\\nNO NO YES YES YES NO\\n') == 'Adam Bob Bob Cpqepqwer Limak Adam Bob Adam\\n'\nassert solution('9 8\\nYES NO\\n') == 'R Q Ccccccccc Ccocc Ccc So Strong Samples Ccc\\n'\nassert solution('3 2\\nNO NO\\n') == 'Na Na Na\\n'\n\n\"\"\""
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"8 3\\nNO NO YES YES YES NO\\n\") == \"Adam Bob Bob Cpqepqwer Limak Adam Bob Adam\"\nassert solution(\"9 8\\nYES NO\\n\") == \"R Q Ccccccccc Ccocc Ccc So Strong Samples Ccc\"\nassert solution(\"3 2\\nNO NO\\n\") == \"Na Na Na\"\nassert solution(\"4 1\\nYES\\n\") == \"Aa\"\nassert solution(\"3 4\\nYES YES YES\\n\") == \"Aa\"\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"5 2\\nNO NO\\n\") == \"Adam Bob Bob Cpqepqwer Limak Adam Bob Adam\"\nassert solution(\"8 3\\nNO NO YES YES YES NO\") == \"R Q Ccccccccc Ccocc Ccc So Strong Samples Ccc\"\nassert solution(\"9 8\\nYES NO\\n\") == \"Na Na Na\"\nassert solution(\"1 2\\nNO\") == \"Na Na\"\nassert solution(\"10 3\\nYES\\n\") == \"Na Na\"\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''8 3\nNO NO YES YES YES NO\n''') == 'Adam Bob Bob Cpqepqwer Limak Adam Bob Adam'\nassert solution('''9 8\nYES NO\n''') == 'R Q Ccccccccc Ccocc Ccc So Strong Samples Ccc'\nassert solution('''3 2\nNO NO\n''') == 'Na Na Na'\nassert solution('''5 3\nNO NO YES YES\n''') == 'N n n n n n n'\nassert solution('''4 2\nNO NO YES\n''') == 'n n n n'\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''8 3\nNO NO YES YES YES NO\n''') == 'Adam Bob Bob Cpqepqwer Limak Adam Bob Adam'\nassert solution('''9 8\nYES NO\n''') == 'R Q Ccccccccc Ccocc Ccc So Strong Samples Ccc'\nassert solution('''3 2\nNO NO\n''') == 'Na Na Na'\n\n'''\n\nimport sys"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('8 3\\nNO NO YES YES YES NO') == 'Adam Bob Bob Cpqepqwer Limak Adam Bob Adam'\nassert solution('9 8\\nYES NO') == 'R Q Ccccccccc Ccocc Ccc So Strong Samples Ccc'\nassert solution('3 2\\nNO NO') == 'Na Na Na'\nassert solution('5 2\\nNO YES') == 'Fff'\nassert solution('1 3\\nNO') == 'Na Na'\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('NO NO YES YES YES NO') == 'Adam Bob Bob Cpqepqwer Limak Adam Bob Adam'\nassert solution('NO NO') == 'Na Na Na'\nassert solution('NO') == 'Na Na Na'\nassert solution('YES') == 'R Q Ccccccccc Ccocc Ccc So Strong Samples Ccc'\nassert solution('YES NO') == 'Na Na Na'\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n\nimport sys"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1 2') == '0'\nassert solution('1520') == '3'\nassert solution('15 21') == '-1'\nassert solution('1000000000 1000000000') == '1000000000'\nassert solution('1000001 1000000000') == '-1'\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('15 20') == '3'\nassert solution('14 8') == '-1'\nassert solution('6 6') == '0'\nassert solution('6 5') == '-1'\nassert solution('6 5') == '0'\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1 2') == '1'\nassert solution('4 2') == '1'\nassert solution('5 2') == '-1'\nassert solution('15 20') == '3'\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\n'''15 20'''\n    ) == '3'\nassert solution(\n'''14 8'''\n    ) == '-1'\nassert solution(\n'''6 6'''\n    ) == '0'\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"15 20\") == \"3\"\nassert solution(\"14 8\") == \"-1\"\nassert solution(\"6 6\") == \"0\"\nassert solution(\"1000000001 10000000000\") == \"1\"\nassert solution(\"2 7\") == \"5\"\n\n\"\"\"\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('5 100 1\\n0 1 2 1 2\\n') == '101'\nassert solution('3 10 12\\n1 2 0\\n') == '-1'\nassert solution('3 12 1\\n0 1 0\\n') == '0'\nassert solution('3 12 1\\n1 2 0\\n') == '0'\nassert solution('3 12 1\\n1 2 0\\n') == '0'\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('5 100 1') == '101'\nassert solution('3 10 12') == '-1'\nassert solution('3 12 1') == '0'\nassert solution('3 10 1') == '101'\nassert solution('3 10 1') == '101'\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('5 100 1') == '101'\nassert solution('3 12 1') == '-1'\nassert solution('3 12 1') == '0'\nassert solution('3 10 12') == '-1'\nassert solution('3 10 12') == '0'\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('10 100 1\\n0 1 2 1 2') == '101'\nassert solution('3 10 12\\n1 2 0\\n') == '-1'\nassert solution('3 12 1\\n0 1 0\\n') == '0'\n\n\n\"\"\""
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''5 100 1\n0 1 2 1 2\n''') == \"101\"\n\nassert solution('''3 10 12\n1 2 0\n''') == \"-1\"\n\nassert solution('''3 12 1\n0 1 0\n''') == \"0\"\n\nassert solution('''3 12 1\n1 2 0\n''') == \"-1\"\n\nassert solution('''3 11 1\n0 1 0\n''') == \"0\""
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(input_data) == '101'\n\"\"\"\n\n\"\"\"\n---0.05s\n\n---\n\n\"\"\"\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('5 100 1') == '101'\nassert solution('3 12 1') == '-1'\nassert solution('3 10 12') == '0'\nassert solution('3 15 2') == '29'\nassert solution('3 15 0') == '-1'\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''2''') == '''-1'''\nassert solution('''1''') == '''-1'''\nassert solution('''2''') == '''bb\nww'''\nassert solution('''3''') == '''bb\nww\n--\nbb\n--'''\nassert solution('''3''') == '''bb\nww\n--\nbb\n--\n--\n--\n--\n--\n--\n--\n'''\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"b\"\nassert solution(\"2\") == \"-1\"\nassert solution(\"3\") == \"ww\"\nassert solution(\"4\") == \"bb\"\nassert solution(\"5\") == \"bbww\"\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('') == '-1'\nassert solution('1') == '-1'\nassert solution('2') == 'bb'\nassert solution('3') == 'ww'\nassert solution('4') == 'bbbb'\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('') == '-1'\nassert solution('1') == 'bb'\nassert solution('2') == 'ww'\nassert solution('3') == 'bbww'\nassert solution('4') == 'bbwwbb'\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(input) == output\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(input) == output\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('3') == 'wwbw'\nassert solution('4') == 'wwbbbb'\nassert solution('5') == 'wwbbbbww'\nassert solution('6') == 'wwbbbbbbbw'\nassert solution('7') == 'wwbbbbbbbbbbbw'\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"bb\"\nassert solution(\"2\") == \"ww\"\nassert solution(\"3\") == \"bbww\"\nassert solution(\"4\") == \"bbbbbbbb\"\nassert solution(\"5\") == \"bbwwwwww\"\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''1''') == 'bb'\nassert solution('''2''') == 'bbww'\nassert solution('''3''') == 'bbbww'\nassert solution('''4''') == 'bbbww'\nassert solution('''5''') == 'bbbww'\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''2''') == '''bb\nww\n'''\n\nassert solution('''5''') == '''bwbwbwb\nbwbwbwb\nbwbwbwb\nbwbwbwb\nbwbwbwb\n'''\n\nassert solution('''5\n2''') == '''bb\nww\n'''\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == expected\n\"\"\"\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"\"\"1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\"\"\") == \"100\"\n\nassert solution(\"\"\"1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n276\n277\n278\n279\n280\n281\n282\n283\n284\n285\n286\n287\n288\n289\n290\n291\n292\n293\n294\n295\n296\n297\n298\n299\n300\n301\n302\n303\n304\n305\n306\n307\n308\n309\n310\n311\n312\n313\n314\n315\n316\n317\n318\n319\n320\n321\n322\n323\n324\n325\n326\n327\n328\n329\n330\n331\n332\n333\n334\n335\n336\n337\n338\n339\n340\n341\n342\n343\n344\n345\n346\n347\n348\n349\n350\n351\n352\n353\n354\n355\n356\n357\n358\n359\n360\n361\n362\n363\n364\n365\n366\n367\n368\n369\n370\n371\n372\n373\n374\n375\n376\n377\n378\n379\n380\n381\n382\n383\n384\n385\n386\n387\n388\n389\n390\n391\n392\n393\n394\n395\n396\n397\n398\n399\n400\n401\n402\n403\n404\n405\n406\n407\n408\n409\n410\n411\n412\n413\n414\n415\n416\n417\n418\n419\n420\n421\n422\n423\n424\n425\n426\n427\n428\n429\n430\n431\n432\n433\n434\n435\n436\n437\n438\n439\n440\n441\n442\n443\n444\n445\n446\n447\n448\n449\n450\n451\n452\n453\n454\n455\n456\n457\n458\n459\n460\n461\n462\n463\n464\n465\n466\n467\n468\n469\n470\n471\n472\n473\n474\n475\n476\n477\n478\n479\n480\n481\n482\n483\n484\n485\n486\n487\n488\n489\n490\n491\n492\n493\n494\n495\n496\n497\n498\n499\n500\n501\n502\n503\n504\n505\n506\n507\n508\n509\n510\n511\n512\n513\n514\n515\n516\n517\n518\n519\n520\n521\n522\n523\n524\n525\n526\n527\n528\n529\n530\n531\n532\n533\n534\n535\n536\n537\n538\n539\n540\n541\n542\n543\n544\n545\n546\n547\n548\n549\n550\n551\n552\n553\n554\n555\n556\n557\n558\n559\n560\n561\n562\n563\n564\n565\n566\n567\n568\n569\n570\n571\n572\n573\n574\n575\n576\n577\n578\n579\n580\n581\n582\n583\n584\n585\n586\n587\n588\n589\n590\n591\n592\n593\n594\n595\n596\n597\n598\n599\n600\n601\n602\n603\n604\n605\n606\n607\n608\n609\n610\n611\n612\n613\n614\n615\n616\n617\n618\n619\n620\n621\n622\n623\n624\n625\n626\n627\n628\n629\n630\n631\n632\n633\n634\n635\n636\n637\n638\n639\n640\n641\n642\n643\n644\n645\n646\n647\n648\n649\n650\n651\n652\n653\n654\n655\n656\n657\n658\n659\n660\n661\n662\n663\n664\n665\n666\n667\n668\n669\n670\n671\n672\n673\n674\n675\n676\n677\n678\n679\n680\n681\n682\n683\n684\n685\n686\n687\n688\n689\n690\n691\n692\n693\n694\n695\n696\n697\n698\n699\n700\n701\n702\n703\n704\n705\n706\n707\n708\n709\n710\n711\n712\n713\n714\n715\n716\n717\n718\n719\n720\n721\n722\n723\n724\n725\n726\n727\n728\n729\n730\n731\n732\n733\n734\n735"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('10') == '10'\nassert solution('12') == '6'\nassert solution('9') == '1'\n\n\n\"\"\"\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('10') == '10'\nassert solution('12') == '6'\nassert solution('1000000000000') == '10'\nassert solution('120000') == '6'\nassert solution('123456') == '6'\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('10') == '10'\nassert solution('12') == '6'\nassert solution('100') == '5'\nassert solution('1001') == '1'\nassert solution('10^12') == '1'\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1\\n') == '1'\nassert solution('2\\n') == '2'\nassert solution('10\\n') == '1'\n\n\n\n'''"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"3\"\nassert solution(\"6\") == \"5\"\nassert solution(\"7\") == \"7\"\nassert solution(\"8\") == \"2\"\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('10') == '10'\nassert solution('12') == '6'\nassert solution('1000000') == '1000000'\nassert solution('109999999999') == '109999999999'\n\n\n\n'''\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''3''') == '2'\nassert solution('''10''') == '6'\nassert solution('''12''') == '12'\nassert solution('''12''') == '6'\nassert solution('''2''') == '2'\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1') == ''\nassert solution('2') == ''\nassert solution('10') == ''\nassert solution('11') == ''\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\n    \"5\"\n    \"101\") == \"Yes\"\nassert solution(\n    \"4\"\n    \"1011\") == \"No\"\nassert solution(\n    \"7\"\n    \"0111101\") == \"Yes\"\nassert solution(\n    \"9\"\n    \"00100000\") == \"No\"\nassert solution(\n    \"6\"\n    \"000000\") == \"Yes\"\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('3') == 'Yes'\nassert solution('101') == 'Yes'\nassert solution('1011') == 'No'\nassert solution('10001') == 'No'\nassert solution('1000100010100010101010000') == 'Yes'\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('2\\n01') == 'Yes'\nassert solution('4\\n1011') == 'No'\nassert solution('3\\n11111') == 'No'\nassert solution('1\\n1') == 'Yes'\nassert solution('5\\n0001001') == 'Yes'\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('3') == 'Yes'\nassert solution('4') == 'No'\nassert solution('5') == 'No'\n\n\n\n'''\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"Hello world\") == \"No\"\nassert solution(\"1101101\") == \"Yes\"\nassert solution(\"1111111\") == \"Yes\"\nassert solution(\"1110001\") == \"No\"\nassert solution(\"1110111\") == \"Yes\"\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"4\") == \"Yes\"\nassert solution(\"101\") == \"Yes\"\nassert solution(\"10001\") == \"No\"\nassert solution(\"1011\") == \"Yes\"\nassert solution(\"0001\") == \"Yes\"\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"No\"\nassert solution(\"101\") == \"Yes\"\nassert solution(\"10001\") == \"Yes\"\nassert solution(\"11\") == \"Yes\"\nassert solution(\"1101\") == \"No\"\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(''.join([chr(x) for x in range(ord('a'), ord('z') + 1)])) == 'Yes'\nassert solution(''.join([chr(x) for x in range(ord('0'), ord('1') + 1)])) == 'Yes'\nassert solution(''.join([chr(x) for x in range(ord('0'), ord('1') + 1)])) == 'Yes'\nassert solution(''.join([chr(x) for x in range(ord('0'), ord('1') + 1)])) == 'Yes'\nassert solution(''.join([chr(x) for x in range(ord('0'), ord('1') + 1)])) == 'Yes'\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('0') == 'No'\nassert solution('1') == 'Yes'\nassert solution('101') == 'No'\nassert solution('1011') == 'Yes'\nassert solution('10101') == 'Yes'\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('3\\n101') == 'Yes'\nassert solution('4\\n1011') == 'No'\nassert solution('5\\n10001') == 'No'\nassert solution('6\\n11111') == 'Yes'\nassert solution('7\\n11111') == 'Yes'\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1 2 3 4 5') == '5'\nassert solution('1 2 3 4') == '2'\nassert solution('1 3 5 6 8') == '2'\nassert solution('1 3 5 6') == '1'\nassert solution('1 3 5') == '0'\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('3') == '1\\n1\\n'\nassert solution('3\\n3\\n3') == '1\\n3\\n'\nassert solution('3\\n2\\n1') == '2\\n1\\n'\nassert solution('3\\n2\\n3') == '1\\n3\\n'\nassert solution('3\\n3\\n2') == '1\\n2\\n'\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('5\\n1 2 3 4 5\\n') == '5\\n1 2 3 4 5\\n'\nassert solution('5\\n1 3 5 6 8\\n') == '2\\n3 5\\n'\nassert solution('5\\n1 3 5 6 8\\n') == '2\\n3 5\\n'\nassert solution('3\\n1 5 3\\n') == '1\\n3\\n'\nassert solution('3\\n1 5 3\\n') == '1\\n3\\n'\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 2 3\\n\") == \"3\\n1 2 3\"\nassert solution(\"2\\n1 2\\n\") == \"2\\n1 2\"\nassert solution(\"3\\n1 2 3\\n4\\n5 6\\n\") == \"5\\n1 2 3 4 5\"\nassert solution(\"1\\n0\") == \"0\"\nassert solution(\"3\\n1 2 3\\n\") == \"3\\n1 2 3\"\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(input_stream) == output_stream\n'''\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('4\\n1 2 3 4') == '1\\n1 2 3 4'\nassert solution('5\\n1 3 5 6 8') == '2\\n3 5'\nassert solution('3\\n1 5 3') == '1\\n3'\nassert solution('7\\n1 7 5 7 7') == '1\\n7'\nassert solution('7\\n-1 -2 -3 -4 -5 -6 -7') == '1\\n-1'\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('5\\n1 2 3 4 5\\n') == '5\\n1 2 3 4 5'\nassert solution('5\\n1 3 5 6 8\\n') == '5\\n1 3 5'"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1 2 3 4 5\\n') == '5\\n1 2 3 4 5'\nassert solution('1 3 5 6 8\\n') == '2\\n3 5'\nassert solution('3\\n1 3 5 6 8\\n') == '1\\n3'\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''5\n1 2 3 4 5''') == '5'\nassert solution('''5\n1 3 5 6 8''') == '2'\nassert solution('''3\n1 5 3''') == '1'\nassert solution('''3\n1 3 5''') == '1'\nassert solution('''10\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n\") == \"5\\n1 2 3 4 5\\n\"\nassert solution(\"5\\n1 3 5 6 8\\n\") == \"2\\n3 5\\n\"\nassert solution(\"3\\n1 5 3\\n\") == \"1\\n3\\n\"\nassert solution(\"3\\n1 5 3\\n\") == \"1\\n3\\n\"\nassert solution(\"3\\n1 5 3\\n\") == \"1\\n3\\n\"\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1 3 2 1 2 1') == 'YES'\nassert solution('1 1 1 1 1 99') == 'NO'\nassert solution('1 1 1 1 1 99') == 'NO'\nassert solution('1 1 1 1 1 99') == 'YES'\nassert solution('1 1 1 1 1 99') == 'YES'\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"1 3 2 1 2 1\") == \"YES\"\nassert solution(\"1 1 1 1 1 99\") == \"NO\"\n\n\n\"\"\""
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1 3 2 1 2 1') == 'YES'\nassert solution('1 1 1 1 1 99') == 'NO'\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"1 3 2 1 2 1\") == \"YES\"\nassert solution(\"1 1 1 1 1 99\") == \"NO\"\nassert solution(\"1 1 1 1 1 99\") == \"NO\"\nassert solution(\"1 1 1 1 1 99\") == \"NO\"\nassert solution(\"1 1 1 1 1 99\") == \"NO\"\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1 1 1 1 1 99') == 'YES'\nassert solution('1 1 1 1 1') == 'NO'\nassert solution('1 1 1 1 1') == 'YES'\nassert solution('1 1 1 1 1') == 'NO'\nassert solution('1 1 1 1 1 1') == 'YES'\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1 3 2 1 2 1') == 'YES'\nassert solution('1 1 1 1 1 99') == 'NO'\nassert solution('1 1 1 1 1 1') == 'NO'\nassert solution('1 1 1 1 1 1') == 'NO'\nassert solution('1 1 1 1 1 1 1') == 'YES'\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('1 3 2 1 2 1') == 'YES'\nassert solution('1 1 1 1 1 99') == 'NO'\nassert solution('1 1 1 1 1 1') == 'YES'\nassert solution('1 1 1 1 1 1') == 'YES'\nassert solution('1 1 1 1 1 99') == 'NO'\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"1 3 2 1 2 1\") == \"YES\"\nassert solution(\"1 1 1 1 1 99\") == \"NO\"\nassert solution(\"1 1 1 1 1 1\") == \"NO\"\n\n\n\n\"\"\"\n\nfrom itertools import combinations"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"1 3 2 1 2 1\") == \"YES\"\nassert solution(\"1 1 1 1 1 99\") == \"NO\"\nassert solution(\"1 1 1 1 1 99\") == \"NO\"\nassert solution(\"1 1 1 1 1 99\") == \"NO\"\nassert solution(\"1 1 1 1 1 99\") == \"NO\"\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1 3 2 1 2 1') == 'YES'\nassert solution('1 1 1 1 1 99') == 'NO'\nassert solution('1 1 1 1 1 99') == 'NO'\n\"\"\"\nimport sys"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1 10') == '7'\nassert solution('100 200') == '5'\nassert solution('1 2000000000') == '326'\nassert solution('10 2') == '7'\nassert solution('2 1') == '1'\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1 10') == '7'\nassert solution('100 200') == '5'\nassert solution('1 2000000000') == '326'\nassert solution('1 10') == '7'\nassert solution('1 10') == '7'\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1 10') == '7'\nassert solution('100 200') == '5'\nassert solution('1 2000000000') == '326'\nassert solution('1 1000000000') == '0'\nassert solution('100 2000000000') == '0'\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(input()) == \"5\"\nassert solution(input()) == \"326\"\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('1 10') == '7'\nassert solution('100 200') == '5'\nassert solution('1 2000000000') == '326'\nassert solution('100 200') == '5'\nassert solution('1 2000000000') == '326'\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''1 10''') == '7'\nassert solution('''100 200''') == '5'\nassert solution('''1 2000000000''') == '326'\n'''\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1 10') == '7'\nassert solution('100 200') == '5'\nassert solution('1 2000000000') == '326'"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"4\"\nassert solution(input()) == \"5\"\nassert solution(input()) == \"6\"\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('2 3\\n2 4') == '1'\nassert solution('7 0\\n7 1') == '0'\nassert solution('7 0\\n7 2') == '1'\nassert solution('4 1\\n4 2\\n4 3\\n4 4') == '4'\nassert solution('6 1\\n6 2\\n6 3\\n6 4\\n6 5\\n6 6\\n6 7\\n6 8') == '6'\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(input()) == '3'\nassert solution(input()) == '1'\nassert solution(input()) == '0'\nassert solution(input()) == '4'\nassert solution(input()) == '3'\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(input()) == '4'\nassert solution(input()) == '3'\nassert solution(input()) == '2'\nassert solution(input()) == '1'\nassert solution(input()) == '0'\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('3 2') == '1'\nassert solution('5 0') == '3'\nassert solution('1 1') == '0'\nassert solution('3 2') == '1'\nassert solution('9 11') == '4'\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1 1') == '0'\nassert solution('9 11') == '4'\nassert solution('5 0') == '3'\nassert solution('3 2') == '1'\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('1 1') == '0'\nassert solution('9 11') == '4'\nassert solution('5 0') == '3'\nassert solution('3 2') == '1'\nassert solution('3 10') == '3'\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1 1') == '0'\nassert solution('9 11') == '4'\nassert solution('3 2') == '1'\nassert solution('5 0') == '3'\n\"\"\"\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"\") == 0\nassert solution(\"0 2\") == 2\nassert solution(\"1 1\") == 0\nassert solution(\"2 1\") == 1\nassert solution(\"3 3\") == 1\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('2 4') == '2'\nassert solution('3 2') == '1'\nassert solution('5 3') == '2'\nassert solution('100 200') == '45'\nassert solution('1 1') == '0'\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1\\n1\\n1\\n') == 'YES'\nassert solution('2\\n2\\n2\\n') == 'YES'\nassert solution('3\\n3\\n3\\n') == 'YES'\nassert solution('4\\n4\\n4\\n') == 'NO'\nassert solution('5\\n5\\n5\\n') == 'YES'\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''5\n1 5 3 2 4\n''') == \"YES\"\nassert solution('''3\n4 1 2\n''') == \"NO\"\nassert solution('''10\n1 2 3 4 5 6 7 8 9 10\n''') == \"NO\"\n'''\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1\\n2\\n3') == 'NO'\nassert solution('1\\n3\\n2') == 'NO'\nassert solution('1\\n2\\n3\\n4') == 'YES'\nassert solution('1\\n2\\n3\\n4\\n5') == 'YES'\nassert solution('1\\n1\\n1\\n1') == 'YES'\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1 5 3 2 4') == 'YES'\nassert solution('4 1 2') == 'NO'\nassert solution('4 1 2 3') == 'YES'\nassert solution('1 2 3 4') == 'NO'\nassert solution('1 2 4 3') == 'NO'\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('input_sample_1.txt') == 'YES\\n'\nassert solution('input_sample_2.txt') == 'NO\\n'\nassert solution('input_sample_3.txt') == 'NO\\n'\nassert solution('input_sample_4.txt') == 'YES\\n'\nassert solution('input_sample_5.txt') == 'YES\\n'\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''5\n1 5 3 2 4''') == 'YES'\nassert solution('''3\n4 1 2''') == 'NO'\nassert solution('''6\n4 5 1 2 3 4\n''') == 'YES'\nassert solution('''7\n4 5 6 7 1 2 3\n''') == 'NO'\nassert solution('''5\n5 5 5 5 5\n''') == 'YES'\n'''\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"2\\n1 2\\n\") == \"NO\"\nassert solution(\"2\\n1 5\\n\") == \"YES\"\nassert solution(\"3\\n4 1 2\\n\") == \"NO\"\nassert solution(\"3\\n4 1 2\\n\") == \"NO\"\nassert solution(\"1\\n1\\n\") == \"YES\"\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''5\n1 5 3 2 4''') == 'YES'\nassert solution('''3\n4 1 2''') == 'NO'\nassert solution('''6\n1 2 3 4 5 6''') == 'NO'\n'''\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1 5 3 2 4\\n') == 'YES'\nassert solution('4 1 2\\n') == 'NO'\nassert solution('4\\n1 2 3\\n') == 'NO'\nassert solution('3\\n1 2 3\\n') == 'YES'\nassert solution('4\\n1 1 2 3\\n') == 'YES'\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('3 2') == 'Yes'\nassert solution('1 2') == 'No'\nassert solution('1000 1001') == 'Yes'\nassert solution('1000 1001') == 'Yes'\nassert solution('1000 1001') == 'Yes'\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"5 1\") == \"No\"\nassert solution(\"4 2\") == \"Yes\"\nassert solution(\"1000 1001\") == \"Yes\"\nassert solution(\"6 3\") == \"No\"\nassert solution(\"1000 1001\") == \"Yes\"\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"6 3\") == \"Yes\"\nassert solution(\"4 2\") == \"No\"\nassert solution(\"1000 1001\") == \"Yes\"\nassert solution(\"2 1\") == \"Yes\"\nassert solution(\"1 1\") == \"No\"\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('3 2') == 'No'\nassert solution('4 3') == 'Yes'\nassert solution('1000 1001') == 'Yes'\nassert solution('1000 10') == 'No'\n\n\n\n-----\n\n\"\"\"\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdin\n\n\"\"\"\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"6 3\") == \"Yes\"\nassert solution(\"4 2\") == \"No\"\nassert solution(\"1000 1001\") == \"Yes\"\nassert solution(\"1000 1001\") == \"Yes\"\nassert solution(\"1000 1000\") == \"Yes\"\n\n\n\n'''\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1 1') == 'Yes'\nassert solution('1 0') == 'No'\nassert solution('2 2') == 'No'\nassert solution('4 2') == 'No'\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"6 3\") == \"Yes\"\nassert solution(\"4 2\") == \"No\"\nassert solution(\"1000 1001\") == \"Yes\"\nassert solution(\"12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929384908\") == \"Yes\"\nassert solution(\"12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929384908\") == \"No\"\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(input()) == 'Yes'\n\"\"\""
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"1 1\") == \"Yes\"\nassert solution(\"4 2\") == \"No\"\nassert solution(\"1000 1001\") == \"Yes\"\nassert solution(\"1000 1000\") == \"Yes\"\nassert solution(\"6 4\") == \"No\"\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"2 4\\n7 9\\n\") == \"2\\n\"\nassert solution(\"3 8\\n17 15 19\\n\") == \"5\\n\"\nassert solution(\"2 2\\n99 100\\n\") == \"20\\n\"\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('2 4\\n7 9\\n') == '2'\nassert solution('3 8\\n17 15 19\\n') == '5'"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == result\n\"\"\"\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''2 4\n7 9''') == '2'\nassert solution('''3 8\n17 15 19''') == '5'\nassert solution('''2 2\n99 100''') == '20'\nassert solution('''3 3\n99 100 99''') == '5'\nassert solution('''2 2\n99 100\n99 100''') == '5'\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('2 4') == '2'\nassert solution('3 8') == '5'\nassert solution('2 2') == '20'\nassert solution('6 4') == '1'\nassert solution('3 2') == '1'\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('2 4\\n7 9\\n') == '2'\nassert solution('3 8\\n17 15 19\\n') == '5'\nassert solution('2 2\\n99 100\\n') == '20'\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\n'''2 4\n7 9''') == '5'\n\nassert solution(\n'''3 8\n17 15 19''') == '5'\n\nassert solution(\n'''2 2\n99 100''') == '20'\n\nassert solution(\n'''3 3\n99 101 103''') == '5'\n\nassert solution(\n'''4 4\n35 41 43 45''') == '7'"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\n    stdin = \"\"\"2 4\n7 9\n\"\"\") == '5'\n\nassert solution(\n    stdin = \"\"\"3 8\n17 15 19\n\"\"\") == '5'\n\nassert solution(\n    stdin = \"\"\"2 2\n99 100\n\"\"\") == '20'\n\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('2 3\\n4 2\\n5 7 6') == '25'\nassert solution('8 8\\n1 2 3 4 5 6 7 8\\n8 7 6 5 4 3 2 1') == '1'\nassert solution('1 1\\n1 1') == '1'\nassert solution('1 1\\n1 1') == '1'\nassert solution('1 1\\n1 1') == '1'\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('4 2') == '25'\nassert solution('8 8') == '1'\nassert solution('8 7 6 5 4 3 2 1') == '1'\nassert solution('1 2 3 4 5 6 7 8') == '1'\nassert solution('1 2 3 4 5 6 7 9') == '1'\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('2 3\\n4 2\\n5 7 6') == '25'\nassert solution('8 8\\n1 2 3 4 5 6 7 8\\n8 7 6 5 4 3 2 1') == '1'\nassert solution('10 11\\n1 2 3 4 5 6 7 8 9 10\\n11') == '1'\n\n\n-----My Solution-----\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"2 3\\n4 2\\n5 7 6\\n\") == \"25\"\nassert solution(\"8 8\\n1 2 3 4 5 6 7 8\\n8 7 6 5 4 3 2 1\\n\") == \"1\"\n\n\n\"\"\""
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('2 3\\n4 2\\n5 7 6\\n') == '25'\nassert solution('8 8\\n1 2 3 4 5 6 7 8\\n8 7 6 5 4 3 2 1\\n') == '1'\nassert solution('1\\n2\\n3') == '1'\nassert solution('5\\n2\\n1') == '5'\nassert solution('10\\n8\\n7') == '9'\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n4 2\\n5 7 6\") == \"25\"\nassert solution(\"8 8\\n1 2 3 4 5 6 7 8\\n8 7 6 5 4 3 2 1\") == \"1\"\nassert solution(\"2 3\\n4 2\\n5 7 6\") == \"25\"\nassert solution(\"2 3\\n4 2\\n5 7 6\\n9 2\") == \"1\"\nassert solution(\"8 8\\n1 2 3 4 5 6 7 8\\n9 7 6 5 4 3 2 1\") == \"1\"\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('2 3\\n4 2\\n5 7 6') == '25'\nassert solution('8 8\\n1 2 3 4 5 6 7 8') == '1'\nassert solution('8 7 6 5 4 3 2 1\\n8 7 6 5 4 3 2 1') == '1'\nassert solution('8 8\\n1 2 3 4 5 6 7 8\\n8 7 6 5 4 3 2 1') == '1'\n\n'''\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1 2 3 4 5 6 7 8\\n8 7 6 5 4 3 2 1') == '1'\nassert solution('2 3\\n4 2') == '25'\nassert solution('8 8\\n1 2 3 4 5 6 7 8\\n8 7 6 5 4 3 2 1') == '1'\nassert solution('8 8\\n1 2 3 4 5 6 7 8\\n8 7 6 5 4 3 2 1\\n1 2 3 4 5 6 7 8') == '1'"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''2 3\n4 2\n5 7 6''') == '25'\nassert solution('''8 8\n1 2 3 4 5 6 7 8\n8 7 6 5 4 3 2 1''') == '1'\nassert solution('''5 2\n4 2\n5 7 6''') == '25'\nassert solution('''5 2\n1 2 3 4 5 6 7 8''') == '1'\n'''\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"2 3\\n4 2\\n5 7 6\") == \"25\"\nassert solution(\"8 8\\n1 2 3 4 5 6 7 8\\n8 7 6 5 4 3 2 1\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 402,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('3 222') == '2'\nassert solution('4 190') == '4'\nassert solution('7 1') == '7'"
    },
    {
        "number": 402,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('3 222') == '2'\nassert solution('4 190') == '4'\nassert solution('7 1') == '7'\nassert solution('-10 -20 -30 -40 -50 -60 -70 -80 -90 -100') == '-4'\nassert solution('1 1000') == '1'\n\"\"\"\n"
    },
    {
        "number": 402,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''3 222''') == '2'\nassert solution('''4 190''') == '4'\nassert solution('''7 1''') == '7'\n\n\n\"\"\"\n"
    },
    {
        "number": 402,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(input()) == input()\n"
    },
    {
        "number": 402,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"3 222\") == \"2\"\nassert solution(\"4 190\") == \"4\"\nassert solution(\"7 1\") == \"7\"\nassert solution(\"10 1\") == \"10\"\n"
    },
    {
        "number": 402,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''3 222''') == '2'\nassert solution('''4 190''') == '4'\nassert solution('''7 1''') == '7'\nassert solution('''10 14''') == '7'\n\n\n\n\n\n######\n"
    },
    {
        "number": 402,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"3 222\") == \"2\"\nassert solution(\"4 190\") == \"4\"\nassert solution(\"7 1\") == \"7\"\nassert solution(\"0 1\") == \"0\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 402,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''3 222''') == '2'\nassert solution('''4 190''') == '4'\nassert solution('''7 1''') == '7'\nassert solution('''10 12''') == '7'\nassert solution('''3 100''') == '4'\n"
    },
    {
        "number": 402,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"3 222\") == \"2\"\nassert solution(\"4 190\") == \"4\"\nassert solution(\"7 1\") == \"7\"\nassert solution(\"1 0\") == \"0\"\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 402,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('') is None\nassert solution('1 2') == '1'\nassert solution('2 3') == '1'\nassert solution('100 5') == '1'\nassert solution('1 10') == '2'\n"
    },
    {
        "number": 403,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution\ufffd"
    },
    {
        "number": 403,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution\ufffd"
    },
    {
        "number": 403,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution\ufffd"
    },
    {
        "number": 403,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution\ufffd"
    },
    {
        "number": 403,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution\ufffd"
    },
    {
        "number": 403,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution\ufffd"
    },
    {
        "number": 403,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution\ufffd"
    },
    {
        "number": 403,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution\ufffd"
    },
    {
        "number": 403,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution\ufffd"
    },
    {
        "number": 403,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution\ufffd"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''1''') == '1'\nassert solution('''2''') == '2'\nassert solution('''3''') == '6'\nassert solution('''4''') == '12'\nassert solution('''5''') == '30'\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('1') == 1\nassert solution('2') == 2\nassert solution('3') == 4\nassert solution('10') == 1\nassert solution('100') == 4\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1') == 1\nassert solution('2') == 2\n\n\n-----\n\n##2. Fibonacci numbers\n###Smallest multiple\nIvan is very lazy, so he doesn't want to spend too much time on this task. He would like to know the smallest number of Fibonacci numbers that he can write in the blackboard. Help him to write such number.\n\n\n-----Input-----\n\nThe only line contains one integer\u00a0\u2014 $n$ $(1 \\le n \\le 10^{18})$.\n\n\n-----Output-----\n\nPrint one number\u00a0\u2014 the smallest number of Fibonacci numbers Ivan will write on the blackboard.\n\n\n-----Examples-----\nInput\n5\n\nOutput\n3\n\n\n-----Note-----\n\nIn the first example Ivan will have $1$ Fibonacci numbers and the second example Ivan will have $3$ Fibonacci numbers.\n\nIn the second example Ivan will have $2$ Fibonacci numbers and the third example Ivan will have $2$ Fibonacci numbers.\n\n\n-----\n\n##3. All hail the king\n###Hail the king\nIn some cases it is impossible to create a valid expression of the mathematical expression $F(N)$ or $F_N(N)$ of $F$ and $N$ from $1$ to $N$, where $N$ is odd. Your task is to help Ivan solve this problem.\n\n\n-----Input-----\n\nThe only line contains one integer\u00a0\u2014 $N$ $(1 \\le N \\le 10^{18})$.\n\n\n-----Output-----\n\nPrint one number\u00a0\u2014 the count of all the valid expressions of $F(N)$ and $F_N(N)$ in the form $\\frac{N}{F(N)}$ or $\\frac{N}{F_N(N)}$ as a *string* (without quotes).\n\n\n-----Examples-----\nInput\n3\n\nOutput\n6\n1/3\n2/3\n1/2\n\nInput\n3\n\nOutput\n5\n1/3\n2/3\n1/2\n\nInput\n5\n\nOutput\n15\n1/3\n2/3\n1/2\n\nInput\n4\n\nOutput\n7\n1/3\n2/3\n1/2\n2/3\n\nInput\n8\n\nOutput\n21\n1/3\n2/3\n1/2\n1/3\n2/3\n1/2\n2/3\n1/3\n2/3\n\nInput\n6\n\nOutput\n18\n1/3\n2/3\n1/2\n1/3\n2/3\n1/2\n2/3\n1/3\n2/3\n1/2\n\n\n-----\n\n##4. The most valuable fraction\n###The most valuable fraction\nIn a family there are three children. He has $A$, $B$ and $C$, and each of them is given $1$ and $2$ as the happiness. The happiness of $A$ is greater than that of $B$ and $C$. You are given a list of fractions. All of the fractions are given in the form of an integer array, but it contains some of them. Help Ivan find the most valuable fraction.\n\n\n-----Input-----\n\nThe first line contains one integer\u00a0\u2014 $n$ $(1 \\le n \\le 10^{18})$ \u2014 the number of elements in the list.\n\nThe next line contains $n$ integers\u00a0\u2014\u00a0the elements of the list.\n\n\n-----Output-----\n\nPrint one number\u00a0\u2014 the value of the most valuable fraction.\n\n\n-----Examples-----\nInput\n4\n\n1 2 3 4\n\nOutput\n3\n\n\n-----\n\n##5. The most valuable fraction\n###The most valuable fraction\nIn a family there are three children. He has $A$, $B$ and $C$, and each of them is given $1$ and $2$ as the happiness. The happiness of $A$ is greater than that of $B$ and $C$. You are given a list of fractions. All of the fractions are given in the form of an integer array, but it contains some of them. Help Ivan find the most valuable fraction.\n\n\n-----Input-----\n\nThe first line contains one integer\u00a0\u2014 $n$ $(1 \\le n \\le 10^{18})$ \u2014 the number of elements in the list.\n\nThe next line contains $n$ integers\u00a0\u2014\u00a0the elements of the list.\n\n\n-----Output-----\n\nPrint one number\u00a0\u2014 the value of the most valuable fraction.\n\n\n-----Examples-----\nInput\n4\n\n1 2 3 4\n\nOutput\n3\n\n\n-----\n\n##6. Reciprocal cycles\n###Reciprocal cycles\nIn a family of rabbits there are $k$ children. The number of rabbits who live in the same family is $n$, and the number of rabbits who live in different families is $m$. You are given $n$ pairs of numbers. The first number in each pair is the number of rabbits who live in the same family, and the second number is the number of rabbits who live in different families.\n\nHelp Ivan find the number of families where all children have the same number of rabbits.\n\n\n-----Input-----\n\nThe first line contains one integer\u00a0\u2014 $n$ $(1 \\le n \\le 10^{18})$ \u2014 the number of pairs.\n\nThe next line contains $n$ integers\u00a0\u2014\u00a0the elements of the list.\n\n\n-----Output-----\n\nPrint one number\u00a0\u2014 the number of families where all children have the same number of rabbits.\n\n\n-----Examples-----\nInput\n5\n\n1 2 2 1 2\n\nOutput\n5\n\n\n-----\n\n##7. Stars in a grid\n###Stars in a grid\nIn a grid, there are several stars, located in the cells. Each cell contains a star. The star is located in the middle of the cell. Help Ivan find the number of stars in the grid.\n\n\n-----Input-----\n\nThe first line contains one integer\u00a0\u2014 $N$ $(1 \\le N \\le 10^{18})$ \u2014 the number of stars.\n\nThe next line contains $N$ integers\u00a0\u2014\u00a0the elements of the list.\n\n\n-----Output-----\n\nPrint the number of stars in the grid.\n\n\n-----Examples-----\nInput\n3\n\n2 3 1\n\nOutput\n5\n\n\n-----\n\n##8. Find the missing number\n###Find the missing number\nIn a binary search tree, every node has either zero or two children. The values of the children are distinct. The root has value 1, and every other node has a distinct value.\n\nHelp Ivan find the number of nodes which have no children.\n\n\n-----Input-----\n\nThe only line contains one integer\u00a0\u2014 $n$ $(1 \\le n \\le 10^{18})$ \u2014 the number of nodes.\n\n\n-----Output-----\n\nPrint the number of nodes which have no children.\n\n\n-----Examples-----\nInput\n4\n\nOutput\n3\n\n\n-----\n\n##9. Sum of squares\n###Sum of squares\nGiven two integers $a$ and $b$ with $a \\le b$ in the range $[0, 10^{18})$, the task is to help Ivan find the sum of the squares of the integers from $a$ to $b$, in the range $[a, b]$.\n\n\n-----Input-----\n\nThe only line contains two integers\u00a0\u2014 $a$ and $b$ with $a \\le b$ in the range $[0, 10^{18})$.\n\n\n-----Output-----\n\nPrint one integer \u2014 the sum of the squares of the integers from $a$ to $b$.\n\n\n-----Examples-----\nInput\n1 2\n\nOutput\n7\nInput\n3 1\n\nOutput\n9\n\n\n-----"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('') == 1\nassert solution('1') == 1\nassert solution('2') == 2\nassert solution('3') == 6\nassert solution('4') == 4\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"2\") == \"1\"\nassert solution(\"1\") == \"1\"\nassert solution(\"3\") == \"2\"\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('2') == 2\nassert solution('3') == 3\nassert solution('100') == 27\nassert solution('27') == 27\nassert solution('1') == 1\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('1') == 1\nassert solution('2') == 2\nassert solution('5') == 3\nassert solution('1000') == 24\nassert solution('10000') == 24\n\n\n\"\"\"\n\nfrom __future__ import annotations"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('2') == '2'\nassert solution('1') == '1'\nassert solution('10') == '2'\nassert solution('100') == '3'\nassert solution('1000') == '6'\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '4'\nassert solution('4') == '8'\nassert solution('5') == '10'\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''1''') == '1'\nassert solution('''2''') == '2'\nassert solution('''1000000000000000000''') == '1'\nassert solution('''2''') == '2'\nassert solution('''10''') == '1'\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdin\n\"\"\"\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('<<>>') == ''\nassert solution('>') == '0'\nassert solution('>') == '1'\nassert solution('><') == '1'\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"\n4\n<<>>\n\"\"\") == \"0\"\n\nassert solution(\n\"\"\"\n5\n>>>>>\n\"\"\") == \"5\"\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('<<>>') == 0\nassert solution('<<') == 1\nassert solution('<><') == 2\nassert solution('>>>>') == 5\nassert solution('<<<><<<<><<<<<<<<<<<<<<<') == 10\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('') == 0\nassert solution('<><') == 0\nassert solution('<<><') == 0\nassert solution('<<<><>') == 4\nassert solution('<><>') == 4\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('<<><') == 2\nassert solution('<><>') == 1\nassert solution('<<>>') == 0\nassert solution('><<>>') == 0\nassert solution('<<>><>>') == 2\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"><<><\") == '0'\nassert solution(\"><<>><<<<<<<<\") == '3'\nassert solution(\"><<>><<>><<<<<<<>\") == '4'\nassert solution(\"><<>><<><<>><<>><<>>\") == '3'\nassert solution(\"<<><\") == '0'\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('<<<') == 2\nassert solution('>>><') == 5\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\n\"\"\"\n4\n2 4 4 2\n\"\"\") == \"8\"\n\nassert solution(\n\"\"\"\n4\n2 2 3 5\n\"\"\") == \"0\"\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('3\\n2 4 4 2') == '8'\nassert solution('2\\n2 2 4 4') == '0'\nassert solution('4\\n2 2 4 4') == '10000800015'\nassert solution('8\\n100003 100004 100005 100006') == '1000080000015'\nprint(solution(input()))\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''4\n2 4 4 2''') == '8'\nassert solution('''4\n2 2 3 5''') == '0'\nassert solution('''4\n100003 100004 100005 100006''') == '10000800015'\nprint(solution('''10\n99999 100000 10000 100001 100002 100003 100004 100005 100006 100007 100008 100009 100010 100001001 10000100 1000101'''))\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1\\n1\\n') == '1'\nassert solution('2\\n2\\n') == '4'\nassert solution('3\\n3\\n') == '6'\nassert solution('4\\n4\\n') == '8'\nassert solution('5\\n5\\n') == '10'\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1\\n2') == '2'\nassert solution('2\\n2') == '4'\nassert solution('2\\n3') == '0'\nassert solution('1\\n4') == '1'\nassert solution('4\\n4') == '16'\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('4\\n2 4 4 2\\n') == '8'\nassert solution('4\\n2 2 3 5\\n') == '0'\nassert solution('4\\n100003 100004 100005 100006\\n') == '10000800015'\nassert solution('7\\n11 51 59 76 74 52\\n') == '0'\nassert solution('5\\n1 2 1 2 3\\n') == '6'\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == '100800015'\n\n'''"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''4\n2 4 4 2''') == '8'\nassert solution('''4\n2 2 3 5''') == '0'\nassert solution('''4\n100003 100004 100005 100006''') == '10000800015'\nassert solution('''4\n100003 100004 100005 100006''') == '10000800015'\nassert solution('''4\n100003 100004 100005 100006''') == '10000800015'\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('3\\nab\\nde\\naj') == '47'\nassert solution('5\\nabcdef\\ngij\\nbdef\\naccbd\\ng') == '136542'\nassert solution('3\\naa\\njj\\naa') == '44'\n\n\"\"\""
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('3\\nab\\nde\\naj') == '47'\nassert solution('5\\nabcdef\\ngij\\nbdef\\naccbd\\ng') == '136542'\nassert solution('3\\naa\\njj\\naa') == '44'\nassert solution('10\\nkjjjfddf\\nhjhjhjhjhhjhj\\nkkkhh') == '136542'\n'''\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''3\nab\nde\naj\n''') == '47'\nassert solution('''5\nabcdef\nghij\nbdef\naccbd\ng\n''') == '136542'\nassert solution('''3\naa\njj\naa\n''') == '44'\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('3\\nab\\nde\\naj\\n') == '47'\nassert solution('5\\nabcdef\\ngij\\nbdef\\naccbd\\ng\\n') == '136542'\nassert solution('3\\naa\\njj\\naa\\n') == '44'\nprint('Passed')\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('ab\\nab\\nab\\nab\\nab\\n') == '8'\nassert solution('de\\nde\\nde\\nde\\nde\\nde\\nde\\nde\\n') == '22'\nassert solution('aj\\naj\\naj\\naj\\naj\\naj\\naj\\naj\\naj\\naj\\n') == '65'\nassert solution('acbd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd\\naacd"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('ab') == '10'\nassert solution('de') == '23'\nassert solution('aj') == '14'\n\"\"\"\n\nfrom itertools import accumulate"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('ab\\nde\\naj') == '47'\nassert solution('abcdef\\ngij\\nbdef\\naccbd\\ng') == '136542'\nassert solution('aa\\njj\\naa') == '44'\nassert solution('\\nab\\ncd\\nabc\\nab') == '45'\nassert solution('\\n123\\n123\\n123\\n123\\n123\\n123\\n123\\n123') == '45'\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"\"\"3\nab\nde\naj\"\"\") == \"47\"\nassert solution(\"\"\"5\nabcdef\nghij\nbdef\naccbd\ng\"\"\") == \"136542\"\nassert solution(\"\"\"3\naa\njj\naa\"\"\") == \"44\"\nassert solution(\"\"\"1\nx\ny\nz\"\"\") == \"2\"\nassert solution(\"\"\"5\nacadae\nagahay\nayabaxay\nagbahxy\nhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhxhx"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"3\") == \"3\"\nassert solution(\"3\") == \"3\"\nassert solution(\"3\") == \"3\"\nassert solution(\"3\") == \"3\"\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('3\\nab\\nde\\naj') == '47'\nassert solution('5\\nabcdef\\ngij\\nbdef\\naccbd\\ng') == '136542'\nassert solution('3\\naa\\njj\\naa') == '44'\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\n    '''2 6'''\n) == '2'\n\nassert solution(\n    '''4 5'''\n) == '3'\n\nassert solution(\n    '''1 1'''\n) == '0'\n\nassert solution(\n    '''1 2'''\n) == '1'\n\nassert solution(\n    '''5 5'''\n) == '0'"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == expected_output\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('2 6') == '2'\nassert solution('4 5') == '3'\nassert solution('1 2') == '1'\n\n\"\"\""
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('2 6') == '2'\nassert solution('4 5') == '3'\n\n'''\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''2 6''') == '2'\nassert solution('''4 5''') == '3'\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('2 6') == '2'\nassert solution('4 5') == '3'\nassert solution('7 10') == '6'\nassert solution('100 100') == '50'\nassert solution('20 30') == '20'\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdin\n\n\"\"\"\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1 2') == '1'\nassert solution('1 2') == '2'\nassert solution('5 10') == '1'\nassert solution('3 5') == '3'\nassert solution('2 4') == '1'\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''2 6\n''') == '2'\nassert solution('''4 5\n''') == '3'\nassert solution('''2 1\n''') == '1'\nassert solution('''4 10\n''') == '1'\nassert solution('''1 1\n''') == '2'\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"ABA\") == \"NO\"\nassert solution(\"BACFAB\") == \"YES\"\nassert solution(\"AXBYBXA\") == \"NO\"\n\n\n\n\"\"\""
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('ABA') == 'NO'\nassert solution('BACFAB') == 'YES'\nassert solution('AXBYBXA') == 'NO'"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('ABA') == 'NO'\nassert solution('BACFAB') == 'YES'\nassert solution('AXBYBXA') == 'NO'\nassert solution('A') == 'NO'\nassert solution('ABA') == 'NO'\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('ABA') == 'NO'\nassert solution('BACFAB') == 'YES'\nassert solution('AXBYBXA') == 'NO'\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('') == \"NO\"\nassert solution('ABA') == \"NO\"\nassert solution('BACFAB') == \"YES\"\nassert solution('AXBYBXA') == \"NO\"\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"AXBYBXA\") == \"NO\"\nassert solution(\"ABA\") == \"NO\"\nassert solution(\"BACFAB\") == \"YES\"\nassert solution(\"AXBYBXA\") == \"NO\"\nassert solution(\"AXBYBXA\") == \"NO\"\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''ABA''') == 'NO'\nassert solution('''BACFAB''') == 'YES'\nassert solution('''AXBYBXA''') == 'NO'\nassert solution('''ABCABB''') == 'NO'\nassert solution('''ABCABA''') == 'NO'\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('ABA') == 'NO'\nassert solution('BACFAB') == 'YES'\nassert solution('AXBYBXA') == 'NO'\nassert solution('ABCABA') == 'YES'\nassert solution('ABCBAA') == 'NO'\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('ABA') == 'NO'\nassert solution('BACFAB') == 'YES'\nassert solution('AXBYBXA') == 'NO'\n\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == 'YES'\n\"\"\""
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('4\\n3 4\\n3') == 'YES\\n1 L\\n1 R\\n1 L\\n1 L'\nassert solution('1\\n1\\n1') == 'YES\\n1'\nassert solution('5\\n1 1 1 3 3\\n3\\n2 1 6') == 'NO'\nassert solution('3\\n3\\n1') == 'NO'\nassert solution('10\\n5 8\\n8 1') == 'NO'\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('4\\n1 2 2 2\\n2\\n1 1 1') == 'YES'\nassert solution('6\\n1 2 2 2 1 2\\n2\\n5 5') == 'NO'\nassert solution('2\\n1 2\\n2\\n2') == 'NO'\nassert solution('1\\n1') == 'NO'\nassert solution('1\\n2') == 'NO'\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('6\\n1 2 2 2 1 2\\n2\\n5 5') == 'YES\\n2 L\\n1 R\\n4 L\\n3 L'\n\nassert solution('5\\n1 1 1 3 3\\n3\\n2 1 6') == 'NO'\n\nassert solution('5\\n1 1 1 3 3\\n3\\n2 1 6') == 'YES\\n5 L\\n4 L\\n3 L\\n2 L\\n1 L'\n\n\n\"\"\""
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"\"\nassert solution(\"2\") == \"NO\"\nassert solution(\"3\") == \"NO\"\nassert solution(\"4\") == \"NO\"\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"6\") == \"YES\"\nassert solution(\"1 2 2 2 1 2\") == \"YES\"\nassert solution(\"2\") == \"NO\"\nassert solution(\"5 5\") == \"YES\"\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''6\n1 2 2 2 1 2\n2\n5 5\n''') == 'YES'\nassert solution('''5\n1 2 3 4 5\n1\n15\n''') == 'NO'\nassert solution('''5\n1 1 1 3 3\n3\n2 1 6\n''') == 'YES'\nassert solution('''6\n1 2 2 2 1 2\n2\n2 1 6\n''') == 'YES'\nassert solution('''7\n1 2 3 4 5 6 7\n1\n1\n''') == 'YES'\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\nfrom collections import deque\n\nn = int(input())\narr = [int(x) for x in input().split()]\nk = int(input())\narr += [0] * (k - n)\narr = deque(arr)\n\nfor _ in range(k):\n    weight = int(input())\n    index = arr.index(max(arr))\n    arr.rotate(-index)\n    arr.popleft()\n    arr.append(weight)\n\nprint('YES' if arr[0] == max(arr) else 'NO')\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('2\\n1 1 2') == 'NO'\nassert solution('6\\n1 2 2 2 1 2\\n2\\n5 5') == 'YES'\nassert solution('1\\n1 1 1 3 3\\n3\\n2 1 6') == 'NO'\nassert solution('6\\n1 2 3 4 5 6\\n1\\n15') == 'YES'\nassert solution('3\\n1 2 2\\n2\\n1') == 'YES'\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1 2 3 4 5') == 'YES'\nassert solution('1 2 3 4 5') == 'NO'\nassert solution('1 1 1 3 3') == 'YES'\nassert solution('1 1 1 3 3') == 'NO'\nassert solution('1 1 1 3 3') == 'NO'\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''3 3\n0 0\n2 0\n3 1\n-2 1\n0 3\n2 2''') == 'Yes'\nassert solution('''2 1\n1 0\n2 2\n3 1''') == 'No'\nassert solution('''3 1\n1 0\n2 0\n3 0\n-2 1\n0 2\n2 1\n2 0\n1 3''') == 'Yes'\nassert solution('''1 1\n1 0\n1 3\n1 0\n2 3\n2 1\n3 2\n3 1''') == 'Yes'\nassert solution('''2 3\n1 2\n2 0\n3 0\n3 2\n3 1\n1 0\n2 1\n2 3\n2 2\n1 3\n2 3''') == 'No'\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdin\n\n\"\"\"\nfrom collections import defaultdict"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''3 3''') == \"Yes\"\nassert solution('''2 1''') == \"No\"\nassert solution('''3 1''') == \"Yes\"\nassert solution('''3 3''') == \"Yes\"\nassert solution('''1 0''') == \"No\"\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('0 0\\n1 1') == 'Yes'\nassert solution('1 1\\n1 0') == 'No'\nassert solution('0 0\\n1 1\\n2 1\\n3 1') == 'No'\nassert solution('0 0\\n1 0\\n2 1') == 'Yes'\nassert solution('0 0\\n1 0\\n3 1') == 'No'\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('2 1') == 'No'\nassert solution('3 1') == 'Yes'\nassert solution('3 3') == 'Yes'\nassert solution('0 0') == 'Yes'\nassert solution('2 0') == 'Yes'\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"1 1\") == \"No\"\nassert solution(\"2 1\") == \"No\"\nassert solution(\"1 3\") == \"Yes\"\nassert solution(\"1 3\") == \"No\"\nassert solution(\"1 1\") == \"No\"\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdin\n'''"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\n\n'''\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1 1') == 'Yes'\nassert solution('2 2') == 'No'\nassert solution('1 2') == 'No'\nassert solution('2 1') == 'No'\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('stdin') == '1 4'\nassert solution('stdin') == '16 3'\nassert solution('stdin') == '1 4'\nassert solution('stdin') == '2 4'\nassert solution('stdin') == '1 4'\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''5\n80 7 16 4 48''') == '16 3'\nassert solution('''4\n21 5 3 33''') == '1 4'\n\n\n\"\"\"\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\n    '''\n5\n80 7 16 4 48\n'''\n) == '16 3'\n\nassert solution(\n    '''\n4\n21 5 3 33\n'''\n) == '1 4'\n'''"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1\\n1') == '4'\n\n\"\"\""
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('5\\n80 7 16 4 48\\n') == '16 3\\n'\n\n\n\n\"\"\"\n\nn = int(input())\na = [int(x) for x in input().split()]\na_reverse = a[::-1]\nmax_a_reverse_divide_2 = 0\nmax_divide_2_counter = 0\nfor i in range(len(a)):\n    if a_reverse[i] > 2:\n        max_a_reverse_divide_2 += 1\n    if a[i] % 2 == 0 and a_reverse[i] > max_a_reverse_divide_2:\n        max_divide_2_counter = i\n        max_a_reverse_divide_2 = a_reverse[i]\nprint(max_divide_2_counter + 1, max_a_reverse_divide_2)\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"16\\n21\\n5\\n3\\n33\") == \"1 4\"\nassert solution(\"4\\n21\\n5\\n3\\n33\") == \"1 4\"\nassert solution(\"4\\n20\\n5\\n3\\n33\") == \"0 4\"\nassert solution(\"4\\n21\\n5\\n3\\n32\") == \"0 4\"\nassert solution(\"4\\n20\\n5\\n3\\n34\") == \"0 4\"\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\n    '5\\n'\n    '80 7 16 4 48\\n'\n    ) == '16 3'\nassert solution(\n    '4\\n'\n    '21 5 3 33\\n'\n    ) == '1 4'\nassert solution(\n    '2\\n'\n    '10 9 10\\n'\n    ) == '2 1'\nassert solution(\n    '3\\n'\n    '10 15 6\\n'\n    ) == '1 2'\nassert solution(\n    '4\\n'\n    '11 22 33 44\\n'\n    ) == '2 2'\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1\\n5') == '1 4'\nassert solution('2\\n8') == '1 2'\nassert solution('3\\n9') == '1 3'\nassert solution('4\\n10') == '1 4'\nassert solution('5\\n11') == '1 2'\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('hello') == 'hello'\nassert solution('goodbye') == 'goodbye'\nassert solution('chicken') == 'chicken'\nassert solution('love') == 'love'\nassert solution('a') == 'a'\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1\\n0') == '2\\n0'\nassert solution('2\\n1') == '2\\n0'\nassert solution('1\\n1') == '2\\n0'\nassert solution('2\\n2') == '2\\n0'\nassert solution('1\\n2') == '2\\n1'\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(input()) == \"\"\n\"\"\""
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('1 2') == '9'\nassert solution('9 7') == '2'\nassert solution('100 999') == '1'\nassert solution('100 100') == '0'\nassert solution('1 100') == '1'\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"1 2\") == 1\nassert solution(\"2 2\") == 0\nassert solution(\"10 1\") == 9\nassert solution(\"3 4\") == 2\nassert solution(\"1 1\") == 0\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(input()) == '2'\n\"\"\"\nfrom math import ceil\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(input()) == \"9\"\nassert solution(input()) == \"8\"\nassert solution(input()) == \"4\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"1\"\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"4 6\") == \"2\"\nassert solution(\"10 1\") == \"9\"\nassert solution(\"1 2\") == \"0\"\nassert solution(\"9 9\") == \"0\"\nassert solution(\"9 9\") == \"0\"\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('4 6') == '2'\nassert solution('10 1') == '9'\nassert solution('1 1') == '0'\nassert solution('10 1') == '9'\nassert solution('1 10') == '9'\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"5 4\") == \"2\"\nassert solution(\"1 2\") == \"9\"\nassert solution(\"4 6\") == \"2\"\nassert solution(\"100 100\") == \"0\"\nassert solution(\"10 1\") == \"9\"\n\"\"\"\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"1 1\") == \"0\"\nassert solution(\"2 3\") == \"1\"\nassert solution(\"4 6\") == \"2\"\nassert solution(\"10 1\") == \"9\"\nassert solution(\"1 1\") == \"0\"\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"4 6\") == \"2\"\nassert solution(\"10 1\") == \"9\""
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"6\\n9 12\\n2 11\\n1 3\\n6 10\\n5 7\\n4 8\\n\") == \"YES\"\nassert solution(\"5\\n1 3\\n2 4\\n5 9\\n6 8\\n7 10\\n1 4\\n\") == \"NO\"\nassert solution(\"5\\n5 8\\n3 6\\n2 9\\n7 10\\n1 4\\n\") == \"NO\"\nassert solution(\"6\\n9 12\\n2 11\\n1 3\\n6 10\\n5 7\\n4 8\\n\") == \"YES\"\nassert solution(\"5\\n5 8\\n3 6\\n2 9\\n7 10\\n1 4\\n\") == \"NO\"\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''6\n9 12\n2 11\n1 3\n6 10\n5 7\n4 8\n''') == 'YES'\nassert solution('''5\n5 8\n3 6\n2 9\n7 10\n1 4\n''') == 'NO'\nassert solution('''1\n1 3\n2 4\n5 9\n6 8\n7 10\n''') == 'YES'\n'''"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"\"\"9 12\n2 11\n1 3\n6 10\n5 7\n4 8\n\"\"\".strip()) == \"YES\"\n\nassert solution(\"\"\"5\n1 3\n2 4\n5 9\n6 8\n7 10\n\"\"\".strip()) == \"NO\"\n\nassert solution(\"\"\"6\n9 12\n2 11\n1 3\n6 10\n5 7\n4 8\n\"\"\".strip()) == \"NO\"\n\nassert solution(\"\"\"5\n5 8\n3 6\n2 9\n7 10\n1 4\n\"\"\".strip()) == \"NO\"\n\nassert solution(\"\"\"5\n1 3\n2 4\n5 9\n6 8\n7 10\n\"\"\".strip()) == \"NO\""
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1\\n1\\n') == 'YES'\nassert solution('1\\n1\\n2\\n') == 'NO'\nassert solution('1\\n1\\n2\\n2\\n') == 'NO'\nassert solution('1\\n1\\n2\\n1\\n') == 'YES'\nassert solution('5\\n1 3\\n2 4\\n5 9\\n6 8\\n7 10\\n1 4\\n') == 'NO'\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('5\\n5 8\\n3 6\\n2 9\\n7 10\\n1 4\\n') == 'NO'\nassert solution('6\\n9 12\\n2 11\\n1 3\\n6 10\\n5 7\\n4 8\\n') == 'YES'\nassert solution('5\\n5 8\\n3 6\\n2 9\\n7 10\\n1 4\\n') == 'NO'\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"\"\"5\n5 8\n3 6\n2 9\n7 10\n1 4\"\"\") == \"YES\"\nassert solution(\"\"\"5\n1 3\n2 4\n5 9\n6 8\n7 10\n\n5\n5 8\n3 6\n2 9\n7 10\n1 4\"\"\") == \"NO\"\nassert solution(\"\"\"5\n5 8\n3 6\n2 9\n7 10\n1 4\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n5\n5 8\n3 6\n2 9\n7 10\n1 4\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n5\n5 8\n3 6\n2 9\n7 10\n1 4\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n5\n5 8\n3 6\n2 9\n7 10\n1 4\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n5\n5 8\n3 6\n2 9\n7 10\n1 4\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n5\n5 8\n3 6\n2 9\n7 10\n1 4\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n5\n5 8\n3 6\n2 9\n7 10\n1 4\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n5\n5 8\n3 6\n2 9\n7 10\n1 4\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n5\n5 8\n3 6\n2 9\n7 10\n1 4\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n5\n5 8\n3 6\n2 9\n7 10\n1 4\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n5\n5 8\n3 6\n2 9\n7 10\n1 4\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n5\n5 8\n3 6\n2 9\n7 10\n1 4\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n5\n5 8\n3 6\n2 9\n7 10\n1 4\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n5\n5 8\n3 6\n2 9\n7 10\n1 4\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n5\n5 8\n3 6\n2 9\n7 10\n1 4\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n5\n5 8\n3 6\n2 9\n7 10\n1 4\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n5\n5 8\n3 6\n2 9\n7 10\n1 4\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n5\n5 8\n3 6\n2 9\n7 10\n1 4\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n5\n5 8\n3 6\n2 9\n7 10\n1 4\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n5\n5 8\n3 6\n2 9\n7 10\n1 4\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n5\n5 8\n3 6\n2 9\n7 10\n1 4\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n5\n5 8\n3 6\n2 9\n7 10\n1 4\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n5\n5 8\n3 6\n2 9\n7 10\n1 4\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n5\n5 8\n3 6\n2 9\n7 10\n1 4\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n5\n5 8\n3 6\n2 9\n7 10\n1 4\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n5\n5 8\n3 6\n2 9\n7 10\n1 4\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n5\n5 8\n3 6\n2 9\n7 10\n1 4\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n5\n5 8\n3 6\n2 9\n7 10\n1 4\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n5\n5 8\n3 6\n2 9\n7 10\n1 4\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n5\n5 8\n3 6\n2 9\n7 10\n1 4\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n5\n5 8\n3 6\n2 9\n7 10\n1 4\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n5\n5 8\n3 6\n2 9\n7 10\n1 4\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n5\n5 8\n3 6\n2 9\n7 10\n1 4\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n5\n5 8\n3 6\n2 9\n7 10\n1 4\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n5\n5 8\n3 6\n2 9\n7 10\n1 4\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n5\n5 8\n3 6\n2 9\n7 10\n1 4\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n5\n5 8\n3 6\n2 9\n7 10\n1 4\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n5\n5 8\n3 6\n2 9\n7 10\n1 4\n2\n3\n4\n5\n6\n7\n8\n9\n10"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"7\\n3 8\\n2 1\\n6 10\\n5 7\\n4 8\\n\") == \"YES\"\nassert solution(\"7\\n3 8\\n2 1\\n6 10\\n5 7\\n4 8\\n\") == \"NO\"\nassert solution(\"7\\n3 8\\n2 1\\n6 10\\n5 7\\n4 8\\n\") == \"NO\"\nassert solution(\"7\\n3 8\\n2 1\\n6 10\\n5 7\\n4 8\\n\") == \"NO\"\nassert solution(\"7\\n3 8\\n2 1\\n6 10\\n5 7\\n4 8\\n\") == \"NO\"\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('4\\n1 1\\n1 2\\n1 3\\n2 1\\n3 1\\n2 2\\n2 3\\n3 2\\n3 3') == 'YES'\nassert solution('5\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5\\n4 5') == 'NO'\n\n\n\"\"\"\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('6') == 'YES'\nassert solution('5') == 'NO'\nassert solution('5') == 'NO'\nassert solution('5') == 'NO'\nassert solution('5') == 'NO'\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('5\\n100 200 1 1 1') == '3'\nassert solution('5\\n1 2 3 4 5') == '0'\nassert solution('2\\n101 99') == '1'\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('5\\n100 200 1 1 1\\n') == '3'\nassert solution('2\\n101 99\\n') == '1'\nassert solution('5\\n1 2 3 4 5\\n') == '0'\n\n\n\n\"\"\"\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''5\n100 200 1 1 1''') == '3'\nassert solution('''5\n1 2 3 4 5''') == '0'\nassert solution('''10\n101 99''') == '1'"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"1 2 3 4 5\") == \"0\"\nassert solution(\"100 200 1 1 1\") == \"3\"\nassert solution(\"5\") == \"0\"\nassert solution(\"1 2 3 4 5\") == \"3\"\nassert solution(\"101 99\") == \"1\"\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1\\n0') == '0'\nassert solution('1\\n1') == '1'\nassert solution('1\\n10') == '1'\nassert solution('1\\n1 1') == '1'\nassert solution('1\\n10 1') == '1'\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''5\n100 200 1 1 1''') == '3'\nassert solution('''5\n1 2 3 4 5''') == '0'\nassert solution('''2\n101 99''') == '1'\nassert solution('''5\n10 9 9 9 8''') == '0'\nassert solution('''2\n1 2''') == '1'\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('3\\n2 1 1\\n') == '0'\nassert solution('3\\n2 3 1\\n') == '1'\nassert solution('3\\n2 3 4 1\\n') == '2'\nassert solution('3\\n2 3 4 5 1\\n') == '3'\nassert solution('5\\n10 1 10 1 10 1\\n') == '1'\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('5\\n100 200 1 1 1\\n') == '3'\nassert solution('2\\n101 99\\n') == '0'\nassert solution('5\\n1 2 3 4 5\\n') == '1'\nassert solution('5\\n1 2 3 4 5\\n') == '0'\nassert solution('2\\n101 99\\n') == '1'\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 416,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('5 2') == 'YES'\nassert solution('6 1') == 'NO'\nassert solution('????NN') == 'NO'\nassert solution('YYYYYNNNYYYYYYYYYYYNNN') == 'YES'\nassert solution('????NYYYYNNNNNNNNYYYYYYYNN') == 'YES'\n"
    },
    {
        "number": 416,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''5 2\nNYNNY\n''') == 'YES'\nassert solution('''6 1\n????NN\n''') == 'NO'\nassert solution('''6 1\nNNNNNN\n''') == 'NO'\nassert solution('''5 2\nNNNNN\n''') == 'YES'\nassert solution('''5 2\nNNNNN\nNNNNN\n''') == 'YES'\n"
    },
    {
        "number": 416,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1') == 'NO'\nassert solution('2') == 'YES'\nassert solution('5') == 'NO'\nassert solution('7') == 'NO'\nassert solution('12') == 'YES'\n"
    },
    {
        "number": 416,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"4 2\") == \"NO\"\nassert solution(\"5 2\") == \"NO\"\nassert solution(\"5 2\") == \"NO\"\nassert solution(\"5 2\") == \"YES\"\nassert solution(\"5 2\") == \"YES\"\n"
    },
    {
        "number": 416,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('5 2\\nNYNNY') == 'YES'\nassert solution('6 1\\n????NN') == 'NO'"
    },
    {
        "number": 416,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('5 2') == 'YES'\nassert solution('6 1') == 'NO'\nassert solution('9 1') == 'YES'\nassert solution('6 0') == 'YES'\nassert solution('8 0') == 'NO'\n"
    },
    {
        "number": 416,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('1 2') == 'NO'\nassert solution('2 1') == 'YES'\nassert solution('???') == 'NO'\nassert solution('NYNNY') == 'YES'\nassert solution('??NN') == 'NO'\n"
    },
    {
        "number": 416,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == \"YES\"\n\n\"\"\"\n\nimport sys\nfrom collections import Counter\nstdin = sys.stdin"
    },
    {
        "number": 416,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('5 2\\nNYNNY') == 'YES'\nassert solution('6 1\\n????NN') == 'NO'\nassert solution('3 1\\nNYNN') == 'YES'\nassert solution('5 4\\nYYNNN') == 'YES'\nassert solution('6 1\\nYYNN') == 'NO'\n"
    },
    {
        "number": 416,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('6 1') == 'NO'\nassert solution('5 2') == 'YES'\nassert solution('2 4') == 'YES'\nassert solution('5 7') == 'YES'\nassert solution('5 4') == 'NO'\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1 2 3') == '1'\nassert solution('1 3 2') == '8'\nassert solution('2 3 1') == '0'\nassert solution('1 2 3 4 5 6 7 8 9') == '48'\nassert solution('1 2 3 4 5 6 7 8 9 10') == '6'"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"3 4 2\") == \"8\"\nassert solution(\"-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('3 4 2') == '8'\nassert solution('3 1 3') == '7'\nassert solution('3 1 2') == '3'\nassert solution('3 2 1') == '5'\nassert solution('4 1 1') == '4'\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"3 4 2\") == \"8\"\nassert solution(\"1 10 10\") == \"8\"\nassert solution(\"2 3 2\") == \"8\"\nassert solution(\"3 5 1\") == \"8\"\nassert solution(\"8 9 1\") == \"2\"\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('3 4 2') == '8'\nassert solution('6 7 2') == '-18'\nassert solution('6 7 3') == '-10'\nassert solution('10 2 0') == '-18'\nassert solution('10 2 4') == '0'\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"3 4 2\") == \"8\"\nassert solution(\"5 10 1\") == \"4\"\nassert solution(\"5 9 2\") == \"1\"\nassert solution(\"4 2\") == \"1\"\nassert solution(\"4 6 2\") == \"8\"\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3 4\") == \"1\"\nassert solution(\"2 2 1 1\") == \"0\"\nassert solution(\"2 2 2 1\") == \"1\"\nassert solution(\"2 3 4 1\") == \"2\"\nassert solution(\"2 3 2 4\") == \"2\"\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdin[:1]\n\"\"\"\n\nN, D = map(int, stdin.readline().split(\" \"))\n\nS = 0\nT = 0\n\nfor _ in range(N):\n    S += D\n    T -= D\n\nprint(S - T)\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('3 4 2') == '8'\nassert solution('3 5 2') == '7'\nassert solution('3 2 2') == '8'\nassert solution('3 4 1') == '7'\nassert solution('3 4 6') == '7'\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''3 4 2''') == '8'\nassert solution('''3 5 1''') == '0'\nassert solution('''10 3 1''') == '0'\nassert solution('''5 3 1''') == '0'\nassert solution('''100 5 1''') == '0'\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''3\nBurunduk1 2526 2537\nBudAlNik 2084 2214\nsubscriber 2833 2749''') == 'YES'\nassert solution('''3\nApplejack 2400 2400\nFluttershy 2390 2431\nPinkie_Pie -2500 -2450''') == 'NO'\nassert solution('''3\nRazd_Zoo -2350 -2450\nBudAlNik -2349 -2456\nsubscriber -2143 -2456''') == 'NO'\n'''\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('3\\nApplejack 2400 2400\\nFluttershy 2390 2431\\nsubscriber 2833 2749') == 'YES'\nassert solution('3\\nBudAlNik 2084 2214\\nsubscriber 2833 2749') == 'NO'\nassert solution('3\\nApplejack -2500 -2450\\nFluttershy -2500 -2450\\nsubscriber -2500 -2450') == 'NO'\n\n\n-----Solution 1-----\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''3''') == 'YES'\nassert solution('''3\nApplejack 2400 2400\nFluttershy 2390 2431\nPinkie_Pie -2500 -2450''') == 'NO'\nassert solution('''3\nBurunduk1 2526 2537\nBudAlNik 2084 2214\nsubscriber 2833 2749''') == 'NO'"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''3\nBurunduk1 2526 2537\nBudAlNik 2084 2214\nsubscriber 2833 2749''') == 'YES'\nassert solution('''3\nApplejack 2400 2400\nFluttershy 2390 2431\nPinkie_Pie -2500 -2450''') == 'NO'\nassert solution('''10\nA-B-C-D-E-F-G-H-I-J-K-L-M-N-O-P-Q-R-S-T-U-V-W-X-Y-Z\nA1-2-3-4-5-6-7-8-9-10\nAB-A1-2-3-4-5-6-7-8-9-10\nABC-AB1-2-3-4-5-6-7-8-9-10\nABCD-ABC1-2-3-4-5-6-7-8-9-10\nABCDE-ABC1-2-3-4-5-6-7-8-9-10\nABCDEFG-ABC1-2-3-4-5-6-7-8-9-10\nABCDEFGHI-ABC1-2-3-4-5-6-7-8-9-10\nABCDEFGHIJKL-ABC1-2-3-4-5-6-7-8-9-10\nABCDEFGHIJKLMNOPQRSTUVWXYZ-ABC1-2-3-4-5-6-7-8-9-10\n''') == 'YES'\nassert solution('''10\nA-B-C-D-E-F-G-H-I-J-K-L-M-N-O-P-Q-R-S-T-U-V-W-X-Y-Z\nA1-2-3-4-5-6-7-8-9-10\nAB-A1-2-3-4-5-6-7-8-9-10\nABC-AB1-2-3-4-5-6-7-8-9-10\nABCD-ABC1-2-3-4-5-6-7-8-9-10\nABCDE-ABC1-2-3-4-5-6-7-8-9-10\nABCDEFG-ABC1-2-3-4-5-6-7-8-9-10\nABCDEFGHI-ABC1-2-3-4-5-6-7-8-9-10\nABCDEFGHIJKL-ABC1-2-3-4-5-6-7-8-9-10\nABCDEFGHIJKLMNOPQRSTUVWXYZ-ABC1-2-3-4-5-6-7-8-9-10\n''') == 'NO'\n\nassert solution('''4\nA-B-C-D\nA1-2-3-4\nAB-A1-2-3-4\nABC-AB1-2-3-4\n''') == 'YES'"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''3\nBurunduk1 2526 2537\nBudAlNik 2084 2214\nsubscriber 2833 2749''') == 'NO'\nassert solution('''3\nApplejack 2400 2400\nFluttershy 2390 2431\nPinkie_Pie -2500 -2450''') == 'NO'\nassert solution('''3\nBudAlNik 2084 2214\nsubscriber 2833 2749\nsubscriber 2833 2749\nsubscriber 2833 2749''') == 'YES'\nassert solution('''3\nBudAlNik 2084 2214\nsubscriber 2833 2749\nsubscriber 2833 2749\nsubscriber 2833 2749''') == 'NO'\nassert solution('''3\nBudAlNik 2084 2214\nsubscriber 2833 2749\nsubscriber 2833 2749\nsubscriber 2833 2749''') == 'NO'\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''3\nBurunduk1 2526 2537\nBudAlNik 2084 2214\nsubscriber 2833 2749''') == 'YES'\nassert solution('''3\nApplejack 2400 2400\nFluttershy 2390 2431\nPinkie_Pie -2500 -2450''') == 'NO'\nassert solution('''1\nDaria2 629 0\nBurunduk1 2526 2537\nBudAlNik 2084 2214\nsubscriber 2833 2749\nMelissandre 915 0\nBlack_swan 859 0\n''') == 'NO'\n'''\n\nn = int(input())\n\nfor i in range(n):\n    handle, rating_before, rating_after = input().split()\n    rating_before = int(rating_before)\n    rating_after = int(rating_after)\n\n    if rating_after > rating_before:\n        print(\"NO\")\n    else:\n        print(\"YES\")"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('3\\nBurunduk1 2526 2537\\nBudAlNik 2084 2214\\nsubscriber 2833 2749\\n') == 'NO'\nassert solution('3\\nApplejack 2400 2400\\nFluttershy 2390 2431\\nPinkie_Pie -2500 -2450\\n') == 'YES'\nassert solution('3\\nLoyalty_3 -2318 -2560\\nPiero_6 -2400 -2680\\nKate_2 -2430 -2800\\n') == 'YES'\nassert solution('5\\nDiehard_50 2000 2000 2000 2000 2000\\nTigreal_5 1727 1727 1727 1727 1727\\nFord_1 -1919 -1615\\nMarty_3 -1203 -1457\\nM_T_1 -1464 -1301\\n') == 'NO'\nassert solution('3\\nCadillac_-1630 -1700\\nValtteri_50 -1850 -1350\\nTigreal_5 1727 1727 1727 1727 1727\\n') == 'YES'\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('3') == 'NO'\nassert solution('3\\nApplejack 2400 2400\\nFluttershy 2390 2431\\nPinkie_Pie -2500 -2450') == 'NO'\nassert solution('1') == 'YES'\nassert solution('1\\nBudAlNik 2084 2214\\nsubscriber 2833 2749') == 'YES'"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('2\\n2\\n2') == 'NO'\nassert solution('1\\n1\\n2') == 'YES'\nassert solution('2\\n2\\n2\\n1\\n1') == 'NO'\nassert solution('2\\n2\\n2\\n1\\n1\\n2') == 'NO'\nassert solution('2\\n2\\n2\\n2\\n1\\n1') == 'YES'\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''3''') == 'YES'\nassert solution('''3\nApplejack 2400 2400\nFluttershy 2390 2431\nPinkie_Pie -2500 -2450''') == 'NO'\nassert solution('''3\nBudAlNik 2084 2214\nsubscriber 2833 2749''') == 'NO'"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('100000000') == 4\nassert solution('101') == 2\nassert solution('10100') == 3\nassert solution('100101') == 1\n\n\"\"\""
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\n    '100000000'\n) == '4'\n\nassert solution(\n    '101'\n) == '2'\n\nassert solution(\n    '10100'\n) == '3'\n\nassert solution(\n    '101101'\n) == '2'\n\n\n-----"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('100000000') == '4'\nassert solution('101') == '2'\nassert solution('10100') == '3'\nassert solution('1010') == '3'\nassert solution('100') == '0'\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(100000000) == 4\nassert solution(10100) == 3\nassert solution(10101) == 1\nassert solution(101010) == 1\nassert solution(101001) == 0\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(bin(int(input()))) == str(int(input()))\n\n'''\n\n'''\nRelated Kattis problems:\n\n869. Sum of Powers of Four\n973. Sum of Powers of Four - II\n1037. Binary Watch - I\n1037. Binary Watch - II\n1037. Binary Watch - III\n1037. Binary Watch - IV\n1037. Binary Watch - V\n1037. Binary Watch - VI\n\n'''"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('100000000') == '4'\nassert solution('101') == '2'\nassert solution('10100') == '3'\nassert solution('0') == '0'\nassert solution('1') == '1'\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('100000000') == '4'\nassert solution('101') == '2'\nassert solution('10100') == '3'"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('101') == 2\nassert solution('10100') == 3\nassert solution('00011011101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(101) == 3\nassert solution(10100) == 3\nassert solution(100000) == 64\nassert solution(0) == 1\nassert solution(1) == 4\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('100000000') == '4'\nassert solution('101') == '2'\nassert solution('10100') == '3'\nassert solution('1010011') == '3'\nassert solution('101001100') == '3'\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''4 3\n0 0 1\n1 1 0\n1 1 0\n0 0 1''') == '2'\nassert solution('''3 3\n0 0 0\n0 0 0\n0 0 0''') == '3'\nassert solution('''8 1\n0\n1\n1\n0\n0\n1\n1\n0\n''') == '2'\nassert solution('''8 1\n0\n0\n0\n0\n0\n0\n0\n0\n''') == '2'\nassert solution('''8 1\n0\n0\n0\n0\n0\n0\n0\n0\n''') == '2'\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\n    \"\"\"4 3\n0 0 1\n1 1 0\n1 1 0\n0 0 1\"\"\"\n) == \"2\"\nassert solution(\n    \"\"\"3 3\n0 0 0\n0 0 0\n0 0 0\n\"\"\") == \"3\"\nassert solution(\n    \"\"\"8 1\n0\n1\n1\n0\n0\n1\n1\n0\n\"\"\"\n) == \"2\""
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"4 3\\n0 0 1\\n1 1 0\\n1 1 0\\n0 0 1\") == \"2\"\nassert solution(\"3 3\\n0 0 0\\n0 0 0\\n0 0 0\\n\") == \"3\"\nassert solution(\"8 1\\n0\\n1\\n1\\n0\\n0\\n0\\n1\\n\") == \"2\"\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"3 1\\n0\\n0\\n0\\n\") == \"2\"\nassert solution(\"4 1\\n0\\n0\\n0\\n\") == \"2\"\nassert solution(\"3 2\\n0\\n0\\n0\\n\") == \"3\"\nassert solution(\"2 3\\n0\\n0\\n0\\n\") == \"1\"\nassert solution(\"8 1\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n\") == \"3\"\n\n\n-----\n\nThis solution is based on the fact that we can apply the same algorithm to a new matrix m. If we perform a mirroring operation on matrix m, then we are looking for the mirroring of the matrix m.\n\nWe can find the mirroring of the matrix m by invert all elements in the upper half and invert the elements in the middle line.\n\nFor the upper half we just need to invert all elements in the lower half. In the middle line we can invert elements in the upper half, and then we need to invert all elements in the upper half in the middle line.\n\n\n-----"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('4 3\\n0 0 1\\n1 1 0\\n1 1 0\\n0 0 1\\n') == '2'\nassert solution('3 3\\n0 0 0\\n0 0 0\\n0 0 0\\n') == '3'\nassert solution('8 1\\n0\\n1\\n1\\n0\\n0\\n1\\n0\\n') == '2'\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"4 3\") == \"2\"\nassert solution(\"8 1\") == \"2\"\nassert solution(\"3 3\") == \"3\"\nassert solution(\"0 0 0\") == \"1\"\nassert solution(\"0 0 1\") == \"1\"\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('1 2\\n1 1\\n1 1') == '2'\nassert solution('2 3\\n1 1\\n1 1') == '3'\nassert solution('3 3\\n0 0 0\\n0 0 0\\n0 0 0') == '3'\nassert solution('4 1\\n0\\n1\\n1\\n0') == '2'\nassert solution('5 2\\n1 1\\n1 1\\n1 1\\n1 1') == '3'\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('2 2\\n0 0 1\\n1 1 0\\n1 1 0\\n0 0 1') == '2'\nassert solution('2 3\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0') == '3'\nassert solution('4 3\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0') == '2'\nassert solution('8 1\\n0\\n1\\n1\\n0\\n0\\n1\\n1\\n0') == '3'\nassert solution('8 2\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0') == '3'\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == result\nprint(solution(stdin))\n\n\"\"\"\nfrom sys import stdin\nfrom collections import Counter"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('0 0 1\\n1 1 0\\n1 1 0\\n0 0 1') == 2\nassert solution('4 3\\n0 0 1\\n1 1 0\\n1 1 0\\n0 0 1\\n0 0 1\\n0 0 1') == 2\nassert solution('8 1\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0') == 3\n\n\n\n\n\"\"\"\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"1\\n2\") == \"1\"\nassert solution(\"2\\n3\") == \"1\"\nassert solution(\"4\\n5\") == \"2\"\nassert solution(\"1 2\\n2 3\\n3 4\\n4 5\\n5 6\") == \"3\"\nassert solution(\"6\\n4 8\\n1 5\\n4 7\\n2 5\\n1 3\\n6 8\") == \"2\"\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''2\n7 11\n4 7\n''') == '1'\nassert solution('''5\n1 2\n2 3\n3 4\n4 5\n5 6\n''') == '3'\nassert solution('''6\n4 8\n1 5\n4 7\n2 5\n1 3\n6 8\n''') == '2'\nassert solution('''10\n4 8\n1 5\n4 7\n2 5\n1 3\n6 8\n1 5\n4 7\n2 5\n1 3\n6 8\n''') == '5'\nassert solution('''10\n1 1\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n1 11\n1 12\n1 13\n1 14\n1 15\n1 16\n1 17\n1 18\n1 19\n1 20\n1 21\n1 22\n1 23\n1 24\n1 25\n1 26\n1 27\n1 28\n1 29\n1 30\n1 31\n1 32\n1 33\n1 34\n1 35\n1 36\n1 37\n1 38\n1 39\n1 40\n1 41\n1 42\n1 43\n1 44\n1 45\n1 46\n1 47\n1 48\n1 49\n1 50\n1 51\n1 52\n1 53\n1 54\n1 55\n1 56\n1 57\n1 58\n1 59\n1 60\n1 61\n1 62\n1 63\n1 64\n1 65\n1 66\n1 67\n1 68\n1 69\n1 70\n1 71\n1 72\n1 73\n1 74\n1 75\n1 76\n1 77\n1 78\n1 79\n1 80\n1 81\n1 82\n1 83\n1 84\n1 85\n1 86\n1 87\n1 88\n1 89\n1 90\n1 91\n1 92\n1 93\n1 94\n1 95\n1 96\n1 97\n1 98\n1 99\n1 100\n1 101\n1 102\n1 103\n1 104\n1 105\n1 106\n1 107\n1 108\n1 109\n1 110\n1 111\n1 112\n1 113\n1 114\n1 115\n1 116\n1 117\n1 118\n1 119\n1 120\n1 121\n1 122\n1 123\n1 124\n1 125\n1 126\n1 127\n1 128\n1 129\n1 130\n1 131\n1 132\n1 133\n1 134\n1 135\n1 136\n1 137\n1 138\n1 139\n1 140\n1 141\n1 142\n1 143\n1 144\n1 145\n1 146\n1 147\n1 148\n1 149\n1 150\n1 151\n1 152\n1 153\n1 154\n1 155\n1 156\n1 157\n1 158\n1 159\n1 160\n1 161\n1 162\n1 163\n1 164\n1 165\n1 166\n1 167\n1 168\n1 169\n1 170\n1 171\n1 172\n1 173\n1 174\n1 175\n1 176\n1 177\n1 178\n1 179\n1 180\n1 181\n1 182\n1 183\n1 184\n1 185\n1 186\n1 187\n1 188\n1 189\n1 190\n1 191\n1 192\n1 193\n1 194\n1 195\n1 196\n1 197\n1 198\n1 199\n1 200\n1 201\n1 202\n1 203\n1 204\n1 205\n1 206\n1 207\n1 208\n1 209\n1 210\n1 211\n1 212\n1 213\n1 214\n1 215\n1 216\n1 217\n1 218\n1 219\n1 220\n1 221\n1 222\n1 223\n1 224\n1 225\n1 226\n1 227\n1 228\n1 229\n1 230\n1 231\n1 232\n1 233\n1 234\n1 235\n1 236\n1 237\n1 238\n1 239\n1 240\n1 241\n1 242\n1 243\n1 244\n1 245\n1 246\n1 247\n1 248\n1 249\n1 250\n1 251\n1 252\n1 253\n1 254\n1 255\n1 256\n1 257\n1 258\n1 259\n1 260\n1 261\n1 262\n1 263\n1 264\n1 265\n1 266\n1 267\n1 268\n1 269\n1 270\n1 271\n1 272\n1 273\n1 274\n1 275\n1 276\n1 277\n1 278\n1 279\n1 280\n1 281\n1 282\n1 283\n1 284\n1 285\n1 286\n1 287\n1 288\n1 289\n1 290\n1 291\n1 292\n1 293\n1 294\n1 295\n1 296\n1 297\n1 298\n1 299\n1 300\n1 301\n1 302\n1 303\n1 304\n1 305\n1 306\n1 307\n1 308\n1 309\n1 310\n1 311\n1 312\n1 313\n1 314\n1 315\n1 316\n1 317\n1 318\n1 319\n1 320\n1 321\n1 322\n1 323\n1 324\n1 325\n1 326\n1 327\n1 328\n1 329\n1 330\n1 331\n1 332\n1 333\n1 334\n1 335\n1 336\n1 337\n1 338\n1 339\n1 340\n1 341\n1 342\n1 343\n1 344\n1 345\n1 346\n1 347\n1 348\n1 349\n1 350\n1 351\n1 352\n1 353\n1 354\n1 355\n1 356\n1 357\n1 358\n1 359\n1 360\n1 361\n1 362\n1 363\n1 364\n1 365\n1 366\n1 367\n1 368\n1 369\n1 370\n1 371\n1 372\n1 373\n1 374\n1 375\n1 376\n1 377\n1 378\n1 379\n1 380\n1 381\n1 382\n1 383\n1 384\n1 385\n1 386\n1 387\n1 388\n1 389\n1 390\n1 391\n1 392\n1 393\n1 394\n1 395\n1 396\n1 397\n1 398\n1 399\n1 400\n1 401\n1 402\n1 403\n1 404\n1 405\n1 406\n1 407\n1 408\n1 409\n1 410\n1 411\n1 412\n1 413\n1 414\n1 415\n1 416\n1 417\n1 418\n1 419\n1 420\n1 421\n1 422\n1 423\n1 424\n1 425\n1 426\n1 427\n1 428\n1 429\n1 430\n1 431\n1 432\n1 433\n1 434\n1 435\n1 436\n1 437\n1 438\n1 439\n1 440\n1 441\n1 442\n1 443\n1 444\n1 445\n1 446\n1 447\n1 448\n1 449\n1 450\n1 451\n1 452\n1 453\n1 454\n1 455\n1 456\n1 457\n1 458\n1 459\n1 460\n1 461\n1 462\n1 463\n1 464\n1 465\n1 466\n1 467\n1 468\n1 469\n1 470\n1 471\n1 472\n1 473\n1 474\n1 475\n1 476\n1 477\n1 478\n1 479\n1 480\n1 481\n1 482\n1 483\n1 484\n1 485\n1 486\n1 487\n1 488\n1 489\n1 490\n1 491\n1 492\n1 493\n1 494\n1 495\n1 496\n1 497\n1 498\n1 499\n1 500\n1 501\n1 502\n1 503\n1 504\n1 505\n1 506\n1 507\n1 508\n1 509\n1 510\n1 511\n1 512\n1 513\n1 514\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"2\") == \"1\"\nassert solution(\"4\") == \"3\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"7 11\") == \"1\"\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1\\n1') == '1'\nassert solution('2\\n1') == '2'\nassert solution('2\\n1') == '2'\nassert solution('1\\n1') == '1'\nassert solution('1\\n1') == '1'\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"2\\n7 11\\n4 7\") == \"1\"\nassert solution(\"2\\n4 8\\n1 5\\n4 7\") == \"3\"\nassert solution(\"2\\n4 8\\n1 3\\n6 8\") == \"2\"\nassert solution(\"2\\n1 2\\n2 3\") == \"1\"\nassert solution(\"2\\n1 2\\n2 3\\n4 8\") == \"2\"\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"1 2\\n2 3\") == \"1\"\nassert solution(\"2 4\\n2 3\") == \"0\"\nassert solution(\"2 5\\n2 3\") == \"1\"\nassert solution(\"2 1\\n1 2\") == \"0\"\nassert solution(\"2 1\\n2 1\") == \"1\"\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('1 2') == '1'\nassert solution('1 1') == '1'\nassert solution('2 1') == '1'\nassert solution('2 3') == '1'\nassert solution('1 2 2 3') == '1'\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"1 2\\n2 3\\n3 4\\n4 5\\n5 6\") == \"1\"\nassert solution(\"1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\") == \"3\"\nassert solution(\"1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\\n10 11\") == \"3\"\nassert solution(\"1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\\n10 11\\n11 12\\n12 13\\n13 14\") == \"3\"\nassert solution(\"1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\\n10 11\\n11 12\\n12 13\\n13 14\\n14 15\\n15 16\\n16 17\\n17 18\\n18 19\\n19 20\") == \"3\"\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('2\\n2\\n7 11\\n4 7') == '1\\n'\nassert solution('2\\n2\\n7 11\\n4 7') == '1\\n'\nassert solution('5\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6') == '3\\n'"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(input()) == output()\n'''\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"2 2\\n5 5\\n2 2\") == \"YES\"\nassert solution(\"2 2\\n5 6\\n2 2\") == \"NO\"\nassert solution(\"4 1\\n4 1 10 1\\n3 2 10 1\") == \"YES\"\nassert solution(\"4 1\\n4 1 10 1\\n3 2 10 1\\n5 5 10 1\") == \"NO\"\n\n\n\"\"\"\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == \"\"\"\"\"\"\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('2 2') == \"YES\"\nassert solution('1 1') == \"YES\"\nassert solution('2 2') == \"NO\"\nassert solution('1 1 10 1') == \"YES\"\nassert solution('4 1 4 1 10 1') == \"YES\"\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('2 3\\n5 5\\n2 2') == 'YES'\nassert solution('2 4\\n3 1\\n5 1\\n2 3\\n5 1\\n2 3') == 'NO'\nassert solution('2 2\\n5 5\\n2 2') == 'YES'\nassert solution('4 1\\n4 1 10 1\\n3 2 10 1\\n2 2\\n1 1\\n2 1\\n3 1\\n4 1\\n5 1\\n6 1\\n7 1\\n8 1\\n9 1') == 'YES'\nassert solution('3 2\\n5 1\\n2 3\\n5 1\\n2 3') == 'NO'\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('2 3\\n1 3\\n1 1') == 'YES'\nassert solution('2 3\\n1 3\\n1 1') == 'NO'\nassert solution('2 3\\n2 1\\n2 2') == 'YES'\nassert solution('2 3\\n2 1\\n2 2') == 'NO'\nassert solution('2 3\\n4 1\\n4 1 10 1\\n3 2 10 1\\n4 1 1\\n4 1 1\\n3 2 1') == 'YES'\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('2 2') == 'YES'\nassert solution('2 2') == 'YES'\nassert solution('4 1') == 'NO'\nassert solution('4 1 2 2') == 'YES'\nassert solution('4 1 4 4') == 'YES'\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == 'YES'\n'''\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''2 1\n5 6\n2 2''') == 'YES'\nassert solution('''2 1\n5 6\n2 2''') == 'NO'\nassert solution('''2 1\n1 3\n2 2''') == 'YES'\nassert solution('''2 1\n3 4\n3 2''') == 'NO'\nassert solution('''2 1\n4 5\n4 4''') == 'YES'\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''2 2\n5 5\n2 2''') == 'YES'\nassert solution('''2 2\n5 6\n2 2''') == 'NO'\nassert solution('''4 1\n4 1 10 1\n3 2 10 1\n''') == 'YES'\n\n\n'''\n"
    },
    {
        "number": 423,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''1 2''') == 'Yes'\nassert solution('''2 100''') == 'Yes'\nassert solution('''4 5''') == 'No'\nassert solution('''-10000\n0\n1\n?\n''') == 'Yes'\nassert solution('''-10000\n1\n1\n?\n''') == 'Yes'\n"
    },
    {
        "number": 423,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('1 2\\n-1') == 'Yes'\nassert solution('2 100\\n-10000\\n0\\n1\\n') == 'Yes'\nassert solution('4 5\\n?\\n1\\n?\\n1\\n?') == 'No'\nassert solution('3 7\\n-1\\n0\\n1\\n') == 'Yes'\nassert solution('3 7\\n-1\\n0\\n1\\n') == 'No'\n"
    },
    {
        "number": 423,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1 2') == 'Yes'\nassert solution('-1') == 'Yes'\nassert solution('?') == 'Yes'\nassert solution('2 100') == 'Yes'\nassert solution('-10000') == 'Yes'\n"
    },
    {
        "number": 423,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''1 2\n-1\n?\n''') == 'Yes'\nassert solution('''2 100\n-10000\n0\n1\n''') == 'Yes'\nassert solution('''4 5\n?\n1\n?\n1\n?\n''') == 'No'\nassert solution('''5 10\n1\n-1\n1\n-1\n1\n?\n''') == 'Yes'\nassert solution('''6 100\n-10000\n0\n1\n1\n1\n1\n1\n1\n''') == 'Yes'\n"
    },
    {
        "number": 423,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1 2') == 'Yes'\nassert solution('2 100') == 'Yes'\nassert solution('4 5') == 'No'\nassert solution('? -10000 0 1 -1') == 'Yes'\nassert solution('? -10000 0 1 -1? -10000 0 1 -1?') == 'No'\n"
    },
    {
        "number": 423,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('2 2') == 'Yes'\nassert solution('1 100') == 'No'\nassert solution('4 5') == 'Yes'\n"
    },
    {
        "number": 423,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('2 3') == 'Yes'\nassert solution('100 4') == 'Yes'\nassert solution('1000 100') == 'No'\nassert solution('1000 100') == 'No'\n\"\"\"\n"
    },
    {
        "number": 423,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('2 100\\n-10000\\n0\\n1\\n') == 'Yes'\nassert solution('2 3\\n-10000\\n0\\n1\\n') == 'No'\nassert solution('1 100\\n-1\\n?\\n') == 'Yes'\nassert solution('2 100\\n-10000\\n0\\n1\\n') == 'Yes'\nassert solution('1 100\\n-1\\n?\\n') == 'No'\n"
    },
    {
        "number": 423,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\"\nassert solution(stdin) == \"Yes\"\n"
    },
    {
        "number": 423,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == 'Yes'\nassert solution(stdin) == 'No'\nassert solution(stdin) == 'Yes'\nassert solution(stdin) == 'Yes'\nassert solution(stdin) == 'No'\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('14') == '6'\nassert solution('20') == '15'\nassert solution('8192') == '8191'\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('14') == '6'\nassert solution('20') == '15'\nassert solution('8192') == '8191'\n\n\n\"\"\"\n\nfrom math import sqrt\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''14''') == '6'\nassert solution('''20''') == '15'\nassert solution('''8192''') == '8191'"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"14\\n\") == \"6\"\nassert solution(\"20\\n\") == \"15\"\nassert solution(\"8192\\n\") == \"8191\"\nprint(solution(stdin))\n\n\"\"\""
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('14') == '6'\nassert solution('20') == '15'\nassert solution('8192') == '8191'\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"14\") == 6\nassert solution(\"20\") == 15\nassert solution(\"8192\") == 8191\nassert solution(\"4\") == 4\nassert solution(\"20\") == 15\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('9') == '9'\nassert solution('12345') == '12345'\nassert solution('123445') == '12345'\nassert solution('1234567') == '1234567'\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"14\") == \"6\"\nassert solution(\"20\") == \"15\"\nassert solution(\"8192\") == \"8191\"\nprint(solution(input()))\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"14\") == \"6\"\nassert solution(\"20\") == \"15\"\nassert solution(\"8192\") == \"8191\"\nassert solution(\"8193\") == \"8192\"\nassert solution(\"8194\") == \"8193\"\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('24 0') == '2'\nassert solution('24 1') == '3'\nassert solution('24 -1') == '4'\nassert solution('4 -7') == '2'\nassert solution('1 1') == '-1'\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''24 0''') == '2'\nassert solution('''24 1''') == '3'\nassert solution('''24 -1''') == '4'\nassert solution('''4 -7''') == '2'\nassert solution('''1 1''') == '-1'\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == str(2)\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('24 0') == '2'\nassert solution('24 1') == '3'\nassert solution('24 -1') == '4'\nassert solution('4 -7') == '2'\nassert solution('1 1') == '-1'\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('24 0') == '2'\nassert solution('24 1') == '3'\nassert solution('24 -1') == '4'\nassert solution('4 -7') == '2'\nassert solution('1 1') == '-1'\n\"\"\"\n\nfrom math import log\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('24 0') == '2'\nassert solution('24 1') == '3'\nassert solution('24 -1') == '4'\nassert solution('4 -7') == '2'\nassert solution('1 1') == '-1'\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('24 0') == '2'\nassert solution('24 1') == '3'\nassert solution('24 -1') == '4'\nassert solution('4 -7') == '2'\nassert solution('1 1') == '-1'\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('5 3\\n51528\\n') == '10028'\nassert solution('3 2\\n102\\n') == '100'\nassert solution('1 1\\n1\\n') == '0'\nassert solution('3 3\\n110\\n') == '0'\nassert solution('2 1\\n100\\n') == '0'\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('1') == '0'\nassert solution('3') == '0'\nassert solution('5') == '0'\nassert solution('7') == '0'\nassert solution('10') == '0'\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('5 3') == '10028'\nassert solution('3 2') == '100'\nassert solution('1 1') == '0'\nassert solution('5 3') == '10028'\nassert solution('7') == '0'\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''5 3\n51528\n''') == '10028'\nassert solution('''3 2\n102\n''') == '100'\nassert solution('''1 1\n1\n''') == '0'\nassert solution('''3 1\n999\n''') == '0'\nassert solution('''1 1000\n1\n''') == '0'\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('5 3') == '10028'\nassert solution('3 2') == '100'\nassert solution('1 1') == '0'\nassert solution('0') == '0'\nassert solution('1') == '0'\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('5 3\\n51528\\n') == '10028'\nassert solution('3 2\\n102\\n') == '100'\nassert solution('1 1\\n1\\n') == '0'\nassert solution('2 0\\n1011\\n') == '1011'\nassert solution('4 0\\n1010101\\n') == '1010101'\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''5 3\n51528''') == '10028'\nassert solution('''3 2\n102''') == '100'\nassert solution('''1 1\n1''') == '0'\nassert solution('''0 0\n0''') == '0'\nassert solution('''123456789''') == '123456789'\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdin"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdin"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1 3 2 3') == '5'\nassert solution('1 3 2 4') == '4'\nassert solution('1 2 1 3') == '3'\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('1 3 2 3') == '5'\nassert solution('1 3 2 4') == '4'\nassert solution('1 2 4 4') == '4'\nassert solution('1 2 4 4') == '4'\n\n\n-----"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('2 3 2 3') == '5'\nassert solution('1 3 2 3') == '4'\nassert solution('3 1 2 3') == '5'\nassert solution('3 1 2 3') == '4'\nassert solution('1 3 2 3') == '4'\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1 2 3 4') == '5'\nassert solution('1 3 2 3') == '4'\nassert solution('1 3 3 4') == '5'\nassert solution('1 3 4 4') == '5'\nassert solution('1 2 4 4') == '5'\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1 3 2 3') == '5'\nassert solution('1 3 2 4') == '4'\nassert solution('3 1 2 3') == '4'\nassert solution('3 1 2 1') == '4'\nassert solution('1 3 2 4') == '4'\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('3 1 2 3') == '5'\nassert solution('1 3 2 3') == '4'\nassert solution('1 3 2 4') == '4'\nassert solution('1 3 2 5') == '4'\nassert solution('1 2 3 4') == '4'\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"3 1 2 3\") == \"5\"\nassert solution(\"1 3 2 3\") == \"4\"\nassert solution(\"3 3 2 3\") == \"4\"\nassert solution(\"1 3 2 4\") == \"4\"\nassert solution(\"1 3 2 4 5\") == \"4\"\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"3 1 2 3\") == \"5\"\nassert solution(\"1 3 2 3\") == \"4\"\nassert solution(\"1 3 2 3\") == \"4\"\n\n\n\n\"\"\"\n\nfrom itertools import combinations\nfrom collections import defaultdict\nfrom math import sqrt"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"3 1 2 3\") == \"5\"\nassert solution(\"1 3 2 3\") == \"4\"\n\n\n\"\"\"\nfrom typing import List\nfrom math import sqrt\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('3 1 2 3') == '5'\nassert solution('1 3 2 3') == '4'\nassert solution('1 3 2 3') == '4'\nassert solution('1 3 2 3') == '4'\nassert solution('1 3 2 3') == '4'\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdin\n\n\"\"\""
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(input()) == '(3,1)'\nassert solution(input()) == '(1,1)'\n'''\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''5 1 2 0 1 2''') == '3 1'\nassert solution('''1 1 1 -1 -1 2''') == '1 1'"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('5 1 2 0 1 2') == '3 1'\nassert solution('1 1 1 -1 -1 2') == '1 1'\nassert solution('5 1 2 0 1 2 10') == '3 1'\nassert solution('1 1 1 -1 -1 2') == '1 1'\nassert solution('3 3 5 0 -1 -1 10') == '2 1'\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('5 1 2 0 1 2') == '3 1'\nassert solution('1 1 1 -1 -1 2') == '1 1'\n\n\n'''\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('5 1 2 0 1 2') == '3 1'\nassert solution('1 1 1 -1 -1 2') == '1 1'\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('5 1 2 0 1 2') == '3 1'\nassert solution('1 1 1 -1 -1 2') == '1 1'\nassert solution('1 1 1 -1 -1 2') == '1 1'\nassert solution('1 1 1 -1 -1 2') == '1 1'\nassert solution('1 1 1 -1 -1 2') == '1 1'\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('5 1 2 0 1 2') == '3 1'\nassert solution('1 1 1 -1 -1 2') == '1 1'\nassert solution('1 1 1 -1 -1 2') == '1 1'\nassert solution('5 3 5 -3 -3 2') == '2 1'\nassert solution('5 3 5 -3 -3 2') == '2 1'\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''ABC??FGHIJK???OPQR?TUVWXY?''') == 'ABCDEFGHIJKLMNOPQRZTUVWXYS'\nassert solution('''WELCOMETOCODEFORCESROUNDTHREEHUNDREDANDSEVENTYTWO''') == '-1'\nassert solution('''??????????????????????????''') == 'MNBVCXZLKJHGFDSAQPWOEIRUYT'\n\n\n>>> timeit.timeit(lambda: solution('''AAAAAAAAA'''), number=10000)\n0.0001049\n\n>>> timeit.timeit(lambda: solution('''AB???CD'''), number=10000)\n0.00031\n\n>>> timeit.timeit(lambda: solution('''A??BC??DE?EF'''), number=10000)\n0.00086\n\n>>> timeit.timeit(lambda: solution('''AB???CD???EF'''), number=10000)\n0.00069\n\n>>> timeit.timeit(lambda: solution('''A??BC??DE??EF'''), number=10000)\n0.00047\n\n>>> timeit.timeit(lambda: solution('''AB???CD??EF'''), number=10000)\n0.00047\n\n>>> timeit.timeit(lambda: solution('''AB???CD??EF'''), number=10000)\n0.00039\n\n>>> timeit.timeit(lambda: solution('''AB???CD??EF'''), number=10000)\n0.00034\n\n>>> timeit.timeit(lambda: solution('''AB???CD??EF'''), number=10000)\n0.00033\n\n>>> timeit.timeit(lambda: solution('''AB???CD??EF'''), number=10000)\n0.00033\n\n>>> timeit.timeit(lambda: solution('''AB???CD??EF'''), number=10000)\n0.00034\n\n>>> timeit.timeit(lambda: solution('''AB???CD??EF'''), number=10000)\n0.00034\n\n>>> timeit.timeit(lambda: solution('''AB???CD??EF'''), number=10000)\n0.00034\n\n>>> timeit.timeit(lambda: solution('''AB???CD??EF'''), number=10000)\n0.00034\n\n>>> timeit.timeit(lambda: solution('''AB???CD??EF'''), number=10000)\n0.00034\n\n>>> timeit.timeit(lambda: solution('''AB???CD??EF'''), number=10000)\n0.00034\n\n>>> timeit.timeit(lambda: solution('''AB???CD??EF'''), number=10000)\n0.00034\n\n>>> timeit.timeit(lambda: solution('''AB???CD??EF'''), number=10000)\n0.00034\n\n>>> timeit.timeit(lambda: solution('''AB???CD??EF'''), number=10000)\n0.00034\n\n>>> timeit.timeit(lambda: solution('''AB???CD??EF'''), number=10000)\n0.00034\n\n>>> timeit.timeit(lambda: solution('''AB???CD??EF'''), number=10000)\n0.00034\n\n>>> timeit.timeit(lambda: solution('''AB???CD??EF'''), number=10000)\n0.00034\n\n>>> timeit.timeit(lambda: solution('''AB???CD??EF'''), number=10000)\n0.00034\n\n>>> timeit.timeit(lambda: solution('''AB???CD??EF'''), number=10000)\n0.00034\n\n>>> timeit.timeit(lambda: solution('''AB???CD??EF'''), number=10000)\n0.00034\n\n>>> timeit.timeit(lambda: solution('''AB???CD??EF'''), number=10000)\n0.00034\n\n>>> timeit.timeit(lambda: solution('''AB???CD??EF'''), number=10000)\n0.00034\n\n>>> timeit.timeit(lambda: solution('''AB???CD??EF'''), number=10000)\n0.00034\n\n>>> timeit.timeit(lambda: solution('''AB???CD??EF'''), number=10000)\n0.00034\n\n>>> timeit.timeit(lambda: solution('''AB???CD??EF'''), number=10000)\n0.00034\n\n>>> timeit.timeit(lambda: solution('''AB???CD??EF'''), number=10000)\n0.00034\n\n>>> timeit.timeit(lambda: solution('''AB???CD??EF'''), number=10000)\n0.00034\n\n>>> timeit.timeit(lambda: solution('''AB???CD??EF'''), number=10000)\n0.00034\n\n>>> timeit.timeit(lambda: solution('''AB???CD??EF'''), number=10000)\n0.00034\n\n>>> timeit.timeit(lambda: solution('''AB???CD??EF'''), number=10000)\n0.00034\n\n>>> timeit.timeit(lambda: solution('''AB???CD??EF'''), number=10000)\n0.00034\n\n>>> timeit.timeit(lambda: solution('''AB???CD??EF'''), number=10000)\n0.00034\n\n>>> timeit.timeit(lambda: solution('''AB???CD??EF'''), number=10000)\n0.00034\n\n>>> timeit.timeit(lambda: solution('''AB???CD??EF'''), number=10000)\n0.00034\n\n>>> timeit.timeit(lambda: solution('''AB???CD??EF'''), number=10000)\n0.00034\n\n>>> timeit.timeit(lambda: solution('''AB???CD??EF'''), number"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('ABC??FGHIJK???OPQR?TUVWXY?') == 'ABCDEFGHIJKLMNOPQRZTUVWXYS'\nassert solution('WELCOMETOCODEFORCESROUNDTHREEHUNDREDANDSEVENTYTWO') == '-1'\nassert solution('??????????????????????????') == 'MNBVCXZLKJHGFDSAQPWOEIRUYT'\nassert solution('AABCDEFGHIJKLMNOPQRSTUVW??M') == '-1'\nassert solution('ACDEFGHIJKLMNOPQRSTUVWXY') == 'ACDEFGHIJKLMNOPQRSTUVWXY'\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('ABC??FGHIJK???OPQR?TUVWXY?') == 'ABCDEFGHIJKLMNOPQRZTUVWXYS'\nassert solution('WELCOMETOCODEFORCESROUNDTHREEHUNDREDANDSEVENTYTWO') == '-1'\nassert solution('??????????????????????????') == 'MNBVCXZLKJHGFDSAQPWOEIRUYT'\nassert solution('AABCDEFGHIJKLMNOPQRSTUVW??M') == '-1'\n\n'''\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('') == '-1'\nassert solution('WELCOMETOCODEFORCESROUNDTHREEHUNDREDANDSEVENTYTWO') == '-1'\nassert solution('ABC??FGHIJK???OPQR?TUVWXY?') == 'ABCDEFGHIJKLMNOPQRZTUVWXYS'\nassert solution('??????????????????????????') == 'MNBVCXZLKJHGFDSAQPWOEIRUYT'\nassert solution('AABCDEFGHIJKLMNOPQRSTUVW??M') == '-1'\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('ABC??FGHIJK???OPQR?TUVWXY?') == 'ABCDEFGHIJKLMNOPQRZTUVWXYS'\nassert solution('WELCOMETOCODEFORCESROUNDTHREEHUNDREDANDSEVENTYTWO') == '-1'\nassert solution('??????????????????????????') == 'MNBVCXZLKJHGFDSAQPWOEIRUYT'\nassert solution('AABCDEFGHIJKLMNOPQRSTUVW??M') == '-1'\n\n\n\n---\n\n###1.3.1 Minimum Operations to Make a Subsequence\nIn number theory, we say that a positive integer n is a Lychrel number if it has at least three distinct positive divisors: \n    \n    Its prime divisors are distinct, and\n    The number n is not a perfect square.\n\nIn other words, it is a Lychrel number iff there is at least one positive divisor for which the division with that positive divisor produces a remainder different from zero.\n\n\nWrite a program to determine the number of Lychrel numbers less than a given integer n.\n\nFor example, if the input is:\n\nn = 150\n\nso your program should return:\n\ntwo\n\nBecause there are four Lychrel numbers less than 150:\n\n145, 7, 62, and 48\n\nYou may assume that the input is a positive integer n which is not a perfect square (that is, it is at least 1 and not a perfect square)."
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('ABC??FGHIJK???OPQR?TUVWXY?') == 'ABCDEFGHIJKLMNOPQRZTUVWXYS'\nassert solution('WELCOMETOCODEFORCESROUNDTHREEHUNDREDANDSEVENTYTWO') == '-1'\nassert solution('??????????????????????????') == 'MNBVCXZLKJHGFDSAQPWOEIRUYT'\nassert solution('AABCDEFGHIJKLMNOPQRSTUVW??M') == '-1'\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('ABC??FGHIJK???OPQR?TUVWXY?') == 'ABCDEFGHIJKLMNOPQRZTUVWXYS'\nassert solution('WELCOMETOCODEFORCESROUNDTHREEHUNDREDANDSEVENTYTWO') == '-1'\nassert solution('??????????????????????????') == 'MNBVCXZLKJHGFDSAQPWOEIRUYT'\nassert solution('AABCDEFGHIJKLMNOPQRSTUVW??M') == '-1'\nassert solution('AABCDEFGHIJKLMNOPQRSTUVWXZ?M') == '-1'\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('WELCOMETOCODEFORCESROUNDTHREEHUNDREDANDSEVENTYTWO') == '-1'\nassert solution('??????????????????????????') == '-1'\nassert solution('AABCDEFGHIJKLMNOPQRSTUVW??M') == '-1'\n\n\n\"\"\""
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"ABC??FGHIJK???OPQR?TUVWXY?\\n\") == \"-1\"\nassert solution(\"WELCOMETOCODEFORCESROUNDTHREEHUNDREDANDSEVENTYTWO\\n\") == \"-1\"\nassert solution(\"??????????????????????????\\n\") == \"-1\"\nassert solution(\"AABCDEFGHIJKLMNOPQRSTUVW??M\\n\") == \"-1\"\n\n\"\"\"\n\n\nimport sys\nfrom collections import Counter"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"100 200 100\") == \"YES\"\nassert solution(\"3 100 100\") == \"NO\"\nassert solution(\"4 100 100 100 200\") == \"NO\"\nassert solution(\"3 4 3\") == \"YES\"\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == 'YES'\nassert solution('3 4 2') == 'NO'\nassert solution('4 100 100 100 200') == 'YES'\n\"\"\"\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"4\\n100 100 100 200\\n\") == \"NO\"\nassert solution(\"5\\n100 100 100 200 100\\n\") == \"YES\"\nassert solution(\"5\\n100 100 100 200 100\\n\") == \"NO\"\nassert solution(\"5\\n100 100 100 200 100\\n\") == \"NO\"\nassert solution(\"5\\n100 100 100 200 100\\n\") == \"NO\"\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''3\n100 200 100\n''') == 'YES'\nassert solution('''4\n100 100 100 200\n''') == 'NO'\nassert solution('''1\n1\n''') == 'YES'\nassert solution('''2\n1 1\n''') == 'NO'\nassert solution('''3\n2 2 2\n''') == 'NO'\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"100 200 100\") == \"YES\"\nassert solution(\"100 100 100 200\") == \"NO\"\nassert solution(\"1000 1000 1000\") == \"YES\"\nassert solution(\"100 100 100 100\") == \"YES\"\nassert solution(\"1000 1000 1000\") == \"YES\"\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\n\nfrom __future__ import annotations\n\nfrom typing import Iterable, Tuple\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''3\n100 200 100\n''') == 'YES'\nassert solution('''4\n100 100 100 200\n''') == 'NO'\nassert solution('''1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"3\\n100 200 100\") == \"YES\"\nassert solution(\"4\\n100 100 100 200\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''3\n100 200 100\n''') == 'YES'\nassert solution('''4\n100 100 100 200\n''') == 'NO'\n\n\n-----\n\"\"\""
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"1\\n2\") == \"NO\"\nassert solution(\"2\\n1\") == \"YES\"\nassert solution(\"1\\n2 3\") == \"YES\"\nassert solution(\"2\\n3\") == \"NO\"\nassert solution(\"3\\n1\") == \"NO\"\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('4 3\\n01110\\n01110\\n01110\\n01110') == '18'\nassert solution('2 3\\n0010\\n0100\\n') == '5'\nassert solution('3 3\\n00010\\n00010\\n00010\\n00010\\n00010\\n00010\\n00010') == '18'\nassert solution('2 2\\n00100\\n00100') == '5'\nassert solution('2 2\\n00100\\n00100\\n00100') == '5'\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == expected\n\"\"\"\n\nimport sys\n\nsys.path.insert(0, \"..\")\nfrom util import timed_func\n\nfrom itertools import permutations\n\nimport os\nfrom collections import defaultdict\n\n@timed_func\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''2 2\n0010\n0100\n''') == '5'\nassert solution('''3 4\n01110\n01110\n01110\n01110\n''') == '18'\nassert solution('''4 3\n01110\n01110\n01110\n01110\n''') == '12'\nassert solution('''6 4\n000100\n00000010\n0001010\n0001010\n0000010\n00000010\n0001010\n0001010\n''') == '26'\nassert solution('''9 10\n0001000100000111100\n0000000100011110111\n01111011110011001111\n11100100111001001110\n1110011100100100100\n10011100111001110010\n11100101111011100100\n111001100111001110010\n100110111101100111000\n111001001110010011100\n111001001110011100100\n1110010011100111001000\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n111001001110011100100\n1110010011100"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''2 2\n0010\n0100''') == '5'\nassert solution('''3 4\n01110\n01110\n01110\n01110''') == '18'\nassert solution('''4 3\n01110\n01110\n01110\n01110\n''') == '12'"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('2 2') == '5'\nassert solution('3 4') == '18'\nassert solution('10 9') == '27'\nassert solution('14 10') == '52'\nassert solution('100 500') == '118215'\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('2 2\\n0010\\n0100\\n') == '5'\nassert solution('3 4\\n01110\\n01110\\n01110\\n01110\\n') == '18'\nassert solution('4 3\\n01110\\n01110\\n01110\\n01110\\n') == '18'\n\n\"\"\"\n\nfrom math import ceil\nfrom collections import defaultdict, deque"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"2 2\\n0010\\n0100\\n\") == \"5\"\nassert solution(\"3 4\\n001000\\n000010\\n000010\\n000010\\n\") == \"12\"\nassert solution(\"4 3\\n01110\\n01110\\n01110\\n01110\\n\") == \"18\"\nassert solution(\"1 1\\n1\\n\") == \"1\"\nassert solution(\"2 1\\n1\\n\") == \"2\"\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"\n2 2\n0010\n0100\n\"\"\") == \"5\"\n\nassert solution(\n\"\"\"\n3 4\n001000\n000010\n000010\n\"\"\") == \"12\"\n\nassert solution(\n\"\"\"\n4 3\n01110\n01110\n01110\n01110\n\"\"\") == \"18\"\n\nassert solution(\n\"\"\"\n6 6\n010110\n011010\n000110\n111011\n101100\n101110\n\"\"\") == \"28\"\n\"\"\"\n\nassert solution(\n\"\"\"\n1000000000 1000000000\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n0111111111 11111111\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''2 2\n0010\n0100''') == '5'\nassert solution('''3 4\n01110\n01110\n01110\n01110''') == '18'\nassert solution('''4 3\n01110\n01110\n01110\n01110\n''') == '12'\nassert solution('''1 2\n1\n''') == '2'\n'''\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''2 2\n0010\n0100''') == '5'\n\nassert solution('''3 4\n001000\n000010\n000010\n000010\n''') == '12'\n\nassert solution('''4 3\n01110\n01110\n01110\n01110\n''') == '18'\n'''\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''5\n1 2 3 2 10\n1 3 4 3 3\n''') == '3'\n\nassert solution('''4\n1 10 2 10\n2 4 2 2\n''') == '10'\n\nassert solution('''7\n1 1 1 1 1 1 1\n2 2 2 3 6 7 6\n''') == '2'\n'''\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\n'''\n5\n1 2 3 2 10\n1 3 4 3 3\n''') == '3'\n\nassert solution(\n'''\n4\n1 10 2 10\n2 4 2 2\n''') == '10'\n\nassert solution(\n'''\n7\n1 1 1 1 1 1 1\n2 2 2 3 6 7 6\n''') == '2'"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 2 3 2 10\\n1 3 4 3 3\\n\") == \"3\"\nassert solution(\"4\\n1 10 2 10\\n2 4 2 2 2\\n\") == \"10\"\nassert solution(\"7\\n1 1 1 1 1 1 1\\n2 2 2 3 6 7 6\\n\") == \"2\"\nassert solution(\"7\\n1 1 1 1 1 1 1\\n2 2 2 3 6 7 6\\n\") == \"2\"\nassert solution(\"10\\n
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('5\\n1 2 3 2 10\\n1 3 4 3 3') == '3'\nassert solution('4\\n1 10 2 10\\n2 4 2 2 2') == '10'\nassert solution('7\\n1 1 1 1 1 1 1\\n2 2 2 3 6 7 6') == '2'\nprint(solution(input()))\n\"\"\"\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('5\\n1 2 3 2 10\\n1 3 4 3 3\\n') == '3'\nassert solution('4\\n1 10 2 10\\n2 4 2 2 2\\n') == '10'\nassert solution('7\\n1 1 1 1 1 1 1\\n2 2 2 3 6 7 6\\n') == '2'\nassert solution('7\\n1 1 1 1 1 1 1\\n2 2 2 3 6 7 6\\n') == '2'\n\"\"\"\n\nfrom sys import stdin\n\nn, *costs, *fairs, = map(int, stdin.read().split())\n\ncosts_max = [max(costs[:i+1]) for i in range(n)]"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1\\n2\\n2\\n2\\n2\\n2\\n2\\n1\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\n2\\n3\\"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''5\n1 2 3 2 10\n1 3 4 3 3\n''') == '3'\nassert solution('''4\n1 10 2 10\n2 4 2 2\n''') == '10'\nassert solution('''7\n1 1 1 1 1 1 1\n2 2 2 3 6 7 6\n''') == '2'\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\n'''5'''\n) == '3'\n\nassert solution(\n'''4'''\n) == '10'\n\nassert solution(\n'''7'''\n) == '2'\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('6 2 -5') == '3'\nassert solution('5 1 3') == '4'\nassert solution('3 2 7') == '3'\n\n\"\"\"\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''6 2 -5''') == '3'\nassert solution('''5 1 3''') == '4'\nassert solution('''3 2 7''') == '3'\n\n'''"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == expected"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"6 2 -5\") == \"3\"\nassert solution(\"5 1 3\") == \"4\"\nassert solution(\"3 2 7\") == \"3\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"1 1 1\") == \"1\"\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"6 2 -5\") == \"3\"\nassert solution(\"5 1 3\") == \"4\"\nassert solution(\"3 2 7\") == \"3\"\n\n\n\"\"\""
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('6 2 -5') == '3'\nassert solution('5 1 3') == '4'\nassert solution('3 2 7') == '3'\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"6 2 -5\") == \"3\"\nassert solution(\"5 1 3\") == \"4\"\nassert solution(\"3 2 7\") == \"3\"\nassert solution(\"5 -1 3\") == \"4\"\nassert solution(\"5 -2 3\") == \"4\"\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('5 2 -5') == '3'\nassert solution('6 2 -5') == '3'\nassert solution('3 2 7') == '3'\nassert solution('1 5 5') == '3'\nassert solution('1 3 7') == '3'\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('5 2 -5') == '3'\nassert solution('6 2 -5') == '3'\nassert solution('5 1 3') == '4'\nassert solution('3 2 7') == '3'\nassert solution('5 3 3') == '4'\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('5 1 3') == '3'\nassert solution('6 2 -5') == '3'\nassert solution('3 2 7') == '3'\nassert solution('6 3 2') == '3'\nassert solution('2 1 -2') == '1'\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('8\\n8 6 4 2 1 4 7 10 2\\n') == '3'\nassert solution('9\\n-1 6 -1 2 -1 4 7 -1 2\\n') == '3'\nassert solution('5\\n-1 -1 -1 -1 -1\\n') == '1'\nassert solution('7\\n-1 -1 4 5 1 2 3\\n') == '2'\nprint('Testcases passed')\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('8 6 4 2 1 4 7 10 2\\n') == '3'\nassert solution('9\\n8 6 4 2 1 4 7 10 2\\n') == '3'\nassert solution('9\\n-1 6 -1 2 -1 4 7 -1 2\\n') == '3'\nassert solution('5\\n-1 -1 -1 -1 -1\\n') == '1'\nassert solution('7\\n-1 -1 4 5 1 2 3\\n') == '2'\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''9\n8 6 4 2 1 4 7 10 2''') == '3'\nassert solution('''9\n-1 6 -1 2 -1 4 7 -1 2''') == '3'\nassert solution('''9\n-1 -1 -1 -1 -1''') == '1'\nassert solution('''7\n-1 -1 4 5 1 2 3''') == '2'\nassert solution('''4\n-1 -1 1 1''') == '1'\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''9\n8 6 4 2 1 4 7 10 2''') == '3'\nassert solution('''9\n-1 6 -1 2 -1 4 7 -1 2''') == '3'\nassert solution('''9\n-1 -1 -1 -1 -1''') == '1'\nassert solution('''7\n-1 -1 4 5 1 2 3''') == '2'\nassert solution('''7\n-1 -1 4 -1 -1 2 3''') == '2'\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''9\n8 6 4 2 1 4 7 10 2''') == '3'\nassert solution('''9\n-1 -1 -1 -1 -1''') == '1'\nassert solution('''7\n-1 -1 4 5 1 2 3''') == '2'\nassert solution('''7\n-1 -1 4 5 1 2 3''') == '2'\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''9\n8 6 4 2 1 4 7 10 2''') == '3'\nassert solution('''9\n-1 6 -1 2 -1 4 7 -1 2''') == '3'\nassert solution('''5\n-1 -1 -1 -1 -1''') == '1'\nassert solution('''7\n-1 -1 4 5 1 2 3''') == '2'\nassert solution('''2\n-1 -1''') == '1'\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''9\n8 6 4 2 1 4 7 10 2''') == '3'\nassert solution('''9\n-1 6 -1 2 -1 4 7 -1 2''') == '3'\nassert solution('''9\n-1 -1 -1 -1 -1''') == '1'\nassert solution('''5\n-1 -1 -1 -1 -1''') == '1'\nassert solution('''7\n-1 -1 4 5 1 2 3''') == '2'\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('8 6 4 2 1 4 7 10 2') == '3'\nassert solution('-1 6 -1 2 -1 4 7 -1 2') == '3'\nassert solution('9') == '1'\nassert solution('-1 -1 -1 -1 -1') == '1'\nassert solution('7') == '2'\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''9\n8 6 4 2 1 4 7 10 2''') == '3'\nassert solution('''9\n-1 6 -1 2 -1 4 7 -1 2''') == '3'\nassert solution('''5\n-1 -1 -1 -1 -1''') == '1'\nassert solution('''7\n-1 -1 4 5 1 2 3''') == '2'"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('8\\n8 6 4 2 1 4 7 10 2') == '3'\nassert solution('9\\n8 6 4 2 1 4 7 10 2') == '3'\nassert solution('9\\n-1 6 -1 2 -1 4 7 -1 2') == '3'\nassert solution('9\\n-1 -1 -1 -1 -1') == '1'\nassert solution('9\\n-1 -1 -1 -1 -1') == '1'\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('4 2\\nabba') == '4'\nassert solution('8 1\\naabaabaa') == '5'\nassert solution('5 2\\naab') == '2'\nassert solution('1 1\\nab') == '1'\nassert solution('8 4\\naaaaaaaaaa') == '6'\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''4 2\nabba''') == 4\nassert solution('''8 1\naabaabaa''') == 5\n'''\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdin"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\nabba\") == \"4\"\nassert solution(\"8 1\\naabaabaa\") == \"5\"\n\n\"\"\"\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"4 2\") == 4\nassert solution(\"8 1\") == 5\nassert solution(\"aabaabaa\") == 5\nassert solution(\"aabbbbbbbbbbbabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"3 1\\nabba\") == \"4\"\nassert solution(\"2 2\\nabba\") == \"4\"\nassert solution(\"2 1\\nabba\") == \"5\"\nassert solution(\"3 1\\naabbba\") == \"3\"\nassert solution(\"3 1\\nabaaabaa\") == \"5\"\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('4\\nabba') == '4'\nassert solution('8\\naabaabaa') == '5'\nassert solution('3\\nabb') == '3'\nassert solution('5\\nabbb') == '6'\nassert solution('2\\nabbbb') == '4'\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == expected\nprint(solution(stdin))\n\n\n\n\"\"\"\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('0 0 0') == '0 0 0'\nassert solution('0 0 0\\n0 0 0\\n0 0 0') == '0 0 0'\nassert solution('0 0 0\\n0 0 0\\n0 0 0\\n0 0 0') == '0 0 0'\nassert solution('1 100 100') == '0 1 2'\nassert solution('1 100 100\\n0 100 100') == '0 1 2'\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''3\n100 50 50\n''') == '2 1'\n\nassert solution('''3\n80 60 60\n''') == '0 0'\n\nassert solution('''2\n6 5\n''') == '1 1 2'\n\nassert solution('''4\n51 25 99 25\n''') == '3 1 2'"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('7 0 0 0 0 0 0\\n2 3 4 5 6 7') == '0\\n1 2 4'\nassert solution('8 0 0 0 0 0 0\\n2 3 4 5 6 7 8') == '0\\n1 2 4'\nassert solution('7 0 0 0 0 0 0\\n2 3 4 5 6 7') == '0\\n1 2 4'\nassert solution('9 0 0 0 0 0 0\\n2 3 4 5 6 7 8 9') == '0\\n1 2 4'\nassert solution('10 0 0 0 0 0 0\\n2 3 4 5 6 7 8 9 10') == '0\\n1 2 4'\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('3\\n100 50 50') == '2\\n1 2'\nassert solution('2\\n6 5') == '0\\n1 2'\nassert solution('4\\n51 25 99 25') == '3\\n1 2 4'\nassert solution('2\\n1 2') == '0\\n1'\nassert solution('1\\n1') == '0'\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''3\n100 50 50''') == '2\\n1 2'\nassert solution('''3\n51 25 99 25''') == '3\\n1 2 4'\nassert solution('''3\n80 60 60''') == '0\\n0 0'\nassert solution('''4\n51 25 99 25''') == '3\\n1 2 4'\nassert solution('''4\n41 41 41''') == '0\\n0 0'\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('0\\n' +\n'3\\n' +\n'10 50 100\\n') == '1\\n' +\n'2\\n' +\n'1 2'\n\nassert solution('3\\n' +\n'6 5\\n' +\n'3\\n' +\n'50 50 100\\n' +\n'1 50\\n' +\n'2 5\\n') == '1\\n' +\n'2\\n' +\n'1 2'\n\nassert solution('1\\n' +\n'1\\n' +\n'1\\n' +\n'1\\n' +\n'1\\n' +\n'1\\n' +\n'1\\n' +\n'1\\n' +\n'1\\n' +\n'1\\n') == '0\\n'\n\nassert solution('2\\n' +\n'5\\n' +\n'2\\n' +\n'3\\n' +\n'5\\n' +\n'2\\n' +\n'3\\n' +\n'5\\n' +\n'2\\n' +\n'3\\n' +\n'4\\n' +\n'1\\n' +\n'2\\n' +\n'4\\n' +\n'3\\n' +\n'1\\n' +\n'2\\n' +\n'3\\n' +\n'4\\n' +\n'4\\n' +\n'3\\n' +\n'4\\n' +\n'3\\n' +\n'4\\n' +\n'4\\n' +\n'2\\n' +\n'3\\n' +\n'4\\n' +\n'3\\n' +\n'4\\n' +\n'3\\n' +\n'4\\n' +\n'3\\n' +\n'4\\n' +\n'4\\n' +\n'2\\n' +\n'3\\n' +\n'4\\n' +\n'3\\n' +\n'4\\n' +\n'3\\n' +\n'4\\n' +\n'3\\n' +\n'4\\n' +\n'3\\n' +\n'4\\n' +\n'3\\n' +\n'4\\n' +\n'3\\n' +\n'4\\n' +\n'3\\n' +\n'4\\n' +\n'4\\n' +\n'3\\n' +\n'4\\n' +\n'3\\n' +\n'4\\n' +\n'4\\n' +\n'2\\n' +\n'3\\n' +\n'4\\n' +\n'3\\n' +\n'4\\n' +\n'3\\n' +\n'4\\n' +\n'3\\n' +\n'4\\n' +\n'3\\n' +\n'4\\n' +\n'4\\n' +\n'3\\n' +\n'4\\n' +\n'3\\n' +\n'4\\n' +\n'3\\n' +\n'4\\n' +\n'4\\n' +\n'3\\n' +\n'4\\n' +\n'3\\n' +\n'4\\n' +\n'3\\n' +\n'4\\n' +\n'4\\n' +\n'3\\n' +\n'4\\n' +\n'3\\n' +\n'4\\n' +\n'3\\n' +\n'4\\n' +\n'3\\n' +\n'4\\n' +\n'3\\n' +\n'4\\n' +\n'3\\n' +\n'4\\n' +\n'4\\n' +\n'3\\n' +\n'4\\n' +\n'4\\n' +\n'2\\n' +\n'3\\n' +\n'4\\n' +\n'3\\n' +\n'4\\n' +\n'3\\n' +\n'4\\n' +\n'3\\n' +\n'4\\n' +\n'3\\n' +\n'4\\n' +\n'3\\n' +\n'4\\n' +\n'3\\n' +\n'4\\n' +\n'3\\n' +\n'4\\n' +\n'3\\n' +\n'4\\n' +\n'3\\n'"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('100 50 50') == '2\\n1 2'\nassert solution('3 10 15') == '0'\nassert solution('6 5') == '1\\n1 2'\nassert solution('4 20 30 40') == '3\\n1 2 4'\nassert solution('50 25 19 30') == '3\\n1 2 4'\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"1\\n5\\n1 1 1 1 1\\n\") == \"1 2\"\nassert solution(\"2\\n5\\n1 1 1 1 1\\n\") == \"0\"\nassert solution(\"2\\n5\\n2 1 2 1 1\\n\") == \"0 0\"\nassert solution(\"2\\n5\\n1 2 1 1 1\\n\") == \"1 1\"\nassert solution(\"2\\n5\\n1 1 1 1 1\\n\") == \"0 0\"\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('3\\n100 50 50') == '0\\n1 2\\n'\nassert solution('3\\n81 56 76') == '1\\n2\\n'\nassert solution('3\\n100 70 80') == '2\\n1 2\\n'\nassert solution('3\\n21 20 21') == '0\\n1 2\\n'\nassert solution('4\\n51 25 99 25') == '3\\n1 2 4\\n'\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('3\\n100 50 50\\n') == '2\\n1 2\\n'\nassert solution('3\\n80 60 60\\n') == '0\\n'\nassert solution('2\\n6 5\\n') == '1\\n1\\n'\nassert solution('4\\n51 25 99 25\\n') == '3\\n1 2 4\\n'\nassert solution('5\\n12 47 33 3 5\\n') == '1\\n1 3 4 5\\n'\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1') == '1.000000000000'\nassert solution('2') == '1.500000000000'\n'''\n\n'''"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"1.000000000000\"\nassert solution(\"2\") == \"1.500000000000\"\n\n\n\"\"\""
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1') == '1.000000000000'\nassert solution('2') == '1.500000000000'\nassert solution
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(input()) == \"1.500000000000\"\n\"\"\""
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1') == '1.000000000000'\nassert solution('2') == '1.500000000000'\nassert solution('100000') == '50000000000.000000000000'\n\"\"\""
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1') == '1.000000000000'\nassert solution('2') == '1.500000000000'\n\n'''"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('1') == '1.000000000000'\nassert solution('2') == '1.500000000000'\n\"\"\"\n\nfrom sys import stdin, stdout"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"1.000000000000\"\nassert solution(\"2\") == \"1.500000000000\"\nassert solution(\"10\") == \"9.999999999999999645\"\nassert solution(\"100\") == \"90.0000000000000004\"\nassert solution(\"1000\") == \"89.9999999999999995\"\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == \"1.500000000000\"\n\n\"\"\"\n\nfrom math import log10\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1') == '1.000000000000'\nassert solution('2') == '1.500000000000'\n\n\n\n[execution time limit] 4 seconds (py3)\n\n[input] integer n\n\nAn integer representing the number of contestants.\n\n\n[output] string\n\nAn answer for the maximum possible reward.\n\"\"\""
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('9') == 3\nassert solution('5') == 2\nassert solution('2') == 1\nassert solution('1') == 1\nassert solution('0') == 1\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('3') == '1'\nassert solution('1') == '1'\nassert solution('5') == '3'\nassert solution('9') == '3'\nassert solution('2') == '1'\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('5\\n') == '2\\n2 3'\nassert solution('9\\n') == '3\\n3 5 1'\nassert solution('2\\n') == '1\\n2'"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''\n5\n''') == '3'\n\nassert solution('''\n6\n''') == '4'\n\nassert solution('''\n2\n''') == '1'\n\nassert solution('''\n7\n''') == '5'\n\nassert solution('''\n6\n''') == '4'"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('5') == '2\\n2 3'\nassert solution('9') == '3\\n3 5 1'\nassert solution('2') == '1\\n2'\nassert solution('1000') == '3'\nassert solution('50000000') == '3\\n5 1'\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('5') == '2\\n2 3'\nassert solution('9') == '3\\n5 1 1'\nassert solution('2') == '1\\n2'\nassert solution('10') == '3\\n4'\nassert solution('9') == '3\\n5 1 1'\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''5''') == '2\\n2 3'\nassert solution('''9''') == '3\\n3 5 1'\nassert solution('''2''') == '1\\n2'\nassert solution('''15''') == '4\\n3 3 4'\nassert solution('''5''') == '2\\n2 3'\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('5\\n') == '2\\n'\nassert solution('9\\n') == '3\\n'\nassert solution('2\\n') == '1\\n'\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"1\\n1\") == \"1\\n1\"\nassert solution(\"5\\n1\") == \"5\\n1\"\nassert solution(\"5\\n2\") == \"2\\n2 3\"\nassert solution(\"5\\n3\") == \"2\\n3\"\nassert solution(\"5\\n4\") == \"2\\n4\"\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\n    \"5\") == \"2\"\nassert solution(\n    \"9\") == \"3\"\nassert solution(\n    \"2\") == \"1\"\nassert solution(\n    \"100\") == \"0\"\n\nassert solution(\n    \"test\") == \"1\"\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('4\\n42') == '10'\nassert solution('1\\n58') == '0'\nassert solution('98765432\\n23456789') == '23456789'\nassert solution('0\\n0') == '0'\nassert solution('2\\n4') == '16'\n\n\n-----JavaScript\n\nfunction solution(stdin) {\n    var n = parseInt(stdin.readLine());\n    var m = parseInt(stdin.readLine());\n    \n    return Math.pow(2, n) % m;\n}\n\n'''\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''4''') == '0'\nassert solution('''1''') == '0'\nassert solution('''1''') == '0'\nassert solution('''98765432''') == '23456789'\nassert solution('''42''') == '10'\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('') == None\nassert solution('    ') == None\nassert solution('         ') == None\nassert solution('    0') == '0'\nassert solution('   0') == '0'\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''42\n''') == '10'\n\nassert solution('''1\n58\n''') == '0'\n\nassert solution('''98765432\n23456789\n''') == '23456789'\n\nassert solution('''2\n1\n4\n8\n16\n32\n''') == '1'\n\nassert solution('''1\n5\n4\n8\n16\n32\n''') == '8'"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('4\\n42\\n') == '10\\n'\nassert solution('1\\n58\\n') == '0\\n'\nassert solution('98765432\\n23456789\\n') == '23456789\\n'\n\n\n-----"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('4\\n42\\n') == '10\\n'\nassert solution('1\\n58\\n') == '0\\n'\nassert solution('98765432\\n23456789\\n') == '23456789\\n'"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''4\n42''') == '10'\nassert solution('''1\n58''') == '0'"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''4''') == '10'\nassert solution('''1''') == '0'\nassert solution('''9''') == '9'\nassert solution('''64''') == '1'\nassert solution('''298''') == '1'\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"4\\n42\\n\") == \"10\"\nassert solution(\"1\\n58\\n\") == \"0\"\nassert solution(\"98765432\\n23456789\\n\") == \"23456789\"\nassert solution(\"1\\n0\\n\") == \"0\""
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('weird') == 'werd'\nassert solution('word') == 'word'\nassert solution('aaeaa') == 'aa'\nassert solution('zbr') == 'zbr'\nassert solution('aeebb') == 'aeebb'\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"weird\") == \"werd\"\nassert solution(\"word\") == \"word\"\nassert solution(\"aaeaa\") == \"a\"\nprint(solution(stdin.read()))\n\n\n------- Testcases -------\n\nNo testcases will be generated.\n\n\"\"\"\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('weird') == 'werd'\nassert solution('word') == 'word'\nassert solution('aaeaa') == 'aa'\nassert solution('b') == 'b'\nassert solution('a') == 'a'\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('weird') == 'werd'\nassert solution('word') == 'word'\nassert solution('aaeaa') == 'a'\nassert solution('aeeaa') == 'aeaa'\n\n\"\"\"\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('weird') == 'werd'\nassert solution('word') == 'word'\nassert solution('aaeaa') == 'a'\nassert solution('bae') == 'b'\nassert solution('b') == 'b'\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('weird') == 'werd'\nassert solution('word') == 'word'\nassert solution('aaeaa') == 'a'\nassert solution('word') == 'word'\nassert solution('wowowowowowowowowow') == 'wowowowowowowowow'\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('weird') == 'werd'\nassert solution('word') == 'word'\nassert solution('aaeaa') == 'a'\nassert solution('a') == 'a'\nassert solution('aaaaa') == 'aa'\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\n'''5''') == 'werd'\nassert solution(\n'''4''') == 'word'\nassert solution(\n'''5'''\n    '''aaeaa'''\n) == 'a'\nprint(solution(input()))\n\n'''\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('weird') == 'werd'\nassert solution('word') == 'word'\nassert solution('aaeaa') == 'a'\nassert solution('babb') == 'baa'\n\nassert solution('abc') == 'abc'\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('weird') == 'werd'\nassert solution('word') == 'word'\nassert solution('aaeaa') == 'a'\nassert solution('weeird') == 'weeird'\nassert solution('weird') == 'weeird'\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"10 5 1\") == \"2\"\nassert solution(\"15 5 1\") == \"4\"\nassert solution(\"6 2 3\") == \"0\"\nassert solution(\"11 3 10\") == \"7\"\nassert solution(\"9 5 2\") == \"0\"\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('5 1 1') == '2'\nassert solution('6 2 3') == '4'\nassert solution('11 3 10') == '7'\n\n\n\n\n\n\"\"\""
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"5 1 1\") == \"2\"\nassert solution(\"6 2 3\") == \"4\"\nassert solution(\"11 3 10\") == \"7\"\nassert solution(\"3 2 3\") == \"0\"\nassert solution(\"*A*B*B*\") == \"4\"\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('5 1 1') == '2'\nassert solution('6 2 3') == '4'\nassert solution('11 3 10') == '7'\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(input(\"\")) == ''\nassert solution(input(\"\")) == ''\nassert solution(input(\"5 1 1\\n*...*\\n\")) == '2'\nassert solution(input(\"6 2 3\\n*...*.\\n\")) == '4'\nassert solution(input(\"11 3 10\\n.*....**.*.\\n\")) == '7'\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('5 1 1') == '2'\nassert solution('6 2 3') == '4'\nassert solution('11 3 10') == '7'\nassert solution
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\n    \"5 1 1\"\n    \"*...*\"\n    ) == \"2\"\n\nassert solution(\n    \"6 2 3\"\n    \"*...*.AB\"\n    ) == \"4\"\n\nassert solution(\n    \"11 3 10\"\n    \"*.*.AB*B*.\"\n    ) == \"7\"\n\"\"\"\n\n\"\"\"\n-----Thoughts-----\nThis is a pretty easy problem. But I'll try to think about it for a while. It's a bit harder, but it's worth playing a little.\n\nThe task is not to put the max(a,b) students in the railway, but the max(a,b-1) students. To be honest, the way to solve this is quite straightforward. It's something like this:\n\n\"A*B*C*D*E\".split(\"*\") == [\"A\", \"B\", \"C\", \"D\", \"E\"]\n\n\"A*B*C*D*E\".split(\"*\").count(\"\") == len(A)+len(B)+len(C)+len(D)+len(E)\n\n\"A*B*C*D*E\".split(\"*\").count(\"\") + 1 == max(a,b)\n\nIn other words, we can keep adding the max(a,b) students. If the number of empty seats is less than the max(a,b) then we add the jury members to the railway.\n\"\"\""
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(input) == output\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('5 1 1') == '2'\nassert solution('6 2 3') == '4'\nassert solution('3 2 3') == '0'\nassert solution('11 3 10') == '7'\nassert solution('*...*.**') == '4'\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\n    \"5 1 1\"\n    \"*...*\"\n) == \"2\"\n\nassert solution(\n    \"6 2 3\"\n    \"*...*.**\"\n) == \"4\"\n\nassert solution(\n    \"3 2 3\"\n    \"*....**.*.\"\n) == \"0\"\n\nassert solution(\n    \"11 3 10\"\n    \".*....**.*.\"\n) == \"7\"\n\"\"\"\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"1\\n19\") == \"1 8\"\nassert solution(\"1\\n16\") == \"NO\"\nassert solution(\"2\\n16\") == \"NO\"\nassert solution(\"2\\n19\") == \"1 8\"\nassert solution(\"3\\n19\") == \"NO\"\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('19') == '1 8'\nassert solution('16') == 'NO'\n\n'''\n\n'''\nReference:\nhttps://www.hackerrank.com/challenges/sherlock-and-the-beast\n\n'''\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"1\\n19\\n\") == \"1 8\"\nassert solution(\"1\\n16\\n\") == \"NO\"\nassert solution(\"1\\n3\\n\") == \"NO\"\nassert solution(\"1\\n7\\n\") == \"NO\"\nassert solution(\"1\\n1\\n\") == \"NO\"\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('19') == '1 8'\nassert solution('16') == 'NO'\nassert solution('123456789') == 'NO'\nassert solution('12345') == 'NO'\nassert solution('1234') == '1 8'\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''19''') == '1 8'\nassert solution('''16''') == 'NO'\nassert solution('''3''') == 'NO'\nassert solution('''9''') == '1 1'\nassert solution('''23''') == 'NO'\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('19') == '1 8'\nassert solution('16') == 'NO'\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(16) == \"NO\"\nassert solution(19) == \"1 8\"\nassert solution(100) == \"NO\"\nassert solution(1000) == \"NO\"\nassert solution(1000000) == \"NO\"\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('19') == '1 8'\nassert solution('16') == 'NO'\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 2 1\") == \"2\\n1 2\"\nassert solution(\"2\\n5 5\") == \"-1\"\nassert solution(\"1\\n10\") == \"-1\"\nassert solution(\"1\\n2\") == \"-1\"\nassert solution(\"1\\n3\") == \"-1\"\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"\"\"3\n1 2 1\"\"\") == \"2 1 2\"\nassert solution(\"\"\"1\n10\"\"\") == \"-1\"\nassert solution(\"\"\"2\n5 5\"\"\") == \"-1\"\nassert solution(\"\"\"1\n1\"\"\") == \"1\"\nassert solution(\"\"\"5\n5\n5\n5\n5\n5\"\"\") == \"3 4\"\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''3\n1 2 1\n''') == '2\\n1 2'\nassert solution('''2\n5 5\n''') == '-1'\nassert solution('''1\n10\n''') == '-1'\nassert solution('''1\n10\n''') == '-1'\nassert solution('''2\n1 1\n''') == '-1'\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''3\n1 2 1''') == '-1'\nassert solution('''2\n5 5''') == '-1'\nassert solution('''1\n10''') == '-1'\nassert solution('''2\n1 2''') == '1 2'\nassert solution('''2\n5 5''') == '1 2'\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1\\n1') == '1'\nassert solution('2\\n1 2') == '-1'\nassert solution('1\\n5') == '-1'\nassert solution('2\\n5 2') == '1 2'\nassert solution('5\\n10') == '-1'\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1') == '-1'\nassert solution('2') == '-1'\nassert solution('3') == '-1'\nassert solution('4') == '-1'\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''3\n1 2 1''') == '2\\n1 2'\nassert solution('''2\n5 5''') == '-1'\nassert solution('''1\n10''') == '-1'\nassert solution('''2\n5 5''') == '-1'\nassert solution('''3\n10 9 4''') == '-1'\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1\\n1') == '-1'\nassert solution('2\\n1 2') == '2 1'\nassert solution('2\\n3 4') == '-1'\nassert solution('3\\n1 2 1') == '-1'\nassert solution('3\\n2 1 3') == '-1'\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''3\n1 2 1''') == '2\\n1 2'\nassert solution('''2\n5 5''') == '-1'\nassert solution('''1\n10''') == '-1'\nassert solution('''2\n100000''') == '-1'\nassert solution('''1\n100000''') == '-1'\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 2 1\") == \"-1\"\nassert solution(\"2\\n5 5\") == \"2 1\"\nassert solution(\"1\\n10\") == \"-1\"\n\n\n\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\nk = 1\nk2 = 1\nfor i in range(n):\n    if a[i] % 2!= 0:\n        k += 1\nfor j in range(n):\n    if a[j] % 2!= 0:\n        k2 += 1\n    if k == n and k2!= n:\n        print(-1)\n        exit()\nprint(k, *range(1, n + 1))"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('2') == '1 2'\nassert solution('3') == '2 2 2'\nassert solution('4') == '2 1 2'\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('1') == '1'\nassert solution('4') == '2 2'\nassert solution('27') == '3 9 9'\nassert solution('2') == '2 2'\nassert solution('3') == '4 4 4'\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"4\") == \"2 2\"\nassert solution(\"27\") == \"9 9 9\"\nassert solution(\"42\") == \"7\"\nassert solution(\"99\") == \"12\"\n\n\n-----"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('4') == '2 2'\nassert solution('27') == '3 9 9'\n\"\"\"\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\n    '''\n    1\n    '''\n) == '1'\n\nassert solution(\n    '''\n    4\n    '''\n) == '2 2'\n\nassert solution(\n    '''\n    27\n    '''\n) == '9 9 9'\n\nassert solution(\n    '''\n    33\n    '''\n) == '10 10 10 10'\n\nassert solution(\n    '''\n    11\n    '''\n) == '11 11'"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2 2\"\nassert solution(\"4\") == \"2 2\"\nassert solution(\"27\") == \"3 9 9\"\nassert solution(\"3\") == \"3 9 9\"\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('1') == '1'\nassert solution('4') == '2 1'\nassert solution('27') == '3 9 9'\nassert solution('4') == '2 1'\nassert solution('1') == '1'\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1') == '1'\nassert solution('4') == '1 2'\nassert solution('27') == '9 9 9'\nassert solution('1000') == '1000'\nassert solution('100') == '100'\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(input()) == output(input())\n\n\"\"\""
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(input()) == \"2 9 9\"\nassert solution(input()) == \"1 1 1\"\nassert solution(input()) == \"1 1 2\"\nassert solution(input()) == \"1 2\"\nassert solution(input()) == \"2 1 9\"\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('2\\n2 3\\n') == '2\\n3 2\\n'\nassert solution('2\\n2 2\\n') == '1\\n2\\n'\nassert solution('3\\n2 1 1\\n') == '3\\n1 1 2\\n'\nassert solution('2\\n83 14\\n') == '2\\n14 83\\n'"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"2\\n2 3\\n\") == \"2\\n3 2\\n\"\nassert solution(\"2\\n2 2\\n\") == \"1\\n2\\n\"\nassert solution(\"3\\n2 1 1\\n\") == \"3\\n1 1 2\\n\""
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"2\\n2 3\\n\") == \"2\"\nassert solution(\"2\\n2 2\\n\") == \"1\"\nassert solution(\"2\\n2 1 1\\n\") == \"3\"\nassert solution(\"3\\n2 1 1\\n\") == \"1\"\nassert solution(\"2\\n83 14\\n\") == \"2\"\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == result\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('3\\n3\\n3') == '3'\nassert solution('3\\n3\\n3') == '3'\nassert solution('3\\n3\\n3') == '3'\nassert solution('3\\n3\\n3') == '3'\nassert solution('3\\n3\\n3') == '3'\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''2\n2 3''') == '2'\nassert solution('''2\n2 2''') == '1'\nassert solution('''3\n2 1 1''') == '3'\n\nassert solution('''6\n
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('2\\n2 3') == '2\\n3 2'\nassert solution('2\\n2 2') == '1\\n2'\nassert solution('3\\n2 1 1') == '3\\n1 1 2'\nassert solution('2\\n83 14') == '2\\n14 83'\nassert solution('3\\n2 1 1') == '3\\n1 1 2'\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('2\\n2 3') == '2\\n3 2'\nassert solution('2\\n2 2') == '1\\n2'\nassert solution('2\\n2 1 1') == '2\\n1 1 2'\nassert solution('3\\n2 1 1') == '3\\n1 1 2'\nassert solution('3\\n2 2 1') == '2\\n1 2'\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1\\n2\\n3') == '2\\n3'\nassert solution('2\\n2\\n3') == '1\\n2\\n3'\nassert solution('2\\n1\\n3') == '2\\n3'\nassert solution('2\\n3\\n3') == '2\\n3'\nassert solution('2\\n1\\n2') == '2\\n1'\n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('3') == '1'\nassert solution('5') == '2'\nassert solution('9') == '4'\nassert solution('99') == '10'\nassert solution('999') == '100'\n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''3''') == '1'\nassert solution('''1''') == '1'\nassert solution('''1_2''') == '1'\nassert solution('''2''') == '1'\nassert solution('''11_2''') == '1'\n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1\\n') == '1'\nassert solution('2\\n') == '2'\nassert solution('3\\n') == '1'\nassert solution('100\\n') == '10'\nassert solution('10000000000\\n') == '1000'\n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('') is None\nassert solution(' ') is None\nassert solution('   ') is None\nassert solution('1') == '1'\nassert solution('2') == '2'\n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('3') == 1\nassert solution('1000') == 2\nassert solution('1000000') == 496\nassert solution('10001') == 0\nassert solution('101') == 0\n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('') == None\nassert solution('3') == None\nassert solution('12') == None\nassert solution('1') == None\nassert solution('2') == None\n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(3) == 1\nassert solution(2) == 2\nassert solution(10) == 4\nassert solution(19) == 6\nassert solution(191) == 19\n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('10') == 2\nassert solution('9') == 3\nassert solution('11') == 3\nassert solution('23') == 5\nassert solution('7') == 7\n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('a') == ''\nassert solution('asd') == ''\nassert solution('5') == ''\nassert solution('5asd') == ''\n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '2'\nassert solution('4') == '2'\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''2 6\n10\n99''') == '8'\nassert solution('''2 0\n1\n9\n''') == '4'\nassert solution('''19 7\n1000\n9999''') == '6'\nassert solution('''131495313258583589739\n9278543553740191393869\n''') == '1767'\nassert solution('''131495313258583589739\n9278543553740191393869\n''') == '1767'\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"2 6\\n10\\n99\") == \"8\"\nassert solution(\"2 0\\n1\\n9\\n\") == \"4\"\nassert solution(\"19 7\\n1000\\n9999\\n\") == \"6\"\nassert solution(\"5 4\\n10\\n100\\n\") == \"5\"\nassert solution(\"10 9\\n10000\\n99999\\n\") == \"4\"\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''2 6\n10\n99''') == '8'\nassert solution('''2 0\n1\n9\n''') == '4'\nassert solution('''19 7\n1000\n9999\n''') == '6'\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('2 0') == '4'\nassert solution('2 1') == '8'\nassert solution('2 2') == '16'\nassert solution('2 3') == '32'\nassert solution('2 4') == '64'\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('8 0') == '4'\nassert solution('10 0') == '8'\nassert solution('100 10') == '104'\nassert solution('1 100') == '99'\nassert solution('2 0') == '4'\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''2 6\n10\n99''') == '8'\nassert solution('''2 0\n1\n9\n''') == '4'\nassert solution('''19 7\n1000\n9999''') == '6'\n'''\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('0 2\\n1') == '2'\nassert solution('1 2\\n1') == '4'\nassert solution('10 15\\n100 110') == '16'\nassert solution('3 3\\n100 100') == '6'\nassert solution('1 1\\n10') == '4'\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('2 6\\n10\\n99\\n') == '8'\nassert solution('2 0\\n1\\n9\\n') == '4'\nassert solution('19 7\\n1000\\n9999\\n') == '6'\nassert solution('10 21\\n1000\\n9999\\n') == '0'\nassert solution('1 0\\n1\\n1\\n') == '1'\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''2 6\n10\n99\n''') == '8'\nassert solution('''2 0\n1\n9\n''') == '4'\nassert solution('''19 7\n1000\n9999\n''') == '6'\nassert solution('''3 7\n9000\n99999\n''') == '0'\nassert solution('''29 20\n9999999\n999999\n''') == '12'\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('7 17\\n1\\n8') == '4'\nassert solution('1 7\\n1\\n8') == '1'\nassert solution('13 5\\n1\\n9') == '6'\nassert solution('18 11\\n1\\n8') == '6'\nassert solution('1 5\\n1\\n5') == '1'\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1 2') == '1'\nassert solution('1 2') == '2'\nassert solution('1 2') == '1'\nassert solution('1 2') == '1'\nassert solution('1 2') == '1'\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('5 2\\n1 3 1 4 2\\n') == '4'\nassert solution('6 4\\n1 1 2 2 3 3\\n') == '6'\nassert solution('2 1\\n1\\n') == '1'\nassert solution('2 4\\n1 1 2 2 3 3\\n') == '3'\nassert solution('2 2\\n1 1\\n') == '1'\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('4 2\\n1 1 2 2') == '4'\nassert solution('6 4\\n1 1 2 2 3 3') == '6'\nassert solution('5 4\\n1 1 2 2 3') == '5'\nassert solution('1 1\\n1') == '1'\nassert solution('2 2\\n1 1') == '1'\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\n'''5 2\n1 3 1 4 2'''\n) == '4'\n\nassert solution(\n'''6 4\n1 1 2 2 3 3'''\n) == '6'\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('3 2') == '1'\nassert solution('1 1 2 2 3') == '6'\nassert solution('1 1 2 2 3 3') == '3'\n\n\n\"\"\"\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == expected\nprint(solution(stdin))\n\"\"\"\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('5 2\\n1 3 1 4 2') == '4'\nassert solution('6 4\\n1 1 2 2 3 3') == '6'\nassert solution('7 4\\n1 1 2 2 3 3') == '7'\nassert solution('8 4\\n1 1 2 2 3 3') == '8'\nassert solution('9 4\\n1 1 2 2 3 3') == '9'\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1 2') == '4'\nassert solution('5 2') == '6'\nassert solution('6 4') == '6'\nassert solution('10 10') == '10'\nassert solution('8 10') == '8'\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"1\\n1\\n1\\n1\\n1\") == \"1\"\nassert solution(\"3\\n2\\n2\\n1\") == \"1\"\nassert solution(\"2\\n1\\n1\\n1\") == \"2\"\nassert solution(\"2\\n2\\n2\\n1\") == \"2\"\nassert solution(\"5\\n2\\n1\\n1\\n1\") == \"4\"\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('4 2\\n1 3 1 4 2') == '4'\nassert solution('6 4\\n1 1 2 2 3 3') == '6'\nassert solution('5 2\\n1 3 1 4 2') == '4'\nassert solution('5 1\\n1') == '1'\nassert solution('10 6\\n
    },
    {
        "number": 449,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('125') == 3\nassert solution('43') == 5\nassert solution('1000000000') == 1000000000\nassert solution('1000000000') == 1000000000\nassert solution('1000000000') == 1000000000\n"
    },
    {
        "number": 449,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('125') == '3'\nassert solution('43') == '5'\nassert solution('1000000000') == '10000000'\n"
    },
    {
        "number": 449,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('125') == '3'\nassert solution('43') == '5'\nassert solution('1000000000') == '10000000'\nassert solution('123') == '123'"
    },
    {
        "number": 449,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"123\") == \"6\"\nassert solution(\"1234\") == \"9\"\nassert solution(\"1234567\") == \"17\"\nassert solution(\"12345678\") == \"34\"\nassert solution(\"123456789\") == \"59\"\n"
    },
    {
        "number": 449,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(125) == 3\nassert solution(43) == 5\nassert solution(1000000000) == 1000000000\nassert solution(43000000000) == 2000000000\n\n\n\n'''\n"
    },
    {
        "number": 449,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('43') == '5'\nassert solution('125') == '3'\nassert solution('1000000000') == '10000000'\nprint(\"All tests passed successfully.\")\n"
    },
    {
        "number": 449,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(123456789) == '987654321'\nassert solution(1000000000) == '10000000'\n\"\"\"\n"
    },
    {
        "number": 449,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('125') == '3'\nassert solution('43') == '5'\nassert solution('1000000000') == '10000000'\n\n'''\n"
    },
    {
        "number": 449,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('125') == '3'\nassert solution('43') == '5'\nassert solution('1000000000') == '10000000'\nassert solution('100000000') == '10000000'\n"
    },
    {
        "number": 449,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''125''') == '3'\nassert solution('''43''') == '5'\nassert solution('''1000000000''') == '10000000'\nassert solution('''24794548''') == '1048'\n\n\n\"\"\"\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1 0') == '1'\nassert solution('2 1') == '0'\nassert solution('3 2') == '4'\nassert solution('4 1') == '6'\nassert solution('7 4') == '328'\n\"\"\"\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('1 0') == '1'\nassert solution('2 1') == '0'\nassert solution('3 2') == '4'\nassert solution('4 1') == '6'\nassert solution('7 4') == '328'\n\n\"\"\"\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1 0') == '1'\nassert solution('2 1') == '0'\nassert solution('3 2') == '4'\nassert solution('4 1') == '6'\nassert solution('7 4') == '328'\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1 0') == '1'\nassert solution('2 1') == '0'\nassert solution('3 2') == '4'\nassert solution('4 1') == '6'\nassert solution('7 4') == '328'\nprint('Passed')\n\"\"\"\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"1 0\") == \"1\"\nassert solution(\"2 1\") == \"0\"\nassert solution(\"3 2\") == \"4\"\nassert solution(\"4 1\") == \"6\"\nassert solution(\"7 4\") == \"328\"\n\n\"\"\"\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('0 1') == '0'\nassert solution('2 1') == '0'\nassert solution('4 1') == '4'\nassert solution('7 4') == '6'\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''1 0''') == '1'\nassert solution('''2 1''') == '0'\nassert solution('''3 2''') == '4'\nassert solution('''4 1''') == '6'\nassert solution('''7 4''') == '328'\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1 0') == '1'\nassert solution('2 1') == '0'\nassert solution('3 2') == '4'\nassert solution('4 1') == '6'\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1 0\\n') == '1'\nassert solution('2 1\\n') == '0'\nassert solution('3 2\\n') == '4'\nassert solution('4 1\\n') == '6'\nassert solution('7 4\\n') == '328'\n\"\"\"\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''5 3\n4 3 4 1 6\nRROWW''') == '11'\nassert solution('''5 2\n10 20 14 20 11\nRRRRR''') == '-1'\nassert solution('''11 5\n5 6 3 2 3 4 7 5 4 5 6''') == '28'\nassert solution('''11 5\n5 6 3 2 3 4 7 5 4 5 6''') == '-1'\nassert solution('''5 2\n10 20 14 20 11\nRRRRRW''') == '-1'\n'''"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''\n5 3\n4 3 4 1 6\nRROWW\n''') == '11'\n\nassert solution('''\n11 5\n5 6 3 2 3 4 7 5 4 5 6\nRWOORWORROW\n''') == '28'\n\nassert solution('''\n5 2\n10 20 14 20 11\nRRRRR\n''') == '-1'\n\nassert solution('''\n10 3\n5 6 3 2 3 4 7 5 4 5 6\nWOOOROWROW\n''') == '10'\n\nassert solution('''\n10 3\n5 6 3 2 3 4 7 5 4 5 6\nWOOOROWROW\n''') == '-1'"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('5 3\\n4 3 4 1 6') == '11'\nassert solution('5 2\\n10 20 14 20 11') == '-1'\nassert solution('11 5\\n5 6 3 2 3 4 7 5 4 5 6') == '28'\nassert solution('11 11\\n5 6 3 2 3 4 7 5 4 5 6') == '-1'\nassert solution('11 11\\n5 6 3 2 3 4 7 5 4 5 6') == '-1'\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('4 2') == '-1'\nassert solution('5 2') == '14'\nassert solution('5 3') == '11'\nassert solution('11 5') == '28'\nassert solution('5 2') == '14'\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('5 3\\n4 3 4 1 6\\nRWOORWORROW') == '11'\nassert solution('5 2\\n10 20 14 20 11\\nRRRRR') == '-1'\nassert solution('11 5\\n5 6 3 2 3 4 7 5 4 5 6') == '28'\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == \"\"\n\n\n\"\"\"\n\nn, k = map(int, stdin.split())\nb = [int(x) for x in stdin.split()]\nc = stdin[len(stdin)-1]"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''5 3''') == '11'\nassert solution('''5 2''') == '-1'\nassert solution('''11 5''') == '28'\nassert solution('''7 3''') == '11'\nassert solution('''7 3''') == '-1'\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1\\n1\\n') == '1'\nassert solution('2\\n1\\n') == '-1'\nassert solution('2\\n2\\n') == '0'\nassert solution('3\\n1\\n') == '-1'\nassert solution('3\\n2\\n') == '0'\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('5 2') == '-1'\nassert solution('5 5') == '8'\nassert solution('11 5') == '28'\n\n\n\"\"\"\n\nn, k = [int(x) for x in stdin.split()]\nb = [int(x) for x in stdin.split()]\nc = [x for x in stdin.split()]\n\ntotal_b = 0\nfor i in range(n):\n    if c[i] == 'W':\n        if b[i] > b[i + 1]:\n            total_b += b[i]\n        else:\n            total_b += b[i + 1]\n    elif c[i] == 'O':\n        total_b += b[i] * 2\n    elif c[i] == 'R':\n        total_b += b[i] * 3"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(input()) == expect\n\n\"\"\"\n\nfrom __future__ import print_function\n\nimport sys\n\nimport math"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(input()) == output\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('9 4') == 'YES'\nassert solution('9 4') == 'YES'\nassert solution('2 3 1') == 'YES'\nassert solution('1 2 4') == 'NO'\nassert solution('9 4') == 'YES'\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('9 4\\n2\\n2 4\\n') == 'YES'\nassert solution('9 4\\n3\\n2 3 1\\n') == 'NO'\nassert solution('9 4\\n3\\n1 2 4\\n') == 'NO'\nassert solution('9 4\\n2\\n2 3 1\\n') == 'YES'\nassert solution('9 4\\n2\\n2 4\\n') == 'YES'\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('9 4\\n2\\n2 4\\n') == 'YES'\nassert solution('9 4\\n3\\n2 3 1\\n') == 'NO'\nassert solution('9 4\\n3\\n1 2 4\\n') == 'YES'\n\"\"\""
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('2 4') == 'YES'\nassert solution('3 1 1') == 'YES'\nassert solution('9 4') == 'YES'\nassert solution('3 0 1') == 'NO'\nassert solution('1 2 4') == 'NO'\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('2 4\\n2\\n4\\n') == 'YES\\n'\nassert solution('9 4\\n3\\n2 3 1\\n') == 'YES\\n'\nassert solution('9 4\\n3\\n1 2 4\\n') == 'NO\\n'\nassert solution('2 4\\n2\\n4\\n') == 'YES\\n'\nassert solution('9 4\\n3\\n1 2 4\\n') == 'NO\\n'\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('9 4\\n2\\n2 4') == 'YES'\nassert solution('9 4\\n3\\n2 3 1') == 'NO'\nassert solution('9 4\\n3\\n1 2 4') == 'NO'\nassert solution('9 4\\n3\\n1 2 3') == 'YES'\nassert solution('9 4\\n3\\n2 3 1\\n1 2 3') == 'YES'\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('9 4\\n2\\n2 4\\n') == 'YES'\nassert solution('9 4\\n3\\n2 3 1\\n') == 'NO'\nassert solution('9 4\\n3\\n1 2 4\\n') == 'YES'\nassert solution('9 4\\n3\\n1 2 4\\n') == 'NO'\nassert solution('9 4\\n2\\n2 4\\n') == 'YES'\n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('||+|=||||||') == '||||+||=||||||'\nassert solution('|||+|=||||||') == '||||+||=||||||'\nassert solution('|||||+||=||||||') == '||||+||=||||||'\nassert solution('||||||+||=||||||') == '||||||+||=||||||'\nassert solution('||||||+||=||||||') == '||||||+||=||||||'\n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"||+|=|||||\") == \"|||+|=||||\"\nassert solution(\"|||||+||=||\") == \"||||+||=||\"\nassert solution(\"||||+||=||\") == \"||||+||=||\"\nassert solution(\"|+|=||||||\") == \"|+|=||||||\"\nassert solution(\"||||+||=||\") == \"||||+||=||\"\n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('||+|=|||||') == '|||+|=||||'\nassert solution('|||||+||=||') == '||||+||=||'\nassert solution('||||+||=||') == 'Impossible'\nassert solution('||||+||=||') == 'Impossible'\nassert solution('||||+||=||') == '||||+||=||'\n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('||+|=|||||') == '|||+|=||||'\nassert solution('|||||+||=||') == '||||+||=||'\nassert solution('||||+||=||') == 'Impossible'\nassert solution('||||+||=||') == '||||+||=||'\nassert solution('||||+||=||') == '||||+||=||'\n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('||+|=|||||') == '|||+|=||||'\nassert solution('|||||+||=||') == 'Impossible'\nassert solution('||||+||=||') == '||||+||=||'\n\n\n\n\n-----"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('||+|=|||||') == '|||+|=||||'\nassert solution('|||||+||=||') == '||||+||=||'\nassert solution('||||+||=||') == '||||+||=||'\nassert solution('|||+|=||||') == '||||+|=||||'\nassert solution('||||||+') == '||||||+'\n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('||+|=||||||') == '|||+|=||||||'\nassert solution('|||+|=||||||') == '||+|=||||||'\nassert solution('|||||+||=||') == '||||+||=||'\nassert solution('||||+||=||') == '||||+||=||'\nassert solution('||||||+||=||') == '||||||+||=||'\n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\n    '||+|=|||||'\n) == '|||+|=||||'\nassert solution(\n    '|||||+||=||'\n) == '||||+||=||||'\nassert solution(\n    '||||+||=||||||'\n) == '||||+||=||||||'\nassert solution(\n    '||||+||=||||||'\n) == '||||+||=||||||'\nassert solution(\n    '||||+||=||||||'\n) == '||||+||=||||||'\n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"||+|=|||||\") == \"|||+|=||||\"\nassert solution(\"|||||+||=||\") == \"||||+||=||\"\nassert solution(\"||||+||=||\") == \"||||+||=||\"\nassert solution(\"||||||+||\") == \"||||||+||\"\nassert solution(\"|||||||+\") == \"|||||||+\"\n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('||+|=|||||') == '|||+|=||||'\nassert solution('|||||+||=||') == '||||+||=||'\nassert solution('||||+||=||||||') == '||||+||=||||||'\nassert solution('||||+||=||||||') == '||||+||=||||||'\nassert solution('||||+||=||||||') == '||||+||=||||||'\n\n\n-----"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"4 1\") == \"2\"\nassert solution(\"5 2\") == \"1\"\nassert solution(\"5 4\") == \"1\"\nassert solution(\"5 6\") == \"5\"\nassert solution(\"5 12\") == \"4\"\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdin\n'''"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('3 2') == '2'\nassert solution('2 2') == '4'\nassert solution('3 4') == '1'\nassert solution('1 2') == '1'\nassert solution('2 1') == '2'\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('4 3') == '2'\nassert solution('4 2') == '2'\nassert solution('1 5') == '4'\nassert solution('3 2') == '4'\nassert solution('3 4') == '2'\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"3 2\") == \"2\"\nassert solution(\"4 0\") == \"1\"\nassert solution(\"4 2\") == \"1\"\nassert solution(\"1 0\") == \"1\"\nassert solution(\"5 0\") == \"0\"\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1 2') == ''\nassert solution('3 2') == '0'\nassert solution('2 1') == '1'\nassert solution('3 2 3') == '0'\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''3 2\n''') == '2'\nassert solution('''10 5\n''') == '6'\nassert solution('''20 3\n''') == '20'\n'''"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('3 2') == '2'\nassert solution('3 2') == '2'\nassert solution('3 2') == '2'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''-1 0\n0 3\n2 -1''') == '2\\n1 2\\nRL\\nUU\\nDR'\nassert solution('''-1 0\n1 -1''') == '-1'\nassert solution('''-1 0\n2 -1''') == '-1'\nassert solution('''-1 0\n0 -1''') == '-1'\nassert solution('''-1 0\n1 0''') == '-1'\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\n'''\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(input_) == output_\n\"\"\"\n\nfrom sys import stdin\nfrom math import gcd\n\ninput_ = stdin.read().strip().split('\\n')"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"3\\n-1 0\\n0 3\\n2 -1\") == \"2\\n1 2\\nRL\\nUU\\nDR\\n\"\nassert solution(\"1\\n0\\n0\\n\") == \"-1\\n\"\nassert solution(\"2\\n0\\n0\") == \"-1\\n\"\nassert solution(\"1\\n0\") == \"-1\\n\"\nassert solution(\"2\\n-1 0\") == \"-1\\n\"\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\n    '''-1 0\n0 3\n2 -1''') == '2\\n1 2\\nRL\\nUU\\nDR'\n\nassert solution(\n    '''1 0\n0 3\n2 -1''') == '2\\n1 2\\nRL\\nUU\\nDR'\n\nassert solution(\n    '''1 1\n0 3\n2 -1''') == '-1'\n\nassert solution(\n    '''-1 -1\n0 3\n2 -1''') == '-1'\n\nassert solution(\n    '''3\n-1 0\n0 3\n2 -1''') == '2\\n1 2\\nRL\\nUU\\nDR'"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == expected\n\n-----Solution Overview-----\nSince the robot arm will be constructed according to the following conditions:\n - The robot arm consists of m sections and m+1 joints. The sections are numbered 1, 2,..., m, and the joints are numbered 0, 1,..., m. Section i connects Joint i-1 and Joint i. The length of Section i is d_i.\n - For each section, its mode can be specified individually. There are four modes: L, R, D and U. The mode of a section decides the direction of that section. If we consider the factory as a coordinate plane, the position of Joint i will be determined as follows (we denote its coordinates as (x_i, y_i)):\n - (x_0, y_0) = (0, 0).\n - If the mode of Section i is L, (x_{i}, y_{i}) = (x_{i-1} - d_{i}, y_{i-1}).\n - If the mode of Section i is R, (x_{i}, y_{i}) = (x_{i-1} + d_{i}, y_{i-1}).\n - If the mode of Section i is D, (x_{i}, y_{i}) = (x_{i-1}, y_{i-1} - d_{i}).\n - If the mode of Section i is U, (x_{i}, y_{i}) = (x_{i-1}, y_{i-1} + d_{i}).\nAs you can see, this solution is trivial and only takes the code we wrote to solve this problem.\n\n-----Reference-----\n- https://leetcode.com/explore/challenge/card/may-leetcoding-challenge/537/week-4-may-22nd-may-28th/3322/\n\"\"\"\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"-1 0\\n0 3\\n2 -1\\n\") == \"2\\n1 2\\nRL\\nUU\\nDR\"\nassert solution(\"0 3\\n2 -1\\n\") == \"2\\n1 2\\nRL\\nUU\\nDR\"\nassert solution(\"-1 0\\n0 3\\n2 -1\\n\") == \"2\\n1 2\\nRL\\nUU\\nDR\"\nassert solution(\"-1 0\\n0 3\\n2 -1\\n\") == \"2\\n1 2\\nRL\\nUU\\nDR\"\nassert solution(\"-1 0\\n0 3\\n2 -1\\n\") == \"2\\n1 2\\nRL\\nUU\\nDR\"\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\n    \"\"\"\\\n-1 0\n0 3\n2 -1\n\"\"\") == \"\"\"\\\n2\n1 2\nRL\nUU\nDR\n\"\"\"\nassert solution(\n    \"\"\"\\\n-1 0\n0 3\n2 -1\n\"\"\") == \"\"\"\\\n-1\n1 2\nDR\n\"\"\"\nassert solution(\n    \"\"\"\\\n-1 0\n0 3\n2 -1\n\"\"\") == \"\"\"\\\n2\n1 2\nDR\n\"\"\"\nassert solution(\n    \"\"\"\\\n-1 0\n0 3\n2 -1\n\"\"\") == \"\"\"\\\n-1\n1 2\nDR\n\"\"\"\nassert solution(\n    \"\"\"\\\n-1 0\n0 3\n2 -1\n\"\"\") == \"\"\"\\\n2\n1 2\nDR\n\"\"\"\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''-1 0\n0 3\n2 -1''') == '2\\n1 2\\nRL\\nUU'\nassert solution('''-1 0\n0 3\n2 -1''') == '-1'\nassert solution('''-1 0\n0 3\n2 -1''') == '1'\nassert solution('''-1 0\n0 3\n2 -1''') == '2'\nassert solution('''-1 0\n0 3\n2 -1''') == '-1'\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"aogogob\") == \"a***b\"\nassert solution(\"ogogmgogogogo\") == \"***gmg***\"\nassert solution(\"ogoogoogo\") == \"*********\"\nassert solution(\"goog\") == \"***g\"\nassert solution(\"go\") == \"***\"\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('aogogob') == 'a***b'\nassert solution('ogogmgogogogo') == '***gmg***'\nassert solution('ogoogoogo') == '*********'\n\"\"\"\n\n\"\"\"\n\n---Solution 1---\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''7\naogogob''') == 'a***b'\nassert solution('''13\nogogmgogogogo''') == '***gmg***'\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('aogogob') == 'a***b'\nassert solution('ogogmgogogogo') == '***gmg***'\nassert solution('ogoogoogo') == '*********'\n\n\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('aogogob') == 'a***b'\nassert solution('ogoogoogo') == '***gmg***'\nassert solution('ogogmgogogogo') == '*********'"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('    ') == ''\nassert solution('     ') =='    '\nassert solution('     a') =='    a'\nassert solution('a b   c') == 'a b *** c'\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('aogogob') == 'a***b'\nassert solution('aogogmgogogogo') == '***gmg***'\nassert solution('ogoogoogo') == '*********'\nassert solution('ogogooggggg') == '************'\nassert solution('a') == '***'\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"aogogob\") == \"a***b\"\nassert solution(\"ogogmgogogogo\") == \"***gmg***\"\nassert solution(\"ogoogoogo\") == \"*********\"\nassert solution(\"dvzmgdovvqzv\") == \"***qmg***\"\nassert solution(\"zvzvzvzvzv\") == \"*********\"\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"ogogoogo\") == \"***gmg***\"\nassert solution(\"aogogob\") == \"a***b\"\nassert solution(\"ogoogmgogogogo\") == \"*********\"\nassert solution(\"oggoogo\") == \"*********\"\nassert solution(\"ogoogogo\") == \"*********\"\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('6\\nabc') == '***c'\nassert solution('2\\nabc') == 'a*c'\nassert solution('3\\nabc') == 'a**c'\nassert solution('1\\nabc') == 'a'\nassert solution('0\\nabc') == 'a'\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''947 987654321987654321\n''') == '593574252'\nassert solution('''10 2\n''') == '1'\nassert solution('''10 1605\n''') == '363165664'\n'''\n'''"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('1000000000 1000000000') == '1000000007'\nassert solution('100 10000000') == '1000000007'\nassert solution('5 1000000000') == '5000000001'\nassert solution('1 1000000000') == '1'\nassert solution('1000000001 1000000000') == '1'\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('10 2') == '2'\nassert solution('20190929 1605') == '363165664'\nassert solution('947 987654321987654321') == '593574252'\nassert solution('1000000000 1000000000') == '1'\n\n\n\"\"\"\n\n\"\"\"\n[Python] Ways to approach a problem\n[Stackoverflow] How to get a list of prime numbers less than a given number\n[GitHub] Finding all factors of a number\n[GitHub] Counting the occurrences of a substring in a string\n[GitHub] Find the middle index of a string\n[GitHub] Reversing a string\n[GitHub] Counting the occurrences of a substring in a string\n[GitHub] Given a string, find the longest palindrome in it\n[GitHub] Palindromic numbers\n[GitHub] Balanced parentheses\n[GitHub] Parse a string into a tree\n[GitHub] A pair of strings forms an anagram\n[GitHub] Sort a list of strings\n[GitHub] Check if a word is a palindrome\n[GitHub] Compute the Hamming distance between two strings\n[GitHub] Return the number of distinct islands in a 2d grid\n[GitHub] Compute the missing element in a sorted array\n[GitHub] Calculate the largest integer not greater than a given number\n[GitHub] Compute the factorial of a number\n[GitHub] Given a matrix with only 0 and 1, find the starting and ending position of a sequence\n[GitHub] Split a string into a list of strings\n[GitHub] Merge Sort\n[GitHub] Cycle through a list of numbers\n[GitHub] Check if a list contains a cycle\n[GitHub] Check if a string is a permutation of a palindrome\n[GitHub] Check if a string is a permutation of a palindrome\n[GitHub] The kth largest element in a list\n[GitHub] Palindromic numbers\n[GitHub] Palindromic numbers II\n[GitHub] Rearrange an array in alternating positive and negative items\n[GitHub] Trapping rain water\n[GitHub] The kth largest element in a list\n[GitHub] Sort the indices of an array\n[GitHub] Find a number at a given index in a sorted array\n[GitHub] Number of paths to reach the top left corner from the top right corner\n[GitHub] Number of partitions in a string\n[GitHub] Number of partitions in a string II\n[GitHub] Binary search\n[GitHub] Implementing a queue\n[GitHub] Implementing a queue\n[GitHub] Implementing a queue\n[GitHub] Implementing a queue\n[GitHub] Implementing a queue\n[GitHub] Implementing a queue\n[GitHub] Implementing a queue\n[GitHub] Implementing a queue\n[GitHub] Implementing a queue\n[GitHub] Implementing a queue\n[GitHub] Implementing a queue\n[GitHub] Implementing a queue\n[GitHub] Implementing a queue\n[GitHub] Implementing a queue\n[GitHub] Implementing a queue\n[GitHub] Implementing a queue\n[GitHub] Implementing a queue\n[GitHub] Implementing a queue\n[GitHub] Implementing a queue\n[GitHub] Implementing a queue\n[GitHub] Implementing a queue\n[GitHub] Implementing a queue\n[GitHub] Implementing a queue\n[GitHub] Implementing a queue\n[GitHub] Implementing a queue\n[GitHub] Implementing a queue\n[GitHub] Implementing a queue\n[GitHub] Implementing a queue\n[GitHub] Implementing a queue\n[GitHub] Implementing a queue\n[GitHub] Implementing a queue\n[GitHub] Implementing a queue\n[GitHub] Implementing a queue\n[GitHub] Implementing a queue\n[GitHub] Implementing a queue\n[GitHub] Implementing a queue\n[GitHub] Implementing a queue\n[GitHub] Implementing a queue\n[GitHub] Implementing a queue\n[GitHub] Implementing a queue\n[GitHub] Implementing a queue\n[GitHub] Implementing a queue\n[GitHub] Implementing a queue\n[GitHub] Implementing a queue\n[GitHub] Implementing a queue\n[GitHub] Implementing a queue\n[GitHub] Implementing a queue\n[GitHub] Implementing a queue\n[GitHub] Implementing a queue\n[GitHub] Implementing a queue\n[GitHub] Implementing a queue\n[GitHub] Implementing a queue\n[GitHub] Implementing a queue\n[GitHub] Implementing a queue\n[GitHub] Implementing a queue\n[GitHub] Implementing a queue\n[GitHub] Implementing a queue\n[GitHub] Implementing a queue\n[GitHub] Implementing a queue\n[GitHub] Implementing a queue\n[GitHub] Implementing a queue\n[GitHub] Implementing a queue\n[GitHub] Implementing a queue\n[GitHub] Implementing a queue\n[GitHub] Implementing a queue\n[GitHub] Implementing a queue\n[GitHub] Implementing a queue\n[GitHub] Implementing a queue\n[GitHub] Implementing a queue\n[GitHub] Implementing a queue\n[GitHub] Implementing a queue\n[GitHub] Implementing a queue\n[GitHub] Implementing a queue\n[GitHub] Implementing a queue\n[GitHub] Implementing a queue\n[GitHub] Implementing a queue\n[GitHub] Implementing a queue\n[GitHub] Implementing a queue\n[GitHub] Implementing a queue\n["
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1 10') == '1'\nassert solution('1 1') == '0'\nassert solution('1 2') == '1'\nassert solution('1 3') == '1'\nassert solution('1 4') == '2'\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''10 2''') == '2'\nassert solution('''20190929 1605''') == '363165664'\nassert solution('''947 987654321987654321''') == '593574252'\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''10 2''') == '2'\nassert solution('''947 987654321987654321''') == '363165664'\nassert solution('''30 25''') == '6'\nassert solution('''10 1''') == '0'\nassert solution('''2 1''') == '0'\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('10 2') == '2'\nassert solution('20190929 1605') == '363165664'\nassert solution('947 987654321987654321') == '593574252'\nassert solution('10 0') == '0'\nassert solution('947 987654321987654321 947 987654321987654321') == '593574252'\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''10 2''') == '2'\nassert solution('''20190929 1605''') == '363165664'\nassert solution('''947 987654321987654321''') == '593574252'\nassert solution('''166666667 777777777''') == '1'\nassert solution('''9999999999999090909''') == '0'\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\n10 2\n\"\"\"\n) == \"2\"\n\nassert solution(\n\"\"\"\n20190929 1605\n\"\"\"\n) == \"363165664\"\n\nassert solution(\n\"\"\"\n947 987654321987654321\n\"\"\"\n) == \"593574252\"\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''947 987654321987654321''') == '593574252'\nassert solution('''10 2''') == '2'\nassert solution('''20190929 1605''') == '363165664'\nassert solution('''947 987654321987654321 947 987654321987654321''') == '593574252'"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''3 2 8''') == '3'\nassert solution('''1 2 -18''') == '0'\nassert solution('''2 2 -1''') == '4'\nassert solution('''2 3 4''') == '3'\nassert solution('''3 1 -4''') == '0'\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('3 2 8') == '3'\nassert solution('1 2 -18') == '0'\nassert solution('2 2 -1') == '4'\nassert solution('3 1 -17') == '-1'\nassert solution('2 3 -2') == '-1'\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1 2 -18') == '10 2008 13726'\nassert solution('3 2 8') == '3'\nassert solution('2 2 -1') == '0'\nassert solution('2 2 -5') == '1'\nassert solution('2 2 -18') == '4'\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''1 2 -18''') == '0\\n1 31 337 967'\nassert solution('''3 2 8''') == '3\\n10 2008 13726'\nassert solution('''2 2 -1''') == '0\\n1 31 337 967'\nassert solution('''3 2 -17''') == '2'\nassert solution('''1 2 -100000''') == '0\\n1 31 337 967'\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('3 2 8') == '3'\nassert solution('1 2 -18') == '0'\nassert solution('2 2 -1') == '4'\nassert solution('2 1 -2') == '0'\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('3 2 8') == '3'\nassert solution('1 2 -18') == '0'\nassert solution('2 2 -1') == '4'\nassert solution('2 3 -2') == '1'\nassert solution('4 4 -2') == '2'\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('3 2 8') == '3\\n10 2008 13726'\nassert solution('1 2 -18') == '0\\n'\nassert solution('2 2 -1') == '4\\n1 31 337 967'\nassert solution('-1 2 -18') == '0\\n'\nassert solution('-1 2 -18 1') == '1\\n1 31 337 967'\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''3 2 8''') == '3'\nassert solution('''1 2 -18''') == '0'\nassert solution('''2 2 -1''') == '4'\n\n'''"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''3 2 8''') == '''3\n10 2008 13726 \n'''\nassert solution('''1 2 -18''') == '''0\n1 31 337 967\n'''\nassert solution('''2 2 -1''') == '''4\n1 31 337 967\n1 1 331 13725\n1 1 335 13727\n1 1 337 13726\n1 1 337 13725\n1 1 337 13727\n'''\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"1 2 -18\") == \"3\\n10 2008 13726\\n\"\nassert solution(\"2 2 -1\") == \"0\\n1 31 337 967\\n\"\nassert solution(\"2 2 -2\") == \"0\\n1 31 337 962\\n\"\nassert solution(\"2 2 -3\") == \"0\\n1 31 337 959\\n\"\nassert solution(\"2 2 -4\") == \"0\\n1 31 337 958\\n\"\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('2 5 4 6 1 3 6 2 5 5 1 2 3 5 3 1 1 2 4 6 6 4 3 4') == 'YES'\nassert solution('5 3 5 3 2 5 2 5 6 2 6 2 4 4 4 4 1 1 1 1 6 3 6 3') == 'YES'\nassert solution('5 3 5 3 2 5 2 5 6 2 6 2 4 4 4 4 1 1 1 1 6 3 6 3') == 'YES'\nassert solution('5 3 5 3 2 5 2 5 6 2 6 2 4 4 4 4 1 1 1 1 6 3 6 3') == 'YES'\nassert solution('5 3 5 3 2 5 2 5 6 2 6 2 4 4 4 4 1 1 1 1 6 3 6 3') == 'YES'\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('5 4 6 1 3 6 2 5 5 1 2 3 5 3 1 1 2 4 6 6 4 3 4') == 'NO'\nassert solution('2 5 4 6 1 3 6 2 5 5 1 2 3 5 3 1 1 2 4 6 6 4 3 4') == 'YES'\nassert solution('2 1 3 5 3 7 2 2 3 2 2 1 3 3 3 1 1 4 5 5 1 1 4 4 2 2 1 1 3 3 1 1 4 4 4 1 4 2 4 1 3 3 4 4 1 1 1 2 1 4 1 3 4 1 1 1 3 3 4 4 1 1 1 3 3 4 1 1 1 1 1 2 3 1 1 1 1 2 2 4 2 1 3 4 1 1 1 4 2 1 1 1 2 1 4 1 3 1 1 2 1 1 2 2 4 1 1 1 1 1 2 1 1 1 1 3 1 1 1 1 4 1 1 1 3 1 1 2 1 1 4 1 1 1 2 1 1 2 1 4 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1 1 4 1 1 1 1 3 1 1 1"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''2 5 4 6 1 3 6 2 5 5 1 2 3 5 3 1 1 2 4 6 6 4 3 4''') == 'NO'\nassert solution('''5 3 5 3 2 5 2 5 6 2 6 2 4 4 4 4 1 1 1 1 6 3 6 3''') == 'YES'\n'''\n) == 'NO', \"My code: \" + mycode\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1 2 3 4 5 6') == 'NO'\nassert solution('2 5 4 6 1 3 6 2 5 5 1 2 3 5 3 1 1 2 4 6 6 4 3 4') == 'YES'\nassert solution('5 3 5 3 2 5 2 5 6 2 6 2 4 4 4 4 1 1 1 1 6 3 6 3') == 'YES'\nassert solution('5 3 5 3 2 5 2 5 6 2 6 2 4 4 4 4 1 1 1 1 6 3 6 3') == 'NO'\nassert solution('1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1') == 'YES'\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\n\"\"\"2 5 4 6 1 3 6 2 5 5 1 2 3 5 3 1 1 2 4 6 6 4 3 4\"\"\"\n) == 'YES'\nassert solution(\n\"\"\"5 3 5 3 2 5 2 5 6 2 6 2 4 4 4 4 1 1 1 1 6 3 6 3\"\"\"\n) == 'YES'\n\n\n\"\"\"\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('2 5 4 6 1 3 6 2 5 5 1 2 3 5 3 1 1 2 4 6 6 4 3 4') == 'NO'\nassert solution('5 3 5 3 2 5 2 5 6 2 6 2 4 4 4 4 1 1 1 1 6 3 6 3') == 'YES'\nassert solution('5 3 5 3 2 5 2 5 6 2 6 2 4 4 4 4 1 1 1 1 6 3 6 3') == 'NO'\nassert solution('5 3 5 3 2 5 2 5 6 2 6 2 4 4 4 4 1 1 1 1 6 3 6 3') == 'NO'\nassert solution('5 3 5 3 2 5 2 5 6 2 6 2 4 4 4 4 1 1 1 1 6 3 6 3') == 'NO'\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('2 5 4 6 1 3 6 2 5 5 1 2 3 5 3 1 1 2 4 6 6 4 3 4') == 'NO'\nassert solution('5 3 5 3 2 5 2 5 6 2 6 2 4 4 4 4 1 1 1 1 6 3 6 3') == 'YES'\n'''\n\n\nimport sys\nfrom collections import Counter"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('2 5 4 6 1 3 6 2 5 5 1 2 3 5 3 1 1 2 4 6 6 4 3 4') == 'NO'\nassert solution('5 3 5 3 2 5 2 5 6 2 6 2 4 4 4 4 1 1 1 1 6 3 6 3') == 'YES'\nassert solution('5 3 5 3 2 5 2 5 6 2 6 2 4 4 4 4 1 1 1 1 6 3 6 3') == 'YES'\nassert solution('5 3 5 3 2 5 2 5 6 2 6 2 4 4 4 4 1 1 1 1 6 3 6 3') == 'YES'\nassert solution('5 3 5 3 2 5 2 5 6 2 6 2 4 4 4 4 1 1 1 1 6 3 6 3') == 'YES'\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('239 10880 9889') == '0'\nassert solution('26 7258 6123') == '2'\nassert solution('493 8000 8000') == '0'\nassert solution('329 19913 19900') == '8'\nassert solution('101 6800 6500') == '0'\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"239 10880 9889\") == \"0\"\nassert solution(\"26 7258 6123\") == \"2\"\nassert solution(\"493 8000 8000\") == \"24\"\nassert solution(\"101 6800 6500\") == \"0\"\nassert solution(\"329 19913 19900\") == \"8\"\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('26 7258 6123') == '0'\nassert solution('26 8944 8889') == '2'\nassert solution('27 3575 9045') == '0'\nassert solution('27 4997 6661') == '24'\nassert solution('27 4987 6673') == '24'\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('239 10880 9889') == '0'\nassert solution('26 7258 6123') == '2'\nassert solution('493 8000 8000') == '24'\nassert solution('101 6800 6500') == '0'\nassert solution('329 19913 19900') == '8'\n\n\n\"\"\"\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''239 10880 9889''') == '0'\nassert solution('''26 7258 6123''') == '2'\nassert solution('''493 8000 8000''') == '0'\nassert solution('''101 6800 6500''') == '0'\nassert solution('''329 19913 19900''') == '8'\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''239 10880 9889''') == '0'\nassert solution('''26 7258 6123''') == '2'\nassert solution('''493 8000 8000''') == '0'\nassert solution('''101 6800 6500''') == '24'\nassert solution('''329 19913 19900''') == '8'\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''239 10880 9889''') == '0'\nassert solution('''26 7258 6123''') == '2'\nassert solution('''493 8000 8000''') == '0'\nassert solution('''329 19913 19900''') == '8'\nassert solution('''101 6800 6500''') == '0'\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('239 10880 9889') == '0'\nassert solution('26 7258 6123') == '2'\nassert solution('493 8000 8000') == '0'\nassert solution('329 19913 19900') == '8'\nassert solution('101 6800 6500') == '0'\n\n\n\"\"\""
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"26 7258 6123\") == \"0\"\nassert solution(\"26 7258 6123 9889\") == \"0\"\nassert solution(\"26 7258 6123 9888\") == \"1\"\nassert solution(\"26 7258 6123 9889 9888\") == \"2\"\nassert solution(\"26 7258 6123 9889 9888 9888\") == \"3\"\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"239 10880 9889\") == \"0\"\nassert solution(\"26 7258 6123\") == \"2\"\nassert solution(\"493 8000 8000\") == \"0\"\nassert solution(\"329 19913 19900\") == \"8\"\nassert solution(\"101 6800 6500\") == \"0\"\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''3\n2\n3\n5\n''') == '3'\n\nassert solution('''1\n2\n3\n5\n''') == '0'\n\nassert solution('''2\n2\n3\n5\n''') == '0'\n\nassert solution('''1\n2\n2\n5\n''') == '3'\n\nassert solution('''2\n1\n2\n5\n''') == '3'"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''3\n2\n3\n1''') == '3'\nassert solution('''1\n2\n3\n5''') == '0'\n\n'''\nTest case 1\nInput\n3\n2\n3\n1\n\nOutput\n3\n\nExpected\n3\n\nTest case 2\nInput\n1\n2\n3\n5\n\nOutput\n0\n\nExpected\n0\n'''\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"3\\n2\\n3\\n5\") == \"3\"\nassert solution(\"1\\n2\\n3\\n5\") == \"0\"\nassert solution(\"2\\n2\\n3\\n5\") == \"0\"\nassert solution(\"2\\n2\\n2\\n5\") == \"0\"\nassert solution(\"2\\n2\\n3\\n5\") == \"3\"\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('3\\n2\\n3\\n1') == '3'\nassert solution('1\\n2\\n3\\n5') == '0'\nassert solution('3\\n2\\n3\\n5') == '0'\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdin.strip()\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"3\\n2\\n3\\n1\") == \"3\"\nassert solution(\"1\\n2\\n3\\n5\") == \"0\"\nassert solution(\"3\\n2\\n3\\n5\") == \"3\"\nassert solution(\"3\\n2\\n3\\n5\") == \"3\"\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"2\") == \"2\"\nassert solution(\"1\") == \"0\"\nassert solution(\"3\\n2\\n1\") == \"0\"\nassert solution(\"1\\n2\\n3\") == \"0\"\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1\\n1\\n1\\n1') == 0\nassert solution('1\\n2\\n3\\n5') == 1\nassert solution('2\\n1\\n3\\n5') == 1\nassert solution('2\\n1\\n3\\n1') == 1\nassert solution('1\\n2\\n3\\n5') == 2\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"7 1 4\") == \"6\"\nassert solution(\"30 20 10\") == \"20\"\n\"\"\"\n\n\nfrom math import sqrt\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('7 1 4') == '6'\nassert solution('30 20 10') == '20'"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"7 1 4\") == \"6\"\nassert solution(\"30 20 10\") == \"20\"\nassert solution(\"10 15 22\") == \"15\"\nassert solution(\"13 29 30\") == \"29\"\nassert solution(\"5 10 9\") == \"8\"\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == expected\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"7 1 4\") == \"6\"\nassert solution(\"30 20 10\") == \"20\"\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('7 1 4') == '6'\nassert solution('30 20 10') == '20'\nassert solution('14 44 16') == '22'\nassert solution('30 50 60') == '60'\nassert solution('8 4 8') == '0'\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('7 1 4\\n') == '6'\nassert solution('30 20 10\\n') == '20'\nassert solution('5 6 7\\n') == '6'\nassert solution('5 6 7\\n') == '6'\nassert solution('5 6 7\\n') == '6'\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"1 2 3\") == \"6\"\nassert solution(\"7 1 4\") == \"6\"\nassert solution(\"30 20 10\") == \"20\"\nassert solution(\"1 1 1\") == \"0\"\nassert solution(\"30 20 10\") == \"20\""
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(input_stream) == output_stream\n\n\"\"\"\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(input) == output\n\n\"\"\"\n\nN, X = map(int, stdin.readline().split())\nA = list(map(int, stdin.readline().split()))"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(input('')) == output('')\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''4 3\n1 2 3 7\n''') == '1'\nassert solution('''2 228\n1 1\n''') == '0'\nassert solution('''3 7\n1 2 3\n''') == '-1'\nassert solution('''5 7\n1 2 3 4 5 6\n''') == '-1'\nassert solution('''100 9\n
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == ''\n\n\"\"\""
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''2 228\n1 1\n''') == '0'\nassert solution('''3 7\n1 2 3\n''') == '-1'\nassert solution('''4 7\n1 2 3 4\n''') == '0'\nassert solution('''4 7\n1 2 3 4\n''') == '-1'\nassert solution('''7 100\n1 2 3 4 5 6 7\n''') == '1'\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''\\\n4 3\n1 2 3 7\n''') == '1'\n\nassert solution('''\\\n2 228\n1 1\n''') == '0'\n\nassert solution('''\\\n3 7\n1 2 3\n''') == '-1'\n\nassert solution('''\\\n5 2\n1 2 3 4 5\n''') == '1'\n\nassert solution('''\\\n6 2\n1 2 3 4 5 6\n''') == '0'"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1 2 3\\n1 1') == '1'\nassert solution('2 228\\n1 1') == '0'\nassert solution('3 7\\n1 2 3') == '-1'\nassert solution('3 7\\n1 1') == '-1'\nassert solution('2 0\\n1 1') == '0'\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1 2 3 4') == '-1'\nassert solution('1 1') == '0'\nassert solution('1 2 3 4') == '1'\nassert solution('2 228') == '0'\nassert solution('1 1') == '0'\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1 2 3') == '1'\nassert solution('2 228') == '0'\nassert solution('3 7') == '-1'\nassert solution('1 2 3') == '1'\nassert solution('2 1') == '0'\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('5 6\\n..**..\\n.*...*.\\n..**..\\n..**..\\n') == 'YES'\nassert solution('3 5\\n..*..\\n****.\\n..*...\\n..*...\\n') == 'NO'\nassert solution('7 7\\n.......\\n...*...\\n..****.\\n...*...\\n.......\\n.*.....\\n') == 'NO'\nassert solution('5 6\\n..**..\\n.*...*.\\n..**..\\n..**..\\n') == 'NO'\nassert solution('3 7\\n.*...*.\\n.*...*.\\n.*...*.\\n.*...*.\\n.*...*.\\n.*...*.\\n') == 'NO'\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('3 2\\n..\\n**') == 'NO'\nassert solution('3 3\\n....\\n....\\n....\\n....\\n....\\n....\\n....') == 'YES'\nassert solution('7 7\\n.***.\\n.***.\\n..****\\n...***\\n...***\\n.***.\\n.***.\\n') == 'NO'\nassert solution('5 6\\n......\\n..*...\\n.****.\\n..*...\\n..*...\\n') == 'NO'\nassert solution('3 7\\n.*...*.\\n***.***\\n.*...*.\\n.*...*.\\n.*...*.\\n') == 'NO'\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"5 6\") == \"YES\"\nassert solution(\"3 7\") == \"NO\"\nassert solution(\"5 6\") == \"YES\"\nassert solution(\"3 7\") == \"NO\"\nassert solution(\"5 10\") == \"NO\"\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('6 6\\n.......\\n..*....\\n...*.**.\\n..*....\\n..*....\\n') == 'YES'\nassert solution('5 6\\n.*.**.*\\n.*.*.*\\n.*.*.*\\n.*.*.*\\n.*.*.*') == 'NO'\nassert solution('7 7\\n.....\\n.*..*.\\n.*.*.*\\n.*.*.*\\n.*.*.*\\n.*.*.*') == 'NO'\nassert solution('7 7\\n.....\\n.**.*.\\n.*.*.*\\n.*.*.*\\n.*.*.*\\n.*.*.*') == 'NO'\nassert solution('7 7\\n.....\\n..**..\\n.*.*.*\\n.*.*.*\\n.*.*.*\\n.*.*.*') == 'NO'\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''5 6\n..**..\n..**..\n******\n..**..\n..**..''') == 'NO'\nassert solution('''3 7\n.*...*.\n***.***\n.*...*.\n\n''') == 'NO'\nassert solution('''5 10\n..........\n..*.......\n.*.******.\n..*.......\n..........\n\n''') == 'NO'\nassert solution('''7 7\n.......\n.*.....\n..****.\n...*...\n....*..\n..*....\n.*...*.\n\n''') == 'NO'\nassert solution('''7 7\n.***...\n...*...\n..**...\n.*...*.\n..*....\n..*....\n.*...*.\n\n''') == 'YES'\n'''\n'''\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('5 7') == 'NO'\nassert solution('3 7') == 'NO'\nassert solution('5 6') == 'YES'\nassert solution('7 7') == 'YES'\nassert solution('5 10') == 'NO'\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"5 6\\n......\\n..*...\\n.****.\\n..*...\\n..*...\\n\") == \"YES\"\nassert solution(\"7 7\\n.......\\n...*...\\n..****.\\n...*...\\n...*...\\n.......\\n.*.....\\n\") == \"NO\"\nassert solution(\"5 6\\n..**..\\n******.\\n..*...\\n........\\n........\\n........\\n........\\n\") == \"NO\"\nassert solution(\"3 7\\n.*...*.\\n***.***\\n.*...*.\\n\") == \"NO\"\nassert solution(\"5 10\\n..........\\n..*.......\\n.*.******.\\n..*.......\\n..........\\n..........\\n..........\\n\") == \"NO\"\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(input()) == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('3 5\\n..*..\\n.*...\\n') == 'YES'\nassert solution('3 7\\n.*...*.\\n.*...*.\\n') == 'NO'\nassert solution('5 7\\n....*.\\n....*.\\n....*.\\n....*.\\n....*.\\n....*.\\n') == 'NO'\n\n\n\n-----What is the runtime of your solution?-----\n\nWhen you think about it, the time complexity of the given solution is really fast.\n\nWhen the given input is large, say, 1000\u00d71000, the runtime would be very short.\n\nThere are some potential optimizations to further improve the runtime, but you can do it.\n\"\"\"\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('') == 'NO'\nassert solution('1') == 'NO'\nassert solution('2 1') == 'NO'\nassert solution('4 3') == 'NO'\nassert solution('4 4') == 'NO'\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"3 1 2\") == \"YES\"\nassert solution(\"3 3 3\") == \"NO\"\nassert solution(\"3 3 1\") == \"NO\"\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"3 1 2\") == \"YES\\n001\\n001\\n110\"\nassert solution(\"3 3 3\") == \"NO\"\nassert solution(\"4 1 2\") == \"NO\"\nassert solution(\"3 1 3\") == \"NO\"\nassert solution(\"10 10 10\") == \"NO\"\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"3 1 2\") == \"YES\"\nassert solution(\"3 3 3\") == \"NO\"\nassert solution(\"1 2 2\") == \"NO\"\nassert solution(\"1 3 3\") == \"YES\"\nassert solution(\"1 4 4\") == \"YES\"\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('3 1 2') == 'YES'\nassert solution('3 3 3') == 'NO'\nassert solution('3 1 3') == 'NO'\nassert solution('3 1 3') == 'NO'\nassert solution('3 1 3') == 'NO'\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('3 1 2') == 'YES\\n001\\n001\\n110'\nassert solution('3 3 3') == 'NO'\nassert solution('3 3 1') == 'YES\\n001\\n001\\n110'\nassert solution('3 3 1') == 'NO'\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"3 1 2\") == \"YES\"\nassert solution(\"3 3 3\") == \"NO\"\nassert solution(\"3 1 2\") == \"YES\"\nassert solution(\"3 3 3\") == \"NO\""
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"3 1 2\") == \"NO\"\nassert solution(\"3 3 3\") == \"NO\"\nassert solution(\"3 1 2\") == \"NO\"\nassert solution(\"3 3 3\") == \"NO\"\nassert solution(\"3 3 3\") == \"NO\"\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(input(\"\")) == \"NO\"\nassert solution(input(\"3 1 2\\n\")) == \"YES\"\nassert solution(input(\"3 3 3\\n\")) == \"NO\"\nassert solution(input(\"3 3 3\\n3 1 2\\n3 2 1\\n3 1 3\\n\")) == \"NO\"\nassert solution(input(\"3 3 3\\n3 1 2\\n3 2 1\\n3 1 3\\n1 2 3\\n\")) == \"YES\"\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('3 3 3') == 'NO'\nassert solution('3 2 1') == 'NO'\nassert solution('2 3 1') == 'YES'\nassert solution('1 1 1') == 'YES'\nassert solution('2 2 1') == 'NO'\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"\"\"3 1 2\"\"\") == \"YES\"\nassert solution(\"\"\"3 3 3\"\"\") == \"NO\"\nassert solution(\"\"\"4 2 2\"\"\") == \"NO\"\nassert solution(\"\"\"5 2 3\"\"\") == \"YES\"\nassert solution(\"\"\"5 3 3\"\"\") == \"YES\"\n"
    },
    {
        "number": 466,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1 10\\n7 2\\n1') == '2'\nassert solution('2 2\\n2 1\\n2') == '0'\nassert solution('2 2\\n2 1\\n2') == '0'\nassert solution('3 2\\n2 1\\n2') == '3'\nassert solution('3 2\\n2 1\\n2') == '0'\n"
    },
    {
        "number": 466,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\n'''1 10\n7 2\n1\n''') == '2'\nassert solution(\n'''2 2\n2 1\n2\n''') == '0'\nassert solution(\n'''2 2\n2 1\n1\n''') == '0'\nassert solution(\n'''1 10\n7 2\n1\n''') == '2'\nassert solution(\n'''2 2\n2 1\n1\n''') == '0'\n"
    },
    {
        "number": 466,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1 10\\n7 2\\n1') == '2'\nassert solution('2 2\\n2 1\\n2') == '0'\nassert solution('3 1\\n2 1\\n1') == '1'\nassert solution('4 3\\n1 1\\n1') == '0'\nassert solution('2 2\\n2 1\\n2') == '0'\n"
    },
    {
        "number": 466,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"1 10\") == \"2\"\nassert solution(\"2 2\") == \"0\"\nassert solution(\"1 10\") == \"2\""
    },
    {
        "number": 466,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1 10\\n7 2\\n1') == '2'\nassert solution('1 10\\n7 2\\n1') == '0'\nassert solution('2 2\\n2 1\\n2') == '0'\nassert solution('2 2\\n2 1\\n2') == '0'\nassert solution('2 2\\n2 1\\n2') == '0'\n"
    },
    {
        "number": 466,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''1 10\n7 2\n1''') == '2'\nassert solution('''2 2\n2 1\n2''') == '0'\nassert solution('''5 5\n5 1\n5''') == '5'\n\nassert solution('''3 3\n3 2\n3''') == '0'\nassert solution('''4 2\n4 1\n4''') == '2'\n"
    },
    {
        "number": 466,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''1 10\n7 2\n1\n''') == '2'\nassert solution('''2 2\n2 1\n2\n''') == '0'\n"
    },
    {
        "number": 466,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''1 10\n7 2\n1''') == '2'\n\nassert solution('''1 10\n7 2\n2''') == '0'\n\nassert solution('''2 2\n2 1\n2''') == '0'\n\nassert solution('''3 2\n3 1\n3''') == '3'\n\nassert solution('''4 2\n3 1\n3''') == '0'"
    },
    {
        "number": 466,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1 10\\n7 2\\n1') == '2'\nassert solution('2 2\\n2 1\\n2') == '0'\n"
    },
    {
        "number": 466,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(input) == input\nassert solution(input) == input\n\n\"\"\"\n"
    },
    {
        "number": 467,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('ABCDEFGHIJKLMNOPQRSTUVWXYZ') == 'YXWVUTGHIJKLM'\nassert solution('BUVTYZFQSNRIWOXXGJLKACPEMDH') == 'ZABCDEFSRQPON'"
    },
    {
        "number": 467,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('ABCDEFGHIJKLMNOPQRSTUVWXYZ') == 'YXWVUTGHIJKLM'\nassert solution('BUVTYZFQSNRIWOXXGJLKACPEMDH') == 'ZABCDEFSRQPON'\nassert solution('CEDGHKOPQQQYZQFVWFZSURPFTUQQVVFQSSQQSQQVQQWVVFVQVQVQQZSVSVVSVVSVVSVQWVQWVQVQVQVQQFQQVQVQVQQWVQWVQVQQWVQQZVQQZVQQQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQFQQVQQ"
    },
    {
        "number": 467,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(input()) == input()\n\n\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 467,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZ') == 'YXWVUTGHIJKLM'\nassert solution(\n    'BUVTYZFQSNRIWOXXGJLKACPEMDH') == 'ZABCDEFSRQPON'\nassert solution(\n    'BNLJHZSKWYFXRBTFNUQSYYCYZWNMVJ') == 'IMPOSSIBLE'\n\n\n\n'''\n"
    },
    {
        "number": 467,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(INPUT) == OUTPUT\n"
    },
    {
        "number": 467,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('') == 'Impossible'\nassert solution('ABCDEFGHIJKLMNOPQRSGTUVWXYZ') == 'YXWVUTGHIJKLM'\nassert solution('BUVTYZFQSNRIWOXXGJLKACPEMDH') == 'ZABCDEFSRQPON'\n\n\"\"\"\n"
    },
    {
        "number": 467,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('ABCDEFGHIJKLMNOPQRSGTUVWXYZ') == 'YXWVUTGHIJKLM'\nassert solution('BUVTYZFQSNRIWOXXGJLKACPEMDH') == 'ZABCDEFSRQPON'\nassert solution('XWXE') == 'Impossible'\n\n\n\"\"\"\n"
    },
    {
        "number": 467,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"ABCDEFGHIJKLMNOPQRSGTUVWXYZ\") == \"YXWVUTGHIJKLM\"\nassert solution(\"BUVTYZFQSNRIWOXXGJLKACPEMDH\") == \"ZABCDEFSRQPON\"\nassert solution(\"APPLE\") == \"Impossible\"\nassert solution(\"APPLEP\") == \"Impossible\"\nassert solution(\"APPLEPU\") == \"Impossible\"\n"
    },
    {
        "number": 467,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(input()) == input()"
    },
    {
        "number": 467,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('ABCDEFGHIJKLMNOPQRSTUVWXYZ') == 'YXWVUTGHIJKLM'\nassert solution('BUVTYZFQSNRIWOXXGJLKACPEMDH') == 'ZABCDEFSRQPON'\nassert solution('ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEF"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == \">\"\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('5 8') == '>'\nassert solution('10 3') == '<'\nassert solution('6 6') == '='\nassert solution('1000 1001') == '>'\nassert solution('0 1') == '<'\n\n\n\"\"\""
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1 1') == '=', 'The first example'\nassert solution('10 9') == '<', 'The second example'\nassert solution('1 100') == '>', 'The third example'\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1 2') == '<'\nassert solution('2 1') == '>'\nassert solution('1 1') == '='\nassert solution('5 8') == '>'\nassert solution('10 3') == '<'\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('5 8') == '>'\nassert solution('10 3') == '<'\nassert solution('6 6') == '='\nassert solution('10 9') == '<'\nassert solution('10 10') == '='\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('5 8') == '>'\nassert solution('10 3') == '<'\nassert solution('6 6') == '='\nassert solution('10000000 1') == '='\nassert solution('1000 1') == '<'\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('5 8') == '>'\nassert solution('10 3') == '<'\nassert solution('6 6') == '='"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('5 8') == '<'\nassert solution('10 3') == '>'\nassert solution('6 6') == '='\n\n'''\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('5 8') == '<'\nassert solution('10 3') == '>'\nassert solution('6 6') == '='\nassert solution('7 3') == '<'\nassert solution('7 4') == '>'\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('5 8') == '<'\nassert solution('10 3') == '>'\nassert solution('6 6') == '='\n"
    },
    {
        "number": 469,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 469,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == expected\nprint(solution(stdin))\n"
    },
    {
        "number": 469,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1 1') == '3'\nassert solution('1 2') == '5'\nassert solution('2 1') == '2'\nassert solution('2 10') == '14'\nassert solution('3 10') == '17'\n"
    },
    {
        "number": 469,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == expected"
    },
    {
        "number": 469,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1 1') == '3'\nassert solution('1 2') == '5'\nassert solution('2 1') == '2'\nassert solution('1 10^9') == '1'\nassert solution('10^9 1') == '1'\n"
    },
    {
        "number": 469,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1 1') == '3'\nassert solution('1 2') == '5'\nassert solution('2 1') == '2'\nassert solution('2 3') == '4'\nassert solution('2 10') == '14'\n"
    },
    {
        "number": 469,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 469,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1 1') == '3'\nassert solution('1 2') == '5'\nassert solution('2 1') == '2'\nassert solution('2 10') == '19'\nassert solution('10 1') == '19'\n"
    },
    {
        "number": 469,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1 1') == '3'\nassert solution('2 1') == '5'\nassert solution('1 2') == '2'\nassert solution('5 5') == '10'\nassert solution('2 4') == '6'\n"
    },
    {
        "number": 469,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1 1') == '3'\nassert solution('1 2') == '5'\nassert solution('2 1') == '2'\nassert solution('4 2') == '5'\nassert solution('3 2') == '6'\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == \"\"\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('7 3 7 3 20') == '26'\nassert solution('7 9 3 1 8') == '28'\nassert solution('10 10 10 10 10') == '20'\n\n\n\"\"\"\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('7 3 7 3 20') == '26'\nassert solution('7 9 3 1 8') == '28'\nassert solution('10 10 10 10 10') == '20'\nassert solution('7 9 3 1 8 10') == '28'\nassert solution('7 9 3 1 8 10 10') == '20'\n\n\n\"\"\"\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('7 3 7 3 20') == '26'\nassert solution('7 9 3 1 8') == '28'\nassert solution('10 10 10 10 10') == '20'\nassert solution('7 3 7 3') == '34'\nassert solution('9 9 9 9 9') == '34'\n\n\n\n\"\"\"\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"7 3 7 3 20\") == \"26\"\nassert solution(\"7 9 3 1 8\") == \"28\"\nassert solution(\"10 10 10 10 10\") == \"20\"\nprint(solution(input()))\n\"\"\"\n\"\"\"\nidea:\n1. sort the array and then store in a hashmap\n2. for each number, check if it's already seen, if not seen, add it to hashmap\n3. for each number, find the next one (if it's in hashmap, add it to the res and remove it from hashmap)\n4. return res\n\"\"\""
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == ''\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('7 3 7 3 20') == '26'\nassert solution('7 9 3 1 8') == '28'\nassert solution('10 10 10 10 10') == '20'\nassert solution('7 9 7 3 1 8') == '28'\nassert solution('10 10 10 10 10') == '20'\n\n'''"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"7 3 7 3 20\") == \"26\"\nassert solution(\"7 9 3 1 8\") == \"28\"\nassert solution(\"10 10 10 10 10\") == \"20\"\nassert solution(\"7 3 7 3 9\") == \"28\"\nassert solution(\"10 10 10 10 10\") == \"20\"\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"7 3 7 3 20\") == \"26\"\nassert solution(\"7 9 3 1 8\") == \"28\"\nassert solution(\"10 10 10 10 10\") == \"20\"\nprint(\"The testing is done.\")\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('7 3 7 3 20') == '26'\nassert solution('7 9 3 1 8') == '28'\nassert solution('10 10 10 10 10') == '20'\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('4 2') == '2'\nassert solution('5 0') == '0'\nassert solution('0 0 1000 0 0') == '0'\nassert solution('0 0 1000 0 0') == '0'\nassert solution('5 0') == '0'\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('4 0') == '0'\nassert solution('1 0') == '0'\nassert solution('2 0') == '0'\nassert solution('2 2') == '0'\nassert solution('2 4') == '2'\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1 10\\n1 7 12') == '7'\nassert solution('2 0\\n11 -10') == '10'\nassert solution('5 0\\n0 0 1000 0 0') == '0'\nassert solution('0 0\\n0 0') == '0'\nassert solution('1 0\\n0 0') == '0'\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1 10\\n1 7 12') == '7'\nassert solution('2 0\\n11 -10') == '10'\nassert solution('5 0\\n0 0 1000 0 0') == '0'"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('3 10\\n1 7 12\\n') == '7'\nassert solution('2 0\\n11 -10\\n') == '10'\nassert solution('5 0\\n0 0 1000 0 0\\n') == '0'\nassert solution('3 0\\n10 9 8\\n') == '10'\nassert solution('1 0\\n0 0\\n') == '0'\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(input('')) == ''\n'''\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('4 1') == '1'\nassert solution('6 2') == '3'\nassert solution('5 3') == '2'\nassert solution('4 0') == '0'\nassert solution('6 3 -1') == '1'\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1\\n7\\n12') == '7'\nassert solution('0\\n11\\n-10') == '10'\nassert solution('5\\n0\\n0\\n0\\n0') == '0'\nassert solution('0\\n0\\n1000\\n0\\n0') == '0'\nassert solution('2\\n0\\n11\\n-10') == '10'\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('3 10\\n1 7 12\\n') == '7'\nassert solution('2 0\\n11 -10\\n') == '10'\nassert solution('5 0\\n0 0 1000 0 0\\n') == '0'\nassert solution('0 0\\n1 1\\n') == '1'"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('2') == '1'\nassert solution('110') == '10'\nassert solution('4') == '-1'\nassert solution('-10') == '-1'\nassert solution('5') == '2'\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"\n2\n\"\"\") == \"1\"\n\nassert solution(\n\"\"\"\n110\n\"\"\") == \"10\"\n\nassert solution(\n\"\"\"\n4\n\"\"\") == \"-1\""
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''2''') == '1'\nassert solution('''110''') == '10'\nassert solution('''4''') == '-1'\nassert solution('''-2''') == '-1'\nassert solution('''10''') == '-1'\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"110\") == \"10\"\nassert solution(\"4\") == \"-1\"\nassert solution(\"\") == \"-1\"\nassert solution(\"2\") == \"1\"\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(2) == 1\nassert solution(110) == 10\nassert solution(4) == -1\nassert solution(10**100) == 10**100\n\n\n\"\"\""
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('2') == '1'\nassert solution('110') == '10'\nassert solution('4') == '-1'\n\n\n-----Best Practice-----\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"110\") == \"10\"\nassert solution(\"4\") == \"-1\"\nassert solution(\"\") == \"-1\"\n\"\"\"\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('2') == '1'\nassert solution('110') == '10'\nassert solution('4') == '-1'\n\n\n-----Test cases-----\n\n## Test case 1\nInput:\n2\n\nOutput:\n1\n\n## Test case 2\nInput:\n110\n\nOutput:\n10\n\n## Test case 3\nInput:\n4\n\nOutput:\n-1\n\n\n\n\n\"\"\"\n\nfrom math import ceil, sqrt\n\nn = int(input())\n\nfor _ in range(n):\n    x = ceil(sqrt(n))\n    s = sum(int(i) for i in str(x))\n    if x**2 + s*x - n == 0:\n        print(x)\n        break\nelse:\n    print(-1)\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''2''') == '1'\nassert solution('''110''') == '10'\nassert solution('''4''') == '-1'\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '1'\nassert solution('4') == '1'\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('05:50') == '00:06'\nassert solution('05:44') == '00:06'\nassert solution('00:00') == '23:00'\nassert solution('00:01') == '23:00'\nassert solution('00:00') == '00:01'\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdin\nprint(solution(stdin))\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"04:45\",\"05:00\") == \"00:56\"\nassert solution(\"00:00\",\"01:00\") == \"23:00\"\nassert solution(\"00:01\",\"00:00\") == \"00:01\"\nassert solution(\"00:00\",\"00:00\") == \"00:00\"\nassert solution(\"00:00\",\"01:00\") == \"00:00\"\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('05:50') == '00:06'\nassert solution('05:44') == '00:06'\nassert solution('00:00') == '23:00'\nassert solution('00:01') == '23:00'\nassert solution('00:02') == '23:01'\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"05:50\") == \"00:06\"\nassert solution(\"05:44\") == \"00:06\"\nassert solution(\"00:00\") == \"23:00\"\nassert solution(\"00:01\") == \"00:01\"\nassert solution(\"00:01\") == \"00:01\"\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"\n\"05:50\"\n\"05:44\"\n\"\"\") == \"00:06\"\n\nassert solution(\n\"\"\"\n\"00:00\"\n\"01:00\"\n\"\"\") == \"23:00\"\n\nassert solution(\n\"\"\"\n\"00:01\"\n\"00:00\"\n\"\"\") == \"00:01\"\n\nassert solution(\n\"\"\"\n\"00:00\"\n\"00:01\"\n\"\"\") == \"23:00\"\n\nassert solution(\n\"\"\"\n\"00:00\"\n\"01:01\"\n\"\"\") == \"23:01\""
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('00:00') == '23:00'\nassert solution('00:00') == '23:00'\nassert solution('00:01') == '00:01'\nassert solution('00:01') == '00:01'\nassert solution('05:50') == '00:06'\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('00:00') == '00:00'\nassert solution('05:00') == '05:00'\nassert solution('05:50') == '00:06'\nassert solution('06:00') == '23:00'\nassert solution('00:01') == '00:01'"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('00:00', '01:00') == '23:00'\nassert solution('00:01', '00:00') == '00:01'\nassert solution('00:01', '00:00') == '00:01'\nassert solution('00:01', '01:00') == '23:00'\nassert solution('00:01', '01:00') == '23:00'\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"05:50\") == \"00:06\"\nassert solution(\"05:44\") == \"00:06\"\nassert solution(\"00:00\") == \"23:00\"\nassert solution(\"00:01\") == \"00:01\"\nassert solution(\"00:06\") == \"00:06\"\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1\\n1\\n2') == 2\nassert solution('2\\n1') == 0\nassert solution('2\\n1 2') == 1\nassert solution('2\\n1 2 3') == 2\nassert solution('2\\n1 2 3 4') == 3\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('5\\n6 1 6 6 0') == '2'\n\"\"\"\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == 2\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == '1'\n\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('6 1 6 6 0') == 2\nassert solution('8 3 4 3 4 6') == 3\nassert solution('0 1 1 1 1 1') == 0\nassert solution('10 1 100 100 10') == 2\nassert solution('0 0 0 0 0 0') == 0\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''5\n6 1 6 6 0''') == '2'\nassert solution('''5\n6 1 6 6 0''') == '2'\nassert solution('''7\n0 1 2 3 4 5 6 7''') == '3'\nassert solution('''8\n0 1 2 3 4 5 6 7 8''') == '2'\nassert solution('''9\n0 1 2 3 4 5 6 7 8 9''') == '3'\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('6 1 6 6 0') == 2\nassert solution('5 1 2 1 1 1') == 5\nassert solution('5 1 2 3 4 1') == 4\nassert solution('5 1 2 3 4 0') == 4\nassert solution('2 2 3 3 4 4') == 3\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''\n5\n6 1 6 6 0\n''') == 2\nassert solution('''\n7\n1 1 1 1 1 1 1\n''') == 1\nassert solution('''\n4\n1 1 1 1\n''') == 1\nassert solution('''\n3\n1 1 1\n''') == 0\nassert solution('''\n1\n5\n1 1 1 1 1\n''') == 1\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1\\n1') == '1'\nassert solution('2\\n2\\n2\\n2\\n2') == '3'\nassert solution('1\\n1\\n1') == '1'\nassert solution('5\\n6 1 6 6 0') == '2'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10') == '4'\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('5\\n6 1 6 6 0') == '2'\nassert solution('10\\n
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"3 3 0\") == \"3\"\nassert solution(\"3 2 1\") == \"4\"\nassert solution(\"3 2 2\") == \"6\"\nassert solution(\"3 2 1\") == \"4\"\nassert solution(\"3 1 0\") == \"1\"\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == expected\nprint(solution(stdin))\n\"\"\""
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('3 2 1') == '4'\nassert solution('3 2 0') == '3'\nassert solution('3 3 0') == '4'\nassert solution('3 3 1') == '4'\nassert solution('3 3 2') == '8'\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == '4'\n\n\"\"\""
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"3 2 1\") == 3\n\nassert solution(\"3 1 2\") == 0\nassert solution(\"3 3 0\") == 1\nassert solution(\"3 2 1\") == 3\nassert solution(\"3 1 2\") == 4\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == \"12\"\n'''\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''3 2 1''') == '3'\nassert solution('''3 2 1''') == '3'\nassert solution('''3 2 2''') == '4'\nassert solution('''3 2 2''') == '4'\nassert solution('''3 2 2''') == '4'\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"3 2 0\") == \"3\"\nassert solution(\"3 2 1\") == \"4\"\nassert solution(\"3 2 2\") == \"4\"\nassert solution(\"3 2 3\") == \"6\"\nassert solution(\"3 2 4\") == \"7\"\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n\nfrom typing import Tuple\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"114114\") == \"YES\"\nassert solution(\"1111\") == \"YES\"\nassert solution(\"441231\") == \"NO\"\n\nassert solution(\"44114\") == \"NO\"\nassert solution(\"343434343434\") == \"NO\"\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"114114\") == \"YES\"\nassert solution(\"1111\") == \"YES\"\nassert solution(\"441231\") == \"NO\"\n\nprint(\"All tests passed successfully!\")"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(input()) == output\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('114114') == 'YES'\nassert solution('1111') == 'YES'\nassert solution('441231') == 'NO'\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"114114\") == \"YES\"\nassert solution(\"1111\") == \"YES\"\nassert solution(\"441231\") == \"NO\""
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('114114') == \"YES\"\nassert solution('1111') == \"YES\"\nassert solution('441231') == \"NO\""
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('441231') == \"NO\"\nassert solution('44411') == \"NO\"\nassert solution('114114') == \"YES\"\nassert solution('1111') == \"YES\""
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('111414') == 'YES'\nassert solution('11') == 'YES'\nassert solution('14') == 'NO'\nassert solution('144') == 'YES'\nassert solution('1411') == 'NO'\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(114114) == \"YES\"\nassert solution(1111) == \"YES\"\nassert solution(441231) == \"NO\"\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''5 7 1 3 2 2''') == '2'\nassert solution('''5 5 2 3 1 1''') == 'Poor Inna and pony!'\n'''"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('5 7 1 3 2 2\\n') == '2\\n'\nassert solution('5 5 2 3 1 1\\n') == 'Poor Inna and pony!\\n'\nassert solution('5 5 2 3 1 1\\n') == 'Poor Inna and pony!\\n'\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"5 7 1 3 2 2\") == \"2\"\nassert solution(\"5 5 2 3 1 1\") == \"Poor Inna and pony!\"\n\n\"\"\"\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('5 7 1 3 2 2') == '2'\nassert solution('5 5 2 3 1 1') == 'Poor Inna and pony!'\n\"\"\""
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(input()) == ''\nassert solution(input()) == ''"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(input()) == ''\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"5 7 1 3 2 2\\n\") == \"2\\n\"\nassert solution(\"5 5 2 3 1 1\\n\") == \"Poor Inna and pony!\\n\"\nassert solution(\"1 1 1 1 1 1\\n\") == \"1\\n\"\n\n\n\"\"\"\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('5 7 1 3 2 2') == '2'\nassert solution('5 5 2 3 1 1') == 'Poor Inna and pony!'\nassert solution('4 6 2 1 1 1') == 'Poor Inna and pony!'\n\n\n\n[Python 3] eval('1 + 2')\nOut[1]: 3\neval('1 + 2')\nOut[2]: 3\n\n[Python 3] eval('1 + 2')(3)\nOut[3]: 4\neval('1 + 2')(3)\nOut[4]: 4\n\n[Python 3] eval('1 + 2')(3)()\nOut[5]: 4\neval('1 + 2')(3)()\nOut[6]: 4\n\n[Python 3] eval('1 + 2')(3)()(5)\nOut[7]: 6\neval('1 + 2')(3)()(5)\nOut[8]: 6\n\n[Python 3] eval('1 + 2')(3)()(5)()(7)\nOut[9]: 8\neval('1 + 2')(3)()(5)()(7)\nOut[10]: 8\n\n\"\"\"\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''5 7 1 3 2 2''') == '2'\nassert solution('''5 5 2 3 1 1''') == 'Poor Inna and pony!'\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('5 7 1 3 2 2') == '2'\nassert solution('5 5 2 3 1 1') == 'Poor Inna and pony!'\nassert solution('5 5 2 3 1 4') == 'Poor Inna and pony!'\nassert solution('5 5 2 3 1 5') == 'Poor Inna and pony!'\nassert solution('5 5 2 3 1 6') == 'Poor Inna and pony!'\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"bbba\") == 3\nassert solution(\"bacab\") == 4\nassert solution(\"baaba\") == 2\nassert solution(\"abbbbb\") == 5\nassert solution(\"aaaa\") == 0\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('bacabcab') == 4\nassert solution('bcda') == 3\nassert solution('abbbbb') == 5\nassert solution('abbbbba') == 5\nassert solution('abcdefgh') == 0\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(input()) == output\n\n\"\"\"\n\nfrom typing import Tuple\nfrom itertools import groupby"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('') == 0\nassert solution('bbb') == 1\nassert solution('b') == 0\nassert solution('bb') == 1\nassert solution('babab') == 2\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('') == 0\nassert solution('a') == 1\nassert solution('aa') == 0\nassert solution('ab') == 1\nassert solution('ba') == 1\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == expected\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"bacabcab\") == 4\nassert solution(\"bcda\") == 3\nassert solution(\"abbbbb\") == 5\nassert solution(\"aaaaa\") == 1\nassert solution(\"abababa\") == 3\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('bacabcab') == 4\nassert solution('bcda') == 3\nassert solution('abbbbb') == 5\nassert solution('abc') == 3\nassert solution('abbbab') == 4\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('bacabcab') == '4'\nassert solution('bcda') == '3'\nassert solution('abbbbb') == '5'\nassert solution('aaaaa') == '0'\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('bacabcab') == 4\nassert solution('bcda') == 3\nassert solution('abbbbb') == 5\nassert solution('abbb') == 1\nassert solution('a') == 0\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''6 20\n10 50 100 500 1000 5000\n8\n4200\n100000\n95000\n96000\n99000\n10100\n2015\n9950''') == '6\\n20\\n19\\n20\\n-1\\n3\\n-1\\n-1'\nprint('Passed')\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == '6\\n20\\n19\\n20\\n-1\\n3\\n-1\\n-1'\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('6 20\\n10 50 100 500 1000 5000\\n8\\n4200\\n100000\\n95000\\n96000\\n99000\\n10100\\n2015\\n9950\\n') == '6\\n20\\n19\\n20\\n-1\\n3\\n-1\\n-1\\n'\nassert solution('6 2\\n1 2 3 5 8\\n8\\n1\\n3\\n5\\n7\\n9\\n11\\n13\\n15\\n') == '1\\n1\\n1\\n2\\n2\\n2\\n2\\n-1\\n'\nassert solution('6 2\\n1 2 3 5 8\\n8\\n1\\n3\\n5\\n7\\n9\\n11\\n13\\n15\\n') == '1\\n1\\n1\\n2\\n2\\n2\\n2\\n-1\\n'\nassert solution('6 2\\n1 2 3 5 8\\n8\\n1\\n3\\n5\\n7\\n9\\n11\\n13\\n15\\n') == '1\\n1\\n1\\n2\\n2\\n2\\n2\\n-1\\n'\nassert solution('6 2\\n1 2 3 5 8\\n8\\n1\\n3\\n5\\n7\\n9\\n11\\n13\\n15\\n') == '1\\n1\\n1\\n2\\n2\\n2\\n2\\n-1\\n'\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''6 20\n10 50 100 500 1000 5000\n8\n4200\n100000\n95000\n96000\n99000\n10100\n2015\n9950''') == '6\\n20\\n19\\n20\\n-1\\n3\\n-1\\n-1\\n2\\n2\\n2\\n2'\nprint('Test    Ok')\n\nassert solution('''5 2\n1 2 3 5 8\n8\n1\n3\n5\n7\n9\n11\n13\n15\n''') == '1\\n1\\n1\\n2\\n2\\n2\\n2'\nprint('Test    Ok')\n\nassert solution('''6 19\n10 50 100 500 1000 5000\n8\n1\n5\n3\n7\n9\n11\n13\n15\n''') == '6\\n19\\n18\\n17\\n16\\n15\\n14'\nprint('Test    Ok')\n\nassert solution('''5 2\n1 2 3 5 8\n8\n1\n3\n5\n7\n9\n11\n13\n15\n''') == '6\\n1\\n1\\n1\\n2\\n2\\n2\\n2'\nprint('Test    Ok')\n\nassert solution('''5 19\n10 50 100 500 1000 5000\n8\n1\n3\n5\n7\n9\n11\n13\n15\n''') == '6\\n19\\n18\\n17\\n16\\n15\\n14'\nprint('Test    Ok')"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('6 20\\n10 50 100 500 1000 5000\\n8\\n4200\\n100000\\n95000\\n96000\\n99000\\n10100\\n2015\\n9950') == '6\\n20\\n19\\n20\\n-1\\n3\\n-1\\n-1'"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''6 20\n10 50 100 500 1000 5000\n8\n4200\n100000\n95000\n96000\n99000\n10100\n2015\n9950''') == '6\\n20\\n19\\n20\\n-1\\n3\\n-1\\n-1'\nassert solution('''5 2\n1 2 3 5 8\n8\n1\n3\n5\n7\n9\n11\n13\n15''') == '1\\n1\\n1\\n2\\n2\\n2\\n2\\n-1'\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"1 2 3 5 8\\n8\\n1\") == \"6\"\nassert solution(\"5 2\\n1 2 3 5 8\\n8\\n1\\n3\\n5\\n7\\n9\\n11\\n13\\n15\\n\") == \"-1\"\nassert solution(\"6 4\\n1 2 3 5 6 7 8 9 10\\n11 12 13 14 15 16 17 18 19\\n2 3 4 5\\n6 7 8 9\\n10 11 12 13 14 15\\n16 17 18 19\\n5 6\\n1 2 3 4 5 6\\n7 8 9 10\\n\") == \"2\"\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''6 20\n10 50 100 500 1000 5000\n8\n4200\n100000\n95000\n96000\n99000\n10100\n2015\n9950''') == '6\\n20\\n19\\n20\\n-1\\n3\\n-1\\n-1'\n\nassert solution('''6 2\n1 2 3 5 8\n8\n1\n3\n5\n7\n9\n11\n13\n15''') == '1\\n1\\n1\\n2\\n2\\n2\\n2\\n2'\n\nassert solution('''1 2 3 4 5\n2\n1\n2\n3\n4\n5\n1\n2\n3\n4\n5''') == '3\\n-1\\n-1\\n-1\\n-1\\n-1'\n\nassert solution('''6 2\n1 2 3 4 5 6\n7\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n276\n277\n278\n279\n280\n281\n282\n283\n284\n285\n286\n287\n288\n289\n290\n291\n292\n293\n294\n295\n296\n297\n298\n299\n300\n301\n302\n303\n304\n305\n306\n307\n308\n309\n310\n311\n312\n313\n314\n315\n316\n317\n318\n319\n320\n321\n322\n323\n324\n325\n326\n327\n328\n329\n330\n331\n332\n333\n334\n335\n336\n337\n338\n339\n340\n341\n342\n343\n344\n345\n346\n347\n348\n349\n350\n351\n352\n353\n354\n355\n356\n357\n358\n359\n360\n361\n362\n363\n364\n365\n366\n367\n368\n369\n370\n371\n372\n373\n374\n375\n376\n377\n378\n379\n380\n381\n382\n383\n384\n385\n386\n387\n388\n389\n390\n391\n392\n393\n394\n395\n396\n397\n398\n399\n400\n401\n402\n403\n404\n405\n406\n407\n408\n409\n410\n411\n412\n413\n414\n415\n416\n417\n418\n419\n420\n421\n422\n423\n424\n425\n426\n427\n428\n429\n430\n431\n432\n433\n434\n435\n436\n437\n438\n439\n440\n441\n442\n443\n444\n445\n446\n447\n448\n449\n450\n451\n452\n453\n454\n455\n456\n457\n458\n459\n460\n461\n462\n463\n464\n465\n466\n467\n468\n469\n470\n471\n472\n473\n474\n475\n476\n477\n478\n479\n480\n481\n482\n483\n484\n485\n486\n487\n488\n489\n490\n491\n492\n493\n494\n495\n496\n497\n498\n499\n500\n501\n502\n503\n504\n505\n506\n507\n508\n509\n510\n511\n512\n513\n514\n515\n516\n517\n518\n519\n520\n521\n522\n523\n524\n525\n526\n527\n528\n529\n530\n531\n532\n533\n534\n535\n536\n537\n538\n539\n540\n541\n542\n543\n544\n545\n546\n547\n548\n549\n550\n551\n552\n553\n554\n555\n556\n557\n558\n559\n560\n561\n562\n563\n564\n565\n566\n567\n568\n569\n570\n571\n572\n573\n574\n575\n576\n577\n578\n579\n580\n581\n582\n583\n584\n585\n586\n587\n588\n589\n590\n591\n592\n593\n594\n595\n596\n597\n598\n599\n600\n601\n602\n603\n604\n605\n606\n607\n608\n609\n610\n611\n612\n613\n614\n615\n616\n617\n618\n619\n620"
    },
    {
        "number": 480,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1"
    },
    {
        "number": 480,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"1 3 4\") == \"8\"\nassert solution(\"4 2 4\") == \"8\"\nassert solution(\"5 4 0\") == \"7\"\nassert solution(\"5 5 5\") == \"0\"\nassert solution(\"5 5 5\") == \"0\"\n"
    },
    {
        "number": 480,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(input) == answer\n\"\"\"\n\ns, x_1, x_2 = map(int, stdin.split())\nt_1, t_2 = map(int, stdin.split())\np, d = map(int, stdin.split())\n\nprint((x_2 - x_1) * t_2 + (s - x_1) * t_1 + (d * (s - x_2) - d * (s - x_1)) // 2)\n"
    },
    {
        "number": 480,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"0 2 0\\n1 2\\n2 2\") == \"4\"\nassert solution(\"4 2 4\\n3 4\\n1 1\\n\") == \"8\"\nassert solution(\"5 4 0\\n1 2\\n3 1\\n\") == \"7\"\nassert solution(\"5 4 0\\n1 2\\n3 1\\n\") == \"7\"\nassert solution(\"5 4 0\\n1 2\\n3 1\\n\") == \"7\"\n"
    },
    {
        "number": 480,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''4 2 4\n3 4\n1 1\n''') == '8'\n\nassert solution('''5 4 0\n1 2\n3 1\n''') == '7'\n'''\n"
    },
    {
        "number": 480,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\n"
    },
    {
        "number": 480,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''4 2 4''') == '8'\nassert solution('''5 4 0''') == '7'\nassert solution('''1 2''') == '1'\nassert solution('''1 1''') == '1'\nassert solution('''0 1''') == '1'\n"
    },
    {
        "number": 480,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout"
    },
    {
        "number": 480,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == '7'\n'''\n"
    },
    {
        "number": 480,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == '7'\nassert solution(stdin) == '7'\n\n'''\n"
    },
    {
        "number": 481,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('10 5') == '2'\nassert solution('6 12') == '4'\nassert solution('5 13') == '0'\n'''\n"
    },
    {
        "number": 481,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == ''\n'''"
    },
    {
        "number": 481,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('10 5') == '2'\nassert solution('6 12') == '4'\nassert solution('5 13') == '0'\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 481,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('0') == ''\nassert solution('1') == '1'\nassert solution('11') == '1'\nassert solution('00') == '0'\n"
    },
    {
        "number": 481,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(input()) == output\n\"\"\"\nimport sys\n\nn, x = [int(x) for x in sys.stdin.readline().split()]\nfor i in range(1, n + 1):\n    if i * i > x:\n        break\n    if x % i == 0:\n        print(i + x // i - 1)\n    else:\n        print(x // i)\n"
    },
    {
        "number": 481,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == expected\nprint(solution(stdin))\n\"\"\"\n"
    },
    {
        "number": 481,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == expected\nprint_solution(expected)\n\"\"\""
    },
    {
        "number": 481,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(input()) == str(expected)\n\n'''\n\nN, X = map(int, stdin.split())"
    },
    {
        "number": 481,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"10 5\") == \"2\"\nassert solution(\"6 12\") == \"4\"\nassert solution(\"5 13\") == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 481,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('2 1\\n1 2\\n2 1') == 2\nassert solution('3 1\\n1 3\\n2 3\\n3 1') == 3\nassert solution('4 2\\n1 4\\n2 4\\n3 4\\n4 2') == 1\nassert solution('5 5\\n5 5\\n5 5\\n5 5\\n5 5') == 5\nassert solution('2 3\\n1 2\\n2 3\\n3 1\\n1 2\\n2 3') == 0\n"
    },
    {
        "number": 482,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('4 3\\n') == 'java'\nassert solution('6 6\\n') == 'python'\nassert solution('5 2\\n') == 'phphp'\n'''\n\nfrom string import ascii_lowercase as L\nfrom collections import Counter, defaultdict"
    },
    {
        "number": 482,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1') == 'a'\nassert solution('2') == 'ab'\nassert solution('3') == 'abc'\nassert solution('4') == 'abcd'\n"
    },
    {
        "number": 482,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == expected\n\"\"\"\n"
    },
    {
        "number": 482,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(input()) == ''\n\nassert solution(input()) == ''\n\nassert solution(input()) == ''\n\nassert solution(input()) == ''\n\nassert solution(input()) == ''"
    },
    {
        "number": 482,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == 'python'\nassert solution(stdin) == 'java'\nassert solution(stdin) == 'phphp'\n\n\n\"\"\"\n"
    },
    {
        "number": 482,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''4 3''') == 'java'\nassert solution('''6 6''') == 'python'\nassert solution('''5 2''') == 'phphp'\n\n'''\n\nfrom sys import stdin, stdout"
    },
    {
        "number": 482,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"3 2\") == 'java'\nassert solution(\"5 2\") == 'python'\nassert solution(\"6 6\") == 'phphp'\n\n\"\"\""
    },
    {
        "number": 482,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''4 3''') == 'java'\nassert solution('''6 6''') == 'python'\nassert solution('''5 2''') == 'phphp'"
    },
    {
        "number": 482,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('6 6') == 'phphp'\nassert solution('6 4') == 'java'\nassert solution('6 5') == 'python'\nassert solution('6 6') == 'phphp'\n\n\n-----\n\nimport sys\nimport math"
    },
    {
        "number": 482,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''4 3\n''') == 'java'\n\nassert solution('''6 6\n''') == 'python'\n\nassert solution('''5 2\n''') == 'phphp'\n"
    },
    {
        "number": 483,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdin\nassert solution(stdin) == stdin\n\n\n\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 483,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\n'''4\nRLRL\n2 4 6 10''') == '1'\n\nassert solution(\n'''3\nLLR\n40 50 60''') == '-1'\nassert solution(\n'''2\nLLR\n40 50''') == '-1'\n'''\n\nassert solution(\n'''10\nRRRLLLLLRRRRRRRLLLLRLLLRRRRRLLLRRRRRLLRLLRRRRRRRRRLLLLLLLLLLLLLLLRRRRRRRRRRRRRRRRLLLLLLLLLLLLLLLLLLRRLLLLRRLLRRLRRRRRRRRRRRRRRRRRRLLLLLLLLRRLLRRLLLLLLLLLRLRLLRRRRLRRLRRRLLRRRRRLLRRLRRLRRLLRRLLLRRLLRRRLRRRRRLLRRRRRLLLRLRRRRRLLRRRRRLLLLRRRRRLLRRLRRRRRLLLLLLRLRLLLLRRRRLLLRLRLLRRRRLLLRLRRRRRRLLRRRRRRRLLRRRRRRLRRRRRRRLRRLLLRLRRLLRRLRRRRRRRRRRRRRRLLLLLLRRLLRRLLRRRRRLLRRRRRRLLRRRRRRLRRRRRRRLRRLLLRLRRRRLRRLLRRRRRRLRRRRRLRRLLRRRRRRLRRRRRRLLLLLLRRRRRRLLRRRRRRRRLRRRRRRRLRRLLRRRRRRLLRRRRRRRRLRRRRRRRRLRRRRRRRLRRRRRRRLRRRRRRRRRLRRRRRRRLRRRRRRRLLLLRRRRRRLLRRRRRRRRLRRRRRRRLRRRRRRRLRRRRRRRLLRRRRRRLRRRRRRRRLLLLRRRRRRRLRRRRRRRLRRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRLLRRRRRRRRLLRRRRRRRRLRRRRRRRLRRRRRRRLLRRRRRRRLRRRRRRRRLRRRRRRRRRLRRRRRRRLLRRRRRRRLRRRRRRRRRLRRRRRRRRLRRRRRRRLLRRRRRRRRLLRRRRRRRLRRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRLLRRRRRRRLRRRRRRRRRRLRRRRRRRRLRRRRRRRLRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRLLRRRRRRRLRRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRLLRRRRRRRLRRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRLRRRRRRRRL"
    },
    {
        "number": 483,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"4\\nRLRL\\n2 4 6 10\\n\") == \"1\\n\"\nassert solution(\"3\\nLLR\\n40 50 60\\n\") == \"-1\\n\"\nassert solution(\"3\\nLLR\\n10 40 50\\n\") == \"0\\n\"\nassert solution(\"3\\nLLR\\n10 20 30\\n\") == \"1\\n\"\nassert solution(\"3\\nLLR\\n10 30 30\\n\") == \"0\\n\"\n"
    },
    {
        "number": 483,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('') == None\nassert solution('4\\nRLRL\\n2 4 6 10\\n') == 1\nassert solution('3\\nLLR\\n40 50 60\\n') == -1\nassert solution('2\\nRLRL\\n2 4 6 10\\n') == 1\nassert solution('1\\nLLR\\n40 50 60\\n') == -1\n"
    },
    {
        "number": 483,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('4\\nRLRL\\n2 4 6 10\\n') == '1\\n'\nassert solution('3\\nLLR\\n40 50 60\\n') == '-1\\n'\nassert solution('5\\nRLRL\\n2 4 6 10 12 14 16\\n') == '2\\n'\nassert solution('5\\nRLRL\\n2 4 6 10 12 14 16\\n') == '2\\n'\n\n\n-----"
    },
    {
        "number": 483,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('RLRL\\n2 4 6 10\\n') == '1'\nassert solution('LLR\\n40 50 60\\n') == '-1'\nassert solution('LLR\\n40 50 60\\n') == '-1'\nassert solution('LLR\\n50 50 60\\n') == '-1'\nassert solution('LLR\\n50 50 60\\n') == '-1'\n"
    },
    {
        "number": 483,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('4\\nRLRL\\n2 4 6 10\\n') == '1'\nassert solution('3\\nLLR\\n40 50 60\\n') == '-1'\nassert solution('3\\nLLR\\n10 20 30\\n') == '-1'\nassert solution('4\\nRRRLL\\n1 2 3 4\\n') == '-1'\nassert solution('5\\nRLLRRLL\\n1 2 3 4 5\\n') == '-1'\n"
    },
    {
        "number": 483,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('4\\nRLRL\\n2 4 6 10') == '1\\n'\nassert solution('3\\nLLR\\n40 50 60') == '-1\\n'\nassert solution('3\\nRLR\\n40 50 60') == '-1\\n'\nassert solution('3\\nRLR\\n40 50 60') == '-1\\n'\nassert solution('3\\nLLR\\n40 50 60') == '1\\n'\n"
    },
    {
        "number": 483,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('4\\nRLRL\\n2 4 6 10\\n') == '1'\nassert solution('3\\nLLR\\n40 50 60\\n') == '-1'\nassert solution('3\\nLLR\\n50 50 50\\n') == '-1'\nassert solution('3\\nLLR\\n50 50 50\\n') == '-1'\nassert solution('3\\nLLR\\n50 50 50\\n') == '-1'\n"
    },
    {
        "number": 483,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"3\\nLLR\\n40 50 60\\n\") == \"-1\"\nassert solution(\"5\\nRLRL\\n2 4 6 10\\n\") == \"1\"\nassert solution(\"5\\nRLRL\\n2 4 6 10\\n\") == \"-1\"\nassert solution(\"5\\nLLR\\n10 9 8 7 6 5\\n\") == \"1\"\nassert solution(\"5\\nLLR\\n10 9 8 7 6 5\\n\") == \"2\"\n"
    },
    {
        "number": 484,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"2 2 2\") == \"4\"\nassert solution(\"4 10 9\") == \"56\"\nassert solution(\"10 10 10\") == \"0\"\nassert solution(\"5 10 9\") == \"0\"\nassert solution(\"2 3 1\") == \"0\"\n"
    },
    {
        "number": 484,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('2 2 2') == '4'\nassert solution('1 2') == '0'\nassert solution('2 1') == '0'\nassert solution('4 10 9') == '56'\nassert solution('3 10 10') == '0'\n"
    },
    {
        "number": 484,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"1\\n2\\n3\\n4\") == \"4\"\nassert solution(\"2\\n3\\n4\\n5\") == \"0\"\nassert solution(\"3\\n4\\n5\\n6\") == \"9\"\nassert solution(\"4\\n5\\n6\\n7\") == \"16\"\nassert solution(\"8\\n9\\n10\\n11\") == \"56\"\n"
    },
    {
        "number": 484,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"2 2 2\") == \"4\"\nassert solution(\"3 10 10\") == \"0\"\nassert solution(\"6 6\") == \"56\"\nassert solution(\"1 1 1\") == \"0\"\nassert solution(\"10 9 8\") == \"56\"\n\n\"\"\"\n\nn, a, b = map(int, stdin.readline().split())\n\nareas = []\n\nfor i in range(n):\n    x, y = map(int, stdin.readline().split())\n    areas.append((x * y, x, y))\n\nareas.sort()\n\na = areas[0][1] * areas[0][2]\nb = areas[0][1] * areas[n - 1][2]\n\nfor i in range(1, n):\n    x = areas[i][1] * areas[i][2]\n    a, b = max(a, b), max(x, b)\n\nprint(max(a, b))"
    },
    {
        "number": 484,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"2 2 2\") == \"4\"\nassert solution(\"1 2\\n2 1\") == \"4\"\nassert solution(\"2 10 9\") == \"56\"\nassert solution(\"4 10 9\\n2 3\\n1 1\\n5 10\") == \"56\"\nassert solution(\"3 10 10\\n6 6\\n7 7\\n20 5\") == \"0\"\n"
    },
    {
        "number": 484,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''2 2 2''') == '4'\nassert solution('''1 2''') == '0'\nassert solution('''2 1''') == '0'\nassert solution('''4 10 9''') == '56'\nassert solution('''3 10 10''') == '0'\n"
    },
    {
        "number": 484,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''2 2 2''') == '4'\nassert solution('''1 2\n2 1''') == '4'\nassert solution('''2 10 9''') == '56'\nassert solution('''4 10 9''') == '0'\nassert solution('''3 10 10''') == '0'\n"
    },
    {
        "number": 484,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''2 2 2\n1 2\n2 1''') == '4'\nassert solution('''4 10 9\n2 3\n1 1\n5 10\n9 11''') == '56'\nassert solution('''3 10 10\n6 6\n7 7\n20 5''') == '0'\nassert solution('''5 10 10\n3 4\n6 5\n7 8\n8 7\n9 10''') == '56'\nassert solution('''10 10 10\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1''') == '56'\n"
    },
    {
        "number": 484,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''2 2 2''') == '4'\nassert solution('''1 2\n2 1''') == '4'\nassert solution('''2 10 9''') == '56'\nassert solution('''4 10 9\n2 3\n1 1\n5 10\n9 11''') == '56'\nassert solution('''3 10 10\n6 6\n7 7\n20 5''') == '0'"
    },
    {
        "number": 484,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"2 2 2\") == \"4\"\nassert solution(\"4 10 9\") == \"56\"\nassert solution(\"3 10 10\") == \"0\"\nassert solution(\"2 1\") == \"2\"\nassert solution(\"1 2\") == \"0\"\n"
    },
    {
        "number": 485,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('2') == \"0 1\"\nassert solution('3') == \"0 2\"\nassert solution('4') == \"1 2\"\nassert solution('5') == \"1 0\"\nassert solution('6') == \"1 1\"\n"
    },
    {
        "number": 485,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('0 0') == '1 1'\nassert solution('0 1') == '0 2'\nassert solution('0 2') == '1 0'\nassert solution('1 0') == '1 1'\nassert solution('1 1') == '1 2'\n"
    },
    {
        "number": 485,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('') == None\nassert solution('2') == None\nassert solution('2\\n0 0\\n0 1\\n0 2\\n0 3') == None\nassert solution('2\\n0 0\\n0 1\\n0 2\\n0 3') == None\nassert solution('1\\n1 1') == None\n"
    },
    {
        "number": 485,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"0 0\") == \"0 1\"\nassert solution(\"0 1\") == \"0 2\"\nassert solution(\"0 2\") == \"1 2\"\nassert solution(\"1 1\") == \"1 2\"\n"
    },
    {
        "number": 485,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"2\\n0 0\\n0 1\\n0 2\\n1 0\\n1 1\\n1 2\\n2 0\\n2 1\\n2 2\") == \"1 1\"\nassert solution(\"2\\n0 0\\n0 1\\n0 2\\n1 0\\n1 1\\n1 2\\n2 0\\n2 1\\n2 2\") == \"0 2\""
    },
    {
        "number": 485,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"0 1\"\nassert solution(\"2\") == \"0 3\"\nassert solution(\"2\") == \"1 1\"\nassert solution(\"3\") == \"0 1\"\nassert solution(\"3\") == \"0 2\"\n"
    },
    {
        "number": 485,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"1 1\"\nassert solution(\"3\") == \"0 2\"\nassert solution(\"10\") == \"0 0\"\n\"\"\""
    },
    {
        "number": 485,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''2\n0 0\n0 1\n0 2\n1 0\n1 1\n1 2\n2 0\n2 1\n2 2''') == '1 1'\nassert solution('''2\n0 0\n0 1\n0 2\n0 3\n1 0\n1 2\n2 0\n2 1\n2 2''') == '0 3'\nassert solution('''4\n0 0\n0 1\n0 2\n0 3\n1 0\n1 1\n1 2\n1 3\n2 0\n2 1\n2 2\n2 3\n2 4\n3 0\n3 1\n3 2\n3 3\n3 4\n3 5\n4 0\n4 1\n4 2\n4 3\n4 4\n4 5\n5 0\n5 1\n5 2\n5 3\n5 4\n5 5''') == '5 3'\nassert solution('''4\n0 0\n0 1\n0 2\n0 3\n1 0\n1 2\n1 3\n2 0\n2 2\n2 3\n3 0\n3 1\n3 2\n3 3''') == '1 1'\nassert solution('''3\n0 0\n0 1\n0 2\n0 3\n1 0\n1 1\n1 2\n1 3\n2 0\n2 1\n2 2\n2 3\n3 0\n3 1\n3 2\n3 3''') == '0 1'\n"
    },
    {
        "number": 485,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('2') == '1 1'\nassert solution('1') == '0 0'\nassert solution('2') == '0 2'\nassert solution('2') == '1 1'\nassert solution('2') == '0 1'\n"
    },
    {
        "number": 485,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(input('')) == output('')\n'''\n"
    },
    {
        "number": 486,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('390') == '216'\nassert solution('7') == '7'\nassert solution('999999999') == '387420489'\nassert solution('5') == '1'\nassert solution('101') == '101'\n"
    },
    {
        "number": 486,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''390''') == '216'\nassert solution('''7''') == '7'\nassert solution('''1000000000''') == '387420489'\n'''"
    },
    {
        "number": 486,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('390') == '216'\nassert solution('7') == '7'\nassert solution('9999999999') == '387420489'"
    },
    {
        "number": 486,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('390') == '216'\nassert solution('7') == '7'\nassert solution('99999') == '387420489'\nassert solution('1000000000') == '387420489'\n\n\"\"\"\n"
    },
    {
        "number": 486,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1000000000') == '387420489'\nassert solution('3') == '3'\nassert solution('3000000000') == '3'\n"
    },
    {
        "number": 486,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"390\") == \"216\"\nassert solution(\"7\") == \"7\"\nassert solution(\"999999999\") == \"387420489\"\nprint(\"All set!\")\n"
    },
    {
        "number": 486,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''390''') == '216'\nassert solution('''7''') == '7'\nassert solution('''1000000000''') == '387420489'\n"
    },
    {
        "number": 486,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('390') == '216'\nassert solution('7') == '7'\nassert solution('1000000000') == '387420489'\n\"\"\"\n\nfrom math import prod\n\nn = int(input())"
    },
    {
        "number": 486,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('390') == '216'\nassert solution('7') == '7'\nassert solution('999999999') == '387420489'\n"
    },
    {
        "number": 486,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('390') == '216'\nassert solution('7') == '7'\nassert solution('1000000000') == '387420489'\n\n\n\"\"\"\n"
    },
    {
        "number": 487,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1\\n1\\n') == '1'\nassert solution('2\\n2\\n') == '2'\nassert solution('3\\n3\\n') == '3'\nassert solution('4\\n4\\n') == '4'\nassert solution('5\\n5\\n') == '5'\n"
    },
    {
        "number": 487,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('1 1 1 5 1') == '5'\nassert solution('2 2 3 2 2') == '5'\nassert solution('5') == '5'\nassert solution('1 1 1 5 1') == '5'\nassert solution('2 2 3 2 2') == '5'\n"
    },
    {
        "number": 487,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\n\"\"\""
    },
    {
        "number": 487,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1\\n1') == '1'\nassert solution('5\\n1 1 1 5 1') == '5'\nassert solution('5\\n2 2 3 2 2') == '5'\nassert solution('2\\n2') == '2'\nassert solution('3\\n2 2 3') == '2'\n"
    },
    {
        "number": 487,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('5\\n1 1 1 5 1\\n') == '5'\nassert solution('5\\n2 2 3 2 2\\n') == '5'\nassert solution('5\\n1 1 2 2 2\\n') == '4'\nassert solution('5\\n1 1 1 1 1\\n') == '4'\nassert solution('5\\n1 1 1 1 1\\n') == '4'\n"
    },
    {
        "number": 487,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('3\\n1 2 3') == '3'\nassert solution('5\\n1 1 1 5 1') == '5'\nassert solution('5\\n2 2 3 2 2') == '5'\nassert solution('5\\n11 1 1 1 5 1') == '5'\nassert solution('5\\n2 2 3 2 2') == '5'\n"
    },
    {
        "number": 487,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"\n5\n1 1 1 5 1\n\"\"\") == \"5\"\n\nassert solution(\n\"\"\"\n5\n2 2 3 2 2\n\"\"\") == \"5\"\n\nassert solution(\n\"\"\"\n10\n4 4 4 4 4 4 4 4 4 4 4\n\"\"\") == \"5\"\n\nassert solution(\n\"\"\"\n10\n4 4 4 4 4 4 4 4 4 4\n\"\"\") == \"10\"\n\nassert solution(\n\"\"\"\n10\n4 4 4 4 4 4 4 4 4 4\n\"\"\") == \"5\""
    },
    {
        "number": 487,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\n    '''5\n1 1 1 5 1'''\n) == '5'\nassert solution(\n    '''5\n2 2 3 2 2'''\n) == '5'\nassert solution(\n    '''5\n1 1 1 5 1'''\n) == '5'\nassert solution(\n    '''5\n1 1 1 5 1'''\n) == '5'\nassert solution(\n    '''5\n2 2 3 2 2'''\n) == '5'\n"
    },
    {
        "number": 487,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''\\\n5\n1 1 1 5 1\n''') == '5'\nassert solution('''\\\n5\n2 2 3 2 2\n''') == '5'\nassert solution('''\\\n5\n1 2 3 1 4\n''') == '5'\nassert solution('''\\\n5\n1 2 1 3 4\n''') == '5'\nassert solution('''\\\n5\n1 2 1 3 4\n''') == '5'\n"
    },
    {
        "number": 487,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"1\\n1\\n1\\n1\\n1\") == \"1\"\nassert solution(\"1\\n1\\n1\\n1\\n1\") == \"1\"\nassert solution(\"5\\n1 1 1 5 1\") == \"5\"\nassert solution(\"5\\n2 2 3 2 2\") == \"5\"\nassert solution(\"3\\n1 2 1\") == \"2\"\n"
    },
    {
        "number": 488,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('aabb') == '2'\nassert solution('aabcaa') == '1'\n\n\"\"\"\n"
    },
    {
        "number": 488,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('aabb') == '2'\nassert solution('aabcaa') == '1'\nassert solution('a') == '0'\nassert solution('ab') == '0'\nassert solution('abc') == '0'\n"
    },
    {
        "number": 488,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('aabcaa') == \"1\"\nassert solution('aabcaaa') == \"2\"\nassert solution('aabcaabb') == \"1\"\nassert solution('aabcaabcaa') == \"2\"\nassert solution('aabcaabcaaa') == \"2\"\n"
    },
    {
        "number": 488,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\n'''\naabcaa'''\n) == '1'\n\nassert solution(\n'''\naabb\n'''\n) == '2'\n\n\nassert solution(\n'''\naaaaaa\n'''\n) == '0'\n\nassert solution(\n'''\naaaaaabbaa\n'''\n) == '2'\n\nassert solution(\n'''\naaaaaabbaaa\n'''\n) == '1'"
    },
    {
        "number": 488,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('aabb') == '2'\nassert solution('aabcaa') == '1'\nassert solution('aaabcaa') == '1'\nassert solution('aabbcc') == '1'\nassert solution('ababcc') == '2'\n"
    },
    {
        "number": 488,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('aabb') == \"2\"\nassert solution('aabcaa') == \"1\"\n\"\"\"\n"
    },
    {
        "number": 488,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('aabb') == 2\nassert solution('aabcaa') == 1\nassert solution('baa') == 0\nassert solution('ba') == 0\nassert solution('b') == 0\n"
    },
    {
        "number": 488,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('aabb') == 2\nassert solution('aabcaa') == 1"
    },
    {
        "number": 488,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('aabb') == '2'\nassert solution('aabcaa') == '1'\n\n\"\"\""
    },
    {
        "number": 488,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(input()) == output\n"
    },
    {
        "number": 489,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('5\\n1 3 2 3 4') == '2'\nassert solution('1\\n1 3 2 3 4') == '1'\nassert solution('2\\n1 3 2 3 4') == '0'\nassert solution('3\\n1 3 2 3 4') == '1'\nassert solution('4\\n1 3 2 3 4') == '0'\n"
    },
    {
        "number": 489,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 489,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"\"\"4\n1 1 1 1\"\"\") == \"4\"\nassert solution(\"\"\"5\n1 3 2 3 4\"\"\") == \"2\"\nassert solution(\"\"\"6\n1 3 3 1 3 2\"\"\") == \"1\"\n\"\"\"\n\"\"\"\n"
    },
    {
        "number": 489,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1 1 1 1') == '4'\nassert solution('1 3 2 3 4') == '2'\nassert solution('1 3 3 1 3 2') == '1'\n\n\n\n\n\"\"\"\n\n\"\"\"\n\n4\n1 1 1 1\n\n4\n1 3 2 3 4\n\n\"\"\"\n\n\"\"\"\n\n5\n1 3 2 3 4\n\n5\n1 3 3 1 3 2\n\n\"\"\"\n\n\"\"\"\n\n6\n1 3 3 1 3 2\n\n6\n1 3 3 1 3 2\n\n\"\"\"\n\n\"\"\"\n\n6\n1 3 3 1 3 2\n\n6\n1 3 3 1 3 2\n\n\"\"\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\"\"\""
    },
    {
        "number": 489,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1\\n1\\n1\\n1\\n') == '2'\nassert solution('2\\n3\\n') == '0'\nassert solution('2\\n3\\n1\\n') == '1'\nassert solution('2\\n3\\n2\\n') == '1'\nassert solution('2\\n3\\n1\\n2\\n') == '2'\n"
    },
    {
        "number": 489,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 1 1 1\\n\") == \"4\\n\"\nassert solution(\"5\\n1 3 2 3 4\\n\") == \"2\\n\"\nassert solution(\"6\\n1 3 3 1 3 2\\n\") == \"1\\n\"\nassert solution(\"7\\n1 3 3 1 3 2 4\\n\") == \"0\\n\"\nassert solution(\"8\\n1 3 3 1 3 2 4 5\\n\") == \"0\\n\"\n"
    },
    {
        "number": 489,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('4\\n1 1 1 1') == '4'\nassert solution('5\\n1 3 2 3 4') == '2'\nassert solution('6\\n1 3 3 1 3 2') == '1'\nassert solution('10\\n5 4 3 2 1') == '1'\nassert solution('10\\n1 3 3 1 3 2') == '3'\n"
    },
    {
        "number": 489,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 489,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''4\n1 1 1 1\n''') == '4'\n\nassert solution('''5\n1 3 2 3 4\n''') == '2'\n\nassert solution('''6\n1 3 3 1 3 2\n''') == '1'\n"
    },
    {
        "number": 489,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('4\\n1 1 1 1\\n') == '4'\nassert solution('5\\n1 3 2 3 4\\n') == '2'\nassert solution('6\\n1 3 3 1 3 2\\n') == '1'\nassert solution('7\\n1 3 3 1 3 2 3\\n') == '0'\nassert solution('8\\n1 3 3 1 3 2 3 4\\n') == '0'\n"
    },
    {
        "number": 490,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('3') == 2\nassert solution('4') == 5\nassert solution('5') == 2\n\n\"\"\"\n"
    },
    {
        "number": 490,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('3') == 2\nassert solution('4') == 5\nassert solution('1') == 0\n\n\n-----\n\n\"\"\"\n\nfrom math import ceil, radians\n"
    },
    {
        "number": 490,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"5\") == \"5\"\nassert solution(\"4\") == \"5\"\nassert solution(\"3\") == \"2\"\nassert solution(\"2\") == \"1\"\nassert solution(\"1\") == \"0\"\n"
    },
    {
        "number": 490,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('3') == '2'\nassert solution('4') == '5'\nassert solution('1') == '0'\nassert solution('1000000000') == '1000000000'\nassert solution('1234') == '6'\n"
    },
    {
        "number": 490,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('3') == '2'\nassert solution('4') == '5'\nassert solution('6') == '12'\nassert solution('7') == '19'\nassert solution('8') == '25'\n"
    },
    {
        "number": 490,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('3') == 2\nassert solution('4') == 5\nassert solution('1') == 0\n\"\"\"\n"
    },
    {
        "number": 490,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('3') == 2\nassert solution('4') == 5\nassert solution('5') == 4\n\"\"\"\n"
    },
    {
        "number": 490,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"3\") == 2\nassert solution(\"4\") == 5\n\n\n\"\"\"\n\n\nimport sys\n\nsys.setrecursionlimit(2147483647)\nfrom typing import List\n"
    },
    {
        "number": 490,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('3') == 2\nassert solution('4') == 5\nassert solution('0') == 0\nassert solution('1') == 1\nassert solution('10') == 3\n"
    },
    {
        "number": 490,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"5\"\nassert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"1\"\nassert solution(\"10\") == \"9\"\n"
    },
    {
        "number": 491,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(input()) == output\n"
    },
    {
        "number": 491,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"2\") == '0'\nassert solution(\"2230\") == '2230'\nassert solution(\"-10\") == '0'\nassert solution(\"-100003\") == '-10000'\nassert solution(\"-100004\") == '-10001'\n"
    },
    {
        "number": 491,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('2230') == '2230'\nassert solution('-10') == '0'\nassert solution('-100003') == '-10000'\nassert solution('-13') == '-13'\n\n\"\"\"\n"
    },
    {
        "number": 491,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('2230') == '2230'\nassert solution('-10') == '0'\nassert solution('-100003') == '-100003'\n"
    },
    {
        "number": 491,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('2230') == '2230'\nassert solution('-10') == '0'\nassert solution('-100003') == '-100003'\n"
    },
    {
        "number": 491,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('2230') == '2230'\nassert solution('-10') == '0'\nassert solution('-100003') == '-100003'\nassert solution('-10002230') == '-10002230'\nassert solution('-1000003') == '-1000003'\n"
    },
    {
        "number": 491,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"2230\") == \"2230\"\nassert solution(\"-10\") == \"0\"\nassert solution(\"-100003\") == \"-100003\"\n"
    },
    {
        "number": 491,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(input()) == input()\n\n\n\"\"\""
    },
    {
        "number": 491,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('2230') == '2230'\nassert solution('-10') == '0'\nassert solution('-100003') == '-10000'\nassert solution('-123456789') == '-12345678'\nassert solution('1000') == '1000'\n"
    },
    {
        "number": 491,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"2230\") == \"2230\"\nassert solution(\"-10\") == \"0\"\nassert solution(\"-100003\") == \"-10000\"\nassert solution(\"1\") == \"0\"\nassert solution(\"-1\") == \"-1\"\n"
    },
    {
        "number": 492,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\n'''^ >\n1\n'''\n    ) == 'cw'\nassert solution(\n'''< ^\n3\n'''\n    ) == 'ccw'\nassert solution(\n'''^ v\n6\n'''\n    ) == 'undefined'\nassert solution(\n'''< v\n6\n'''\n    ) == 'ccw'\nassert solution(\n'''> v\n6\n'''\n    ) == 'cw'\n"
    },
    {
        "number": 492,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('< ^') == 'cw'\nassert solution('^ >') == 'ccw'\nassert solution('^ > < ^ ^') == 'ccw'\nassert solution('^ > v') == 'undefined'\nassert solution('< ^ >') == 'undefined'\n"
    },
    {
        "number": 492,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('^ >') == 'cw'\nassert solution('< ^') == 'ccw'\nassert solution('^ v') == 'undefined'\nassert solution('< v') == 'undefined'\nassert solution('^ >') == 'cw'\n"
    },
    {
        "number": 492,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"< ^\") == \"ccw\"\nassert solution(\"^ >\") == \"cw\"\nassert solution(\"< ^\") == \"cw\"\nassert solution(\"< ^\") == \"undefined\"\nassert solution(\"< ^\") == \"undefined\"\n"
    },
    {
        "number": 492,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"> ^\") == \"cw\"\nassert solution(\"< ^\") == \"ccw\"\nassert solution(\"v >\") == \"undefined\"\nassert solution(\"^ v\") == \"ccw\"\nassert solution(\"< ^\") == \"undefined\"\n"
    },
    {
        "number": 492,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == 'cw'\nassert solution(stdin) == 'ccw'\n"
    },
    {
        "number": 492,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('') is None\nassert solution('#') is None\nassert solution('# >') is None\nassert solution('^ >') is None\nassert solution('< ^') is None\n"
    },
    {
        "number": 492,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('^ >') == 'cw'\nassert solution('< ^') == 'ccw'\nassert solution('^ v') == 'undefined'\nassert solution('< ^') == 'undefined'\nassert solution('^ >') == 'undefined'\n"
    },
    {
        "number": 492,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"^ >\") == \"cw\"\nassert solution(\"< ^\") == \"ccw\"\nassert solution(\"^ v\") == \"undefined\"\nassert solution(\"< ^\") == \"ccw\"\nassert solution(\"^ >\") == \"cw\"\n"
    },
    {
        "number": 492,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('^ >') == 'cw'\nassert solution('< ^') == 'ccw'\nassert solution('< >') == 'undefined'\nassert solution('^ > ^ < ^ <') == 'undefined'\nassert solution('^ > ^ > ^ > ^ < > > >') == 'undefined'\n"
    },
    {
        "number": 493,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"0\"\nassert solution(\"4\") == \"1\"\nassert solution(\"1\") == \"1\"\nassert solution(\"R.....\") == \"0\"\nassert solution(\"RR\") == \"0\"\n"
    },
    {
        "number": 493,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('3\\n.L\\n') == '3'\nassert solution('4\\n.L.R...LR..\\n') == '4'\nassert solution('1\\n.\\n') == '0'\nassert solution('5\\nR....\\n') == '0'\nassert solution('10\\n.L.R...LR..L..R.L.L.\\n') == '4'\n"
    },
    {
        "number": 493,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('2\\n.L') == '0'\nassert solution('2\\n.L.R') == '0'\nassert solution('2\\n.L.R.L') == '1'\nassert solution('2\\n.L.R.R') == '0'\nassert solution('2\\n
    },
    {
        "number": 493,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('.L.R...LR..L..') == 4\nassert solution('R....') == 0\nassert solution('R....') == 0\nassert solution('R....') == 0\nassert solution('R....') == 0\n"
    },
    {
        "number": 493,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"0\") == 0\nassert solution(\"1.\") == 1\nassert solution(\"1.0\") == 1\nassert solution(\"1.0L\") == 1\nassert solution(\"2.R\") == 1\n"
    },
    {
        "number": 493,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\".L.R...LR..L..\") == \"4\"\nassert solution(\"R....\") == \"0\"\nassert solution(\"R.....\") == \"0\"\nassert solution(\"R...\") == \"1\"\nassert solution(\"R...\") == \"1\"\n"
    },
    {
        "number": 493,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('14\\n.L.R...LR..L..') == 4\nassert solution('5\\nR....') == 0\nassert solution('1\\n.') == 1\nassert solution('3\\n..') == 0\nassert solution('2\\n..') == 0\n"
    },
    {
        "number": 493,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(''.join(solution(input()))) == input()\n'''\n"
    },
    {
        "number": 493,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\".L.R...LR..L..\") == \"4\"\nassert solution(\"R....\") == \"0\"\nassert solution(\"L....\") == \"1\"\nassert solution(\".....\") == \"0\"\nassert solution(\"L.....\") == \"1\"\n"
    },
    {
        "number": 493,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('14\\n.L.R...LR..L..') == '4'\nassert solution('5\\nR....') == '0'\nassert solution('1\\n.') == '1'\nassert solution('1000\\n...') == '1000'"
    },
    {
        "number": 494,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''5 4\n2 3 1 4 4''') == '3 1 2 4'\nassert solution('''3 3\n3 1 2''') == '-1'\nassert solution('''3 3\n3 1 2''') == '-1'\nassert solution('''3 3\n2 1 3''') == '2 3 1'\nassert solution('''4 4\n2 3 1 4 4''') == '3 1 2 4'\n"
    },
    {
        "number": 494,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('4 5\\n2 3 1 4 4') == '3 1 2 4'\nassert solution('3 3\\n3 1 2\\n') == '-1'\nassert solution('3 3\\n3 1 2\\n') == '-1'\nassert solution('3 3\\n3 1 2\\n') == '-1'\nassert solution('3 3\\n3 1 2\\n') == '-1'\n"
    },
    {
        "number": 494,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 494,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('4 5') == '3 1 2 4'\nassert solution('3 3') == '-1'\n\n\"\"\""
    },
    {
        "number": 494,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('4 3') == '3 1 2 4'\nassert solution('3 3') == '-1'\nassert solution('3 3') == '-1'\nassert solution('3 1 2') == '3 1 2 4'\nassert solution('2 3 1 4 4') == '3 1 2 4'\n"
    },
    {
        "number": 494,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('4 5\\n2 3 1 4 4') == '3 1 2 4'\nassert solution('3 3\\n3 1 2') == '-1'\n"
    },
    {
        "number": 494,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\n'''4 5\n2 3 1 4 4\n''') == '3 1 2 4'\n\nassert solution(\n'''3 3\n3 1 2\n''') == '-1'\n\nassert solution(\n'''2 2\n2 1\n''') == '-1'\n\nassert solution(\n'''10 10\n1 4 4 1 1 1 1 4 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 494,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''4 5\n2 3 1 4 4''') == '3 1 2 4'\nassert solution('''3 3\n3 1 2''') == '-1'\n"
    },
    {
        "number": 494,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('4 5\\n2 3 1 4 4') == '3 1 2 4'\nassert solution('3 3\\n3 1 2') == '-1'\nassert solution('4 4\\n1 2 3 4') == '4 1 2 3'\nassert solution('4 3\\n3 1 2') == '-1'\nassert solution('1 5\\n3 1 2 4') == '-1'\n"
    },
    {
        "number": 494,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('3 4') == '3 1 2'\nassert solution('4 3') == '3 1 2'\nassert solution('4 3') == '-1'\nassert solution('4 3') == '3 1 2'\nassert solution('3 3') == '3 1 2'\n"
    },
    {
        "number": 495,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1990 1') == '9190'\nassert solution('300 0') == '300'\nassert solution('1034 2') == '3104'\nassert solution('9090000078001234 6') == '9907000008001234'"
    },
    {
        "number": 495,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('1990 1') == '9190'\nassert solution('300 0') == '300'\nassert solution('1034 2') == '3104'\nassert solution('9090000078001234 6') == '9907000008001234'\n"
    },
    {
        "number": 495,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1990 1\\n') == '9190'\nassert solution('300 0\\n') == '300'\nassert solution('1034 2\\n') == '3104'\nassert solution('9090000078001234 6\\n') == '9907000008001234'\n"
    },
    {
        "number": 495,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('input.txt') == '9190'\nassert solution('input2.txt') == '3104'\nassert solution('input3.txt') == '9791630078001234'\nassert solution('input4.txt') == '9907000008001234'\nassert solution('input5.txt') == '991630078001234'\n"
    },
    {
        "number": 495,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1990 1') == '9190'\nassert solution('300 0') == '300'\nassert solution('1034 2') == '3104'\nassert solution('9090000078001234 6') == '9907000008001234'\nassert solution('40245989809898723 0') == '40245989809898723'\n"
    },
    {
        "number": 495,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1990 1') == '9190'\nassert solution('300 0') == '300'\nassert solution('1034 2') == '3104'\nassert solution('9090000078001234 6') == '9907000008001234'\n"
    },
    {
        "number": 495,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('1990 1') == '9190'\nassert solution('300 0') == '300'\nassert solution('1034 2') == '3104'\nassert solution('9090000078001234 6') == '9907000008001234'\n"
    },
    {
        "number": 495,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''1990 1\n''') == '9190'\nassert solution('''300 0\n''') == '300'\nassert solution('''1034 2\n''') == '3104'\nassert solution('''9090000078001234 6\n''') == '9907000008001234'\n"
    },
    {
        "number": 495,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1990 1') == '9190'\nassert solution('300 0') == '300'\nassert solution('1034 2') == '3104'\nassert solution('9090000078001234 6') == '9907000008001234'\nprint(solution(stdin))\n\n'''\n"
    },
    {
        "number": 495,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''1990 1''') == '9190'\nassert solution('''300 0''') == '300'\nassert solution('''1034 2''') == '3104'\nassert solution('''9090000078001234 6''') == '9907000008001234'\n"
    },
    {
        "number": 496,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(input()) == expected\nprint('Tests passed successfully')\n"
    },
    {
        "number": 496,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"836 624 412 200\") == \"-12\"\nassert solution(\"1 334 667 1000\") == \"1333\"\nassert solution(\"2 1113 423 4321\") == \"42\"\nassert solution(\"4 6 7 8 9 10 11\") == \"42\"\nassert solution(\"6 7 8 9 10 11 12\") == \"42\"\n"
    },
    {
        "number": 496,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('836 624 412 200') == '-12'\nassert solution('1 334 667 1000') == '1333'\n"
    },
    {
        "number": 496,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 496,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''8 36 6 24''') == '-12'\nassert solution('''1 334 667 1000''') == '1333'\nassert solution('''836 624 412 200''') == '-12'\n'''\n\nfrom itertools import cycle, islice\nfrom math import floor, log\nfrom sys import stdin"
    },
    {
        "number": 496,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('836 624 412 200') == -12\nassert solution('1 334 667 1000') == 1333\nassert solution('836 624 412 201') == 42\nassert solution('1 334 667 1000') == 1333\nassert solution('836 624 412 300') == 42\n\n\"\"\""
    },
    {
        "number": 496,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\n\n####################################################\n"
    },
    {
        "number": 496,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"836 624 412 200\") == \"-12\"\nassert solution(\"1 334 667 1000\") == \"1333\"\nassert solution(\"836 624 412 1000\") == \"42\"\nassert solution(\"1 334 667 1000\") == \"1333\"\nassert solution(\"836 624 412 1000\") == \"42\"\n"
    },
    {
        "number": 496,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('836 624 412 200') == '-12'\nassert solution('1 334 667 1000') == '1333'\nassert solution('1 42 23') == '42'\nassert solution('1 42 42') == '42'\nassert solution('1 42 42') == '42'\n"
    },
    {
        "number": 496,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(input()) == ''\nassert solution(input()) == '-12'\nassert solution(input()) == '1333'\nassert solution(input()) == '42'\nassert solution(input()) == '0'\n"
    },
    {
        "number": 497,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(input(\"\")) == output\n\"\"\"\n\nN = int(input())\nC = list(map(int, input().split()))\nC.sort()\n\nn = 0\n"
    },
    {
        "number": 497,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('5') == '4'\nassert solution('3') == '1'\nassert solution('7') == '4'\n\nassert solution('5\\n1 2 3 2 3') == '4'\nassert solution('3\\n1 2 1') == '1'\n"
    },
    {
        "number": 497,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('5\\n1 2 3 2 3\\n') == '4'\nassert solution('3\\n1 2 1\\n') == '1'\nassert solution('7\\n1 1 3 1 1 1\\n') == '4'\n\"\"\"\nimport sys\nsys.setrecursionlimit(200)\n"
    },
    {
        "number": 497,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == answer_one\n\nprint('Tests passed')\n\"\"\""
    },
    {
        "number": 497,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('3\\n1 2 1') == '1'\nassert solution('5\\n1 2 3 2 3') == '4'\nassert solution('7\\n1 1 3 1 1 1') == '4'\n\n\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 497,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''5\n1 2 3 2 3''') == '4'\nassert solution('''3\n1 2 1''') == '1'\nassert solution('''7\n1 1 3 1 1 1 1''') == '4'\nassert solution('''1\n1 1 1''') == '0'\nassert solution('''3\n1 2 1''') == '1'\n"
    },
    {
        "number": 497,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdin[2]\n\n\n\"\"\"\n\n\"\"\"\n\nThere are $n$ houses on the street, they are numbered from 1 to $n$, from left to right.\nThe distance between every two neighboring houses is equal to 1. The neighboring houses are 1 and 2, 2 and 3,..., $n-1$ and $n$.\nThe houses $n$ and 1 are not neighboring.\nThe houses are colored in colors $c_1, c_2, \\ldots, c_n$ so that the $i$-th house is colored in the color $c_i$. Everyone knows that Chordalsk is not boring, so there are at least two houses colored in different colors.\nIlya wants to select two houses $i$ and $j$ so that $1 \\leq i < j \\leq n$ and they have different colors: $c_i \\neq c_j$.\nHe will then walk from the house $i$ to the house $j$ the distance of $(j-i)$ units.\nIlya loves long walks, so he wants to choose the houses so that the distance between them is the maximum possible.\nHelp Ilya, find this maximum possible distance.\n\nInput\n\nThe first line contains a single integer $n$ ($3 \\leq n \\leq 300\\,000$)\u00a0\u2014 the number of cities on the street.\n\nThe second line contains $n$ integers $c_1, c_2, \\ldots, c_n$ ($1 \\leq c_i \\leq n$)\u00a0\u2014 the colors of the houses.\n\nIt is guaranteed that there is at least one pair of indices $i$ and $j$ so that $1 \\leq i < j \\leq n$ and $c_i \\neq c_j$.\n\nOutput\n\nPrint a single integer\u00a0\u2014 the maximum possible distance Ilya can walk.\n\nExamples\nInput\n\n5\n1 2 3 2 3\n\nOutput\n\n4\n\nInput\n\n3\n1 2 1\n\nOutput\n\n1\n\nInput\n\n7\n1 1 3 1 1 1 1\n\nOutput\n\n4\n\nNote\n\nIn the first example the optimal way is to walk from the first house to the last one, where Ilya can walk the distance of $5-1 = 4$ units.\n\nIn the second example the optimal way is to either walk from the first house to the second or from the second to the third. Both these ways have the distance of $1$ unit.\n\nIn the third example the optimal way is to walk from the third house to the last one, where Ilya can walk the distance of $7-3 = 4$ units.\n\n\"\"\"\n\nn = int(input())\nhouses = list(map(int, input().split()))\n\nhouses.sort()\n\ni, j = 0, n - 1\n\nwhile i < j:\n    if houses[i]!= houses[j]:\n        break\n    i += 1\n    j -= 1\n\nprint(j - i)\n"
    },
    {
        "number": 497,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\n\n\n\n\"\"\"\nInput\n5\n1 2 3 2 3\n\nOutput\n4\n\nInput\n3\n1 2 1\n\nOutput\n1\n\nInput\n7\n1 1 3 1 1 1 1\n\nOutput\n4\n\"\"\""
    },
    {
        "number": 497,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('5\\n1 2 3 2 3\\n') == '4\\n'\nassert solution('3\\n1 2 1\\n') == '1\\n'\nassert solution('7\\n1 1 3 1 1 1\\n') == '4\\n'\nassert solution('\\n') == '0\\n'\n\n\n\"\"\"\n"
    },
    {
        "number": 497,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1 2 3 2 3') == '4'\nassert solution('1 2 1') == '1'\nassert solution('7 1 1 3 1 1 1') == '4'\nassert solution('1 1 3 1 1 1') == '1'\nassert solution('1 1 1 1 1') == '0'\n"
    },
    {
        "number": 498,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 498,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(input()) == output\n\n\"\"\""
    },
    {
        "number": 498,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''4 3 9''') == '2 2 L'\nassert solution('''4 3 24''') == '4 3 R'\nassert solution('''2 4 4''') == '1 2 R'\nassert solution('''1 1 1''') == '1 1 L'\n\n'''"
    },
    {
        "number": 498,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(input()) == output\n\n\"\"\"\n"
    },
    {
        "number": 498,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\n\"4 3 9\") == \"2 2 L\"\nassert solution(\n\"4 3 24\") == \"4 3 R\"\nassert solution(\n\"2 4 4\") == \"1 2 R\"\nassert solution(\n\"2 2 2\") == \"1 1 L\"\nassert solution(\n\"1 1 1\") == \"1 1 R\"\n"
    },
    {
        "number": 498,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''4 3 9''') == '2 2 L'\nassert solution('''4 3 24''') == '4 3 R'\nassert solution('''2 4 4''') == '1 2 R'\nassert solution('''4 3 20''') == '1 3 R'\nassert solution('''3 3 3''') == '1 1 L'\n"
    },
    {
        "number": 498,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('4 3 9') == '2 2 L'\nassert solution('4 3 24') == '4 3 R'\nassert solution('2 4 4') == '1 2 R'\n"
    },
    {
        "number": 498,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"4 3 9\") == \"2 2 L\"\nassert solution(\"4 3 24\") == \"4 3 R\"\nassert solution(\"2 4 4\") == \"1 2 R\"\n\n\"\"\"\n"
    },
    {
        "number": 498,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('4 3 9') == '2 2 L'\nassert solution('4 3 24') == '4 3 R'\nassert solution('2 4 4') == '1 2 R'\nassert solution('2 4 4') == '1 2 R'\nassert solution('1 1 1') == '1 1 R'\n"
    },
    {
        "number": 498,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('4 3 9') == '2 2 L'\nassert solution('4 3 24') == '4 3 R'\nassert solution('2 4 4') == '1 2 R'\nassert solution('5 5 5') == '2 2 R'\nassert solution('1 2 2') == '1 2 R'\n"
    },
    {
        "number": 499,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"BBBBB\") == \"\"\nassert solution
    },
    {
        "number": 499,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('2') == 'G'\nassert solution('RB') == 'G'\nassert solution('GRG') == 'BR'\nassert solution('BBBBB') == 'B'\nassert solution('GGRGR') == 'BR'\n"
    },
    {
        "number": 499,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\n    '''2\nRB\n''') == 'GR'\n\nassert solution(\n    '''3\nGRG\n''') == 'BR'\n\nassert solution(\n    '''5\nBBBBB\n''') == 'B'\n"
    },
    {
        "number": 499,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''2\nRB''') == 'G'\nassert solution('''3\nGRG''') == 'BR'\nassert solution('''5\nBBBBB''') == 'B'\nassert solution('''100\n
    },
    {
        "number": 499,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('RB') == 'G'\nassert solution('GRG') == 'BR'\nassert solution('BBBBB') == 'B'\nassert solution('BBBBRBB') == 'RG'\nassert solution('BBBBBBRRBBBRRRRRRRBBBBBBRRRRBBBBBBBBRRRRRRRRRRRBBBBBBBBBBBBBBBRBBBBBBRBRBBBRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBRRRRRRRRRRRBBBBBBBBBR"
    },
    {
        "number": 499,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"RB\") == \"G\"\nassert solution(\"GRG\") == \"BR\"\nassert solution(\"BBBBB\") == \"B\"\nassert solution(\"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"
    },
    {
        "number": 499,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('RB') == 'G'\nassert solution('GRG') == 'BR'\nassert solution('BBBBB') == 'B'\nassert solution('RRRBBB') == 'G'\nassert solution('RRRR') == 'R'\n"
    },
    {
        "number": 499,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('2\\nRB') == 'G'\nassert solution('3\\nGRG') == 'BR'\nassert solution('5\\nBBBBB') == 'B'\nassert solution('5\\nRBRR') == 'BR'\nassert solution('3\\nGGG') == 'B'\n"
    },
    {
        "number": 499,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"RB\") == \"G\"\nassert solution(\"GRG\") == \"BR\"\nassert solution(\"BBBBB\") == \"B\"\nassert solution(\"G\") == \"BR\"\nassert solution(\"GRGR\") == \"GB\"\n"
    },
    {
        "number": 499,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('B') == 'B'\nassert solution('BB') == 'BB'\nassert solution('BBB') == 'BBB'\nassert solution('BBBB') == 'BBBB'\n"
    },
    {
        "number": 500,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n3 7\\n') == 'YES\\n3 3\\n4 3\\n5 3\\n6 3\\n7 3'\nassert solution('6\\n1 2\\n2 3\\n2 4\\n2 5\\n2 6\\n') == 'NO'\n\n\n'''\n"
    },
    {
        "number": 500,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n3 7') == 'YES\\n0 0\\n1 0\\n0 1\\n2 0\\n1 -1\\n-1 1\\n0 2'\nassert solution('7\\n1 2\\n2 3\\n2 4\\n2 5\\n2 6') == 'NO'\nassert solution('7\\n1 2\\n2 3\\n3 4\\n3 5\\n3 6') == 'NO'\nassert solution('7\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6') == 'NO'\nassert solution('7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6') == 'NO'\n"
    },
    {
        "number": 500,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n''') == 'YES'\nassert solution('''\n6\n1 2\n2 3\n2 4\n2 5\n2 6\n''') == 'NO'\nassert solution('''\n4\n1 2\n2 3\n3 4\n''') == 'YES'\nassert solution('''\n5\n1 2\n2 3\n2 4\n2 5\n2 6\n''') == 'NO'\nassert solution('''\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n3 8\n''') == 'YES'\n"
    },
    {
        "number": 500,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n3 7\\n4 5\\n4 6\\n5 6\\n5 7\\n6 7\") == \"YES\\n0 0\\n1 0\\n0 1\\n2 0\\n1 -1\\n-1 1\\n0 2\\n\"\n\nIn the second sample one of the possible positions of tree is: [Image]\nassert solution(\"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n3 7\\n4 5\\n4 6\\n5 6\\n5 7\\n6 7\") == \"YES\\n3 3\\n3 3\\n4 3\\n5 3\\n5 3\\n6 3\\n6 3\\n7 3\\n7 3\"\n\nIn the third sample one of the possible positions of tree is: [Image]\nassert solution(\"6\\n1 2\\n2 3\\n2 4\\n2 5\\n2 6\\n\") == \"YES\\n3 3\\n3 3\\n4 3\\n5 3\\n5 3\\n6 3\"\n\nIn the fourth sample one of the possible positions of tree is: [Image]\nassert solution(\"5\\n1 2\\n2 3\\n2 4\\n2 5\\n\") == \"YES\\n2 2\\n2 2\\n2 2\\n2 2\"\n\nIn the fifth sample one of the possible positions of tree is: [Image]\nassert solution(\"3\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n\") == \"YES\\n0 0\\n-1 1\\n1 -1\"\n\nIn the sixth sample one of the possible positions of tree is: [Image]\n"
    },
    {
        "number": 500,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n''') == 'YES'\nassert solution('''6\n1 2\n2 3\n2 4\n2 5\n2 6\n''') == 'NO'\nassert solution('''7\n1 2\n1 3\n2 4\n2 5\n2 6\n3 4\n3 5\n''') == 'YES'\nassert solution('''7\n1 2\n1 3\n2 4\n2 5\n2 6\n3 4\n3 5\n''') == 'YES'\nassert solution('''7\n1 2\n2 3\n2 4\n2 5\n2 6\n3 4\n3 5\n''') == 'NO'\n"
    },
    {
        "number": 500,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n3 7\\n') == \"YES\\n0 0\\n1 0\\n0 1\\n2 0\\n1 -1\\n-1 1\\n0 2\"\n\n>>> assert solution('6\\n1 2\\n2 3\\n2 4\\n2 5\\n2 6\\n') == \"NO\"\n>>> assert solution('4\\n1 2\\n2 3\\n3 4\\n') == \"YES\\n3 3\\n4 3\"\n\"\"\""
    },
    {
        "number": 500,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('4\\n1 2\\n2 3\\n3 4\\n') == 'YES\\n0 0\\n1 0\\n2 0\\n3 0'\nassert solution('3\\n1 2\\n2 3\\n3 4\\n') == 'YES\\n0 0\\n0 0\\n1 0'\nassert solution('6\\n1 2\\n2 3\\n3 4\\n3 5\\n3 6\\n') == 'YES\\n0 0\\n0 0\\n1 0\\n0 1\\n0 2'\nassert solution('7\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n5 6\\n') == 'YES\\n0 0\\n0 0\\n1 0\\n1 -1\\n-1 1\\n0 2'\nassert solution('8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n5 6\\n5 7\\n') == 'YES\\n0 0\\n0 0\\n1 0\\n0 1\\n0 2\\n1 0'\n\n\n'''\n"
    },
    {
        "number": 500,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''\n4\n1 2\n2 3\n3 4\n\n5 1\n''') == 'YES'\n\nassert solution('''\n4\n1 2\n2 3\n3 4\n\n5 4\n''') == 'NO'\n\nassert solution('''\n3\n1 2\n2 3\n1 3\n\n4 1\n1 2\n1 3\n4 4\n''') == 'YES'\n\nassert solution('''\n3\n1 2\n2 3\n1 3\n\n4 4\n1 2\n1 3\n4 4\n''') == 'NO'\n\nassert solution('''\n3\n1 2\n2 3\n1 3\n\n4 4\n1 2\n1 3\n4 4\n''') == 'YES'"
    },
    {
        "number": 500,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 500,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''\n6\n1 2\n2 3\n2 4\n2 5\n2 6\n''') == 'YES'\nassert solution('''\n7\n1 2\n1 3\n2 4\n2 5\n2 6\n2 7\n3 6\n''') == 'NO'\nassert solution('''\n4\n1 2\n2 3\n3 4\n''') == 'YES'\nassert solution('''\n5\n1 2\n2 3\n3 4\n4 5\n''') == 'YES'\nassert solution('''\n6\n1 2\n2 3\n2 4\n2 5\n2 6\n''') == 'NO'\n"
    },
    {
        "number": 501,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1 3\\n') == '7'\nassert solution('5 14\\n') == '105'\nassert solution('88005553535 99999999999\\n') == '761141116'\nprint(solution(stdin))\n\n\"\"\"\n"
    },
    {
        "number": 501,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == \"761141116\"\n"
    },
    {
        "number": 501,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(input()) == \"\"\n\"\"\"\n"
    },
    {
        "number": 501,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1 3') == '7'\nassert solution('5 14') == '105'\nassert solution('88005553535 99999999999') == '761141116'\nassert solution('99999666666') == '2289232495'\nassert solution('99999988888') == '11850225898'\n"
    },
    {
        "number": 501,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1 3') == '7'\nassert solution('5 14') == '105'\nassert solution('88005553535 99999999999') == '761141116'\nassert solution('0 0') == '0'\nassert solution('0 10') == '10'\n"
    },
    {
        "number": 501,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1 3') == '7'\nassert solution('5 14') == '105'\nassert solution('88005553535 99999999999') == '761141116'\nassert solution('1000000000000000 100000000000') == '1000000000000000'\nassert solution('10200000000000000000000') == '1000000000000000'\n"
    },
    {
        "number": 501,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('1 3') == '7'\nassert solution('5 14') == '105'\nassert solution('88005553535 99999999999') == '761141116'\n"
    },
    {
        "number": 501,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"2 3\\n\") == \"7\\n\"\nassert solution(\"5 14\\n\") == \"105\\n\"\nassert solution(\"88005553535 99999999999\\n\") == \"761141116\\n\"\n\n\"\"\"\n\n\"\"\"\nfrom math import pow"
    },
    {
        "number": 501,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1 3') == '7'\nassert solution('5 14') == '105'\nassert solution('88005553535 99999999999') == '761141116'\nassert solution('1 4') == '5'\nassert solution('2 8') == '12'\n"
    },
    {
        "number": 501,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1 3\\n') == '7\\n'\nassert solution('5 14\\n') == '105\\n'\nassert solution('88005553535 99999999999\\n') == '761141116\\n'"
    },
    {
        "number": 502,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(0, 1, 1, 1, 1, 0) == \"Yes\"\nassert solution(1, 1, 0, 0, 1000, 1000) == \"No\"\nassert solution(1, 1, 0, -1, 1000, 1000) == \"No\"\nassert solution(1, 1, 1, -1, 1000, 1000) == \"No\"\nassert solution(1, 1, 1, 1, 1000, 1000) == \"Yes\"\n"
    },
    {
        "number": 502,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == 'No'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 502,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('0 1 1 1 1 0') == 'Yes'\nassert solution('1 1 0 0 1000 1000') == 'No'\nassert solution('0 1 0 0 1000 1000') == 'No'\nassert solution('1 1 0 0 1000 1000') == 'No'\nassert solution('1 1 0 0 1000 1000') == 'No'\n"
    },
    {
        "number": 502,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''0 1 1 1 1 0''') == 'Yes'\nassert solution('''1 1 0 0 1000 1000''') == 'No'\nassert solution('''2 2 2 2 2 2 2''') == 'Yes'\nassert solution('''2 2 2 2 2 2 2''') == 'No'\nassert solution('''1 2 3 4 5 6 7''') == 'Yes'\n"
    },
    {
        "number": 502,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"0 1 1 1 1 0\") == \"Yes\"\nassert solution(\"1 1 0 0 1000 1000\") == \"No\"\nassert solution(\"1 1 0 0 1000 1000\") == \"No\"\nassert solution(\"1 1 0 0 1000 1000\") == \"No\"\nassert solution(\"1 1 0 0 1000 1000\") == \"No\"\n"
    },
    {
        "number": 502,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('0 1 1 1 1 0') == 'Yes'\nassert solution('1 1 0 0 1000 1000') == 'No'\nassert solution('1 1 0 0 1000 1000') == 'No'\nassert solution('1 1 0 0 1000 1000') == 'No'\nassert solution('1 1 0 0 1000 1000') == 'No'\n"
    },
    {
        "number": 502,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('0 1 1 1 1 0') == 'Yes'\nassert solution('1 1 0 0 1000 1000') == 'No'\nassert solution('1 1 0 0 0 1000 1000') == 'No'\nassert solution('1 1 0 0 0 0 1000 1000') == 'Yes'\nassert solution('1 1 0 0 0 0 0 1000 1000') == 'Yes'\n"
    },
    {
        "number": 502,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''0 1 1 1 1 0''') == 'Yes'\nassert solution('''1 1 0 0 1000 1000''') == 'No'\n"
    },
    {
        "number": 502,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('0 1 1 1 1 0') == 'Yes'\nassert solution('1 1 0 0 1000 1000') == 'No'\nassert solution('1 1 0 0 -1000 -1000') == 'No'\nassert solution('1 1 0 0 0 0') == 'No'\nassert solution('1 1 0 0 0 1') == 'No'\n"
    },
    {
        "number": 502,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('0 1 1 1 1 0') == 'Yes'\nassert solution('1 1 0 0 1000 1000') == 'No'\nassert solution('1 1 0 0 1000 1000') == 'Yes'\nassert solution('0 0 0 0 0 0') == 'Yes'\nassert solution('0 1 1 1 1 0') == 'No'\n\n\n'''\n"
    },
    {
        "number": 503,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('5 2\\n1 1 2 2 4\\n') == '4\\n'\nassert solution('3 1\\n1 1 1\\n') == '1\\n'\nassert solution('10 3\\n1 2 6 2 3 6 9 18 3 9\\n') == '6\\n'\nassert solution('10 4\\n
    },
    {
        "number": 503,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"\"\nassert solution(\"1 1\") == \"\"\nassert solution(\"1 1 1\") == \"\"\nassert solution(\"2\") == \"\"\n"
    },
    {
        "number": 503,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == expected\n"
    },
    {
        "number": 503,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('5 2\\n1 1 2 2 4') == '4\\n'\nassert solution('3 1\\n1 1 1') == '1\\n'\nassert solution('10 3\\n1 2 6 2 3 6 9 18 3 9') == '6\\n'\n\"\"\"\n"
    },
    {
        "number": 503,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"3 1\") == \"1\"\nassert solution(\"10 3\") == \"6\"\nassert solution(\"100 200 1000 2000 3000\") == \"6\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"5 2\") == \"4\"\n"
    },
    {
        "number": 503,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('2 3') == '2'\nassert solution('1 1 2 2 4') == '4'\nassert solution('3 1') == '1'\nassert solution('10 3') == '6'\n\n\n-----\n\nYou are given a sequence of integers a. For each integer a[i] in the sequence, you have to determine the number of distinct sequences, whose common ratio is equal to a[i] and whose length is equal to a[i]+1.\n\nFor example, for a = [1, 1, 1], the possible sequences are [1], [1, 1], [1, 1, 1], and [1, 1, 1, 1]. There are two distinct sequences with common ratio equal to 1, and one sequence with common ratio equal to 1 and length equal to 2. Thus, the answer is 2.\n\nInput/Output\n\n[time limit] 4000ms (py)\n[input] integer a\n\nThe first line contains a single integer n (1 \u2264 n \u2264 100) \u2014 the size of the sequence.\n\nThe second line contains n integers a_1, a_2,..., a_{n} (a_i \u2265 0, for all i), each denoting the value of an element in the sequence.\n\n[output] integer\n\nThe number of distinct sequences with common ratio equal to a[i] and whose length is equal to a[i]+1.\n\n\n\"\"\""
    },
    {
        "number": 503,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''5 2\n1 1 2 2 4''') == '4'\nassert solution('''3 1\n1 1 1''') == '1'\nassert solution('''10 3\n1 2 6 2 3 6 9 18 3 9''') == '6'\nassert solution('''2 10\n1 2 3 4 5 6 7 8 9 10''') == '1'\n\n'''\n"
    },
    {
        "number": 503,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''5 2\n1 1 2 2 4\n''') == '4'\nassert solution('''3 1\n1 1 1\n''') == '1'"
    },
    {
        "number": 503,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''5 2\n1 1 2 2 4\n''') == '4'\n\nassert solution('''3 1\n1 1 1\n''') == '1'\n"
    },
    {
        "number": 503,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('2 3\\n1 2 3') == '4'\nassert solution('2 3\\n1 1 3') == '1'\nassert solution('5 2\\n1 1 2 2 4') == '4'\nassert solution('3 1\\n1 1 1') == '1'\nassert solution('10 3\\n1 2 6 2 3 6 9 18 3 9') == '6'\n"
    },
    {
        "number": 504,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('2 1 1\\n10 15\\n6 1') == '27'\nassert solution('3 0 3\\n10 8\\n7 11\\n5 2') == '26'\nassert solution('3 0 3\\n10 8\\n7 11\\n5 2\\n10 7\\n6 3') == '35'\nassert solution('3 0 3\\n10 8\\n7 11\\n5 2\\n10 7\\n6 3\\n7 0') == '34'\nassert solution('3 0 3\\n10 8\\n7 11\\n5 2\\n10 7\\n6 3\\n7 0\\n10 6\\n5 3') == '37'\n"
    },
    {
        "number": 504,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''1 1 1''') == '27'\nassert solution('''10 15\n6 1\n''') == '26'\nassert solution('''3 0 3\n10 8\n7 11\n5 2\n''') == '26'\nassert solution('''2 0 1\n10 8\n7 11\n5 2\n''') == '26'\nassert solution('''3 1 2\n10 8\n7 11\n5 2\n''') == '26'\n"
    },
    {
        "number": 504,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('2 1 1\\n10 15\\n6 1\\n') == '26'\nassert solution('3 0 3\\n10 8\\n7 11\\n5 2\\n') == '26'\nassert solution('3 0 3\\n10 8\\n7 11\\n5 2\\n') == '26'\n"
    },
    {
        "number": 504,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(input) == expect\n\"\"\"\n"
    },
    {
        "number": 504,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"2 1 1\") == \"26\"\nassert solution(\"3 0 3\") == \"26\"\nassert solution(\"10 8\") == \"26\"\nassert solution(\"3 1 1\") == \"10\"\nassert solution(\"2 3 4\") == \"28\"\n"
    },
    {
        "number": 504,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''2 1 1''') == '26'\nassert solution('''3 0 3''') == '26'\nassert solution('''3 2 2''') == '29'\nassert solution('''2 3 1''') == '27'\nassert solution('''1 1 0''') == '0'\n"
    },
    {
        "number": 504,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''2 1 1''') == '27'\nassert solution('''3 0 3''') == '26'\nassert solution('''3 1 3''') == '26'\nassert solution('''3 3 3''') == '27'\nassert solution('''10 1 2''') == '27'\n"
    },
    {
        "number": 504,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''2 1 1''') == '27'\nassert solution('''3 0 3''') == '26'\nassert solution('''4 0 3''') == '25'\nassert solution('''4 0 3''') == '26'\nassert solution('''4 0 3''') == '25'\n"
    },
    {
        "number": 504,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('2 1 1') == '27'\nassert solution('3 0 3') == '26'\nassert solution('10 8') == '26'\nassert solution('7 11') == '26'\nassert solution('5 2') == '26'\n"
    },
    {
        "number": 504,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"\"\"2 1 1\"\"\") == \"26\"\nassert solution(\"\"\"3 0 3\"\"\") == \"26\"\nassert solution(\"\"\"10 8\n7 11\n5 2\"\"\") == \"26\"\nassert solution(\"\"\"1 1 1\"\"\") == \"0\"\nassert solution(\"\"\"10 20\n15 10\"\"\") == \"26\"\n"
    },
    {
        "number": 505,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"\"\"2 3 2\n..**\nX..\"\"\") == \"RL\"\nassert solution(\"\"\"5 6 14\n..***.\n*...X.\n..*...\n..*.**\n....*.\n\"\"\") == \"DLDDLLLRRRUURU\"\nassert solution(\"\"\"3 3 4\n***\n*X*\n***\n\"\"\") == \"IMPOSSIBLE\"\nassert solution(\"\"\"5 4 4\n....\n*.*.\n....\n....\n.*.*\n....\n\"\"\") == \"IMPOSSIBLE\"\nassert solution(\"\"\"5 4 4\n....\n.*.*\n....\n....\n.*.*\n....\n\"\"\") == \"DLDDLLLRRRUURU\"\n"
    },
    {
        "number": 505,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''2 2 2''') == 'RL'\nassert solution('''5 6 14''') == 'DLDDLLLRRRUURU'\nassert solution('''3 3 4''') == 'IMPOSSIBLE'\nassert solution('''10 10 100''') == 'DDRRRDDLLRRDRRDRDDLLRDRRRDRRRDRRRRRDDDDDRDDRRRRRDRRDRRDRRDRDRDRDDRDDRDDRDRDRDRDRDRDRDRDDRDDRRRDRDRRRRDRRDRRDRRDRDDRDRDRDRDDRDRDRDRRDRRDRRDRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRDRRDRDRDRDDRRDRDRRRDRDRRRRRDRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRDDDDDRRRDDRRRDRRDRRRDRRDRRDRDRRDRDRDRDRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR"
    },
    {
        "number": 505,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''2 3 2\n.**\nX..\n''') == 'RL'\nassert solution('''5 6 14\n..***.\n*...X.\n..*...\n..*.**\n....*.\n''') == 'DLDDLLLRRRUURU'\nassert solution('''3 3 4\n***\n*X*\n***\n''') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 505,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''2 3 2\n.**\nX..\n''') == 'RL'\nassert solution('''5 6 14\n..***.\n*...X.\n..*...\n..*.**\n....*.\n''') == 'DLDDLLLRRRUURU'\nassert solution('''3 3 4\n***\n*X*\n***\n''') == 'IMPOSSIBLE'\n'''\n"
    },
    {
        "number": 505,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1\\n1\\n1\\n1\\n1') == 'DDDD'\nassert solution('2\\n2\\n2\\n2\\n2') == 'LLLL'\nassert solution('3\\n3\\n3\\n3\\n3') == 'UUUU'\nassert solution('5\\n5\\n5\\n5\\n5') == 'RRRR'\nassert solution('6\\n6\\n6\\n6\\n6') == 'DDDDD'\n"
    },
    {
        "number": 505,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('2 3 2') == 'RL'\nassert solution('5 6 14') == 'DLDDLLLRRRUURU'\nassert solution('3 3 4') == 'IMPOSSIBLE'\n\"\"\""
    },
    {
        "number": 505,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''2 3 2\n.**\nX..''') == 'RL'\nassert solution('''5 6 14\n..***.\n*...X.\n..*...\n..*.**\n....*.\n''') == 'DLDDLLLRRRUURU'\nassert solution('''3 3 4\n***\n*X*\n***\n''') == 'IMPOSSIBLE'\n'''\n"
    },
    {
        "number": 505,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''2 3 2\n.**\nX..\n''') == 'RL'\nassert solution('''5 6 14\n..***.\n*...X.\n..*...\n..*.**\n....*.\n''') == 'DLDDLLLRRRUURU'\nassert solution('''3 3 4\n***\n*X*\n***\n''') == 'IMPOSSIBLE'\nassert solution('''10 5 5\n.**.**.**.**.**.\n**.X.**.**.**.\n**.**.X.**.**.\n**.**.**.**.**\n**.**.**.**.**\n**.**.**.**.**\n**.**.**.**.**\n**.**.**.**.**\n**.**.**.**.**\n''') == 'UDUDDDLRURRRRRRRRRRRUURRRRRRRRR'\n'''\n'''"
    },
    {
        "number": 505,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('3 3 2') == 'RL'\nassert solution('5 6 14') == 'DLDDLLLRRRUURU'\nassert solution('3 3 4') == 'IMPOSSIBLE'\nassert solution('***') == 'IMPOSSIBLE'\nassert solution('*X*') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 505,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''2 3 2\n.**\nX..\n''') == 'RL'\nassert solution('''5 6 14\n..***.\n*...X.\n..*...\n..*.**\n....*.\n''') == 'DLDDLLLRRRUURU'\nassert solution('''3 3 4\n***\n*X*\n***\n''') == 'IMPOSSIBLE'\nassert solution('''4 4 8\n*****\n*X*\n*X*\n*X*\n*****\n''') == 'LRRDLRLR'\nassert solution('''2 2 1\n.*\n*.*\n.*\n.*\n*.*\n*.*\n.*\n*.*\n*.*\n*.*\n''') == 'LRRDLRLR'\n"
    },
    {
        "number": 506,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1 1') == '2'\nassert solution('10 7') == '6'\nassert solution('1000000000000 1') == '1000000000000'\nassert solution('1000000000000 10 7') == '6'\nassert solution('1000000000000 1000000000 7') == '1000000000000'\n"
    },
    {
        "number": 506,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''2 1''') == '2'\nassert solution('''10 7''') == '6'\nassert solution('''1000000000000 1''') == '1000000000000'\nassert solution('''3 5''') == '0'\nassert solution('''5 5''') == '1'\n"
    },
    {
        "number": 506,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''2 1''') == '2'\nassert solution('''10 7''') == '6'\nassert solution('''1000000000000 1''') == '1000000000000'\n'''\n"
    },
    {
        "number": 506,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('2 1') == '2'\nassert solution('10 7') == '6'\nassert solution('1000000000000 1') == '1000000000000'\n\n\"\"\"\n"
    },
    {
        "number": 506,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('2 1') == '2'\nassert solution('10 7') == '6'\nassert solution('1000000000000 1') == '1000000000000'\nassert solution('3 3') == '3'\n\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 506,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\n\nimport sys\nfrom math import gcd\n\nstdin = sys.stdin.read()\n\na, b = tuple(map(int, stdin.split()))\n\nans = 0\n\nwhile a > 0 and b > 0:\n    a, b = b, a % b\n    ans += 1\n\nprint(ans)\n"
    },
    {
        "number": 506,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 506,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('2 1') == '2'\nassert solution('10 7') == '6'\nassert solution('1000000000000 1') == '1000000000000'\n"
    },
    {
        "number": 506,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('2 1') == '2'\nassert solution('2 1') == '2'\nassert solution('10 7') == '6'\nassert solution('10 7') == '6'\nassert solution('1000000000000 1') == '1000000000000'\n"
    },
    {
        "number": 506,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('2 1') == '2'\nassert solution('10 7') == '6'\nassert solution('1000000000000 1') == '1000000000000'\nassert solution('1000000010000 1') == '1000000010000'\nassert solution('1000000000000 1') == '1000000000000'\n"
    },
    {
        "number": 507,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdin\n\"\"\"\n"
    },
    {
        "number": 507,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('4\\n1 1 3 4\\n1 4 3 4\\n1 1 3 4') == '5 4 2 3 1'\nassert solution('5\\n4 4 2 3 1\\n5 4 5 3 1\\n5 4 5 3 1') == '5 4 2 3 1'\nassert solution('4\\n1 1 3 4\\n1 4 3 4\\n1 1 3 4') == '1 2 5 4 3'\nassert solution('3\\n1 1 2 3\\n2 1 2 3\\n3 1 2 3\\n1 1 2 3') == '1 2 3'\nassert solution('5\\n4 4 2 3 1\\n5 4 5 3 1\\n5 4 5 3 1') == '5 4 2 3 1'\n"
    },
    {
        "number": 507,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"\"\"5\n1 2 3 4 3\n1 2 5 4 5\n\"\"\") == \"1 2 5 4 3\"\nassert solution(\"\"\"5\n4 4 2 3 1\n5 4 5 3 1\n\"\"\") == \"5 4 2 3 1\"\nassert solution(\"\"\"4\n1 1 3 4\n1 4 3 4\n\"\"\") == \"1 2 3 4\"\n\n\"\"\""
    },
    {
        "number": 507,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdin\n\"\"\"\nimport sys\nfrom functools import reduce\nfrom operator import xor, or_"
    },
    {
        "number": 507,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\n'''\n5\n1 2 3 4 3\n1 2 5 4 5\n''') == '1 2 5 4 3'\n\nassert solution(\n'''\n5\n4 4 2 3 1\n5 4 5 3 1\n''') == '5 4 2 3 1'\n\nassert solution(\n'''\n5\n1 1 3 4 4\n1 4 3 4 4\n''') == '5 4 2 3 1'\n"
    },
    {
        "number": 507,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''5''') == ''\nassert solution('''1 2 3 4 3''') == '1 2 3 4 3'\nassert solution('''1 2 5 4 5''') == '1 2 5 4 3'\nassert solution('''4''') == '1 2 3 4'\nassert solution('''1 1 3 4''') == '1 2 3 4'\n"
    },
    {
        "number": 507,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"\n5\n1 2 3 4 3\n1 2 5 4 5\n\"\"\") == \"1 2 5 4 3\"\n\nassert solution(\n\"\"\"\n5\n4 4 2 3 1\n5 4 5 3 1\n\"\"\") == \"5 4 2 3 1\"\n"
    },
    {
        "number": 507,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('5\\n1 2 3 4 3\\n1 2 5 4 5\\n') == '1 2 5 4 3'\nassert solution('5\\n4 4 2 3 1\\n5 4 5 3 1\\n') == '5 4 2 3 1'\n\n\n\n\n\"\"\""
    },
    {
        "number": 507,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"5\") == \"1 2 5 4 3\"\nassert solution(\"4\") == \"1 2 3 4\"\nassert solution(\"5\") == \"1 2 5 4 3\"\nassert solution(\"4\") == \"1 2 3 4\"\nassert solution(\"2\") == \"1 2\"\n"
    },
    {
        "number": 507,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdin.strip()\n\"\"\"\n"
    },
    {
        "number": 508,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"3 15\") == \"1 2 3\"\nassert solution(\"4 67\") == \"2 1 3\"\nassert solution(\"4 68\") == \"4 1 2\"\n'''"
    },
    {
        "number": 508,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"3 4\") == \"3 1 2\"\nassert solution(\"4 2\") == \"1 2 3\"\nassert solution(\"4 5\") == \"1 3 4\"\nassert solution(\"5 7\") == \"1 3 4\"\nassert solution(\"5 7\") == \"1 3 4\"\n"
    },
    {
        "number": 508,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('3 15') == '1 2 3'\nassert solution('4 67') == '2 1 3'\nassert solution('4 68') == '4 1 2'\nassert solution('4 69') == '1 2 3'\nassert solution('4 70') == '4 1 2'\n"
    },
    {
        "number": 508,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"\n3 15\n\"\"\") == \"1 2 3\"\n\nassert solution(\n\"\"\"\n4 67\n\"\"\") == \"2 1 3\"\n\nassert solution(\n\"\"\"\n4 68\n\"\"\") == \"2 1 3\"\n\nassert solution(\n\"\"\"\n4 69\n\"\"\") == \"4 1 2\"\n\nassert solution(\n\"\"\"\n4 70\n\"\"\") == \"4 1 2\""
    },
    {
        "number": 508,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"5 2\") == \"1 2 3\"\nassert solution(\"6 6\") == \"1 2 3 4 5\"\nassert solution(\"10 6\") == \"4 1 2 3 5 6 7 8 9 10\"\nassert solution(\"4 60\") == \"2 1 3\"\nassert solution(\"4 54\") == \"2 1 3 4\"\n"
    },
    {
        "number": 508,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('3 15') == '1 2 3'\nassert solution('4 67') == '2 1 3'\nassert solution('4 68') == '4 1 2'\n"
    },
    {
        "number": 508,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"3 15\") == \"1 2 3\"\nassert solution(\"4 67\") == \"2 1 3\"\nassert solution(\"4 68\") == \"4 1 2\"\n\n\n\"\"\""
    },
    {
        "number": 508,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''4 6\n''') == '2 3 4'\n\nassert solution('''5 16\n''') == '4 1 2'\n\nassert solution('''7 19\n''') == '1 4 2'\n\nassert solution('''5 37\n''') == '2 3 4'\n\nassert solution('''5 18\n''') == '2 3 4'"
    },
    {
        "number": 508,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''3 15''') == '1 2 3'\nassert solution('''4 67''') == '2 1 3'\nassert solution('''4 68''') == '4 1 2'\n'''\n"
    },
    {
        "number": 508,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('3 15') == '1 2 3'\nassert solution('4 67') == '2 1 3'\nassert solution('4 68') == '4 1 2'\n"
    },
    {
        "number": 509,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == 'YES'\nassert solution(stdin) == 'NO'\n\n\n\n\"\"\"\n"
    },
    {
        "number": 509,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\n    '''3'''\n) == 'YES'\nassert solution(\n    '''4'''\n) == 'YES'\nassert solution(\n    '''6'''\n) == 'YES'\nassert solution(\n    '''120'''\n) == 'NO'\nassert solution(\n    '''120'''\n) == 'NO'\n"
    },
    {
        "number": 509,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\n'''\n3\n10\n20\n30\n'''\n    ) == 'YES'\n\nassert solution(\n'''\n3\n30\n20\n10\n'''\n    ) == 'NO'\n\nassert solution(\n'''\n3\n120\n120\n120\n'''\n    ) == 'YES'\n\nassert solution(\n'''\n3\n10\n10\n10\n'''\n    ) == 'NO'\n\nassert solution(\n'''\n3\n30\n30\n30\n'''\n    ) == 'YES'\n"
    },
    {
        "number": 509,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('3') == 'NO'\nassert solution('3\\n10\\n10\\n10') == 'YES'\nassert solution('3\\n10\\n10\\n120') == 'NO'\nassert solution('3\\n120\\n120\\n120') == 'YES'\nassert solution('3\\n120\\n120\\n120\\n120') == 'YES'\n"
    },
    {
        "number": 509,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('3\\n10\\n10\\n10') == \"YES\"\nassert solution('3\\n120\\n120\\n120') == \"NO\"\nassert solution('3\\n10\\n30') == \"NO\"\nassert solution('3\\n100\\n100\\n100') == \"YES\"\nassert solution('3\\n120\\n120\\n120') == \"YES\"\n"
    },
    {
        "number": 509,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''3''') == 'YES'\nassert solution('''3\n10\n20\n30''') == 'NO'\nassert solution('''3\n120\n120\n120''') == 'YES'\nassert solution('''3\n100\n100\n100''') == 'YES'\nassert solution('''3\n10\n10\n10''') == 'YES'\n"
    },
    {
        "number": 509,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('2\\n10\\n10\\n10') == 'YES'\nassert solution('3\\n10\\n10\\n10') == 'YES'\nassert solution('3\\n120\\n120\\n120') == 'YES'\nassert solution('3\\n120\\n120\\n120') == 'NO'\nassert solution('2\\n10\\n10\\n10') == 'YES'\n"
    },
    {
        "number": 509,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"YES\"\nassert solution(\"3\") == \"NO\"\nassert solution(\"1\") == \"NO\"\nassert solution(\"3\\n90\\n180\\n270\") == \"YES\"\nassert solution(\"1\\n90\\n180\\n270\") == \"NO\"\n"
    },
    {
        "number": 509,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"3\\n10\\n20\\n30\") == \"YES\"\nassert solution(\"3\\n10\\n10\\n10\") == \"NO\"\nassert solution(\"3\\n120\\n120\\n120\") == \"YES\"\nassert solution(\"3\\n120\\n120\\n120\") == \"YES\"\nassert solution(\"3\\n120\\n120\\n120\") == \"YES\"\n"
    },
    {
        "number": 509,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('3\\n10\\n20\\n30') == 'YES'\nassert solution('3\\n10\\n10\\n10') == 'NO'\nassert solution('3\\n120\\n120\\n120') == 'YES'\nassert solution('3\\n1\\n2\\n3') == 'YES'\nassert solution('5\\n1\\n2\\n3\\n4\\n5') == 'NO'\n"
    },
    {
        "number": 510,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(input()) == '2'\nassert solution(input()) == '3'\nassert solution(input()) == '8'\nassert solution(input()) == '2'\nassert solution(input()) == '3'\n"
    },
    {
        "number": 510,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''5 2 6 3''') == '2'\nassert solution('''3 1 5 6''') == '8'\nassert solution('''8 3 3 2''') == '2'\nassert solution('''2 3 10 4''') == '3'\n"
    },
    {
        "number": 510,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3 4\") == \"2\"\nassert solution(\"5 2 6 3\") == \"2\"\nassert solution(\"3 1 5 6\") == \"8\"\nassert solution(\"8 3 3 2\") == \"2\"\nassert solution(\"2 3 10 4\") == \"3\"\n"
    },
    {
        "number": 510,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\n        \"5 2 6 3\"\n        ) == \"2\"\n\nassert solution(\n        \"3 1 5 6\"\n        ) == \"8\"\n\nassert solution(\n        \"2 3 10 4\"\n        ) == \"3\"\n\nassert solution(\n        \"8 3 3 2\"\n        ) == \"2\"\n\nassert solution(\n        \"2 3 10 4\"\n        ) == \"3\"\n\n\n\"\"\""
    },
    {
        "number": 510,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 510,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"5 2 6 3\") == \"2\"\nassert solution(\"3 1 5 6\") == \"8\"\nassert solution(\"8 3 3 2\") == \"2\"\nassert solution(\"2 3 10 4\") == \"3\"\nassert solution(\"2 3 10 10\") == \"3\"\n"
    },
    {
        "number": 510,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''5 2 6 3''') == '2'\nassert solution('''3 1 5 6''') == '8'\nassert solution('''8 3 3 2''') == '2'\nassert solution('''2 3 10 4''') == '3'\nassert solution('''3 1 3 4''') == '5'\n"
    },
    {
        "number": 510,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('2 3 10 4') == '3'\nassert solution('3 1 5 6') == '8'\nassert solution('8 3 3 2') == '2'\nassert solution('2 3 10 4') == '3'\nassert solution('8 3 3 2') == '2'\n"
    },
    {
        "number": 510,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''5 2 6 3''') == '2'\nassert solution('''3 1 5 6''') == '8'\nassert solution('''8 3 3 2''') == '2'\nassert solution('''2 3 10 4''') == '3'\n\n\n-----"
    },
    {
        "number": 510,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"5 2 6 3\") == \"2\"\nassert solution(\"3 1 5 6\") == \"8\"\nassert solution(\"8 3 3 2\") == \"2\"\nassert solution(\"2 3 10 4\") == \"3\"\nassert solution(\"6 4 4 1\") == \"7\"\n"
    },
    {
        "number": 511,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(input()) == \"3\""
    },
    {
        "number": 511,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"5 6\") == \"3\"\nassert solution(\"3 5\") == \"3\"\nassert solution(\"6 3\") == \"1\"\nassert solution(\"10 10\") == \"1\"\nassert solution(\"10000000000 100000000\") == \"0\"\n"
    },
    {
        "number": 511,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(input()) == '3'\nassert solution(input()) == '1'\nassert solution(input()) == '5'\nassert solution(input()) == '8'\nassert solution(input()) == '10'\n"
    },
    {
        "number": 511,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == '3'\nassert solution(stdin) == '1'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 511,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"3 5\") == \"3\"\nassert solution(\"6 3\") == \"1\"\nassert solution(\"9 9\") == \"4\"\nassert solution(\"0 2\") == \"0\"\nassert solution(\"1 10\") == \"1\"\n"
    },
    {
        "number": 511,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == None\n\n\n\n\n\nimport sys\n\nx, y = (int(s) for s in sys.stdin.readline().split())\nprint(f(x, y))\n"
    },
    {
        "number": 511,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == '1'\n\"\"\"\nfrom math import gcd\n\nt = list(map(int, stdin.split()))\nassert len(t) == 2\nx, y = t[0], t[1]\n\nprint(1 + 1 if gcd(x, y) == 1 else 1)\n"
    },
    {
        "number": 511,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"2 4\") == \"1\"\nassert solution(\"2 3\") == \"1\"\nassert solution(\"3 5\") == \"3\"\nassert solution(\"8 6\") == \"3\"\nassert solution(\"10 9\") == \"4\"\n"
    },
    {
        "number": 511,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 511,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''3 5''') == '3'\nassert solution('''6 3''') == '1'\nassert solution('''9 3''') == '2'\nassert solution('''9921 4949''') == '68'\nassert solution('''1000000 1000000''') == '1000000'\n'''\n"
    },
    {
        "number": 512,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''1 -1''') == 'Yes'\nassert solution('''2 3''') == 'No'\nassert solution('''1 2''') == 'Yes'\nassert solution('''2 2''') == 'No'\nassert solution('''1 2''') == 'No'\n"
    },
    {
        "number": 512,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('1 -1') == \"Yes\"\nassert solution('-1 4') == \"Yes\"\nassert solution('-1 6') == \"Yes\"\nassert solution('3 -1') == \"No\"\nassert solution('5 -1') == \"No\"\n"
    },
    {
        "number": 512,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1 -1') == 'Yes'\nassert solution('2 -1') == 'No'\nassert solution('2 -1 3') == 'Yes'\nassert solution('1 -1 2') == 'No'\nassert solution('-1 4 -1 6') == 'Yes'\n"
    },
    {
        "number": 512,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\n\n\"\"\"\n\nA line of N integers are given, representing the position of each person on the top level of a tower.\n\nA person who is on the top level of the tower is always on the left side of the tower, and on the left side of the tower is the first person to walk on the tower.\n\nHere, we want to compute how many people are on the left side of the tower when they walk on the tower from top to bottom.\n\nLet's look at the input:\n\n[1,2,3,4,5]\n\nWe want to know how many people are on the left side of the tower when we walk on the tower from top to bottom,\n\nso that we know that there are 2 people on the left side of the tower when we walk on the tower from top to bottom:\n\n[1, 2]\n\nand there are 3 people on the left side of the tower when we walk on the tower from top to bottom:\n\n[1, 2, 3]\n\nand there are 4 people on the left side of the tower when we walk on the tower from top to bottom:\n\n[1, 2, 3, 4]\n\nand there are 5 people on the left side of the tower when we walk on the tower from top to bottom:\n\n[1, 2, 3, 4, 5]\n\nIn this case, there are 3 people on the left side of the tower when we walk on the tower from top to bottom:\n\n3\n\nThis means that there are 3 people on the left side of the tower when we walk on the tower from top to bottom:\n\n[1, 2, 3]\n\nSo, in the first case, the answer is 3.\n\nIn the second case, the answer is 4.\n\nIn the third case, the answer is 5.\n\nIn the fourth case, the answer is 6.\n\nIn the fifth case, the answer is 7.\n\nIf there are no people on the left side of the tower when we walk on the tower from top to bottom,\n\nthe answer is 0.\n\n\"\"\""
    },
    {
        "number": 512,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1 -1\\n-1 4\\n-1 6') == \"Yes\"\nassert solution('1 -1\\n-1 4\\n-1 5') == \"No\"\nassert solution('-1 -1\\n-1 4\\n-1 6') == \"No\"\nassert solution('1 -1\\n-1 4\\n-1 6\\n-1 8') == \"No\"\nassert solution('1 -1\\n-1 4\\n-1 6\\n-1 8\\n-1 10') == \"No\"\n"
    },
    {
        "number": 512,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''3\n1 -1\n-1 4\n-1 6''') == 'Yes'\nassert solution('''3\n1 -1\n-1 4\n-1 6\n1 3''') == 'Yes'\nassert solution('''3\n1 -1\n-1 4\n-1 6\n-1 8''') == 'No'\n'''\n"
    },
    {
        "number": 512,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('1 -1\\n-1 4\\n-1 6\\n') == 'Yes'\nassert solution('2 -1\\n-1 4\\n-1 6\\n') == 'No'\nassert solution('1 -1\\n-1 4\\n-1 6\\n1 3\\n2 4\\n') == 'Yes'\nassert solution('1 -1\\n-1 4\\n-1 6\\n-1 -1\\n-1 4\\n-1 6\\n') == 'No'\nassert solution('1 -1\\n-1 4\\n-1 6\\n-1 -1\\n-1 4\\n-1 6\\n1 3\\n2 4\\n') == 'No'\n"
    },
    {
        "number": 512,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('3\\n1 -1\\n-1 4\\n-1 6') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 512,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('-1 -1') == 'Yes'\nassert solution('-1 4') == 'Yes'\nassert solution('-1 6') == 'Yes'\nassert solution('1 -1') == 'No'\nassert solution('1 4') == 'No'\n"
    },
    {
        "number": 512,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"1\\n-1\\n-1\") == \"Yes\"\nassert solution(\"1\\n-1\\n-1\\n-1\") == \"No\"\nassert solution(\"1\\n1\\n2\\n3\") == \"No\"\nassert solution(\"1\\n-1\\n-1\\n-1\\n-1\") == \"Yes\"\nassert solution(\"1\\n1\\n2\\n3\\n4\") == \"No\"\n"
    },
    {
        "number": 513,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('0 0') =='respectable'\nassert solution('0 1') =='respectable'\nassert solution('0 2') =='respectable'\nassert solution('1 0') == 'ugly'\nassert solution('1 1') == 'ugly'\n"
    },
    {
        "number": 513,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''0 0\n0 1\n0 2\n1 0\n1 2\n2 0\n2 1\n2 2''') =='respectable'\nassert solution('''0 0\n1 0\n2 0\n3 0\n4 0\n5 0\n6 0\n7 0''') == 'ugly'\nassert solution('''1 1\n1 2\n1 3\n2 1\n2 2\n2 3\n3 1\n3 2''') == 'ugly'\nassert solution('''1 1\n1 2\n1 3\n2 1\n2 2\n2 3\n3 1\n3 2\n4 0\n5 0\n6 0\n7 0''') == 'ugly'\nassert solution('''1 1\n1 2\n1 3\n2 1\n2 2\n2 3\n3 1\n3 2\n4 0\n5 0\n6 0\n7 0''') == 'ugly'\n"
    },
    {
        "number": 513,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"0 0\") == \"respectable\"\nassert solution(\"0 1\") == \"ugly\"\nassert solution(\"0 2\") == \"ugly\"\nassert solution(\"1 0\") == \"ugly\"\nassert solution(\"1 2\") == \"ugly\"\n"
    },
    {
        "number": 513,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"0 0\\n0 1\\n0 2\\n1 0\\n1 2\\n2 0\\n2 1\\n2 2\\n\") == \"respectable\"\nassert solution(\"0 0\\n1 0\\n2 0\\n3 0\\n4 0\\n5 0\\n6 0\\n7 0\\n\") == \"ugly\"\n"
    },
    {
        "number": 513,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''0 0\n0 1\n0 2\n1 0\n1 2\n2 0\n2 1\n2 2''') == \"respectable\"\nassert solution('''0 0\n0 1\n0 2\n1 0\n1 2\n2 0\n2 1\n2 2''') == \"ugly\"\nassert solution('''1 1\n1 2\n1 3\n2 1\n2 2\n2 3\n3 1\n3 2''') == \"respectable\"\nassert solution('''1 1\n1 2\n1 3\n2 1\n2 2\n2 3\n3 1\n3 2''') == \"ugly\"\nassert solution('''4 0\n5 0\n6 0\n7 0''') == \"respectable\"\n"
    },
    {
        "number": 513,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''0 0\n0 1\n0 2\n1 0\n1 2\n2 0\n2 1\n2 2''') =='respectable'\nassert solution('''0 0\n0 1\n0 2\n1 0\n1 2\n2 0\n2 1\n2 2\n3 0\n3 1\n3 2''') == 'ugly'\nassert solution('''1 1\n1 2\n1 3\n2 1\n2 2\n2 3\n3 1\n3 2\n3 3''') =='respectable'\nassert solution('''1 1\n1 2\n1 3\n2 1\n2 2\n2 3\n3 1\n3 2\n3 3\n4 0\n4 1\n4 2\n4 3\n4 4\n4 5\n5 4\n5 5\n5 6\n5 7\n5 8\n5 9\n6 5\n6 7\n6 8\n6 9\n6 10\n6 11\n7 6\n7 7\n7 8\n7 9\n7 10\n7 11\n8 7\n8 8\n8 9\n8 10\n8 11\n8 12\n8 13\n8 14\n8 15\n9 8\n9 9\n9 10\n9 11\n9 12\n9 13\n9 14\n9 15\n10 9\n10 10\n10 11\n10 12\n10 13\n10 14\n10 15\n11 10\n11 11\n11 12\n11 13\n11 14\n11 15\n12 11\n12 12\n12 13\n12 14\n12 15\n13 11\n13 12\n13 13\n13 14\n13 15\n14 11\n14 12\n14 13\n14 14\n14 15\n15 11\n15 12\n15 13\n15 14\n15 15''') == 'ugly'\nassert solution('''1 1\n1 2\n1 3\n2 1\n2 2\n2 3\n3 1\n3 2\n3 3''') =='respectable'\n"
    },
    {
        "number": 513,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\n'''\n0 0\n0 1\n0 2\n1 0\n1 2\n2 0\n2 1\n2 2\n''') == \"respectable\"\nassert solution(\n'''\n0 0\n1 0\n2 0\n3 0\n4 0\n5 0\n6 0\n7 0\n''') == \"ugly\"\n"
    },
    {
        "number": 513,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''0 0\n0 1\n0 2\n1 0\n1 2\n2 0\n2 1\n2 2''') =='respectable'\nassert solution('''0 0\n0 1\n0 2\n1 0\n1 2\n2 0\n2 1\n2 2''') == 'ugly'\nassert solution('''1 1\n1 2\n1 3\n2 1\n2 2\n2 3\n3 1\n3 2\n''') == 'ugly'\nassert solution('''0 0\n1 0\n2 0\n3 0\n4 0\n5 0\n6 0\n7 0\n''') =='respectable'\nassert solution('''1 1\n1 2\n1 3\n2 1\n2 2\n2 3\n3 1\n3 2\n''') == 'ugly'\n"
    },
    {
        "number": 513,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"0 0\\n0 1\\n0 2\\n1 0\\n1 2\\n2 0\\n2 1\\n2 2\") == \"respectable\"\nassert solution(\"0 0\\n0 1\\n0 2\\n1 0\\n1 2\\n2 0\\n2 1\\n2 2\") == \"ugly\"\n"
    },
    {
        "number": 513,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"0 0\\n0 1\\n0 2\\n1 0\\n1 2\\n2 0\\n2 1\\n2 2\\n\") == \"respectable\"\nassert solution(\"0 0\\n1 0\\n2 0\\n3 0\\n4 0\\n5 0\\n6 0\\n7 0\\n\") == \"ugly\"\n"
    },
    {
        "number": 514,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('3\\n1 1\\n4 5\\n5 11') == 'NO\\nYES\\nNO'\nassert solution('3\\n1 5\\n4 5') == 'NO\\nNO\\nYES'\nassert solution('3\\n1 2\\n4 5') == 'NO\\nYES\\nYES'\nassert solution('3\\n1 5\\n4 5') == 'YES\\nYES\\nNO'\nassert solution('3\\n1 1\\n4 5') == 'NO\\nYES\\nNO'\n"
    },
    {
        "number": 514,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('7 10\\n1 2') == 'NO'\nassert solution('7 10\\n1 2') == 'YES'\nassert solution('1 1\\n1 1') == 'YES'\nassert solution('7 10\\n10 5\\n20 21') == 'YES'\nassert solution('7 10\\n10 5\\n20 21') == 'NO'\n"
    },
    {
        "number": 514,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''1\n5 1''') == 'YES'\nassert solution('''2\n5 1''') == 'YES'\nassert solution('''4\n2 1''') == 'YES'\nassert solution('''5\n5 1''') == 'YES'\nassert solution('''11\n1 1''') == 'YES'\n"
    },
    {
        "number": 514,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1\\n2') == 'YES'\nassert solution('2\\n2') == 'YES'\nassert solution('3\\n2') == 'NO'\nassert solution('4\\n2') == 'NO'\nassert solution('5\\n2') == 'YES'\n"
    },
    {
        "number": 514,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1\\n1') == 'YES\\nNO\\nNO'\nassert solution('2\\n4') == 'YES\\nNO\\nNO'\nassert solution('2\\n8') == 'NO\\nYES\\nNO'\nassert solution('2\\n20') == 'NO\\nYES\\nYES'\nassert solution('2\\n30') == 'NO\\nYES\\nNO'\n"
    },
    {
        "number": 514,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''1\n2 1\n2 5\n5 11''') == 'YES'\nassert solution('''1\n2 1\n2 4\n5 11''') == 'YES'\nassert solution('''1\n2 3\n5 11''') == 'NO'"
    },
    {
        "number": 514,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 1\\n4 5\\n5 11\") == \"YES\\nYES\\nNO\"\nassert solution(\"3\\n1 1\\n4 1\") == \"YES\\nYES\\nNO\"\nassert solution(\"3\\n1 1\\n3 5\") == \"YES\\nYES\\nYES\"\nassert solution(\"1\\n2\\n3\") == \"YES\\nNO\\nNO\"\nassert solution(\"1\\n1\\n1\") == \"YES\\nYES\\nYES\"\n"
    },
    {
        "number": 514,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''1\n2 3\n3 4\n''') == 'YES'\nassert solution('''1\n1 1\n1 2\n''') == 'YES'\nassert solution('''1\n5 11\n''') == 'YES'\nassert solution('''1\n1 1\n2 3\n3 4\n''') == 'NO'\nassert solution('''1\n1 1\n2 1\n3 1\n''') == 'NO'\n"
    },
    {
        "number": 514,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1 2\\n4 5') == 'YES'\nassert solution('1 2\\n4 5\\n1 11') == 'NO'\nassert solution('2 2\\n1 1') == 'YES'\nassert solution('2 1\\n10 100') == 'YES'\nassert solution('1 1\\n1 2') == 'NO'\n"
    },
    {
        "number": 514,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == 'NO'\nassert solution('2 2') == 'YES'\nassert solution('1 1') == 'YES'\nassert solution('3 2') == 'NO'\nassert solution('1 1000000000 1000000000') == 'YES'\n"
    },
    {
        "number": 515,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('2') == '462'\nassert solution('6') == '8080'\nassert solution('2') == '462'\nassert solution('4') == '2'\nassert solution('8') == '4'\n"
    },
    {
        "number": 515,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('2\\n') == '462'\nassert solution('6\\n') == '8080'\nassert solution('10\\n') == '-1'\nassert solution('1\\n') == '-1'\nassert solution('10\\n') == '-1'\n"
    },
    {
        "number": 515,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('3') == '0'\nassert solution('10') == '-1'\nassert solution('1') == '0'\nassert solution('1234') == '0'\nassert solution('12341234') == '0'\n"
    },
    {
        "number": 515,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('3') == '4'\nassert solution('3') == '4'\nassert solution('8') == '5'\nassert solution('5') == '4'\nassert solution('9') == '7'\n"
    },
    {
        "number": 515,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('2') == '462'\nassert solution('6') == '8080'\n\n'''\n"
    },
    {
        "number": 515,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''2''') == '462'\nassert solution('''6''') == '8080'\nprint('OK')\n"
    },
    {
        "number": 515,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('2') == '-1'\nassert solution('6') == '8080'\nassert solution('7') == '-1'\nassert solution('1') == '-1'\nassert solution('9') == '8080'\n"
    },
    {
        "number": 515,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"462\"\nassert solution(\"6\") == \"8080\"\n\nassert solution(\"1\") == \"-1\"\nassert solution(\"3\") == \"-1\"\nassert solution(\"5\") == \"-1\"\n"
    },
    {
        "number": 515,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1 1\\n') == '-1'\nassert solution('2\\n') == '-1'\nassert solution('6\\n') == '8080'\nassert solution('10\\n') == '8080'\nassert solution('20\\n') == '8080'\n"
    },
    {
        "number": 515,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''2''') == '-1'\nassert solution('''6''') == '8080'\nassert solution('''3''') == '-1'\nassert solution('''9''') == '-1'\nassert solution('''40''') == '-1'\n"
    },
    {
        "number": 516,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 516,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(input) == \"\"\n"
    },
    {
        "number": 516,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''abc\nxaybz''') == '2'\nassert solution('''abcd\nebceabazcd''') == '1'\nassert solution('''abcd\nebceabazcd''') == '2'\nassert solution('''abcd\nebceabazcd''') == '1'\nassert solution('''abcd\nebceabazcd''') == '2'\n"
    },
    {
        "number": 516,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"ab?c\", \"ebaebabcd\") == 1\nassert solution(\"ab?c\", \"ebaebabazcd\") == 2\nassert solution(\"ab?c\", \"ebaebabcd\") == 1\nassert solution(\"ab?c\", \"ebaebabazcd\") == 2\nassert solution(\"ab?c\", \"ebaebabcd\") == 1\n"
    },
    {
        "number": 516,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''3 5\nabc\nxaybz''') == '2'\nassert solution('''4 10\nabcd\nebceabazcd''') == '1'\nassert solution('''3 8\nabc\nxaybz''') == '2'\nassert solution('''4 8\nabcd\nebceabazcd''') == '1'\nassert solution('''5 7\nabcdefg\nabcdefghijklmnopqrstuvwxyz''') == '2'\n"
    },
    {
        "number": 516,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"abc\", \"xaybz\") == \"2\"\nassert solution(\"ab?b\", \"aabrbb\") == \"2\"\nassert solution(\"ab?b\", \"aabrbb\") == \"2\"\nassert solution(\"ab?b\", \"aabrbb\") == \"2\"\nassert solution(\"ab?b\", \"aabrbb\") == \"2\"\n"
    },
    {
        "number": 516,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"abcd\") == 1\nassert solution(\"ebceabazcd\") == 2\nassert solution(\"abc\") == 0\nassert solution(\"xaybz\") == 2\nassert solution(\"abcdefgh\") == 0\n"
    },
    {
        "number": 516,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"abc\", \"xaybz\") == \"2\"\nassert solution(\"abcd\", \"ebceabazcd\") == \"1\"\n"
    },
    {
        "number": 516,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''3 5\nabc\nxaybz''') == '2'\nassert solution('''4 10\nabcd\nebceabazcd''') == '1'\nassert solution('''4 10\nabcd\nebcebazcd''') == '2'\nassert solution('''4 10\nabcd\nebcebaazcd''') == '1'\nassert solution('''4 10\nabcd\nebceaabcd''') == '2'\n"
    },
    {
        "number": 516,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 517,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == expected\n\"\"\"\n\nfrom sys import stdin,stdout\nn,d,h=map(int,stdin.readline().split())\n"
    },
    {
        "number": 517,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''5 3 2''') == '''1 2\n1 3\n3 4\n3 5'''\n\nassert solution('''8 5 2''') == '''-1\n4 8\n5 7\n2 3\n8 1\n2 1\n5 6\n1 5'''\n\nassert solution('''8 4 2''') == '''4 8\n5 7\n2 3\n8 1\n2 1\n5 6\n1 5'''\n\nassert solution('''3 4 1''') == '''1 3\n2 1\n3 4'''\n\nassert solution('''6 4 2''') == '''1 3\n2 4\n3 4\n4 5\n5 6\n5 7'''"
    },
    {
        "number": 517,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"5 3 2\") == \"1 2\\n1 3\\n3 4\\n3 5\\n\"\nassert solution(\"8 5 2\") == \"-1\\n4 8\\n5 7\\n2 3\\n8 1\\n2 1\\n5 6\\n1 5\"\nassert solution(\"8 4 2\") == \"4 8\\n5 7\\n2 3\\n8 1\\n2 1\\n5 6\\n1 5\"\n\"\"\"\n\nn, d, h = map(int, input().split())"
    },
    {
        "number": 517,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 517,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(input()) == \"(1 2)\"\nassert solution(input()) == \"-1\"\nassert solution(input()) == \"1 3\"\nassert solution(input()) == \"-1\"\nassert solution(input()) == \"4 8\"\n"
    },
    {
        "number": 517,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''5 3 2''') == '''1 2\n1 3\n3 4\n3 5'''\n\nassert solution('''8 5 2''') == '''4 8\n5 7\n2 3\n8 1\n2 1\n5 6\n1 5'''\n\nassert solution('''8 4 2''') == '''-1'''\n"
    },
    {
        "number": 517,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\n'''5 3 2'''\n) == '1 2'\n\nassert solution(\n'''8 5 2'''\n) == '4 8'\n\nassert solution(\n'''8 4 2'''\n) == '-1'\n\nassert solution(\n'''9 3 2'''\n) == '-1'\n\nassert solution(\n'''10 5 3'''\n) == '1 3'"
    },
    {
        "number": 517,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('5 3 2') == '1 2\\n1 3\\n3 4\\n3 5\\n'\nassert solution('8 5 2') == '-1\\n4 8\\n5 7\\n2 3\\n8 1\\n2 1\\n5 6\\n1 5\\n'\nassert solution('8 4 2') == '4 8\\n5 7\\n2 3\\n8 1\\n2 1\\n5 6\\n1 5\\n'\n"
    },
    {
        "number": 517,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"5 3 2\") == \"1 2\\n1 3\\n3 4\\n3 5\"\nassert solution(\"8 5 2\") == \"-1\"\nassert solution(\"8 4 2\") == \"4 8\\n5 7\\n2 3\\n8 1\\n2 1\\n5 6\\n1 5\"\n\n\"\"\""
    },
    {
        "number": 517,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''5 3 2''') == '''1 2\n1 3\n3 4\n3 5'''\n\nassert solution('''8 5 2''') == '''-1\n4 8\n5 7\n2 3\n8 1\n2 1\n5 6\n1 5'''\n\nassert solution('''8 4 2''') == '''4 8\n5 7\n2 3\n8 1\n2 1\n5 6\n1 5'''\n\nassert solution('''8 4 2''') == '''-1\n4 8\n5 7\n2 3\n8 1\n2 1\n5 6\n1 5'''\n\nassert solution('''5 3 2''') == '''1 2\n1 3\n3 4\n3 5'''"
    },
    {
        "number": 518,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"3 1\") == \"6.4641016\"\nassert solution(\"6 1\") == \"1.0000000\"\nassert solution(\"100 100\") == \"3.2429391\"\n"
    },
    {
        "number": 518,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('2 1') == '0'\nassert solution('100 100') == '3.242939'\nassert solution('3 1') == '0'\nassert solution('6 1') == '1.0000000'\nassert solution('10 1') == '3.7...'\n"
    },
    {
        "number": 518,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''3 1''') == '6.4641016'\nassert solution('''6 1''') == '1.0000000'\nassert solution('''100 100''') == '3.2429391'"
    },
    {
        "number": 518,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 518,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('3 1') == '6.4641016'\nassert solution('6 1') == '1.0000000'\nassert solution('100 100') == '3.2429391'\n"
    },
    {
        "number": 518,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"3 1\") == \"6.4641016\"\nassert solution(\"6 1\") == \"1.0000000\"\nassert solution(\"100 100\") == \"3.2429391\"\nassert solution(\"6 1\") == \"1.0000000\"\nassert solution(\"1 1\") == \"1.0000000\"\n"
    },
    {
        "number": 518,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"3 1\") == \"6.4641016\"\nassert solution(\"6 1\") == \"1.0000000\"\nassert solution(\"100 100\") == \"3.2429391\"\nassert solution(\"100 1\") == \"3.2429391\"\nassert solution(\"3 3\") == \"4.9791519\"\n"
    },
    {
        "number": 518,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == ''\n"
    },
    {
        "number": 518,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"3 1\"\"\"\n) == \"\"\"6.4641016\"\"\"\n\nassert solution(\n\"\"\"100 1\"\"\"\n) == \"\"\"1.0000000\"\"\"\n\nassert solution(\n\"\"\"100 100\"\"\"\n) == \"\"\"3.2429391\"\"\"\n\nassert solution(\n\"\"\"1 10\"\"\"\n) == \"\"\"0.89399666\"\"\"\n\nassert solution(\n\"\"\"6 1\"\"\"\n) == \"\"\"1.0000000\"\"\""
    },
    {
        "number": 518,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"2 1\") == \"6.4641016\"\nassert solution(\"3 1\") == \"1.0000000\"\nassert solution(\"100 100\") == \"3.2429391\"\nassert solution(\"100 200\") == \"0.0000000\"\nassert solution(\"1 1\") == \"0.0000000\"\n"
    },
    {
        "number": 519,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('100') == '50'\nassert solution('199') == '119.4'\nassert solution('199 50') == '119.4'\nassert solution('199 100') == '119.4'\nassert solution('199') == '119.4'\n"
    },
    {
        "number": 519,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('100\\n50\\n50') == '50'\nassert solution('199\\n60\\n40') == '119.4'\nassert solution('7\\n3\\n7') == '1'\nassert solution('8\\n2\\n3') == '0.5'\nassert solution('6\\n2\\n
    },
    {
        "number": 519,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"100\") == \"50\"\nassert solution(\"50\") == \"50\"\nassert solution(\"199\") == \"119.4\"\n\n\n-----\n\n\"\"\"\n"
    },
    {
        "number": 519,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == ''\n"
    },
    {
        "number": 519,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('100\\n50\\n50') == '50'\nassert solution('199\\n60\\n40') == '119.4'\nassert solution('13\\n55\\n17') == '1.979'\nassert solution('66\\n67\\n22') == '2.239'\nassert solution('41\\n22\\n22') == '1.719'\n"
    },
    {
        "number": 519,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('100') == 50\nassert solution('50') == 50\nassert solution('100') == 50\n\nassert solution('199') == 119.4\nassert solution('60') == 40\n"
    },
    {
        "number": 519,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''100\n50\n50''') == '50'\nassert solution('''199\n60\n40''') == '119.4'\nassert solution('''1\n1\n1''') == '0'\nassert solution('''4\n1\n4''') == '0'\nassert solution('''50\n100\n60''') == '50'\n"
    },
    {
        "number": 519,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('100 50 50') == '50'\nassert solution('199 60 40') == '119.4'\nassert solution('199 60 40') == '119.4'\nassert solution('999 999 999') == '0'\nassert solution('1000 999 999') == '0'\n"
    },
    {
        "number": 519,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"100\") == \"50\"\nassert solution(\"199\") == \"119.4\"\nassert solution(\"199\") == \"119.4\"\n\"\"\"\n"
    },
    {
        "number": 519,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == '50'\n\n\n\n\"\"\"\n\n\"\"\"\n    \n\"\"\"\n"
    },
    {
        "number": 520,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''3\n2014 2016 2015\n''') == '2015'\nassert solution('''1\n2050\n''') == '2050'\n\n\"\"\"\n"
    },
    {
        "number": 520,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('3\\n2014 2016 2015') == '2015'\nassert solution('1\\n2050\\n') == '2050'\nassert solution('2\\n10 40\\n') == '10'\nassert solution('3\\n20 50\\n') == '20'\nassert solution('4\\n10 10 10 10\\n') == '10'\n"
    },
    {
        "number": 520,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1\\n2050') == '2050'\nassert solution('2\\n2014 2016 2015') == '2015'\nassert solution('3\\n2050') == '2050'\nassert solution('4\\n2050') == '2050'\nassert solution('5\\n2014 2016 2015') == '2015'\n"
    },
    {
        "number": 520,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''3\n2014 2016 2015''') == '2015'\nassert solution('''1\n2050''') == '2050'\nassert solution('''2\n2050''') == '2050'\n\n\n\"\"\"\nn = int(input())\ngroups = [int(x) for x in input().split()]\nyear = max(groups)\ngroup = groups[0]\nfor i in range(1, n):\n    if abs(groups[i] - year) <= abs(groups[i] - group):\n        group = groups[i]\n    else:\n        year = groups[i]\nprint(year)\n"
    },
    {
        "number": 520,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(''.join(stdin.splitlines())) == ''\nassert solution('1 2 3') == ''\nassert solution('2014 2016 2015') == '2015'\nassert solution('2050') == '2050'\nassert solution('2014 2016 2015') == '2015'\n"
    },
    {
        "number": 520,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''3\n2014 2016 2015\n''') == 2015\nassert solution('''1\n2050\n''') == 2050\n"
    },
    {
        "number": 520,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"\"\"3\n2014 2016 2015\n\"\"\") == \"2015\"\n\nassert solution(\"\"\"1\n2050\n\"\"\") == \"2050\"\n"
    },
    {
        "number": 520,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''3\n2014 2016 2015\n''') == 2015\nassert solution('''1\n2050\n''') == 2050\nassert solution('''10\n1990 2000 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013 2014 2015\n''') == 2003\n'''\n"
    },
    {
        "number": 520,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"4\\n2014 2016 2015\") == \"2015\"\nassert solution(\"1\\n2050\") == \"2050\"\nassert solution(\"5\\n2012 2013 2014 2015 2016\") == \"2013\"\nassert solution(\"5\\n2012 2013 2014 2015 2016\") == \"2013\"\nassert solution(\"5\\n2013 2014 2015 2016 2017\") == \"2014\"\n"
    },
    {
        "number": 520,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1\\n2050') == '2050'\nassert solution('3\\n2014 2016 2015') == '2015'\nassert solution('1\\n2050') == '2050'\nassert solution('3\\n1438 5248 1439 5249') == '1438'\nassert solution('3\\n1753 1096 1097 1202 1353 1754') == '1096'\n"
    },
    {
        "number": 521,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('CY??Y') == 'Yes'\nassert solution('C?C?Y') == 'Yes'\nassert solution('MMY') == 'No'\nassert solution('?CYC?') == 'Yes'\nassert solution('CMCMY') == 'No'\n"
    },
    {
        "number": 521,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('CY??Y') == 'Yes'\nassert solution('?CYC?Y') == 'Yes'\nassert solution('C?C?Y') == 'Yes'\nassert solution('MCYCM') == 'No'\n"
    },
    {
        "number": 521,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 521,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('CY??Y') == 'Yes'\nassert solution('C?C?Y') == 'Yes'\nassert solution('C??MM') == 'No'\nassert solution('?CYC?') == 'Yes'\nassert solution('CYCMY') == 'No'\n"
    },
    {
        "number": 521,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('5\\nC?C?Y\\n') == 'No'\nassert solution('5\\nCY?C?Y\\n') == 'Yes'\nassert solution('5\\nCYCCY?\\n') == 'Yes'\nassert solution('5\\nCY?CY?\\n') == 'Yes'\nassert solution('5\\nMCY?CY?\\n') == 'Yes'\n"
    },
    {
        "number": 521,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('3') == 'Yes'\nassert solution('2') == 'No'\nassert solution('5') == 'Yes'\nassert solution('4') == 'No'\nassert solution('?') == 'No'\n"
    },
    {
        "number": 521,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('5') == 'Yes'\nassert solution('?CY?') == 'Yes'\nassert solution('C?C?Y') == 'Yes'\nassert solution('C??MM') == 'No'\nassert solution('M?C?Y') == 'No'\n"
    },
    {
        "number": 521,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"\n5\nCY??Y\n\"\"\"\n) == \"Yes\"\n\nassert solution(\n\"\"\"\n5\n?CYC?\n\"\"\"\n) == \"Yes\"\n\nassert solution(\n\"\"\"\n5\nC?C?Y\n\"\"\"\n) == \"Yes\"\n\nassert solution(\n\"\"\"\n5\nMCYCM\n\"\"\"\n) == \"No\"\n\nassert solution(\n\"\"\"\n5\nMCYCY\n\"\"\"\n) == \"No\""
    },
    {
        "number": 521,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdin\n'''\n\nimport sys"
    },
    {
        "number": 521,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 522,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 522,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('5 1 2 5 3') == '72900'\nassert solution('17 97 41 37 11') == '317451037'\nassert solution('-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1"
    },
    {
        "number": 522,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('5 1 2 5 3') == '72900'\nassert solution('17 97 41 37 11') == '317451037'\n"
    },
    {
        "number": 522,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == '21794383486'\n\n\"\"\"\n"
    },
    {
        "number": 522,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('5 1 2 5 3\\n') == '72900'\nassert solution('17 97 41 37 11\\n') == '317451037'\nassert solution('1 0 1 0 1\\n') == '0'\n\n\n\"\"\"\n\nn, f1, f2, f3, c = map(int, stdin.split())\n\nx = 4\nf = c**2 * f1 * f2 * f3\n\nwhile x < n:\n    f = f * x % (10**9 + 7)\n    x += 1\n\nprint(f)\n"
    },
    {
        "number": 522,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n"
    },
    {
        "number": 522,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('5 1 2 5 3') == '72900'\nassert solution('17 97 41 37 11') == '317451037'\n\n\n'''\n"
    },
    {
        "number": 522,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('5 1 2 5 3\\n') == '72900\\n'\nassert solution('17 97 41 37 11\\n') == '317451037\\n'\n\"\"\""
    },
    {
        "number": 522,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''5 1 2 5 3''') == '72900'\nassert solution('''17 97 41 37 11''') == '317451037'\nassert solution('''35 9 58 12 12''') == '147391932'\nassert solution('''79 17 20 12 22''') == '39462214'\nassert solution('''31 41 26 31 21''') == '64557737'\n"
    },
    {
        "number": 522,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n\"\"\""
    },
    {
        "number": 523,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 523,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''3 4''') == '6'\nassert solution('''3 4''') == '6'\nassert solution('''4 2''') == '6'\nassert solution('''7 4''') == '0'\nassert solution('''2 3''') == '0'\n"
    },
    {
        "number": 523,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('hello') == 'hello'\nassert solution('codef') == 'defg'\nassert solution('orces') == 'orces'\nassert solution('abab') == 'abab'\nassert solution('baba') == 'baba'\n"
    },
    {
        "number": 523,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''3 3\ntab\none\nbat''') == '6'\nassert solution('''4 2\noo\nox\nxo\nxx\n\n''') == '6'\nassert solution('''9 4\nabab\nbaba\nabcd\nbcde\ncdef\n"
    },
    {
        "number": 523,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('2 3\\nab\\nab\\n') == '2'\nassert solution('2 2\\na\\na\\n') == '6'\nassert solution('1 1\\nab\\n') == '0'\nassert solution('3 1\\nab\\nab\\n') == '6'\nassert solution('3 1\\nba\\nab\\n') == '6'\n"
    },
    {
        "number": 523,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('a') == 1\nassert solution('b') == 1\nassert solution('ab') == 2\nassert solution('abc') == 3\nassert solution('abb') == 2\n"
    },
    {
        "number": 523,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''3 3\ntab\none\nbat''') == '6'\nassert solution('''4 2\noo\nox\nxo\nxx''') == '6'\nassert solution('''9 4\nabab\nbaba\nabcd\nbcde\ncdef\n"
    },
    {
        "number": 523,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"3 3\") == \"6\"\nassert solution(\"3 2\") == \"6\"\nassert solution(\"9 4\") == \"0\"\nassert solution(\"9 5\") == \"0\"\nassert solution(\"9 9\") == \"0\"\n"
    },
    {
        "number": 523,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('\\n'.join([\n    '3 3',\n    'tab',\n    'one',\n    'bat',\n])) == '6'\n\nassert solution('\\n'.join([\n    '4 2',\n    'oo',\n    'ox',\n    'xo',\n    'xx',\n])) == '6'\n\nassert solution('\\n'.join([\n    '9 4',\n    'abab',\n    'baba',\n    'abcd',\n    'bcde',\n    'cdef',\n    'dfg',\n    'wxyz',\n    'zyxw',\n    'ijji',\n])) == '20'\n\nassert solution('\\n'.join([\n    '3 5',\n    'hello',\n    'codef',\n    'orces',\n])) == '0'\n\nassert solution('\\n'.join([\n    '3 2',\n    'abab',\n    'baba',\n    'abcd',\n    'bcde',\n    'cdef',\n    'dfg',\n    'wxyz',\n    'zyxw',\n    'ijji',\n])) == 'ababwxyzijjizyxwbaba'\n"
    },
    {
        "number": 523,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''3 3\ntab\none\nbat\n\n''') == '6'\nassert solution('''4 2\noo\nox\nxo\nxx\n\n''') == '6'\nassert solution('''9 4\nabab\nbaba\nabcd\nbcde\ncdef\n"
    },
    {
        "number": 524,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1 3 2') == '1'\nassert solution('1000000000 1000000000 1000000000') == '1999982505'\nassert solution('3') == '1'\nassert solution('1000000000 1000000000 1000000000') == '1999982505'\nassert solution('1 3 2') == '1'\n"
    },
    {
        "number": 524,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"1\"\nassert solution(\"1 2 3\") == \"1\"\nassert solution(\"1 2 3 4\") == \"1\"\nassert solution(\"1 3 2\") == \"1\"\n"
    },
    {
        "number": 524,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == expected\n\"\"\"\n"
    },
    {
        "number": 524,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == '1999982505'\n\"\"\"\n"
    },
    {
        "number": 524,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdin\n\n'''\n"
    },
    {
        "number": 524,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == ''"
    },
    {
        "number": 524,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''3\n1 3 2''') == '1'\nassert solution('''3\n1000000000 1000000000 1000000000''') == '1999982505'\n\n\n\n'''\n    pass"
    },
    {
        "number": 524,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1 2 3\") == \"1\"\nassert solution(\"1 3 2\") == \"1\"\nassert solution(\"1000000000 1000000000 1000000000\") == \"1999982505\"\nassert solution(\"1 3 2\") == \"1\"\n"
    },
    {
        "number": 524,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1 3 2') == '1'\nassert solution('1000000000 1000000000 1000000000') == '1999982505'\n\"\"\"\n"
    },
    {
        "number": 524,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1 3 2') == '1'\nassert solution('1000000000 1000000000 1000000000') == '1999982505'\n'''\n"
    },
    {
        "number": 525,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\n    \"2\\n\" +\n    \"4\\n\" +\n    \"2 1 3 1\\n\" +\n    \"2\\n\" +\n    \"420 420\\n\"\n) == \"1\\n\"\nassert solution(\n    \"2\\n\" +\n    \"5\\n\" +\n    \"2 3 2 1 1\\n\" +\n    \"2\\n\" +\n    \"420 420\\n\"\n) == \"2\\n\"\nassert solution(\n    \"2\\n\" +\n    \"5\\n\" +\n    \"2 3 2 1 1\\n\" +\n    \"2\\n\" +\n    \"420 420\\n\"\n) == \"2\\n\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 525,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''2\n4\n2 1 3 1\n2''') == '1'\n\nassert solution('''2\n420 420\n''') == '2'\n\n\n>>> \n"
    },
    {
        "number": 525,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == expected\n\"\"\"\n\nfrom math import ceil\n"
    },
    {
        "number": 525,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('2\\n4\\n2 1 3 1\\n2\\n420 420\\n') == '1'\nassert solution('2\\n4\\n2 1 3 1\\n2\\n420 420\\n') == '2'\nassert solution('2\\n4\\n2 1 3 1\\n2\\n420 420\\n') == '2'\nassert solution('2\\n4\\n2 1 3 1\\n2\\n420 420\\n') == '2'\nassert solution('2\\n4\\n2 1 3 1\\n2\\n420 420\\n') == '2'\n"
    },
    {
        "number": 525,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''2\n4\n2 1 3 1\n2\n420 420\n''') == '1'\n\nassert solution('''2\n4\n2 1 3 1\n2\n420 420\n''') == '2'\n\nassert solution('''2\n4\n2 1 3 1\n2\n420 420\n''') == '2'\n\nassert solution('''2\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1"
    },
    {
        "number": 525,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('2\\n4\\n2 1 3 1\\n2') == '1'\nassert solution('2\\n420 420\\n') == '2'\n'''\n"
    },
    {
        "number": 525,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('2\\n4\\n2 1 3 1\\n2\\n420 420') == 1\nassert solution('1\\n2\\n3\\n4') == 0\nassert solution('1\\n2\\n3\\n4\\n4') == 2\nassert solution('5\\n1 2 3 4 5') == 1\nassert solution('10\\n1 2 3 4 5 6 7 8 9 10') == 1\n"
    },
    {
        "number": 525,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"\") == 0\nassert solution(\"2\\n\") == 0\nassert solution(\"2\\n2\\n\") == 0\nassert solution(\"2\\n2\\n2\\n\") == 0\nassert solution(\"2\\n2\\n2\\n2\") == 0\n"
    },
    {
        "number": 525,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''4\n2 1 3 1''') == 1\nassert solution('''4\n2 1 1 1''') == 2\nassert solution('''8\n2 1 2 1 1 2 1 2 1''') == 2\nassert solution('''2\n1000000000 1000000000''') == 1\nassert solution('''7\n5 1 2 3 4 5 6 7''') == 1\n"
    },
    {
        "number": 525,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''\n3\n2 1 3 1\n2\n420 420\n''') == '1'\n\n\n'''\n"
    },
    {
        "number": 526,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('4 3\\n0 0 0 0\\n0 0 0 0\\n0 0 0 0\\n0 0 0 0') == 'NIE\\n1 3'\nassert solution('5 3\\n7 7 7 7\\n7 7 7 7\\n7 7 7 7\\n7 7 7 7\\n7 7 7 7') == 'TAK\\n1 3'\nassert solution('5 2\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1') == 'NIE'\nassert solution('5 2\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1') == 'NIE'\nassert solution('5 2\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1') == 'NIE'\n"
    },
    {
        "number": 526,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('2 2') == 'NIE'\nassert solution('2 3') == 'TAK'\nassert solution('3 3') == 'NIE'\nassert solution('3 4') == 'TAK'\nassert solution('4 3') == 'NIE'\n"
    },
    {
        "number": 526,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''3 2\n0 0\n0 0\n0 0''') == \"NIE\"\nassert solution('''2 3\n7 7 7\n7 7 10''') == \"1 3\"\n"
    },
    {
        "number": 526,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"0 0\\n0 0\") == \"NIE\"\nassert solution(\"1 1\\n0 0\") == \"NIE\"\nassert solution(\"3 2\\n0 0\\n0 0\\n0 0\") == \"TAK\"\nassert solution(\"3 2\\n0 0\\n0 0\\n0 0\\n0 0\") == \"NIE\"\n"
    },
    {
        "number": 526,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''3 2\n0 0\n0 0\n0 0''') == 'NIE'\nassert solution('''2 3\n7 7 7\n7 7 10''') == 'TAK'"
    },
    {
        "number": 526,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('3 2\\n0 0\\n0 0\\n0 0') == 'NIE'\nassert solution('2 3\\n7 7 7\\n7 7 10') == '1 3'\nassert solution('3 4\\n1 3 1 2\\n2 3 2 1\\n1 3 3') == '1 2 3'\n"
    },
    {
        "number": 526,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''3 2\n0 0\n0 0\n0 0''') == 'NIE'\nassert solution('''2 3\n7 7 7\n7 7 10''') == 'TAK'\nassert solution('''2 3\n5 4 5\n5 4 6''') == 'NIE'\nassert solution('''2 3\n7 7 7\n7 7 10''') == 'NIE'\nassert solution('''1 1\n1 1 1''') == 'NIE'\n"
    },
    {
        "number": 526,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''3 2\n0 0\n0 0\n0 0''') == \"NIE\"\nassert solution('''2 3\n7 7 7\n7 7 10''') == \"TAK\"\nassert solution('''4 2\n2147483647 2147483647\n2147483647 2147483647\n2147483647 2147483647\n2147483647 2147483647''') == \"TAK\"\nassert solution('''8 3\n3 6 9 7\n4 1 2\n1 2 3\n2 3 4\n3 4 5\n4 5 6\n5 6 7\n6 7 8''') == \"NIE\"\nassert solution('''5 5\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1''') == \"TAK\"\n"
    },
    {
        "number": 526,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"\"\"3 2\"\"\") == \"\"\"NIE\"\"\"\nassert solution(\"\"\"2 3\"\"\") == \"\"\"TAK\"\"\"\nassert solution(\"\"\"7 7 7\"\"\") == \"\"\"1 3\"\"\""
    },
    {
        "number": 526,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('2 3\\n7 7 7\\n7 7 10') == 'TAK'\nassert solution('3 2\\n0 0\\n0 0\\n0 0') == 'NIE'\nassert solution('3 2\\n0 0\\n0 0\\n0 0') == 'NIE'\nassert solution('3 2\\n7 7 7\\n7 7 10') == 'TAK'\nassert solution('3 2\\n0 0\\n0 0\\n0 0') == 'NIE'\n"
    },
    {
        "number": 527,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('contest') == '10'\nassert solution('son') == '9'\nassert solution('contestco') == '-1'\nassert solution('contestcontest') == '10'\nassert solution('son') == '9'\n"
    },
    {
        "number": 527,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('contest') == '10'\nassert solution('son') == '10'\nassert solution('contest') == '-1'\nassert solution('co') == '-1'\nassert solution('co') == '-1'\n"
    },
    {
        "number": 527,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('contest') == '10'\nassert solution('son') == '10'\nassert solution('c') == '-1'\nassert solution('t') == '-1'\nassert solution('contestco') == '-1'\n"
    },
    {
        "number": 527,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('contest') == '10'\nassert solution('son') == '-1'\nassert solution('test') == '-1'\nassert solution('contesttest') == '10'\nassert solution('con') == '-1'\n"
    },
    {
        "number": 527,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('contest') == '10'\nassert solution('son') == '10'\nassert solution('contestcontest') == '10'\nassert solution('son') == '-1'\nassert solution('contestco') == '-1'\n"
    },
    {
        "number": 527,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('contest') == '10'\nassert solution('son') == '10'\nassert solution('contest') == '9'\nassert solution('contest') == '-1'\nassert solution('contest') == '-1'\n"
    },
    {
        "number": 527,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('contest') == '10'\nassert solution('son') == '-1'\nassert solution('c') == '-1'\nassert solution('contest') == '10'\nassert solution('contest') == '10'\n"
    },
    {
        "number": 527,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('son') == '10'\nassert solution('contest') == '-1'\nassert solution('c') == '-1'\nassert solution('test') == '-1'\nassert solution('contestcon') == '10'\n"
    },
    {
        "number": 527,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('') is None\nassert solution('ab') is None\nassert solution('abcdef') is None\nassert solution('abcde') is None\nassert solution('abcd') == '-1'\n"
    },
    {
        "number": 527,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('contest') == '10'\nassert solution('son') == '9'\nassert solution('contest') == '10'\nassert solution('son') == '9'\nassert solution('con') == '-1'\n"
    },
    {
        "number": 528,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('4 3\\n1 3\\n3 4\\n1 4\\n') == 'YES\\n'\nassert solution('4 4\\n3 1\\n2 3\\n3 4\\n1 2\\n') == 'NO\\n'\nassert solution('10 4\\n4 3\\n5 10\\n8 9\\n1 2\\n') == 'YES\\n'\nassert solution('3 2\\n1 2\\n2 3\\n') == 'NO\\n'\n\"\"\""
    },
    {
        "number": 528,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''\n4 3\n1 3\n3 4\n1 4\n\n''') == 'YES'\nassert solution('''\n4 4\n3 1\n2 3\n3 4\n1 2\n\n''') == 'NO'\nassert solution('''\n3 2\n1 2\n2 3\n\n''') == 'NO'\nassert solution('''\n10 4\n4 3\n5 10\n8 9\n1 2\n\n''') == 'YES'\nassert solution('''\n10 4\n4 3\n5 10\n8 9\n1 2\n\n''') == 'NO'\n\n'''\n\n'''"
    },
    {
        "number": 528,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"4 3\\n1 3\\n3 4\\n1 4\") == \"YES\"\nassert solution(\"4 4\\n3 1\\n2 3\\n3 4\\n1 2\\n\") == \"NO\"\nassert solution(\"4 4\\n3 1\\n1 2\\n3 4\\n1 2\\n\") == \"NO\"\nassert solution(\"4 4\\n3 1\\n3 4\\n1 2\\n3 4\\n1 2\") == \"NO\"\n\"\"\"\n\nfrom typing import List, Tuple\n"
    },
    {
        "number": 528,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"NO\"\nassert solution(\"1 2 3 4\") == \"NO\"\nassert solution(\"1 2 3 4 5 6 7 8 9\") == \"NO\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10\") == \"YES\"\n"
    },
    {
        "number": 528,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"\"\"4 3\n1 3\n3 4\n1 4\n\"\"\") == \"YES\"\nassert solution(\"\"\"4 4\n3 1\n2 3\n3 4\n1 2\n\"\"\") == \"NO\"\nassert solution(\"\"\"10 4\n4 3\n5 10\n8 9\n1 2\n\"\"\") == \"YES\"\nassert solution(\"\"\"3 2\n1 2\n2 3\n\"\"\") == \"NO\"\n\n\n\n\"\"\"\n"
    },
    {
        "number": 528,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(input) == expected_output\n\nimport sys\nfrom io import StringIO"
    },
    {
        "number": 528,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''4 3\n1 3\n3 4\n1 4''') == 'YES'\nassert solution('''4 4\n3 1\n2 3\n3 4\n1 2\n''') == 'NO'\nassert solution('''10 4\n4 3\n5 10\n8 9\n1 2\n3 4\n9 10\n2 3\n5 9\n9 8\n''') == 'YES'\nassert solution('''3 2\n1 2\n2 3\n''') == 'NO'\n'''\n"
    },
    {
        "number": 528,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"4 3\n1 3\n3 4\n1 4\n\"\"\"\n    ) == \"YES\"\n\nassert solution(\n\"\"\"4 4\n3 1\n2 3\n3 4\n1 2\n\"\"\"\n    ) == \"NO\"\n\nassert solution(\n\"\"\"3 2\n1 2\n2 3\n\"\"\"\n    ) == \"NO\"\n\nassert solution(\n\"\"\"1 2\n2 3\n3 4\n1 4\n\"\"\"\n    ) == \"YES\"\n"
    },
    {
        "number": 528,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"4 3\\n1 3\\n3 4\\n1 4\") == \"YES\"\nassert solution(\"4 4\\n3 1\\n2 3\\n3 4\\n1 2\\n\") == \"NO\"\nassert solution(\"10 4\\n4 3\\n5 10\\n8 9\\n1 2\\n\") == \"YES\"\nassert solution(\"3 2\\n1 2\\n2 3\\n\") == \"NO\"\nassert solution(\"3 3\\n1 2\\n2 3\\n3 1\\n\") == \"NO\"\n"
    },
    {
        "number": 528,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(input('')) == output('')\n'''\n"
    },
    {
        "number": 529,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(input) == expect\n\n\"\"\"\n\n\"\"\"\nMay the code below turn out to be useful!\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 529,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(input()) == str(input())\n\"\"\"\n"
    },
    {
        "number": 529,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('APrilFool') == 'AprILFooL'\nassert solution('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 529,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution([\"AprilFool\", \"14\"]) == \"AprILFooL\""
    },
    {
        "number": 529,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('AprilFool') == 'AprILFooL'\nassert solution('abac') == 'abAC'\nassert solution('abcd') == 'abcd'\nassert solution('12345') == '123450'\nassert solution('abcde') == 'abCdE'\n"
    },
    {
        "number": 529,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"cba\") == \"abc\"\nassert solution(\"Hello World\") == \"Hello World\"\nassert solution(\"abC\") == \"ABC\"\nassert solution(\"Hello World\") == \"Hello World\"\nassert solution(\"HeLlo WorLd\") == \"Hello World\"\n"
    },
    {
        "number": 529,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == \"AprILFooL\"\nInput\nJune\n0\n\nOutput\nJuLn\n"
    },
    {
        "number": 529,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('dYy') == 'Day'\nassert solution('AuUw') == 'Aug'\nassert solution('X') == 'X'\nassert solution('o') == 'O'\nassert solution('t') == 'T'\n"
    },
    {
        "number": 529,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"May the fourth be with you\") == \"Maythefourthbewithyou\"\nassert solution(\"5\") == \"5\"\nassert solution(\"a2\") == \"a2\"\nassert solution(\"MATT\") == \"MATT\"\nassert solution(\"May the fourth be with you\") == \"Maythefourthbewithyou\"\n"
    },
    {
        "number": 529,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('AprilFool') == 'AprILFooL'\nassert solution('Hello') == 'Helo'\nassert solution('Hi') == 'Hi'\nassert solution('april') == 'april'\nassert solution('9041') == '90401'\n"
    },
    {
        "number": 530,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"Hello world\") == \"First\"\nassert solution(\"0\") == \"Second\"\nassert solution(\"0\") == \"Draw\"\nassert solution(\"0\") == \"Draw\"\nassert solution(\"0\") == \"Draw\"\n"
    },
    {
        "number": 530,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"Hello World\") == \"Hello World\"\nassert solution(\"0111\") == \"First\"\nassert solution(\"0001\") == \"Second\"\nassert solution(\"110110\") == \"First\"\nassert solution(\"001001\") == \"Draw\"\n"
    },
    {
        "number": 530,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1') == ''\nassert solution('2') == ''\nassert solution('3') == ''\nassert solution('4') == ''\n"
    },
    {
        "number": 530,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1 0') == '1'\nassert solution('1 1') == '1'\nassert solution('1 0 0') == '1'\n"
    },
    {
        "number": 530,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1234') == 'First'\nassert solution('1101') == 'First'\nassert solution('11010001') == 'First'\nassert solution('1101000100') == 'First'\nassert solution('11010001001111') == 'First'\n"
    },
    {
        "number": 530,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('0'*5+'1'*5) == 'First'\nassert solution('1'*5+'0'*5) == 'Second'\nassert solution('1'*5+'1'*5) == 'Draw'\n"
    },
    {
        "number": 530,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"2\\n0111\\n0001\\n\") == \"First\"\nassert solution(\"3\\n110110\\n001001\\n\") == \"First\"\nassert solution(\"4\\n01010110\\00101101\\n\") == \"Draw\"\nassert solution(\"2\\n1000000\\n1000000\\n\") == \"Second\"\n"
    },
    {
        "number": 530,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == 'First'\nassert solution(stdin) == 'Second'\nassert solution(stdin) == 'Draw'\nassert solution(stdin) == 'Draw'\nassert solution(stdin) == 'Draw'\n"
    },
    {
        "number": 530,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''2\n0111\n0001\n''') == 'First'\nassert solution('''3\n110110\n001001\n''') == 'First'\nassert solution('''4\n01010110\n00101101\n''') == 'Second'\nassert solution('''2\n111000\n000111\n''') == 'Draw'\nassert solution('''2\n01100000\n10010011\n''') == 'Second'\n"
    },
    {
        "number": 530,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''2\n0111\n0001''') == 'First'\nassert solution('''3\n110110\n001001''') == 'First'\nassert solution('''4\n01010110\n00101101''') == 'First'\nassert solution('''3\n111000\n000111''') == 'Second'\nassert solution('''4\n01100000\n10010011''') == 'Second'\n\n\n\"\"\""
    },
    {
        "number": 531,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''6\n-1 1 1 0 0 -1''') == '2'\nassert solution('''3\n100 100 101''') == '3'\nassert solution('''7\n-10 -9 -10 -8 -10 -9 -9''') == '5'\nassert solution('''10\n-100 -99 -98 -97 -98 -99 -98 -99 -98 -99 -98 -98 -98 -99 -98 -99 -99 -98 -98 -99 -98 -99 -98 -99 -99 -99 -98 -99 -98 -99 -98 -99 -98 -99 -99 -98 -99 -99 -98 -98 -99 -98 -99 -99 -99 -98 -99 -99 -98 -99 -99 -98 -99 -98 -99 -99 -98 -99 -99 -99 -99 -99 -98 -99 -98 -99 -99 -99 -98 -99 -99 -99 -98 -99 -99 -98 -99 -99 -98 -99 -99 -98 -99 -99 -99 -99 -98 -99 -99 -99 -99 -98 -99 -98 -99 -99 -99 -98 -99 -99 -99 -99 -98 -99 -99 -99 -99 -99 -98 -99 -99 -99 -99 -99 -99 -98 -99 -99 -99 -99 -99 -99 -98 -99 -99 -99 -99 -99 -99 -98 -99 -99 -99 -99 -98 -99 -99 -99 -99 -98 -99 -99 -99 -98 -99 -98 -99 -99 -99 -98 -99 -99 -99 -99 -99 -98 -99 -99 -99 -99 -98 -99 -99 -99 -99 -99 -99 -98 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -98 -99 -99 -99 -99 -99 -98 -99 -99 -99 -99 -99 -99 -98 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -98 -99 -99 -99 -99 -99 -99 -99 -98 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -98 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -98 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -98 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -98 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -98 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -98 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -98 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -"
    },
    {
        "number": 531,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('100') == '2'\nassert solution('101') == '3'\nassert solution('100 100 101') == '3'\n"
    },
    {
        "number": 531,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('6\\n-1 1 1 0 0 -1') == '2\\n0 0 0 0 0 0'\nassert solution('3\\n100 100 101') == '3\\n101 100 100'\nassert solution('7\\n-10 -9 -10 -8 -10 -9 -9') == '5\\n-10 -10 -9 -9 -9 -9 -9'\n\n\n\"\"\"\n\nn = int(input())\n\nX = list(map(int, input().split()))\n\nX_min = min(X)\nX_max = max(X)\n\nY_min = min(X)\nY_max = max(X)\n\nX_avg = sum(X)/n\nY_avg = sum(X)/n\n\nnum_equal_measure = 0\n\nfor X_item in X:\n    if abs(X_item-X_avg) < 2 and X_item!= Y_avg:\n        num_equal_measure += 1\n        \nfor Y_item in X:\n    if abs(Y_item-Y_avg) < 2 and Y_item!= X_avg:\n        num_equal_measure += 1\n        \nprint(num_equal_measure)\n\nfor i in range(n):\n    if X[i]!= X_avg:\n        X[i] = Y_avg\n    if Y[i]!= Y_avg:\n        Y[i] = X_avg\n"
    },
    {
        "number": 531,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('6\\n-1 1 1 0 0 -1\\n') == '2'\nassert solution('3\\n100 100 101\\n') == '3'\nassert solution('7\\n-10 -9 -10 -8 -10 -9 -9\\n') == '5'\nassert solution('2\\n2 2 2\\n') == '2'\nassert solution('10\\n
    },
    {
        "number": 531,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('5\\n-10 -9 -10 -8 -10 -9 -9') == '5\\n-10 -10 -9 -9 -9 -9 -9'\nassert solution('7\\n-10 -9 -10 -8 -10 -9 -9') == '3\\n101 100 100'\nassert solution('7\\n-10 -9 -10 -8 -10 -9 -9') == '3\\n101 100 100'\nassert solution('7\\n-10 -9 -10 -8 -10 -9 -9') == '3\\n101 100 100'\nassert solution('7\\n-10 -9 -10 -8 -10 -9 -9') == '3\\n101 100 100'\n"
    },
    {
        "number": 531,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('-10 -9 -10 -8 -10 -9 -9') == '-10 -10 -9 -9 -9 -9 -9'\nassert solution('100 100 101') == '101 100 100'\nassert solution('-10 -9 -10 -8 -10 -9 -9') == '-10 -10 -9 -9 -9 -9 -9'\nassert solution('-10 -9 -10 -8 -10 -9 -9') == '-10 -10 -9 -9 -9 -9 -9'\nassert solution('100 100 101') == '101 100 100'\n"
    },
    {
        "number": 531,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('2\\n1 1 1 0 0\\n') == '2\\n0 0 0 0 0 0'\nassert solution('6\\n-1 1 1 0 0 -1\\n') == '2\\n0 0 0 0 0 0'\nassert solution('7\\n-10 -9 -10 -8 -10 -9 -9\\n') == '5\\n-10 -10 -9 -9 -9 -9 -9'\n\n\"\"\""
    },
    {
        "number": 531,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('6\\n-1 1 1 0 0 -1\\n') == '2\\n0 0 0 0 0 0'\nassert solution('3\\n100 100 101\\n') == '3\\n101 100 100'\nassert solution('7\\n-10 -9 -10 -8 -10 -9 -9\\n') == '5\\n-10 -10 -9 -9 -9 -9 -9'\nassert solution('9\\n-1 1 1 1 1 1 1 1\\n') == '9\\n1 1 1 1 1 1 1 1'\nassert solution('12\\n-2 2 2 2 2 2 2 2 -2\\n') == '6\\n2 2 2 2 2 2 2 2'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 531,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"6\\n-1 1 1 0 0 -1\") == \"2\\n0 0 0 0 0 0\"\nassert solution(\"3\\n100 100 101\") == \"3\\n101 100 100\"\nassert solution(\"7\\n-10 -9 -10 -8 -10 -9 -9\") == \"5\\n-10 -10 -9 -9 -9 -9 -9 -9\"\nassert solution(\"10\\n1 1 1 1 1 1 1 1 1 1\") == \"1\\n1 1 1 1 1 1 1 1 1 1\"\nassert solution(\"10\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\") == \"1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\"\n"
    },
    {
        "number": 531,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('-1 1 1 0 0 -1\\n') == '2\\n0 0 0 0 0 0\\n'\nassert solution('3\\n-10 -9 -10 -8 -10 -9 -9\\n') == '5\\n-10 -10 -9 -9 -9 -9 -9\\n'\nassert solution('7\\n-10 -9 -10 -8 -10 -9 -9\\n') == '5\\n-10 -10 -9 -9 -9 -9 -9\\n'\nassert solution('9\\n100 100 101\\n') == '3\\n101 100 100\\n'\nassert solution('10\\n-10 -9 -10 -8 -10 -9 -9 -8 -10\\n') == '5\\n-10 -9 -9 -8 -10 -9 -9 -9 -9 -9 -10\\n'\n"
    },
    {
        "number": 532,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('ab') == 'ab'\nassert solution('abc') == 'abc'\nassert solution('abcdefg') == 'abcdefg'\n"
    },
    {
        "number": 532,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('ares') == '34'\nassert solution('map') == '35'\nassert solution('are') == '34'\nassert solution('yew') == '33'\n"
    },
    {
        "number": 532,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('are') == '34'\nassert solution('map') == '35'\nassert solution('z') == '18'\nassert solution('zx') == '19'\nassert solution('x') == '1'\n"
    },
    {
        "number": 532,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('zeus') == '18'\nassert solution('map') == '35'\nassert solution('ares') == '34'\nassert solution('ctcb') == '45'\nassert solution('tnmh') == '45'\n"
    },
    {
        "number": 532,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('zeus') == '18'\nassert solution('map') == '35'\nassert solution('ares') == '34'\nassert solution('zeus') == '18'\nassert solution('map') == '35'\n"
    },
    {
        "number": 532,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('areus') == '34'\nassert solution('ares') == '34'\nassert solution('ares') == '34'\nassert solution('eudes') == '34'\nassert solution('eudes') == '34'\n"
    },
    {
        "number": 532,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('zeus') == 18\nassert solution('map') == 35\nassert solution('ares') == 34\nassert solution('a') == 1\nassert solution('z') == 1\n"
    },
    {
        "number": 532,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"z\") == 18\nassert solution(\"map\") == 35\nassert solution(\"ares\") == 34\nassert solution(\"aaaa\") == 0\nassert solution(\"asdfasdf\") == 0\n"
    },
    {
        "number": 532,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('zeus') == 18\nassert solution('map') == 35\nassert solution('ares') == 34\nassert solution('was') == 36\nassert solution('jur') == 30\n\n\n\n'''"
    },
    {
        "number": 532,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('zeus') == 18\nassert solution('map') == 35\nassert solution('ares') == 34\n"
    },
    {
        "number": 533,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 533,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\n"
    },
    {
        "number": 533,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('2\\n3\\n5\\n1\\n8') == '0 4'\nassert solution('3\\n1\\n6\\n7\\n25') == '4 4'\nassert solution('6\\n4\\n9\\n10\\n89') == '5 9'\nassert solution('3\\n1\\n6\\n4\\n10') == '5 8'\nassert solution('3\\n2\\n1\\n2\\n3') == '2 1'\n"
    },
    {
        "number": 533,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"\n2\n3\n5\n1\n8\n\"\"\") == \"\"\"\n0 4\n\"\"\"\nassert solution(\n\"\"\"\n3\n1\n6\n7\n25\n\"\"\") == \"\"\"\n4 4\n\"\"\"\nassert solution(\n\"\"\"\n6\n4\n9\n10\n89\n\"\"\") == \"\"\"\n5 9\n\"\"\""
    },
    {
        "number": 533,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''2\n3\n5\n1\n8''') == '0 4'\n\nassert solution('''3\n1\n6\n7\n25''') == '4 4'\n\nassert solution('''6\n4\n9\n10\n89\n''') == '5 9'\n\nassert solution('''4\n1\n9\n10\n89\n''') == '5 9'\n"
    },
    {
        "number": 533,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == '0 4'\n\"\"\"\n"
    },
    {
        "number": 533,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('2\\n3\\n5\\n1\\n8\\n') == '0 4'\nassert solution('3\\n1\\n6\\n7\\n25\\n') == '4 4'\nassert solution('6\\n4\\n9\\n10\\n89\\n') == '5 9'\n\"\"\""
    },
    {
        "number": 533,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('2\\n3\\n5\\n1\\n8') == '0 4'\nassert solution('3\\n1\\n6\\n7\\n25') == '4 4'\nassert solution('6\\n4\\n9\\n10\\n89') == '5 9'\n"
    },
    {
        "number": 533,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''2\n3\n5\n1\n8\n''') == '0 4'\n\nassert solution('''3\n1\n6\n7\n25\n''') == '4 4'\n\nassert solution('''6\n4\n9\n10\n89\n''') == '5 9'\n\nassert solution('''1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n''') == '54 76'\n\nassert solution('''0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n''') == '54 76'"
    },
    {
        "number": 533,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''\n2\n3\n5\n1\n8\n''') == '0 4'\n\nassert solution('''\n3\n1\n6\n7\n25\n''') == '4 4'\n\nassert solution('''\n6\n4\n9\n10\n89\n''') == '5 9'\n'''\n\n'''\n"
    },
    {
        "number": 534,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(input()) == output"
    },
    {
        "number": 534,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"5 2\\nBGGBG\") == \"GGBGB\"\nassert solution(\"5 1\\nBGGB\") == \"GBGB\"\nassert solution(\"5 2\\nBGGBG\") == \"GBGGB\"\nassert solution(\"5 2\\nGGBGG\") == \"GBGGB\"\nassert solution(\"5 2\\nGGGGG\") == \"GGGGB\"\n"
    },
    {
        "number": 534,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"5 1\\nBGGBG\") == \"GBGGB\"\nassert solution(\"5 2\\nBGGBG\") == \"GGBGB\"\nassert solution(\"4 1\\nGGGB\") == \"GGGB\"\n"
    },
    {
        "number": 534,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"BGGGB\") == \"GBGGB\"\nassert solution(\"BGGBG\") == \"GBGGB\"\nassert solution(\"GGGB\") == \"GBGGB\"\nassert solution(\"GGGGB\") == \"GBGBG\"\n"
    },
    {
        "number": 534,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"5 2\\nBGGBG\") == \"GGBGB\"\nassert solution(\"5 1\\nBGGBG\") == \"GBGGB\"\nassert solution(\"4 1\\nGGGB\") == \"GGBGB\"\nassert solution(\"4 3\\nBGBGB\") == \"BGBGB\"\nassert solution(\"3 5\\nBGBGB\") == \"BGBGB\"\n"
    },
    {
        "number": 534,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"4 1\") == \"GBGB\"\nassert solution(\"5 1\") == \"GBGGB\"\nassert solution(\"5 2\") == \"GGBGB\"\nassert solution(\"6 1\") == \"GGGGB\"\nassert solution(\"10 1\") == \"GGGBGBGBGBGBGBGB\"\n"
    },
    {
        "number": 534,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('5 1\\nBGGBG') == 'GBGGB'\nassert solution('5 2\\nBGGBG') == 'GGBGB'\nassert solution('4 1\\nGGGB') == 'GGGB'\n"
    },
    {
        "number": 534,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('GBGGB') == 'GGBGB'\nassert solution('GGGB') == 'GBGGB'\nassert solution('BGBGGGB') == 'GGGBGB'\nassert solution('BGGBGGB') == 'GGBGBG'\nassert solution('GBGBGGB') == 'GBGBGGB'\n"
    },
    {
        "number": 534,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('5 1\\nBGGBG') == 'GBGGB'\nassert solution('5 2\\nBGGBG') == 'GGBGB'\nassert solution('4 1\\nGGGB') == 'GGGB'\nassert solution('4 2\\nGGGB') == 'GBGB'\nassert solution('2 1\\nB') == 'B'\n"
    },
    {
        "number": 534,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\n'''5 1\nBGGBG'''\n) == 'GBGGB'\nassert solution(\n'''5 2\nBGGBG'''\n) == 'GGBGB'\nassert solution(\n'''4 1\nGGGB'''\n) == 'GBGG'\nassert solution(\n'''5 5\nBGGBGGBGBGBGBGGB'''\n) == 'GBGBGBGBGBGBGBGB'"
    },
    {
        "number": 535,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('2 1') == '1'\nassert solution('6 1') == '3'\nassert solution('6 2') == '875000008'\nassert solution('60 5') == '237178099'\nassert solution('60 5') == '237178099'\n"
    },
    {
        "number": 535,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('4 5\\n6 1\\n') == '3'\nassert solution('60 5\\n6 2\\n') == '875000008'\nassert solution('60 0\\n6 2\\n') == '237178099'\nassert solution('60 1\\n6 2\\n') == '237178099'\nassert solution('60 1\\n0 2\\n') == '1000000000'\n"
    },
    {
        "number": 535,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == expected\nprint(expected)"
    },
    {
        "number": 535,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"15\"\nassert solution(stdin) == \"875000008\"\nassert solution(stdin) == \"237178099\"\nassert solution(stdin) == \"237178099\"\n"
    },
    {
        "number": 535,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('6 1') == '3'\nassert solution('6 2') == '875000008'\nassert solution('60 5') == '237178099'\nassert solution('1000 5') == '120350847586'\nassert solution('1000 1000') == '61749997657599'\n"
    },
    {
        "number": 535,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('0 1') == '0'\nassert solution('1 1') == '1'\nassert solution('1 1') == '1'\nassert solution('1 1') == '1'\nassert solution('1 1') == '1'\n"
    },
    {
        "number": 535,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('6 1') == '3'\nassert solution('6 2') == '875000008'\nassert solution('60 5') == '237178099'\nassert solution('20 10') == '10000000001'\nassert solution('20 20') == '1000000000000000000'\n"
    },
    {
        "number": 535,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == ''\n"
    },
    {
        "number": 535,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1 1\\n') == '1'\nassert solution('2 1\\n') == '2'\nassert solution('2 2\\n') == '4'\nassert solution('4 1\\n') == '5'\nassert solution('4 2\\n') == '10'\n"
    },
    {
        "number": 535,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('6 1') == '3'\nassert solution('6 2') == '875000008'\nassert solution('60 5') == '237178099'\nassert solution('60 10') == '4723894759'\nassert solution('60 1') == '3'\n"
    },
    {
        "number": 536,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"1 2\") == \"101\"\nassert solution(\"4 8\") == \"110110110101\"\nassert solution(\"4 10\") == \"11011011011011\"\nassert solution(\"1 5\") == \"-1\""
    },
    {
        "number": 536,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('1 2') == '101'\nassert solution('4 8') == '110110110101'\nassert solution('1 5') == '-1'\nassert solution('4 10') == '11011011011011'\nassert solution('4 2') == '-1'\n"
    },
    {
        "number": 536,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''1 2''') == '101'\nassert solution('''4 8''') == '110110110101'\nassert solution('''4 10''') == '11011011011011'\nassert solution('''1 5''') == '-1'"
    },
    {
        "number": 536,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 536,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"1 2\") == \"101\"\nassert solution(\"4 8\") == \"110110110101\"\nassert solution(\"4 10\") == \"11011011011011\"\nassert solution(\"1 5\") == \"-1\"\nassert solution(\"2 2\") == \"-1\"\n"
    },
    {
        "number": 536,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 536,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('1 2') == '101'\nassert solution('4 8') == '110110110101'\nassert solution('4 10') == '11011011011011'\nassert solution('1 5') == '-1'\nassert solution('10 50') == '-1'\n"
    },
    {
        "number": 536,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\n\n\"\"\"\n"
    },
    {
        "number": 536,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1 2') == '101'\nassert solution('4 8') == '110110110101'\nassert solution('4 10') == '11011011011011'\nassert solution('1 5') == '-1'\nassert solution('2 4') == '10101'\n"
    },
    {
        "number": 536,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1 2\\n') == '101'\nassert solution('1 10\\n') == '110110110101'\nassert solution('4 8\\n') == '110110110101'\nassert solution('4 8\\n') == '110110110101'\nassert solution('1 5\\n') == '-1'\n"
    },
    {
        "number": 537,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\n\"\"\"18 2\n\"\"\"\n) == \"3 6 9\"\n\nassert solution(\n\"\"\"9 10\n\"\"\"\n) == \"0 0 9\"\n\nassert solution(\n\"\"\"1000000000000 5\n\"\"\"\n) == \"83333333333 416666666665 500000000002\"\n\nassert solution(\n\"\"\"1000000000000 499999999999\n\"\"\"\n) == \"1 499999999999 500000000000\"\n"
    },
    {
        "number": 537,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1 2') == '0 0 9'\nassert solution('5 2') == '3 6 9'\nassert solution('9 10') == '0 0 9'\nassert solution('1000000000000 5') == '83333333333 416666666665 500000000002'\n"
    },
    {
        "number": 537,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('18 2') == '3 6 9'\nassert solution('9 10') == '0 0 9'\nassert solution('1000000000000 5') == '83333333333 416666666665 500000000002'\nassert solution('1000000000000 499999999999') == '1 499999999999 500000000000'\nassert solution('18 23 24') == '3 6 9'\n"
    },
    {
        "number": 537,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"1 2\") == \"3 6 9\"\nassert solution(\"2 3\") == \"0 0 9\"\nassert solution(\"1 1\") == \"0 0 0\"\nassert solution(\"10 10\") == \"83333333333 416666666665 500000000002\"\nassert solution(\"5 5\") == \"1 499999999999 500000000000\"\n"
    },
    {
        "number": 537,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"18 2\") == \"3 6 9\"\nassert solution(\"9 10\") == \"0 0 9\"\nassert solution(\"1000000000000 5\") == \"83333333333 416666666665 500000000002\"\nassert solution(\"1000000000000 499999999999\") == \"1 499999999999 500000000000\"\nassert solution(\"1000000000000 1\") == \"0 0 9\"\n"
    },
    {
        "number": 537,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('18 2') == '3 6 9'\nassert solution('9 10') == '0 0 9'\nassert solution('1000000000000 5') == '83333333333 416666666665 500000000002'\nassert solution('1000000000000 499999999999') == '1 499999999999 500000000000'\n\nprint('solution:', solution(stdin.read()))\n"
    },
    {
        "number": 537,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''18 2''') == '3 6 9'\nassert solution('''9 10''') == '0 0 9'\nassert solution('''1000000000000 5''') == '83333333333 416666666665 500000000002'\nassert solution('''1000000000000 499999999999''') == '1 499999999999 500000000000'\n"
    },
    {
        "number": 537,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('18 2\\n') == '3 6 9'\nassert solution('9 10\\n') == '0 0 9'\nassert solution('1000000000000 5\\n') == '83333333333 416666666665 500000000002'\nassert solution('1000000000000 499999999999\\n') == '1 499999999999 500000000000'\nassert solution('50000000 10000000\\n') == '0 0 9'"
    },
    {
        "number": 537,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 537,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"18 2\") == \"3 6 9\"\nassert solution(\"9 10\") == \"0 0 9\"\nassert solution(\"1000000000000 5\") == \"83333333333 416666666665 500000000002\"\nassert solution(\"1000000000000 499999999999\") == \"1 499999999999 500000000000\"\nassert solution(\"9 9\") == \"0 0 9\"\n"
    },
    {
        "number": 538,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"test\") == \"NO\"\nassert solution(\"test\") == \"NO\"\nassert solution(\"111111\") == \"YES\"\nassert solution(\"101\") == \"YES\"\nassert solution(\"1000\") == \"NO\"\n"
    },
    {
        "number": 538,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(131) == \"YES\"\nassert solution(320) == \"NO\"\nassert solution(2010200) == \"YES\"\nassert solution(101) == \"NO\"\n"
    },
    {
        "number": 538,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('131') == \"YES\"\nassert solution('320') == \"NO\"\nassert solution('2010200') == \"YES\"\nassert solution('100') == \"NO\"\nassert solution('10000') == \"NO\"\n"
    },
    {
        "number": 538,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('131') == \"YES\"\nassert solution('320') == \"NO\"\nassert solution('2010200') == \"YES\"\nassert solution('0123') == \"NO\"\nassert solution('0000') == \"NO\"\n"
    },
    {
        "number": 538,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('11') == 'YES'\nassert solution('10') == 'NO'\nassert solution('101') == 'NO'\nassert solution('01') == 'NO'\nassert solution('001') == 'NO'\n"
    },
    {
        "number": 538,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('131') == 'YES'\nassert solution('320') == 'NO'\nassert solution('2010200') == 'YES'\n"
    },
    {
        "number": 538,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"131\") == \"YES\"\nassert solution(\"320\") == \"NO\"\nassert solution(\"2010200\") == \"YES\"\nassert solution(\"0\") == \"NO\""
    },
    {
        "number": 538,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(input()) == \"YES\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"YES\"\nassert solution(input()) == \"NO\"\n"
    },
    {
        "number": 538,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('131') == 'YES'\nassert solution('320') == 'NO'\nassert solution('2010200') == 'YES'\nassert solution('x') == 'NO'"
    },
    {
        "number": 538,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(input()) == expected\n\"\"\"\n"
    },
    {
        "number": 539,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('6') == '1'\nassert solution('10') == '2'\n"
    },
    {
        "number": 539,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('6\\n') == '1\\n'\nassert solution('10\\n') == '2\\n'\nassert solution('2\\n') == '1\\n'\nassert solution('1\\n') == '1\\n'\nassert solution('0\\n') == '1\\n'\n"
    },
    {
        "number": 539,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''6\n''') == '1'\nassert solution('''10\n''') == '2'\nassert solution('''20\n''') == '0'\nassert solution('''50\n''') == '1'\nassert solution('''600\n''') == '2'\n"
    },
    {
        "number": 539,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\""
    },
    {
        "number": 539,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == str(solution(stdin))\nassert solution(\"1\\n\") == \"1\"\n\nimport unittest\n\nclass TestSolution(unittest.TestCase):\n\n    def test_solution(self):\n        self.assertEqual(solution(stdin), str(solution(stdin)))"
    },
    {
        "number": 539,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''6''') == '1'\nassert solution('''10''') == '2'\nassert solution('''29''') == '21'\nassert solution('''1079''') == '204'\nassert solution('''29''') == '21'\n"
    },
    {
        "number": 539,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"5\") == \"1\"\nassert solution(\"6\") == \"1\"\nassert solution(\"7\") == \"2\"\nassert solution(\"8\") == \"3\"\nassert solution(\"9\") == \"4\"\n"
    },
    {
        "number": 539,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 539,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('5\\n') == '2'\nassert solution('10\\n') == '2'\nassert solution('11\\n') == '3'\nassert solution('13\\n') == '2'\nassert solution('17\\n') == '1'\n"
    },
    {
        "number": 539,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('a') == ''\nassert solution('a a') == 'a a'\nassert solution('a a a') == 'a a'\nassert solution('a a a a') == 'a a'\n"
    },
    {
        "number": 540,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('4 6') == 'YES'\nassert solution('5 4') == 'NO'\n\n\n-----\n\nn, m = [int(x) for x in stdin.read().split()]\ngrid = [stdin.read().strip() for _ in range(n)]"
    },
    {
        "number": 540,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\""
    },
    {
        "number": 540,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''4 6\nX...XX\n...XX.\n.X..X.\n......\n1 6\n2 2''') == 'YES'\nassert solution('''5 4\n.X..\n...X\nX.X.\n....\n.XX.\n5 3\n1 1''') == 'NO'\nassert solution('''4 7\n..X.XX.\n.XX..X.\nX...X..\nX......\n2 2\n1 6\n''') == 'YES'\n\n'''\n"
    },
    {
        "number": 540,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''\n4 6\nX...XX\n...XX.\n.X..X.\n......\n1 6\n2 2\n''') == 'YES'\n\nassert solution('''\n5 4\n.X..\n...X\nX.X.\n....\n.XX.\n5 3\n1 1\n''') == 'NO'\n\nassert solution('''\n4 7\n..X.XX.\n.XX..X.\nX...X..\nX......\n2 2\n1 6\n''') == 'YES'\n\n\n\n\n\"\"\"\nfrom collections import defaultdict\n\nclass Solution:\n    def check_position(self, n, m, r, c):\n        if r < 1 or r >= n or c < 1 or c >= m:\n            return False\n        return True\n    def is_allowed(self, r, c, n, m, grid):\n        if not self.check_position(n, m, r, c):\n            return False\n        if grid[r][c] == 'X':\n            return False\n        return True\n    \n    def check_if_valid(self, r_, c_, n, m, grid, visited, dest):\n        return (r_, c_) not in visited and self.is_allowed(r_, c_, n, m, grid)\n    \n    def check_if_possible(self, r_1, c_1, r_2, c_2, visited, dest):\n        return (r_1, c_1) == (r_2, c_2) or (r_1, c_1) in visited and (r_2, c_2) in visited\n    \n    def solve(self, n, m, grid):\n        if n == 0 or m == 0:\n            return 'NO'\n        if n == 1 or m == 1:\n            return 'YES'\n        visited = set()\n        dest = (n, m)\n        queue = [(r_1, c_1, r_2, c_2) for r_1, row in enumerate(grid) for c_1, col in enumerate(row) if self.check_if_valid(r_1, c_1, n, m, grid, visited, dest) for r_2, row in enumerate(grid) for c_2, col in enumerate(row) if self.check_if_possible(r_1, c_1, r_2, c_2, visited, dest)]\n        return 'YES' if dest in queue else 'NO'\n\n\nassert Solution().solve(4, 6, '''\nX...XX\n...XX.\n.X..X.\n......\n1 6\n2 2\n''') == 'YES'\n\nassert Solution().solve(5, 4, '''\n.X..\n...X\nX.X.\n....\n.XX.\n5 3\n1 1\n''') == 'NO'"
    },
    {
        "number": 540,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(input) == 'YES'\n\"\"\""
    },
    {
        "number": 540,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"2 3\") == \"YES\"\nassert solution(\"2 2\") == \"YES\"\nassert solution(\"1 6\") == \"NO\"\nassert solution(\"1 1\") == \"YES\"\nassert solution(\"1 3\") == \"YES\"\n"
    },
    {
        "number": 540,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == 'YES'\n\n'''\n'''\n"
    },
    {
        "number": 540,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''4 7\n..X.XX.\n.XX..X.\nX...X..\nX......\n2 2\n1 6''') == 'YES'\nassert solution('''5 3\n.X..\n...X\nX.X.\n....\n.XX.\n5 3\n1 1''') == 'NO'\nassert solution('''2 2\n1 1\n1 1''') == 'YES'\nassert solution('''3 2\n.X\n...\n..X\n..X''') == 'NO'\nassert solution('''7 7\n.X.X.X.\n.X.X.X.\n.X.X.X.\n.X.X.X.\n.X.X.X.\n.X.X.X.\n.X.X.X.\n.X.X.X.\n''') == 'YES'\n"
    },
    {
        "number": 540,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(input) == output\n\n\"\"\"\n\n\"\"\"\nACCEPTED\n\"\"\"\n"
    },
    {
        "number": 540,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"\"\"3 3\nX...\n....\n....\n....\n\"\"\") == \"YES\"\n\nassert solution(\"\"\"5 4\n.X..\n.XX.\nX...\nX....\n2 2\n1 6\"\"\") == \"NO\"\n\nassert solution(\"\"\"3 6\n..X.\n...X\n.X..\n.X..\nX.X.\nX..X.\nX.X..\n3 2\n1 1\"\"\") == \"NO\"\n\n\n\"\"\""
    },
    {
        "number": 541,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''5 2''') == '1'\nassert solution('''5 2\n1 4''') == '1'\nassert solution('''5 2\n2 5''') == '1'\nassert solution('''5 2\n1 4\n2 5''') == '2'\nassert solution('''5 2\n1 4\n1 3''') == '2'\n"
    },
    {
        "number": 541,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('1 2\\n2 3') == 1\nassert solution('1 2\\n2 1') == 2\nassert solution('1 1\\n1 1') == 0\nassert solution('2 3\\n1 2\\n1 2') == 1\nassert solution('3 5\\n1 2\\n2 3\\n3 4') == 2\n"
    },
    {
        "number": 541,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('5 2\\n1 4\\n2 5\\n') == 1\nassert solution('1 1\\n1 1\\n') == 0\nassert solution('1 1\\n1 1\\n1 1\\n') == 0\nassert solution('1 1\\n1 1\\n') == 0\nassert solution('2 3\\n1 2\\n2 3\\n') == 1\n"
    },
    {
        "number": 541,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1\\n4\\n2\\n5\\n') == '1'\nassert solution('1\\n5\\n1\\n2\\n3\\n4\\n') == '0'\nassert solution('2\\n1\\n3\\n4\\n5\\n') == '2'\nassert solution('1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\"
    },
    {
        "number": 541,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n5 2\n1 4\n2 5\n\"\"\") == \"1\"\nassert solution(\"\"\"\n4 3\n1 2\n3 4\n1 2\n2 3\n\"\"\") == \"2\"\nassert solution(\"\"\"\n7 2\n1 5\n2 6\n2 3\n3 4\n3 5\n4 6\n4 7\n\"\"\") == \"4\"\nassert solution(\"\"\"\n10 10\n2 4\n3 5\n7 9\n3 5\n2 6\n3 5\n5 6\n3 5\n2 7\n4 6\n1 3\n2 7\n1 4\n2 5\n2 6\n3 6\n3 7\n3 8\n4 8\n1 7\n2 8\n1 9\n2 9\n2 10\n\"\"\") == \"0\"\nassert solution(\"\"\"\n100 100\n2 4\n3 5\n7 9\n3 5\n2 6\n3 5\n5 6\n3 5\n2 7\n4 6\n1 3\n2 7\n1 4\n2 5\n2 6\n3 6\n3 7\n3 8\n4 8\n1 7\n2 8\n1 9\n2 9\n2 10\n\"\"\") == \"10\"\n\n\"\"\"\nYour task is to create a function that meets the following conditions:\n- has three arguments\n- takes the arguments a, b, and c (a, b, and c being the numbers of islands on the west side, and the two numbers of bridges from west to east)\n- returns a minimum number of bridges that must be removed to meet all the requests\n- returns -1 if it is not possible to meet all the requests\n- return -1 if there are not at least 2 islands\n- return 0 if there are no requests\n- return 0 if there are no bridges between the two islands\n- return -1 if the number of bridges is greater than the number of requests\n- return -1 if the number of bridges is greater than half the number of requests\n\nThe arguments will always be valid (so there will be no \"invalid\" numbers).\nThe function should return a positive integer that denotes the minimum number of bridges that must be removed.\n- If there are no requests, the function should return 0.\n- If there are no bridges, the function should return -1.\n- If there are no islands, the function should return -1.\n- If there are no requests or no bridges, the function should return -1.\n- If the number of bridges is greater than the number of requests, the function should return -1.\n- If the number of bridges is greater than half the number of requests, the function should return -1.\n\"\"\""
    },
    {
        "number": 541,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"5 2\") == \"1\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"5 1\") == \"0\"\nassert solution(\"5 1\") == \"0\"\nassert solution(\"5 1\") == \"0\"\n"
    },
    {
        "number": 541,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"5 2\") == \"1\"\nassert solution(\"5 2\") == \"1\"\nassert solution(\"1 1\") == \"\"\nassert solution(\"2 3\") == \"1\"\nassert solution(\"5 3\") == \"0\"\n"
    },
    {
        "number": 541,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''5 2\n1 4\n2 5''') == '1'\nassert solution('''6 4\n1 2\n1 3\n2 4\n2 5\n3 5\n4 5''') == '2'\nassert solution('''4 2\n1 3\n2 4\n3 5\n4 5\n''') == '0'\nassert solution('''5 2\n1 2\n1 3\n2 4\n2 5\n3 5\n''') == '1'\nassert solution('''10 5\n1 4\n1 7\n2 6\n2 8\n3 8\n3 9\n4 9\n5 9\n6 9\n7 9\n8 9\n9 9''') == '2'\n"
    },
    {
        "number": 541,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('5 2') == '1'\nassert solution('5 4') == '2'\nassert solution('5 4\\n1 4\\n2 5') == '1'\nassert solution('5 10') == '5'\nassert solution('5 100') == '5'\n"
    },
    {
        "number": 541,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('2 3\\n1 2\\n2 3\\n') == 1\nassert solution('3 10\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10') == 0\nassert solution('3 10\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10') == 0\nassert solution('6 10\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10') == 1\nassert solution('6 10\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10') == 0\n"
    },
    {
        "number": 542,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1\\n2') == 'first'\nassert solution('2\\n-1') =='second'\nassert solution('2\\n3') == 'first'\nassert solution('2\\n-2') =='second'\nassert solution('1\\n3') == 'first'\n"
    },
    {
        "number": 542,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('3\\n1\\n-3\\n-4\\n3') =='second'\nassert solution('3\\n1\\n2\\n-4\\n3') == 'first'\nassert solution('3\\n1\\n-3\\n-4\\n3') == 'first'\nassert solution('3\\n-1\\n-2\\n3') =='second'\nassert solution('3\\n-1\\n2\\n-3\\n3') == 'first'\n"
    },
    {
        "number": 542,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"5\") == \"first\"\nassert solution(\"3\") == \"second\"\nassert solution(\"1 2 3 4 -3 -2 -1\") == \"first\"\nassert solution(\"-4 -3 -2 -1 4 3 2 1\") == \"second\"\nassert solution(\"-1 -2 -3 -4 -5 -6 -7 -8 -9 -10 -11 -12 -13 -14 -15 -16 -17 -18 -19 -20 -21 -22 -23 -24 -25 -26 -27 -28 -29 -30 -31 -32 -33 -34 -35 -36 -37 -38 -39 -40 -41 -42 -43 -44 -45 -46 -47 -48 -49 -50 -51 -52 -53 -54 -55 -56 -57 -58 -59 -60 -61 -62 -63 -64 -65 -66 -67 -68 -69 -70 -71 -72 -73 -74 -75 -76 -77 -78 -79 -80 -81 -82 -83 -84 -85 -86 -87 -88 -89 -90 -91 -92 -93 -94 -95 -96 -97 -98 -99 -100\") == \"second\"\n"
    },
    {
        "number": 542,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1\\n1') == 'first'\nassert solution('1\\n2') =='second'\nassert solution('1\\n-1') == 'first'\nassert solution('2\\n1') =='second'\nassert solution('1\\n-2') == 'first'\n"
    },
    {
        "number": 542,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''5\n1\n2\n-3\n-4\n3''') == 'first'\n\nassert solution('''3\n-1\n-2\n3''') =='second'\n\nassert solution('''2\n4\n-4''') == 'first'\n\nassert solution('''1\n2''') == 'first'\n\nassert solution('''1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99''') =='second'\n"
    },
    {
        "number": 542,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('5') =='second'\nassert solution('5\\n1\\n2\\n-3\\n-4\\n3') == 'first'\nassert solution('3\\n-1\\n-2\\n3') == 'first'\nassert solution('3\\n-1\\n-2\\n3\\n3\\n3') == 'first'\nassert solution('3\\n-1\\n-2\\n3\\n-1') =='second'\n"
    },
    {
        "number": 542,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('5\\n1\\n2\\n-3\\n-4\\n3\\n') =='second'\nassert solution('3\\n-1\\n-2\\n3\\n') == 'first'\nassert solution('2\\n4\\n-4\\n') =='second'\nassert solution('2\\n4\\n-4\\n') == 'first'\nassert solution('2\\n4\\n-4\\n') =='second'\n"
    },
    {
        "number": 542,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == \"first\"\nassert solution(stdin) == \"second\"\nassert solution(stdin) == \"second\"\nassert solution(stdin) == \"first\"\nassert solution(stdin) == \"first\"\n"
    },
    {
        "number": 542,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"first\"\nassert solution(\"2\") == \"second\"\nassert solution(\"1 2 3 4 -4 -3 2 1 4 3 -2\") == \"first\"\nassert solution(\"1 2 3 4 -4 -3 2 1 4 3 -2\") == \"second\"\n"
    },
    {
        "number": 542,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == expected\n'''\n"
    },
    {
        "number": 543,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 2 1\\n\") == \"NO\"\nassert solution(\"1\\n1\\n\") == \"YES\"\nassert solution(\"1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1"
    },
    {
        "number": 543,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''4\n1 2 1 2''') == 'YES'\nassert solution('''3\n1 0 1''') == 'NO'\nassert solution('''2\n1 0''') == 'NO'\nassert solution('''1\n0''') == 'YES'\nassert solution('''1000''') == 'NO'\n"
    },
    {
        "number": 543,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(input()) == \"YES\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"NO\"\n"
    },
    {
        "number": 543,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 543,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdin\n\"\"\"\n"
    },
    {
        "number": 543,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''4\n1 2 1 2\n''') == 'YES'\nassert solution('''3\n1 0 1\n''') == 'NO'\nassert solution('''2\n2 1\n''') == 'YES'\nassert solution('''1\n0\n''') == 'NO'\nassert solution('''2\n1 0\n''') == 'NO'\n"
    },
    {
        "number": 543,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''3\n1 2 1 2''') == 'YES'\nassert solution('''2\n1 0 1''') == 'NO'\nassert solution('''2\n1 1 1''') == 'YES'\nassert solution('''4\n2 3 3 1''') == 'NO'\nassert solution('''2\n1 1 1''') == 'YES'\n"
    },
    {
        "number": 543,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''4\n1 2 1 2''') == \"YES\"\nassert solution('''3\n1 0 1''') == \"NO\"\n'''\n    n = int(stdin.readline())\n    ans = \"NO\"\n    for _ in range(n):\n        ans = \"YES\" if all(a <= 10 for a in map(int, stdin.readline().split())) else ans\n    print(ans)"
    },
    {
        "number": 543,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"2\\n1 2 1 2\") == \"NO\"\nassert solution(\"3\\n1 0 1\\n\") == \"YES\"\nassert solution(\"2\\n2 1 1\\n\") == \"NO\"\n\"\"\""
    },
    {
        "number": 543,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == 'NO'\nassert solution(\"4\\n1 2 1 2\") == 'YES'\nassert solution(\"3\\n1 0 1\") == 'NO'\nassert solution(\"4\\n1 1 1 1\") == 'YES'\nassert solution(\"3\\n0 1 1\") == 'NO'\n"
    },
    {
        "number": 544,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"abccba\") == \"YES\"\nassert solution(\"cf\") == \"NO\"\nassert solution(\"adfa\") == \"NO\"\nassert solution(\"abaazaba\") == \"YES\"\nassert solution(\"ml\") == \"NO\"\n"
    },
    {
        "number": 544,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''5\n6\nabccba\n2\ncf\n4\nadfa\n8\nabaazaba\n2\nml''') == \"YES\\nNO\\nYES\\nNO\\nNO\"\nassert solution('''5\n6\nabccba\n2\ncf\n4\nadfa\n8\nabaazaba\n2\nml\n5\nyz''') == \"YES\\nNO\\nNO\\nYES\\nNO\"\nassert solution('''5\n6\nabccba\n2\ncf\n4\nadfa\n8\nabaazaba\n2\nml\n6\nzk''') == \"NO\"\nassert solution('''5\n6\nabccba\n2\ncf\n4\nadfa\n8\nabaazaba\n2\nml\n7\nkk''') == \"NO\"\n'''\nassert solution('''5\n6\nabccba\n2\ncf\n4\nadfa\n8\nabaazaba\n2\nml\n8\nkk''') == \"YES\"\n"
    },
    {
        "number": 544,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('a') == 'a'\nassert solution('ab') == 'ba'\nassert solution('abc') == 'cba'\nassert solution('bca') == 'cba'\nassert solution('bccc') == 'cbcb'\n"
    },
    {
        "number": 544,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"abccba\") == \"YES\"\nassert solution(\"cf\") == \"NO\"\nassert solution(\"adfa\") == \"NO\"\nassert solution(\"abaazaba\") == \"YES\"\nassert solution(\"ml\") == \"NO\"\n"
    },
    {
        "number": 544,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('codeforces') == 'dpedepqbft'\nassert solution('abcdefghi') == 'abcdfehi'\nassert solution('zyxwvutsrqponmlkjihgfedcba') == 'zyxwvutsrqponmlkjihgfedcbq'\nassert solution('pdpbqcjqcqzfzcqwqwuqwbfzjcdqpwqwdqwqwdfqzfqwqwqbcfwqwqdbfqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqw"
    },
    {
        "number": 544,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == expected\n\"\"\"\n\nfrom sys import stdin,stdout\nn = int(stdin.readline())\nfor _ in range(n):\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    s1 = s[0]\n    s2 = s[-1]\n    for i in range(1, n - 1):\n        if s[i] == s[i - 1] or s[i] == s[i + 1]:\n            s1 = s1 + s[i]\n        else:\n            s2 = s2 + s[i]\n    if s1 == s1[::-1]:\n        stdout.write(\"YES\")\n    else:\n        stdout.write(\"NO\")"
    },
    {
        "number": 544,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('abccba') == 'YES'\nassert solution('cf') == 'NO'\nassert solution('adfa') == 'YES'\nassert solution('abaazaba') == 'YES'\nassert solution('ml') == 'NO'\n"
    },
    {
        "number": 544,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('abccba') == 'YES'\nassert solution('cf') == 'NO'\nassert solution('adfa') == 'YES'\nassert solution('abaazaba') == 'YES'\nassert solution('ml') == 'NO'\n"
    },
    {
        "number": 544,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n\nimport sys\nfrom functools import reduce\nfrom collections import Counter\nsys.setrecursionlimit(10**7)"
    },
    {
        "number": 544,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdin\n\n\"\"\"\n"
    },
    {
        "number": 545,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\n'''3 2\nabc\nxyc''') == 'ayd'\nassert solution(\n'''1 0\nc\nb''') == '-1'\nassert solution(\n'''6 3\ncxzxx\ncxzxx\ncxzxx\ncxzxx\ncxzxx''') == 'cxzxx'\nassert solution(\n'''3 3\nxzyx\nxyz\nxyz''') == 'xyz'\n"
    },
    {
        "number": 545,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 545,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('stdin') == 'ayd'\nassert solution('a') == 'a'\nassert solution('c') == '-1'\n"
    },
    {
        "number": 545,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''3 2\nabc\nxyc''') == 'ayd'\nassert solution('''1 0\nc\nb''') == '-1'\nassert solution('''3 1\nabc\nc''') == 'c'\n"
    },
    {
        "number": 545,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 545,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdin[2:len(stdin)-2]\nassert solution(\"\"\"abc\nxyc\n\"\"\") == \"ayd\"\nassert solution(\"\"\"c\nc\n\"\"\") == \"c\"\nassert solution(\"\"\"1\nabc\n\"\"\") == \"-1\"\nassert solution(\"\"\"1\nab\n\"\"\") == \"b\"\n"
    },
    {
        "number": 545,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('abc') == 'ayd'\nassert solution('xyc') == 'ayd'\nassert solution('c') == '-1'\nassert solution('b') == '-1'\nassert solution('ab') == '-1'\n"
    },
    {
        "number": 545,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''2\nabc\nxyc''') == 'ayd'\nassert solution('''3\nabc\nxyc\n''') == 'a'\nassert solution('''10\nabcdabc\nabcdxyc''') == 'abcdxyc'\nassert solution('''10\nabcdabc\nabcdxyc\n''') == 'abcdxyc'\nassert solution('''10\nabc\nabcd\n''') == 'abc'\n"
    },
    {
        "number": 545,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('abc', 'xyc') == 'ayd'\nassert solution('abc', 'xcy') == 'b'\nassert solution('abc', 'xcy') == 'b'\nassert solution('abc', 'axy') == '-'\nassert solution('abc', 'b') == '-'"
    },
    {
        "number": 545,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''3 2\nabc\nxyc''') == 'ayd'\nassert solution('''1 0\nc\nb''') == '-1'\nassert solution('''0 10\na''') == '-1'\nassert solution('''2 3\nabc\ncba''') == 'bcb'\nassert solution('''1 1\na''') == 'a'\n"
    },
    {
        "number": 546,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(input) == output\n"
    },
    {
        "number": 546,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''ab\na?a\n2\naaa\naab\n''') == 'NO\\nYES'\nassert solution('''ab\na?a\n2\nabacaba\nabaca\napapa\naaaaax\n''') == 'NO\\nNO\\nNO\\nYES'\nassert solution('''abc\na?a?a*\n4\nabacaba\nabaca\napapa\naaaaax\n''') == 'NO\\nYES\\nNO\\nYES'\nassert solution('''a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?"
    },
    {
        "number": 546,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('ab') == 'YES'\nassert solution('a?a') == 'YES'\nassert solution('abc') == 'NO'\nassert solution('a?a?a*') == 'YES'\nassert solution('abacaba') == 'YES'\n"
    },
    {
        "number": 546,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('ab') == 'YES'\nassert solution('a?a') == 'YES'\nassert solution('aaa') == 'YES'\nassert solution('aab') == 'NO'\nassert solution('abacaba') == 'YES'\n"
    },
    {
        "number": 546,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('ab') == 'YES'\nassert solution('a?a') == 'YES'\nassert solution('aaa') == 'NO'\nassert solution('aab') == 'YES'\nassert solution('abacaba') == 'NO'\n"
    },
    {
        "number": 546,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n"
    },
    {
        "number": 546,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"ab\") == \"YES\"\nassert solution(\"a?a\") == \"YES\"\nassert solution(\"a*a\") == \"YES\"\nassert solution(\"ab*a\") == \"YES\"\nassert solution(\"a?a?*\") == \"YES\"\n"
    },
    {
        "number": 546,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(input) == input\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 546,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('abc') == ''\nassert solution('a?a') == 'NO'\nassert solution('a?b?c?d*') == 'YES'\nassert solution('a?ab?ac?ad?ae?*') == 'YES'\n"
    },
    {
        "number": 546,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"ab\") == \"NO\"\nassert solution(\"a?a\") == \"YES\"\nassert solution(\"a?a\") == \"NO\"\nassert solution(\"a?a\") == \"NO\"\nassert solution(\"ab\") == \"NO\"\n"
    },
    {
        "number": 547,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"1 2\\n1\\n2\") == \"1 1\"\nassert solution(\"5 3\\ncba\\nabc\\nbb1\\nabC\\nABC\\nabc\\n\") == \"1 4\"\nassert solution(\"4 100\\n11\\n22\\n1\\n2\\n22\\n\") == \"3 4\"\n\n\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 547,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"1 2\") == \"1 2\"\nassert solution(\"10 2\") == \"5 4\"\nassert solution(\"5 2\") == \"1 2\"\n\n\n\n\"\"\"\n"
    },
    {
        "number": 547,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('4 3\\n11\\n22\\n1\\n2\\n22\\n') == '3 4'\nassert solution('5 1\\n11\\n22\\n1\\n2\\n22\\n') == '1 15'\nassert solution('4 100\\n11\\n22\\n1\\n2\\n22\\n') == '3 4'\nassert solution('4 100\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n"
    },
    {
        "number": 547,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == expected\nprint(solution(stdin))\n\"\"\"\n\nn, k = [int(x) for x in stdin.strip().split(' ')]"
    },
    {
        "number": 547,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('5 2\\ncba\\nabc\\nbb1\\nabC\\nABC\\naBc') == '1 15'\nassert solution('4 100\\n11\\n22\\n1\\n2\\n22\\n') == '3 4'\n"
    },
    {
        "number": 547,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"2 3\\na\\nb\\nc\\nd\\ne\\nf\\ng\\nh\\ni\\nj\\nk\\nl\\nn\\no\\np\\q\") == \"0 1\"\nassert solution(\"5 2\\ncba\\nabc\\nbb1\\abC\\ABC\\abC\\abc\\n\\n\\n\") == \"1 15\"\nassert solution(\"4 100\\n11\\n22\\n1\\n2\\n22\\n\") == \"3 4\"\nassert solution(\"4 100\\n11\\n22\\n1\\n2\\n22\\n\") == \"3 4\"\nassert solution(\"4 100\\n11\\n22\\n1\\n2\\n22\\n\") == \"3 4\"\n"
    },
    {
        "number": 547,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''5 2''') == '1 15'\nassert solution('''4 100''') == '3 4'"
    },
    {
        "number": 547,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 547,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('5 2\\ncba\\nabc\\nbb1\\nabC\\nABC\\nabc\\n') == '1 15'\nassert solution('4 100\\n11\\n22\\n1\\n2\\n22\\n') == '3 4'\nassert solution('3 3\\n1\\n2\\n2\\n') == '4 4'\nassert solution('3 4\\n1\\n2\\n2\\n') == '4 4'\nassert solution('2 2\\n1\\n2\\n') == '3 3'\n"
    },
    {
        "number": 547,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1 10') == '2 4'\nassert solution('2 10') == '2 7'\nassert solution('2 10') == '3 6'\nassert solution('2 2') == '4 2'\nassert solution('1 100') == '3 4'\n"
    },
    {
        "number": 548,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdin\n\"\"\"\n"
    },
    {
        "number": 548,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('1\\n3 2 3\\n') == 'First'\nassert solution('2\\n2 2\\n') == 'Second'\nassert solution('2\\n1 2\\n') == 'First'\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\narr = [int(x) for x in sys.stdin.readline().split()]\narr.sort(reverse=True)\n\ncounter = 0\n\nfor i in range(n):\n    if i == 0:\n        if arr[i] % 2 == 0:\n            break\n        else:\n            counter += 1\n    elif (arr[i-1] + arr[i]) % 2 == 0:\n        break\n    else:\n        counter += 1"
    },
    {
        "number": 548,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('2\\n2\\n') == 'Second'\nassert solution('1\\n3\\n') == 'First'"
    },
    {
        "number": 548,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 3 2 3\\n\") == \"First\"\nassert solution(\"2\\n2 2\\n\") == \"Second\"\nassert solution(\"6\\n2 1 3 5 4 6\\n\") == \"First\"\nassert solution(\"2\\n2 1\\n\") == \"Second\"\nassert solution(\"2\\n2 1\\n\") == \"Second\"\n\n\n\"\"\"\n"
    },
    {
        "number": 548,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == \"First\"\n"
    },
    {
        "number": 548,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == \"First\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\""
    },
    {
        "number": 548,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''4\n1 3 2 3''') == 'First'\nassert solution('''2\n2 2''') == 'Second'\nassert solution('''3\n3 1 3''') == 'First'\nassert solution('''6\n4 8 6 8 4 3 8 6''') == 'Second'\nassert solution('''7\n4 2 6 9 9 4 6 5 9''') == 'First'\n"
    },
    {
        "number": 548,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == \"First\"\nassert solution(stdin) == \"Second\"\nassert solution(stdin) == \"Second\"\nassert solution(stdin) == \"First\"\n\n\"\"\""
    },
    {
        "number": 548,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''4\n1 3 2 3''') == 'First'\nassert solution('''2\n2 2''') == 'Second'\n'''"
    },
    {
        "number": 548,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1\\n1') == 'First'\nassert solution('1\\n3 2') == 'First'\nassert solution('1\\n3 2 3') == 'Second'\nassert solution('1\\n2 2') == 'Second'\nassert solution('1\\n2 3') == 'Second'\n"
    },
    {
        "number": 549,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''8''') == '2 4'\nassert solution('''64''') == '8 8'\nassert solution('''5''') == '1 5'\nassert solution('''999999''') == '999 1001'\nassert solution('''99999999''') == '999 1001'\n"
    },
    {
        "number": 549,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('') == None\nassert solution('4') == None\nassert solution('999999') == None\nassert solution('12345') == None\nassert solution('1234567') == None\n"
    },
    {
        "number": 549,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('8') == '2 4'\nassert solution('64') == '8 8'\nassert solution('5') == '1 5'\nassert solution('999999') == '999 1001'\nassert solution('10000100') == '999 1001'\n"
    },
    {
        "number": 549,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''8''') == '2 4'\nassert solution('''64''') == '8 8'\nassert solution('''5''') == '1 5'\nassert solution('''999999''') == '999 1001'\nassert solution('''1''') == '1 1'"
    },
    {
        "number": 549,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"8\") == \"2 4\"\nassert solution(\"64\") == \"8 8\"\nassert solution(\"5\") == \"1 5\"\nassert solution(\"999999\") == \"999 1001\""
    },
    {
        "number": 549,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('8') == '2 4'\nassert solution('64') == '8 8'\nassert solution('5') == '1 5'\nassert solution('999999') == '999 1001'\n"
    },
    {
        "number": 549,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"8\") == \"2 4\"\nassert solution(\"64\") == \"8 8\"\nassert solution(\"5\") == \"1 5\"\nassert solution(\"999999\") == \"999 1001\"\nassert solution(\"101\") == \"1 10\"\n"
    },
    {
        "number": 549,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('a') == ''\nassert solution('1') == ''\nassert solution('8') == ''\nassert solution('15') == ''\n"
    },
    {
        "number": 549,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"8\") == \"2 4\"\nassert solution(\"64\") == \"8 8\"\nassert solution(\"999999\") == \"999 1001\"\nassert solution(\"64\") == \"8 8\"\nassert solution(\"5\") == \"1 5\"\n"
    },
    {
        "number": 549,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"1 1\"\nassert solution(\"8\") == \"2 4\"\nassert solution(\"64\") == \"8 8\"\nassert solution(\"999999\") == \"999 1001\"\nassert solution(\"123456789\") == \"123456789\"\n"
    },
    {
        "number": 550,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('abc') == 'No'\nassert solution('0Lil') == 'Yes'\nassert solution('_0_') == 'Yes'\nassert solution('0Lil') == 'No'\nassert solution('123') == 'No'\n"
    },
    {
        "number": 550,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('') is None\nassert solution('1') is None\nassert solution('2') is None\nassert solution('12') is None\nassert solution('12L') is None\n"
    },
    {
        "number": 550,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(input()) == 'No'\nassert solution(input()) == 'No'\nassert solution(input()) == 'Yes'\nassert solution(input()) == 'Yes'\nassert solution(input()) == 'Yes'\n"
    },
    {
        "number": 550,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('Codeforces') == 'No'\nassert solution('codeforces') == 'No'\nassert solution('_OO0OOO00O0OOO0O00OOO0OO_lol') == 'Yes'\nassert solution('_ooO0ooO0oOo0o00o0O0o0o0o0_0oOo0ooO0oO0o0o0oO0o0o0o0o0o0oOo0o0o0o0oO0o0o0oO0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o0oOo0o0o"
    },
    {
        "number": 550,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1_wat') == 'Yes'\nassert solution('2_wat') == 'No'\nassert solution('wat_1') == 'Yes'\nassert solution('i_') == 'No'\nassert solution('0Lil') == 'Yes'\n"
    },
    {
        "number": 550,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('aBc') == 'No'\nassert solution('0Lil') == 'Yes'\nassert solution('1a0') == 'No'\nassert solution('1l0') == 'Yes'\nassert solution('0Ril') == 'Yes'\n"
    },
    {
        "number": 550,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('Codeforces') == 'Yes'\nassert solution('code_for_c0d3f0rces') == 'No'\nassert solution('___lol') == 'Yes'\nassert solution('Oo0O00O0O00O00O00OO0OOO00') == 'Yes'\nassert solution('_i_') == 'No'\n"
    },
    {
        "number": 550,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('') == 'Yes'\nassert solution('w') == 'No'\nassert solution('1') == 'No'\nassert solution('1_wat') == 'Yes'\nassert solution('1_wat') == 'Yes'\n"
    },
    {
        "number": 550,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('2') == 'No'\nassert solution('1') == 'Yes'\nassert solution('1_lol') == 'Yes'\nassert solution('1_lol1') == 'No'\nassert solution('lol_1') == 'Yes'\n"
    },
    {
        "number": 550,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('Codeforces') == 'Yes'\nassert solution('codeforces') == 'Yes'\nassert solution('Codeforces') == 'Yes'\nassert solution('code_forces') == 'Yes'\nassert solution('Codeforces') == 'Yes'\n"
    },
    {
        "number": 551,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('5\\n7 5 8 6 9') == 'Yes'\nassert solution('5\\n-1 -2 0 0 -5') == 'No'\nassert solution('5\\n1000000000 0 0 0 0') == 'Yes'\nassert solution('5\\n-1 -2 0 0 -5') == 'No'\n\n\n\"\"\"\n\n\nfrom math import gcd\n"
    },
    {
        "number": 551,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''5''') == \"Yes\"\nassert solution('''5\n-1 -2 0 0 -5''') == \"No\"\nassert solution('''5\n1000000000 0 0 0 0''') == \"Yes\"\nassert solution('''5\n1000000000 0 0 0 0''') == \"Yes\"\nassert solution('''7\n-1 -2 0 0 -5''') == \"No\"\n"
    },
    {
        "number": 551,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('5\\n7 5 8 6 9\\n') == 'Yes'\nassert solution('5\\n-1 -2 0 0 -5\\n') == 'No'\nassert solution('5\\n1000000000 0 0 0 0\\n') == 'Yes'\nassert solution('3\\n1 0 0\\n') == 'No'\nassert solution('1\\n1000000000 0 0 0 0\\n') == 'Yes'\n"
    },
    {
        "number": 551,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(input()) == 'Yes'"
    },
    {
        "number": 551,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('5\\n7 5 8 6 9\\n') == 'Yes'\nassert solution('5\\n-1 -2 0 0 -5\\n') == 'No'\nassert solution('5\\n1000000000 0 0 0 0\\n') == 'Yes'\n\n'''\n"
    },
    {
        "number": 551,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('5\\n7 5 8 6 9') == 'Yes'\nassert solution('5\\n-1 -2 0 0 -5') == 'No'\nassert solution('5\\n1000000000 0 0 0 0') == 'Yes'\n\n\n\"\"\"\n\nfrom math import gcd\nn = int(input())\ny = list(map(int, input().split()))"
    },
    {
        "number": 551,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n"
    },
    {
        "number": 551,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('5\\n7 5 8 6 9') == 'Yes'\nassert solution('5\\n-1 -2 0 0 -5') == 'No'\nassert solution('5\\n1000000000 0 0 0 0') == 'Yes'\nassert solution('5\\n1000000000 0 0 0 0') == 'Yes'\nassert solution('5\\n1000000000 0 0 0 0') == 'Yes'\n"
    },
    {
        "number": 551,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('5\\n7 5 8 6 9') == 'Yes'\nassert solution('5\\n-1 -2 0 0 -5') == 'No'\nassert solution('5\\n1000000000 0 0 0 0') == 'Yes'\nassert solution('5\\n5 4 3 2 1') == 'No'\nassert solution('5\\n1000000000 0 0 0 0') == 'Yes'\n"
    },
    {
        "number": 551,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdin\n\"\"\"\n"
    },
    {
        "number": 552,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1\\n3\\n1') == '1'\nassert solution('1\\n3\\n2') == '0'\nassert solution('1\\n2\\n1') == '0'\nassert solution('2\\n3\\n1') == '2'\nassert solution('2\\n3\\n2') == '0'\n"
    },
    {
        "number": 552,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"6 5\\naabbaa\\naaaab\\naaaaa\\n\") == \"4\\n\"\nassert solution(\"5 4\\azaza\\zazaz\\azaz\\n\") == \"11\\n\"\nassert solution(\"9 12\\abcabcabc\\xyzxyzxyz\\abcabcayzxyz\\n\") == \"2\\n\"\nassert solution(\"9 12\\abcabcabc\\xyzxyzxyz\\abcabcayzxyz\\n\") == \"2\\n\"\nassert solution(\"9 12\\abcabcabc\\xyzxyzxyz\\abcabcayzxyz\\n\") == \"2\\n\"\n"
    },
    {
        "number": 552,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"12\") == \"2\"\nassert solution(\"6 5\") == \"4\"\nassert solution(\"5 4\") == \"11\"\nassert solution(\"9 12\") == \"2\"\n\n\n'''\n"
    },
    {
        "number": 552,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(input(\"\")) == \"\"\nassert solution(input(\"\\n\\n\")) == \"\"\nassert solution(input(\"\\n\\n\\n\")) == \"\"\nassert solution(input(\"\")) == \"\"\nassert solution(input(\"\\n\\n\")) == \"\"\n"
    },
    {
        "number": 552,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(input()) == output\n\n\"\"\""
    },
    {
        "number": 552,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('2 3\\naabbaa\\nbbaaab\\nbaaaaaa\\n') == '4'\nassert solution('2 3\\naabbaa\\nbbaaab\\nbaaaaaa\\n') == '4'\nassert solution('2 3\\naabbaa\\nbbaaab\\nbaaaaaa\\n') == '4'\n\n\n\n\n\n---\n\n\n_Note:_\n\n\n\n-----Hint-----\n\n\n\n\"\"\"\n"
    },
    {
        "number": 552,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 552,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdin\n\n'''"
    },
    {
        "number": 552,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''6 5\naabbaa\nbaaaab\naaaaa\n''') == '4'\n\nassert solution('''5 4\nazaza\nzazaz\nazaz\n''') == '11'\n\nassert solution('''9 12\nabcabcabc\nxyzxyzxyz\nabcabcayzxyz\n''') == '2'\n'''\n"
    },
    {
        "number": 552,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"4 3\") == \"2\"\nassert solution(\"6 5\") == \"4\"\nassert solution(\"9 12\") == \"2\"\n\n\n\n'''\n"
    },
    {
        "number": 553,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('0') == ''\nassert solution('1') == '1'\nassert solution('100') == '0'\nassert solution('0101010101') == '0'\n"
    },
    {
        "number": 553,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('1 0') == '1'\nassert solution('0 1') == '2'\nassert solution('2 3') == '0'\nassert solution('3 2') == '1'\nassert solution('1 2 1') == '1'\n"
    },
    {
        "number": 553,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"0\"\nassert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"3\"\nassert solution(\"6\") == \"4\"\n"
    },
    {
        "number": 553,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''2\n000000\n999999''') == '2'\nassert solution('''6\n211111\n212111\n222111\n111111\n112111\n121111''') == '0'\n'''\n\nfrom itertools import permutations"
    },
    {
        "number": 553,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"11\") == \"\"\nassert solution(\"22\") == \"\"\nassert solution(\"123\") == \"\"\nassert solution(\"12345\") == \"\"\n"
    },
    {
        "number": 553,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 553,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"6\") == \"0\"\nassert solution(\"123456\") == \"0\"\nassert solution(\"123465\") == \"2\"\nassert solution(\"111111\") == \"0\"\n"
    },
    {
        "number": 553,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('000000\\n999999\\n') == '2'\nassert solution('111111\\n') == '0'\nassert solution('212111\\n') == '0'\nassert solution('000009\\n') == '2'\nassert solution('099999\\n') == '0'\n"
    },
    {
        "number": 553,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('00000\\n90009') == '2'\nassert solution('011110\\n011110') == '0'\nassert solution('212111\\n212111') == '0'\nassert solution('211111\\n212111') == '1'\nassert solution('221112\\n221112') == '2'\n"
    },
    {
        "number": 553,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''\n2\n000000\n999999\n''') == '2'\n\nassert solution('''\n6\n211111\n212111\n222111\n111111\n112111\n121111\n''') == '0'\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(input) == 0\n\"\"\"\n\nn, m = map(int, stdin.split())\narr = list(map(int, stdin.split()))\n\narr = [0] + arr\n\ndp = [0 for _ in range(m+1)]\n\nfor i in range(1, m+1):\n    for j in range(1, n+1):\n        dp[i] = max(dp[i], dp[i-j] + arr[j] * i)\n\nprint(dp[-1])\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''5 4\n1 -2 1 3 -4\n1 2\n4 5\n3 4\n1 4''') == '7'\nassert solution('''2 2\n-1 -2\n1 1\n1 2\n''') == '0'\nassert solution('''6 5\n1 3 2 5 -3\n2 5\n3 4\n4 5\n4 2\n5 3\n''') == '16'\nassert solution('''2 1\n-1\n1\n1''') == '0'\nassert solution('''10 10\n-4 -2 3 2 1 1 2 -3 -4\n3 4\n1 4\n4 5\n3 4\n5 2\n-2 -3\n-4 -1\n3 4\n2 3\n2 4\n-2 -3\n-3 -4\n''') == '40'\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''5 3\n1 -2 1 3 -4\n1 2\n4 5\n3 4\n1 4\n''') == '7'\n\nassert solution('''4 3\n1 2 3 4\n1 3\n2 4\n1 1\n''') == '0'"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''5 4\n1 -2 1 3 -4\n1 2\n4 5\n3 4\n1 4''') == '7'\nassert solution('''2 2\n-1 -2\n1 1\n1 2\n''') == '0'\nassert solution('''5 3\n1 2 3 4\n1 3\n2 4\n1 1\n''') == '16'\nassert solution('''5 5\n1 -2 1 3 -4\n1 2\n4 5\n3 4\n1 4\n''') == '0'\nassert solution('''2 2\n-1 -2\n1 1\n1 2\n''') == '0'\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1 2\\n1 2') == '0'\nassert solution('2 3\\n1 2\\n1 3\\n2 3') == '16'\nassert solution('3 5\\n1 2 3 4 5\\n2 3 4\\n1 1\\n1 2\\n2 2') == '0'\nassert solution('2 2\\n1 -2\\n1 1\\n1 2\\n2 -2') == '0'\nassert solution('4 5\\n1 2 3 4 5\\n1 3\\n1 2\\n1 2\\n1 2') == '8'\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''5 4\n1 -2 1 3 -4\n1 2\n4 5\n3 4\n1 4\n''') == '7'\nassert solution('''4 3\n1 2 3 4\n1 3\n2 4\n1 1\n''') == '16'\nassert solution('''2 2\n-1 -2\n1 1\n1 2\n''') == '0'\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\n'''5 4\n1 -2 1 3 -4\n1 2\n4 5\n3 4\n1 4\n''') == '7'\n\nassert solution(\n'''2 2\n-1 -2\n1 1\n1 2\n''') == '0'\n\nassert solution(\n'''2 3\n1 2\n2 3\n1 1\n1 2\n''') == '0'\n\nassert solution(\n'''4 1\n1 2 3 4\n1 3\n2 4\n1 1\n''') == '16'\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == ''\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''5 4\n1 -2 1 3 -4\n1 2\n4 5\n3 4\n1 4\n''') == '7'\n\nassert solution('''4 3\n1 2 3 4\n1 3\n2 4\n1 1\n''') == '16'\n\nassert solution('''2 2\n-1 -2\n1 1\n1 2\n''') == '0'\n\n'''\n\u041c\u044b \u043d\u0430\u0431\u0440\u0430\u043b\u0438 \u0432\u0441\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0436\u0435\u043c \u043f\u043e\u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f, \u043d\u043e \u0443 \u043d\u0430\u0441 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0430: \u043e\u0434\u043d\u0430 \u0438\u0437 \u0446\u0435\u043b\u0435\u0439 \u0431\u0443\u0434\u0435\u0442 \u043d\u0430\u0437\u0432\u0430\u0442\u044c \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0443 \u0441 \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u0438\u043c \u043f\u043e\u0432\u0442\u043e\u0440\u0435\u043d\u0438\u0435\u043c \u0435\u0451 \u0438\u043b\u0438 \u043f\u0440\u0438 \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0435 \u0435\u0451 \u0432 \u043e\u0431\u0440\u0430\u0442\u043d\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435.\n\n\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043d\u0430\u0448\u0438 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b \u0432\u0441\u0435\u0433\u0434\u0430 \u0431\u0443\u0434\u0443\u0442 \u0434\u0432\u0430, \u0442\u0430\u043a \u043a\u0430\u043a \u043e\u043d\u0438 \u043d\u0435 \u0432\u043b\u0438\u044f\u044e\u0442 \u043d\u0430 \u0438\u0445 \u043f\u043e\u0432\u0442\u043e\u0440\u0435\u043d\u0438\u0435. \u0418 \u0442\u0430\u043a \u043a\u0430\u043a \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430 \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u043e\u0432\u0442\u043e\u0440\u0435\u043d\u0430 \u0431\u043e\u043b\u044c\u0448\u0435 \u043e\u0434\u043d\u043e\u0433\u043e \u0440\u0430\u0437\u0430, \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u0440\u0430\u0437\u0431\u0438\u0432\u0430\u0442\u044c \u043d\u0430\u0448 \u043c\u0430\u0441\u0441\u0438\u0432 \u043d\u0430 \u0434\u0432\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b \u043f\u043e\u043c\u0435\u0441\u0442\u0438\u0432 \u043a\u0430\u0436\u0434\u0443\u044e \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443.\n\n\u041f\u0440\u043e\u0431\u043b\u0435\u043c\u0430 \u0437\u0430\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u0432 \u0442\u043e\u043c, \u0447\u0442\u043e \u043d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u0435\u0442\u0441\u044f \u043d\u0435\u0432\u0435\u0440\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u0441\u0442\u0440\u043e\u043a, \u0430 \u043d\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u0438\u0445 \u043f\u0435\u0440\u0435\u0431\u0440\u0430\u0442\u044c. \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u0434\u043b\u0438\u043d\u0443 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0435\u0433\u043e \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u043e\u0433\u043e \u043f\u043e\u0434\u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0430, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 \u0432\u0441\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b \u043d\u0430\u0448\u0435\u0433\u043e \u043c\u0430\u0441\u0441\u0438\u0432\u0430, \u0430 \u0442\u0430\u043a\u0436\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0445\u0441\u044f \u0432 \u044d\u0442\u043e\u043c \u043f\u043e\u0434\u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0435. \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u0432 \u0432\u0438\u0434\u0435 \u043e\u0434\u043d\u043e\u0433\u043e \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430, \u0440\u0430\u0437\u0434\u0435\u043b\u044f\u044e\u0449\u0435\u0433\u043e \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b \u043d\u0430 \u0434\u0432\u0435.\n\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u043c\u044b \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u043c \u043d\u0435\u0432\u0435\u0440\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u0441\u0442\u0440\u043e\u043a, \u0430 \u043d\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0434\u043b\u0438\u043d\u0443 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0435\u0433\u043e \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u043e\u0433\u043e \u043f\u043e\u0434\u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0430, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0433\u043e \u0432\u0441\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b \u043d\u0430\u0448\u0435\u0433\u043e \u043c\u0430\u0441\u0441\u0438\u0432\u0430, \u0430 \u0442\u0430\u043a\u0436\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0445\u0441\u044f \u0432 \u044d\u0442\u043e\u043c \u043f\u043e\u0434\u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0435.\n\n\u0412\u043e \u0432\u0442\u043e\u0440\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u043c\u044b \u043f\u0435\u0440\u0435\u0434"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(input()) == output\nprint('Test case #1, passed')\n\n\n\n\"\"\"\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('27') == '22'\nassert solution('4545') == '4444'\nassert solution
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('27') == '22'\nassert solution('4545') == '4444'\nassert solution('5') == '4'\nassert solution('22') == '22'\nassert solution('4444') == '4444'\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"27\") == \"22\"\nassert solution(\"4545\") == \"4444\"\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"27\") == \"22\"\nassert solution(\"4545\") == \"4444\"\nassert solution(\"123456789\") == \"12345678\"\nassert solution(\"48\") == \"4\"\nassert solution(\"5\") == \"9\"\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('27') == '22'\nassert solution('4545') == '4444'\nassert solution('2245') == '4342'\nassert solution('012345') == '0234'\nassert solution('1234') == '1234'\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('23') == '22'\nassert solution('10001') == '1000000'\nassert solution('111111111') == '1000000000'\nassert solution('9') == '9'\nassert solution('27') == '26'\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''27''') == '22'\nassert solution('''4545''') == '4444'\nprint('If you get here, your code is correct')\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''27''') == ''\nassert solution('''4545''') == ''\nassert solution('''277778777877787778777''') == ''\nassert solution('''5555555555555555555555''') == ''\nassert solution('''987654321''') == ''\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"4455\") == \"4444\"\nassert solution(\"5555\") == \"4444\"\nassert solution(\"54655\") == \"4444\"\nassert solution(\"4545\") == \"4444\"\nassert solution(\"9999\") == \"9999\"\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1 10 2') == '1 2 4 8'\nassert solution('2 4 5') == '-1'\nassert solution('1 10 2') == '1 2 4 8'\nassert solution('2 4 5') == '-1'\nassert solution('1 10 3') == '1 3 9 27'\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(input()) == '1 2 4 8'\n\nTest Input 1\n1 10 2\n\nTest Input 2\n2 4 5\n\nTest Input 3\n10 100 1000\n\nTest Input 4\n-1 1 -1\n\nTest Input 5\n1 1 1\n\nTest Input 6\n1 10 10\n\nTest Input 7\n1 1 0\n\nTest Input 8\n1 0 0\n\nTest Input 9\n0 0 0\n\nTest Input 10\n0 1 1\n\nTest Input 11\n0 0 1\n\nTest Input 12\n-1 -1 0\n\nTest Input 13\n-1 0 1\n\nTest Input 14\n1 0 0\n\nTest Input 15\n1 -1 1\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''1 10 2''') == '1 2 4 8\\n'\nassert solution('''2 4 5''') == '-1\\n'\nassert solution('''1 1000 2''') == '1 2 4 8\\n'\nassert solution('''1 1000 2''') == '1 2 4 8\\n'\nassert solution('''10 1000 2''') == '1 2 4 8\\n'\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1 10 2') == '1 2 4 8'\nassert solution('2 4 5') == '-1'\nassert solution('1 10 2') == '1 2 4 8'\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(input()) == \"1 2 4 8\"\n\nassert solution(input()) == \"-1\"\n\nassert solution(input()) == \"2 4 8 16 32 64 128\"\n\nassert solution(input()) == \"2 4 8 16 32 64 128\"\n\nassert solution(input()) == \"2 4 8 16 32 64 128\""
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"1 10 2\") == \"-1\"\nassert solution(\"2 4 5\") == \"-1\""
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('1 10 2') == '1 2 4 8\\n'\nassert solution('2 4 5') == '-1\\n'\n'''\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1 10 2') == '1 2 4 8'\nassert solution('2 4 5') == '-1'\n\n'''\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"1 10 2\") == \"1 2 4 8\"\nassert solution(\"2 4 5\") == \"-1\"\nassert solution(\"1 10 2\") == \"1 2 4 8\"\nassert solution(\"2 4 5\") == \"-1\"\nassert solution(\"1 10 5\") == \"1 5 25\"\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1 10 2') == '1 2 4 8'\nassert solution('2 4 5') == '-1'\nassert solution('-1 0 0') == '-1'\n\"\"\""
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''3 5''') == 'YES'\nassert solution('''3 7''') == 'NO'\nassert solution('''0 2''') == 'YES'\nassert solution('''2 4''') == 'NO'\nassert solution('''3 5''') == 'YES'\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\n    \"\"\"3 5\n0 2\n2 4\n3 5\"\"\") == \"YES\"\n\nassert solution(\n    \"\"\"3 7\n0 4\n2 5\n6 7\n\n5 6\n0 4\n2 5\n6 7\n\n2 0\n0 1\n2 2\n2 4\n3 5\n\"\"\") == \"NO\"\n\n\"\"\"\nYou can use teleports only, that is, the point where the teleport can be used is the point where the Teleport has reached the limit.\n\nIf the Teleport is used, the next point it can reach is the same point, and the Pig can reach the friend's house at the same time.\n\nIf the Teleport is not used, the Pig can move to the next point in time, and the Teleport cannot be used.\n\"\"\"\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"3 5\\n0 2\\n2 4\\n3 5\") == \"YES\"\nassert solution(\"3 7\\n0 4\\n2 5\\n6 7\") == \"NO\"\n\n\n\"\"\""
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('3 5\\n0 2\\n2 4\\n3 5') == 'YES'\nassert solution('3 7\\n0 4\\n2 5\\n6 7') == 'NO'\n\n\n\"\"\"\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(input) == \"YES\"\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"3 5\\n0 2\\n2 4\\n3 5\") == \"YES\"\nassert solution(\"3 7\\n0 4\\n2 5\\n6 7\") == \"NO\"\nassert solution(\"5 10\\n0 3\\n2 5\\n6 7\\n8 9\\n9 10\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"2 3\\n1 3\\n2 3\\n3 5\") == \"YES\"\nassert solution(\"2 3\\n1 4\\n2 5\\n6 7\") == \"NO\"\nassert solution(\"5 7\\n0 4\\n2 5\\n6 7\\n3 5\") == \"NO\"\nassert solution(\"5 7\\n0 5\\n2 5\\n6 7\\n3 5\") == \"NO\"\nassert solution(\"5 7\\n0 4\\n2 4\\n6 7\\n3 5\") == \"YES\"\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('3 5\\n0 2\\n2 4\\n3 5') == 'YES'\nassert solution('3 7\\n0 4\\n2 5\\n6 7') == 'NO'"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('4 5\\n0 2\\n2 4\\n3 5\\n0 2') == 'YES'\nassert solution('3 7\\n0 4\\n2 5\\n6 7\\n0 4\\n2 5\\n6 7') == 'NO'\nassert solution('2 3\\n0 1\\n1 2\\n2 3\\n0 1') == 'YES'\nassert solution('3 4\\n0 2\\n1 3\\n2 3\\n0 1') == 'NO'\nassert solution('4 5\\n0 2\\n2 4\\n3 5\\n0 2') == 'YES'\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"3 2 1\") == \"6\"\nassert solution(\"3 2 1\") == \"6\"\nassert solution(\"3 2 1\") == \"6\"\nassert solution(\"3 2 1\") == \"6\"\nassert solution(\"3 2 1\") == \"6\"\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"3 2 1\") == \"6\"\nassert solution(\"3 2 1\") == \"6\"\nassert solution(\"3 2 1\") == \"6\"\nassert solution(\"3 2 1\") == \"6\"\nassert solution(\"3 2 1\") == \"6\"\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('3 2 1') == '6'\n'''\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == '6'\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"4 1 1\") == \"6\"\nassert solution(\"3 2 1\") == \"6\"\nassert solution(\"10 2 1\") == \"6\"\nassert solution(\"10 10 1\") == \"1\"\nassert solution(\"20 2 1\") == \"1\"\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('3 2 1') == '6'\nassert solution('3 2 2') == '6'\nassert solution('3 4 1') == '10'\nassert solution('3 4 2') == '10'\nassert solution('3 4 3') == '10'\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('3 2 1') == '6'\nassert solution('3 2 2') == '0'\nassert solution('5 3 3') == '15'\nassert solution('6 3 2') == '10'\nassert solution('2 2 1') == '1'\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"3 2 1\") == \"6\"\nassert solution(\"3 2 1\") == \"6\"\nassert solution(\"3 4 1\") == \"8\"\nassert solution(\"8 1 2\") == \"42\"\nassert solution(\"2 1 1\") == \"2\"\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('2\\n1 0') == '1 1'\nassert solution('2\\n0 1') == '1 1'\nassert solution('2\\n0 1') == '1 1'\nassert solution('2\\n0 0') == '0 1'\nassert solution('2\\n0 1') == '0 1'\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('2\\n1 0') == '1 1'\nassert solution('3\\n1 0 1') == '2 1 0'\nassert solution('3\\n1 0 1 2') == '3 2 0 1'\nassert solution('2\\n2 0 2') == '1 2 0'\nassert solution('3\\n1 0 1 2 3') == '2 3 0 1'\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1 0') == '1 1'\nassert solution('2 1') == '1 1'\nassert solution('0 0') == '1'\nassert solution('0 0 1 1') == '1 1'\nassert solution('0 0 1 1 1') == '1 1'\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"1 0\\n2 1\") == \"1 1\\n\""
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\""
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(None) == None\n\n\"\"\"\n\nimport sys\nfrom itertools import *"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\n    \"2\\n1 0\"\n) == \"1 1\"\n\"\"\"\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1 0\\n') == '1 1'\nassert solution('2 0\\n') == '1 1'\nassert solution('1 1\\n') == '1 1'\nassert solution('2 1\\n') == '1 1'\nassert solution('2 2\\n') == '1 1'\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1 0') == '1 1'\nassert solution('0 0') == '1 1'\nassert solution('0 0 1') == '1 1'\nassert solution('0 0 1 1') == '1 1'\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('3 4\\nS..\\n....\\n..S.\\n') == 8\nassert solution('3 4\\nSSS\\n....\\n....\\nSSS\\n') == 8\nassert solution('3 4\\nSSSS\\n....\\n....\\nSSSS\\n') == 8\nassert solution('3 4\\nSSS\\n....\\n....\\nSSS\\n') == 8\nassert solution('3 4\\nSSS\\n.S\\n....\\n....\\nSSS\\n') == 7\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == \"8\"\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''3 4\nS...\n....\n..S.\n''') == '8'\nassert solution('''2 3\nS..\n.S.\n''') == '2'\nassert solution('''3 3\nS...\n.S.\n...\n''') == '3'\nassert solution('''3 3\nS...\nS.S\n...\n''') == '1'\nassert solution('''2 2\nS..\nS.\n''') == '2'\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"3 4\") == \"8\"\nassert solution(\"2 3\\nS..\\n....\\n..S.\") == \"8\"\nassert solution(\"2 3\\nSS..\\n....\\n..S.\") == \"9\"\nassert solution(\"2 4\\nS..\\n....\\n..S.\") == \"8\"\nassert solution(\"2 3\\nS..\\nS...\\n..S.\") == \"8\"\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == '8'\n\n'''\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"3 4\\nS...\\n....\\n..S.\\n\") == \"8\"\nassert solution(\"3 4\\nS..\\n....\\n..S.\\n\") == \"4\"\nassert solution(\"3 4\\nS...\\n....\\n..S..\\n\") == \"4\"\n\n\n\n-----Solution-----\n\nSince there are only 10 rows and 10 columns on a cake, the maximum number of cakes that can be eaten is 9.\n\nEach row and column is occupied by a cake cell, either empty or with a strawberry. We can eat as many cells as we want in any row and column and still have a number of cake cells greater than 0. Hence, we have to only eat a row and a column in the remaining 9 spaces on the cake.\n\nThe number of cake cells that can be eaten in any row and column is the sum of the number of cake cells on that row and the number of cake cells on that column. For example, a row that contains the cells '..S', each of whose content is a strawberry, will be eaten in the first and second row of the remaining 9 spaces on the cake.\n\nSimilarly, a column that contains the cells '.S', each of whose content is a strawberry, will be eaten in the first and second column of the remaining 9 spaces on the cake.\n\nThus, the number of cake cells that can be eaten is the sum of the number of cake cells on each row and the number of cake cells on each column.\n\nFor the cake of size r \u00d7 c, the number of cake cells that can be eaten is r \u00d7 c - (r+c-1) = r(c-1) - (r-1)(c-1).\n\n\n\"\"\"\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == \"\"\n\"\"\"\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(input()) == \"8\""
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(input(\"\")) == output\n\"\"\""
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n'''\n"
    },
    {
        "number": 561,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''1\n1 1 1 1 1\n''') == '-1\\n0\\n1 1 1 1 1\\n'\nassert solution('''2\n1 2\n''') == '2\\n1 2\\n'\nassert solution('''3\n1 2 3\n''') == '0\\n3\\n-2 2 1 3\\n'\nassert solution('''4\n1 1 1 1 1\n''') == '-1\\n0\\n1 1 1 1 1\\n'\nassert solution('''5\n1 2 3 4 5\n''') == '0\\n3\\n-2 2 1 3 5\\n'\n"
    },
    {
        "number": 561,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('1\\n2\\n') == '1'\nassert solution('2\\n2\\n') == '0'\nassert solution('3\\n2\\n') == '3'\nassert solution('3\\n3\\n') == '2'\nassert solution('3\\n2\\n') == '3'\n"
    },
    {
        "number": 561,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 3 4\\n\") == \"2\\n-2 10\\n\"\nassert solution(\"1\\n10\\n\") == \"0\\n-1\\n\"\nassert solution(\"4\\n1 3 4\\n\") == \"0\\n-1\\n\"\nassert solution(\"1\\n10\\n\") == \"0\\n-1\\n\"\nassert solution(\"1\\n10\\n\") == \"0\\n-1\\n\"\n"
    },
    {
        "number": 561,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('4\\n1 3 5 9\\n') == '0\\n7\\n-2 10\\n'\nassert solution('3\\n4 1 7\\n') == '2\\n-2 10\\n'\nassert solution('1\\n10\\n') == '-1\\n'\nassert solution('4\\n4 3 4 5\\n') == '1\\n7\\n'\nassert solution('2\\n2 4\\n') == '3\\n0 3 6\\n'\n"
    },
    {
        "number": 561,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''3\n4 1 7\n''') == '2\\n-2 10\\n'\nassert solution('''1\n10\n''') == '-1\\n'\nassert solution('''4\n4 3 4 5\n''') == '0\\n3 6\\n'\nassert solution('''2\n2 4\n''') == '1\\n7\\n'\nassert solution('''4\n1 3 4 5\n''') == '0\\n3 6\\n'\n"
    },
    {
        "number": 561,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"2\\n4 3 4 5\\n\") == \"0\"\nassert solution(\"1\\n10\\n\") == \"-1\"\nassert solution(\"3\\n1 3 5 9\\n\") == \"2\"\nassert solution(\"3\\n4 3 4 5\\n\") == \"0\"\nassert solution(\"2\\n4 3 4 5\\n\") == \"-1\"\n"
    },
    {
        "number": 561,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('1\\n1') == '-1'\nassert solution('2\\n1') == '0'\nassert solution('3\\n1') == '0'\nassert solution('4\\n1') == '0'\nassert solution('5\\n1') == '0'\n"
    },
    {
        "number": 561,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"4 1 7\\n\") == \"2\\n-2 10\\n\"\nassert solution(\"2 4\\n\") == \"-1\\n7\\n\"\nassert solution(\"1 3 5 9\\n\") == \"1\\n3 5 9\\n\"\nassert solution(\"4 3 4 5\\n\") == \"0\\n3 4 5\\n\"\nassert solution(\"4\\n4 3 4 5\\n\") == \"0\\n3 4 5\\n\"\n"
    },
    {
        "number": 561,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''4 1 7''') == '2'\nassert solution('''3\n4 1 7''') == '2'\nassert solution('''2\n4 1 7''') == '-1'\nassert solution('''1\n10\n''') == '-1'\nassert solution('''4\n4 3 4 5''') == '0'\n"
    },
    {
        "number": 561,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\n    \"4\\n\" +\n    \"4 3 4 5\\n\"\n) == \"0\\n7\\n\"\n\nassert solution(\n    \"2\\n\" +\n    \"2 4\\n\"\n) == \"3\\n0 3 6\\n\"\n\nassert solution(\n    \"1\\n\" +\n    \"10\\n\"\n) == \"-1\"\n\nassert solution(\n    \"2\\n\" +\n    \"4 3 4 5\\n\"\n) == \"0\\n3\\n3 4 5 7\\n\"\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1 2\\n2 3\\n4 5') == 'NO'\nassert solution('1 2\\n2 3\\n4 5') == 'NO'\nassert solution('1 2\\n2 3\\n4 5\\n5 7') == 'YES'\nassert solution('1 2\\n2 3\\n4 5\\n5 7\\n6 8') == 'NO'\nassert solution('1 2\\n2 3\\n4 5\\n5 7\\n6 8\\n7 10') == 'NO'\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('3\\n1 2\\n2 3\\n4 5') == 'YES'\nassert solution('3\\n1 2\\n2 3\\n1 2') == 'NO'\nassert solution('5\\n1 2\\n2 3\\n4 5\\n1 2') == 'YES'\nassert solution('5\\n1 2\\n1 2\\n1 2\\n1 2') == 'NO'\nassert solution('5\\n1 2\\n2 3\\n4 5\\n1 2') == 'NO'\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''3\n1 2\n2 3\n4 5\n''') == 'YES'\nassert solution('''3\n1 2\n2 3\n2 3\n1 2\n''') == 'NO'\nassert solution('''2\n1 3\n2 3\n''') == 'NO'\nassert solution('''1\n1 2\n''') == 'NO'\nassert solution('''2\n1 2\n2 3\n''') == 'NO'\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1 2\\n2 3\\n4 5') == 'YES'\nassert solution('1 2\\n2 3\\n4 5') == 'NO'\nassert solution('1 2\\n2 3\\n1 2\\n4 5') == 'YES'\nassert solution('1 2\\n2 3\\n4 5') == 'NO'\nassert solution('1 2\\n2 3\\n3 5') == 'NO'\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"1 2\\n2 3\\n4 5\\n\") == \"YES\"\nassert solution(\"1 2\\n2 3\\n3 5\\n4 5\\n\") == \"NO\"\nassert solution(\"2 2\\n2 3\\n4 5\\n\") == \"YES\"\nassert solution(\"2 2\\n2 3\\n3 4\\n4 5\\n\") == \"NO\"\nassert solution(\"1 2\\n2 3\\n4 5\\n\") == \"NO\"\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\n'''\n3\n1 2\n2 3\n4 5\n''') == 'YES'\n\nassert solution(\n'''\n4\n1 2\n2 3\n2 3\n1 2\n''') == 'NO'\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 2\\n2 3\\n4 5\") == \"YES\"\nassert solution(\"4\\n1 2\\n2 3\\n2 3\\n1 2\") == \"NO\"\nassert solution(\"4\\n1 2\\n2 3\\n3 4\") == \"NO\"\nassert solution(\"3\\n1 2\\n2 3\") == \"NO\"\nassert solution(\"3\\n1 2\\n1 2\") == \"NO\"\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 2\\n2 3\\n2 3\\n1 2\") == \"YES\"\nassert solution(\"2\\n1 2\\n2 3\") == \"NO\"\nassert solution(\"1\\n2\") == \"NO\"\nassert solution(\"3\\n1 2\\n2 3\") == \"NO\"\nassert solution(\"2\\n1 2\\n1 2\") == \"NO\"\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\n\"3\\n1 2\\n2 3\\n4 5\\n\") == \"YES\"\nassert solution(\n\"4\\n1 2\\n2 3\\n2 3\\n1 2\\n\") == \"NO\"\nassert solution(\n\"1\\n1\\n1\\n1\\n\") == \"NO\"\nassert solution(\n\"10\\n8\\n9\\n7\\n6\\n5\\n4\\n3\\n2\\n1\\n\") == \"YES\"\nassert solution(\n\"11\\n9\\n7\\n6\\n5\\n4\\n3\\n2\\n1\\n\") == \"NO\"\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"2\\n1 2\\n2 3\\n4 5\") == \"YES\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\") == \"NO\"\nassert solution(\"2\\n1 2\\n2 3\\n3 5\") == \"NO\"\nassert solution(\"2\\n2 3\\n3 5\\n4 5\") == \"NO\"\nassert solution(\"2\\n2 3\\n3 4\\n4 5\") == \"YES\"\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''2 4''') == '''2 3 4'''\nassert solution('''10 11''') == '''-1'''\nassert solution('''900000000000000009 900000000000000029''') == '''900000000000000009 900000000000000010 900000000000000021'''\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('2 4') == '2 3 4'\nassert solution('10 11') == '-1'\nassert solution('900000000000000009 900000000000000029') == '900000000000000009 900000000000000010 900000000000000021'"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"1 2\") == \"-1\"\nassert solution(\"1 2\") == \"-1\"\nassert solution(\"1 2\") == \"-1\"\nassert solution(\"1 2\") == \"-1\"\nassert solution(\"1 2\") == \"-1\"\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('4 4') == '2 3 4'\nassert solution('10 11') == '-1'\nassert solution('900000000000000009 900000000000000029') == '900000000000000009 900000000000000010 900000000000000021'\nassert solution('900000000000000009 900000000000000010 900000000000000021') == '900000000000000009 900000000000000010 900000000000000021'\nassert solution('900000000000000009 900000000000000010 900000000000000021') == '900000000000000009 900000000000000010 900000000000000021'\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('2 4') == '2 3 4'\nassert solution('10 11') == '-1'\nassert solution('900000000000000009 900000000000000029') == '900000000000000009 900000000000000010 900000000000000021'\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1 1') == '1'\nassert solution('1 1 2') == '2'\nassert solution('1 1 2 3') == '3'\nassert solution('2 2') == '-1'\nassert solution('2 1 4') == '2'\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"2 4\") == \"2 3 4\"\nassert solution(\"10 11\") == \"-1\"\nassert solution(\"900000000000000009 900000000000000029\") == \"900000000000000009 900000000000000010 900000000000000021\"\nassert solution(\"900000000000000009 900000000000000010 900000000000000021\") == \"900000000000000009 900000000000000010 900000000000000021\"\n\n\n\"\"\"\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == ''\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(input('')) == \"2 3 4\"\nassert solution(input('900000000000000009 900000000000000029\\n')) == \"-1\"\nassert solution(input('900000000000000009 900000000000000010 900000000000000021\\n')) == \"900000000000000009 900000000000000010 900000000000000021\"\n\n'''"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdin[0:7]\nprint(\"tests passed\")\n\n---\n\nx = int(stdin.readline())"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\n\"\"\"\n3 4\n1 1 1\n\n\"\"\") == 'YES'\nassert solution(\n\"\"\"\n3 4\n3 1 3\n\n\"\"\") == 'YES'\nassert solution(\n\"\"\"\n3 5\n6 9 1\n\n\"\"\") == 'NO'\nassert solution(\n\"\"\"\n5 6\n2 4 3 4 5\n\n\"\"\") == 'NO'\nassert solution(\n\"\"\"\n3 5\n4 5 3\n\n\"\"\") == 'YES'\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''3 4\n1 1 1''') == 'YES'\nassert solution('''3 4\n3 1 3''') == 'YES'\nassert solution('''3 4\n4 4 4''') == 'NO'\nassert solution('''3 4\n1 1 1''') == 'YES'\nassert solution('''3 4\n2 1 1''') == 'NO'\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"1 2 3\") == \"YES\"\nassert solution(\"2 1 2\") == \"YES\"\nassert solution(\"1 1 1\") == \"NO\"\nassert solution(\"2 4 5\") == \"NO\"\nassert solution(\"4 2 4\") == \"YES\"\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"3 4\\n1 1 1\") == \"YES\"\nassert solution(\"3 4\\n3 1 3\\n\") == \"NO\""
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''3 4\n1 1 1''') == 'YES'\nassert solution('''3 4\n3 1 3''') == 'YES'\nassert solution('''3 4\n4 4 4''') == 'NO'\nassert solution('''3 4\n4 1 3''') == 'NO'\nassert solution('''3 4\n4 1 3''') == 'NO'\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"4 4\") == \"YES\"\nassert solution(\"1 1 1\") == \"YES\"\nassert solution(\"3 4\") == \"NO\"\nassert solution(\"3 1 3\") == \"NO\"\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''3 4\n1 1 1\n''') == 'YES'\nassert solution('''3 4\n3 1 3\n''') == 'YES'\nassert solution('''2 3\n2 2\n''') == 'YES'\nassert solution('''10 4\n4 2 3 4 1 5 6 7 8 9 10\n''') == 'YES'\nassert solution('''3 3\n1 1 1\n''') == 'NO'\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"1 1 1\\n\") == \"YES\"\nassert solution(\"3 4\\n1 1 1\\n\") == \"YES\"\nassert solution(\"3 4\\n3 1 3\\n\") == \"NO\""
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('8 13 9') == \"24\"\nassert solution('13 3 6') == \"9\"\nassert solution('13 3 6') == \"9\"\nassert solution('13 3 6') == \"9\"\nassert solution('13 3 6') == \"9\"\n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('8 13 9') == '24'\nassert solution('13 3 6') == '9'\nassert solution('1 1 1') == '6'\nassert solution('1 2 3') == '9'\nassert solution('12 10 0') == '6'\n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('8 13 9') == '24'\nassert solution('13 3 6') == '9'\nassert solution('1 2 3') == '6'\nassert solution('1 3 3') == '6'\nassert solution('13 9 2') == '9'\n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('8 13 9') == '24'\nassert solution('13 3 6') == '9'\nassert solution('2 3 6') == '9'\nassert solution('3 6 3') == '9'\nassert solution('3 3 3') == '9'\n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1 2 3') == '1'\nassert solution('2 3 4') == '2'\nassert solution('4 5 6') == '6'\nassert solution('4 6 6') == '3'\nassert solution('5 6 7') == '5'\n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == '9'\n\"\"\"\n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('8 13 9') == '24'\nassert solution('13 3 6') == '9'\n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"8 13 9\") == \"24\"\nassert solution(\"13 3 6\") == \"9\"\nassert solution(\"13 3 6\") == \"9\"\nassert solution(\"13 3 6\") == \"9\"\nassert solution(\"8 13 9\") == \"24\"\n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('8 13 9') == '24'\nassert solution('13 3 6') == '9'\nassert solution('1 1 1') == '6'\nassert solution('1 1 1') == '6'\nassert solution('1 1 1') == '6'\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"1 1 1\") == \"1\"\nassert solution(\"5 4 3\") == \"4\"\nassert solution(\"2 3 3\") == \"2\"\nassert solution(\"1 2 3\") == \"0\"\nassert solution(\"5 3 2\") == \"3\"\n\n\n-----\n\nYour task is to write a function that, given two integers a and b, returns the greatest common divisor of a and b.\n\n\"\"\""
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == expected\n\nprint('solution passed')\n\n\"\"\"\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"5 4 3\") == \"4\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"2 3 3\") == \"2\"\n\"\"\""
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('5 4 3') == '4'\nassert solution('2 3 3') == '2'\nassert solution('1 1 1') == '1'\nassert solution('1 2 1') == '2'\nassert solution('1 2 2') == '0'\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"1 1 1\") == \"1\"\nassert solution(\"2 3 3\") == \"2\"\nassert solution(\"5 4 3\") == \"4\"\nassert solution(\"0 0 0\") == \"0\"\nassert solution(\"100 100 100\") == \"0\"\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('4 3 3') == \"1\"\nassert solution('1 1 1') == \"1\"\nassert solution('2 3 3') == \"2\"\n\n\n-----\n\n\"\"\"\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(input()) == output\n\n\"\"\""
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"1 1 1\") == 1\nassert solution(\"2 3 3\") == 2\nassert solution(\"5 4 3\") == 4\nassert solution(\"3 3 2\") == 2\nassert solution(\"1 1 1\") == 1\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1 1 1') == '1'\nassert solution('5 4 3') == '4'\nassert solution('2 3 3') == '2'\nassert solution('10 15 2') == '3'\nassert solution('8 10 4') == '2'\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"2\\n2 999995\") == \"5\"\nassert solution(\"3\\n2 3 9\") == \"8\"\nassert solution(\"1\\n2 999995\") == \"5\"\nassert solution(\"2\\n2 999995\") == \"5\"\n\n\n\"\"\"\n\n\nfrom collections import deque"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('2\\n2 999995') == '5'\nassert solution('2\\n2 999995\\n1\\n1') == '5'\nassert solution('3\\n2 3 9') == '8'\nassert solution('1\\n9999999') == '9999999'\nassert solution('1\\n1') == '0'\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"2\\n2 999995\") == '5'\nassert solution(\"2\\n2 3 9\") == '8'\nassert solution(\"3\\n2 3 9\") == '5'\nassert solution(\"3\\n2 4 3\") == '6'\nassert solution(\"4\\n2 3 4 5\") == '6'\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1 2 3') == '4'\nassert solution('2 3 9') == '8'\nassert solution('3 9 9') == '5'\nassert solution('4 4 4') == '8'\nassert solution('5 5 5') == '9'\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"3\\n2 3 9\\n\") == \"8\"\nassert solution(\"2\\n2 999995\\n\") == \"5\"\nassert solution(\"3\\n1 100000\\n\") == \"5\"\nassert solution(\"3\\n9 5 25\\n\") == \"0\"\n\n'''\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('3\\n2 3 9\\n') == '8'\nassert solution('2\\n2 999995\\n') == '5'\nassert solution('5\\n2 999995\\n') == '5'\nassert solution('5\\n2 999995\\n') == '5'\nassert solution('5\\n2 999995\\n') == '5'\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''3\n2 3 9''') == '8'\nassert solution('''2\n2 999995''') == '5'"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3\") == \"3\"\nassert solution(\"2 3 9\") == \"8\"\nassert solution(\"2 999995\") == \"5\"\n\n\n\"\"\"\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''3\n2 3 9''') == '8'\nassert solution('''2\n2 999995''') == '5'\n\n'''"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"1 2 3\") == \"8\"\nassert solution(\"1 2 5\") == \"5\"\nassert solution(\"1 9999999\") == \"1\"\nassert solution(\"1 2 9999999\") == \"1\"\nassert solution(\"1 5 2 9999999\") == \"4\"\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"20\"\nassert solution(\"2\") == \"680\"\nassert solution(\"10\") == \"20\"\nassert solution(\"10000\") == \"680\"\nassert solution(\"100000\") == \"67200\"\n\n\n\"\"\"\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('1') == '20'\nassert solution('2') == '680'\n\n\n\n------\n\n-1"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(input()) == '680'\n\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1') == '20'\nassert solution('2') == '680'\n\n\n\"\"\"\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1') == '20'\nassert solution('2') == '680'\nassert solution('3') == '236'\nassert solution('4') == '2360'\nassert solution('5') == '2360'\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('2') == '680'\nassert solution('3') == '20'\nassert solution('4') == '3904'\nassert solution('5') == '1932'\nassert solution('6') == '3168'\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"20\"\nassert solution(\"2\") == \"680\"\nassert solution(\"3\") == \"560\"\nassert solution(\"4\") == \"840\"\nassert solution(\"5\") == \"1260\"\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''1''') == '20'\nassert solution('''2''') == '680'\nassert solution('''3''') == '680'\nassert solution('''4''') == '680'\nassert solution('''5''') == '680'\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1') == '20'\nassert solution('2') == '680'\n\n\n\"\"\"\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"\"\nassert solution(\"2\") == \"\"\nassert solution(\"3\") == \"\"\nassert solution(\"4\") == \"\"\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == expected\n\"\"\"\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(input()) == output()\n\"\"\"\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(input()) == ''\n\n\"\"\"\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('aa') == 1\nassert solution('koko') == 2\nassert solution('murat') == 0\nassert solution('aaaa') == -1\nassert solution('abac') == 1\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"2\"\n\n\n\"\"\"\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('aa') == '1'\nassert solution('koko') == '2'\nassert solution('murat') == '0'\nassert solution('k') == '-1'\nassert solution('k') == '-1'\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('aa') == '-1'\nassert solution('koko') == '0'\nassert solution('murat') == '1'\n\n\n\"\"\"\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('aa') == 1\nassert solution('koko') == 2\nassert solution('murat') == 0\nassert solution('abcd') == -1\nassert solution('abcdgf') == -1\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"aab\") == \"aab\"\nassert solution(\"a\") == \"a\"\nassert solution(\"koko\") == \"a\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == -1\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('ab') == \"0\"\nassert solution('abcd') == \"-1\"\nassert solution('abcde') == \"5\"\nassert solution('abcdef') == \"-1\"\nassert solution('abcdg') == \"-1\"\n"
    },
    {
        "number": 570,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1 1') == 'Vladik'\nassert solution('7 6') == 'Valera'\nprint(solution(input()))\n\"\"\"\n\nn, m = [int(x) for x in input().split()]"
    },
    {
        "number": 570,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('1 1') == 'Vladik'\nassert solution('7 6') == 'Valera'\nassert solution('1 1') == 'Vladik'\nassert solution('7 6') == 'Valera'\nassert solution('9 10') == 'Vladik'\n"
    },
    {
        "number": 570,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\n    '1 1') == 'Valera'\nassert solution(\n    '7 6') == 'Vladik'\n"
    },
    {
        "number": 570,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1 1') == 'Vladik'\nassert solution('7 6') == 'Valera'\nprint('Test cases passed')\n\"\"\""
    },
    {
        "number": 570,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"1 1\") == \"Vladik\"\nassert solution(\"7 6\") == \"Vladik\"\nassert solution(\"7 3\") == \"Valera\"\nassert solution(\"1 1\") == \"Valera\"\nassert solution(\"1 2\") == \"Vladik\"\n"
    },
    {
        "number": 570,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('4 3') == 'Vladik'\nassert solution('1 1') == 'Vladik'\nassert solution('7 6') == 'Vladik'\n\"\"\""
    },
    {
        "number": 570,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"1 1\") == \"Vladik\"\nassert solution(\"7 6\") == \"Valera\"\n\"\"\"\n"
    },
    {
        "number": 570,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1 1') == 'Vladik'\nassert solution('7 6') == 'Valera'\nassert solution('1 2') == 'Vladik'\nassert solution('9 7') == 'Valera'\nassert solution('1 1000000000') == 'Vladik'\n"
    },
    {
        "number": 570,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(input()) == \"Valera\"\n'''"
    },
    {
        "number": 570,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"1 1\") == \"Vladik\"\nassert solution(\"7 6\") == \"Valera\"\n"
    },
    {
        "number": 571,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('(?????') == ':('\nassert solution('(()())') == '(()())'\nassert solution('()(()())') == '(()())'\nassert solution('((((()))))') == '(()())'\nassert solution('((((()))))') == '(()())'\n"
    },
    {
        "number": 571,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdin\n\n\n\n**Subtask:** Rearrange Parentheses**\n\nGiven a string $s$, rearrange the parenthesis to make all the strict prefixes of the new string correct parenthesis sequences, and return the new string.\n\nIf there are no correct parenthesis sequences, return an empty string.\n\nAn expression is correct if and only if it is a valid mathematical expression that can be evaluated to the answer zero. For example, \"2+2\" is a correct mathematical expression, but \"12+2\" is not.\n\nYou may assume that there are no consecutive repeating characters in the input string.\n\n**Subtask:** Find Minimum Distance**\n\nGiven a string $s$, rearrange the parenthesis to make all the strict prefixes of the new string correct parenthesis sequences, and return the new string.\n\nIf there are no correct parenthesis sequences, return an empty string.\n\nAn expression is correct if and only if it is a valid mathematical expression that can be evaluated to the answer zero. For example, \"2+2\" is a correct mathematical expression, but \"12+2\" is not.\n\nYou may assume that there are no consecutive repeating characters in the input string.\n\n**Subtask:** Split Two Strings**\n\nGiven two strings $s$ and $t$, find the minimum number of steps that you need to take to convert $s$ into $t$.\n\nThe replacement operations are described below:\n\nIf $s[i]$ equals $t[j]$, then operation \"$s[i]$\" must be replaced by \"$t[j]$\".\nIf $s[i]$ equals \"?\" and $t[j]$ equals \"?\", operation \"$s[i]$\" must be replaced by \"$t[j]$\".\nIf $s[i]$ equals \"?\" and $t[j]$ equals \"?\", operation \"$s[i]$\" must be replaced by \"(\" and \"$t[j]$ by \")\" in order to make \"?\" to be replaced by \"?\".\nIf $s[i]$ equals \"*\" and $t[j]$ equals \"*\", operation \"$s[i]$\" must be replaced by \"$t[j]$\".\nIf $s[i]$ equals \"*\" and $t[j]$ equals \"?\", operation \"$s[i]$\" must be replaced by \"(\" and \"$t[j]$ by \")\" in order to make \"*\" to be replaced by \"?\".\nIf $s[i]$ equals \"*\" and $t[j]$ equals \"*\", operation \"$s[i]$\" must be replaced by \"$t[j]$\".\nIf $s[i]$ equals \"(\" and $t[j]$ equals \")\", operation \"$s[i]$\" must be replaced by \")\" and \"$t[j]$\" must be replaced by \"(\" in order to make \"(\" to be replaced by \")\".\nIf $s[i]$ equals \"(\" and $t[j]$ equals \"*\", operation \"$s[i]$\" must be replaced by \")\" and \"$t[j]$\" must be replaced by \"*\" in order to make \"(\" to be replaced by \"*\".\nIf $s[i]$ equals \"*\" and $t[j]$ equals \"*\", operation \"$s[i]$\" must be replaced by \"(\" and \"$t[j]$ by \")\" in order to make \"*\" to be replaced by \"*\".\nIf $s[i]$ equals \"*\" and $t[j]$ equals \")\", operation \"$s[i]$\" must be replaced by \"(\" and \"$t[j]$ by \")\" in order to make \"*\" to be replaced by \")\".\nYou may assume that $s$ and $t$ consist of lower-case letters \"a\", \"b\", \"c\", \"?\" and \"*\".\n\n**Subtask:** Convert Binary Number in a Linked List to Integer**\n\nGiven a linked list where the value of each node is a 2-digit binary number, return the list with the same structure and the values converted to decimal numbers.\n\nThe returned list should be a linked list storing the decimal values of the nodes' values.\n\nFor example, the linked list 0 -> 1 -> 1 is the list with values \"11\", and the linked list 0 -> 0 -> 1 is the list with values \"100\".\n\n**Subtask:** Serialize and Deserialize**\n\nSerialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.\n\nDesign an algorithm to serialize and deserialize a binary search tree. There is no restriction on how your serialization/deserialization algorithm should work.\n\nYou just need to ensure that a binary search tree can be serialized to a string and this string can be deserialized to the original tree structure.\n\nThe encoded string should be as compact as possible.\n\nNote: Do not use class member/global/static variables to store states. Your serialize and deserialize algorithms should be stateless."
    },
    {
        "number": 571,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution
    },
    {
        "number": 571,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('()())') == '(()())'\nassert solution('(()())') == '(()())'\nassert solution('((()())))') == '((()()()))'\nassert solution(')()())()()') == '()((()))()()'\nassert solution('(())()(())(())') == '(())(()())(())(())(()())(()()())(()())'\n"
    },
    {
        "number": 571,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(input()) == '(()())'\nassert solution(input()) == ':(()())'\n\"\"\"\nimport sys\n"
    },
    {
        "number": 571,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('(???????(???????(???????))') == '(()()())'\nassert solution('(???????(???????(???????))') == '(()())'\nassert solution('(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??(??"
    },
    {
        "number": 571,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"(()())\") == \"(()())\", \"1st\"\nassert solution(\"(()\") == \":(\", \"2nd\"\nassert solution(\"(()(\") == \":(\", \"3rd\"\nassert solution(\"(())\") == \":)\", \"4th\"\nassert solution(\"(()(\") == \":)\", \"5th\"\n"
    },
    {
        "number": 571,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(input()) == '(()())'\nassert solution(input()) == ':('\nassert solution(input()) == ':(('\nassert solution(input()) == '(((('\nassert solution(input()) == '(()()()'\n"
    },
    {
        "number": 571,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdin\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 571,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdin\n'''\n\nn = int(input())\ns = input()\nt = \"\"\nfor i in range(len(s)):\n    if s[i] == \"(\":\n        t += \"(\"\n    elif s[i] == \")\":\n        if t:\n            t += \")\"\n        else:\n            t = \")\"\nprint(t)\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''3 1000000000\n10 -9 -3 5\n''') == '3'\n\nassert solution('''3 12\n10 -9 -3 5\n''') == '2'\n\nassert solution('''2 20\n14 -7 19\n''') == '0'\n'''\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == str(solution(stdin))"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('3 1000000000\\n10 -9 -3 5\\n') == '3'\nassert solution('3 12\\n10 -9 -3 5\\n') == '2'\nassert solution('2 20\\n14 -7 19\\n') == '0'\nassert solution('2 1000000000\\n14 -7 19\\n') == '0'\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(input()) == output\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''3 1000000000''') == '3'\nassert solution('''3 12''') == '2'\nassert solution('''2 20''') == '0'\nassert solution('''14 -7 19''') == '0'\nassert solution('''9 -3 -1 2''') == '1'\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''3 1000000000\n10 -9 -3 5\n''') == '3'\n\nassert solution('''3 12\n10 -9 -3 5\n''') == '2'\n\nassert solution('''2 20\n14 -7 19\n''') == '0'\n\nassert solution('''3 -3 -3\n10 -9 -3 5\n''') == '3'\n'''\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"1\\n10\\n\") == \"1\"\nassert solution(\"2\\n10\\n\") == \"0\"\nassert solution(\"2\\n11\\n\") == \"0\"\nassert solution(\"2\\n10\\n\") == \"0\"\nassert solution(\"2\\n11\\n\") == \"0\"\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('3 1000000000\\n10 -9 -3 5') == '3'\nassert solution('3 12\\n10 -9 -3 5') == '2'"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('3 1000000000\\n10 -9 -3 5\\n') == '3\\n'\nassert solution('2 20\\n14 -7 19\\n') == '0\\n'\nassert solution('3 12\\n10 -9 -3 5\\n') == '2\\n'\nassert solution('2 12\\n14 -7 19\\n') == '2\\n'\nassert solution('3 12\\n-5 -4 -3 -2 -1\\n') == '1\\n'\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1\\n1') == '0'\nassert solution('2\\n2') == '0'\nassert solution('1\\n2') == '0'\nassert solution('1\\n2\\n1') == '1'\nassert solution('1\\n1\\n1') == '1'\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"\"\"4\n1 1 2 1\n\"\"\") == \"1\"\nassert solution(\"\"\"2\n2 2\n\"\"\") == \"0\"\nassert solution(\"\"\"7\n2 2 2 1 1 1 1\n\"\"\") == \"3\"\nassert solution(\"\"\"3\n1 1 1\n\"\"\") == \"1\"\n\"\"\"\nThe first example is from the HackerRank platform.\n\n1 group of two - there are two students that can write the contest, so we can form a single team.\n\n2 groups of two - there are two students that can write the contest, so we can form a single team.\n\n3 groups of two - there are two students that can write the contest, so we can form a single team.\n\n4 groups of two - there are two students that can write the contest, so we can form a single team.\n\n5 groups of two - there are two students that can write the contest, so we can form a single team.\n\n6 groups of two - there are two students that can write the contest, so we can form a single team.\n\n7 groups of two - there are two students that can write the contest, so we can form a single team.\n\n8 groups of two - there are two students that can write the contest, so we can form a single team.\n\n9 groups of two - there are two students that can write the contest, so we can form a single team.\n\n10 groups of two - there are two students that can write the contest, so we can form a single team.\n\n11 groups of two - there are two students that can write the contest, so we can form a single team.\n\n12 groups of two - there are two students that can write the contest, so we can form a single team.\n\n13 groups of two - there are two students that can write the contest, so we can form a single team.\n\n14 groups of two - there are two students that can write the contest, so we can form a single team.\n\n15 groups of two - there are two students that can write the contest, so we can form a single team.\n\n16 groups of two - there are two students that can write the contest, so we can form a single team.\n\n17 groups of two - there are two students that can write the contest, so we can form a single team.\n\n18 groups of two - there are two students that can write the contest, so we can form a single team.\n\n19 groups of two - there are two students that can write the contest, so we can form a single team.\n\n20 groups of two - there are two students that can write the contest, so we can form a single team.\n\n21 groups of two - there are two students that can write the contest, so we can form a single team.\n\n22 groups of two - there are two students that can write the contest, so we can form a single team.\n\n23 groups of two - there are two students that can write the contest, so we can form a single team.\n\n24 groups of two - there are two students that can write the contest, so we can form a single team.\n\n25 groups of two - there are two students that can write the contest, so we can form a single team.\n\n26 groups of two - there are two students that can write the contest, so we can form a single team.\n\n27 groups of two - there are two students that can write the contest, so we can form a single team.\n\n28 groups of two - there are two students that can write the contest, so we can form a single team.\n\n29 groups of two - there are two students that can write the contest, so we can form a single team.\n\n30 groups of two - there are two students that can write the contest, so we can form a single team.\n\n31 groups of two - there are two students that can write the contest, so we can form a single team.\n\n32 groups of two - there are two students that can write the contest, so we can form a single team.\n\n33 groups of two - there are two students that can write the contest, so we can form a single team.\n\n34 groups of two - there are two students that can write the contest, so we can form a single team.\n\n35 groups of two - there are two students that can write the contest, so we can form a single team.\n\n36 groups of two - there are two students that can write the contest, so we can form a single team.\n\n37 groups of two - there are two students that can write the contest, so we can form a single team.\n\n38 groups of two - there are two students that can write the contest, so we can form a single team.\n\n39 groups of two - there are two students that can write the contest, so we can form a single team.\n\n40 groups of two - there are two students that can write the contest, so we can form a single team.\n\n\"\"\") == \"1\"\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('4\\n1 1 2 1') == '1'\nassert solution('2\\n2 2') == '0'\nassert solution('7\\n2 2 2 1 1 1 1') == '3'\nassert solution('3\\n1 1 1') == '1'\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''1\n1 1\n2\n1\n''') == '0'\nassert solution('''2\n2 2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('2\\n2 2\\n') == '1'\nassert solution('1\\n1 1\\n') == '0'\nassert solution('1\\n1 1\\n2 1\\n') == '0'\nassert solution('7\\n2 2 2 1 1 1 1\\n') == '3'\nassert solution('2\\n2 2\\n') == '0'\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('1\\n1\\n1\\n1') == '1'\nassert solution('2\\n1\\n1') == '0'\nassert solution('2\\n2\\n1') == '0'\nassert solution('7\\n2\\n1') == '3'\nassert solution('7\\n1\\n1') == '1'\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('4\\n1 1 2 1') == '1'\nassert solution('2\\n2 2') == '0'\nassert solution('7\\n2 2 2 1 1 1 1') == '3'\nassert solution('3\\n1 1 1') == '1'\n\n\n\n\"\"\""
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1\\n1\\n') == '1'\nassert solution('2\\n2\\n') == '0'\nassert solution('3\\n1\\n') == '1'\nassert solution('4\\n1 1 2 1\\n') == '1'\nassert solution('5\\n2 2 2 1 1 1\\n') == '2'\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''1 1 5 5''') == '13'\nassert solution('''1 1 5 5''') == '13'\nassert solution('''3 3 5 6''') == '26'\nassert solution('''3 3 5 6''') == '26'\nassert solution('''7 7 8 9''') == '93'\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('1 1 5 5') == '13'\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"1 1 5 5\") == \"13\"\nassert solution(\"1 1 7 7\") == \"0\"\nassert solution(\"1 1 5 5\") == \"13\"\nassert solution(\"2 2 2 2\") == \"6\"\nassert solution(\"1 1 5 5\") == \"13\"\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"1 1 5 5\") == \"13\"\n\"\"\"\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''1 1 5 5''') == '13'\nassert solution('''1 1 5 5''') == '13'\nassert solution('''1 1 2 2''') == '4'\nassert solution('''1 1 2 2''') == '4'\nassert solution('''1 2 3 4''') == '6'\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''1 1 5 5''') == '13'\nassert solution('''1 1 5 5\n2 1 6 8\n1 2 4 6\n1 3 1 5\n3 1 4 5\n2 1 2 3\n1 3 3 4\n1 1 1 2''') == '13'\n\n\n\n'''"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\n'''\n1 1 5 5\n''') == '13'\n'''\n\nassert solution(\n'''\n1 1 1 1\n''') == '1'\n\nassert solution(\n'''\n2 2 1 1\n''') == '0'\n\nassert solution(\n'''\n1 3 3 2\n''') == '4'\n\nassert solution(\n'''\n1 2 3 4\n''') == '5'"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"1 1 5 5\") == \"13\"\nassert solution(\"1 2 3 4\") == \"9\"\nassert solution(\"1 4 1 4\") == \"5\"\nassert solution(\"1 4 5 4\") == \"1\"\nassert solution(\"1 4 5 5\") == \"0\"\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''1 1 5 5''') == '13'\nassert solution('''1 2 5 5''') == '13'\nassert solution('''2 1 5 5''') == '13'\nassert solution('''2 2 5 5''') == '13'\nassert solution('''2 3 5 5''') == '13'\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''1 1 5 5''') == '13'\nassert solution('''5 7 8 7''') == '2'\nassert solution('''2 2 3 4''') == '4'\nassert solution('''2 4 2 5''') == '3'\nassert solution('''2 4 5 2''') == '3'\n"
    },
    {
        "number": 575,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('4\\n4\\n1 3\\n3 1\\n') == 'YES'\nassert solution('8\\n4 4\\n2 3\\n1 6\\n') == 'NO'\nassert solution('8\\n3 5\\n1 2\\n6 1\\n') == 'NO'\nassert solution('8\\n3 5\\n1 2\\n6 1\\n') == 'NO'\nassert solution('8\\n3 5\\n1 2\\n6 1\\n') == 'NO'\n"
    },
    {
        "number": 575,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('8\\n8\\n4 4\\n1 3\\n3 1\\n') == 'YES'\nassert solution('8\\n8\\n4 4\\n2 3\\n1 6\\n') == 'NO'\nassert solution('8\\n8\\n3 5\\n1 2\\n6 1\\n') == 'NO'\n"
    },
    {
        "number": 575,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == 'YES'\n\nassert solution('''\n8\n4 4\n1 3\n3 1\n''') == 'YES'\n\nassert solution('''\n8\n4 4\n2 3\n1 6\n''') == 'NO'\n\nassert solution('''\n8\n4 4\n2 3\n2 4\n1 6\n''') == 'YES'\n\nassert solution('''\n8\n4 4\n1 3\n3 1\n''') == 'NO'"
    },
    {
        "number": 575,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == ''\n\n\"\"\""
    },
    {
        "number": 575,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''8''') == 'YES'\nassert solution('''8''') == 'NO'\nassert solution('''8''') == 'NO'\nassert solution('''8''') == 'NO'\nassert solution('''8''') == 'NO'\n"
    },
    {
        "number": 575,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdin\n\n\"\"\""
    },
    {
        "number": 575,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"8\\n4 4\\n1 3\\n3 1\\n\") == \"YES\\n\"\nassert solution(\"8\\n4 4\\n2 3\\n1 6\\n\") == \"NO\\n\"\nassert solution(\"8\\n4 4\\n3 5\\n1 2\\n6 1\\n\") == \"NO\\n\"\nassert solution(\"8\\n4 4\\n3 5\\n1 2\\n6 1\\n\") == \"NO\\n\"\nassert solution(\"8\\n4 4\\n3 5\\n1 2\\n6 1\\n\") == \"NO\\n\"\n"
    },
    {
        "number": 575,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''8\n4 4\n1 3\n3 1\n''') == 'YES'\n\nassert solution('''8\n4 4\n2 3\n1 6\n''') == 'NO'\n\nassert solution('''8\n8\n3 7\n2 7\n4 6\n5 6\n6 7\n7 8\n1 3\n8 2\n''') == 'YES'\n\nassert solution('''8\n8\n4 7\n2 6\n4 6\n5 6\n6 7\n7 8\n1 3\n8 2\n''') == 'NO'\n\nassert solution('''8\n8\n3 7\n2 6\n5 6\n6 7\n7 8\n1 3\n2 4\n''') == 'YES'"
    },
    {
        "number": 575,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdin\n\"\"\"\n\nimport sys\nfrom collections import deque"
    },
    {
        "number": 575,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\n'''\n8\n4 4\n1 3\n3 1\n''') == 'YES'\n\nassert solution(\n'''\n8\n4 4\n2 3\n1 6\n''') == 'NO'\n\nassert solution(\n'''\n8\n3 5\n1 2\n6 1\n''') == 'NO'\n\nassert solution(\n'''\n8\n3 5\n1 2\n6 1\n''') == 'NO'\n\nassert solution(\n'''\n4\n1 2\n3 4\n2 1\n''') == 'YES'"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''1\n1''') == '1'\nassert solution('''3\n13 35 77\n''') == '1001'\nassert solution('''6\n1 2 4 8 16 32\n''') == '32'"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''3\n13 35 77''') == '1001'\nassert solution('''6\n1 2 4 8 16 32''') == '32'\nassert solution('''13\n13 35 77''') == '1001'\nassert solution('''6\n1 2 4 8 16 32''') == '32'\nprint(\"tests passed\")\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''3\n13 35 77''') == '1001'\nassert solution('''6\n1 2 4 8 16 32''') == '32'\n\nprint(solution('''5\n1000000000 1000000000 1000000000 1000000000 1000000000\n1234567890 123456789 123456789 123456789'''))\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1\\n1') == '1'\nassert solution('2\\n1') == '2'\nassert solution('1\\n2') == '1'\nassert solution('1\\n3') == '3'\nassert solution('2\\n2') == '2'\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''3\n13 35 77''') == '1001'\nassert solution('''6\n1 2 4 8 16 32''') == '32'\nassert solution('''3\n1 2 4 8 16''') == '24'\nassert solution('''9\n10 9 8 7 6 5 4 3 2 1''') == '210'\nassert solution('''10\n10 9 8 7 6 5 4 3 2 1''') == '210'\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1\\n12\\n') == '12'\nassert solution('1\\n9\\n') == '9'\nassert solution('1\\n10\\n') == '10'\nassert solution('1\\n10\\n') == '10'\nassert solution('1\\n12\\n') == '12'\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''3\n13 35 77\n''') == '1001'\nassert solution('''6\n1 2 4 8 16 32\n''') == '32'\nassert solution('''3\n5 8 2\n''') == '5'\nassert solution('''10\n2 4 6 8 10 12 14 16 18 20\n''') == '72'\nassert solution('''20\n2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52 54 56 58 60 62 64 66 68 70 72 74 76 78 80 82 84 86 88 90 92 94 96 98\n''') == '6144'\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1\\n5\\n13\\n35\\n77') == '1001'\nassert solution('2\\n2\\n2\\n2\\n2\\n2') == '4'\nassert solution('2\\n2\\n2\\n2\\n2\\n2\\n2') == '8'\nassert solution('4\\n8\\n16\\n32\\n64\\n128\\n256') == '256'\nassert solution('5\\n4\\n6\\n8\\n10\\n12\\n14\\n16\\n18\\n20\\n22\\n24') == '128'\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == \"4\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1\\n1\\n') == '1'\nassert solution('2\\n1\\n') == '2'\nassert solution('2\\n2\\n') == '4'\nassert solution('2\\n3\\n') == '6'\nassert solution('2\\n4\\n') == '8'\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('2 4\\n5 2\\n2 1') == '2'\nassert solution('1 5\\n2 3\\n') == '1'\nassert solution('2 5\\n2 1\\n1 3\\n') == '0'\nassert solution('2 5\\n2 3\\n1 3\\n') == '500000000'\nassert solution('1 1000000000\\n100000000000\\n') == '500000000'\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"1\\n2\\n\") == \"0\"\nassert solution(\"2\\n2\\n\") == \"0\"\nassert solution(\"1\\n1\\n\") == \"1\"\nassert solution(\"2\\n1\\n1\\n\") == \"0\"\nassert solution(\"2\\n2\\n1\\n\") == \"1\"\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''2 4\n5 2\n2 1''') == '2'\nassert solution('''1 5\n2 3\n''') == '1'\nassert solution('''2 5\n2 1\n1 3''') == '0'\nassert solution('''1000000000 1\n1000000000 1\n''') == '500000000'\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''2 4\n5 2\n2 1\n''') == '2'\n\nassert solution('''1 5\n2 3\n''') == '0'\n\nassert solution('''2 5\n2 1\n1 3\n''') == '500000000'\n\"\"\""
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\n\"\"\"\n2 4\n5 2\n2 1\n\"\"\") == \"2\"\n\nassert solution(\n\"\"\"\n1 5\n2 3\n\"\"\") == \"0\"\n\nassert solution(\n\"\"\"\n2 5\n2 1\n1 3\n\"\"\") == \"500000000\""
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''2 5\n2 1\n1 3\n''') == '2'\nassert solution('''1 2\n1000000000 1\n''') == '500000000'\nassert solution('''2 5\n2 1\n1 3\n''') == '0'\nassert solution('''3 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n1 11\n1 12\n1 13\n1 14\n1 15\n1 16\n1 17\n1 18\n1 19\n1 20\n2 4\n2 3\n2 2\n2 1\n2 0\n''') == '12'\n\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('1 2\\n1000000000 1') == '500000000'\nassert solution('2 4\\n5 2\\n2 1') == '2'\nassert solution('2 4\\n5 2\\n2 1') == '1'\nassert solution('2 4\\n1000000000 1\\n2 1\\n2 3') == '0'\nassert solution('2 4\\n5 2\\n2 1\\n2 3') == '5'\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('2 4') == '2'\nassert solution('1 5') == '1'\nassert solution('2 5') == '0'\nassert solution('1 2') == '500000000'\nassert solution('2 3') == '500000000'\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''2 4\n5 2\n2 1''') == '2'\nassert solution('''1 5\n2 3\n''') == '0'\nassert solution('''2 5\n2 1\n1 3\n''') == '500000000'\nassert solution('''2 2\n2 1000000000 1\n1 3\n''') == '0'\nassert solution('''1 1\n1 1000000000 1\n''') == '0'\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('3 5') == '0'\nassert solution('1 2') == '500000000'\nassert solution('2 4') == '2'\nassert solution('1 5') == '500000000'\nassert solution('2 5') == '2'\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''8.549e2''') == '854.9'\nassert solution('''8.549e3''') == '8549'\nassert solution('''0.33e0''') == '0.33'\nprint('Test success!')"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\n'''8.549e2''') == '854.9'\nassert solution(\n'''8.549e3''') == '8549.0'\nassert solution(\n'''0.33e0''') == '0.33'\nassert solution(\n'''1.0e+10''') == '10000000.0'\nassert solution(\n'''0.000''') == '0.0'\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(input()) == output()\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''8.549e2''') == '854.9'\nassert solution('''8.549e3''') == '8549'\nassert solution('''0.33e0''') == '0.33'\nassert solution('''9.86e+7''') == '9986'\nassert solution('''9.86e-7''') == '9986'\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('8.549e2') == '854.9'\nassert solution('8.549e3') == '8549'\nassert solution('0.33e0') == '0.33'\nassert solution('0.55e3') == '55.0'\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"0.00e2\") == \"0.00\"\nassert solution(\"0.33e-1\") == \"0.33\"\nassert solution(\"8.549e2\") == \"854.9\"\nassert solution(\"8.549e3\") == \"8549.0\"\nassert solution(\"0.33e0\") == \"0.33\"\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('8.549e2') == '854.9'\nassert solution('8.549e3') == '8549'\nassert solution('0.33e0') == '0.33'\nprint(\"Test cases passed.\")\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('8.549e2') == '854.9'\nassert solution('8.549e3') == '8549.0'\nassert solution('0.33e0') == '0.33'\nassert solution('0.33e-1') == '0.3'\nassert solution('1e+5') == '10000.0'\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('8.549e2') == '854.9'\nassert solution('8.549e3') == '8549.0'\nassert solution('0.33e0') == '0.33'\nassert solution('0.33e2') == '0.33'\nassert solution('0.33e-2') == '0.33'\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''8.549e2''') == '854.9'\nassert solution('''8.549e3''') == '8549'\nassert solution('''0.33e0''') == '0.33'\nassert solution('''0.33e-2''') == '0.33'\nassert solution('''0.33e2''') == '33.0'\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\n        '5 2' + '\\n' +\n        '2 4 5 1 3' + '\\n' +\n        '3 4 -10 -8 8' + '\\n') == '8'\n\n\"\"\"\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''5 2\n2 4 5 1 3\n3 4 -10 -8 8''') == '8'\nassert solution('''3 2\n1 2 3\n3 -4 -10''') == '-1'\nassert solution('''10 2\n1 2 3 4 5 6 7 8 9 10\n11 12 -13 14 15 -16 17 -18''') == '18'\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"2 4 5 1 3\") == \"8\"\nassert solution(\"1 2 1\") == \"1\"\nassert solution(\"2 1\") == \"2\"\nassert solution(\"3 4 -10 -8 8\") == \"-4\"\nassert solution(\"3 4 -10 -8 8\") == \"0\"\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdin.split()[-1]\n-----Best Solution (AC):----\nN, K = stdin.split()\nP = [int(i) for i in stdin.split()[1:]]\nC = [int(i) for i in stdin.split()[-1]]\n\nP.sort()\nans = 0\nfor i in range(1, N + 1):\n    if i in P:\n        ans += C[P.index(i)]\n    else:\n        ans += C[i - 1]\nprint(ans)\n\n'''\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''5 2\n2 4 5 1 3\n3 4 -10 -8 8''') == '8'\nassert solution('''5 2\n2 4 5 1 3\n3 4 -10 -8 8''') == '8'\nassert solution('''5 2\n1 2 3 4 5\n4 -1 -3 -1 -4\n2 4 -1 -3 -1''') == '0'\nassert solution('''5 2\n2 4 5 1 3\n2 4 -1 -3 -1''') == '8'\nassert solution('''5 2\n2 4 5 1 3\n2 4 -1 -3 -1''') == '8'\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"2 1\") == \"1\"\nassert solution(\"3 2\") == \"2\"\nassert solution(\"5 3\") == \"4\"\nassert solution(\"5 3 2\") == \"5\"\nassert solution(\"3 1 2\") == \"2\"\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\n    '5 2'\n) == '8'\n\nassert solution(\n    '5 2'\n) == '8'\n\nassert solution(\n    '5 2'\n) == '8'\n\nassert solution(\n    '5 2'\n) == '8'\n\nassert solution(\n    '5 2'\n) == '8'"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''5 2\n2 4 5 1 3\n3 4 -10 -8 8''') == '8'\nassert solution('''1 1\n1''') == '1'\nassert solution('''5 1\n5''') == '1'\nassert solution('''1 1\n1''') == '1'\nassert solution('''1 1\n1''') == '1'\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdin.split()[0]\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''5 2\n2 4 5 1 3\n3 4 -10 -8 8\n''') == '8'\nassert solution('''5 2\n2 4 5 1 3\n3 4 -10 -8 8\n''') == '8'\nassert solution('''5 2\n3 4 5 1 2\n3 4 -10 -8 8\n''') == '7'\nassert solution('''5 2\n3 4 5 1 2\n3 4 -10 -8 8\n''') == '7'\nassert solution('''5 2\n3 4 5 1 2\n3 4 -10 -8 8\n''') == '7'\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('6 7 1 6\\n1 2 2\\n1 3 10\\n2 3 7\\n2 4 8\\n3 5 3\\n4 5 2\\n5 6 1') == 'YES\\nCAN 1\\nCAN 1\\nCAN 1\\nCAN 1\\nYES'\nassert solution('3 3 1 3\\n1 2 10\\n2 3 10\\n1 3 100\\n') == 'YES\\nCAN 1\\nCAN 1\\nCAN 81\\n'\nassert solution('2 2 1 2\\n1 2 1\\n1 2 2\\n') == 'YES\\nYES\\nCAN 81\\n'\nassert solution('1 1 1 1\\n1 2 2\\n1 3 3\\n1 4 4\\n1 5 5\\n1 6 6\\n1 7 7\\n1 8 8\\n1 9 9\\n1 10 10\\n') == 'YES\\nCAN 1\\nCAN 1\\nCAN 81\\n'\nassert solution('2 2 1 2\\n1 2 1\\n1 2 2\\n') == 'YES\\nYES\\nCAN 81\\n'\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"6 7 1 6\n1 2 2\n1 3 10\n2 3 7\n2 4 8\n3 5 3\n4 5 2\n5 6 1\"\"\"\n) == \"YES\"\n\nassert solution(\n\"\"\"3 3 1 3\n1 2 10\n2 3 10\n1 3 100\"\"\"\n) == \"YES\"\n\nassert solution(\n\"\"\"2 2 1 2\n1 2 1\n1 2 2\n\"\"\"\n) == \"YES\"\n\nassert solution(\n\"\"\"5 5 2 5\n1 2 3\n1 3 2\n1 3 4\n2 3 1\n1 4 3\n2 4 1\n1 4 5\n2 4 5\n1 4 6\n2 4 6\n1 4 7\n2 4 7\n1 4 8\n2 4 8\n1 4 9\n2 4 9\n1 4 10\n2 4 10\n1 4 11\n2 4 11\n1 4 12\n2 4 12\n1 4 13\n2 4 13\n1 4 14\n2 4 14\n1 4 15\n2 4 15\n1 4 16\n2 4 16\n1 4 17\n2 4 17\n1 4 18\n2 4 18\n1 4 19\n2 4 19\n1 4 20\n2 4 20\n1 4 21\n2 4 21\n1 4 22\n2 4 22\n1 4 23\n2 4 23\n1 4 24\n2 4 24\n1 4 25\n2 4 25\n1 4 26\n2 4 26\n1 4 27\n2 4 27\n1 4 28\n2 4 28\n1 4 29\n2 4 29\n1 4 30\n2 4 30\n1 4 31\n2 4 31\n1 4 32\n2 4 32\n1 4 33\n2 4 33\n1 4 34\n2 4 34\n1 4 35\n2 4 35\n1 4 36\n2 4 36\n1 4 37\n2 4 37\n1 4 38\n2 4 38\n1 4 39\n2 4 39\n1 4 40\n2 4 40\n1 4 41\n2 4 41\n1 4 42\n2 4 42\n1 4 43\n2 4 43\n1 4 44\n2 4 44\n1 4 45\n2 4 45\n1 4 46\n2 4 46\n1 4 47\n2 4 47\n1 4 48\n2 4 48\n1 4 49\n2 4 49\n1 4 50\n2 4 50\n1 4 51\n2 4 51\n1 4 52\n2 4 52\n1 4 53\n2 4 53\n1 4 54\n2 4 54\n1 4 55\n2 4 55\n1 4 56\n2 4 56\n1 4 57\n2 4 57\n1 4 58\n2 4 58\n1 4 59\n2 4 59\n1 4 60\n2 4 60\n1 4 61\n2 4 61\n1 4 62\n2 4 62\n1 4 63\n2 4 63\n1 4 64\n2 4 64\n1 4 65\n2 4 65\n1 4 66\n2 4 66\n1 4 67\n2 4 67\n1 4 68\n2 4 68\n1 4 69\n2 4 69\n1 4 70\n2 4 70\n1 4 71\n2 4 71\n1 4 72\n2 4 72\n1 4 73\n2 4 73\n1 4 74\n2 4 74\n1 4 75\n2 4 75\n1 4 76\n2 4 76\n1 4 77\n2 4 77\n1 4 78\n2 4 78\n1 4 79\n2 4 79\n1 4 80\n2 4 80\n1 4 81\n2 4 81\n1 4 82\n2 4 82\n1 4 83\n2 4 83\n1 4 84\n2 4 84\n1 4 85\n2 4 85\n1 4 86\n2 4 86\n1 4 87\n2 4 87\n1 4 88\n2 4 88\n1 4 89\n2 4 89\n1 4 90\n2 4 90\n1 4 91\n2 4 91\n1 4 92\n2 4 92\n1 4 93\n2 4 93\n1 4 94\n2 4 94\n1 4 95\n2 4 95\n1 4 96\n2 4 96\n1 4 97\n2 4 97\n1 4 98\n2 4 98\n1 4 99\n2 4 99\n1 4 100\n2 4 100\n1 4 101\n2 4 101\n1 4 102\n2 4 102\n1 4 103\n2 4 103\n1 4 104\n2 4 104\n1 4 105\n2 4 105\n1 4 106\n2 4 106\n1 4 107\n2 4 107\n1 4 108\n2 4 108\n1 4 109\n2 4 109\n1 4 110\n2 4 110\n1 4 111\n2 4 111\n1 4 112\n2 4 112\n1 4 113\n2 4 113\n1 4 114\n2 4 114\n1 4 115\n2 4 115\n1 4 116\n2 4 116\n1 4 117\n2 4 117\n1 4 118\n2 4 118\n1 4 119\n2 4 119\n1 4 120\n2 4 120\n1 4 121\n2 4 121\n1 4 122\n2 4 122\n1 4 123\n2 4 123\n1 4 124\n2 4 124\n1 4 125\n2 4 125\n1 4 126\n2 4 126\n1 4 127\n2 4 127\n1 4 128\n2 4 128\n1 4 129\n2 4 129\n1 4 130\n2 4 130\n1 4 131\n2 4 131\n1 4 132\n2 4 132\n1 4 133\n2 4 133\n1 4 134\n2 4 134\n1 4 135\n2 4 135\n1 4 136\n2 4 136\n1 4 137\n2 4 137\n1 4 138\n2"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"1 2 2\\n1 3 10\\n2 3 7\\n2 4 8\\n3 5 3\\n4 5 2\\n5 6 1\") == \"YES\\nCAN 1\\nCAN 1\\nCAN 1\\nCAN 1\\nYES\"\nassert solution(\"3 3 1 3\\n1 2 10\\n2 3 10\\n1 3 100\") == \"YES\\nCAN 81\"\nassert solution(\"2 2 1 2\\n1 2 1\\n1 2 2\\n\") == \"YES\\nYES\"\nassert solution(\"3 3 1 3\\n1 2 10\\n2 3 10\\n1 3 100\") == \"NO\\nNO\"\nassert solution(\"2 2 1 2\\n1 2 1\\n1 2 2\\n\") == \"NO\\nYES\"\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n\nfrom sys import stdin, stdout"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('4 6 1 6') == 'YES'\nassert solution('2 2 1 2') == 'YES'\nassert solution('1 2 2') == 'NO'\nassert solution('1 3 2') == 'YES'\nassert solution('1 1') == 'YES'\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1 2 2\\n1 3 10\\n2 3 7\\n2 4 8\\n3 5 3\\n4 5 2\\n5 6 1') == 'YES\\nCAN 2\\nCAN 1\\nCAN 1\\nCAN 1\\nYES'\nassert solution('3 3 1 3\\n1 2 10\\n2 3 10\\n1 3 100') == 'YES\\nCAN 81'\nassert solution('2 2 1 2\\n1 2 1\\n1 2 2\\n') == 'YES\\nYES'\n\n\"\"\"\n\nfrom functools import lru_cache"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == answer_expected\n\n\"\"\"\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"3 3 1 3\") == \"YES\\nCAN 2\\nCAN 1\\nCAN 1\\nCAN 1\\nYES\"\nassert solution(\"6 7 1 6\") == \"YES\\nCAN 2\\nCAN 1\\nCAN 1\\nCAN 1\\nYES\"\nassert solution(\"2 2 1 2\") == \"YES\\nCAN 2\\nCAN 1\\nCAN 1\\nCAN 1\"\nassert solution(\"1 2 1\") == \"NO\"\nassert solution(\"1 2 2\") == \"NO\"\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(input) == expected\n\nimport sys\nfrom io import StringIO\n\ncaptured_output = StringIO()\nsys.stdout = captured_output\n\ni = 0\nwhile True:\n    try:\n        i += 1\n        result = solution(input)\n        if result:\n            print(f'Test {i}: PASSED')\n        else:\n            print(f'Test {i}: FAILED')\n        print()\n    except EOFError:\n        sys.exit(0)\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n\"\"\""
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"1 2\") == \"3\"\nassert solution(\"1 2\\n1 3\") == \"3\"\nassert solution(\"3\\n1 2\\n1 3\") == \"3\"\nassert solution(\"3\\n1 2\\n1 3\\n2 4\\n2 5\") == \"9\"\nassert solution(\"5\\n1 2\\n1 3\\n2 4\\n2 5\") == \"9\"\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''3''') == '3'\nassert solution('''1 2\n1 3''') == '3'\nassert solution('''1 2\n1 3''') == '3'\nassert solution('''5\n1 2\n1 3\n2 4\n2 5''') == '9'\nassert solution('''5\n1 2\n1 3\n2 4\n2 5''') == '9'\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"\") is None\nassert solution(\"1\") == \"1\"\nassert solution(\"1\\n\") == \"1\"\nassert solution(\"1\\n1\") == \"1\"\nassert solution(\"2\\n2\") == \"1\"\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 2\\n1 3\") == \"3\"\nassert solution(\"5\\n1 2\\n1 3\\n2 4\\n2 5\") == \"9\"\nassert solution(\"8\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5\\n4 5\") == \"9\"\nassert solution(\"10\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5\\n4 5\\n5 6\\n5 7\\n6 7\\n6 8\\n7 8\\n7 9\\n8 9\\n8 10\") == \"45\"\nassert solution(\"8\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5\\n4 5\") == \"9\"\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1 2\\n1 3') == '3'\nassert solution('3 4\\n1 2\\n1 3') == '9'\nassert solution('1 2\\n1 3\\n2 4\\n2 5') == '9'\nassert solution('2 2\\n1 2\\n1 3') == '3'\nassert solution('5 5\\n1 2\\n1 3\\n2 4\\n2 5') == '9'\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''3\n1 2\n1 3\n''') == '3'\nassert solution('''5\n1 2\n1 3\n2 4\n2 5\n''') == '9'\nassert solution('''10\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2 4\n1 2\n2"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('4\\n1 2\\n1 3\\n2 4\\n2 5') == '3'\nassert solution('3\\n1 2\\n1 3\\n') == '3'\nassert solution('5\\n1 2\\n1 3\\n2 4\\n2 5') == '9'\nassert solution('5\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4') == '9'\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''3\n1 2\n1 3\n''') == '3'\nassert solution('''5\n1 2\n1 3\n2 4\n2 5\n''') == '9'\nassert solution('''10\n1 2\n2 3\n3 4\n3 5\n4 5\n5 6\n5 7\n5 8\n6 7\n7 8\n8 9\n8 10\n9 10\n''') == '9'\nassert solution('''15\n1 2\n1 3\n2 4\n2 5\n2 6\n2 7\n2 8\n3 4\n3 5\n3 6\n3 7\n3 8\n3 9\n3 10\n3 11\n3 12\n3 13\n3 14\n3 15\n4 5\n4 6\n4 7\n4 8\n4 9\n4 10\n4 11\n4 12\n4 13\n4 14\n4 15\n5 6\n5 7\n5 8\n5 9\n5 10\n5 11\n5 12\n5 13\n5 14\n5 15\n6 7\n6 8\n6 9\n6 10\n6 11\n6 12\n6 13\n6 14\n6 15\n7 8\n7 9\n7 10\n7 11\n7 12\n7 13\n7 14\n7 15\n8 9\n8 10\n8 11\n8 12\n8 13\n8 14\n8 15\n9 10\n9 11\n9 12\n9 13\n9 14\n9 15\n''') == '9'\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"1 2\") == \"3\"\nassert solution(\"1 3\") == \"2 3 3\"\nassert solution(\"2 4\") == \"2 1 1\"\nassert solution(\"2 5\") == \"4 3 3\"\nassert solution(\"3 4\") == \"3 2 2\"\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('2\\n1 2\\n1 3') == '3'\nassert solution('3\\n1 2\\n1 3') == '3'\nassert solution('1\\n1') == '0'\nassert solution('2\\n2\\n2\\n2') == '0'\nassert solution('2\\n2\\n2\\n2\\n1\\n1') == '4'\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"5\\n3 7 9 7 8\\n5 2 5 7 5\\n\") == \"6\"\nassert solution(\"5\\n1 2 3 4 5\\n1 1 1 1 1\\n\") == \"0\"\nassert solution(\"5\\n1 2 3 4 5\\n1 1 1 1 1\\n\") == \"0\"\n\"\"\"\nimport sys\nsys.stdin = open('test.txt')"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('0\\n0\\n0\\n0\\n0') == 0\nassert solution('0\\n1\\n1\\n1\\n1') == 1\nassert solution('2\\n2\\n2\\n2\\n2') == 2\nassert solution('2\\n2\\n2\\n2\\n2') == 2\nassert solution('2\\n2\\n2\\n2\\n2') == 2\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''5\n3 7 9 7 8\n5 2 5 7 5\n''') == '6'\n\nassert solution('''5\n1 2 3 4 5\n1 1 1 1 1\n''') == '0'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn = int(input())\na = [int(x) for x in input().split()]\nt = [int(x) for x in input().split()]\n\na.sort()\nt.sort()"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\n\"\"\""
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''5\n3 7 9 7 8\n5 2 5 7 5\n''') == '6'\n\nassert solution('''5\n1 2 3 4 5\n1 1 1 1 1\n''') == '0'\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"1\\n1\\n1\\n1\\n1\") == \"1\"\nassert solution(\"1\\n1\\n1\\n1\\n1\\n1\\n1\") == \"2\"\nassert solution(\"1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\") == \"3\"\nassert solution(\"1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\") == \"4\"\nassert solution(\"1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\") == \"5\"\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('1\\n2\\n2\\n2\\n2') == '0'\nassert solution('2\\n2\\n2\\n2\\n2') == '3'\nassert solution('1\\n1\\n1\\n1\\n1') == '1'\nassert solution('1\\n1\\n1\\n1\\n1') == '0'\nassert solution('10\\n10\\n10\\n10\\n10') == '0'\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('5\\n3 7 9 7 8\\n5 2 5 7 5\\n') == '6'\nassert solution('5\\n1 2 3 4 5\\n1 1 1 1 1\\n') == '0'\nassert solution('1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''5\n3 7 9 7 8\n5 2 5 7 5\n''') == '6'\nassert solution('''5\n1 2 3 4 5\n1 1 1 1 1\n''') == '0'\n'''\n\nimport sys\nfrom functools import lru_cache\n\n@lru_cache(maxsize=None)\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1\\n1\\n1\\n1\\n1') == '0'\nassert solution('2\\n1\\n2\\n2\\n2') == '1'\nassert solution('5\\n3 7 9 7 8\\n5 2 5 7 5\\n') == '6'\nassert solution('5\\n1 2 3 4 5\\n1 1 1 1 1\\n') == '0'\nassert solution('2\\n1\\n1\\n1\\n1') == '0'\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('()()())(()'): 5\nassert solution(')(()(()())()'): 4\nassert solution(')))(()'): 0\nassert solution('())(()()'): 3\nassert solution('())(()()()()()()()()()()'): 0\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"((()))\") == \"5\"\nassert solution(\"())(\") == \"0\"\nassert solution(\"))(\") == \"0\"\nassert solution(\"((())((()))())\" == \"4\"\nassert solution(\"))(()(\") == \"3\"\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''10\n()()())(()''') == '5'\nassert solution('''12\n)))(()()())()\n\nassert solution('''6\n)))(()''') == '0'\nassert solution(''')))(()\n\nassert solution(''')))((''') == '0'"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('()()())(()') == '5'\nassert solution(')(()(())()') == '4 10'\nassert solution('))(((((((((((((((((())))))))))))))))') == '0 1 1'\n\n\"\"\"\n\nn = int(input())\ns = input()\n\nd = {}\nfor i in range(n):\n    d[s[i]] = 0\n\ncount = 0\nfor i in range(n):\n    if d[s[i]] == 0:\n        count += 1\n    d[s[i]] += 1\n\nd = {}\nfor i in range(n):\n    d[s[i]] = 0\n\ncount = 0\nfor i in range(n):\n    if d[s[i]] == 0:\n        count += 1\n    d[s[i]] += 1"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"(((())))\") == \"0\"\nassert solution(\"()\") == \"0\"\nassert solution(\")\") == \"0\"\nassert solution(\")()())\") == \"4\"\nassert solution(\"()())()\") == \"4\"\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(input()) == output\n\"\"\"\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('(()())())(()') == '5'\nassert solution(')(()(()())()'\n    \nassert solution(')(()())'\n    \nassert solution('()())()()') == '0'\nassert solution(')))(()')\n    \n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('((()()())())') == '5'\nassert solution('())()') == '0'\nassert solution('((()()())()') == '4'\nassert solution('((()())())()') == '1'\nassert solution('))(())') == '10'\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"(()())()\") == \"()()()()\"\nassert solution(\")))(()\") == \"0\"\nassert solution(\")))(())(()\") == \"0\"\nassert solution(\"()()()\") == \"1\"\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('_') == ''\nassert solution('_') == ''\nassert solution('(___)') == '0 0'\nassert solution('(___)') == '0 0'\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''_Hello_Vasya(and_Petya)__bye_(and_OK)''') == '5 4', '8'\nassert solution('''_a_(_b___c)__de_f(g_)__h__i(j_k_l)m__''') == '2 6', '6 6'\nassert solution('''(___)''') == '0 0', '0 0'\nassert solution('''(__)''') == '0 0', '0 0'\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('_Hello_Vasya(and_Petya)__bye_(and_OK)') == '5 4'\nassert solution('(LoooonG)__shOrt__(LoooonG)') == '5 2'\nassert solution('(___)') == '0 0'\nassert solution('(_a_(_b___c)__de_f(g_)__h__i(j_k_l)m__') == '2 6'\nassert solution('(___(___)____)') == '0 0'"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('_Hello_Vasya(and_Petya)__bye_(and_OK)') == '5 4'\nassert solution('(LoooonG)__shOrt__(LoooonG)') == '5 2'\nassert solution('(___)') == '0 0'\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''_Hello_Vasya(and_Petya)__bye_(and_OK)''') == '5 4'\nassert solution('''_a_(_b___c)__de_f(g_)__h__i(j_k_l)m__''') == '2 6'\nassert solution('''(___)''') == '0 0'\nassert solution('''(LoooonG)__shOrt__(LoooonG)''') == '5 2'\nassert solution('''(__)''') == '0 0'"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"_Hello_Vasya(and_Petya)__bye_(and_OK)\") == \"5 4\"\nassert solution(\"_a_(_b___c)__de_f(g_)__h__i(j_k_l)m__\") == \"2 6\"\nassert solution(\"(LoooonG)__shOrt__(LoooonG)\") == \"5 2\"\nassert solution(\"(___)\") == \"0 0\"\nassert solution(\"(__)\") == \"0 0\"\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"_Hello_Vasya(and_Petya)__bye_(and_OK)\") == \"5 4\"\nassert solution(\"(LoooonG)__shOrt__(LoooonG)\") == \"5 2\"\nassert solution(\"(___)\") == \"0 0\""
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdin\n\n'''\n\nn = int(stdin.readline().strip())\ns = stdin.readline().strip()\n\nstack = []\nresult = 0\nfor i in range(n):\n    if s[i] == '(':\n        stack.append('(')\n    elif s[i] == ')':\n        if stack:\n            stack.pop()\n        else:\n            stack.append(')')\n            result = max(result, i + 1)\n            break"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"_Hello_Vasya(and_Petya)__bye_(and_OK)\") == \"5 4\"\nassert solution(\"(LoooonG)__shOrt__(LoooonG)\") == \"5 2\"\nassert solution(\"(___)\") == \"0 0\"\nassert solution(\"_a_(_b___c)__de_f(g_)__h__i(j_k_l)m__\") == \"2 6\"\nassert solution(\"(___)\") == \"0 0\"\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"_Hello_Vasya(and_Petya)__bye_(and_OK)\") == \"5 4\"\nassert solution(\"(LoooonG)__shOrt__(LoooonG)\") == \"5 2\"\nassert solution(\"(___)\") == \"0 0\"\nassert solution(\"(________)\") == \"5 0\""
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"6 3\\n12 10 20 20 25 30\\n10 20 30\\n\") == \"2\\n\"\nassert solution(\"4 2\\n1 3 3 7\\n3 7\\n\") == \"0\\n\"\nassert solution(\"8 2\\n1 2 2 2 2 2 2 2\\n1 2\\n\") == \"7\\n\""
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1\\n1') == '1'\nassert solution('2\\n1') == '1'\nassert solution('1\\n1') == '1'\nassert solution('1\\n1') == '1'\nassert solution('2\\n1') == '1'\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1\\n1\\n') == '1'\nassert solution('2\\n1\\n') == '0'\nassert solution('1\\n1\\n1\\n') == '0'\nassert solution('2\\n1\\n1\\n') == '1'\nassert solution('1\\n1\\n1\\n1\\n1\\n') == '0'\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1\\n6\\n3') == '1'\nassert solution('1\\n8\\n7') == '1'\nassert solution('1\\n3\\n1') == '1'\nassert solution('1\\n4\\n3') == '0'\nassert solution('1\\n4\\n2') == '1'\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == expected_output"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''6 3\n12 10 20 20 25 30\n10 20 30\n''') == '2'\nassert solution('''4 2\n1 3 3 7\n3 7\n''') == '0'\nassert solution('''8 2\n1 2 2 2 2 2 2 2\n1 2\n''') == '7'\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('6 3\\n12 10 20 20 25 30\\n10 20 30\\n') == '2'\nassert solution('4 2\\n1 3 3 7\\n3 7\\n') == '0'\nassert solution('8 2\\n1 2 2 2 2 2 2 2\\n1 2\\n') == '7'\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''6 3\n12 10 20 20 25 30\n10 20 30''') == '2'\nassert solution('''4 2\n1 3 3 7\n3 7''') == '0'\nassert solution('''8 2\n1 2 2 2 2 2 2 2\n1 2''') == '7'\nassert solution('''8 3\n1 2 2 2 2 2 2 2\n1 2 3''') == '0'\nassert solution('''8 4\n1 2 2 2 2 2 2 2\n1 2 3 3''') == '2'\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1 1') == '0'\nassert solution('2 3') == '6'\nassert solution('49 1808') == '359087121'\nassert solution('2 3') == '6'\n\"\"\"\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''1 1''') == '0'\nassert solution('''2 3''') == '6'\nassert solution('''49 1808''') == '359087121'\n\n\n\"\"\"\n\nfrom math import factorial"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1 1') == '0'\nassert solution('2 3') == '6'\nassert solution('49 1808') == '359087121'\n\"\"\"\n\nfrom collections import Counter\nfrom functools import reduce\n\nimport pytest\n\nfrom solutions.kyu_7.k_rectangles_and_an_array_of_size_n_modulo_998244353 import solution\n\nEXAMPLES = (\n    ('stdin', 'expected'),\n    [\n        (\n            (\n                '1 1',\n            ),\n            '0',\n        ),\n        (\n            (\n                '2 3',\n            ),\n            '6',\n        ),\n        (\n            (\n                '49 1808',\n            ),\n            '359087121',\n        ),\n    ],\n)\n\n\n@pytest.mark.parametrize(*EXAMPLES)\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1 1') == '0'\nassert solution('2 3') == '6'\nassert solution('49 1808') == '359087121'\nassert solution('49 1808') == '359087121'\nassert solution('3 4') == '1'\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1 1') == '0'\nassert solution('2 3') == '6'\nassert solution('49 1808') == '359087121'\n\n\n\"\"\"\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('') == 0\nassert solution('1 1') == 0\nassert solution('2 3') == 0\nassert solution('49 1808') == 0\nassert solution('1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == ''\n'''\n\nfrom itertools import product"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == result_expected\n\"\"\"\n\n\"\"\"\nThe desired solution is given below.\n\nI will try to do this in Python.\n\nSo we will create a dictionary, which will have the board as key and value (a list of row and column indices) \nwhere the key is the board and the value is the list of all the rows and columns with the same colors.\n\nWe will then sort the values of this dictionary. We will do this using the zip() method.\n\nFor each element in the sorted dictionary, we will iterate through the sorted dictionary and we will add 1 to the count if the element is the same as the previous one.\n\nIt is not very clear, but I will explain it here.\n\nFirst, we will iterate through the sorted dictionary. Since the dictionary is sorted, we will iterate the dictionary in order, using the keys as the indices of the dictionary.\n\nThe first element is our key, since the dictionary is sorted we will not use this key, but we will use the next key after the current one (since the key is sorted, the next key is the element after the current one).\n\nWe will add 1 to our count. This will give us the number of times we have seen a row with the same color as the previous one. We do this for all the keys in the dictionary, so we will end up with a new dictionary with the following format:\n\n{board1: [0,1,2,3,4,5], board2: [6,7,8,9,10,11], board3: [12,13,14,15,16,17], board4: [18,19,20,21,22,23], board5: [24,25,26,27,28,29], board6: [30,31,32,33,34,35], board7: [36,37,38,39,40,41], board8: [42,43,44,45,46,47], board9: [48,49,50,51,52,53], board10: [54,55,56,57,58,59], board11: [60,61,62,63,64,65], board12: [66,67,68,69,70,71], board13: [72,73,74,75,76,77], board14: [78,79,80,81,82,83], board15: [84,85,86,87,88,89], board16: [90,91,92,93,94,95], board17: [96,97,98,99,100,101], board18: [102,103,104,105,106,107], board19: [108,109,110,111,112,113], board20: [114,115,116,117,118,119], board21: [120,121,122,123,124,125], board22: [126,127,128,129,130,131], board23: [132,133,134,135,136,137], board24: [138,139,140,141,142,143], board25: [144,145,146,147,148,149]}\n\nWe can now use the keys of the dictionary and iterate through the dictionary using the indices of the dictionary as the key. For each key we will add 1 to the count.\n\nNow we will print the count of the board in the dictionary.\n\n>>> board_to_index = {'board1': [0,1,2,3,4,5], 'board2': [6,7,8,9,10,11], 'board3': [12,13,14,15,16,17], 'board4': [18,19,20,21,22,23], 'board5': [24,25,26,27,28,29], 'board6': [30,31,32,33,34,35], 'board7': [36,37,38,39,40,41], 'board8': [42,43,44,45,46,47], 'board9': [48,49,50,51,52,53], 'board10': [54,55,56,57,58,59], 'board11': [60,61,62,63,64,65], 'board12': [66,67,68,69,70,71], 'board13': [72,73,74,75,76,77], 'board14': [78,79,80,81,82,83], 'board15': [84,85,86,87,88,89], 'board16': [90,91,92,93,94,95], 'board17': [96,97,98,99,100,101], 'board18': [102,103,104,105,106,107], 'board19': [108,109,110,111,112,113], 'board20': [114,115,116,117,118,119], 'board21': [120,121,122,123,124,125], 'board22': [126,127,128,129,130,131], 'board23': [132,133,134,135,136,137], 'board24': [138,139,140,141,142,143], 'board25': [144,145,146,147,148,149]}\n>>> sorted_board_to_index = sorted(board_to_index.items(), key=lambda x: x[1])\n>>> print(sorted_board_to_index)\n[('board1', [0, 1, 2, 3, 4, 5]), ('board2', [6, 7, 8, 9, 10, 11]), ('board3', [12, 13, 14, 15, 16, 17]), ('board4', [18, 19, 20, 21, 22, 23]), ('board5', [24, 25, 26, 27, 28, 29]), ('board6', [30, 31, 32, 33, 34, 35]), ('board7', [36, 37, 38, 39, 40, 41]), ('board8', [42, 43, 44, 45, 46, 47]), ('board9', [48, 49, 50, 51, 52, 53]), ('board10', [54, 55, 56, 57, 58, 59]), ('board11', [60, 61, 62, 63, 64, 65]), ('board12', [66, 67, 68, 69, 70, 71]), ('board13', [72, 73, 74, 75, 76, 77]), ('board14', [78, 79, 80, 81, 82, 83]), ('board15', [84, 85, 86, 87, 88, 89]), ('board16', [90, 91, 92, 93, 94, 95]), ('board17', [96, 97, 98, 99, 100, 101]), ('board18', [102, 103, 104, 105, 106, 107]), ('board19', [108, 109, 110, 111, 112, 113]), ('board20', [114, 115, 116, 117, 118, 119]), ('board21', [120, 121, 122, 123, 124, 125]), ('board22', [126, 127, 128, 129, 130, 131]), ('board23', [132, 133, 134"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1 1') == '0'\nassert solution('2 3') == '6'\nassert solution('49 1808') == '359087121'\nassert solution('2 3') == '6'\nassert solution('4 1') == '0'\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1 1') == '0'\nassert solution('2 3') == '6'\nassert solution('49 1808') == '359087121'\nassert solution('5050') == '9999846844'\nassert solution('60000') == '99999836855'\n\"\"\"\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1 2') == '4'\nassert solution('1 2') == '4'\nassert solution('5 3') == '26'\nassert solution('5 2') == '16'\nassert solution('3 1') == '1'\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"1 2\\n1 9\\n2 6\\n3 1\\n4 2\") == 26\nassert solution(\"2 4\\n1 9\\n2 6\\n3 1\\n4 2\") == 20\nassert solution(\"5 10\\n1 9\\n2 6\\n3 1\\n4 2\\n5 10\") == 22\nassert solution(\"2 3\\n1 9\\n1 7\\n2 6\\n3 1\\n4 2\\n5 10\") == 19\nassert solution(\"6 3\\n1 9\\n1 7\\n2 6\\n3 1\\n4 2\\n5 10\") == 19\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"3 3\") == \"11\"\nassert solution(\"2 5\") == \"8\"\nassert solution(\"1 4\") == \"3\"\nassert solution(\"5 3\") == \"8\"\nassert solution(\"1 7\") == \"9\"\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('5 3') == '26'\nassert solution('5 3') == '26'\nassert solution('3 2') == '1'\nassert solution('3 2') == '1'\nassert solution('5 3') == '26'\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"1\\n2\\n3\") == \"2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\"\nassert solution(\"1\\n2\\n3\\n4\") == \"1\\n2\\n4\\n6\\n8\\n10\\n12\\n14\\n16\\n18\\n20\"\nassert solution(\"1\\n2\\n3\\n4\\n5\") == \"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n12\\n14\\n16\\n18\\n20\\n22\\n24\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\") == \"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n12\\n14\\n16\\n18\\n20\\n22\\n24\\n26\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\") == \"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n12\\n14\\n16\\n18\\n20\\n22\\n24\\n26\\n28\"\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''5 3\n1 9\n1 7\n2 6\n2 5\n3 1''') == '26'\nassert solution('''5 3\n3 1\n2 1\n2 1\n2 1\n2 1''') == '1'\nassert solution('''5 3\n1 9\n1 7\n2 6\n3 1\n''') == '0'\nassert solution('''2 2\n1 1\n2 1\n''') == '0'\nassert solution('''1 1\n1 1\n''') == '1'\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\n    '''5 3\n1 9\n1 7\n2 6\n2 5\n3 1''') == '26'\n\nassert solution(\n    '''10 3\n1 9\n1 7\n2 6\n2 5\n3 1\n3 4\n3 7\n3 5\n2 8\n2 9\n5 4\n5 3''') == '198'\n\nassert solution(\n    '''20 5\n1 9\n1 7\n2 6\n2 5\n3 1\n3 4\n3 7\n3 5\n2 8\n2 9\n5 4\n5 3\n5 2\n1 6\n1 4\n1 3\n1 2\n1 1\n1 1\n1 1''') == '340'\n\nassert solution(\n    '''1 4\n1 9\n1 7\n2 6\n2 5\n3 1\n3 4\n3 7\n3 5\n2 8\n2 9\n5 4\n5 3''') == '28'\n\nassert solution(\n    '''10 4\n1 9\n1 7\n2 6\n2 5\n3 1\n3 4\n3 7\n3 5\n2 8\n2 9\n5 4\n5 3''') == '110'"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1 2\\n1 3\\n2 3\\n3 4') == 26\nassert solution('2 3\\n1 3\\n2 3\\n3 4') == 10\nassert solution('3 4\\n1 3\\n2 3\\n3 4') == 0\nassert solution('4 3\\n1 3\\n2 3\\n3 4') == 0\nassert solution('5 3\\n1 3\\n2 3\\n3 4') == 0\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"3 4\") == \"9\"\nassert solution(\"1 9\") == \"18\"\nassert solution(\"2 2\") == \"4\"\nassert solution(\"1 9 2 3\") == \"39\"\nassert solution(\"5 1\") == \"15\"\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('5 3\\n1 9\\n1 7\\n2 6\\n2 5\\n3 1\\n') == '26'\nassert solution('5 3\\n1 9\\n1 7\\n2 6\\n2 5\\n3 1\\n') == '26'\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('3\\n0 10\\n5 -5\\n-5 -5\\n') == '10.000000000000000000000000000000000000000000000000'\nassert solution('3\\n0 10\\n5 -5\\n-5 -5\\n') == '10.000000000000000000000000000000000000000000000000'\nassert solution('3\\n1 10\\n2 -5\\n-5 -5\\n') == '10.000000000000000000000000000000000000000000000000'\nassert solution('3\\n0 10\\n2 -5\\n-5 -5\\n') == '10.000000000000000000000000000000000000000000000000'\nassert solution('3\\n1 10\\n1 -5\\n-5 -5\\n') == '10.000000000000000000000000000000000000000000000000'\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\\n1\") == \"1\"\nassert solution(\"0 10\\n5 -5\") == \"10.000000000000000000000000000000000000000000000000\"\nassert solution(\"0 10\\n5 -5\\n5 -5\") == \"10.000000000000000000000000000000000000000000000000\"\nassert solution(\"0 10\\n5 -5\\n-5 -5\") == \"10.000000000000000000000000000000000000000000000000\"\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''3\n0 10\n5 -5\n-5 -5''') == '10.000000000000000000000000000000000000000000000000'\n\nassert solution('''3\n0 10\n5 -5\n-5 -5''') == '10.000000000000000000000000000000000000000000000000'\n\nassert solution('''4\n0 0\n1 1\n2 2\n3 3\n''') == '4.0'\n\nassert solution('''4\n-1 1\n-1 1\n-1 1\n-1 1\n''') == '4.0'\n\nassert solution('''4\n1 1\n1 1\n1 1\n1 1\n''') == '1.0'"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(input()) == '10.000000000000000000000000000000000000000000000000'\n\"\"\""
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\n\"\"\"3\n0 10\n5 -5\n-5 -5\n\"\"\") == '10.000000000000000000000000000000000000000000000000\\n'\nassert solution(\n\"\"\"3\n-1 5\n-1 -5\n0 0\n\"\"\") == '0.000000000000000000000000000000000000000000000000\\n'\nassert solution(\n\"\"\"3\n1 2\n-1 -2\n-1 1\n\"\"\") == '4.000000000000000000000000000000000000000000000000\\n'\nassert solution(\n\"\"\"4\n0 0\n1 1\n1 -1\n2 -2\n\"\"\") == '2.000000000000000000000000000000000000000000000000\\n'\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('0 10\\n5 -5\\n-5 -5\\n') == '10.000000000000000000000000000000000000000000000000'\nassert solution('3\\n0 10\\n5 -5\\n-5 -5\\n') == '10.000000000000000000000000000000000000000000000000'\nassert solution('1\\n0 0\\n0 0\\n') == '1.000000000000000000000000000000000000000000000000'\nassert solution('1\\n0 0\\n0 0\\n') == '1.000000000000000000000000000000000000000000000000'\nassert solution('2\\n0 0\\n0 0\\n') == '1.000000000000000000000000000000000000000000000000'\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"\"\"0 10\n5 -5\n-5 -5\"\"\") == \"10.000000000000000000000000000000000000000000000000\"\nassert solution(\"\"\"3\n0 10\n5 -5\n-5 -5\"\"\") == \"10.000000000000000000000000000000000000000000000000\"\nassert solution(\"\"\"3\n0 10\n5 -5\n-5 -5\n-10 -1\n\"\"\") == \"10.000000000000000000000000000000000000000000000000\"\nassert solution(\"\"\"3\n0 10\n5 -5\n-5 -5\n-10 -1\n-6 -2\n-7 -3\n-8 -4\n-9 -5\n-10 -6\n\"\"\") == \"8.5142424242424242424242424242424242424242424242424242424\"\nassert solution(\"\"\"3\n0 10\n5 -5\n-5 -5\n-10 -1\n-6 -2\n-7 -3\n-8 -4\n-9 -5\n-10 -6\n-11 -7\n-12 -8\n-13 -9\n-14 -10\n-15 -11\n-16 -12\n-17 -13\n-18 -14\n-19 -15\n-20 -16\n-21 -17\n-22 -18\n-23 -19\n-24 -20\n-25 -21\n-26 -22\n-27 -23\n-28 -24\n-29 -25\n-30 -26\n-31 -27\n-32 -28\n-33 -29\n-34 -30\n-35 -31\n-36 -32\n-37 -33\n-38 -34\n-39 -35\n-40 -36\n-41 -37\n-42 -38\n-43 -39\n-44 -40\n-45 -41\n-46 -42\n-47 -43\n-48 -44\n-49 -45\n-50 -46\n-51 -47\n-52 -48\n-53 -49\n-54 -50\n-55 -51\n-56 -52\n-57 -53\n-58 -54\n-59 -55\n-60 -56\n-61 -57\n-62 -58\n-63 -59\n-64 -60\n-65 -61\n-66 -62\n-67 -63\n-68 -64\n-69 -65\n-70 -66\n-71 -67\n-72 -68\n-73 -69\n-74 -70\n-75 -71\n-76 -72\n-77 -73\n-78 -74\n-79 -75\n-80 -76\n-81 -77\n-82 -78\n-83 -79\n-84 -80\n-85 -81\n-86 -82\n-87 -83\n-88 -84\n-89 -85\n-90 -86\n-91 -87\n-92 -88\n-93 -89\n-94 -90\n-95 -91\n-96 -92\n-97 -93\n-98 -94\n-99 -95\n-100 -96\n-101 -97\n-102 -98\n-103 -99\n-104 -100\n-105 -101\n-106 -102\n-107 -103\n-108 -104\n-109 -105\n-110 -106\n-111 -107\n-112 -108\n-113 -109\n-114 -110\n-115 -111\n-116 -112\n-117 -113\n-118 -114\n-119 -115\n-120 -116\n-121 -117\n-122 -118\n-123 -119\n-124 -120\n-125 -121\n-126 -122\n-127 -123\n-128 -124\n-129 -125\n-130 -126\n-131 -127\n-132 -128\n-133 -129\n-134 -130\n-135 -131\n-136 -132\n-137 -133\n-138 -134\n-139 -135\n-140 -136\n-141 -137\n-142 -138\n-143 -139\n-144 -140\n-145 -141\n-146 -142\n-147 -143\n-148 -144\n-149 -145\n-150 -146\n-151 -147\n-152 -148\n-153 -149\n-154 -150\n-155 -151\n-156 -152\n-157 -153\n-158 -154\n-159 -155\n-160 -156\n-161 -157\n-162 -158\n-163 -159\n-164 -160\n-165 -161\n-166 -162\n-167 -163\n-168 -164\n-169 -165\n-170 -166\n-171 -167\n-172 -168\n-173 -169\n-174 -170\n-175 -171\n-176 -172\n-177 -173\n-178 -174\n-179 -175\n-180 -176\n-181 -177\n-182 -178\n-183 -179\n-184 -180\n-185 -181\n-186 -182\n-187 -183\n-188 -184\n-189 -185\n-190 -186\n-191 -187\n-192 -188\n-193 -189\n-194 -190\n-195 -191\n-196 -192\n-197 -193\n-198 -194\n-199 -195\n-200 -196\n-201 -197\n-202 -198\n-203 -199\n-204 -200\n-205 -201\n-206 -202\n-207 -203\n-208 -204\n-209 -205\n-210 -206\n-211 -207\n-212 -208\n-213 -209\n-214 -210\n-215 -211\n-216 -212\n-217 -213\n-218 -214\n-219 -215\n-220 -216\n-221 -217\n-222 -218\n-223 -219\n-224 -220\n-225 -221\n-226 -222\n-227 -223\n-228 -224\n-229 -225\n-230 -226\n-231 -227\n-232 -228\n-233 -229\n-234 -230\n-235 -231\n-236 -232\n-237 -233\n-238 -234\n-239 -235\n-240 -236\n-241 -237\n-242 -238\n-243 -239\n-244 -240\n-245 -241\n-246 -242\n-247 -243\n-248 -244\n-249 -245\n-250 -246\n-251 -247\n-252 -248\n-253 -249\n-254 -250\n-255 -251\n-256 -252\n-257 -253\n-258 -254\n-259 -255\n-260 -256\n-261 -257\n-262 -258\n-263 -259\n-264 -260\n-265 -261\n-266 -262\n-267 -263\n-268 -264\n-269 -265\n-270 -266\n-271 -"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"3\\n0 10\\n5 -5\\n-5 -5\") == \"10.000000000000000000000000000000000000000000000000\"\nassert solution(\"3\\n0 10\\n5 -5\\n-5 -5\\n1 2\\n1 2\\n1 2\") == \"5.773502691896258\"\nassert solution(\"4\\n-5 -2\\n0 1\\n2 -2\\n4 -4\\n4 -4\\n4 -4\\n4 -4\") == \"7.5\"\nassert solution(\"4\\n-5 -2\\n0 1\\n2 -2\\n4 -4\\n4 -4\\n4 -4\\n4 -4\") == \"7.5\"\nassert solution(\"4\\n-5 -2\\n0 1\\n2 -2\\n4 -4\\n4 -4\\n4 -4\\n4 -4\") == \"7.5\"\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\n'''3\n0 10\n5 -5\n-5 -5''') == '10.000000000000000000000000000000000000000000000000'\nassert solution(\n'''2\n10 0\n-10 0''') == '10.000000000000000000000000000000000000000000000000'\nassert solution(\n'''1\n0 0\n0 0''') == '1.4142135623730951'\nassert solution(\n'''2\n10 0\n10 0''') == '2.8284271247461903'\nassert solution(\n'''1\n0 0\n0 0''') == '1.4142135623730950'\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('') == 0\nassert solution('?A?A') == 1\nassert solution('00111') == 1\nassert solution('00111') == 1\nassert solution('00111') == 1\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"?JGJ9\") == \"51919\"\nassert solution(\"?0JGJ9\") == \"51919\"\nassert solution(\"?01JGJ9\") == \"51919\"\nassert solution(\"?0123JGJ9\") == \"51919\"\nassert solution(\"?JGJ9\") == \"51919\"\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\n'''\nAJ\n'''\n) == '100'\n\nassert solution(\n'''\n?JGJ9\n'''\n) == '81'\n\nassert solution(\n'''\n?????\n'''\n) == '100'\n\nassert solution(\n'''\n?JGJ?\n'''\n) == '100'\n\nassert solution(\n'''\n?JGJ?JGJ?\n'''\n) == '81'"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"\n\"\"\") == \"\"\nassert solution(\n\"\"\"\n?JGJ9\n\"\"\") == \"51919\"\nassert solution(\n\"\"\"\n?AJ9\n\"\"\") == \"51919\"\nassert solution(\n\"\"\"\n?J?AJ\n\"\"\") == \"51919\"\nassert solution(\n\"\"\"\n?A?9\n\"\"\") == \"51919\"\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"?JGJ9\") == \"51919\"\nassert solution(\"?JGJ?JGJ?\") == \"51919\"\nassert solution(\"?JGJ?JGJ??\") == \"51919\"\nassert solution(\"?JGJ?JGJ??JJJJJ\") == \"51919\"\nassert solution(\"?JGJ?JGJ??JJJ\") == \"51919\"\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('?A') == 100\nassert solution('0A') == 100\nassert solution('A0') == 100\nassert solution('A9') == 100\nassert solution('00') == 100\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"?JGJ9\") == \"51919\"\nassert solution(\"00111\") == \"56669\"\nassert solution(\"56669\") == \"51919\"\nassert solution(\"?JGJ9\") == \"51919\"\nassert solution(\"00111\") == \"56669\"\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"?JGJ9\") == \"51919\"\nassert solution(\"?JGJ9\") == \"51919\"\nassert solution(\"?JGJ9\") == \"51919\"\nassert solution(\"?JGJ9\") == \"51919\"\nassert solution(\"?JGJ9\") == \"51919\"\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"1?AA\") == \"100\"\nassert solution(\"\") == \"0\"\nassert solution(\"0\") == \"1\"\nassert solution(\"J\") == \"1\"\nassert solution(\"JJ\") == \"1\"\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('?') == '81'\nassert solution('1?AA') == '100'\nassert solution('9?AA') == '100'\nassert solution('999999') == '100'\nassert solution('9?AJ') == '81'\n"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('4\\n3 2 2 3') == '2\\n1 2 4 3'\nassert solution('6\\n4 5 6 3 2 1') == '0\\n4 5 6 3 2 1'\nassert solution('10\\n6 8 4 6 7 1 6 3 4 5') == '3\\n2 8 4 6 7 1 9 3 10 5'"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''4\n3 2 2 3''') == '2'\nassert solution('''6\n4 5 6 3 2 1''') == '0'\nassert solution('''10\n6 8 4 6 7 1 6 3 4 5''') == '3'\n\n'''"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"4\n3 2 2 3\n\"\"\"\n) == \"\"\"2\n1 2 4 3 \n\"\"\"\n\nassert solution(\n\"\"\"6\n4 5 6 3 2 1\n\"\"\"\n) == \"\"\"0\n4 5 6 3 2 1 \n\"\"\"\n"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1\\n2\\n') == '0\\n1 2'\nassert solution('3\\n2\\n') == '1\\n2 3'\nassert solution('4\\n2\\n') == '0\\n2 1 4'\nassert solution('5\\n2\\n') == '1\\n2 5'\nassert solution('4\\n1 3 1 3\\n') == '1\\n3 2 4'\n"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''4\n3 2 2 3''') == '2'\nassert solution('''6\n4 5 6 3 2 1''') == '0'\nassert solution('''10\n6 8 4 6 7 1 6 3 4 5''') == '3'\nassert solution('''2\n2 1''') == '0'\nassert solution('''20\n10 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19''') == '0'\n"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(''.join(input().split())) == ''.join(input().split())\n\n\"\"\""
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('4\\n4 2 2 3') == '1\\n1 2 4 3'\nassert solution('6\\n4 5 6 3 2 1') == '0\\n4 5 6 3 2 1'\nassert solution('10\\n6 8 4 6 7 1 6 3 4 5') == '3\\n2 8 4 6 7 1 9 3 10 5'\n\n\n-----\n\n\"\"\"\nfrom collections import Counter\n\nN = int(input())\narr = list(map(int, input().split()))\nc = Counter(arr)\nq = len(c)\ns = set()\nfor a in arr:\n    if a in s:\n        continue\n    if len(c) == 1:\n        print(0)\n        print(arr)\n        exit()\n    if len(c) == 2:\n        if c[min(c)] == 1:\n            print(0)\n            print(arr)\n            exit()\n        else:\n            print(0)\n            print(arr)\n            exit()\n    s.add(a)\n    if c[a] == 1:\n        continue\n    if c[a] > c[min(c)]:\n        c[min(c)] -= c[a]\n        c[a] = 1\n        q -= 1\n        if q == 0:\n            print(0)\n            print(arr)\n            exit()\n    else:\n        c[a] -= 1\n        if c[a] == 0:\n            del c[a]\n            q -= 1\n        if q == 0:\n            print(0)\n            print(arr)\n            exit()"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('7\\n' + '1 2 3 4 5 6 7') == '2'\nassert solution('10\\n' + '6 8 4 6 7 1 6 3 4 5') == '0'\nassert solution('8\\n' + '4 5 6 3 2 1') == '3'\nassert solution('8\\n' + '3 2 2 3 1') == '0'\nassert solution('10\\n' + '6 8 4 6 7 1 6 3 4 5') == '3'\n"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''4\n3 2 2 3''') == '2'\nassert solution('''6\n4 5 6 3 2 1''') == '0'\nassert solution('''10\n6 8 4 6 7 1 6 3 4 5''') == '3'\nassert solution('''15\n6 8 4 6 7 1 6 3 4 5 9 10 11 12 13 14 15''') == '0'\nassert solution('''21\n3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21''') == '0'\n"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"\"\nassert solution(\"2\") == \"\"\nassert solution(\"4\") == \"\"\nassert solution(\"3\") == \"\"\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\n'''3\n20 10 30 40 10\n''') == '20'\nassert solution(\n'''6 5\n90 20 35 40 60 100\n''') == '35'"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''5 3\n20 10 30 40 10''') == '20'\nassert solution('''6 5\n90 20 35 40 60 100''') == '35'\nassert solution('''10 10 10 10 10 10''') == '10'\nassert solution('''11 11 11 11 11 11''') == '10'\nassert solution('''1000 1''') == '1000'\n'''\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(input) == output\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''5 3\n20 10 30 40 10''') == '20'\nassert solution('''6 5\n90 20 35 40 60 100''') == '35'\nassert solution('''6 4\n30 30 30 30 30 30''') == '30'\nassert solution('''4 4\n40 40 40 40 40''') == '40'\nassert solution('''1 1\n100''') == '100'\n'''"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('input_01.txt') == '35'\nassert solution('input_02.txt') == '1 3 4 5 6'\nassert solution('input_03.txt') == '1 3 4 5 6'\nassert solution('input_04.txt') == '23'\nassert solution('input_05.txt') == '23'\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''5 3\n20 10 30 40 10''') == '20'\nassert solution('''6 5\n90 20 35 40 60 100''') == '35'\n\n\n'''"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == answer_stdout\n\"\"\"\n\nimport sys"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"5 3\\n20 10 30 40 10\") == \"20\"\nassert solution(\"6 5\\n90 20 35 40 60 100\") == \"35\"\n\n\n-----\n\nIn the second sample Vasya will read at the first hour (light 20), the second hour (light 30), the third hour (light 35), the fifth hour (light 40) and the last hour (light 100). The minimum light Vasya will have to read at is 35.\n\n'''\n\nn,k = [int(x) for x in stdin.split()]\nm = 100\nl = [int(x) for x in stdin.split()]\n\nl.sort()\n\nm = l[k-1]\n\nfor i in range(1,k):\n    if l[i]<m:\n        m = l[i]\n\nprint(m)\n\nprint(*[i+1 for i in range(n) if l[i]==m])\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('4 2') == '1 3'\nassert solution('6 5') == '1 3 4 5 6'\nassert solution('1 3') == '1 3'\nassert solution('2 3') == '1 3'\nassert solution('6 5') == '1 3 4 5 6'\n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1') == 0\nassert solution('2') == 0\nassert solution('3') == 0\nassert solution('4') == 0\nassert solution('5') == 4\n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == ''\n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(input()) == ''\nassert solution(input()) == ''\nassert solution(input()) == ''\nassert solution(input()) == ''\nassert solution(input()) == ''\n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('') == 0\nassert solution('4') == 8\nassert solution('6') == 28\nassert solution('2') == 0\nassert solution('2') == 0\n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('4') == '8'\nassert solution('6') == '28'\nassert solution('2') == '0'\nassert solution('1000') == '0'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''4''') == '8'\nassert solution('''6''') == '28'\nassert solution('''2''') == '0'\n\"\"\""
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('') == 0\nassert solution('1') == 0\nassert solution('5') == 28\nassert solution('6') == 28\nassert solution('2') == 0\n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('') == 0\nassert solution('123456789') == 0\nassert solution('4321') == 0\nassert solution('43211234') == 4\nassert solution('1234') == 2\n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('4') == '8'\nassert solution('6') == '28'\nassert solution('2') == '0'\n\"\"\"\n\nimport unittest\nfrom collections import deque"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(input()) == output\n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\n'''3 3''') == '1'\nassert solution(\n'''4 4\n10 10 3\n5 1 6\n2 2 2''') == '1'\nassert solution(\n'''3 4\n10 10 3\n5 1 6\n2 2 2''') == '1'\nassert solution(\n'''2 2\n1 1 1\n1 2 1''') == '2'\nassert solution(\n'''2 3\n1 1 1\n1 2 1''') == '1'\n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1 2 3\") == \"2\"\nassert solution(\"1 2 3 4\") == \"1\"\nassert solution(\"2 3 4 1\") == \"1\"\nassert solution(\"3 4 2 1\") == \"3\"\n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''\n3 3\n1 2 3\n2 3 1\n1 2 1\n''') == '2'\nassert solution('''\n3 4\n10 10 3\n5 1 6\n2 2 2\n1 5 7\n''') == '1'\nassert solution('''\n3 3\n1 2 1\n2 3 1\n1 2 1\n''') == '1'\n\n'''\n\n'''\n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1 2 3') == '2'\nassert solution('1 2 1') == '1'\nassert solution('1 2 3') == '1'\nassert solution('1 3 2') == '2'\nassert solution('1 3 1') == '1'\n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('3 3') == '2'\nassert solution('3 4') == '1'\nassert solution('1 1 3') == '1'\nassert solution('2 2 2') == '0'\nassert solution('1 5 7') == '1'\n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('3 3\\n1 2 3\\n2 3 1\\n1 2 1') == '2'\nassert solution('3 4\\n10 10 3\\n5 1 6\\n2 2 2\\n1 5 7') == '1'\nassert solution('3 4\\n10 10 3\\n5 1 6\\n2 2 2') == '1'\n\"\"\"\n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdin\n\"\"\"\n\nn, m = map(int, input().split())\ncandidates = [0] * n\nfor i in range(m):\n    candidates[i] = list(map(int, input().split()))\ncandidates.sort(key=lambda x: -x[1])\n\nfor i in range(m):\n    print(candidates[i][0])\n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1 2 3') == '2'\nassert solution('2 3 1') == '1'\nassert solution('1 2 1') == '1'\nassert solution('5 2') == '1'\nassert solution('10 10 3') == '1'\n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == '1'\n\nassert solution(\"2 2\") == '1'\nassert solution(\"5 5\") == '2'\nassert solution(\"1 5 1\") == '2'\nassert solution(\"1 1 1\") == '1'\n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''\n2 2\n1 1\n''') == '1'\nassert solution('''\n3 3\n1 2 3\n2 3 1\n1 2 1\n''') == '2'\nassert solution('''\n3 4\n10 10 3\n5 1 6\n2 2 2\n1 5 7\n''') == '1'\nassert solution('''\n3 2\n5 5 2\n2 4 1\n1 4 1\n1 4 1\n1 2 3\n''') == '2'\nassert solution('''\n2 2\n2 2\n2 2\n1 1\n1 1\n1 1\n''') == '1'\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''3 6\n4 5 2\n8 9 6 10 7 11''') == '5'\nassert solution('''3 1\n3 4 5\n6''') == '-1'\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('4 6\\n4 5 2\\n8 9 6 10 7 11\\n') == '5'\nassert solution('3 1\\n3 4 5\\n6\\n') == '-1'\nassert solution('6 3\\n4 5 2\\n1\\n') == '2'\nassert solution('3 2\\n3 4 5\\n6\\n') == '-1'\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdin\n\nInput\n3 4\n4 2 3 5\n3 3 1\n1 1 1 1\n\nOutput\n2\nassert solution(stdin) == stdin\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('4 3\\n2 5 4\\n5 3 3') == '5'\nassert solution('4 3\\n2 4 2\\n3 2') == '-1'\nassert solution('3 1\\n1 1 1\\n1') == '-1'\nassert solution('1 1 1\\n1 1 1\\n1') == '-1'\nassert solution('1 1 1\\n1 1 1\\n1') == '-1'\n\n\n\n'''"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1\\n-1\\n1') == '-1'\nassert solution('2\\n-1\\n1') == '-1'\nassert solution('2\\n-1\\n1') == '-1'\nassert solution('2\\n-1\\n1') == '-1'\nassert solution('2\\n-1\\n1') == '-1'\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1 2') == -1\nassert solution('3 4 5') == -1\nassert solution('8 9 6 10 7 11') == 5\nassert solution('3 1 3 4 5 6') == 3\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('3 1') == -1\nassert solution('3 6') == 5\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('4 6\\n4 5 2\\n8 9 6 10 7 11\\n') == '5'\nassert solution('3 1\\n3 4 5\\n6\\n') == '-1'\nassert solution('3 1\\n3 4 5\\n6\\n') == '-1'\nassert solution('4 6\\n4 5 2\\n8 9 6 10 7 11\\n') == '5'\nassert solution('4 6\\n4 5 2\\n8 9 6 10 7 11\\n') == '5'\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''4 5\n8 9 6 10 7 11''') == '5'\nassert solution('''3 1\n3 4 5''') == '-1'\nassert solution('''1 1\n1 1 1 1''') == '1'\nassert solution('''1 1\n1 2''') == '-1'\nassert solution('''1 1\n2''') == '-1'\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"3 1\") == \"-1\"\nassert solution(\"3 6\") == \"5\"\nassert solution(\"4 5 2\") == \"2\"\nassert solution(\"8 9 6 10 7 11\") == \"5\"\n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(input()) == output\n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\n'''2016'''\n) == '2044'\nassert solution(\n'''2000'''\n) == '2028'\nassert solution(\n'''50501'''\n) == '50507'\nassert solution(\n'''36289'''\n) == '36288'\nassert solution(\n'''123456789'''\n) == '123456879'\n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(2016) == \"2044\"\nassert solution(2000) == \"2028\"\nassert solution(50501) == \"50507\"\n\"\"\"\n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('2016') == '2044'\nassert solution('2000') == '2028'\nassert solution('50501') == '50507'\n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(2016) == 2044\nassert solution(2000) == 2028\nassert solution(50501) == 50507\n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('2016') == '2044'\nassert solution('2000') == '2028'\nassert solution('50501') == '50507'\nassert solution('50431') == '50532'\nassert solution('40000') == '40000'\n\n\"\"\""
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('2016') == '2044'\nassert solution('2000') == '2028'\nassert solution('50501') == '50507'\n\n\n\"\"\"\n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('2016') == '2044'\nassert solution('2000') == '2028'\nassert solution('50501') == '50507'\nassert solution('50505') == '50507'\nassert solution('5') == '6'\n\n\n\"\"\"\n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"2016\") == \"2044\"\nassert solution(\"2000\") == \"2028\"\nassert solution(\"50501\") == \"50507\"\n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"2016\") == \"2044\"\nassert solution(\"2000\") == \"2028\"\nassert solution(\"50501\") == \"50507\"\n\"\"\""
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''1900:01:01\n2038:12:31''') == '50768'\nassert solution('''1996:03:09\n1991:11:12''') == '1579'\n"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"1900:01:01\\n2038:12:31\\n\") == 50768\nassert solution(\"1996:03:09\\n1991:11:12\\n\") == 1579"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''1900:01:01''') == 50768\nassert solution('''2038:12:31''') == 1579\nassert solution('''1996:03:09''') == 1579\nassert solution('''1900:01:01''') == 50768\nassert solution('''2038:12:31''') == 1579\n"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''1900:01:01\n2038:12:31''') == 50768\nassert solution('''1996:03:09\n1991:11:12''') == 1579'''\n"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\n\"1900:01:01\\n2038:12:31\"\n) == \"50768\"\nassert solution(\n\"1996:03:09\\n1991:11:12\"\n) == \"1579\"\nassert solution(\n\"1996:03:09\\n1991:11:12\"\n) == \"1579\"\nassert solution(\n\"1900:01:01\\n2038:12:31\"\n) == \"50768\"\nassert solution(\n\"1996:03:09\\n1991:11:12\"\n) == \"1579\"\n"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''1900:01:01\n2038:12:31''') == '50768'\nassert solution('''1996:03:09\n1991:11:12''') == '1579'\nprint('All tests passed successfully')\n"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('1900:01:01\\n2038:12:31') == '50768'\nassert solution('1996:03:09\\n1991:11:12') == '1579'\n"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"1900:01:01\n2038:12:31\n\"\"\") == \"50768\"\n\nassert solution(\n\"\"\"1996:03:09\n1991:11:12\n\"\"\") == \"1579\"\n\nassert solution(\n\"\"\"1984:11:28\n1985:11:28\n\"\"\") == \"0\"\n"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''1900:01:01''') == '50768'\nassert solution('''2038:12:31''') == '1579'\nassert solution('''1996:03:09''') == '1579'\nassert solution('''1995:03:12''') == '1579'\nassert solution('''1994:03:12''') == '738'\n"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"1900:01:01\\n2038:12:31\") == \"50768\"\nassert solution(\"1996:03:09\\n1991:11:12\") == \"1579\"\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(test_input) == \"3\\n3\"\n\ntest_input = \"\"\"\n6 4\n1 2\n2 3\n2 4\n4 5\n4 6\n2 4 5 6\n\"\"\"\n\nassert solution(test_input) == \"4\\n3\"\n\ntest_input = \"\"\"\n5 4\n1 2\n1 3\n1 4\n3 5\n3 6\n3 7\n2 7\n\"\"\"\n\nassert solution(test_input) == \"2\\n3\"\n\n\n-----\n\n## f[n][m] = Minimum number of krons needed to finish the job\n## f[n][m] = min(f[n-1][m]+1, f[n-1][m-1]+1)\n## f[n-1][m-1] = f[n][m] - road[i]\n## f[n-1][m-1] = f[n][m] - road[i]\n## f[n-1][m] = f[n][m] - road[i]"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\n'''\n7 2\n1 2\n1 3\n1 4\n3 5\n3 6\n3 7\n2 7\n''') == '2'\n\nassert solution(\n'''\n6 4\n1 2\n2 3\n2 4\n4 5\n4 6\n2 4 5 6\n''') == '4'\n\nassert solution(\n'''\n3 4\n1 2\n2 3\n3 4\n''') == '3'\n\nassert solution(\n'''\n6 4\n1 2\n2 3\n1 3\n2 4\n3 4\n''') == '3'\n\nassert solution(\n'''\n5 4\n1 2\n3 4\n4 5\n4 6\n2 4 5 6\n''') == '4'"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('7 2\\n1 2\\n1 3\\n1 4\\n3 5\\n3 6\\n3 7\\n2 7\\n') == '2'\nassert solution('6 4\\n1 2\\n2 3\\n2 4\\n4 5\\n4 6\\n2 4 5 6\\n') == '4'\n\n\n-----\n\nPlease save this file to 'russian_triangle.py' and run the tests using 'pytest'. You can run this file using 'python russian_triangle.py'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n\nn, m = map(int, stdin.readline().strip().split(' '))\nroads = [tuple(map(int, stdin.readline().strip().split(' '))) for _ in range(n - 1)]\ncities = list(map(int, stdin.readline().strip().split(' ')))"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(input_stdin.read()) == output_stdout.read()\n\n\"\"\"\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"\n7 2\n1 2\n1 3\n1 4\n3 5\n3 6\n3 7\n2 7\n\"\"\"\n) == \"2\"\n\nassert solution(\n\"\"\"\n6 4\n1 2\n2 3\n2 4\n4 5\n4 6\n2 4 5 6\n\"\"\"\n) == \"2\""
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"7 2\\n1 2\\n1 3\\n1 4\\n3 5\\n3 6\\n3 7\\n2 7\\n\") == \"2\"\nassert solution(\"6 4\\n1 2\\n2 3\\n2 4\\n4 5\\n4 6\\n2 4 5 6\\n\") == \"2\"\nassert solution(\"6 2\\n1 2\\n2 3\\n2 4\\n4 5\\n4 6\\n2 4 5 6\\n\") == \"2\"\nassert solution(\"4 2\\n1 2\\n2 3\\n3 4\\n\") == \"3\"\nassert solution(\"3 3\\n1 2\\n1 3\\n1 4\\n1 5\\n2 5\\n2 6\\n3 6\\n\") == \"1\"\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''7 2\n1 2\n1 3\n1 4\n3 5\n3 6\n3 7\n2 7\n''') == '2'\nassert solution('''6 4\n1 2\n2 3\n2 4\n4 5\n4 6\n2 4 5 6\n''') == '4'\nassert solution('''3 5\n1 3\n2 3\n1 3\n1 4\n1 5\n2 4\n2 5\n2 6\n2 7\n2 8\n3 9\n3 10\n3 11\n''') == '2'\nassert solution('''4 5\n1 4\n2 3\n2 4\n3 4\n3 5\n4 5\n''') == '2'\nassert solution('''7 3\n1 2\n1 3\n1 4\n1 5\n1 6\n2 4\n2 5\n2 6\n2 7\n2 8\n2 9\n2 10\n2 11\n2 12\n1 11\n2 10\n3 9\n3 8\n3 7\n3 6\n''') == '3'\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\n    \"\"\"7 2\n1 2\n1 3\n1 4\n3 5\n3 6\n3 7\n2 7\n    \"\"\"\n) == \"2\"\n\nassert solution(\n    \"\"\"6 4\n1 2\n2 3\n2 4\n4 5\n4 6\n2 4 5 6\n    \"\"\"\n) == \"2\"\n\nassert solution(\n    \"\"\"7 3\n1 2\n2 3\n3 4\n4 5\n1 5\n2 6\n3 6\n    \"\"\"\n) == \"2\"\n\nassert solution(\n    \"\"\"8 3\n1 2\n1 3\n2 3\n2 4\n2 5\n2 6\n3 6\n3 7\n    \"\"\"\n) == \"1\"\n\nassert solution(\n    \"\"\"7 3\n1 2\n1 3\n2 3\n2 4\n2 5\n2 6\n3 6\n4 5\n    \"\"\"\n) == \"1\""
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''7 2\n1 2\n1 3\n1 4\n3 5\n3 6\n3 7\n2 7\n''') == '2'\nassert solution('''6 4\n1 2\n2 3\n2 4\n4 5\n4 6\n2 4 5 6\n''') == '4'\nassert solution('''5 6\n1 2\n2 3\n1 4\n4 5\n3 4\n''') == '2'\nassert solution('''7 4\n1 2\n2 3\n2 4\n3 4\n4 5\n3 1\n3 2\n''') == '2'\nassert solution('''7 4\n1 2\n2 3\n2 4\n3 4\n4 5\n3 1\n2 3\n''') == '2'\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('4 5') == '5'\nassert solution('3 2') == '-1'\nassert solution('4 6 3\\n2 4 1\\n3 5 4') == '5'\nassert solution('1 1 1\\n1 2 1\\n1 1 1') == '-1'\nassert solution('4 2\\n1 3 1\\n5 6 1') == '5'\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('0\\n1\\n2') == '-1'\nassert solution('1\\n1\\n1') == '-1'\nassert solution('2\\n3\\n4') == '5'\nassert solution('2\\n4\\n5') == '-1'\nassert solution('1\\n2\\n3') == '4'\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''4 5\n1 3 4\n1 2 5\n5 6 1\n1 2 4''') == '5'\n\nassert solution('''3 2\n4 6 3\n2 4 1\n3 5 4''') == '-1'"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(input()) == output\n\n\"\"\"\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('0 2') == \"1\"\nassert solution('4 5') == \"5\"\nassert solution('4 5\\n1 3 4\\n1 2 5\\n5 6 1\\n1 2 4') == \"5\"\nassert solution('1 2\\n1 2 4\\n1 2 4') == \"1\"\nassert solution('2 1\\n3 4\\n4 8') == \"-1\"\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('4 2') == '5'\nassert solution('3 2') == '-1'\nassert solution('2 3') == '-1'\nassert solution('1 2 2') == '-1'\nassert solution('5 6 1') == '5'\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('4 5') == '5'\nassert solution('3 2') == '-1'\nassert solution('2 4 1') == '-1'\nassert solution('1 2 5') == '5'\nassert solution('5 6 1') == '5'\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n\nfrom sys import stdin, stdout"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('hi') == 'hihi'\nassert solution('kitayuta') == 'NA'\nassert solution('revive') =='reviver'\nassert solution('ee') == 'eye'\nassert solution('eee') == 'eye'\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"iiii\") == \"\"\nassert solution(\"a\") == \"a\"\nassert solution(\"aabaa\") == \"aabaa\"\nassert solution(\"aabaa\") == \"\"\nassert solution(\"aab\") == \"NA\"\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('revive') =='reviver'\nassert solution('ee') == 'eye'\nassert solution('kitayuta') == 'NA'\nassert solution('madam') =='madam'\nassert solution('venus') =='venus'\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"abc\") == \"NA\"\nassert solution(\"abcd\") == \"NA\"\nassert solution(\"ee\") == \"eye\"\nassert solution(\"kitayuta\") == \"NA\"\nassert solution(\"kevin\") == \"NA\"\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('revive') =='reviver'\nassert solution('ee') == 'eye'\nassert solution('kitayuta') == 'NA'\nassert solution('b') == 'b'\n\"\"\"\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"ee\") == \"eye\"\nassert solution(\"kitayuta\") == \"NA\"\nassert solution(\"revive\") == \"reviver\"\n\n\"\"\"\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == \"NA\" or solution(stdin) == \"reviver\"\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('revive') =='reviver'\nassert solution('ee') == 'eye'\nassert solution('kitayuta') == 'NA'\nassert solution('elvish') == 'elvish'\nassert solution('katas') == 'katas'\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('ee') == 'eye'\nassert solution('revive') =='reviver'\nassert solution('kitayuta') == 'NA'\nassert solution('kite') == 'kite'\nassert solution('we') == 'we'\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"3\\n4\\n\") == \"1\"\nassert solution(\"101\\n99\\n\") == \"2\"\nassert solution(\"5\\n10\\n\") == \"9\""
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('3\\n4\\n') == '1'\nassert solution('101\\n99\\n') == '2'\nassert solution('5\\n10\\n') == '9'\nassert solution('5\\n100\\n') == '2'\nassert solution('5\\n1\\n') == '6'\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(input()) == input()[0]\n\"\"\"\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('3\\n4') == '1'\nassert solution('101\\n99') == '2'\nassert solution('5\\n10') == '9'\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('3') == '1'\nassert solution('4') == '1'\nassert solution('101') == '2'\nassert solution('99') == '2'\nassert solution('5') == '9'\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('0\\n3') == '2'\nassert solution('1\\n3') == '0'\nassert solution('1\\n1') == '0'\nassert solution('1\\n3') == '0'\nassert solution('2\\n4') == '1'\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1\\n1') == '0'\nassert solution('3\\n4') == '1'\nassert solution('4\\n4') == '0'\nassert solution('3\\n3') == '2'\nassert solution('4\\n5') == '3'\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(input()) == '2'\nassert solution(input()) == '9'\nassert solution(input()) == '1'\nassert solution(input()) == '0'\nassert solution(input()) == '0'\n"
    },
    {
        "number": 601,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"3\") == \"1\"\nassert solution(\"3 4\") == \"1\"\nassert solution(\"-100 200\") == \"1\"\nassert solution(\"9 20\") == \"9\"\n"
    },
    {
        "number": 601,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\n\nfrom sys import stdin, stdout\nfrom math import ceil"
    },
    {
        "number": 601,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('4\\n3\\n5\\n0 3 1\\n3 2 1') == '7'\nassert solution('4\\n3\\n6\\n0 2 1\\n3 5 1\\n5 3 1') == '16'\nassert solution('4\\n3\\n7\\n0 2 1\\n3 5 1\\n5 3 1') == '18'\nassert solution('4\\n3\\n8\\n0 2 1\\n3 5 1\\n5 3 1') == '27'\nassert solution('4\\n3\\n9\\n0 2 1\\n3 5 1\\n5 3 1') == '28'\n"
    },
    {
        "number": 601,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''1''') == '1'\nassert solution('''2''') == '2'\nassert solution('''3''') == '3'\nassert solution('''4''') == '4'\nassert solution('''5''') == '5'\n"
    },
    {
        "number": 601,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''3\n33 27\n6 10\n5 6\n100 200\n10 10\n5 5\n1 19\n1 3\n19 5\n''') == '11'\nassert solution('''3\n55 55\n5 5\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n''') == '2'\nassert solution('''2\n5 10\n100 200\n10 10\n5 5\n1 19\n1 3\n19 5\n''') == '3'\nassert solution('''2\n19 19\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n''') == '2'\nassert solution('''2\n20 20\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n''') == '4'\n"
    },
    {
        "number": 601,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(input()) == expect\n\"\"\"\n"
    },
    {
        "number": 601,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == expected\n\"\"\"\n\nn = int(input())\nfor _ in range(n):\n    cnt_s, cnt_w = map(int, input().split())\n    s, w = map(int, input().split())\n    print((cnt_s+cnt_w)*s + max(cnt_s-cnt_w,0)*w)\n"
    },
    {
        "number": 601,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n\"\"\""
    },
    {
        "number": 601,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\n    \"\"\"\n    3\n    33 27\n    6 10\n    5 6\n    100 200\n    10 10\n    5 5\n    1 19\n    1 3\n    19 5\n    \"\"\"\n) == '11'\n\nassert solution(\n    \"\"\"\n    3\n    33 27\n    6 10\n    5 6\n    100 200\n    10 10\n    5 5\n    1 19\n    1 3\n    19 5\n    \"\"\"\n) == '20'\n\nassert solution(\n    \"\"\"\n    2\n    1 2\n    1 2\n    \"\"\"\n) == '2'\n\"\"\"\n\nYour task is to solve this problem in a single line, using the least number of lines of code possible.\n\nNote:\nIt is allowed to use one loop for both the input and the output.\n\n\"\"\"\n"
    },
    {
        "number": 601,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1\\n1\\n1\\n') == '1'\nassert solution('1\\n1\\n1\\n') == '1'\nassert solution('1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(2) == \"Adams\"\nassert solution(8) == \"Van Buren\"\nassert solution(29) == \"Harding\"\nassert solution(16) == \"Macdonald\"\nassert solution(13) == \"Smith\"\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('1') == 'Adams'\nassert solution('2') == 'Van Buren'\nassert solution('8') == 'Van Buren'\nassert solution('29') == 'Harding'\nassert solution('30') == 'Adams'\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(2) == 'Adams'\nassert solution(8) == 'Van Buren'\nassert solution(29) == 'Harding'\nprint(\"Tests passed\")\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == expected\n\"\"\"\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(2) == 'Adams'\nassert solution(8) == 'Van Buren'\nassert solution(29) == 'Harding'\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('Hello World!') == ''\nassert solution('0') == '0'\nassert solution('1234') == ''\nassert solution('Madam Curie!') == 'Curie'\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('29') == 'Harding'\nassert solution('42') == 'Van Buren'\nassert solution('11') == 'Adams'\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('29') == 'Van Buren'\nassert solution('2') == 'Adams'\nprint(\"Tests passed\")\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('2') == 'Adams'\nassert solution('8') == 'Van Buren'\nassert solution('29') == 'Harding'\nprint(\"Tests passed successfully.\")\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(2) == \"Adams\"\nassert solution(8) == \"Van Buren\"\nassert solution(29) == \"Harding\"\n\"\"\"\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('3 6 9') == '6'\nassert solution('4 4 4') == '4'\nassert solution('0 0 0') == '0'\nassert solution('1 1 1') == '1'\nassert solution('2 1 2') == '2'\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('3 6 9') == '6'\nassert solution('0 0 0') == '0'\nassert solution('4 4 4') == '4'\nassert solution('0 0 0') == '0'\nassert solution('1 1 1') == '0'\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('3 6 9') == '6'\nassert solution('4 4 4') == '4'\nassert solution('0 0 0') == '0'\nassert solution('0 0 0') == '0'\nassert solution('1 2 3') == '3'\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('3 6 9') == '6'\nassert solution('4 4 4') == '4'\nassert solution('0 0 0') == '0'\nassert solution('1 1 1') == '0'\nassert solution('2 2 2') == '0'\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('3 6 9\\n') == '6'\nassert solution('4 4 4\\n') == '4'\nassert solution('0 0 0\\n') == '0'\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('3 6 9') == 6\nassert solution('4 4 4') == 4\nassert solution('0 0 0') == 0\nassert solution('0 0 0') == 0\nassert solution('1 1 1') == 1\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('0 0 0') == 0\nassert solution('3 6 9') == 6\nassert solution('4 4 4') == 4\nassert solution('0 0 0') == 0\nassert solution('5 5 5') == 1\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''0 0 0\n''') == '0'\nassert solution('''3 6 9\n''') == '6'\nassert solution('''4 4 4\n''') == '4'\nassert solution('''1 1 1\n''') == '0'\nassert solution('''2 2 2\n''') == '0'\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"3 6 9\") == \"6\"\nassert solution(\"4 4 4\") == \"4\"\nassert solution(\"0 0 0\") == \"0\"\nassert solution(\"\") == \"\"\nassert solution(\"2 1 2\") == \"2\"\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1 2 3') == \"1\"\nassert solution('0 0 0') == \"0\"\nassert solution('1 1 1') == \"1\"\nassert solution('4 4 4') == \"4\"\nassert solution('1 2 3') == \"1\"\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('5') == '1'\nassert solution('1 1 1 1 1') == '1'\nassert solution('3') == '2'\nassert solution('2 0 -1') == '2'\nassert solution('4') == '4'\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 1 1 1 1\\n\") == \"1\"\nassert solution(\"3\\n2 0 -1\\n\") == \"2\"\nassert solution(\"4\\n5 -6 -5 1\\n\") == \"4\"\nassert solution(\"1\\n1\\n\") == \"0\"\nassert solution(\"1000\\n1 1 1 1 1\\n\") == \"999\"\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('5\\n1 1 1 1 1') == '1'\nassert solution('3\\n2 0 -1') == '2'\nassert solution('4\\n5 -6 -5 1') == '4'\n\n\"\"\"\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"1\\n1\\n1\\n1\\n1\") == \"1\"\nassert solution(\"5\\n1 1 1 1 1\") == \"1\"\nassert solution(\"3\\n2 0 -1\") == \"2\"\nassert solution(\"4\\n5 -6 -5 1\") == \"4\"\n\n\"\"\"\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1 2 3 4 5\\n') == '5\\n'\nassert solution('5\\n2 4 3 1\\n') == '3\\n'\nassert solution('5\\n-6 -5 1\\n') == '4\\n'\nassert solution('3\\n2 0 -1\\n') == '2\\n'\nassert solution('10\\n-5 1 -10 1 -3 -5 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\\n') == '5\\n'\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''5''') == '1'\nassert solution('''3''') == '2'\nassert solution('''4''') == '4'\nassert solution('''1 0 -1''') == '1'\nassert solution('''3 1 0 -1''') == '3'\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1\\n1\\n1\\n1\\n1') == '1'\nassert solution('2\\n0\\n-1') == '1'\nassert solution('3\\n-2\\n-1\\n1') == '2'\nassert solution('5\\n5\\n5\\n5\\n5') == '1'\nassert solution('7\\n-5\\n1\\n2\\n3\\n4') == '2'\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\n'''5''') == '''1'''\nassert solution(\n'''3''') == '''2'''\nassert solution(\n'''4''') == '''4'''\nassert solution(\n'''5''') == '''1'''\nassert solution(\n'''10''') == '''5'''"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"3\") == \"\"\nassert solution(\"1\") == \"\"\nassert solution(\"1 2\") == \"\"\nassert solution(\"2 2\") == \"\"\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1 2 3 4') == 'Misha'\nassert solution('250 1000 20 30') == 'Vasya'\nassert solution('1000 1000 1 1') == 'Tie'"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == \"Vasya\" or solution(stdin) == \"Tie\"\n\n\"\"\"\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"500 1000 20 30\") == \"Vasya\"\nassert solution(\"1000 1000 1 1\") == \"Tie\"\nassert solution(\"1500 1000 176 177\") == \"Misha\"\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('500 1000 20 30') == 'Vasya'\nassert solution('1000 1000 1 1') == 'Tie'\nassert solution('1500 1000 176 177') == 'Misha'\nassert solution('2000 2000 1 1') == 'Tie'\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('500 1000 20 30') == \"Vasya\"\nassert solution('1000 1000 1 1') == \"Tie\"\nassert solution('1500 1000 176 177') == \"Misha\"\nassert solution('0 0 0 0') == \"Tie\"\nprint(solution(input()))\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('') == 'Tie'\nassert solution('50 2000 100 1') == 'Vasya'\nassert solution('500 1000 20 30') == 'Misha'\nassert solution('1000 1000 1 1') == 'Tie'\nassert solution('1500 1000 176 177') == 'Misha'\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('500 1000 20 30') == 'Vasya'\nassert solution('1000 1000 1 1') == 'Tie'\nassert solution('1500 1000 176 177') == 'Misha'\nassert solution('1500 1000 1 1') == 'Tie'\nassert solution('250 200 10 30') == 'Vasya'\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"\n500 1000 20 30\n\"\"\".strip()\n) == \"Vasya\"\n\nassert solution(\n\"\"\"\n1000 1000 1 1\n\"\"\".strip()\n) == \"Tie\"\n\nassert solution(\n\"\"\"\n1500 1000 176 177\n\"\"\".strip()\n) == \"Misha\"\n\nassert solution(\n\"\"\"\n150 600 235 2 3\n\"\"\".strip()\n) == \"Misha\"\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == \"\"\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('500 1000 20 30') == 'Vasya'\nassert solution('1000 1000 1 1') == 'Tie'\nassert solution('1500 1000 176 177') == 'Misha'\n"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdin\n\n\"\"\""
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdin\n\"\"\"\n\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"5 3 3 1 1\") == \"3.7677669529663684 3.7677669529663684 3.914213562373095\"\nassert solution(\"10 5 5 5 15\") == \"5.0 5.0 10.0\"\nassert solution(\"2 5 5 10 15\") == \"5.0 5.0 10.0\"\nassert solution(\"1 5 5 10 15\") == \"0.00000 0.00000 0.00001\"\nassert solution(\"5 5 5 5 5\") == \"5.00000 5.00000 5.00000\"\n"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"5 3 3 1 1\") == \"3.7677669529663684 3.7677669529663684 3.914213562373095\"\nassert solution(\"10 5 5 5 15\") == \"5.0 5.0 10.0\"\nprint(solution(input()))"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == '5.0 5.0 10.0'\n"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('3 3 1 1') == '3.7677669529663684 3.7677669529663684 3.914213562373095'\nassert solution('10 5 5 5 15') == '5.0 5.0 10.0'\nassert solution('10 7 5 5 15') == '5.0 5.0 10.0'\nassert solution('10 8 5 5 15') == '5.0 5.0 10.0'\nassert solution('10 9 5 5 15') == '5.0 5.0 10.0'\n"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"1 2 3 4 5\") == \"1.00000 1.00000 2.00000\"\nassert solution(\"10 5 5 5 15\") == \"5.00000 5.00000 10.00000\"\nassert solution(\"1 1 1 1 1\") == \"0.00000 0.00000 1.00000\"\nassert solution(\"1 1 1 0 1\") == \"0.00000 0.00000 1.00000\"\nassert solution(\"0 0 0 0 0\") == \"0.00000 0.00000 0.00000\"\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1 993244853') == '1'\nassert solution('2 993244853') == '6'\nassert solution('3 993244853') == '32'\nassert solution('2019 993244853') == '923958830'\nassert solution('2020 437122297') == '265955509'\nprint('Success')\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''1 993244853''') == '1'\nassert solution('''2 993244853''') == '6'\nassert solution('''3 993244853''') == '32'\nassert solution('''2019 993244853''') == '923958830'\nassert solution('''2020 437122297''') == '265955509'\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('4 2') == '1'\nassert solution('1 993244853') == '1'\nassert solution('2 993244853') == '6'\nassert solution('3 993244853') == '32'\nassert solution('2019 993244853') == '923958830'\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1 993244853') == '1'\nassert solution('2 993244853') == '6'\nassert solution('3 993244853') == '32'\nassert solution('2019 993244853') == '923958830'\nassert solution('2020 437122297') == '265955509'\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('3 1 993244853') == '6'\nassert solution('2 993244853') == '5'\nassert solution('2019 993244853') == '923958830'\nassert solution('2020 437122297') == '265955509'\n\n\n'''\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1 993244853') == '1'\nassert solution('2 993244853') == '6'\nassert solution('3 993244853') == '32'\nassert solution('2019 993244853') == '923958830'\nassert solution('2020 437122297') == '265955509'\n\n\n\n\n\n\"\"\"\n\nfrom collections import Counter\nfrom itertools import permutations\n\nn, m = [int(x) for x in input().split()]"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('1 993244853\\n') == '1'\nassert solution('2 993244853\\n') == '6'\nassert solution('3 993244853\\n') == '32'\nassert solution('2019 993244853\\n') == '923958830'\nassert solution('2020 437122297\\n') == '265955509'\n\n\n-----Alternate Solutions-----\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('9, 993244853') == '1'\nassert solution('2, 993244853') == '6'\nassert solution('3, 993244853') == '32'\nassert solution('2019, 993244853') == '923958830'\nassert solution('2020, 437122297') == '265955509'\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('3 993244853') == '6'\nassert solution('2 993244853') == '5'\nassert solution('2019 993244853') == '923958830'\nassert solution('2020 437122297') == '265955509'\nassert solution('3 993244853') == '32'\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1 993244853') == '1'\nassert solution('2 993244853') == '6'\nassert solution('3 993244853') == '32'\nassert solution('2019 993244853') == '923958830'\nassert solution('2020 437122297') == '265955509'"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1\\n4') == '1'\nassert solution('2\\n3') == '1'\nassert solution('3\\n3') == '2'\nassert solution('4\\n1') == '2'\nassert solution('5\\n1') == '3'\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''6\n4 5 4 5 4 4\n''') == '2'\n\nassert solution('''14\n1 5 4 5 2 4 4 5 5 4 3 4 5 5\n''') == '3'\n\nassert solution('''18\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('7\\n3 1 4 2 2 1 1') == '2\\n'\nassert solution('10\\n2 3 4 2 2 3 4 2 2 1') == '3\\n'\nassert solution('10\\n5 4 5 4 5 4 5 4 5 4 4') == '3\\n'\nassert solution('1000\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99') == '898\\n'\n\n\u0412 \u043a\u0430\u0436\u0434\u043e\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u0432\u044b\u0432\u043e\u0434\u0430 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043e\u0434\u0438\u043d \u0438 \u0442\u043e\u0442 \u0436\u0435 \u0444\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0432\u043e\u0434\u0430 \u0440\u0430\u0432\u0435\u043d\u043d\u044b\u0439 \u0438\u0437 \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u0441\u043b\u0435\u0432\u0430.\n\n\u0421\u043b\u0435\u0432\u0430 \u043f\u0435\u0440\u0432\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u043a\u0430\u043a \u0441\u0430\u043c\u0430 \u0441\u0442\u0440\u043e\u043a\u0430.\n\u041f\u0435\u0440\u0432\u0430\u044f \u043e\u0446\u0435\u043d\u043a\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0441\u0442\u0440\u043e\u043a\u0435, \u0432\u0442\u043e\u0440\u0430\u044f \u2013 \u043a\u0430\u043a \u043e\u0431\u044b\u0447\u043d\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0435 \u043a\u0430\u043b\u044c\u043a\u0443\u043b\u044f\u0442\u043e\u0440\u044b, \u0438 \u0442.\u043f. \u041f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0441\u0438\u043c\u0432\u043e\u043b \u0432\u044b\u0432\u043e\u0434\u0430 \u0440\u0430\u0432\u0435\u043d \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043d\u043e\u043c\u0443 \u0432 "
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('7') == '1'\nassert solution('5') == '1'\nassert solution('4') == '0'\nassert solution('6') == '2'\nassert solution('10') == '3'\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('4\\n1 1 1 1') == '1'\nassert solution('5\\n1 1 1 1 1') == '2'\nassert solution('3\\n2 3 1 2') == '1'\nassert solution('6\\n3 1 2 3 4 5') == '1'\nassert solution('14\\n1 5 4 5 2 4 4 5 5 4 3 4 5 5') == '2'\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('2\\n1') == '1'\nassert solution('4\\n2 4 4 1 1 1 2\\n3') == '2'\nassert solution('3\\n1 2 1\\n2 1 1\\n3') == '2'\nassert solution('9\\n1 3 2 3 2 1 1 3 2\\n3') == '3'\nassert solution('10\\n1 2 3 4 2 3 4 1 2 3 4\\n3') == '2'\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''6\n4 5 4 5 4 4\n''') == '2'\nassert solution('''14\n1 5 4 5 2 4 4 5 5 4 3 4 5 5\n''') == '3'\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1 2 3') == '1'\nassert solution('5 4 3 2 1') == '0'\nassert solution('1 1 1 1 1 1') == '1'\nassert solution('1 2 1 2 1') == '2'\nassert solution('5 1 5 5 1 5') == '1'\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''6\n4 5 4 5 4 4\n''') == '2'\nassert solution('''14\n1 5 4 5 2 4 4 5 5 4 3 4 5 5\n''') == '3'\nassert solution('''12\n4 5 4 5 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1\\n1') == '1'\nassert solution('2\\n2') == '2'\nassert solution('3\\n3') == '1'\nassert solution('4\\n4') == '1'\nassert solution('5\\n5') == '2'\n"
    },
    {
        "number": 609,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''\n5\nxooox\noxoxo\nsoxoo\noxoxo\nxooox\n''') == 'YES'\n\nassert solution('''\n3\nwsw\nsws\nwsw\n''') == 'NO'\n\nassert solution('''\n3\nxpx\npxp\nxpe\n''') == 'YES'\n\nassert solution('''\n3\nxxg\nxgg\nxgx\n''') == 'NO'\n\nassert solution('''\n5\nxyox\nxoxo\nyoxo\nxoxo\nxyox\n''') == 'NO'"
    },
    {
        "number": 609,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''5\nxooox\noxoxo\nsoxoo\noxoxo\nxooox\n''') == 'NO'\nassert solution('''3\nwsw\nsws\nwsw\n''') == 'YES'\nassert solution('''3\nxpx\npxp\nxpe\n''') == 'NO'\n"
    },
    {
        "number": 609,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('5\\nxooox\\noxoxo\\nsoxoo\\noxoxo\\nxooox\\n') == 'NO'\nassert solution('3\\nwsw\\nsws\\nwsw\\n') == 'YES'\nassert solution('5\\nxxoxoox\\noxoxoox\\noxoxoox\\noxoxoox\\nxxoxoox\\n') == 'YES'\nassert solution('3\\nxppxp\\npppxx\\nppxpp\\nppxpp\\nppxpp\\n') == 'YES'\nassert solution('5\\nxoxoxox\\noxoxoxox\\noxoxoxox\\noxoxoxox\\noxoxoxox\\n') == 'NO'\n"
    },
    {
        "number": 609,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('xooox') == 'YES'\nassert solution('oxoxo') == 'NO'\nassert solution('soxoo') == 'NO'\nassert solution('oxoxo') == 'YES'\nassert solution('xooox') == 'YES'\n"
    },
    {
        "number": 609,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('2 3\\nxx\\nyy\\n') == 'NO'\nassert solution('1 1\\nx\\n') == 'YES'\nassert solution('3 1\\nww\\nwww\\nwww\\n') == 'NO'\nassert solution('1 1\\nwx\\nwx\\nwx\\n') == 'YES'\nassert solution('4 1\\nxxxx\\nxxxx\\nxxxx\\nxx\\n') == 'NO'\n"
    },
    {
        "number": 609,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"NO\"\nassert solution(\"5\") == \"YES\"\nassert solution(\"4\") == \"YES\"\nassert solution(\"4\") == \"NO\"\nassert solution(\"4\") == \"YES\"\n"
    },
    {
        "number": 609,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('wsw') == 'NO'\nassert solution('wsw') == 'NO'\nassert solution('wsw') == 'NO'\nassert solution('wsw') == 'NO'\nassert solution('wsw') == 'NO'\n"
    },
    {
        "number": 609,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('5\\nxooox\\noxoxo\\nsoxoo\\noxoxo\\nxooox\\n') == 'YES'\nassert solution('3\\nwsw\\nsws\\nwsw\\n') == 'YES'\nassert solution('3\\nxpx\\npxp\\nxpe\\n') == 'NO'\nassert solution('3\\nwwx\\nwxa\\nwxa\\n') == 'YES'\n\n\n------Solutions from the book------\n"
    },
    {
        "number": 609,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"wsw\") == \"NO\"\nassert solution(\"sws\") == \"YES\"\nassert solution(\"wsw\") == \"NO\"\nassert solution(\"wsw\") == \"NO\"\nassert solution(\"wsw\") == \"NO\"\n"
    },
    {
        "number": 609,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(input()) == \"NO\"\nassert solution(input()) == \"YES\""
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('3 1') == '2 1'\nassert solution('2 4') == '3 2'\nassert solution('1 1') == '1 1'\nassert solution('1 1') == '1 1'\nassert solution('1 2') == '0 1'\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(input(\"\")) == \"\"\n\"\"\"\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('3 1') == '2 1'\nassert solution('2 4') == '3 2'\n\n-----\n\n\"\"\"\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('3 1') == '2 1'\nassert solution('2 4') == '3 2'\nassert solution('1 1') == '1 1'\nassert solution('1 1') == '1 1'\nassert solution('2 3') == '3 0'\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('3 1') == '2 1'\nassert solution('2 4') == '3 2'\nassert solution('2 2') == '2 1'\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''3 1''') == '2 1'\nassert solution('''2 4''') == '3 2'\nassert solution('''1 1''') == '1 1'\nassert solution('''15 45''') == '76 8'\nassert solution('''5 11''') == '6 4'\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('3 1') == '2 1'\nassert solution('2 4') == '3 2'\nassert solution('2 2') == '3 1'\nassert solution('1 2') == '0 0'\nassert solution('4 3') == '2 1'\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\n'''3 1'''\n) == '2 1'\nassert solution(\n'''2 4'''\n) == '3 2'\nassert solution(\n'''1 1'''\n) == '0 0'\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"3 1\") == \"2 1\"\nassert solution(\"2 4\") == \"3 2\"\nassert solution(\"2 2\") == \"1 1\"\nassert solution(\"3 3\") == \"2 2\"\nassert solution(\"3 3\") == \"2 1\"\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('-1 3\\n-1 -4\\n0 0') == '-2.500000000000000'\nassert solution('2 3\\n-1 3\\n0 0') == '7.000000000000000'\nassert solution('3 2\\n0 2\\n5 0') == '7.000000000000000'\nassert solution('3 2\\n1 0\\n0 0') == '3.000000000000000'\nassert solution('3 2\\n0 2\\n5 0') == '-2.00000000000000'\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('2 3\\n-1 3\\n0 0\\n-1 -4') == '-2.500000000000000'\nassert solution('3 2\\n0 2\\n5 0') == '7.000000000000000'\nassert solution('3 2\\n-2 2\\n-1 1\\n5 0') == '7.000000000000000'\nassert solution('3 2\\n0 2\\n0 2\\n0 2') == '7.000000000000000'\nassert solution('3 2\\n-1 1\\n0 1\\n0 1\\n0 1') == '7.000000000000000'\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('2 3\\n-1 3\\n0 0\\n-1 -4') == '-2.500000000000000'\nassert solution('3 2\\n0 2\\n5 0\\n') == '7.000000000000000'\nassert solution('1 1\\n1 -1') == '-0.5'\nassert solution('4 3\\n-1 1\\n1 -1\\n-1 -1\\n0 0') == '0.5'\nassert solution('1 1\\n1 1') == '1.0'\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1\\n1') == '1'\nassert solution('2\\n1') == '1'\nassert solution('3\\n1') == '1'\nassert solution('3\\n2') == '0.5'\nassert solution('3\\n3') == '1'\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''2 3\n-1 3\n0 0\n-1 -4''') == '-2.500000000000000'\nassert solution('''3 2\n0 2\n5 0\n''') == '7.000000000000000'\nassert solution('''3 2\n-1 -1\n0 0\n2 2\n''') == '2.500000000000000'\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('2 3\\n-1 3\\n0 0\\n-1 -4') == '-2.500000000000000'\nassert solution('3 2\\n0 2\\n5 0') == '7.000000000000000'\nassert solution('2 1\\n0 1\\n0 0') == '1.5'\nassert solution('3 1\\n0 1\\n0 0\\n0 0') == '2.5'\nassert solution('7 1\\n0 1\\n0 0\\n0 0\\n0 0') == '9.000000000000000'\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == ''"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == '7.000000000000000'\nassert solution(stdin) == '7.000000000000000'\nassert solution(stdin) == '7.000000000000000'\nassert solution(stdin) == '7.000000000000000'\nassert solution(stdin) == '7.000000000000000'\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(input()) == \"10.000000000000000\"\n\n\n\n\"\"\"\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"5 3 1\\n1 2 3 7 5\") == \"YES\\n3 5 1 3\\n1 7\\n1 2\\n\"\nassert solution(\"5 4 1\\n1 2 3 4 6\") == \"NO\\n\"\nassert solution(\"5 3 1\\n1 2 3 4 6\") == \"YES\\n3 5 1 3\\n1 7\\n1 2\\n\"\nassert solution(\"5 3 1\\n1 2 3 4 6\") == \"YES\\n3 5 1 3\\n1 7\\n1 2\\n\"\nassert solution(\"5 3 1\\n1 2 3 4 6\") == \"YES\\n3 5 1 3\\n1 7\\n1 2\\n\"\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('2 3 1') == ''\nassert solution('5 3 1') == 'NO'\nassert solution('5 3 1\\n1 2 3 7 5') == 'YES\\n3 5 1 3\\n1 7\\n1 2\\n1 6'\nassert solution('5 3 1\\n1 2 3 7 5\\n1 6 2') == 'YES\\n3 5 1 3\\n1 7\\n1 2\\n1 6'\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"4 5 3\") == \"YES\\n3 5 1 3\\n1 7\"\nassert solution(\"5 5 3\") == \"NO\"\nassert solution(\"5 5 3\") == \"YES\\n3 5 1 3\\n1 7\"\nassert solution(\"5 5 2\") == \"NO\"\nassert solution(\"5 5 2\") == \"YES\\n3 5 1 3\\n1 7\"\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"2 5 3\\n2 6 10 5 9\\n\") == \"YES\\n3 5 1 3\\n1 7\\n1 2\\n\"\nassert solution(\"2 5 3\\n7 14 2 9 5\\n\") == \"NO\\n\"\nassert solution(\"3 2 1\\n1 2 3\\n3 4 5\\n\") == \"YES\\n3 5 1 3\\n1 2\\n1 3\\n1 4\\n1 5\\n3 4\\n5 2\\n\"\nassert solution(\"5 4 1\\n1 2 3 4 5 6\\n\") == \"YES\\n2 1 5 3\\n1 4\\n1 6\\n3 4\\n5 2\\n3 6\\n\"\nassert solution(\"5 4 1\\n1 2 3 4 5 6\\n\") == \"NO\\n\"\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"5 5 3\\n2 6 10 5 9\\n\") == \"YES\\n1 9\\n1 5\\n1 10\\n1 6\\n1 2\\n\"\nassert solution(\"5 5 3\\n7 14 2 9 5\\n\") == \"NO\\n\"\nassert solution(\"5 3 1\\n1 2 3 7 5\\n\") == \"YES\\n3 5 1 3\\n1 7\\n1 2\\n1 6\\n1 2\\n\"\nassert solution(\"5 3 1\\n1 2 3 7 5\\n\") == \"YES\\n3 5 1 3\\n1 7\\n1 2\\n1 6\\n1 2\\n\"\nassert solution(\"5 4 2\\n3 2 1 4 7\\n\") == \"YES\\n2 1 4 3\\n1 7\\n1 2\\n\"\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('5 5 3') == 'YES\\n1 9\\n1 5\\n1 10\\n1 6\\n1 2\\n'\nassert solution('5 5 3\\n2 6 10 5 9') == 'NO\\n'\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3 4 5 6\\n7 8 9 10\") == \"NO\"\nassert solution(\"2 3 4 5 6\\n7 8 9 10\") == \"YES\\n3 5 1 3\\n7 9\\n1 2\\n3 4\"\nassert solution(\"2 3 4 5 6\\n6 5 4 3 2 1\") == \"YES\\n3 5 1 3\\n6 5 4 3 2\\n1 2\"\nassert solution(\"2 3 4 5 6\\n6 5 4 3 2 1\\n3 5 1 7\") == \"YES\\n3 5 1 3\\n6 5 4 3 2\\n1 7\"\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"5 5 3\\n2 6 10 5 9\\n\") == \"YES\\n1 9\\n1 5\\n1 10\\n1 6\\n1 2\\n\"\nassert solution(\"5 5 3\\n7 14 2 9 5\\n\") == \"NO\\n\"\n"
    },
    {
        "number": 613,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('2 2 2') == '2'\nassert solution('2 3 3') == '1'\nprint(\"Tests passed successfully.\")\n"
    },
    {
        "number": 613,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('2 2 2') == '2'\nassert solution('2 3 3') == '1'\nassert solution('2 3 3') == 'inf'\nassert solution('1 1 1') == 'inf'\nassert solution('1 1 1') == 'inf'\n"
    },
    {
        "number": 613,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('2 2 2') == '2'\nassert solution('2 3 3') == '1'\nassert solution('2 4 5') == 'inf'\nassert solution('2 3 3') == '1'\nassert solution('2 5 5') == 'inf'\n"
    },
    {
        "number": 613,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '2'\nassert solution(stdin) == 'inf'\nassert solution(stdin) == 'inf'\nassert solution(stdin) == 'inf'\n"
    },
    {
        "number": 613,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('2 2 2') == '2'\nassert solution('2 3 3') == '1'\nassert solution('2 4 6') == 'inf'\nassert solution('2 10 10') == '2'\nassert solution('2 4 6') == '1'\n"
    },
    {
        "number": 613,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('2 2 2') == '2'\nassert solution('2 3 3') == '1'\nassert solution('2 3 1') == 'inf'\nassert solution('0 0 0') == 'inf'\n\n'''\n"
    },
    {
        "number": 613,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('2 2 2') == '2'\nassert solution('2 3 3') == '1'\n"
    },
    {
        "number": 613,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('2 2 2') == '2'\nassert solution('2 3 3') == '1'\nassert solution('10 10 10') == 'inf'\nassert solution('3 5 3') == '2'\nassert solution('4 9 17') == '1'\n"
    },
    {
        "number": 613,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''2 2 2''') == 2\nassert solution('''2 3 3''') == 1\nassert solution('''5 6 10''') == 0\nassert solution('''5 10 0''') == 0\nassert solution('''5 0 0''') == 0\n"
    },
    {
        "number": 613,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('2 3 3') == '1'\nassert solution('2 3 2') == 'inf'\nassert solution('2 2 2') == '2'\nassert solution('1 1 1') == 'inf'\nassert solution('1 1 1 0') == '2'\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"1 1\") == \"0\"\nassert solution(\"2 1\") == \"0\"\nassert solution(\"2 2\") == \"0\"\nassert solution(\"3 3\") == \"0\"\nassert solution(\"3 10\") == \"0\"\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''1 1\n2 1\n''') == '0'\nassert solution('''2 2\n1 3\n2 2\n''') == '3'\nassert solution('''4 3\n3 10\n2 7\n2 8\n1 1\n''') == '10'\nassert solution('''2 2\n1 2\n3 1\n''') == '2'\nassert solution('''2 2\n1 3\n3 1\n''') == '3'\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''1 1\n2 1''') == '0'\nassert solution('''2 2\n1 3\n2 2''') == '3'\nassert solution('''4 3\n3 10\n2 7\n2 8\n1 1\n''') == '10'\nassert solution('''4 3\n2 1\n1 1\n2 2\n1 2\n''') == '3'\nassert solution('''10 9\n1 1\n1 1\n2 2\n1 3\n1 2\n1 2\n1 3\n1 2\n1 2\n1 2\n1 2\n1 3\n1 2\n1 2\n1 2\n1 3\n1 3\n1 2\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1 1') == '0'\nassert solution('2 1') == '0'\nassert solution('2 2') == '3'\nassert solution('2 2\\n1 3\\n2 2') == '10'\nassert solution('1000000 1000000') == '1000000'\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"1 1\") == \"0\"\nassert solution(\"2 1\") == \"0\"\nassert solution(\"3 2\") == \"3\"\nassert solution(\"4 3\") == \"10\"\nassert solution(\"1 10\") == \"10\"\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1 1') == '0'\nassert solution('2 1') == '0'\nassert solution('2 2') == '3'\nassert solution('3 2') == '1'\nassert solution('4 3') == '3'\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"1 1\\n2 1\\n\") == \"0\"\nassert solution(\"1 1\\n2 1\\n3 1\\n4 1\") == \"4\"\nassert solution(\"2 1\\n1 1\\n2 1\\n3 1\\n4 1\\n5 1\") == \"10\"\nassert solution(\"2 2\\n1 3\\n2 2\\n3 2\\n4 2\\n5 2\") == \"5\"\nassert solution(\"3 1\\n1 1\\n2 1\\n3 1\\n4 1\\n5 1\") == \"5\"\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"1 1\") == \"0\"\nassert solution(\"2 1\") == \"0\"\nassert solution(\"1 3\") == \"0\"\nassert solution(\"2 2\") == \"0\"\nassert solution(\"1 2\") == \"3\"\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1\\n2\\n3') == '0'\nassert solution('2\\n1\\n3') == '3'\nassert solution('1\\n1\\n1\\n1') == '3'\nassert solution('3\\n3\\n3') == '9'\nassert solution('1\\n2\\n3') == '3'\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\n'''\n5\n3 2 4 1 2\n''') == '2'\n\nassert solution(\n'''\n4\n1 1 1 1\n''') == '0'\n\nassert solution(\n'''\n7\n2 2 3 3 4 4 5 5\n''') == '2'\n\nassert solution(\n'''\n7\n1 1 2 3 4 5 6 7\n''') == '0'\n\nassert solution(\n'''\n8\n4 3 6 8 7 5 2 1 6\n''') == '0'"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('5\\n3 2 4 1 2\\n') == '2'\nassert solution('1\\n1\\n') == '0'\nassert solution('1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('3\\n3 2 4 1 2') == '2'\nassert solution('1\\n1') == '0'\nassert solution('5\\n3 2 4 1 2') == '2'\nassert solution('5\\n2 1 2 3 4') == '0'\nassert solution('10\\n10 9 8 7 6 5 4 3 2 1') == '0'\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"\"\"3\n2 1\"\"\") == \"2\"\nassert solution(\"\"\"6\n2 1 4 3 3 3\"\"\") == \"2\"\nassert solution(\"\"\"1\n1\"\"\") == \"0\"\nassert solution(\"\"\"0\n1\"\"\") == \"0\"\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('4\\n3 2 4 1 2') == '2'\nassert solution('5\\n3 2 4 1 2') == '2'\nassert solution('5\\n1 2 4 3 2') == '1'\nassert solution('5\\n3 2 4 1 2') == '1'\nassert solution('5\\n1 2 4 3 2') == '0'\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('3 2 4 1 2') == '2'\nassert solution('1 2 3 4 5') == '0'\nassert solution('10 2 3 4 5 6 7 8 9 10') == '4'\nassert solution('100000000 7 1000000000 1000000000') == '1'\nassert solution('100000000 1 1000000000 1000000000') == '0'\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('4\\n1 2 3 4') == '2'\nassert solution('3\\n1 2 3') == '2'\nassert solution('5\\n3 2 4 1 2') == '2'\nassert solution('6\\n1 2 3 4 5 6') == '2'\nassert solution('7\\n1 2 3 4 5 6 7') == '1'\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == \"2\"\n\"\"\"\n\"\"\"\n----- brute force -----\nConstraints:\n\n1 <= n <= 10^5\n1 <= A[i] <= 10^9\n\n\"\"\"\nn = int(input())\nA = [int(x) for x in input().split()]\n\nmin_diff = float(\"inf\")\nfor i in range(n):\n    for j in range(i+1, n):\n        for k in range(j+1, n):\n            for l in range(k+1, n):\n                min_diff = min(abs(max(A[i], A[j], A[k], A[l]) - min(A[i], A[j], A[k], A[l])), min_diff)\nprint(min_diff)\n\"\"\"\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''5\n3 2 4 1 2''') == '2'\nassert solution('''1\n1''') == '0'\nassert solution('''2\n10\n20\n''') == '0'\nassert solution('''3\n30\n70\n80\n100\n''') == '2'\nassert solution('''4\n40\n30\n70\n50\n60\n70\n80\n100\n120\n140\n150\n160\n170\n180\n200\n''') == '0'\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('2 3\\n10 1\\n1') == 25\nassert solution('2 3\\n10 1\\n1') == 25\nassert solution('2 3\\n10 1\\n1') == 25\nassert solution('2 3\\n10 1\\n1') == 25\nassert solution('2 3\\n10 1\\n1') == 25\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"1 1\\n1\") == \"1\"\nassert solution(\"1 1\\n1\") == \"1\"\nassert solution(\"1 1\\n1\") == \"1\"\nassert solution(\"1 1\\n1\") == \"1\"\nassert solution(\"1 1\\n1\") == \"1\"\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1\\n3\\n1\\n2\\n1') == '25'\nassert solution('2\\n3\\n1\\n2\\n1') == '25'\nassert solution('3\\n2\\n1\\n2\\n1') == '25'\nassert solution('4\\n3\\n1\\n2\\n1') == '25'\nassert solution('5\\n3\\n1\\n2\\n1') == '25'\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"2 3\\n10 1\\n1\\n15 1\\n2\\n30 2\\n1 2\") == \"25\"\nassert solution(\"2 3\\n10 1\\n1\\n15 1\\n2\\n30 2\\n1 3\") == \"-1\"\nassert solution(\"2 3\\n10 1\\n1\\n15 1\\n2\\n30 2\\n1 2\") == \"25\"\nassert solution(\"2 3\\n10 1\\n1\\n15 1\\n2\\n30 2\\n1 3\") == \"-1\"\nassert solution(\"2 3\\n10 1\\n1\\n15 1\\n2\\n30 2\\n1 2\") == \"25\"\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"2 3\") == \"25\"\nassert solution(\"10 1\") == \"25\"\nassert solution(\"15 1\") == \"25\"\nassert solution(\"15 1\") == \"25\"\nassert solution(\"30 2\") == \"25\"\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('10 1\\n1') == '25'\nassert solution('15 1\\n1') == '30'\nassert solution('2 3\\n10 1\\n1') == '25'\nassert solution('2 3\\n10 1\\n1') == '30'\nassert solution('3 3\\n10 1\\n1') == '-1'\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('2 3\\n10 1\\n1\\n15 1\\n2\\n30 2\\n1 2') == '25'\n\n\"\"\"\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('10 1\\n1') == '25'\nassert solution('2 3\\n10 1\\n1') == '25'\nassert solution('2 3\\n10 1\\n1') == '25'\nassert solution('10 15\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1 2') == -1\nassert solution('1 1') == -1\nassert solution('2 3') == -1\nassert solution('1 1') == 1\nassert solution('1 2') == 3\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1 2') == '25'\nassert solution('2 3') == '25'\nassert solution('1 3') == '-1'\nassert solution('1 4') == '25'\nassert solution('2 4') == '25'\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"3+5*7+8*4\") == '303'\nassert solution(\"2+3*5\") == '25'\nassert solution(\"3*4*5\") == '60'\nassert solution(\"3*4*5\") == '60'\nassert solution(\"3+4*5\") == '30'\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('3+5*7+8*4') == '303'\nassert solution('2+3*5') == '25'\nassert solution('3*4*5') == '60'\nassert solution('(2+3)*4*5') == '60'\nassert solution('2*3*5') == '60'"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('') == None\nassert solution('3+5*7+8*4') == '303'\nassert solution('2+3*5') == '25'\nassert solution('3*4*5') == '60'\nassert solution('3*(4*5)') == '60'\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('3+5*7+8*4') == '303'\nassert solution('2+3*5') == '25'\nassert solution('3*4*5') == '60'\n\n-----"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('3+5*7+8*4') == '303'\nassert solution('2+3*5') == '25'\nassert solution('3*4*5') == '60'\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"3+5*7+8*4\") == '303'\nassert solution(\"2+3*5\") == '25'\nassert solution(\"3*4*5\") == '60'\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"3+5*7+8*4\") == \"303\"\nassert solution(\"2+3*5\") == \"25\"\nassert solution(\"3*4*5\") == \"60\"\nassert solution(\"123456789\") == \"123456789\"\nassert solution(\"99\") == \"99\"\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('3+5*7+8*4') == '303'\nassert solution('2+3*5') == '25'\nassert solution('3*4*5') == '60'\nassert solution('3*4*5') == '60'\nassert solution('3*4*5') == '60'\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"3+5*7+8*4\") == \"303\"\nassert solution(\"2+3*5\") == \"25\"\nassert solution(\"3*4*5\") == \"60\"\nassert solution(\"3*4*5\") == \"60\"\nassert solution(\"3+5*7+8*4\") == \"303\"\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"3+5*7+8*4\") == '303'\nassert solution(\"2+3*5\") == '25'\nassert solution(\"3*4*5\") == '60'\nassert solution(\"1+2*3\") == '7'\nassert solution(\"1+2*3*4*5\") == '120'\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('AC|T') == 'AC|TL'\nassert solution('L') == 'AC|TL'\nassert solution('W|T') == 'XYZ|ABC'\nassert solution('|ABC') == 'XYZ|ABC'\nassert solution('F') == 'Impossible'\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"AC|T\") == \"AC|TL\"\nassert solution(\"|ABC\") == \"|ABC\"\nassert solution(\"W|T\") == \"Impossible\"\nassert solution(\"|F\") == \"Impossible\"\nassert solution(\"ABC|\") == \"ABC|\"\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''AC|T\nL\n''') == 'AC|TL'\nassert solution('''|ABC\nXYZ\n''') == 'XYZ|ABC'\nassert solution('''W|T\nF\n''') == 'Impossible'\nassert solution('''ABC|\nD\n''') == 'Impossible'\nassert solution('''ABC\n''') == 'Impossible'\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"AC|T\") == \"AC|TL\"\nassert solution(\"L\") == \"AC|TL\"\nassert solution(\"|ABC\") == \"XYZ|ABC\"\nassert solution(\"W|T\") == \"Impossible\"\nassert solution(\"F\") == \"Impossible\"\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"AC|T\") == \"AC|TL\"\nassert solution(\"L\") == \"AC|TL\"\nassert solution(\"W|T\") == \"Impossible\"\nassert solution(\"F\") == \"Impossible\"\nassert solution(\"ABC|\") == \"Impossible\"\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''AC|T\nL\n''') == 'AC|TL'\nassert solution('''|ABC\nXYZ\n''') == 'XYZ|ABC'\nassert solution('''W|T\nF\n''') == 'Impossible'\nassert solution('''|\nD\n''') == 'Impossible'\nassert solution('''ABC|\nD\n''') == 'Impossible'\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"AC|T\") == \"AC|TL\"\nassert solution(\"L\") == \"TL\"\nassert solution(\"ABC\") == \"XYZ|ABC\"\nassert solution(\"F\") == \"Impossible\"\nassert solution(\"ABC|\") == \"Impossible\"\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('AC|T') == 'AC|TL'\nassert solution('AC|T|') == 'Impossible'\nassert solution('AC|T|F') == 'Impossible'\nassert solution('|ABC') == '|ABC'\nassert solution('AB|C|F|T') == 'ABC|F|T|AB'\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\n    \"AC|T\\n\"\n    \"L\\n\"\n) == \"AC|TL\"\nassert solution(\n    \"|ABC\\n\"\n    \"XYZ\\n\"\n) == \"XYZ|ABC\"\nassert solution(\n    \"W|T\\n\"\n    \"F\\n\"\n) == \"Impossible\"\nassert solution(\n    \"|\\n\"\n    \"E\"\n) == \"Impossible\"\nassert solution(\n    \"ABC|\\n\"\n    \"D\\n\"\n) == \"ABC|D\"\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"AC|T\") == \"AC|TL\"\nassert solution(\"L\") == \"AC|TL\"\nassert solution(\"W|T\") == \"XYZ|ABC\"\nassert solution(\"F\") == \"Impossible\""
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('5 4 3') == '3 1'\nassert solution('6 8 2') == '7 0'\nassert solution('0 5 0') == '0 0'\nassert solution('7 7 0') == '7 0'\nassert solution('7 0 0') == '7 0'\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('4 3 2') == '3 1'\nassert solution('8 8 2') == '7 0'\nassert solution('3 3 3') == '3 1'\nassert solution('0 0 0') == '0 0'\nassert solution('1 1 1') == '1 0'\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('5 4 3') == '3 1'\nassert solution('6 8 2') == '7 0'\nassert solution('1000000007999999989999998') == '1000000007999999989999998'"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == \"7 0\"\nassert solution(stdin) == \"3 1\"\nassert solution(stdin) == \"7 0\"\nassert solution(stdin) == \"3 1\"\nassert solution(stdin) == \"7 0\"\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(input()) == ''\n\"\"\"\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"5 4 3\") == \"3 1\"\nassert solution(\"6 8 2\") == \"7 0\"\nassert solution(\"0 0 0\") == \"0 0\"\nassert solution(\"10 10 10\") == \"10 9\"\nassert solution(\"100 100 100\") == \"100 99\"\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('0 0\\n1 0\\n0 1') == '3'\nassert solution('0 0\\n1 0\\n0 1\\n1 1') == '3\\n1 -1\\n-1 1'\nassert solution('1 1\\n1 1') == '2'\nassert solution('1 1\\n1 1\\n1 1') == '2\\n1 1\\n1 1'\nassert solution('1 1\\n1 1\\n1 1\\n1 1') == '2\\n1 1\\n1 1'\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('0 0\\n1 0\\n0 1\\n') == '3\\n1 -1\\n-1 1\\n1 1'"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('0 0\\n1 0\\n0 1\\n') == '3'\nassert solution('0 0\\n1 0\\n0 1\\n1 1\\n1 1\\n0 0\\n1 1\\n0 1\\n') == '9'\nassert solution('0 0\\n1 0\\n0 1\\n1 1\\n1 1\\n0 0\\n0 1\\n0 1\\n1 1\\n') == '1'\nassert solution('0 0\\n1 0\\n0 1\\n0 1\\n1 1\\n1 1\\n0 0\\n0 1\\n1 1\\n1 1\\n') == '2'\nassert solution('0 0\\n1 0\\n0 1\\n1 1\\n1 1\\n0 0\\n0 1\\n1 1\\n1 1\\n1 1\\n') == '0'\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('0 0\\n1 0\\n0 1') == '3\\n1 -1\\n-1 1\\n1 1'\nassert solution('1 1\\n0 1\\n1 1') == '1\\n1 -1\\n-1 1'\nassert solution('1 1\\n0 0\\n0 1') == '1\\n0 -1\\n1 1'\nassert solution('1 1\\n1 0\\n0 1') == '1\\n1 -1\\n-1 1'\nassert solution('1 0\\n1 0\\n0 0') == '1'\n\"\"\"\n\nfrom math import sqrt\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''0 0\n1 0\n0 1\n''') == '3'\nassert solution('''0 0\n1 0\n0 1\n1 1\n''') == '2'\nassert solution('''0 0\n0 1\n1 1\n''') == '1'\nassert solution('''0 0\n1 1\n0 1\n''') == '0'\nassert solution('''0 0\n-1 0\n0 1\n''') == '0'\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('0 0') == '3'\nassert solution('1 0') == '1 -1'\nassert solution('0 1') == '1 1'\nassert solution('-1 1') == '1 -1'\nassert solution('1 -1') == '-1 1'\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('0 0\\n1 0\\n0 1') == 3\nassert solution('0 0\\n1 0\\n0 1\\n1 1') == 0\nassert solution('0 0\\n1 0\\n0 1\\n1 1\\n1 1') == 1\n\n\n'''"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"0 0\") == 3\nassert solution(\"1 0\") == 3\nassert solution(\"0 1\") == 3\nassert solution(\"1 1\") == 3\nassert solution(\"0 0 0\") == 1\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"0 0\") == 3\nassert solution(\"1 0\") == 1\nassert solution(\"0 1\") == 1\nassert solution(\"0 -1\") == 1\nassert solution(\"1 -1\") == 1\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''0 0\n1 0\n0 1\n''') == '3'\nassert solution('''0 0\n1 0\n0 1\n''') == '3'\nassert solution('''0 0\n1 0\n0 1\n''') == '3'\nassert solution('''0 0\n-1 0\n0 1\n''') == '1'\nassert solution('''0 0\n1 0\n1 1\n''') == '3'\n"
    },
    {
        "number": 621,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 621,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('11\\n1 2 3 -4 -5 -6 5 -5 -6 -7 6') == '3\\n5 3 3'\nassert solution('5\\n0 -1 100 -1 0') == '1\\n5'\nassert solution('2\\n1 2') == '2\\n2'\nassert solution('7\\n-1 -1 -1 -1 -1 -1 -1 -1 -1') == '7\\n7'\nassert solution('10\\n-2 -3 -2 -3 -2 -3 -2 -3 -2 -3') == '10\\n4'\n"
    },
    {
        "number": 621,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''11\n1 2 3 -4 -5 -6 5 -5 -6 -7 6''') == '3'\nassert solution('''5\n0 -1 100 -1 0''') == '1'\nassert solution('''7\n-1 0 -1 -1 0 1 1 1 1''') == '3'\nassert solution('''5\n-1 -1 -1 -1 0''') == '2'\nassert solution('''7\n-1 -1 -1 -1 -1 -1 -1 -1''') == '3'\n"
    },
    {
        "number": 621,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == '3'\nassert solution('-4 -5 -6 5 -5 -6 -7 6') == '3'\nassert solution('0 -1 100 -1 0') == '1'\nassert solution('5 -5 -6 -7 6') == '5'\n"
    },
    {
        "number": 621,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(input) == expected\n\n\"\"\"\n\nfrom sys import stdin, stdout"
    },
    {
        "number": 621,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''11\n1 2 3 -4 -5 -6 5 -5 -6 -7 6''') == '''3\n5 3 3 \n'''\n\nassert solution('''5\n0 -1 100 -1 0''') == '''1\n5 \n'''\n\nassert solution('''7\n1 2 3 -4 -5 -6 5 -5 -6 -7 6''') == '''2\n5 3 3 7 \n'''\n\nassert solution('''12\n1 2 3 -4 -5 -6 5 -5 -6 -7 6 7 -2 -7 -2''') == '''3\n5 3 3 7 \n'''\n\nassert solution('''11\n-5 -3 1 0 -4 1 -2 0 0 2 3 4 -1 -2 -1''') == '''3\n4 1 2 3 \n'''"
    },
    {
        "number": 621,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('5\\n2 1 3 -2 -3 -1') == '1'\nassert solution('5\\n2 1 -2 1') == '2'\nassert solution('3\\n2 1 -1 1') == '1'\nassert solution('5\\n-1 1 -1 -1 -1') == '2'\nassert solution('5\\n1 -1 1 -1 -1') == '3'\n"
    },
    {
        "number": 621,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 2 3 4\\n\") == \"3\"\nassert solution(\"6\\n1 2 3 4 5 6 7\\n\") == \"1\"\nassert solution(\"7\\n-1 -1 -1 -1 -1 -1 -1\\n\") == \"7\"\nassert solution(\"4\\n1 2 3 4\\n\") == \"1\"\nassert solution(\"5\\n1 2 3 4 5\\n\") == \"2\"\n"
    },
    {
        "number": 621,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\n\n\n\"\"\"\n\nfrom sys import stdin, stdout\n\nn = int(stdin.readline().strip())\na = [int(x) for x in stdin.readline().split()]\n\nn = len(a)\n\na = sorted(a)\n\nd = {}\n\ncount = 0"
    },
    {
        "number": 621,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == result\n\n\"\"\"\n\nN = int(input())\nA = list(map(int,input().split()))"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1 2') == '2'\nassert solution('4 8') == '4'\nassert solution('6 7') == '5'\nassert solution('8 9') == '6'\nassert solution('10 11') == '7'\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('1 2') == '2'\nassert solution('4 8') == '4'\nassert solution('3 2') == '2'\nassert solution('4 8') == '4'\nassert solution('2 1') == '1'\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''3 2''') == '2'\nassert solution('''4 8''') == '4'\nassert solution('''1 2''') == '1'\nassert solution('''20 10''') == '4'\nassert solution('''20 100''') == '1'\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"3 2\") == \"2\"\nassert solution(\"4 8\") == \"4\"\nassert solution(\"2 3\") == \"1\"\nassert solution(\"2 4\") == \"3\"\nassert solution(\"7 3\") == \"2\"\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"1 2\") == 2\nassert solution(\"4 8\") == 4\nassert solution(\"2 2\") == 2\nassert solution(\"1 1\") == 1\nassert solution(\"1 1\") == 1\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1 1') == 1\nassert solution('2 4') == 2\nassert solution('8 5') == 4\nassert solution('1000000 9998') == 9998\nassert solution('2000000 300000') == 19998"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('3 2') == '2'\nassert solution('4 8') == '4'\nassert solution('4 8') == '4'\nassert solution('4 8') == '4'\nassert solution('4 8') == '4'\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''2 3''') == '3'\nassert solution('''4 8''') == '4'\nassert solution('''10 5''') == '2'\nassert solution('''15 26''') == '16'\nassert solution('''5 21''') == '12'\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdin\n\n\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('3 2') == '2'\nassert solution('4 8') == '4'\nassert solution('1 10') == '1'\nassert solution('1 11') == '2'\nassert solution('1 10') == '1'\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == answer\n\"\"\""
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"3 5\") == \"6\"\nassert solution(\"4 4\") == \"5\"\nassert solution(\"1 10\") == \"0\"\nassert solution(\"4 9\") == \"1\"\nassert solution(\"1 10\") == \"0\"\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('3 5') == '6'\nassert solution('4 4') == '5'\nassert solution('4 2') == '4'\nassert solution('2 1') == '1'\nassert solution('3 1') == '1'\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('3 5') == '6'\nassert solution('4 4') == '5'\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''3 5''') == '6'\nassert solution('''4 4''') == '5'\nassert solution('''6 6''') == '8'\nassert solution('''5 3''') == '8'\nassert solution('''1 1''') == '2'\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('3 5') == '6'\nassert solution('4 4') == '5'\nassert solution('5 5') == '0'\nassert solution('4 3') == '1'\nassert solution('2 5') == '0'\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('3 5') == '6'\nassert solution('4 4') == '5'\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"2 3\") == \"6\"\nassert solution(\"4 4\") == \"5\"\nassert solution(\"3 5\") == \"6\"\nassert solution(\"4 6\") == \"6\"\nassert solution(\"1 2\") == \"3\"\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"2 4 6\") == \"11.00000000000000000000\"\nassert solution(\"4 2 6\") == \"5.00000000000000000000\"\n\n\n\n-----Solution Overview-----\n\nWe can think of the problem as a max-heap or priority queue, where each element corresponds to the power of a superhero in the team.\n\nWe have to find the maximum power of the teams. We can do this by finding the largest element in the heap.\n\nHere is the algorithm:\n\nThe first step is to take the input and convert it to a list of integers a_1, a_2, \\ldots, a_n.\n\nWe can remove one of the superheroes by selecting the largest power in the heap, and then add one power to the remaining power of the other superheroes.\n\nWe can increase the power of a superhero by doing a number of operations, where the maximum number of operations for a particular superhero is equal to the value k. For example, if the input tells us the power of the first 4 superheroes is 4, then we can increase their powers by 5 and also increase the power of the next one by 6.\n\nNext, we can find the maximum power in the team by selecting the last element in the list and we increase the value of the power by 1.\n\nWe now have a list of powers of the remaining elements in the team, and we want to find the maximum power of the team.\n\nThe maximum of these powers is the answer.\n\n\n\n\"\"\"\n\nimport sys\nsys.setrecursionlimit(10**5)\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''2 4 6''') == '11.00000000000000000000'\nassert solution('''4 2 6''') == '5.00000000000000000000'\nassert solution('''1 3 2 3''') == '5.00000000000000000000'\nassert solution('''1 3 2 3''') == '5.00000000000000000000'\nassert solution('''1 2 2''') == '0.00000000000000000000'\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1 2 3 4') == '2.5'\nassert solution('2 4 6') == '5.00000000000000000000'\nassert solution('4 2 6') == '5.00000000000000000000'\nassert solution('2 5 1') == '2.5'\nassert solution('1 5 1') == '2.5'\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1\\n2 3\\n4 5 6') == '11.00000000000000000000'\nassert solution('2\\n4 7') == '5.00000000000000000000'\nassert solution('2\\n1 3 2 3') == '5.00000000000000000000'\nassert solution('1\\n2\\n4\\n5\\n6') == '5.00000000000000000000'\nassert solution('1\\n2\\n3\\n4\\n5\\n6') == '6.00000000000000000000'\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('4 2 6') == '5.00000000000000000000'\nassert solution('2 3 4') == '11.00000000000000000000'\nassert solution('2 3 2') == '10.000000000000000000'\nassert solution('4 7') == '5.00000000000000000000'\nassert solution('4 7 2') == '10.000000000000000000'\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''2 4 6\n4 7\n''') == '11.00000000000000000000'\n\nassert solution('''4 2 6\n1 3 2 3\n''') == '5.00000000000000000000'\n\nassert solution('''4 2 6\n2 1 2 3\n''') == '2.00000000000000000000'\n\nassert solution('''4 2 6\n4 7\n''') == '3.00000000000000000000'\n\nassert solution('''4 2 6\n1 3 2 3\n''') == '2.00000000000000000000'"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''2 4 6''') == '11.00000000000000000000'\nassert solution('''4 2 6''') == '5.00000000000000000000'\nassert solution('''4 2 3''') == '1.00000000000000000000'\nassert solution('''4 3 2''') == '2.00000000000000000000'\nassert solution('''4 1 3''') == '3.00000000000000000000'\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(input()) == str(2)\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"-3\"\n\"\"\"\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1') == -1\nassert solution('2') == -2\nassert solution('3') == -3\nassert solution('4') == -1\nassert solution('5') == -3\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"3\") == 1\nassert solution(\"5\") == -3\nassert solution(\"4\") == 2\n\nassert solution(\"2\") == 1\nassert solution(\"6\") == -3\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('4') == '2'\nassert solution('5') == '-3'\n\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('4') == '2'\nassert solution('5') == '-3'\nassert solution('4') == '2'\nassert solution('5') == '-3'\nassert solution('6') == '-6'\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdin\n\n\"\"\"\n\n\"\"\""
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(4) == 2\nassert solution(5) == -3\n\"\"\"\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdin\nassert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"-3\"\nprint(\"Passed\")\n\n\"\"\"\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('4') == '2'\nassert solution('5') == '-3'\nassert solution('6') == '-5'\nassert solution('7') == '-7'\nassert solution('8') == '-9'\n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('3\\n0 2 0') == '1\\n'\nassert solution('5\\n4 2 3 0 1') == '3\\n'\nassert solution('7\\n0 3 1 0 5 2 6') == '2\\n'\nassert solution('7\\n0 3 1 0 5 2 6') == '2\\n'\nassert solution('5\\n0 3 1 0 5 2 6') == '2\\n'\n\n\n\n\"\"\""
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"\"\nassert solution(\"1 2 3 4\") == \"\"\nassert solution(\"1 2 3 4 5\") == \"\"\nassert solution(\"1 2 3 4 5 6 7\") == \"\"\n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('0 2 0') == '1'\nassert solution('3') == '1'\nassert solution('0 2 0 3 1') == '2'\nassert solution('1 2 1 2 1') == '2'\nassert solution('2 3 3 3 4 0 1') == '3'\n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1\\n0') == '1'\nassert solution('3\\n0 2 0') == '1'\nassert solution('3\\n0 2 0\\n1 2 1') == '2'\nassert solution('3\\n0 2 0\\n1 2 1\\n2 3 1') == '3'\nassert solution('3\\n0 2 0\\n1 2 1\\n2 3 1\\n3 4 1') == '4'\n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('3\\n0 2 0\\n') == '1'\nassert solution('5\\n4 2 3 0 1\\n') == '3'\nassert solution('7\\n0 3 1 0 5 2 6\\n') == '2'\n\n\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\n\nl, r = 0, n-1\nret = 0\nwhile l < r:\n    if a[l] > a[r]:\n        if a[r] > 0:\n            ret += a[r]-a[l]-1\n            a[l] -= a[r]-1\n            a[r] -= a[r]-1\n        else:\n            ret += a[r]\n            a[r] = 0\n        r -= 1\n    else:\n        if a[l] > 0:\n            ret += a[l]-a[r]-1\n            a[l] -= a[r]-1\n            a[r] -= a[r]-1\n        else:\n            ret += a[l]\n            a[l] = 0\n        l += 1\n\nprint(ret)"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"0 2 0\") == \"1\"\nassert solution(\"3\") == \"0\"\nassert solution(\"2 3 0\") == \"1\"\nassert solution(\"4 2 3 0 1\") == \"3\"\nassert solution(\"7\") == \"0\"\n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('3\\n0 2 0') == '1'\nassert solution('5\\n4 2 3 0 1') == '3'\nassert solution('7\\n0 3 1 0 5 2 6') == '2'\nassert solution('9\\n0 2 3 1 5 6 8 9') == '4'\nassert solution('7\\n0 1 2 3 4 5 6 7') == '2'\n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == ''\n'''"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('3\\n0 2 0') == '1'\nassert solution('5\\n4 2 3 0 1') == '3'\nassert solution('7\\n0 3 1 0 5 2 6') == '2'\nassert solution('7\\n0 3 1 0 5 2 6') == '2'\nassert solution('7\\n0 3 1 0 5 2 6') == '2'\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\nfrom sys import stdin, stdout"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('abc') == 'a'\nassert solution('aabc') == 'aab'\nassert solution('abcabc') == 'ab'\nassert solution('abcabcab') == 'ab'\nassert solution('abcabcabcabc') == 'abc'\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('aaa') == 'aa'\nassert solution('abcda') == 'abca'\nassert solution('aaa') == 'aa'\nassert solution('abca') == 'abca'\nassert solution('abcda') == 'abca'\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('abcda') == 'abca'\nassert solution('abcd') == 'ab'\nassert solution('pqr') == 'p'\nassert solution('abcd') == 'ab'\nassert solution('a') == 'a'\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdin\n\"\"\""
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"aaa\") == \"aa\"\nassert solution(\"abb\") == \"a\"\nassert solution(\"abcda\") == \"abca\""
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"\n3\naaa\n\"\"\"\n    ) == \"aa\"\n\nassert solution(\n\"\"\"\n5\nabcda\n\"\"\"\n    ) == \"abca\"\n\nassert solution(\n\"\"\"\n2\nxy\n\"\"\"\n    ) == \"x\"\n\nassert solution(\n\"\"\"\n4\nabcd\n\"\"\"\n    ) == \"abcd\"\n\nassert solution(\n\"\"\"\n7\nqwerty\n\"\"\"\n    ) == \"qwerty\"\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"aaa\") == \"aa\"\nassert solution(\"abca\") == \"abca\"\nassert solution(\"abcda\") == \"abca\"\nassert solution(\"abda\") == \"abca\"\nassert solution(\"acda\") == \"abcda\"\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdin.strip()\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('4 1\\n9 14 28 1 7 13 15 29 2 31') == '24'\nassert solution('7 3\\n3 14 15 92 65 35 89') == '64'\nassert solution('7 3\\n1 2 1 1 1 1 1') == '1'\nassert solution('8 4\\n1 2 1 2 1 2 1 2') == '3'\nassert solution('8 4\\n1 2 1 2 1 2 1 2') == '3'\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''10 4\n9 14 28 1 7 13 15 29 2 31''') == '24'\nassert solution('''7 3\n3 14 15 92 65 35 89''') == '64'\nassert solution('''13 13\n123 12 34 141213415 143151432 14321453 12345 141231432 14321453 12345''') == '768'\nassert solution('''2 2\n1 1\n1 1\n''') == '2'\nassert solution('''5 4\n7 9 12 11 13\n''') == '36'\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''10 4\n9 14 28 1 7 13 15 29 2 31''') == '24'\nassert solution('''7 3\n3 14 15 92 65 35 89''') == '64'\n\n\n\n\n\"\"\"\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"10 4\\n9 14 28 1 7 13 15 29 2 31\\n\") == \"24\"\nassert solution(\"7 3\\n3 14 15 92 65 35 89\\n\") == \"64\"\n\n\"\"\"\n\n\"\"\"\nNotes:\n    * 2**50 is a good number to use to get the maximum number of books in a shelf\n    * I use a dictionary to store the prices of each book and compare the sum with 2**50 and take the max.\n\"\"\""
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('2 2') == '0'\nassert solution('7 3') == '64'\nassert solution('7 3') == '64'\nassert solution('7 3') == '64'\nassert solution('7 3') == '64'\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('3\\n4\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\\n') == '64'\nassert solution('2\\n3\\n1 2 3\\n4 5 6 7 8\\n9 10 11 12\\n') == '32'\nassert solution('5\\n2\\n1 2 3 4 5\\n6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26\\n') == '96'\nassert solution('5\\n3\\n
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''10 4''') == '24'\nassert solution('''7 3''') == '64'\nassert solution('''10 4\n9 14 28 1 7 13 15 29 2 31\n9 14 28 1 7 13 15 29 2 31''') == '64'\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(input()) == output\n\n\"\"\"\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"\"\"4\n1 2 3\n3 2 1\n3 2 2 3\n\"\"\") == '12'\nassert solution(\"\"\"2\n1\n1\n1 1\n\"\"\") == '4'\nassert solution(\"\"\"3\n1 2\n3 2\n2 1 3\n\"\"\") == '11'\nassert solution(\"\"\"3\n1 2\n2 1 3\n3 2\n\"\"\") == '4'\nassert solution(\"\"\"10\n80 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99\n\"\"\") == '11'\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('5\\n1 2 3\\n3 2 1\\n3 2 2 3\\n') == '12'\nassert solution('5\\n1 2\\n3 2\\n2 1 3\\n') == '11'\nassert solution('5\\n1 2\\n3 2\\n2 1 3\\n1 2 3\\n') == '4'\nassert solution('2\\n1\\n1\\n1 1\\n') == '4'\nassert solution('5\\n1 2\\n3 2\\n2 1 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n') == '11'\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('2\\n2\\n1') == '2'\nassert solution('3\\n3\\n3\\n3\\n3') == '9'\nassert solution('5\\n5\\n5\\n5\\n5') == '25'\nassert solution('1\\n2\\n1') == '4'\nassert solution('1\\n1\\n1') == '1'\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('2\\n1\\n1\\n1\\n') == '4'\nassert solution('4\\n1 2 3\\n3 2 1\\n3 2 2 3\\n') == '12'\nassert solution('1\\n1\\n1\\n1\\n') == '4'\nassert solution('1\\n1\\n1\\n1\\n') == '4'\nassert solution('1\\n1\\n1\\n1\\n') == '4'\n\n\n'''\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(input(\"\")) == expect\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''4\n1 2 3\n3 2 1\n3 2 2 3\n''') == '12'\nassert solution('''3\n1 2\n3 3\n2 1 3\n''') == '11'\nassert solution('''2\n1\n1\n1 1\n''') == '4'\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('2\\n2\\n1\\n2\\n1\\n1') == '4'\n\nassert solution('1\\n1\\n1\\n1\\n1') == '2'\n\nassert solution('1\\n1\\n2\\n2\\n1') == '11'\n\nassert solution('2\\n2\\n1\\n1\\n1') == '12'\n\nassert solution('3\\n1 2\\n3 2 1\\n3 2 2 3') == '11'"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"4\") == \"12\"\nassert solution(\"3\") == \"11\"\nassert solution(\"2\") == \"4\"\nassert solution(\"1\") == \"1\"\nassert solution(\"3 2 1\") == \"12\"\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('3\\n1 2 3\\n3 2 1 3\\n3 2 2 3\\n2 1 3\\n2 1 3 1 1 1 1 1 1\\n2 1 3 1 1 1 1 1 1') == '6'\nassert solution('3\\n1 2 3\\n3 2 1 3\\n3 2 2 3\\n2 1 3\\n2 1 3 1 1 1 1 1 1\\n2 1 3 1 1 1 1 1 1') == '8'\nassert solution('3\\n1 2 3\\n3 2 1 3\\n3 2 2 3\\n2 1 3\\n2 1 3 1 1 1 1 1 1\\n2 1 3 1 1 1 1 1 1') == '11'\nassert solution('4\\n1 2 3\\n3 2 1 3\\n3 2 2 3\\n2 1 3\\n2 1 3 1 1 1 1 1 1\\n2 1 3 1 1 1 1 1 1') == '12'\nassert solution('4\\n1 2 3\\n3 2 1 3\\n3 2 2 3\\n2 1 3\\n2 1 3 1 1 1 1 1 1\\n2 1 3 1 1 1 1 1 1') == '11'\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdin.splitlines()[1]\nprint(\"Success\")\n\"\"\"\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('6 0\\n0 1 1 2 3 2') == '1 2 2 3 3 3'\nassert solution('10 1\\n0 1 0 3 4 5 2 3 7 0') == '2 3 3 4 5 6 6 6 8 2'\nassert solution('2 2\\n0 1') == '2 2'\nassert solution('2 3\\n0 1 0') == '2 3'\nassert solution('2 4\\n0 1 0 0') == '2 4'\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n\nimport sys"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == \"2 3 3 4 5 6 6 6 8 2\"\n\"\"\"\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('0\\n5') == '1\\n2\\n3\\n4\\n5'\nassert solution('1\\n5') == '1\\n2\\n3\\n4\\n5'\nassert solution('2\\n3') == '2\\n3'\nassert solution('2\\n5') == '2\\n3\\n4\\n5'\nassert solution('3\\n5') == '2\\n3\\n4\\n5'\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('10 2\\n0 1 0 3 4 5 2 3 7 0\\n') == '2 3 3 4 5 6 6 6 8 2'\nassert solution('1 2\\n0 1\\n') == '2'\nassert solution('6 0\\n0 1 1 2 3 2\\n') == '1 2 2 3 3 3'\nassert solution('10 1\\n0 1 0 3 4 5 2 3 7 0\\n') == '2 3 3 4 5 6 6 6 8 2'"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1 10') == '4'\nassert solution('1 1') == '1'\nassert solution('1 10') == '4'\nassert solution('1 1') == '1'\nassert solution('1 10') == '4'\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''4 0\n0 1 1 2 3 2''') == '1 2 2 3 3 3'\nassert solution('''6 0\n0 1 1 2 3 2''') == '2 3 3 3 3 3'\nassert solution('''10 1\n0 1 0 3 4 5 2 3 7 0''') == '2 3 3 4 5 6 6 6 8 2'\nassert solution('''2 2\n0 1''') == '2 2'\n\n'''\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''6 0\n0 1 1 2 3 2\n''') == '2 2 2 3 3 3'\nassert solution('''10 1\n0 1 0 3 4 5 2 3 7 0\n''') == '2 3 3 4 5 6 6 6 8 2'\nassert solution('''2 2\n0 1\n''') == '2 2'\n'''\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1\\n1\\n1\\n') == 'YES'\nassert solution('1\\n1\\n1\\n') == 'YES'\nassert solution('1\\n1\\n1\\n') == 'YES'\nassert solution('1\\n1\\n1\\n') == 'YES'\nassert solution('1\\n1\\n1\\n') == 'YES'\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('1 2 3\\n4 5 6') == 'YES'\nassert solution('1 2 3\\n6 5 4') == 'YES'\nassert solution('1 2 3\\n3 6 5') == 'NO'\nassert solution('1 2 3\\n6 5 4') == 'NO'\nassert solution('1 2 3\\n4 5 6') == 'YES'\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('abcd\\nefgh\\nijkl') == \"YES\"\nassert solution('a\\nb\\nc\\nd\\ne\\nf\\ng\\nh\\ni\\nj\\nk\\nl') == \"NO\"\nassert solution('1\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8') == \"YES\"\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8') == \"NO\"\nassert solution('2\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8') == \"NO\"\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('2\\n3 8\\n2 5 1') == 'YES'\nassert solution('2\\n3 8\\n2 5 1\\n4 4') == 'YES'\nassert solution('2\\n3 8\\n2 5 1\\n4 4\\n0 1 2 3') == 'NO'\n\n\"\"\"\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('2 2') == 'YES'\nassert solution('2 3') == 'NO'\nassert solution('3 3') == 'YES'\nassert solution('1 1') == 'YES'\nassert solution('3 1') == 'NO'\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"3 8\") == \"YES\"\nassert solution(\"2 5 1\") == \"YES\"\nassert solution(\"4 4\") == \"YES\"\nassert solution(\"0 1 2 3\") == \"YES\"\nassert solution(\"0 1\") == \"NO\"\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"YES\"\nassert solution(\"1\\n\") == \"YES\"\nassert solution(\"1\\n2\") == \"NO\"\nassert solution(\"1\\n2\\n\") == \"NO\"\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('{}') == ''\nassert solution('{{{}}}') == ''\nassert solution('{{},{}}') == ''\nassert solution('{{{},{},{{}}}') == 'YES'\nassert solution('{{{},{},{{}}}}') == 'NO'\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('hi') == 'YES'\nassert solution('3 4') == 'NO'\nassert solution('2 4') == 'YES'\nassert solution('3 3') == 'YES'\nassert solution('6 1') == 'YES'\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('abcdef') == 'YES'\nassert solution('abcd') == 'NO'\nassert solution('aacbbcde') == 'YES'\nassert solution('aaccc') == 'NO'\nassert solution('cddcc') == 'NO'\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('2\\n4\\n4\\n3\\n1\\n2\\n2\\n1\\n2\\n3\\n1\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('2\\n') == '6'\nassert solution('3\\n') == '8'\nassert solution('4\\n') == '10'\nassert solution('5\\n') == '12'\nassert solution('6\\n') == '10'\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('7 1') == '10'\nassert solution('1 2') == '3'\nassert solution('2 2') == '5'\nassert solution('1 1000') == '1000'"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('2') == 2\nassert solution('3') == 3\nassert solution('4') == 4\nassert solution('5') == 5\nassert solution('6') == 6\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''3''') == '''10\n12\n12'''\n\nassert solution('''5 1''') == '''10\n12\n12'''\n\nassert solution('''8 2''') == '''10\n12\n12'''\n\nassert solution('''3 4''') == '''12\n12\n12'''\n\nassert solution('''5 2''') == '''12\n12\n12'''"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100') == '100\\n99\\n96\\n95\\n94\\n93\\n92\\n91\\n90\\n89\\n88\\n87\\n86\\n85\\n84\\n83\\n82\\n81\\n80\\n79\\n78\\n77\\n76\\n75\\n74\\n73\\n72\\n71\\n70\\n69\\n68\\n67\\n66\\n65\\n64\\n63\\n62\\n61\\n60\\n59\\n58\\n57\\n56\\n55\\n54\\n53\\n52\\n51\\n50\\n49\\n48\\n47\\n46\\n45\\n44\\n43\\n42\\n41\\n40\\n39\\n38\\n37\\n36\\n35\\n34\\n33\\n32\\n31\\n30\\n29\\n28\\n27\\n26\\n25\\n24\\n23\\n22\\n21\\n20\\n19\\n18\\n17\\n16\\n15\\n14\\n13\\n12\\n11\\n10\\n9\\n8\\n7\\n6\\n5\\n4\\n3\\n2\\n1'\nassert solution('4\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100\\n101\\n102\\n103\\n104\\n105\\n106\\n107\\n108\\n109\\n110\\n111\\n112\\n113\\n114\\n115\\n116\\n117\\n118\\n119\\n120\\n121\\n122\\n123\\n124\\n125\\n126\\n127\\n128\\n129\\n130\\n131\\n132\\n133\\n134\\n135\\n136\\n137\\n138\\n139\\n140\\n141\\n142\\n143\\n144\\n145\\n146\\n147\\n148\\n149\\n150\\n151\\n152\\n153\\n154\\n155\\n156\\n157\\n158\\n159\\n160\\n161\\n162\\n163\\n164\\n165\\n166\\n167\\n168\\n169\\n170\\n171\\n172\\n173\\n174\\n175\\n176\\n177\\n178\\n179\\n180\\n181\\n182\\n183\\n184\\n185\\n186\\n187\\n188\\n189\\n190\\n191\\n192\\n193\\n194\\n195\\n196\\n197\\n198\\n199\\n200\\n201\\n202\\n203\\n204\\n205\\n206\\n207\\n208\\"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''3''') == '10'\nassert solution('''5 1''') == '10'\nassert solution('''8 2''') == '12'\nassert solution('''3 4''') == '12'\nassert solution('''5 6''') == '12'\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''3\n5 1\n8 2\n3 4''') == '10\\n12\\n12'\nassert solution('''3\n5 1\n9 2\n3 4''') == '12\\n12\\n12'\nassert solution('''3\n7 1\n10 2\n35 4\n3 4''') == '12\\n12\\n12'\nassert solution('''3\n7 1\n8 2\n3 4''') == '10\\n12\\n12'\nassert solution('''3\n7 1\n10 2\n15 4\n3 4''') == '12\\n12\\n12'\n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''5 6''') == 'Possible'\nassert solution('''6 12''') == 'Impossible'\nassert solution('''4 2''') == 'Possible'\nassert solution('''4 6''') == 'Possible'\nassert solution('''5 5''') == 'Possible'\n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == \"Possible\"\nassert solution(\"5 6\") == \"Possible\"\nassert solution(\"6 12\") == \"Impossible\"\nassert solution(\"6 12\") == \"Impossible\"\n\n\n\n\"\"\"\n\nimport sys\nsys.setrecursionlimit(10000)\n\nclass Graph:\n    def __init__(self, vertices):\n        self.size = vertices\n        self.matrix = [[0 for i in range(self.size)] for j in range(self.size)]\n        self.visited = [False for i in range(self.size)]\n        self.parent = [None for i in range(self.size)]\n        self.edges = 0\n\n    def add_edge(self, x, y):\n        self.matrix[x][y] = 1\n        self.matrix[y][x] = 1\n        self.edges += 1\n\n    def dfs(self, u):\n        self.visited[u] = True\n        for i in range(self.size):\n            if self.matrix[u][i] == 1 and not self.visited[i]:\n                self.parent[i] = u\n                self.dfs(i)\n\n    def topological_sorting(self):\n        for i in range(self.size):\n            if not self.visited[i]:\n                self.dfs(i)\n\n        s = [x for x in range(self.size)]\n        s.sort(key = lambda x : self.parent[x])\n        for x in s:\n            print(x, end = \" \")"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('5 6') == \"Possible\"\nassert solution('6 12') == \"Impossible\"\nassert solution('2 3') == \"Possible\"\nassert solution('6 3') == \"Impossible\"\nassert solution('2 1') == \"Possible\"\n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('5 6') == 'Possible'\nassert solution('5 6') == 'Possible'\nassert solution('5 6') == 'Possible'\nassert solution('5 6') == 'Possible'\nassert solution('5 6') == 'Possible'\n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"Impossible\"\nassert solution(\"1\") == \"Possible\"\nassert solution(\"1 2\") == \"Possible\"\nassert solution(\"1 2 3\") == \"Possible\"\nassert solution(\"1 2 3 4 5 6 7\") == \"Possible\"\n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''5 6\n\n''') == 'Possible'\n\nassert solution('''6 12\n\n''') == 'Impossible'\n\nassert solution('''6 12\n\n''') == 'Impossible'\n\nassert solution('''6 5\n\n''') == 'Possible'\n\nassert solution('''6 4\n\n''') == 'Possible'"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('5 6') == 'Possible'\nassert solution('5 6') == 'Possible'\nassert solution('6 12') == 'Impossible'\n\n\n\"\"\"\n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''5 6''') == 'Possible'\nassert solution('''6 12''') == 'Impossible'\n'''\n5 6\n2 5\n3 2\n5 1\n3 4\n4 1\n5 4\n'''\n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == 'Possible'\n\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(100000)"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(input_example_1) == \"Possible\"\nassert solution(input_example_2) == \"Possible\"\nassert solution(input_example_3) == \"Possible\"\nassert solution(input_example_4) == \"Possible\"\nassert solution(input_example_5) == \"Possible\"\n"
    },
    {
        "number": 634,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('3 1\\n1 1\\n') == 'WIN'\nassert solution('12 2\\n4 1\\n8 1\\n') == 'WIN'\nassert solution('1 1\\n1 2\\n') == 'LOSE'"
    },
    {
        "number": 634,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''3 1\n1 1\n''') == 'WIN'\nassert solution('''12 2\n4 1\n8 1\n''') == 'WIN'\nassert solution('''1 1\n1 2\n''') == 'LOSE'\nassert solution('''13 2\n5 1\n9 1\n12 1\n''') == 'WIN'\nassert solution('''1 1\n2 1\n3 1\n4 1\n5 1\n6 1\n7 1\n8 1\n9 1\n10 1\n11 1\n12 1\n13 1\n''') == 'WIN'\n"
    },
    {
        "number": 634,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(input('')) == ''\nassert solution(input('')) == ''\nassert solution(input('')) == ''\n\nassert solution(input('')) == 'WIN'\nassert solution(input('')) == 'LOSE'\n"
    },
    {
        "number": 634,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('3 1\\n1 1\\n') == 'WIN'\nassert solution('12 2\\n4 1\\n8 1\\n') == 'WIN'\nassert solution('1 1\\n1 2\\n') == 'LOSE'\nassert solution('1 1\\n1 1\\n') == 'WIN'\nassert solution('1 1\\n1 1\\n') == 'WIN'\n"
    },
    {
        "number": 634,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == \"WIN\"\n'''\n"
    },
    {
        "number": 634,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''1 1\n1 2\n''') == 'WIN'\nassert solution('''2 2\n3 1\n''') == 'WIN'\nassert solution('''3 3\n1 1\n2 1\n1 2\n''') == 'WIN'\nassert solution('''6 3\n1 1\n1 2\n4 1\n4 2\n4 3\n4 4\n4 5\n''') == 'WIN'\nassert solution('''6 4\n1 1\n1 2\n4 1\n4 2\n4 3\n4 4\n5 1\n5 2\n''') == 'LOSE'\n"
    },
    {
        "number": 634,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''\n3 1\n1 1\n\n2 1\n1 1\n\n1 1\n''') == 'WIN'\nassert solution('''\n3 1\n1 1\n\n4 1\n1 1\n\n2 1\n1 1\n\n1 1\n''') == 'WIN'\nassert solution('''\n3 1\n1 1\n\n4 1\n1 1\n\n4 1\n1 1\n\n4 1\n1 1\n\n4 1\n1 1\n\n''') == 'LOSE'\n\nprint('pass')\n'''\n"
    },
    {
        "number": 634,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"3 1\\n1 1\\n\") == \"WIN\"\nassert solution(\"12 2\\n4 1\\n8 1\\n\") == \"WIN\"\nassert solution(\"1 1\\n1 2\\n\") == \"LOSE\"\nassert solution(\"1 1\\n1 2\\n\") == \"LOSE\"\nassert solution(\"2 1\\n1 1\\n\") == \"WIN\"\n"
    },
    {
        "number": 634,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1 1\\n1 1') == 'WIN'\nassert solution('3 1\\n1 1\\n4 1') == 'WIN'\nassert solution('5 3\\n2 1\\n3 1\\n5 1\\n1 1') == 'WIN'\nassert solution('5 3\\n2 1\\n3 1\\n5 1\\n1 2') == 'LOSE'\nassert solution('1 1\\n2 2') == 'LOSE'\n"
    },
    {
        "number": 634,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''1 1\n1 2\n''') == 'WIN'\n\nassert solution('''12 2\n4 1\n8 1\n''') == 'WIN'\n\nassert solution('''12 2\n4 1\n9 1\n''') == 'LOSE'\n\nassert solution('''12 2\n4 1\n3 1\n''') == 'WIN'\n\nassert solution('''1 1\n1 2\n2 1\n''') == 'LOSE'"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == 'YES'\n\n\"\"\"\n\nn,s = map(int, stdin.split(' '))\na = list(map(int, stdin.split(' ')))\nb = list(map(int, stdin.split(' ')))"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('7\\n2\\n0 0 1 1 1 1\\n1 1 1 1 1 1\\n') == 'NO'\nassert solution('7\\n2\\n0 1 1 1 1\\n1 1 1 1 1\\n') == 'YES'\n\n\n\n\"\"\"\n"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('5 3\\n1 1 1 1 1\\n1 1 1 1 1\\n') == 'YES'\nassert solution('5 4\\n1 0 0 0 1\\n0 1 1 1 1\\n') == 'YES'\nassert solution('5 2\\n0 1 1 1 1\\n1 1 1 1 1\\n') == 'NO'\nassert solution('5 4\\n0 1 1 1 1\\n1 1 1 1 1\\n') == 'NO'\nassert solution('5 6\\n0 0 0 1 0 0\\n1 1 1 1 1 1\\n') == 'YES'\n\n\n\"\"\"\n"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"1 1 1 1 1\\n1 1 1 1 1\\n\") == \"YES\"\nassert solution(\"0 1 1 1 1\\n1 1 1 1 1\\n\") == \"NO\"\nassert solution(\"5 3\\n1 1 1 1 1\\n1 1 1 1 1\\n\") == \"YES\"\nassert solution(\"5 4\\n1 0 0 0 1\\n0 1 1 1 1\\n\") == \"NO\"\nassert solution(\"5 4\\n1 0 0 0 1\\n0 1 1 1 1\\n\") == \"NO\"\n"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''5 3\n1 1 1 1 1\n1 1 1 1 1\n''') == 'YES'\n\nassert solution('''5 4\n1 0 0 0 1\n0 1 1 1 1\n''') == 'YES'\n\nassert solution('''5 2\n0 1 1 1 1\n1 1 1 1 1\n''') == 'NO'\n\nassert solution('''6 3\n0 0 0 0 0 0\n0 0 0 0 0 0\n''') == 'NO'\n\nassert solution('''6 1\n0 1 1 0 0 0\n0 1 1 1 1 1\n''') == 'NO'"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('5 3') == 'YES'\nassert solution('5 4') == 'YES'\nassert solution('5 2') == 'NO'\nassert solution('5 1') == 'NO'\nassert solution('1 0 0 0 1') == 'YES'\n"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('5 3\\n1 1 1 1 1\\n1 1 1 1 1\\n') == 'YES'\nassert solution('5 4\\n0 1 1 1 1\\n1 1 1 1 1\\n') == 'NO'"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('5 3\\n1 1 1 1 1\\n1 1 1 1 1\\n') == 'YES'\nassert solution('5 4\\n1 0 0 0 1\\n0 1 1 1 1\\n') == 'YES'\nassert solution('5 2\\n0 1 1 1 1\\n1 1 1 1 1\\n') == 'NO'\nassert solution('5 1\\n1 1 1 1 1\\n') == 'NO'\nassert solution('5 1\\n1 1 1 1 1\\n') == 'NO'\n"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdin\nassert solution('''5 3\n1 1 1 1 1\n1 1 1 1 1\n''') == 'YES'\nassert solution('''5 4\n0 1 1 1 1\n1 1 1 1 1\n''') == 'YES'\nassert solution('''5 2\n0 1 1 1 1\n1 1 1 1 1\n''') == 'NO'\nassert solution('''5 1\n1 1\n''') == 'NO'\n"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('5 3') == 'YES'\nassert solution('5 4') == 'NO'\nassert solution('5 2') == 'NO'\nassert solution('5 0 0 0 1') == 'YES'\nassert solution('0 1 1 1 1') == 'YES'\n"
    },
    {
        "number": 636,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"4 10\\n4 3 1 2\\n\") == \"4\"\nassert solution(\"5 6\\n4 3 1 1 2\\n\") == \"3\"\nassert solution(\"1 3\\n4\\n\") == \"0\"\nassert solution(\"2 3\\n4 3 4\\n\") == \"0\"\nassert solution(\"2 3\\n3 4\\n\") == \"0\"\n"
    },
    {
        "number": 636,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\nfrom collections import Counter\nimport sys\n\nn, k = map(int, sys.stdin.readline().split())\na = list(map(int, sys.stdin.readline().split()))\n\nc = Counter(a)\n\nans = 0\nfor k,v in c.items():\n    if v > k:\n        ans += 1\n\nprint(ans)\n\nprint(*[i for i in range(n) if c[i] > i])\n"
    },
    {
        "number": 636,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''4 10\n4 3 1 2''') == '4'\nassert solution('''5 6\n4 3 1 1 2''') == '3'\nassert solution('''1 3\n4''') == '0'\nassert solution('''1 3\n1''') == '0'\nassert solution('''4 3\n3''') == '0'\n"
    },
    {
        "number": 636,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('3 4') == ''\nassert solution('1 2') == ''\nassert solution('1 2 3') == ''\nassert solution('1 2 3 4') == ''\n"
    },
    {
        "number": 636,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 636,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1 1') == '1'\nassert solution('3 1') == '1'\nassert solution('1 3') == '1'\nassert solution('1 3 1') == '1'\n"
    },
    {
        "number": 636,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''4 10\n4 3 1 2\n''') == '4'\nassert solution('''5 6\n4 3 1 1 2\n''') == '3'\nassert solution('''1 3\n4\n''') == '0'\nassert solution('''1 1\n1\n''') == '0'\nassert solution('''2 3\n1\n''') == '1'\n"
    },
    {
        "number": 636,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('5 10\\n4 3 1 2\\n') == '4'\nassert solution('5 6\\n4 3 1 1 2\\n') == '3'\nassert solution('5 6\\n4 3 1 1 2\\n') == '3'\nassert solution('5 6\\n3 1 1 1 2\\n') == '2'\nassert solution('5 6\\n3 1 1 1 2\\n') == '2'\n"
    },
    {
        "number": 636,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\n'''\n"
    },
    {
        "number": 636,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('9\\n9\\n9\\n9\\n9\\n9\\n9\\n9') == 'YES'\nassert solution('7\\n7\\n7\\n7\\n7\\n7\\n7\\n7') == 'NO'\nassert solution('5\\n5\\n5\\n5\\n5') == 'YES'\nassert solution('8\\n1 1 1 0 0 0 1 1') == 'NO'\nassert solution('9\\n1 1 0 1 1 0 1 1 0') == 'NO'\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('') is None\nassert solution('1') == 'NO'\nassert solution('2') == 'NO'\nassert solution('4') == 'NO'\nassert solution('7') == 'YES'\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('9\\n0 0 0 1 1 1 0 0 0') == 'YES'\nassert solution('7\\n0 0 0 1 1 1 1') == 'NO'\nassert solution('5\\n1 1 1 1 1') == 'YES'\nassert solution('8\\n1 1 1 0 0 0 1 1') == 'NO'\nassert solution('9\\n1 1 0 1 1 0 1 1 0') == 'NO'\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('9\\n0 0 0 1 1 1 0 0 0\\n') == 'YES'\nassert solution('7\\n0 0 0 1 1 1 1\\n') == 'NO'\nassert solution('5\\n1 1 1 1 1\\n') == 'YES'\nassert solution('8\\n1 1 1 0 0 0 1 1\\n') == 'NO'\nassert solution('9\\n1 1 0 1 1 0 1 1 0\\n') == 'NO'\n'''\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''9\n0 0 0 1 1 1 0 0 0''') == 'YES'\nassert solution('''7\n0 0 0 1 1 1 1''') == 'NO'\nassert solution('''5\n1 1 1 1 1''') == 'YES'\nassert solution('''8\n1 1 1 0 0 0 1 1''') == 'NO'\nassert solution('''9\n1 1 0 1 1 0 1 1 0''') == 'NO'\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''9\n0 0 0 1 1 1 0 0 0''') == \"YES\"\nassert solution('''7\n0 0 0 1 1 1 1''') == \"NO\"\nassert solution('''5\n1 1 1 1 1''') == \"YES\"\nassert solution('''8\n1 1 1 0 0 0 1 1''') == \"NO\"\nassert solution('''9\n1 1 0 1 1 0 1 1 0''') == \"NO\"\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''9\n0 0 0 1 1 1 0 0 0''') == \"YES\"\nassert solution('''7\n0 0 0 1 1 1 1''') == \"NO\"\nassert solution('''5\n1 1 1 1 1''') == \"YES\"\nassert solution('''8\n1 1 1 0 0 0 1 1''') == \"NO\"\nassert solution('''9\n1 1 0 1 1 0 1 1 0''') == \"NO\"\n\n\n\n'''\n\n'''\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('9\\n0 0 0 1 1 1 0 0 0') == 'YES'\nassert solution('7\\n0 0 0 1 1 1 1') == 'NO'\nassert solution('5\\n1 1 1 1 1') == 'YES'\nassert solution('8\\n1 1 1 0 0 0 1 1') == 'NO'\nassert solution('9\\n1 1 0 1 1 0 1 1 0') == 'NO'\n\n\n\n\n\"\"\"\n\n\n\n\n\"\"\"\n"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1\\n7 15') == '0 0 0 0 0 2 3'\nassert solution('2\\n1 1 1 1 1 1') == '0 1 1 2 3'\nassert solution('2\\n3 3 3 3 3 3') == '0 1 1 2 3'\nassert solution('2\\n4 3 4 4') == '0 1 1 2'\nassert solution('2\\n3 1 4') == '0 1 1 2'\n"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''3 5\n3 4 3\n''') == '0 0 0'\nassert solution('''10 10\n
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdin\n\n\"\"\""
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n\nn, M = map(int, stdin.split())\nt = list(map(int, stdin.split()))"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('7 15\\n1 2 3 4 5 6 7\\n') == '0 0 0 0 0 2 3'\nassert solution('5 100\\n80 40 40 40 60\\n') == '0 1 1 2 3'\nassert solution('8 10\\n1 2 3 4 5 6 7 8\\n') == '0 1 1 2 1 3'\nassert solution('5 100\\n1 2 1 3 4 5\\n') == '0 0 0 0 0'\nassert solution('7 100\\n1 2 1 3 4 5 6 7\\n') == '0 0 0 0 0 0'\n"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"1 2 3 4 5 6 7\\n1 2 3 4 5 6 7\\n\") == \"0 0 0 0 0 2 3\\n\"\nassert solution(\"1 2 3 4 5 6\\n1 2 3 4 5 6\\n\") == \"0 1 1 2 3\\n\"\nassert solution(\"5 100\\n80 40 40 40 60\\n\") == \"0 1 1 2 3\\n\"\nassert solution(\"7 15\\n1 2 3 4 5 6 7\\n\") == \"0 0 0 0 0 2 3\\n\"\nassert solution(\"5 100\\n80 40 40 40 60\\n\") == \"0 1 1 2 3\\n\"\n"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\\n1\") == \"0\\n\"\nassert solution(\"2\\n2\") == \"0\\n0\\n\"\nassert solution(\"3\\n3\") == \"0\\n0\\n0\\n\"\nassert solution(\"4\\n4\") == \"0\\n0\\n0\\n0\\n\"\n"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdin"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('7 15\\n1 2 3 4 5 6 7') == '0 0 0 0 0 2 3'\nassert solution('5 100\\n80 40 40 40 60') == '0 1 1 2 3'\nassert solution('5 100\\n20 40 40 40 60') == '0 1 1 2 3'\nassert solution('5 100\\n80 40 40 40 60') == '0 1 1 2 3'\nassert solution('5 100\\n20 40 40 40 60') == '0 1 1 2 3'\n"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('7 15\\n1 2 3 4 5 6 7') == '0 0 0 0 0 2 3'\nassert solution('5 100\\n80 40 40 40 60') == '0 1 1 2 3'\nassert solution('4 2\\n1 2 1 2') == '0 1 2'\nassert solution('2 2\\n1 1') == '0 1'\nassert solution('1 1\\n1') == '0'\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('2 3') == '1'\nassert solution('1 0') == '0'\nassert solution('5 0') == '0'\nassert solution('0 1 2 3 4 5') == '0'\nassert solution('0 1 2 3 4 5 6 7') == '2'\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''5 3\n0 4 5 6 7''') == '2'\nassert solution('''1 0\n0''') == '1'\nassert solution('''5 0\n1 2 3 4 5''') == '0'"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''5 0''') == '0'\nassert solution('''1 0''') == '1'\nassert solution('''5 3''') == '2'\nassert solution('''10 5''') == '7'\nassert solution('''8 8''') == '0'\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''5 3\n0 4 5 6 7\n''') == '2'\n\nassert solution('''1 0\n0\n''') == '1'\n\nassert solution('''5 0\n1 2 3 4 5\n''') == '0'\n\nassert solution('''5 0\n1 2 3 4 5\n''') == '0'\n\nassert solution('''3 1\n0\n''') == '1'"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(input()) == input()\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('5 3\\n0 4 5 6 7\\n') == '2\\n'\nassert solution('1 0\\n0\\n') == '1\\n'\nassert solution('5 0\\n1 2 3 4 5\\n') == '0\\n'\nassert solution('5 0\\n1 2 3 4 5\\n') == '0\\n'\nassert solution('5 0\\n0\\n') == '0\\n'\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''5 3\n0 4 5 6 7\n''') == '2'\n\nassert solution('''1 0\n0\n''') == '1'\n\nassert solution('''5 0\n1 2 3 4 5\n''') == '0'\n\nassert solution('''5 4\n2 3 6 7 8\n''') == '3'\n\nassert solution('''2 2\n0\n0\n''') == '0'"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('5 3') == '2'\nassert solution('1 0') == '1'\nassert solution('5 0') == '0'\nassert solution('5 3') == '1'\nassert solution('1 2 3 4 5') == '0'\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''1 0''') == '0'\nassert solution('''2 4''') == '2'\nassert solution('''2 5''') == '1'\nassert solution('''10 1''') == '0'\nassert solution('''10 0''') == '1'\n"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('2 5') == '3 0 3'\nassert solution('2 4') == '2 1 3'\nassert solution('5 4') == '2 1 3'\nassert solution('3 1') == '3 0 3'\nassert solution('3 2') == '3 1 3'\n"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('2 5') == '3 0 3'\nassert solution('2 4') == '2 1 3'\n\nassert solution('1 2') == '0 0 0'\nassert solution('1 1') == '1 0 0'\nassert solution('1 2') == '0 1 0'\n"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''2 5\n''') == '3 0 3'\nassert solution('''2 4\n''') == '2 1 3'\nassert solution('''2 6\n''') == '1 0 3'\nassert solution('''5 4\n''') == '3 0 3'\nassert solution('''6 4\n''') == '1 0 3'\n"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('2 5') == '3 0 3'\nassert solution('2 4') == '2 1 3'\nassert solution('1 5') == '1 0 1'\nassert solution('1 1') == '0 1 1'\nassert solution('3 3') == '0 0 2'\n\n\n-----"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('2 5') == '3 0 3'\nassert solution('2 4') == '2 1 3'\nassert solution('1 2') == '0 1'\nassert solution('1 3') == '1 1'\nassert solution('1 3') == '1 1'\n"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('2 5') == '3 0 3'\nassert solution('2 4') == '2 1 3'\nassert solution('1 6') == '1 0 0'\nassert solution('1 7') == '0 1 0'\nassert solution('1 2') == '0 0 1'\n"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('2 5') == '3 0 3'\nassert solution('2 4') == '2 1 3'\nassert solution('1000000 1000000') == '1 0 1'\nassert solution('100000 100000') == '1 0 1'\nassert solution('5 4') == '2 1 3'\n"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('2 5') == '3 0 3'\nassert solution('2 4') == '2 1 3'\nassert solution('2 4') == '2 1 3'\n\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"1 2\") == \"1 1 3\"\nassert solution(\"2 4\") == \"2 1 3\"\nassert solution(\"2 4\") == \"2 1 3\"\nassert solution(\"3 4\") == \"0 0 0\"\nassert solution(\"4 5\") == \"1 1 2\"\n"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('2 5') == '3 0 3'\nassert solution('2 4') == '2 1 3'\n\"\"\"\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"4 of week\") == \"52\"\nassert solution(\"30 of month\") == \"11\"\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"4 of week\") == \"52\"\nassert solution(\"30 of month\") == \"11\"\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"4 of week\") == \"52\"\nassert solution(\"30 of month\") == \"11\"\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('4 of week') == '52'\nassert solution('30 of month') == '11'\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('4 of week') == '52'\nassert solution('30 of month') == '11'\nassert solution('10 of month') == '9'\nassert solution('6 of month') == '5'\nassert solution('9 of month') == '8'\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"4 of week\") == \"52\"\nassert solution(\"30 of month\") == \"11\"\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('2 of week') == '52'\nassert solution('30 of month') == '11'\nassert solution('2 of month') == '11'\nassert solution('0 of week') == '0'\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"4 of week\") == 52\nassert solution(\"30 of month\") == 11\nassert solution(\"11 of month\") == 11\nassert solution(\"30 of week\") == 52\nassert solution(\"2 of month\") == 12\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"4 of week\") == 52\nassert solution(\"30 of month\") == 11\nassert solution(\"3 of week\") == 3\nassert solution(\"1 of week\") == 1\nassert solution(\"1 of month\") == 1\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1 of week') == 52\nassert solution('4 of week') == 52\nassert solution('30 of month') == 11\nassert solution('30 of month') == 11\nassert solution('30 of month') == 11\n"
    },
    {
        "number": 642,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 642,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''10 5\n2 4 8 3 6''') == 'NO'\nassert solution('''10 5\n2 4 5 7 9''') == 'YES'\nassert solution('''1 4\n1''') == 'NO'\nassert solution('''1 2\n1''') == 'YES'\nassert solution('''10 4\n1 2 3 4 5 6 7 8 9 10''') == 'YES'\n"
    },
    {
        "number": 642,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''10 5\n2 4 8 3 6\n''') == 'NO'\nassert solution('''10 5\n2 4 5 7 9\n''') == 'YES'\nassert solution('''10 10\n1 2 3 4 5 6 7 8 9 10\n''') == 'YES'\nassert solution('''10 10\n1 2 3 4 5 6 7 8 9 10\n''') == 'NO'\nassert solution('''10 3\n2 1 3\n''') == 'YES'\n"
    },
    {
        "number": 642,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('2 5\\n2 4 8 3 6') == 'NO'\nassert solution('10 5\\n2 4 8 3 6') == 'YES'\nassert solution('1 2\\n2 1') == 'NO'\nassert solution('1 2\\n2 2') == 'YES'\n\n\n\"\"\"\n"
    },
    {
        "number": 642,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 642,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(input()) == \"NO\"\nassert solution(input()) == \"YES\"\n"
    },
    {
        "number": 642,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 642,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(input) == output\n"
    },
    {
        "number": 642,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"2 4 8 3 6\\n2 4 5 7 9\") == \"YES\"\nassert solution(\"2 4 8 3 6\\n2 4 5 7 9\") == \"NO\"\nassert solution(\"10 5\\n2 4 5 7 9\") == \"NO\"\nassert solution(\"10 5\\n2 4 5 7 9\") == \"YES\"\n\n\n\"\"\"\n"
    },
    {
        "number": 642,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''10 5\n2 4 8 3 6\n''') == 'NO'\nassert solution('''10 5\n2 4 5 7 9\n''') == 'YES'\nassert solution('''30 24\n4 9 22 4 16 8\n''') == 'YES'\nassert solution('''30 24\n4 9 22 4 16 8\n''') == 'YES'\nassert solution('''10 17\n2 4 8 3 6\n''') == 'NO'\n"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"0\") == \"\"\nassert solution(\"0 0\") == \"\"\nassert solution(\"0 0 0\") == \"\"\nassert solution(\"1 1\") == \"\"\n"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('3 10 1 2') == '4'\nassert solution('7 14 3 8') == '10'\nassert solution('20 70 2 7') == '0'\nassert solution('5 6 1 1') == '-1'\nassert solution('7 7 1 1') == '0'\n"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\n'''\n4\n3 10 1 2\n7 14 3 8\n20 70 2 7\n5 6 1 1\n''') == \"4\\n10\\n0\\n-1\"\n\nassert solution(\n'''\n5\n6 9 0 5\n2 10 2 8\n7 9 3 1\n7 7 2 2\n3 2 4 2\n''') == \"3\\n-1\\n3\\n3\\n2\"\n\nassert solution(\n'''\n7\n8 1 0 6\n8 4 4 4\n4 1 1 1\n1 1 1 1\n2 1 1 1\n4 3 1 1\n1 1 1 1\n1 1 1 1\n''') == \"0\\n8\\n8\\n1\"\n\nassert solution(\n'''\n9\n8 2 0 8\n9 3 3 3\n7 3 2 1\n8 1 4 3\n9 4 4 4\n2 2 2 2\n8 1 1 1\n9 1 1 1\n9 1 1 1\n''') == \"3\\n1\\n0\\n2\\n1\"\n\nassert solution(\n'''\n10\n11 0 0 6\n10 3 3 3\n9 3 2 1\n10 3 4 4\n8 2 2 2\n8 1 1 1\n9 1 1 1\n9 1 1 1\n7 1 1 1\n8 1 1 1\n10 1 1 1\n''') == \"3\\n-1\\n3\\n3\\n2\""
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('4\\n3 10 1 2\\n7 14 3 8\\n20 70 2 7\\n5 6 1 1') == '4\\n10\\n0\\n-1'\nassert solution('5\\n5 4 3 2 1\\n2 2 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1') == '-1\\n1\\n1\\n1\\n1'\nassert solution('5\\n5 4 3 2 1\\n2 2 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1') == '-1\\n1\\n1\\n1\\n1'\nassert solution('3\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1') == '-1\\n1\\n1\\n1'\n\n'''\n"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''5\n3 10 1 2\n7 14 3 8\n20 70 2 7\n5 6 1 1\n''') == '4'\n\nassert solution('''6\n1 7 4 3 5 7\n1 7 4 3 5 7\n1 7 4 3 5 7\n1 7 4 3 5 7\n1 7 4 3 5 7\n1 7 4 3 5 7\n''') == '10'\n\nassert solution('''7\n1 7 4 3 5 7\n1 7 4 3 5 7\n1 7 4 3 5 7\n1 7 4 3 5 7\n1 7 4 3 5 7\n1 7 4 3 5 7\n1 7 4 3 5 7\n''') == '0'\n\nassert solution('''8\n1 7 4 3 5 7\n1 7 4 3 5 7\n1 7 4 3 5 7\n1 7 4 3 5 7\n1 7 4 3 5 7\n1 7 4 3 5 7\n1 7 4 3 5 7\n1 7 4 3 5 7\n''') == '-1'\n"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''3\n10 1 2\n7 14 3 8''') == '4'\nassert solution('''7\n14 3 8\n20 70 2 7\n5 6 1 1''') == '10'\nassert solution('''5\n6 1 1\n20 70 2 7\n5 6 1 1''') == '0'\nassert solution('''4\n3 10 1 2\n7 14 3 8\n20 70 2 7\n5 6 1 1''') == '-1'\nassert solution('''7\n14 3 8\n20 70 2 7\n5 6 1 1\n5 6 1 2''') == '0'\n"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''3\n10 1 2\n7 14 3 8''') == '4'\nassert solution('''2\n5 4 1 4\n7 5 2 7''') == '10'\nassert solution('''1\n2 1 1 2''') == '0'\nassert solution('''1\n6 4 1 5\n1 1 1 1 1 1''') == '-1'\nassert solution('''1\n2 1 1 2''') == '-1'\n"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == ''\n\"\"\"\n\nimport sys"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == ''\n\"\"\"\nfrom fractions import gcd"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('2') == '0'\nassert solution('2\\n0') == '0'\nassert solution('3\\n1\\n2\\n3\\n4\\n5') == 'OVERFLOW!!!'\nassert solution('2\\nadd\\nfor 42\\nend\\nfor 10\\nfor 15\\nadd\\nend\\nadd\\nend') == '161'\nassert solution('1\\nadd\\nfor 42\\nend\\nfor 10\\nfor 15\\nadd\\nend\\nadd\\nend') == '0'\n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('add\\nfor 10\\nend\\nadd\\nend\\nadd\\nend') == '10'\nassert solution('add\\nfor 10\\nend\\nadd\\nend\\nadd\\nend\\n') == 'OVERFLOW!!!'\nassert solution('add\\nfor 10\\nend\\nadd\\nend\\nadd\\nend\\nadd\\nend') == '1'\nassert solution('add\\nfor 10\\nend\\nadd\\nend\\nadd\\nend\\nadd\\nend\\n') == '0'\nassert solution('add\\nfor 10\\nend\\nadd\\nend\\nadd\\nend\\nadd\\nend\\n') == '0'\n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''add\nfor 43\nend\nfor 10\nfor 15\nadd\nend\nadd\nend''') == '161'\n\nassert solution('''add\nfor 62\nend\nend\nend\nend\nend\n''') == '0'\n\nassert solution('''add\nfor 100\nfor 100\nfor 100\nfor 100\nfor 100\nadd\nend\nend\nend\nend\nend\n''') == 'OVERFLOW!!!'\n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''\n    9\n    add\n    for 43\n    end\n    for 10\n    for 15\n    add\n    end\n    add\n    end\n''') == '161'\n\nassert solution('''\n    2\n    for 62\n    end\n    ''') == '0'\n\nassert solution('''\n    11\n    for 100\n    for 100\n    for 100\n    for 100\n    for 100\n    add\n    end\n    end\n    end\n    end\n    end\n''') == 'OVERFLOW!!!'\n\"\"\"\n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('add') == 'OVERFLOW!!!'\nassert solution('add') == 'OVERFLOW!!!'\nassert solution('add') == 'OVERFLOW!!!'\nassert solution('add') == 'OVERFLOW!!!'\n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('add\\nfor 0\\nend\\nfor 1\\nend\\nfor 1\\nend\\nfor 2\\nend\\nfor 3\\nend\\nfor 4\\nend\\nfor 5\\nend\\nfor 6\\nend\\nfor 7\\nend\\nfor 8\\nend\\nfor 9\\nend\\nfor 10\\nend\\n') == 'OVERFLOW!!!'\nassert solution('add\\nfor 0\\nend\\nfor 1\\nend\\nfor 1\\nend\\nfor 2\\nend\\nfor 3\\nend\\nfor 4\\nend\\nfor 5\\nend\\nfor 6\\nend\\nfor 7\\nend\\nfor 8\\nend\\nfor 9\\nend\\nfor 10\\nend\\n') == '0'\nassert solution('add\\nfor 0\\nend\\nfor 1\\nend\\nfor 2\\nend\\nfor 3\\nend\\nfor 4\\nend\\nfor 5\\nend\\nfor 6\\nend\\nfor 7\\nend\\nfor 8\\nend\\nfor 9\\nend\\nfor 10\\nend\\n') == '157'\nassert solution('add\\nfor 0\\nend\\nfor 1\\nend\\nfor 2\\nend\\nfor 3\\nend\\nfor 4\\nend\\nfor 5\\nend\\nfor 6\\nend\\nfor 7\\nend\\nfor 8\\nend\\nfor 9\\nend\\nfor 10\\nend\\n') == 'OVERFLOW!!!'\nassert solution('add\\nfor 0\\nend\\nfor 1\\nend\\nfor 2\\nend\\nfor 3\\nend\\nfor 4\\nend\\nfor 5\\nend\\nfor 6\\nend\\nfor 7\\nend\\nfor 8\\nend\\nfor 9\\nend\\nfor 10\\nend\\n') == 'OVERFLOW!!!'\n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\n'''\n9\nadd\nfor 43\nend\nfor 10\nfor 15\nadd\nend\nadd\nend\n''') == \"161\"\nassert solution(\n'''\n2\nfor 62\nend\n''') == \"0\"\nassert solution(\n'''\n11\nfor 100\nfor 100\nfor 100\nfor 100\nfor 100\nadd\nend\nend\nend\nend\nend\n''') == \"OVERFLOW!!!\n'''\n) == \"OVERFLOW!!!\", \"Overflow\"\n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''9\nadd\nfor 43\nend\nfor 10\nfor 15\nadd\nend\nadd\nend''') == '161'\n\nassert solution('''2\nfor 62\nend\n''') == '0'\n\nassert solution('''11\nfor 100\nfor 100\nfor 100\nfor 100\nfor 100\nadd\nend\nend\nend\nend\nend\n''') == 'OVERFLOW!!!'\n\nassert solution('''9\nadd\nfor 43\nend\nfor 10\nfor 15\nadd\nend\nadd\nend\nend\n''') == '161'\n\nassert solution('''1\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n276\n277\n278\n279\n280\n281\n282\n283\n284\n285\n286\n287\n288\n289\n290\n291\n292\n293\n294\n295\n296\n297\n298\n299\n300\n301\n302\n303\n304\n305\n306\n307\n308\n309\n310\n311\n312\n313\n314\n315\n316\n317\n318\n319\n320\n321\n322\n323\n324\n325\n326\n327\n328\n329\n330\n331\n332\n333\n334\n335\n336\n337\n338\n339\n340\n341\n342\n343\n344\n345\n346\n347\n348\n349\n350\n351\n352\n353\n354\n355\n356\n357\n358\n359\n360\n361\n362\n363\n364\n365\n366\n367\n368\n369\n370\n371\n372\n373\n374\n375\n376\n377\n378\n379\n380\n381\n382\n383\n384\n385\n386\n387\n388\n389\n390\n391\n392\n393\n394\n395\n396\n397\n398\n399\n400\n401\n402\n403\n404\n405\n406\n407\n408\n409\n410\n411\n412\n413\n414\n415\n416\n417\n418\n419\n420\n421\n422\n423\n424\n425\n426\n427\n428\n429\n430\n431\n432\n433\n434\n435\n436\n437\n438\n439\n440\n441\n442\n443\n444\n445\n446\n447\n448\n449\n450\n451\n452\n453\n454\n455\n456\n457\n458\n459\n460\n461\n462\n463\n464\n465\n466\n467\n468\n469\n470\n471\n472\n473\n474\n475\n476\n477\n478\n479\n480\n481\n482\n483\n484\n485\n486\n487\n488\n489\n490\n491\n492\n493\n494\n495\n496\n497\n498\n499\n500\n501\n502\n503\n504\n505\n506\n507\n508\n509\n510\n511\n512\n513\n514\n515\n516\n517\n518\n519\n520\n521\n522\n523\n524\n525\n526\n527\n528\n529\n530\n531\n532\n533\n534\n535\n536\n537\n538\n539\n540\n541\n542\n543\n544\n545\n546\n547\n548\n549\n550\n551\n552\n553\n554\n555\n556\n557\n558\n559\n560\n561\n562\n563\n564\n565\n566\n567\n568\n569\n570\n571\n572\n573\n574\n575\n576\n577\n578\n579\n580\n581\n582\n583\n584\n585\n586\n587\n588\n589\n590\n591\n592\n593\n594\n595\n596\n597\n598\n599\n600\n601\n602\n603\n604\n605\n606\n607\n608\n609\n610\n611\n612\n613"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('9\\nadd\\nfor 43\\nend\\nfor 10\\nfor 15\\nadd\\nend\\nadd\\nend\\nadd\\nend') == '161\\n'\nassert solution('2\\nfor 62\\nend\\n') == '0\\n'\nassert solution('11\\nfor 100\\nfor 100\\nfor 100\\nfor 100\\nadd\\nend\\nend\\nend\\nend') == 'OVERFLOW!!!\\n'\nassert solution('0\\nfor 0\\nfor 0\\nfor 0\\nfor 0\\nadd\\nend\\nend\\nend\\nend') == '0\\n'\nassert solution('1\\nadd\\nfor 0\\nend\\nfor 0\\nadd\\nend') == 'OVERFLOW!!!\\n'\n"
    },
    {
        "number": 645,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('ee') == 2\nassert solution('z') == 0\nassert solution('0ay1') == 2"
    },
    {
        "number": 645,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('ee') == '2'\nassert solution('z') == '0'\nassert solution('0ay1') == '2'\nassert solution('0ay1') == '0'\nassert solution('0ay1') == '0'\n"
    },
    {
        "number": 645,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('ee') == 2\nassert solution('z') == 0\nassert solution('0ay1') == 2\nassert solution('b4') == 2\nassert solution('0ay0') == 0\n"
    },
    {
        "number": 645,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('ee') == 2\nassert solution('z') == 0\nassert solution('0ay1') == 2\nassert solution('0') == 0"
    },
    {
        "number": 645,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('ee') == '2'\nassert solution('z') == '0'\nassert solution('0ay1') == '2'\n\n\n\"\"\""
    },
    {
        "number": 645,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('') == 0\nassert solution('z') == 0\nassert solution('ee') == 2\nassert solution('0ay1') == 2"
    },
    {
        "number": 645,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"ee\") == \"2\"\nassert solution(\"z\") == \"0\"\nassert solution(\"0ay1\") == \"2\"\nassert solution(\"e3\") == \"0\"\n\n\n\"\"\""
    },
    {
        "number": 645,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('ee') == 2\nassert solution('z') == 0\nassert solution('0ay1') == 2\nassert solution('abababab') == 5\nassert solution('zzzzz') == 0\n"
    },
    {
        "number": 645,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"z\") == \"0\"\nassert solution(\"ee\") == \"2\"\nassert solution(\"0ay1\") == \"2\"\nassert solution(\"0a1y\") == \"2\"\nassert solution(\"0e1y\") == \"2\"\n"
    },
    {
        "number": 645,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"ee\") == '2'\nassert solution(\"z\") == '0'\nassert solution(\"0ay1\") == '2'\n\"\"\"\n"
    },
    {
        "number": 646,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''4\n100 0\n0 100\n-100 0\n0 -100''') == '100'\nassert solution('''7\n0 2\n1 0\n-3 0\n0 -2\n-1 -1\n-1 -3\n-2 -3''') == '-1'\nassert solution('''5\n0 0\n0 -1\n3 0\n-2 0\n-2 1''') == '2'\nassert solution('''5\n0 0\n2 0\n0 -1\n-2 0\n-2 1''') == '2'\nprint(solution('''10\n0 0\n0 -1\n3 0\n-2 0\n-2 1\n2 0\n-2 0\n3 0\n-1 0\n-1 -1\n-1 -3\n-2 -3'''))\n"
    },
    {
        "number": 646,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('4') == '100'\nassert solution('7') == '-1'\nassert solution('5') == '2'\n\"\"\"\n"
    },
    {
        "number": 646,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('4\\n0 2\\n1 0\\n-3 0\\n0 -2\\n-1 -1\\n-1 -3\\n-2 -3') == '100'\nassert solution('5\\n0 0\\n0 -1\\n3 0\\n-2 0\\n-2 1\\n') == '2'\nassert solution('7\\n0 2\\n1 0\\n-3 0\\n0 -2\\n-1 -1\\n-1 -3\\n-2 -3') == '-1'\n"
    },
    {
        "number": 646,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('4\\n100 0\\n0 100\\n-100 0\\n0 -100') == '100'\nassert solution('5\\n0 0\\n0 -1\\n3 0\\n-2 0\\n-2 1') == '2'\nassert solution('7\\n0 2\\n1 0\\n-3 0\\n0 -2\\n-1 -1\\n-1 -3\\n-2 -3') == '2'\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 646,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('4\\n100 0\\n0 100\\n-100 0\\n0 -100\\n') == '100'\nassert solution('7\\n0 2\\n1 0\\n-3 0\\n0 -2\\n-1 -1\\n-1 -3\\n-2 -3\\n') == '2'\nassert solution('5\\n0 0\\n0 -1\\n3 0\\n-2 0\\n-2 1\\n') == '2'\nassert solution('5\\n0 0\\n0 -1\\n3 0\\n-2 0\\n-2 1\\n') == '2'\nassert solution('5\\n0 0\\n0 -1\\n3 0\\n-2 0\\n-2 1\\n') == '2'\n"
    },
    {
        "number": 646,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"2\\n0 0\\n0 -1\\n3 0\\n-2 0\\n-2 1\\n\") == \"100\"\nassert solution(\"5\\n0 0\\n0 -1\\n3 0\\n-2 0\\n-2 1\\n\") == \"-1\"\nassert solution(\"7\\n0 0\\n0 -1\\n3 0\\n-2 0\\n-2 1\\n\") == \"2\"\n"
    },
    {
        "number": 646,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''4\n100 0\n0 100\n-100 0\n0 -100\n''') == \"100\"\nassert solution('''7\n0 2\n1 0\n-3 0\n0 -2\n-1 -1\n-1 -3\n-2 -3\n''') == \"-1\"\nassert solution('''5\n0 0\n0 -1\n3 0\n-2 0\n-2 1\n''') == \"2\""
    },
    {
        "number": 646,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\n    '4\\n'\n    '100 0\\n'\n    '-100 0\\n'\n    '0 -100\\n'\n    '-100 0\\n'\n    '-100 0\\n'\n) == '100'\n\nassert solution(\n    '7\\n'\n    '0 2\\n'\n    '1 0\\n'\n    '-3 0\\n'\n    '0 -2\\n'\n    '-1 -1\\n'\n    '-1 -3\\n'\n    '-2 -3'\n) == '-1'\n\nassert solution(\n    '5\\n'\n    '0 0\\n'\n    '0 -1\\n'\n    '3 0\\n'\n    '-2 0\\n'\n    '-2 1'\n) == '2'\n\n\n\"\"\""
    },
    {
        "number": 646,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''4\n100 0\n0 100\n-100 0\n0 -100\n''') == '100'\n\nassert solution('''7\n0 2\n1 0\n-3 0\n0 -2\n-1 -1\n-1 -3\n-2 -3\n''') == '-1'\n\nassert solution('''5\n0 0\n0 -1\n3 0\n-2 0\n-2 1\n''') == '2'\n\nassert solution('''5\n0 0\n2 0\n0 -1\n-2 0\n-2 1\n''') == '2'\n\nassert solution('''6\n1 0\n0 1\n0 2\n0 3\n1 0\n0 1\n0 2\n0 3\n''') == '2'"
    },
    {
        "number": 646,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"4\\n100 0\\n0 100\\n-100 0\\n0 -100\\n\") == \"100\\n\"\nassert solution(\"7\\n0 2\\n1 0\\n-3 0\\n0 -2\\n-1 -1\\n-1 -3\\n-2 -3\\n\") == \"2\\n\"\nassert solution(\"5\\n0 0\\n0 -1\\n3 0\\n-2 0\\n-2 1\\n\") == \"2\\n\"\nassert solution(\"5\\n0 0\\n0 -1\\n3 0\\n-2 0\\n-2 1\\n\") == \"2\\n\"\nassert solution(\"5\\n0 0\\n0 -1\\n3 0\\n-2 0\\n-2 1\\n\") == \"2\\n\"\n"
    },
    {
        "number": 647,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('LLRLLL') == '1 4\\n2 5\\n6 3'\nassert solution('RRLL') == '3 1'\nassert solution('LLRLL') == '1 4\\n2 5'\nassert solution('LLLLL') == '1 5'\n"
    },
    {
        "number": 647,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''4\nRRLL\n''') == '1 4'\nassert solution('''6\nLLRLLL\n''') == '1 4'\nassert solution('''6\nLLRLLL\n''') == '1 4'\nassert solution('''6\nRRLL\n''') == '3 1'\nassert solution('''4\nRRLL\n''') == '3 1'\n"
    },
    {
        "number": 647,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('4LLLL') == '1 4'\nassert solution('LLRLLL') == '1 4'\nassert solution('RRRLLRLLLRRRLLLRRRLLLRRRLLLRRRLLLLRRRLLLRRRRLLLRRRRLLRLLRLLRLLRRRLLRLLRLLRRLLLRRRRLLRRLLRRRRRRLLRRRRLLRRRRRRRRRRLLRLLRRLLRRLLRRRRLLRRRRLLRLLLLRRLLLLRRRRLLRRRRLLLLLLRRLLRRRRLLRRRLLRRRRLLRLLRRRRRRLLLLRRRRLLRRLLRRLLRRRRLLRLLRRRRRLRRRLLLLRRLLRRRRLLRLRRRLLRRRRLLRRRRLLRRRLLRLLRRRLLRRLLRRLLRRRRLLRRRLLRRRRRLRRRLLRRRRRRRLRRRLLRRRLLRRRRLLRRRLLRRRRLLRRRLLRRRLLRRRRLLRRRLRRLLRLRRRLLRRRLRRRLLRLLRRRRLLRRRLRRRRLLRRRLLRRRLRRLLRRRLRRLLRRRLRRRLLRLRRRLLRLRRRLRRRLRRRLRRRLLRRRRRLRRLLRRRLRRRLLRRLRRRLLRLRRRLLRRRLRRRLLRLLRRRLRRLLRRRLRRLLRRLRRRLRRLLRLRRRLLRLLRRLLRRLLRRRLRRRLRRLLRRRLRRLLRLLRRRRLLRRLLRRLLRRLLRRLRRRRLLRLRRRLRRLLRRLLRRLLRRLLRRLLRRLLRRRRLLRLRRRLLRLRRRLRRRLRRRLRRRLRRLLRRRLRRRLLRRRLRRLLRRRLRRRLRRLLRRRLRRLLRRRLRRRLRRLLRRRLRRRLLRRRLRRRLLRRRLRRLLRRRLRRLLRRRLRRLLRRRLRRLLRRRLRRRLRRRLRRLLRRRLRRLLRRLLRRRLRRLLRRRLRRLLRRLRRLLRRRLRRLLRRLLRRRLRRLLRRRLRRLLRRRLRRRLRRLLRRRLRRRLRRLLRRRLRRLLRRRLRRRLRRLLRRLLRRRLRRRLRRLLRRLRRLLRRLLRRRLRRLLRRRLRRLLRRRLRRRLRRLLRRLLRRRLRRLLRRRLRRLLRRRLRRLLRRRLRRLLRRLLRRLLRRLLRRLLRRRLRRLLRRRLRRLLRRLLRRRLRRLLRRRLRRLLRRRLRRLLRRRLRRLLRRRLRRLLRRRLRRLLRRRLRRLLRRLLRRRLRRLLRRRLRRLLRRRLRRLLRRLLRRRLRRLLRRRLRRLLRRRLRRLLRRRLRRLLRRRLRRLLRRLLRRRLRRLLRRRLRRLLRRRLRRLLRRRLRRLLRRRLRRLLRRRLRRLLRRLLRRLLRRRLRRLLRRRLRRLLRRRLRRLLRRRLRRLLRRRLRRLLRRRLRRLLRRRLRRLLRRRLRRLLRRRLRRLLRRRLRRLLRRRLRRLLRRLLRRLLRRRLRRLLRRRLRRLLRRLLRRRLRRLLRRRLRRLLRRRLRRLLRRLLRRRLRRLLRRRLRRLLRRRLRRLLRRRLRRLLRRRLRRLLRRLLRRRLRRLLRRRLRRLLRRRLRRLLRRRLRRLLRRLLRRLLRRLLRRRLRRLLRRRLRRLLRRLLRRLLRRRLRRLLRRRLRRLLRRLLRRLLRRRLRRLLRRLLRRRLRRLLRRLLRRLLRRRLRRLLRRLLRRLLRRRLRRLLRRLLRRRLRRLLRRLLRRRLRRLLRRLLRRLLRRRLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRRLRRLLRRLLRRRLRRLLRRLLRRLLRRLLRRLLRRRLRRLLRRLLRRRLRRLLRRLLRRRLRRLLRRRLRRLLRRRLRRLLRRLLRRRLRRLLRRLLRRRLRRLLRRLLRRLLRRLLRRLLRRRLRRLLRRRLRRLLRRLLRRRLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRRLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLL"
    },
    {
        "number": 647,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''6\nLLRLLL\n''') == '1 4\\n2 5\\n6 3'\nassert solution('''4\nRRLL\n''') == '3 1\\n4 2'\nassert solution('''12\nRRLLLLRRL\n''') == '1 4\\n2 5\\n3 8\\n4 9\\n5 10\\n6 11\\n7 12'\nassert solution('''13\nRRRLLRLLR\n''') == '1 4\\n2 5\\n3 7\\n4 8\\n5 9\\n6 10\\n7 11\\n8 12'\nassert solution('''14\nRRRRRRRRRR\n''') == '1 4\\n2 5\\n3 8\\n4 9\\n5 10\\n6 11\\n7 12\\n8 13\\n9 14'\n"
    },
    {
        "number": 647,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"RRLL\") == \"\"\nassert solution(\"RRLLL\") == \"2 5\"\nassert solution(\"RRLLLL\") == \"1 4 5\"\nassert solution(\"LLRLLL\") == \"1 4\"\n"
    },
    {
        "number": 647,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('RRLL') == '3 1'\nassert solution('LLRLLL') == '1 4'\nassert solution('RRRLLRLL') == '1 2 3 4'\nassert solution('LLRRLL') == '1 3'\nassert solution('RRRLL') == '2 4'\n"
    },
    {
        "number": 647,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('6\\nLLRLLL') == '1 4\\n2 5\\n6 3'\nassert solution('4\\nRRLL') == '3 1\\n4 2'\nassert solution('5\\nRLLRLL') == '1 3\\n2 4'\nassert solution('7\\nRLRLRL') == '1 2\\n2 3\\n3 4\\n4 5'\nassert solution('10\\nRLLRLRLRL') == '1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7'\n"
    },
    {
        "number": 647,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('6\\nLLRLLL') == '1 4\\n2 5\\n6 3'\nassert solution('5\\nRRLL') == '3 1\\n4 2\\n5 1'\nassert solution('7\\nRLRRL') == '1 4\\n2 3\\n3 4\\n4 1\\n5 2\\n6 1'\nassert solution('11\\nRRLLLL') == '2 7\\n3 6\\n4 5\\n5 4\\n6 3\\n7 2\\n8 1'\nassert solution('11\\nRLRRLR') == '1 4\\n2 3\\n3 4\\n4 1\\n5 2\\n6 1'\n"
    },
    {
        "number": 647,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"RRLL\") == \"3 1\"\nassert solution(\"LLRLLL\") == \"1 4\"\nassert solution(\"RRLLL\") == \"3 1\"\nassert solution(\"RRLLR\") == \"2 5\"\nassert solution(\"RRLLR\") == \"3 1\"\n"
    },
    {
        "number": 647,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"RRLL\") == \"1 4\"\nassert solution(\"LLRLLL\") == \"1 4\"\nassert solution(\"RRRRRRRRRRRRRRRRRR\") == \"1 4 3 6 7 5 8 9\"\nassert solution(\"LLLLLLLLLLLL\") == \"1 3 5\"\nassert solution(\"LLRLLLRRRRLL\") == \"1 3 6 7\"\n"
    },
    {
        "number": 648,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1 5') == '30'\nassert solution('2 3') == '25'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 648,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('0 5') == ''\nassert solution('1 5') == ''\nassert solution('1 1') == ''\nassert solution('10 10') == ''\n"
    },
    {
        "number": 648,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1 5') == '30'\nassert solution('2 3') == '25'\nassert solution('1 1000') == '1000'\nassert solution('1000 1000') == '1000'\nassert solution('1 2') == '0'\n"
    },
    {
        "number": 648,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == '30'\n"
    },
    {
        "number": 648,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''1 5''') == '30'\nassert solution('''2 3''') == '25'\nprint('Testcases passed')\n'''\n\nfrom fractions import Fraction"
    },
    {
        "number": 648,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1 5') == 30\nassert solution('2 3') == 25\nassert solution('2 3') == 25\nassert solution('1 2') == 1\nassert solution('1 10') == 10\n"
    },
    {
        "number": 648,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == 30\n'''\n"
    },
    {
        "number": 648,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1 5') == 30\nassert solution('2 3') == 25\nassert solution('1 10') == 30\nassert solution('1 1000') == 30\nassert solution('1000 1000') == 30\n"
    },
    {
        "number": 648,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"1 5\") == \"30\"\nassert solution(\"2 3\") == \"25\"\nassert solution(\"5 1\") == \"30\"\nassert solution(\"10 100\") == \"300000\"\nassert solution(\"1 0\") == \"0\"\n"
    },
    {
        "number": 648,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1 5') == '30'\nassert solution('2 3') == '25'\n\"\"\"\n\nn, m = map(int, input().split())\n\nprint(n * m - (n - 1) * (m - 1) * 2)\n"
    },
    {
        "number": 649,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('4\\n4 2 2 3') == '39'\nassert solution('6\\n1 1 1 1 1 3') == '85'\nassert solution('1\\n3') == '3'\nassert solution('5\\n1 1 1 1 1') == '0'\nassert solution('10\\n
    },
    {
        "number": 649,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('3\\n3 2 2 1') == '9'\nassert solution('4\\n1 1 1 1 1 3') == '39'\nassert solution('6\\n1 1 1 1 1 3') == '85'"
    },
    {
        "number": 649,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''4\n4 2 2 3''') == '39'\nassert solution('''6\n1 1 1 1 1 3''') == '85'\nassert solution('''1\n3''') == '3'\n"
    },
    {
        "number": 649,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 649,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"\"\nassert solution(\"2\") == \"\"\nassert solution(\"3\") == \"\"\nassert solution(\"4\") == \"\"\n"
    },
    {
        "number": 649,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == '39'\n\nassert solution(stdin) == '85'\n\n\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(10000)"
    },
    {
        "number": 649,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('2') == '0'\nassert solution('3') == '1'\nassert solution('4') == '2'\nassert solution('5') == '3'\nassert solution('6') == '4'\n"
    },
    {
        "number": 649,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\n    \"\"\"4\n4 2 2 3\"\"\"\n) == \"39\"\n\n\nassert solution(\n    \"\"\"6\n1 1 1 1 1 3\"\"\"\n) == \"85\"\n\n\nassert solution(\n    \"\"\"1\n3\"\"\"\n) == \"3\"\n\n\nassert solution(\n    \"\"\"2\n1 1\"\"\"\n) == \"2\"\n\n\nassert solution(\n    \"\"\"6\n1 1 1 1 1 3\"\"\"\n) == \"85\"\n"
    },
    {
        "number": 649,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''4\n4 2 2 3''') == '39'\nassert solution('''6\n1 1 1 1 1 3''') == '85'\n"
    },
    {
        "number": 649,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''4\n4 2 2 3\n''') == '39'\nassert solution('''6\n1 1 1 1 1 3\n''') == '85'\nassert solution('''1\n3\n''') == '3'\nassert solution('''3\n1 1 1 1 1 3\n''') == '3'\nassert solution('''7\n5\n1 2 1 1 1 1\n''') == '48'\n"
    },
    {
        "number": 650,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('NEAT') == 'YES'\nassert solution('CODER') == 'NO'\nassert solution('AI') == 'YES'\nassert solution('JUROR') == 'NO'\nassert solution('YES') == 'YES'\n"
    },
    {
        "number": 650,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('NEAT') == 'YES'\nassert solution('CODER') == 'NO'\nassert solution('APRILFOOL') == 'NO'\nassert solution('AI') == 'YES'\nassert solution('JUROR') == 'YES'\n"
    },
    {
        "number": 650,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"NEAT\") == \"YES\"\nassert solution(\"WORD\") == \"NO\"\nassert solution(\"CODER\") == \"NO\"\nassert solution(\"APRILFOOL\") == \"NO\"\nassert solution(\"AI\") == \"YES\"\n"
    },
    {
        "number": 650,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"NEAT\") == \"YES\"\nassert solution(\"WORD\") == \"NO\"\nassert solution(\"CODER\") == \"NO\"\nassert solution(\"APRILFOOL\") == \"NO\"\nassert solution(\"AI\") == \"YES\"\n"
    },
    {
        "number": 650,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('NEAT') == 'YES'\nassert solution('WORD') == 'NO'\nassert solution('CODER') == 'NO'\nassert solution('APRILFOOL') == 'NO'\nassert solution('AI') == 'YES'\n"
    },
    {
        "number": 650,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"NEAT\") == \"YES\"\nassert solution(\"WORD\") == \"NO\"\nassert solution(\"CODER\") == \"NO\"\nassert solution(\"APRILFOOL\") == \"NO\"\nassert solution(\"AI\") == \"YES\"\n"
    },
    {
        "number": 650,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"NEAT\") == \"YES\"\nassert solution(\"WORD\") == \"NO\"\nassert solution(\"CODER\") == \"NO\"\nassert solution(\"APRILFOOL\") == \"NO\"\nassert solution(\"AI\") == \"YES\"\n"
    },
    {
        "number": 650,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"NEAT\") == \"YES\"\nassert solution(\"WORD\") == \"NO\"\nassert solution(\"CODER\") == \"NO\"\nassert solution(\"APRILFOOL\") == \"NO\"\nassert solution(\"AI\") == \"YES\"\n"
    },
    {
        "number": 650,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\n\nstdin = \"AI\""
    },
    {
        "number": 650,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('NEAT') == 'YES'\nassert solution('WORD') == 'NO'\nassert solution('CODER') == 'NO'\nassert solution('APRILFOOL') == 'NO'\nassert solution('AI') == 'YES'\n"
    },
    {
        "number": 651,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"5 6\") == \"\"\nassert solution(\".....#\") == \"\"\nassert solution(\"S....#\") == \"\"\nassert solution(\".#....\") == \"\"\n"
    },
    {
        "number": 651,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\n'''5 6\n.....#\nS....#\n.#....\n.#....\n...E..\n333300012''') == '14'\nassert solution('''6 6\n......\n......\n..SE..\n......\n......\n......\n01232123212302123021''') == '0'\n\nassert solution(\n'''5 3\n...\n.S.\n###\n.E.\n...\n3''') == '0'\nassert solution(\n'''5 3\n...\n.S.\n###\n.E.\n...\n3''') == '0'\n\nassert solution(\n'''5 3\n...\n...\n.E.\n...\n3''') == '0'\n"
    },
    {
        "number": 651,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\n'''5 6\n.....#\nS....#\n.#....\n.#....\n...E..\n333300012'''\n) == '1'\n\nassert solution(\n'''5 3\n...\n.S.\n###\n.E.\n...\n3'''\n) == '0'\n\nprint(solution('''5 2\n......\n......\n..SE..\n......\n......\n......\n01232123212302123021'''))\n"
    },
    {
        "number": 651,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('3 4\\nS...\\n#...\\n.#...\\n.#...\\n.#...\\n.#...\\n.#...\\n...E') == '1'\nassert solution('4 4\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....') == '0'\nassert solution('3 3\\n.###\\n#S.#\\n#.##\\n###E.\\n..#.#\\n.#.#E\\n#.#.#\\n.#.#S\\n.#...') == '1'\nassert solution('4 4\\n...#\\n.#.#\\n.#.#\\n.#.#\\n.#.#\\n.#.#\\n.#.#\\n.#.#\\n.#...') == '0'\nassert solution('4 4\\n...#\\n.#.#\\n.#.#\\n.#.#\\n.#.#\\n.#.#\\n.#.#\\n.#.#\\n.#...') == '0'\n"
    },
    {
        "number": 651,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('5 6') == 1\nassert solution('6 6') == 0\n"
    },
    {
        "number": 651,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\".S.\\n.#..\\n.#..\\n.#..\\n.#..\\n.#..\\n....E.\\n.E..#\\n.#..#\\n....#\\n....#\\n....#\\n....#\") == \"0\"\nassert solution(\".S.\\n.#..\\n.#..\\n.#..\\n.#..\\n.#..\\n....E.\\n.E..#\\n.#..#\\n....#\\n....#\\n....#\\n....#\") == \"14\"\nassert solution(\".S.\\n.#..\\n.#..\\n.#..\\n.#..\\n.#..\\n....E.\\n.E..#\\n.#..#\\n....#\\n....#\\n....#\\n....#\") == \"2\"\nassert solution(\".S.\\n.#..\\n.#..\\n.#..\\n.#..\\n.#..\\n....E.\\n.E..#\\n.#..#\\n....#\\n....#\\n....#\\n....#\") == \"4\"\nassert solution(\".S.\\n.#..\\n.#..\\n.#..\\n.#..\\n.#..\\n....E.\\n.E..#\\n.#..#\\n....#\\n....#\\n....#\\n....#\") == \"8\"\n"
    },
    {
        "number": 651,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('5 6\\n.....\\n.S.\\n.#....\\n.#....\\n...E..\\n333300012') == '1'\nassert solution('6 6\\n......\\n......\\n..SE..\\n......\\n......\\n......\\n01232123212302123021') == '14'\n\n\n\n\"\"\""
    },
    {
        "number": 651,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == expected\n\"\"\"\n\nfrom __future__ import annotations"
    },
    {
        "number": 651,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('0 1 0 0 3') == '0'\nassert solution('1 2 0 0 3') == '1'\nassert solution('0 0 0 3') == '0'\nassert solution('3') == '0'\nassert solution('0 1 2 3') == '0'\n"
    },
    {
        "number": 651,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('2 3\\n......\\n...E.') == '14'\nassert solution('5 6\\n.....#\\n.S....\\n.#....\\n.#....\\n...E..\\n333300012') == '1'\nassert solution('5 3\\n....\\n..S\\n###\\n.E.') == '0'\nassert solution('6 6\\n......\\n......\\n..SE..\\n......\\n......\\n01232123212302123021') == '14'\nassert solution('5 6\\n....\\n..S\\n###\\n.E.') == '0'\n"
    },
    {
        "number": 652,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('0 1\\n1 0\\n1 1\\n2 0') == '1'\nassert solution('1 2\\n2 1\\n1 1\\n1 2\\n2 2') == '3'\nassert solution('1 2\\n1 1\\n1 2\\n1 2') == '2'\nassert solution('1 2\\n1 1\\n1 2\\n1 2\\n1 2') == '1'\nassert solution('1 2\\n1 1\\n1 2\\n1 2\\n1 2') == '2'\n"
    },
    {
        "number": 652,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 652,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('0 1\\n1 0\\n1 1\\n2 0') == '1'\nassert solution('0 0\\n0 0\\n1 0\\n1 0\\n2 0') == '3'\nassert solution('0 0\\n1 0\\n2 0\\n3 0\\n4 0\\n5 0') == '3'\nassert solution('0 0\\n1 0\\n2 0\\n3 0\\n4 0\\n5 0\\n6 0\\n7 0') == '6'\nassert solution('0 0\\n0 0\\n1 0\\n1 0\\n2 0\\n3 0') == '2'\n"
    },
    {
        "number": 652,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"0 1\\n1 0\\n1 1\\n2 0\") == \"1\"\nassert solution(\"0 1\\n1 0\\n1 1\\n2 0\\n3 0\") == \"2\"\nassert solution(\"0 1\\n1 0\\n1 1\\n2 0\\n3 0\\n4 0\") == \"3\"\nassert solution(\"0 1\\n1 0\\n1 1\\n2 0\\n3 0\\n4 0\\n5 0\") == \"4\"\nassert solution(\"0 1\\n1 0\\n1 1\\n2 0\\n3 0\\n4 0\\n5 0\\n6 0\") == \"6\"\n"
    },
    {
        "number": 652,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(open(\"test_input\", \"r\").read()) == \"1\\n\"\nassert solution(open(\"test_input\", \"r\").read()) == \"2\\n\"\n"
    },
    {
        "number": 652,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('0 1\\n1 0\\n1 1\\n2 0') == '1'\nassert solution('0 1\\n1 0\\n1 1\\n2 0\\n2 1') == '2'\nassert solution('0 1\\n1 0\\n1 1\\n2 0\\n3 0') == '3'\nassert solution('0 1\\n1 0\\n1 1\\n2 0\\n4 0') == '4'\nassert solution('0 1\\n1 0\\n1 1\\n2 0\\n5 0') == '5'\n"
    },
    {
        "number": 652,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''0 1\n1 0\n1 1\n2 0''') == '1'\nassert solution('''1 1\n1 0\n1 1\n2 0''') == '2'\nassert solution('''1 1\n1 0\n1 1\n2 0\n0 0\n2 2\n2 1\n1 1\n2 0\n1 0\n0 0\n1 0\n1 1\n1 1\n1 2''') == '4'\nassert solution('''1 1\n1 0\n1 1\n2 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0"
    },
    {
        "number": 652,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''0 1\n1 0\n1 1\n2 0''') == '1'\nassert solution('''0 1\n0 1\n1 0\n2 0''') == '1'\nassert solution('''0 1\n1 0\n1 1\n2 0''') == '2'\nassert solution('''0 1\n1 1\n1 1\n2 0''') == '1'\nassert solution('''0 1\n1 1\n1 1\n1 1\n1 1''') == '1'\n"
    },
    {
        "number": 652,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('0 1\\n1 0\\n1 1\\n2 0') == '1'\nassert solution('1\\n1\\n1\\n1') == '4'\nassert solution('1\\n1\\n1\\n1\\n1\\n1') == '6'\nassert solution('1\\n1\\n1\\n1\\n1\\n1\\n1') == '7'\nassert solution('1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1') == '8'\n"
    },
    {
        "number": 652,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == '1'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 653,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\n    \"8\\n\"\n    \"LLRL1RL1\") == \"1010000011\"\nassert solution(\n    \"9\\n\"\n    \"L0L0LLRR9\") == \"1100000010\"\n\n\n\"\"\""
    },
    {
        "number": 653,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('9') == '1100000010'\nassert solution('8') == '1010000011'\nassert solution('1') == '1100000001'\nassert solution('9') == '1100000010'\nassert solution('0') == '0000000000'\n"
    },
    {
        "number": 653,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('8\\n' + 'LLRL1RL1') == '1010000011'\nassert solution('9\\n' + 'L0L0LLRR9') == '1100000010'\n"
    },
    {
        "number": 653,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''8\nLLRL1RL1''') == '1010000011'\nassert solution('''9\nL0L0LLRR9''') == '1100000010'\nassert solution('''10\nLLLLLLLLLLR''') == '111000100001'\nassert solution('''10\nL0L0LLLLRR9''') == '111000100001'\nassert solution('''10\nL0L0LLRR9''') == '111000100001'\n"
    },
    {
        "number": 653,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''8''') == '1100000010'\nassert solution('''9''') == '1100000011'\nassert solution('''LLRL1RL1''') == '1010000011'\nassert solution('''L0L0LLRR9''') == '1100000010'\nassert solution('''L0L0LLRR9''') == '1100000010'"
    },
    {
        "number": 653,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '01'\nassert solution('3') == '001'\nassert solution('4') == '0001'\nassert solution('5') == '00001'\n"
    },
    {
        "number": 653,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('9\\nL0L0LLRR9\\n') == '1010000011'\nassert solution('5\\nL1L1L0L0\\n') == '0011001000'\nassert solution('6\\nRRR3RR3RRR1\\n') == '1100100001'\nassert solution('8\\nL0L0LLRL0\\n') == '1100000010'\nassert solution('7\\nL0L0LLRL0\\n') == '1100000010'\n"
    },
    {
        "number": 653,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('LLRL1RL1') == '1010000011'\nassert solution('L0L0LLRR9') == '1100000010'\nprint(solution(input()))\n"
    },
    {
        "number": 653,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('LLRL1RL1') == '1010000011'\nassert solution('L0L0LLRR9') == '1100000010'\nassert solution('L0L0LLRR0') == '1100000010'\nassert solution('L0L0LLRR8') == '1100000010'\nassert solution('L0L0LLRR8') == '1100000010'\n"
    },
    {
        "number": 653,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('a') == '0'\nassert solution('Hello World
    },
    {
        "number": 654,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('(())') == '()'\nassert solution('((()')) == '()'\nassert solution('((()))') == '()()'\nassert solution('((())())') == '()()'\n"
    },
    {
        "number": 654,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('(()') == 1\nassert solution('()()') == 2\nassert solution('(())') == 3\nassert solution('((()' ) == 0\n"
    },
    {
        "number": 654,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('(())') == '0'\nassert solution('()()') == '0'\nassert solution('(())') == '0'\nassert solution('((())') == '0'\nassert solution('(((()))') == '0'\n"
    },
    {
        "number": 654,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('(()())') == 1\nassert solution('(())()') == 2\nassert solution('(()())(())') == 3\nassert solution('(())()') == 3\nassert solution('()(((((()()))))))') == 3\n"
    },
    {
        "number": 654,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('') == 'No Match'\nassert solution('0') == 'No Match'\nassert solution('2') == '1'\nassert solution('3') == '3'\nassert solution('4') == '4'\n"
    },
    {
        "number": 654,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('(())') == '0'\nassert solution('()()') == '0'\nassert solution('((())())') == '0'\nassert solution('())()') == '1'\nassert solution('((()))') == '0'\n"
    },
    {
        "number": 654,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1') == ''\nassert solution('2') == '3'\nassert solution('3') == '9'\nassert solution('5') == '15'\n"
    },
    {
        "number": 654,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"2\") == 2\nassert solution(\"3\") == 3\nassert solution(\"4\") == 4\nassert solution(\"5\") == 5\nassert solution(\"6\") == 6\n"
    },
    {
        "number": 654,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('()') == '0'\nassert solution('(())') == '0'\nassert solution('()()') == '0'\nassert solution('(())()') == '0'\nassert solution('((()))') == '0'\n"
    },
    {
        "number": 654,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"9\"\nassert solution(\"1\\n3\") == \"3\"\nassert solution(\"2\\n1\") == \"3\"\n"
    },
    {
        "number": 655,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1\\n2\\n') == 'White'\nassert solution('2\\n2\\n') == 'Black'\nassert solution('4\\n3\\n') == 'Black'\nassert solution('5\\n5\\n') == 'Black'\nassert solution('2\\n3\\n') == 'Black'\n"
    },
    {
        "number": 655,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == \"White\"\n\n'''"
    },
    {
        "number": 655,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"\n4\n2 3\n\"\"\"\n) == 'White'\nassert solution(\n\"\"\"\n5\n3 5\n\"\"\"\n) == 'Black'\nassert solution(\n\"\"\"\n2\n2 2\n\"\"\"\n) == 'Black'\nassert solution(\n\"\"\"\n2\n1 2\n\"\"\"\n) == 'Black'\nassert solution(\n\"\"\"\n2\n1 1\n\"\"\"\n) == 'White'\n"
    },
    {
        "number": 655,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"2\\n2 2\") == \"Black\"\nassert solution(\"5\\n3 5\") == \"White\"\nassert solution(\"2\\n2 2\") == \"Black\"\nassert solution(\"2\\n2 2\") == \"Black\"\nassert solution(\"4\\n3 4\") == \"Black\"\n"
    },
    {
        "number": 655,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''4''') == 'Black'\nassert solution('''5''') == 'White'\nassert solution('''2''') == 'Black'\nassert solution('''3 5''') == 'White'\nassert solution('''2 2''') == 'Black'\n"
    },
    {
        "number": 655,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == \"Black\"\nassert solution(stdin) == \"White\"\n\n'''\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n'''\n\nTask\n\nWrite a function called kangaroo that accepts two strings as input:\nThe first line contains the space-separated elements of the first string, s1.\nThe second line contains the space-separated elements of the second string, s2.\nYour function should return the element that appears in s1 and s2 before the first appearance of the other element.\n\nIf neither kangaroo visits the same element twice, return null.\nYou may assume that s1 and s2 both contain valid input.\n\nInput Format\n\nThe first line contains an integer, n, denoting the size of the array.\nThe second line contains n space-separated strings denoting the elements of the array.\n\nOutput Format\n\nReturn the element that appears in s1 and s2 before the first appearance of the other element.\n\nSample Input\n\n11\nelephant lion\nelephant lion\nelephant lion\nelephant lion\nelephant lion\nelephant lion\nelephant lion\nelephant lion\nelephant lion\nelephant lion\nelephant lion\nelephant lion\nelephant lion\nSample Output\n\nelephant\nelephant\nelephant\nelephant\nelephant\nelephant\nelephant\nelephant\nelephant\nelephant\nelephant\n'''"
    },
    {
        "number": 655,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdin[2:-2]\n\n\"\"\"\n"
    },
    {
        "number": 655,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == 'Black'\n"
    },
    {
        "number": 655,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('4\\n4 4') == 'Black'\nassert solution('5\\n3 5') == 'White'\nassert solution('2\\n2 2') == 'Black'\nassert solution('2\\n1 1') == 'White'\nassert solution('1\\n1 1') == 'Black'\n"
    },
    {
        "number": 655,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''4\n2 3''') == 'White'\nassert solution('''5\n3 5''') == 'Black'\nassert solution('''2\n2 2''') == 'Black'\nassert solution('''2\n2 1''') == 'White'\nassert solution('''2\n1 1''') == 'Black'\n"
    },
    {
        "number": 656,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('3 3\\n-5 20 -3 0') == '2'\nassert solution('4 2\\n-5 20 -3 0') == '4'\nassert solution('10 6\\n2 -5 1 3 0 0 -4 -3 1 0') == '3'\nassert solution('10 7\\n2 -5 1 3 0 0 -4 -3 1 0') == '-1'\nassert solution('10 7\\n2 -5 1 3 0 0 -4 -3 1 0') == '3'"
    },
    {
        "number": 656,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"1 1\") == \"0\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"5 1\") == \"2\"\nassert solution(\"5 2\") == \"4\"\nassert solution(\"10 2\") == \"3\"\n"
    },
    {
        "number": 656,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''4 3\n-5 20 -3 0''') == '2'\nassert solution('''4 2\n-5 20 -3 0''') == '4'\nassert solution('''10 6\n2 -5 1 3 0 0 -4 -3 1 0''') == '3'\n"
    },
    {
        "number": 656,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"\n-5 20 -3 0\n\"\"\"\n) == \"2\"\n\nassert solution(\n\"\"\"\n-5 20 -3 0\n\"\"\"\n) == \"4\"\n\nassert solution(\n\"\"\"\n10 6\n2 -5 1 3 0 0 -4 -3 1 0\n\"\"\"\n) == \"3\"\n\nassert solution(\n\"\"\"\n5 6\n1 -5 1 3 0 0 -4 -3 1 0\n\"\"\"\n) == \"-1\"\n"
    },
    {
        "number": 656,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == expected\nprint(solution(stdin))\n\n\"\"\"\n\nimport sys\nsys.path.append('../')\nfrom math import log,ceil\nfrom common.timing import timeit\nfrom common.listnode import ListNode\nfrom common.linkedlist import LinkedList\nfrom common.getinput import getinput\n\nclass Solution:\n    def solve(self, n, k, t):\n        if k >= n:\n            return 0\n        m = 2 * k\n        cnt = 0\n        for i in t:\n            if i < 0:\n                cnt += ceil(log(-i) / log(2))\n            if cnt > m:\n                return -1\n        cnt = 0\n        for i in t:\n            if i > 0:\n                cnt += ceil(log(i) / log(2))\n            if cnt > m:\n                return -1\n        return cnt + ceil(log(m) / log(2))\n\ninput = getinput(__file__)\nn, k = map(int, input[0].split())\nt = [int(i) for i in input[1]]\ntimeit(Solution().solve, n, k, t)"
    },
    {
        "number": 656,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('4 2\\n-5 20 -3 0') == '2'\nassert solution('3 3\\n-1 1 -1') == '4'\nassert solution('10 6\\n2 -5 1 3 0 0 -4 -3 1 0') == '3'\nassert solution('10 7\\n2 -5 1 3 0 0 -4 -3 1 0') == '-1'\nassert solution('10 7\\n2 -5 1 3 0 0 -4 -3 1 0') == '3'\n"
    },
    {
        "number": 656,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''4 3\n-5 20 -3 0''') == '2'\nassert solution('''4 2\n-5 20 -3 0''') == '4'\nassert solution('''10 6\n2 -5 1 3 0 0 -4 -3 1 0''') == '3'\nassert solution('''10 6\n2 -5 1 3 0 0 -4 -3 1 0''') == '4'\nassert solution('''10 6\n2 -5 1 3 0 0 -4 -3 1 0''') == '5'"
    },
    {
        "number": 656,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 656,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"\"\"4 3\n-5 20 -3 0\"\"\") == \"2\"\nassert solution(\"\"\"4 2\n-5 20 -3 0\"\"\") == \"4\"\nassert solution(\"\"\"10 6\n2 -5 1 3 0 0 -4 -3 1 0\"\"\") == \"3\"\nassert solution(\"\"\"10 2\n2 -5 1 3 0 0 -4 -3 1 0\"\"\") == \"-1\"\nassert solution(\"\"\"10 5\n2 -5 1 3 0 0 -4 -3 1 0\"\"\") == \"4\"\n"
    },
    {
        "number": 656,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('4 3\\n-5 20 -3 0\\n') == '2'\nassert solution('4 2\\n-5 20 -3 0\\n') == '4'\nassert solution('10 6\\n2 -5 1 3 0 0 -4 -3 1 0\\n') == '3'\nassert solution('10 10\\n2 -5 1 3 0 0 -4 -3 1 0\\n') == '-1'\n\n\n\"\"\"\n"
    },
    {
        "number": 657,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('') == 0\nassert solution('4 3') == 2\nassert solution('3 9') == 1\nassert solution('12345678 87654321') == 2147483648\nassert solution('43043751 1000000000 53798715') == 2147483648\n"
    },
    {
        "number": 657,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''4 3\n2 1 1''') == '2'\nassert solution('''3 9\n1 1 3''') == '1'\nassert solution('''12345678 87654321\n43043751 1000000000 53798715''') == '2147483648'\nassert solution('''1 2 3 4 5 6 7 8 9 10\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1''') == '4'\nassert solution('''10 10 10 10 10 10 10 10 10 10 10\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1''') == '1'\n"
    },
    {
        "number": 657,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1 3') == '2'\nassert solution('4 2') == '2'\nassert solution('5 2') == '1'\nassert solution('4 2') == '1'\nassert solution('12345678 87654321') == '2147483648'\n"
    },
    {
        "number": 657,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == '1'\nassert solution('3 2 1') == '1'\nassert solution('1 1 2') == '1'\nassert solution('5 1 1') == '1'\n"
    },
    {
        "number": 657,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''4 3\n2 1 1''') == '2'\nassert solution('''3 9\n1 1 3''') == '1'\nassert solution('''12345678 87654321\n43043751 1000000000 53798715''') == '2147483648'\nassert solution('''234 33 46''') == '0'\nassert solution('''112 145 143''') == '0'\n"
    },
    {
        "number": 657,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\n'''\n4 3\n2 1 1\n'''\n    ) == '2'\n\nassert solution(\n'''\n3 9\n1 1 3\n'''\n    ) == '1'\n\nassert solution(\n'''\n12345678 87654321\n43043751 1000000000 53798715\n'''\n    ) == '2147483648'\n"
    },
    {
        "number": 657,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('') == None\nassert solution('0 0 0') == None\nassert solution('1 1 1') == None\nassert solution('1 1 1 1') == None\nassert solution('2 1 1') == None\n"
    },
    {
        "number": 657,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\n\n\n\"\"\"\n\n=====Approach 1: Mathematical Formula=====\n\nA binary search based solution is preferred because it's more concise.\n\nLet's say that we can obtain x, y, and z yellow balls from Grisha's disposal.\nLet's say that the total number of crystals is n, and the number of yellow, green and blue balls is k.\n\nThe minimum number of crystals needed is n - min{x, y, z} - 1.\nSo, we can find the first minimal value of n - min{x, y, z} - 1 by going left.\nIf we need n - min{x, y, z} - 1 crystals, we can find the number of green and blue balls by adding them to x, y, and z, respectively.\n\"\"\""
    },
    {
        "number": 657,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1 2\\n2 3') == '2'\nassert solution('1 1\\n2 3') == '2'\nassert solution('1 1\\n2 3') == '2'\nassert solution('1 1\\n1 1') == '0'\nassert solution('5 2\\n1 1 3') == '2'\n"
    },
    {
        "number": 657,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"1 2 1\") == \"2\"\nassert solution(\"4 3\") == \"1\"\nassert solution(\"12345678 87654321\") == \"2147483648\"\nassert solution(\"43043751 1000000000 53798715\") == \"1\"\nassert solution(\"1 1 3\") == \"1\"\n"
    },
    {
        "number": 658,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(input) == '5.0000000000'\n\n\"\"\"\n"
    },
    {
        "number": 658,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == \"0.50000000000\"\n\n-----Test-----\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 658,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('5 5 1 2') == '5.0000000000'\nassert solution('1 2\\n3 1\\n4 3\\n3 4\\n1 4') == '5.0000000000'\nassert solution('1 2\\n3 1\\n4 3\\n3 4\\n1 4\\n5 2\\n1 3\\n2 4') == '6.0000000000'\nassert solution('1 2\\n3 1\\n4 3\\n3 4\\n1 4\\n5 2\\n1 3\\n2 4\\n3 5\\n4 5') == '6.0000000000'\nassert solution('1 2\\n3 1\\n4 3\\n3 4\\n1 4\\n5 2\\n1 3\\n2 4\\n3 5\\n4 5\\n5 3\\n4 2') == '7.0000000000'\n"
    },
    {
        "number": 658,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"\"\"5 5 1 2\n1 2\n3 1\n4 3\n3 4\n1 4\"\"\") == \"5.0000000000\"\nassert solution(\"\"\"5 5 1 2\n1 2\n3 1\n4 3\n3 4\n1 4\n4 4\n1 2\n4 1\n1 1\n1 2\n1 3\n4 1\n1 4\n1 5\n1 5\"\"\") == \"0.0000000000\"\nassert solution(\"\"\"5 5 1 2\n1 2\n3 1\n4 3\n3 4\n1 4\n2 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n"
    },
    {
        "number": 658,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"5 5 1 2\\n1 2\\n3 1\\n4 3\\n3 4\\n1 4\\n\") == \"5.0000000000\"\n\n\n\n\"\"\"\n"
    },
    {
        "number": 658,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\n"
    },
    {
        "number": 658,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\n'''5 5 1 2\n1 2\n3 1\n4 3\n3 4\n1 4'''\n    ) == '5.0000000000'\n\nassert solution(\n'''1 2\n3 1'''\n    ) == '0.5'\n\nassert solution(\n'''1 2\n3 1'''\n    ) == '0.0'"
    },
    {
        "number": 658,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\n\nfrom sys import stdin, stdout"
    },
    {
        "number": 658,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\n'''5 5 1 2\n1 2\n3 1\n4 3\n3 4\n1 4''') == '5.0000000000'\n\nassert solution(\n'''2 2 1 1\n2 0\n2 1''') == '0.5'\n\nassert solution(\n'''3 3 1 1\n1 0\n2 0\n1 1''') == '0.3333333333'\n\nassert solution(\n'''4 4 1 1\n1 0\n2 0\n3 0\n1 1''') == '0.25'\n\nassert solution(\n'''5 5 1 2\n1 2\n3 1\n4 3\n3 4\n1 4\n1 0''') == '0.16666666667'\n"
    },
    {
        "number": 658,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == '5.0000000000'\n\n\"\"\""
    },
    {
        "number": 659,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == \"-1 2\"\n\"\"\"\n"
    },
    {
        "number": 659,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 659,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(input()) == output()\n"
    },
    {
        "number": 659,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"1\\n1\") == \"-1\"\nassert solution(\"2\\n1 2\") == \"-1\"\nassert solution(\"4\\n1 2 3 4\") == \"1 2\"\nassert solution(\"3\\n1 1 1\") == \"-1\"\nassert solution(\"2\\n1 2\") == \"-1\"\n"
    },
    {
        "number": 659,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''1\n1\n''') == '-1'\nassert solution('''2\n1 2\n''') == '-1'\nassert solution('''3\n1 1 1\n''') == '1 2'\nassert solution('''4\n1 2 3 4\n''') == '1 2'\nassert solution('''5\n1 2 3 4 5\n''') == '-1'\n\n\n\"\"\"\n"
    },
    {
        "number": 659,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1\\n1') == '-1'\nassert solution('2\\n1 2') == '-1'\nassert solution('2\\n1 2') == '-1'\nassert solution('4\\n1 2 3 4') == '1 2'\nassert solution('3\\n1 1 1') == '-1'\n"
    },
    {
        "number": 659,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == expected\n\"\"\"\n\nN = int(stdin.readline())\nA = [int(x) for x in stdin.readline().split()]\n\ns = set()\nfor i in range(N):\n    for j in range(i + 1, N):\n        if A[i] > A[j]:\n            s.add((i + 1, j + 1))"
    },
    {
        "number": 659,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''1\n1''') == '-1'\nassert solution('''2\n1 2''') == '-1'\nassert solution('''4\n1 2 3 4''') == '1 2'\nassert solution('''3\n1 1 1''') == '-1'\nassert solution('''10\n1 1 1 1 1 1 1 1 1 1 1 1 1''') == '1 1'\n'''\n"
    },
    {
        "number": 659,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''1''') == '1'\nassert solution('''2''') == '-1'\nassert solution('''4''') == '1 2'\nassert solution('''3''') == '-1'\nassert solution('''1 1 1''') == '-1'\n"
    },
    {
        "number": 659,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''1''') == '-1'\nassert solution('''1\n2''') == '-1'\nassert solution('''1\n2\n3''') == '-1'\nassert solution('''2\n2\n1''') == '1 2'\nassert solution('''2\n2\n1\n3''') == '1 2'\n"
    },
    {
        "number": 660,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('8 2 4') == '35 32'\nassert solution('5 2 3') == '20 15'\nassert solution('8 3 4') == '18 15'\nassert solution('4 5 3') == '12 12'\nassert solution('5 4 2') == '12 10'\n"
    },
    {
        "number": 660,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == expected\n"
    },
    {
        "number": 660,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('5 2 3') == '20 15'\nassert solution('8 2 4') == '35 32'\nassert solution('3 1 1') == '1 1'\nassert solution('20 10 5') == '53 70'\nassert solution('4 10 3') == '6 16'\n"
    },
    {
        "number": 660,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('8 2 4') == '35 32'\nassert solution('5 2 3') == '20 15'\nassert solution('8 2 4') == '35 32'\nassert solution('8 2 4') == '35 32'\nassert solution('9 2 3') == '36 34'\n"
    },
    {
        "number": 660,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('3 2 3') == '20 15'\nassert solution('8 2 4') == '35 32'\nassert solution('1 2 3') == '1 3'\nassert solution('1 2 2') == '2 1'\nassert solution('1 1 1') == '1 1'\n"
    },
    {
        "number": 660,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('5 2 3\\n') == '20 15'\nassert solution('8 2 4\\n') == '35 32'\nassert solution('2 3 4\\n') == '2 2'\nassert solution('10 0 2\\n') == '0 0'\nassert solution('100 1 2\\n') == '100 100'\n"
    },
    {
        "number": 660,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('3 2 3\\n') == '20 15'\nassert solution('3 2 4\\n') == '35 32'"
    },
    {
        "number": 660,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('5 2 3\\n') == '20 15'\nassert solution('8 2 4\\n') == '35 32'\nassert solution('2 1 1\\n') == '0 0'\nassert solution('10 2 2\\n') == '0 0'\nassert solution('100 2 2\\n') == '0 0'\n"
    },
    {
        "number": 660,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdin"
    },
    {
        "number": 660,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('5 2 3') == '20 15'\nassert solution('8 2 4') == '35 32'\nassert solution('3 1 3') == '1 1'\nassert solution('9 2 4') == '17 6'\nassert solution('14 1 4') == '17 8'"
    },
    {
        "number": 661,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\n\"\"\"1 0\"\"\"\n) == \"0 0 1 1\"\n\nassert solution(\n\"\"\"0 2\"\"\"\n) == \"0 1 0 1\"\n\nassert solution(\n\"\"\"2 1\"\"\"\n) == \"1 1 0 0\"\n\nassert solution(\n\"\"\"8 3\"\"\"\n) == \"-1\"\n\nassert solution(\n\"\"\"8 3\"\"\"\n) == \"1 0 1 0\""
    },
    {
        "number": 661,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''1 0''') == '0 0 1 1'\nassert solution('''2 0''') == '-1'\nassert solution('''17 0''') == '0 0 1 1'\nassert solution('''17 1''') == '1 0 1 1'\nassert solution('''17 2''') == '1 1 0 1'\n"
    },
    {
        "number": 661,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('4 0') == '0 0 1 1'\nassert solution('1 0') == '0 0 1 1'\nassert solution('2 1') == '0 0 1 1'\nassert solution('3 2') == '0 1 1 1'\nassert solution('4 2') == '0 0 1 1'\n"
    },
    {
        "number": 661,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\""
    },
    {
        "number": 661,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 661,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('0 0') == '0 0 1 1'\nassert solution('1 0') == '0 0 1 1'\nassert solution('1 1') == '0 0 1 1'\nassert solution('1 1 1') == '0 0 1 1'\n"
    },
    {
        "number": 661,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(0, 0) == '0 0 1 1'\nassert solution(1, 0) == '0 0 1 1'\nassert solution(0, 1) == '0 0 1 1'\nassert solution(1, 1) == '0 0 1 1'\nassert solution(2, 0) == '0 0 1 1'\n"
    },
    {
        "number": 661,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 661,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1 0') == '0 0 1 1'\nassert solution('2 2') == '0 0 1 1'\nassert solution('0 0') == '0 0 1 1'\nassert solution('1 0 1 1') == '0 0 1 1'\nassert solution('3 3') == '0 0 1 1'\n"
    },
    {
        "number": 661,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"1 0\") == \"-1\"\nassert solution(\"2 5\") == \"-1\"\nassert solution(\"1 0\") == \"0 0 1 1\"\nassert solution(\"2 2\") == \"-1\"\nassert solution(\"1 4\") == \"-1\"\n"
    },
    {
        "number": 662,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''3''') == 'YES'\nassert solution('''1\n1\n2''') == 'YES'\nassert solution('''1\n2\n1''') == 'NO'\nassert solution('''2\n1\n2\n1''') == 'YES'\nassert solution('''2\n2\n2\n2\n2''') == 'YES'\n"
    },
    {
        "number": 662,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('5\\n1\\n1\\n2\\n1') == 'YES'\nassert solution('1\\n2\\n3') == 'NO'\nassert solution('1\\n1\\n1') == 'YES'\nassert solution('2\\n1\\n2') == 'NO'\nassert solution('5\\n2\\n1\\n1\\n2') == 'YES'\n"
    },
    {
        "number": 662,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('3\\n1\\n1\\n2\\n') == 'YES'\nassert solution('2\\n1\\n2\\n') == 'NO'\nassert solution('1\\n2\\n') == 'NO'\nassert solution('2\\n1\\n2\\n') == 'NO'\nassert solution('1\\n2\\n') == 'NO'\n"
    },
    {
        "number": 662,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"NO\"\nassert solution(\"1\\n1\") == \"YES\"\nassert solution(\"1\\n2\") == \"NO\"\nassert solution(\"1\\n2\\n3\") == \"YES\"\n"
    },
    {
        "number": 662,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('3\\n1\\n1\\n2') == 'YES'\nassert solution('2\\n1\\n2') == 'NO'\n\n\"\"\""
    },
    {
        "number": 662,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('3') == \"YES\"\nassert solution('2') == \"NO\"\nassert solution('3\\n1\\n2') == \"YES\"\nassert solution('2\\n1\\n2') == \"NO\"\nassert solution('2\\n3\\n1') == \"NO\"\n"
    },
    {
        "number": 662,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('1\\n1') == 'YES'\nassert solution('1\\n2\\n2') == 'NO'\nassert solution('2\\n1\\n2') == 'NO'\nassert solution('2\\n2\\n1') == 'YES'\nassert solution('2\\n2\\n2') == 'NO'\n"
    },
    {
        "number": 662,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('3') == 'YES'\nassert solution('2') == 'NO'\nassert solution('1') == 'YES'\nassert solution('1\\n1') == 'YES'\nassert solution('1\\n2\\n2') == 'NO'\n"
    },
    {
        "number": 662,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('4\\n1\\n1\\n2\\n') == 'YES'\nassert solution('3\\n1\\n1\\n2\\n') == 'NO'\nassert solution('1\\n1\\n2\\n') == 'YES'\nassert solution('2\\n1\\n2\\n') == 'NO'\nassert solution('2\\n1\\n3\\n') == 'YES'\n"
    },
    {
        "number": 662,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('2\\n1') == \"NO\"\nassert solution('2\\n1\\n1') == \"YES\"\nassert solution('2\\n2\\n1') == \"NO\"\nassert solution('2\\n2\\n2') == \"NO\"\nassert solution('2\\n2\\n1\\n1') == \"YES\"\n"
    },
    {
        "number": 663,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"1 0 0 0 4\") == \"1\"\nassert solution(\"2 0 0 0 4\") == \"1\"\nassert solution(\"4 5 6 5 6\") == \"0\"\nassert solution(\"4 5 6 0 4\") == \"0\"\nassert solution(\"1 1 1 4 4\") == \"3\"\n"
    },
    {
        "number": 663,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == expected\n\"\"\""
    },
    {
        "number": 663,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"1 0 0 0 4\") == \"1\"\nassert solution(\"2 0 0 0 4\") == \"1\"\nassert solution(\"4 5 6 5 6\") == \"0\"\nassert solution(\"1 1 1 4 4\") == \"3\"\nassert solution(\"4 1 3 2 5\") == \"2\"\n\n\n\"\"\"\n\nfrom math import *\n"
    },
    {
        "number": 663,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"2 0 0 0 4\") == \"1\"\nassert solution(\"1 1 1 4 4\") == \"3\"\nassert solution(\"4 5 6 5 6\") == \"0\"\nassert solution(\"2 1 1 2 2\") == \"0\"\nassert solution(\"3 3 3 3 3\") == \"0\"\n"
    },
    {
        "number": 663,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == ''\n"
    },
    {
        "number": 663,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == expected_output\n\"\"\"\n\n\"\"\"\ngcd\n\"\"\"\n\"\"\"\nBinary GCD\n\nThe GCD of two positive integers is the largest integer that divides each of them without remainder. For example, the GCD of 8 and 12 is 4.\n\nThe Euclidean algorithm is a method for determining the greatest common divisor (GCD) of two integers.\n\nGiven two positive integers a and b, find their GCD.\n\n\n-----Input-----\n\nThe first line of the input contains a single integer t, denoting the number of test cases. The description of t test cases follows.\n\nThe first line of each test case contains a single integer a and b.\n\n\n-----Output-----\n\nFor each test case, output a single line containing the GCD of a and b.\n\n\n-----Example-----\nInput:\n2\n2 3\n1 1\nOutput:\n1\n1\nInput:\n1\n8 7\nOutput:\n1\n\nInput:\n3\n1 1000000000\n1 1000000000\n1 1000000000\nOutput:\n1\n1\n1\n\nExplanation\nIn the first test case, GCD(a, b) = GCD(2, 3) = 1, which is the GCD of 2 and 3.\n\nIn the second test case, GCD(a, b) = GCD(1, 1000000000) = GCD(1, 1000000000) = 1.\n\nIn the third test case, GCD(a, b) = GCD(1, 1000000000) = 1.\n\n\"\"\"\n\"\"\"\nBinary GCD\n\nGiven two positive integers a and b, find their GCD.\n\n\n-----Input-----\n\nThe first line of the input contains a single integer t, denoting the number of test cases. The description of t test cases follows.\n\nThe first line of each test case contains a single integer a and b.\n\n\n-----Output-----\n\nFor each test case, output a single line containing the GCD of a and b.\n\n\n-----Example-----\nInput:\n2\n2 3\n1 1\nOutput:\n1\n1\n\"\"\"\n\"\"\"\nBinary GCD\n\nIn this problem, you are to write a function gcd(x, y) that takes two positive integers x and y and returns their GCD.\n\n\n-----Input-----\n\nThe first line of the input contains a single integer t, denoting the number of test cases. The description of t test cases follows.\n\nThe first line of each test case contains two space-separated integers x and y.\n\n\n-----Output-----\n\nFor each test case, output a single line containing the GCD of x and y.\n\n\n-----Example-----\nInput:\n2\n2 3\n1 1\nOutput:\n1\n1\n\"\"\"\n\"\"\"\nBinary GCD\n\nIn this problem, you are to write a function gcd(x, y) that takes two positive integers x and y and returns their GCD.\n\n\n-----Input-----\n\nThe first line of the input contains a single integer t, denoting the number of test cases. The description of t test cases follows.\n\nThe first line of each test case contains two space-separated integers x and y.\n\n\n-----Output-----\n\nFor each test case, output a single line containing the GCD of x and y.\n\n\n-----Example-----\nInput:\n2\n2 3\n1 1\nOutput:\n1\n1\n\"\"\"\n\"\"\"\nBinary GCD\n\nIn this problem, you are to write a function gcd(x, y) that takes two positive integers x and y and returns their GCD.\n\n\n-----Input-----\n\nThe first line of the input contains a single integer t, denoting the number of test cases. The description of t test cases follows.\n\nThe first line of each test case contains two space-separated integers x and y.\n\n\n-----Output-----\n\nFor each test case, output a single line containing the GCD of x and y.\n\n\n-----Example-----\nInput:\n2\n2 3\n1 1\nOutput:\n1\n1\n\"\"\"\n\"\"\"\nBinary GCD\n\nIn this problem, you are to write a function gcd(x, y) that takes two positive integers x and y and returns their GCD.\n\n\n-----Input-----\n\nThe first line of the input contains a single integer t, denoting the number of test cases. The description of t test cases follows.\n\nThe first line of each test case contains two space-separated integers x and y.\n\n\n-----Output-----\n\nFor each test case, output a single line containing the GCD of x and y.\n\n\n-----Example-----\nInput:\n2\n2 3\n1 1\nOutput:\n1\n1\n\"\"\"\n\"\"\"\nBinary GCD\n\nIn this problem, you are to write a function gcd(x, y) that takes two positive integers x and y and returns their GCD.\n\n\n-----Input-----\n\nThe first line of the input contains a single integer t, denoting the number of test cases. The description of t test cases follows.\n\nThe first line of each test case contains two space-separated integers x and y.\n\n\n-----Output-----\n\nFor each test case, output a single line containing the GCD of x and y.\n\n\n-----Example-----\nInput:\n2\n2 3\n1 1\nOutput:\n1\n1\n\"\"\"\n\"\"\"\nBinary GCD\n\nIn this problem, you are to write a function gcd(x, y) that takes two positive integers x and y and returns their GCD.\n\n\n-----Input-----\n\nThe first line of the input contains a single integer t, denoting the number of test cases. The description of t test cases follows.\n\nThe first line of each test case contains two space-separated integers x and y.\n\n\n-----Output-----\n\nFor each test case, output a single line containing the GCD of x and y.\n\n\n-----Example-----\nInput:\n2\n2 3\n1 1\nOutput:\n1\n1\n\"\"\"\n\"\"\"\nBinary GCD\n\nIn this problem, you are to write a function gcd(x, y) that takes two positive integers x and y and returns their GCD.\n\n\n-----Input-----\n\nThe first line of the input contains a single integer t, denoting the number of test cases. The description of t test cases follows.\n\nThe first line of each test case contains two space-separated integers x and y.\n\n\n-----Output-----\n\nFor each test case, output a single line containing the GCD of x and y.\n\n\n-----Example-----\nInput:\n2\n2 3\n1 1\nOutput:\n1\n1\n\"\"\"\n\"\"\"\nBinary GCD\n\nIn this problem, you are to write a function gcd(x, y) that takes two positive integers x and y and returns their GCD.\n\n\n-----Input-----\n\nThe first line of the input contains a single integer t, denoting the number of test cases. The description of t test cases follows.\n\nThe first line of each test case contains two space-separated integers x and y.\n\n\n-----Output-----\n\nFor each test case, output a single line containing the GCD of x and y.\n\n\n-----Example-----\nInput:\n2\n2 3\n1 1\nOutput:\n1\n1\n\"\"\"\n\"\"\"\nBinary GCD\n\nIn this problem, you are to write a function gcd(x, y) that takes two positive integers x and y and returns their GCD.\n\n\n-----Input-----\n\nThe first line of the input contains a single integer t, denoting the number of test cases. The description of t test cases follows.\n\nThe first line of"
    },
    {
        "number": 663,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\n\"4 0 0 0 4\") == \"1\"\nassert solution(\n\"1 1 1 4 4\") == \"0\"\nassert solution(\n\"4 5 6 5 6\") == \"0\"\nassert solution(\n\"4 5 6 1 2\") == \"3\"\nassert solution(\n\"3 3 4 3 4\") == \"0\"\n"
    },
    {
        "number": 663,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('2 0 0 0 4') == '1'\nassert solution('1 1 1 4 4') == '3'\nassert solution('4 5 6 5 6') == '0'\n\n\n\n'''\n"
    },
    {
        "number": 663,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''2 0 0 0 4''') == '1'\nassert solution('''1 1 1 4 4''') == '3'\nassert solution('''4 5 6 5 6''') == '0'\nassert solution('''2 -4 4 6 6''') == '-1'\nassert solution('''8 19 22 1 3''') == '2'\n"
    },
    {
        "number": 663,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('2 0 0 0 4') == '1'\nassert solution('1 1 1 4 4') == '3'\nassert solution('4 5 6 5 6') == '0'\nassert solution('2 1 2 3 3') == '1'\nassert solution('2 1 1 4 4') == '1'\n"
    },
    {
        "number": 664,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('2\\n2 1') == '1'\nassert solution('3\\n1 3 2') == '-1'\nassert solution('2\\n1 3 2') == '0'\nassert solution('3\\n2 3 1') == '-1'\nassert solution('2\\n2 1') == '0'\n"
    },
    {
        "number": 664,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''2\n2 1''') == '1'\nassert solution('''3\n1 3 2''') == '-1'\nassert solution('''4\n1 2 3 4''') == '0'\nassert solution('''5\n2 4 1 3 5''') == '3'\nassert solution('''6\n3 5 4 2 1 7''') == '4'\n"
    },
    {
        "number": 664,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 664,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('2\\n2 1') == '1'\nassert solution('3\\n1 3 2') == '-1'\nassert solution('2\\n1 2') == '0'\nassert solution('3\\n1 3 2') == '0'\nassert solution('2\\n3 1') == '2'\n"
    },
    {
        "number": 664,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1\\n1') == '0'\nassert solution('2\\n1 2') == '1'\nassert solution('3\\n1 3 2') == '-1'\nassert solution('4\\n1 3 2 4') == '1'\nassert solution('5\\n1 3 2 4 5') == '2'\n"
    },
    {
        "number": 664,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 664,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('1\\n2') == '0'\nassert solution('2\\n1') == '1'\nassert solution('2\\n2') == '2'\nassert solution('2\\n3') == '1'\nassert solution('2\\n4') == '1'\n"
    },
    {
        "number": 664,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 664,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1\\n2') == '1\\n'\nassert solution('2\\n1') == '-1\\n'\nassert solution('2\\n1 3') == '1\\n'\nassert solution('2\\n1 3 2') == '0\\n'\nassert solution('3\\n1 2 3') == '-1\\n'\n"
    },
    {
        "number": 664,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1\\n2') == '0'\nassert solution('1\\n3') == '1'\nassert solution('1\\n2 3') == '0'\nassert solution('1\\n2 1 3') == '1'\nassert solution('1\\n3 2 1') == '0'\n"
    },
    {
        "number": 665,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''7 11\n2 9 1 3 18 1 4\n4 35\n11 9 10 7\n1 8\n5\n''') == '2'\nassert solution('''7 11\n2 9 1 3 18 1 4\n4 35\n11 9 10 7\n1 8\n5\n''') == '1'\nassert solution('''7 11\n2 9 1 3 18 1 4\n4 35\n11 9 10 7\n1 8\n5\n''') == '0'\nassert solution('''7 11\n2 9 1 3 18 1 4\n4 35\n11 9 10 7\n1 8\n5\n''') == '1'\nassert solution('''7 11\n2 9 1 3 18 1 4\n4 35\n11 9 10 7\n1 8\n5\n''') == '0'\n"
    },
    {
        "number": 665,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\n    \"\"\"\n3\n7 11\n2 9 1 3 18 1 4\n4 35\n11 9 10 7\n1 8\n5\n\"\"\") == \"2\\n1\\n0\"\n\nassert solution(\n    \"\"\"\n1\n2\n\"\"\") == \"0\"\n\nassert solution(\n    \"\"\"\n2\n2\n\"\"\") == \"0\"\n\nassert solution(\n    \"\"\"\n1\n1\n\"\"\") == \"0\"\n\nassert solution(\n    \"\"\"\n2\n1\n\"\"\") == \"0\""
    },
    {
        "number": 665,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''7 11\n2 9 1 3 18 1 4\n4 35\n11 9 10 7\n1 8''') == '2'\nassert solution('''7 11\n2 9 1 3 18 1 4\n4 35\n11 9 10 7\n1 8''') == '1'\nassert solution('''7 11\n2 9 1 3 18 1 4\n4 35\n11 9 10 7\n1 8''') == '0'\nassert solution('''7 11\n2 9 1 3 18 1 4\n4 35\n11 9 10 7\n1 8''') == '0'\nassert solution('''7 11\n2 9 1 3 18 1 4\n4 35\n11 9 10 7\n1 8''') == '0'\n"
    },
    {
        "number": 665,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('inputs/testing_solution.txt') == '2\\n1\\n0'\nassert solution('inputs/testing_2.txt') == '1\\n0\\n0'\nassert solution('inputs/testing_3.txt') == '0\\n0\\n1'\nassert solution('inputs/testing_4.txt') == '1\\n0\\n1\\n0'\nassert solution('inputs/testing_5.txt') == '0\\n0\\n0\\n1'\n"
    },
    {
        "number": 665,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''3\n7 11\n2 9 1 3 18 1 4\n4 35\n11 9 10 7\n1 8\n5''') == '2'\n\nassert solution('''7\n10 11\n1 9 1 3 18 1 4\n1 35\n11 9 10 7\n1 8\n5''') == '1'\n\nassert solution('''14\n40 60\n
    },
    {
        "number": 665,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 665,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''3\n7 11\n2 9 1 3 18 1 4\n4 35\n11 9 10 7\n1 8\n5''') == '2'\nassert solution('''3\n7 11\n2 9 1 3 18 1 4\n4 35\n11 9 10 7\n1 8\n''') == '1'\nassert solution('''3\n7 11\n2 9 1 3 18 1 4\n4 35\n11 9 10 7\n1 8\n''') == '0'\nassert solution('''3\n5 5\n3 9 4 1\n2 9 1\n1 8\n5''') == '0'\nassert solution('''3\n5 5\n3 9 4 1\n2 9 1\n1 8\n''') == '0'\n"
    },
    {
        "number": 665,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 665,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''7 11\n2 9 1 3 18 1 4\n4 35\n11 9 10 7\n1 8\n5\n''') == '2\\n1\\n0'\nassert solution('''7 11\n2 9 1 3 18 1 4\n4 35\n11 9 10 7\n1 8\n5\n''') == '2\\n1\\n0'\nassert solution('''7 11\n2 9 1 3 18 1 4\n4 35\n11 9 10 7\n1 8\n5\n''') == '2\\n1\\n0'\nassert solution('''7 11\n2 9 1 3 18 1 4\n4 35\n11 9 10 7\n1 8\n5\n''') == '2\\n1\\n0'\nassert solution('''7 11\n2 9 1 3 18 1 4\n4 35\n11 9 10 7\n1 8\n5\n''') == '2\\n1\\n0'\n"
    },
    {
        "number": 665,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''2 10\n2 9 1 3 18 1 4''') == '2'\nassert solution('''2 10\n2 9 1 3 18 1 4''') == '0'\nassert solution('''7 11\n2 9 1 3 18 1 4''') == '1'\nassert solution('''7 11\n2 9 1 3 18 1 4''') == '1'\nassert solution('''5\n35\n11 9 10 7''') == '1'\n"
    },
    {
        "number": 666,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''3''') == '2'\nassert solution('''5''') == '2'\nassert solution('''10''') == '4'\nassert solution('''55''') == '10'\nassert solution('''56''') == '1'"
    },
    {
        "number": 666,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('3') == '2'\nassert solution('5') == '2'\nassert solution('10') == '4'\nassert solution('55') == '10'\nassert solution('56') == '1'\n\nprint('test ok')\n"
    },
    {
        "number": 666,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1\\n') == '1'\nassert solution('1\\n1\\n') == '1'\nassert solution('1\\n1\\n2\\n') == '1'\nassert solution('1\\n1\\n2\\n1\\n') == '1'\nassert solution('1\\n1\\n2\\n1\\n2\\n') == '1'\n"
    },
    {
        "number": 666,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''3''') == '2'\nassert solution('''5''') == '2'\nassert solution('''10''') == '4'\nassert solution('''55''') == '10'\nassert solution('''56''') == '1'\n"
    },
    {
        "number": 666,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''3''') == '2'\nassert solution('''5''') == '2'\nassert solution('''10''') == '4'\nassert solution('''55''') == '10'\nassert solution('''56''') == '1'\nprint('All set? Click \"Check\" to earn cool rewards!')"
    },
    {
        "number": 666,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('12') == '1'\nassert solution('123') == '12'\nassert solution('1234') == '123'\n"
    },
    {
        "number": 666,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''3''') == '2'\nassert solution('''5''') == '2'\nassert solution('''10''') == '4'\nassert solution('''55''') == '10'\nassert solution('''56''') == '1'"
    },
    {
        "number": 666,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1\\n') == '1\\n'\nassert solution('2\\n') == '1\\n'\nassert solution('3\\n') == '2\\n'\nassert solution('4\\n') == '3\\n'\nassert solution('5\\n') == '4\\n'\n"
    },
    {
        "number": 666,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('12345678910') == '9'\nassert solution('123456789') == '2'\nassert solution('100') == '1'\nassert solution('555') == '5'\nassert solution('0') == '0'\n"
    },
    {
        "number": 666,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '1'\nassert solution('5') == '2'\n"
    },
    {
        "number": 667,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('3') == 2\nassert solution('3\\n0 1 1\\n1 0 4\\n1 4 0') == 2\nassert solution('4\\n0 1 2 3\\n1 0 4 5\\n2 4 0 6\\n3 5 6 0') == 5\nassert solution('4\\n0 1 2 3\\n1 0 4 5\\n2 4 0 6\\n3 5 6 0') == 5\nassert solution('4\\n0 1 2 3\\n1 0 4 5\\n2 4 0 6\\n3 5 6 0') == 5\n"
    },
    {
        "number": 667,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"3\\n0 1 1\\n1 0 4\\n1 4 0\") == 2\nassert solution(\"4\\n0 1 2 3\\n1 0 4 5\\n2 4 0 6\\n3 5 6 0\") == 5\n\n\n\n\"\"\"\n"
    },
    {
        "number": 667,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"0 1 1\") == \"2\"\nassert solution(\"0 1 4\") == \"5\"\nassert solution(\"0 1 4 1\") == \"5\"\nassert solution(\"0 1 4 1 1\") == \"5\"\nassert solution(\"0 1 4 1 1 1\") == \"5\"\n"
    },
    {
        "number": 667,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdin\n\"\"\"\n"
    },
    {
        "number": 667,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''0 1 1\n1 0 4\n1 4 0\n''') == 2\nassert solution('''0 1 2 3\n1 0 4 5\n2 4 0 6\n3 5 6 0\n''') == 5"
    },
    {
        "number": 667,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''0 1 1\n1 0 4\n1 4 0''') == 2\nassert solution('''0 1 2 3\n1 0 4 5\n2 4 0 6\n3 5 6 0''') == 5\nassert solution('''0 1 2 3\n1 0 4 0\n2 4 0 0\n3 5 6 0''') == 5\nassert solution('''0 1 2 3\n1 0 4 1\n2 4 0 5\n3 5 6 0''') == 2\nassert solution('''0 1 2 3\n1 0 4 1\n2 4 0 1\n3 5 6 0''') == 2\n"
    },
    {
        "number": 667,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == \"1\\n2\\n3\"\n\n'''\n'''\n'''\n\n'''\n'''\n\n'''\n\n'''\n"
    },
    {
        "number": 667,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('0 1 1\\n1 0 4\\n1 4 0') == 2\nassert solution('3\\n0 1 1\\n1 0 4\\n1 4 0\\n0 1 1') == 5\n\nprint(\"All set? Click 'Check' to earn cool rewards!\")\n"
    },
    {
        "number": 667,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('0 1 1') == 2\nassert solution('1 0 4\\n1 4 0') == 2\nassert solution('0\\n1\\n1') == 2\nassert solution('0 1 2 3\\n1 0 4 5\\n2 4 0 6') == 5\nassert solution('0 1 2 3\\n1 0 4 5\\n2 4 0 6\\n3 5 6 0') == 5\n"
    },
    {
        "number": 667,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''0 1 1''') == 2\nassert solution('''1 0 4''') == 2\nassert solution('''1 4 0''') == 2\nassert solution('''0 1 2 3''') == 2\nassert solution('''1 0 4 5''') == 5\n"
    },
    {
        "number": 668,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''4\n1 2 1 0''') == '3'\nassert solution('''6\n2 0 1 3 2 0''') == '6'\nassert solution('''3\n0 2 2''') == '-1'\nassert solution('''6\n0 2 0 1 3 2 0''') == '6'\nassert solution('''6\n2 0 1 3 2 0''') == '6'\n"
    },
    {
        "number": 668,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 2 1 0\\n\") == \"3\\n1 2\\n2 4\\n2 3\"\nassert solution(\"6\\n2 0 1 3 2 0\\n\") == \"-1\"\nassert solution(\"3\\n0 2 2\\n\") == \"-1\"\nassert solution(\"2\\n0 1\\n\") == \"-1\"\nassert solution(\"2\\n0 0\\n\") == \"-1\"\n"
    },
    {
        "number": 668,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''4\n1 2 1 0\n''') == '3'\n\nassert solution('''6\n2 0 1 3 2 0\n''') == '6'\n"
    },
    {
        "number": 668,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"\"\"4\n1 2 1 0\n\"\"\") == \"3\"\nassert solution(\"\"\"6\n2 0 1 3 2 0\n\"\"\") == \"6\"\nassert solution(\"\"\"3\n0 2 2\n\"\"\") == \"-1\"\nassert solution(\"\"\"4\n0 2 2 0\n\"\"\") == \"-1\"\nassert solution(\"\"\"6\n2 0 1 3 2 0\n\"\"\") == \"6\"\n"
    },
    {
        "number": 668,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 2 1 0\\n\") == \"-1\"\nassert solution(\"6\\n2 0 1 3 2 0\\n\") == \"6\\n1 3\\n3 4\\n1 2\\n4 5\\n5 6\\n4 6\"\nassert solution(\"3\\n0 2 2\\n\") == \"-1\"\nassert solution(\"0\\n2 0 2\\n\") == \"-1\"\n\n\n-----Best Practice-----"
    },
    {
        "number": 668,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('4\\n1 2 1 0\\n') == '3\\n1 2\\n2 4\\n2 3'\nassert solution('6\\n2 0 1 3 2 0\\n') == '6\\n1 3\\n3 4\\n1 2\\n4 5\\n5 6\\n4 6'\nassert solution('3\\n0 2 2\\n') == '-1'\n\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 668,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 2 1 0\\n\") == \"3\"\nassert solution(\"6\\n2 0 1 3 2 0\\n\") == \"6\"\nassert solution(\"3\\n0 2 2\\n\") == \"-1\"\n\n\n\n\"\"\"\n"
    },
    {
        "number": 668,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(input_data) == output_data\n"
    },
    {
        "number": 668,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''4\n1 2 1 0''') == '3'\nassert solution('''6\n2 0 1 3 2 0''') == '6'\nassert solution('''3\n0 2 2''') == '-1'\nassert solution('''1\n1''') == '1'\nassert solution('''5\n3 2 1 1 2''') == '6'\n"
    },
    {
        "number": 668,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1 2 1 0') == '3'\nassert solution('2 0 1 3 2 0') == '6'\nassert solution('2 2 2 0 0 0 0') == '-1'\nassert solution('2 0 1 3 2 0') == '6'\nassert solution('2 2 2 0 0 0 0') == '-1'\n"
    },
    {
        "number": 669,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == ''\n\n\n\"\"\"\n"
    },
    {
        "number": 669,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == answer_01\n\"\"\"\n\nimport sys\nsys.path.append('../../../software/models/')\nimport numpy as np\nfrom itertools import combinations\n\nfrom util.data_structures import ListNode\nfrom util.algorithms import dynamic_mod_product_sum"
    },
    {
        "number": 669,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == expected\n\"\"\"\n"
    },
    {
        "number": 669,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('4 4\\n5 2 4 1\\n') == '3'\nassert solution('3 20\\n199 41 299\\n') == '19'\n\n\n-----\n\n\"\"\"\n\nn, m = map(int, stdin.split('\\n')[0].split())\na = list(map(int, stdin.split('\\n')[1].split()))\ns = 0\nmod = 10 ** 9 + 7\nfor i in range(n):\n    s += (a[i] * (m - pow(2, i, mod))) % mod\nprint(s)\n"
    },
    {
        "number": 669,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('4 4\\n5 2 4 1\\n') == '3'\nassert solution('3 20\\n199 41 299\\n') == '19'\n"
    },
    {
        "number": 669,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1\\n4\\n5\\n2') == '3'\nassert solution('1\\n1\\n1\\n1') == '4'\nassert solution('1\\n1\\n1\\n1') == '4'\nassert solution('1\\n1\\n1\\n1') == '4'\nassert solution('1\\n1\\n1\\n1') == '4'\n"
    },
    {
        "number": 669,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('4 4\\n5 2 4 1') == '3'\nassert solution('3 20\\n199 41 299') == '19'\n\n\n\n\"\"\"\n"
    },
    {
        "number": 669,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1\\n1') == '1'\nassert solution('2\\n2') == '2'\nassert solution('1\\n1\\n1\\n1') == '1'\nassert solution('2\\n2\\n2\\n2') == '2'\nassert solution('1\\n3\\n2\\n2') == '2'\n"
    },
    {
        "number": 669,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('2\\n2\\n1\\n1\\n1') == '2'\nassert solution('2\\n2\\n1\\n3\\n1\\n1') == '1'\nassert solution('2\\n2\\n1\\n1\\n1') == '1'\nassert solution('2\\n2\\n1\\n3\\n1\\n2') == '2'\nassert solution('2\\n2\\n1\\n2\\n1\\n2') == '3'\n"
    },
    {
        "number": 669,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1\\n4 2 4 1\\n1 2 1 3') == '3'\nassert solution('2\\n1 2\\n2 3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20') == '5'\nassert solution('1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n"
    },
    {
        "number": 670,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n\n\"\"\"\nEXPLANATION\n\nThe origin is in the black dot. The more you put on the x-axis, the more distant you can be.\n\nThe distance is the Manhattan distance:\n\n|a - b| = \\sqrt{(a^2 + b^2) / 2} = \\sqrt{(3^2 + 3^2) / 2} = 2\n\n|a - b| = \\sqrt{(9 - 3)^2 / 2} = \\sqrt{5} = 2.4\n\n\nThe more you put on the y-axis, the more distant you can be.\n\nThe distance is the Manhattan distance:\n\n|a - b| = \\sqrt{(a^2 + b^2) / 2} = \\sqrt{(3^2 + 9) / 2} = 4.4\n\n\nThe more you put on the x-axis, the more distant you can be.\n\nThe distance is the Manhattan distance:\n\n|a - b| = \\sqrt{(a^2 + b^2) / 2} = \\sqrt{(9 - 3)^2 / 2} = 6.16\n\n\"\"\"\n\nfrom math import sqrt"
    },
    {
        "number": 670,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 670,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''1 1 -3''') == '4.2426406871'\nassert solution('''0 3 3 0''') == '6.1622776602'\n'''\n'''\n"
    },
    {
        "number": 670,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1 1 -3') == '4.2426406871'\nassert solution('0 3 3 0') == '6.1622776602'\nassert solution('3 1 -9') == '6.1622776602'\nassert solution('0 3 3 -1') == '6.1622776602'\nassert solution('3 1 -0') == '4.2426406871'\n"
    },
    {
        "number": 670,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"-3 1 -9\") == \"6.1622776602\"\nassert solution(\"3 1 -9\") == \"4.2426406871\"\nassert solution(\"3 -1 -9\") == \"1.1192806262\"\nassert solution(\"0 3 3 -1\") == \"1.1192806262\"\nassert solution(\"1 0 -3\") == \"2.8184445191\"\n"
    },
    {
        "number": 670,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''1 1 -3''') == '4.2426406871'\nassert solution('''3 1 -9''') == '6.1622776602'\nassert solution('''1 1 -9''') == '7.86813665901'\n"
    },
    {
        "number": 670,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"-1 1 -3\") == \"4.2426406871\"\nassert solution(\"0 3 3 0\") == \"6.1622776602\"\nassert solution(\"3 1 -9\") == \"6.1622776602\"\nassert solution(\"0 3 3 -1\") == \"6.1622776602\"\nassert solution(\"-1 1 -3\") == \"4.2426406871\"\n"
    },
    {
        "number": 670,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1 1 -3') == '4.2426406871'\nassert solution('0 3 3 0') == '6.1622776602'\nassert solution('3 1 -9') == '6.1622776602'\nassert solution('3 1 0') == '4.2426406871'\n"
    },
    {
        "number": 670,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == expected\n\"\"\"\n"
    },
    {
        "number": 670,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\nfrom sys import stdin, stdout\n\na, b, c = map(int, stdin.readline().strip().split(\" \"))\nx_1, y_1, x_2, y_2 = map(int, stdin.readline().strip().split(\" \"))\n\nx_1 -= a\nx_2 -= a\ny_1 -= b\ny_2 -= b\n\nA = (x_1, y_1)\nB = (x_2, y_2)\n\nmin_dist = abs(x_1 - x_2) + abs(y_1 - y_2)\n\nfor c in range(-10 ** 9, 10 ** 9):\n    if (a * c + b * c + c) == 0:\n        dist = abs(A[0] - B[0]) + abs(A[1] - B[1])\n        if dist < min_dist:\n            min_dist = dist\nprint(float(min_dist) / max(1, abs(b)))\n"
    },
    {
        "number": 671,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdin\n\"\"\"\n"
    },
    {
        "number": 671,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''3''') == '3'\nassert solution('''11''') == '0'\nassert solution('''1111''') == '0'\nassert solution('''1''') == '1'\nassert solution('''1000000000''') == '0'\n"
    },
    {
        "number": 671,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('123456789101112131415') == '3'\nassert solution('123456789101112131415') == '3'\nassert solution('123456789101112131415') == '0'\nassert solution('123456789101112131415') == '0'\nassert solution('123456789101112131415') == '0'\n"
    },
    {
        "number": 671,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('3') == '3'\nassert solution('11') == '0'\n"
    },
    {
        "number": 671,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''3''') == '3'\nassert solution('''123456789101112131415''') == '3'\nassert solution('''1''') == '1'\nassert solution('''1123456789101112131415''') == '1'\nassert solution('''111111111111111111111111111111111111''') == '1'\n"
    },
    {
        "number": 671,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"123456789101112131415...\") == \"3\"\nassert solution(\"11\") == \"0\"\n\n\"\"\"\n\nfrom itertools import count\n"
    },
    {
        "number": 671,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('3') == '3'\nassert solution('11') == '0'\n\n\n\"\"\"\n"
    },
    {
        "number": 671,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(input()) == output(input())\n"
    },
    {
        "number": 671,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('3') == '3'\nassert solution('11') == '0'\nassert solution('2') == '2'\nassert solution('1001') == '1'\nassert solution('10001') == '1'\n"
    },
    {
        "number": 671,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''3''') == '3'\nassert solution('''11''') == '0'\nassert solution('''123456789101112131415''') == '3'\nassert solution('''9123456789101112131415''') == '3'\nassert solution('''1234''') == '4'\n"
    },
    {
        "number": 672,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('21 5') == '2'\nassert solution('9435152 272') == '282'\nassert solution('10 10') == 'infinity'\nassert solution('10000000001 100000000000') == '100'\nassert solution('1000000000000 1000000000') == '1'\n"
    },
    {
        "number": 672,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(input()) == input()\n"
    },
    {
        "number": 672,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == \"2\""
    },
    {
        "number": 672,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('21 5') == '2'\nassert solution('9435152 272') == '282'\nassert solution('10 10') == 'infinity'\n\n\n\"\"\"\n"
    },
    {
        "number": 672,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('21 5') == '2'\nassert solution('9435152 272') == '282'\nassert solution('10 10') == 'infinity'\nassert solution('7334 923 479 1 165') == '0'\nassert solution('23 35 39 123 21 222 17 21') == '3'\n"
    },
    {
        "number": 672,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('21 5') == '2'\nassert solution('9435152 272') == '282'\nassert solution('10 10') == 'infinity'\nassert solution('101101') == '2'\nassert solution('1011001') == '3'\n"
    },
    {
        "number": 672,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('21 5') == '2'\nassert solution('9435152 272') == '282'\nassert solution('10 10') == 'infinity'\n\n\n\n-----Hint-----\n\nUse mathematical logic to figure out how to solve the Modular Equation. Take a look at the below link for more information.\n\nhttps://en.wikipedia.org/wiki/Modular_arithmetic\n\n\n\"\"\""
    },
    {
        "number": 672,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == answer\n'''\n"
    },
    {
        "number": 672,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('21 5') == '2'\nassert solution('9435152 272') == '282'\nassert solution('10 10') == 'infinity'\n\n\n\n##\n"
    },
    {
        "number": 672,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(input()) == input()\n\n\"\"\"\n\nn,k = map(int,input().split())\n"
    },
    {
        "number": 673,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('5 3') == '6'\nassert solution('25 13') == '26'\nassert solution('26 13') == '39'\n"
    },
    {
        "number": 673,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 673,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('3 3') == '4'\nassert solution('5 3') == '6'\nassert solution('25 13') == '26'\nassert solution('26 13') == '39'\nassert solution('10 16') == '17'\n"
    },
    {
        "number": 673,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\n\"5 3\") == \"6\"\nassert solution(\n\"25 13\") == \"26\"\nassert solution(\n\"26 13\") == \"39\"\nassert solution(\n\"101 98\") == \"110\"\nprint(\"All test cases passed.\")\n\n\"\"\""
    },
    {
        "number": 673,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('5 3') == '6'\nassert solution('25 13') == '26'\nassert solution('26 13') == '39'\nassert solution('4 10') == '5'\nassert solution('15 18') == '16'\n"
    },
    {
        "number": 673,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\n'''5 3'''\n) == '6'\n\nassert solution(\n'''25 13'''\n) == '26'\n\nassert solution(\n'''26 13'''\n) == '39'\n"
    },
    {
        "number": 673,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(input()) == output\n"
    },
    {
        "number": 673,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('') == None\nassert solution(' ') == None\nassert solution('1 2') == None\nassert solution('2 3') == None\nassert solution('2 3') == None\n"
    },
    {
        "number": 673,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''5 3''') == '6'\nassert solution('''25 13''') == '26'\nassert solution('''26 13''') == '39'\nassert solution('''26 37''') == '36'\nassert solution('''27 36''') == '34'\n"
    },
    {
        "number": 673,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 674,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('mail\\nai\\nlru\\ncf\\n') == 'cfmailru\\n'\nassert solution('kek\\npreceq\\ncheburek\\n') == 'kek\\n'\nassert solution('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 674,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('kek\\npreceq\\ncheburek\\n') == 'cfmailru'\nassert solution('ai\\nlru\\ncf\\n') == 'cfmailru'\nassert solution('aabab\\naaaa\\nbbbbb\\nbbbbb\\nbbbbb\\nbbbbb\\nbbbbb\\n') == 'aabab'\nassert solution('aabab\\naaaa\\naaab\\nbbbbb\\nbbbbb\\nbbbbb\\nbbbbb\\n') == 'aabab'\nassert solution('aaaa\\nbbbb\\ncccc\\ndddd\\nbbbb\\ncccc\\naaa\\nbbbb\\ncccc\\ndddd\\nbbbb\\ncccc\\naaa\\nbbbb\\ncccc\\ndddd\\nbbbb\\ncccc\\n') == 'aabab'\n"
    },
    {
        "number": 674,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"kek\") == \"kek\"\nassert solution(\"preceq\") == \"preceq\"\nassert solution(\"cheburek\") == \"cheburek\"\nassert solution(\"ai\") == \"ai\"\nassert solution(\"mail\") == \"ail\"\n"
    },
    {
        "number": 674,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''4\nai\nlru\ncf\n''') == 'cfmailru'\n\nassert solution('''3\nkek\npreceq\ncheburek\n''') == 'NO'\n\nassert solution('''2\nmail\nai\n''') =='mailai'\n\nassert solution('''1\nabc\n''') == 'abc'\n\nassert solution('''0\n''') == 'NO'"
    },
    {
        "number": 674,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('kek') == 'kek'\nassert solution('preceq') == 'preceq'\nassert solution('cheburek') == 'cheburek'\n\n\n-----Passed-----\n\nThe first two tests passed.\n\nThis is the same as the one from the third challenge, which gave the wrong answer. I don't know why, but it was a very confusing test.\n\nThe two remaining tests passed:\n-1\n\nThe only test that failed\n\n-1\n\n\n-----My Solution-----"
    },
    {
        "number": 674,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"abcd\") == \"NO\"\nassert solution(\"abcd\") == \"NO\"\nassert solution(\"ac\") == \"NO\"\nassert solution(\"aeiou\") == \"NO\"\nassert solution(\"abcdefgh\") == \"NO\"\n"
    },
    {
        "number": 674,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == \"\"\n\n\"\"\"\n"
    },
    {
        "number": 674,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''\n3\nmail\nai\nlru\ncf\n\n''') == \"cfmailru\"\nassert solution('''\n4\nkek\npreceq\ncheburek\n''') == \"NO\"\nassert solution('''\n5\nabbbc\ncbcaa\nbabab\nbbbbb\n''') == \"bbbbb\"\nassert solution('''\n4\nab\na\nb\nab\n''') == \"NO\"\nassert solution('''\n2\nab\na\n''') == \"NO\"\n"
    },
    {
        "number": 674,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"mail\") == \"mailrucf\"\nassert solution(\"ai\") == \"ailruf\"\nassert solution(\"lru\") == \"lur\"\nassert solution(\"cf\") == \"cfmailru\"\nassert solution(\"kek\") == \"keke\"\n"
    },
    {
        "number": 674,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdin\n\n\n\"\"\"\n"
    },
    {
        "number": 675,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"\"\"1 8 3\n10\n\"\"\") == \"3\"\nassert solution(\"\"\"2 10 1\n5 8\n\"\"\") == \"1\"\nassert solution(\"\"\"1 1 3\n10\n\"\"\") == \"-\"1\"\nassert solution(\"\"\"2 10 1\n2 9\n\"\"\") == \"2\"\nassert solution(\"\"\"2 10 1\n2 7\n\"\"\") == \"1\"\n"
    },
    {
        "number": 675,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('1 8 3\\n10') == '3'\nassert solution('1 2 3\\n10') == '1'\nassert solution('1 1 3\\n10') == '-1'\nassert solution('1 1 1\\n10') == '1'\nassert solution('2 10 1\\n5 8') == '3'\n"
    },
    {
        "number": 675,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''1 2 3\n1\n''') == '3'\nassert solution('''2 10 1\n5 8\n''') == '1'\nassert solution('''1 1 3\n10\n''') == '-1'\n"
    },
    {
        "number": 675,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 675,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''1 8 3''') == '3'\nassert solution('''1 10 1''') == '-1'\nassert solution('''2 10 1''') == '1'\nassert solution('''2 10 3''') == '3'\nassert solution('''2 10 4''') == '-1'\n"
    },
    {
        "number": 675,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdin\n\"\"\"\n\n\"\"\"\n    (n - 1) = (t - 1) * (r - 1)\n    n = r * (t - 1)\n\"\"\"\n\nfrom sys import stdin, stdout\n\nn, t, r = map(int, stdin.readline().split())\nw = list(map(int, stdin.readline().split()))\n\nw = [(x - 1) % t + 1 for x in w]\nw.sort()"
    },
    {
        "number": 675,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\n'''1 8 3\n10\n'''\n) == '3'\n\nassert solution(\n'''2 10 1\n5 8\n'''\n) == '1'\n\nassert solution(\n'''2 1 1\n2\n'''\n) == '-1'\n\nassert solution(\n'''1 1 3\n10\n'''\n) == '-1'\n\nassert solution(\n'''1 3 1\n1\n'''\n) == '-1'"
    },
    {
        "number": 675,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''1 8 3''') == '3'\nassert solution('''10\n10\n10''') == '3'\nassert solution('''2 10 1''') == '1'\nassert solution('''1 1 3''') == '-1'\nassert solution('''1 1 3''') == '-1'\n"
    },
    {
        "number": 675,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1 8 3\\n10\\n') == '3'\nassert solution('1 1 3\\n10\\n') == '-1'\nassert solution('2 10 1\\n5 8\\n') == '1'\nassert solution('2 10 1\\n5 8\\n') == '-1'\n\n\n\n\"\"\"\n"
    },
    {
        "number": 675,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1 8 3') == '3'\nassert solution('2 10 1') == '1'\nassert solution('1 1 3') == '-1'\nassert solution('3 4 4') == '4'\nassert solution('4 4 2') == '3'\n"
    },
    {
        "number": 676,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''2\n1\n1\n''') == \"YES\"\nassert solution('''4\n1\n2\n2\n3\n''') == \"YES\"\nassert solution('''3\n1\n1\n1\n''') == \"NO\"\nassert solution('''2\n1\n1\n''') == \"NO\"\nassert solution('''3\n1\n2\n2\n''') == \"YES\"\n'''\n"
    },
    {
        "number": 676,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\n'''2''') == \"YES\"\n\nassert solution(\n'''3''') == \"NO\"\n\nassert solution(\n'''1''') == \"YES\"\n\nassert solution(\n'''4''') == \"YES\"\n\nassert solution(\n'''3\n1\n2\n2\n3''') == \"NO\""
    },
    {
        "number": 676,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == 'YES'\nassert solution(stdin) == 'NO'\nassert solution(stdin) == 'YES'\nassert solution(stdin) == 'YES'\nassert solution(stdin) == 'NO'\n"
    },
    {
        "number": 676,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1\\n1\\n1\\n1') == 'YES'\nassert solution('2\\n1\\n1') == 'YES'\nassert solution('2\\n2\\n1') == 'NO'\nassert solution('3\\n1\\n1\\n1') == 'YES'\nassert solution('3\\n1\\n2\\n1') == 'NO'\n"
    },
    {
        "number": 676,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1\\n1\\n1\\n1') == 'YES'\nassert solution('1\\n1\\n1\\n1\\n1') == 'NO'\nassert solution('1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1') == 'NO'\nassert solution('3\\n1\\n1\\n1') == 'YES'\nassert solution('2\\n1\\n1\\n1') == 'YES'\n"
    },
    {
        "number": 676,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''1\n1\n1\n''') == 'YES'\n\nassert solution('''2\n1\n1\n''') == 'NO'\n\nassert solution('''3\n1\n2\n3\n''') == 'NO'\n\nassert solution('''4\n1\n2\n2\n3\n''') == 'YES'\n\nassert solution('''5\n1\n2\n3\n4\n5\n''') == 'NO'"
    },
    {
        "number": 676,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == \"NO\"\n\n\"\"\""
    },
    {
        "number": 676,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"YES\"\nassert solution(\"2\") == \"NO\"\nassert solution(\"1\\n1\") == \"YES\"\nassert solution(\"1\\n1\\n2\") == \"YES\"\n"
    },
    {
        "number": 676,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('2') == 'YES'\nassert solution('1') == 'NO'\nassert solution('1\\n1') == 'YES'\nassert solution('1\\n2\\n2') == 'NO'\nassert solution('1\\n2\\n3\\n3') == 'YES'\n"
    },
    {
        "number": 676,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\n'''2'''\n) == 'YES'\n\nassert solution(\n'''3'''\n) == 'NO'\n\nassert solution(\n'''4'''\n) == 'YES'\n\nassert solution(\n'''5'''\n) == 'YES'\n\nassert solution(\n'''6'''\n) == 'NO'"
    },
    {
        "number": 677,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('2\\n2\\n2\\n1\\n1\\n') == '2'\nassert solution('2\\n2\\n2\\n1\\n1\\n') == '2'\nassert solution('2\\n2\\n2\\n1\\n1\\n') == '2'\nassert solution('2\\n2\\n2\\n1\\n1\\n') == '2'\nassert solution('2\\n2\\n2\\n1\\n1\\n') == '2'\n"
    },
    {
        "number": 677,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('1 1 1') == '1'\nassert solution('1 2 4') == '2'\nassert solution('1 2 1') == '1'\nassert solution('1 3 3') == '2'\nassert solution('1 3 1') == '1'\n"
    },
    {
        "number": 677,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('3\\n2 4 2\\n5 10 4\\n3 10 1\\n1 2 3\\n4 6 5') == '6\\n4\\n1\\n3\\n10'\nassert solution('3\\n2 4 2\\n5 10 4\\n3 10 1\\n1 2 3\\n4 6 5\\n4 4 4') == '6\\n4\\n1\\n3\\n10'\nassert solution('3\\n2 4 2\\n5 10 4\\n3 10 1\\n1 2 3\\n4 6 5\\n6 6 6') == '6\\n4\\n1\\n3\\n10'\nassert solution('3\\n2 4 2\\n5 10 4\\n3 10 1\\n1 2 3\\n4 6 5\\n4 4 4\\n4 4 4\\n4 4 4') == '6\\n4\\n1\\n3\\n10'\nassert solution('3\\n2 4 2\\n5 10 4\\n3 10 1\\n1 2 3\\n4 6 5\\n6 6 6\\n6 6 6') == '6\\n4\\n1\\n3\\n10'\n"
    },
    {
        "number": 677,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('') == None\nassert solution('1') == 1\nassert solution('1 2 3') == 3\nassert solution('10 10 10') == 10\nassert solution('1 2 3') == 3\n"
    },
    {
        "number": 677,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 677,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 677,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"1\\n1 1 1\\n\") == \"2\"\nassert solution(\"1\\n1 2 1\\n\") == \"2\"\nassert solution(\"2\\n1 2 1\\n\") == \"3\"\nassert solution(\"2\\n1 3 1\\n\") == \"4\"\nassert solution(\"2\\n1 1 1\\n\") == \"1\"\n"
    },
    {
        "number": 677,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('2 4 2') == '6'\nassert solution('5 10 4') == '4'\nassert solution('3 10 1') == '1'\nassert solution('1 2 3') == '10'\nassert solution('4 6 5') == '3'\n"
    },
    {
        "number": 677,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1\\n2 3 4\\n5 10 4\\n3 10 1\\n1 2 3\\n4 6 5') == '6\\n4\\n1\\n3\\n10'\nassert solution('5\\n2 4 2\\n5 10 4\\n3 10 1\\n1 2 3\\n4 6 5\\n0\\n9\\n10\\n9\\n9\\n10\\n10\\n10\\n9\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n9\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n9\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n9\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n9\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10"
    },
    {
        "number": 677,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1\\n2\\n4\\n7\\n8') == '7'\nassert solution('1\\n2\\n4\\n7\\n8\\n9') == '5'\nassert solution('1\\n2\\n3\\n4\\n5\\n6') == '5'\nassert solution('3\\n2\\n1') == '2'\nassert solution('6\\n1\\n2\\n3\\n4\\n5') == '5'\n"
    },
    {
        "number": 678,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"0\") == 0\nassert solution(\"0 0 0\") == 0\nassert solution(\"0 0 1\") == 0.333333\nassert solution(\"0 0 2\") == 0.66666666\nassert solution(\"0 0 3\") == 0.66666666\n"
    },
    {
        "number": 678,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('') is None\nassert solution('3') == '1'\nassert solution('0') == '1'\nassert solution('0 1') == '1'\nassert solution('1 2') == '2'\n"
    },
    {
        "number": 678,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''\n0\n1\n1\n''') == '0.666667'\nassert solution('''\n0\n0\n1\n''') == '1'\nassert solution('''\n1\n0\n1\n''') == '0.5'\nassert solution('''\n1\n1\n1\n''') == '0.333333'\nassert solution('''\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n"
    },
    {
        "number": 678,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('0 0 0') == '0.0'\nassert solution('0 0 0') == '0.0'\nassert solution('0 0 0') == '0.0'\nassert solution('0 0 0') == '0.0'\nassert solution('0 0 0') == '0.0'\n"
    },
    {
        "number": 678,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('3') == 0.666667\nassert solution('0') == 0.0\nassert solution('1') == 0.5\nassert solution('2') == 0.333333\nassert solution('3') == 0.16667\n"
    },
    {
        "number": 678,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('0\\n1\\n1\\n') == '0.666667'\nassert solution('1\\n1\\n1\\n') == '0.5'\nassert solution('1\\n1\\n2\\n') == '0.333333'\nassert solution('1\\n2\\n1\\n') == '0.5'\nassert solution('1\\n2\\n3\\n') == '0.16667'\n"
    },
    {
        "number": 678,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n\"0\\n\"\n"
    },
    {
        "number": 678,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''0\n1\n2\n''') == '0.333333'\nassert solution('''0\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n276\n277\n278\n279\n280\n281\n282\n283\n284\n285\n286\n287\n288\n289\n290\n291\n292\n293\n294\n295\n296\n297\n298\n299\n300\n301\n302\n303\n304\n305\n306\n307\n308\n309\n310\n311\n312\n313\n314\n315\n316\n317\n318\n319\n320\n321\n322\n323\n324\n325\n326\n327\n328\n329\n330\n331\n332\n333\n334\n335\n336\n337\n338\n339\n340\n341\n342\n343\n344\n345\n346\n347\n348\n349\n350\n351\n352\n353\n354\n355\n356\n357\n358\n359\n360\n361\n362\n363\n364\n365\n366\n367\n368\n369\n370\n371\n372\n373\n374\n375\n376\n377\n378\n379\n380\n381\n382\n383\n384\n385\n386\n387\n388\n389\n390\n391\n392\n393\n394\n395\n396\n397\n398\n399\n400\n401\n402\n403\n404\n405\n406\n407\n408\n409\n410\n411\n412\n413\n414\n415\n416\n417\n418\n419\n420\n421\n422\n423\n424\n425\n426\n427\n428\n429\n430\n431\n432\n433\n434\n435\n436\n437\n438\n439\n440\n441\n442\n443\n444\n445\n446\n447\n448\n449\n450\n451\n452\n453\n454\n455\n456\n457\n458\n459\n460\n461\n462\n463\n464\n465\n466\n467\n468\n469\n470\n471\n472\n473\n474\n475\n476\n477\n478\n479\n480\n481\n482\n483\n484\n485\n486\n487\n488\n489\n490\n491\n492\n493\n494\n495\n496\n497\n498\n499\n500\n501\n502\n503\n504\n505\n506\n507\n508\n509\n510\n511\n512\n513\n514\n515\n516\n517\n518\n519\n520\n521\n522\n523\n524\n525\n526\n527\n528\n529\n530\n531\n532\n533\n534\n535\n536\n537\n538\n539\n540\n541\n542\n543\n544\n545\n546\n547\n548\n549\n550\n551\n552\n553\n554\n555\n556\n557\n558\n559\n560\n561\n562\n563\n564\n565\n566\n567\n568\n569\n570\n571\n572\n573\n574\n575\n576\n577\n578\n579\n580\n581\n582\n583\n584\n585\n586\n587\n588\n589\n590\n591\n592\n593\n594\n595\n596\n597\n598\n599\n600\n601\n602\n603\n604\n605\n606\n607\n608\n609\n610\n611\n612\n613\n614\n615\n616\n617\n618\n619\n620\n621\n622\n623\n624\n625\n626\n627\n628\n629\n630\n631\n632\n633\n634\n635\n636\n637\n638\n639\n640\n641\n642\n643\n644\n645\n646\n647\n648\n649\n650\n651\n652\n653\n654\n655\n656\n657\n658\n659\n660\n661\n662\n663\n664\n665\n666\n667\n668\n669\n670\n671\n672\n673\n674\n675\n676\n677\n678\n679\n680\n681\n682\n683\n684\n685\n686\n687\n688\n689\n690\n691\n692\n693\n694\n695\n696\n697\n698\n699\n700\n701\n702\n703\n704\n705\n706\n707\n708\n709\n710\n711\n712\n713\n714\n715\n716\n717\n718\n719\n720\n721\n722\n723\n724\n725\n726\n727\n728\n729\n730\n731\n732\n733\n734\n735\n736\n737\n738\n739\n740\n741\n742\n743\n744\n745\n746\n747\n748\n749\n750\n751\n752\n753\n754\n755\n756\n757\n758\n759\n760\n761\n762\n763\n764\n765\n766\n767\n768\n769\n770\n771\n772\n773\n774\n775\n776\n777\n778\n779\n780\n781\n782\n783\n784\n785\n786\n787\n788\n789\n790\n791\n792\n793\n794\n795\n796\n797\n798\n799"
    },
    {
        "number": 678,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 678,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('3') == 0.666667\nassert solution('0') == 1\nassert solution('1') == 0\nassert solution('1') == 0\nassert solution('1') == 0\n"
    },
    {
        "number": 679,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('AB') == 'Yes'\nassert solution('BA') == 'No'\nassert solution('B.B') == 'No'\nassert solution('A.C') == 'Yes'\nassert solution('A.B.C') == 'Yes'\n"
    },
    {
        "number": 679,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('AB..') == 'Yes'\nassert solution('AA..CB') == 'No'\n"
    },
    {
        "number": 679,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('..BAC.') == 'Yes'\nassert solution('AA..CB') == 'No'\nassert solution('AA..BAC') == 'No'\nassert solution('AA..ACB') == 'Yes'\nassert solution('A..B..C') == 'Yes'\n"
    },
    {
        "number": 679,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('BAC') == 'Yes'\nassert solution('AA..CB') == 'No'\nassert solution('AA.BCB') == 'No'\nassert solution('AA.BCB') == 'No'\n\n\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 679,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('ABBC') == \"Yes\"\nassert solution('AA..C') == \"No\"\nassert solution('..BCA') == \"Yes\"\nassert solution('..BC') == \"No\"\nassert solution('AB..CB') == \"Yes\"\n"
    },
    {
        "number": 679,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('.BAC.') == 'Yes'\nassert solution('.BAC.') == 'Yes'\nassert solution('.BAC.') == 'Yes'\nassert solution('.BAC.') == 'Yes'\nassert solution('.BAC.') == 'Yes'\n"
    },
    {
        "number": 679,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('AA..CB') == 'Yes'\nassert solution('AAB..CAB') == 'No'\nassert solution('ABA..BBBB') == 'Yes'\nassert solution('ABAB.BBBAC') == 'Yes'\nassert solution('AAB.CAB') == 'No'\n"
    },
    {
        "number": 679,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\".BAC.\") == \"Yes\"\nassert solution(\".BAC.\") == \"No\"\nassert solution(\".BAC.\") == \"Yes\"\nassert solution(\".A..\") == \"No\"\nassert solution(\".B..\") == \"No\"\n"
    },
    {
        "number": 679,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\".BAC.\") == \"Yes\"\nassert solution(\"AA..CB\") == \"No\"\nassert solution(\".AB.C\") == \"No\""
    },
    {
        "number": 679,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"A..C.B.B.C.A.B.C.B.C.A.C.A.C.B.C.C.A.B.C.A.C.A.C.C.A.B.C.A.B.C.A.C.B.B.C.C.A.C.A.B.C.A.C.A.C.A.B.C.A.B.C.A.B.C.A.B.C.A.B.C.A.B.C.A.B.C.A.C.A.B.C.A.C.A.C.A.B.C.A.C.A.C.A.C.B.C.A.C.A.C.A.C.C.B.C.A.C.A.C.A.C.A.C.A.C.C.B.C.B.C.A.C.C.A.B.C.A.C.A.C.C.A.C.B.C.A.C.A.C.A.C.C.A.C.B.C.A.C.A.C.A.C.A.C.B.C.A.C.B.C.A.C.A.B.C.A.C.A.C.C.A.B.C.A.C.A.C.A.C.C.A.C.C.B.C.A.C.C.A.B.C.C.A.C.B.C.A.C.A.C.B.C.A.C.A.B.C.A.C.B.C.A.C.A.C.A.C.C.A.C.C.B.C.A.C.A.B.C.C.A.B.C.A.C.A.B.C.A.C.C.C.A.C.B.C.C.A.C.A.C.A.C.A.C.A.C.B.C.A.C.A.C.A.C.B.C.A.C.A.C.A.C.C.C.A.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C."
    },
    {
        "number": 680,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 680,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n"
    },
    {
        "number": 680,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n"
    },
    {
        "number": 680,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == expected\n"
    },
    {
        "number": 680,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('0 0\\n1 1\\n2 2') == '5'\nassert solution('0 0\\n2 0\\n1 1\\n') == '4'\n\n\n\n'''\n"
    },
    {
        "number": 680,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\n"
    },
    {
        "number": 680,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('0 0\\n1 1\\n2 2') == '5\\n0 0\\n1 0\\n1 1\\n1 2\\n2 2'\nassert solution('0 0\\n2 0\\n1 1\\n') == '4\\n0 0\\n1 0\\n1 1\\n2 0'\nassert solution('0 0\\n2 0\\n1 1\\n2 2') == '5\\n0 0\\n1 0\\n1 1\\n1 2\\n2 2'\n\"\"\""
    },
    {
        "number": 680,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('0 0\\n1 1\\n2 2\\n') == '5'\nassert solution('0 0\\n2 0\\n1 1\\n') == '4'\nassert solution('0 0\\n1 1\\n0 0\\n') == '5'\nassert solution('0 0\\n1 1\\n2 2\\n') == '4'\nassert solution('0 0\\n1 1\\n2 2\\n') == '4'\n"
    },
    {
        "number": 680,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"0 0\") == \"5\"\nassert solution(\"0 0\\n1 0\\n1 1\") == \"4\\n0 0\\n1 0\\n1 1\\n2 0\"\n"
    },
    {
        "number": 680,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdin\n\n\"\"\"\n\nfrom sys import stdin\n\na, b = [int(x) for x in stdin.readline().strip().split(' ')]\nc, d = [int(x) for x in stdin.readline().strip().split(' ')]\n\nd1 = abs(a - c)\nd2 = abs(b - d)\nd3 = abs(a - d)\nd4 = abs(b - c)\n\nk = min(d1, d2, d3, d4)\n\nfor i in range(k):\n    print(a, b)\n    a += 1\n    b += 1\n    if a == c:\n        a -= 1\n        b += 1\n    elif a == d:\n        a -= 1\n        b -= 1\n    elif b == d:\n        b -= 1\n        a += 1\n    elif b == c:\n        b += 1\n        a -= 1\n"
    },
    {
        "number": 681,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('4 2') == '5'\nassert solution('3 2') == '3'\nassert solution('1 1 1 1') == '5'\nassert solution('0 0 1 1') == '3'\nassert solution('5 2') == '5'\n"
    },
    {
        "number": 681,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('4 2') == '5'\n\n\"\"\"\n"
    },
    {
        "number": 681,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('4 2') == '5'\nassert solution('3 2') == '3'\nassert solution('3 3') == '10'\nassert solution('3 3') == '10'\n"
    },
    {
        "number": 681,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1 2') == '5'\nassert solution('5 2') == '3'\nassert solution('4 2') == '5'"
    },
    {
        "number": 681,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('4 2') == '5'\nassert solution('3 2') == '3'\n\n\"\"\"\n"
    },
    {
        "number": 681,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1 2') == '5'\nassert solution('3 2') == '3'\nassert solution('4 2') == '5'\nassert solution('5 2') == '5'\nassert solution('6 2') == '5'\n"
    },
    {
        "number": 681,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''3 2''') == '5'\nassert solution('''3 2''') == '5'\nassert solution('''4 3''') == '8'\nassert solution('''4 2''') == '5'\nassert solution('''4 2''') == '5'\n"
    },
    {
        "number": 681,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1 2') == '5'\nassert solution('2 2') == '3'\nassert solution('1 2') == '5'\nassert solution('2 2') == '3'\nassert solution('1 1') == '1'\n"
    },
    {
        "number": 681,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == ''\n\n\n\"\"\""
    },
    {
        "number": 681,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1 2') == '5'\nassert solution('3 2') == '3'\n\"\"\"\n"
    },
    {
        "number": 682,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''4 3 1 6''') == \"2 1 3\"\nassert solution('''5 5 5 6''') == \"1 0 1\"\nassert solution('''2 1 2 3''') == \"3 1 0\"\nassert solution('''5 4 5 3''') == \"4 1 0\"\nassert solution('''1 1 1 1''') == \"0 0 0\"\n"
    },
    {
        "number": 682,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('') == '2 0 1'\nassert solution('1 1 1') == '0 0 1'\nassert solution('1 1 1 1') == '0 0 1'\nassert solution('1 1 1 1 1') == '0 0 1'\nassert solution('1 1 1 1 1 1') == '0 0 1'\n"
    },
    {
        "number": 682,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3 4\") == \"2 1 3\"\nassert solution(\"1 1 1 1\") == \"0 0 0\"\nassert solution(\"1 1 1 5\") == \"1 0 1\"\nassert solution(\"2 1 1 2\") == \"2 1 1 2\"\nassert solution(\"1 2 3 4\") == \"2 1 3\"\n"
    },
    {
        "number": 682,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('4 3 1 6') == '2 1 3'\nassert solution('5 5 5 6') == '1 0 1'\nassert solution('3 4 1 3') == '1 2 1'\n"
    },
    {
        "number": 682,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''4 3 1 6''') == '2 1 3'\nassert solution('''5 5 5 6''') == '1 0 1'\nassert solution('''8 8 8 7''') == '0 0 0'\nassert solution('''6 6 6 7''') == '0 0 0'\nassert solution('''8 7 5 6''') == '0 0 0'\n"
    },
    {
        "number": 682,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('4 3 1 6') == '2 1 3'\nassert solution('5 5 5 6') == '1 0 1'\nprint(solution(input()))"
    },
    {
        "number": 682,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('4 3 1 6') == '2 1 3'\nassert solution('5 5 5 6') == '1 0 1'\nassert solution('6 6 6 6') == '0 0 0'\nassert solution('6 6 6 6') == '0 0 0'\nassert solution('6 6 6 6') == '0 0 0'\n"
    },
    {
        "number": 682,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('4 3 1 6') == '2 1 3'\nassert solution('5 5 5 6') == '1 0 1'\nassert solution('5 5 5 6') == '1 0 1'\nassert solution('5 5 5 6') == '1 0 1'\nassert solution('5 5 5 6') == '1 0 1'\n"
    },
    {
        "number": 682,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"4 3 1 6\") == \"2 1 3\"\nassert solution(\"5 5 5 6\") == \"1 0 1\"\nassert solution(\"1 1 1 2\") == \"0 0 0\"\nassert solution(\"1 1 1 2\") == \"0 0 0\"\nassert solution(\"1 1 1 2\") == \"0 0 0\"\n"
    },
    {
        "number": 682,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('4 3 1 6') == '2 1 3'\nassert solution('5 5 5 6') == '1 0 1'\nassert solution('5 5 5 6') == '1 0 1'\nassert solution('5 5 5 6') == '1 0 1'\nassert solution('5 5 5 6') == '1 0 1'\n"
    },
    {
        "number": 683,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('10') == '1024'\nassert solution('4') == '1'\nassert solution('11') == '109'\nassert solution('22') == '220'\nassert solution('33') == '333'\n"
    },
    {
        "number": 683,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 683,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdin.strip()"
    },
    {
        "number": 683,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(3) == 8\nassert solution(10) == 1024\nassert solution(0) == 1\nassert solution(35) == 9216\nassert solution(36) == 0\n\n\"\"\""
    },
    {
        "number": 683,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '4'\nassert solution('4') == '8'\n"
    },
    {
        "number": 683,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('3') == '8'\nassert solution('10') == '1024'\nprint(solution('8'))\nprint(solution('10'))\n"
    },
    {
        "number": 683,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('0') == ''\nassert solution('123456789') == '987654321'\nassert solution('3') == '3'\nassert solution('-12') == '-12'\n"
    },
    {
        "number": 683,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 683,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(3) == \"8\"\nassert solution(10) == \"1024\"\nassert solution(1) == \"1\"\nassert solution(2) == \"2\"\nassert solution(3) == \"4\"\n"
    },
    {
        "number": 683,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('') == 0\nassert solution('0') == 0\nassert solution('3') == 3\nassert solution('10') == 1024\nassert solution('15') == 3025\n"
    },
    {
        "number": 684,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''4\n1 3 5 7\n1 5 5 7\n100000 200000 300000 400000\n1 1 977539810 977539810''') == '3 4 5'\nassert solution('''1\n1 2 3 4\n1 2 3 4''') == '1 1 1'\nassert solution('''1\n1 2 3 4\n1 2 3 4''') == '1 1 1'\nassert solution('''1\n1 2 3 4\n1 2 3 4''') == '1 1 1'\nassert solution('''1\n1 2 3 4\n1 2 3 4''') == '1 1 1'\n"
    },
    {
        "number": 684,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"1 2 3 4\") == \"3 4 5\"\nassert solution(\"1 5 5 7\") == \"5 5 5\"\nassert solution(\"100000 200000 300000 400000\") == \"182690 214748 300999\"\nassert solution(\"1 1 977539810 977539810\") == \"1 977539810 977539810\"\nassert solution(\"1 1 2 3\") == \"1 1 1\"\n"
    },
    {
        "number": 684,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\n'''\\\n1 3 5 7\n1 5 5 7\n100000 200000 300000 400000\n1 1 977539810 977539810\n''') == '3 4 5'\nassert solution(\n'''\\\n1 3 5 7\n1 5 5 7\n100000 200000 300000 400000\n1 1 977539810 977539810\n''') == '5 5 5'\nassert solution(\n'''\\\n1 3 5 7\n1 5 5 7\n100000 200000 300000 400000\n1 1 977539810 977539810\n''') == '182690 214748 300999'\nassert solution(\n'''\\\n1 3 5 7\n1 5 5 7\n100000 200000 300000 400000\n1 1 977539810 977539810\n''') == '977539810 977539810'\nassert solution(\n'''\\\n1 3 5 7\n1 5 5 7\n100000 200000 300000 400000\n1 1 977539810 977539810\n''') == '977539810 977539810'"
    },
    {
        "number": 684,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n1 3 5 7\n1 5 5 7\n100000 200000 300000 400000\n1 1 977539810 977539810\n\"\"\") == \"\"\"3 4 5\n5 5 5\n182690 214748 300999\n1 977539810 977539810\n\"\"\""
    },
    {
        "number": 684,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == expected_output\n\"\"\"\n\nimport sys\n\nn_testcases = int(sys.stdin.readline().strip())\n\nfor _ in range(n_testcases):\n    a, b, c, d = [int(num) for num in sys.stdin.readline().strip().split(\" \")]\n    if a > b:\n        a, b = b, a\n    if b > c:\n        b, c = c, b\n    if c > d:\n        c, d = d, c\n\n    if a <= b <= c <= d:\n        print(a, b, c)\n"
    },
    {
        "number": 684,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == expected\n\n'''\n"
    },
    {
        "number": 684,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(input(\"\")) == \"\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 684,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\n    '''5\n1 3 5 7\n1 5 5 7\n100000 200000 300000 400000\n1 1 977539810 977539810'''\n    ) == '3 4 5'\nassert solution(\n    '''4\n1 3 5 7\n1 5 5 7\n100000 200000 300000 400000\n1 1 977539810 977539810'''\n    ) == '3 4 5'\nassert solution(\n    '''1\n5\n1\n100000'''\n    ) == '1 1 1'\nassert solution(\n    '''2\n1\n1'''\n    ) == '1 1 1'\nassert solution(\n    '''3\n1\n1\n1'''\n    ) == '1 1 1'\n"
    },
    {
        "number": 684,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == expected\n\n\"\"\"\n\n\"\"\"\nNotes:\n"
    },
    {
        "number": 684,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1 3 5 7') == '3 4 5'\nassert solution('1 5 5 7') == '5 5 5'\nassert solution('100000 200000 300000 400000') == '182690 214748 300999'\nassert solution('1 1 977539810 977539810') == '1 977539810 977539810'\n\n\n\"\"\"\n\n\"\"\"\ntest:\n1 3 5 7\n1 5 5 7\n100000 200000 300000 400000\n1 1 977539810 977539810\n\"\"\"\n"
    },
    {
        "number": 685,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\n    \"\"\"3 4\n2 5\n7 9\n10 11\"\"\") == \"10\"\n\nassert solution(\n    \"\"\"5 10\n5 7\n11 12\n16 20\n25 26\n30 33\"\"\") == \"18\"\n\nassert solution(\n    \"\"\"1 1000000000\n1 1000000000\"\"\") == \"1999999999\"\n\nassert solution(\n    \"\"\"5 1000000000\n5 1000000000\"\"\") == \"1999999999\"\n\nassert solution(\n    \"\"\"1 1\n1 1\"\"\") == \"0\""
    },
    {
        "number": 685,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('3 2') == '10'\nassert solution('5 4') == '10'\nassert solution('5 10') == '18'\nassert solution('5 10\\n5 7') == '18'\nassert solution('5 10\\n5 7\\n11 12') == '18'\n"
    },
    {
        "number": 685,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''3 4\n2 5\n7 9\n10 11''') == '10'\nassert solution('''5 10\n5 7\n11 12\n16 20\n25 26\n30 33''') == '18'\nassert solution('''1 1000000000\n1 1000000000''') == '1999999999'\nassert solution('''2 1000000000\n1 1000000000''') == '1999999999'\nassert solution('''4 1000000000\n1 1000000000\n2 1000000000\n3 1000000000\n4 1000000000''') == '8'\n"
    },
    {
        "number": 685,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(input) == '18'\n\"\"\"\n"
    },
    {
        "number": 685,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('2 5') == '10'\nassert solution('3 10') == '18'\nassert solution('7 9') == '26'\nassert solution('10 11') == '33'\nassert solution('100 10') == '1999999999'\n"
    },
    {
        "number": 685,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('3 4\\n2 5\\n7 9\\n10 11\\n') == '10'\nassert solution('5 10\\n5 7\\n11 12\\n16 20\\n25 26\\n30 33\\n') == '18'\nassert solution('1 1000000000\\n1 1000000000\\n') == '1999999999'\nassert solution('1 0\\n1 0\\n') == '1'\nassert solution('5 10\\n5 7\\n11 12\\n16 20\\n25 26\\n30 33\\n') == '18'\n"
    },
    {
        "number": 685,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('4 4') == '10'\nassert solution('5 10') == '18'\nassert solution('1 1000000000') == '1999999999'\nassert solution('5 10') == '18'\nassert solution('100 1000000000') == '1999999999'\n"
    },
    {
        "number": 685,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('0 0') == 0\nassert solution('1 1') == 1\nassert solution('1 2') == 2\nassert solution('1 10') == 9\nassert solution('1 1000000000') == 100000000\n"
    },
    {
        "number": 685,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('4 10\\n2 5\\n7 9\\n10 11') == '10'\nassert solution('5 1000000000\\n5 1000000000\\n') == '1999999999'\nassert solution('1 1000000000\\n1 1000000000\\n') == '1999999999'\n\"\"\"\n"
    },
    {
        "number": 685,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('4 10\\n2 5\\n7 9\\n10 11') == '10'\nassert solution('5 10\\n5 7\\n11 12\\n16 20\\n25 26\\n30 33\\n') == '18'\nassert solution('1 1000000000\\n1 1000000000\\n') == '1999999999'\nassert solution('1 1\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\\n10 11\\n11 12\\n12 13\\n13 14\\n14 15\\n15 16\\n16 17\\n17 18\\n18 19\\n19 20\\n20 21\\n21 22\\n22 23\\n23 24\\n24 25\\n25 26\\n26 27\\n27 28\\n28 29\\n29 30\\n30 31\\n31 32\\n32 33\\n33 34\\n34 35\\n35 36\\n36 37\\n37 38\\n38 39\\n39 40\\n40 41\\n41 42\\n42 43\\n43 44\\n44 45\\n45 46\\n46 47\\n47 48\\n48 49\\n49 50\\n50 51\\n51 52\\n52 53\\n53 54\\n54 55\\n55 56\\n56 57\\n57 58\\n58 59\\n59 60\\n60 61\\n61 62\\n62 63\\n63 64\\n64 65\\n65 66\\n66 67\\n67 68\\n68 69\\n69 70\\n70 71\\n71 72\\n72 73\\n73 74\\n74 75\\n75 76\\n76 77\\n77 78\\n78 79\\n79 80\\n80 81\\n81 82\\n82 83\\n83 84\\n84 85\\n85 86\\n86 87\\n87 88\\n88 89\\n89 90\\n90 91\\n91 92\\n92 93\\n93 94\\n94 95\\n95 96\\n96 97\\n97 98\\n98 99\\n99 100') == '1999999999'\nassert solution('1 1000000000\\n1 1000000000\\n') == '1999999999'\n"
    },
    {
        "number": 686,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''4\n100 98\n42 32\n1000000000000000000 1\n41 40''') == 'YES'\nassert solution('''1\n1\n1\n2\n1''') == 'NO'\nassert solution('''10\n1\n3\n5\n7\n11\n13\n17\n19\n23\n29\n31\n37\n41\n43\n47\n53\n59\n61\n67\n71\n73\n79\n83\n89\n97\n''') == 'YES'\nassert solution('''10\n100\n95\n90\n85\n80\n75\n70\n65\n60\n55\n50\n45\n40\n35\n30\n25\n20\n15\n10\n5\n1\n''') == 'NO'\nassert solution('''10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n''') == 'NO'\n"
    },
    {
        "number": 686,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('2\\n2\\n2\\n2') == 'YES'\nassert solution('100 98\\n42 32\\n1000000000000000000 1\\n41 40\\n') == 'YES'\nassert solution('100 98\\n42 32\\n1000000000000000000 1\\n41 40\\n1000000000000000000 1\\n10000000000000000001 100 100\\n') == 'YES'\nassert solution('1\\n1\\n1\\n1') == 'YES'\nassert solution('1000 1000\\n100 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n10000000000000001 1000 1000\\n1000000000000000000 1\\n100000000"
    },
    {
        "number": 686,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"4\\n100 98\\n42 32\\n1000000000000000000 1\\n41 40\") == \"YES\\nYES\\nYES\\nNO\"\n\n'''\n'''\nPassed all 7/7 test cases\n'''"
    },
    {
        "number": 686,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 686,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == expected\n\"\"\""
    },
    {
        "number": 686,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1 0') == \"YES\"\nassert solution('2 4') == \"YES\"\nassert solution('2 3') == \"NO\"\nassert solution('100 29') == \"YES\"\nassert solution('1000000001 9') == \"YES\"\n"
    },
    {
        "number": 686,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''4\n100 98\n42 32\n1000000000000000000 1\n41 40\n''') == 'YES'\nassert solution('''1\n2\n''') == 'YES'\nassert solution('''2\n5\n''') == 'NO'\nassert solution('''1\n7\n''') == 'YES'\n'''\nassert solution('''1\n2\n''') == 'YES'\n"
    },
    {
        "number": 686,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1000000000000000000\\n1\\n1000000000000000000\\n1') == 'YES'\nassert solution('1\\n1\\n1\\n1') == 'YES'\nassert solution('1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1') == 'NO'\nassert solution('1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n"
    },
    {
        "number": 686,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1\\n1') == 'YES'\nassert solution('2\\n1') == 'YES'\nassert solution('1\\n2') == 'NO'\nassert solution('1\\n3') == 'NO'\nassert solution('2\\n3') == 'NO'\n"
    },
    {
        "number": 686,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('2') == 'YES'\nassert solution('1') == 'NO'\nassert solution('3') == 'NO'\nassert solution('2 2') == 'YES'\n"
    },
    {
        "number": 687,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1 2') == '199 200'\nassert solution('4 4') == '412 413'\nassert solution('5 7') == '-1'\nassert solution('6 2') == '-1'\nassert solution('1 2') == '199 200'\n"
    },
    {
        "number": 687,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('1 2') == '199 200'\nassert solution('4 4') == '412 413'\nassert solution('5 7') == '-1'\nassert solution('6 2') == '-1'\n"
    },
    {
        "number": 687,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('') is None\nassert solution('1 2') == '199 200'\nassert solution('4 4') == '412 413'\nassert solution('5 7') == '-1'\nassert solution('6 2') == '-1'\n"
    },
    {
        "number": 687,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1 2') == '199 200'\nassert solution('4 4') == '412 413'\nassert solution('5 7') == '-1'\nassert solution('6 2') == '-1'\nassert solution('7 2') == '-1'\n"
    },
    {
        "number": 687,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1 2') == '199 200'\nassert solution('4 4') == '412 413'\nassert solution('5 7') == '-1'\nassert solution('6 2') == '-1'\nassert solution('8 8') == '1718 18'\n"
    },
    {
        "number": 687,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1 2') == '199 200'\nassert solution('4 4') == '412 413'\nassert solution('5 7') == '-1'\nassert solution('6 2') == '-1'\nassert solution('0 0') == '-1'\n"
    },
    {
        "number": 687,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('1 2') == '199 200'\nassert solution('4 4') == '412 413'\nassert solution('5 7') == '-1'\nassert solution('6 2') == '-1'\nassert solution('7 9') == '-1'\n"
    },
    {
        "number": 687,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1 2') == '199 200'\nassert solution('4 4') == '412 413'\nassert solution('5 7') == '-1'\nassert solution('6 2') == '-1'\nassert solution('7 2') == '-1'\n"
    },
    {
        "number": 687,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 687,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1 2') == '199 200'\nassert solution('4 4') == '412 413'\nassert solution('5 7') == '-1'\nassert solution('6 2') == '-1'\nassert solution('8 10') == '-1'\n"
    },
    {
        "number": 688,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('42\\n23454\\n') == '2'\nassert solution('169\\n12118999\\n') == '1'\nassert solution('123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n123456789\\n12345"
    },
    {
        "number": 688,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 688,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(input) == output\n"
    },
    {
        "number": 688,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('a') == ''\nassert solution('12') == ''\nassert solution('a123') == ''\nassert solution('a123b') == ''\n"
    },
    {
        "number": 688,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('42') == '2'\nassert solution('169') == '1'\n\n'''\n'''"
    },
    {
        "number": 688,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"1\") == 1\nassert solution(\"42\") == 1\nassert solution(\"42\") == 1\nassert solution(\"169\") == 1\nassert solution(\"12118999\") == 1\n"
    },
    {
        "number": 688,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('42') == '2'\nassert solution('23454') == '2'\nassert solution('169') == '1'\nassert solution('12118999') == '1'\n\n\"\"\"\n"
    },
    {
        "number": 688,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"169\") == \"1\"\nassert solution(\"12118999\") == \"1\"\nassert solution(\"23454\") == \"2\"\nassert solution(\"12345\") == \"0\"\nassert solution(\"101123\") == \"1\"\n"
    },
    {
        "number": 688,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('') == 0\nassert solution('9') == 0\nassert solution('42') == 0\nassert solution('23454') == 0\nassert solution('12118999') == 0\n"
    },
    {
        "number": 688,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1') == ''\nassert solution('2') == ''\nassert solution('1 2') == ''\nassert solution('23') == ''\n"
    },
    {
        "number": 689,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(''.join(input() for _ in range(int(input())))) == 'YES'\n\"\"\"\n\n\"\"\"\nNote\n1. Since we are dealing with ASCII strings, we use ord() to convert the string to an integer\n2. If we use strings directly, we would need to convert the integer back to a string to see the effect\n3. We can use list as a stack\n4. We use collections.Counter() to count the occurences of each character in the string\n5. We can iterate the counter to get the max value and the max character\n6. The max value is the number of non-zero occurences, that is the number of distinct characters\n7. We count the distinct characters by checking whether the character is in the stack or not\n8. If the character is in the stack, we remove it, else we add it to the stack\n9. The answer is either \"YES\" or \"NO\"\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 689,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 689,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('ab') == 'NO'\nassert solution('abcd') == 'NO'\nassert solution('abcd') == 'NO'\n"
    },
    {
        "number": 689,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''2''') == 'YES'\nassert solution('''3''') == 'NO'\nassert solution('''5''') == 'YES'\nassert solution('''7''') == 'NO'\nassert solution('''10''') == 'YES'\n"
    },
    {
        "number": 689,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == expected_out\n\n\"\"\"\n"
    },
    {
        "number": 689,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('a' * 9) == 'YES'\nassert solution('a' * 9) == 'NO'\nassert solution('a' * 9) == 'YES'\nassert solution('a' * 9) == 'NO'\nassert solution('a' * 9) == 'YES'\n"
    },
    {
        "number": 689,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('Hello World') == 'YES'\nassert solution('Hello World\\nHello World') == 'NO'\nassert solution('abc\\nabc') == 'NO'\nassert solution('abc\\nabc\\nabc') == 'YES'\n"
    },
    {
        "number": 689,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"\"\"4\n2\ncaa\ncbb\n3\ncba\ncba\ncbb\n4\nccab\ncbac\nbca\nacbcc\n4\nacb\ncaf\nc\ncbafc\n\"\"\") == \"YES\"\nassert solution(\"\"\"2\n3\nab\nbab\n\"\"\") == \"NO\"\nassert solution(\"\"\"1\n3\nab\nbab\n\"\"\") == \"YES\"\nassert solution(\"\"\"1\n2\nab\nbab\n\"\"\") == \"NO\"\nassert solution(\"\"\"1\n2\nab\nbab\n\"\"\") == \"YES\"\n"
    },
    {
        "number": 689,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''4\n2\ncaa\ncbb\n3\ncba\ncba\ncbb\n4\nccab\ncbac\nbca\nacbcc\n4\nacb\ncaf\nc\ncbafc\n''') == 'YES'\n\nassert solution('''6\n7\naacab\nbcb\nac\nabcabc\na\nbab\n''') == 'NO'\n\nassert solution('''1\n1\nab\n''') == 'YES'\n'''\n\n\"ac\" + \"bc\" = \"bc\" + \"ac\"\n\nabcabc\nbcb\nac\nabcabc\n\n\"abcabc\"\n\"abc\" + \"bc\"\n\ncab\ncab\nc\na\nbcbcbc\nbcbcbcbcb\n\ncab\nbcbcbcbcb\nc\na\nb\nab\n'''"
    },
    {
        "number": 689,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('\\n'.join([\n    '4',\n    '2',\n    'caa',\n    'cbb',\n    '3',\n    'cba',\n    'cba',\n    'cbb',\n    '4',\n    'ccab',\n    'cbac',\n    'bca',\n    'acbcc',\n    '4',\n    'acb',\n    'caf',\n    'c',\n    'cbafc',\n])) == 'NO'\nassert solution('\\n'.join([\n    '4',\n    '2',\n    'caa',\n    'cbb',\n    '3',\n    'cba',\n    'cba',\n    'cbb',\n    '4',\n    'ccab',\n    'cbac',\n    'bca',\n    'acbcc',\n    '4',\n    'acb',\n    'caf',\n    'c',\n    'cbafc',\n])) == 'YES'\nassert solution('\\n'.join([\n    '4',\n    '2',\n    'ccab',\n    'cbac',\n    'bca',\n    'acbcc',\n    '4',\n    'acb',\n    'caf',\n    'c',\n    'cbafc',\n])) == 'NO'\nassert solution('\\n'.join([\n    '4',\n    '2',\n    'caa',\n    'cbb',\n    '3',\n    'cba',\n    'cba',\n    'cbb',\n    '4',\n    'ccab',\n    'cbac',\n    'bca',\n    'acbcc',\n    '4',\n    'acb',\n    'caf',\n    'c',\n    'cbafc',\n])) == 'NO'\nassert solution('\\n'.join([\n    '5',\n    '1',\n    'a',\n    'b',\n    'c',\n    'd',\n    'e',\n    'f',\n    'g',\n    'h',\n    'i',\n    'j',\n    'k',\n    'l',\n    'm',\n    'n',\n    'o',\n    'p',\n    'q',\n    'r',\n    's',\n    't',\n    'u',\n    'v',\n    'w',\n    'x',\n    'y',\n    'z',\n    '1',\n    '2',\n    '3',\n    '4',\n    '5',\n    '6',\n    '7',\n    '8',\n    '9',\n    '0',\n    ' ',\n    '@',\n    '$',\n    '%',\n    '^',\n    '&',\n    '*',\n    '+',\n    '=',\n    ':',\n    ';',\n    '<',\n    '<=',\n    '=',\n    '>',\n    '>=',\n    '?'\n])) == 'NO'\n"
    },
    {
        "number": 690,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('2') == 'O-|OO-\\nO-|OOO-\\nO-|O-OOO\\n'\nassert solution('13') == 'O-|OOO-\\nO-|O-OOO\\nO-|O-O\\nO-|OO-\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O\\nO-|O"
    },
    {
        "number": 690,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('1') == '|--|'\nassert solution('3') == '|---|'\nassert solution('2') == '|--|'\nassert solution('5') == '|---|'\nassert solution('6') == '|---|'\n"
    },
    {
        "number": 690,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('2') == 'O|-|'\nassert solution('13') == 'O-|O-OOO'\nassert solution('720') == 'O-|-OOOO'\n"
    },
    {
        "number": 690,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 690,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1') == ''\nassert solution('12') == 'O-|O'\nassert solution('13') == 'O-|O-O'\nassert solution('132') == 'O-|O-OO'\n"
    },
    {
        "number": 690,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('0') == ''\nassert solution('0') == ''\nassert solution('1') == '|'\nassert solution('2') == '|-'\n"
    },
    {
        "number": 690,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('2') == \"O-|OO-OO\"\nassert solution('13') == \"O-|OOO-O\"\nassert solution('720') == \"O-|-OOOO\"\nassert solution('1') == \"O-\"\nassert solution('100') == \"O-|-OOO\"\n"
    },
    {
        "number": 690,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 690,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''2''') == 'O-|OO-OO'\nassert solution('''13''') == 'O-|OOO-O'\nassert solution('''720''') == 'O-|-OOOO'\nassert solution('''14576''') == 'O-|O-OOOO'\nassert solution('''9876543210''') == 'O-|O-OOOO'\n"
    },
    {
        "number": 690,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 691,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 691,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\n\nfrom itertools import combinations\n"
    },
    {
        "number": 691,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(input()) == output()\n"
    },
    {
        "number": 691,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"5 5\") == \"YES\\n1 2 4 5 7\\n\"\nassert solution(\"3 6\") == \"YES\\n1 2 5\\n\"\nassert solution(\"3 4\") == \"NO\\n\"\nassert solution(\"7 7\") == \"YES\\n1 2 3 4 5 6 7\\n\"\nassert solution(\"1 1\") == \"YES\\n1\\n\"\n"
    },
    {
        "number": 691,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"5 5\") == \"YES\\n1 2 4 5 7\"\nassert solution(\"3 6\") == \"YES\\n1 2 5\"\nassert solution(\"2 3\") == \"NO\"\nassert solution(\"4 4\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 691,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"5 5\") == \"YES\"\nassert solution(\"3 6\") == \"YES\"\nassert solution(\"5 1\") == \"NO\"\n\"\"\"\n\nfrom math import floor\nfrom typing import Tuple\n"
    },
    {
        "number": 691,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(input()) == 'NO'\nassert solution(input()) == 'YES'\nassert solution(input()) == 'YES'\nassert solution(input()) == 'NO'\nassert solution(input()) == 'YES'\n"
    },
    {
        "number": 691,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('5 5\\n') == 'YES\\n1 2 4 5 7'\nassert solution('3 6\\n') == 'YES\\n1 2 5'\nassert solution('0 0\\n') == 'NO'\nassert solution('3 10\\n') == 'NO'\nassert solution('7 4\\n') == 'YES\\n1 2 4 5 7'\n"
    },
    {
        "number": 691,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(input()) == \"YES\\n1 2 4 5 7\"\n\"\"\"\nfrom math import log10\n\nn, x = [int(x) for x in input().split()]"
    },
    {
        "number": 691,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(input(\"\")) == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 692,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == str(0.666667)\n"
    },
    {
        "number": 692,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''2\n0\n1''') == '0.666667'\nassert solution('''1\n2\n0\n''') == '0.500000'\nassert solution('''2\n0\n1\n''') == '0.500000'\nassert solution('''1\n2\n1\n''') == '0.500000'\nassert solution('''3\n2 4 1\n3 0 2\n''') == '0.133333'\n"
    },
    {
        "number": 692,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''2''') == '0.666667'\nassert solution('''2\n2\n0''') == '0.666667'\nassert solution('''2\n2\n0\n2\n0\n''') == '0.500000'\nassert solution('''2\n2\n0\n2\n2\n0''') == '0.666667'\nassert solution('''2\n2\n0\n1\n0\n''') == '0.50000'\n"
    },
    {
        "number": 692,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''1\n2\n0\n''') == '0.5'\n\nassert solution('''2\n2 3\n1 0\n''') == '0.666667'\n\nassert solution('''3\n2 3\n1 0\n''') == '0.166667'\n\nassert solution('''4\n2 3\n1 0\n''') == '0.050000'\n\nassert solution('''5\n2 3\n1 0\n''') == '0.021875'"
    },
    {
        "number": 692,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"\"\nassert solution(\"1\\n1\") == \"\"\nassert solution(\"1\\n2\\n3\") == \"\"\nassert solution(\"1\\n1\\n3\") == \"\"\n"
    },
    {
        "number": 692,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"\"\nassert solution(\"1\\n1\") == \"\"\nassert solution(\"1\\n1\\n1\") == \"\"\nassert solution(\"1\\n1\\n1\\n1\") == \"\""
    },
    {
        "number": 692,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''0\n1\n2''') == '0.500000'\nassert solution('''0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16''') == '0.875000'\nassert solution('''0\n3\n2\n1\n0\n-1\n-2\n-3''') == '0.037500'\nassert solution('''1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16''') == '0.580000'\nassert solution('''2\n3\n0\n-1\n-2\n-3\n-4\n-5\n-6\n-7\n-8\n-9\n-10\n-11\n-12\n-13\n-14\n-15\n-16''') == '0.157500'\n"
    },
    {
        "number": 692,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''0\n2\n0''') == '0.5'\nassert solution('''0\n2\n0\n3\n0\n''') == '0.333333'\nassert solution('''2\n2\n1 0\n0\n3\n1\n''') == '0.5'\nassert solution('''2\n2\n1 0\n0\n3\n1\n''') == '0.5'\nassert solution('''2\n2\n1 0\n0\n3\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1"
    },
    {
        "number": 692,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"0\\n2\\n0\\n\") == \"0.666667\"\nassert solution(\"2\\n2 3\\n1 0\\n\") == \"0.666667\"\n"
    },
    {
        "number": 692,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''2\n1 0\n''') == '0.666667'\nassert solution('''2\n3\n0 1 2\n1 1 2\n''') == '0.500000'\nassert solution('''3\n2\n0 0\n1 1\n2 2\n''') == '0.333333'\nassert solution('''4\n2\n0 0\n1 1\n2 2\n3 3\n''') == '0.181818'\nassert solution('''8\n2\n0 0\n1 1\n2 2\n3 3\n4 4\n5 5\n6 6\n7 7\n''') == '0.090909'\n"
    },
    {
        "number": 693,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('4 2\\n1 1 1 1') == '-1'\nassert solution('2 4\\n1 1 1 1') == '0'\nassert solution('4 4\\n1 1 1 1') == '1'\nassert solution('8 3\\n3 3 1 2 2 1 1 3\\n3 1 1') == '1'\nassert solution('9 6\\n3 3 3 1 2 2 1 1 3 1 2\\n3 1 1') == '3'\n"
    },
    {
        "number": 693,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == \"1\"\n\n\"\"\"\n\n\"\"\"\n-----Thoughts on Solution-----\nSince this problem has a simple solution, I will solve it first before moving on to an optimized solution.\n\nI'll first solve it on paper, then look at the solution\n\n\"\"\"\n"
    },
    {
        "number": 693,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''8 3\n3 3 1 2 2 1 1 3\n3 1 1''') == '1'\n\nassert solution('''5 2\n2 2 1 1 2\n1 1''') == '3'\n\nassert solution('''2 5\n2 2 1 1 2\n2 2 1 1 2''') == '1'\n\nassert solution('''5 2\n2 2 1 1 2\n2 2 1 1 2''') == '1'\n\nassert solution('''5 2\n3 3 1 2 2 1\n2 2 1 1 2''') == '2'"
    },
    {
        "number": 693,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"3 3\\n3 1 1\\n\") == \"1\"\nassert solution(\"3 3\\n3 1 1\\n\") == \"1\"\nassert solution(\"5 6\\n2 2 3 3 1\\n3 2 1 1\\n\") == \"2\"\nassert solution(\"5 6\\n2 2 3 3 1\\n3 2 1 1\\n\") == \"2\"\nassert solution(\"5 6\\n2 2 3 3 1\\n3 2 1 1\\n\") == \"2\"\n"
    },
    {
        "number": 693,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n"
    },
    {
        "number": 693,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdin\nprint(solution(stdin))\n\"\"\"\n"
    },
    {
        "number": 693,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\n'''\n8 3\n3 3 1 2 2 1 1 3\n3 1 1\n''') == '1'\n\nassert solution(\n'''\n8 3\n3 3 1 2 2 1 1 3\n2 3 1\n''') == '-1'\n\nassert solution(\n'''\n8 3\n3 3 1 2 2 1 1 3\n3 1 2\n''') == '-1'\n\nassert solution(\n'''\n8 3\n3 3 1 2 2 1 1 3\n3 2 1\n''') == '-1'\n\nassert solution(\n'''\n8 3\n3 3 1 2 2 1 1 3\n3 1 1\n''') == '-1'"
    },
    {
        "number": 693,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == '1'\n\"\"\"\n\nn, m = [int(x) for x in stdin.split()]\nls = sorted([int(x) for x in stdin.split()])\nk = [int(x) for x in stdin.split()]"
    },
    {
        "number": 693,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 693,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\n    \"\"\"3 4\n3 1 1 1 1\n2 2 2 1\"\"\"\n) == \"1\"\nassert solution(\n    \"\"\"3 4\n3 1 1 1 1\n1 1 1 1\n2 2 2 1\"\"\"\n) == \"3\"\nassert solution(\n    \"\"\"4 4\n3 3 1 2 2 1 1\n2 1 1\n3 2 2 3 1\"\"\"\n) == \"3\"\nassert solution(\n    \"\"\"4 4\n3 3 1 2 2 1 1\n1 1 1 1 1\n2 2 2 1\"\"\"\n) == \"1\"\nassert solution(\n    \"\"\"4 4\n3 3 1 2 2 1 1\n1 1 1 1 1\n2 2 2 1\"\"\"\n) == \"3\"\n"
    },
    {
        "number": 694,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"116401024\") == \"YES\"\nassert solution(\"284254589153928171911281811000\") == \"YES\"\nassert solution(\"120\") == \"NO\"\n\n\"\"\"\nimport sys"
    },
    {
        "number": 694,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"116401024\") == \"YES\\n11640\\n1024\"\nassert solution(\"284254589153928171911281811000\") == \"YES\\n2842545891539\\n28171911281811000\"\nassert solution(\"120\") == \"NO\"\nassert solution(\"12 1\") == \"NO\"\n"
    },
    {
        "number": 694,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\n\"116401024\"\n\"97 1024\") == \"YES\"\nassert solution(\n\"284254589153928171911281811000\"\n\"1009 1000\") == \"YES\"\nassert solution(\n\"120\"\n\"12 1\") == \"NO\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 694,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdin.split()\n"
    },
    {
        "number": 694,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('116401024\\n97 1024\\n') == 'YES\\n11640\\n1024\\n'\nassert solution('284254589153928171911281811000\\n1009 1000\\n') == 'YES\\n2842545891539\\n28171911281811000\\n'\nassert solution('120\\n12 1\\n') == 'NO\\n'\n\n\"\"\""
    },
    {
        "number": 694,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"\n116401024\n97 1024\n\"\"\"\n) == \"\"\"\nYES\n11640\n1024\n\"\"\"\n"
    },
    {
        "number": 694,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(input()) == \"YES\\n28171911281811000\\n2842545891539\\n284254589153928171911281811000\"\nassert solution(input()) == \"NO\\n284254589153928171911281811000\\n28171911281811000\"\nassert solution(input()) == \"NO\\n28171911281811000\\n284254589153928171911281811000\"\nassert solution(input()) == \"NO\\n284254589153928171911281811000\\n28171911281811000\"\nassert solution(input()) == \"NO\\n284254589153928171911281811000\\n28171911281811000\"\n\n-----"
    },
    {
        "number": 694,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"116401024\\n97 1024\") == \"YES\\n11640\\n1024\"\nassert solution(\"284254589153928171911281811000\\n1009 1000\") == \"YES\\n2842545891539\\n28171911281811000\"\nassert solution(\"120\\n12 1\") == \"NO\"\n\n\n\"\"\"\n"
    },
    {
        "number": 694,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('116401024') == 'YES\\n11640\\n1024'\nassert solution('284254589153928171911281811000') == 'YES\\n2842545891539\\n28171911281811000'\nassert solution('120') == 'NO'\nassert solution('12 1') == 'NO'\n\n-----"
    },
    {
        "number": 694,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''116401024\n97 1024''') == 'YES\\n11640\\n1024'\nassert solution('''284254589153928171911281811000\n1009 1000''') == 'YES\\n2842545891539\\n28171911281811000'\nassert solution('''120''') == 'NO'\n'''\n"
    },
    {
        "number": 695,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 695,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('1 1') == '0'\nassert solution('3 7') == '0'\nassert solution('13 10') == '1'\nassert solution('1 1') == '0'\nassert solution('3 7') == '0'\n"
    },
    {
        "number": 695,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1 1') == '0'\nassert solution('3 7') == '0'\nassert solution('13 10') == '1'\n"
    },
    {
        "number": 695,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1 1') == '0'\nassert solution('3 7') == '0'\nassert solution('13 10') == '1'\n\n\"\"\""
    },
    {
        "number": 695,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1 1') == 0\nassert solution('3 7') == 0\nassert solution('13 10') == 1\nassert solution('2 4') == 1\nassert solution('2 9') == 1\n"
    },
    {
        "number": 695,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1 1') == '0'\nassert solution('3 7') == '0'\nassert solution('13 10') == '1'\n"
    },
    {
        "number": 695,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"1 1\") == \"0\"\nassert solution(\"3 7\") == \"0\"\nassert solution(\"13 10\") == \"1\"\nassert solution(\"13 10\") == \"1\"\nassert solution(\"99999 101\") == \"0\"\n"
    },
    {
        "number": 695,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"1 1\") == \"0\"\nassert solution(\"3 7\") == \"1\"\nassert solution(\"13 10\") == \"1\"\nassert solution(\"8 4\") == \"2\"\nassert solution(\"15 9\") == \"3\"\n"
    },
    {
        "number": 695,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1 1') == '0'\nassert solution('3 7') == '0'\nassert solution('13 10') == '1'\nassert solution('14 18') == '0'\nassert solution('3 1') == '0'\n"
    },
    {
        "number": 695,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1 1') == 0\nassert solution('3 7') == 0\nassert solution('13 10') == 1\n"
    },
    {
        "number": 696,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('3') == '1'\nassert solution('5') == '2'\nassert solution('7') == '0'\nassert solution('13') == '2'\nassert solution('29') == '1'\n"
    },
    {
        "number": 696,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"5\") == \"2\"\nassert solution(\"7\") == \"0\"\nassert solution(\"9\") == \"0\"\nassert solution(\"13\") == \"0\"\n"
    },
    {
        "number": 696,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('3') == '1'\nassert solution('5') == '2'\nassert solution('10') == '4'\nassert solution('1000') == '104'\nassert solution('101') == '104'\n"
    },
    {
        "number": 696,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('3') == '1'\nassert solution('5') == '2'\nassert solution('7') == '4'\nassert solution('11') == '3'\nassert solution('13') == '2'\n"
    },
    {
        "number": 696,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('3') == '1'\nassert solution('5') == '2'\nassert solution('10') == '3'\nassert solution('15') == '2'\nassert solution('16') == '2'\n"
    },
    {
        "number": 696,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"5\") == \"2\"\nassert solution(\"10\") == \"4\"\n\n\n\"\"\"\n\nfrom math import sqrt\n"
    },
    {
        "number": 696,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('3') == '1'\nassert solution('5') == '2'\nassert solution('7') == '2'\nassert solution('13') == '5'\nassert solution('19') == '6'\n"
    },
    {
        "number": 696,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"3\") == 1\nassert solution(\"5\") == 2\nassert solution(\"7\") == 4\nassert solution(\"11\") == 6\nassert solution(\"13\") == 8\n"
    },
    {
        "number": 696,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('3') == '1'\nassert solution('5') == '2'\nassert solution('7') == '3'\nassert solution('13') == '4'\nassert solution('19') == '5'\n"
    },
    {
        "number": 696,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('2') == 1\nassert solution('3') == 1\nassert solution('5') == 2\nassert solution('8') == 3\nassert solution('13') == 5\n"
    },
    {
        "number": 697,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('-1 1') == '1'\nassert solution('0 0') == '0'\nassert solution('2 0') == '2'\nassert solution('0 2') == '0'\n"
    },
    {
        "number": 697,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('0 2') == '0'\nassert solution('2 0') == '2'\nassert solution('2 2') == '5'\nassert solution('2000 2000') == '674532367'\nassert solution('9 7') == '59'\n"
    },
    {
        "number": 697,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"0 2\") == \"0\"\nassert solution(\"2 0\") == \"2\"\nassert solution(\"2 2\") == \"5\"\nassert solution(\"2000 2000\") == \"674532367\"\nassert solution(\"4 1\") == \"6\"\n"
    },
    {
        "number": 697,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"0 2\") == \"0\"\nassert solution(\"2 0\") == \"2\"\nassert solution(\"2000 2000\") == \"674532367\"\nassert solution(\"1 1\") == \"2\"\nassert solution(\"10 1\") == \"10\"\n"
    },
    {
        "number": 697,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"0 2\") == \"0\"\nassert solution(\"2 0\") == \"2\"\nassert solution(\"2 2\") == \"5\"\nassert solution(\"2000 2000\") == \"674532367\"\nassert solution(\"0 2\") == \"0\"\n"
    },
    {
        "number": 697,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"0 2\") == \"0\"\nassert solution(\"2 0\") == \"2\"\nassert solution(\"2 2\") == \"5\"\nassert solution(\"2000 2000\") == \"674532367\"\n\"\"\"\n"
    },
    {
        "number": 697,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''0 2''') == ''\nassert solution('''2 0''') == '2'\nassert solution('''2 2''') == '5'\nassert solution('''2000 2000''') == '674532367'\nassert solution('''6 3''') == '2'\n"
    },
    {
        "number": 697,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"0 2\") == \"0\"\nassert solution(\"2 0\") == \"2\"\nassert solution(\"2 2\") == \"5\"\nassert solution(\"2000 2000\") == \"674532367\"\n\n\"\"\"\n"
    },
    {
        "number": 697,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('0 2') == '0'\nassert solution('2 0') == '2'\nassert solution('2 2') == '5'\nassert solution('2000 2000') == '674532367'\nassert solution('2000 2000') == '674532367'\n"
    },
    {
        "number": 697,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('0 2') == '0'\nassert solution('2 0') == '2'\nassert solution('2 2') == '5'\nassert solution('2000 2000') == '674532367'\nassert solution('2000 2000 0 0') == '674532367'\n"
    },
    {
        "number": 698,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"3 2\") == \"0 0\"\nassert solution(\"9 3\") == \"2 3\"\nassert solution(\"10 0\") == \"5 9\"\nassert solution(\"1 2 3\") == \"0 0\"\nassert solution(\"1 2 3\") == \"0 0\"\n"
    },
    {
        "number": 698,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(input_0) == output_0\nassert solution(input_1) == output_1\nassert solution(input_2) == output_2\nassert solution(input_3) == output_3\nassert solution(input_4) == output_4\n"
    },
    {
        "number": 698,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1\\n2\\n1') == '0 0'\nassert solution('2\\n1') == '0 0'\nassert solution('4\\n2\\n1 2\\n3 4') == '0 0'\nassert solution('4\\n1\\n2\\n3\\n4') == '1 0'\nassert solution('5\\n2\\n1') == '0 1'\n"
    },
    {
        "number": 698,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('2 2\\n1 2\\n2 1') == '0 0'\nassert solution('3 2\\n1 2\\n2 1') == '0 0'\nassert solution('3 1\\n2 1\\n2 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2') == '0 0'\nassert solution('10 0\\n1 2 3\\n2 8\\n1 4 5\\n1 4 5\\n2 8\\n1 4 5\\n2 8\\n1 4 5') == '5 9'\nassert solution('10 1\\n1 2 3\\n2 8\\n1 4 5\\n1 4 5\\n2 8\\n1 4 5\\n2 8\\n1 4 5') == '0 0'\n"
    },
    {
        "number": 698,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1 2\\n2 8') == '0 0'\nassert solution('2 3\\n1 2 3') == '2 3'\nassert solution('9 0\\n') == '5 9'\nassert solution('10 0\\n') == '5 9'\nassert solution('10 1\\n1 2 3\\n2 8\\n1 4 5\\n') == '2 3'\n"
    },
    {
        "number": 698,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''2 1''') == '0 0'\nassert solution('''2 2''') == '0 0'\nassert solution('''1 2''') == '0 1'\nassert solution('''2 1\n2 2''') == '0 1'\nassert solution('''1 2\n2 1''') == '0 1'\n"
    },
    {
        "number": 698,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''2 1''') == '0 0'\nassert solution('''9 3''') == '2 3'\nassert solution('''10 0''') == '5 9'\nassert solution('''4 3\n1 2 3\n2 8\n1 4 5\n''') == '2 3'\nassert solution('''4 3\n2 8\n1 4 5\n''') == '2 3'\n"
    },
    {
        "number": 698,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1 2\\n2 1') == '0 0'\nassert solution('3 2\\n2 1') == '0 0'\nassert solution('10 0\\n') == '5 9'\nassert solution('1 1\\n1 2\\n2 1') == '0 0'\nassert solution('2 3\\n2 8\\n1 4 5\\n2 8\\n1 4 5') == '2 3'\n"
    },
    {
        "number": 698,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1 2') == '0 0'\nassert solution('2 1') == '0 0'\nassert solution('2 2') == '0 0'\nassert solution('1 2 3') == '0 0'\nassert solution('2 8') == '0 0'\n"
    },
    {
        "number": 698,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''3 2\n2 1\n2 2''') == '0 0'\nassert solution('''9 3\n1 2 3\n2 8\n1 4 5''') == '2 3'\nassert solution('''10 0''') == '5 9'\nassert solution('''3 0\n1 2 3\n2 8\n1 4 5''') == '1 0'\nassert solution('''4 0\n1 2 3\n2 8\n1 4 5''') == '1 2'\n"
    },
    {
        "number": 699,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(input()) == '2 8 14 20 26'\n\"\"\"\nfrom math import ceil, floor\n\ny, k, n = map(int, stdin.split())\n\npossible = 0\n"
    },
    {
        "number": 699,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('10 1 10') == '2 8 14 20 26'\nassert solution('10 6 40') == '2 8 14 20 26'\nassert solution('10 7 10') == '-1'\nassert solution('10 9 10') == '1'\nassert solution('10 8 10') == '1'\n"
    },
    {
        "number": 699,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('10 1 10') == '-1'\nassert solution('10 6 40') == '2 8 14 20 26'"
    },
    {
        "number": 699,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(input()) == output()\n"
    },
    {
        "number": 699,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''10 1 10''') == '-1'\nassert solution('''10 6 40''') == '2 8 14 20 26'\n\nassert solution('''10 3 10''') == '4'\nassert solution('''10 3 5''') == '2 3 4'\nassert solution('''10 4 7''') == '3 5'\n"
    },
    {
        "number": 699,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('10 1 10') == '-1'\nassert solution('10 6 40') == '2 8 14 20 26'\nprint(solution(input()))\n\"\"\"\n"
    },
    {
        "number": 699,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('10 1 10') == '2 8 14 20 26'\n\nassert solution('10 6 40') == '2 8 14 20 26'\n\n\"\"\"\n"
    },
    {
        "number": 699,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"10 1 10\") == \"-1\"\nassert solution(\"10 6 40\") == \"2 8 14 20 26\"\nassert solution(\"2 1 5\") == \"2\"\nassert solution(\"2 5 9\") == \"-1\"\nassert solution(\"6 10 12\") == \"2 4 6 8 10\"\n"
    },
    {
        "number": 699,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('10 1 10') == '2 8 14 20 26'\nassert solution('10 6 40') == '2 8 14 20 26'\nassert solution('10 1 10') == '-1'\nassert solution('10 6 40') == '2 8 14 20 26'\nassert solution('1 1 10') == '-1'\n"
    },
    {
        "number": 699,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"10 1 10\") == \"-1\"\nassert solution(\"10 6 40\") == \"2 8 14 20 26\"\nassert solution(\"10 50 10\") == \"-1\"\nassert solution(\"10 50 1000\") == \"-1\"\nassert solution(\"10 1 1000\") == \"2 8 14 20 26\"\n"
    },
    {
        "number": 700,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"4\") == \"Yes\"\nassert solution(\"2\") == \"No\"\nassert solution(\"XOOO\\nXXOO\\nOOOO\\nXXXX\\nXOOO\\nXOOO\\nXOXO\\nXOXX\") == \"Yes\"\n\n\n-----\n\n\"\"\"\n"
    },
    {
        "number": 700,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''4\nXOOO\nXXOO\nOOOO\nXXXX\nXOOO\nXOOO\nXOXO\nXOXX\n''') == 'Yes'\nassert solution('''2\nXX\nOO\nXO\nOX\n''') == 'No'\nassert solution('''3\nOO\nXO\nXO\n''') == 'No'\nassert solution('''2\nXX\nO\nXO\n''') == 'No'\nassert solution('''3\nOO\nXO\nXO\n''') == 'No'\n"
    },
    {
        "number": 700,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\n'''\n"
    },
    {
        "number": 700,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\n    \"\"\"4\nXOOO\nXXOO\nOOOO\nXXXX\nXOOO\nXOOO\nXOXO\nXOXX\n\"\"\"\n) == 'Yes'\n\nassert solution(\n    \"\"\"2\nXX\nOO\nXO\nOX\n\n\"\"\"\n) == 'No'\n"
    },
    {
        "number": 700,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''4\nXOOO\nXXOO\nOOOO\nXXXX''') == 'Yes'\nassert solution('''2\nXX\nOO\nXO\nOX\n\n''') == 'No'\nassert solution('''2\nX\nO\nX\nO\n\n''') == 'Yes'\nassert solution('''3\nXOO\nXXO\nXOX\n''') == 'Yes'\nassert solution('''4\nXOOO\nXXOO\nOOOO\nXXXX\n''') == 'No'\n"
    },
    {
        "number": 700,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('X') == 'X'\nassert solution('XXXX') == 'Yes'\nassert solution('XXXXXXXXXXXX') == 'Yes'\nassert solution('XXXXXXXXXXXXXXXX') == 'No'\n"
    },
    {
        "number": 700,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('XOOO\\nXXOO\\nOOOO\\nXXXX\\nXOOO\\nXOOO\\nXOXO\\nXOXX') == 'Yes'\nassert solution('XX\\nOO\\nXO\\nXO\\n') == 'No'\n\n\n-----"
    },
    {
        "number": 700,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''1\n
    },
    {
        "number": 700,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('4\\nXOOO\\nXXOO\\nOOOO\\nXXXX\\nXOOO\\nXOOO\\nXOXO\\nXOXX\\n') == 'Yes'\nassert solution('2\\nXX\\nOO\\nXO\\nOX\\n') == 'No'\n\n\n\"\"\"\n"
    },
    {
        "number": 700,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('XOOO\\nXXOO\\nOOOO\\nXXXX\\nXOOO\\nXOOO\\nXOXO\\nXOXX') == 'Yes'\nassert solution('XOOO\\nXXOO\\nOOOO\\nXXXX\\nXOOO\\nXOOO\\nXOXO\\nXOXX') == 'No'\nassert solution('XX\\nOO\\nXO\\nOX\\n') == 'No'\nassert solution('XXXX\\nXXXX\\nXXXX\\nXXXX\\nXXXX\\nXXXX\\nXXXX\\nXXXX') == 'Yes'\nassert solution('XXXX\\nXXXX\\nXXXX\\nXXXX\\nXXXX\\nXXXX\\nXXXX\\nXXXX') == 'No'\n"
    },
    {
        "number": 701,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"automaton\") == \"automaton\"\nassert solution(\"array\") == \"array\"\nassert solution(\"both\") == \"both\"\nassert solution(\"need tree\") == \"need tree\"\nassert solution(\"tree\") == \"need tree\"\n\n\"\"\"\n\nfrom typing import List\n\nfrom solutions.kyu_7.reconstruct_string_from_index import solution\n\nEXPECTED_SOLUTIONS = ['automaton', 'array', 'both', 'need tree', 'tree']\n"
    },
    {
        "number": 701,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"automaton\") == \"automaton\"\nassert solution(\"array\") == \"array\"\nassert solution(\"both\") == \"both\"\n\n\n\"\"\"\nimport sys\nfrom collections import defaultdict\n\nclass SuffixArray:\n    def __init__(self, word):\n        self.word = word\n        self.suffix_array = [0] * len(word)\n        self.compute_suffix_array()\n\n    def compute_suffix_array(self):\n        for i in range(1, len(self.word)):\n            j = i\n            while j > 0 and self.word[j] == self.word[j - 1]:\n                j -= 1\n            self.suffix_array[j] = i\n\n    def get_suffix_of(self, i):\n        return self.word[self.suffix_array[i]:]\n\n    def swap(self, i, j):\n        self.suffix_array[self.suffix_array[j]], self.suffix_array[self.suffix_array[i]] = self.suffix_array[self.suffix_array[i]], self.suffix_array[self.suffix_array[j]]\n        self.suffix_array[i], self.suffix_array[j] = self.suffix_array[j], self.suffix_array[i]\n\n    def get_suffix_tree(self, i):\n        if self.suffix_array[i] == i:\n            return [self.suffix_array[i]]\n        else:\n            return self.get_suffix_tree(self.suffix_array[i]) + self.get_suffix_tree(self.suffix_array[i])\n\n    def get_suffix_tree_len(self, i):\n        length = 0\n        for j in self.get_suffix_tree(i):\n            length += len(self.get_suffix_of(j))\n        return length\n\n    def get_suffix_tree_len2(self, i):\n        length = 0\n        for j in self.get_suffix_tree(i):\n            length += len(self.get_suffix_of(j))\n        return length\n\n    def get_suffix_tree_len3(self, i):\n        for j in self.get_suffix_tree(i):\n            length += len(self.get_suffix_of(j))\n        return length"
    },
    {
        "number": 701,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n\nimport sys"
    },
    {
        "number": 701,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"both\") == \"both\"\nassert solution(\"automaton\") == \"automaton\"\nassert solution(\"array\") == \"array\"\nassert solution(\"need\") == \"need tree\"\nassert solution(\"hot\") == \"need tree\"\n\n\n-----Addenda-----\n\nIf the problem can be solved with the use of both data structures, then the answer to this problem is that they both can do it.\n\nIf the problem can be solved with the use of only one of the data structures, then the answer to this problem is that they need to solve it, in order to find the right answer, they need to first use the one of the data structures, and then use the other one.\n\nIf the problem can not be solved by any of the data structures, then the answer to this problem is that they cannot solve it.\n\n\n-----Hint-----\n\nThis is a classic problem of implementing dynamic algorithms. Try to come up with your own approach, and think about the time and space complexity of your solution.\n\n\n\"\"\"\n"
    },
    {
        "number": 701,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(input()) == output()\n\"\"\"\n"
    },
    {
        "number": 701,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('automaton') == 'automaton'\nassert solution('array') == 'array'\nassert solution('both') == 'both'\nassert solution('need') == 'need tree'\n"
    },
    {
        "number": 701,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('automaton') == 'automaton'\nassert solution('array') == 'array'\nassert solution('both') == 'both'\nassert solution('need tree') == 'need tree'\nassert solution('hot') == 'oth'\n"
    },
    {
        "number": 701,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"automaton\") == \"automaton\"\nassert solution(\"array\") == \"array\"\nassert solution(\"both\") == \"both\"\nassert solution(\"need\") == \"need tree\"\nassert solution(\"hot\") == \"oth\""
    },
    {
        "number": 701,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"both\") == \"automaton\"\nassert solution(\"both\") == \"array\"\nassert solution(\"both\") == \"need tree\"\n\n\"\"\""
    },
    {
        "number": 701,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''both\nhot\n''') == 'both'\nassert solution('''automaton\ntomat\n''') == 'automaton'\nassert solution('''array\narary\n''') == 'array'\n\nprint(solution('''both\nhot\n'''))\nprint(solution('''need\ntree\n'''))\nprint(solution('''both\noth\n'''))\nprint(solution('''need\narray\n'''))\nprint(solution('''need\nautomaton\n'''))\nprint(solution('''need\ntree\n'''))\nprint(solution('''need\nautomaton\n'''))\nprint(solution('''need\narray\n'''))\nprint(solution('''need\narray\n'''))\nprint(solution('''need\narray\n'''))\nprint(solution('''need\nautomaton\n'''))\nprint(solution('''need\nautomaton\n'''))\nprint(solution('''need\narray\n'''))\nprint(solution('''need\narray\n'''))\nprint(solution('''need\nautomaton\n'''))\nprint(solution('''need\nautomaton\n'''))\nprint(solution('''need\narray\n'''))\nprint(solution('''need\narray\n'''))\nprint(solution('''need\narray\n'''))\nprint(solution('''need\nautomaton\n'''))\nprint(solution('''need\nautomaton\n'''))\nprint(solution('''need\narray\n'''))\nprint(solution('''need\narray\n'''))\nprint(solution('''need\narray\n'''))\nprint(solution('''need\nautomaton\n'''))\nprint(solution('''need\nautomaton\n'''))\nprint(solution('''need\narray\n'''))\nprint(solution('''need\narray\n'''))\nprint(solution('''need\narray\n'''))\nprint(solution('''need\nautomaton\n'''))\nprint(solution('''need\nautomaton\n'''))\nprint(solution('''need\narray\n'''))\nprint(solution('''need\narray\n'''))\nprint(solution('''need\narray\n'''))\nprint(solution('''need\nautomaton\n'''))\nprint(solution('''need\nautomaton\n'''))\nprint(solution('''need\narray\n'''))\nprint(solution('''need\narray\n'''))\nprint(solution('''need\narray\n'''))\nprint(solution('''need\nautomaton\n'''))\nprint(solution('''need\nautomaton\n'''))\nprint(solution('''need\narray\n'''))\nprint(solution('''need\narray\n'''))\nprint(solution('''need\narray\n'''))\nprint(solution('''need\nautomaton\n'''))\nprint(solution('''need\nautomaton\n'''))\nprint(solution('''need\narray\n'''))\nprint(solution('''need\narray\n'''))\nprint(solution('''need\narray\n'''))\nprint(solution('''need\nautomaton\n'''))\nprint(solution('''need\nautomaton\n'''))\nprint(solution('''need\narray\n'''))\nprint(solution('''need\narray\n'''))\nprint(solution('''need\narray\n'''))\nprint(solution('''need\nautomaton\n'''))\nprint(solution('''need\nautomaton\n'''))\nprint(solution('''need\narray\n'''))\nprint(solution('''need\narray\n'''))\nprint(solution('''need\narray\n'''))\nprint(solution('''need\nautomaton\n'''))\nprint(solution('''need\nautomaton\n'''))\nprint(solution('''need\narray\n'''))\nprint(solution('''need\narray\n'''))\nprint(solution('''need\narray\n'''))\nprint(solution('''need\nautomaton\n'''))\nprint(solution('''need\nautomaton\n'''))\nprint(solution('''need\narray\n'''))\nprint(solution('''need\narray\n'''))\nprint(solution('''need\narray\n'''))\nprint(solution('''need\nautomaton\n'''))\nprint(solution('''need\nautomaton\n'''))\nprint(solution('''need\narray\n'''))\nprint(solution('''need\narray\n'''))\nprint(solution('''need\narray\n'''))\nprint(solution('''need\nautomaton\n'''))\nprint(solution('''need\nautomaton\n'''))\nprint(solution('''need\narray\n'''))\nprint(solution('''need\narray\n'''))\nprint(solution('''need\narray\n'''))\nprint(solution('''need\nautomaton\n'''))\nprint(solution('''need\nautomaton\n'''))\nprint(solution('''need\narray\n'''))\nprint(solution('''need\narray\n'''))\nprint(solution('''need\narray\n'''))\nprint(solution('''need\nautomaton\n'''))\nprint(solution('''need\nautomaton\n'''))\nprint(solution('''need\narray\n'''))\nprint(solution('''need\narray\n'''))\n"
    },
    {
        "number": 702,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\n'''1''') == 'YES'\nassert solution(\n'''2''') == 'YES'\nassert solution(\n'''5''') == 'NO'\nassert solution(\n'''5''') == 'YES'\nassert solution(\n'''5''') == 'YES'\n"
    },
    {
        "number": 702,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''3''') == 'YES'\nassert solution('''4''') == 'NO'\nassert solution('''5''') == 'YES'\nassert solution('''1''') == 'NO'\nassert solution('''2''') == 'NO'\n"
    },
    {
        "number": 702,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''3''') == 'YES'\nassert solution('''4''') == 'YES'\nassert solution('''5''') == 'NO'\nassert solution('''#.#''') == 'YES'\nassert solution('''##.#''') == 'NO'\n"
    },
    {
        "number": 702,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('3') == 'NO'\nassert solution('5') == 'YES'\nassert solution('1') == 'NO'\nassert solution('2') == 'NO'\nassert solution('3') == 'NO'\n"
    },
    {
        "number": 702,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''\n3\n"
    },
    {
        "number": 702,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"NO\"\nassert solution(\"1\") == \"NO\"\nassert solution(\"3\") == \"NO\"\nassert solution(\"3\\n#.#\\n...\\n#.#\\n\") == \"NO\"\nassert solution(\"4\\n##.#\\n#...\\n####\\n##.#\\n\") == \"NO\"\n"
    },
    {
        "number": 702,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('3') == 'YES'\nassert solution('4') == 'NO'\nassert solution('5') == 'YES'\nassert solution('6') == 'NO'\nassert solution('7') == 'YES'\n"
    },
    {
        "number": 702,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('3') == 'YES'\nassert solution('4') == 'NO'\nassert solution('5') == 'YES'\nassert solution('6') == 'NO'\nassert solution('7') == 'YES'\n"
    },
    {
        "number": 702,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''5''') == 'YES'\nassert solution('''3''') == 'NO'\nassert solution('''4''') == 'YES'\nassert solution('''5''') == 'NO'\nassert solution('''7''') == 'NO'\n"
    },
    {
        "number": 702,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''3''') == 'YES'\nassert solution('''4''') == 'NO'\nassert solution('''5''') == 'NO'\nassert solution('''7''') == 'YES'\nassert solution('''8''') == 'NO'\n"
    },
    {
        "number": 703,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('5 3 3 3') == '4'\nassert solution('100 100 1 1000') == '1'\nassert solution('100 100 1 1000') == '1'\nassert solution('3 10 1 3') == '2'\nassert solution('3 10 1 3') == '2'\n"
    },
    {
        "number": 703,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(input()) == input()\n\n\"\"\"\n"
    },
    {
        "number": 703,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('3 10 3 3') == '2'\nassert solution('3 10 1 3') == '3'\nassert solution('100 100 1 1000') == '1'\n\n\n\n'''\n"
    },
    {
        "number": 703,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('5 10 3 3') == '2'\nassert solution('3 10 1 3') == '3'\nassert solution('100 100 1 1000') == '1'\nassert solution('100 100 1 10000') == '0'\nassert solution('100 100 1 100000') == '0'\n"
    },
    {
        "number": 703,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 703,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''3 10 3 3''') == '2'\nassert solution('''3 10 1 3''') == '3'\nassert solution('''100 100 1 1000''') == '1'\n\n\n\"\"\"\n\nk,a,b,v = map(int, input().split())\n"
    },
    {
        "number": 703,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdin\n\"\"\"\n"
    },
    {
        "number": 703,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"3 10 3 3\") == \"2\"\nassert solution(\"3 10 1 3\") == \"3\"\nassert solution(\"100 100 1 1000\") == \"1\"\nassert solution(\"3 10 4 2\") == \"2\"\nassert solution(\"3 10 1 2\") == \"3\"\n"
    },
    {
        "number": 703,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''3 10 3 3''') == '2'\nassert solution('''3 10 1 3''') == '3'\nassert solution('''100 100 1 1000''') == '1'\nassert solution('''100 100 1 1000''') == '2'\nassert solution('''100 100 1 1000''') == '2'\n"
    },
    {
        "number": 703,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 704,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == expected\nprint(solution(stdin))\n\n'''\n\nfrom collections import deque\n"
    },
    {
        "number": 704,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('4\\n2 1 6 4\\n3 4 4 2\\n') == '3'\nassert solution('4\\n10 1 10\\n1 10 1 1\\n') == '6'\nassert solution('4\\n10 1 10\\n1 11 4 2\\n') == '3'\nassert solution('3\\n10 1 10\\n1 10 1 1\\n') == '3'\n\n\n-----\n\n[n]\n\n[a_1, a_2,..., a_n]\n\n[r_1, c_1, r_2, c_2]\n\n[r_1, c_1, r_2, c_2]\n\n|-----------------------------------------|\n|                   |                    |\n|                   |                    |\n|                   |                    |\n|-----------------------------------------|\n|           |   |   |   |           |\n|                   |   |   |             |\n|                    |   |   |             |\n|                    |   |   |             |\n|-----------------------------------------|"
    },
    {
        "number": 704,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == \"\"\n\n\"\"\"\n"
    },
    {
        "number": 704,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(input()) == output\n"
    },
    {
        "number": 704,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''4\n2 1 6 4''') == '3'\nassert solution('''4\n10 5 6 4''') == '3'\nassert solution('''3\n10 1 10\n1 10 1 1''') == '6'\n'''"
    },
    {
        "number": 704,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1\\n1\\n1\\n1') == '1'\nassert solution('2\\n3\\n4\\n5') == '2'\nassert solution('2\\n2\\n2\\n2') == '0'\nassert solution('1\\n2\\n2\\n2') == '2'\nassert solution('1\\n1\\n1\\n1') == '3'\n"
    },
    {
        "number": 704,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''4\n2 1 6 4''') == '3'\nassert solution('''4\n10 5 6 4''') == '6'\nassert solution('''3\n10 1 10''') == '3'\nassert solution('''4\n10 1 10\n1 10 1 1''') == '3'\nassert solution('''4\n10 1 10\n1 10 1 1''') == '3'\n"
    },
    {
        "number": 704,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''4\n2 1 6 4''') == '3'\nassert solution('''4\n10 5 6 4''') == '6'\nassert solution('''3\n10 1 10\n1 10 1 1''') == '3'\nassert solution('''4\n10 1 10\n1 10 1 1''') == '3'\n\n\n\n\n\n'''\n"
    },
    {
        "number": 704,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1 1 1 1') == '0'\nassert solution('1 1 1 2') == '1'\nassert solution('1 1 1 3') == '1'\nassert solution('1 1 1 4') == '1'\nassert solution('1 1 1 5') == '1'\n"
    },
    {
        "number": 704,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('3\\n4\\n1 2\\n2 3\\n4\\n1 1 1 1\\n1 1 1 2\\n1 1 1 3\\n2 3 3 3\\n1 1 1 1') == 'Left'\nassert solution('4\\n10 1 10\\n1 10 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1"
    },
    {
        "number": 705,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"2\\n1 2 3\\n4 5 6\\n\") == \"Karen\"\nassert solution(\"2\\n9 7 5 3 1\\n4 5 6\\n\") == \"Karen\"\nassert solution(\"3\\n1 2 3\\n4 5 6\\n\") == \"Koyomi\"\nassert solution(\"3\\n2 4 6 8 10\\n9 7 5 3 1\\n\") == \"Koyomi\"\nassert solution(\"2\\n2 4 6 8 10\\n9 7 5 3 1\\n\") == \"Koyomi\"\n"
    },
    {
        "number": 705,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == \"Karen\"\n"
    },
    {
        "number": 705,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('5\\n2 4 6 8 10\\n9 7 5 3 1') == 'Karen'\nassert solution('3\\n1 2 3\\n4 5 6\\n') == 'Koyomi'\nassert solution('5\\n2 4 6 8 10\\n9 7 5 3 1\\n9 7 5 3 1\\n9 7 5 3 1\\n9 7 5 3 1\\n9 7 5 3 1') == 'Koyomi'\nassert solution('4\\n2 4 6 8 10\\n9 7 5 3 1\\n9 7 5 3 1\\n9 7 5 3 1\\n9 7 5 3 1') == 'Karen'\nassert solution('6\\n2 4 6 8 10\\n9 7 5 3 1\\n9 7 5 3 1\\n9 7 5 3 1\\n9 7 5 3 1\\n9 7 5 3 1\\n9 7 5 3 1') == 'Koyomi'\n\n\n-----Best Solutions-----"
    },
    {
        "number": 705,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"\"\"3\n1 2 3\n4 5 6\n\"\"\") == \"Koyomi\"\n\nassert solution(\"\"\"5\n2 4 6 8 10\n9 7 5 3 1\n\"\"\") == \"Koyomi\"\n\"\"\"\n"
    },
    {
        "number": 705,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('3\\n1 2 3\\n4 5 6') == 'Karen'\nassert solution('5\\n2 4 6 8 10\\n9 7 5 3 1') == 'Karen'\nassert solution('5\\n2 4 6 8 10\\n9 7 5 3 1\\n3 4 5 6') == 'Koyomi'\nassert solution('3\\n1 2 3\\n4 5 6\\n3 4 5 6') == 'Karen'\nassert solution('5\\n2 4 6 8 10\\n9 7 5 3 1\\n3 4 5 6') == 'Karen'\n"
    },
    {
        "number": 705,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''3\n1 2 3\n4 5 6''') == 'Karen'\nassert solution('''5\n2 4 6 8 10\n9 7 5 3 1''') == 'Karen'\nassert solution('''5\n2 4 6 8 10\n9 7 5 3 1''') == 'Karen'\nassert solution('''5\n2 4 6 8 10\n9 7 5 3 1\n7 5 3 1\n9 7 5 3 1\n3 1\n9 7 5 3 1''') == 'Karen'\nassert solution('''2\n1 2\n3 4''') == 'Karen'\n"
    },
    {
        "number": 705,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(input) == 'Karen'\nassert solution(input) == 'Karen' # \"Karen\" or \"Koyomi\" is a correct return value\n\"\"\"\nimport sys\n"
    },
    {
        "number": 705,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1 2 3 4 5 6\\n4 5 6 7 8 9 10\\n') == 'Karen'\nassert solution('5\\n2 4 6 8 10\\n9 7 5 3 1\\n') == 'Karen'\nassert solution('5\\n2 4 6 8 10\\n9 7 5 3 1\\n') == 'Karen'\n\"\"\"\nimport sys"
    },
    {
        "number": 705,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == 'Karen'\nassert solution('4\\n1 2 3 4\\n2 3 4 5') == 'Koyomi'\n"
    },
    {
        "number": 705,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''3\n1 2 3\n4 5 6\n''') == \"Koyomi\"\n\nassert solution('''5\n2 4 6 8 10\n9 7 5 3 1\n''') == \"Karen\"\n\nassert solution('''2\n1 2\n2 3\n3 4\n4 5\n''') == \"Karen\"\n'''\nimport sys\nstdin = sys.stdin.read()\nprint(solution(stdin))\n'''"
    },
    {
        "number": 706,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdin[:4]\n"
    },
    {
        "number": 706,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 706,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('3 4 1 1') == '7'\nassert solution('3 4 2 1') == '25'\nassert solution('3 4 3 1') == '79'\n\nprint(\"Test passed.\")\n"
    },
    {
        "number": 706,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"3 4 1 1\") == \"7\"\nassert solution(\"3 4 2 1\") == \"25\"\nassert solution(\"3 4 3 1\") == \"79\""
    },
    {
        "number": 706,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''3 4 1 1''') == '7'\nassert solution('''3 4 2 1''') == '25'\nassert solution('''3 4 3 1''') == '79'\nassert solution('''3 4 4 1''') == '30'\nassert solution('''3 4 5 1''') == '53'\n"
    },
    {
        "number": 706,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('3 4 1 1') == '7'\nassert solution('3 4 2 1') == '25'\nassert solution('3 4 3 1') == '79'\nassert solution('3 4 4 1') == '919'\n\n\n\n\"\"\"\n"
    },
    {
        "number": 706,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('3 4 1 1') == '7'\nassert solution('3 4 2 1') == '25'\nassert solution('3 4 3 1') == '79'\n\"\"\"\n"
    },
    {
        "number": 706,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('3 4 1 1') == '7'\nassert solution('3 4 2 1') == '25'\nassert solution('3 4 3 1') == '79'\nassert solution('3 4 1 100000000') == '99998'\nassert solution('3 4 1 1000000000') == '99998'\n"
    },
    {
        "number": 706,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 706,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 707,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(input) == expect\n"
    },
    {
        "number": 707,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"3 5\\n3 12 18\\n2 6 5 3 3\\n\") == \"YES\\n3 4\\n\"\nassert solution(\"4 2\\n1 5 17 19\\n4 5\\n\") == \"NO\\n\"\nassert solution(\"3 5\\n3 12 18\\n2 6 5 3 3\\n\") == \"YES\\n1 1\\n\"\nassert solution(\"4 2\\n1 5 17 19\\n2 1\\n\") == \"NO\\n\"\nassert solution(\"3 2\\n1 2 3\\n1 2\\n\") == \"NO\\n\"\n"
    },
    {
        "number": 707,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 707,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('3 5\\n3 12 18\\n2 6 5 3 3\\n') == 'YES\\n3 4\\n'\nassert solution('4 2\\n1 5 17 19\\n4 5\\n') == 'NO\\n'\nassert solution('4 2\\n1 5 17 19\\n2 1\\n') == 'YES\\n1 1\\n'\nassert solution('2 4\\n1 2 3 4\\n2 2\\n') == 'NO\\n'"
    },
    {
        "number": 707,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('3 5') == 'YES\\n3 4'\nassert solution('4 2') == 'NO'\nassert solution('1 5 17 19') == 'YES\\n1 1'\nassert solution('2 1') == 'NO'\nassert solution('5 3') == 'NO'\n"
    },
    {
        "number": 707,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''3 5\n3 12 18\n2 6 5 3 3\n''') == \"YES\"\nassert solution('''4 2\n1 5 17 19\n4 5\n''') == \"NO\"\nassert solution('''4 2\n1 5 17 19\n2 1\n''') == \"YES\"\nassert solution('''5 2\n1 7 15 19 22 25\n2 4\n''') == \"NO\"\nassert solution('''5 2\n1 7 15 19 22 25\n2 4\n''') == \"YES\"\n"
    },
    {
        "number": 707,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''3 5\n3 12 18\n2 6 5 3 3\n''') == 'YES'\nassert solution('''4 2\n1 5 17 19\n4 5\n''') == 'NO'\nassert solution('''3 2\n1 5 17 19\n2 1\n''') == 'NO'\nassert solution('''3 2\n1 5 17 19\n2 6\n''') == 'NO'\nassert solution('''3 4\n1 5 17 19\n2 1\n''') == 'YES'\n"
    },
    {
        "number": 707,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''3 5\n3 12 18\n2 6 5 3 3\n''') == 'YES'\nassert solution('''4 2\n1 5 17 19\n4 5\n''') == 'NO'\nassert solution('''4 2\n1 5 17 19\n2 1\n''') == 'YES'\nassert solution('''4 2\n1 5 17 19\n2 4\n''') == 'NO'\nassert solution('''5 2\n1 5 17 19\n2 4\n''') == 'YES'\n"
    },
    {
        "number": 707,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(input()) == \"NO\"\nassert solution(input()) == \"YES\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"YES\"\nassert solution(input()) == \"NO\"\n"
    },
    {
        "number": 707,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''3 5\n3 12 18\n2 6 5 3 3\n''') == 'YES\\n3 4'\nassert solution('''4 2\n1 5 17 19\n4 5\n''') == 'NO'\nassert solution('''4 2\n1 5 17 19\n2 1\n''') == 'YES\\n1 1'\nassert solution('''3 10\n1 5 17 19\n2 5\n''') == 'NO'\nassert solution('''3 10\n2 1\n1 5 17 19\n2 5\n''') == 'YES\\n1 1'\n"
    },
    {
        "number": 708,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('7 11\\n2 4 7 3') == '2 7 1 3 6 5 4\\n7 1 5 4 6 2 3\\n'\nassert solution('999 999\\n10 20 30 40') == '-1\\n'\n\n\n\n-----Alternate Solutions-----\n"
    },
    {
        "number": 708,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == expected\n\"\"\""
    },
    {
        "number": 708,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('7 11\\n2 4 7 3\\n') == '2 7 1 3 6 5 4\\n7 1 5 4 6 2 3\\n'\nassert solution('1000 999\\n10 20 30 40\\n') == '-1\\n'\n\n\n\n'''\n"
    },
    {
        "number": 708,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''7 11\n2 4 7 3''') == '2 7 1 3 6 5 4'\nassert solution('''1000 999\n10 20 30 40''') == '-1'\nassert solution('''10 19 22 29''') == '10 19'\nassert solution('''11 10 9 12 19 20 19 22''') == '10 19 19 22'\nassert solution('''12 11 11 19 22 29 28 19 19''') == '10 19 19 19 22 19 22'\n"
    },
    {
        "number": 708,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n'''"
    },
    {
        "number": 708,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('7 11\\n2 4 7 3') == '2 7 1 3 6 5 4'\nassert solution('1000 999\\n10 20 30 40') == '-1'\n\n\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 708,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 708,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''7 11\n2 4 7 3''') == '2 7 1 3 6 5 4'\nassert solution('''1000 999\n10 20 30 40''') == '-1'\n'''\n\nn, k = [int(x) for x in stdin.split()]\na, b, c, d = [int(x) for x in stdin.split()]\n"
    },
    {
        "number": 708,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('6 8\\n1 2 3 4 5\\n1 2 3 4 5 6') == '3 7 1 3 6 5 4'\nassert solution('6 9\\n1 2 3 4 5 6 7\\n1 2 3 4 5 6 7 8 9\\n1 2 3 4 5 6 7 8 9 10') == '2 7 1 3 6 5 4'\nassert solution('6 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31') == '3 7 1 3 6 5 4'\nassert solution('10 10\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31') == '2 7 1 3 6 5 4'\n\n\n-----\n\n\"\"\"\n"
    },
    {
        "number": 708,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('7 11\\n2 4 7 3') == '2 7 1 3 6 5 4'\n\n'''\n\nimport sys\nfrom collections import defaultdict"
    },
    {
        "number": 709,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(5) == \"2\"\nassert solution(8) == \"1\"\nassert solution(3) == \"0\"\nassert solution(5) == \"0\""
    },
    {
        "number": 709,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('5') == '2'\nassert solution('8') == '1'\n"
    },
    {
        "number": 709,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''5''') == '2'\nassert solution('''8''') == '1'\nassert solution('''0''') == '0'\nassert solution('''1''') == '1'\nassert solution('''20''') == '18'\n'''\n"
    },
    {
        "number": 709,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''5''') == '2'\nassert solution('''8''') == '1'\nassert solution('''1''') == '1'\nassert solution('''2''') == '2'\nassert solution('''3''') == '2'\n"
    },
    {
        "number": 709,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == ''\nassert solution('''1\n''') == '1'\nassert solution('''1\n2\n3\n''') == '1'\nassert solution('''1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n''') == '2'\nassert solution('''1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1"
    },
    {
        "number": 709,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('5') == '2'\nassert solution('8') == '1'\n"
    },
    {
        "number": 709,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('5') == '2'\nassert solution('8') == '1'"
    },
    {
        "number": 709,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"5\") == \"2\"\nassert solution(\"8\") == \"1\"\nassert solution(\"7\") == \"1\"\nassert solution(\"9\") == \"2\"\n"
    },
    {
        "number": 709,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1') == 1\nassert solution('2') == 1\nassert solution('5') == 2\nassert solution('8') == 1\nassert solution('10') == 2\n"
    },
    {
        "number": 709,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 710,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('ACGT') == ''\nassert solution('ATG') == '1'\nassert solution('CTG') == '2'\nassert solution('GTG') == '3'\n"
    },
    {
        "number": 710,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('ZCTH') == '2'\nassert solution('AFBAKC') == '16'"
    },
    {
        "number": 710,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"ZCTH\") == 2\nassert solution(\"AFBAKC\") == 16\nassert solution(\"ZDATG\") == 5\nassert solution(\"ABC\") == 0\nassert solution(\"ABCD\") == 0\n"
    },
    {
        "number": 710,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('AAAABBBCCDD') == 'ABBCCDD'\nassert solution('ABCAB') == 'AB'\nassert solution('Z') == 'Z'\nassert solution('A') == 'A'\nassert solution('T') == 'T'\n"
    },
    {
        "number": 710,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('ZCTH') == '2'\nassert solution('AFBAKC') == '16'\nassert solution('ZDATG') == '5'\nassert solution('AFKJAB') == '12'\n"
    },
    {
        "number": 710,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == expected\nprint(solution(stdin))\n"
    },
    {
        "number": 710,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"ZCTH\") == \"ACTG\"\nassert solution(\"ZDATG\") == \"ACTG\"\nassert solution(\"AFBAKC\") == \"ACTG\"\nassert solution(\"WECIRG\") == \"ACTG\"\nassert solution(\"RUHITI\") == \"ACTG\"\n"
    },
    {
        "number": 710,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"ZCTH\") == \"2\"\nassert solution(\"ZDATG\") == \"5\"\nassert solution(\"AFBAKC\") == \"16\"\n\"\"\"\n"
    },
    {
        "number": 710,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\n'''4\nZCTH'''\n) == '2'\n\nassert solution(\n'''5\nZDATG'''\n) == '5'\n\nassert solution(\n'''6\nAFBAKC'''\n) == '16'\n\nassert solution(\n'''7\nABBABABCD'''\n) == '13'\n\nassert solution(\n'''8\nGTSRGSGJ'''\n) == '8'"
    },
    {
        "number": 710,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\n    \"ZCTH\"\n) == \"2\"\nassert solution(\n    \"ZDATG\"\n) == \"5\"\nassert solution(\n    \"AFBAKC\"\n) == \"16\"\n"
    },
    {
        "number": 711,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(input) == output\n"
    },
    {
        "number": 711,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('2 6') == '4'\n\"\"\""
    },
    {
        "number": 711,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"2 6\") == \"4\"\n\nassert solution(\"1 11\") == \"4\"\n\nassert solution(\"10 100\") == \"4\"\n\nassert solution(\"1 100\") == \"0\"\n\nassert solution(\"1 1000\") == \"0\""
    },
    {
        "number": 711,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('2 6') == '4'\n\"\"\"\n"
    },
    {
        "number": 711,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"2 6\") == \"4\"\n"
    },
    {
        "number": 711,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == '4'\n\"\"\""
    },
    {
        "number": 711,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"2 6\") == \"4\"\nassert solution(\"1 6\") == \"1\"\nassert solution(\"2 5\") == \"0\"\nassert solution(\"2 4\") == \"1\"\nassert solution(\"3 2\") == \"1\"\n"
    },
    {
        "number": 711,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('2 6') == '4'\nassert solution('100000000000 100000000000') == '1'\nassert solution('100000000000 100000000000') == '1'\nassert solution('100000000000 100000000000') == '1'\nassert solution('100000000000 100000000000') == '1'\n"
    },
    {
        "number": 711,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''2 6''') == '4'\nassert solution('''5 10''') == '3'\nassert solution('''2 6''') == '4'\nassert solution('''5 10000000000000000''') == '1'\nassert solution('''5 1''') == '5'\n"
    },
    {
        "number": 711,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(input(\"\")) == \"\""
    },
    {
        "number": 712,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1 0.50 1\\n') == '0.5'\nassert solution('1 0.50 4\\n') == '0.9375'\nassert solution('4 0.20 2\\n') == '0.4'\nassert solution('1 0.50 0.5\\n') == '0.5'\nassert solution('2 0.50 0.5\\n') == '0.5'\n"
    },
    {
        "number": 712,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('1 0.50 1') == '0.5'\nassert solution('1 0.50 4') == '0.9375'\nassert solution('4 0.20 2') == '0.4'\n"
    },
    {
        "number": 712,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1 0.50 1') == '0.5'\nassert solution('1 0.50 4') == '0.9375'\nassert solution('4 0.20 2') == '0.4'\nassert solution('4 0.20 7') == '0.5'\nassert solution('4 0.20 2.99') == '0.48'\n"
    },
    {
        "number": 712,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('4 0.20 2') == '0.4'\nassert solution('1 0.50 1') == '0.5'\nassert solution('1 0.50 4') == '0.9375'\nassert solution('1 0.50 0') == '0.5'\nassert solution('1 0.50 0.1') == '0.5'\n"
    },
    {
        "number": 712,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1 0.50 1\\n') == '0.5'\nassert solution('1 0.50 4\\n') == '0.9375'\nassert solution('4 0.20 2\\n') == '0.4'\n\n\"\"\""
    },
    {
        "number": 712,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''1 0.50 1\n''') == '0.5'\nassert solution('''1 0.50 4\n''') == '0.9375'\nassert solution('''4 0.20 2\n''') == '0.4'\n\n'''\n"
    },
    {
        "number": 712,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('1 0.50 1') == '0.5'\nassert solution('1 0.50 4') == '0.9375'\nassert solution('4 0.20 2') == '0.4'\nprint(solution(stdin))\n"
    },
    {
        "number": 712,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1 0.50 1') == '0.5'\nassert solution('1 0.50 4') == '0.9375'\nassert solution('4 0.20 2') == '0.4'\n"
    },
    {
        "number": 712,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1 0.50 1') == '0.5'\nassert solution('1 0.50 4') == '0.9375'\nassert solution('4 0.20 2') == '0.4'"
    },
    {
        "number": 712,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1 0.5 1') == '0.5'\nassert solution('1 0.5 4') == '0.9375'\nassert solution('4 0.2 2') == '0.4'\n"
    },
    {
        "number": 713,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''0 1\n2 3''') == '1 1'\nassert solution('''3 5\n0 1\n1 2\n2 3\n3 4\n4 5''') == '4 3'\nassert solution('''10 10\n0 1\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10''') == '2 3'\nassert solution('''10 10\n0 1\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10''') == '5 3'\nassert solution('''10 10\n0 1\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10''') == '6 3'\n"
    },
    {
        "number": 713,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"2 2\") == \"3\"\nassert solution(\"4 3\") == \"4\"\n"
    },
    {
        "number": 713,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('4 3') == '4'\nassert solution('2 2') == '3'\nassert solution('1 1') == '0'\nassert solution('1 1') == '0'\nassert solution('1 1') == '0'\n"
    },
    {
        "number": 713,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('2 2') == '3'\nassert solution('4 3') == '4'\nassert solution('5 4') == '5'\nassert solution('3 3') == '3'\nassert solution('1 1') == '1'\n"
    },
    {
        "number": 713,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"2 2\") == \"3\"\nassert solution(\"4 3\") == \"4\"\nassert solution(\"3 2\") == \"0 1\"\nassert solution(\"3 3\") == \"0 1 1\"\nassert solution(\"1 2\") == \"0 2\"\n"
    },
    {
        "number": 713,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('2 2') == '3'\nassert solution('4 3') == '4'\nassert solution('0 1') == '0 1'\nassert solution('0 1 0 1') == '0 1'\nassert solution('0 1 1') == '0 1'\n"
    },
    {
        "number": 713,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('0 1') == '3\\n0 1\\n2 0'\nassert solution('1 2') == '4\\n0 3\\n2 1\\n3 0'\nassert solution('2 3') == '5\\n0 3\\n1 2\\n2 0\\n3 1'\n\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 713,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('2 2') == '3\\n0 1\\n1 2\\n2 0\\n'\nassert solution('4 3') == '4\\n0 3\\n2 1\\n3 0\\n4 2\\n'\n"
    },
    {
        "number": 713,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('') == 0\nassert solution('1 2') == 0\nassert solution('4 3') == 4\nassert solution('0 1') == 3\nassert solution('2 1') == 3\n"
    },
    {
        "number": 713,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(input()) == output()\n\n\"\"\"\n\nimport math\nn, m = map(int, stdin.split())"
    },
    {
        "number": 714,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1\\n1') == '1\\n'\nassert solution('2\\n1') == '1\\n'\nassert solution('2\\n2') == '1\\n'\nassert solution('3\\n3') == '1\\n'\nassert solution('3\\n2') == '1\\n2\\n'\n"
    },
    {
        "number": 714,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('5\\n1 2 3 4 5') == '1 3\\n2 4\\n5 1'\nassert solution('4\\n10 10 10 10') == '1 2\\n3 4'\nassert solution('3\\n1 1 1') == '1 2\\n2 1'\nassert solution('2\\n1 1') == '1 2\\n2 1'\nassert solution('1\\n1') == '1 1'\n"
    },
    {
        "number": 714,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1 2') == '1 3'\nassert solution('1 2 3 4 5') == '1 3'\nassert solution('2 2 2 3 3') == '1 2 3'\nassert solution('2 2 3 3 4') == '1 2 3'\nassert solution('2 2 3 3 4 5 6 7 8') == '1 2 3 4 5'\n"
    },
    {
        "number": 714,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1 5 7 4 4 3') == '1 3'\nassert solution('10 10 10 10') == '1 2'"
    },
    {
        "number": 714,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == expected\n\"\"\"\n"
    },
    {
        "number": 714,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdin\n\n\"\"\"\n\nfrom sys import stdin, stdout"
    },
    {
        "number": 714,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('1 5 7 4 4 3\\n1 5 7 4 4 3') == '1 3'\nassert solution('4 10 10 10 10\\n10 10 10 10 10') == '1 2'\nassert solution('6\\n1 5 7 4 4 3\\n6 2 4 4 3') == '1 3'\nassert solution('6\\n1 5 7 4 4 3\\n1 5 7 4 4 3') == '1 2'\nassert solution('8\\n1 5 7 4 4 3\\n1 5 7 4 4 3') == '1 3'\n"
    },
    {
        "number": 714,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1 5 7 4 4 3') == '1 3\\n6 2\\n4 5'\nassert solution('10 10 10 10') == '1 2\\n3 4'\nassert solution('10 10 10 10') == '1 2\\n3 4'\n\n\n\"\"\"\n"
    },
    {
        "number": 714,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"1 5 7 4 4 3\") == \"1 3\"\nassert solution(\"10 10 10 10\") == \"1 2\"\nassert solution(\"10 10 10 10\") == \"1 2\"\nassert solution(\"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 714,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1 5 7 4 4 3') == '1 3'\nassert solution('10 10 10 10') == '1 2'\nassert solution('10 10 10 10 10') == '1 2 3 4 5 6 7 8'\n\n\n-----\n\n-----\n\n-----\n\n\"\"\"\n"
    },
    {
        "number": 715,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdin[-1]\n\n\n\n\"\"\""
    },
    {
        "number": 715,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"A.VFleaKing_is_the_author_of_this_problem\") == \"D\"\nassert solution(\"B.Picks_is_the_author_of_this_problem\") == \"B\"\nassert solution(\"C.Picking_is_the_author_of_this_problem\") == \"C\"\nassert solution(\"D.Ftiasch_is_cute\") == \"B\"\nassert solution(\"A.ab\") == \"B\"\n"
    },
    {
        "number": 715,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"A.VFleaKing_is_the_author_of_this_problem\") == 'D'\nassert solution(\"B.Picks_is_the_author_of_this_problem\") == 'C'\nassert solution(\"C.Picking_is_the_author_of_this_problem\") == 'B'\nassert solution(\"D.Ftiasch_is_cute\") == 'B'\nassert solution(\"A.ab\") == 'C'\n"
    },
    {
        "number": 715,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('A.VFleaKing_is_the_author_of_this_problem') == 'D'\nassert solution('B.Picks_is_the_author_of_this_problem') == 'C'\nassert solution('C.Picking_is_the_author_of_this_problem') == 'B'\nassert solution('D.Ftiasch_is_cute') == 'C'\nassert solution('A.ab') == 'C'\n"
    },
    {
        "number": 715,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('A.VFleaKing_is_the_author_of_this_problem') == 'D'\nassert solution('B.Picks_is_the_author_of_this_problem') == 'C'\nassert solution('C.Picking_is_the_author_of_this_problem') == 'B'\nassert solution('D.Ftiasch_is_cute') == 'B'\nassert solution('A.ab') == 'C'\n"
    },
    {
        "number": 715,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"A.VFleaKing_is_the_author_of_this_problem\") == \"D\"\nassert solution(\"B.Picks_is_the_author_of_this_problem\") == \"B\"\nassert solution(\"C.Picking_is_the_author_of_this_problem\") == \"C\"\nassert solution(\"D.Ftiasch_is_cute\") == \"D\"\nassert solution(\"A.ab\") == \"B\"\n"
    },
    {
        "number": 715,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('A.VFleaKing_is_the_author_of_this_problem\\nB.Picks_is_the_author_of_this_problem\\nC.Picking_is_the_author_of_this_problem\\nD.Ftiasch_is_cute') == 'D'\nassert solution('A.ab\\nB.abcde\\nC.ab\\nD.abc\\n') == 'B'\nassert solution('A.c\\nB.cc\\nC.c\\nD.c\\n') == 'C'\nassert solution('A.c\\nB.cc\\nC.c\\nD.c\\n') == 'C'\nassert solution('A.c\\nB.cc\\nC.c\\nD.c\\n') == 'C'\n\n\n-----\n"
    },
    {
        "number": 715,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('A.VFleaKing_is_the_author_of_this_problem\\nB.Picks_is_the_author_of_this_problem\\nC.Picking_is_the_author_of_this_problem\\nD.Ftiasch_is_cute\\n') == 'D'\nassert solution('A.ab\\nB.abcde\\nC.ab\\nD.abc\\n') == 'B'\nassert solution('A.c\\nB.cc\\nC.c\\nD.c\\n') == 'B'\nassert solution('A.x\\nB.y\\nC.x\\nD.y\\n') == 'B'"
    },
    {
        "number": 715,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"A.VFleaKing_is_the_author_of_this_problem\") == \"D\"\nassert solution(\"B.Picks_is_the_author_of_this_problem\") == \"C\"\nassert solution(\"C.Picking_is_the_author_of_this_problem\") == \"B\"\nassert solution(\"D.Ftiasch_is_cute\") == \"B\"\nassert solution(\"A.ab\") == \"B\"\n"
    },
    {
        "number": 715,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''\nA.VFleaKing_is_the_author_of_this_problem\nB.Picks_is_the_author_of_this_problem\nC.Picking_is_the_author_of_this_problem\nD.Ftiasch_is_cute\n''') == 'D'\nassert solution('''\nA.ab\nB.abcde\nC.ab\nD.abc\n''') == 'B'\nassert solution('''\nA.c\nB.cc\nC.c\nD.c\n''') == 'B'\n\n\n'''\n"
    },
    {
        "number": 716,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdin\n\n\"\"\"\n"
    },
    {
        "number": 716,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''5 1 4\n1010\n''') == '1'\nassert solution('''5 5 2\n10110\n''') == '0'\nassert solution('''5 1 6\n1011\n''') == '2'\nassert solution('''5 1 1\n0101\n''') == '2'\nassert solution('''10 1 1\n0\n''') == '5'\n"
    },
    {
        "number": 716,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\n    \"4 1 4\\n1010\\n\"\n) == \"1\"\nassert solution(\n    \"5 5 2\\n10110\\n\"\n) == \"0\"\n"
    },
    {
        "number": 716,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('4 1 4\\n1010') == '1'\nassert solution('5 5 2\\n10110') == '0'\n"
    },
    {
        "number": 716,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"4 1 4\\n1010\") == \"1\"\nassert solution(\"5 5 2\\n10110\") == \"0\"\nassert solution(\"4 2 1\\n100\") == \"0\"\nassert solution(\"5 2 1\\n10101\") == \"1\"\nassert solution(\"7 2 1\\n11101010101\") == \"0\""
    },
    {
        "number": 716,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(input) == expected\n\"\"\"\n\nfrom sys import stdin, stdout\n\ninput = stdin.readline\ninput_list = stdin.read().split()\nstdout.write(str(solution(input_list)))"
    },
    {
        "number": 716,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(input) == output\n\"\"\"\n\nN, A, B = [int(x) for x in stdin.split()]\nprint(N - max(A, B) - abs(A - B))\n"
    },
    {
        "number": 716,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == expected\n\"\"\"\n"
    },
    {
        "number": 716,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''4 1 4\n1010''') == '1'\nassert solution('''5 5 2\n10110''') == '0'\n"
    },
    {
        "number": 716,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('4 1 4') == '1'\nassert solution('5 5 2') == '0'\nassert solution('10110') == '1'\nassert solution('10100') == '0'\nassert solution('1020304050') == '2'\n"
    },
    {
        "number": 717,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1\\n2') == '2'\nassert solution('1\\n1') == '2'\nassert solution('1\\n1\\n2') == '3'\nassert solution('1\\n1\\n1') == '2'\nassert solution('3\\n2 1\\n2 1') == '4'\n"
    },
    {
        "number": 717,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == str(4)\n"
    },
    {
        "number": 717,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('3\\n2 2\\n1 2\\n2 2') == 4\nassert solution('2\\n10 1\\n6 5') == 11\nassert solution('2\\n10 1\\n6 5\\n2 2') == 11\nassert solution('2\\n10 1\\n6 5\\n2 2\\n1 2') == 4\nassert solution('3\\n2 2\\n1 2\\n2 2') == 4\n"
    },
    {
        "number": 717,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('3\\n2 2\\n1 2\\n2 2') == '4'\nassert solution('2\\n10 1\\n6 5') == '11'\nassert solution('3\\n10 1\\n6 5') == '11'\nassert solution('2\\n1 1\\n6 1') == '1'\nassert solution('10\\n1 1\\n6 1') == '11'\n"
    },
    {
        "number": 717,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''3\n2 2\n1 2\n2 2''') == '4'\nassert solution('''2\n10 1\n6 5''') == '11'\n'''"
    },
    {
        "number": 717,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''3\n2 2\n1 2\n2 2''') == '4'\nassert solution('''2\n10 1\n6 5\n''') == '11'\nassert solution('''1\n1 1\n2 1\n3 1''') == '3'\nassert solution('''2\n10 1\n6 5\n''') == '5'\nassert solution('''2\n1 1\n2 1\n3 1\n4 1\n''') == '4'\n"
    },
    {
        "number": 717,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdin.split('\\n')[0]\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 717,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('2\\n1 2\\n2 2') == '4'\nassert solution('2\\n1 2\\n2 2') == '4'\nassert solution('10\\n1 2\\n6 5') == '11'\nassert solution('10\\n1 2\\n6 5') == '11'\nassert solution('3\\n2 2\\n1 2\\n2 2') == '4'\n"
    },
    {
        "number": 717,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"5\\n3 2\\n1 2\\n2 2\\n4 2\") == \"6\"\nassert solution(\"2\\n10 1\\n6 5\") == \"11\"\n\"\"\"\n"
    },
    {
        "number": 717,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"\") is None\nassert solution(\"3\") == \"4\"\nassert solution(\"2 2\") == \"4\"\nassert solution(\"1 2\") == \"4\"\nassert solution(\"2 2\") == \"4\"\n"
    },
    {
        "number": 718,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(179) == \"1\"\nassert solution(-1) == \"9\"\nassert solution(18) == \"10\"\nprint(solution(int(input())))\n\n\"\"\"\n"
    },
    {
        "number": 718,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"179\") == \"1\"\nassert solution(\"-1\") == \"9\"\nassert solution(\"18\") == \"10\"\nassert solution(\"1\") == \"0\"\nassert solution(\"0\") == \"0\"\n"
    },
    {
        "number": 718,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('180') == '1'\nassert solution('-1') == '9'\nassert solution('18') == '10'\nassert solution('-18') == '10'\nassert solution('-178') == '10'"
    },
    {
        "number": 718,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"179\") == \"1\"\nassert solution(\"-1\") == \"9\"\nassert solution(\"18\") == \"10\"\nassert solution(\"-27\") == \"26\"\nassert solution(\"50\") == \"10\"\n"
    },
    {
        "number": 718,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('179') == '1'\nassert solution('-1') == '9'\nassert solution('18') == '10'\nassert solution('-42') == '9'\nassert solution('0') == '0'\n"
    },
    {
        "number": 718,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('179') == '1'\nassert solution('-1') == '9'\nassert solution('18') == '10'"
    },
    {
        "number": 718,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('179') == '1'\nassert solution('-1') == '9'\nassert solution('18') == '10'\n\nprint('Test passed')"
    },
    {
        "number": 718,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"179\") == \"1\"\nassert solution(\"-1\") == \"9\"\nassert solution(\"18\") == \"10\"\n"
    },
    {
        "number": 718,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('179') == '1'\nassert solution('-1') == '9'\nassert solution('18') == '10'\n\nprint('Success')\n"
    },
    {
        "number": 718,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"179\") == \"1\"\nassert solution(\"-1\") == \"9\"\nassert solution(\"18\") == \"10\"\nassert solution(\"1\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 719,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(1) == 19\nassert solution(2) == 28\n\nprint(solution(int(input())))\n\"\"\"\n"
    },
    {
        "number": 719,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('') == None\nassert solution('1') == 19\nassert solution('2') == 28\nassert solution('10') == 28\nassert solution('100') == 19\n"
    },
    {
        "number": 719,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1') == 19\nassert solution('2') == 28\n\"\"\"\n\nfrom math import ceil\n"
    },
    {
        "number": 719,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == '28'\n\"\"\"\n\n\"\"\"\nA number is said to be perfect if the sum of its digits equals $10$.\n\nTask\nWrite a function called isPerfect that takes as input a positive integer and returns True if the number is perfect, and False otherwise.\n\nExample\n\nisPerfect(19)  -> True\nisPerfect(28)  -> True\nisPerfect(6)  -> False\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 719,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(input(\"\")) == 19\nassert solution(input(\"\")) == 28\nassert solution(input(\"\")) == 28\nassert solution(input(\"\")) == 19\nassert solution(input(\"\")) == 19\n"
    },
    {
        "number": 719,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(1) == 19\nassert solution(2) == 28\n\n\n\"\"\""
    },
    {
        "number": 719,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('1') == 19\nassert solution('2') == 28\nassert solution('3') == 37\nassert solution('4') == 46\nassert solution('5') == 55\n"
    },
    {
        "number": 719,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(1) == 19\nassert solution(2) == 28\nprint('Testcases passed')"
    },
    {
        "number": 719,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(input()) == ''\nassert solution(input()) == ''\nassert solution(input()) == ''\nassert solution(input()) == ''\nassert solution(input()) == ''\n"
    },
    {
        "number": 719,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(input()) == '19'\nassert solution(input()) == '28'\n\n'''\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('0\\n0\\n0\\n0\\n0') == '0'\nassert solution('0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('3\\n2 0\\n3 1\\n3 4') == '2'\nassert solution('3\\n0 0\\n0 0\\n0 0') == '1'\nassert solution('1\\n5 4') == '5'\n\n\n\"\"\""
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''3\n2 0\n3 1\n3 4''') == '2'\nassert solution('''3\n0 0\n0 0\n0 0''') == '1'\nassert solution('''1\n5 4\n''') == '5'\nassert solution('''3\n2 0\n3 0\n3 0\n''') == '1'\nassert solution('''3\n2 0\n3 0\n3 0\n''') == '1'\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"2 3\") == \"\"\nassert solution(\"2 3 3\") == \"\"\nassert solution(\"2 3 3 4\") == \"\"\nassert solution(\"2 3 3 4 5\") == \"\"\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"3\\n2 0\\n3 1\\n3 4\") == \"2\"\nassert solution(\"3\\n0 0\\n0 0\\n0 0\") == \"1\"\nassert solution(\"3\\n5 4\\n3 4\\n3 4\") == \"5\"\nassert solution(\"1\\n5 4\\n3 4\\n3 4\") == \"5\"\nassert solution(\"3\\n5 4\\n3 4\\n3 4\") == \"5\"\n\n\n-----\n\n##DRAW\n\nGiven two sequences of scores, find the number of times the score drawn is a draw.\n\nIn the first case the scores were 2:0, 3:0, 3:0, 3:0, 3:0, 3:1, 3:1, 3:1, 3:1, 3:1, 3:1, 3:2, 3:2, 3:2, 3:2, 3:2, 3:2, 3:2, 3:3, 3:3, 3:3, 3:3, 3:3, 3:3, 3:3, 3:3, 3:3, 3:3, 3:3, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3:4, 3"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"0\") == \"\"\nassert solution(\"2 0\") == \"2\"\nassert solution(\"3 1\") == \"1\"\nassert solution(\"3 4\") == \"2\"\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1\\n3 1') == '2'\nassert solution('1\\n1 1') == '2'\nassert solution('1\\n0 0') == '1'\nassert solution('3\\n0 0\\n0 0\\n0 0') == '2'\nassert solution('2\\n0 0\\n0 0') == '1'\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1\\n5 4\\n') == '5'\nassert solution('3\\n0 0\\n0 0\\n0 0') == '1'\nassert solution('3\\n0 0\\n0 0\\n0 0\\n0 0') == '1'\nassert solution('3\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0') == '1'\nassert solution('3\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0') == '1'\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('3') == '2'\nassert solution('2 0') == '1'\nassert solution('3 1') == '2'\nassert solution('3 4') == '2'\nassert solution('3 0') == '1'\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"2 1\") == \"3\"\nassert solution(\"2 1\") == \"3\"\nassert solution(\"2 1\") == \"3\"\n\nassert solution(\"2 1\") == \"-5\"\nassert solution(\"2 1\") == \"-5\"\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''2 1''') == '3'\nassert solution('''2 1''') == '3'\nassert solution('''2 1''') == '3'\nassert solution('''2 1''') == '3'\nassert solution('''2 1''') == '3'\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''2 1''') == '3'\nassert solution('''2 1''') == '-5'\nassert solution('''2 1\n2 1''') == '3'\nassert solution('''2 1\n2 1\n10''') == '-5'\nassert solution('''3 5\n5 1 1\n5 2 2\n1 2 3 4 5''') == '6'\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('2 1\\n2 1\\n2') == '3'\nassert solution('2 1\\n2 1\\n10') == '-5'\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"2 1\") == \"3\"\nassert solution(\"2 1\") == \"5\"\nassert solution(\"2 1\") == \"0\"\nassert solution(\"2 1\") == \"-5\"\nassert solution(\"2 1\") == \"-7\"\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"2 1\n2 1\n2\n\"\"\") == \"3\"\nassert solution(\n\"\"\"2 1\n2 1\n10\n\"\"\") == \"-5\"\nassert solution(\n\"\"\"2 1\n2 1\n3\n\"\"\") == \"1\"\nassert solution(\n\"\"\"2 1\n2 1\n100\n\"\"\") == \"100\"\nassert solution(\n\"\"\"2 1\n2 1\n1\n\"\"\") == \"0\"\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"1 2\\n2 1\\n2\") == \"3\"\nassert solution(\"1 2\\n2 1\\n10\") == \"-\"\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('2 1\\n2 1\\n2') == '3'\nassert solution('2 1\\n2 1\\n10') == '-5'\nassert solution('2 1\\n2 1\\n100') == '105'\nassert solution('2 1\\n2 1\\n1000') == '-1001'\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''2 1\n2 1\n2''') == '3'\nassert solution('''2 1\n2 1\n10''') == '-5'\n'''\nn, d = [int(x) for x in stdin.split(' ')]\na = [int(x) for x in stdin.split(' ')]\nm = int(stdin.split(' ')[2])"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('2 1\\n2 1\\n2') == '3'\nassert solution('2 1\\n2 1\\n10') == '-5'\nassert solution('3 1\\n2 1\\n2') == '-6'\nassert solution('3 1\\n2 1\\n10') == '-5'\nassert solution('3 1\\n2 1\\n3') == '0'\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''IAO'15\nIAO'2015\nIAO'1\nIAO'9\nIAO'0''') == '2015'\nassert solution('''IAO'9\nIAO'99\nIAO'999\nIAO'9999''') == '2999'\nassert solution('''IAO'9\nIAO'99\nIAO'999\nIAO'9999''') == '9999'\nassert solution('''IAO'9\nIAO'99\nIAO'999\nIAO'9999''') == '9999'\nassert solution('''IAO'9\nIAO'99\nIAO'999\nIAO'9999''') == '2999'\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('2\\nAB\\nBA\\nAB') == '2\\nAB\\nBA'\nassert solution('2\\nAB\\nBA\\nAB') == '2\\nAB\\nBA'\nassert solution('2\\nAB\\nBA\\nAB') == '2\\nAB\\nBA'\nassert solution('2\\nAB\\nBA\\nAB') == '2\\nAB\\nBA'\nassert solution('2\\nAB\\nBA\\nAB') == '2\\nAB\\nBA'\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('') is None\nassert solution(' ') is None\nassert solution('IAO' + '\\n') == '1990'\nassert solution('IAO' + '\\n' * 3) == '1992'\nassert solution('IAO' + '\\n' * 4) == '2001'\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('5\\nIAO\\'15\\nIAO\\'2015\\nIAO\\'1\\nIAO\\'9\\nIAO\\'0') == '2015'\nassert solution('4\\nIAO\\'9\\nIAO\\'99\\nIAO\\'999\\nIAO\\'9999') == '1989'\nassert solution('2\\nIAO\\'9\\nIAO\\'99\\nIAO\\'999\\nIAO\\'9999') == '1999'\nassert solution('3\\nIAO\\'9\\nIAO\\'99\\nIAO\\'999\\nIAO\\'9999') == '2999'\nassert solution('1\\nIAO\\'9\\nIAO\\'99\\nIAO\\'999\\nIAO\\'9999') == '12015'\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''\n5\nIAO'15\nIAO'2015\nIAO'1\nIAO'9\nIAO'0\n''') == '2015'\nassert solution('''\n4\nIAO'9\nIAO'99\nIAO'999\nIAO'9999\n''') == '1999'\nassert solution('''\n6\nIAO'9999\nIAO'999\nIAO'999\nIAO'999\nIAO'999\nIAO'9999\n''') == '2999'"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('IAO' + '1') == '1901'\nassert solution('IAO' + '99') == '1999'\nassert solution('IAO' + '999') == '2999'\nassert solution('IAO' + '9999') == '9999'\nassert solution('IAO' + '0') == '1900'\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"9\") == \"9\"\nassert solution(\"99\") == \"1999\"\nassert solution(\"999\") == \"2999\"\nassert solution(\"9999\") == \"9999\"\nassert solution(\"8\") == \"8\"\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('4\\nIAO' + '9'*8 + '99'*8 + '999'*8 + '9999'*8) == '2999'\nassert solution('1\\nIAO' + '99'*8 + '999'*8 + '9999'*8) == '1999'\nassert solution('5\\nIAO' + '9'*8 + '99'*8 + '999'*8 + '9999'*8) == '1999'\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1\\n') == '1'\nassert solution('1\\n2\\n') == '12'\nassert solution('2\\n3\\n') == '123'\nassert solution('3\\n4\\n') == '1234'\nassert solution('4\\n5\\n') == '12345'\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1\\n5 10\\n') == '50'\nassert solution('3\\n3 1\\n2 2\\n4 3\\n') == '21'\nassert solution('1\\n10 1\\n') == '10'\nassert solution('3\\n3 1\\n2 2\\n4 3\\n') == '50'\nassert solution('3\\n3 1\\n2 2\\n4 3\\n') == '50'\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''3\n10 1\n20 2\n30 3''') == '180'\nassert solution('''3\n3 1\n2 2\n4 3''') == '21'\nassert solution('''1\n5 10''') == '50'\n\n\n----1----\n\nfrom math import sqrt"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('3') == '180'\nassert solution('3\\n3 1\\n2 2\\n4 3') == '21'\nassert solution('3\\n3 1\\n2 2\\n4 3\\n3\\n1 1\\n2 2\\n4 3') == '50'\nassert solution('1\\n5 10') == '50'\nassert solution('3\\n3 1\\n2 2\\n4 3\\n3\\n1 1\\n2 2\\n4 3') == '21'\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''3\n10 1\n20 2\n30 3''') == '180'\nassert solution('''3\n3 1\n2 2\n4 3''') == '21'\nassert solution('''3\n3 1\n2 2\n4 3\n5 4\n6 5\n''') == '0'\n\nprint(solution(stdin))"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('3\\n10 1\\n20 2\\n30 3') == '180'\nassert solution('3\\n3 1\\n2 2\\n4 3') == '21'\nassert solution('3\\n3 3\\n2 2\\n4 3') == '30'\nassert solution('3\\n3 1\\n2 2') == '6'\nassert solution('3\\n1 1\\n2 2') == '2'\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''\\\n3\n10 1\n20 2\n30 3\n''') == '180'\nassert solution('''\\\n3\n3 1\n2 2\n4 3\n''') == '21'\nassert solution('''\\\n1\n5 10\n''') == '50'\nprint(solution(input()))\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''3\n10 1\n20 2\n30 3''') == '180'\nassert solution('''3\n3 1\n2 2\n4 3''') == '21'\nassert solution('''1\n5 10''') == '50'\nassert solution('''4\n20 1\n10 2\n15 3\n30 4''') == '220'\nassert solution('''2\n5 1\n10 2\n20 3\n30 4''') == '75'\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''3\n10 1\n20 2\n30 3''') == '180'\nassert solution('''3\n3 1\n2 2\n4 3''') == '21'\nassert solution('''1\n5 10\n''') == '50'\nassert solution('''7\n3\n5\n4\n1\n7\n3\n3\n3\n''') == '7'\nassert solution('''5\n1\n4\n4\n1\n2\n''') == '6'\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''3\n10 1\n20 2\n30 3''') == '180'\nassert solution('''3\n3 1\n2 2\n4 3''') == '21'\nassert solution('''1\n5 10''') == '50'\nassert solution('''4\n1 1\n2 2\n3 3\n4 4''') == '36'\n\nprint(solution(input()))\n------------------------------\n\u041e\u0442\u0432\u0435\u0442: 178\n\u0412\u0432\u0435\u0434\u0435\u043d\u043e \u0431\u044b\u043b\u043e:  3\n\u0412\u0432\u0435\u0434\u0435\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u043e\u0441\u044c:  180\n\n\u0412\u0432\u0435\u0434\u0435\u043d\u043e \u0431\u044b\u043b\u043e:  3\n\u0412\u0432\u0435\u0434\u0435\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u043e\u0441\u044c:  21\n\n\u0412\u0432\u0435\u0434\u0435\u043d\u043e \u0431\u044b\u043b\u043e:  1\n\u0412\u0432\u0435\u0434\u0435\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u043e\u0441\u044c:  50\n\n\u0412\u0432\u0435\u0434\u0435\u043d\u043e \u0431\u044b\u043b\u043e:  4\n\u0412\u0432\u0435\u0434\u0435\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u043e\u0441\u044c:  36\n------------------------------\n\u041e\u0442\u0432\u0435\u0442: 178\n\u0412\u0432\u0435\u0434\u0435\u043d\u043e \u0431\u044b\u043b\u043e:  3\n\u0412\u0432\u0435\u0434\u0435\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u043e\u0441\u044c:  180\n\n\u0412\u0432\u0435\u0434\u0435\u043d\u043e \u0431\u044b\u043b\u043e:  3\n\u0412\u0432\u0435\u0434\u0435\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u043e\u0441\u044c:  21\n\n\u0412\u0432\u0435\u0434\u0435\u043d\u043e \u0431\u044b\u043b\u043e:  1\n\u0412\u0432\u0435\u0434\u0435\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u043e\u0441\u044c:  50\n\n\u0412\u0432\u0435\u0434\u0435\u043d\u043e \u0431\u044b\u043b\u043e:  4\n\u0412\u0432\u0435\u0434\u0435\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u043e\u0441\u044c:  36\n------------------------------\n\u041e\u0442\u0432\u0435\u0442: 178\n\u0412\u0432\u0435\u0434\u0435\u043d\u043e \u0431\u044b\u043b\u043e:  3\n\u0412\u0432\u0435\u0434\u0435\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u043e\u0441\u044c:  180"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('3') == '180'\nassert solution('3\\n10 1') == '180'\nassert solution('3\\n3 1\\n2 2\\n4 3') == '21'\nassert solution('3\\n3 1\\n2 2\\n4 3\\n8 8') == '50'\nassert solution('3\\n3 1\\n2 2\\n4 3\\n8 8\\n15 15') == '50'\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''3 1''') == '1'\nassert solution('''3 0''') == '0'\nassert solution('''6 3''') == '3'\nassert solution('''6 0''') == '0'\nassert solution('''7 7 7''') == '0'\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"1\\n1\") == \"0\"\nassert solution(\"5\\n0\") == \"0\"\nassert solution(\"10\\n9\") == \"1\"\nassert solution(\"10\\n8\") == \"3\"\nassert solution(\"10\\n9\") == \"1\"\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1 2\\n1 2 4\\n') == '0'\nassert solution('4 1\\n1 3 4\\n') == '1'\nassert solution('6 3\\n1 3 4 6 9 10\\n') == '3'\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('2 2') == 1\nassert solution('5 3') == 1\nassert solution('1 1') == 0\nassert solution('2 0') == 0\nassert solution('3 4') == 1\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''0 2\n1 2\n2 1''') == '1'\nassert solution('''1 2\n2 1''') == '1'\nassert solution('''0 0\n1 1\n1 1''') == '0'\nassert solution('''0 0\n1 1\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n1 2"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''3 1\n2 1 4\n''') == '1'\nassert solution('''3 0\n7 7 7\n''') == '0'\nassert solution('''6 3\n1 3 4 6 9 10\n''') == '3'\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''3 1''') == '1'\nassert solution('''3 0''') == '0'\nassert solution('''6 3''') == '3'\nassert solution('''1 3 4 6 9 10''') == '3'\nassert solution('''2 1 4''') == '1'\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''3 1''') == '1'\nassert solution('''3 0''') == '0'\nassert solution('''3 0''') == '0'\nassert solution('''6 3''') == '3'\nassert solution('''1 3 4 6 9 10''') == '0'\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('0\\n2') == '0'\nassert solution('2\\n1') == '1'\nassert solution('2\\n2') == '0'\nassert solution('2\\n3') == '1'\nassert solution('3\\n3') == '0'\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''3 1''') == '1'\nassert solution('''3 0''') == '0'\nassert solution('''6 3''') == '3'\n"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''2 2\nC M\nY Y\n''') == '#Black&White'\nassert solution('''3 2\nW W\nW W\nB B\n''') == '#Color'\nassert solution('''1 1\nW\n''') == '#Black&White'\nassert solution('''2 2\nC C\nB B\n''') == '#Black&White'\nassert solution('''2 2\nB B\nB B\n''') == '#Black&White'\n"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''2 2\nC M\nY Y\n''') == '#Color'\nassert solution('''3 2\nW W\nW W\nB B\n''') == '#Black&White'\nassert solution('''1 1\nW\n''') == '#Black&White'\nassert solution('''0 0\n''') == '#Black&White'\nassert solution('''3 1\nC\nY\n''') == '#Color'\n"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''\n2 2\nC M\nY Y\n''') == '#Black&White'\nassert solution('''\n2 2\nW W\nW W\nB B\n''') == '#Black&White'\nassert solution('''\n1 1\nW\n''') == '#Black&White'\nassert solution('''\n4 1\nB B\nB B\nB B\nB B\n''') == '#Black&White'\nassert solution('''\n2 2\nC M\nB B\n''') == '#Color'\n"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''2 2\nC M\nY Y''') == '#Color'\nassert solution('''3 2\nW W\nW W\nB B''') == '#Black&White'\nassert solution('''1 1\nW''') == '#Black&White'\nassert solution('''2 1\nC''') == '#Black&White'\nassert solution('''1 1\nB''') == '#Black&White'\n"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''C M\nY Y\n''') == '#Color'\nassert solution('''C M\nW W\nW W\nB B\n''') == '#Black&White'\nassert solution('''C M\nY Y\n''') == '#Color'\nassert solution('''C M\nB B\n''') == '#Black&White'\nassert solution('''C M\nW W\nB B\n''') == '#Black&White'\n"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('2 2\\nC M\\nY Y\\n') == '#Black&White'\nassert solution('3 2\\nW W\\nW W\\nB B\\n') == '#Color'\nassert solution('1 1\\nW\\n') == '#Black&White'"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''2 2\nC M\nY Y\n''') == '#Color'\nassert solution('''3 2\nW W\nW W\nB B\n''') == '#Black&White'\nassert solution('''1 1\nW\n''') == '#Black&White'\nprint('Test success!')\n"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1 1') == \"#Black&White\"\nassert solution('2 2') == \"#Color\"\nassert solution('3 2') == \"#Black&White\"\nassert solution('3 2\\nW W\\nW W\\nB B\\n') == \"#Color\"\nassert solution('3 2\\nW W\\nW W\\nB B\\n') == \"#Black&White\"\n"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''2 2\nC M\nY Y\n''') == '#Color'\nassert solution('''3 2\nW W\nW W\nB B\n''') == '#Black&White'\nassert solution('''1 1\nW\n''') == '#Black&White'\n"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"2 2\\nC M\\nY Y\\n\") == \"##Color\"\nassert solution(\"3 2\\nW W\\nW W\\nB B\\n\") == \"#Black&White\"\nassert solution(\"1 1\\nW\\n\") == \"#Black&White\"\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('4 3\\n-3 2 9 16\\n') == '6'\nassert solution('5 2\\n4 8 11 18 19\\n') == '5'\nassert solution('5 1\\n3 4 5 6\\n') == '0'\nassert solution('1 1\\n1\\n') == '0'\nassert solution('10 1\\n5 9 8 7 6\\n') == '6'\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('4 3') == '6'\nassert solution('5 2') == '5'\nassert solution('-3 2 9 16') == '6'\nassert solution('4 8 11 18 19') == '5'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"3 4\\n-3 2 9 16\") == \"6\"\nassert solution(\"5 2\\n4 8 11 18 19\") == \"5\"\nassert solution(\"5 1\\n1 2 3 4 5\") == \"1\"\nassert solution(\"5 10\\n1 2 3 4 5\") == \"0\"\nassert solution(\"10 7\\n5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\") == \"0\"\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1\\n-1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9') == '1'\nassert solution('2\\n1\\n3\\n2\\n4\\n3\\n5\\n4\\n6\\n7') == '2'\nassert solution('3\\n1\\n3\\n2\\n3\\n3\\n4\\n5\\n6') == '3'\nassert solution('4\\n1\\n1\\n1\\n1\\n2\\n3\\n4\\n5\\n6') == '6'\nassert solution('5\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1') == '5'\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('4 3\\n-3 2 9 16\\n') == '6'\nassert solution('5 2\\n4 8 11 18 19\\n') == '5'\n\"\"\"\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1 1\\n1') == '1'\nassert solution('1 1\\n1') == '1'\nassert solution('2 2\\n2') == '1'\nassert solution('2 2\\n2') == '1'\nassert solution('2 3\\n2') == '1'\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('2 4') == '5'\nassert solution('10 100') == '1'\nassert solution('3 3') == '5'\nassert solution('1 100') == '1'\nassert solution('1 2') == '3'\n"
    },
    {
        "number": 727,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('') == None\nassert solution('1') == None\nassert solution('1 1') == None\nassert solution('1 1 1') == None\nassert solution('1 2 2 3') == None\n"
    },
    {
        "number": 727,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('1\\n2') == '0'\nassert solution('2\\n1') == '1'\nassert solution('3\\n3') == '0'\nassert solution('4\\n4') == '0'\nassert solution('4\\n2') == '1'\n"
    },
    {
        "number": 727,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"4\\n2 5 5 2\") == \"2\"\nassert solution(\"5\\n6 3 4 1 5\") == \"5\"\nassert solution(\"8\\n4 4 4 2 2 100 100 100\") == \"3\"\nassert solution(\"6\\n10 10 50 10 50 50\") == \"4\"\n"
    },
    {
        "number": 727,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('3\\n1') == '1'\nassert solution('4\\n2 5 5 2\\n') == '2'\nassert solution('8\\n4 4 4 2 2 100 100 100\\n') == '5'\n\n\n-----Alternate Solutions-----\n"
    },
    {
        "number": 727,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1\\n1') == '0'\nassert solution('2\\n2') == '0'\nassert solution('3\\n3') == '0'\nassert solution('4\\n4') == '0'\nassert solution('5\\n5') == '0'\n"
    },
    {
        "number": 727,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1\") == \"0\\n1\"\nassert solution(\"5\\n2 5 5 2\") == \"2\\n1\"\nassert solution(\"8\\n4 4 4 2 2 100 100 100\") == \"3\\n5\"\nassert solution(\"6\\n10 10 50 10 50 50\") == \"4\\n5\"\n"
    },
    {
        "number": 727,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('8\\n4 4 4 2 2 100 100 100') == '5'\nassert solution('8\\n10 10 50 10 50 50') == '4'\nassert solution('8\\n100 100 100 100 100 100 100') == '3'\nassert solution('8\\n1 100 1 100 1 100 1') == '3'\nassert solution('8\\n1 1 1 1 1 1 1 1') == '4'\n"
    },
    {
        "number": 727,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''4\n2 5 5 2''') == '2'\nassert solution('''5\n6 3 4 1 5''') == '5'\nassert solution('''8\n4 4 4 2 2 100 100 100''') == '3'\nassert solution('''6\n10 10 50 10 50 50''') == '4'\nassert solution('''9\n4 4 4 2 2 100 100 100''') == '5'\n'''\n) == '4'\n"
    },
    {
        "number": 727,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('3\\n1 1 1') == '2'\nassert solution('4\\n1 1 1 2 2') == '3'\nassert solution('8\\n4 4 4 2 2 100 100 100') == '5'\nassert solution('6\\n10 10 50 10 50 50') == '4'\nassert solution('6\\n10 10 50 10 50 50') == '4'\n"
    },
    {
        "number": 727,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"\"\"4\n2 5 5 2\n\"\"\") == \"2\"\nassert solution(\"\"\"5\n6 3 4 1 5\n\"\"\") == \"5\"\nassert solution(\"\"\"8\n4 4 4 2 2 100 100 100\n\"\"\") == \"3\"\nassert solution(\"\"\"6\n10 10 50 10 50 50\n\"\"\") == \"4\"\nassert solution(\"\"\"7\n1 1 2 3 4 5 6\n\"\"\") == \"5\"\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"5\\n5 1 11 2 8\") == \"4\"\nassert solution(\"4\\n1 8 8 8\") == \"6\"\nassert solution(\"2\\n7 6\") == \"0\"\n\n\"\"\"\n\nN = int(input())\nvotes = [int(x) for x in input().split()]\nc = votes.count(1)\nres = c - 1\nfor v in votes:\n    if v == 1:\n        res += 1\nprint(res)\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"5\\n5 1 11 2 8\\n\") == \"4\"\nassert solution(\"4\\n1 8 8 8\\n\") == \"6\"\nassert solution(\"2\\n7 6\\n\") == \"0\"\nassert solution(\"5\\n1 1 1 1 1\\n\") == \"3\"\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1\\n2\\n') == '0'\nassert solution('2\\n1\\n') == '1'\nassert solution('2\\n2\\n') == '0'\nassert solution('3\\n2\\n') == '1'\nassert solution('3\\n3\\n') == '0'\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('5\\n5 1 11 2 8') == '4'\nassert solution('4\\n1 8 8 8') == '6'\nassert solution('2\\n7 6') == '0'\nassert solution('3\\n2 3 1') == '1'\nassert solution('3\\n2 3 1') == '1'\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''5\n5 1 11 2 8\n''') == '4'\n\nassert solution('''4\n1 8 8 8\n''') == '6'\n\nassert solution('''2\n7 6\n''') == '0'\n\nassert solution('''3\n7 7 7\n''') == '3'\n\nassert solution('''2\n1 2\n''') == '0'"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"5\\n5 1 11 2 8\") == \"4\"\nassert solution(\"4\\n1 8 8 8\") == \"6\"\nassert solution(\"2\\n7 6\") == \"0\"\n\n\n-----\n\n##\n\"\"\"\n\ninput_data = input()\ninput_list = list(map(int, input_data.split(\" \")))\ninput_list_length = len(input_list)\nmin_candidate = input_list_length\n\nfor index in range(0, input_list_length):\n    if (input_list[index] > input_list_length - index):\n        input_list[index] = input_list_length - index\n    if (input_list[index] < min_candidate):\n        min_candidate = input_list[index]\n\nprint(min_candidate)\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\n    \"\"\"5\n5 1 11 2 8\n\"\"\") == \"4\"\n\nassert solution(\n    \"\"\"4\n1 8 8 8\n\"\"\") == \"6\"\n\nassert solution(\n    \"\"\"2\n7 6\n\"\"\") == \"0\"\n\nassert solution(\n    \"\"\"4\n0 1 1 0\n\"\"\") == \"0\"\n\nassert solution(\n    \"\"\"5\n7 6\n\"\"\") == \"0\""
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('5\\n5 1 11 2 8') == '4'\nassert solution('4\\n1 8 8 8') == '6'\nassert solution('2\\n7 6') == '0'\n\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 729,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"abc\") == \"YES\"\nassert solution(\"aaaaa\") == \"NO\"\nassert solution(\"code\") == \"YES\"\nassert solution(\"codeforces\") == \"YES\"\n\n\n\"\"\"\n"
    },
    {
        "number": 729,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"codeforces\") == \"NO\"\nassert solution(\"aab\") == \"NO\"\nassert solution(\"ilml\") == \"YES\"\nassert solution(\"aaaaa\") == \"NO\"\nassert solution(\"zzzz\") == \"NO\"\n"
    },
    {
        "number": 729,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('codeforces') == 'YES'\nassert solution('aab') == 'NO'\nassert solution('aaaaa') == 'NO'\nassert solution('abcdef') == 'NO'\nassert solution('ccccccccccc') == 'NO'\n"
    },
    {
        "number": 729,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('') == 'No comments'\nassert solution('a') == 'No comments'\nassert solution('aaaaa') == 'No comments'\nassert solution('aaaaaa') == 'No comments'\nassert solution('aabbcc') == 'No comments'\n"
    },
    {
        "number": 729,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\nfrom collections import Counter"
    },
    {
        "number": 729,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('codeforces') == 'YES'\nassert solution('aab') == 'NO'\nassert solution('aaaaa') == 'NO'\nassert solution('zzzz') == 'NO'\nassert solution('cddddcddd') == 'NO'\n"
    },
    {
        "number": 729,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"codeforces\") == \"YES\"\nassert solution(\"aaaaa\") == \"NO\"\nassert solution(\"zzzz\") == \"NO\"\nassert solution(\"aab\") == \"YES\"\nassert solution(\"aab\") == \"NO\"\n"
    },
    {
        "number": 729,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"codeforces\") == \"YES\"\nassert solution(\"aab\") == \"NO\"\nassert solution(\"aaaaa\") == \"NO\"\nassert solution(\"zz\") == \"NO\"\nassert solution(\"aa\") == \"NO\"\n"
    },
    {
        "number": 729,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"codeforces\") == \"NO\"\nassert solution(\"aaaaa\") == \"YES\"\nassert solution(\"aab\") == \"NO\"\nassert solution(\"zz\") == \"NO\"\n"
    },
    {
        "number": 729,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('codeforces') == 'YES'\nassert solution('aab') == 'NO'\nassert solution('aaa') == 'YES'\nassert solution('zzz') == 'NO'\n\n\n-----Best Practice-----\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('9') == '+------------------------+\\n|O.O.O.#.#.#.#.#.#.#.|D|)')\nassert solution('20') == '+------------------------+\\n|O.O.O.O.O.O.O.#.#.#.#.|D|)')\nassert solution('0') == '+------------------------+\\n|D.D.D.#.#.#.#.#.#.#.|D|)')\nassert solution('10') == '+------------------------+\\n|D.D.D.#.#.#.#.#.#.#.|D|)')\nassert solution('10') == '+------------------------+\\n|D.D.D.#.#.#.#.#.#.#.|D|)')\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('9') == '+------------------------+\\n|O.O.O.#.#.#.#.#.#.#.|D|)   \\n|O.O.O.#.#.#.#.#.#.#.|.|   \\n|O.......................|   \\n|O.O.O.O.O.O.#.#.#.#.|.|)   \\n+------------------------+\\n'\nassert solution('20') == '+------------------------+\\n|O.O.O.O.O.O.O.#.#.#.#.|D|)   \\n|O.O.O.O.O.O.#.#.#.#.#.|.|   \\n|O.......................|   \\n|O.O.O.O.O.O.O.#.#.#.#.|.|)   \\n+------------------------+\\n'\n\n\"\"\"\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"+-----------+\\n|.O.O.O.#.#.#.|\\n|O.O.O.#.#.#.#.|\\n|O............O|\\n|O.O.O.#.#.#.#.|\\n+-----------+\\n\"\nassert solution(\"8\") == \"+-----------+\\n|.O.O.O.#.#.#.|\\n|O.O.O.O.#.#.#.|\\n|O................|\\n|O.O.O.O.O.#.#.#.|\\n|O.O.O.O.O.O.#.#.#.|\\n|O.............O|\\n|O.O.O.O.O.O.#.#.#.|\\n+-----------+\\n\"\nassert solution(\"10\") == \"+-----------+\\n|.O.O.O.#.#.#.|\\n|O.O.O.O.#.#.#.|\\n|O................|\\n|O.O.O.O.O.#.#.#.|\\n|O.O.O.O.O.O.#.#.#.|\\n|O.............O|\\n|O.O.O.O.O.O.#.#.#.|\\n|O.O.O.O.O.O.#.#.#.|\\n+-----------+\\n\"\nassert solution(\"15\") == \"+-----------+\\n|.O.O.O.#.#.#.|\\n|O.O.O.O.#.#.#.|\\n|O................|\\n|O.O.O.O.O.#.#.#.|\\n|O.O.O.O.O.O.#.#.#.|\\n|O.............O|\\n|O.O.O.O.O.O.#.#.#.|\\n|O.O.O.O.O.O.#.#.#.|\\n|O.O.O.O.O.O.#.#.#.|\\n|O.O.O.O.O.O.#.#.#.|\\n+-----------+\\n\"\nassert solution(\"20\") == \"+-----------+\\n|.O.O.O.O.O.O.#.#.#.|\\n|O.O.O.O.O.O.#.#.#.#.|\\n|O................|\\n|O.O.O.O.O.O.#.#.#.#.|\\n|O.O.O.O.O.O.#.#.#.#.|\\n|O.............O|\\n|O.O.O.O.O.O.#.#.#.#.|\\n|O.O.O.O.O.O.#.#.#.#.|\\n|O.O.O.O.O.O.#.#.#.#.|\\n|O.O.O.O.O.O.#.#.#.#.|\\n|O.O.O.O.O.O.#.#.#.#.|\\n+-----------+\\n\"\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''9''') == '''+------------------------+\n|O.O.O.O.O.O.O.#.#.#.#.|D|)\n|O.O.O.O.O.O.#.#.#.#.#.|.|\n|O.......................|\n|O.O.O.O.O.O.O.#.#.#.#.|.|)\n+------------------------+'''\nassert solution('''20''') == '''+------------------------+\n|O.O.O.O.O.O.O.O.O.#.#.#.#.|D|)\n|O.O.O.O.O.O.O.O.O.#.#.#.#.|.|\n|O.......................|\n|O.O.O.O.O.O.O.O.O.O.#.#.#.|.|)\n+------------------------+'''\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\n'''\n9\n''') == \\\n'+------------------------+\\n' + \\\n'|O.O.O.O.O.O.O.#.#.#.#.|D|) \\n' + \\\n'|O.O.O.O.O.O.#.#.#.#.#.|.| \\n' + \\\n'|O.......................| \\n' + \\\n'|O.O.O.O.O.O.#.#.#.#.#.|.|) \\n' + \\\n'+------------------------+'\nassert solution(\n'''\n20\n''') == \\\n'+------------------------+\\n' + \\\n'|O.O.O.O.O.O.O.O.O.#.#.#.|D|) \\n' + \\\n'|O.O.O.O.O.O.O.O.O.#.#.#.#.|.| \\n' + \\\n'|O.......................| \\n' + \\\n'|O.O.O.O.O.O.O.O.O.#.#.#.#.|.|) \\n' + \\\n'+------------------------+'\nassert solution(\n'''\n4\n''') == \\\n'+------------------------+\\n' + \\\n'|O.O.O.#.#.#.#.#.#.#.|.|) \\n' + \\\n'|O.O.O.#.#.#.#.#.#.#.|.| \\n' + \\\n'|O.O.O.#.#.#.#.#.#.#.|.|) \\n' + \\\n'+------------------------+'\nassert solution(\n'''\n100\n''') == \\\n'+------------------------+\\n' + \\\n'|O.O.O.O.O.O.O.O.O.O.#.#.|D|) \\n' + \\\n'|O.O.O.O.O.O.O.O.O.O.#.#.#.|.| \\n' + \\\n'|O.O.O.O.O.O.O.O.O.O.#.#.#.|.|) \\n' + \\\n'+------------------------+'\nassert solution(\n'''\n4\n''') == \\\n'+------------------------+\\n' + \\\n'|O.O.O.O.O.O.O.O.O.O.#.#.|D|) \\n' + \\\n'|O.O.O.O.O.O.O.O.O.O.#.#.#.|.| \\n' + \\\n'|O.O.O.O.O.O.O.O.O.O.#.#.#.|.|) \\n' + \\\n'+------------------------+'\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('9') == '+------------------------+\\n|O.O.O.#.#.#.#.#.#.#.|D|) \\n|O.O.O.#.#.#.#.#.#.#.|.| \\n|O.......................| \\n|O.O.O.O.O.O.#.#.#.#.#.|.|) \\n+------------------------+'\nassert solution('20') == '+------------------------+\\n|O.O.O.O.O.O.O.O.#.#.#.|D|) \\n|O.O.O.O.O.O.#.#.#.#.#.|.| \\n|O.......................| \\n|O.O.O.O.O.O.O.O.#.#.#.#.|.|) \\n+------------------------+'\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''9''') == '''+------------------------+\n|O.O.O.#.#.#.#.#.#.#.|D|)\n|O.O.O.#.#.#.#.#.#.#.|.|\n|O.......................|\n|O.O.#.#.#.#.#.#.#.#.|.|)\n+------------------------+'''\n\n\nassert solution('''20''') == '''+------------------------+\n|O.O.O.O.O.O.O.O.#.#.#.#.|D|)\n|O.O.O.O.O.O.O.#.#.#.#.#.|.|\n|O.......................|\n|O.O.O.O.O.O.O.O.O.#.#.#.|.|)\n+------------------------+'''\n\n\nassert solution('''33''') == '''+------------------------+\n|O.O.O.#.#.#.#.#.#.#.|D|)\n|O.O.O.#.#.#.#.#.#.#.|.|\n|O.......................|\n|O.O.#.#.#.#.#.#.#.#.|.|)\n|O.O.O.#.#.#.#.#.#.#.|.|)\n|O............O.O..|.|)\n+------------------------+'''\n\n\nassert solution('''66''') == '''+------------------------+\n|O.O.O.#.#.#.#.#.#.|D|)\n|O.O.O.#.#.#.#.#.#.#.|.|\n|O.......................|\n|O.O.O.#.#.#.#.#.#.|.|)\n|O.O.O.#.#.#.#.#.#.#.|.|)\n|O.O.O.#.#.#.#.#.#.#.|.|)\n|O.O.O.O.O.O.O.O.#.#.|.|)\n+------------------------+'''\n\n\nassert solution('''33''') == '''+------------------------+\n|O.O.O.#.#.#.#.#.#.#.|D|)\n|O.O.O.#.#.#.#.#.#.#.|.|\n|O.......................|\n|O.O.O.#.#.#.#.#.#.|.|)\n|O.O.O.#.#.#.#.#.#.#.|.|)\n|O.O.O.#.#.#.#.#.#.#.|.|)\n|O.O.O.O.O.O.O.O.#.#.|.|)\n+------------------------+'''\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('9\\n') == '+------------------------+\\n|O.O.O.#.#.#.#.#.#.#.|D|) \\n|O.O.O.#.#.#.#.#.#.#.|.| \\n|O.......................| \\n|O.O.#.#.#.#.#.#.#.#.|.|) \\n+------------------------+\\n'\nassert solution('20\\n') == '+------------------------+\\n|O.O.O.O.O.O.O.#.#.#.#.|D|) \\n|O.O.O.O.O.O.#.#.#.#.#.|.| \\n|O.......................| \\n|O.O.O.O.O.O.#.#.#.#.#.|.|) \\n|O.O.O.O.O.O.#.#.#.#.#.|.|) \\n|O.O.O.O.O.O.#.#.#.#.#.|.|) \\n|O.O.O.O.O.O.#.#.#.#.#.|.|) \\n+------------------------+\\n'\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''9''') == '+------------------------+\\n|O.O.O.#.#.#.#.#.#.#.|D|) \\n|O.O.O.#.#.#.#.#.#.#.|.|\\n|O.......................|\\n|O.O.O.O.O.O.#.#.#.#.#.|.|) \\n+------------------------+'\nassert solution('''20''') == '+------------------------+\\n|O.O.O.O.O.O.O.#.#.#.#.|D|) \\n|O.O.O.O.O.O.#.#.#.#.#.|.|\\n|O.......................|\\n|O.O.O.O.O.O.#.#.#.#.#.|.|) \\n+------------------------+'\nassert solution('''5''') == '+------------------------+\\n|O.O.O.O.#.#.#.#.#.|D|) \\n|O.O.O.#.#.#.#.#.#.|.|\\n|O.......................|\\n|O.O.O.O.O.#.#.#.#.#.|.|) \\n+------------------------+'\nassert solution('''6''') == '+------------------------+\\n|O.O.O.O.#.#.#.#.#.|D|) \\n|O.O.O.#.#.#.#.#.#.|.|\\n|O.......................|\\n|O.O.O.O.O.#.#.#.#.#.|.|) \\n|O.O.O.O.#.#.#.#.#.|.|) \\n+------------------------+'\nassert solution('''7''') == '+------------------------+\\n|O.O.O.O.#.#.#.#.#.|D|) \\n|O.O.O.#.#.#.#.#.#.|.|\\n|O.......................|\\n|O.O.O.O.O.#.#.#.#.#.|.|) \\n|O.O.O.O.O.#.#.#.#.#.|.|) \\n|O.O.O.O.#.#.#.#.#.|.|) \\n+------------------------+'\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(TEST_INPUT) == TEST_OUTPUT\nprint(solution(AOC_INPUT))\n\"\"\"\nfrom collections import deque\n\npassengers = deque(int(x) for x in input().split())\nbus_driver = 0\n\nwhile passengers:\n    try:\n        first = passengers.popleft()\n        passengers.append(first)\n    except IndexError:\n        bus_driver += 1\n\nprint(\"+------------------------+\")\nprint(\"|O.O.O.O.O.O.#.#.#.#.|D|)\")\nprint(\"|O.O.O.O.O.O.#.#.#.#.|.|\")\nprint(\"|O.......................|\")\nprint(\"|O.O.O.O.O.O.#.#.#.#.#.|.|)\")\nprint(\"+------------------------+\")"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(input()) == input()[:-1]\n"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(input()) == \"3\"\nassert solution(input()) == \"6\"\nassert solution(input()) == \"0\"\n"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('9 1 1\\n') == '9'\nassert solution('77 7 7\\n') == '7'\nassert solution('114 5 14\\n') == '6'\nassert solution('1 1 2\\n') == '0'\n"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('5 1 1') == '9'\nassert solution('77 7 7') == '7'\nassert solution('114 5 14') == '6'\nassert solution('1 1 2') == '0'\nprint(solution(input()))\n"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''9 1 1''') == '9'\nassert solution('''77 7 7''') == '7'\nassert solution('''114 5 14''') == '6'\n"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('4 4 1') == '3'\nassert solution('1 2 3') == '4'\nassert solution('27 15 10') == '7'\nassert solution('11 11 1') == '6'\nassert solution('3 1 1') == '2'\n"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('9 1 1') == '9'\nassert solution('77 7 7') == '7'\nassert solution('114 5 14') == '6'\nassert solution('1 1 2') == '0'\n"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1 1 1') == '1'\nassert solution('77 7 7') == '7'\nassert solution('114 5 14') == '6'\nassert solution('9 1 1') == '9'\n"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(input()) == input()\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(input()) == input()\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('2') == '1'\nassert solution('10') == '10'\nassert solution('100') == '100'\nassert solution('1000') == '1000'\nassert solution('100000') == '1000'\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''10''') == '10'\nassert solution('''10\n11''') == '113'\nassert solution('''10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20''') == '113'\nassert solution('''123456789''') == '113'\nassert solution('''123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789''') == '113'\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(input()) == output\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('10') == \"10\"\nassert solution('123') == \"113\"\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('0') == '0'\nassert solution('123') == '123'\nassert solution('12345678') == '12345678'\nassert solution('123456789') == '123456789'\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(10) == 10\nassert solution(123) == 113\nassert solution(10**9) == 0\n\nassert solution(10**10) == 0\nassert solution(10**11) == 0\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\n    \"10\") == \"10\"\nassert solution(\n    \"123\") == \"113\"\nassert solution(\n    \"10\"\n) == \"10\"\nassert solution(\n    \"10\"\n) == \"10\"\nassert solution(\n    \"10\"\n) == \"10\"\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('10') == '10'\nassert solution('10') == '10'\nassert solution('123') == '113'\nassert solution('10,100,1000') == '100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123'\nassert solution('10,100,1000,5000') == '100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123'\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == str(10)\n\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('2 3 6 18') == 3\nassert solution('5 11 5 6') == 2\nassert solution('6 4 5 3') == 4\nassert solution('10 4 17 1') == 3\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('1 2 3 4') == 1\nassert solution('1 2 4 3') == 2\nassert solution('2 3 4 5') == 2\nassert solution('10 10 10 10') == 0\nassert solution('10 10 10 10') == 0\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('2 3 6 18') == '3'\nassert solution('1 2 3 4') == '0'\nassert solution('2 3 6 18') == '3'\nassert solution('1 2 3 4') == '0'\nassert solution('1 2 3 4') == '0'\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n\nimport sys"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1 2 3 4') == '0'\nassert solution('2 3 4 5') == '0'\nassert solution('1 2 3 6') == '3'\nassert solution('1 1 1 1') == '1'\nassert solution('1 2 3 5') == '1'\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('2 3 6 18') == '3'\nassert solution('1 1 1 1') == '1'\nassert solution('1 1 1 10') == '0'\nassert solution('1 1 1 1') == '1'\nassert solution('1 1 1 2') == '0'\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('2 3 6 18') == '3'\nassert solution('2 3 10 17') == '5'\nassert solution('2 3 17 10') == '5'\nassert solution('2 3 17 17') == '3'\nassert solution('2 3 7 17') == '0'\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('2 3 6 18') == 3\nassert solution('3 1 4 7') == 2\nassert solution('1 1 1 1') == 10\nassert solution('1 1 1 1') == 1\nassert solution('1 1 1 1') == 1\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"2 3 6 18\") == \"3\"\nassert solution(\"1 1 1 1\") == \"1\"\nassert solution(\"2 4 4 4\") == \"5\"\nassert solution(\"2 2 1 2\") == \"3\"\nassert solution(\"1 2 2 2\") == \"2\"\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''2 3 6 18''') == '3'\nassert solution('''1 1 1 1''') == '0'\nassert solution('''10 50 10 50''') == '3'\nassert solution('''9 50 9 50''') == '0'\nassert solution('''10 50 10 50''') == '3'\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('3 2') == '1'\nassert solution('5 6') == '10'\nassert solution('3 5') == '3'\nassert solution('5 5') == '9'\nassert solution('3 3') == '0'\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('5 6\\n3 3 3 3 3\\n3 1 3 3 3\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1 1 1 1\\n3 1"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('5 6\\n3 3 3 3 3\\n3 3 3 3 3') == '10'\nassert solution('5 5\\n2 3 1 4 4\\n3 1 1') == '3'\nassert solution('1 1000\\n548\\n3 1 1') == '0'\nassert solution('3 3\\n3 1 1\\n3 1 1') == '1'\n\n\n-----Binary Search-----\n\nThe algorithm is simple. To find the maximum number of blocks, use binary search. We can remove blocks from the left to the right, but we cannot remove blocks from the right to the left. To find the maximum number of blocks that we can remove, we should find the index at which the number of removed blocks exceeds the number of blocks from the right.\n\nThe number of removed blocks cannot be more than the number of blocks from the right, so we should find the smallest index $i$ such that the number of removed blocks is less than the number of blocks from the right.\n\nWe can write the algorithm as follows:\n\nFor each block $i$ from the left to the right:\n    1. If the number of removed blocks is less than the number of blocks from the right, we can remove $i$ blocks.\n    2. Otherwise, we cannot remove anymore blocks, so we can remove the rest of the blocks from the right.\n\nReturn the smallest index at which the number of removed blocks exceeds the number of blocks from the right.\n\nNote that we don't need to check the number of blocks from the left because the number of blocks from the left cannot be more than the number of blocks from the right.\n\n'''\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('5 6\\n3 3 3 3 3\\n3 3 3 3 3\\n3 3 3 3 3\\n3 3 3 3 3\\n3 3 3 3 3\\n3 3 3 3 3\\n3 3 3 3 3') == '10'\nassert solution('5 5\\n2 3 1 4 4\\n3 3 1 4 4\\n3 3 1 4 4\\n3 3 1 4 4\\n3 3 1 4 4\\n3 3 1 4 4\\n3 3 1 4 4') == '9'\nassert solution('3 5\\n1 2 4\\n3 4 3') == '3'\nassert solution('1 1000\\n548') == '0'\nassert solution('3 3\\n3 1 1\\n3 1 1\\n3 1 1\\n3 1 1\\n3 1 1\\n3 1 1\\n3 1 1') == '1'\n\"\"\"\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('3 3\\n1 2 3\\n') == '10'\nassert solution('3 5\\n2 3 1\\n') == '3'\nassert solution('5 5\\n2 3 1 4 4\\n') == '9'\n\"\"\"\n\nfrom sys import stdin,stdout\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''5 6\n3 3 3 3 3\n\n3 3 3 3 3\n\n3 3 3 3 3\n\n3 3 3 3 3\n\n''') == '10'\nassert solution('''3 5\n1 2 4\n\n3 3 1 4\n\n3 3 1 4\n\n3 3 1 4\n\n''') == '3'\nassert solution('''1 1000\n548\n\n''') == '0'\nassert solution('''1 10\n8\n\n''') == '1'\nassert solution('''3 3\n3 1 1\n\n''') == '1'\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdin"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('5 6\\n3 3 3 3 3') == '10'\nassert solution('5 5\\n2 3 1 4 4') == '9'\nassert solution('1 1000\\n548') == '0'\nassert solution('3 3\\n3 1 1') == '1'\nassert solution('5 5\\n2 3 1 4 4') == '9'\n\n\n\"\"\"\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''5 6\n3 3 3 3 3\n3 1 1 3 3\n3 3 3 3 3\n3 1 1 3 3\n3 3 3 3 3\n''') == '10'\nassert solution('''3 5\n3 3 3 3\n3 1 1 3\n3 3 3 3\n3 1 1 3\n3 3 3 3\n''') == '3'\nassert solution('''1 1000\n548\n''') == '0'\nassert solution('''3 3\n3 1 1\n3 3 3\n3 1 1\n3 3 3\n3 1 1\n''') == '1'\nassert solution('''5 6\n4 1 1 1 2\n1 2 4 2\n3 3 3 3\n3 1 1 3\n4 4 4 4\n''') == '0'\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('3\\n3 2 1') == 'yes\\n1 3\\n'\nassert solution('4\\n2 1 3 4') == 'yes\\n1 2\\n'\nassert solution('4\\n3 1 2 4') == 'no\\n'\nassert solution('2\\n1 2') == 'yes\\n1 1\\n'\nassert solution('3\\n1 2\\n') == 'no\\n'\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('5') == 'yes\\n1 3'\nassert solution('3') == 'yes\\n1 3'\nassert solution('1') == 'yes\\n1 1'\nassert solution('2') == 'yes\\n1 1'\nassert solution('10') == 'no'\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"\"\"3\n3 2 1\"\"\") == \"\"\"yes\n1 3\"\"\"\n\nassert solution(\"\"\"4\n2 1 3 4\"\"\") == \"\"\"no\"\"\"\n\nassert solution(\"\"\"2\n1 2\"\"\") == \"\"\"yes\n1 1\"\"\"\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1\\n3') == 'yes\\n1 3'\nassert solution('2\\n2\\n1') == 'no'\nassert solution('3\\n3\\n1') == 'no'\nassert solution('4\\n2\\n1 3\\n4') == 'yes\\n1 2\\n2 3'\nassert solution('2\\n2\\n1') == 'yes\\n1 1'\n\n\n\n\n\"\"\"\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == \"no\"\n\nassert solution(\"\") == \"no\"\nassert solution(\"2 1\") == \"no\"\nassert solution(\"3 2 1\") == \"yes\"\nassert solution(\"4 2 1 3 4\") == \"yes\"\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('3 2 1') == 'yes 1 3'\nassert solution('4 2 1 3 4') == 'yes 1 2'\nassert solution('2 1 3 4') == 'no'\nassert solution('1 2') == 'yes 1 1'\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('3\\n3 2 1') == 'yes\\n1 3'\nassert solution('4\\n2 1 3 4') == 'yes\\n1 2'\nassert solution('2\\n1 2') == 'yes\\n1 1'\nassert solution('4\\n3 1 2 4') == 'no'\nassert solution('2\\n1 2') == 'yes\\n1 1'\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('3\\n3 2 1') == 'yes\\n1 3'\nassert solution('4\\n2 1 3 4') == 'yes\\n1 2'\nassert solution('2\\n1 2') == 'yes\\n1 1'\nassert solution('2\\n2 1') == 'no'\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('4\\n2 1 3 4') == 'yes\\n1 3'\nassert solution('3\\n3 2 1') == 'yes\\n1 2'\nassert solution('3\\n2 1 3') == 'no'\nassert solution('1\\n1') == 'yes\\n1 1'\nassert solution('3\\n2 1') == 'yes\\n1 1'\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"3\") == \"\"\nassert solution(\"3 2 1\") == \"yes\\n1 3\"\nassert solution(\"4\\n2 1 3 4\") == \"yes\\n1 2\"\nassert solution(\"4\\n3 1 2 4\") == \"no\"\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('3 2') == '-1'\nassert solution('3 5') == '6'\nassert solution('10 2') == '6'\nassert solution('3 5') == '-1'\nassert solution('10 3') == '6'\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"10 2\") == \"6\"\nassert solution(\"3 5\") == \"-1\"\nassert solution(\"10 1\") == \"3\""
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('10 2') == '6'\nassert solution('3 5') == '-1'\n\"\"\"\n\nn, m = map(int, stdin.strip().split(' '))\nsteps = (n - 1) // m + 1\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('2 3') == '3'\nassert solution('3 2') == '-1'\nassert solution('2 3') == '6'\nassert solution('3 3') == '-1'\nassert solution('5 2') == '-1'\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(input()) == '6'\nassert solution(input()) == '-1'\n\"\"\"\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('10 2') == '6'\nassert solution('3 5') == '-1'\nassert solution('6 3') == '3'\nassert solution('15 5') == '-1'\nassert solution('7 3') == '3'\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('10 2') == '6'\nassert solution('3 5') == '-1'\nassert solution('3 1') == '3'\nassert solution('2 10') == '6'\nassert solution('2 4') == '-1'\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(input()) == expected_output\n\n\"\"\"\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('10 2') == '6'\nassert solution('3 5') == '-1'\nassert solution('10 2') == '6'\nassert solution('9 7') == '4'\nassert solution('1000 7') == '20'\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('5 2') == '6'\nassert solution('3 5') == '-1'\nassert solution('3 10') == '7'\nassert solution('10 1') == '5'\nassert solution('10 10') == '-1'\n"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('4') == '8'\nassert solution('11') == '14'\nassert solution('22') == '20'\nassert solution('24') == '24'\nassert solution('33') == '34'\n"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(4) == 8\nassert solution(11) == 14\nassert solution(22) == 20\n\n[Image]\n"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(4) == 8\nassert solution(11) == 14\nassert solution(22) == 20\n\n\n'''\n\n'''\n"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('4') == '8'\nassert solution('11') == '14'\nassert solution('22') == '20'\nassert solution('15') == '18'\nassert solution('33') == '24'\n"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"4\") == \"8\"\nassert solution(\"11\") == \"14\"\nassert solution(\"22\") == \"20\"\n\n\"\"\"\n\nfrom math import ceil"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '4'\n"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('1') == '1'\nassert solution('3') == '3'\nassert solution('5') == '5'\nassert solution('10') == '10'\nassert solution('100') == '100'\n"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''\n\n5\n\n''') == '8'\n\nassert solution('''\n\n4\n\n''') == '8'\n\nassert solution('''\n\n11\n\n''') == '14'\n\nassert solution('''\n\n22\n\n''') == '20'\n"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"4\") == \"2\"\nassert solution(\"10\") == \"9\"\nassert solution(\"100\") == \"99\"\nassert solution(\"1000\") == \"999\"\n"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('4') == 8\nassert solution('11') == 14\nassert solution('22') == 20\n\n\"\"\""
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1 2 3 4') == '4'\nassert solution('1 2 2 5') == '3'\nassert solution('500000 500000 500000 500000') == '1'\nassert solution('1000000 1000000 1000000 1000000') == '1'\n\n\"\"\"\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('1 2 3 4') == '4'\nassert solution('1 2 2 5') == '3'\nassert solution('500000 500000 500000 500000') == '1'\n\"\"\"\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1 2 3 4') == '4'\nassert solution('1 2 2 5') == '3'\nassert solution('500000 500000 500000 500000') == '1'\nassert solution('1000000 1000000 1000000 1000000') == '1'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1 2 3 4') == '4'\nassert solution('1 2 2 5') == '3'\nassert solution('500000 500000 500000 500000') == '1'\nassert solution('1 2 2 3') == '1'\nassert solution('1 2 2 4') == '0'\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1 2 3 4') == '4'\nassert solution('1 2 2 5') == '3'\nassert solution('500000 500000 500000 500000') == '1'\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1 2 3 4') == '4'\nassert solution('1 2 2 5') == '3'\nassert solution('500000 500000 500000 500000') == '1'\n\"\"\"\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''1 2 3 4''') == '4'\nassert solution('''1 2 2 5''') == '3'\nassert solution('''500000 500000 500000 500000''') == '1'\nassert solution('''1 2 2 3''') == '3'\nassert solution('''1 2 2 5''') == '3'\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == '1\\n'\nassert solution(stdin) == '1\\n'\nassert solution(stdin) == '1\\n'\nassert solution(stdin) == '1\\n'\nassert solution(stdin) == '1\\n'\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1 2 3 4') == '4'\nassert solution('1 2 2 5') == '3'\nassert solution('500000 500000 500000 500000') == '1'\n\n\n\n'''\n\nA,B,C,D = (int(x) for x in stdin.split())"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1 2 2 5') == '4'\nassert solution('500000 500000 500000 500000') == '1'\nassert solution('1 2 2 5') == '3'\nassert solution('500000 500000 500000 500000') == '1'\nassert solution('500000 500000 500000 500000') == '1'\n"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('5 3 4 10007') == '5563'"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"1 2 3 4 5\") == \"5563\"\nassert solution(\"2 2 2 2 2\") == \"4\"\nassert solution(\"3 5 7 9 11\") == \"24690\"\nassert solution(\"1000 7 11 9\") == \"2230\"\nassert solution(\"12 34 56 78 90\") == \"0\"\n"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('') is None\nassert solution('3 4 5 10007') == 5563\nassert solution('1 0 0 10007') == 0\nassert solution('0 1 0 10007') == 1\nassert solution('0 0 1 10007') == 1\n"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(input()) == '5563'"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''5 3 4 10007''') == '5563'\n\nprint(solution('''4 1 3 10007'''))\n"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''5 3 4 10007''') == '5563'\nassert solution('''5 5 5 10007''') == '0'\nassert solution('''1 2 3 4 10007''') == '0'\nassert solution('''1 2 3 4 7''') == '5563'\nassert solution('''5 3 4 4''') == '0'\n"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('3 7 4 10007') == '5563'"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1 2 3 4 10') == '5563'\nassert solution('1 2 3 4 100') == '5563'\nassert solution('5 2 3 4 10007') == '5563'\nassert solution('3 2 5 4 10007') == '5563'\nassert solution('3 2 6 4 10007') == '5563'\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"1 1 1 1 5 5 5\") == \"15\"\nassert solution(\"8 4 3 2 10 5 2\") == \"32\"\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\n'''1 1 1 1 5 5 5'''\n) == '15'\n\nassert solution(\n'''8 4 3 2 10 5 2'''\n) == '32'\n\nassert solution(\n'''15 5 3 1 1 3 5'''\n) == '10'\n\nassert solution(\n'''16 19 3 5 5 15 3'''\n) == '21'\n\nassert solution(\n'''40 21 3 5 3 10 3'''\n) == '45'"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"1 1 1 1 5 5 5\") == \"15\"\nassert solution(\"8 4 3 2 10 5 2\") == \"32\"\nassert solution(\"1 0 0 1 0 1 0\") == \"32\"\nassert solution(\"1 0 0 1 0 1 0\") == \"32\"\nassert solution(\"1 0 0 1 0 1 0\") == \"32\"\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1 1 1 1 5 5 5') == '15'\nassert solution('8 4 3 2 10 5 2') == '32'\nassert solution('9 5 4 1 1 1 1 1') == '4'\nassert solution('8 8 8 8 8 8 8 8') == '80'\nassert solution('2 2 2 2 2 2 2') == '4'\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1 1 1 1 5 5 5') == '15'\nassert solution('8 4 3 2 10 5 2') == '32'\n\n\"\"\"\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1 1 1 1 5 5 5') == '15'\nassert solution('8 4 3 2 10 5 2') == '32'\nassert solution('1 1 1 1 5 5 5') == '15'\nassert solution('1 1 1 1 5 5 5') == '15'\nassert solution('8 4 3 2 10 5 2') == '32'\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"1 1 1 1 5 5 5\") == \"15\"\nassert solution(\"8 4 3 2 10 5 2\") == \"32\"\nprint(solution(input()))\n\"\"\"\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''1 1 1 1 5 5 5''') == '15'\nassert solution('''8 4 3 2 10 5 2''') == '32'"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('8 4 3 2 10 5 2') == '32'\nassert solution('1 1 1 1 5 5 5') == '15'\nassert solution('8 4 3 2 10 5 2') == '32'\nassert solution('1 1 1 1 10 10 10') == '32'\nassert solution('8 4 3 2 10 5 2') == '32'\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"3 10\\n4 6 7\") == \"8\"\nassert solution(\"2 12\\n1 10\") == \"9\"\nassert solution(\"2 7\\n3 4\") == \"6\"\nassert solution(\"2 7\\n1 10\") == \"9\"\nassert solution(\"2 7\\n3 4\") == \"6\"\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == '6'\n\n\"\"\"\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('2 7') == '6'\nassert solution('3 10') == '8'\nassert solution('2 12') == '9'\nassert solution('2 12') == '9'\nassert solution('2 7') == '6'\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == \"7\"\n\n\n\n\"\"\""
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('10 12') == '8'\nassert solution('2 12') == '9'\nassert solution('2 7') == '6'\n\n\n\"\"\"\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('3 10\\n4 6 7\\n') == '8'\nassert solution('2 12\\n1 10\\n') == '9'\nassert solution('2 7\\n3 4\\n') == '6'\nassert solution('1 2 3\\n0 1 2 3\\n') == '6'\nassert solution('1 1 1\\n0 0 0\\n') == '6'\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('3 10\\n4 6 7\\n') == '8'\nassert solution('2 12\\n1 10\\n') == '9'\nassert solution('2 7\\n3 4\\n') == '6'\n\n\"\"\"\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('2 10') == '8'\nassert solution('2 12') == '9'\nassert solution('2 7') == '6'\nassert solution('3 4 7') == '9'\nassert solution('10 9') == '9'\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('3 10') == '8'\nassert solution('2 12') == '9'\nassert solution('2 7') == '6'\nassert solution('2 6') == '5'\nassert solution('2 7') == '4'\n"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''5\n1\n1\n2\n4 1\n3\n4 1 3\n4\n2 3 4 5\n5\n1 5 7 2 8''') == '1 2'\n\nassert solution('''5\n1\n1\n2\n4 1\n3\n4 1 3\n4\n2 3 4 5\n5\n1 5 7 2 8''') == '-1'\n\nassert solution('''1\n5\n1\n5 1 5 1 1''') == '-1'\n'''\n"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"5\n1\n1\n2\n4 1\n3\n4 1 3\n4\n2 3 4 5\n5\n1 5 7 2 8\n\"\"\") == \"\"\"1 2 \n-1\n4 5 1 2 3 6 \n-1\n1 3 5 6 7 9 2 4 8 10\n\"\"\"\nassert solution(\n\"\"\"5\n1\n1\n2\n4 1\n3\n4 1 3\n4\n2 3 4 5\n5\n1 5 7 2 8\n\"\"\") == \"\"\"1 2 \n-1\n4 5 1 2 3 6 \n-1\n1 3 5 6 7 9 2 4 8 10\n\"\"\"\nassert solution(\n\"\"\"5\n1\n1\n2\n4 1\n3\n4 1 3\n4\n2 3 4 5\n5\n1 5 7 2 8\n\"\"\") == \"\"\"1 2 \n-1\n4 5 1 2 3 6 \n-1\n1 3 5 6 7 9 2 4 8 10\n\"\"\"\nassert solution(\n\"\"\"5\n1\n1\n2\n4 1\n3\n4 1 3\n4\n2 3 4 5\n5\n1 5 7 2 8\n\"\"\") == \"\"\"1 2 \n-1\n4 5 1 2 3 6 \n-1\n1 3 5 6 7 9 2 4 8 10\n\"\"\"\nassert solution(\n\"\"\"5\n1\n1\n2\n4 1\n3\n4 1 3\n4\n2 3 4 5\n5\n1 5 7 2 8\n\"\"\") == \"\"\"1 2 \n-1\n4 5 1 2 3 6 \n-1\n1 3 5 6 7 9 2 4 8 10\n\"\"\"\n"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''5\n1\n1\n2\n4 1\n3\n4 1 3\n4\n2 3 4 5\n5\n1 5 7 2 8''') == '''1 2 \n-1\n4 5 1 2 3 6 \n-1\n1 3 5 6 7 9 2 4 8 10'''\n"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1\\n1') == '2'\nassert solution('1\\n2\\n') == '2'\nassert solution('1\\n2\\n4 1\\n3\\n4 1 3\\n4') == '4 1 3'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10') == '-1'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25') == '-1'\n"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''1\n1''') == '1'\nassert solution('''2\n1''') == '-1'\nassert solution('''3\n1''') == '-1'\nassert solution('''4\n1''') == '-1'\nassert solution('''4\n2''') == '1 2'\n"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"\"\nassert solution(\"1\\n1\") == \"\"\nassert solution(\"1\\n2\") == \"\"\nassert solution(\"1\\n3\") == \"\"\n"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1\\n1\\n2\\n4 1\\n3\\n4 1 3\\n4\\n2 3 4 5\\n5') == '1 2'\nassert solution('5\\n1\\n1\\n2\\n4 1\\n3\\n4 1 3\\n4\\n2 3 4 5\\n5') == '4 5 1 2 3 6'\nassert solution('5\\n1\\n1\\n2\\n4 1\\n3\\n4 1 3\\n4\\n2 3 4 5\\n5') == '1 3 5 6 7 9 2 4 8 10'\nassert solution('1\\n1\\n2\\n4 1\\n3\\n4 1 3\\n4\\n2 3 4 5\\n5') == '1 2'\nassert solution('5\\n1\\n1\\n2\\n4 1\\n3\\n4 1 3\\n4\\n2 3 4 5\\n5') == '4 5 1 2 3 6'\n"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''5\n5\n1\n1\n2\n4 1\n3\n4 1 3\n4\n2 3 4 5\n5\n1 5 7 2 8\n''') == '1 2\\n-1\\n4 5 1 2 3 6\\n-1\\n1 3 5 6 7 9 2 4 8 10'\nassert solution('''3\n2\n1\n2\n2\n''') == '-1'\nassert solution('''2\n2\n1\n2\n2\n''') == '-1'\nassert solution('''1\n1\n''') == '-1'\nassert solution('''2\n2\n1\n2\n''') == '-1'\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('2') == 2\nassert solution('2\\n1 2') == 2\nassert solution('3\\n2 4 6') == 6\nassert solution('2\\n12 18') == 12\nassert solution('5\\n45 12 27 30 18') == 15\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 2 3\\n\") == 2\nassert solution(\"2\\n1 2\\n\") == 1\nassert solution(\"3\\n2 4 6\\n\") == 6\nassert solution(\"2\\n12 18\\n\") == 12\nassert solution(\"5\\n45 12 27 30 18\\n\") == 15\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"2\\n1 2\") == 2\nassert solution(\"3\\n2 4 6\") == 6\nassert solution(\"5\\n45 12 27 30 18\") == 15\nassert solution(\"6\\n2 4 6\") == 6\nassert solution(\"7\\n7 7 7 7 7\") == 28\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1 2') == '2'\nassert solution('2 4 6') == '6'\nassert solution('12 18') == '12'\nassert solution('45 12 27 30 18') == '15'\nassert solution('5 45 12 27 30 18') == '15'\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == expected\n\"\"\"\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1 2\\n2 3') == 2\nassert solution('3 2\\n2 3') == 0\nassert solution('10 22\\n9 19\\n4 4') == 18\nassert solution('1 2 3 4 5\\n2 1 1 2 3') == 8\nassert solution('1 2 3 4 5\\n2 1 1 2 4') == 7\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1 2') == '2'\nassert solution('2 4 6') == '6'\nassert solution('12 18') == '12'\nassert solution('45 12 27 30 18') == '15'\n'''\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('') == None\nassert solution('1\\n1') == None\nassert solution('1 2') == None\nassert solution('2\\n2') == None\nassert solution('1 2 3') == None\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"1\\n2\") == \"2\"\nassert solution(\"2\\n1\") == \"2\"\nassert solution(\"2\\n2\") == \"0\"\nassert solution(\"3\\n2 4 6\") == \"6\"\nassert solution(\"5\\n45 12 27 30 18\") == \"15\"\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('3\\n2 4 6\\n') == '6'\nassert solution('2\\n12 18\\n') == '12'\nassert solution('5\\n45 12 27 30 18\\n') == '15'\n\n\n\"\"\"\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('4') == 'NO'\nassert solution('2') == 'YES'\nassert solution('10') == 'NO'\nassert solution('FFFFFFFFFF') == 'NO'\nassert solution('SSFFSFFSFF') == 'YES'\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('') is None\nassert solution('WEW') is None\nassert solution('FSSF') == 'NO'\nassert solution('SSFFSFFSFF') == 'YES'\nassert solution('F') == 'NO'\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdin.splitlines()[0]"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('FSSFF') == 'NO'\nassert solution('SSFFSFFSFF') == 'YES'\nassert solution('SF') == 'YES'\nassert solution('F') == 'NO'\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('FSSF') == 'NO'\nassert solution('SF') == 'YES'\nassert solution('FFFFFFFFFF') == 'NO'\nassert solution('SSFFSFFSFF') == 'YES'\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"4\") == \"NO\"\nassert solution(\"FF\") == \"YES\"\nassert solution(\"FFFFFF\") == \"NO\"\nassert solution(\"FFF\") == \"YES\"\nassert solution(\"FSSF\") == \"NO\"\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('4\\nFSSF') == 'NO'\nassert solution('2\\nSF') == 'YES'\nassert solution('10\\nFFFFFFFFFF') == 'NO'\nassert solution('10\\nSSFFSFFSFF') == 'YES'\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('4\\nFSSF') == 'NO'\nassert solution('2\\nSF') == 'YES'\nassert solution('10\\nFFFFFFFFFF') == 'NO'\nassert solution('10\\nSSFFSFFSFF') == 'YES'\nassert solution('10\\nSF') == 'YES'\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('2') == 'NO'\nassert solution('FSF') == 'YES'\nassert solution('SS') == 'YES'\nassert solution('F') == 'NO'\nassert solution('FFS') == 'YES'\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('3 2') == '6'\nassert solution('3 3') == '0'\nassert solution('4 0') == '24'\nassert solution('1337 42') == '807905441'\n\n\n\"\"\""
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('3 2\\n') == '6'\nassert solution('3 3\\n') == '0'\nassert solution('4 0\\n') == '24'\nassert solution('1337 42\\n') == '807905441'\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''3 2''') == '6'\nassert solution('''3 3''') == '0'\nassert solution('''4 0''') == '24'\nassert solution('''1337 42''') == '807905441'\nprint(solution('''807905441'''))"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"3 2\") == \"6\"\nassert solution(\"3 3\") == \"0\"\nassert solution(\"4 0\") == \"24\"\nassert solution(\"1337 42\") == \"807905441\"\nassert solution(\"15 0\") == \"983276363\"\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''3 2''') == '6'\nassert solution('''3 3''') == '0'\nassert solution('''4 0''') == '24'\nassert solution('''1337 42''') == '807905441'\nassert solution('''2711 2214''') == '839866075'\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('3 2\\n') == '6'\nassert solution('3 3\\n') == '0'\nassert solution('4 0\\n') == '24'\nassert solution('1337 42\\n') == '807905441'\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1 1') == '1'\nassert solution('3 2') == '6'\nassert solution('3 3') == '0'\nassert solution('4 0') == '24'\nassert solution('1337 42') == '807905441'"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''3 2''') == '6'\nassert solution('''3 3''') == '0'\nassert solution('''4 0''') == '24'\nassert solution('''1337 42''') == '807905441'"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('3 2') == '6'\nassert solution('3 3') == '0'\nassert solution('4 0') == '24'\nassert solution('1337 42') == '807905441'\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''0 0''') == '1.00000000000000000000'\nassert solution('''2\n2\n0 1\n0 2 2\n''') == '0.50000000000000000000'\nassert solution('''1 3\n3\n3 3 2\n-2 3 6\n-2 7 10\n''') == '0.50000000000000000000'\nassert solution('''10 10\n1000\n1 1 1\n-1 -1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('0 0') == '1.00000000000000000000'\nassert solution('2 2') == '0.50000000000000000000'\nassert solution('0 0') == '1.00000000000000000000'\nassert solution('2 1 2') == '0.50000000000000000000'\nassert solution('0 2 2') == '0.50000000000000000000'\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(input()) == \"1.00000000000000000000\"\n\n\"\"\"\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"\n0 0\n2\n2 0 1\n0 2 2\n\"\"\"\n) == \"1.00000000000000000000\"\n\n\nassert solution(\n\"\"\"\n1 3\n3\n3 3 2\n-2 3 6\n-2 7 10\n\"\"\"\n) == \"0.50000000000000000000\"\n\nassert solution(\n\"\"\"\n0 0\n1\n2\n2 0 1\n2 0 1\n\"\"\"\n) == \"0.50000000000000000000\"\n\nassert solution(\n\"\"\"\n0 0\n2\n2 0 1\n-2 3 6\n-2 7 10\n\"\"\"\n) == \"0.50000000000000000000\"\n\nassert solution(\n\"\"\"\n0 0\n1\n2\n-2 3 6\n-2 7 10\n\"\"\"\n) == \"0.50000000000000000000\""
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('0 0\\n2\\n2 0 1\\n0 2 2') == '1.00000000000000000000'\nassert solution('1 3\\n3\\n3 3 2\\n-2 3 6\\n-2 7 10\\n') == '0.50000000000000000000'\nassert solution('3 3\\n-2 3 6\\n-2 7 10\\n') == '0.50000000000000000000'\nassert solution('3 3\\n-2 3 6\\n-2 7 10\\n') == '0.50000000000000000000'\n\n\n-----Answer-----\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''0 0''') == '1.00000000000000000000'\nassert solution('''2\n2\n2 0 1''') == '1.00000000000000000000'\nassert solution('''2\n3\n3 3 2\n-2 3 6\n-2 7 10''') == '0.50000000000000000000'\n'''\n\"\"\"\na, b = [int(s) for s in stdin.split()]\nn = int(stdin)\n\nbest_time = float('inf')\n\nfor _ in range(n):\n    x, y, v = [int(s) for s in stdin.split()]\n    if abs(x - a) + abs(y - b) <= v:\n        best_time = min(best_time, abs((x - a) + (y - b)))\n\nprint(best_time)\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('0 0\\n2\\n2 0 1\\n0 2 2\\n0 2 2') == '1.00000000000000000000'\nassert solution('1 3\\n3\\n3 3 2\\n-2 3 6\\n-2 7 10') == '0.50000000000000000000'\n\n\"\"\"\nimport sys\nfrom math import log10"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('0 0') == '1.00000000000000000000'\nassert solution('1 3') == '0.50000000000000000000'\nassert solution('3') == '0.50000000000000000000'\nassert solution('3 3 2') == '0.50000000000000000000'\nassert solution('-2 3 6') == '0.50000000000000000000'\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''0 0\n2\n2 0 1\n0 2 2\n''') == '1.00000000000000000000'\nassert solution('''1 3\n3\n3 3 2\n-2 3 6\n-2 7 10\n''') == '0.50000000000000000000'\n\n\n\n\"\"\"\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('0 0') == '1.00000000000000000000'\nassert solution('2') == '1.00000000000000000000'\nassert solution('2 0 1') == '0.50000000000000000000'\nassert solution('0 2 2') == '0.50000000000000000000'\nassert solution('3') == '0.50000000000000000000'\n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"0 2 4\\n1 3 1\\n0 8 3\\n0 20 10\\n1 5 5\") == 4\n\"\"\"\n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == '4'\n\"\"\"\n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('0 2 4\\n1 3 1\\n0 8 3\\n0 20 10\\n1 5 5') == '4'\nassert solution('5 3\\n0 2 4\\n1 3 1\\n0 8 3\\n0 20 10\\n1 5 5') == '4'\nassert solution('5 3\\n0 2 4\\n1 3 1\\n0 8 3\\n0 20 10\\n1 5 5\\n0 0 5\\n0 0 7') == '4'\nassert solution('5 3\\n0 2 4\\n1 3 1\\n0 8 3\\n0 20 10\\n1 5 5\\n0 0 5\\n0 0 7\\n1 0 1') == '3'\nassert solution('1 1\\n0 1\\n0 0\\n0 0\\n0 0') == '1'\n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(input(\"\")) == output\n\"\"\"\n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"5 3\\n0 2 4\\n1 3 1\\n0 8 3\\n0 20 10\\n1 5 5\") == \"4\"\nassert solution(\"3 2\\n1 3 1\\n0 8 3\\n0 20 10\\n1 5 5\") == \"3\"\nassert solution(\"2 2\\n1 3 1\\n0 8 3\\n0 20 10\\n1 5 5\") == \"0\"\nassert solution(\"2 2\\n1 3 1\\n0 8 3\\n0 20 10\\n1 5 5\") == \"2\"\nassert solution(\"2 2\\n1 3 1\\n0 8 3\\n0 20 10\\n1 5 5\") == \"1\"\n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('3 4\\n0 2 4\\n1 3 1\\n0 8 3\\n0 20 10\\n1 5 5\\n') == '4'\nassert solution('2 1\\n1 2\\n1 2\\n') == '0'\nassert solution('2 2\\n0 1\\n1 1\\n') == '1'\nassert solution('2 3\\n1 2\\n1 3\\n') == '2'\nassert solution('4 4\\n0 1 2 4\\n1 3 2 3\\n0 3 4 1\\n0 3 4 1\\n1 3 2 3\\n') == '6'\n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"5 3\\n0 2 4\\n1 3 1\\n0 8 3\\n0 20 10\\n1 5 5\") == \"4\"\nassert solution(\"4 3\\n0 1 2\\n1 1 2\\n2 2 1\\n3 1 2\") == \"3\"\nassert solution(\"7 1\\n2 1 2\\n3 1 2\\n4 1 2\\n5 1 2\\n6 1 2\") == \"4\"\nassert solution(\"6 1\\n2 1 2\\n3 1 2\\n4 1 2\\n5 1 2\\n6 1 2\") == \"5\"\nassert solution(\"7 2\\n3 2 2\\n4 2 2\\n5 2 2\\n6 2 2\\n7 2 2\") == \"4\"\n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"3 3\") == \"3\"\nassert solution(\"2 2\") == \"0\"\nassert solution(\"1 2 1\") == \"1\"\nassert solution(\"1 2 1 2\") == \"0\"\nassert solution(\"1 0 0\") == \"1\"\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"6\\n1 1 1 2 2 2\") == \"1 2 4\\n1 2 6\\n\"\nassert solution(\"6\\n2 2 1 1 4 6\") == \"-1\\n\"\nassert solution(\"6\\n2 2 2 1 1 4\") == \"-1\\n\"\nassert solution(\"6\\n2 2 2 1 1 4\") == \"-1\\n\"\nassert solution(\"6\\n2 2 2 1 1 4\") == \"-1\\n\"\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"1 1 1 2 2 2\") == \"1 2 4\"\nassert solution(\"6\") == \"-1\"\nassert solution(\"2 2 1 1 4 6\") == \"1 2 4\"\nassert solution(\"2 2 1 1 4 6\") == \"-1\"\nassert solution(\"2 1 1 1 4 6\") == \"1 2 4\"\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\n'''6\n1 1 1 2 2 2'''\n) == '1 2 4'\n\nassert solution(\n'''5\n2 2 1 1 4'''\n) == '-1'\n\nassert solution(\n'''4\n2 2 1 1'''\n) == '1 1 1'\n\nassert solution(\n'''7\n3 3 3 1 3 1'''\n) == '1 3 1'\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1 2 1 4 6') == '1 2 4'\nassert solution('2 2 1 1 4 6') == '1 2 4'\nassert solution('2 2 1 1 4 5') == '1 2 4'\nassert solution('6 2 1 1 4 5') == '1 2 4'\nassert solution('1 1 1 1 1 1 1') == '1'\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1 2 1 1 4 6') == '1 2 4'\nassert solution('2 2 1 1 4 6') == '1 2 4'\nassert solution('1 1 1 1 1 1') == '-1'\nassert solution('1 2 1 1 4 6') == '1 2 4'\nassert solution('1 2 1 1 1') == '-1'\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''6\n1 1 1 2 2 2''') == '1 2 4'\nassert solution('''6\n2 2 1 1 4 6''') == '1 2 4'\nassert solution('''6\n2 2 2 2 2 2''') == '1 2 4'\nassert solution('''6\n1 1 1 1 1 1''') == '-1'\nassert solution('''6\n2 2 1 1 1 4 6''') == '-1'\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('1 1 1 2 2 2') == '1 2 4'\nassert solution('6 1 1 1 2 2 2') == '1 2 4'\nassert solution('6 2 2 1 1 4 6') == '1 2 4'\nassert solution('6 2 2 1 1 4 6') == '1 2 4'\nassert solution('5 1 1 1 1') == '-1'\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"6\\n1 1 1 2 2 2\") == \"-1\"\nassert solution(\"6\\n2 2 1 1 4 6\") == \"1 2 4\\n1 2 6\"\nassert solution(\"6\\n2 2 1 1 4 6\\n1 2 4\") == \"1 2 4\\n1 2 6\"\nassert solution(\"6\\n1 1 1 2 2 2\\n1 1 1\") == \"1 2\\n1 2\"\n\n\n\"\"\"\n\nfrom collections import Counter\nfrom itertools import combinations\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''6\n1 1 1 2 2 2\n''') == '-1'\nassert solution('''6\n2 2 1 1 4 6\n''') == '1 2 4'\nassert solution('''7\n2 2 1 1 4 6 8\n''') == '1 2 4'\nassert solution('''4\n1 1 1 1\n''') == '-1'\nassert solution('''6\n1 1 1 2 2 2\n''') == '-1'\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1 1 1 2 2 2') == '-1'\nassert solution('2 2 1 1 4 6') == '1 2 4'\nassert solution('2 2 1 1 4 6') == '1 2 4'\nassert solution('3 3 3 3 3 3') == '-1'\nassert solution('1 1 1 1 1 1') == '1'\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('abacaba') == 2\nassert solution('zzzzz') == 1\nassert solution('abcde') == 3"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"abacaba\") == 2\nassert solution(\"zzzzz\") == 1\nassert solution(\"abcde\") == 3"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('abacaba') == 2\nassert solution('zzzzz') == 1\nassert solution('abcde') == 3\nassert solution('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('abacaba') == '2'\nassert solution('zzzzz') == '1'\nassert solution('abcde') == '3'\n\n\n\n'''"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('abacaba') == '2'\nassert solution('zzzzz') == '1'\nassert solution('abcde') == '3'\nassert solution('bbbbbba') == '1'\nassert solution('adcdef') == '3'\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('') == 0\nassert solution('abacaba') == 2\nassert solution('zzzzz') == 1\nassert solution('abcde') == 3\n\n\"\"\"\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('abacaba') == 2\nassert solution('zzzzz') == 1\nassert solution('abcde') == 3"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''abacaba''') == '2'\nassert solution('''zzzzz''') == '1'\nassert solution('''abcde''') == '3'\nprint('Test success!')\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('abacaba') == 2\nassert solution('zzzzz') == 1\nassert solution('abcde') == 3\nassert solution('bbbbbbbbbbbbbbb') == 1\nassert solution('aabbbac') == 2\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('') == 0\nassert solution('abacaba') == 2\nassert solution('zzzzz') == 1\nassert solution('abcde') == 3\nassert solution('abc') == 0\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"3 5\") == \"10\"\nassert solution(\"15 6\") == \"38\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"999 999\") == \"1\"\nassert solution(\"9999 999\") == \"1\"\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('3 5') == '10'\nassert solution('15 6') == '38'\n\"\"\"\n\nn, k = map(int, stdin.split())"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n\nfrom sys import stdin,stdout\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''3 5\n''') == '10'\nassert solution('''15 6\n''') == '38'\n'''"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('3 5') == '10'\nassert solution('15 6') == '38'\nassert solution('1 10') == '1'\nassert solution('10 7') == '7'\nassert solution('100 8') == '38'\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('3 5') == '10'\nassert solution('15 6') == '38'\nassert solution('1000000000 1') == '7'\n\n\"\"\""
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(input()) == input()\n\"\"\""
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''3 5\n''') == '10'\nassert solution('''15 6\n''') == '38'\n\nassert solution('''2 10\n''') == '0'\nassert solution('''3 4\n''') == '0'\nassert solution('''7 5\n''') == '0'\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"1\\n1\\n2\\n3\") == \"1\\n\"\nassert solution(\"2\\n1\\n2\\n3\") == \"1\\n\"\nassert solution(\"3\\n1\\n2\\n3\") == \"2\\n\"\nassert solution(\"4\\n1\\n2\\n3\") == \"2\\n\"\nassert solution(\"4\\n1\\n3\\n1\") == \"1\\n\"\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''2 2\n2 1''') == '1'\nassert solution('''1 1\n1''') == '1'\nassert solution('''1 2\n2 1''') == '2'\nassert solution('''2 3\n1 2 1''') == '1'\nassert solution('''1 4\n2 3 1''') == '1'\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"1\\n1\") == \"1\"\nassert solution(\"2\\n2\") == \"1\"\nassert solution(\"1\\n1\\n1\\n1\") == \"2\"\nassert solution(\"2\\n1\\n1\") == \"1\"\nassert solution(\"2\\n1\\n1\\n1\") == \"1\"\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''4 3\n2 3 2 1''') == '3'\nassert solution('''3 4\n1 2 1''') == '1'\nassert solution('''1 2 1\n1 2 1''') == '1'"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1\\n4\\n2 3 2 1') == '3'\nassert solution('1\\n1\\n1 1\\n1') == '1'\nassert solution('1\\n2\\n2 2\\n2') == '3'\nassert solution('1\\n2\\n1') == '1'\nassert solution('1\\n1\\n1 1\\n1') == '1'\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26\") == \"1\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26\") == \"3\"\nassert solution
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3 4\") == '1'\nassert solution(\"2 3 4 1\") == '1'\nassert solution(\"1 2 3 4\") == '3'\nassert solution(\"1 2 3 4 1\") == '3'\nassert solution(\"1 2 3 4 1 3 4\") == '1'\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1 2 3 4') == '3'\nassert solution('2 3 4') == '1'\nassert solution('2 3 2 1') == '3'\nassert solution('1 2 3 4') == '3'\nassert solution('3 4') == '1'\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''2 4\n2 3 2 1''') == '1'\nassert solution('''3 4\n1 2 1''') == '1'\nassert solution('''10 7\n1 2 3 4 5 6 7 8 9 10''') == '3'\nassert solution('''10 7\n1 2 3 4 5 6 7 8 9 10''') == '1'\nassert solution('''1000000000 1000000000''') == '1'\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('XS\\nXS\\nM\\nXL') == '2'\nassert solution('XXXL\\nXXL\\nXXL\\nXXXS') == '1'\nassert solution('M\\nXS\\nXS\\nM\\n') == '0'\nassert solution('XXXL\\nXXXS\\n') == '1'\nassert solution('M\\nXS\\nXS\\nM\\nXS\\n') == '0'\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''\n3\nXS\nXS\nM\nXL\nS\nXS\n''') == '2'\n\nassert solution('''\n2\nXXXL\nXXL\nXXL\nXXXS\n''') == '1'\n\nassert solution('''\n2\nM\nXS\nXS\nM\n''') == '0'\n\nassert solution('''\n2\nM\nXS\nXS\nM\n''') == '0'"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('3') == '2'\nassert solution('2') == '1'\nassert solution('2\\nXXL\\nXXL\\nM') == '0'\nassert solution('\\n'.join(['2', 'XXL', 'XXL', 'M'])) == '0'\nassert solution('\\n'.join(['2', 'XXL', 'XXL', 'M', 'M'])) == '1'\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('XS') == 'L'\nassert solution('XXXL') == 'S'\nassert solution('M') == 'S'\nassert solution('XS') == 'L'\nassert solution('XL') == 'S'\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('3\\nXS\\nXS\\nM\\nXL\\nS\\nXS\\n') == '2'\nassert solution('2\\nXXXL\\nXXL\\nXXL\\nXXXS\\n') == '1'\nassert solution('2\\nM\\nXS\\nXS\\nM\\n') == '0'\nassert solution('2\\nM\\nXS\\nXS\\nM\\n') == '0'\nassert solution('2\\nM\\nXS\\nXS\\nM\\n') == '0'\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"\"\"M\nXL\nS\nXS\"\"\") == \"0\"\nassert solution(\"\"\"M\nXS\nS\nM\"\"\") == \"1\"\nassert solution(\"\"\"XS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"3\") == \"0\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\\nS\\nS\\nL\\n\") == \"2\"\nassert solution(\"3\\nS\\nL\\nS\\n\") == \"1\"\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('3') == '2'\nassert solution('XXXL') == '1'\nassert solution('X') == '0'\nassert solution('XXXXL') == '0'\nassert solution('XSXLXLXSXLXXL') == '0'\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''3\nXXXL\nXXL\nXXL\nXXXS''') == '1'\nassert solution('''2\nM\nXS\nXS\nM\n''') == '0'\nassert solution('''2\nXXXL\nXXL\nXXL\nXXXS\n''') == '1'\nassert solution('''2\nM\nXS\nXS\nM\n''') == '0'\n'''\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1 1 3 2') == '1/3'\nassert solution('4 3 2 2') == '1/4'\nassert solution('1 1 1 1') == '1/1'\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"1 1 3 2\") == \"1/3\"\nassert solution(\"4 3 2 2\") == \"1/4\"\nassert solution(\"1 1 1 1\") == \"1/1\"\nassert solution(\"1 2 3 4\") == \"1/4\"\nassert solution(\"2 1 1 1\") == \"1/2\"\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"1 1 3 2\") == \"1/3\"\nassert solution(\"4 3 2 2\") == \"1/4\"\nassert solution(\"4 1 2 2\") == \"1/4\"\nassert solution(\"1 2 3 4\") == \"0/1\"\nassert solution(\"2 2 2 2\") == \"0/1\"\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1 1 3 2') == '1/3'\nassert solution('4 3 2 2') == '1/4'\nassert solution('1 4 3 2') == '1/4'\nassert solution('1 1 1 1') == '1/1'\nassert solution('2 2 1 2') == '1/2'\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''1 1 3 2''') == '1/3'\nassert solution('''4 3 2 2''') == '1/4'\nassert solution('''4 3 2 2''') == '1/4'\n'''\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('') == '0/1'\nassert solution('4 3 2 2') == '1/4'\nassert solution('1 1 3 2') == '1/3'\nassert solution('4 3 2 2') == '1/4'\nassert solution('2 2 2 2') == '2/2'\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('1 1 3 2') == '1/3'\nassert solution('4 3 2 2') == '1/4'\nassert solution('5 5 3 3') == '2/5'\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1 1 3 2') == '1/3'\nassert solution('4 3 2 2') == '1/4'\nassert solution('1 2 3 4') == '1/2'\nassert solution('1 2 2 2') == '1'\nassert solution('1 2 3 2') == '1/2'\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1 1 3 2') == '1/3'\nassert solution('4 3 2 2') == '1/4'\nassert solution('2 3 4 5') == '6/10'\nassert solution('2 1 2 1') == '0/1'\nassert solution('1 1 1 1') == '1/1'\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1 1 3 2') == '1/3'\nassert solution('4 3 2 2') == '1/4'\nassert solution('0 0 1 1') == '1/1'\nassert solution('0 1 1 1') == '2/2'\nassert solution('1 1 1 1') == '1/1'\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"R\") == \"0\"\nassert solution(\"B\") == \"1\"\nassert solution(\"BB\") == \"2\"\nassert solution(\"GB\") == \"1\"\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"RRG\") == \"1\"\nassert solution(\"RRRRR\") == \"0\"\nassert solution(\"BRBG\") == \"4\"\nassert solution(\"RRRGG\") == \"1\"\nassert solution(\"RRRGGGG\") == \"1\"\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"RRRR\") == 0\nassert solution(\"RRRG\") == 1\nassert solution(\"BRBG\") == 4\nassert solution(\"RRBR\") == 1\nassert solution(\"RRRB\") == 0\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"RRR\") == \"1\"\nassert solution(\"RRRB\") == \"2\"\nassert solution(\"RRRR\") == \"0\"\nassert solution(\"BRBGB\") == \"3\"\nassert solution(\"BGBGBBGB\") == \"0\"\n\nprint(\"All tests passed successfully.\")"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('RRG') == 1\nassert solution('RRRRR') == 0\nassert solution('BRBG') == 4\nassert solution('BRBGB') == 1\nassert solution('RRBRG') == 1\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('1\\n') == '0'\nassert solution('2\\nBB') == '1'\nassert solution('2\\nBBB') == '2'\nassert solution('2\\nRRG') == '1'\nassert solution('5\\nRRRRR') == '4'\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('RRG') == '1'\nassert solution('RRRRR') == '0'\nassert solution('BRBG') == '4'\nassert solution('RBGGGB') == '3'\nassert solution('GBRBGBGBRBGBGB') == '7'\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"RRG\") == 1\nassert solution(\"BRBG\") == 0\nassert solution(\"RRRRR\") == 4\nassert solution(\"RBGB\") == 1\nassert solution(\"RBGBRBGB\") == 4\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('3') == '1'\nassert solution('5') == '0'\nassert solution('RRG') == '1'\nassert solution('RRRRR') == '4'\nassert solution('BRBG') == '0'\nprint(\"Test cases passed.\")\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"5\") == \"1\"\nassert solution(\"12\") == \"3\"\nassert solution(\"15\") == \"4\"\nassert solution(\"25\") == \"5\"\nassert solution(\"40\") == \"6\"\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('5\\n') == '1'\nassert solution('12\\n') == '3'\nassert solution('30\\n') == '14'\nassert solution('1234\\n') == '14'\nassert solution('100000000\\n') == '99999'"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1') == '0'\nassert solution('5') == '1'\nassert solution('12') == '3'\nassert solution('123') == '4'\nassert solution('1234') == '5'\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('5') == 1\nassert solution('12') == 3\n\n\"\"\""
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"5\") == 1\nassert solution(\"12\") == 3\nassert solution(\"1000000000\") == 5213\nassert solution(\"1111111111111111111111111111111111\") == 2147483647\nassert solution(\"1111111111111111111111111111111111111\") == 2147483648\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('5') == '1'\nassert solution('12') == '3'\nassert solution('12') == '3'\nassert solution('12') == '3'\nassert solution('12') == '3'\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(input()) == output\n\n\"\"\"\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('5\\n') == '1\\n'\nassert solution('12\\n') == '3\\n'\nassert solution('10\\n') == '6\\n'\nassert solution('15\\n') == '11\\n'\nassert solution('25\\n') == '21\\n'\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('5') == '1'\nassert solution('12') == '3'\nassert solution('1000000') == '999999999'\n\"\"\"\nfrom math import sqrt"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('5') == '1'\nassert solution('12') == '3'\nassert solution('0') == '0'\nassert solution('-2') == '-1'\nassert solution('2') == '1'\n"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''3\n7 20 88''') == '35'\nassert solution('''9\n15 20 30 40 50 60 70 80 90''') == '15'\nassert solution('''9\n16 20 30 40 50 60 70 80 90''') == '90'\n\n''') == '15'\n'''\n"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''3\n7 20 88\n''') == '35'\nassert solution('''9\n16 20 30 40 50 60 70 80 90\n''') == '15'\nassert solution('''9\n15 20 30 40 50 60 70 80 90\n''') == '90'\n'''\n"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('3\\n7 20 88') == '35\\n'\nassert solution('9\\n16 20 30 40 50 60 70 80 90') == '15\\n'\n"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\nfrom sys import stdin, stdout"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\n    '''3'''\n) == '''35'''\nassert solution(\n    '''9'''\n) == '''15'''\nassert solution(\n    '''15 20 30 40 50 60 70 80 90'''\n) == '''90'''\nassert solution(\n    '''1'''\n) == '''1'''\nassert solution(\n    '''2'''\n) == '''1'''\n"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('3\\n7 20 88') == '35'\nassert solution('9\\n15 20 30 40 50 60 70 80 90') == '15'\nassert solution('9\\n16 20 30 40 50 60 70 80 90') == '90'\nassert solution('9\\n15 20 30 40 50 60 70 80 90') == '90'\nassert solution('9\\n15 20 30 40 50 60 70 80 90') == '90'"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1\\n2') == '2'\nassert solution('2\\n2') == '2'\nassert solution('2\\n2\\n2') == '2'\nassert solution('2\\n2\\n2\\n2') == '2'\nassert solution('2\\n2\\n2\\n2\\n2') == '2'\n"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"\"\"5\n7 20 88\"\"\") == \"35\"\nassert solution(\"\"\"9\n15 20 30 40 50 60 70 80 90\"\"\") == \"15\"\nassert solution(\"\"\"9\n15 20 30 40 50 60 70 80 90\"\"\") == \"90\"\nassert solution(\"\"\"3\n7 20 88\"\"\") == \"35\"\nassert solution(\"\"\"9\n16 20 30 40 50 60 70 80 90\"\"\") == \"15\"\n"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''3\n7 20 88''') == '35'\nassert solution('''9\n16 20 30 40 50 60 70 80 90''') == '15'\nassert solution('''9\n15 20 30 40 50 60 70 80 90''') == '90'\nassert solution('''9\n15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35''') == '42'\nassert solution('''7\n7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7''') == '9'\n'''\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('3 5 3\\n3 1 2') == '1'\nassert solution('4 7 2\\n3 3 2 4') == '2'\nassert solution('5 5 1\\n1 3 1 2 1') == '-1'\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"3 5 3\") == \"1\"\nassert solution(\"4 7 2\") == \"2\"\nassert solution(\"5 5 1\") == \"-1\"\nassert solution(\"2 6 1\") == \"3\"\nassert solution(\"3 6 2\") == \"4\"\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1\\n1\\n-1') == -1\nassert solution('1\\n1\\n1') == 1\nassert solution('1\\n1\\n2') == 2\nassert solution('1\\n1\\n2\\n2') == 2\nassert solution('1\\n1\\n2\\n2\\n2') == -1\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('3 5 3\\n3 1 2\\n') == '1'\nassert solution('4 7 2\\n3 3 2 4\\n') == '2'\nassert solution('5 5 1\\n1 3 1 2 1\\n') == '-1'\nassert solution('10 11 2\\n
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\n'''\n\n'''\n-----------------------------------------------------------------------\nAnother way to solve this problem.\n\nInput\n3 5 3\n3 1 2\n\nOutput\n1\n\nInput\n4 7 2\n3 3 2 4\n\nOutput\n2\n\nInput\n5 5 1\n1 3 1 2 1\n\nOutput\n-1\n\nInput\n5 5 2\n2 3 1 2 1\n\nOutput\n-1\n\nInput\n4 5 2\n3 3 1 2\n\nOutput\n1\n\nInput\n5 5 2\n1 3 1 2 1\n\nOutput\n2\n\nInput\n5 5 2\n2 3 1 2 1\n\nOutput\n2\n\nInput\n5 5 2\n1 3 1 2 1\n\nOutput\n2\n\nInput\n5 5 2\n1 3 1 2 1\n\nOutput\n2\n'''\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('3 5 3\\n3 1 2') == '1\\n'\nassert solution('4 7 2\\n3 3 2 4') == '2\\n'\nassert solution('5 5 1\\n1 3 1 2 1') == '-1\\n'\nassert solution('2 4 2\\n3 2 1 4') == '1\\n'\nassert solution('5 7 2\\n3 3 2 4') == '-1\\n'\n\n\n-----\n\n'''\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\n    '''5 3 2\n3 1 2\n'''\n) == '1'\n\nassert solution(\n    '''5 7 2\n3 3 2 4\n'''\n) == '2'\n\nassert solution(\n    '''7 4 2\n1 3 1 2 1\n'''\n) == '-1'\n'''\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"5 1 2\") == \"-1\"\nassert solution(\"3 3 2 4\") == \"2\"\nassert solution(\"4 7 2\") == \"2\"\nassert solution(\"5 5 1\") == \"1\"\nassert solution(\"3 5 3\") == \"1\"\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''3 5 3''') == '1'\nassert solution('''4 7 2''') == '2'\nassert solution('''5 5 1''') == '-1'\nassert solution('''2 3 1''') == '2'\nassert solution('''2 1 1''') == '1'\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(input()) == output\n\n\"\"\"\n\nn = int(input())\ns = list(input())"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('') == '0'\nassert solution('R') == '0'\nassert solution('RB') == '1'\nassert solution('RBBR') == '2'\nassert solution('RBBRBBRBRBRBBRBRBRBR') == '7'\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('') == '0'\nassert solution('R') == '0'\nassert solution('RBR') == '2'\nassert solution('RBBR') == '6'\nassert solution('RBRBR') == '6'\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == '6'\n\nInput\n3\nRBBR\n\nOutput\n2\n\nInput\n4\nRBBRR\n\nOutput\n6\n\nInput\n5\nRBBRRR\n\nOutput\n6\n\"\"\"\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(input()) == output\n\"\"\"\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''3''') == '''2'''\nassert solution('''RBR''') == '''2'''\nassert solution('''RBBR''') == '''6'''\nassert solution('''RBBRR''') == '''6'''\nassert solution('''RBRRR''') == '''6'''\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('RBRRBBBBBRRBBRBBRBRBBRBRBRBBRBBRRRRRRRRRRRRRRRRRRRRRRRBRRRRRRRRRRRBBBBBRRRRRRRBBBBBRRRRRRRBBBBBRRRRRRRBBBBBRRRRRRRRRBBBBBRRRRRRRBBBBBRRRRRRRRRBBBBBRRRRRRRRRRRBBBBBRRRRRRRRRBBBBBRRRRRRRRRBBBBBRRRRRRRRRRRBBBBBRRRRRRRRRBBBBBRRRRRRRRRRRBBBBBRRRRRRRRRBBBBBRRRRRRRRRRRBBBBBRRRRRRRRRRRRRBBBBBRRRRRRRRRRRBBBBBRRRRRRRRRRRBBBBBRRRRRRRRRRRBBBBBRRRRRRRRRRRRRBBBBBRRRRRRRRRRRBBBBBRRRRRRRRRRR') == '7'\nassert solution
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"RBBR\") == \"RBBR\"\nassert solution(\"RBBRR\") == \"RBBRR\"\nassert solution(\"RBRBR\") == \"RBBRR\"\nassert solution
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('RBR') == ''\nassert solution('RBBR') == ''\nassert solution('RBRR') == ''\nassert solution('RBBRR') == ''\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(input()) == output\n\n\"\"\""
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('15 19') == '0.09090909090909091'\nassert solution('15 40') == '0.09090909090909091'\nassert solution('15 40') == '0.09090909090909091'\nassert solution('15 40') == '0.09090909090909091'\nassert solution('15 40') == '0.09090909090909091'\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('18 10 10 10') == ''\nassert solution('22 12 22 22') == ''\nassert solution('18 24 22 22') == ''\nassert solution('22 21 22 22') == ''\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''19 00''') == '25200.0000'\nassert solution('''17 41''') == '1365.0000'\n'''\n\"\"\""
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('19 00') == '25200.0000'\nassert solution('17 41') == '1365.0000'\n\n\n\"\"\"\n\nfrom sys import stdin,stdout\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"20 00\") == \"25200.0000\"\nassert solution(\"17 41\") == \"1365.0000\"\n\n'''\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''19 00''') == '25200.0000'\nassert solution('''17 41''') == '1365.0000'\nassert solution('''666 13 6 6 11''') == '1365.0000'\nassert solution('''1646 8 10 10 6''') == '1239.0000'\nassert solution('''1646 8 11 11 6''') == '1160.0000'\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"19 00\") == \"25200.0000\"\nassert solution(\"17 41\") == \"1365.0000\"\n\n\"\"\""
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"17 41\") == \"1365.0000\"\nassert solution(\"19 00\") == \"25200.0000\"\nassert solution(\"17 41\") == \"1365.0000\"\nassert solution(\"19 41\") == \"1365.0000\"\nassert solution(\"19 41\") == \"1365.0000\"\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdin\n\nprint(\"Test cases passed successfully.\")\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('aaba') == '6'\nassert solution('aaabbbb') == '6'\nassert solution('abracadabra') == '20'\nassert solution('aabaabaabaaba') == '9'\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('aaba') == '6'\nassert solution('aaabbbb') == '6'\nassert solution('abracadabra') == '20'"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdin"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''aaba''') == 6\nassert solution('''aaabbbb''') == 6\nassert solution('''abracadabra''') == 20\nassert solution('''aabaabbb''') == 6\nassert solution('''aabababab''') == 4\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('') == None\nassert solution('ab') == None\nassert solution('aab') == None\nassert solution('aaba') == 3\nassert solution('aaabbbb') == 6\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''abracadabra''') == 'abracadabra'\nassert solution('''aaab''') == 'aaab'\nassert solution('''aba''') == 'aba'\nassert solution('''abacabac''') == 'abacabac'\nassert solution('''abcdefghijklmnopqrstuvwxyz''') == 'abcdefghijklmnopqrstuvwxyz'\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''aaba\n2''') == '6'\nassert solution('''aaabbbb\n2''') == '6'\nassert solution('''abracadabra\n10''') == '20'\nassert solution('''aabaabbab\n10''') == '6'\nassert solution('''aabaaaaa\n10''') == '10'\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('aaaba') == 6\nassert solution('aabaab') == 6\nassert solution('aaabbbb') == 6\nassert solution('abracadabra') == 20\n\n\n\n\n\n'''\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"abracadabra\") == 6\nassert solution(\"aaabbbb\") == 6\nassert solution(\"abracadabra\") == 20\nassert solution(\"aaba\") == 6\nassert solution(\"ab\") == 1\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('aaba') == 6\nassert solution('aaabbbb') == 6\nassert solution('abracadabra') == 20\nassert solution('abracadabrabracadabra') == 20\nassert solution('aabab') == 6\n"
    },
    {
        "number": 761,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('2 1 2 1') == '4'\nassert solution('5') == '4'\nassert solution('0 -1 -1 -1 -1') == '4'\nassert solution('0') == '0'\nassert solution('-1 -1 -1 -1 -1') == '4'\n"
    },
    {
        "number": 761,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('2\\n-1 -1') == '4'\nassert solution('1\\n0') == '1'\nassert solution('1\\n2') == '2'\nassert solution('1\\n-1') == '0'\nassert solution('1\\n-1 -1') == '0'\n"
    },
    {
        "number": 761,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"5\\n0 -1 -1 -1 -1\\n4\") == \"4\"\nassert solution(\"6\\n5 6 -1 1 1 -1 -1 -1\\n2 4 1 1 -1 -1 -1\\n3 -1 -1 -1 -1 -1 -1\\n5 6 -1 -1 -1 -1 -1\") == \"8\"\n\n\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 761,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('2\\n1 2 1') == '4'\nassert solution('5\\n0 -1 -1 -1 -1') == '4'\n\n\n-----"
    },
    {
        "number": 761,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"0\\n0\\n0\\n0\\n0\") == \"0\"\nassert solution(\"1\\n2\\n3\\n4\\n5\") == \"5\"\nassert solution(\"3\\n1\\n2\\n3\\n4\") == \"4\"\nassert solution(\"5\\n1\\n2\\n3\\n4\") == \"3\"\nassert solution(\"5\\n1\\n2\\n3\\n4\") == \"3\"\n"
    },
    {
        "number": 761,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"0\") == \"0\"\nassert solution(\"-2\") == \"-2\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"2\"\n"
    },
    {
        "number": 761,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 761,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdin\n\n\"\"\"\n"
    },
    {
        "number": 761,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1') == '1'\nassert solution('5') == '4'\nassert solution('-2') == '-2'\nassert solution('3') == '1'\nassert solution('-1') == '-1'\n"
    },
    {
        "number": 761,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1') == 1\nassert solution('2') == 0\nassert solution('3') == 0\nassert solution('4') == 1\nassert solution('5') == 4\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(input) == output\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('1\\n2\\n5') == '0'\nassert solution('2\\n5') == '0'\nassert solution('2\\n5\\n1') == '0'\nassert solution('2\\n5\\n1\\n1') == '1'\nassert solution('2\\n5\\n1\\n1\\n1') == '1'\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"3 10\\n1 2 3 4\\n\") == \"1\"\nassert solution(\"4 10\\n1 3 2 4\\n\") == \"0\"\nassert solution(\"6 100\\n1 2 3 4 5 6\\n\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1 10') == '0'\nassert solution('1 10\\n1 1 2 3 4 5 6\\n1 1 2 3 4 5 6') == '2'\n\nassert solution('1 10\\n1 1 2 3 4 5 6\\n1 1 2 3 4 5 6') == '0'\nassert solution('1 10\\n1 1 2 3 4 5 6\\n1 1 2 3 4 5 6') == '0'\nassert solution('1 10\\n1 1 2 3 4 5 6\\n1 1 2 3 4 5 6') == '2'"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''6 4\n1 2 5 10 15 20\n''') == '1'\nassert solution('''4 10\n1 3 2 4\n''') == '0'\nassert solution('''6 100\n1 2 3 4 5 6\n''') == '2'\nassert solution('''4 10\n1 3 2 4\n''') == '0'\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''6 4\n1 2 5 10 15 20\n''') == '1'\n\nassert solution('''4 10\n1 3 2 4\n''') == '0'\n\nassert solution('''6 100\n1 2 3 4 5 6\n''') == '2'\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('6 4\\n1 2 5 10 15 20\\n') == '1'\nassert solution('4 10\\n1 3 2 4\\n') == '0'\nassert solution('6 100\\n1 2 3 4 5 6\\n') == '2'\nassert solution('6 10\\n1 2 3 4 5 6\\n') == '2'\nassert solution('6 100\\n1 2 3 4 5 6\\n') == '2'\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('4 10') == '0'\nassert solution('6 100') == '2'\nassert solution('1 2 3 4 5 6') == '1'\nassert solution('1 3 2 4 5 6') == '0'\nassert solution('2 4 5 1 3 6') == '1'\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('0 2 1') == '16'\nassert solution('2 1') == '4'\nassert solution('2 3 1') == '6'\nassert solution('1 1') == '4'\nassert solution('2 2 1') == '8'\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"\"\nassert solution(\"10\") == \"\"\nassert solution(\"13\") == \"\"\nassert solution(\"1 1\") == \"\"\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"3\n0 2 1\"\"\") == '16'\n\nassert solution(\n\"\"\"2\n1 1\"\"\") == '4'\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''3\n0 2 1''') == '16'\nassert solution('''2\n1 1''') == '4'\nassert solution('''2\n1 1''') == '4'\n'''"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(input()) == \"16\"\nassert solution(input()) == \"4\"\nassert solution(input()) == \"8\"\nassert solution(input()) == \"24\"\nassert solution(input()) == \"10\"\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''3\n0 2 1''') == '16'\nassert solution('''2\n1 1''') == '4'\nassert solution('''1\n1''') == '4'\n'''"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''\n3\n0 2 1\n''') == '16'\nassert solution('''\n2\n1 1\n''') == '4'\nassert solution('''\n1\n10\n''') == '10'\nassert solution('''\n2\n100 4\n''') == '108'\nassert solution('''\n3\n10 10 10\n''') == '44'\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(input) == '16'\n\n\"\"\"\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('3\\n0 2 1') == '16'\nassert solution('2\\n1 1') == '4'\nassert solution('1\\n1') == '4'\nassert solution('2\\n1 1') == '4'\nassert solution('5\\n1 1 1 1 1') == '32'\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('3\\n0 2 1\\n') == '16'\nassert solution('2\\n1 1\\n') == '4'\nassert solution('3\\n0 1 1\\n') == '5'\nassert solution('2\\n1 1\\n') == '4'\nassert solution('5\\n4 3 2 1 0\\n') == '34'\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\n        \"4\\n\"\n        \"1010\\n\"\n    ) == \"3\"\n\nassert solution(\n        \"6\\n\"\n        \"00101001011110010110\\n\"\n    ) == \"5\"\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('10') == 3\nassert solution('10101') == 2\nassert solution('1010110101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('inputs/i13.txt') == '3'\n\n'''\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == '3'\n\n\"\"\"\n\n\"\"\"\n\n\"\"\""
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(input) == output\n\n\"\"\"\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1010\") == \"3\"\nassert solution(\"5\\n010111\") == \"5\"\nassert solution(\"1\\n0001\") == \"1\"\nassert solution(\"2\\n001\") == \"2\"\nassert solution(\"10\\n01\") == \"2\"\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''4\n1010\n''') == '3'\nassert solution('''3\n001\n''') == '2'\nassert solution('''5\n1111\n''') == '2'\nassert solution('''10\n1110\n''') == '2'\nassert solution('''10\n0\n''') == '2'\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''4\n1010''') == '3'\n\n'''\n\n##\n'''\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('inputs/test_shift_xor.in') == '3'\nprint(solution('inputs/shift_xor.in'))\n\n\"\"\"\n"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('5 2 2') == '2'\nassert solution('5 4 7') == '1'\nassert solution('6 2 3') == '1'\n\"\"\""
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('5 2 2') == '2'\nassert solution('5 4 7') == '1'\nassert solution('6 2 3') == '1'\nassert solution('10 2 5') == '1'\nassert solution('10 3 7') == '1'\n"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('5 2 2') == '2'\nassert solution('5 4 7') == '1'\nassert solution('6 2 3') == '1'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('5 2 2') == '2'\nassert solution('5 4 7') == '1'\nassert solution('6 2 3') == '1'\nassert solution('5 3 4 7') == '2'\nassert solution('9 7 6 5') == '2'\n"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('5 2 2') == '2'\nassert solution('5 4 7') == '1'\nassert solution('6 2 3') == '1'\n"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"5 2 2\") == \"2\"\nassert solution(\"5 4 7\") == \"1\"\nassert solution(\"6 2 3\") == \"1\"\nassert solution(\"6 4 7\") == \"1\"\nassert solution(\"6 4 7\") == \"1\"\n"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('5 2 2') == '2'\nassert solution('5 4 7') == '1'\nassert solution('6 2 3') == '1'\n\n\n\n\"\"\""
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('5 2 2') == '2'\nassert solution('5 4 7') == '1'\nassert solution('6 2 3') == '1'\nassert solution('6 4 5') == '1'\nassert solution('5 1 1') == '0'\n\n\"\"\"\n\nimport sys\nfrom collections import deque"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('5 2 2') == '2'\nassert solution('5 4 7') == '1'\nassert solution('6 2 3') == '1'\nassert solution('6 1 7') == '1'\nassert solution('8 1 7') == '1'\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('ababa') == 'Yes'\nassert solution('zzcxx') == 'Yes'\nassert solution('yeee') == 'No'\nassert solution('aabbacccccc') == 'Yes'\nassert solution('aaaaaa') == 'No'\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"abcdef\") == \"Yes\"\nassert solution(\"cababcacdef\") == \"No\"\nassert solution(\"aba\") == \"Yes\"\nassert solution(\"abb\") == \"Yes\"\nassert solution(\"abc\") == \"Yes\"\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('ababa') == 'Yes'\nassert solution('zzcxx') == 'Yes'\nassert solution('yeee') == 'No'\nassert solution('abcd') == 'No'\nassert solution('zzzc') == 'No'\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('ababa') == 'Yes'\nassert solution('zzcxx') == 'Yes'\nassert solution('yeee') == 'No'\nassert solution('abc') == 'No'\nassert solution('abb') == 'Yes'\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"ababa\") == \"Yes\"\nassert solution(\"zzcxx\") == \"Yes\"\nassert solution(\"yeee\") == \"No\"\nassert solution(\"aaaaa\") == \"No\"\nassert solution(\"aaaaa\") == \"No\"\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('ababa') == 'Yes'\nassert solution('zzcxx') == 'Yes'\nassert solution('yeee') == 'No'\nassert solution('yeee') == 'No'\nassert solution('eee') == 'No'\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('ababa') == 'Yes'\nassert solution('zzcxx') == 'Yes'\nassert solution('yeee') == 'No'\nassert solution('aabac') == 'No'"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"ababa\") == \"Yes\"\nassert solution(\"zzcxx\") == \"Yes\"\nassert solution(\"yeee\") == \"No\"\nassert solution(\"xxxxyyyyyzzz\") == \"Yes\"\nassert solution(\"zxcvbnm\") == \"No\"\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('ababa') == 'Yes'\nassert solution('zzcxx') == 'Yes'\nassert solution('yeee') == 'No'\n\nprint('All tests passed successfully.')\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('') == 'Yes'\nassert solution('abc') == 'Yes'\nassert solution('ababa') == 'Yes'\nassert solution('zzcxx') == 'Yes'\nassert solution('yeee') == 'No'\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1 2\\n1 3\\n1 4\\n2 3\\n3 4\\n4 5') == '2'\nassert solution('1 1\\n1 1\\n2 2\\n2 2\\n2 3\\n3 3\\n3 4\\n4 4\\n4 5\\n5 5\\n5 6\\n6 6\\n6 7') == '2'\n\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('4 2\\n1 3 3 7\\n') == '2'\nassert solution('5 5\\n10 9 5 8 7\\n') == '1'\nassert solution('5 10\\n1 9 5 8 7\\n') == '0'\nassert solution('4 2\\n1 3 3 7\\n') == '2'\nassert solution('5 10\\n10 9 5 8 7\\n') == '0'\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1\\n3') == '1'\nassert solution('3\\n1') == '1'\nassert solution('1\\n1') == '0'\nassert solution('1\\n2') == '1'\nassert solution('2\\n1') == '1'\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('4 2\\n1 3 3 7\\n') == '2'\nassert solution('5 5\\n10 9 5 8 7\\n') == '1'\nassert solution('10 10\\n10 9 10 8 10 7\\n') == '1'"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('3 2\\n1 3 3 7') == '2'\nassert solution('5 5\\n10 9 5 8 7') == '1'\nassert solution('5 10\\n10 9 5 8 7') == '0'\nassert solution('5 10\\n10 9 5 8 7') == '0'\nassert solution('10 10\\n10 9 5 8 7') == '0'\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''5 3''') == '2'\nassert solution('''5 3''') == '2'\nassert solution('''5 5''') == '1'\nassert solution('''5 5''') == '1'\nassert solution('''5 5''') == '1'\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('3 3') == '2'\nassert solution('5 5') == '1'\nassert solution('10 9 5 8 7') == '1'\nassert solution('100 9 25 7 12 7 8 21 9') == '0'\nassert solution('1000 9 25 7 12 7 8 21 9') == '1'\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('2 2\\n1 3 3 7\\n') == '2'\nassert solution('5 5\\n10 9 5 8 7\\n') == '1'\nassert solution('5 5\\n1 3 3 7\\n') == '2'\nassert solution('5 5\\n10 9 5 8 7\\n') == '1'"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('4 2\\n1 3 3 7\\n') == '2'\nassert solution('5 5\\n10 9 5 8 7\\n') == '1'\nassert solution('5 5\\n10 9 5 8 7\\n') == '1'\nassert solution('5 1\\n1\\n') == '1'\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == expected_output\nprint(expected_output)\n\"\"\""
    },
    {
        "number": 768,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 768,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"3 3 2\\nYYY\\nNNN\\nYNY\\n\") == \"2\"\nassert solution(\"4 4 1\\nNNNY\\nNNYN\\nNYNN\\nYNNN\\n\") == \"4\"\nassert solution(\"1 1 1\\nY\\n\") == \"1\"\n"
    },
    {
        "number": 768,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"3 3 2\\nYYY\\nNNN\\nYNY\") == \"2\"\nassert solution(\"3 4 2\\nNNNY\\nNNYN\\nYNNN\\nYNNN\") == \"4\"\nassert solution(\"4 4 1\\nNNNY\\nNNYN\\nNYNN\\nYNNN\") == \"4\"\n"
    },
    {
        "number": 768,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''3 3 2\nYYY\nNNN\nYNY''') == '2'\nassert solution('''4 4 1\nNNNY\nNNYN\nNYNN\nYNNN''') == '4'\nassert solution('''2 4 4\nNNNN\nNNNN\nNNNN\nNNNN''') == '2'\nassert solution('''5 5 2\nNNNNNN\nNNNNNN\nNNNNNN\nNNNNNN\nNNNNNN\nNNNNNN\nNNNNNN\nNNNNNN''') == '1'\nassert solution('''6 6 5\nNNNNNNNN\nNNNNNNNN\nNNNNNNNN\nNNNNNNNN\nNNNNNNNN\nNNNNNNNN\nNNNNNNNN\nNNNNNNNN''') == '5'\n"
    },
    {
        "number": 768,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\n    \"\"\"3 3 2\nYYY\nNNN\nYNY\"\"\") == \"2\"\nassert solution(\n    \"\"\"4 4 1\nNNNY\nNNYN\nNYNN\nYNNN\"\"\") == \"4\"\nassert solution(\n    \"\"\"2 1 1\nY\nY\nY\nY\"\"\") == \"0\"\nassert solution(\n    \"\"\"3 2 2\nYNY\nYNY\nYNY\"\"\") == \"3\"\nassert solution(\n    \"\"\"4 4 1\nYYY\nNNN\nYNY\nNNNY\nYYNY\nNNYNY\nYYYNN\nYYYN\nYYYN\nYN\nYNYN\nYNYN\nYNYN\nYNYN\nYNYN\nYNYN\nYNYN\nYNYN\nYNYN\nYNYN\nYNYN\nYNYN\"\"\") == \"10\"\n"
    },
    {
        "number": 768,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''3 3 2\nYYY\nNNN\nYNY''') == '2'\nassert solution('''3 3 2\nNNNY\nNNYN\nNYNN''') == '4'\nassert solution('''5 3 10\n
    },
    {
        "number": 768,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 768,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 768,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\n\n\n'''\n"
    },
    {
        "number": 768,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('') == '0'\nassert solution('3 3 2') == '2'\nassert solution('4 4 1') == '4'\nassert solution('YYY') == '1'\nassert solution('NNNY') == '1'\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('') == -1\nassert solution('1 2 0') == 2\nassert solution('2 3 7') == -1\n\n\n\"\"\"\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"1 2 0\") == 2\nassert solution(\"2 3 7\") == -1"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1 2 0') == '2'\nassert solution('2 3 7') == '-1'\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1 2 0') == '2'\nassert solution('2 3 7') == '-1'\nassert solution('1 1 1') == '1'\nassert solution('3 7 2') == '-1'\nassert solution('1 0 0') == '1'\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1 2 0') == 2\nassert solution('2 3 7') == -1\n\n\"\"\"\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('2 3 7') == -1\nassert solution('1 2 0') == 2\nassert solution('2 3 7') == -1\nassert solution('0 1 0') == -1\nassert solution('0 0 0') == -1\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1 2 0') == '2'\nassert solution('2 3 7') == '-1'\nassert solution('1 2 1') == '1'\nassert solution('1 1 1') == '-1'\nassert solution('1 1 1') == '-1'\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1 2 0') == '2'\nassert solution('2 3 7') == '-1'\n\"\"\"\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1 2 0') == '2'\nassert solution('2 3 7') == '-1'\n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(input) == output\n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('3\\n0 1 0\\n') == '3'\nassert solution('3\\n0 0\\n') == '0'\nassert solution('3\\n1 1 0\\n') == '4'\nassert solution('5\\n1 1 0 0 1\\n') == '4'\nassert solution('5\\n0 0\\n') == '0'\n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('4\\n0 1 0 1 0\\n') == '3'\nassert solution('5\\n1 1 0 0 1\\n') == '4'\nassert solution('2\\n0 0\\n') == '0'\nassert solution('1\\n0\\n') == '0'\nassert solution('3\\n0 1 0\\n') == '2'\n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"5\\n0 1 0 1 0\\n\") == \"3\"\nassert solution(\"5\\n1 1 0 0 1\\n\") == \"4\"\nassert solution(\"2\\n0 0\\n\") == \"0\"\nassert solution(\"4\\n0 0 0 0\\n\") == \"0\"\nassert solution(\"5\\n1 1 0 0 1\\n\") == \"4\"\n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"5\\n0 1 0 1 0\") == \"3\"\nassert solution(\"5\\n1 1 0 0 1\") == \"4\"\nassert solution(\"2\\n0 0\") == \"0\"\nassert solution(\"5\\n1 1 0 0 1\") == \"0\"\n\n\n\n\"\"\"\n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == \"\"\n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == expected\nprint(solution(stdin))"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"6\\n1 1 0 0 1 0\") == 3\nassert solution(\"1\\n1 1 0 0 1\") == 4\nassert solution(\"2\\n0 0\") == 0\n\"\"\"\n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1\\n2\\n1') == 1\nassert solution('1\\n0\\n1\\n1\\n0') == 1\nassert solution('2\\n1\\n0\\n1\\n1') == 1\nassert solution('1\\n0\\n1\\n1\\n0') == 1\nassert solution('1\\n1\\n1\\n1\\n1') == 1\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''3 2 3''') == \"No\"\nassert solution('''3 3 3''') == \"No\"\nassert solution('''3 4 4''') == \"Yes\"\nassert solution('''3 2 4''') == \"No\"\nassert solution('''1 3 3''') == \"No\"\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''3 2 3\n1 8 4\n''') == 'Yes'\nassert solution('''4 3 5\n2 7 7 7\n''') == 'No'\nassert solution('''4 3 3\n1 8 4\n''') == 'Yes'\nassert solution('''4 3 3\n1 8 4\n''') == 'Yes'\nassert solution('''5 3 10\n7 7 7 7 7\n''') == 'No'\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''3 2 3''') == 'No'\nassert solution('''3 3 3''') == 'No'\nassert solution('''4 3 5''') == 'Yes'\nassert solution('''2 7 7 7''') == 'Yes'\nassert solution('''3 3 3''') == 'No'\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1\\n1\\n') == 'No'\nassert solution('1\\n2\\n') == 'No'\nassert solution('2\\n2\\n') == 'No'\nassert solution('2\\n4\\n') == 'No'\nassert solution('2\\n5\\n') == 'No'\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"3 2 3\\n1 8 4\") == \"Yes\\n1 4\\n\"\nassert solution(\"3 3 3\\n1 8 4\") == \"No\\n\"\nassert solution(\"3 3 3\\n2 7 7 7\\n\") == \"Yes\\n2 7 7\\n\"\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1\\n2\\n') == 'Yes\\n2'\nassert solution('3\\n2\\n') == 'No'\nassert solution('4\\n1\\n2\\n3\\n4\\n') == 'Yes\\n4\\n3'\nassert solution('4\\n1\\n2\\n3\\n4\\n') == 'Yes\\n4\\n3'\nassert solution('3\\n3\\n') == 'Yes\\n3'\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('1 8 4\\n3 2 3\\n') == 'Yes\\n2 3'\nassert solution('1 8 4\\n3 2 3\\n1 3 1\\n') == 'Yes\\n1 3 1'\nassert solution('1 8 4\\n3 2 3\\n1 2 1\\n') == 'Yes\\n1 2 1'\nassert solution('1 8 4\\n3 2 3\\n1 2 1\\n1 3 1\\n') == 'No'\nassert solution('1 8 4\\n3 2 3\\n1 2 1\\n1 3 1\\n1 4 1\\n') == 'Yes\\n1 2 1'\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''3 2 3''') == \"Yes\"\nassert solution('''3 3 3''') == \"No\"\nassert solution('''4 3 5''') == \"Yes\"\nassert solution('''2 7 7 7''') == \"No\"\n'''\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1 0 0') == '001'\nassert solution('8 8 8') == '010'\nassert solution('2 0 3') == '011'\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''1 0 0\n0 0 0\n0 0 1''') == '01011101'\nassert solution('''1 0 1\n8 8 8''') == '01011101'\nassert solution('''2 0 3\n8 8 8''') == '01011101'\nassert solution('''2 0 3\n2 2 2''') == '01110101'\nassert solution('''1 0 1\n2 2 2''') == '01110101'\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"1 0 0\\n0 0 0\\n0 0 1\") == \"001\"\nassert solution(\"1 0 1\\n8 8 8\\n2 0 3\") == \"010\""
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''1 0 0\n0 0 0\n0 0 1''') == '''001\n010\n100'''\nassert solution('''1 0 1\n8 8 8\n2 0 3''') == '''010\n011\n100'''\nassert solution('''1 0 1\n8 8 8\n1 0 1''') == '''000\n110\n100'''\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1 0 0\\n0 0 0\\n0 0 1') == '001\\n010\\n100'\nassert solution('1 0 1\\n8 8 8\\n2 0 3') == '010\\n011\\n100'\nassert solution('1 0 1\\n8 8 8\\n2 0 3\\n4 4 0\\n0 0 0') == '010\\n011\\n100'\nassert solution('1 0 1\\n8 8 8\\n2 0 3\\n0 0 0\\n0 0 0') == '010\\n011\\n100'\nassert solution('1 0 1\\n8 8 8\\n2 0 3\\n0 0 0\\n0 0 0\\n0 0 0') == '010\\n011\\n100'"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1 0 0\\n0 0 0\\n0 0 1') == '001'\nassert solution('1 0 1\\n8 8 8\\n2 0 3') == '010'\nassert solution('1 0 1\\n8 8 8\\n2 0 3\\n0 0 0') == '010'\nassert solution('1 0 1\\n8 8 8\\n2 0 3\\n1 0 1') == '011'\nassert solution('1 0 1\\n8 8 8\\n2 0 3\\n1 0 1\\n1 0 1') == '011'\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"1 0 0\\n0 0 0\\n0 0 1\") == \"001\\n010\\n100\"\nassert solution(\"1 0 1\\n8 8 8\\n2 0 3\") == \"010\\n011\\n100\"\nassert solution(\"1 0 1\\n8 8 8\\n2 0 3\\n8 0 0\") == \"010\\n011\\n100\"\nassert solution(\"1 0 1\\n8 8 8\\n2 0 3\\n8 0 0\\n0 0 0\") == \"010\\n011\\n100\"\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"1 0 0\\n0 0 0\\n0 0 1\") == \"001\\n010\\n100\"\nassert solution(\"1 0 1\\n8 8 8\\n2 0 3\") == \"010\\n011\\n100\"\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''1 0 0''') == '001'\nassert solution('''0 0 0''') == '010'\nassert solution('''0 0 1''') == '011'\nassert solution('''1 0 1''') == '010'\nassert solution('''8 8 8''') == '100'\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"1 0 0\\n0 0 0\\n0 0 1\") == \"001\\n010\\n100\"\nassert solution(\"1 0 1\\n8 8 8\\n2 0 3\") == \"010\\n011\\n100\"\n"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1\\n3\\n0') == '3'\nassert solution('1\\n2\\n0') == '5'\nassert solution('1\\n2\\n1\\n3\\n0') == '9'\nassert solution('1\\n3\\n1\\n3\\n0') == '-1'\nassert solution('2\\n2\\n1\\n3\\n0') == '5'\n"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('3 1\\n1 1 3 2\\n2 1 3 2') == '3'\nassert solution('3 2\\n1 1 3 2\\n2 1 3 2') == '5'\nassert solution('3 2\\n1 1 3 2\\n2 1 3 1') == '-1'\nassert solution('3 2\\n1 1 3 2\\n2 1 3 1\\n1 1 3 2') == '-1'\nassert solution('3 2\\n1 1 3 2\\n2 1 3 1\\n1 1 3 2\\n2 1 3 1') == '-1'\n"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"1 0\") == \"3\"\nassert solution(\"1 1\") == \"5\"\nassert solution(\"1 2\") == \"3\"\nassert solution(\"1 3\") == \"5\"\nassert solution(\"1 4\") == \"9\"\n"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''3 0''') == '3'\nassert solution('''3 1''') == '5'\nassert solution('''3 2''') == '9'\nassert solution('''3 2\n1 1 3 2\n2 1 3 2\n''') == '-1'\nassert solution('''3 2\n1 1 3 2\n2 1 3 1\n''') == '-1'\n"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"3 0\\n1 1 3 2\\n2 1 3 2\") == \"3\"\nassert solution(\"3 1\\n1 1 3 2\\n2 1 3 2\\n3 1 3 2\\n4 1 3 2\\n5 1 3 1\") == \"-1\"\nassert solution(\"3 2\\n1 1 3 2\\n2 1 3 2\\n3 1 3 2\\n4 1 3 1\") == \"9\"\nassert solution(\"3 2\\n1 1 3 2\\n2 1 3 2\\n3 1 3 1\\n4 1 3 1\\n5 1 3 1\") == \"6\"\nassert solution(\"3 2\\n1 1 3 2\\n2 1 3 2\\n3 1 3 2\\n4 1 3 1\\n5 1 3 1\\n6 1 3 1\") == \"6\"\n"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''3 0''') == '3'\nassert solution('''3 1''') == '5'\nassert solution('''3 2''') == '9'\nassert solution('''3 1''') == '5'\nassert solution('''3 2''') == '-1'\n"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''3 0''') == '3'\nassert solution('''3 1''') == '3'\nassert solution('''3 2''') == '9'\nassert solution('''3 2''') == '-1'\nassert solution('''3 2''') == '-1'\n"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('2 3\\n1 2 3\\n2 1 3') == '5'\nassert solution('3 0\\n1 1 3 2\\n2 1 3 2') == '3'\nassert solution('3 2\\n1 1 3 2\\n2 1 3 1\\n3 1 2 3') == '-1'\n"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\n'''3 0''') == '3'\nassert solution(\n'''3 1''') == '3'\nassert solution(\n'''3 2''') == '9'\nassert solution(\n'''3 2\n1 1 3 2\n2 1 3 2\n''') == '-1'\nassert solution(\n'''3 2\n1 1 3 2\n2 1 3 1\n''') == '-1'\n"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''0 0\n1 1 3 2\n2 1 3 2\n3 1 3 1\n''') == '3'\nassert solution('''3 2\n1 1 3 2\n2 1 3 2\n3 1 3 1\n''') == '9'\nassert solution('''1 1\n1 1 1\n1 1 1\n''') == '-1'\nassert solution('''10 3\n1 1 1 1 1 1 1 1 1 1 1 1\n2 1 1 1 1 1 1 1 1 1 1\n3 1 1 1 1 1 1 1 1 1\n4 1 1 1 1 1 1 1 1\n5 1 1 1 1 1 1 1\n6 1 1 1 1 1 1\n7 1 1 1 1 1\n8 1 1 1 1\n9 1 1 1\n10 1 1 1\n''') == '36'\nassert solution('''5 3\n1 1 1 1 1\n2 1 1 1 1\n3 1 1 1 1\n4 1 1 1\n5 1 1 1\n''') == '20'\n"
    },
    {
        "number": 774,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == \"\"\"-1/3\"\"\"\nassert solution(\"\") == \"\"\"\"\"\"\nassert solution(\"2 3 4\") == \"\"\"-1/3\"\"\"\nassert solution(\"10 10 10\") == \"\"\"-1/1\"\"\"\nassert solution(\"7 2 4\") == \"\"\"-7/2\"\"\"\n"
    },
    {
        "number": 774,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('3 7 6') == '2/5'\nassert solution('7 2 4') == '7/2'\n\"\"\"\n"
    },
    {
        "number": 774,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('7 3 2') == '2/5'\nassert solution('7 2 4') == '7/2'\nassert solution('3 7 2') == '2/5'\nassert solution('7 2 4') == '7/2'\nassert solution('3 7 2') == '2/5'\n"
    },
    {
        "number": 774,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"3 7 6\") == \"2/5\"\nassert solution(\"7 2 4\") == \"7/2\"\nassert solution(\"8 4 2\") == \"8/4\"\nassert solution(\"4 2 1\") == \"2/2\"\nassert solution(\"9 1 4\") == \"1/4\"\n"
    },
    {
        "number": 774,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\n'''3 7 6\n''') == \"2/5\"\nassert solution(\n'''7 2 4\n''') == \"7/2\"\n\nprint(\"Testcase 1 passed.\")\nprint(\"Testcase 2 passed.\")\nprint(\"Testcase 3 passed.\")\nprint(\"Testcase 4 passed.\")\nprint(\"Testcase 5 passed.\")\nprint(\"Testcase 6 passed.\")\nprint(\"Testcase 7 passed.\")\nprint(\"Testcase 8 passed.\")\nprint(\"Testcase 9 passed.\")\nprint(\"Testcase 10 passed.\")\nprint(\"Testcase 11 passed.\")\nprint(\"Testcase 12 passed.\")\nprint(\"Testcase 13 passed.\")\nprint(\"Testcase 14 passed.\")\nprint(\"Testcase 15 passed.\")\nprint(\"Testcase 16 passed.\")\nprint(\"Testcase 17 passed.\")\nprint(\"Testcase 18 passed.\")\nprint(\"Testcase 19 passed.\")\nprint(\"Testcase 20 passed.\")\nprint(\"Testcase 21 passed.\")\nprint(\"Testcase 22 passed.\")\nprint(\"Testcase 23 passed.\")\nprint(\"Testcase 24 passed.\")\nprint(\"Testcase 25 passed.\")\nprint(\"Testcase 26 passed.\")\nprint(\"Testcase 27 passed.\")\nprint(\"Testcase 28 passed.\")\nprint(\"Testcase 29 passed.\")\nprint(\"Testcase 30 passed.\")\nprint(\"Testcase 31 passed.\")\nprint(\"Testcase 32 passed.\")\nprint(\"Testcase 33 passed.\")\nprint(\"Testcase 34 passed.\")\nprint(\"Testcase 35 passed.\")\nprint(\"Testcase 36 passed.\")\nprint(\"Testcase 37 passed.\")\nprint(\"Testcase 38 passed.\")\nprint(\"Testcase 39 passed.\")\nprint(\"Testcase 40 passed.\")\nprint(\"Testcase 41 passed.\")\nprint(\"Testcase 42 passed.\")\nprint(\"Testcase 43 passed.\")\nprint(\"Testcase 44 passed.\")\nprint(\"Testcase 45 passed.\")\nprint(\"Testcase 46 passed.\")\nprint(\"Testcase 47 passed.\")\nprint(\"Testcase 48 passed.\")\nprint(\"Testcase 49 passed.\")\nprint(\"Testcase 50 passed.\")\nprint(\"Testcase 51 passed.\")\nprint(\"Testcase 52 passed.\")\nprint(\"Testcase 53 passed.\")\nprint(\"Testcase 54 passed.\")\nprint(\"Testcase 55 passed.\")\nprint(\"Testcase 56 passed.\")\nprint(\"Testcase 57 passed.\")\nprint(\"Testcase 58 passed.\")\nprint(\"Testcase 59 passed.\")\nprint(\"Testcase 60 passed.\")\nprint(\"Testcase 61 passed.\")\nprint(\"Testcase 62 passed.\")\nprint(\"Testcase 63 passed.\")\nprint(\"Testcase 64 passed.\")\nprint(\"Testcase 65 passed.\")\nprint(\"Testcase 66 passed.\")\nprint(\"Testcase 67 passed.\")\nprint(\"Testcase 68 passed.\")\nprint(\"Testcase 69 passed.\")\nprint(\"Testcase 70 passed.\")\nprint(\"Testcase 71 passed.\")\nprint(\"Testcase 72 passed.\")\nprint(\"Testcase 73 passed.\")\nprint(\"Testcase 74 passed.\")\nprint(\"Testcase 75 passed.\")\nprint(\"Testcase 76 passed.\")\nprint(\"Testcase 77 passed.\")\nprint(\"Testcase 78 passed.\")\nprint(\"Testcase 79 passed.\")\nprint(\"Testcase 80 passed.\")\nprint(\"Testcase 81 passed.\")\nprint(\"Testcase 82 passed.\")\nprint(\"Testcase 83 passed.\")\nprint(\"Testcase 84 passed.\")\nprint(\"Testcase 85 passed.\")\nprint(\"Testcase 86 passed.\")\nprint(\"Testcase 87 passed.\")\nprint(\"Testcase 88 passed.\")\nprint(\"Testcase 89 passed.\")\nprint(\"Testcase 90 passed.\")\nprint(\"Testcase 91 passed.\")\nprint(\"Testcase 92 passed.\")\nprint(\"Testcase 93 passed.\")\nprint(\"Testcase 94 passed.\")\nprint(\"Testcase 95 passed.\")\nprint(\"Testcase 96 passed.\")\nprint(\"Testcase 97 passed.\")\nprint(\"Testcase 98 passed.\")\nprint(\"Testcase 99 passed.\")\nprint(\"Testcase 100 passed.\")\nprint(\"Testcase 101 passed.\")\nprint(\"Testcase 102 passed.\")\nprint(\"Testcase 103 passed.\")\nprint(\"Testcase 104 passed.\")\nprint(\"Testcase 105 passed.\")\nprint(\"Testcase 106 passed.\")\nprint(\"Testcase 107 passed.\")\nprint(\"Testcase 108 passed.\")\nprint(\"Testcase 109 passed.\")\nprint(\"Testcase 110 passed.\")\nprint(\"Testcase 111 passed.\")\nprint(\"Testcase 112 passed.\")\nprint(\"Testcase 113 passed.\")\nprint(\"Testcase 114 passed.\")\nprint(\"Testcase 115 passed.\")\nprint(\"Testcase 116 passed.\")\nprint(\"Testcase 117 passed.\")\nprint(\"Testcase 118 passed.\")\nprint(\"Testcase 119 passed.\")\nprint(\"Testcase 120 passed.\")\nprint(\"Testcase 121 passed.\")\nprint(\"Testcase 122 passed.\")\nprint(\"Testcase 123 passed.\")\nprint(\"Testcase 124 passed.\")\nprint(\"Testcase 125 passed.\")\nprint(\"Testcase 126 passed.\")\nprint(\"Testcase 127 passed.\")\nprint(\"Testcase 128 passed.\")\nprint(\"Testcase 129 passed.\")\nprint(\"Testcase 130 passed.\")\nprint(\"Testcase 131 passed.\")\nprint(\"Testcase 132 passed.\")\nprint(\"Testcase 133 passed.\")\nprint(\"Testcase 134 passed.\")\nprint(\"Testcase 135 passed.\")\nprint(\"Testcase 136 passed.\")\nprint(\"Testcase 137 passed.\")\nprint(\"Testcase 138 passed.\")\nprint(\"Testcase 139 passed.\")\nprint(\"Testcase 140 passed.\")\nprint(\"Testcase 141 passed.\")\nprint(\"Testcase 142 passed.\")\nprint(\"Testcase 143 passed.\")\nprint(\"Testcase 144 passed.\")\nprint(\"Testcase 145 passed.\")\nprint(\"Testcase 146 passed.\")\nprint(\"Testcase 147 passed.\")\nprint(\"Testcase 148 passed.\")\nprint(\"Testcase 149 passed.\")\nprint(\"Testcase 150 passed.\")\nprint(\"Testcase 151 passed.\")\nprint(\"Testcase 152 passed.\")\nprint(\"Testcase 153 passed.\")\nprint(\"Testcase 154 passed.\")\nprint(\"Testcase 155 passed.\")\nprint(\"Testcase 156 passed.\")\nprint(\"Testcase 157 passed.\")\nprint(\"Testcase 158 passed.\")\nprint(\"Testcase 159 passed.\")\nprint(\"Testcase 160 passed.\")\nprint(\"Testcase 161 passed.\")\nprint(\"Testcase 162 passed.\")\nprint(\"Testcase 163 passed.\")\nprint(\"Testcase 164 passed.\")\nprint(\"Testcase 165 passed.\")\nprint(\"Testcase 166 passed.\")\nprint(\"Testcase 167 passed.\")\nprint(\"Testcase 168 passed.\")\nprint(\"Testcase 169 passed.\")\nprint(\"Testcase 170 passed.\")\nprint(\"Testcase 171 passed.\")\nprint(\"Testcase 172 passed.\")\nprint(\"Testcase 173 passed.\")\nprint(\"Testcase 174 passed.\")\nprint(\"Testcase 175 passed.\")\nprint(\"Testcase 176 passed.\")\nprint(\"Testcase 177 passed.\")\nprint(\"Testcase 178 passed.\")\nprint(\"Testcase 179 passed.\")\nprint(\"Testcase 180 passed.\")\nprint(\"Testcase 181 passed.\")\nprint(\"Testcase 182 passed.\")\nprint(\"Testcase 183 passed.\")\nprint(\"Testcase 184 passed.\")\nprint(\"Testcase 185 passed.\")\nprint(\"Testcase 186 passed.\")\nprint(\"Testcase 187 passed.\")\nprint(\"Testcase 188 passed.\")\nprint(\"Testcase 189 passed.\")\nprint(\"Testcase 190 passed.\")\nprint(\"Testcase 191 passed.\")\nprint(\"Testcase 192 passed.\")\nprint(\"Testcase 193 passed.\")\nprint(\"Testcase 194 passed.\")\nprint(\"Testcase 195 passed.\")\nprint(\"Testcase 196 passed.\")\nprint(\"Testcase 197 passed.\")\nprint(\"Testcase 198 passed.\")\nprint(\"Testcase 199 passed.\")\nprint(\"Testcase 200 passed.\")\nprint(\"Testcase 201 passed.\")\nprint(\"Testcase 202 passed.\")\nprint(\"Testcase 203 passed.\")\nprint(\"Testcase 204 passed.\")\nprint(\"Testcase 205 passed.\")\nprint(\"Testcase 206 passed.\")\nprint(\"Testcase 207 passed.\")\nprint(\"Testcase 208 passed.\")\nprint(\"Testcase 209 passed.\")\nprint(\"Testcase 210 passed.\")\nprint(\"Testcase 211 passed.\")\nprint(\"Testcase 212 passed.\")\nprint(\"Testcase 213 passed.\")\nprint(\"Testcase 214 passed.\")\nprint(\"Testcase 215 passed.\")\nprint(\"Testcase 216 passed.\")\nprint(\"Testcase 217 passed.\")\nprint(\"Testcase 218 passed.\")\nprint(\"Testcase 219 passed.\")\nprint(\"Testcase 220 passed"
    },
    {
        "number": 774,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('7 2 4') == '7/2'\nassert solution('1 1 1') == '1/1'\nassert solution('0 0 0') == '0/0'\n\nassert solution('0 1 0') == '1/1'\nassert solution('0 1 1') == '1/1'\n"
    },
    {
        "number": 774,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''3 7 6''') == '2/5'\nassert solution('''7 2 4''') == '7/2'\nassert solution('''1 2 3''') == '0/1'\nassert solution('''99 999 99''') == '99/99'\nassert solution('''10 12 10''') == '10/12'\n"
    },
    {
        "number": 774,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('3 7 6\\n') == '2/5'\nassert solution('7 2 4\\n') == '7/2'\n\n\n\"\"\"\n"
    },
    {
        "number": 774,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n"
    },
    {
        "number": 774,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('3 7 6') == '2/5'\nassert solution('7 2 4') == '7/2'\nassert solution('7 15 11') == '7/15'\nassert solution('1 2 4') == '-1/2'\nassert solution('7 4 4') == '7/4'\n"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('5 1 2'\n'2'\n'1 2'\n'2 4') == '1'\nassert solution('7 3 4'\n'3 4 6'\n'1 2'\n'2 5'\n'5 7'\n'7 1') == '1'\nassert solution('7 1 2'\n'3 4'\n'1 2'\n'2 5'\n'5 7'\n'7 1') == '1'\nassert solution('7 3 4'\n'3 4 6'\n'1 2'\n'2 5'\n'5 7'\n'7 1') == '1'\nassert solution('7 3 4'\n'3 4 6'\n'1 2'\n'2 5'\n'5 7'\n'7 1') == '1'\n"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('7 1 2\\n2\\n1 2\\n2 4\\n5 7\\n7 1') == '1'\nassert solution('5 1 2\\n2\\n1 2\\n2 4\\n') == '2'\nassert solution('7 3 4\\n3 4 6\\n1 2\\n2 5\\n5 7\\n7 1') == '1'\nassert solution('5 1 2\\n2\\n1 2\\n2 4\\n5 7\\n7 1') == '2'\nassert solution('7 1 2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100\\n101\\n102\\n103\\n104\\n105\\n106\\n107\\n108\\n109\\n110\\n111\\n112\\n113\\n114\\n115\\n116\\n117\\n118\\n119\\n120\\n121\\n122\\n123\\n124\\n125\\n126\\n127\\n128\\n129\\n130\\n131\\n132\\n133\\n134\\n135\\n136\\n137\\n138\\n139\\n140\\n141\\n142\\n143\\n144\\n145\\n146\\n147\\n148\\n149\\n150\\n151\\n152\\n153\\n154\\n155\\n156\\n157\\n158\\n159\\n160\\n161\\n162\\n163\\n164\\n165\\n166\\n167\\n168\\n169\\n170\\n171\\n172\\n173\\n174\\n175\\n176\\n177\\n178\\n179\\n180\\n181\\n182\\n183\\n184\\n185\\n186\\n187\\n188\\n189\\n190\\n191\\n192\\n193\\n194\\n195\\n196\\n197\\n198\\n199\\n200\\n201\\n202\\n203\\n204\\n205\\n206\\n207\\n208\\n209\\n210\\n211\\n212\\n213\\n214\\n215\\n216\\n217\\n218\\n219\\n220\\n221\\n222\\n223\\n224\\n225\\n226\\n227\\n228\\n229\\n230\\n231\\n232\\n233\\n234\\n235\\n236\\n237\\n238\\n239\\n240\\n241\\n242\\n243\\n244\\n245\\n246\\n247\\n248\\n249\\n250\\n251\\n252\\n253\\n254\\n255\\n256\\n257\\n258\\n259\\n260\\n261\\n262\\n263\\n264\\n265\\n266\\n267\\n268\\n269\\n270\\n271\\n272\\n273\\n274\\n275\\n276\\n277\\n278\\n279\\n280\\n281\\n282\\n283\\n284\\n285\\n286\\n287\\n288\\n289\\n290\\n291\\n292\\n293\\n294\\n295\\n296\\n297\\n298\\n299\\n300\\n') == '3'\n"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''7 3 4\n3 4 6\n1 2\n2 5\n5 7\n7 1''') == '1'\nassert solution('''5 1 2\n2\n1 2\n2 4\n''') == '2'\nassert solution('''7 1 2\n2\n1 2\n2 4\n''') == '2'\nassert solution('''5 1 2\n2\n1 2\n2 4\n''') == '2'\nassert solution('''5 1 2\n2\n1 2\n2 4\n''') == '2'\n"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(input) == expect\n\n\"\"\"\n"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('7 3 4\\n3 4 6\\n1 2\\n2 5\\n5 7\\n7 1\\n') == '1'\nassert solution('5 1 2\\n2\\n1 2\\n2 4\\n') == '2'\n\n\"\"\""
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == '1'\n\"\"\"\n"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(input(\"\")) == output\n\"\"\"\n\n\"\"\"\n    Given a diagram of the chess board with the knight, the knight moves as follows:\n    Knight moves to one of the cells with an odd number of possible moves.\n    Knight cannot walk more than one step.\n    Knight can jump over any number of cells.\n    For each cell with an odd number of possible moves, the knight can move to any of the cells with an even number of possible moves.\n    Write a method to determine the number of possible moves the knight can make from the start position.\n\"\"\""
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('7 3 4\\n3 4 6\\n1 2\\n2 5\\n5 7\\n7 1') == '1'\nassert solution('5 1 2\\n2\\n1 2\\n2 4\\n') == '2'\n"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"3 1 2\\n1 2\") == \"1\"\nassert solution(\"3 1 2\\n2\\n1 2\") == \"2\"\nassert solution(\"5 1 2\\n2\\n1 2\\n5 4\") == \"1\"\nassert solution(\"5 1 2\\n2\\n1 2\\n5 4\\n7 1\") == \"1\"\nassert solution(\"7 1 2\\n5\\n1 2\\n1 2\\n7 1\") == \"1\"\n"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''7 4 4\n3 4 6\n1 2\n2 5\n5 7\n7 1''') == '1'\nassert solution('''5 1 2\n2\n1 2\n2 4\n''') == '2'\nassert solution('''7 5 4\n3 4 6\n1 2\n2 5\n5 7\n7 1\n''') == '1'\nassert solution('''5 1 2\n2\n1 2\n2 4\n''') == '2'\nassert solution('''6 3 6\n3 1 6\n1 2\n2 5\n5 7\n7 6\n''') == '5'\n"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == expected\n\"\"\""
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('2 1 1') == '3 0'\nassert solution('2 1 3') == '1 0'\nassert solution('1 1 1') == '3 0'\nassert solution('1 2 3') == '2 1'\n"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''1\n4\n5 USB\n6 PS/2\n3 PS/2\n7 PS/2''') == '3 14'\nassert solution('''1\n1\n2\n2\n2\n3\n3\n3\n3\n3''') == '0 0'\nassert solution('''1\n3\n3\n3\n3\n3\n3\n3\n3\n3''') == '3 9'\nassert solution('''1\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3''') == '3 8'\nassert solution('''1\n5\n2 USB\n2 PS/2\n4 PS/2\n4 USB\n1 USB''') == '2 3'\n"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''2 1 1''') == '3 14'\nassert solution('''2 1 1''') == '3 14'\nassert solution('''2 2 1''') == '3 14'\nassert solution('''4\n5 USB\n6 PS/2\n7 PS/2\n3 PS/2''') == '3 10'\nassert solution('''3\n5 USB\n6 PS/2\n7 PS/2\n3 PS/2''') == '3 10'\n"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('2 1 1\\n4\\n5 USB\\n6 PS/2\\n3 PS/2\\n7 PS/2') == '3 14'\nassert solution('3 10 9\\n1 USB\\n1 PS/2\\n1 USB\\n1 PS/2\\n1 USB\\n1 PS/2\\n1 USB\\n1 PS/2') == '4 1'\nassert solution('2 1 1\\n3\\n5 USB\\n6 PS/2\\n1 PS/2\\n1 USB\\n1 PS/2') == '1 3'\nassert solution('2 1 1\\n3\\n5 USB\\n6 PS/2\\n1 USB\\n1 PS/2\\n1 USB\\n1 PS/2') == '2 0'\nassert solution('2 1 1\\n3\\n5 USB\\n6 PS/2\\n1 USB\\n1 PS/2\\n1 USB\\n1 PS/2') == '1 1'\n"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('2 1 1\\n4\\n5 USB\\n6 PS/2\\n3 PS/2\\n7 PS/2') == '3 14'\n\"\"\""
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"2 1 1\") == \"3 14\"\nassert solution(\"2 2 3\") == \"0 0\"\nassert solution(\"4 1 4\") == \"3 0\"\nassert solution(\"6 4 6\") == \"3 15\"\nassert solution(\"2 2 3 4\") == \"3 0\"\n"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == expected\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''2 1 1''') == '3 14'\nassert solution('''2 3 3''') == '0 0'\nassert solution('''3 3 2''') == '1 1'\nassert solution('''1 1 1''') == '2 2'\nassert solution('''1 1 2''') == '1 1'\n"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"a\") == \"51\"\nassert solution(\"hi\") == \"76\"\nassert solution(\"cab\") == \"5\"\nassert solution(\"hi\") == \"76\"\nassert solution(\"ba\") == \"2\"\n"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"a\") == 1\nassert solution(\"hi\") == 76\n\n\"\"\"\n"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"a\") == 51\nassert solution(\"hi\") == 76\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"a\") == \"51\"\nassert solution(\"hi\") == \"76\"\nassert solution(\"aA\") == \"76\"\nassert solution(\"aB\") == \"76\"\nassert solution(\"AB\") == \"76\"\n"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('') == 0\nassert solution('aa') == 0\nassert solution('ab') == 0\nassert solution('abc') == 0\nassert solution('abcde') == 0\n"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('a') == '51'\nassert solution('hi') == '76'\n\n\n-----\n\n\"\"\"\n"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('a') == 51\nassert solution('hi') == 76\nassert solution('aab') == 76\nassert solution('aab') == 76\nassert solution('aab') == 76\n"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('') == 0\nassert solution('a') == 1\nassert solution('h') == 1\nassert solution('hi') == 76\nassert solution('hihi') == 76\n"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"abcdefghijklmnopqrstuvwxyz\") == 51\nassert solution(\"hi\") == 76\n\n\"\"\"\n"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(a) == 51\n\n\"\"\"\n"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == '9'\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''3 0''') == '9'\nassert solution('''3 1''') == '1'\nassert solution('''4 1''') == '3'\nassert solution('''3 2\n2 > 3''') == '1'\nassert solution('''3 4\n1 = 6''') == '3'\n"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('2 0\\n3 1') == '9'\nassert solution('3 1\\n2 > 3') == '1'\nassert solution('4 1\\n3 = 6') == '3'\n"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('0 0') == ''\nassert solution('1 0') == ''\nassert solution('1 1') == ''\nassert solution('1 1') == ''\n"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''3 0''') == '9'\nassert solution('''3 1''') == '1'\nassert solution('''4 1''') == '3'\n"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''1 1''') == '0'\nassert solution('''1 2''') == '1'\nassert solution('''3 2''') == '3'\nassert solution('''2 2''') == '5'\nassert solution('''3 2''') == '10'\n"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''3 0''') == '9'\nassert solution('''3 1''') == '1'\nassert solution('''4 1''') == '3'\n"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('2 0') == '9'\nassert solution('3 1') == '1'\nassert solution('4 1') == '3'\nassert solution('1 0') == '3'\nassert solution('5 1') == '1'\n"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"4 0\") == \"9\"\nassert solution(\"3 1\") == \"1\"\nassert solution(\"3 2\") == \"0\"\nassert solution(\"4 1\") == \"3\"\nassert solution(\"5 4\") == \"20\"\n"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"4 0\") == \"9\"\nassert solution(\"3 1\") == \"1\"\nassert solution(\"4 1\") == \"3\"\nassert solution(\"2 2\") == \"0\"\nassert solution(\"2 3\") == \"0\"\n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''2''') == '1'\nassert solution('''10''') == '3'\n\n\n-----"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''5''') == '3'\nassert solution('''10''') == '3'\nassert solution('''2''') == '1'\nassert solution('''10\n2''') == '3'\nassert solution('''10\n5''') == '3'\n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"10\") == \"3\"\nassert solution(\"100\") == \"1000\"\nassert solution(\"1000\") == \"4000\"\nassert solution(\"1000\") == \"2000\""
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"10\") == \"3\"\nassert solution(\"100\") == \"10\"\nassert solution(\"1000\") == \"100\"\nassert solution(\"10000\") == \"1000\"\n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('2') == '1'\nassert solution('10') == '3'\nassert solution('20') == '6'"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('2') == '1'\nassert solution('10') == '3'\n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('2') == '1'\nassert solution('10') == '3'\n\n\n\"\"\"\n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"0\") == \"0\"\nassert solution(\"2\") == \"1\"\nassert solution(\"10\") == \"3\"\nassert solution(\"23\") == \"7\"\nassert solution(\"50\") == \"5\"\n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"10\") == \"3\"\nassert solution(\"42\") == \"2\"\nassert solution(\"100\") == \"9\"\nassert solution(\"1000\") == \"14\"\n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''2''') == '1'\nassert solution('''3''') == '2'\nassert solution('''4''') == '4'\nassert solution('''5''') == '8'\nassert solution('''10''') == '3'\n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('0840') == '-1 17 7 7 7 -1 2 17 2 7'\nassert solution('100') == '1 0 1 1 0 -1 2 -1 2 -1'\nassert solution('1006') == '-1 17 7 7 7 -1 2 17 2 7'\nassert solution('101') == '-1 17 7 7 7 -1 2 17 2 7'\nassert solution('1016') == '-1 17 7 7 7 -1 2 17 2 7'\n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('0840') == '-1 17 7 7 7 -1 2 17 2 7'\nassert solution('0246802468024') == '0246802468024'\nassert solution('4034343434') == '-1 17 7 7 7 -1 2 17 2 7'\nassert solution('3434343434') == '-1 17 7 7 7 -1 2 17 2 7'\n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"841\") == \"1 17 7 7 7 -1 2 17 2 7\"\nassert solution(\"21\") == \"2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2 21 2"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"0246802468024\") == \"0246802468024\"\nassert solution(\"024680246802440\") == \"024680246802440\"\nassert solution(\"\") == \"\"\nassert solution(\"0\") == \"\"\nassert solution(\"3\") == \"3\"\n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"1.2\") == \"-1 17 7 7 7 -1 2 17 2 7\"\nassert solution(\"4.3\") == \"-1 5 7 7 -1 2 9 2 7\"\nassert solution(\"4.3\") == \"-1 5 7 7 -1 2 9 2 7\"\nassert solution(\"42.22\") == \"-1 5 7 7 -1 2 9 2 7\"\nassert solution(\"42.22\") == \"-1 5 7 7 -1 2 9 2 7\"\n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('0') == '0'\nassert solution('8') == '8'\nassert solution('1') == '17'\nassert solution('2') == '17'\nassert solution('3') == '7'\n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\n    \"0246802468024\"\n) == \"-1 17 7 7 7 -1 2 17 2 7\"\nassert solution(\n    \"0246802468024\"\n) == \"17 17 7 5 5 5 2 7 2 7\"\nassert solution(\n    \"0840\"\n) == \"2 2 1 2 1 2 2 2 0 1\"\nassert solution(\n    \"0840\"\n) == \"17 7 7 5 5 5 2 7 2 7\"\nassert solution(\n    \"0840\"\n) == \"-1 5 7 3 7 -1 2 9 2 7\"\n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('') == '-1 17 7 7 7 -1 2 17 2 7'\nassert solution('0840') == '-1 17 7 7 7 -1 2 17 2 7'\nassert solution('0') == '-1 17 7 7 7 -1 2 17 2 7'\nassert solution
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('WBWBWBWB') == 'YES'\nassert solution('WBWBWBWB') == 'NO'\nassert solution('BWBWBWBW') == 'YES'\nassert solution('BWBWBWBW') == 'NO'\nassert solution('WBWBWBWB') == 'YES'\n"
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"WBWBWBWB\") == \"YES\"\nassert solution(\"WBWBWBWB\") == \"NO\"\nassert solution(\"BWBWBWBW\") == \"YES\"\nassert solution(\"BWBWBWBW\") == \"NO\"\nassert solution(\"BWBWBWWW\") == \"YES\"\n"
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"WBWBWBWB\") == \"YES\"\nassert solution(\"WBWBWBWB\") == \"NO\"\nassert solution(\"WBWBWBWB\") == \"YES\"\nassert solution(\"BWBWBWBW\") == \"NO\"\nassert solution(\"BWBWBWBW\") == \"NO\"\n"
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"WBWBWBWB\") == \"YES\"\nassert solution(\"WBWBWBWB\") == \"NO\"\nassert solution(\"WWWWWBWB\") == \"YES\"\nassert solution(\"WWWWWBWW\") == \"NO\"\nassert solution(\"BWBWBWBW\") == \"YES\"\n"
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"WBWBWBWB\") == \"YES\"\nassert solution(\"WBWBWBWB\") == \"NO\"\nassert solution(\"BBWBWWWB\") == \"NO\"\nassert solution(\"BWBWBWBW\") == \"NO\"\nassert solution(\"BWBWBWBW\") == \"NO\"\n"
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(input) == output\n"
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"WBBBBWBW\") == \"YES\"\nassert solution(\"WBWBWBWB\") == \"NO\"\nassert solution(\"WBWBWBWB\") == \"NO\"\nassert solution(\"WBWBWBWB\") == \"NO\"\nassert solution(\"WBWBWBWB\") == \"NO\"\n"
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"WBWBWBWB\") == \"YES\"\nassert solution(\"WBWBWBWB\") == \"NO\"\nassert solution(\"BWBWBWBW\") == \"YES\"\nassert solution(\"BWBWBWBW\") == \"NO\"\nassert solution(\"WBWBWBWB\") == \"NO\"\n"
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('WBWBWBWB') == \"YES\"\nassert solution('BWBWBWBW') == \"NO\"\nassert solution('WBWBWBWB') == \"YES\"\nassert solution('WBWBWBWB') == \"NO\"\nassert solution('WBWBWBWB') == \"YES\"\n"
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(input()) == output\n\n\"\"\""
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('2 4 6 12') == '3\\n4 6 12'\nassert solution('2 3') == '-1'\n\n\n-----\n\n'''\n"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\n'''4\n2 4 6 12'''\n) == '3\\n4 6 12'\n\nassert solution(\n'''2\n2 3'''\n) == '-1'\n'''\n"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('2 4 6 12') == '3\\n4 6 12'\nassert solution('2 3') == '-1'\nassert solution('7 2 5 3 4 1 6 8 9') == '3\\n1 2 3 4 5 6'"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''\n4\n2 4 6 12\n''') == '3'\nassert solution('''\n2\n2 3\n''') == '-1'\nassert solution('''\n4\n2 4 6 12\n''') == '3'\nassert solution('''\n3\n2 3\n''') == '-1'\nassert solution('''\n3\n2 2 3\n''') == '3'\n"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''2\n2 3\n''') == '-1'\nassert solution('''4\n2 4 6 12\n''') == '3'\nassert solution('''3\n2 4 6\n''') == '4 6 12'\nassert solution('''4\n2 3 4 5\n''') == '-1'\nassert solution('''2\n2 3\n''') == '-1'\n"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('2 4 6 12') == '3'\nassert solution('2 3') == '-1'\n\n\n\n\"\"\"\n"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"4\\n2 4 6 12\\n\") == \"-1\"\nassert solution(\"2\\n2 3\\n\") == \"4 6 12\"\nassert solution(\"4\\n2 3 4 5 6 7 8 9 10\\n\") == \"3\"\nassert solution(\"2\\n2 3\\n\") == \"-1\"\nassert solution(\"4\\n1 2 3 4\\n\") == \"4 1 2 3\"\n"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"4\\n2 4 6 12\") == \"3\\n4 6 12\"\nassert solution(\"2\\n2 3\") == \"-1\"\n\n\n-----"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == result_for_problem_1(stdin)\nassert solution(stdin) == result_for_problem_2(stdin)\nassert solution(stdin) == result_for_problem_3(stdin)\n\"\"\"\n"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('') == '-1'\nassert solution('1') == '1'\nassert solution('4') == '1'\nassert solution('5') == '2'\nassert solution('2') == '3'\n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\n\"\"\"\n5\n1 2 3 1 2\n\"\"\") == \"3 2 0 2 0\"\nassert solution(\n\"\"\"\n4\n3 2 1 4\n\"\"\") == \"2 3 4 0\"\nprint(\"Tests passed successfully.\")\n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"0\"\nassert solution(\"3\") == \"0\"\nassert solution(\"4\") == \"0\"\nassert solution(\"5\") == \"3 2 0 2 0\"\n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''5\n1 2 3 1 2\n''') == '3 2 0 2 0'\nassert solution('''4\n3 2 1 4\n''') == '2 3 4 0'\nassert solution('''7\n1 1 1 1 1 1\n''') == '0 0 0 0 0 0'\nassert solution('''1000\n1001 1002 1003 1004 1005 1006 1007 1008 1009\n''') == '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0'\nassert solution('''1000\n1101 1002 1003 1004 1005 1006 1007 1008 1009\n''') == '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0'\n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1\\n1') == '0'\nassert solution('1\\n2') == '0'\nassert solution('2\\n1') == '0'\nassert solution('1\\n2\\n2') == '0'\nassert solution('1\\n2\\n3') == '0'\n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''5\n1 2 3 1 2''') == \"3 2 0 2 0\"\nassert solution('''4\n3 2 1 4''') == \"2 3 4 0\"\n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\n    '''5\n1 2 3 1 2'''\n) == '3 2 0 2 0'\nassert solution(\n    '''4\n3 2 1 4'''\n) == '2 3 4 0'\nassert solution(\n    '''6\n5 4 3 2 1'''\n) == '3 2 0 2 0'\nassert solution(\n    '''7\n7 6 5 4 3 2'''\n) == '3 2 0 2 0'\nassert solution(\n    '''8\n1 1 2 3 1 1'''\n) == '3 2 0 2 0'\n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"1\\n1\") == \"0\"\nassert solution(\"5\\n1 2 3 1 2\") == \"3 2 0 2 0\"\nassert solution(\"4\\n3 2 1 4\") == \"2 3 4 0\""
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''5\n1 2 3 1 2''') == '3 2 0 2 0'\nassert solution('''4\n3 2 1 4''') == '2 3 4 0'\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 2 3 1 2\\n\") == \"3 2 0 2 0 \\n\"\nassert solution(\"5\\n3 2 1 4\\n\") == \"2 3 4 0 \\n\"\nassert solution(\"4\\n3 2 1 4\\n\") == \"2 3 4 0 \\n\"\nassert solution(\"10\\n1 2 3 4 5 6 7 8 9 10\\n\") == \"3 2 0 2 0 \\n\"\nassert solution(\"10\\n1 2 3 4 5 6 7 8 9 10\\n\") == \"2 3 4 0 \\n\"\n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"1\\n3\\n\") == \"3 2 0 2 0\"\nassert solution(\"2\\n1 2 3 1 2\") == \"3 2 0 2 0\"\nassert solution(\"3\\n1 2 3 1 2\") == \"2 3 4 0 2 0\"\nassert solution(\"4\\n1 2 3 1 4\") == \"2 3 4 0 2 0\"\nassert solution(\"5\\n1 2 3 1 2\") == \"2 3 4 0 2 0\"\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''2 162''') == '''YES'''\nassert solution('''4 42''') == '''NO'''\nassert solution('''100 40021''') == '''YES'''\nassert solution('''1000000 3''') == '''NO'''\nassert solution('''27 532''') == '''YES'''\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('2 162') == 'YES\\n5\\n2 4 8 81 162'\nassert solution('4 42') == 'NO'\nassert solution('100 40021') == 'YES\\n5\\n100 200 2001 4002 40021'\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('2 162') == 'YES\\n5\\n2 4 8 81 162'\nassert solution('4 42') == 'NO'\nassert solution('100 40021') == 'YES\\n5\\n100 200 2001 4002 40021'\n\n'''\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('2 162') == 'YES\\n5\\n2 4 8 81 162'\nassert solution('4 42') == 'NO'\nassert solution('100 40021') == 'YES\\n5\\n100 200 2001 4002 40021'\nprint(solution(input()))"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''2 162''') == \"YES\"\nassert solution('''4 42''') == \"NO\"\nassert solution('''100 40021''') == \"YES\"\nassert solution('''2 2''') == \"NO\"\nassert solution('''1 7''') == \"YES\"\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('2 162') == 'YES\\n5\\n2 4 8 81 162'\nassert solution('4 42') == 'NO'\nassert solution('100 40021') == 'YES\\n5\\n100 200 2001 4002 40021'\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(input()) == \"\"\"\"\""
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('2 162') == 'YES'\nassert solution('4 42') == 'NO'\nassert solution('100 40021') == 'YES'\nassert solution('1023') == 'NO'\nassert solution('10200001') == 'YES'\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\n'''2 162\n''') == 'YES'\n\nassert solution(\n'''4 42\n''') == 'NO'\n\nassert solution(\n'''100 40021\n''') == 'YES'\n\nassert solution(\n'''7 109\n''') == 'NO'\n\nassert solution(\n'''200 5\n''') == 'YES'"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('2 162') == 'YES\\n5\\n2 4 8 81 162\\n'\nassert solution('4 42') == 'NO\\n'\nassert solution('100 40021') == 'YES\\n5\\n100 200 2001 4002 40021\\n'\nassert solution('1 2 3') == 'NO\\n'\nassert solution('3 5') == 'NO\\n'\n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"2 3 5\") == \"\"\nassert solution(\"3 3 5\") == \"\"\nassert solution(\"3 4 5\") == \"\"\nassert solution(\"3 5 4\") == \"\"\n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('3 3 5') == '18\\n3 6\\n'\nassert solution('2 4 4') == '16\\n4 4'"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\n'''3 3 5'''\n) == '18 3 6'\nassert solution(\n'''2 4 4'''\n) == '16 4 4'\nassert solution(\n'''3 6 7'''\n) == '12 4 4'\nassert solution(\n'''6 6 6'''\n) == '18 4 4'\nassert solution(\n'''9 9 9'''\n) == '72 4 4'\n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('3 3 5') == '18\\n3 6\\n'\nassert solution('2 4 4') == '16\\n4 4\\n'\nassert solution('10 10 10') == '100\\n10 10 10\\n'\nassert solution('5 10 10') == '60\\n10 10 10\\n'\nassert solution('2 4 4') == '16\\n4 4\\n'\n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''3 3 5''') == '18 3 6'\nassert solution('''2 4 4''') == '16 4 4'\nassert solution('''2 4 4''') == '16 4 4'\n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''3 3 5''') == '''18\n    3 6\n'''\n\nassert solution('''2 4 4''') == '''16\n    4 4\n'''\n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('3 3 5') == '18\\n3 6\\n'\nassert solution('2 4 4') == '16\\n4 4\\n'\nassert solution('2 4 5') == '16\\n4 5\\n'\nassert solution('5 5 5') == '26\\n5 5\\n'\nassert solution('2 4 5') == '16\\n4 5\\n'\n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\n\nimport sys\nfrom itertools import combinations\nfrom collections import defaultdict\nsys.setrecursionlimit(10 ** 6)\n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''3''') == 'Infinity'\nassert solution('''-7 1''') == 'Infinity'\nassert solution('''5 2''') == '1907'\nassert solution('''-5 1''') == 'Impossible'\nassert solution('''29 9''') == '1897'\n"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('3') == 'Infinity'\nassert solution('5') == 'Impossible'\nassert solution('1') == 'Infinity'\nassert solution('-1') == 'Impossible'\nassert solution('4') == '1897'\n"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''\n    1\n    1 1\n    3 2\n    -3 1\n    1 0\n''') == 'Infinity'\n\nassert solution('''\n    3\n    1 -1\n    2 1\n    -1 -1\n    1 0\n''') == '1897'\n"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1\\n-5 1') == 'Infinity'\nassert solution('2\\n57 1') == 'Impossible'\nassert solution('3\\n-7 1\\n5 2\\n8 2') == '1907'\nassert solution('4\\n27 2\\n13 1\\n-50 1\\n8 2') == '1897'\nassert solution('5\\n77 1\\n-69 1\\n-42 1\\n-70 1\\n-42 1') == '1647'\n"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''3\n-7 1\n5 2\n8 2''') == '1897'\nassert solution('''2\n57 1\n22 2''') == 'Impossible'\nassert solution('''1\n-5 1\n''') == 'Infinity'\n\n\n\n--------"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''-7 1\n5 2\n8 2''') == '1907'\nassert solution('''57 1\n22 2''') == 'Impossible'\nassert solution('''27 2\n13 1\n-50 1\n8 2''') == '1897'\nassert solution('''27 2\n13 1\n-50 1\n8 2''') == '1897'\nassert solution('''1\n-5 1\n''') == 'Infinity'\n"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"4\\n27 2\\n13 1\\n-50 1\\n8 2\") == \"1897\"\nassert solution(\"2\\n57 1\\n22 2\") == \"Impossible\"\nassert solution(\"1\\n-5 1\") == \"Infinity\"\nassert solution(\"2\\n-4 1\") == \"Impossible\"\nassert solution(\"1\\n-2 1\") == \"Impossible\"\n\n\n-----\n\nPython/PyPy\n\n-----\n\n\"\"\""
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''-7 1\n5 2\n8 2''') == '1907'\nassert solution('''-50 1\n8 2''') == 'Impossible'\nassert solution('''-27 1\n-50 1\n8 2''') == '1897'\nassert solution('''57 1\n22 2''') == '1897'\n'''\n"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('0\\n1') == '1'\nassert solution('1\\n-1\\n1\\n-1\\n2') == 'Impossible'\nassert solution('-1\\n-1\\n1\\n-1\\n1\\n-1') == 'Impossible'\nassert solution('1\\n-1\\n1\\n-1\\n1\\n-1') == 'Infinity'\nassert solution('1\\n-1\\n1\\n-1\\n1\\n-1') == 'Infinity'\n"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('-7 1\\n5 2\\n8 2') == '1907'\nassert solution('2\\n57 1\\n22 2') == 'Impossible'\nassert solution('1\\n-5 1\\n') == 'Infinity'\nassert solution('4\\n27 2\\n13 1\\n-50 1\\n8 2\\n') == '1897'\n\n\"\"\"\nfrom typing import List\n\nNumber = int\n"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''4\nabc''') == 'YES'\nassert solution('''1\nabca''') == 'YES'\nassert solution('''2\naaacas''') == 'YES'\nassert solution('''3\nabc''') == 'NO'\nassert solution('''3\naaa''') == 'YES'\n"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('1') == 'YES'\nassert solution('2') == 'NO'\nassert solution('3') == 'YES'\nassert solution('4') == 'NO'\nassert solution('5') == 'YES'\n"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdin[:-1]"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''1\nabca''') == \"YES\"\nassert solution('''2\naaacas''') == \"YES\"\nassert solution('''4\nabc''') == \"NO\"\nassert solution('''2\nabc''') == \"NO\"\n"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''2\nabc''') == 'NO'\nassert solution('''1\nabca''') == 'YES'\nassert solution('''1\naabca''') == 'YES'\nassert solution('''1\naabc''') == 'YES'\nassert solution('''1\naa''') == 'YES'\n"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('Hello, world!') == 'Hello'\nassert solution('1') == 'NO'\nassert solution('abc') == 'NO'\nassert solution('bc') == 'NO'\nassert solution('abcd') == 'NO'\n"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('1') == 'YES'\nassert solution('2') == 'YES'\nassert solution('3') == 'NO'\nassert solution('4') == 'YES'\nassert solution('6') == 'NO'\n"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1\\nabca') == 'YES\\nabca'\nassert solution('1\\naaacas') == 'YES\\naaa'\nassert solution('1\\naaaacas') == 'YES\\naaa'\nassert solution('2\\nabca') == 'NO'\nassert solution('2\\naaacas') == 'YES\\nas'\n"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('abca') == 'YES\\nabca'\nassert solution('aaacas') == 'YES\\naaa\\nas'\nassert solution('abc') == 'NO'\nassert solution('abcaa') == 'YES\\naabca\\nas'\nassert solution('abcac') == 'YES\\naabca\\nac'\n"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''\n1\nabca\n''') == 'YES'\nassert solution('''\n2\naaacas\n''') == 'YES'\nassert solution('''\n4\nabc\n''') == 'NO'\nassert solution('''\n1\nabc\n''') == 'YES'\nassert solution('''\n2\naabc\n''') == 'YES'\n"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('A221033') == '21'\nassert solution('A223635') == '22'\nassert solution('A232726') == '23'\n\nassert solution('A000023') == '23'\nassert solution('A101021') == '21'\n"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('A12345678') == 12345678\nassert solution('A12345679') == 12345679\nassert solution('A123456789') == 123456789\nassert solution('A1234567890') == 1234567890\nassert solution('A1234567890123456789') == 1234567890123456789\n"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('A221033') == 21\nassert solution('A223635') == 22\nassert solution('A232726') == 23\nassert solution('A12341234') == 1234\nassert solution('AAABCCDD') == 0\n"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"A221033\") == 21\nassert solution(\"A223635\") == 22\nassert solution(\"A232726\") == 23\nprint(\"The test passed\")\n"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"A221033\") == 21\nassert solution(\"A223635\") == 22\nassert solution(\"A232726\") == 23\n"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('A221033') == 21\nassert solution('A223635') == 22\nassert solution('A232726') == 23"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('A221033') == 21\nassert solution('A223635') == 22\nassert solution('A232726') == 23\nprint('Tests passed successfully')\n"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('A221033') == '21'\nassert solution('A223635') == '22'\nassert solution('A232726') == '23'\nprint('Test case passed')\n\n------"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"A221033\") == 21\nassert solution(\"A223635\") == 22\nassert solution(\"A232726\") == 23\nprint(solution(stdin))\n"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"A232726\") == 23\nassert solution(\"A223635\") == 22\nassert solution(\"A221033\") == 21\n"
    },
    {
        "number": 789,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdin"
    },
    {
        "number": 789,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('3') == '2'\nassert solution('4') == '1'\nassert solution('5') == '2'\n"
    },
    {
        "number": 789,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('4') == '1'\nassert solution('7') == '2'\nassert solution('77') == '6'\nassert solution('47') == '1'\nassert solution('4677') == '5'\n"
    },
    {
        "number": 789,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('4') == '1'\nassert solution('7') == '2'\nassert solution('77') == '6'\nassert solution('17') == '2'\nassert solution('3') == '0'\n"
    },
    {
        "number": 789,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"\"\nassert solution(\"0\") == \"\"\nassert solution(\"5\") == \"\"\nassert solution(\"11\") == \"\"\n"
    },
    {
        "number": 789,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('4') == '1'\nassert solution('7') == '2'\nassert solution('77') == '6'\n"
    },
    {
        "number": 789,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('4') == '1'\nassert solution('7') == '2'\nassert solution('77') == '6'\n"
    },
    {
        "number": 789,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"4\") == \"1\"\nassert solution(\"7\") == \"2\"\nassert solution(\"77\") == \"6\"\nassert solution(\"123456789\") == \"8\"\nassert solution(\"987654321\") == \"9\"\n"
    },
    {
        "number": 789,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('47') == '1'\nassert solution('744') == '2'\nassert solution('4') == '1'\nassert solution('5') == '2'\nassert solution('17') == '6'\n"
    },
    {
        "number": 789,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1') == '1'\nassert solution('7') == '2'\nassert solution('4') == '1'\nassert solution('77') == '6'\nassert solution('9') == '8'\n"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"6 1\") == \"35\"\nassert solution(\"6 1\") == \"35\"\nassert solution(\"6 10\") == \"20\"\nassert solution(\"10 10\") == \"0\"\nassert solution(\"2 4 6 10\") == \"5\"\n"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"6 1\\n5 6 7 8 10 2\\n3 5 6 7 1 10\") == \"35\"\nassert solution(\"6 1\\n5 6 7 8 10 2\\n3 5 6 7 1 10\\n1 1 1 1 1 1 1\") == \"35\"\n\n\n\"\"\""
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('6 1') == '35'\nassert solution('5 6 7 8 10 2') == '35'\nassert solution('3 5 6 7 1 10') == '25'\nassert solution('4 9 12 7 9 2') == '35'\nassert solution('1 2 3 4 5 6') == '35'\n"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\nfrom math import log\n"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"3 1\\n5 6 7 8 10 2\\n3 5 6 7 1 10\\n\") == \"35\"\nassert solution(\"6 1\\n5 6 7 8 10 2\\n3 5 6 7 1 10\\n\") == \"35\"\nassert solution(\"6 1\\n5 6 7 8 10 2\\n3 5 6 7 1 10\\n\") == \"35\"\nassert solution(\"6 1\\n5 6 7 8 10 2\\n3 5 6 7 1 10\\n\") == \"35\"\nassert solution(\"6 1\\n5 6 7 8 10 2\\n3 5 6 7 1 10\\n\") == \"35\"\n"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('6 1\\n5 6 7 8 10 2\\n3 5 6 7 1 10') == '35'\nassert solution('10 4\\n8 6 7 2 10 9 5 3 1') == '59'\nassert solution('6 4\\n5 6 7 8 10 2\\n3 5 6 7 1 10') == '38'\nassert solution('10 5\\n8 6 7 8 10 9 5 1 3 4\\n4 6 7 1 10\\n5 3 2 4 1 5 1') == '53'\nassert solution('10 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1') == '10'\n"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(input) == output\n\"\"\"\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''\n4\n1100\n''') == '3'\n\nassert solution('''\n4\n1101\n''') == '3'\n\nassert solution('''\n4\n1111\n''') == '4'\n'''\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('0') == '1'\nassert solution('1') == '2'\nassert solution('101') == '102'\nassert solution('10101') == '10101'\n'''\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"\n4\n1100\n\"\"\"\n) == \"3\"\n\nassert solution(\n\"\"\"\n4\n1111\n\"\"\"\n) == \"4\"\n\nassert solution(\n\"\"\"\n5\n1011\n\"\"\"\n) == \"4\"\n\nassert solution(\n\"\"\"\n3\n11\n\"\"\"\n) == \"2\"\n\nassert solution(\n\"\"\"\n7\n1111111\n\"\"\"\n) == \"6\""
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1111') == '4'\nassert solution('1100') == '3'\nassert solution('10') == '1'\nassert solution('1') == '0'\nassert solution('0') == '1'\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1100') == '3'\nassert solution('1111') == '4'\nassert solution('100') == '0'\nassert solution('101') == '1'\nassert solution('1001') == '2'\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1100') == '3'\nassert solution('1111') == '4'\nassert solution('10000') == '4'\nassert solution('100000') == '4'\nassert solution('111111') == '5'\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\n    input_string=\"4\\n1100\"\n) == \"3\"\n\nassert solution(\n    input_string=\"4\\n1111\"\n) == \"4\"\n'''\nn = int(input())\nl = list(input())\n\ncount = 0\n\nfor i in range(len(l)):\n    if i == len(l)-1:\n        if l[i]!= '1':\n            count += 1\n    else:\n        if (l[i] == '0' and l[i+1] == '1') or (l[i] == '1' and l[i+1] == '0'):\n            count += 1\n\nprint(count)\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"4\") == \"3\"\nassert solution(\"1111\") == \"4\"\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1100') == '3'\nassert solution('1111') == '4'\nassert solution('1111') == '4'\nassert solution('1111') == '4'\nassert solution('1111') == '4'\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('4') == '3'\nassert solution('1100') == '3'\nassert solution('1111') == '4'\nassert solution('1') == '0'\nassert solution('1011') == '2'\n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''5 10\n-1 5 0 -5 3''') == '0'\nassert solution('''3 4\n-10 0 20\n''') == '-1'\nassert solution('''5 10\n-5 0 10 -11 0\n''') == '2'\nassert solution('''10 10\n-5 0 10 -11 0\n''') == '2'\nassert solution('''10 10\n-1 0 10 -11 0\n''') == '-1'\n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('5 10\\n-1 5 0 -5 3') == '0'\nassert solution('3 4\\n-10 0 20') == '-1'\nassert solution('5 10\\n-5 0 10 -11 0') == '2'\n\nprint('Test success!')\n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''5 10\n-1 5 0 -5 3''') == '0'\nassert solution('''3 4\n-10 0 20\n''') == '-1'\nassert solution('''5 10\n-5 0 10 -11 0\n''') == '2'\n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\n'''5 10\n-1 5 0 -5 3\n''') == '0'\n\nassert solution(\n'''3 4\n-10 0 20\n''') == '-1'"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1 2\\n3 4') == '0'\nassert solution('1 2\\n-1 -2') == '1'\nassert solution('1 2\\n-1 -2 4') == '-1'\nassert solution('1 2\\n-1 -2 4 5') == '-1'\nassert solution('1 2\\n-1 -2 -4 -5') == '-1'\n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1 2 3 4 5') == '2'\nassert solution('-1 5 0 -5 3') == '0'\nassert solution('-1 0 0 0 0') == '-1'\nassert solution('-1 0 0 0 0') == '-1'\nassert solution('1 10') == '-1'\n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''5 10\n-1 5 0 -5 3''') == '0'\nassert solution('''3 4\n-10 0 20''') == '-1'\nassert solution('''5 10\n-5 0 10 -11 0''') == '2'\nassert solution('''5 10\n-5 0 10 -11 0''') == '-1'\nassert solution('''5 10\n-5 0 10 -11 0''') == '-1'\n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('-1 5 0 -5 3') == '0'\nassert solution('5 10') == '-1'\nassert solution('3 4') == '-1'\nassert solution('-10 0 20') == '2'\nassert solution('10 1 3 1 2') == '2'\n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''-1 5 0 -5 3''') == '0'\nassert solution('''-1 0 0 -5 3''') == '-1'\nassert solution('''-5 3 10 -11 0''') == '2'\nassert solution('''-5 3 10 -11 0''') == '2'\nassert solution('''-1 1 2 3 4''') == '-1'\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('2 2') == '3'\nassert solution('3 3') == '0'\nassert solution('1 3') == '1'\nassert solution('1 3') == '1'\nassert solution('3 1') == '0'\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"2 3\") == \"3\"\nassert solution(\"2 3\") == \"3\"\nassert solution(\"1 3\") == \"0\"\nassert solution(\"1 3\") == \"0\"\nassert solution(\"3 1\") == \"0\"\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''2 2\n1 3\n3 1''') == '3'\nassert solution('''2 2\n3 1\n3 1''') == '0'\nassert solution('''2 2\n1 3\n1 3''') == '2'\nassert solution('''3 1\n1 3\n1 3''') == '2'\nassert solution('''3 2\n1 3\n1 3''') == '3'\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('2 2') == '3'\nassert solution('1 3') == '1'\nassert solution('3 1') == '1'\nassert solution('3 1 2 1') == '1'\nassert solution('1 3 2 1') == '1'\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1 2') == '3'\nassert solution('1 3') == '3'\nassert solution('3 1') == '3'\nassert solution('2 2') == '3'\nassert solution('1 3') == '3'\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''2 2\n1 3\n3 1''') == '3'\nassert solution('''2 2\n1 3\n3 1''') == '3'\nassert solution('''2 2\n1 3\n3 1''') == '3'\nassert solution('''2 2\n1 3\n3 1''') == '3'\nassert solution('''2 2\n1 3\n3 1''') == '3'\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''2 2''') == '3'\nassert solution('''1 3''') == '1'\nassert solution('''3 1''') == '1'\nassert solution('''5 1''') == '0'\nassert solution('''7 2''') == '0'\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\n'''\n2 2\n1 3\n3 1\n''') == '3'\n\nassert solution(\n'''\n2 3\n1 2\n2 1\n''') == '0'\n\nassert solution(\n'''\n4 3\n1 1 1 1\n1 1 1 1\n''') == '6'\n\nassert solution(\n'''\n4 4\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n''') == '24'\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"1 2\") == \"3\"\nassert solution(\"2 2\") == \"3\"\nassert solution(\"1 2 3\") == \"4\"\nassert solution(\"1 2 4\") == \"3\"\nassert solution(\"1 2 3 4\") == \"6\"\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1 2\\n3 1') == '3'\nassert solution('1 2\\n1 3') == '1'\nassert solution('1 2\\n1 3') == '0'\nassert solution('1 2\\n1 2') == '0'\nassert solution('1 2\\n1 3\\n2 3') == '2'\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''3\n1 2 2 1 3 1''') == '2 1 3 1 1 2'\nassert solution('''1\n1 1''') == '-1'\nassert solution('''2\n1 1''') == '-1'\nassert solution('''3\n1 2 2 1 3 1''') == '2 1 3 1 1 2'\nassert solution('''4\n1 2 2 3 1 1''') == '-1'\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''3\n1 2 2 1 3 1''') == '2 1 3 1 1 2'\nassert solution('''1\n1 1''') == '-1'\nassert solution('''2\n1 2''') == '-1'\nassert solution('''4\n2 4 3 2 3''') == '1 2 3 2 3 4'\nassert solution('''5\n1 1 1 1 1 1''') == '-1'\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(input()) == expected(input())\n\n\n-----Test cases-----\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdin\n'''\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\n    'this is a test\\n2 1 2 1 3 1'\n) == '2 1 3 1 1 2'\nassert solution(\n    'this is a test\\n2 2'\n) == '-1'\nassert solution(\n    'this is a test\\n2 1 1'\n) == '-1'\nassert solution(\n    'this is a test\\n2 2 1'\n) == '-1'\nassert solution(\n    'this is a test\\n1 1'\n) == '-1'\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == \"1 2 3 4 5 -1\"\nassert solution(stdin) == \"1 2 3 4 5 -1\"\nassert solution(stdin) == \"1 2 3 4 5 -1\"\nassert solution(stdin) == \"1 2 3 4 5 -1\"\nassert solution(stdin) == \"1 2 3 4 5 -1\"\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''1\n2\n1 3 2''') == '1 3 2'\nassert solution('''3\n1 2 1 3 1''') == '-1'\nassert solution('''2\n2\n2 2''') == '-1'\nassert solution('''2\n1 2 2''') == '1 2 2'\nassert solution('''2\n1 2 2 1''') == '1 2 1'\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1\\n1\\n') == '-1'\nassert solution('2\\n1 2\\n') == '-1'\nassert solution('1\\n1\\n') == '2 1\\n'\nassert solution('2\\n1 2\\n') == '2 1\\n'\n\n\n>>> def solution(stdin: str) -> str:\n...     a = list(map(int, stdin.split()))\n...     n = a[0]\n...     a = a[1:2*n]\n...     return''.join(map(str, a))\n\n>>> assert solution('1\\n1\\n') == '-1'\n>>> assert solution('2\\n1 2\\n') == '-1'\n>>> assert solution('1\\n1\\n') == '2 1\\n'\n>>> assert solution('2\\n1 2\\n') == '2 1\\n'\n\"\"\"\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == '-1'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 795,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('5') == '1'\nassert solution('74') == '35'\nassert solution('3') == '0'\nassert solution('1') == '1'\nassert solution('4') == '0'\n"
    },
    {
        "number": 795,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''5''') == 1\nassert solution('''74''') == 35\nassert solution('''2''') == 0\nassert solution('''10''') == 1\nassert solution('''21''') == 0\n"
    },
    {
        "number": 795,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1') == ''\nassert solution('4') == ''\nassert solution('5') == ''\nassert solution('6') == ''\n"
    },
    {
        "number": 795,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdin"
    },
    {
        "number": 795,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(input(\"\")) == \"\"\n"
    },
    {
        "number": 795,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''5''') == '1'\nassert solution('''74''') == '35'\nassert solution('''7''') == '1'\nassert solution('''74''') == '35'\nassert solution('''7''') == '1'\n"
    },
    {
        "number": 795,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(5) == \"1\"\nassert solution(74) == \"35\""
    },
    {
        "number": 795,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == \"35\"\n\n'''\n"
    },
    {
        "number": 795,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == \"1\""
    },
    {
        "number": 795,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('5') == '1'\nassert solution('74') == '35'\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('2 2') == '7'\nassert solution('123 456789') == '689974806'\n\"\"\"\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == \"689974806\"\n\n\"\"\"\n\nn, k = list(map(int, stdin.strip().split()))\n\ndp = [[0] * (k + 1) for _ in range(n + 1)]\ndp[1][1] = 1\n\nfor i in range(2, n + 1):\n    for j in range(1, k + 1):\n        dp[i][j] = (dp[i - 1][j] + dp[i][j - 1]) % 1000000007\n\nprint(dp[-1][-1])\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('2 2') == '7'\nassert solution('123 456789') == '689974806'\n\"\"\""
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('2 2') == '7'\nassert solution('123 456789') == '689974806'\nassert solution('5 6') == '44'\nassert solution('1 2 3 4 5 6') == '216'\nassert solution('1 1 1 1 1 1') == '1'\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('2 2') == '7'\nassert solution('123 456789') == '689974806'\n\n\"\"\"\n\"\"\"\ntest_1 = [[1, 2], [3, 4]]\ntest_2 = [[1, 2], [3, 4], [5, 6], [7, 8]]"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\""
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == 7\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == ''\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('2 2') == '7'\nassert solution('123 456789') == '689974806'\n'''"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdin\n\n\"\"\"\n\nn,m,a,b = map(int, stdin.split())\n\narr = [list(map(int, stdin.split())) for _ in range(n)]\n\nresult = 0\n\nfor i in range(a, n - a + 1):\n    for j in range(b, m - b + 1):\n        result += min(arr[i][j - 1], arr[i][j], arr[i - 1][j])\n\nprint(result)\n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"3 4 2 1\n1 2 3 59\"\"\"\n) == \"111\"\n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdin\n\"\"\"\n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''3 4 2 1\n1 2 3 59''') == '111'\n\n'''"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"3 4 2 1\", \"1 2 3 59\") == \"111\"\n\"\"\"\n\nfrom typing import Tuple"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == '5547'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(input()) == '111'\n\n\"\"\"\n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('3 4 2 1') == '111'\nassert solution('1 2 3 59') == '111'\nassert solution('1 2 3 59 11') == '611'\nassert solution('1 2 3 59 11 9') == '666'\nassert solution('1 2 3 59 11 9 3') == '555555555555555'\n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(input) == \"111\"\n\"\"\"\n"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdin\n\"\"\"\n"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('1 1 2') == '0 1 1'\nassert solution('3 4 5') == '1 3 2'\nassert solution('4 1 1') == 'Impossible'\nassert solution('5 1 3') == 'Impossible'\nassert solution('4 1 1') == 'Impossible'\n"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"1 1 2\") == \"0 1 1\"\nassert solution(\"3 4 5\") == \"1 3 2\"\nassert solution(\"4 1 1\") == \"Impossible\"\nassert solution(\"5 4 3\") == \"2 1 0\"\nassert solution(\"1 3 2\") == \"1 3 2\"\n"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"1 1 2\") == \"0 1 1\"\nassert solution(\"3 4 5\") == \"1 3 2\"\nassert solution(\"4 1 1\") == \"Impossible\"\nassert solution(\"4 1 1\") == \"Impossible\"\n\n\n\n\n\n\"\"\"\n"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\nimport sys\n\nfrom collections import deque"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('') == 'Impossible'\nassert solution('1 1 2') == '0 1 1'\nassert solution('3 4 5') == '1 3 2'\nassert solution('4 1 1') == 'Impossible'\nassert solution('1 1 1') == 'Impossible'\n"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"1 1 2\") == \"0 1 1\"\nassert solution(\"3 4 5\") == \"1 3 2\"\nassert solution(\"4 1 1\") == \"Impossible\"\nassert solution(\"1 1 2\") == \"0 1 1\"\nassert solution(\"3 4 5\") == \"1 3 2\"\n"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''1 2 3''') == '0 1 1'\nassert solution('''4 1 1''') == 'Impossible'\nassert solution('''1 1 2''') == '0 1 1'\nassert solution('''3 4 5''') == '1 3 2'\n\n'''\n"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('') == 'Impossible'\nassert solution('1 1 2') == '0 1 1'\nassert solution('3 4 5') == '1 3 2'\nassert solution('4 1 1') == 'Impossible'\nassert solution('1 2 3') == '1 2 1'\n"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('3\\n1 1 0 1 1\\n') == '1\\n'\nassert solution('5\\n0 1 2 3 4\\n') == '10\\n'\nassert solution('5\\n1 1 0 1 1\\n') == '1\\n'\nassert solution('3\\n1 3 1\\n') == '4\\n'\nassert solution('1\\n12\\n') == '0\\n'\n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''5\n0 1 2 3 4\n''') == '10'\nassert solution('''5\n1 1 0 1 1\n''') == '1'\nassert solution('''3\n1 3 1\n''') == '4'\nassert solution('''1\n12\n''') == '0'\nassert solution('''10\n1 1 0 1 1\n''') == '1'\n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''5''') == '''10'''\nassert solution('''5''') == '''10'''\nassert solution('''3''') == '''1'''\nassert solution('''1''') == '''0'''\nassert solution('''1''') == '''0'''\n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('5\\n0 1 2 3 4') == '10'\nassert solution('5\\n1 1 0 1 1') == '1'\nassert solution('3\\n1 3 1') == '4'\nassert solution('1\\n12') == '0'\nassert solution('2\\n2 3') == '0'\n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''5''') == '10'\nassert solution('''1 1 0 1 1''') == '1'\nassert solution('''3''') == '4'\nassert solution('''12''') == '0'\nassert solution('''5\n0 1 2 3 4''') == '10'\n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"\n5\n0 1 2 3 4\n\"\"\"\n) == \"10\"\n\nassert solution(\n\"\"\"\n5\n1 1 0 1 1\n\"\"\"\n) == \"1\"\n\nassert solution(\n\"\"\"\n3\n1 3 1\n\"\"\"\n) == \"4\"\n\nassert solution(\n\"\"\"\n1\n12\n\"\"\"\n) == \"0\"\n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"5\\n0 1 2 3 4\") == \"10\"\nassert solution(\"5\\n1 1 0 1 1\") == \"1\"\nassert solution(\"3\\n1 3 1\") == \"4\"\nassert solution(\"1\\n12\") == \"0\"\nassert solution(\"10\\n1 1 0 1 1\") == \"1\"\n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"5\\n0 1 2 3 4\") == \"10\"\nassert solution(\"5\\n1 1 0 1 1\") == \"1\"\nassert solution(\"5\\n1 3 1\") == \"4\"\nassert solution(\"5\\n1 3 1\") == \"4\"\nassert solution(\"5\\n1 3 1\") == \"4\"\n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('0 1 2 3 4\\n0 1 2 3 4') == '10'\nassert solution('5\\n0 1 2 3 4\\n') == '10'\nassert solution('3\\n1 3 1\\n') == '1'\nassert solution('1\\n12\\n') == '0'\n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('5\\n0 1 2 3 4\\n') == '10\\n'\nassert solution('5\\n1 1 0 1 1\\n') == '1\\n'\nassert solution('3\\n1 3 1\\n') == '4\\n'\nassert solution('1\\n12\\n') == '0\\n'"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdin\n\n\"\"\"\nfrom math import degrees, radians, atan, tan, atan2, pi, copysign, degrees, radians, fmod, hypot\nfrom math import fabs, sqrt"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('') == '0'\nassert solution('1') == '90'\nassert solution('2') == '135'\nassert solution('3') == '270'\nassert solution('4') == '361'\n"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(input()) == \"36.8698976458\""
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\n'''2\n2 0\n0 2\n'''\n) == '90.0000000000'\n\nassert solution(\n'''3\n2 0\n0 2\n-2 2\n'''\n) == '135.0000000000'\n\nassert solution(\n'''4\n2 0\n0 2\n-2 0\n0 -2\n'''\n) == '270.0000000000'\n\nassert solution(\n'''2\n2 1\n1 2\n'''\n) == '36.8698976458'\n\nassert solution(\n'''3\n2 0\n0 2\n-2 0\n0 -2\n'''\n) == '36.8698976458'"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"\"\nassert solution(\"1 2\") == \"90.0000000000\"\nassert solution(\"1 0\") == \"0.0000000000\"\nassert solution(\"2 0\") == \"45.0000000000\"\n"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"135.0000000000\"\nassert solution(\"3\") == \"270.0000000000\"\nassert solution(\"4\") == \"36.8698976458\"\n\nassert solution(\"2\") == \"135.0000000000\"\nassert solution(\"3\") == \"270.0000000000\"\n"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(input()) == '36.8698976458'\n\"\"\""
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''2\n2 0\n0 2\n''') == '90.0000000000'\nassert solution('''3\n2 0\n0 2\n-2 2\n''') == '135.0000000000'\nassert solution('''4\n2 0\n0 2\n-2 0\n0 -2\n''') == '270.0000000000'\nassert solution('''2\n2 1\n1 2\n''') == '36.8698976458'\nassert solution('''2\n2 1\n1 -2\n''') == '45.0000000000'\n"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == expected_output\nprint(solution(stdin))\n"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''2\n2 0\n0 2\n''') == '90.0000000000'\n\nassert solution('''3\n2 0\n0 2\n-2 2\n''') == '135.0000000000'\n\nassert solution('''4\n2 0\n0 2\n-2 0\n0 -2\n''') == '270.0000000000'\n\nassert solution('''5\n2 0\n0 2\n-2 0\n0 -2\n0 2\n''') == '36.8698976458'\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''2\n1 3 2''') == '3'\nassert solution('''3\n1 3 2''') == '6'\nassert solution('''3\n1 4 3 1 2''') == '6'\nassert solution('''4\n1 4 3 2 4''') == '6'\nassert solution('''10\n1 4 3 2 4 5 6 8 9 10''') == '24'"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''3''') == '3'\nassert solution('''5''') == '6'\nassert solution('''1 3 2''') == '3'\nassert solution('''1 4 3 1 2''') == '6'\nassert solution('''10''') == '3'\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1\\n1') == 1\nassert solution('1\\n2') == 2\nassert solution('1\\n3') == 3\nassert solution('1\\n4') == 4\nassert solution('1\\n5') == 5\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''3\n1 3 2''') == '3'\nassert solution('''5\n1 4 3 1 2''') == '6'\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1 2 3 4\") == \"6\"\nassert solution(\"1 3 2 4\") == \"6\"\nassert solution(\"1 2 3 4 5 6\") == \"18\"\nassert solution(\"1 3 2 4 5 6 7 8 9 10\") == \"42\"\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1 2 3') == '1'\nassert solution('1 4 3 1 2') == '3'\nassert solution('1 4 3 1 2') == '3'"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 3 2\\n\") == \"6\"\nassert solution(\"3\\n1 3 2\\n\") == \"3\"\nassert solution(\"5\\n1 4 3 1 2\\n\") == \"6\"\n\n\n\"\"\"\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"1 3 2\") == \"3\"\nassert solution(\"1 4 3 1 2\") == \"6\"\nassert solution(\"1 5 1 2 4\") == \"6\"\nassert solution(\"1 5 2 1 3 4 1 2 3 4\") == \"3\"\nassert solution(\"1 2 3 4 1 2 3 4\") == \"6\"\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1\\n3\\n2\\n') == 3\nassert solution('1\\n4\\n3\\n1\\n2') == 6\nassert solution('1\\n5\\n4\\n3\\n2') == 6\nassert solution('1\\n5\\n4\\n3\\n2\\n') == 6\nassert solution('2\\n5\\n4\\n3\\n2') == 6\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == '6'\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(\"1\") == \"1\"\nassert solution(\"a\") == \"0\"\nassert solution(\"abc\") == \"1\"\nassert solution(\"aBc\") == \"1\"\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('3\\nAaA') == '2\\n'\nassert solution('7\\nbcAAcbc') == '3\\n'\nassert solution('6\\naaBCCe') == '5\\n'\nassert solution('9\\n
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('a') == ''\nassert solution('3') == ''\nassert solution('0') == ''\nassert solution('a1a2a3a4a5a6a7a8a9a1a1a2a3a4a5a6a7a8a9') == ''\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"1\") == 1\nassert solution(\"2\") == 1\nassert solution(\"3\") == 2\nassert solution(\"4\") == 1\nassert solution(\"5\") == 1\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''1\nAaA\n''') == '2'\nassert solution('''2\nbcAAcbc\n''') == '3'\nassert solution('''3\naaBCCe\n''') == '5'\nassert solution('''4\nbcAAcbc\n''') == '5'\nassert solution('''5\naaBCCe\n''') == '6'\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == expected\n\"\"\"\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"7\") == \"5\"\nassert solution(\"6\") == \"3\"\n\n\"\"\"\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''\n3\nAaA\n''') == '2'\n\nassert solution('''\n7\nbcAAcbc\n''') == '3'\n\nassert solution('''\n6\naaBCCe\n''') == '5'\n\nassert solution('''\n8\nzAxzAxzA\n''') == '3'\n\nassert solution('''\n9\nAaAaAaAa\n''') == '4'"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1\\n1') == '1'\nassert solution('1\\n2') == '2'\nassert solution('1\\n2\\n3') == '3'\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1\\n1') == '0\\nxX'\nassert solution('2\\nXx') == '1\\nxX'\nassert solution('4\\nxxXx') == '1\\nxXx'\nassert solution('6\\nxXXxXx') == '0\\nxXXxXx'\nassert solution('8\\nxxXxxXx') == '0\\nxXXxXx'"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('4\\nxxXx') == '1\\nXxXx'\nassert solution('2\\nXX') == '1\\nxX'\nassert solution('6\\nxXXxXx') == '0\\nxXXxXx'\nassert solution('10\\nxxxxxxxxxxxxxxxxxxxx') == '0\\nxxxxxxxxxxxxxxxxxxxx'\nassert solution('1000\\nxxxxxxxxxxxxxxxxxxxx') == '0\\nxxxxxxxxxxxxxxxxxxxx'\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('xX') == 'xX'\nassert solution('xx') == 'Xx'\nassert solution('xxx') == 'XxXx'\nassert solution('xxxx') == 'XxXxXx'\nassert solution('xxxxx') == 'XxXxXxXx'\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(input()) == '(0)'\nassert solution(input()) == 'xXxXx'\nassert solution(input()) == '(0)'\nassert solution(input()) == 'xXxXx'\nassert solution(input()) == '(0)'\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('xxXx') == '1\\nXxXx'\nassert solution('xx') == '1\\nxX'\nassert solution('xXXxXx') == '0\\nxXXxXx'\nassert solution('xXXxXx') == '0\\nxXXxXx'\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''4\nxxXx\n''') == '1\\nXxXx\\n'\nassert solution('''2\nXX\n''') == '1\\nxX\\n'\nassert solution('''6\nxXXxXx\n''') == '0\\nxXXxXx\\n'\nassert solution('''5\nXxXx\n''') == '0\\nxXxX\\n'\nassert solution('''6\nXXxXXx\n''') == '0\\nxXxXx\\n'\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"\n4\nxxXx\n\n\"\"\") == \"\"\"\n1\nXxXx\n\"\"\"\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('4\\nxxXx\\n') == '1\\nXxXx'\nassert solution('2\\nXX\\n') == '1\\nxX'\nassert solution('6\\nxXXxXx\\n') == '0\\nxXXxXx'\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\n'''\n4\nxxXx\n''') == '1'\nassert solution(\n'''\n2\nXX\n''') == '1'\nassert solution(\n'''\n6\nxXXxXx\n''') == '0'\nassert solution(\n'''\n1\n1\n''') == '1'\nassert solution(\n'''\n1\n1\n''') == '0'\n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('yandex') == '0'\nassert solution('yahoo') == '1'\nassert solution('google') == 'impossible'\nassert solution('abcdefghijklmnopqrstuvwxyz') == 'impossible'\nassert solution('asdfgklsejkhfjyfasdfkjl') == 'impossible'\n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"yandex\") == '0'\nassert solution(\"yahoo\") == '1'\nassert solution(\"google\") == 'impossible'\nassert solution(\"abc\") == 'impossible'\nassert solution(\"a\") == 'impossible'\n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"yandex\", 6) == \"0\"\nassert solution(\"yahoo\", 5) == \"1\"\nassert solution(\"google\", 7) == \"impossible\"\n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('yandex') == '0'\nassert solution('yahoo') == '1'\nassert solution('google') == 'impossible'\nassert solution('microsoft') == 'impossible'\n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"yandex\") == \"0\"\nassert solution(\"yahoo\") == \"1\"\nassert solution(\"google\") == \"impossible\"\nassert solution(\"muzi\") == \"1\"\nassert solution(\"xj\") == \"impossible\"\n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('yandex') == '0'\nassert solution('yahoo') == '1'\nassert solution('google') == 'impossible'\n\n\n\"\"\"\n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('abcde') == '1'\nassert solution('abcdef') == 'impossible'\nassert solution('yandex') == '0'\nassert solution('yahoo') == '1'\nassert solution('google') == '1'\n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('x') == ''\nassert solution('xy') == ''\nassert solution('abc') == ''\nassert solution('abcdef') == ''\n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('yandex') == '0'\nassert solution('google') == '1'\nassert solution('yahoo') == 'impossible'\nassert solution('gooG') == 'impossible'\nassert solution('a') == 'impossible'\n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('yandex') == '0'\nassert solution('yahoo') == '1'\nassert solution('google') == 'impossible'\n\n\n\n\"\"\""
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"0 1\") == \"0\"\nassert solution(\"0 0\") == \"0\"\nassert solution(\"0 1 1 2\") == \"3\"\nassert solution(\"0 5 1 6 2\") == \"3\"\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\n'''3\n0 5\n2 8\n1 6''') == '1'\nassert solution(\n'''3\n0 10\n1 5\n7 15''') == '3'\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1\\n1') == '1'\nassert solution('2\\n1\\n2') == '2'\nassert solution('2\\n1\\n1') == '1'\nassert solution('3\\n2\\n2\\n1') == '3'\nassert solution('3\\n1\\n1\\n2') == '2'\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n\nfrom sys import stdin, stdout"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''\n3\n0 5\n2 8\n1 6\n''') == '1'\n\nassert solution('''\n3\n0 10\n1 5\n7 15\n''') == '3'\n\nassert solution('''\n3\n0 10\n1 5\n7 15\n1 10\n0 8\n2 7\n1 2\n''') == '4'\n\nassert solution('''\n3\n0 10\n1 5\n7 15\n1 10\n0 8\n2 7\n1 2\n1 2\n''') == '4'\n\nassert solution('''\n10\n0 10\n1 5\n7 15\n1 10\n0 8\n2 7\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''0 5\n2 8\n1 6\n''') == '1'\nassert solution('''3\n0 10\n1 5\n7 15\n''') == '3'\nassert solution('''0 10\n1 5\n7 15\n''') == '3'\nassert solution('''0 5\n2 8\n1 6\n''') == '1'\nassert solution('''0 10\n1 5\n7 15\n''') == '3'\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n3\n0 5\n2 8\n1 6\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n3\n0 10\n1 5\n7 15\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n3\n0 10\n1 5\n7 15\n\"\"\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1\\n0\\n1') == '1'\nassert solution('2\\n1\\n1') == '2'\nassert solution('3\\n0\\n1\\n1\\n1') == '3'\nassert solution('2\\n1\\n1') == '1'\nassert solution('4\\n1\\n2\\n2\\n3') == '3'\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"\\n\") == \"\"\nassert solution(\"\\n\\n\") == \"\"\nassert solution(\"\\n\\n\\n\\n\") == \"\"\nassert solution(\"\\n\\n\\n\\n\\n\") == \"\"\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''0 5\n2 8\n1 6''') == '1'\nassert solution('''0 10\n1 5\n7 15''') == '3'\n"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('2 1 3') == '3'\nassert solution('3 2 2') == '1'\nassert solution('9 9 99') == '711426616'\nassert solution('4 2 4') == '0'\n\n\"\"\""
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('2 1 3') == '3'\nassert solution('3 2 2') == '1'\nassert solution('9 9 99') == '711426616'\nassert solution('0 1 2') == '3'\nassert solution('0 0 0') == '0'\n"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('2 1 3') == '3'\nassert solution('3 2 2') == '1'\nassert solution('9 9 99') == '711426616'\n\n\"\"\"\n"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == expected\nprint(solution(stdin))\n\"\"\"\n"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"2 1 3\") == \"3\"\nassert solution(\"3 2 2\") == \"1\"\nassert solution(\"9 9 99\") == \"711426616\"\nassert solution(\"10 10 10\") == \"10\"\nassert solution(\"7 8 9\") == \"0\"\n"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''2 1 3''') == '3'\nassert solution('''3 2 2''') == '1'\nassert solution('''9 9 99''') == '711426616'\n"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == '711426616'\n"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('2 1 3') == '3'\nassert solution('3 2 2') == '1'\nassert solution('9 9 99') == '711426616'\n\n\"\"\""
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"2 1 3\") == \"3\"\nassert solution(\"3 2 2\") == \"1\"\nassert solution(\"9 9 99\") == \"711426616\"\n"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('2 1 3') == '3'\nassert solution('3 2 2') == '1'\nassert solution('9 9 99') == '711426616'\n\n\"\"\""
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == expected\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(input()) == output\n\n\"\"\"\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"\n5 1\n5 10 7 3 20\n\"\"\"\n) == '3'\n\nassert solution(\n\"\"\"\n6 2\n100 1 10 40 10 40\n\"\"\"\n) == '97'\n\nassert solution(\n\"\"\"\n3 0\n1 2 3\n\"\"\"\n) == '0'\n\nprint(solution(input()))\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('5 1\\n5 10 7 3 20\\n') == '3'\nassert solution('6 2\\n100 1 10 40 10 40\\n') == '97'\nassert solution('3 0\\n1 2 3\\n') == '0'\nassert solution('3 1\\n3\\n') == '0'\nassert solution('3 1\\n1\\n') == '0'\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('5 1') == '3'\nassert solution('6 2') == '97'\nassert solution('3 0') == '0'\nassert solution('1 2 3') == '1'\nassert solution('10 1 10 40 10 40') == '9'\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"5 1\\n5 10 7 3 20\") == \"3\"\nassert solution(\"6 2\\n100 1 10 40 10 40\") == \"97\"\nassert solution(\"3 0\\n1 2 3\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('1\\n0') == 0\nassert solution('1\\n1') == 1\nassert solution('1\\n2') == 2\nassert solution('1\\n2\\n3') == 1\nassert solution('2\\n2\\n2') == 2\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('5 1') == '3'\nassert solution('6 2') == '97'\nassert solution('3 0') == '0'\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('4 0') == '0'\nassert solution('5 0') == '0'\nassert solution('1 2') == '0'\nassert solution('5 1') == '4'\nassert solution('5 2') == '3'\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('16') == '1.6E1'\nassert solution('01.23400') == '1.234'\nassert solution('0.100') == '1E-1'\nassert solution('100.') == '1E2'\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('16') == '1.6E1'\nassert solution('01.23400') == '1.234'\nassert solution('.100') == '1E-1'\nassert solution('100') == '1E2'\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''16''') == '1.6E1'\nassert solution('''01.23400''') == '1.234'\nassert solution('''.100''') == '1E-1'\nassert solution('''100.0''') == '1E2'\nassert solution('''0.1''') == '1E-1'\n'''\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('16') == '1.6E1'\nassert solution('01.23400') == '1.234'\nassert solution('.') == '1E-1'\nassert solution('100') == '1E2'\nassert solution('1e-2') == '1E-2'\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(input()) == '1.6E1'\nassert solution(input()) == '1E-1'\nassert solution(input()) == '1E2'\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"0\") == \"0\"\nassert solution(\"0.1\") == \"1E-1\"\nassert solution(\"1.1\") == \"1.1\"\nassert solution(\"0.000001\") == \"1E-5\"\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\".100\") == \"1E-1\"\nassert solution(\"01.23400\") == \"1.2339E2\"\nassert solution(\"16\") == \"1.6E1\""
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('16') == '1.6E1'\nassert solution('01.23400') == '1.234'\nassert solution('.100') == '1E-1'\nassert solution('100.') == '1E2'\n\nprint('Test cases passed')\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('16') == '1.6E1'\nassert solution('01.23400') == '1.234'\nassert solution('.') == '1E-1'\nassert solution('.100') == '1E-2'\nassert solution('100.') == '1E2'\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('16') == '1.6E1'\nassert solution('01.23400') == '1.234'\nassert solution('.100') == '1E-1'\nassert solution('100') == '1E2'\nassert solution('') == ''\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(input('')) == ''\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdin.rstrip()\n\"\"\"\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''5 1 3 2''') == 'GBGBG'\nassert solution('''7 2 2 5''') == 'BBGBGBB'\nassert solution('''4 3 4 0''') == 'NO'\nassert solution('''1 1 1 1''') == 'BBBBBB'\nassert solution('''5 1 3 2''') == 'GBGBG'\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"5 1 3 2\") == \"GBGBG\"\nassert solution(\"7 2 2 5\") == \"BBGBGBB\"\nassert solution(\"4 3 4 0\") == \"NO\"\nassert solution(\"6 3 3 5\") == \"GGBGBBGB\"\nassert solution(\"9 9 9 9\") == \"GGBGBGBGBGBGBGBGBGB\"\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''5 1 3 2''') == 'GBGBG'\nassert solution('''7 2 2 5''') == 'BBGBGBB'\nassert solution('''4 3 4 0''') == 'NO'\nassert solution('''3 3 3 0''') == 'GBGGBGGBG'\nassert solution('''9 9 2 2''') == 'GBGBGBGBGB'\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(input(\"\")) == \"NO\"\nassert solution(input(\"\")) == \"NO\"\nassert solution(input(\"\")) == \"NO\"\nassert solution(input(\"\")) == \"NO\"\nassert solution(input(\"\")) == \"NO\"\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(input) == output\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''5 1 3 2''') == 'GBGBG'\nassert solution('''7 2 2 5''') == 'BBGBGBB'\nassert solution('''4 3 4 0''') == 'NO'\n\nprint('OK')\n\n-----\n\nNote\n\nIn the first sample the Innokentiy will be able to drink 5 cups of tea, but there are no teabags of the same color, so he can't drink them and the first cup is green. He will not be able to drink the same tea as before and will be able to drink the green and black teabags in a row.\n\nIn the second sample the Innokentiy will be able to drink 7 cups of tea, but there are two teabags of the same color and he will be able to drink them in a row, therefore he can't drink them and the answer is 'BBGBGBB'.\n\nIn the third sample the Innokentiy will be able to drink 4 cups of tea, but there are four teabags of the same color and he will be able to drink them in a row, therefore he can't drink them and the answer is 'NO'.\n''')\n"
    },
    {
        "number": 810,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1 2 3') == '1'\nassert solution('2 3 10') == '165'\nassert solution('8 1 100') == '0'\nassert solution('8 1 10') == '1'\nassert solution('8 1 100000000') == '1'\n"
    },
    {
        "number": 810,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == '5'\n\n\"\"\""
    },
    {
        "number": 810,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(input().split()) == \"165\"\nprint(solution(input().split()))\n\"\"\"\n"
    },
    {
        "number": 810,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1 3 3') == '1'\nassert solution('2 3 10') == '165'\nassert solution('1 4 5') == '7'\nassert solution('3 3 3') == '2'\nassert solution('3 3 3') == '8'\n"
    },
    {
        "number": 810,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == \"165\""
    },
    {
        "number": 810,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == '165'"
    },
    {
        "number": 810,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''1 3 3''') == '165'\nassert solution('''2 3 10''') == '165'\n"
    },
    {
        "number": 810,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == '945'\nprint(solution(stdin))"
    },
    {
        "number": 810,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == 1\n"
    },
    {
        "number": 810,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"1 3 3\") == \"1\"\nassert solution(\"2 3 10\") == \"165\"\nassert solution(\"1 2 2\") == \"1\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"1 9 9\") == \"1\"\n"
    },
    {
        "number": 811,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"4 2\") == \"7\"\nassert solution(\"6 3\") == \"8\"\nassert solution(\"0 10\") == \"0\"\nassert solution(\"4 2\") == \"7\"\nassert solution(\"0 10\") == \"0\"\n"
    },
    {
        "number": 811,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('2 3') == '7'\nassert solution('4 2') == '7'\nassert solution('6 3') == '8'\nassert solution('1 1') == '1'\nassert solution('1 1000') == '1000'\n"
    },
    {
        "number": 811,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1 2') == '7'\nassert solution('10 3') == '9'\nassert solution('100 999') == '999'\nassert solution('1000 1') == '999'\nassert solution('1000 1') == '999'\n"
    },
    {
        "number": 811,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''4 2''') == '7'\nassert solution('''6 3''') == '8'"
    },
    {
        "number": 811,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('4 2') == '7'\nassert solution('6 3') == '8'\n"
    },
    {
        "number": 811,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('4 2') == '7'\nassert solution('6 3') == '8'\nassert solution('3 4') == '7'\nassert solution('5 2') == '8'\nassert solution('1 100') == '99'\n"
    },
    {
        "number": 811,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''4 2''') == '7'\nassert solution('''6 3''') == '8'\nassert solution('''1 2''') == '2'\nassert solution('''1000 1000''') == '2000'\nassert solution('''3000 3001''') == '3999'\n\n'''"
    },
    {
        "number": 811,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1 2') == '7'\nassert solution('6 3') == '8'\nassert solution('999 99') == '999'\n\n'''\n"
    },
    {
        "number": 811,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('4 2') == '7'\nassert solution('6 3') == '8'\nassert solution('4 5') == '9'\nassert solution('5 3') == '10'\nassert solution('7 3') == '12'\n"
    },
    {
        "number": 811,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('4 2') == '7'\nassert solution('6 3') == '8'\nassert solution('1 2') == '1'\nassert solution('100 200') == '99'\nassert solution('1000000000 1000000001') == '9999999999'\n"
    },
    {
        "number": 812,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('inputs/stdin/homework/01-ai') == '4'\nassert solution('inputs/stdin/homework/01-ai2') == '1'\nassert solution('inputs/stdin/homework/01-ai3') == '-1'\nassert solution('inputs/stdin/homework/01-ai4') == '-1'\nassert solution('inputs/stdin/homework/01-ai5') == '-1'\n"
    },
    {
        "number": 812,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''5''') == '4'\nassert solution('''8''') == '1'\nassert solution('''4''') == '-1'\n\nassert solution('''8''') == '1'\nassert solution('''9''') == '-1'\n"
    },
    {
        "number": 812,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 812,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"5\\n2 6 8 7 4\\n\") == \"4\"\nassert solution(\"8\\n1 2 3 4 5 6 7 8\\n\") == \"1\"\nassert solution(\"4\\n1 2 4 8\\n\") == \"-1\"\nassert solution(\"9\\n1 2 3 4 5 6 7 8 9\\n\") == \"1\"\nassert solution(\"1\\n2 3 4 5 6 7 8 9\\n\") == \"-1\"\n\n\n\"\"\""
    },
    {
        "number": 812,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1\\n1\\n1\\n1\\n1') == '1'\nassert solution('2\\n1\\n1') == '1'\nassert solution('3\\n1\\n1') == '1'\nassert solution('4\\n1\\n1') == '1'\nassert solution('5\\n1\\n1') == '1'\n"
    },
    {
        "number": 812,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1"
    },
    {
        "number": 812,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('5\\n2 6 8 7 4') == '4'\nassert solution('8\\n1 2 3 4 5 6 7 8') == '1'\nassert solution('4\\n1 2 4 8') == '-1'\nassert solution('8\\n1 2 3 4 5 6 7 8') == '1'\nassert solution('2\\n1 2') == '-1'\n\n\n\"\"\""
    },
    {
        "number": 812,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('6\\n6 6 6 6 6') == '6'\nassert solution('6\\n1 2 3 4 5 6') == '1'\nassert solution('6\\n1 2 3 4 5') == '-1'\nassert solution('6\\n1 2 3 4 5 6 7 8 9') == '4'\nassert solution('6\\n1 2 3 4 5 6') == '-1'\n"
    },
    {
        "number": 812,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''5\n2 6 8 7 4''') == '4'\nassert solution('''8\n1 2 3 4 5 6 7 8''') == '1'\nassert solution('''4\n1 2 4 8''') == '-1'\nassert solution('''8\n1 2 3 4 5 6 7 8''') == '1'\nassert solution('''8\n1 2 3 4 5 6 7 8''') == '-1'\n"
    },
    {
        "number": 812,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == expected_output\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 813,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''4 2 3''') == '1 1 2 2'\nassert solution('''5 5 2''') == '1 1 1 1 1'\nassert solution('''1 2''') == '1 1'\nassert solution('''5 3''') == '1 1 1 1 1'\nassert solution('''2 3''') == '1 1'\n"
    },
    {
        "number": 813,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''\n4 2 3\n1 2\n2 3 4\n''') == '1 1 2 2'\nassert solution('''\n5 5 2\n3 4 1 2 5\n2 3\n''') == '1 1 1 1 1'\nassert solution('''\n5 5 2\n1 1 1 1 1\n1 1 1 1 1\n''') == '1 1 1 1 1'\nassert solution('''\n3 3 1\n1 1 1\n1 1 1\n''') == '1 1 1'\nassert solution('''\n2 2 1\n2\n2\n''') == '1 1'\n"
    },
    {
        "number": 813,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\n'''4 2 3\n1 2\n2 3 4\n''') == '1 1 2 2'\n\nassert solution(\n'''5 5 2\n3 4 1 2 5\n2 3\n''') == '1 1 1 1 1'\n"
    },
    {
        "number": 813,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''4 2 3''') == '1 1 2 2'\nassert solution('''5 5 2''') == '1 1 1 1 1'\nassert solution('''7 3 7''') == '1 1 1 1 1 1 1 1'\nassert solution('''8 7 4''') == '1 1 1 1 1 1 1 1 1'\n"
    },
    {
        "number": 813,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''4 2 3''') == '''1 1 2 2'''\nassert solution('''5 5 2''') == '''1 1 1 1 1 1'''\nassert solution('''1 1''') == '''1 1'''\nassert solution('''10 9 2''') == '''1 1 2 2'''\nassert solution('''6 8 4''') == '''1 1 1 1 1 1'''\n"
    },
    {
        "number": 813,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"1 1 2 2\") == \"1 1 2 2\"\nassert solution(\"4 2 3\") == \"1 1 2 2\"\nassert solution(\"5 5 2\") == \"1 1 1 1 1\"\nassert solution(\"5 5 2\\n3 4 1 2 5\") == \"1 1 1 1 1\"\nassert solution(\"4 2 3\\n1 2\\n2 3 4\") == \"1 1 2 2\"\n"
    },
    {
        "number": 813,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"4 2 3\") == \"1 1 2 2\"\nassert solution(\"4 2 3\\n1 2\\n2 3 4\") == \"1 1 2 2\"\nassert solution(\"1\\n2\") == \"1 1\"\nassert solution(\"1\\n1\") == \"1\"\n"
    },
    {
        "number": 813,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''4 2 3\n1 2\n2 3 4\n''') == '1 1 2 2'\nassert solution('''5 5 2\n3 4 1 2 5\n2 3\n''') == '1 1 1 1 1'\nassert solution('''2 1 2\n1\n2\n''') == '1 1'\nassert solution('''2 1 1\n1\n1\n''') == '1 1'\nassert solution('''1 2\n1\n2\n''') == '1 1'\n"
    },
    {
        "number": 813,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"4 2 3\\n1 2\\n2 3 4\\n\") == \"1 1 2 2\\n\"\n"
    },
    {
        "number": 813,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''4 2 3\n1 2\n2 3 4\n''') == '1 1 2 2'\nassert solution('''5 5 2\n3 4 1 2 5\n2 3\n''') == '1 1 1 1 1'\nassert solution('''7 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n''') == '1 1 1 1 1 1 1'\nassert solution('''8 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n''') == '1 1 1 1 1 1 1 1'\nassert solution('''10 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n''') == '1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1'\n"
    },
    {
        "number": 814,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\n\n'''\n"
    },
    {
        "number": 814,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''4\n3 2 1 2''') == '1 2 2 3'\nassert solution('''3\n2 3 8''') == '2 3 8'\nassert solution('''2\n2 3 8''') == '2 3 8'\nassert solution('''3\n2 3 1''') == '3 2 1'\nassert solution('''4\n2 3 1 2''') == '2 3 1 2'\n"
    },
    {
        "number": 814,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('3 2 1 2') == '1 2 2 3'\nassert solution('2 3 8') == '2 3 8'\nassert solution('1 2 3 4') == '1 2 3 4'\nassert solution('1 2 3') == '1 2 3'\nassert solution('1 2') == '1 2'\n"
    },
    {
        "number": 814,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\n"
    },
    {
        "number": 814,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\n"
    },
    {
        "number": 814,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('5\\n3 2 1 2\\n') == '1 2 2 3'\nassert solution('4\\n2 3 1 2\\n') == '1 2 2 3'\nassert solution('2\\n3 4\\n') == '1 2 2 3'\nassert solution('2\\n3 1\\n') == '1 2 2 3'\nassert solution('3\\n1 3 3\\n') == '1 3 3'\n"
    },
    {
        "number": 814,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''4\n3 2 1 2''') == '1 2 2 3'\nassert solution('''3\n2 3 8''') == '2 3 8'\nassert solution('''4\n2 3 8''') == '2 3 8'\nassert solution('''1\n1''') == '1'\nassert solution('''2\n1''') == '1'\n"
    },
    {
        "number": 814,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''4\n3 2 1 2''') == '1 2 2 3'\nassert solution('''3\n2 3 8''') == '2 3 8'\nassert solution('''3\n2 3 8''') == '2 3 8'\n'''"
    },
    {
        "number": 814,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\n"
    },
    {
        "number": 814,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('3\\n2 1 2') == '1 2 2 3'\nassert solution('4\\n3 2 1 2') == '2 3 2 3'\nassert solution('1\\n1') == '1'\nassert solution('2\\n1') == '1'\nassert solution('3\\n2 3') == '2 3'\n"
    },
    {
        "number": 815,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('50 30 10 10') == '50', 'Example'\nassert solution('100 50 10 21') == '-1', 'No answer'\nassert solution('50 30 10 10') == '50', 'It\\'s known that a character with size a can climb into some car with size b if and only if a \u2264 b'\nassert solution('50 30 10 10') == '-1', 'It\\'s known that a character with size a can climb into some car with size b if and only if a \u2264 b'\n\"\"\"\n\n\"\"\"\nI have no idea how to solve this problem with linear time complexity.\n\"\"\""
    },
    {
        "number": 815,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 815,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == '-1'\n\n\"\"\""
    },
    {
        "number": 815,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('50 30 10 10') == '50'\nassert solution('100 50 10 21') == '-1'\nassert solution('5 10 10 2') == '10'\nassert solution('100 50 10 21') == '-1'\nassert solution('5 100 10 21') == '-1'\n"
    },
    {
        "number": 815,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('50 30 10 10') == '50\\n30\\n10'\nassert solution('100 50 10 21') == '-1'\nassert solution('100 50 10 21') == '-1'\nassert solution('100 50 10 22') == '-1'\nassert solution('100 50 10 21') == '-1'\n"
    },
    {
        "number": 815,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(input) == output\n\"\"\"\n"
    },
    {
        "number": 815,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == '50\\n30\\n10'"
    },
    {
        "number": 815,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('50 30 10 10') == '50'\nassert solution('100 50 10 21') == '-1'\n\n\"\"\"\n"
    },
    {
        "number": 815,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('100 50 10 21') == '50 30 10'\nassert solution('50 30 10 21') == '-1'\nassert solution('50 30 10 21') == '50 30 10'\nassert solution('50 30 10 21') == '-1'\nassert solution('50 30 10 21') == '50 30 10'\n"
    },
    {
        "number": 815,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"100 50 10 21\") == \"-1\"\nassert solution(\"50 30 10 10\") == \"50\"\nassert solution(\"100 50 10 21\") == \"50\"\nassert solution(\"50 30 10 21\") == \"50\"\nassert solution(\"50 30 10 21\") == \"50\"\n"
    },
    {
        "number": 816,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('2 3\\n1 2') == '1'\nassert solution('6 1\\n5 1 2 3 4 1') == '2'\nassert solution('1 1\\n1') == '0'\n\"\"\"\n"
    },
    {
        "number": 816,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('2 1') == '1'\nassert solution('6 1') == '2'\n"
    },
    {
        "number": 816,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"2 3\\n1 2\\n\") == \"1\"\nassert solution(\"6 1\\n5 1 2 3 4 1\\n\") == \"2\"\n"
    },
    {
        "number": 816,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''2 3\n1 2''') == '1'\nassert solution('''6 1\n5 1 2 3 4 1''') == '2'\nassert solution('''1 1\n1 1''') == '0'\nassert solution('''2 1\n2''') == '1'\nassert solution('''3 1\n1 2 3''') == '1'\n"
    },
    {
        "number": 816,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"2 3\\n1 2\\n\") == \"1\"\nassert solution(\"6 1\\n5 1 2 3 4 1\\n\") == \"2\"\nassert solution(\"4 5\\n1 2 1 4\\n\") == \"1\"\nassert solution(\"6 1\\n5 1 2 3 4 1\\n\") == \"2\"\nassert solution(\"2 2\\n1 1\\n\") == \"0\"\n"
    },
    {
        "number": 816,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"2 3\\n1 2\\n\") == \"1\\n\"\nassert solution(\"6 1\\n5 1 2 3 4 1\\n\") == \"2\\n\"\n\n\n\n-----Note2-----\n\nIn the sample problem, the expression is $a_{i} \\oplus a_{j} = x$ and $x = 1$ (since all elements of the array are positive integers). However, this expression can be replaced with an equation $x \\oplus y = 1$ to simplify the solution.\n\n-----Note3-----\n\nIn case the input data is such that all elements of the array are negative integers, the answer will be zero.\n\n-----Note4-----\n\nFor large input, the time limit may be exceeded.\n\"\"\""
    },
    {
        "number": 816,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"1 2\") == \"1\"\nassert solution(\"6 1\") == \"2\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"6 1\") == \"2\"\nassert solution(\"1 2\") == \"1\"\n"
    },
    {
        "number": 816,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''1 2''') == '1'\nassert solution('''2 3''') == '0'\nassert solution('''6 1''') == '2'\nassert solution('''8 2''') == '0'\nassert solution('''1 1''') == '0'\n"
    },
    {
        "number": 816,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"4 2\") == \"1\"\nassert solution(\"6 1\") == \"2\"\nassert solution(\"6 1\") == \"2\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"2 2\") == \"0\"\n"
    },
    {
        "number": 816,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''2 3\n1 2\n''') == '1'\nassert solution('''6 1\n5 1 2 3 4 1\n''') == '2'\n\n'''"
    },
    {
        "number": 817,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n\nimport sys\nsys.setrecursionlimit(50000)\n"
    },
    {
        "number": 817,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('abcdd') == '3 abc'\nassert solution('abbcdddeaaffdfouurtytwoo') == '18 abbcd...tw'\nassert solution('abbcdddeaaffdfouurtytwoo') == '18 abbcd...tw'\nassert solution('abbcdddeaaffdfouurtytwoo') == '18 abbcd...tw'\nassert solution('abbcdddeaaffdfouurtytwoo') == '18 abbcd...tw'\n"
    },
    {
        "number": 817,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"abcdd\") == \"3 abc\"\nassert solution(\"abbcdddeaaffdfouurtytwoo\") == \"18 abbcd...tw\"\n\n\"\"\"\n\nfrom sys import stdin, stdout"
    },
    {
        "number": 817,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('ab') == 'a'\nassert solution('abc') == 'a'\nassert solution('abcdd') == 'abc'\n"
    },
    {
        "number": 817,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('abc') == 'abc'\nassert solution('abcdd') == 'abc'\nassert solution('abbcdddeaaffdfouurtytwoo') == 'abbcdddeaadfortytw'\n"
    },
    {
        "number": 817,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"abcdd\") == \"3 abc\"\nassert solution(\"abbcdddeaaffdfouurtytwoo\") == \"18 abbcd...tw\"\n'''\n"
    },
    {
        "number": 817,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"abcdd\") == \"abc\"\nassert solution(\"abbcdddeaaffdfouurtytwoo\") == \"abbcd...\"tw\"\n"
    },
    {
        "number": 817,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('abcdd') == '3 abc\\n2 bc\\n1 c\\n0 \\n1 d\\n'\nassert solution('abbcdddeaaffdfouurtytwoo') == '18 abbcd...tw\\n17 bbcdd...tw\\n16 bcddd...tw\\n15 cddde...tw\\n14 dddea...tw\\n13 ddeaa...tw\\n12 deaad...tw\\n11 eaadf...tw\\n10 aadfortytw\\n9 adfortytw\\n8 dfortytw\\n9 fdfortytw\\n8 dfortytw\\n7 fortytw\\n6 ortytw\\n5 rtytw\\n6 urtytw\\n5 rtytw\\n4 tytw\\n3 ytw\\n2 tw\\n1 w\\n0 \\n1 o'\n"
    },
    {
        "number": 817,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"abcdd\") == \"3 abc\"\nassert solution(\"abbcdddeaaffdfouurtytwoo\") == \"18 abbcd...tw\"\n\n\n\"\"\"\n\nfrom functools import lru_cache\n\n\n@lru_cache(maxsize=None)\n"
    },
    {
        "number": 817,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"abcdd\") == \"3 abc\"\nassert solution(\"abbcdddeaaffdfouurtytwoo\") == \"18 abbcd...tw\"\nassert solution(\"aabacbcd\") == \"3 aa\"\nassert solution(\"abbcdde\") == \"3 ab\"\nassert solution(\"aaa\") == \"0 a\"\n"
    },
    {
        "number": 818,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('') == '-1'\nassert solution('2') == '100'\nassert solution('3') == '300'\nassert solution('4') == '40320'\nassert solution('5') == '3125000'\n"
    },
    {
        "number": 818,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(input()) == \"-1\"\n\n\n--- Part Two ---\nNow that Willy has found his perfect number, he wants to get the perfect number with the same digits. Willy also has several different numbers that he can multiply with each other to get a perfect number, but unfortunately he has a limit. Can you help Willy to find the smallest number he can multiply with any other number to get this perfect number?\n\nFor example, if Willy's original number is 6 and he needs to multiply it with 4, he can get the perfect number (6 * 4) = 24. But if Willy's original number is 35, he cannot get the perfect number because he cannot multiply any number with 35.\n\nIf Willy's original number is 47, he can get the perfect number (47 * 4) = 112, but he cannot get the perfect number of 34, nor any number multiplied with 34. So Willy needs to try every possible number with less than 34 digits and multiply it with any number of digits to get the perfect number.\n\nHelp Willy by writing a function that can find the minimum number Willy needs to multiply with any number of digits to get a perfect number.\n\n-----Input-----\n\nA single input line contains a single integer n (1 \u2264 n \u2264 10^5).\n\n-----Output-----\n\nPrint a single integer \u2014 the answer to the problem without leading zeroes, or \"-1\" (without the quotes), if the number that meet the problem condition does not exist.\n\nIf the number Willy needs to multiply with any number of digits to get a perfect number, print the minimum number Willy needs to multiply with any number of digits to get a perfect number, without leading zeroes.\n\nIf the number Willy needs to multiply with any number of digits to get a perfect number, print the minimum number Willy needs to multiply with any number of digits to get a perfect number, without leading zeroes.\n\n\n-----Examples-----\nInput\n1\n\nOutput\n-1\n\nInput\n3\n\nOutput\n100\n\nInput\n9\n\nOutput\n10000000\n\nInput\n34\n\nOutput\n34\n\n-----Solution Explanation-----\nThe only two numbers that can multiply to get the perfect number are 1 and 2.\n\nSo the answer is 10080.\n\n\n--- Part Two ---\n\nNow Willy has found the smallest number he can multiply with any number of digits to get a perfect number. Help him by writing a function that can find the smallest number Willy needs to multiply with any number of digits to get a perfect number.\n\n-----Input-----\n\nA single input line contains a single integer n (1 \u2264 n \u2264 10^5).\n\n-----Output-----\n\nPrint a single integer \u2014 the answer to the problem without leading zeroes, or \"-1\" (without the quotes), if the number that meet the problem condition does not exist.\n\nIf Willy needs to multiply with any number of digits to get a perfect number, print the smallest number Willy needs to multiply with any number of digits to get a perfect number, without leading zeroes.\n\n\n-----Examples-----\nInput\n1\n\nOutput\n-1\n\nInput\n3\n\nOutput\n100\n\nInput\n9\n\nOutput\n10000000\n\n\n-----Solution Explanation-----\nWe can see that Willy has used three digits, so the answer is 10080.\n\n\n\n\"\"\"\n"
    },
    {
        "number": 818,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('') == -1\nassert solution('1') == -1\nassert solution('2') == -1\nassert solution('3') == -1\nassert solution('4') == -1\n"
    },
    {
        "number": 818,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 818,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1\\n') == '-1'\nassert solution('5\\n') == '10080'\n"
    },
    {
        "number": 818,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('') == '-1'\nassert solution('1') == '-1'\nassert solution('2') == '-1'\nassert solution('5') == '10080'\nassert solution('7') == '10080'\n"
    },
    {
        "number": 818,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\n'''\n1\n'''\n) == '10080'\n\nassert solution(\n'''\n5\n'''\n) == '10080'\n\nassert solution(\n'''\n4\n'''\n) == '-1'\n\nassert solution(\n'''\n4\n'''\n) == '-1'\n\nassert solution(\n'''\n5\n'''\n) == '10080'"
    },
    {
        "number": 818,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('') == '-1'\nassert solution('2') == '-1'\nassert solution('2 ') == '-1'\nassert solution('2  3') == '-1'\nassert solution('4 ') == '20'\n"
    },
    {
        "number": 818,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"-1\"\nassert solution(\"2\") == \"-1\"\nassert solution(\"5\") == \"10080\"\n\n\n'''\n"
    },
    {
        "number": 818,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''1''') == '-1'\nassert solution('''5''') == '10080'\nassert solution('''100''') == '10080'\nassert solution('''2''') == '-1'\nassert solution('''11''') == '100080'\n"
    },
    {
        "number": 819,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''5 2''') == '5'\nassert solution('''5 1''') == '-5'\n"
    },
    {
        "number": 819,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''5 2''') == '5'\nassert solution('''5 1''') == '-5'\nassert solution('''1 1''') == '-1'\nassert solution('''2 1''') == '-1'\nassert solution('''5 2''') == '5'\n"
    },
    {
        "number": 819,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1 2 3 4 5') == '5'\nassert solution('-4 -5 -3 -2 -1') == '-5'\n"
    },
    {
        "number": 819,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5\\n2\\n1\\n2') == '2'\nassert solution('3\\n2\\n1') == '2'\nassert solution('1\\n2\\n3\\n4\\n5\\n2\\n1\\n2') == '2'\nassert solution('5\\n2\\n1') == '2'\nassert solution('5\\n2\\n1\\n2') == '2'\n\n\n\"\"\"\n"
    },
    {
        "number": 819,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1\\n-1\\n') == '-1'\nassert solution('2\\n1 2') == '2'\nassert solution('3\\n-1 2 1') == '1'\nassert solution('3\\n1 -1 2') == '2'\nassert solution('5\\n1 -1 2 3 4 5') == '5'\n"
    },
    {
        "number": 819,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1 2 3 4 5\\n1 2 3 4 5\\n') == '5'\nassert solution('1 2 3 4 5\\n-4 -5 -3 -2 -1\\n') == '-5'\nassert solution('2\\n1 2\\n') == '2'\nassert solution('1 2 3 4 5\\n1 2 3 4 5\\n') == '5'\nassert solution('1 2 3 4 5\\n1 2 3 4 5\\n') == '5'\n"
    },
    {
        "number": 819,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('1 2 3 4 5\\n1 2 3 4 5\\n') == '5'\nassert solution('1\\n1\\n') == '1'\nassert solution('2 2\\n1 2\\n') == '2'\nassert solution('2 1\\n1\\n') == '1'\nassert solution('2 2\\n2 1\\n1\\n') == '2'\n"
    },
    {
        "number": 819,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1 2 3 4 5\\n2') == '5'\nassert solution('5 1\\n-4 -5 -3 -2 -1\\n-4 -5 -3 -2 -1') == '-5'\n"
    },
    {
        "number": 819,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('5 2\\n1 2 3 4 5\\n') == '5'\nassert solution('5 1\\n-4 -5 -3 -2 -1\\n') == '-5'\nassert solution('10 3\\n-7 -9 -3 -2 -5 -8 -6 -4 -1 0 1 3 4 5 6 7 8 9\\n') == '0'\n\n\n-----Answer-----"
    },
    {
        "number": 819,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1 2 3 4 5\\n5 2\\n1 2 3 4 5') == '5'\nassert solution('5 1\\n-4 -5 -3 -2 -1\\n') == '-5'\nassert solution('5 1\\n1 2 3 4 5\\n') == '5'\nassert solution('2 1\\n-1\\n-1') == '-1'\nassert solution('5 1\\n2\\n2 2\\n2 2 3\\n2 2 2 2\\n2 2 2 2\\n2 2 2 2\\n2 2 2 2\\n2 2 2 2') == '4'\n"
    },
    {
        "number": 820,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('2\\n5\\n2\\n1\\n3\\n') == '2'\nassert solution('2\\n6\\n2\\n3\\n2\\n') == '3'\nassert solution('2\\n5\\n5\\n10\\n') == '1'\nassert solution('2\\n5\\n5\\n10\\n1\\n') == '2'\nassert solution('2\\n5\\n5\\n10\\n1\\n2\\n') == '3'\n"
    },
    {
        "number": 820,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5"
    },
    {
        "number": 820,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('3\\n5\\n2\\n1\\n3') == '2'\nassert solution('2\\n5\\n5\\n10') == '3'\nassert solution('3\\n6\\n2\\n3\\n2') == '1'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 820,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('3\\n5\\n2\\n1\\n3') == '2'\nassert solution('3\\n6\\n2\\n3\\n2') == '3'\nassert solution('2\\n5\\n5\\n10') == '1'\nassert solution('2\\n5\\n5\\n10\\n5') == '1'\nassert solution('2\\n5\\n5\\n10\\n5\\n5') == '1'\n"
    },
    {
        "number": 820,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''3\n5\n2\n1\n3\n''') == '2'\nassert solution('''3\n6\n2\n3\n2\n''') == '3'\nassert solution('''2\n5\n5\n10\n''') == '1'\n'''\nassert solution('''1\n2\n''') == '1'\nassert solution('''1\n3\n1\n2\n1\n''') == '1'\n"
    },
    {
        "number": 820,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdin\n\"\"\"\n"
    },
    {
        "number": 820,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == expected\nprint(solution(stdin))\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 820,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('2\\n5\\n1\\n3\\n2') == '2'\nassert solution('2\\n5\\n5\\n10') == '3'\nassert solution('1\\n6\\n2\\n3\\n2') == '1'\nassert solution('2\\n5\\n5\\n10') == '3'\nassert solution('3\\n6\\n2\\n3\\n2') == '1'\n\n\n\n-----"
    },
    {
        "number": 820,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('3\\n5\\n2\\n1\\n3\\n') == '2\\n'\nassert solution('3\\n6\\n2\\n3\\n2\\n') == '3\\n'\nassert solution('2\\n5\\n5\\n10\\n') == '1\\n'\nassert solution('3\\n7\\n2\\n3\\n2\\n') == '3\\n'\n\n\n\n\"\"\"\n"
    },
    {
        "number": 820,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('3\\n5\\n2\\n1\\n3') == '2'\nassert solution('3\\n6\\n2\\n3\\n2') == '3'\nassert solution('2\\n5\\n5\\n10') == '1'\nassert solution('2\\n5\\n5\\n10\\n10') == '2'\nassert solution('2\\n5\\n5\\n10\\n10\\n10') == '3'\n"
    },
    {
        "number": 821,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1 1 2 1 2') == 'First'\nassert solution('3 3 1 1 1') == 'Second'\nassert solution('4 5 3 1 5') == 'Friendship'\nassert solution('5 1 2 1 2') == 'First'\nassert solution('5 1 1 1 1') == 'Second'\n"
    },
    {
        "number": 821,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('1 2 1 2') == 'First'\nassert solution('3 3 1 1 1') == 'Second'\nassert solution('4 5 3 1 5') == 'Friendship'\nassert solution('2 3 1 3 4') == 'Second'\nassert solution('1 1 1 1 1') == 'First'\n"
    },
    {
        "number": 821,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"5 1 2 1 2\") == \"First\"\nassert solution(\"3 3 1 1 1\") == \"Second\"\nassert solution(\"4 5 3 1 5\") == \"Friendship\"\nassert solution(\"4 5 3 3 4\") == \"Friendship\"\nassert solution(\"4 5 1 2 1\") == \"First\"\n"
    },
    {
        "number": 821,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('5 1 2 1 2') == 'First'\nassert solution('3 3 1 1 1') == 'Second'\nassert solution('4 5 3 1 5') == 'Friendship'\nassert solution('1 1 1 1 1') == 'Friendship'\nassert solution('1 1 1 1') == 'Friendship'\n"
    },
    {
        "number": 821,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1 2 1 2 1') == 'First'\nassert solution('3 3 1 1 1') == 'Second'\nassert solution('4 5 3 1 5') == 'Friendship'\nassert solution('1 2 1 2 1') == 'First'\n"
    },
    {
        "number": 821,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''5 1 2 1 2''') == 'First'\nassert solution('''3 3 1 1 1''') == 'Second'\nassert solution('''4 5 3 1 5''') == 'Friendship'\nassert solution('''2 2 1 2 2''') == 'Friendship'\nassert solution('''1 1 1 1 1''') == 'Friendship'\n"
    },
    {
        "number": 821,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('5 1 2 1 2') == 'First'\nassert solution('3 3 1 1 1') == 'Second'\nassert solution('4 5 3 1 5') == 'Friendship'\n\n\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 821,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('5 1 2 1 2') == 'First'\nassert solution('3 3 1 1 1') == 'Second'\nassert solution('4 5 3 1 5') == 'Friendship'"
    },
    {
        "number": 821,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\n\"5 1 2 1 2\") == \"First\"\nassert solution(\n\"3 3 1 1 1\") == \"Second\"\nassert solution(\n\"4 5 3 1 5\") == \"Friendship\""
    },
    {
        "number": 821,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''5 1 2 1 2''') == 'First'\nassert solution('''3 3 1 1 1''') == 'Second'\nassert solution('''4 5 3 1 5''') == 'Friendship'\n'''\n"
    },
    {
        "number": 822,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1 1 10') == '10'\nassert solution('2 3 9') == '1'\nassert solution('2 3 5') == '1'\nassert solution('1 2 5') == '10'\n"
    },
    {
        "number": 822,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('1 2 5') == '10'\nassert solution('2 3 9') == '1'\nassert solution('2 3 9') == '1'\nassert solution('10 10 10') == '0'\nassert solution('1 10 9') == '10'\n"
    },
    {
        "number": 822,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1 1 10') == '10'\nassert solution('2 2 5') == '1'\nassert solution('2 3 9') == '1'\nassert solution('3 3 9') == '2'\nassert solution('6 6 9') == '3'\n"
    },
    {
        "number": 822,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1 1 10') == 10\nassert solution('1 2 5') == 2\nassert solution('2 3 9') == 1\nassert solution('10 5 10') == 0\nassert solution('8 7 6') == 1\n"
    },
    {
        "number": 822,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1 1 10') == '10'\nassert solution('1 2 5') == '2'\nassert solution('2 3 9') == '1'\n\n\n\n\"\"\"\n"
    },
    {
        "number": 822,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1 1 10') == '10'\nassert solution('1 2 5') == '2'\nassert solution('2 3 9') == '1'\nassert solution('2 2 6') == '2'\nassert solution('1 1 2') == '1'\n"
    },
    {
        "number": 822,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('1 1 10') == '10'\nassert solution('2 2 5') == '1'\nassert solution('3 3 9') == '1'\n\"\"\"\n"
    },
    {
        "number": 822,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1 1 10') == '10'\nassert solution('1 2 5') == '2'\nassert solution('2 3 9') == '1'"
    },
    {
        "number": 822,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1 1 10') == 10\nassert solution('2 2 5') == 2\nassert solution('2 3 9') == 1"
    },
    {
        "number": 822,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"1 1 10\") == \"10\"\nassert solution(\"1 2 5\") == \"2\"\nassert solution(\"2 3 9\") == \"1\"\nassert solution(\"2 3 9\") == \"1\"\nassert solution(\"2 3 1\") == \"2\"\n"
    },
    {
        "number": 823,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('0 0') == '0'\nassert solution('1 0') == '0'\nassert solution('0 1') == '0'\nassert solution('-1 -1') == '0'\n"
    },
    {
        "number": 823,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"0 0\") == \"0\"\nassert solution(\"1 0\") == \"0\"\nassert solution(\"0 1\") == \"0\"\nassert solution(\"-1 -1\") == \"0\"\nassert solution(\"0 -1\") == \"0\"\n"
    },
    {
        "number": 823,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('0 0') == '0'\nassert solution('1 0') == '0'\nassert solution('0 1') == '2'\nassert solution('-1 -1') == '3'\nassert solution('0 1') == '3'\n"
    },
    {
        "number": 823,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 823,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('0 0') == '0'\nassert solution('1 0') == '0'\nassert solution('0 1') == '0'\nassert solution('1 -1') == '0'\nassert solution('-1 -1') == '0'\n"
    },
    {
        "number": 823,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('0 0') == '0'\nassert solution('1 0') == '0'\nassert solution('0 1') == '0'\nassert solution('1 1') == '0'\nassert solution('1 1') == '1'\n"
    },
    {
        "number": 823,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('0 0') == '0'\nassert solution('1 0') == '0'\nassert solution('0 1') == '2'\nassert solution('-1 -1') == '3'\nassert solution('1 1') == '2'\n"
    },
    {
        "number": 823,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('0 0') == '0'\nassert solution('1 0') == '0'\nassert solution('0 1') == '2'\nassert solution('-1 -1') == '3'\nassert solution('0 0') == '0'\n"
    },
    {
        "number": 823,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"0 0\") == \"0\"\nassert solution(\"1 0\") == \"0\"\nassert solution(\"0 1\") == \"0\"\nassert solution(\"-1 -1\") == \"3\"\nassert solution(\"0 -1\") == \"0\"\n"
    },
    {
        "number": 823,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 824,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\")())()\") == '6'\nassert solution(\"(()())\") == '7'\nassert solution(\")))\") == '0'\nassert solution(\")(\") == '0'\nassert solution(\"(()\") == '0'\n"
    },
    {
        "number": 824,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"((()))\") == 6\nassert solution(\"((()))\") == 6\nassert solution(\"(()())\") == 7\nassert solution(\"()()()\") == 7\nassert solution(\"()())()\") == 7\n"
    },
    {
        "number": 824,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('(()()') == '6'\nassert solution('))((') == '0'\nassert solution('()()())') == '7'\nassert solution('))(()())') == '0'\nassert solution('))') == '0'\n"
    },
    {
        "number": 824,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('(())') == '6'\nassert solution('()()()') == '7'\nassert solution(')))') == '0'\nassert solution('(()()())') == '0'\nassert solution('))(') == '0'\n"
    },
    {
        "number": 824,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"((()))\") == \"6\"\nassert solution(\"()()()\") == \"7\"\nassert solution(\"())()())\") == \"0\"\nassert solution(\")(()))\") == \"0\"\nassert solution(\"())(()))\") == \"0\"\n"
    },
    {
        "number": 824,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"((()))\") == \"6\"\nassert solution(\"()()()\") == \"7\"\nassert solution(\")(\") == \"0\"\nassert solution(\")))\") == \"0\"\nassert solution(\"(()\") == \"0\"\n"
    },
    {
        "number": 824,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('()()') == '6'\nassert solution('(()())') == '7'\nassert solution('((()))') == '0'\nassert solution('())()()') == '6'\nassert solution('())()()') == '7'\n"
    },
    {
        "number": 824,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"((()))\") == \"6\"\nassert solution(\"()()()\") == \"7\"\nassert solution(\")()())\") == \"0\"\nassert solution(\"()(\") == \"0\"\nassert solution(\"()\") == \"0\"\n"
    },
    {
        "number": 824,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\")())()\") == \"6\"\nassert solution(\"()()()\") == \"7\"\nassert solution(\")()()\") == \"0\"\nassert solution(\"()(())()\") == \"0\"\nassert solution(\")))\") == \"0\"\n\n\n\n'''\n"
    },
    {
        "number": 824,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('(()())') == '6'\nassert solution('()()()') == '7'\nassert solution('(()()(()))') == '0'\nassert solution(')()())') == '0'\nassert solution('(()((())()))') == '0'\n"
    },
    {
        "number": 825,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 825,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('24') == '3'\nassert solution('5') == '1'\nassert solution('10') == '0'\nassert solution('100') == '2'\nassert solution('1000') == '3'\n"
    },
    {
        "number": 825,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('4') == '2'\nassert solution('12') == '3'\nassert solution('24') == '3'\nassert solution('4096') == '16'\nassert solution('1248') == '7'\n"
    },
    {
        "number": 825,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('24') == '3'\nassert solution('34') == '2'\nassert solution('48') == '3'\nassert solution('56') == '1'\nassert solution('76') == '3'\n"
    },
    {
        "number": 825,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"24\") == \"3\"\nassert solution(\"50\") == \"4\"\nassert solution(\"10\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 825,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(solution.read(stdin)) == '3'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 825,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"24\") == \"3\""
    },
    {
        "number": 825,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(8) == 3\nassert solution(5) == 2\nassert solution(15) == 3\nassert solution(15) == 3\nassert solution(10) == 2\n"
    },
    {
        "number": 825,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('4') == '2'\nassert solution('5') == '2'\nassert solution('6') == '3'\nassert solution('7') == '4'\n"
    },
    {
        "number": 825,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(1) == '1'\nassert solution(2) == '1'\nassert solution(3) == '3'\nassert solution(4) == '3'\nassert solution(5) == '3'\n"
    },
    {
        "number": 826,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(input()) == output()\n"
    },
    {
        "number": 826,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(input()) == output\n\"\"\"\n"
    },
    {
        "number": 826,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"4\") == \"3\"\nassert solution(\"10\") == \"8\"\nassert solution(\"100\") == \"20\"\nassert solution(\"1000\") == \"100\"\nassert solution(\"10000\") == \"1000\"\n"
    },
    {
        "number": 826,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == '4'\n\"\"\"\n"
    },
    {
        "number": 826,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"5\") == \"3\"\nassert solution(\"3\") == \"1\"\nassert solution(\"2\") == \"0\"\nassert solution(\"1\") == \"0\"\nassert solution(\"0\") == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 826,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('4') == '3'\nassert solution('5') == '4'\nassert solution('6') == '5'\nassert solution('7') == '6'\nassert solution('8') == '7'\n"
    },
    {
        "number": 826,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''4\n''') == '3'\nassert solution('''6\n''') == '6'\nassert solution('''2\n''') == '2'\nassert solution('''5\n''') == '5'\nassert solution('''13\n''') == '15'\n"
    },
    {
        "number": 826,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(input()) == stdout()\n"
    },
    {
        "number": 826,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('4\\n') == '3'\nassert solution('10\\n') == '31'\nassert solution('100\\n') == '158'\nassert solution('200\\n') == '214'\nassert solution('5000\\n') == '2038'\n\n\"\"\""
    },
    {
        "number": 826,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\n'''\n1\n'''\n) == '1'\nassert solution(\n'''\n2\n'''\n) == '2'\nassert solution(\n'''\n10\n'''\n) == '5'\nassert solution(\n'''\n100\n'''\n) == '50'\nassert solution(\n'''\n3\n'''\n) == '1'\n"
    },
    {
        "number": 827,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''\n4\n1011\n''') == '9999999999'\n'''\nassert solution('''\n5\n1011\n''') == '1'\n'''\nassert solution('''\n6\n1011\n''') == '0'\n'''\nassert solution('''\n1\n1\n''') == '1'\n'''\n"
    },
    {
        "number": 827,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(input()) == output()\n"
    },
    {
        "number": 827,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\n'''\n4\n1011\n'''\n    ) == '9999999999'\n\nassert solution(\n'''\n11\n0110\n'''\n    ) == '1'\n"
    },
    {
        "number": 827,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('11') == '1'\nassert solution('1011') == '9999999999'\nassert solution('11101') == '99999999999'\nassert solution('10101010101') == '99999999999999'\n"
    },
    {
        "number": 827,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"1011\\n\") == \"9999999999\"\n\"\"\"\n"
    },
    {
        "number": 827,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('\\n'.join([\n    '4',\n    '1011',\n])) == '9999999999'\n"
    },
    {
        "number": 827,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101"
    },
    {
        "number": 827,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('\\n'.join(['4',\n    '1011',\n    ])) == '9999999999'\nprint('ok')\n\nprint(solution('\\n'.join(['5',\n    '101',\n    ])))\nprint('ok')\n\nprint(solution('\\n'.join(['10',\n    '101',\n    ])))\nprint('ok')\n\nprint(solution('\\n'.join(['10',\n    '110110110',\n    ])))\nprint('ok')\n\nprint(solution('\\n'.join(['10',\n    '110110101',\n    ])))\nprint('ok')\n\nprint(solution('\\n'.join(['10',\n    '1111110111',\n    ])))\nprint('ok')\n\nprint(solution('\\n'.join(['10',\n    '10101',\n    ])))\nprint('ok')\n\nprint(solution('\\n'.join(['10',\n    '101',\n    ])))\nprint('ok')\n\nprint(solution('\\n'.join(['10',\n    '101',\n    ])))\nprint('ok')\n\nprint(solution('\\n'.join(['10',\n    '10101',\n    ])))\nprint('ok')\n\nprint(solution('\\n'.join(['10',\n    '101010101',\n    ])))\nprint('ok')\n\nprint(solution('\\n'.join(['10',\n    '10101010101',\n    ])))\nprint('ok')\n\nprint(solution('\\n'.join(['10',\n
    },
    {
        "number": 827,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(sample_input) == sample_output\n\"\"\"\n\n\"\"\"\nThe number of times 110 occurs in the concatenation of 3 copies of 110 is 9999999999.\n\nThe number of times 1011 occurs in the concatenation of 3 copies of 110 is 9999999999.\n\nThe number of times 0110 occurs in the concatenation of 3 copies of 110 is 9999999999.\n\"\"\"\n\nN = int(input())\nT = input()\nT = T * 10000\n\n\"\"\"\nSince T is a substring, we can use the formula T * (N - len(T)) = T * (N - len(T)) + T\n\nThe extra T is because we add the \"X\" to the end of T, i.e., T * (N - len(T)) = T * (N - len(T)) + X.\n\nThe total number of times T occurs is T * (N - len(T)) + T.\n\n\"\"\"\n\nprint(T * (N - len(T)) + T)\n"
    },
    {
        "number": 827,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1110111100') == '1110111100'\nassert solution('10111') == '1110111100'\nassert solution('111111011111111111') == '1110111100'\nassert solution('10011') == '1110111100'\nassert solution('1010') == '1110111100'\n"
    },
    {
        "number": 828,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(input()) == output()\n"
    },
    {
        "number": 828,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('3 2') == '1'\nassert solution('3 3') == '2'\nassert solution('3 4') == '2'\nassert solution('3 2') == '1'\nassert solution('1 1') == '1'\n"
    },
    {
        "number": 828,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('3 2\\n2 0 2') == '1'\nassert solution('5 3\\n1 0 0 4 1') == '2'\nassert solution('10 15\\n1 0 0 2 2 1 2 3 0 3 3 0 3 2 2 0 2 3 2 0 3 1 2 0 3 0 3 0') == '1'\nassert solution('10 15\\n1 0 0 2 2 1 2 3 0 3 3 0 3 2 2 0 2 3 2 0 3 1 2 0 3 0 3 0') == '2'\nassert solution('10 15\\n1 0 0 2 2 1 2 3 0 3 3 0 3 2 2 0 2 3 2 0 3 1 2 0 3 0 3 0') == '3'\n"
    },
    {
        "number": 828,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 828,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n\nn, s = map(int, stdin.split())\nchief = stdin.split()[1]"
    },
    {
        "number": 828,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('3 2\\n2 0 2\\n') == '1'\nassert solution('5 3\\n1 0 0 4 1\\n') == '2'\nassert solution('5 3\\n1 2 0 2\\n') == '3'\nassert solution('5 3\\n1 0 0 4 1\\n') == '2'\nassert solution('5 3\\n1 2 0 2\\n') == '3'\n"
    },
    {
        "number": 828,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('2 3\\n2 0 2\\n') == '1'\nassert solution('3 1\\n1 0 0\\n') == '2'\nassert solution('5 3\\n1 0 0 4 1\\n') == '2'\n\n\"\"\"\n"
    },
    {
        "number": 828,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"3 2\\n2 0 2\") == \"1\"\nassert solution(\"5 3\\n1 0 0 4 1\") == \"2\"\nassert solution(\"5 3\\n1 0 0 4 1\") == \"2\"\nassert solution(\"5 3\\n1 0 0 4 1\") == \"2\"\nassert solution(\"5 3\\n1 0 0 4 1\") == \"2\"\n"
    },
    {
        "number": 828,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == expected\n\"\"\"\n\nfrom sys import stdin,stdout\n"
    },
    {
        "number": 828,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1\\n1') == '1'\nassert solution('1\\n2') == '2'\nassert solution('1\\n3') == '2'\nassert solution('2\\n1') == '2'\nassert solution('2\\n2') == '3'\n"
    },
    {
        "number": 829,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('110010') == '3'\nassert solution('1') == '1'\nassert solution('111') == '0'\nassert solution('101') == '1'\nassert solution('100001') == '1'\n"
    },
    {
        "number": 829,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('010111') == ''\nassert solution('101111') == '2'\nassert solution('1110011') == '3'\nassert solution('1010111') == '2'\n"
    },
    {
        "number": 829,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(input('')) == output('')\n\"\"\"\n"
    },
    {
        "number": 829,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''1\n1\n''') == '1'\nassert solution('''2\n10\n''') == '2'\nassert solution('''6\n100011\n''') == '2'\n"
    },
    {
        "number": 829,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''1\n1''') == '1'\nassert solution('''1\n0''') == '1'\nassert solution('''1\n1''') == '1'\nassert solution('''2\n10''') == '2'\nassert solution('''2\n01''') == '2'\n"
    },
    {
        "number": 829,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"110111\") == 3\nassert solution(\"00100\") == 2\nassert solution(\"101\") == 1\nassert solution(\"011110\") == 1\nassert solution(\"1111110\") == 1\n"
    },
    {
        "number": 829,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''1\n1''') == '1'\nassert solution('''2\n11''') == '2'\nassert solution('''3\n111''') == '2'\nassert solution('''4\n1111''') == '2'\nassert solution('''5\n1000001''') == '3'\n"
    },
    {
        "number": 829,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('111111') == 3\nassert solution('1001101') == 2\nassert solution('100100') == 0\nassert solution('100000001') == 2\nassert solution('11011010') == 4\n"
    },
    {
        "number": 829,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''1''') == '1'\nassert solution('''11''') == '11'\nassert solution('''1 0''') == '1'\nassert solution('''11 0''') == '11'\nassert solution('''1 1''') == '0'\n"
    },
    {
        "number": 829,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1') == '1'\nassert solution('1 1') == '1 1'\nassert solution('0 1 1 0') == '0 1 1'\nassert solution('101') == '1'\nassert solution
    },
    {
        "number": 830,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n\nimport sys\nfrom typing import List, Dict\n\n\nclass Tower:\n    \"\"\"Represents a tower on a number line.\"\"\"\n\n    def __init__(self, height: int) -> None:\n        \"\"\"\n        Constructs a new tower with the given height.\n        \"\"\"\n\n        self.height = height\n\n    def __repr__(self) -> str:\n        \"\"\"\n        Returns a string representation of this tower.\n        \"\"\"\n\n        return \"Tower({})\".format(self.height)\n\n    def __eq__(self, other: object) -> bool:\n        \"\"\"\n        Returns whether this tower is equal to the other.\n        \"\"\"\n\n        return isinstance(other, Tower) and self.height == other.height\n\n    def __lt__(self, other: object) -> bool:\n        \"\"\"\n        Returns whether this tower is less than the other.\n        \"\"\"\n\n        return self.height < other.height\n"
    },
    {
        "number": 830,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == '0 2'\nassert solution(stdin) == '1 1'\nassert solution(stdin) == '3 2'\nassert solution(stdin) == '1 3'\nassert solution(stdin) == '1 2'\n"
    },
    {
        "number": 830,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == '6 2'\n\nIn the second sample you can do the following operations:\n\nmove cube from second tower to third tower\nmove cube from second tower to first tower\nmove cube from first tower to second tower\nmove cube from second tower to third tower\nmove cube from first tower to second tower\nmove cube from second tower to third tower\nmove cube from third tower to second tower\nmove cube from third tower to first tower\nmove cube from first tower to second tower\nmove cube from second tower to third tower\nmove cube from third tower to second tower\nmove cube from second tower to first tower\nmove cube from first tower to third tower\nmove cube from third tower to second tower\nmove cube from second tower to first tower\nmove cube from first tower to third tower\nmove cube from third tower to second tower\nmove cube from second tower to first tower\nmove cube from first tower to third tower\nmove cube from third tower to second tower\nmove cube from second tower to first tower\nmove cube from first tower to third tower\nmove cube from third tower to second tower\nmove cube from second tower to first tower\nmove cube from first tower to third tower\nmove cube from third tower to second tower\nmove cube from second tower to first tower\nmove cube from first tower to third tower\nmove cube from third tower to second tower\nmove cube from second tower to first tower\nmove cube from first tower to third tower\nmove cube from third tower to second tower\nmove cube from second tower to first tower\nmove cube from first tower to third tower\nmove cube from third tower to second tower\nmove cube from second tower to first tower\nmove cube from first tower to third tower\nmove cube from third tower to second tower\nmove cube from second tower to first tower\nmove cube from first tower to third tower\nmove cube from third tower to second tower\nmove cube from second tower to first tower\nmove cube from first tower to third tower\nmove cube from third tower to second tower\nmove cube from second tower to first tower\nmove cube from first tower to third tower\nmove cube from third tower to second tower\nmove cube from second tower to first tower\nmove cube from first tower to third tower\nmove cube from third tower to second tower\nmove cube from second tower to first tower\nmove cube from first tower to third tower\nmove cube from third tower to second tower\nmove cube from second tower to first tower\nmove cube from first tower to third tower\nmove cube from third tower to second tower\nmove cube from second tower to first tower\nmove cube from first tower to third tower\nmove cube from third tower to second tower\nmove cube from second tower to first tower\nmove cube from first tower to third tower\nmove cube from third tower to second tower\nmove cube from second tower to first tower\nmove cube from first tower to third tower\nmove cube from third tower to second tower\nmove cube from second tower to first tower\nmove cube from first tower to third tower\nmove cube from third tower to second tower\nmove cube from second tower to first tower\nmove cube from first tower to third tower\nmove cube from third tower to second tower\nmove cube from second tower to first tower\nmove cube from first tower to third tower\nmove cube from third tower to second tower\nmove cube from second tower to first tower\nmove cube from first tower to third tower\nmove cube from third tower to second tower\nmove cube from second tower to first tower\nmove cube from first tower to third tower\nmove cube from third tower to second tower\nmove cube from second tower to first tower\nmove cube from first tower to third tower\nmove cube from third tower to second tower\nmove cube from second tower to first tower\nmove cube from first tower to third tower\nmove cube from third tower to second tower\nmove cube from second tower to first tower\nmove cube from first tower to third tower\nmove cube from third tower to second tower\nmove cube from second tower to first tower\nmove cube from first tower to third tower\nmove cube from third tower to second tower\nmove cube from second tower to first tower\nmove cube from first tower to third tower\nmove cube from third tower to second tower\nmove cube from second tower to first tower\nmove cube from first tower to third tower\nmove cube from third tower to second tower\nmove cube from second tower to first tower\nmove cube from first tower to third tower\nmove cube from third tower to second tower\nmove cube from second tower to first tower\nmove cube from first tower to third tower\nmove cube from third tower to second tower\nmove cube from second tower to first tower\nmove cube from first tower to third tower\nmove cube from third tower to second tower\nmove cube from second tower to first tower\nmove cube from first tower to third tower\nmove cube from third tower to second tower\nmove cube from second tower to first tower\nmove cube from first tower to third tower\nmove cube from third tower to second tower\nmove cube from second tower to first tower\nmove cube from first tower to third tower\nmove cube from third tower to second tower\nmove cube from second tower to first tower\nmove cube from first tower to third tower\nmove cube from third tower to second tower\nmove cube from second tower to first tower\nmove cube from first tower to third tower\nmove cube from third tower to second tower\nmove cube from second tower to first tower\nmove cube from first tower to third tower\nmove cube from third tower to second tower\nmove cube from second tower to first tower\nmove cube from first tower to third tower\nmove cube from third tower to second tower\nmove cube from second tower to first tower\nmove cube from first tower to third tower\nmove cube from third tower to second tower\nmove cube from second tower to first tower\nmove cube from first tower to third tower\nmove cube from third tower to second tower\nmove cube from second tower to first tower\nmove cube from first tower to third tower\nmove cube from third tower to second tower\nmove cube from second tower to first tower\nmove cube from first tower to third tower\nmove cube from third tower to second tower\nmove cube from second tower to first tower\nmove cube from first tower to third tower\nmove cube from third tower to second tower\nmove cube from second tower to first tower\nmove cube from first tower to third tower\nmove cube from third tower to second tower\nmove cube from second tower to first tower\nmove cube from first tower to third tower\nmove cube from third tower to second tower\nmove cube from second tower to first tower\nmove"
    },
    {
        "number": 830,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == answer_stdout\n\n\"\"\"\n"
    },
    {
        "number": 830,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"0\") == \"0 0\"\nassert solution(\"0 0\") == \"0 0\"\nassert solution(\"1 1\") == \"0 0\"\nassert solution(\"1 2\") == \"0 0\"\n"
    },
    {
        "number": 830,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('inputs/95.in') == '0 2'\n\n\n\"\"\"\n"
    },
    {
        "number": 830,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"5 3\n8 3 2 6 3\"\"\"\n) == \"\"\"3 3\n1 3\n1 2\n1 3\"\"\"\n\nassert solution(\n\"\"\"5 1\n8 8 8 8 8\"\"\"\n) == \"\"\"3 2\n1 1\n1 2\n1 3\"\"\"\n"
    },
    {
        "number": 830,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('3 4') == '1 1'\nassert solution('5 3') == '3 2'\nassert solution('5 4') == '1 3'\nassert solution('5 10') == '1'\nassert solution('1 10') == '0'\n"
    },
    {
        "number": 830,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(input_data) == output_data\n'''\n"
    },
    {
        "number": 830,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('3 2\\n5 8 5\\n') == '0 2\\n2 1\\n2 3\\n'\nassert solution('3 4\\n2 2 4\\n') == '1 1\\n3 2\\n1 3\\n'\nassert solution('5 3\\n8 3 2 6 3\\n') == '3 3\\n1 3\\n1 2\\n1 3\\n'\nassert solution('3 3\\n3 3 3 3\\n') == '0 0\\n0 0\\n0 0\\n'\n\n\n\"\"\"\n"
    },
    {
        "number": 831,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''bbaze\n3\nbzb 2\naeb 3\nba 10''') == \"8\"\nassert solution('''abacaba\n4\naba 2\nbcc 1\ncaa 2\nbbb 5''') == \"18\"\nassert solution('''xyz\n4\naxx 8\nza 1\nefg 4\nt 1''') == \"-1\"\n'''\n"
    },
    {
        "number": 831,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 831,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n"
    },
    {
        "number": 831,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''bbaze\n3\nbzb 2\naeb 3\nba 10\n''') == '8'\n\nassert solution('''abacaba\n4\naba 2\nbcc 1\ncaa 2\nbbb 5\n''') == '18'\n\nassert solution('''xyz\n4\naxx 8\nza 1\nefg 4\nt 1\n''') == '-1'\n\nprint('passed')\n\"\"\""
    },
    {
        "number": 831,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('bbaze') == 8\nassert solution('abacaba') == 18\nassert solution('xyz') == -1\n\"\"\"\n\nimport sys"
    },
    {
        "number": 831,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''bbaze\n3\nbzb 2\naeb 3\nba 10\n''') == '8'\n\nassert solution('''abacaba\n4\naba 2\nbcc 1\ncaa 2\nbbb 5\n''') == '18'\n\nassert solution('''xyz\n4\naxx 8\nza 1\nefg 4\nt 1\n''') == '-1'\n'''\nfrom functools import reduce\n"
    },
    {
        "number": 831,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('bbaze') == 8\nassert solution('abacaba') == 18\nassert solution('xyz') == -1\nassert solution('aabaeebaaa') == 17"
    },
    {
        "number": 831,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('bbaze') == 8\nassert solution('abacaba') == 18\nassert solution('xyz') == -1\n\"\"\"\n"
    },
    {
        "number": 831,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''bbaze\n3\nbzb 2\naeb 3\nba 10\n''') == \"8\"\n\nassert solution('''abacaba\n4\naba 2\nbcc 1\ncaa 2\nbbb 5\n''') == \"18\"\n\nassert solution('''xyz\n4\naxx 8\nza 1\nefg 4\nt 1\n''') == \"-1\"\n'''\n"
    },
    {
        "number": 831,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''bbaze''') == '8'\nassert solution('''abacaba''') == '18'\nassert solution('''xyz''') == '-1'\n\n\n\n-----Solution-----\n\nfrom sys import stdin"
    },
    {
        "number": 832,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1 2\\n2 4\\n3 4\\n4 2\\n') == '1'\nassert solution('2 4\\n1 2\\n2 4\\n3 4\\n') == '5'\nassert solution('1 2\\n2 4\\n3 4\\n4 2\\n') == '0'\nassert solution('1 1\\n2 1\\n1 2\\n') == '0'\nassert solution('1 1\\n1 1\\n1 1\\n') == '1'\n"
    },
    {
        "number": 832,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''3\n1 2\n2 4\n3 4''') == '1'\nassert solution('''4\n100 42\n42 100\n5 42\n100 5''') == '5'\nassert solution('''2\n1 2\n1 2''') == '0'\nassert solution('''100 42\n42 100\n5 42''') == '0'\nassert solution('''3\n3 4\n4 2\n2 1''') == '0'\n"
    },
    {
        "number": 832,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('3') == '1'\nassert solution('1 2') == '0'\nassert solution('2 4') == '1'\nassert solution('3 4') == '1'\nassert solution('4 2') == '2'\n"
    },
    {
        "number": 832,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''1 2\n2 4\n3 4''') == '1'\nassert solution('''100 42\n42 100\n5 42\n100 5''') == '5'\nassert solution('''1 2\n1 2\n''') == '0'"
    },
    {
        "number": 832,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n"
    },
    {
        "number": 832,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('2') == '0'\nassert solution('3') == '1'\nassert solution('4') == '1'\nassert solution('5') == '2'\nassert solution('6') == '1'\n"
    },
    {
        "number": 832,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''\n3\n1 2\n2 4\n3 4\n''') == '1'\n\nassert solution('''\n4\n100 42\n42 100\n5 42\n100 5\n''') == '5'\n\nassert solution('''\n2\n1 2\n1 2\n''') == '0'\n\nassert solution('''\n2\n1 2\n3 4\n''') == '0'\n\nassert solution('''\n3\n1 1\n2 2\n3 3\n''') == '0'"
    },
    {
        "number": 832,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1 2\\n2 4') == '1'\nassert solution('2 4\\n1 2\\n2 4') == '1'\nassert solution('3 4\\n1 2\\n2 4\\n3 4') == '0'\nassert solution('1 2\\n2 4\\n2 4') == '0'\nassert solution('1 2\\n2 1') == '0'\n"
    },
    {
        "number": 832,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''1 2\n2 4\n3 4\n''') == '1'\n\nassert solution('''2\n1 2\n2 4\n3 4\n''') == '0'\n\nassert solution('''100 42\n42 100\n5 42\n100 5\n''') == '5'\n\n\n\"\"\"\n"
    },
    {
        "number": 832,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('3\\n1 2\\n2 4\\n3 4') == '1'\nassert solution('4\\n100 42\\n42 100\\n5 42\\n100 5') == '5'\nassert solution('2\\n1 2\\n1 2') == '0'"
    },
    {
        "number": 833,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1 2') == '0'\nassert solution('2 3') == '0'\nassert solution('1 3') == '1'\nassert solution('1 5') == '1'\nassert solution('2 3') == '2'\n"
    },
    {
        "number": 833,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('2 3\\n1 5\\n2 3') == '8'\nassert solution('5 10\\n3 20\\n2 20\\n1 20\\n4 20\\n5 20') == '60'\nassert solution('10 40\\n10 30\\n10 50\\n10 70\\n10 50\\n10 30\\n10 40\\n10 90\\n10 40\\n10 50') == '420'\nassert solution('1 10\\n10 30') == '30'\nassert solution('1 10\\n10 30\\n10 30') == '30'\n"
    },
    {
        "number": 833,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(input('')) == output('')\n'''\n"
    },
    {
        "number": 833,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"2 3\") == \"8\"\nassert solution(\"5 10\") == \"60\"\nassert solution(\"5 10\") == \"60\"\nassert solution(\"5 100\") == \"120\"\nassert solution(\"5 100\") == \"120\"\n"
    },
    {
        "number": 833,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1 3\\n2 3\\n3 3') == 8\nassert solution('1 10\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1') == 60\nassert solution('5 10\\n2 3\\n3 2\\n2 2\\n2 1\\n1 1\\n1 1') == 60\nassert solution('5 10\\n2 4\\n2 3\\n2 2\\n1 1\\n1 1') == 55\nassert solution('5 10\\n2 4\\n2 3\\n1 1\\n1 1\\n1 1') == 55\n"
    },
    {
        "number": 833,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1 2\\n1 1\\n2 1\\n') == 2\nassert solution('2 3\\n1 5\\n2 3\\n') == 8\nassert solution('5 10\\n3 20\\n2 20\\n1 20\\n4 20\\n5 20\\n') == 60\n\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 833,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''2 3\n1 5\n2 3''') == '8'\nassert solution('''5 10\n3 20\n2 20\n1 20\n4 20\n5 20''') == '60'\nassert solution('''9 8\n9 9\n1 7\n8 8\n2 9\n5 4\n8 7\n9 7\n5 7\n5 7\n3 9\n4 9\n4 8''') == '122'\nassert solution('''100 50\n500 20\n500 10\n1 10\n500 30\n300 5\n1 50\n1 50\n500 50\n300 5\n1 5\n1 5\n1 5\n500 50\n500 10\n1 10\n500 30\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10"
    },
    {
        "number": 833,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('2 3\\n1 5\\n2 3') == '8'\nassert solution('5 10\\n3 20\\n2 20\\n1 20\\n4 20\\n5 20') == '60'\nassert solution('4 4\\n1 1\\n2 1\\n3 1\\n4 1') == '4'\nassert solution('5 10\\n3 20\\n2 20\\n1 20\\n4 20\\n5 20') == '60'\nassert solution('5 4\\n1 1\\n2 1\\n3 1\\n4 1') == '4'\n"
    },
    {
        "number": 833,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('3 10\\n1 5\\n2 3\\n') == '8'\nassert solution('5 10\\n3 20\\n2 20\\n1 20\\n4 20\\n5 20\\n') == '60'\nassert solution('1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10"
    },
    {
        "number": 833,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('2 3\\n1 5\\n2 3') == '8'\nassert solution('5 10\\n3 20\\n2 20\\n1 20\\n4 20\\n5 20') == '60'\nassert solution('2 3\\n1 5\\n2 3') == '8'\nassert solution('1 1\\n1 1') == '0'\nassert solution('2 1\\n1 1') == '1'\n"
    },
    {
        "number": 834,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''4\n1 2 2 4\n''') == '1'\nassert solution('''3\n2 3 3\n''') == '2'\nassert solution('''3\n2 3 1\n''') == '3'\nassert solution('''3\n2 3 1\n''') == '3'\nassert solution('''3\n2 3 1\n''') == '3'\n"
    },
    {
        "number": 834,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"1 2 2 4\\n4 3 3\\n3 1 1\\n\") == \"1\"\nassert solution(\"3 2 3 1\\n2 3 1\\n3 1 3\\n\") == \"2\"\nassert solution(\"3 2 3 1\\n2 3 1\\n3 1 3\\n\") == \"3\"\nassert solution(\"2 3 1 2\\n3 1 2\\n1 3 2\\n\") == \"2\"\nassert solution(\"2 3 1 2\\n3 1 2\\n1 3 2\\n\") == \"3\"\n"
    },
    {
        "number": 834,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1\\n2\\n1') == '1'\nassert solution('2\\n2\\n1') == '1'\nassert solution('2\\n3\\n1') == '2'\nassert solution('2\\n2\\n2') == '2'\nassert solution('2\\n3\\n2') == '3'\n"
    },
    {
        "number": 834,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1\\n1\\n2\\n3') == '1'\nassert solution('2\\n2\\n3\\n3') == '2'\nassert solution('3\\n2\\n3\\n3') == '2'\nassert solution('4\\n1\\n2\\n3\\n4') == '2'\nassert solution('3\\n2\\n3\\n3') == '3'\n"
    },
    {
        "number": 834,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1\\n1') == '1'\nassert solution('1\\n2') == '2'\nassert solution('1\\n3') == '3'\nassert solution('2\\n1 2\\n2 3') == '3'\nassert solution('1\\n1 2\\n1 3') == '1'\n"
    },
    {
        "number": 834,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''4\n1 2 2 4''') == '1'\nassert solution('''3\n2 3 3''') == '2'\nassert solution('''3\n2 3 1''') == '3'\nassert solution('''1\n1''') == '1'\nassert solution('''1\n2''') == '1'\n"
    },
    {
        "number": 834,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('4\\n1 2 2 4\\n') == '1'\nassert solution('3\\n2 3 3\\n') == '2'\nassert solution('3\\n2 3 1\\n') == '3'\nassert solution('3\\n2 3 1\\n') == '3'\nassert solution('4\\n2 3 1 4\\n') == '3'\n"
    },
    {
        "number": 834,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == '2'\n"
    },
    {
        "number": 834,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''4''') == '1'\nassert solution('''3''') == '2'\nassert solution('''2''') == '3'\nassert solution('''1 2 2 4''') == '1'\nassert solution('''2 3 3''') == '2'\n"
    },
    {
        "number": 834,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''4\n1 2 2 4''') == '1'\nassert solution('''3\n2 3 3''') == '2'\nassert solution('''3\n2 3 1''') == '3'\nassert solution('''2\n2 3 1''') == '2'\nassert solution('''2\n2 3 2''') == '3'\n"
    },
    {
        "number": 835,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('BBBSSC') == '2'\nassert solution('BBC') == '7'\nassert solution('BSC') == '200000000001'\n"
    },
    {
        "number": 835,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"BBBSSC\") == \"2\"\nassert solution(\"BBC\") == \"7\"\nassert solution(\"BSC\") == \"200000000001\"\n"
    },
    {
        "number": 835,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('BBBSSC') == 2\nassert solution('BBC') == 7\nassert solution('BSC') == 200000000001\nassert solution
    },
    {
        "number": 835,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''BBBSSC''') == '2'\nassert solution('''BSC''') == '7'\nassert solution('''BBC''') == '200000000001'\nassert solution('''ABC''') == '0'\n"
    },
    {
        "number": 835,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('BBBSSC') == '2'\nassert solution('BBC') == '7'"
    },
    {
        "number": 835,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('BBBSSC') == 2\nassert solution('BBC') == 7\nassert solution('BSC') == 200000000001\n"
    },
    {
        "number": 835,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"BBBSSC\") == 2\nassert solution(\"BBC\") == 7\nassert solution(\"BSC\") == 200000000001\n"
    },
    {
        "number": 835,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 835,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''BBBSSC''') == '2'\nassert solution('''BBC''') == '7'\nassert solution('''BSC''') == '200000000001'\nassert solution('''BBS''') == '0'\nassert solution('''SBS''') == '0'\n"
    },
    {
        "number": 835,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''BBBSSC\n6 4 1\n1 2 3\n4\n''') == '2'\nassert solution('''BBC\n1 10 1\n1 10 1\n21\n''') == '7'\n"
    },
    {
        "number": 836,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"6 6\\nHHSHS\\n\") == \"1\"\nassert solution(\"14 100\\n...HHHSSS...SH\\n\") == \"0\"\nassert solution(\"23 50\\nHHSS.......SSHHHHHHHHHH\\n\") == \"8\"\nassert solution(\"12345678901234567890\\n\") == \"-1\"\nassert solution(\"12345678901234567890\\n\") == \"-1\"\n"
    },
    {
        "number": 836,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('1 1') == '0'\nassert solution('2 2') == '1'\nassert solution('2 1') == '-1'\nassert solution('3 3') == '2'\nassert solution('4 3') == '3'\n"
    },
    {
        "number": 836,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('6 6\\nHHHSHHHSSSSS') == '1'\nassert solution('2 10\\nH') == '0'\nassert solution('10 50\\nHHHHHHHSSSSSSHHSSSSS') == '8'\nassert solution('100 100\\nHHHHHSSSSSSSSSSSSSSSSSSS') == '-1'\nassert solution('100 100\\nHHHHSSSSSSSSSSSSSSSSSSSS') == '-1'\n"
    },
    {
        "number": 836,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"6 6\") == \"1\"\nassert solution(\"14 100\") == \"0\"\nassert solution(\"23 50\") == \"8\"\n\n\n\n\n\"\"\"\n\n\"\"\"\n-- best solution --"
    },
    {
        "number": 836,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('6 6\\nHHHSHS') == '1'\nassert solution('14 100\\nHHHHSSS...SH') == '0'\nassert solution('23 50\\nHHSS.......SSHHHHHHHHHH') == '8'\nassert solution('42 81\\n..HH...H.S') == '-1'\nassert solution('29 93\\n...HHHH...HHHHHHH') == '-1'\n"
    },
    {
        "number": 836,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"3 6\") == \"1\"\nassert solution(\"5 4\") == \"0\"\nassert solution(\"2 2\") == \"-1\"\nassert solution(\"1 5\") == \"0\"\nassert solution(\"10 4\") == \"-1\"\n"
    },
    {
        "number": 836,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('6 6\\nHSHSHS') == '1'\nassert solution('14 100\\n...HHHSSS...SH') == '0'\nassert solution('23 50\\nHHSS.......SSHHHHHHHHHH') == '8'\nassert solution('11 1\\n..H.H') == '-1'\nassert solution('5 9\\nH.HH.HH.H') == '-1'\n"
    },
    {
        "number": 836,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''6 7\nHHSHS\n''') == '1'\nassert solution('''14 100\nHHSS...S...S...S...SH\n''') == '0'\nassert solution('''23 50\nHHSS.......SSHHHHHHHHHH\n''') == '8'\n\n\n>>> "
    },
    {
        "number": 836,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('8 4') == '2'\nassert solution('4 6') == '1'\nassert solution('5 10') == '-1'\nassert solution('4 6\\nHHHSH') == '1'\nassert solution('5 10\\nHHHHHHHHHHHHH') == '0'\n"
    },
    {
        "number": 836,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdin'''\n\nimport sys\nfrom collections import Counter"
    },
    {
        "number": 837,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('8 1 1') == '4'\nassert solution('8 1 10') == '8'\nassert solution('1 5 1') == '8'\nassert solution('6 1 10') == '8'\nassert solution('6 2 1') == '6'\n"
    },
    {
        "number": 837,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 837,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('8 1 1') == '4'\nassert solution('8 1 10') == '8'\n"
    },
    {
        "number": 837,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('8 1 1') == '4'\nassert solution('8 1 10') == '8'\nassert solution('8 1000000000 10') == '4'\nassert solution('8 1000000000 10 1000000000') == '8'\nassert solution('8 1000000000 10 1000000000 1000000000') == '8'\n"
    },
    {
        "number": 837,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''8 1 1''') == '4'\nassert solution('''8 1 10''') == '8'\nassert solution('''100 30 1000''') == '8'\nassert solution('''10000 1 1''') == '4'\nassert solution('''100000 1 1''') == '4'\n"
    },
    {
        "number": 837,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('8 1 1') == '4'\nassert solution('8 1 10') == '8'\n"
    },
    {
        "number": 837,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"8 1 1\") == \"4\"\nassert solution(\"8 1 10\") == \"8\"\nassert solution(\"8 1 10\") == \"8\"\n"
    },
    {
        "number": 837,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('8 1 1') == '4'\nassert solution('8 1 10') == '8'\nassert solution('8 1 9') == '8'\nassert solution('8 1 10') == '8'\nassert solution('8 1 11') == '8'\n"
    },
    {
        "number": 837,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('8 1 1') == '4'\nassert solution('8 1 10') == '8'\nassert solution('20 1 10') == '20'\nassert solution('40 1 10') == '20'\nassert solution('8 10 1') == '20'\n"
    },
    {
        "number": 837,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"8 1 1\") == \"4\"\nassert solution(\"8 1 10\") == \"8\""
    },
    {
        "number": 838,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1 1') == '1'\nassert solution('2 3') == '8'\nassert solution('1 1 0 0 0 0 1 0 0 1 1 0 0 1 1 0') == '8'\nassert solution('0 0 0 0 0 0 1 1 0 0 0 1 0 1 0') == '8'\nassert solution('1 1 0 1 1 0 0 0 0 0 0 0 1 1 1 0') == '8'\n"
    },
    {
        "number": 838,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('1 1') == '1'\nassert solution('2 3') == '8'"
    },
    {
        "number": 838,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"2 3\") == \"8\""
    },
    {
        "number": 838,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('2 2') == '8'\nassert solution('1 1') == '1'\nassert solution('1 2') == '0'\nassert solution('1 1\\n0') == '1'\nassert solution('2 3\\n1 0 1\\n0 1 0') == '8'\n"
    },
    {
        "number": 838,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"0 0\") == \"0\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"1 1 1 1\") == \"4\"\nassert solution(\"0 0 1 1 0 1 0\") == \"1\"\n"
    },
    {
        "number": 838,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1 1') == '1'\nassert solution('2 3') == '8'\nassert solution('1 0 1') == '1'\nassert solution('0 1 0') == '8'\nassert solution('0 0 0') == '1'\n"
    },
    {
        "number": 838,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('1 1') == '1'\nassert solution('2 3') == '8'\nassert solution('2 2') == '0'\nassert solution('1 0 1') == '1'\nassert solution('0 1 0') == '1'\n"
    },
    {
        "number": 838,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''1 1\n0''') == '1'\nassert solution('''2 3\n1 0 1\n0 1 0''') == '8'\nassert solution('''4 3\n1 0 1 1\n0 1 0 1\n0 1 0 0\n0 0 1 0''') == '4'\nassert solution('''8 7\n0 0 0 0 0 0 1 1\n0 0 0 1 1 1 1 1\n0 0 0 1 1 1 1 1\n0 0 0 1 0 0 1 1\n0 0 0 1 0 0 0 1\n0 0 0 1 0 0 0 0\n0 0 0 0 0 0 0 1''') == '8'\nassert solution('''6 6\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0''') == '4'\n"
    },
    {
        "number": 838,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''1 1''') == '1'\nassert solution('''2 3''') == '8'\nassert solution('''2 3''') == '8'\nassert solution('''2 3''') == '8'\nassert solution('''1 2''') == '1'\n"
    },
    {
        "number": 838,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1 1\\n0') == '1'\nassert solution('2 3\\n1 0 1\\n0 1 0') == '8'\nassert solution('2 2\\n1 0 1\\n1 0 1') == '0'\nassert solution('1 1\\n0') == '1'\nassert solution('2 2\\n0 1 1\\n1 0 1') == '0'\n"
    },
    {
        "number": 839,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''\n    0 0 0 0 9\n    0 0 0 0 0\n    0 0 0 0 0\n    0 0 0 0 0\n    7 0 0 0 0\n''') == '32'\n\nassert solution('''\n    0 43 21 18 2\n    3 0 21 11 65\n    5 2 0 1 4\n    54 62 12 0 99\n    87 64 81 33 0\n''') == '620'\n'''\n"
    },
    {
        "number": 839,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == '620'\n\"\"\"\n"
    },
    {
        "number": 839,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"0 0 0 0 9\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n7 0 0 0 0 0\") == \"32\"\nassert solution(\"0 43 21 18 2\\n3 0 21 11 65\\n5 2 0 1 4\\n54 62 12 0 99\\n87 64 81 33 0\") == \"620\"\n\"\"\"\n"
    },
    {
        "number": 839,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\n'''\n"
    },
    {
        "number": 839,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('0 43 21 18 2') == '620'\nassert solution('0 43 21 18 2 0 0 0 0 0') == '620'\nassert solution('0 43 21 18 2 0 0 0 0 0 0') == '620'\nassert solution('0 43 21 18 2 0 0 0 0 0 0 0 0 0') == '620'\nassert solution('0 43 21 18 2 0 0 0 0 0 0 0 0 0 0 0 0') == '620'\n"
    },
    {
        "number": 839,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"0 0 0 0 9\") == \"32\"\nassert solution(\"0 0 0 0 0\") == \"0\"\nassert solution(\"0 0 0 0 0\") == \"0\"\nassert solution(\"0 0 0 0 0\") == \"0\"\nassert solution(\"7 0 0 0 0\") == \"620\"\n\"\"\"\n"
    },
    {
        "number": 839,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('0 0 0 0 9') == '32'\nassert solution('0 0 0 0 0') == '0'\nassert solution('0 0 0 0 0') == '0'\nassert solution('0 0 0 0 0') == '0'\nassert solution('7 0 0 0 0') == '620'\n"
    },
    {
        "number": 839,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''0 0 0 0 9\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n7 0 0 0 0\n''') == '32'\nassert solution('''0 43 21 18 2\n3 0 21 11 65\n5 2 0 1 4\n54 62 12 0 99\n87 64 81 33 0\n''') == '620'\n\n'''"
    },
    {
        "number": 839,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 839,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''0 0 0 0 9\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n7 0 0 0 0\n''') == '32'\nassert solution('''0 43 21 18 2\n3 0 21 11 65\n5 2 0 1 4\n54 62 12 0 99\n87 64 81 33 0\n''') == '620'\n'''\n"
    },
    {
        "number": 840,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''1 1000000000\n1\n1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000''') == '2000000000'\nassert solution('''10 1\n1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000''') == '0'\nassert solution('''3 1\n2 1 4\n11 3 16\n\n''') == '4'\nassert solution('''4 3\n4 3 5 6\n11 12 14 20\n\n''') == '3'\n"
    },
    {
        "number": 840,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"1 1000000000\\n1\\n1000000000\") == \"0\"\nassert solution(\"10 1\\n1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000\\n1 1 1 1 1 1 1 1 1 1\") == \"4\"\nassert solution(\"10 1\\n1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000\\n1 1 1 1 1 1 1 1 1 1\") == \"3\"\nassert solution(\"3 1\\n2 1 4\\n11 3 16\\n\") == \"3\"\nassert solution(\"4 3\\n4 3 5 6\\n11 12 14 20\\n\") == \"3\"\n"
    },
    {
        "number": 840,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1 1000000000') == '0'\nassert solution('1') == '0'\nassert solution('10 1') == '0'\nassert solution('10') == '0'\nassert solution('10 1') == '0'\n"
    },
    {
        "number": 840,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"2 1\\n1\") == \"1\"\nassert solution(\"3 1\\n1 2 3\") == \"4\"\nassert solution(\"4 3\\n4 3 5 6\\n11 12 14 20\") == \"3\"\nassert solution(\"10 1\\n1\") == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 840,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"1 1000000000\") == \"2000000000\"\nassert solution(\"1\") == \"0\"\nassert solution(\"1\\n1\") == \"0\"\nassert solution(\"2\\n1\\n1\") == \"1\"\nassert solution(\"2\\n1\\n1\\n1\") == \"2\"\n"
    },
    {
        "number": 840,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1 1000000000\\n1') == '0'\nassert solution('1 1000000000\\n1\\n1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000\\n1 1 1 1 1 1 1 1 1 1') == '0'\nassert solution('10 1\\n1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000\\n1 1 1 1 1 1 1 1 1 1') == '4'\nassert solution('3 1\\n2 1 4\\n11 3 16') == '3'\nassert solution('4 3\\n4 3 5 6\\n11 12 14 20') == '3'\n"
    },
    {
        "number": 840,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"\n1 1000000000\n1\n1000000000\n\"\"\") == \"0\"\nassert solution(\n\"\"\"\n10 1\n1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000\n1 1 1 1 1 1 1 1 1 1\n\"\"\") == \"2000000000\"\nassert solution(\n\"\"\"\n3 1\n2 1 4\n11 3 16\n\"\"\") == \"4\"\nassert solution(\n\"\"\"\n4 3\n4 3 5 6\n11 12 14 20\n\"\"\") == \"3\"\nprint(solution(stdin))\n"
    },
    {
        "number": 840,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\n'''1 1''') == '1'\nassert solution('''10 1''') == '2000000000'\nassert solution('''10 1''') == '2000000000'\nassert solution('''10 1''') == '2000000000'\nassert solution('''10 1''') == '2000000000'\n"
    },
    {
        "number": 840,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''1 1000000000\n1\n1000000000\n''') == '2000000000'\nassert solution('''10 1\n1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000\n1 1 1 1 1 1 1 1 1 1\n''') == '0'\nassert solution('''3 1\n2 1 4\n11 3 16\n''') == '4'\nassert solution('''4 3\n4 3 5 6\n11 12 14 20\n''') == '3'\nassert solution('''4 3\n4 3 5 6\n11 12 14 20\n''') == '3'\n"
    },
    {
        "number": 840,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"1 1000000000\\n1\") == \"2000000000\"\nassert solution(\"10 1\\n1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000\\n1 1 1 1 1 1 1 1 1 1\") == \"0\"\nassert solution(\"10 1\\n1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000\\n1 1 1 1 1 1 1 1 1 1\") == \"0\"\nassert solution(\"3 1\\n2 1 4\\n11 3 16\\n\") == \"3\"\nassert solution(\"4 3\\n4 3 5 6\\n11 12 14 20\\n\") == \"3\"\n"
    },
    {
        "number": 841,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 841,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''6''') == '113337'\nassert solution('''1''') == '1337'\nassert solution('''1\n2''') == '1337'\nassert solution('''2\n2\n2''') == '1337'\nassert solution('''1\n3\n1''') == '1337'\n"
    },
    {
        "number": 841,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''6''') == '113337'\nassert solution('''10''') == '113337'\nassert solution('''100''') == '113337'\nassert solution('''100000''') == '113337'\nassert solution('''123456789''') == '113337'\n"
    },
    {
        "number": 841,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''1\n2''') == '1'\nassert solution('''1\n1''') == '1337'\nassert solution('''1\n5''') == '1337'\nassert solution('''1\n6''') == '1337'\nassert solution('''1\n3''') == '333'\n"
    },
    {
        "number": 841,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == \"113337\"\nassert solution(stdin) == \"1337\"\n\n'''\n"
    },
    {
        "number": 841,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('input_data.txt') == '113337'"
    },
    {
        "number": 841,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''6\n1''') == '113337'\n\n'''\n"
    },
    {
        "number": 841,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''4\n4\n4\n''') == '113337'\nassert solution('''5\n2\n2\n2\n2\n2\n''') == '1337'\nassert solution('''10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n''') == '1337'\nassert solution('''20\n6\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5"
    },
    {
        "number": 841,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1"
    },
    {
        "number": 841,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''6\n1''') == '113337'\nassert solution('''2\n3\n1''') == '1337'\nassert solution('''1\n3\n5''') == '1337'\nassert solution('''1\n3\n5\n2\n3''') == '137'\nassert solution('''1\n4\n7\n3\n5\n2''') == '137'\n"
    },
    {
        "number": 842,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1') == '11'\nassert solution('10') == '1001'\n"
    },
    {
        "number": 842,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('') == None\nassert solution('1') == None\nassert solution('1\\n') == None\nassert solution('1\\n1\\n') == '11'\nassert solution('1\\n1\\n1\\n') == '11'\n"
    },
    {
        "number": 842,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''1''') == '11'\nassert solution('''10''') == '1001'\nassert solution('''100''') == '110110100'\n'''\n"
    },
    {
        "number": 842,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''1''') == 1\nassert solution('''2''') == 10\nassert solution('''12''') == 111\nassert solution('''33''') == 333\nassert solution('''2222''') == 1002\n"
    },
    {
        "number": 842,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1\\n') == '11'\nassert solution('10\\n') == '1001'\n\n'''\n\n'''\nimport unittest\nfrom edabit.Test import Test\n"
    },
    {
        "number": 842,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1') == '11'\nassert solution('10') == '1001'\nassert solution('100') == '111001'\nassert solution('1000') == '111001'\n"
    },
    {
        "number": 842,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''1''') == '11'\nassert solution('''10''') == '1001'\nassert solution('''100000''') == '1111101111111111000000'\n\n\n-----\n\nMy Submissions\n1, 11 - Accepted\n1, 12 - Wrong Answer\n1, 13 - Accepted\n1, 14 - Accepted\n1, 15 - Accepted\n1, 16 - Accepted\n1, 17 - Accepted\n1, 18 - Accepted\n1, 19 - Accepted\n1, 20 - Accepted\n1, 21 - Accepted\n1, 22 - Accepted\n1, 23 - Accepted\n1, 24 - Accepted\n1, 25 - Accepted\n1, 26 - Accepted\n1, 27 - Accepted\n1, 28 - Accepted\n1, 29 - Accepted\n1, 30 - Accepted\n1, 31 - Accepted\n1, 32 - Accepted\n1, 33 - Accepted\n1, 34 - Accepted\n1, 35 - Accepted\n1, 36 - Accepted\n1, 37 - Accepted\n1, 38 - Accepted\n1, 39 - Accepted\n1, 40 - Accepted\n1, 41 - Accepted\n1, 42 - Accepted\n1, 43 - Accepted\n1, 44 - Accepted\n1, 45 - Accepted\n1, 46 - Accepted\n1, 47 - Accepted\n1, 48 - Accepted\n1, 49 - Accepted\n1, 50 - Accepted\n1, 51 - Accepted\n1, 52 - Accepted\n1, 53 - Accepted\n1, 54 - Accepted\n1, 55 - Accepted\n1, 56 - Accepted\n1, 57 - Accepted\n1, 58 - Accepted\n1, 59 - Accepted\n1, 60 - Accepted\n1, 61 - Accepted\n1, 62 - Accepted\n1, 63 - Accepted\n1, 64 - Accepted\n1, 65 - Accepted\n1, 66 - Accepted\n1, 67 - Accepted\n1, 68 - Accepted\n1, 69 - Accepted\n1, 70 - Accepted\n1, 71 - Accepted\n1, 72 - Accepted\n1, 73 - Accepted\n1, 74 - Accepted\n1, 75 - Accepted\n1, 76 - Accepted\n1, 77 - Accepted\n1, 78 - Accepted\n1, 79 - Accepted\n1, 80 - Accepted\n1, 81 - Accepted\n1, 82 - Accepted\n1, 83 - Accepted\n1, 84 - Accepted\n1, 85 - Accepted\n1, 86 - Accepted\n1, 87 - Accepted\n1, 88 - Accepted\n1, 89 - Accepted\n1, 90 - Accepted\n1, 91 - Accepted\n1, 92 - Accepted\n1, 93 - Accepted\n1, 94 - Accepted\n1, 95 - Accepted\n1, 96 - Accepted\n1, 97 - Accepted\n1, 98 - Accepted\n1, 99 - Accepted\n1, 100 - Accepted\n1, 101 - Accepted\n1, 102 - Accepted\n1, 103 - Accepted\n1, 104 - Accepted\n1, 105 - Accepted\n1, 106 - Accepted\n1, 107 - Accepted\n1, 108 - Accepted\n1, 109 - Accepted\n1, 110 - Accepted\n1, 111 - Accepted\n1, 112 - Accepted\n1, 113 - Accepted\n1, 114 - Accepted\n1, 115 - Accepted\n1, 116 - Accepted\n1, 117 - Accepted\n1, 118 - Accepted\n1, 119 - Accepted\n1, 120 - Accepted\n1, 121 - Accepted\n1, 122 - Accepted\n1, 123 - Accepted\n1, 124 - Accepted\n1, 125 - Accepted\n1, 126 - Accepted\n1, 127 - Accepted\n1, 128 - Accepted\n1, 129 - Accepted\n1, 130 - Accepted\n1, 131 - Accepted\n1, 132 - Accepted\n1, 133 - Accepted\n1, 134 - Accepted\n1, 135 - Accepted\n1, 136 - Accepted\n1, 137 - Accepted\n1, 138 - Accepted\n1, 139 - Accepted\n1, 140 - Accepted\n1, 141 - Accepted\n1, 142 - Accepted\n1, 143 - Accepted\n1, 144 - Accepted\n1, 145 - Accepted\n1, 146 - Accepted\n1, 147 - Accepted\n1, 148 - Accepted\n1, 149 - Accepted\n1, 150 - Accepted\n1, 151 - Accepted\n1, 152 - Accepted\n1, 153 - Accepted\n1, 154 - Accepted\n1, 155 - Accepted\n1, 156 - Accepted\n1, 157 - Accepted\n1, 158 - Accepted\n1, 159 - Accepted\n1, 160 - Accepted\n1, 161 - Accepted\n1, 162 - Accepted\n1, 163 - Accepted\n1, 164 - Accepted\n1, 165 - Accepted\n1, 166 - Accepted\n1, 167 - Accepted\n1, 168 - Accepted\n1, 169 - Accepted\n1, 170 - Accepted\n1, 171 - Accepted\n1, 172 - Accepted\n1, 173 - Accepted\n1, 174 - Accepted\n1, 175 - Accepted\n1, 176 - Accepted\n1, 177 - Accepted\n1, 178 - Accepted\n1, 179 - Accepted\n1, 180 - Accepted\n1, 181 - Accepted\n1, 182 - Accepted\n1, 183 - Accepted\n1, 184 - Accepted\n1, 185 - Accepted\n1, 186 - Accepted\n1, 187 - Accepted\n1, 188 - Accepted\n1, 189 - Accepted\n1, 190 - Accepted\n1, 191 - Accepted\n1, 192 - Accepted\n1, 193 - Accepted\n1, 194 - Accepted\n1, 195 - Accepted\n1, 196 - Accepted\n1, 197 - Accepted\n1, 198 - Accepted\n1, 199 - Accepted\n1, 200 - Accepted\n1, 201 - Accepted\n1, 202 - Accepted\n1, 203 - Accepted\n1, 204 - Accepted\n1, 205 - Accepted\n1, 206 - Accepted\n1, 207 - Accepted\n1, 208 - Accepted\n1, 209 - Accepted\n1, 210 - Accepted\n1, 211 - Accepted\n1, 212 - Accepted\n1, 213 - Accepted\n1, 214 - Accepted\n1, 215 - Accepted\n1, 216 - Accepted\n1, 217 - Accepted\n1, 218 - Accepted\n1, 219 - Accepted\n1, 220 - Accepted\n1, 221 - Accepted\n1, 222 - Accepted\n1, 223 - Accepted\n1, 224 - Accepted\n1, 225 - Accepted\n1, 226 - Accepted\n1, 227 - Accepted\n1, 228 - Accepted\n1, 229 - Accepted\n1, 230 - Accepted\n1, 231 - Accepted\n1, 232 - Accepted\n1, 233 - Accepted\n1, 234 - Accepted\n1, 235 - Accepted\n1, 236 - Accepted\n1, 237 - Accepted\n1, 238 - Accepted\n1, 239 - Accepted\n1, 240 - Accepted\n1, 241 - Accepted\n1, 242 - Accepted\n1, 243 - Accepted\n1, 244 - Accepted\n1, 245 - Accepted\n1, 246 - Accepted\n1, 247 - Accepted\n1, 248 - Accepted\n1, 249 - Accepted\n1, 250 - Accepted\n1,"
    },
    {
        "number": 842,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1') == 11\nassert solution('10') == 1001\n\n\n-----"
    },
    {
        "number": 842,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1') == '11'\nassert solution('10') == '1001'\nassert solution('2') == '22'\nassert solution('200') == '2212'\n"
    },
    {
        "number": 842,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''1''') == '11'\nassert solution('''2''') == '22'\nassert solution('''100''') == '1001'\n"
    },
    {
        "number": 843,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1 2\\n>>\\n1 2 1') == \"INFINITE\"\nassert solution('1 2\\n><\\n1 2 1') == \"FINITE\"\nassert solution('1 2\\n>><\\n2 1 1') == \"INFINITE\"\nassert solution('1 2\\n><\\n1 2 1') == \"INFINITE\"\nassert solution('1 2\\n>><\\n1 2 1') == \"FINITE\"\n"
    },
    {
        "number": 843,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdin\n\"\"\"\n"
    },
    {
        "number": 843,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"INFINITE\"\nassert solution(\"><\") == \"INFINITE\"\nassert solution(\">><\") == \"INFINITE\"\nassert solution(\"<<<\") == \"INFINITE\"\nassert solution(\"<<<<<<\") == \"INFINITE\"\n"
    },
    {
        "number": 843,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('2\\n><\\n1 2\\n') == 'FINITE'\nassert solution('3\\n>><\\n2 1 1\\n') == 'INFINITE'\nassert solution('2\\n>>\\n2 1 1\\n') == 'INFINITE'\nassert solution('2\\n>>\\n1 1\\n') == 'INFINITE'\nassert solution('1\\n>>\\n1\\n') == 'INFINITE'\n"
    },
    {
        "number": 843,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\n'''\n2\n><\n1 2\n'''\n) == 'INFINITE'\n\nassert solution(\n'''\n3\n>><\n2 1 1\n'''\n) == 'INFINITE'\n\nassert solution(\n'''\n5\n<<<\n2 1 1 2 1\n'''\n) == 'FINITE'\n\nassert solution(\n'''\n5\n<<<\n2 1 1 2 1\n'''\n) == 'INFINITE'\n\nassert solution(\n'''\n5\n<<<\n2 1 1 2 1\n'''\n) == 'INFINITE'"
    },
    {
        "number": 843,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('2\\n>>\\n2 1 1\\n') == 'INFINITE'\nassert solution('3\\n>>><\\n2 1 1\\n') == 'INFINITE'\nassert solution('3\\n>>>>\\n2 1 1\\n') == 'INFINITE'\nassert solution('5\\n<<<<<<<<<\\n2 1 1 1 1 1\\n') == 'INFINITE'\nassert solution('5\\n>>>>>>\\n2 1 1 1 1 1\\n') == 'INFINITE'\n"
    },
    {
        "number": 843,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('2') == 'INFINITE'\nassert solution('>') == 'INFINITE'\nassert solution('><') == 'FINITE'\nassert solution('>><') == 'FINITE'\nassert solution('>>><') == 'INFINITE'\n"
    },
    {
        "number": 843,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('2\\n>>\\n1 2\\n2 1 1\\n>><<') == 'INFINITE'\nassert solution('3\\n>>><\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2"
    },
    {
        "number": 843,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('<>') == 'INFINITE'\nassert solution('><') == 'INFINITE'\nassert solution('<<<') == 'INFINITE'\nassert solution('><><><>') == 'INFINITE'\nassert solution
    },
    {
        "number": 843,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''2\n><\n1 2\n''') == 'FINITE'\nassert solution('''3\n>><\n2 1 1\n''') == 'INFINITE'\n\n'''"
    },
    {
        "number": 844,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('11010111') == 4\nassert solution('111') == 0"
    },
    {
        "number": 844,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('11010111') == '4'\nassert solution('111') == '0'\nassert solution('1101011110010111010111011000111') == '5'\nassert solution('010001') == '2'\nassert solution('110101') == '0'\n"
    },
    {
        "number": 844,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''\n''') == 0\nassert solution('''\n11010111\n''') == 4\nassert solution('''\n1110111\n''') == 4\nassert solution('''\n1110111\n''') == 4\nassert solution('''\n11010111\n11010111\n''') == 4\n"
    },
    {
        "number": 844,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('11010111') == 4\nassert solution('111') == 0\nassert solution('1') == 1\nassert solution('10001000') == 8\nassert solution('10000000001') == 1\n"
    },
    {
        "number": 844,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\n    '11010111') == 4\nassert solution('111') == 0\nassert solution('11010101') == 0\nassert solution('111111') == 6\nassert solution('111000') == 2\n"
    },
    {
        "number": 844,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('11010111') == '4'\nassert solution('111') == '0'\nassert solution
    },
    {
        "number": 844,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''\n8\n11010111\n\n''') == '4'\nassert solution('''\n3\n111\n\n''') == '0'\nassert solution('''\n1\n1\n\n''') == '0'\nassert solution('''\n7\n01101010101001\n\n''') == '4'\nassert solution('''\n2\n10\n\n''') == '0'\n"
    },
    {
        "number": 844,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('11010111') == '4'\nassert solution('111') == '0'\nassert solution('11010111') == '4'\nassert solution('100101') == '1'\nassert solution('1110111') == '2'\n"
    },
    {
        "number": 844,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''1''') == 0\nassert solution('''11010111''') == 4\nassert solution('''111111111''') == 0\nassert solution('''0''') == 0\nassert solution('''11100110''') == 3\n"
    },
    {
        "number": 844,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''11010111''') == '4'\nassert solution('''111''') == '0'\nassert solution('''1''') == '0'\nassert solution
    },
    {
        "number": 845,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdin\n\n'''"
    },
    {
        "number": 845,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('R') == 'asdfghjkl;zxcvbnm,./'\nassert solution('L') == 'qwertyuiop'\n\n\n\"\"\""
    },
    {
        "number": 845,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(input) == expected\n\nInput\nL\nzqesdfkja;ktrx\n\nOutput\nzqwefqktrx\n"
    },
    {
        "number": 845,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('R') == 'defghijkl;mno'\nassert solution('L') == 'qwertuiozxcvbnm,./'\n\n\n\n\n'''\n\ndirection = input()\nmessage = input()\n\nfor i in range(len(message)):\n    if direction == 'R':\n        print(message[i+1], end='')\n    else:\n        print(message[i-1], end='')"
    },
    {
        "number": 845,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('R') == ';pbr'\nassert solution('s;;upimrrfod;pbr') == 'allyouneedislove'\nassert solution('L;s;;upimrrfod;pbr') == ';pbrallyouneedislove'\nassert solution('L;s;;upimrrfod;pbr;') == ';pbrallyouneedislove'\n"
    },
    {
        "number": 845,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('Q') == 'asdfghjkl'\nassert solution('L') == 'zxcvbnm,./'\nassert solution('r') == 'qwertyuiop'\n\n\n\n\"\"\"\nimport sys\n\nsys.setrecursionlimit(100)\n"
    },
    {
        "number": 845,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('R') == 'pimrrfod'\nassert solution('L') =='s;;upimrrfod'\nassert solution('a') == 'abcd'\nassert solution('q') == 'y'\nassert solution('s') == 'rstuv'\n"
    },
    {
        "number": 845,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"R\") == \"allouneedislove\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 845,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdin\n\n\n\"\"\"\n"
    },
    {
        "number": 845,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('R') == 'allyouneedislove'\nassert solution('s;;upimrrfod;pbr') == 'asmrsofpimlve'\nassert solution('Lssssso;uipmsmr') =='simrudsoasf'\n\n\n\n\n\"\"\""
    },
    {
        "number": 846,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('5 4\\n4 3 1 2\\n') == '1 1 3 4 4'\nassert solution('5 5\\n5 4 3 2 1\\n') == '1 2 3 4 5'\nassert solution('3 3\\n1 2 3\\n') == '1 2 3'\nassert solution('5 4\\n4 3 1 2\\n') == '1 1 3 4 4'\nassert solution('10 10\\n1 2 3 4 5 6 7 8 9 10\\n') == '1 2 3 4 5 6 7 8 9 10'\n"
    },
    {
        "number": 846,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(input) == output\n"
    },
    {
        "number": 846,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('5 4\\n4 3 1 2\\n') == '1 1 3 4 4'\nassert solution('5 5\\n5 4 3 2 1\\n') == '1 2 3 4 5'\nassert solution('5 5\\n5 4 3 2 1\\n') == '1 2 3 4 5'\nassert solution('1 5\\n1 4 3 2 1\\n') == '1 2 3 4 5'\n"
    },
    {
        "number": 846,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"5 4\n4 3 1 2\"\"\"\n) == '1 1 3 4 4'\n\nassert solution(\n\"\"\"5 5\n5 4 3 2 1\"\"\"\n) == '1 2 3 4 5'\n\nassert solution(\n\"\"\"6 6\n6 5 4 3 2 1\"\"\"\n) == '1 2 3 4 5 6'\n\nassert solution(\n\"\"\"5 6\n5 4 3 2 1\"\"\"\n) == '1 2 3 4 5'\n\nassert solution(\n\"\"\"8 8\n8 7 6 5 4 3 2 1\"\"\"\n) == '1 2 3 4 5 6 7 8'"
    },
    {
        "number": 846,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\n\"\"\"5 4\n4 3 1 2\"\"\"\n) == \"1 1 3 4 4\"\n\nassert solution(\n\"\"\"5 5\n5 4 3 2 1\"\"\"\n) == \"1 2 3 4 5\"\n\nassert solution(\n\"\"\"5 4\n4 3 1 2\"\"\"\n) == \"1 1 3 4 4\""
    },
    {
        "number": 846,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"3 2\\n4 3 1 2\") == \"1 1 3 4 4\"\nassert solution(\"2 2\\n3 1 2\") == \"1 2 3\"\nassert solution(\"2 2\\n4 1 2 3\") == \"1 2\"\nassert solution(\"1 1\\n1 1\") == \"1\"\nassert solution(\"3 2\\n3 2\") == \"1 1\"\n"
    },
    {
        "number": 846,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('5 4\\n4 3 1 2') == '1 1 3 4 4'\nassert solution('5 5\\n5 4 3 2 1') == '1 2 3 4 5'\n\n\"\"\""
    },
    {
        "number": 846,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1 1') == '1 1'\nassert solution('1 2') == '1 2'\nassert solution('1 2 3') == '1 2 3'\nassert solution('1 2 3 4') == '1 3'\n"
    },
    {
        "number": 846,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 846,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''5 4\n4 3 1 2''') == '1 1 3 4 4'\nassert solution('''5 5\n5 4 3 2 1''') == '1 2 3 4 5'\nassert solution('''5 4\n5 4 3 2 1''') == '1 2 3 4 5'\nassert solution('''5 5\n5 4 3 2 1''') == '1 2 3 4 5'\nassert solution('''5 4\n4 3 1 2''') == '1 1 3 4 4'\n"
    },
    {
        "number": 847,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('-1 1 2') == '1'\nassert solution('-2 -2') == '2'\nassert solution('-2 -2 2') == '2'\nassert solution('-2 -2 -2 -2 -2') == '3'\nassert solution('-2 -2 -2 -2 -2 2') == '2'\n"
    },
    {
        "number": 847,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"\"\"3 2\n-1 1 2\n\"\"\") == \"1\"\n\nassert solution(\"\"\"2 3\n-2 -2\n\"\"\") == \"2\"\n\nassert solution(\"\"\"7 4\n1 2 4 -1 -2\n\"\"\") == \"2\"\n\nassert solution(\"\"\"4 2\n-2 -2\n1 1\n\"\"\") == \"2\"\n\nassert solution(\"\"\"2 3\n1 1\n\"\"\") == \"1\""
    },
    {
        "number": 847,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1 2\\n-1 1 2') == '1'\nassert solution('2 3\\n-2 -2') == '2'\n"
    },
    {
        "number": 847,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1 2') == '1'\nassert solution('3 2') == '2'\nassert solution('-2 -2') == '2'\nassert solution('-1 -1') == '2'\nassert solution('-1 -2') == '2'\n"
    },
    {
        "number": 847,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1 1\\n-1 1') == '1'\nassert solution('2 3\\n-2 -2') == '2'\nassert solution('2 3\\n1 1') == '0'\n"
    },
    {
        "number": 847,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1 1\\n-1 1\\n') == '1'\nassert solution('2 3\\n-2 -2\\n') == '2'\nassert solution('3 3\\n-1 -1\\n') == '1'\n\n\n\n'''\n"
    },
    {
        "number": 847,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"4 1\") == \"2\"\nassert solution(\"2 3\") == \"2\"\nassert solution(\"5 2\") == \"2\"\nassert solution(\"1 2\") == \"2\"\nassert solution(\"-2 -2 -2\") == \"2\"\n"
    },
    {
        "number": 847,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('2 2\\n-2 -2') == '1'\nassert solution('2 3\\n-2 -2') == '2'\nassert solution('1 1\\n-1 -1') == '0'\n"
    },
    {
        "number": 847,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('3 2\\n-1 1 2') == '1'\nassert solution('2 3\\n-2 -2') == '2'\n"
    },
    {
        "number": 847,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1 2') == '1'\nassert solution('2 3') == '2'\nassert solution('1 3') == '2'\nassert solution('-1 1 2') == '1'\nassert solution('-2 -2') == '2'\n"
    },
    {
        "number": 848,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdin\n\"\"\"\n"
    },
    {
        "number": 848,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdin\n\"\"\"\n\nn, k = map(int, input().split())"
    },
    {
        "number": 848,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''3 1\n''') == '1 2 3'\nassert solution('''4 4\n''') == '1 2 3 4'\nassert solution('''2 1\n''') == '-1'\nassert solution('''1 1\n''') == '-1'\nassert solution('''2 3\n1 2\n3 1\n''') == '1 2 3'\n"
    },
    {
        "number": 848,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''3 1''') == '1 2\\n2 3\\n3 1'\nassert solution('''2 3''') == '-1'\nassert solution('''3 3''') == '-1'\nassert solution('''3 2''') == '-1'\nassert solution('''1 2''') == '1 2'\n"
    },
    {
        "number": 848,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''1 1''') == '1'\nassert solution('''2 1''') == '1'\nassert solution('''2 2''') == '-1'\nassert solution('''3 1''') == '1'\nassert solution('''3 2''') == '2'\n"
    },
    {
        "number": 848,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''3 1''') == '3'\nassert solution('''3 1''') == '3'\nassert solution('''3 2''') == '3'\nassert solution('''3 2''') == '3'\nassert solution('''2 2''') == '2'\n"
    },
    {
        "number": 848,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"3 1\") == \"3\"\nassert solution(\"1 2\") == \"1 2\"\nassert solution(\"1 1\") == \"-1\"\nassert solution(\"1 1\") == \"-1\"\nassert solution(\"1 2\") == \"1 2\"\n"
    },
    {
        "number": 848,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''3 1''') == '''3\n1 2\n2 3\n3 1'''\n\nassert solution('''3 2''') == '''-1'''\n\nassert solution('''2 1''') == '''-1'''\n\nassert solution('''3 3''') == '''-1'''\n\nassert solution('''4 3''') == '''-1'''"
    },
    {
        "number": 848,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('3 1') == '3'\nassert solution('3 1') == '1 2'\nassert solution('3 1') == '2 3'\nassert solution('3 1') == '3 1'\nassert solution('3 2') == '-1'\n\nprint('solution() passed')\n"
    },
    {
        "number": 848,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('3 1') == '3'\nassert solution('2 1') == '-1'\nassert solution('1 1') == '-1'\nassert solution('1 2') == '-1'\nassert solution('1 1') == '1'\n"
    },
    {
        "number": 849,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1 2 1 2') == '0.666666666667'\nassert solution('2 3 1 1') == '0.666666666667'\nassert solution('2 1 3 1') == '0.666666666667'\nassert solution
    },
    {
        "number": 849,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('1 2 1 2') == '0.666666666667'\n"
    },
    {
        "number": 849,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1 2 1 2') == '0.666666666667'\nassert solution('1 1 1 1') == '1.0'\nassert solution('2 2 1 2') == '0.49999999999999'\nassert solution('2 3 1 2') == '0.25'\nassert solution('3 1 3 1') == '0.0'\n"
    },
    {
        "number": 849,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"1 2 1 2\") == \"0.666666666667\"\n\n\"\"\"\n\nfrom math import log10, floor, ceil\n"
    },
    {
        "number": 849,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdin[0]\n\n\n\"\"\"\n\n\nfrom fractions import Fraction"
    },
    {
        "number": 849,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1 2 1 2') == '0.666666666667'\n\n\n-----\n"
    },
    {
        "number": 849,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('1 2 1 2') == '0.666666666667'\nassert solution('1 2 3 4') == '0.25'\nassert solution('3 3 2 1') == '0.5'\nassert solution('0 0 0 0') == '1'\nassert solution('4 4 3 1') == '0'\n"
    },
    {
        "number": 849,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1 2 1 2') == '0.666666666667'\nassert solution('1 2 1 2') == '0.666666666667'\nassert solution('1 1 1 1') == '1.0'\nassert solution('1 1 1 1') == '1.0'\nassert solution('1 2 1 2') == '0.666666666667'\n"
    },
    {
        "number": 849,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == \"0.666666666667\"\n'''\n\na, b, c, d = [int(i) for i in stdin.strip().split(' ')]"
    },
    {
        "number": 849,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == '0.666666666667'\n\nInput\n3 7 3 7\n\nOutput\n0.63888888888889\n\nInput\n3 0 3 2\n\nOutput\n0.5\n\nInput\n10 0 100 0\n\nOutput\n1.0\n\nInput\n3 3 2 1\n\nOutput\n0.5\n\n\n-----Show Company Tags-----\n\nDivide and Conquer\nSorting\nLinear Searching\n"
    },
    {
        "number": 850,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 850,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''4\n100 10 1 0\n''') == '4\\n0 1 10 100'\nassert solution('''3\n2 70 3\n''') == '2\\n2 70'\n"
    },
    {
        "number": 850,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1\\n1\\n1\\n1\\n1') == '1\\n1'\nassert solution('2\\n1\\n1\\n1\\n1') == '2\\n1\\n1'\nassert solution('2\\n10\\n10\\n10\\n10') == '2\\n10'\nassert solution('1\\n1\\n1\\n1\\n1') == '1\\n1'\nassert solution('4\\n100 10 1 0\\n') == '4\\n100 10 1 0'\n\n\n-----Show solution\nimport sys\n"
    },
    {
        "number": 850,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''4\n100 10 1 0\n''') == '4'\nassert solution('''3\n2 70 3\n''') == '2'\nassert solution('''10\n2 17 1 91 93 49 78 49 31 28\n''') == '5'\nassert solution('''10\n0 1 2 3 4 5 6 7 8 9\n''') == '9'\nassert solution('''10\n0 1 2 3 4 5 6 7 8 9\n''') == '9'\n"
    },
    {
        "number": 850,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 850,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(input(\"\")) == output\n"
    },
    {
        "number": 850,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 850,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('2\\n1 2\\n') == '1\\n2'\nassert solution('2\\n1 1\\n') == '1\\n1'\nassert solution('1\\n1 2\\n') == '0\\n0'\nassert solution('1\\n0\\n') == '1\\n0'\nassert solution('2\\n1 2\\n') == '1\\n2'\n"
    },
    {
        "number": 850,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''4\n100 10 1 0\n''') == '4', 'Error'\nassert solution('''3\n2 70 3\n''') == '2', 'Error'\n"
    },
    {
        "number": 850,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(''.join(input().split())) == str(input())\n\"\"\"\n"
    },
    {
        "number": 851,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(input()) == ''\nassert solution(input()) == ''\nassert solution(input()) == ''\n\n\"\"\"\n"
    },
    {
        "number": 851,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\n    \"3 3\\n01101\\n\") == \"1\\n\"\nassert solution(\n    \"8 3\\n01010110\\n\") == \"3\\n\"\nassert solution(\n    \"9 3\\n00000000\\n\") == \"3\\n\"\nassert solution(\n    \"7 3\\n01101111\\n\") == \"2\\n\"\nassert solution(\n    \"7 9\\n01101111\\n\") == \"2\\n\"\n"
    },
    {
        "number": 851,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('3 3\\n010\\n') == '1'\nassert solution('8 3\\n01010110\\n') == '3'"
    },
    {
        "number": 851,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(input()) == '2'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 851,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('3 3\\n010\\n') == '1\\n'\nassert solution('8 3\\n01010110\\n') == '3\\n'\n\n\n\"\"\""
    },
    {
        "number": 851,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''3 3\n010''') == '1'\nassert solution('''8 3\n01010110''') == '3'\nassert solution('''3 3\n01010101''') == '3'\nassert solution('''8 3\n01010101111''') == '3'\nassert solution('''4 5\n11111111''') == '4'\n"
    },
    {
        "number": 851,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(input(\"\")) == \"1\"\nassert solution(input(\"\")) == \"3\"\nassert solution(input(\"\")) == \"3\"\nassert solution(input(\"\")) == \"3\"\nassert solution(input(\"\")) == \"3\"\n"
    },
    {
        "number": 851,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"3 3\n010\n\"\"\") == \"1\"\nassert solution(\n\"\"\"8 3\n01010110\n\"\"\") == \"3\"\nassert solution(\n\"\"\"6 3\n000000010000\n\"\"\") == \"5\"\nassert solution(\n\"\"\"3 3\n0100011\n\"\"\") == \"0\"\nassert solution(\n\"\"\"3 3\n0100001\n\"\"\") == \"1\"\n"
    },
    {
        "number": 851,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('3 1\\n000\\n') == '1'\nassert solution('8 3\\n01010110\\n') == '3'\nassert solution('8 1\\n10101010\\n') == '4'\nassert solution('8 4\\n11111111\\n') == '4'\nassert solution('8 5\\n1111111111\\n') == '5'\n"
    },
    {
        "number": 851,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''8 3''') == '1'\nassert solution('''3 5''') == '2'\nassert solution('''100 5''') == '0'\nassert solution('''100 2''') == '1'\nassert solution('''3 3''') == '1'\n"
    },
    {
        "number": 852,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('2 1 1') == 'Yes'\nassert solution('1 0') == 'No'\nassert solution('5 2 3') == 'Yes'\nassert solution('1 2 3 2 2') == 'Yes'\nassert solution('4 3 4') == 'Yes'\n"
    },
    {
        "number": 852,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"\"\"0\n2 1 1\"\"\") == 'Yes'\nassert solution(\"\"\"0\n2 1 1\"\"\") == 'No'\nassert solution(\"\"\"0\n1 0\"\"\") == 'Yes'\nassert solution(\"\"\"0\n1 0\"\"\") == 'No'\nassert solution(\"\"\"0\n2 1 1\"\"\") == 'Yes'\n"
    },
    {
        "number": 852,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('2 1 1\\n1 0\\n5 2 3\\n1 2 3 2 2\\n4 3 4\\n0 2 4 3\\n2 3 5\\n3 0\\n7 2 3\\n3 0 2 1 3 0 1\\n7 1 4') == 'Yes\\nNo\\nYes\\nYes\\nYes\\nNo'\nassert solution('1 2 3\\n0 2 4 3\\n2 3 5\\n3 0\\n7 2 3\\n3 0 2 1 3 0 1\\n7 1 4') == 'No\\nYes\\nYes\\nYes\\nYes\\nNo'\nassert solution('0 0 0\\n2 0 0 2 0 2\\n2 0 0 1 0 1 0\\n3 1 0 3 0 3 1\\n0 0 0 0 0 0 0\\n4 0 0 2 0 2 4 2\\n3 0 0 1 0 1 0\\n3 0 0 3 0 3 1\\n4 0 0 4 0 4 4 2\\n0 0 0 0 0 0 0\\n0 0 0 0 0 0 0\\n0 0 0 0 0 0 0\\n0 0 0 0 0 0 0\\n0 0 0 0 0 0 0\\n0 0 0 0 0 0 0\\n0 0 0 0 0 0 0\\n0 0 0 0 0 0 0\\n0 0 0 0 0 0 0\\n0 0 0 0 0 0 0\\n0 0 0 0 0 0 0\\n0 0 0 0 0 0 0\\n0 0 0 0 0 0 0\\n0 0 0 0 0 0 0\\n0 0 0 0 0 0 0\\n0 0 0 0 0 0 0\\n0 0 0 0 0 0 0\\n0 0 0 0 0 0 0\\n0 0 0 0 0 0 0\\n0 0 0 0 0 0 0\\n0 0 0 0 0 0 0\\n0 0 0 0 0 0 0\\n0 0 0 0 0 0 0\\n0 0 0 0 0 0 0\\n0 0 0 0 0 0 0\\n0 0 0 0 0 0 0\\n0"
    },
    {
        "number": 852,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == 'Yes'\nassert solution(stdin) == 'Yes'\nassert solution(stdin) == 'No'\nassert solution(stdin) == 'No'\nassert solution(stdin) == 'Yes'\n"
    },
    {
        "number": 852,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1 2 1\\n1 0\\n5 2 3\\n1 2 3 2 2\\n4 3 4\\n0 2 4 3\\n2 3 5\\n3 0\\n7 2 3\\n3 0 2 1 3 0 1\\n7 1 4') == 'Yes'\nassert solution('2 1 1\\n1 0\\n5 2 3\\n1 2 3 2 2\\n4 3 4\\n0 2 4 3\\n2 3 5\\n3 0\\n7 2 3\\n3 0 2 1 3 0 1\\n7 1 4') == 'No'\nassert solution('3 1 1\\n1 0\\n5 2 3\\n1 2 3 2 2\\n4 3 4\\n0 2 4 3\\n2 3 5\\n3 0\\n7 2 3\\n3 0 2 1 3 0 1\\n7 1 4') == 'Yes'\nassert solution('7 1 4\\n4 4 3 0 2 4 2\\n5 2 3\\n1 2 3 2 2\\n7 1 4') == 'No'\n\"\"\"\n"
    },
    {
        "number": 852,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''2 1 1''') == 'Yes'\nassert solution('''1 0''') == 'No'\nassert solution('''5 2 3''') == 'Yes'\nassert solution('''1 2 3 2 2''') == 'No'\nassert solution('''4 3 4''') == 'Yes'\n"
    },
    {
        "number": 852,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"7 2 1\") == \"Yes\"\nassert solution(\"1 0\") == \"No\"\nassert solution(\"5 2 3\") == \"Yes\"\nassert solution(\"1 2 3 2 2\") == \"Yes\"\nassert solution(\"4 3 4\") == \"Yes\"\n"
    },
    {
        "number": 852,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\n    \"\"\"\n    7\n    2 1 1\n    1 0\n    5 2 3\n    1 2 3 2 2\n    4 3 4\n    0 2 4 3\n    2 3 5\n    3 0\n    7 2 3\n    3 0 2 1 3 0 1\n    7 1 4\n    4 4 3 0 2 4 2\n    5 2 3\n    1 2 3 2 2\n    \"\"\") == 'No'\nassert solution(\n    \"\"\"\n    7\n    2 1 1\n    1 0\n    5 2 3\n    1 2 3 2 2\n    4 3 4\n    0 2 4 3\n    2 3 5\n    3 0\n    7 2 3\n    3 0 2 1 3 0 1\n    7 1 4\n    4 4 3 0 2 4 2\n    5 2 3\n    1 2 3 2 2\n    \"\"\") == 'Yes'\nassert solution(\n    \"\"\"\n    7\n    2 1 1\n    1 0\n    5 2 3\n    1 2 3 2 2\n    4 3 4\n    0 2 4 3\n    2 3 5\n    3 0\n    7 2 3\n    3 0 2 1 3 0 1\n    7 1 4\n    4 4 3 0 2 4 2\n    5 2 3\n    1 2 3 2 2\n    \"\"\") == 'No'\nassert solution(\n    \"\"\"\n    7\n    2 1 1\n    1 0\n    5 2 3\n    1 2 3 2 2\n    4 3 4\n    0 2 4 3\n    2 3 5\n    3 0\n    7 2 3\n    3 0 2 1 3 0 1\n    7 1 4\n    4 4 3 0 2 4 2\n    5 2 3\n    1 2 3 2 2\n    \"\"\") == 'Yes'\nassert solution(\n    \"\"\"\n    7\n    2 1 1\n    1 0\n    5 2 3\n    1 2 3 2 2\n    4 3 4\n    0 2 4 3\n    2 3 5\n    3 0\n    7 2 3\n    3 0 2 1 3 0"
    },
    {
        "number": 852,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1 2 3\\n2 0\\n5 2 3\\n1 2 3 2 2\\n4 3 4\\n0 2 4 3\\n2 3 5') == 'Yes'\nassert solution('1 2 3\\n2 0\\n5 2 3\\n1 2 3 2 2\\n4 3 4\\n0 2 4 3\\n2 3 5') == 'No'\nassert solution('1 2 3\\n2 0\\n5 2 3\\n1 2 3 2 2\\n4 3 4\\n0 2 4 3\\n2 3 5\\n3 0 2 1 3 0 1\\n7 1 4') == 'Yes'\nassert solution('1 2 3\\n2 0\\n5 2 3\\n1 2 3 2 2\\n4 3 4\\n0 2 4 3\\n2 3 5\\n3 0 2 1 3 0 1\\n7 1 4\\n4 4 3 0 2 4 2\\n5 2 3\\n1 2 3 2 2') == 'No'"
    },
    {
        "number": 852,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1\\n2\\n1\\n1') == 'Yes'\nassert solution('3\\n2\\n1\\n1') == 'Yes'\nassert solution('2\\n2\\n1\\n1') == 'No'\nassert solution('2\\n2\\n1\\n2') == 'No'\nassert solution('1\\n2\\n3\\n2\\n2') == 'Yes'\n"
    },
    {
        "number": 853,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('4\\n5 0 5 0\\n') == '0'\nassert solution('11\\n5 5 5 5 5 5 5 5 0 5 5\\n') == '5555555550'\n"
    },
    {
        "number": 853,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"4\") == \"0\"\nassert solution(\"11\") == \"5555555550\"\nprint(\"All tests passed successfully.\")\n\n\n\"\"\""
    },
    {
        "number": 853,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"11\\n5 5 5 5 5 5 5 5 0 5 5\") == \"5555555550\"\nassert solution(\"4\\n5 0 5 0\\n\") == \"0\"\nassert solution(\"11\\n5 5 5 5 5 5 5 5 0 5 5\") == \"5555555550\"\nassert solution(\"11\\n5 5 5 5 5 5 5 5 0 5 5\") == \"5555555550\"\nassert solution(\"11\\n5 5 5 5 5 5 5 5 0 5 5\") == \"5555555550\"\n"
    },
    {
        "number": 853,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('4\\n5 0 5 0\\n') == '0'\nassert solution('11\\n5 5 5 5 5 5 5 5 0 5 5\\n') == '5555555550'\n\n\n\"\"\"\n"
    },
    {
        "number": 853,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 853,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('4\\n5 0 5 0\\n') == '0'\nassert solution('11\\n5 5 5 5 5 5 5 5 0 5 5\\n') == '5555555550'\n\n\"\"\"\n"
    },
    {
        "number": 853,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"0\\n4\\n5 0 5 0\\n\") == \"0\"\nassert solution(\"1\\n10\\n0 0 0 0 0 0 0 0 0 0 0 0 0\\n\") == \"0\"\nassert solution(\"2\\n20\\n5 5 5 5 5 5 5 5 5 5 5 5 5 5 5\\n\") == \"5555555550\"\nassert solution(\"3\\n20\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0\\n\") == \"0\"\nassert solution(\"4\\n20\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0\\n\") == \"0\"\n"
    },
    {
        "number": 853,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdin[0]\n"
    },
    {
        "number": 853,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('0\\n4\\n5 0 5 0') == '0'\nassert solution('4\\n5 0 5 0') == '5555555550'\nassert solution('10\\n5 5 5 5 5 5 5 5 5 5 0 5 5') == '5555555550'\nassert solution('3\\n1 2 3') == '-1'\n"
    },
    {
        "number": 853,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('4\\n5 0 5 0\\n') == '0'\nassert solution('11\\n5 5 5 5 5 5 5 5 0 5 5\\n') == '5555555550'\n"
    },
    {
        "number": 854,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('3 2\\n5 2 5') == '10'\nassert solution('5 21\\n2 4 100 2 6') == '6'\nassert solution('5 19\\n2 4 100 2 6') == '6'\nassert solution('5 1\\n1') == '1'\nassert solution('5 1\\n1 2') == '1'\n"
    },
    {
        "number": 854,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == '6'\n"
    },
    {
        "number": 854,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''3 10\n5 2 5''') == '10'\nassert solution('''5 21\n2 4 100 2 6''') == '6'\n\n\n\"\"\""
    },
    {
        "number": 854,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''3 38\n5 2 5\n''') == '10'\n\nassert solution('''5 21\n2 4 100 2 6\n''') == '6'\n\nassert solution('''5 21\n2 4 100 2 6\n''') == '6'\n\nassert solution('''3 21\n2 4 100 2 6\n''') == '6'\n\nassert solution('''3 21\n2 4 100 2 6\n''') == '6'"
    },
    {
        "number": 854,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 854,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1\\n2') == '1'\nassert solution('2\\n2') == '2'\nassert solution('3\\n2') == '1'\nassert solution('5\\n2 5') == '6'\nassert solution('5 21\\n2 4 100 2 6') == '6'\n"
    },
    {
        "number": 854,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('3 38\\n5 2 5\\n') == '10'\nassert solution('5 21\\n2 4 100 2 6\\n') == '6'\nassert solution('4 0\\n2 4 0 2 6\\n') == '0'\nassert solution('3 9\\n1 2 3 4 5 6\\n') == '6'"
    },
    {
        "number": 854,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''3 38\n5 2 5\n''') == '10'\n\nassert solution('''5 21\n2 4 100 2 6\n''') == '6'\n"
    },
    {
        "number": 854,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99\") == \"10\"\nassert solution(\"2 21\") == \"6\"\nassert solution(\"3 21\") == \"5\"\nassert solution(\"3 5 5\") == \"5\"\nassert solution(\"3 5 5 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99\") == \"5\"\n"
    },
    {
        "number": 854,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('3 38\\n5 2 5\\n') == '10'\nassert solution('5 21\\n2 4 100 2 6\\n') == '6'\nassert solution('5 21\\n1 1 1 1 1\\n') == '0'\nassert solution('5 21\\n1 3 3 3 3\\n') == '0'\nassert solution('5 21\\n1 3 3 3 3\\n') == '0'\n"
    },
    {
        "number": 855,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"10 2 1\") == \"1 9\"\nassert solution(\"8 1 1\") == \"5 2\"\n\n\n\"\"\""
    },
    {
        "number": 855,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('10 2 1') == '1 9'\nassert solution('8 1 1') == '5 2'\nassert solution('5 1 1') == '0 0'\nassert solution('5 1 1') == '0 0'\nassert solution('5 1 1') == '0 0'\n"
    },
    {
        "number": 855,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('10 2 1') == '1 9'\nassert solution('5 1 1') == '5 2'\nassert solution('8 1 1') == '0 0'\nassert solution('8 1 1') == '0 0'\nassert solution('8 1 1') == '0 0'\n"
    },
    {
        "number": 855,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''10 2 1''') == '1 9'\nassert solution('''8 1 1''') == '5 2'\nassert solution('''5 1 1''') == '0 0'\nassert solution('''1 1 1''') == '0 0'\nassert solution('''1 1 1''') == '0 0'\n"
    },
    {
        "number": 855,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1 1 1') == '1 9'\nassert solution('1 1 1') == '1 9'\nassert solution('1 1 1') == '1 9'\nassert solution('2 2 2') == '0 0'\nassert solution('2 2 2') == '0 0'\n"
    },
    {
        "number": 855,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('10 2 1') == '1 9'\nassert solution('8 1 1') == '5 2'\nassert solution('5 1 1') == '0 0'\nassert solution('2 2 2') == '0 0'\nassert solution('3 3 1') == '2 2'\n"
    },
    {
        "number": 855,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"10 2 1\") == \"1 9\"\nassert solution(\"8 1 1\") == \"5 2\"\nassert solution(\"5 1 1\") == \"0 0\"\nassert solution(\"8 1 2\") == \"0 0\"\nassert solution(\"8 2 1\") == \"1 0\"\n"
    },
    {
        "number": 855,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('10 2 1\\n1 1 1\\n1 1 1\\n1 1 1\\n2 2 2\\n2 2 2\\n2 2 2') == '1 9\\n'\nassert solution('8 1 1\\n2 2 1\\n3 3 1\\n3 1 3\\n1 1 1\\n2 1 1\\n1 2 3\\n') == '5 2\\n'\nassert solution('5 1 1\\n1 2 2\\n2 2 2\\n2 2 2\\n1 2 2\\n2 2 2\\n2 2 2\\n') == '0 0\\n'\nassert solution('5 1 1\\n1 2 2\\n2 2 2\\n2 2 2\\n1 2 2\\n2 2 2\\n2 2 2\\n') == '0 0\\n'\nassert solution('5 1 1\\n1 2 2\\n2 2 2\\n2 2 2\\n1 2 2\\n2 2 2\\n2 2 2\\n') == '0 0\\n'\n"
    },
    {
        "number": 855,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('10 2 1') == '1 9'\nassert solution('8 1 1') == '5 2'\nassert solution('5 1 1') == '0 0'\nassert solution('2 2 2') == '0 0'\nassert solution('1 2 2') == '1 1'\n"
    },
    {
        "number": 855,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''10 2 1''') == '1 9'\nassert solution('''8 1 1''') == '5 2'\nassert solution('''5 1 1''') == '0 0'\nassert solution('''8 1 2''') == '5 2'\nassert solution('''1 1 2''') == '2 2'\n"
    },
    {
        "number": 856,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1\\n2\\n') == \"1 2\"\n\nassert solution('-10\\n-10\\n') == \"-10\"\n\nassert solution('\\n5\\n1 2 3 4 5\\n') == \"0\"\n\nassert solution('\\n5\\n1 2 3 4 5\\n1\\n') == \"0\"\n\nassert solution('\\n5\\n1 2 3 4 5\\n1\\n1\\n') == \"1 2\""
    },
    {
        "number": 856,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''-199 192\n5 19\n5 -1 4 2 0\n1 2''') == '391 0'\nassert solution('''69\n''') == '0 6 1 3 5'\nassert solution('''5 -1 4 2 0\n''') == '0'\nassert solution('''1 2\n''') == '0'\nassert solution('''-199 192\n5 19\n5 -1 4 2 0\n69\n''') == '391 0'\n"
    },
    {
        "number": 856,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1 2\\n1 2\\n') == '0 6 1 3 5'\nassert solution('1 2\\n69') == '0'\n\"\"\"\n"
    },
    {
        "number": 856,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\n\n-----\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n\"\"\"\n"
    },
    {
        "number": 856,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('0') == '0'\nassert solution('-199 192') == '391 0'\nassert solution('-199 192 -1 -1 -1 -1 -1') == '391 0'\nassert solution('-199 192 -1 -1 -1 -1 -1 19') == '391 0'\nassert solution
    },
    {
        "number": 856,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('0') == '0'\nassert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '4'\n"
    },
    {
        "number": 856,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''3 1\n-199 192\n5 19\n5 -1 4 2 0''') == '391 0'\nassert solution('''3 1\n-199 192\n5 19\n5 -1 4 2 0''') == '391 0'\nassert solution('''3 1\n-199 192\n5 19\n5 -1 4 2 0''') == '391 0'\nassert solution('''3 1\n-199 192\n5 19\n5 -1 4 2 0''') == '391 0'\nassert solution('''3 1\n-199 192\n5 19\n5 -1 4 2 0''') == '391 0'\n"
    },
    {
        "number": 856,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1\\n2\\n') == '0\\n'\nassert solution('5\\n19\\n') == '6 1 3 5\\n'\nassert solution('1\\n2\\n69\\n') == '0\\n'\nassert solution('3\\n2 1\\n-199 192\\n5 19\\n5 -1 4 2 0\\n1 2\\n69\\n') == '391 0\\n0 6 1 3 5\\n0\\n'\n'''\n"
    },
    {
        "number": 856,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('-199 192\\n') == '391 0\\n'\nassert solution('5 19\\n') == '0 6 1 3 5\\n'\nassert solution('5 -1 4 2 0\\n') == '0\\n'\nassert solution('1 2\\n') == '0\\n'\nassert solution('69\\n') == '0 6 1 3 5\\n'\n\n\n-----Plan-----\nWe can sort the array by using the minimum value from the end of array and move all the elements behind that value to the front of array.\n\nFor the sake of simplicity, I will put -1000 as the minimum value.\n\nNow, the array will become\n\n$[d-(-1000), d-192, -199, -192, -1, 0, 1, 2, 3, 4, 5] = [0, 6, 1, 3, 5, 1, 2, 3, 4, 5]$.\n\nNow, since the minimum value from the end of array is -1000, the smallest number will be at the beginning of array and the second smallest number will be at the middle of array.\n\nNow, the array will become\n\n$[d-(-1000), d-192, -199, -192, -1, 0, 1, 2, 3, 4, 5] = [0, 6, 1, 3, 5, 1, 2, 3, 4, 5]$.\n\nNow, the array will become\n\n$[d-(-1000), d-192, -199, -192, -1, 0, 1, 2, 3, 4, 5] = [0, 6, 1, 3, 5, 1, 2, 3, 4, 5]$.\n\nNow, the array will become\n\n$[d-(-1000), d-192, -199, -192, -1, 0, 1, 2, 3, 4, 5] = [0, 6, 1, 3, 5, 1, 2, 3, 4, 5]$.\n\nNow, the array will become\n\n$[d-(-1000), d-192, -199, -192, -1, 0, 1, 2, 3, 4, 5] = [0, 6, 1, 3, 5, 1, 2, 3, 4, 5]$.\n\nNow, the array will become\n\n$[d-(-1000), d-192, -199, -192, -1, 0, 1, 2, 3, 4, 5] = [0, 6, 1, 3, 5, 1, 2, 3, 4, 5]$.\n\nNow, the array will become\n\n$[d-(-1000), d-192, -199, -192, -1, 0, 1, 2, 3, 4, 5] = [0, 6, 1, 3, 5, 1, 2, 3, 4, 5]$.\n\nNow, the array will become\n\n$[d-(-1000), d-192, -199, -192, -1, 0, 1, 2, 3, 4, 5] = [0, 6, 1, 3, 5, 1, 2, 3, 4, 5]$.\n\nNow, the array will become\n\n$[d-(-1000), d-192, -199, -192, -1, 0, 1, 2, 3, 4, 5] = [0, 6, 1, 3, 5, 1, 2, 3, 4, 5]$.\n\nNow, the array will become\n\n$[d-(-1000), d-192, -199, -192, -1, 0, 1, 2, 3, 4, 5] = [0, 6, 1, 3, 5, 1, 2, 3, 4, 5]$.\n\nNow, the array will become\n\n$[d-(-1000), d-192, -199, -192, -1, 0, 1, 2, 3, 4, 5] = [0, 6, 1, 3, 5, 1, 2, 3, 4, 5]$.\n\nNow, the array will become\n\n$[d-(-1000), d-192, -199, -192, -1, 0, 1, 2, 3, 4, 5] = [0, 6, 1, 3, 5, 1, 2, 3, 4, 5]$.\n\nNow, the array will become\n\n$[d-(-1000), d-192, -199, -192, -1, 0, 1, 2, 3, 4, 5] = [0, 6, 1, 3, 5, 1, 2, 3, 4, 5]$.\n\nNow, the array will become\n\n$[d-(-1000), d-192, -199, -192, -1, 0, 1, 2, 3, 4, 5] = [0, 6, 1, 3, 5, 1, 2, 3, 4, 5]$.\n\nNow, the array will become\n\n$[d-(-1000), d-192, -199, -192, -1, 0, 1, 2, 3, 4, 5] = [0, 6, 1, 3, 5, 1, 2, 3, 4, 5]$.\n\nNow, the array will become\n\n$[d-(-1000), d-192, -199, -192, -1, 0, 1, 2, 3, 4, 5] = [0, 6, 1, 3, 5, 1, 2, 3, 4, 5]$.\n\nNow, the array will become\n\n$[d-(-1000), d-192, -199, -192, -1, 0, 1, 2, 3, 4, 5] = [0, 6, 1, 3, 5, 1, 2, 3, 4, 5]$.\n\nNow, the array will become\n\n$[d-(-1000), d-192, -199, -192, -1, 0, 1, 2, 3, 4, 5] = [0, 6, 1, 3, 5, 1, 2, 3, 4, 5]$.\n\nNow, the array will become\n\n$[d-(-1000), d-192, -199, -192, -1, 0, 1, 2, 3, 4, 5] = [0, 6, 1, 3, 5, 1, 2, 3, 4, 5]$.\n\nNow, the array will become\n\n$[d-(-1000), d-192, -199, -192, -1, 0, 1, 2, 3, 4, 5] = [0, 6, 1, 3, 5, 1, 2, 3, 4, 5]$.\n\nNow, the array will become\n\n$[d-(-1000), d-192, -199, -192, -1, 0, 1, 2,"
    },
    {
        "number": 856,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\n    \"\"\"\n    2 1\n    -199 192\n    5 19\n    5 -1 4 2 0\n    1 2\n    69\n    \"\"\") == \"391 0\\n0 6 1 3 5\\n\"\n\n\n-----Best Practice-----"
    },
    {
        "number": 857,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''7 3\n3 5 7 1 6 2 8\n1 2 7\n''') == '7 1 2'\nassert solution('''4 4\n3 4 1 0\n0 1 7 9\n''') == '1 0'\nassert solution('''7 7\n7 5 4 3 2 1 0\n0 1 7 9\n''') == '1 0'\nassert solution('''9 9\n0 1 7 9\n1 0\n''') == '1 0'\nassert solution('''8 1\n6 4 9 2 7 0\n1 0\n''') == '6 4 9 2 7 0'\n"
    },
    {
        "number": 857,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"7 3\\n3 5 7 1 6 2 8\\n1 2 7\\n\") == \"7 1 2\"\nassert solution(\"4 4\\n3 4 1 0\\n0 1 7 9\\n\") == \"1 0\"\nassert solution(\"7 4\\n3 4 1 0\\n0 1 7 9\\n\") == \"1 0\"\nassert solution(\"7 3\\n3 5 7 1 6 2 8\\n1 2 7\\n\") == \"7 1 2\"\nassert solution(\"7 3\\n3 5 7 1 6 2 8\\n1 2 7\\n\") == \"7 1 2\"\n"
    },
    {
        "number": 857,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"4 4\\n3 4 1 0\\n0 1 7 9\") == \"1 0\"\nassert solution(\"4 3\\n3 4 1 0\\n0 1 7 9\") == \"7 1 2\"\nassert solution(\"4 3\\n3 4 1 0\\n0 1 7 9\") == \"1 0\"\nassert solution(\"3 3\\n3 4 1 0\\n0 1 7 9\") == \"\"\nassert solution(\"3 3\\n3 4 1 0\\n0 1 7 9\") == \"\"\n"
    },
    {
        "number": 857,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdin"
    },
    {
        "number": 857,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('7 3\\n3 5 7 1 6 2 8\\n1 2 7\\n') == '7 1 2'\nassert solution('4 4\\n3 4 1 0\\n0 1 7 9\\n') == '1 0'\nassert solution('1 3\\n9 1 1\\n1 3 7') == '1 0'\n\"\"\"\n"
    },
    {
        "number": 857,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"2 2\\n1 7 1\\n\") == \"1 7\"\nassert solution(\"2 4\\n3 4 1 0\\n0 1 7 9\\n\") == \"1 0\"\nassert solution(\"2 2\\n0 0 1\\n7 7 9\\n\") == \"\"\nassert solution(\"2 2\\n0 1 7 9\\n1 2 7\\n\") == \"1 0\"\nassert solution(\"2 2\\n0 1 7 9\\n1 2 7\\n\") == \"1 0\"\n"
    },
    {
        "number": 857,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('3 3\\n3 5 7 1 6 2 8') == '7 1 2'\nassert solution('1 2 7\\n1 2 7') == '1 0'\nassert solution('1 2 0\\n0 1 7 9') == '1 0'\nassert solution('0 1 7 9\\n1 2 7') == '1 0'\nassert solution('0 1 0\\n0 1 7 9') == '1 0'\n"
    },
    {
        "number": 857,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"7 3\\n3 5 7 1 6 2 8\\n1 2 7\\n\") == \"7 1 2\"\nassert solution(\"4 4\\n3 4 1 0\\n0 1 7 9\\n\") == \"1 0\"\nassert solution(\"7 4\\n3 4 1 0\\n0 1 7 9\\n\") == \"1 0\"\nassert solution(\"7 4\\n3 4 1 0\\n0 1 7 9\\n\") == \"1 0\"\nassert solution(\"5 2\\n3 7 1 4\\n2 1 6 7\\n\") == \"2 1\"\n"
    },
    {
        "number": 857,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\n    \"\"\"7 3\n3 5 7 1 6 2 8\n1 2 7\n\n1 2 7\n0 1 7 9\n\"\"\"\n    ) == \"7 1 2\"\n\nassert solution(\n    \"\"\"4 4\n3 4 1 0\n0 1 7 9\n\n1 2 7\n0 1 7 9\n\"\"\"\n    ) == \"1 0\"\n\nassert solution(\n    \"\"\"6 4\n3 4 1 0\n0 1 7 9\n\n1 2 7\n0 1 7 9\n\"\"\"\n    ) == \"1 0\"\n\nassert solution(\n    \"\"\"8 8\n3 4 1 0\n0 1 7 9\n\n1 2 7\n0 1 7 9\n\"\"\"\n    ) == \"1 0\"\n"
    },
    {
        "number": 857,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 858,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdin\nassert solution(\"2\") == \"0\"\nassert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"3\"\n"
    },
    {
        "number": 858,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(1) == \"0\"\nassert solution(3) == \"1\"\nassert solution(99) == \"49\"\nprint(solution(int(stdin.read().strip())))\n"
    },
    {
        "number": 858,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('') == '0'\nassert solution('0') == '0'\nassert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '1'\n"
    },
    {
        "number": 858,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1') == '0'\nassert solution('1') == '0'\nassert solution('1') == '0'\nassert solution('1') == '0'\nassert solution('1') == '0'\n"
    },
    {
        "number": 858,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1') == '0'\nassert solution('3') == '1'\nassert solution('99') == '49'\nassert solution('99999') == '49'\nassert solution('99999') == '49'\n"
    },
    {
        "number": 858,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"1\") == 0\nassert solution(\"3\") == 1\nassert solution(\"99\") == 49"
    },
    {
        "number": 858,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\n\n\n\"\"\"\n"
    },
    {
        "number": 858,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1') == '0'\nassert solution('3') == '1'\nassert solution('99') == '49'\n"
    },
    {
        "number": 858,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"3\") == \"1\"\nassert solution(\"99\") == \"49\"\nassert solution(\"3\") == \"1\"\nassert solution(\"999999\") == \"49494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949494949"
    },
    {
        "number": 858,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"1\") == 0\nassert solution(\"3\") == 1\nassert solution(\"99\") == 49\n"
    },
    {
        "number": 859,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"++-+-\") == \"1.000000000000\"\nassert solution(\"+-+-\") == \"0.500000000000\"\nassert solution(\"+++\") == \"0.000000000000\"\nassert solution(\"++-++\") == \"0.500000000000\"\n"
    },
    {
        "number": 859,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('++-+-') == '1.0'\nassert solution('+-+-') == '0.5'\nassert solution('+++') == '0.0'\nassert solution('++---') == '0.0'\nassert solution('+++-') == '0.0'\n"
    },
    {
        "number": 859,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('++-+-') == '1.000000000000'\nassert solution('+-+-') == '0.500000000000'\nassert solution('+++') == '0.000000000000'\nassert solution('??-') == '0.500000000000'\nassert solution('+-??') == '0.500000000000'\n"
    },
    {
        "number": 859,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('++-+-') == '1.000000000000'\nassert solution('+-+-+') == '0.500000000000'\nassert solution('+++') == '0.000000000000'\n"
    },
    {
        "number": 859,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\n\nimport math\nfrom bisect import bisect_left"
    },
    {
        "number": 859,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"++-+-\", \"+-??\") == '0.000000000000'\nassert solution(\"+-++\", \"++-??\") == '0.500000000000'\nassert solution(\"+++\", \"??-\") == '0.000000000000'"
    },
    {
        "number": 859,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\n\"\"\""
    },
    {
        "number": 859,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('++-+-', '+-??') == '1.000000000000'\nassert solution('+-+-', '+-??') == '0.500000000000'\nassert solution('+++', '??-') == '0.000000000000'\n"
    },
    {
        "number": 859,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"++-+-\") == \"1.000000000000\"\nassert solution(\"+-??\") == \"0.500000000000\"\nassert solution(\"+++\") == \"0.000000000000\"\nassert solution(\"+---\") == \"0.500000000000\"\nassert solution(\"+-++\") == \"1.000000000000\"\n"
    },
    {
        "number": 859,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('++-+-') == '1.000000000000'\nassert solution('+-+-+') == '0.500000000000'\nassert solution('++-+-') == '0.500000000000'\nassert solution('++-+-') == '0.500000000000'\nassert solution('+++') == '0.500000000000'\n\n\n'''"
    },
    {
        "number": 860,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 860,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\n    \"\"\"\n5\n2 1 3 0 1\n\"\"\") == \"\"\"\nPossible\n4 5 1 3 2 \n\"\"\"\n\nassert solution(\n    \"\"\"\n9\n0 2 3 4 1 1 0 2 2\n\"\"\") == \"\"\"\nPossible\n7 5 2 1 6 8 3 4 9\n\"\"\"\n\nassert solution(\n    \"\"\"\n4\n0 2 1 1\n\"\"\") == \"\"\"\nImpossible\n\"\"\"\n\nassert solution(\n    \"\"\"\n9\n0 2 3 4 1 1 0 2 2\n\"\"\") == \"\"\"\nImpossible\n\"\"\"\n"
    },
    {
        "number": 860,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"5\\n2 1 3 0 1\") == \"Possible\\n4 5 1 3 2\"\nassert solution(\"9\\n0 2 3 4 1 1 0 2 2\") == \"Possible\\n7 5 2 1 6 8 3 4 9\"\nassert solution(\"4\\n0 2 1 1\") == \"Impossible\"\nassert solution(\"7\\n0 2 1 1\\n0 2 1 1\") == \"Impossible\"\nassert solution(\"7\\n0 2 1 1\\n0 2 1 1\\n0 2 1 1\") == \"Impossible\"\n"
    },
    {
        "number": 860,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\n    \"5\"\n) == \"Possible\\n4 5 1 3 2\"\n\nassert solution(\n    \"9\"\n) == \"Possible\\n7 5 2 1 6 8 3 4 9\"\n\nassert solution(\n    \"4\"\n) == \"Impossible\"\n\nassert solution(\n    \"0 2 3 4 1 1 0 2 2\"\n) == \"Possible\\n7 5 2 1 6 8 3 4 9\"\n\n\n-----\n\n\"\"\""
    },
    {
        "number": 860,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('5\\n2 1 3 0 1') == \"Possible\\n4 5 1 3 2\"\nassert solution('9\\n0 2 3 4 1 1 0 2 2') == \"Possible\\n7 5 2 1 6 8 3 4 9\"\nassert solution('4\\n0 2 1 1') == \"Impossible\"\nassert solution('9\\n0 2 1 1 0 2 2') == \"Impossible\"\nassert solution('4\\n0 2 1 1') == \"Impossible\"\n"
    },
    {
        "number": 860,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''5\n2 1 3 0 1''') == 'Possible\\n4 5 1 3 2\\n'\nassert solution('''9\n0 2 3 4 1 1 0 2 2''') == 'Possible\\n7 5 2 1 6 8 3 4 9\\n'\nassert solution('''4\n0 2 1 1''') == 'Impossible\\n'\nassert solution('''9\n0 2 3 4 1 1 0 2 2''') == 'Impossible\\n'\nassert solution('''5\n0 2 1 1''') == 'Impossible\\n'\n"
    },
    {
        "number": 860,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"7 5 2 1 6 8 3 4 9\\n0 2 3 4 1 1 0 2 2\") == \"Possible\\n7 5 2 1 6 8 3 4 9\"\nassert solution(\"9\\n0 2 3 4 1 1 0 2 2\\n1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1\") == \"Impossible\"\nassert solution(\"4\\n0 2 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\") == \"Possible\\n7 5 2 1 6 8 3 4 9\"\n"
    },
    {
        "number": 860,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''5\n2 1 3 0 1\n''') == 'Possible'\nassert solution('''9\n0 2 3 4 1 1 0 2 2\n''') == 'Possible'\nassert solution('''4\n0 2 1 1\n''') == 'Impossible'\nassert solution('''6\n0 2 1 1 1 2\n''') == 'Possible'\nassert solution('''8\n0 2 1 1 1 1 1 1 1\n''') == 'Possible'\n"
    },
    {
        "number": 860,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('0 0 0\\n0 0 0') == 'Possible'\nassert solution('0 0 0\\n1 0 1\\n0 1 1') == 'Possible'\nassert solution('0 0 0\\n1 1 1\\n0 1 1') == 'Possible'\nassert solution('0 0 0\\n1 0 1\\n0 1 1') == 'Possible'\nassert solution('0 0 0\\n1 1 1\\n0 1 1') == 'Possible'\n"
    },
    {
        "number": 860,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('5') == 'Possible\\n4 5 1 3 2'\nassert solution('9') == 'Possible\\n7 5 2 1 6 8 3 4 9'\nassert solution('4') == 'Impossible'\n"
    },
    {
        "number": 861,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1 1') == '2.0000000000'\nassert solution('2 2') == '5.4142135624'\nassert solution('2 2') == '5.4142135624'\nassert solution('5 2') == '8.77233884340'\nassert solution('10 2') == '22.56353838383'\n"
    },
    {
        "number": 861,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''1 1''') == \"2.0000000000\"\nassert solution('''2 2''') == \"5.4142135624\"\nassert solution('''2 3''') == \"3.4142135623\"\nassert solution('''1 10''') == \"3.4142135623\"\nassert solution('''100 100''') == \"46.1463225826\"\n"
    },
    {
        "number": 861,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == ''"
    },
    {
        "number": 861,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''1 1''') == '2.0000000000'\nassert solution('''2 2''') == '5.4142135624'"
    },
    {
        "number": 861,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"1 1\") == \"2.0000000000\"\nassert solution(\"2 2\") == \"5.4142135624\"\n"
    },
    {
        "number": 861,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('') == None\nassert solution('1 1') == None\nassert solution('2 2') == None\nassert solution('1 1') == 2.0\nassert solution('2 2') == 5.4142135624\n"
    },
    {
        "number": 861,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('1 1') == '2.0000000000'\nassert solution('2 2') == '5.4142135624'\n\n'''\n"
    },
    {
        "number": 861,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1 1') == '2.0000000000'\nassert solution('2 2') == '5.4142135624'\nassert solution('2 2') == '5.4142135624'\nassert solution('1 100') == '1.0000000000'\nassert solution('10 10') == '2.0000000000'\n"
    },
    {
        "number": 861,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1 1') == '2.0000000000'\nassert solution('2 2') == '5.4142135624'\n\n-----\n\nThe fly is one of the most interesting problems in the world of mathematics. It's hard to solve because of complex numbers.\n\nThink of a fly as a plane and a fly as a point.\n\nGiven the fly's position on the plane as an angle theta_fly and the fly's position on the circle as a parameter theta_circle, the fly makes a path from the center of the circle to the fly. The fly can move from the center of the circle to the fly in an angle that is less than the angle between the fly and the circle, but doesn't exceed the angle between the fly and the circle.\n\nThe fly will not cross the border of the circle.\n\nThe fly is not flying at a constant speed.\n\nThe fly is able to move at a constant speed.\n\nThe fly can reach the center of the circle in m days.\n\nThe fly can reach the center of the circle in m^2 days.\n\nIt is a nice problem to solve because it's an interesting problem.\n\n\n\n------#\n\n## My Solution"
    },
    {
        "number": 861,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == '2.0000000000'\n\n'''\n\nimport sys\n\ninput = sys.stdin.readlines()\nm, r = map(int, input[0].split())\n\nfly = 0\nfor i in range(m**2):\n    fly = (fly + m + 1 + i) % m\n    if fly == r:\n        print(i)\n        break\n"
    },
    {
        "number": 862,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == '3'\n"
    },
    {
        "number": 862,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == ''\n\n\n\"\"\"\n\nn = int(input())\na = [int(x) for x in input().split()]\n"
    },
    {
        "number": 862,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('4\\n2 3 2 0\\n') == '3'\nassert solution('2\\n10 10\\n') == '1'\nassert solution('6\\n5 2 6 5 7 4\\n') == '6'\nassert solution('6\\n5 2 6 5 7 4\\n') == '6'\nassert solution('4\\n2 3 2 0\\n') == '3'\n"
    },
    {
        "number": 862,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdin\nassert solution('''4\n2 3 2 0''') == '3'\nassert solution('''2\n10 10''') == '1'\nassert solution('''6\n5 2 6 5 7 4''') == '6'\nassert solution('''7\n9 2 8 3 7 4 6''') == '6'\n"
    },
    {
        "number": 862,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1\\n1') == '1'\nassert solution('1\\n2') == '3'\nassert solution('1\\n3') == '0'\nassert solution('1\\n10') == '1'\nassert solution('1\\n10\\n1') == '1'\n"
    },
    {
        "number": 862,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1\\n2\\n2\\n0\\n') == '3'\nassert solution('3\\n2 3 2 0\\n') == '3'\nassert solution('1\\n10 10\\n') == '1'\nassert solution('6\\n5 2 6 5 7 4\\n') == '6'\nassert solution('6\\n5 2 6 5 7 4\\n') == '6'\n\n\n\n\"\"\"\n\n\nfrom sys import stdin\n"
    },
    {
        "number": 862,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('1\\n3') == '1'\nassert solution('2\\n0') == '1'\nassert solution('2\\n3') == '1'\nassert solution('2\\n0') == '0'\nassert solution('4\\n2 3 2 0') == '3'\n"
    },
    {
        "number": 862,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == ''\nassert solution(stdin) == ''\nassert solution(stdin) == ''\nassert solution(stdin) == ''\nassert solution(stdin) == ''\n"
    },
    {
        "number": 862,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"2\\n2 3 2 0\") == \"3\"\nassert solution(\"2\\n10 10\") == \"1\"\nassert solution(\"2\\n5 2 6 5 7 4\") == \"6\"\nassert solution(\"6\\n5 2 6 5 7 4\") == \"6\"\nassert solution(\"3\\n10 10\") == \"1\"\n"
    },
    {
        "number": 862,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1\\n1\\n') == '0'\nassert solution('3\\n2 3 2 0\\n') == '3'\nassert solution('2\\n10 10\\n') == '1'\nassert solution('10\\n5 2 6 5 7 4\\n') == '6'\n\n\n-----Test cases------\nInput\n5\n2 3 2 0\n\nOutput\n3\n\nInput\n10\n10 10\n\nOutput\n1\n\nInput\n6\n5 2 6 5 7 4\n\nOutput\n6\n\nInput\n20\n
    },
    {
        "number": 863,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('10 30\\n10 35\\n05:20') == '5'\nassert solution('60 120\\n24 100\\n13:00') == '9'\nassert solution('10 30\\n10 35\\n05:40') == '5'\nassert solution('60 120\\n24 100\\n13:40') == '9'\nassert solution('60 120\\n24 100\\n13:00') == '9'\n"
    },
    {
        "number": 863,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(input()) == output\n\"\"\"\n"
    },
    {
        "number": 863,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 863,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(input) == output\n"
    },
    {
        "number": 863,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('10 30') == '5'\nassert solution('60 120') == '9'\nassert solution('60 120') == '9'\nassert solution('60 120') == '9'\nassert solution('60 120') == '9'\n"
    },
    {
        "number": 863,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('10 30') == '5'\nassert solution('60 120') == '9'\nassert solution('60 120') == '9'\n\nassert solution('10 30') == '5'\nassert solution('60 120') == '9'\n"
    },
    {
        "number": 863,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('10 30') == '5'\nassert solution('60 120') == '9'\nassert solution('60 120') == '9'\nassert solution('20 10') == '5'\nassert solution('100 120') == '9'\n"
    },
    {
        "number": 863,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(input()) == output\n\n\"\"\"\n\na, t_a = map(int, stdin.split(' '))\nb, t_b = map(int, stdin.split(' '))\n\nt_simion = int(stdin.split(' ')[2])\nt_simion_min = t_simion % 60\n\nprint(((t_a * a) + (t_b * b)) / (a + b) + t_simion_min)"
    },
    {
        "number": 863,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(input()) == output\n\"\"\"\n\n\"\"\"\nThere is a bus running on a circular track, the numbers written on the bus go from 1 to n in a clockwise direction.\n\nA bus driver drives from the station to the bus stop, and this takes s seconds. The bus arrives at the bus stop by a bus driver walking from the bus stop to the station.\n\nThe bus driver can walk one minute faster than the bus.\n\nThe bus driver wants to know how many minutes it will take him to walk from the bus stop to the station.\n\nThe bus stops are represented by a circular track, with n stops numbered from 1 to n. The bus drivers start at the first stop and arrive at the last stop.\n\nFor example, if n = 4, the bus driver can make this circuit:\n\n    1---2---3---4\n\nThe bus driver will walk one minute, and stop at the bus stop in 2 minutes.\n\nA bus driver goes from the first stop to the last stop once in exact s seconds, and then returns to the first stop to complete the circuit.\n\nWrite a function solution(n, s) that, given the number of stops n and the bus driver's initial position, will return the number of minutes he will walk to the bus stop.\n\nIf there is no such bus stop, return -1 instead.\n\nFor example, if n = 4 and s = 60, then the function should return 2 because, in the figure above, the bus driver will walk to the bus stop in 2 minutes.\n\nAssume that the bus driver will never pass through a bus stop or the number of stops is a positive integer.\n\nHint:\n\nThe solution is an easy one, but it will give you a wrong answer for some rather large values of n and s. It is better to use a more efficient solution.\n\n-----\n\nUseless code here, I think\n\n\"\"\""
    },
    {
        "number": 863,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(input()) == output\n\n\"\"\"\n\na, t_a = map(int, input().split())\nb, t_b = map(int, input().split())\nt_a, t_b = (t_a + 60) % 1440, (t_b + 60) % 1440\nprint(max(0, min(a, t_a) - max(b, t_b) + 1))\n"
    },
    {
        "number": 864,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 864,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 864,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('4 10\\n1 5 2 1 1 1 2 5 7 2\\n') == '2'\nassert solution('4 1\\n1\\n') == '0'\nassert solution('4 1\\n1\\n4\\n2 2 3 3\\n') == '1'\nassert solution('1 1\\n1\\n') == '0'\nassert solution('1 1\\n1\\n4\\n1\\n') == '1'\n"
    },
    {
        "number": 864,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 864,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1 10\\n1 5 2 1 1 1 2 5 7 2') == '2'\nassert solution('2 5\\n5 4 3 2 1\\n1') == '1'\nassert solution('100 1\\n1') == '0'\nassert solution('4 9\\n42 42 42 42 42 42 42 42 42\\n42 42 42 42 42 42 42 42 42') == '3'\nassert solution('3 9\\n42 42 42 42 42 42 42 42 42\\n42 42 42 42 42 42 42 42 42') == '1'\n"
    },
    {
        "number": 864,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('5 10\\n1 5 2 1 1 1 2 5 7 2\\n') == '2'\nassert solution('100 1\\n1\\n') == '0'\nassert solution('2 5\\n5 4 3 2 1\\n') == '1'\nassert solution('3 9\\n42 42 42 42 42 42 42 42 42\\n') == '3'\nassert solution('3 3\\n1 2 1\\n') == '0'\n"
    },
    {
        "number": 864,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1 0\") == \"\"\nassert solution(\"4 1\") == \"0\"\nassert solution
    },
    {
        "number": 864,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''4 10\n1 5 2 1 1 1 2 5 7 2''') == '2'\nassert solution('''100 1\n1''') == '0'\nassert solution('''2 5\n5 4 3 2 1''') == '1'\nassert solution('''3 9\n42 42 42 42 42 42 42 42 42\n''') == '3'\n'''\n"
    },
    {
        "number": 864,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1\\n1') == '0'\nassert solution('1\\n2') == '0'\nassert solution('1\\n3') == '0'\nassert solution('2\\n1') == '0'\nassert solution('3\\n1') == '1'\n"
    },
    {
        "number": 864,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('2 5') == '1'\nassert solution('100 1') == '0'\nassert solution('42 42 42 42 42 42 42 42') == '3'\nassert solution('1 1 1 1 1 1 1 1 1 1') == '1'\nassert solution('1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 865,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('2 60\\n10 10\\n100 100') == 110\nassert solution('2 60\\n10 10\\n10 10') == 10\nassert solution('2 60\\n10 10\\n10 10\\n10 10') == 110\nassert solution('2 60\\n10 10\\n10 10\\n10 10\\n10 10') == 110\nassert solution('1 1\\n1') == 1\n"
    },
    {
        "number": 865,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 865,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"2 60\\n10 10\\n100 100\") == 110\nassert solution(\"2 60\\n10 10\\n10 10\") == 10\nassert solution(\"2 60\\n10 10\\n1 1\") == 100\nassert solution(\"2 60\\n10 10\\n1 1\\n1 1\") == 60\nassert solution(\"2 60\\n10 10\\n10 10\\n10 10\") == 100\n"
    },
    {
        "number": 865,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('2 60') == '110'"
    },
    {
        "number": 865,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''2 60\n10 10''') == 110\nassert solution('''2 60\n10 10\n100 100''') == 110\nassert solution('''2 3\n1 2\n2 1\n3 1''') == 2\nassert solution('''2 3\n1 2\n2 1\n3 1\n4 1''') == 1\nassert solution('''2 3\n1 2\n1 2\n3 1\n4 1''') == 0\n"
    },
    {
        "number": 865,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('2 60\\n10 10\\n100 100') == '110'\nassert solution('5 1\\n10 100') == '110'\nassert solution('3 2\\n5 10\\n5 25') == '100'\nassert solution('3 5\\n1 10\\n2 25\\n3 50') == '100'\nassert solution('2 5\\n1 10\\n2 25\\n3 50') == '0'\n"
    },
    {
        "number": 865,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''2 60\n10 10\n100 100''') == '110'\nassert solution('''3 5\n1 2\n2 3\n1 4\n1 5''') == '15'\n'''"
    },
    {
        "number": 865,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('10 60') == '110'\nassert solution('100 100') == '110'\nassert solution('10 10') == '110'\nassert solution('20 100') == '110'\nassert solution('20 50') == '110'\n"
    },
    {
        "number": 865,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('10 60') == '110'\nassert solution('20 35') == '120'\nassert solution('2 60') == '110'\nassert solution('10 30') == '50'\nassert solution('5 60') == '50'\n"
    },
    {
        "number": 865,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(input(\"\")) == output\n"
    },
    {
        "number": 866,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('3 3') == 2\nassert solution('3 5') == 6\nassert solution('2 2') == 2\nassert solution('1 1') == 1\nassert solution('1 7') == 0\n"
    },
    {
        "number": 866,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('3 3') == '2'\nassert solution('4 2') == '0'\nassert solution('3 4') == '1'\nassert solution('1000 1000') == '0'\n\"\"\"\n"
    },
    {
        "number": 866,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"3 3\") == \"2\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"1 10\") == \"0\"\nassert solution(\"10 10\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 866,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n\n\"\"\"\n-----SOLUTION-----\n\nIn order to solve the problem, we must find all the \"steps\" (we are at the origin of the knight)\nthen find all the possible moves from each step. Finally, we count the number of ways modulo\n10^9 + 7.\n\nModular arithmetic allows us to solve this efficiently. In addition,\nwe are given the number of moves for each step, so we can find the number of moves for\nall steps. To find the number of ways, we start with the number of ways for the origin,\nand divide by the number of moves for each step.\n\"\"\"\n"
    },
    {
        "number": 866,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('3 3') == '2'\nassert solution('3 3') == '2'\nassert solution('7 7') == '0'\nassert solution('1 2') == '0'\nassert solution('10000000000000 1000000000') == '0'\n"
    },
    {
        "number": 866,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('3 3') == '2'\nassert solution('1 1') == '1'\nassert solution('0 0') == '0'\nassert solution('3 10') == '2640'\n'''"
    },
    {
        "number": 866,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('') == None\nassert solution(' ') == None\nassert solution('1') == None\nassert solution('-1') == None\nassert solution('0 0') == None\n"
    },
    {
        "number": 866,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"2 2\") == \"2\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"3 3\") == \"2\"\n\"\"\"\n\"\"\"\nNotes:\n- recursion by induction:\n    - if we have a matrix of size nxn, where i>=n, the knight has already been at the (i,j) square\n    - if we have a knight at the (i,j) square, we can go to either (i+1,j+2) or (i+2, j+1)\n- Since the matrix is of size nxn, we can consider each element of the matrix to be a graph.\n- the sum of all the elements in a matrix is the sum of all the sub-matrices in the original matrix.\n- if the sum is a multiple of 10^9 + 7, we can add 1 to the count.\n- Since the sub-matrix is of size n, we can compute the sub-matrix sum in O(n) time\n- O(n^2) time, O(n) space\n\"\"\"\n"
    },
    {
        "number": 866,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"3 3\") == \"2\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"10 10\") == \"1\"\nassert solution(\"100 100\") == \"1\"\nassert solution(\"1000000 10000000\") == \"1\"\n"
    },
    {
        "number": 866,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1 2') == '2'\nassert solution('5 6') == '3'\nassert solution('3 4') == '2'\nassert solution('2 2') == '1'\nassert solution('10 10') == '8'\n"
    },
    {
        "number": 867,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('') == None\nassert solution('1') == None\nassert solution('1\\n1') == None\nassert solution('2\\n1') == None\nassert solution('2\\n2') == None\n"
    },
    {
        "number": 867,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"4\") == \"2\"\nassert solution(\"4\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 867,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == 1\n\n\n\n'''\n\nfrom sys import stdin\n"
    },
    {
        "number": 867,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 867,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1') == '1'\nassert solution('4') == '2'\nassert solution('4') == '2'\nassert solution('5') == '2'\nassert solution('10') == '5'\n"
    },
    {
        "number": 867,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('4') == '2'\nassert solution('2') == '1'\nassert solution('5') == '3'\nassert solution('20') == '6'\nassert solution('100') == '49'\n\n\n\"\"\""
    },
    {
        "number": 867,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('') == 0\nassert solution('4') == 0\nassert solution('1') == 0\nassert solution('3') == 0\nassert solution('5') == 1\n"
    },
    {
        "number": 867,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1') == '1'\nassert solution('1\\n2') == '1'\nassert solution('1\\n2\\n3') == '1'\nassert solution('1\\n2\\n3\\n4') == '1'\nassert solution('1\\n2\\n3\\n4\\n5') == '1'\n"
    },
    {
        "number": 867,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '2'\nassert solution(stdin) == '4'\nassert solution(stdin) == '8'\nassert solution(stdin) == '16'\n"
    },
    {
        "number": 867,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1') == '1'\nassert solution('4') == '2'\nassert solution('9') == '5'\nassert solution('25') == '9'\nassert solution('13') == '6'\n"
    },
    {
        "number": 868,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"8\"\nassert solution(\"2\") == \"4\"\nprint('Test success!')\n"
    },
    {
        "number": 868,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('2') == '4'\nassert solution('1') == '8'\nassert solution('5') == '4'\nassert solution('10') == '1'\nassert solution('100') == '0'\n"
    },
    {
        "number": 868,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"8\"\nassert solution(\"2\") == \"4\"\nprint(solution(stdin))"
    },
    {
        "number": 868,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1\\n') == '8'\nassert solution('2\\n') == '4'\nassert solution('1\\n') == '8'\nassert solution('2\\n') == '4'\nassert solution('1\\n') == '8'\n"
    },
    {
        "number": 868,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"8\"\nassert solution(\"2\") == \"4\"\nassert solution(\"1378\") == \"8\""
    },
    {
        "number": 868,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(1) == '8'\nassert solution(2) == '4'\nassert solution('1') == '8'\nassert solution('2') == '4'\n\n\"\"\"\n"
    },
    {
        "number": 868,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"8\"\nassert solution(\"2\") == \"4\"\n\n\"\"\""
    },
    {
        "number": 868,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('') == None\nassert solution('1') == 8\nassert solution('2') == 4\nassert solution('3') == 3\nassert solution('4') == 1\n"
    },
    {
        "number": 868,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1\\n') == '8'\nassert solution('2\\n') == '4'\nassert solution('0\\n') == '0'\nassert solution('100000000\\n') == '8'\n\n\"\"\"\n"
    },
    {
        "number": 868,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(1) == \"8\"\nassert solution(2) == \"4\"\nprint(solution(int(stdin.readline().strip())))\n"
    },
    {
        "number": 869,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''3 1''') == '1 1'\nassert solution('''2 3''') == '2 0'\nassert solution('''7 3''') == '3 2'\nassert solution('''10 7''') == '3 2'\n\n\n\"\"\"\n"
    },
    {
        "number": 869,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"3 1\") == \"1 1\"\nassert solution(\"2 3\") == \"2 0\"\nassert solution(\"7 3\") == \"3 2\"\n\"\"\"\nfrom collections import Counter\nfrom typing import List\n\nRED, BLUE = 1, 2\n"
    },
    {
        "number": 869,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('3 1') == '1 1'\nassert solution('2 3') == '2 0'\nassert solution('7 3') == '3 2'\nassert solution('7 3') == '3 2'\nassert solution('7 3') == '3 2'\n"
    },
    {
        "number": 869,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('3 1') == '1 1'\nassert solution('2 3') == '2 0'\nassert solution('7 3') == '3 2'\n\n\n'''\n"
    },
    {
        "number": 869,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(input(\"\")) == '1 1'\nassert solution(input(\"\")) == '2 0'\nassert solution(input(\"\")) == '3 2'\nassert solution(input(\"\")) == '2 1'\nassert solution(input(\"\")) == '4 2'\n"
    },
    {
        "number": 869,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('2 1') == '2 0'\nassert solution('3 1') == '2 1'\nassert solution('7 3') == '3 2'\nassert solution('7 2') == '3 1'\nassert solution('7 3') == '3 2'\n"
    },
    {
        "number": 869,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('3 1') == '1 1'\nassert solution('2 3') == '2 0'\nassert solution('7 3') == '3 2'\nassert solution('7 3') == '3 2'\nassert solution('8 1') == '7 0'\n"
    },
    {
        "number": 869,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('3 1') == '1 1'\nassert solution('2 3') == '2 0'\nassert solution('7 3') == '3 2'\nassert solution('7 4') == '4 3'\nassert solution('7 6') == '4 5'\n"
    },
    {
        "number": 869,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"3 1\") == \"1 1\"\nassert solution(\"2 3\") == \"2 0\"\nassert solution(\"7 3\") == \"3 2\"\n\nprint(solution(\"3 1\"))\nprint(solution(\"2 3\"))\nprint(solution(\"7 3\"))\n\n\"\"\"\n"
    },
    {
        "number": 869,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('2 3') == '2 0'\nassert solution('3 1') == '1 1'\nassert solution('7 3') == '3 2'\nassert solution('8 3') == '0 0'\n\n\n-----\n\n\"\"\"\n"
    },
    {
        "number": 870,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('2 6 2 2') == '1.00000000000000000000'\nassert solution('1 9 1 2') == '2.66666666666666650000'\nassert solution('0 10 1 10') == '5.00000000000000000000'\nassert solution('1 1 1 1') == '1.00000000000000000000'\nassert solution('1 1 1 1') == '1.00000000000000000000'\n\n\n\"\"\"\n"
    },
    {
        "number": 870,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == \"\""
    },
    {
        "number": 870,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == expected\n\nprint(solution(stdin))"
    },
    {
        "number": 870,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == '2.66666666666666650000'\n\n\"\"\"\n\nimport sys\nfrom math import sqrt, floor"
    },
    {
        "number": 870,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1 9 1 2') == '2.66666666666666650000'\n\n\"\"\"\n"
    },
    {
        "number": 870,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\n\nfrom math import sqrt,floor"
    },
    {
        "number": 870,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('1 2 2 3') == '1.00000000000000000000'\nassert solution('1 9 1 2') == '2.66666666666666650000'\nassert solution('1 8 1 2') == '2.66666666666666650000'\nassert solution('1 10 1 2') == '2.66666666666666650000'\nassert solution('1 3 1 2') == '2.66666666666666650000'\n"
    },
    {
        "number": 870,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"2 6 2 2\") == \"1.00000000000000000000\"\nassert solution(\"1 9 1 2\") == \"2.66666666666666650000\"\n"
    },
    {
        "number": 870,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"2 6 2 2\") == \"1.00000000000000000000\"\nassert solution(\"1 9 1 2\") == \"2.66666666666666650000\"\nassert solution(\"1 8 1 2\") == \"2.3333333333333330000\"\nassert solution(\"2 9 1 2\") == \"1.00000000000000000000\"\nassert solution(\"2 8 1 2\") == \"2.66666666666666650000\"\n"
    },
    {
        "number": 870,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\n    \"\"\"\n    2 6 2 2\n    \"\"\") == \"1.00000000000000000000\"\n\nassert solution(\n    \"\"\"\n    1 9 1 2\n    \"\"\") == \"2.66666666666666650000\"\n\nassert solution(\n    \"\"\"\n    5 1 2 4\n    \"\"\") == \"0.5\"\n\nassert solution(\n    \"\"\"\n    7 5 2 3\n    \"\"\") == \"0.5\"\n\nassert solution(\n    \"\"\"\n    2 2 2 2\n    \"\"\") == \"1.00000000000000000000\""
    },
    {
        "number": 871,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''6 60\n0 0\n1 20\n3 21\n5 0\n19 30\n23 40''') == '6 1'\nassert solution('''16 50\n0 30\n1 20\n3 0\n4 30\n6 10\n7 50\n9 30\n11 10\n12 50\n14 30\n16 10\n17 50\n19 30\n21 10\n22 50\n23 59''') == '24 50'\nassert solution('''3 17\n0 30\n1 0\n12 0\n''') == '0 0'\nassert solution('''3 17\n0 30\n1 0\n12 0\n''') == '0 0'\n'''\n'''\n"
    },
    {
        "number": 871,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\n'''6 60\n0 0\n1 20\n3 21\n5 0\n19 30\n23 40'''\n) == '6 1'\n\nassert solution(\n'''16 50\n0 30\n1 20\n3 0\n4 30\n6 10\n7 50\n9 30\n11 10\n12 50\n14 30\n16 10\n17 50\n19 30\n21 10\n22 50\n23 59'''\n) == '24 50'\n"
    },
    {
        "number": 871,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''6 60\n0 0\n1 20\n3 21\n5 0\n19 30\n23 40\n''') == '6 1'\nassert solution('''16 50\n0 30\n1 20\n3 0\n4 30\n6 10\n7 50\n9 30\n11 10\n12 50\n14 30\n16 10\n17 50\n19 30\n21 10\n22 50\n23 59''') == '24 50'\nassert solution('''3 17\n0 30\n1 0\n12 0\n''') == '0 0'\nassert solution('''4 20\n0 30\n1 0\n2 40\n3 30\n4 30\n5 30\n6 30\n7 30\n8 30\n9 30\n10 30\n11 30\n12 30\n13 30\n14 30\n15 30\n16 30\n17 30\n18 30\n19 30\n20 30\n21 30\n22 30\n23 30\n''') == '23 30'\nassert solution('''3 22\n0 30\n1 0\n2 40\n3 30\n4 30\n5 30\n6 30\n7 30\n8 30\n9 30\n10 30\n11 30\n12 30\n13 30\n14 30\n15 30\n16 30\n17 30\n18 30\n19 30\n20 30\n21 30\n22 30\n23 30\n''') == '23 30'\n"
    },
    {
        "number": 871,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(input) == expected\n\n\n\n------\n\n[\n
    },
    {
        "number": 871,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdin.split('\\n')[0]\n"
    },
    {
        "number": 871,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(input()) == ''\n\"\"\"\n"
    },
    {
        "number": 871,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''6 60\n0 0\n1 20\n3 21\n5 0\n19 30\n23 40\n''') == '6 1'\nassert solution('''16 50\n0 30\n1 20\n3 0\n4 30\n6 10\n7 50\n9 30\n11 10\n12 50\n14 30\n16 10\n17 50\n19 30\n21 10\n22 50\n23 59\n''') == '24 50'\nassert solution('''3 17\n0 30\n1 0\n12 0\n''') == '0 0'\n\n'''"
    },
    {
        "number": 871,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdin[:-1]\n\n\n\n-----\n\n## Codility \n\n## 6.0/10.0/100\n\nThe time is more or less back. You can approach the problem, but if your brain is going to be as fast as it can, maybe it is better to work with bigger problems.\n\nOne really interesting observation is that the number of landings on the schedule is more or less the same as the number of landings in the future.\n\nSince the airplane takes one minute to start flying and land, we can assume that the time for all landings is equal to the time for the takeoff.\n\nThus we can write the code as follows:\n"
    },
    {
        "number": 871,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('4 60') == '0 0'\nassert solution('6 50') == '0 50'\nassert solution('3 17') == '0 0'\nassert solution('16 50') == '24 50'\nassert solution('6 60') == '0 0'"
    },
    {
        "number": 871,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''6 60\n0 0\n1 20\n3 21\n5 0\n19 30\n23 40''') == '6 1'\nassert solution('''16 50\n0 30\n1 20\n3 0\n4 30\n6 10\n7 50\n9 30\n11 10\n12 50\n14 30\n16 10\n17 50\n19 30\n21 10\n22 50\n23 59''') == '24 50'\nassert solution('''3 17\n0 30\n1 0\n12 0\n''') == '0 0'\n'''\n"
    },
    {
        "number": 872,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''\n3\n4 1 7\n''') == '1 4 7'\nassert solution('''\n2\n1 1\n''') == '1 1'\nassert solution('''\n3\n3 1 1\n''') == '1 3 1'\n'''\n"
    },
    {
        "number": 872,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"1 2 3\") == \"1 2 3\"\nassert solution(\"1 1\") == \"1 1\"\nassert solution(\"2 1\") == \"1 1\"\nassert solution(\"1 1 1\") == \"1 1 1\"\nassert solution(\"1 1 1 1\") == \"1 1 1 1\"\n"
    },
    {
        "number": 872,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\n\nTestcases\n\n---\n\n## C#\n\n```csharp\nusing System;\nusing System.Collections.Generic;\n\nnamespace PigeonHole {\n\npublic class Solution {\n    public String[] answer(int n, int[] a) {\n        int[] ans = new int[n];\n        for (int i = 0; i < n; i++) {\n            int num = a[i];\n            ans[i] = num;\n            for (int j = 0; j < i; j++) {\n                if (num + ans[j] == 1 || num + ans[j] == 3) {\n                    ans[i], ans[j] = ans[j], ans[i];\n                    break;\n                }\n            }\n        }\n        String[] temp = new String[ans.Length];\n        for (int i = 0; i < ans.Length; i++) {\n            temp[i] = (char)(ans[i] +'');\n        }\n        return temp;\n    }\n}"
    },
    {
        "number": 872,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(input()) == \"1 4 7\"\nassert solution(input()) == \"1 1\"\n\"\"\""
    },
    {
        "number": 872,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdin\n'''\n"
    },
    {
        "number": 872,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdin\n\"\"\"\n\nn = int(input())\nl = [int(x) for x in input().split()]\nl = l[:n]\nl = sorted(l)\nprint(*l)\n"
    },
    {
        "number": 872,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('1\\n1') == '1 1'\nassert solution('2\\n1 1') == '1 1'\nassert solution('3\\n2 1') == '1 2'\nassert solution('4\\n1 1') == '1 1'\nassert solution('5\\n2 1') == '1 2'\n"
    },
    {
        "number": 872,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"1 4 7\\n1 1\\n\") == \"1 4 7\\n1 1\\n\"\nassert solution(\"2\\n1 1\\n\") == \"1 1\\n\"\nassert solution(\"1 1\\n\") == \"1 1\\n\"\nassert solution(\"1 1\\n1 1\\n\") == \"1 1\\n\"\nassert solution(\"1 1\\n1 1\\n\") == \"1 1\\n\"\n\n\n\"\"\""
    },
    {
        "number": 872,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1 2 3 4 5') == '1 4 2 5 3'\nassert solution('1 1') == '1 1'\nassert solution('4 1 7') == '1 4 7'\nassert solution('2 1') == '1 2'\nassert solution('1 1 2 1 2') == '1 1 2 2 2'\n"
    },
    {
        "number": 872,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"1 2 3\\n4 5 6\\n7 8 9\\n\") == \"1 4 7\\n7 6 5\\n5 3 2\"\nassert solution(\"1 1\\n1 1\\n\") == \"1 1\"\nassert solution(\"2\\n1 1\\n\") == \"1 1\"\nassert solution(\"10\\n99 1\\n9 2\\n8 3\\n\") == \"99 9 9\\n8 9 8\\n9 8 1\""
    },
    {
        "number": 873,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == \"13\"\n"
    },
    {
        "number": 873,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''5\n82195\n64723''') == '13'\n\nassert solution('''3\n50454\n3243''') == '2'\n\nassert solution('''3\n10000\n1''') == '3'\n\nassert solution('''5\n92933\n96423''') == '13'\n\nassert solution('''5\n87654\n234''') == '7'"
    },
    {
        "number": 873,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 873,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(input) == answer\n\n\"\"\""
    },
    {
        "number": 873,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''5\n82195\n64723''') == '13'\nassert solution('''10\n58795\n54289\n''') == '25'\nassert solution('''7\n64874\n28352''') == '45'\nassert solution('''100\n93829\n53209\n''') == '89'"
    },
    {
        "number": 873,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('5\\n82195\\n64723') == '13'\nassert solution('3\\n123\\n456') == '2'\nassert solution('1\\n9\\n8') == '0'\nassert solution('1\\n8\\n9') == '2'\nassert solution('2\\n1\\n9') == '2'\n"
    },
    {
        "number": 873,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 873,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''5\n82195\n64723''') == '13'\n\nassert solution('''4\n2195\n1123\n''') == '5'\n\nassert solution('''6\n4123\n8989\n''') == '6'\n\nassert solution('''2\n4123\n8989\n''') == '3'\n\nassert solution('''3\n9123\n2989\n''') == '3'"
    },
    {
        "number": 873,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('5') == '13'\nassert solution('82195') == '13'\nassert solution('64723') == '13'\nassert solution('315437') == '13'\nassert solution('1231234') == '13'\n"
    },
    {
        "number": 873,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('486878') == '5'\nassert solution('54748') == '7'\nassert solution('8775') == '2'\nassert solution('9') == '3'\n"
    },
    {
        "number": 874,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('\\n') == ''\nassert solution('1') == '-1'\nassert solution('2') == '1 1'\nassert solution('3') == '1 2 2'\n"
    },
    {
        "number": 874,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''1''') == '-1'\nassert solution('''2''') == '2 1'\nassert solution('''4''') == '2 1 4 3'\nassert solution('''6''') == '2 1 4 3 6 5'\nassert solution('''10''') == '2 1 4 3 6 5 7 8 9 10'\n"
    },
    {
        "number": 874,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1') == '-1'\nassert solution('2') == '2 1'\nassert solution('4') == '2 1 4 3'\nassert solution('5') == '2 3 1 4'\nassert solution('6') == '2 3 4 1'\n"
    },
    {
        "number": 874,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1\\n') == '-1'\nassert solution('2\\n') == '2 1'\nassert solution('4\\n') == '2 1 4 3'\nprint(solution('5\\n'))\n"
    },
    {
        "number": 874,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"\") is None\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2 1\"\nassert solution(\"4\") == \"2 1 4 3\"\nassert solution(\"6\") == \"-1\"\n"
    },
    {
        "number": 874,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1') == '-1'\nassert solution('2') == '1 2'\nassert solution('4') == '2 1 4 3'\nprint(solution(stdin))\n\nassert solution('1') == '-1'\nassert solution('2') == '1 2'\n"
    },
    {
        "number": 874,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''1''') == '-1'\nassert solution('''2''') == '2 1'\nassert solution('''4''') == '2 1 4 3'\nassert solution('''10''') == '2 1 5 4 3 6 7 8 9 10'\nassert solution('''30''') == '10 9 8 7 6 5 4 3 2 1'\n"
    },
    {
        "number": 874,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1') == '-1'\nassert solution('2') == '2 1'\nassert solution('4') == '2 1 4 3'\nassert solution('123') == '2 1 3 2'\n"
    },
    {
        "number": 874,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''1''') == '1'\nassert solution('''2''') == '-1'\nassert solution('''4''') == '2 1 4 3'\nassert solution('''2''') == '2 1'\nassert solution('''3''') == '2 1 3'\n"
    },
    {
        "number": 874,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"-\"\nassert solution(\"2\") == \"2 1\"\nassert solution(\"4\") == \"2 1 4 3\""
    },
    {
        "number": 875,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('2 3 4\\n*aba\\na*ab\\na*ab\\na*ab\\na*ab\\na*ab\\na*ab') == '1'\nassert solution('2 3 4\\n*abc\\na*ab\\na*ab\\na*ab\\na*ab\\na*ab\\na*ab\\na*ab\\na*ab\\na*ab') == '-1'\nassert solution('1 2 3\\n*a*b\\na*b') == '-1'\n\n\n\"\"\""
    },
    {
        "number": 875,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == expected\nprint(solution(stdin))\n\"\"\"\nfrom itertools import combinations\n"
    },
    {
        "number": 875,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''2 3 4\n*aba\na*ab\nba*b\nabb*''') == '1\\n4 1'\nassert solution('''2 3 4\n*abc\na*ab\nba*b\ncbb*''') == '-1'\nassert solution('''2 3 4\n*abc\na*ab\nba*b\ncbb*''') == '-1'\nassert solution('''2 3 4\n*abc\na*ab\nba*b\nba*b\ncbb*''') == '-1'\nassert solution('''2 3 4\n*abc\na*ab\nba*b\na*ba\ncbb*''') == '1\\n2 3'\n"
    },
    {
        "number": 875,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''4\n2 3 4\n*abc\na*ab\nba*b\ncbb*\n''') == '1\\n4 1\\n'"
    },
    {
        "number": 875,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('input') == '4 1\\n1 4 1\\n2 3 2\\n3 1 2\\n1 2 3\\n3 1 2\\n2 3 2\\n4 1 1\\n1 4 1\\n2 3 2\\n3 1 2\\n1 2 3'\nassert solution('4 3 2') == '4 1\\n1 4 1\\n2 3 2\\n3 1 2\\n1 2 3'\nassert solution('2 3 1') == '1 1\\n2 2 1\\n2 1 1\\n3 2 1'\nassert solution('2 3 1') == '1 1\\n2 2 1\\n2 1 1\\n3 2 1'\nassert solution('2 3 1') == '1 1\\n2 2 1\\n2 1 1\\n3 2 1'\n"
    },
    {
        "number": 875,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('2 3 4\\n*aba\\na*ab\\na*b\\nabb*') == '1\\n4 1'\n\nassert solution('3\\n1 2 3') == '-1'\n\nassert solution('3\\n1 2 3\\n*aba\\na*ab\\na*b\\nabb*') == '1\\n4 1\\n1 2'\n\nassert solution('3\\n1 2 3\\na*ab\\na*b\\nabb*') == '1\\n4 1\\n1 2'\n\nassert solution('5\\n1 2 3 4 5\\n*abcd\\nacbd\\na*b\\nbac\\n*bac') == '1\\n3 1\\n1 2\\n1 3'"
    },
    {
        "number": 875,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('1\\n2\\n3\\n4\\n4\\n4') == '1\\n4 1\\n4 2\\n4 3\\n4 4\\n4 5\\n4 6\\n4 7\\n4 8\\n4 9\\n4 10\\n4 11\\n4 12\\n4 13\\n4 14\\n4 15\\n4 16\\n4 17\\n4 18\\n4 19\\n4 20\\n4 21\\n4 22\\n4 23\\n4 24\\n4 25\\n4 26\\n4 27\\n4 28\\n4 29\\n4 30\\n4 31\\n4 32\\n4 33\\n4 34\\n4 35\\n4 36\\n4 37\\n4 38\\n4 39\\n4 40\\n4 41\\n4 42\\n4 43\\n4 44\\n4 45\\n4 46\\n4 47\\n4 48\\n4 49\\n4 50\\n4 51\\n4 52\\n4 53\\n4 54\\n4 55\\n4 56\\n4 57\\n4 58\\n4 59\\n4 60\\n4 61\\n4 62\\n4 63\\n4 64\\n4 65\\n4 66\\n4 67\\n4 68\\n4 69\\n4 70\\n4 71\\n4 72\\n4 73\\n4 74\\n4 75\\n4 76\\n4 77\\n4 78\\n4 79\\n4 80\\n4 81\\n4 82\\n4 83\\n4 84\\n4 85\\n4 86\\n4 87\\n4 88\\n4 89\\n4 90\\n4 91\\n4 92\\n4 93\\n4 94\\n4 95\\n4 96\\n4 97\\n4 98\\n4 99\\n4 100\\n4 101\\n4 102\\n4 103\\n4 104\\n4 105\\n4 106\\n4 107\\n4 108\\n4 109\\n4 110\\n4 111\\n4 112\\n4 113\\n4 114\\n4 115\\n4 116\\n4 117\\n4 118\\n4 119\\n4 120\\n4 121\\n4 122\\n4 123\\n4 124\\n4 125\\n4 126\\n4 127\\n4 128\\n4 129\\n4 130\\n4 131\\n4 132\\n4 133\\n4 134\\n4 135\\n4 136\\n4 137\\n4 138\\n4 139\\n4 140\\n4 141\\n4 142\\n4 143\\n4 144\\n4 145\\n4 146\\n4 147\\n4 148\\n4 149\\n4 150\\n4 151\\n4 152\\n4 153\\n4 154\\n4 155\\n4 156\\n4 157\\n4 158\\n4 159\\n4 160\\n4 161\\n4 162\\n4 163\\n4 164\\n4 165\\n4 166\\n4 167\\n4 168\\n4 169\\n4 170\\n4 171\\n4 172\\n4 173\\n4 174\\n4 175\\n4 176\\n4 177\\n4 178\\n4 179\\n4 180\\n4 181\\n4 182\\n4 183\\n4 184\\n4 185\\n4 186\\n4 187\\n4 188\\n4 189\\n4 190\\n4 191\\n4 192\\n4 193\\n4 194\\n4 195\\n4 196\\n4 197\\n4 198\\n4 199\\n4 200\\n4 201\\n4 202\\n4 203\\n4 204\\n4 205\\n4 206\\n4 207\\n4 208\\n4 209\\n4 210\\n4 211\\n4 212\\n4 213\\n4 214\\n4 215\\n4 216\\n4 217\\n4 218\\n4 219\\n4 220\\n4 221\\n4 222\\n4 223\\n4 224\\n4 225\\n4 226\\n4 227\\n4 228\\n4 229\\n4 230\\n4 231\\n4 232\\n4 233\\n4 234\\n4 235\\n4 236\\n4 237\\n4 238\\n4 239\\n4 240\\n4 241\\n4 242\\n4 243\\n4 244\\n4 245\\n4 246\\n4 247\\n4 248\\n4 249\\n4 250\\n4 251\\n4 252\\n4 253\\n4 254\\n4 255\\n4 256\\n4 257\\n4 258\\n4 259\\n4 260\\n4 261\\n4 262\\n4 263\\n4 264\\n4 265\\n4 266\\n4 267\\n4 268\\n4 269\\n4 270\\n4 271\\n4 272\\n4 273\\n4 274\\n4 275\\n4 276\\n4 277\\n4 278\\n4 279\\n4 280\\n4 281\\n4 282\\n4 283\\n4 284\\n4 285\\n4 286\\n4 287\\n4 288\\n4 289\\n4 290\\n4 291\\n4 292\\n4 293\\n4 294\\n4 295\\n4 296\\n4 297\\n4 298\\n4 299\\n4 300\\n4 301\\n4 302\\n4 303\\n4 304\\n4 305\\n4 306\\n4 307\\n4 308\\n4 309\\n4 310\\n4 311\\n4 312\\n4 313\\n4 314\\n4 315\\n4 316\\n4 317\\n4 318\\n4 319\\n4 320\\n4 321\\n4 322\\n4 323\\n4 324\\n4 325\\n4 326\\n4 327\\n4 328\\n4 329\\n4 330\\n4 331\\n4 332\\n4 333\\n4 334\\n4 335\\n4 336\\n4 337\\n4 338\\n4 339\\n4 340\\n4 341\\n4 342\\n4 343\\n4 344\\n4 345\\n4 346\\n4 347\\n4 348\\n4 349\\n4 350\\n4 351\\n4 352\\n4 353\\n4 354\\n4 355\\n4 356\\n4"
    },
    {
        "number": 875,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1 2 3\\n*ab\\na*b\\nba*b\\nabb*') == '1 4 1\\n4 1'\nassert solution('1 2 3\\n*abc\\na*b\\nba*b\\nbbb*') == '1 4 1\\n4 1'\nassert solution('3 2\\n*c\\n*c\\nc*c') == '-1'\nassert solution('1 2 3\\n*c\\n*c\\nc*c') == '1 1'\nassert solution('1 2 3\\n*c\\n*c\\ncc*c') == '1 2'\n"
    },
    {
        "number": 875,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(input(\"\")) == output\n"
    },
    {
        "number": 875,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"\"\"4\n2 3 4\n*abc\na*ab\nba*b\nabb*\n\"\"\") == \"1\\n4 1\\n\"\nassert solution(\"\"\"4\n2 3 4\n*abc\na*ab\nba*b\ncbb*\n\"\"\") == \"-1\""
    },
    {
        "number": 876,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1 1') == '1'\nassert solution('1 0 1') == '0'\nassert solution('1 1 1') == '2'\nassert solution('1 1 1 1') == '3'\nassert solution('1 0 1 1') == '0'\n"
    },
    {
        "number": 876,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 876,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1 1\\n1 1\\n') == '1'\nassert solution('2 1\\n1 1\\n') == '0'\nassert solution('3 1\\n1 0 1\\n') == '2'"
    },
    {
        "number": 876,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"0 1\") == \"0\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"1 0\") == \"1\"\nassert solution(\"1 1 2\") == \"2\"\n"
    },
    {
        "number": 876,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''2 2\n1 1\n''') == '1'\nassert solution('''3 6\n1 1 1\n''') == '2'\n"
    },
    {
        "number": 876,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1 1') == '1'\nassert solution('2 1') == '1'\nassert solution('3 1') == '2'\nassert solution('5 1') == '2'\nassert solution('2 3') == '1'\n"
    },
    {
        "number": 876,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == str(0)\n"
    },
    {
        "number": 876,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 876,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''2 1\n1 1\n''') == '1'\nassert solution('''3 6\n1 1 1\n''') == '2'\nassert solution('''10 10\n1 2 4 8 16 32 64 128 256 512 1024\n''') == '6'\n'''\n"
    },
    {
        "number": 876,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"1 2\") == \"1\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"2 3\") == \"1\"\nassert solution(\"1 3\") == \"1\"\nassert solution(\"2 2\") == \"1\"\n"
    },
    {
        "number": 877,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1\\n1') == '1'\nassert solution('1\\n2\\n1') == '0'\nassert solution('2\\n1\\n1') == '1'\nassert solution('2\\n1\\n2\\n1') == '0'\nassert solution('2\\n2\\n1') == '1'\n"
    },
    {
        "number": 877,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''5 2\n1 4\n5 2\n''') == '2'\nassert solution('''3 3\n1 2\n2 3\n1 3\n''') == '0'\nassert solution('''3 2\n3 1\n3 2\n''') == '1'\n\n'''\n"
    },
    {
        "number": 877,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1 2\\n2 3\\n3 1\\n') == '1'\nassert solution('3 2\\n3 1\\n3 2\\n') == '0'\nassert solution('1 2\\n1 2\\n2 3\\n') == '0'\nassert solution('1 2\\n2 3\\n1 3\\n') == '1'\nassert solution('3 2\\n3 1\\n3 2\\n') == '0'\n"
    },
    {
        "number": 877,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('5 2') == '2'\nassert solution('3 3') == '0'\nassert solution('3 2') == '1'\n\n\n-----Answer-----\n\n\"\"\""
    },
    {
        "number": 877,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''5 2\n1 4\n5 2''') == '2'\nassert solution('''3 3\n1 2\n2 3\n1 3\n''') == '0'\nassert solution('''3 2\n3 1\n3 2\n''') == '1'\nassert solution('''3 2\n3 1\n3 2\n1 3\n''') == '1'\nassert solution('''10 10\n1 2\n1 3\n1 4\n2 5\n2 6\n3 7\n3 8\n3 9\n3 10\n4 5\n4 6\n4 7\n4 8\n4 9\n4 10\n5 6\n5 7\n5 8\n5 9\n5 10\n6 7\n6 8\n6 9\n6 10\n7 8\n7 9\n7 10\n8 9\n8 10\n9 10\n''') == '4'\n"
    },
    {
        "number": 877,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 877,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''5 2''') == '2'\nassert solution('''3 3''') == '0'\nassert solution('''3 2''') == '1'\n'''\nimport sys\nfrom functools import reduce\n"
    },
    {
        "number": 877,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"1\\n2\\n1\\n2\\n1\\n2\\n3\\n3\\n1\\n3\\n2\\n3\\n3\") == \"3\\n3\\n3\\n1\\n1\\n2\\n1\\n1\\n3\\n3\\n2\\n1\"\nassert solution(\"4\\n5\\n2\\n1\\n5\\n1\\n2\\n1\\n3\\n2\\n4\\n3\") == \"2\\n2\\n2\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n3\\n2\\n1\"\nassert solution(\"3\\n3\\n3\\n1\\n2\\n1\\n1\\n2\\n1\\n3\") == \"1\\n1\\n1\\n2\\n1\\n1\\n1\\n2\\n1\\n1\"\nassert solution(\"1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\") == \"3\\n3\\n3\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n2\\n1\\n1\"\nassert solution(\"2\\n3\\n3\\n1\\n1\\n2\\n2\\n1\\n2\\n2\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\") == \"0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\"\n\n\n-----"
    },
    {
        "number": 877,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''5 2\n1 4\n5 2''') == '2'\n\nassert solution('''3 3\n3 1\n3 2\n''') == '0'\n\nassert solution('''3 2\n3 1\n3 2\n''') == '1'\n\nassert solution('''7 9\n4 6\n6 8\n7 5\n5 2\n6 7\n8 9\n4 3\n4 1\n3 5\n7 1\n5 8\n6 4\n5 1\n3 3\n2 8\n2 3\n2 7\n1 5\n2 4\n2 2\n1 2\n1 1\n1 2\n1 7\n1 3\n1 5\n1 1\n1 6\n1 9\n1 4\n2 5\n2 4\n2 1\n2 6\n1 4\n1 5\n1 7\n1 3\n1 9\n1 2\n2 4\n2 9\n3 3\n3 8\n1 1\n1 7\n1 4\n1 2\n1 1\n1 1\n1 2\n1 1\n2 9\n2 7\n2 4\n2 1\n2 3\n2 8\n2 5\n2 2\n1 3\n1 1\n2 6\n2 6\n1 2\n1 1\n1 1\n1 1\n1 1\n2 8\n2 8\n1 4\n1 2\n1 6\n1 6\n1 9\n1 6\n1 4\n1 3\n1 9\n1 1\n1 8\n1 1\n2 9\n2 9\n2 4\n2 7\n2 8\n2 7\n1 5\n2 7\n2 2\n2 2\n1 3\n1 1\n1 1\n1 5\n1 1\n2 8\n2 3\n2 8\n2 8\n1 4\n1 1\n1 6\n1 9\n1 4\n1 3\n1 9\n1 2\n2 8\n2 6\n2 6\n1 2\n2 6\n1 8\n2 3\n2 2\n1 2\n1 1\n1 1\n1 8\n1 1\n2 8\n2 9\n2 8\n2 9\n1 9\n1 8\n2 4\n2 8\n1 3\n1 1\n2 4\n2 9\n2 9\n1 4\n1 4\n1 7\n1 4\n1 4\n1 3\n1 9\n1 7\n1 9\n1 6\n1 7\n1 7\n1 5\n1 6\n1 4\n1 2\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 2\n1 2\n1 2\n2 4\n2 4\n2 9\n2 9\n1 5\n2 5\n2 4\n1 2\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n2 9\n1 9\n1 8\n1 8\n1 8\n1 6\n1 4\n2 4\n2 8\n2 4\n1 4\n1 9\n2 9\n2 9\n1 7\n1 3\n1 9\n1 9\n1 9\n1 9\n1 6\n1 9\n1 9\n1 5\n1 5\n1 7\n1 1\n1 2\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n"
    },
    {
        "number": 877,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1 2') == '0'\nassert solution('3 2') == '1'\nassert solution('3 1') == '2'\nassert solution('5 3') == '0'\nassert solution('5 5') == '2'"
    },
    {
        "number": 878,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('3\\n2 1 3') == \"Finite\"\nassert solution('3\\n2 1 3') == \"Infinite\"\n\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 878,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''3\n2 1 3\n''') == \"Finite\"\nassert solution('''3\n1 2 3\n''') == \"Infinite\"\nassert solution('''3\n1 2 1\n''') == \"Finite\"\nassert solution('''3\n1 2 1\n''') == \"Finite\"\nassert solution('''3\n1 2 3\n''') == \"Finite\"\n"
    },
    {
        "number": 878,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 3 3 2 1\") == \"Finite\"\nassert solution(\"4\\n1 2 2 1\") == \"Infinite\"\n\n\n\"\"\"\n\n\nfrom sys import stdin, stdout"
    },
    {
        "number": 878,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1\\n2\\n3') == 'Finite'\nassert solution('1\\n2\\n3\\n4') == 'Infinite'\nassert solution('1\\n2\\n3\\n4\\n5') == 'Finite'\nassert solution('1\\n2\\n3\\n4\\n5\\n6') == 'Infinite'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7') == 'Finite'\n"
    },
    {
        "number": 878,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''3\n2 1 3''') == 'Finite'\nassert solution('''3\n1 2 3''') == 'Infinite'\nassert solution('''3\n1 2 1''') == 'Finite'\nassert solution('''10\n1 1 1 1 1 1 1 1 1 1''') == 'Finite'\nassert solution('''6\n1 1 2 2 2 2''') == 'Infinite'\n"
    },
    {
        "number": 878,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('3') == 'Infinite'\nassert solution('1 2 3') == 'Finite'\nassert solution('1 1 3') == 'Finite'\nassert solution('2 1 3') == 'Finite'\nassert solution('1 2 1') == 'Finite'\n"
    },
    {
        "number": 878,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('1\\n1') == 'Infinite'\nassert solution('2\\n1 2') == 'Infinite'\nassert solution('2\\n2 1') == 'Finite'\nassert solution('3\\n2 1 3') == 'Finite'\nassert solution('3\\n3 1 2') == 'Finite'\n"
    },
    {
        "number": 878,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\n    \"\"\"\n    2\n    2 1 3\n    \"\"\") == \"Finite\"\nassert solution(\n    \"\"\"\n    3\n    2 1 3\n    \"\"\") == \"Finite\"\nassert solution(\n    \"\"\"\n    3\n    2 1 3\n    \"\"\"\n) == \"Infinite\"\nassert solution(\n    \"\"\"\n    4\n    3 2 3 3\n    \"\"\") == \"Finite\"\nassert solution(\n    \"\"\"\n    4\n    3 2 3 1\n    \"\"\"\n) == \"Infinite\"\n"
    },
    {
        "number": 878,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''3\n2 1 3''') == \"Finite\"\nassert solution('''3\n1 2 3''') == \"Finite\"\nassert solution('''3\n2 1 1''') == \"Finite\"\nassert solution('''3\n3 2 3''') == \"Finite\"\nassert solution('''3\n2 3 2''') == \"Finite\"\n"
    },
    {
        "number": 878,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\n'''2\n1 2 3'''\n) == 'Finite'\n\n\nassert solution(\n'''4\n1 2 3 4'''\n) == 'Infinite'\n\n\nassert solution(\n'''6\n1 2 3 4 5 6'''\n) == 'Finite'\n\n\nassert solution(\n'''10\n2 1 3 4 5 6 7 8 9 10'''\n) == 'Finite'\n\n\nassert solution(\n'''12\n1 2 3 4 5 6 7 8 9 10 11 12'''\n) == 'Finite'\n"
    },
    {
        "number": 879,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1\\n1\\n2\\n2\\n3\\n3\\n4\\n4\\n5') == '1 3 7'\nassert solution('6\\n1 2 3 4 5\\n') == '1 3 5 6'\n"
    },
    {
        "number": 879,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"1 1 2 2 3 2 5\\n1 1 2 2 3 2 5\\n1 1 2 2 3 2 5\") == \"1 2 5 8\\n1 3 7\"\nassert solution(\"6\\n1 2 3 4 5\\n1 2 3 4 5\") == \"1 2 3 4 5 6\\n1 3 7\"\nassert solution(\"7\\n1 1 2 3 4 3\\n1 1 2 3 4 3\") == \"1 3 7\"\nassert solution(\"8\\n1 1 2 3 4 3 2\\n1 1 2 3 4 3 2\") == \"1 2 3 4 5 6 7 8\"\nassert solution(\"9\\n1 1 2 3 4 3 2 2\\n1 1 2 3 4 3 2 2\") == \"1 2 3 4 5 6 7 8 9\"\n"
    },
    {
        "number": 879,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\n    '''1 1 2 2 3 2 5'''\n) == '1 2 5 8'\nassert solution(\n    '''1 1 2 3 4 3'''\n) == '1 3 7'\nassert solution(\n    '''1 2 3 4 5'''\n) == '1 2 3 4 5'\nassert solution(\n    '''1 1 2 3 4 3'''\n) == '1 3 7'\nassert solution(\n    '''1 1 2 3 4 3'''\n) == '1 3 7'\n"
    },
    {
        "number": 879,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''8''') == '''1 2 5 8'''\nassert solution('''1 1 2 2 3 2 5''') == '''1 2 5 8'''\nassert solution('''6''') == '''1 2 3 4 5 6'''\nassert solution('''1 2 3 4 5''') == '''1 2 3 4 5 6'''\nassert solution('''7''') == '''1 3 7'''\n"
    },
    {
        "number": 879,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''1 1 2 2 3 2 5''') == '1 2 5 8'\nassert solution('''1 1 2 2 3 2 5''') == '1 2 5 8'\nassert solution('''6\n1 2 3 4 5\n''') == '1 2 3 4 5 6'\nassert solution('''7\n1 1 2 3 4 3\n''') == '1 3 7'"
    },
    {
        "number": 879,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"1 1 2 2 3 2 5\") == \"1 2 5 8\"\nassert solution(\"1 1 2 2 3 3 4\") == \"1 2 3 4 5 6\"\nassert solution(\"1 1 2 3 4 5\") == \"1 2 3 4 5 6\""
    },
    {
        "number": 879,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('1 1 2 2 3 2 5') == '1 2 5 8'\nassert solution('1 2 3 4 5') == '1 2 3 4 5 6'\nassert solution('1 1 2 2 3 4 3') == '1 3 7'\n"
    },
    {
        "number": 879,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"1 1 2 2 3 2 5\") == \"1 2 5 8\"\nassert solution(\"6\") == \"1 2 3 4 5 6\"\nassert solution(\"7\") == \"1 3 7\"\n"
    },
    {
        "number": 879,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1 2\"\nassert solution(\"3\") == \"1 2 3\"\nassert solution(\"4\") == \"1 2 3 4\"\n"
    },
    {
        "number": 879,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1 1 2 2 3 2 5') == '1 2 5 8'\nassert solution('1 2 3 4 5') == '1 2 3 4 5 6'\nassert solution('1 2 3 4 3') == '1 2 3 4 5 6'\n"
    },
    {
        "number": 880,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('3') == '6'\nassert solution('5') == '25'\nassert solution('7') == '175'\nassert solution('10') == '2730'\n\n\n\n'''\n"
    },
    {
        "number": 880,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('3') == '9'\nassert solution('4') == '56'\nassert solution('10') == '30052700'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 880,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('3') == '9'\nassert solution('4') == '56'\nassert solution('10') == '30052700'\n\n\n\n'''\n"
    },
    {
        "number": 880,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('3') == '9'\nassert solution('4') == '56'\nassert solution('10') == '30052700'\n\n'''\n"
    },
    {
        "number": 880,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('3') == '9'\nassert solution('4') == '56'\nassert solution('10') == '30052700'\n"
    },
    {
        "number": 880,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('3') == 9\nassert solution('4') == 56\nassert solution('10') == 30052700\n"
    },
    {
        "number": 880,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"9\"\nassert solution(\"4\") == \"56\"\nassert solution(\"10\") == \"30052700\"\n\n\"\"\"\n\nfrom math import factorial"
    },
    {
        "number": 880,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('3') == '9'\nassert solution('4') == '56'\nassert solution('10') == '30052700'\nprint(solution('10'))\n\n\"\"\"\nfrom math import factorial\n\nn = int(input())"
    },
    {
        "number": 880,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"9\"\nassert solution(\"4\") == \"56\"\nassert solution(\"10\") == \"30052700\"\nassert solution(\"1000\") == \"128972472\"\nassert solution(\"10000\") == \"142610462\"\n"
    },
    {
        "number": 880,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('3') == '9'\nassert solution('4') == '56'\nassert solution('10') == '30052700'\nassert solution('1000') == '14730758575'"
    },
    {
        "number": 881,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 881,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''5''') == '''2'''\nassert solution('''7''') == '''2'''\nassert solution('''3''') == '''3'''\nassert solution('''1''') == '''1'''\nassert solution('''1000''') == '''1'''"
    },
    {
        "number": 881,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1\\n3') == '1'\nassert solution('2\\n5') == '2'\nassert solution('4\\n3') == '2'\nassert solution('7\\n3') == '2'\nassert solution('3\\n3') == '1'\n"
    },
    {
        "number": 881,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"\"\nassert solution(\"1000\") == \"\"\nassert solution(\"5\") == \"\"\nassert solution(\"1000\") == \"\"\n"
    },
    {
        "number": 881,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('3\\n3\\n1') == '2'\nassert solution('4\\n3\\n4\\n3\\n3') == '2'\nassert solution('5\\n3\\n4\\n4\\n3\\n3') == '2'\nassert solution('7\\n3\\n4\\n4\\n4\\n3\\n3') == '2'\nassert solution('1\\n1000\\n') == '1'\n"
    },
    {
        "number": 881,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('5') == '2'\nassert solution('4 3 2 2 3') == '2'\nassert solution('7') == '2'\nassert solution('3 3 4 4 4 3 3') == '2'\nassert solution('1 3 5') == '3'\n"
    },
    {
        "number": 881,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 881,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4 5 6 7 8 9 10') == '1'\nassert solution('1 2 3 4 5 6 7 8 9 10') == '2'\nassert solution('1 2 3 4 5 6 7 8 9 10') == '3'\nassert solution('1 2 3 4 5 6 7 8 9 10') == '4'\n"
    },
    {
        "number": 881,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('4\\n4 3 2 2 3') == 2\nassert solution('7\\n3 3 4 4 4 3 3') == 2\nassert solution('3\\n1 3 5') == 3\nassert solution('1\\n1000') == 1\nassert solution('7\\n3 3 4 4 4 3 3') == 2\n"
    },
    {
        "number": 881,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('4\\n4 3 2 2 3\\n') == '2'\nassert solution('7\\n3 3 4 4 4 3 3\\n') == '2'\nassert solution('3\\n1 3 5\\n') == '3'\nassert solution('1\\n1000\\n') == '1'\n\n\"\"\"\n"
    },
    {
        "number": 882,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"winlose???winl???w??\") == \"5\"\nassert solution(\"glo?yto?e??an?\") == \"3\"\nassert solution(\"??c?????\") == \"2\"\nassert solution(\"gr?y\") == \"2\"\nassert solution(\"?o?y\") == \"2\"\n"
    },
    {
        "number": 882,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('winlose???winl???w??') == '5'\nassert solution('win') == '5'\nassert solution('glo?yto?e??an?') == '3'\nassert solution('??c?????') == '2'\nassert solution('abcab') == '2'\n"
    },
    {
        "number": 882,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"winlose???winl???w??\") == \"5\"\nassert solution(\"glo?yto?e??an?or\") == \"3\"\nassert solution(\"??c?????\") == \"2\"\nprint(\"tests passed\")\n\n\"\"\"\n"
    },
    {
        "number": 882,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('winlose???winl???w??') == '5'\nassert solution('win') == '5'\nassert solution('??c?????') == '3'\nassert solution('??c???') == '2'\nassert solution('??????') == '1'\n"
    },
    {
        "number": 882,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"??c?????\", \"abcab\") == \"2\"\nassert solution(\"??c?????\", \"glo?yto?e??an?\") == \"3\"\nassert solution(\"???w???????\", \"win\") == \"5\"\nassert solution(\"???w???????\", \"or\") == \"3\"\nassert solution(\"???w???????\", \"or?\") == \"2\"\n"
    },
    {
        "number": 882,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"winlose???winl???w??\") == \"5\"\nassert solution(\"win\") == \"5\"\nassert solution(\"glo?yto?e??an?c\") == \"3\"\nassert solution(\"??c?????\") == \"3\""
    },
    {
        "number": 882,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('') == 0\nassert solution('????') == 0\nassert solution('??????') == 0\nassert solution('???????') == 0\nassert solution('???') == 1\n"
    },
    {
        "number": 882,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"winlose???winl???w??\") == \"5\"\nassert solution(\"win\") == \"5\"\nassert solution(\"glo?yto?e??an?\") == \"3\"\nassert solution(\"??c?????\") == \"2\"\nassert solution(\"????t?????\") == \"3\"\n"
    },
    {
        "number": 882,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"winlose???winl???w??\") == \"5\"\nassert solution(\"win\") == \"5\"\nassert solution(\"glo?yto?e??an? \") == \"3\"\nassert solution(\"???c?????\") == \"2\"\nassert solution(\"??c?????\") == \"2\"\n"
    },
    {
        "number": 882,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('??c?????') == 'abcabcabc'\nassert solution('?o??e??n??b??b??a??b??a??b??a?') == 'or'\nassert solution('???j???t??t??h???a??b??a??b??a?k??g?g?l??v?n?d?z?n?') == 'abcthetakg'\nassert solution('???x???t??h???a??b??a??b??a?k??g?g?l??v?n?d?z?n?') == 'abcthetakg'\nassert solution('???l???') == 'l'\n"
    },
    {
        "number": 883,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('3\\n1 3 3') == '2'\nassert solution('3\\n2 3 4') == '3'\nassert solution('3\\n3 5 5') == '3'\nassert solution('3\\n3 3 3') == '1'\nassert solution('3\\n3 3 3') == '2'\n"
    },
    {
        "number": 883,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('1\\n1') == '3'\nassert solution('1\\n2') == '2'\nassert solution('2\\n3 5') == '3'\nassert solution('2\\n4 8') == '8'\nassert solution('2\\n6 9') == '9'\n"
    },
    {
        "number": 883,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1') == ''\nassert solution('1 2') == ''\nassert solution('1 2 3') == ''\nassert solution('1 2 3 4') == ''\n"
    },
    {
        "number": 883,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1\\n1') == '3'\nassert solution('2\\n3 5') == '3'\nassert solution('2\\n8 10') == '2'\nassert solution('3\\n7 8 9') == '5'\nassert solution('3\\n9 9 9') == '2'\n"
    },
    {
        "number": 883,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1\\n1') == '3'\nassert solution('2\\n2') == '2'\nassert solution('2\\n3 5') == '3'\nassert solution('2\\n1') == '2'\nassert solution('2\\n4') == '2'\n"
    },
    {
        "number": 883,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1\\n1') == '3'\nassert solution('1\\n2') == '2'\nassert solution('2\\n3 5') == '3'\n\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 883,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('2 1\\n1') == '1'\nassert solution('2 3\\n3') == '3'\nassert solution('2 3\\n3') == '3'\nassert solution('2 3\\n3 5') == '3'\nassert solution('5 3\\n1 1 1 1 1 1') == '0'\n"
    },
    {
        "number": 883,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1\\n1') == '3'\nassert solution('1\\n2') == '2'\nassert solution('1\\n3 5') == '3'\nassert solution('1\\n4') == '2'\nassert solution('1\\n5') == '1'\n"
    },
    {
        "number": 883,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1\\n1') == '3'\nassert solution('2\\n3 5') == '3'\nassert solution('2\\n4 5') == '2'\nassert solution('3\\n5') == '1'\nassert solution('3\\n6') == '0'\n"
    },
    {
        "number": 883,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"3\"\nassert solution(\"1\\n3\") == \"3\"\nassert solution(\"1\\n3\\n5\") == \"3\"\nassert solution(\"2\\n5\") == \"2\"\nassert solution(\"2\\n3\") == \"2\"\n"
    },
    {
        "number": 884,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1 1 1') == '8'\nassert solution('1 2 2') == '63'\nassert solution('1 3 5') == '3264'\nassert solution('6 2 9') == '813023575'\nprint(solution(stdin))"
    },
    {
        "number": 884,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('1 1 1') == '8'\nassert solution('1 2 2') == '63'\nassert solution('1 3 5') == '3264'\nassert solution('6 2 9') == '813023575'\n\n\n\"\"\"\n"
    },
    {
        "number": 884,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"1 1 1\") == \"8\"\nassert solution(\"1 2 2\") == \"63\"\nassert solution(\"1 3 5\") == \"3264\"\nassert solution(\"6 2 9\") == \"813023575\"\nassert solution(\"9 2 8\") == \"0\"\n"
    },
    {
        "number": 884,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''1 2 2''') == '63'\nassert solution('''1 3 5''') == '3264'\nassert solution('''6 2 9''') == '813023575'\n\n\n\n\n\nclass Tester(unittest.TestCase):\n    def test(self):\n        pass"
    },
    {
        "number": 884,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"1 1 1\") == \"8\"\nassert solution(\"1 2 2\") == \"63\"\nassert solution(\"1 3 5\") == \"3264\"\nassert solution(\"6 2 9\") == \"813023575\"\n\n\n\"\"\"\n\n\n\n\"\"\"\n\nThe Fire Sisters are ready for the unknown, but they'd also like to test your courage. And you're here to figure out the number of different ways to build all bridges under the constraints, and give the answer modulo 998 244 353. Two ways are considered different if a pair of islands exist, such that there's a bridge between them in one of them, but not in the other.\n\nIn the first example, there are 3 bridges that can possibly be built, and no setup of bridges violates the restrictions. Thus the answer is 2^3 = 8.\n\nIn the second example, the upper two structures in the figure below are instances of valid ones, while the lower two are invalid due to the blue and purple clusters, respectively. [Image]\n\n[Image] https://www.hackerrank.com/challenges/ctci-bridge-augmentation/download/108264089053/BridgeAugmentation.jpg"
    },
    {
        "number": 884,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1 1 1') == '8'\nassert solution('1 2 2') == '63'\nassert solution('1 3 5') == '3264'\nassert solution('6 2 9') == '813023575'\n\n\"\"\"\n"
    },
    {
        "number": 884,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1 1 1') == ''\nassert solution('1 2 2') == '63'\nassert solution('1 3 5') == '3264'\nassert solution('6 2 9') == '813023575'\n"
    },
    {
        "number": 884,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1 1 1') == '8'\nassert solution('1 2 2') == '63'\nassert solution('1 3 5') == '3264'\nassert solution('6 2 9') == '813023575'\nassert solution('2 2 2') == '0'\n"
    },
    {
        "number": 884,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == \"\"\n\"\"\"\n"
    },
    {
        "number": 884,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == \"8\"\n\n'''"
    },
    {
        "number": 885,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''2\n2 1\n''') == '3'\nassert solution('''3\n1 2\n2 3\n3 2\n''') == '11'\nassert solution('''4\n1 2\n2 3\n3 4\n4 2\n''') == '12'\nassert solution('''5\n1 2\n2 3\n3 4\n4 5\n5 2\n''') == '12'\nassert solution('''6\n1 2\n2 3\n3 4\n4 5\n5 6\n6 2\n''') == '10'\n"
    },
    {
        "number": 885,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''2\n2 1\n''') == '3'\nassert solution('''3\n1 2\n2 3\n''') == '11'\nassert solution('''4\n1 2\n1 3\n2 3\n1 4\n''') == '1'\nassert solution('''5\n1 2\n1 3\n1 4\n1 5\n2 3\n2 4\n2 5\n3 4\n3 5\n4 5\n''') == '1'\nassert solution('''6\n1 2\n1 3\n1 4\n1 5\n1 6\n2 3\n2 4\n2 5\n2 6\n3 4\n3 5\n3 6\n4 5\n4 6\n5 6\n''') == '1'\n"
    },
    {
        "number": 885,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\n'''\n2\n2 1\n'''\n) == '3'\n\nassert solution(\n'''\n3\n1 2\n3 2\n'''\n) == '11'\n\nassert solution(\n'''\n4\n1 2\n1 3\n2 3\n2 4\n'''\n) == '4'\n\nassert solution(\n'''\n5\n1 2\n1 3\n2 4\n3 4\n3 5\n4 5\n'''\n) == '4'\n\nassert solution(\n'''\n6\n1 2\n1 3\n1 4\n1 5\n1 6\n2 4\n2 5\n3 4\n3 5\n'''\n) == '7'"
    },
    {
        "number": 885,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\n\n'''\n"
    },
    {
        "number": 885,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''\n2\n2 1\n''') == '3'\nassert solution('''\n3\n1 2\n2 1\n3 2\n''') == '11'\nassert solution('''\n7\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n''') == '17'\nassert solution('''\n8\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n''') == '21'\nassert solution('''\n9\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n''') == '25'\n"
    },
    {
        "number": 885,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('2\\n2 1\\n3 2\\n') == 3\nassert solution('3\\n1 2\\n3 2\\n') == 11\nassert solution('7\\n5 3\\n3 6\\n6 5\\n5 7\\n7 6\\n7 2\\n1 2\\n3 4\\n') == 7\nassert solution('4\\n1 2\\n3 2\\n4 3\\n') == 1\nassert solution('9\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n7 9\\n8 9\\n') == 1\n"
    },
    {
        "number": 885,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"1\"\nassert solution(\"1 2\") == \"2\"\nassert solution(\"1 2 3\") == \"3\"\nassert solution(\"1 2 3 4\") == \"4\"\n"
    },
    {
        "number": 885,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('2\\n2 1') == 3\nassert solution('3\\n1 2\\n2 3') == 11\nassert solution('4\\n1 2\\n2 3\\n3 4') == 5\nassert solution('5\\n1 2\\n2 3\\n3 4\\n4 5') == 8\nassert solution('7\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7') == 1\n"
    },
    {
        "number": 885,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''\n2\n2 1\n''') == '3'\n\nassert solution('''\n3\n1 2\n2 3\n3 1\n''') == '11'\n\nassert solution('''\n4\n1 2\n2 3\n2 4\n1 3\n''') == '5'\n\nassert solution('''\n5\n1 2\n2 3\n3 4\n4 5\n1 2\n1 3\n1 4\n2 4\n2 3\n2 5\n''') == '5'\n\nassert solution('''\n6\n1 2\n1 3\n1 4\n2 4\n2 5\n1 4\n''') == '6'"
    },
    {
        "number": 885,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('2\\n2 1\\n') == '3'\nassert solution('3\\n1 2\\n3 2\\n') == '11'\nassert solution('3\\n1 2\\n3 2\\n') == '11'\nassert solution('3\\n1 2\\n3 2\\n') == '11'\nassert solution('3\\n1 2\\n2 1\\n') == '3'\n"
    },
    {
        "number": 886,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''527''') == '''572'''\nassert solution('''4573''') == '''3574'''\nassert solution('''1357997531''') == '''-1'''"
    },
    {
        "number": 886,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('527') == '572'\nassert solution('4573') == '3574'\nassert solution('1357997531') == '-1'\n"
    },
    {
        "number": 886,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"5\") == \"5\"\nassert solution(\"41\") == \"42\"\nassert solution(\"1023\") == \"1024\"\nassert solution(\"1001\") == \"0\"\n"
    },
    {
        "number": 886,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"9\") == \"9\"\nassert solution(\"1\") == \"-1\"\nassert solution(\"5\") == \"4\"\nassert solution(\"34\") == \"34\"\nassert solution(\"527\") == \"572\"\n"
    },
    {
        "number": 886,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"527\") == \"572\"\nassert solution(\"4573\") == \"3574\"\nassert solution(\"1357997531\") == \"-1\""
    },
    {
        "number": 886,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"527\") == \"572\"\nassert solution(\"4573\") == \"3574\"\nassert solution(\"1357997531\") == \"3574\"\nassert solution(\"1234\") == \"1234\"\nassert solution(\"13579975309\") == \"3574\"\n"
    },
    {
        "number": 886,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(input()) == output()\n"
    },
    {
        "number": 886,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\n'''527''') == '''572'''\nassert solution(\n'''4573''') == '''3574'''\nassert solution(\n'''1357997531''') == '''-1'''\nassert solution(\n'''1164986854''') == '''4654'''\nassert solution(\n'''362299992''') == '''4720'''\n"
    },
    {
        "number": 886,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('527') == '572'\nassert solution('4573') == '3574'\nassert solution('1357997531') == '-1'\nprint(solution(stdin))\nassert solution(stdin) == stdin"
    },
    {
        "number": 886,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"527\") == \"572\"\nassert solution(\"4573\") == \"3574\"\nassert solution(\"1357997531\") == \"-1\""
    },
    {
        "number": 887,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1') == 'YES'\nassert solution('1 0 1') == 'YES'\nassert solution('1 0 0') == 'NO'\nassert solution('1 0 1 1') == 'YES'\n"
    },
    {
        "number": 887,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdin\n\n\"\"\"\n"
    },
    {
        "number": 887,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 887,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 887,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 0 0 1\") == \"YES\"\nassert solution(\"4\\n1 0 0 1\") == \"YES\"\nassert solution(\"4\\n0 1 0 1\") == \"NO\"\nassert solution(\"4\\n0 0 1 0\") == \"NO\"\nassert solution(\"4\\n0 0 0 0\") == \"YES\"\n"
    },
    {
        "number": 887,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"1 0 1\") == \"YES\"\nassert solution(\"3\") == \"NO\"\n\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 887,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''3\n1 0 1\n''') == 'YES'\nassert solution('''3\n1 0 0\n''') == 'NO'\nassert solution('''3\n0 0 1\n''') == 'YES'\nassert solution('''3\n0 1 0\n''') == 'NO'\nassert solution('''3\n0 0 0\n''') == 'NO'\n"
    },
    {
        "number": 887,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('3\\n1 0 1') == 'YES'\nassert solution('3\\n0 0 1') == 'NO'\nassert solution('1\\n1 0 1') == 'YES'\nassert solution('1\\n1 0 0') == 'NO'\nassert solution('1\\n0 0 1') == 'NO'\n"
    },
    {
        "number": 887,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''3\n1 0 1\n''') == 'YES'\n\nassert solution('''3\n0 0 1\n''') == 'NO'\n\nassert solution('''2\n0 0 1\n''') == 'NO'\n\nassert solution('''2\n1 0 1\n''') == 'YES'\n\nassert solution('''3\n1 1 1\n''') == 'YES'"
    },
    {
        "number": 887,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"0 1 0\\n\") == \"YES\"\nassert solution(\"1 0 1\\n\") == \"NO\"\nassert solution(\"0 0 0\\n\") == \"YES\"\nassert solution(\"0 0 1\\n\") == \"YES\"\nassert solution(\"0 1 0\\n\") == \"NO\"\n"
    },
    {
        "number": 888,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2 3\"\n\n---\n\nInput\n4\n4 2 1 3\n4 3 2 1\n\nOutput\n3\n3\n4 3\n2 1\n\n\"\"\""
    },
    {
        "number": 888,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n\nn = int(input())\np = list(map(int, input().split()))\ns = list(map(int, input().split()))"
    },
    {
        "number": 888,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == expected\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 888,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\n'''\n4\n4 2 1 3\n3 2 4 1\n''') == '3'\n\nassert solution(\n'''\n4\n3 2 4 1\n3 2 4 1\n''') == '2'\n\nassert solution(\n'''\n4\n1 1 1 1\n2 2 2 2\n''') == '2'\n\nassert solution(\n'''\n4\n2 2 1 1\n1 1 1 1\n''') == '1'\n\nassert solution(\n'''\n5\n2 1 3 4 5\n5 4 3 2 1\n''') == '2'"
    },
    {
        "number": 888,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\n\nn = int(input())\np = list(map(int, input().split()))\ns = list(map(int, input().split()))\n\ndp = [[0] * (n+1) for _ in range(n+1)]\n\nfor i in range(n-1, -1, -1):\n    for j in range(n-1, -1, -1):\n        if i == j:\n            dp[i][j] = 0\n        elif i < j:\n            dp[i][j] = max(dp[i][j], dp[i+1][j-1] + abs(p[i] - p[j]))\n\nprint(dp[0][0])\nprint(dp[0][0])\nfor i in dp[0]:\n    print(i, end=' ')\nprint()\nfor i in dp:\n    print(i)"
    },
    {
        "number": 888,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == expected\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 888,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 888,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('4\\n4 2 1 3\\n3 2 4 1') == '3\\n2\\n4 3\\n3 1'\nassert solution('3\\n2 4 1\\n3 2 4 1') == '0\\n1\\n0 0'\nassert solution('1\\n1 1') == '0\\n0\\n0'\nassert solution('2\\n1 2') == '1\\n0\\n1'\nassert solution('2\\n2 1') == '0\\n1\\n0'\n"
    },
    {
        "number": 888,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(input) == expected\n\"\"\"\nimport sys\nfrom collections import Counter\n\nn = int(sys.stdin.readline())\np = list(map(int, sys.stdin.readline().split()))\ns = list(map(int, sys.stdin.readline().split()))\n\nm = len(p)\nk = 0\n\nfor i in range(m):\n    for j in range(i+1, m):\n        if p[i] > p[j]:\n            k += 1\n\nprint(k)\nprint(k, file=sys.stderr)\n"
    },
    {
        "number": 888,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('4\\n4 2 1 3\\n3 2 4 1\\n') == '3'\nassert solution('6\\n3 2 4 1 5 6\\n3 2 4 1 6 5\\n') == '3'"
    },
    {
        "number": 889,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''####\n....\n####\n....''') == 'YES'\nassert solution('''####\n.##\n.##\n.##\n.##''') == 'NO'\nassert solution('''..#\n.#.#\n.#.#\n.#.#\n.#.#''') == 'YES'\nassert solution('''####\n.#.#\n.#.#\n.#.#\n.#.#''') == 'YES'\nassert solution('''####\n.#.#\n.#.#\n.#.#\n.##''') == 'NO'\n"
    },
    {
        "number": 889,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"####\\n#..#\\n####\\n....\") == \"YES\"\nassert solution(\"####\\n....\\n####\\n....\") == \"NO\"\nassert solution(\"####\\n....\\n####\\n....\\n#..#\") == \"NO\"\nassert solution(\"####\\n....\\n####\\n....\\n....\\n....\\n....\\n....\\n....\") == \"YES\"\nassert solution(\"####\\n#..#\\n####\\n....\") == \"NO\"\n"
    },
    {
        "number": 889,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('##....\\n###..\\n##.##\\n#.#.#\\n....#\\n...##\\n....#\\n....#\\n') == 'YES'\nassert solution('####\\n##.##\\n#.#.#\\n##..#\\n##..#\\n#..##\\n#..##\\n#..##\\n') == 'YES'\nassert solution('#....\\n#..##\\n##...\\n##...\\n#....\\n#....\\n#....\\n#....\\n') == 'NO'\nassert solution('##...\\n##...\\n#..##\\n#..##\\n##...\\n##...\\n#.#.#\\n#.#.#\\n') == 'YES'\nassert solution('#....\\n#....\\n#....\\n#....\\n#....\\n#....\\n#....\\n#....\\n') == 'NO'\n\n\n-----Solution (short)-----"
    },
    {
        "number": 889,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''..\n....\n...#\n....''') == 'YES'\nassert solution('''##\n...\n....\n.#..''') == 'NO'\nassert solution('''#.\n.#.\n...#\n...#\n"
    },
    {
        "number": 889,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\n\"#..\\n#..\\n#..\\n\"\n\"#..\\n#..\\n#..\\n\"\n\"#..\\n#..\\n\"\n\"#..\\n\"\n\"#..\\n\"\n\"#..\\n\") == \"YES\"\nassert solution(\n\"#..\\n#..\\n#..\\n\"\n\"#..\\n#..\\n#..\\n\"\n\"#..\\n#..\\n\"\n\"#..\\n\"\n\"#..\\n\"\n\"#..\\n\") == \"NO\"\nassert solution(\n\"####\\n#..#\\n#..#\\n#..#\\n\"\n\"#..#\\n#..#\\n#..#\\n#..#\\n\"\n\"#..#\\n#..#\\n#..#\\n\"\n\"#..#\\n\"\n\"#..#\\n\"\n\"#..#\\n\") == \"NO\"\nassert solution(\n\"####\\n#..#\\n#..#\\n#..#\\n\"\n\"#..#\\n#..#\\n#..#\\n#..#\\n\"\n\"#..#\\n#..#\\n#..#\\n\"\n\"#..#\\n\"\n\"#..#\\n\"\n\"#..#\\n\") == \"YES\"\nprint(\"tests passed\")\n"
    },
    {
        "number": 889,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == 'YES'\n\n'''\n"
    },
    {
        "number": 889,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"###\") == \"YES\"\nassert solution(\"..#\") == \"NO\"\nassert solution(\"###\") == \"YES\"\nassert solution(\"#.#\") == \"NO\"\nassert solution(\"#..\") == \"NO\"\n"
    },
    {
        "number": 889,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''\n####\n"
    },
    {
        "number": 889,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''\n.#.\n.#.\n.#.\n''') == 'YES'\nassert solution('''\n..#\n...\n.#\n''') == 'NO'\nassert solution('''\n....\n....\n....\n....\n....\n....\n....\n....\n''') == 'YES'\nassert solution('''\n"
    },
    {
        "number": 889,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''#..\n.#.#\n.#.#\n...#''') == 'NO'\nassert solution('''#..\n.#.#\n.#.#\n...#''') == 'YES'\nassert solution('''.#..\n.#.#\n.#.#\n...#''') == 'NO'\nassert solution('''.#..\n.#.#\n.#.#\n...#''') == 'YES'\nassert solution('''##..\n##.#\n##.#\n##.#''') == 'YES'\n"
    },
    {
        "number": 890,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 890,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''3 5 6 1\n1 2 3\n''') == '2'\nassert solution('''4 40 50 10\n10 20 30 25\n''') == '2'\nassert solution('''5 25 35 10\n10 10 20 10 20\n''') == '6'\nassert solution('''5 25 35 10\n10 10 20 10 20\n''') == '6'\nassert solution('''5 25 35 10\n10 10 20 10 20\n''') == '6'\n"
    },
    {
        "number": 890,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"3 5 6 1\") == 2\nassert solution(\"4 40 50 10\") == 2\nassert solution(\"5 25 35 10\") == 6\nassert solution(\"1 2 3\") == 2\nassert solution(\"10 20 30 25\") == 2\n"
    },
    {
        "number": 890,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('3 5 6 1') == '2'\nassert solution('1 2 3') == '2'\nassert solution('4 40 50 10') == '2'\nassert solution('10 20 30 25') == '2'\nassert solution('5 25 35 10') == '6'\n"
    },
    {
        "number": 890,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"3 5 6 1\") == \"2\"\nassert solution(\"4 40 50 10\") == \"2\"\nassert solution(\"5 25 35 10\") == \"6\"\nassert solution(\"10 10 20 10 20\") == \"6\"\nassert solution(\"9 39 55 29 19\") == \"3\"\n"
    },
    {
        "number": 890,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1 2 3\\n1 2 3') == '0'\nassert solution('4 40 50 10\\n10 20 30 25') == '2'\nassert solution('5 25 35 10\\n10 10 20 10 20') == '6'\n\"\"\""
    },
    {
        "number": 890,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 890,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('3 5 6 1\\n1 2 3\\n') == '2'\nassert solution('4 40 50 10\\n10 20 30 25\\n') == '2'\nassert solution('5 25 35 10\\n10 10 20 10 20\\n') == '6'\n\n\n\"\"\""
    },
    {
        "number": 890,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n"
    },
    {
        "number": 890,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"3 5 6 1\") == \"2\"\nassert solution(\"4 40 50 10\") == \"2\"\nassert solution(\"5 25 35 10\") == \"6\"\n\n\n\n-----"
    },
    {
        "number": 891,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdin.strip()\n\"\"\"\n\nfrom typing import Tuple\nfrom itertools import cycle"
    },
    {
        "number": 891,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == \"WWBWBWW\"\n\n\"\"\"\n\n\"\"\""
    },
    {
        "number": 891,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('6 1\\nWBWBWBW') == 'WBBBWWW'\nassert solution('7 3\\nWBWBWBW') == 'WWWWWWW'\nassert solution('6 4\\nBWBWBW') == 'BWBWBW'\nassert solution('6 7\\nBWBWBW') == 'WBWBWBW'\n"
    },
    {
        "number": 891,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"6 1\") == \"WBBBWW\"\nassert solution(\"7 3\") == \"WWWWWWW\"\nassert solution(\"6 4\") == \"BWBWBW\"\nassert solution(\"WBBWBW\") == \"WBWBWBW\"\nassert solution(\"BWBWBW\") == \"BWBWBW\"\n"
    },
    {
        "number": 891,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('6 1\\nBWBBWW') == 'WBBBWW'\nassert solution('7 3\\nWBWBWBW') == 'WWWWWWW'\nassert solution('6 4\\nBWBWBW') == 'BWBWBW'\n"
    },
    {
        "number": 891,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''6 1''') == '''WBBBWWW'''\nassert solution('''7 3''') == '''WWWWWWW'''\nassert solution('''6 4''') == '''BWBWBW'''\nassert solution('''5 1''') == '''BWBWBW'''\nassert solution('''7 3''') == '''WWWWWWW'''\n"
    },
    {
        "number": 891,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdin\n'''\n"
    },
    {
        "number": 891,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n\nimport sys\nsys.stdin = open(\"./code/04_battleships.in\")\nsys.stdout = open(\"./code/04_battleships.out\", \"w\")"
    },
    {
        "number": 891,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdin\n\n\"\"\""
    },
    {
        "number": 891,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdin\nassert solution(stdin) == stdin\nassert solution(stdin) == stdin\nassert solution(stdin) == stdin\nassert solution(stdin) == stdin\n"
    },
    {
        "number": 892,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 892,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''7 8\n6 2 9 2 7 2 3''') == '6 5'\nassert solution('''6 4\n2 2 2 3 3 3''') == '2 3'"
    },
    {
        "number": 892,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('8 4\\n6 2 9 2 7 2 3') == '6 5\\n1 2 4 6 7'\nassert solution('7 4\\n2 2 2 3 3 3') == '7 2\\n1 2 3'\n"
    },
    {
        "number": 892,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''7 8\n6 2 9 2 7 2 3\n''') == '6 5\\n1 2 4 6 7\\n'\nassert solution('''6 4\n2 2 2 3 3 3\n''') == '2 3\\n1 2 3\\n'\nassert solution('''3 5\n10 6 10 9 8 7\n''') == '8\\n8 6 10\\n'\nassert solution('''3 3\n10 7 10\n''') == '0\\n0\\n'\nassert solution('''4 4\n1 1 1 1 1 1\n''') == '0\\n0\\n0\\n0\\n'\n"
    },
    {
        "number": 892,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('8\\n4') == '6 5'\nassert solution('7\\n8') == '6 5'\nassert solution('6\\n4') == '2 3'\nassert solution('7\\n4') == '2 3'\nassert solution('6\\n4') == '2 3'\n"
    },
    {
        "number": 892,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('6 4') == '2 3', 'invalid output'\nassert solution('7 8') == '6 5', 'invalid output'\nassert solution('9 17') == '9 16', 'invalid output'\nassert solution('9 19') == '9 19', 'invalid output'\nassert solution('9 19') == '9 19', 'invalid output'\n"
    },
    {
        "number": 892,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''6 4''') == '2 3'\nassert solution('''7 8''') == '6 5'"
    },
    {
        "number": 892,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == expected"
    },
    {
        "number": 892,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('7 8\\n6 2 9 2 7 2 3\\n') == '6 5\\n1 2 4 6 7'\nassert solution('5 2\\n2 2 2 2 2\\n') == '2 3\\n1 2 3'\nassert solution('7 4\\n2 2 2 2 3 3 3\\n') == '2 3\\n1 2 3'\nassert solution('3 3\\n3 3 3 3\\n') == '1 2 3'\nassert solution('3 3\\n3 3 3\\n') == '1 2 3'\n"
    },
    {
        "number": 892,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('6 4\\n2 2 2 3 3 3\\n') == '6 3\\n1 2 3'\nassert solution('7 8\\n6 2 9 2 7 2 3\\n') == '6 5\\n1 2 4 6 7'\nassert solution('1 1\\n1') == '0 0'\nassert solution('10 10\\n
    },
    {
        "number": 893,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"0 1\") == \"1\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"0 4\") == \"1\"\nassert solution(\"1 2 3 2\") == \"1\"\nassert solution(\"1 2\") == \"0\"\n"
    },
    {
        "number": 893,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"1 4\") == \"8\"\nassert solution(\"2 1 3 2\") == \"8\"\nassert solution(\"1 2\") == \"3\"\nassert solution(\"1 3\") == \"3\"\nassert solution(\"3 4\") == \"41\"\n"
    },
    {
        "number": 893,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"1 2\") == \"2\"\nassert solution(\"1 2 3\") == \"2\"\nassert solution(\"1 2 3 4\") == \"2\"\nassert solution(\"1 2 4\") == \"0\"\nassert solution(\"1 2 3 4 5 6 7 8\") == \"8\"\n"
    },
    {
        "number": 893,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"1 4\\n2 1 3 2\\n1 2\\n1 3\\n3 4\\n1 3 2\\n3 4\\n1 3\") == \"8\"\nassert solution(\"0 3\\n1 2 3\\n1 2\\n1 3\\n3 4\\n1 3 2\\n3 4\\n1 3\") == \"3\"\nassert solution(\"1 8\\n7 8 7 5 4 6 4 10\\n1 6\\n1 2\\n5 8\\n1 3\\n3 5\\n6 7\\n3 4\\n1 3\") == \"41\"\n"
    },
    {
        "number": 893,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == answer\n\"\"\"\n"
    },
    {
        "number": 893,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''1 4\n2 1 3 2\n1 2\n1 3\n3 4\n''') == '8'\nassert solution('''0 3\n1 2 3\n1 2\n2 3\n''') == '3'\nassert solution('''4 8\n7 8 7 5 4 6 4 10\n1 6\n1 2\n5 8\n1 3\n3 5\n6 7\n3 4\n''') == '41'\n"
    },
    {
        "number": 893,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\n'''\n"
    },
    {
        "number": 893,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1 2') == '2'\nassert solution('3 4') == '3'\nassert solution('1 2 3 2') == '2'\nassert solution('1 2') == '1'\nassert solution('3 4 5') == '2'\n"
    },
    {
        "number": 893,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"1 4\") == \"8\"\nassert solution(\"0 3\") == \"3\"\nassert solution(\"4 8\") == \"41\"\nassert solution(\"7 8 7 5 4 6 4 10\") == \"41\"\nassert solution(\"1 2\") == \"1\"\n"
    },
    {
        "number": 893,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1 4\\n2 1 3 2\\n1 2\\n1 3\\n3 4\\n') == '8'\nassert solution('0 3\\n1 2 3\\n1 2\\n2 3\\n3 4\\n') == '3'\nassert solution('4 8\\n7 8 7 5 4 6 4 10\\n1 6\\n1 2\\n5 8\\n1 3\\n3 5\\n6 7\\n3 4\\n') == '41'\nassert solution('3 4\\n7 8 7 5 4 6 4 10\\n1 6\\n1 2\\n5 8\\n1 3\\n3 5\\n6 7\\n3 4\\n') == '41'\nassert solution('3 4\\n7 8 7 5 4 6 4 10\\n1 6\\n1 2\\n5 8\\n1 3\\n3 5\\n6 7\\n3 4\\n') == '41'\n"
    },
    {
        "number": 894,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('10 5') == '0 15 15 0'\nassert solution('-10 5') == '-15 0 0 15'\nassert solution('9.5 -2.5') == '0 0 0 -4'"
    },
    {
        "number": 894,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(input(\"\")) == expected\n\n\n\n[Image]\n\nFigure to the second sample\n"
    },
    {
        "number": 894,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(input()) == output\n\nMore examples:\n\nassert solution(input()) == output\n\n\n\"\"\"\n\nx, y = map(int, input().split())\nprint(x, y, x, y)\n"
    },
    {
        "number": 894,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdin\n\n\"\"\"\n"
    },
    {
        "number": 894,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(input()) == expect\n\"\"\"\n"
    },
    {
        "number": 894,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(input()) == output\n"
    },
    {
        "number": 894,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('10 5') == '0 15 15 0'\nassert solution('-10 5') == '-15 0 0 15'\nassert solution('1 2 3 4 5 6 7 8 9 10') == '-15 0 0 15 15'\nassert solution('-10 5') == '-15 0 0 15'\nassert solution('1 1') == '0 0 0 0'\n"
    },
    {
        "number": 894,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('10 5') == '0 15 15 0'\nassert solution('-10 5') == '-15 0 0 15'\nassert solution('10 0') == '0 0 0 0'\nassert solution('10 0') == '0 0 0 0'\n\n\"\"\"\n\nx, y = [int(x) for x in input().split()]\nprint(x - 1, y, x, y - 1)"
    },
    {
        "number": 894,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 894,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == expected\n\n\"\"\"\n\nimport sys\nfrom functools import lru_cache\n\n@lru_cache(maxsize=None)\n"
    },
    {
        "number": 895,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"4\\n4 1 7 8 3 8\\n1\") == \"3\"\nassert solution(\"3\\n2 4 1\\n2\") == \"2\"\nassert solution(\"6\\n4 1 7 8 3 8\\n1\") == \"3\"\nassert solution(\"6\\n4 1 7 8 3 8\\n2\") == \"3\"\nassert solution(\"6\\n4 1 7 8 3 8\\n10\") == \"3\"\n"
    },
    {
        "number": 895,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''4\n1 7 8 3 8\n1''') == '3'\n\nassert solution('''4\n1 2 3 4 5\n5\n''') == '1'\n"
    },
    {
        "number": 895,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''6\n4 1 7 8 3 8\n1''') == '3'\nassert solution('''6\n4 1 7 8 3 8\n2''') == '3'\nassert solution('''6\n4 1 7 8 3 8\n3''') == '5'\nassert solution('''6\n4 1 7 8 3 8\n4''') == '1'\nassert solution('''6\n4 1 7 8 3 8\n5''') == '0'\n"
    },
    {
        "number": 895,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\\n\") == \"\"\nassert solution(\"1\\n1\\n\") == \"1\"\nassert solution(\"1\\n1\\n1\\n\") == \"0\"\nassert solution(\"1\\n1\\n1\\n1\\n1\") == \"1\"\n"
    },
    {
        "number": 895,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == '3'\n\"\"\"\n"
    },
    {
        "number": 895,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == \"0\"\n\nInput\n7\n4 1 7 8 3 8\n1\n\nOutput\n7\n\nassert solution(stdin) == \"1\"\n\nInput\n3\n5 1 3 5\n2\n\nOutput\n3\n\nassert solution(stdin) == \"0\"\n\nInput\n4\n5 1 3 5\n2\n\nOutput\n2\n\nassert solution(stdin) == \"1\"\n\nInput\n5\n5 1 3 5 5\n2\n\nOutput\n2\n\nassert solution(stdin) == \"2\"\n\nInput\n4\n5 1 3 5 5\n3\n\nOutput\n2"
    },
    {
        "number": 895,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == '3'\nassert stdin == '6\\n4 1 7 8 3 8\\n1\\n'\n\n\"\"\"\n\nfrom sys import stdin\nn = int(stdin.readline().strip())\nt = [int(x) for x in stdin.readline().split()]\n\nprint(max(max(t[i+1:])-t[i] for i in range(n-1)))\n"
    },
    {
        "number": 895,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''6\n4 1 7 8 3 8''') == '3'\nassert solution('''2\n3\n1 2''') == '1'\nassert solution('''3\n2\n1 1 1''') == '2'\nassert solution('''6\n3 2 8 7 1 3\n7''') == '3'\nassert solution('''1\n2\n1 1''') == '1'\n"
    },
    {
        "number": 895,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''6\n4 1 7 8 3 8\n1\n''') == '3'\nassert solution('''6\n1\n4\n8\n7\n3\n8\n''') == '2'\nassert solution('''6\n1\n4\n8\n7\n3\n7\n''') == '3'\nassert solution('''6\n1\n1\n1\n1\n1\n1\n''') == '1'\nassert solution('''6\n1\n1\n1\n1\n1\n1\n2\n''') == '4'\n"
    },
    {
        "number": 895,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n3\n4 1 7 8 3 8\n1\n\"\"\"\n) == \"4\"\n\nassert solution(\n\"\"\"\n3\n2 1 3 5\n1\n\"\"\"\n) == \"1\"\n\nassert solution(\n\"\"\"\n3\n1 2 2 4\n5\n\"\"\"\n) == \"2\"\n\nassert solution(\n\"\"\"\n2\n1 2\n5\n\"\"\"\n) == \"1\"\n\nassert solution(\n\"\"\"\n10\n1 1 1 1 1 1 1 1 1 1\n3\n\"\"\"\n) == \"10\"\n"
    },
    {
        "number": 896,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"2 3\\n2 9\\n5 3 13\") == \"YES\\n3 4 5\\n6 7 8\"\nassert solution(\"3 3\\n1 7 6\\n2 15 12\") == \"NO\"\nassert solution(\"3 3\\n1 7 6\\n2 15 12\\n5 3 13\") == \"NO\"\nassert solution(\"3 4\\n1 1 1\\n2 2 2\\n1 3 1\") == \"YES\\n1 2 3\"\nassert solution(\"3 4\\n1 1 1\\n2 2 2\\n1 3 1\\n2 1 1\") == \"NO\"\n\n\n-----Answer-----"
    },
    {
        "number": 896,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''2 3\n2 9\n5 3 13''') == \"YES\"\nassert solution('''3 3\n1 7 6\n2 15 12''') == \"NO\"\nassert solution('''2 2\n1 7 6\n2 15 12''') == \"YES\"\nassert solution('''2 2\n1 1\n1 1''') == \"NO\"\nassert solution('''1 1\n1 1''') == \"NO\"\n"
    },
    {
        "number": 896,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"2 3\\n2 9\\n5 3 13\\n\") == \"YES\\n3 4 5\\n6 7 8\\n\"\nassert solution(\"3 3\\n1 7 6\\n2 15 12\\n\") == \"NO\\n\"\nassert solution(\"3 3\\n1 7 6\\n2 15 6\\n\") == \"NO\\n\"\nassert solution(\"3 3\\n1 7 6\\n2 15 6\\n\") == \"NO\\n\"\nassert solution(\"3 3\\n1 7 6\\n2 15 6\\n\") == \"NO\\n\"\n"
    },
    {
        "number": 896,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\n\n'''\n"
    },
    {
        "number": 896,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('2 3\\n2 9\\n5 3 13') == 'YES\\n3 4 5\\n6 7 8\\n'\nassert solution('3 3\\n1 7 6\\n2 15 12\\n') == 'NO\\n'\nassert solution('1 2\\n2 4\\n3 4\\n') == 'NO\\n'\n\n\n-----\n\nThere is a matrix which has been filled with numbers. Vasya started to guess the matrix but he didn't succeed.\n\nYour task is to help him.\n\nVasya has an unlimited number of attempts to guess the matrix.\n\nOn each attempt he has to figure out which cell of the matrix has the maximal xor with the corresponding cell of the secret matrix.\n\nHelp Vasya! Help him!\n\nInput\n\nThe first line contains two integers n and m \u2014 the number of rows and the number of columns in the matrix.\n\nThe next line contains n * m numbers \u2014 the numbers that make up the matrix.\n\nThe next line contains m * m numbers \u2014 the numbers that Vasya has guessed.\n\nThe numbers in the matrix are positive integers.\n\nThe numbers in the secret matrix are positive integers.\n\nThe numbers in the secret matrix don't repeat.\n\nThe numbers in the matrix don't repeat.\n\nOutput\n\nIf Vasya guessed the matrix, output \"YES\", otherwise output \"NO\".\n\nExamples\n\nInput\n4 4\n1 2 3 4\n2 3 4 1\n1 1 2 2\n\nOutput\nYES\n\nInput\n3 3\n1 2 3\n1 1 2\n\nOutput\nNO\n\nInput\n5 3\n1 2 3 4 5\n2 3 4 1 3\n1 1 2 2\n\nOutput\nNO\n\nInput\n3 3\n1 2 3\n2 3 4\n1 3 1\n\nOutput\nYES\n\nInput\n4 4\n1 2 3 4\n2 3 4 1\n1 1 2 2\n\nOutput\nNO\n\nInput\n4 4\n1 2 3 4\n2 3 4 1\n1 1 2 2\n\nOutput\nYES\n\n-----\n"
    },
    {
        "number": 896,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 896,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"2 3\") == \"YES\\n3 4 5\\n6 7 8\"\nassert solution(\"3 3\") == \"NO\"\nassert solution(\"3 3\\n1 7 6\\n2 15 12\\n1 7 6\\n2 15 12\") == \"YES\\n3 4 5\\n6 7 8\\n6 7 8\"\nassert solution(\"3 3\\n1 7 6\\n2 15 12\\n3 8 9\") == \"NO\"\n\n\n\n\n\"\"\"\n"
    },
    {
        "number": 896,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"2 3\\n2 9\\n5 3 13\\n\") == \"YES\\n3 4 5\\n6 7 8\\n\"\nassert solution(\"3 3\\n1 7 6\\n2 15 12\\n\") == \"NO\\n\"\nassert solution(\"3 3\\n3 5 4\\n7 6 2\\n\") == \"NO\\n\"\nassert solution(\"3 3\\n5 6 2\\n1 3 7\\n\") == \"YES\\n2 6 6\\n4 1 1\\n\"\nassert solution(\"3 3\\n2 1 3\\n2 1 3\\n\") == \"NO\\n\"\n"
    },
    {
        "number": 896,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''2 3\n2 9\n5 3 13''') == 'YES'\nassert solution('''3 3\n1 7 6\n2 15 12\n''') == 'NO'\nassert solution('''2 4\n8 4 6\n2 3 1''') == 'YES'\nassert solution('''3 3\n1 3 6\n2 4 5\n''') == 'NO'\nassert solution('''4 3\n1 2 3 4\n3 5 6 7\n4 7 8 9\n''') == 'NO'\n"
    },
    {
        "number": 896,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''2 3\n2 9\n5 3 13''') == 'YES'\nassert solution('''3 3\n1 7 6\n2 15 12''') == 'NO'"
    },
    {
        "number": 897,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1 2') == '0'\nassert solution('0') == '0'\nassert solution('1') == '1'\nassert solution('1 2') == '500000004'\nassert solution('1 0') == '0'\n"
    },
    {
        "number": 897,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"1 2\") == \"0\"\nassert solution(\"1\") == \"0\"\nassert solution(\"7 26\") == \"230769233\"\nassert solution(\"1 2\") == \"0\"\nassert solution(\"1\") == \"0\"\n"
    },
    {
        "number": 897,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdin[0:5]\n\"\"\"\n"
    },
    {
        "number": 897,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('10 10\\n1 2 3 4 5 6 7 8 9 10\\n9 10 1 2 3 4 5 6 7 8 9 10\\n') == '500000004'\nassert solution('1 2\\n0\\n1\\n') == '0'\nassert solution('7 26\\n0 15 12 9 13 0 14\\n11 1 0 13 15 12 0\\n') == '230769233'\nassert solution('1 2\\n1\\n0\\n') == '0'\nassert solution('7 26\\n0 15 12 9 13 0 14\\n11 1 0 13 15 12 0\\n') == '230769233'\n"
    },
    {
        "number": 897,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n'''\n"
    },
    {
        "number": 897,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1 2') == '500000004'\nassert solution('1 2') == '0'\nassert solution('7 26') == '230769233'\nassert solution('0 15 12 9 13 0 14') == '0'\nassert solution('11 1 0 13 15 12 0') == '0'\n"
    },
    {
        "number": 897,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('1 2') == '500000004'\nassert solution('0') == '0'\nassert solution('1') == '1'\nassert solution('1 2') == '500000004'\nassert solution('1 2\\n1\\n0\\n') == '500000004'\n"
    },
    {
        "number": 897,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''1 2''') == '500000004'\nassert solution('''0''') == '0'\nassert solution('''1''') == '0'\nassert solution('''0 0''') == '0'\nassert solution('''0 1''') == '0'\n"
    },
    {
        "number": 897,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\n    '''1 2'''\n    '''0'''\n    '''1'''\n    ) == '500000004'\nassert solution(\n    '''1 2'''\n    '''1'''\n    '''0'''\n    ) == '0'\nassert solution(\n    '''7 26'''\n    '''0 15 12 9 13 0 14'''\n    '''11 1 0 13 15 12 0'''\n    ) == '230769233'\nassert solution(\n    '''2 3'''\n    '''2 2 1 0 0'''\n    '''0 0 1 1 0'''\n    ) == '0'\nassert solution(\n    '''2 3'''\n    '''2 2 1 0 0'''\n    '''1 1 1 1 0'''\n    ) == '1'\n"
    },
    {
        "number": 897,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\n\nfrom fractions import gcd"
    },
    {
        "number": 898,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('3 14') == '2'\nassert solution('1 5') == '1'\nassert solution('10 9') == '1'\nassert solution('100 1000') == '1'\nassert solution('100 998') == '1'\n"
    },
    {
        "number": 898,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('2 4') == 2\nassert solution('3 14') == 2\n\"\"\"\nimport sys\nsys.setrecursionlimit(10**6)\n"
    },
    {
        "number": 898,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"2 14\") == \"2\"\nassert solution(\"5 14\") == \"1\"\nassert solution(\"4 5\") == \"1\"\nassert solution(\"12 9\") == \"3\"\nassert solution(\"8 3\") == \"2\"\n"
    },
    {
        "number": 898,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1 2') == '1'\nassert solution('2 4') == '1'\nassert solution('2 4') == '1'\nassert solution('1 2 2') == '1'\nassert solution('1 2 4') == '1'\n"
    },
    {
        "number": 898,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\n    \"3 14\"\n) == \"2\"\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 898,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('3 14') == '2'\nassert solution('2 1') == '1'\nassert solution('1 0') == '1'\nassert solution('1 0') == '1'\nassert solution('2 3') == '1'\n"
    },
    {
        "number": 898,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"1 5\") == \"1\"\nassert solution(\"1 10\") == \"1\"\nassert solution(\"5 10\") == \"1\"\nassert solution(\"1 100\") == \"1\"\n"
    },
    {
        "number": 898,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('3 14') == '2'\n\"\"\""
    },
    {
        "number": 898,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"2 3\") == \"2\"\nassert solution(\"2 4\") == \"2\"\nassert solution(\"1 10\") == \"1\"\nassert solution(\"3 14\") == \"2\"\nassert solution(\"10 100\") == \"10\"\n"
    },
    {
        "number": 898,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('4 14') == '2'\n"
    },
    {
        "number": 899,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''3 3\n1 2 1\n1 3 1\n2 3 3''') == '1'\nassert solution('''10 10\n1 2 1\n1 3 1\n2 3 1\n3 4 1\n4 5 1\n5 6 1\n6 7 1\n7 8 1\n8 9 1\n9 10 1''') == '9'\nassert solution('''2 2\n1 2 1\n2 1 2''') == '2'\nassert solution('''10 10\n1 2 1\n1 3 1\n2 3 1\n3 4 1\n4 5 1\n5 6 1\n6 7 1\n7 8 1\n8 9 1\n9 10 1''') == '0'\nassert solution('''10 10\n1 2 1\n1 3 1\n2 3 1\n3 4 1\n4 5 1\n5 6 1\n6 7 1\n7 8 1\n8 9 1\n9 10 1''') == '0'\n"
    },
    {
        "number": 899,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 899,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == str(1)\n\n\"\"\""
    },
    {
        "number": 899,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"1 2 1\") == \"1\"\nassert solution(\"1 3 1\") == \"1\"\nassert solution(\"2 3 3\") == \"1\"\nassert solution(\"1 2 1\\n1 3 1\\n2 3 3\") == \"1\"\nassert solution(\"2 3 1\\n1 2 1\\n1 3 1\\n2 3 3\") == \"1\"\n"
    },
    {
        "number": 899,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('3 3') == '1'\nassert solution('1 2 1') == '0'\nassert solution('1 3 1') == '2'\nassert solution('2 3 3') == '1'\n"
    },
    {
        "number": 899,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1 2 1\\n1 3 1\\n2 3 3') == \"1\"\nassert solution('2 3\\n1 2 1\\n2 3 1') == \"1\"\nassert solution('2 3\\n1 2 1\\n1 3 1') == \"1\"\nassert solution('2 3\\n1 2 1\\n2 1 1') == \"1\"\nassert solution('2 3\\n1 2 1\\n3 2 1') == \"0\"\n"
    },
    {
        "number": 899,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"5 4\") == \"1\"\nassert solution(\"1 2 1\") == \"1\"\nassert solution(\"1 3 1\") == \"1\"\nassert solution(\"2 3 3\") == \"1\"\nassert solution(\"1 2 2\") == \"1\"\n"
    },
    {
        "number": 899,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"1 2 1\") == \"1\"\nassert solution(\"1 3 1\") == \"2\"\nassert solution(\"2 3 3\") == \"1\"\nassert solution(\"1 2 3\") == \"0\"\nassert solution(\"2 3 1\") == \"0\"\n"
    },
    {
        "number": 899,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1 2 1\\n1 3 1') == '1'\nassert solution('1 2 1\\n1 3 1\\n2 3 3') == '1'\nassert solution('1 2 1\\n1 3 1\\n2 3 3\\n3 4 4\\n4 5 5\\n1 1') == '1'\nassert solution('1 2 1\\n1 3 1\\n2 3 3\\n3 4 4\\n4 5 5\\n4 1') == '1'\nassert solution('1 2 1\\n1 3 1\\n2 3 3\\n3 4 4\\n4 5 5\\n4 1\\n1 1') == '1'\n"
    },
    {
        "number": 899,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''3 3\n1 2 1\n1 3 1\n2 3 3''') == '1'\nassert solution('''3 3\n1 2 1\n1 3 1\n2 3 3''') == '1'\nassert solution('''4 4\n1 2 1\n1 3 1\n2 3 1\n3 4 2\n''') == '0'\nassert solution('''3 3\n1 2 1\n1 3 1\n2 3 3''') == '1'\nassert solution('''2 2\n1 2 1\n1 3 1\n2 3 3''') == '0'\n"
    },
    {
        "number": 900,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"??2??5\") == 768\nassert solution(\"??2??5\") == 768\nassert solution(\"??2??5\") == 768\nassert solution(\"??2??5\") == 768\nassert solution(\"??2??5\") == 768\n"
    },
    {
        "number": 900,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('??2??5') == '768'\n"
    },
    {
        "number": 900,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == \"768\"\n\n\"\"\""
    },
    {
        "number": 900,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == \"768\"\n"
    },
    {
        "number": 900,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('??2??5') == '768'\nassert solution('5?') == '768'\nassert solution('?2?') == '768'\nassert solution('?0?') == '768'\nassert solution('??7?') == '768'\n"
    },
    {
        "number": 900,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('?2??5') == 768\nassert solution('??2??5') == 768\nassert solution('??2??5?3') == 126\nassert solution('?3??4?3') == 2516\nassert solution('??2??5?3?4') == 2516\n"
    },
    {
        "number": 900,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('??2??5') == '768'\nassert solution('2??5') == '768'\nassert solution('2??5') == '768'\nassert solution('2?5') == '768'\nassert solution('2?5') == '768'\n"
    },
    {
        "number": 900,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"??2??5\") == \"768\"\nassert solution(\"??0??5\") == \"12\"\nassert solution(\"9??8??2\") == \"304\"\nassert solution(\"9??5??8\") == \"40\"\nassert solution(\"9??8??5\") == \"44\"\n"
    },
    {
        "number": 900,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('??2??5') == '768'\nassert solution('03') == '482305'\nassert solution('??3??5') == '288'\nassert solution('03?') == '482305'\nassert solution('??4??5') == '272'\n"
    },
    {
        "number": 900,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(input()) == input()\nassert solution(input()) == input()\nassert solution(input()) == input()\nassert solution(input()) == input()\nassert solution(input()) == input()\n\n\"\"\"\n\n\"\"\"\n---FOR FUN---\n- Write a function to find the nth Fibonacci number\n- F(n) = F(n-1) + F(n-2), or F(n) = F(n-1) + F(n-2) + F(n-3) +..., or F(0) = F(1) = 0, F(1) = 1, F(2) = 1\n- The nth Fibonacci number is defined as F(0) = 0, F(1) = 1, F(2) = 1, F(3) = 2, F(4) = 3, F(5) = 5, F(6) = 8, F(7) = 13, F(8) = 21, F(9) = 34, F(10) = 55, and so on.\n- Then, we say that a sequence Fn is a Fibonacci sequence if and only if its elements are defined as Fn = F(n-1) + F(n-2), F(n-2) + F(n-3),..., F(1) + F(0).\n- For example, the Fibonacci sequence defined by F(0) = 0, F(1) = 1, F(2) = 1, F(3) = 2, F(4) = 3, F(5) = 5, F(6) = 8, F(7) = 13, F(8) = 21, and so on is the sequence F(0) = 0, F(1) = 1, F(2) = 1, F(3) = 2, F(4) = 3, F(5) = 5, F(6) = 8, F(7) = 13, F(8) = 21, F(9) = 34, F(10) = 55, and so on.\n- The Fibonacci sequence is a sequence of numbers with the property that each number is the sum of the two preceding numbers.\n- For example, 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, \u2026\n- Can you find the nth Fibonacci number?\n- Can you find the kth Fibonacci number for any positive integers k and n?\n- Can you find the kth Fibonacci number for any non-negative integers n and k?\n- Can you find the kth Fibonacci number for any positive integers n and k?\n\n---EXAMPLES---\n- Input:\nFibonacci numbers of n:\n0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 \u2026\n\n- Output:\n0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 \u2026\n\n- Input:\nFibonacci numbers of n:\n-1\n\n- Output:\n0\n\n- Input:\nFibonacci numbers of n:\n0 0\n\n- Output:\n0\n\n- Input:\nFibonacci numbers of n:\n10\n\n- Output:\n55\n\n- Input:\nFibonacci numbers of n:\n1\n\n- Output:\n1\n\n- Input:\nFibonacci numbers of n:\n1\n\n- Output:\n1\n\n- Input:\nFibonacci numbers of n:\n5\n\n- Output:\n34\n\n- Input:\nFibonacci numbers of n:\n3\n\n- Output:\n1\n\n- Input:\nFibonacci numbers of n:\n-2\n\n- Output:\n0\n\n- Input:\nFibonacci numbers of n:\n2\n\n- Output:\n0\n\n- Input:\nFibonacci numbers of n:\n2\n\n- Output:\n0\n\n- Input:\nFibonacci numbers of n:\n10\n\n- Output:\n21\n\n- Input:\nFibonacci numbers of n:\n0\n\n- Output:\n0\n\n- Input:\nFibonacci numbers of n:\n10\n\n- Output:\n55\n\n- Input:\nFibonacci numbers of n:\n2\n\n- Output:\n1\n\n- Input:\nFibonacci numbers of n:\n3\n\n- Output:\n1\n\n- Input:\nFibonacci numbers of n:\n4\n\n- Output:\n2\n\n- Input:\nFibonacci numbers of n:\n2\n\n- Output:\n0\n\n- Input:\nFibonacci numbers of n:\n5\n\n- Output:\n3\n\n- Input:\nFibonacci numbers of n:\n6\n\n- Output:\n5\n\n- Input:\nFibonacci numbers of n:\n7\n\n- Output:\n8\n\n- Input:\nFibonacci numbers of n:\n8\n\n- Output:\n13\n\n- Input:\nFibonacci numbers of n:\n9\n\n- Output:\n21\n\n- Input:\nFibonacci numbers of n:\n10\n\n- Output:\n34\n\n- Input:\nFibonacci numbers of n:\n11\n\n- Output:\n55\n\n- Input:\nFibonacci numbers of n:\n12\n\n- Output:\n89\n\n- Input:\nFibonacci numbers of n:\n13\n\n- Output:\n144\n\n- Input:\nFibonacci numbers of n:\n14\n\n- Output:\n233\n\n- Input:\nFibonacci numbers of n:\n15\n\n- Output:\n377\n\n- Input:\nFibonacci numbers of n:\n16\n\n- Output:\n610\n\n- Input:\nFibonacci numbers of n:\n17\n\n- Output:\n987\n\n- Input:\nFibonacci numbers of n:\n18\n\n- Output:\n1597\n\n- Input:\nFibonacci numbers of n:\n19\n\n- Output:\n2584\n\n- Input:\nFibonacci numbers of n:\n20\n\n- Output:\n4181\n\n- Input:\nFibonacci numbers of n:\n21\n\n- Output:\n6765\n\n- Input:\nFibonacci numbers of n:\n22\n\n- Output:\n10946\n\n- Input:\nFibonacci numbers of n:\n23\n\n- Output:\n14417\n\n- Input:\nFibonacci numbers of n:\n24\n\n- Output:\n23329\n\n- Input:\nFibonacci numbers of n:\n25\n\n- Output:\n37799\n\n- Input:\nFibonacci numbers of n:\n26\n\n- Output:\n61051\n\n- Input:\nFibonacci numbers of n:\n27\n\n- Output:\n98745\n\n- Input:\nFibonacci numbers of n:\n28\n\n- Output:\n159725\n\n- Input:\nFibonacci numbers of n:\n29\n\n- Output:\n258401\n\n- Input:\nFibonacci numbers of n:\n30\n\n- Output:\n4181\n\n- Input:\nFibonacci numbers of n:\n31\n\n- Output:\n67659\n\n- Input:\nFibonacci numbers of n:\n32\n\n- Output:\n10946\n\n- Input:\nFibonacci numbers of n:\n33\n\n- Output:\n144179\n\n- Input:\nFibonacci numbers of n:\n34\n\n- Output:\n233299\n\n- Input:\nFib"
    },
    {
        "number": 901,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"\"\"4 2\n1 -3\n4 -2 3 2 -3\"\"\") == \"YES\"\nassert solution(\"\"\"5 2\n5 3 -2 1 -1 5\"\"\") == \"NO\"\nassert solution(\"\"\"7 2\n3 -1 6 7\n7 -5 4 2 4 7 -3 4\"\"\") == \"YES\"\nassert solution(\"\"\"8 2\n1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1\n-1 1 -1 -1 1 -1 -1 -1 -1 1 1\"\"\") == \"YES\"\nassert solution(\"\"\"9 2\n1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1\n-1 1 -1 -1 1 -1 -1 -1 -1 1 1\"\"\") == \"YES\"\n"
    },
    {
        "number": 901,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\n\nprint(\"All tests passed successfully.\")\n"
    },
    {
        "number": 901,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100') == 'YES'\nassert solution('3\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n"
    },
    {
        "number": 901,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == 'YES'\n\nIn the second sample testcase, no group contains any members from universe 4, so in case of a possibility of death, the world will not end.\nassert solution(stdin) == 'NO'\n\"\"\""
    },
    {
        "number": 901,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''4 2''') == 'YES'\nassert solution('''5 2''') == 'NO'\nassert solution('''7 2''') == 'YES'\nassert solution('''7 3 -2 1 -1 5''') == 'YES'\nassert solution('''7 3 -2 1 -1 5''') == 'NO'\n"
    },
    {
        "number": 901,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1 2\\n1 2\\n') == 'YES'\nassert solution('1 2\\n1 3 -2\\n') == 'YES'\nassert solution('1 2\\n1 3 -2\\n') == 'NO'\nassert solution('4 2\\n1 -3\\n4 -2 3 2 -3\\n') == 'NO'\nassert solution('4 2\\n1 -3\\n4 -2 3 2 -3\\n') == 'YES'\n"
    },
    {
        "number": 901,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 901,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"\n4 2\n1 -3\n4 -2 3 2 -3\n\n\"\"\"\n) == 'YES'\n\nassert solution(\n\"\"\"\n5 2\n5 3 -2 1 -1 5\n3 -5 2 5\n\n\"\"\"\n) == 'NO'\n\nassert solution(\n\"\"\"\n7 2\n3 -1 6 7\n7 -5 4 2 4 7 -3 4\n\n\"\"\"\n) == 'YES'\n"
    },
    {
        "number": 901,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''4 2\n1 -3\n4 -2 3 2 -3\n''') == 'YES'\nassert solution('''5 2\n5 3 -2 1 -1 5\n3 -5 2 5\n''') == 'NO'\nassert solution('''7 2\n3 -1 6 7\n7 -5 4 2 4 7 -3 4\n''') == 'YES'\n"
    },
    {
        "number": 901,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('4 2\\n1 -3\\n4 -2 3 2 -3\\n') == 'YES'\nassert solution('5 2\\n5 3 -2 1 -1 5\\n3 -5 2 5\\n') == 'NO'\nassert solution('7 2\\n3 -1 6 7\\n7 -5 4 2 4 7 -3 4\\n') == 'YES'\nassert solution('4 5\\n1 -3\\n4 -2 3 2 -3\\n1 -1 2 3 4 4 -1\\n3 -3 1 1\\n1 2 -1 -1\\n1 -1 -1 1\\n1 2 1 1 1 -1\\n1 -1 2 1 1 1 -1\\n3 -2 -2 3 2 2 -3') == 'NO'\nassert solution('5 5\\n1 -3\\n4 -2 3 2 -3\\n1 -1 2 3 4 4 -1\\n3 -3 1 1\\n1 2 -1 -1\\n1 -1 -1 1\\n1 2 1 1 1 -1\\n1 -1 2 1 1 1 -1\\n3 -2 -2 3 2 2 -3') == 'NO'\n"
    },
    {
        "number": 902,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"1 2\") == \"2\"\nassert solution(\"2 1\") == \"2\"\nassert solution(\"4 2\") == \"2\"\nassert solution(\"3 1 2 4\") == \"3\"\nassert solution(\"6 2\") == \"3\"\n"
    },
    {
        "number": 902,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('1\\n1') == '1'\nassert solution('2\\n2') == '2'\nassert solution('4\\n3 1 2 4') == '3'\nassert solution('6\\n6 5 3 1 2 4') == '6'\nassert solution('100\\n100') == '2'\n"
    },
    {
        "number": 902,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('2 2') == '2'\nassert solution('4 2') == '3'\nassert solution('6 2') == '3'\nassert solution('2 10000000000') == '3'\nassert solution('6 2') == '6'\n"
    },
    {
        "number": 902,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"2 2\") == \"2\"\nassert solution(\"4 2\") == \"3\"\nassert solution(\"6 2\") == \"6\"\nassert solution(\"2 10000000000\") == \"2\"\nassert solution(\"2 1\") == \"3\"\n"
    },
    {
        "number": 902,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"4 2\") == \"3\"\nassert solution(\"6 2\") == \"3\"\nassert solution(\"2 10000000000\") == \"2\"\nassert solution(\"2 1\") == \"2\"\nassert solution(\"6 10 2\") == \"6\"\n"
    },
    {
        "number": 902,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''2 2''') == '2'\nassert solution('''4 2''') == '3'\nassert solution('''6 2''') == '6'\nassert solution('''2 10000000000''') == '3'\nassert solution('''10 0''') == '3'\n"
    },
    {
        "number": 902,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''2 2\n1 2\n''') == '2'\nassert solution('''4 2\n3 1 2 4\n''') == '3'\nassert solution('''6 2\n6 5 3 1 2 4\n''') == '6'\n\n\n\n'''\n"
    },
    {
        "number": 902,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1\\n1') == '1'\nassert solution('2\\n2') == '2'\nassert solution('2\\n1') == '2'\nassert solution('3\\n2') == '3'\nassert solution('3\\n3') == '3'\n"
    },
    {
        "number": 902,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('2 2') == '2'\nassert solution('4 2') == '3'\nassert solution('6 2') == '6'\nassert solution('6 3 2 1') == '6'\nassert solution('2 10000000000') == '2'\n"
    },
    {
        "number": 902,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('2 2') == '2'\nassert solution('4 2') == '3'\nassert solution('6 2') == '3'\nassert solution('100 4') == '3'\nassert solution('100 200') == '1'\n"
    },
    {
        "number": 903,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''1 2''') == '3'\nassert solution('''1 2 1''') == '5'\nassert solution('''1 2 1 1''') == '3'\nassert solution('''1 2 1 1 1''') == '5'\nassert solution('''1 2 1 1 1 2''') == '3'\n"
    },
    {
        "number": 903,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('1\\n1') == '1'\nassert solution('2\\n1') == '2'\nassert solution('2\\n2') == '3'\nassert solution('2\\n3') == '4'\nassert solution('2\\n4') == '5'\n"
    },
    {
        "number": 903,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"\"\"3 2\"\"\") == \"5\"\nassert solution(\"\"\"5 5\"\"\") == \"3\"\nassert solution(\"\"\"7 7\"\"\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 903,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''3 2''') == '5'\nassert solution('''5 5''') == '3'\nassert solution('''7 7''') == '5'\nassert solution('''3 3''') == '5'\nassert solution('''9 9''') == '9'\n"
    },
    {
        "number": 903,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('2 2\\n1 3 5') == '5'\nassert solution('5 5\\n1 2 1 1 1') == '3'\nassert solution('7 7\\n4 1 2 4 3 4 4') == '5'\n\"\"\"\n\nn,k=map(int,input().split())\na=list(map(int,input().split()))\nmax_median=0\nl,r,mid=(n-1)//2, n//2, 0\nfor i in range(mid-1, mid+1):\n    m,a[i]+=1\n    max_median=max(max_median,a[i])\nwhile l>=0 and r<=n-1:\n    m,a[l],a[r]=a[l],a[r],a[l]+1\n    max_median=max(max_median,a[l])\n    l-=1\n    r+=1\nmax_median=max(max_median,a[mid])\nprint(max_median)\n"
    },
    {
        "number": 903,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1 1') == '1'\nassert solution('2 2') == '1'\nassert solution('3 3') == '1'\nassert solution('4 4') == '2'\nassert solution('5 5') == '3'\n"
    },
    {
        "number": 903,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\\n2\") == \"2\"\nassert solution(\"1\\n2\\n3\") == \"3\"\nassert solution(\"1\\n2\\n3\\n4\") == \"3\"\nassert solution(\"1\\n2\\n3\\n4\\n5\") == \"4\"\n"
    },
    {
        "number": 903,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n\"\"\""
    },
    {
        "number": 903,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('4 5\\n1 2 1 4') == '5'\nassert solution('7 7\\n4 1 2 4 3 4 4') == '3'\nassert solution('5 6\\n1 2 1 1 1') == '4'\nassert solution('3 10\\n1 2 3') == '5'\nassert solution('3 15\\n1 2 3') == '4'\n"
    },
    {
        "number": 903,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('3 2\\n1 3 5\\n') == '5'\nassert solution('5 5\\n1 2 1 1 1\\n') == '3'\nassert solution('7 7\\n4 1 2 4 3 4 4\\n') == '5'\nassert solution('7 3\\n3 2 1 4 5\\n') == '3'\nassert solution('7 3\\n3 2 1 4 5\\n') == '3'\n"
    },
    {
        "number": 904,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"\") == 0\nassert solution(\"NonZero\") == 5\nassert solution(\"this is zero answer text\") == 0\nassert solution(\"Harbour Space University\") == 1\n\n\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 904,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('1') == ''\nassert solution('this is zero answer text') == ''\nassert solution('NonZERO') == '5'\nassert solution('Harbour Space University') == '1'\nassert solution('2 4') == ''\n"
    },
    {
        "number": 904,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('NonZERO') == '5'\nassert solution('this is zero answer text') == '0'\nassert solution('Harbour Space University') == '1'\nassert solution('This Is Zero Answer Text') == '1'\nassert solution('Harbour Space University ') == '1'\n"
    },
    {
        "number": 904,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''\n1\na\n''') == '1'\nassert solution('''\n10\nthis is zero answer text\n''') == '0'\nassert solution('''\n24\nHarbour Space University\n''') == '1'\nassert solution('''\n3\na b c\n''') == '0'\nassert solution('''\n2\nqwerty\n''') == '4'\n"
    },
    {
        "number": 904,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''5''') == '0'\nassert solution('''nonzero''') == '5'\nassert solution('''this is zero answer text''') == '0'\nassert solution('''Harbour Space University''') == '1'\nassert solution('''!@#$%^&*()''') == '0'\n"
    },
    {
        "number": 904,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('7') == '5'\nassert solution('24') == '0'\nassert solution('this is zero answer text') == '0'\nassert solution('Harbour Space University') == '1'\nassert solution('NonZERO') == '5'\n\n'''\n"
    },
    {
        "number": 904,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''NonZERO\n''') == '5'\nassert solution('''this is zero answer text\n''') == '0'\nassert solution('''Harbour Space University\n''') == '1'\nassert solution('''Hey You\n''') == '0'\nassert solution('''Peter Piper picked a peck of pickled peppers. How many pickled peppers did Peter Piper pick?\n''') == '4'\n"
    },
    {
        "number": 904,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('NonZERO') == '5'\nassert solution('this is zero answer text') == '0'\nassert solution('Harbour Space University') == '1'\nassert solution('Jawad Aref Tafsir') == '4'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 904,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1') == 1\nassert solution('This is zero answer text') == 0\nassert solution('This is zero answer text') == 0\nassert solution('Harbour Space University') == 1\nassert solution('NonZERO') == 5\n"
    },
    {
        "number": 904,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('NonZERO') == '5'\nassert solution('this is zero answer text') == '0'\nassert solution('Harbour Space University') == '1'\n"
    },
    {
        "number": 905,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"5 10\\n3 90\\n12 0\\n9 70\\n5 50\\n7 0\") == \"50\"\nassert solution(\"5 5\\n10 10\\n20 20\\n30 30\\n40 40\\n50 50\") == \"-1\"\nassert solution(\"3 1\\n1 2\\n2 3\") == \"-1\"\n\"\"\""
    },
    {
        "number": 905,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 905,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 905,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 905,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('5 10\\n3 90\\n12 0\\n9 70\\n5 50\\n7 0') == '50'\nassert solution('5 5\\n10 10\\n20 20\\n30 30\\n40 40\\n50 50') == '-1'\nassert solution('5 5\\n10 10\\n20 20\\n30 30\\n40 40\\n50 50\\n7 0') == '-1'\nassert solution('5 5\\n10 10\\n20 20\\n30 30\\n40 40\\n50 50\\n20 0') == '50'\nassert solution('5 5\\n10 10\\n20 20\\n30 30\\n40 40\\n50 50\\n10 0') == '50'\n"
    },
    {
        "number": 905,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"5 10\") == \"50\"\nassert solution(\"5 5\") == \"-1\"\nassert solution(\"5 10\\n3 90\\n12 0\\n9 70\\n5 50\\n7 0\") == \"50\"\nassert solution(\"2 4\\n1 3\\n1 4\\n1 3\\n1 3\\n1 3\") == \"3\"\nassert solution(\"3 2\\n1 2\\n1 2\\n1 2\") == \"-1\"\n"
    },
    {
        "number": 905,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == expect\n\"\"\"\n"
    },
    {
        "number": 905,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"5 10\\n3 90\\n12 0\\n9 70\\n5 50\\n7 0\") == \"50\"\nassert solution(\"5 5\\n10 10\\n20 20\\n30 30\\n40 40\\n50 50\") == \"-1\"\nassert solution(\"5 10\\n3 90\\n12 0\\n9 70\\n5 50\\n7 0\") == \"-1\"\nassert solution(\"5 5\\n10 10\\n20 20\\n30 30\\n40 40\\n50 50\") == \"-1\"\nassert solution(\"5 5\\n10 10\\n20 20\\n30 30\\n40 40\\n50 50\") == \"-1\"\n"
    },
    {
        "number": 905,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''5 10\n3 90\n12 0\n9 70\n5 50\n7 0''') == '50'\n\nassert solution('''5 5\n10 10\n20 20\n30 30\n40 40\n50 50''') == '-1'\n\nassert solution('''5 5\n10 10\n20 20\n30 30\n40 40\n10 10''') == '10'\n\nassert solution('''6 5\n2 10\n12 2\n7 10\n5 10\n3 5\n4 0''') == '10'\n\n\n\"\"\"\n"
    },
    {
        "number": 905,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"5 10\\n3 90\\n12 0\\n9 70\\n5 50\\n7 0\") == 50\n"
    },
    {
        "number": 906,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 906,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('1 1 -1') == '1'\nassert solution('1 3 1') == '1'\nassert solution('3 3 -1') == '16'\n\n\"\"\"\n\"\"\"\nTime:  O(n*m)\nSpace: O(1)\n\"\"\"\nclass Solution:\n    def magicField(self, n: int, m: int, k: int) -> int:\n        if k == 1:\n            return (n-1)*(m-1)\n        else:\n            return (n-1)*(m-1) * 2\n"
    },
    {
        "number": 906,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"1 1 -1\") == \"1\"\nassert solution(\"1 3 1\") == \"1\"\nassert solution(\"3 3 -1\") == \"16\"\n\"\"\"\n"
    },
    {
        "number": 906,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1 1 -1') == '1'\nassert solution('1 3 1') == '1'\nassert solution('3 3 -1') == '16'"
    },
    {
        "number": 906,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(1, 1, -1) == 1\nassert solution(1, 3, 1) == 1\nassert solution(3, 3, -1) == 16\nassert solution(10**10, 10**10, -1) == 72748376\nassert solution(10**10, 10**10, 1) == 72748377\n"
    },
    {
        "number": 906,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1 1 -1') == '1'\nassert solution('1 3 1') == '1'\nassert solution('3 3 -1') == '16'\nassert solution('4 3 3') == '8'\nassert solution('100000 100000 3') == '48886494597131847'\n\n-----What is the running time of your solution?\nThe running time of your solution is linear in the size of the test case, at least for small test cases.\n\n-----What is the most significant part of the running time?\nThe most significant part of the running time of a solution is the part which has a significant influence on the running time. For example, in the first example you don't have to search any block because it's already known that the block contains -1.\n\n-----What is the most significant part of the running time?\nThe most significant part of the running time of a solution is the part which has a significant influence on the running time. For example, in the first example you don't have to search any block because it's already known that the block contains -1.\n\"\"\"\n"
    },
    {
        "number": 906,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('1 1 -1') == '1'\nassert solution('1 3 1') == '1'\nassert solution('3 3 -1') == '16'\n"
    },
    {
        "number": 906,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1 1 -1') == '1'\nassert solution('1 3 1') == '1'\nassert solution('3 3 -1') == '16'\n"
    },
    {
        "number": 906,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"1 1 -1\") == \"1\"\nassert solution(\"1 3 1\") == \"1\"\nassert solution(\"3 3 -1\") == \"16\"\nassert solution(\"5 5 -1\") == \"336\"\nassert solution(\"1 3 1\") == \"1\"\n"
    },
    {
        "number": 906,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 907,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1 2\\n1 2\\n1 2\\n1 2\\n1 2') == 'NO'\nassert solution('1 2\\n1 2\\n1 2\\n1 2\\n1 2') == 'NO'\nassert solution('1 2\\n1 2\\n1 2\\n1 2\\n1 2') == 'NO'\nassert solution('1 2\\n1 2\\n1 2\\n1 2\\n1 2') == 'NO'\nassert solution('1 2\\n1 2\\n1 2\\n1 2\\n1 2') == 'NO'\n\n\n'''\nn,m = list(map(int,stdin.readline().split()))\nfor i in range(m):\n    a,b = list(map(int,stdin.readline().split()))\n    if a in range(1,n+1) and b in range(1,n+1) and (a in range(1,b) or b in range(1,a)):\n        print(\"YES\")\n        break\nelse:\n    print(\"NO\")\n\n'''\n"
    },
    {
        "number": 907,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('4 6\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2') == 'NO'\nassert solution('5 4\\n1 2\\n1 2\\n1 2\\n1 2\\n') == 'YES'\nassert solution('5 3\\n1 2\\n1 3\\n1 2\\n') == 'YES'\nassert solution('5 4\\n1 2\\n1 2\\n1 2\\n') == 'NO'\nassert solution('1 2\\n2 3\\n3 4\\n4 5\\n') == 'YES'\n"
    },
    {
        "number": 907,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''4 6''') == 'NO'\nassert solution('''5 4''') == 'YES'\nassert solution('''300000 5''') == 'YES'\nassert solution('''1 2''') == 'NO'\nassert solution('''1 2''') == 'NO'\n"
    },
    {
        "number": 907,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\\n') == 'YES'\nassert solution('1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n') == 'NO'\nassert solution('3 2\\n1 2\\n1 2\\n1 2\\n') == 'NO'\nassert solution('5 4\\n1 2\\n2 3\\n3 4\\n4 5\\n') == 'YES'\nassert solution('300000 5\\n1 2\\n1 2\\n1 2\\n1 2\\n') == 'YES'\n"
    },
    {
        "number": 907,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\\n4 5\\n') == 'NO'\nassert solution('5 4\\n1 2\\n2 3\\n3 4\\n4 5\\n') == 'YES'\nassert solution('300000 5\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n"
    },
    {
        "number": 907,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('4 6') == 'NO'\nassert solution('5 4') == 'YES'\nassert solution('300000 5') == 'YES'\nassert solution('300000 5') == 'YES'\nassert solution('1 1') == 'NO'\n"
    },
    {
        "number": 907,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 907,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == expected\n\"\"\""
    },
    {
        "number": 907,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\n    '''4 6\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4''') == 'YES'\nassert solution(\n    '''5 4\n1 2\n2 3\n3 4\n4 5\n''') == 'YES'\nassert solution(\n    '''1 2\n1 2\n1 2\n1 2\n1 2\n''') == 'YES'\nassert solution(\n    '''300000 5\n1 2\n1 2\n1 2\n1 2\n1 2\n''') == 'YES'\nassert solution(\n    '''2 3\n2 4\n2 3\n2 4\n2 4\n2 4\n''') == 'YES'\n"
    },
    {
        "number": 907,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('5 4\\n1 2\\n1 2\\n1 2\\n1 2\\n') == 'YES'\nassert solution('1000000 1000000\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n"
    },
    {
        "number": 908,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"\"\nassert solution(\"3\") == \"\"\nassert solution(\"2\") == \"\"\nassert solution(\"1 2\") == \"\"\n"
    },
    {
        "number": 908,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n\nimport sys"
    },
    {
        "number": 908,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1\\n' + '1\\n') == '-1'\nassert solution('1\\n' + '2\\n') == '-1'\nassert solution('1\\n' + '3\\n') == '-1'\nassert solution('1\\n' + '4\\n') == '-1'\nassert solution('1\\n' + '5\\n') == '-1'\n"
    },
    {
        "number": 908,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''3\n3\nb\na\nb''') == '1'\n\nassert solution('''2\n1 2\naa\nba\n''') == '1'\n\nassert solution('''2\n3 3\na\na\n''') == '-1'\n\nassert solution('''5\n1 3 1\na\na\na\na\na\na\n''') == '-1'\n\nassert solution('''2\n5 5\nbbb\naaa\n''') == '-1'"
    },
    {
        "number": 908,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('va\\n') == '1'\nassert solution('va\\n1\\n2\\n3\\n') == '1'\nassert solution('va\\n1\\n2\\n3\\n4\\n') == '-1'\nassert solution('va\\n1\\n3\\n2\\n') == '-1'\nassert solution('va\\n1\\n3\\n2\\n4\\n') == '-1'\n"
    },
    {
        "number": 908,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''2\n1 2\nba\nac\n\n''') == '1'\n\nassert solution('''3\n1 3 1\naa\nba\nac\n\n''') == '-1'\n\nassert solution('''2\n5 5\nbbb\naaa\n\n''') == '-1'\n\nassert solution('''3\n3 3\naaa\naa\n\n''') == '-1'\n\nassert solution('''2\n1 3 1\naa\nba\n\n''') == '1'\n'''\n"
    },
    {
        "number": 908,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('4\\n1 2\\nba\\nac') == '1'\nassert solution('3\\n1 3 1\\naa\\naa\\naa') == '-1'\nassert solution('2\\n3 3\\naa\\naa\\naa') == '-1'\nassert solution('2\\n3 3\\naa\\naa\\naa') == '-1'\nassert solution('2\\n3 3\\naa\\naa\\naa') == '-1'\n"
    },
    {
        "number": 908,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1\\n1') == '0'\nassert solution('2\\n2\\n2\\n2') == '0'\nassert solution('3\\n2\\n2\\n2\\n2') == '-1'\nassert solution('4\\n4\\n4\\n4\\n4\\n4\\n4') == '-1'\nassert solution('3\\n3\\n3\\n3\\n3\\n3\\n3') == '-1'\n"
    },
    {
        "number": 908,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('2\\n1 2\\na b\\na a\\na\\naa\\na') == '1'\nassert solution('3\\n1 3 1\\na a\\na\\na\\naa\\na') == '1'\nassert solution('3\\n5 5\\nbbb\\naaa\\naaa\\naa') == '-1'\nassert solution('2\\n3 3\\na a\\na\\na\\naa\\na') == '-1'\nassert solution('3\\n3 3\\na a\\na\\na\\naa\\na') == '-1'\n"
    },
    {
        "number": 908,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''2\n1 2\nba\nac''') == '1'\n\nassert solution('''3\n1 3 1\naa\nba\nac''') == '-1'\n\nassert solution('''2\n5 5\nbbb\naaa\n''') == '-1'\n\nassert solution('''2\n3 3\naaa\naa\n''') == '-1'\nassert solution('''2\n3 3\naaa\naa\n''') == '-1'"
    },
    {
        "number": 909,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"1 2 3\") == \"9\"\nassert solution(\"2 10 3\") == \"60\"\nassert solution(\"2 9 3\") == \"59\"\nassert solution(\"2 8 3\") == \"58\"\nassert solution(\"2 7 3\") == \"57\"\n"
    },
    {
        "number": 909,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"1\\n2\\n3\") == \"9\"\nassert solution(\"2\\n10\\n3\") == \"60\"\nassert solution(\"1\\n2\\n3\") == \"9\"\nassert solution(\"1\\n2\\n3\") == \"9\"\nassert solution(\"2\\n10\\n3\") == \"60\"\n"
    },
    {
        "number": 909,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(1,2,3) == \"9\"\nassert solution(2,10,3) == \"60\"\nassert solution(2,10,3) == \"60\"\nassert solution(1,2,3) == \"9\"\nassert solution(2,10,3) == \"60\"\n"
    },
    {
        "number": 909,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1+2*3=7') == '9'\nassert solution('1*(2+3)=5') == '6'\nassert solution('1*2*3=6') == '60'\nassert solution('(1+2)*3=9') == '9'\nassert solution('1+2*3') == '9'\n"
    },
    {
        "number": 909,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"1 2 3\") == \"9\"\nassert solution(\"2 10 3\") == \"60\"\nassert solution(\"4 5 1\") == \"20\"\nassert solution(\"5 2 4\") == \"20\"\nassert solution(\"10 6 4\") == \"60\"\n"
    },
    {
        "number": 909,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"1 2 3\") == \"9\"\nassert solution(\"2 10 3\") == \"60\"\nassert solution(\"2 3 10\") == \"60\"\nassert solution(\"10 3 2\") == \"60\"\nassert solution(\"3 4 2\") == \"6\"\n"
    },
    {
        "number": 909,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('1 2 3') == '9'\nassert solution('2 10 3') == '60'\nassert solution('2 3 4') == '7'\nassert solution('3 3 3') == '27'\nassert solution('1 1 1') == '1'\n"
    },
    {
        "number": 909,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3\") == \"9\"\nassert solution(\"1 2 3\") == \"9\"\nassert solution(\"2 3 4\") == \"9\"\nassert solution(\"1 1 1\") == \"3\"\nassert solution(\"4 2 6\") == \"12\"\n"
    },
    {
        "number": 909,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1\\n2\\n3') == '9'\nassert solution('2\\n10\\n3') == '60'\nassert solution('1\\n2\\n3') == '9'\nassert solution('2\\n3\\n10') == '60'\nassert solution('1\\n2\\n3') == '9'\n"
    },
    {
        "number": 909,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''1\n2\n3''') == '9'\nassert solution('''2\n10\n3''') == '60'\nassert solution('''1\n2\n10''') == '60'\nassert solution('''2\n10\n20''') == '160'\nassert solution('''3\n4\n5''') == '15'\n"
    },
    {
        "number": 910,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(input(\"\")) == int(input(\"\"))\n\"\"\"\n\nimport sys"
    },
    {
        "number": 910,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('3 2 2') == '0 3'\nassert solution('8 4 3') == '7 8 3'\nassert solution('10 2 2') == '-1'\nassert solution('7 8 3') == '0 1 4'"
    },
    {
        "number": 910,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"\"\"3 2 2\n\"\"\") == \"\"\"0 3\n1 2\n\n\"\"\", \"Input sample\"\n\nassert solution(\"\"\"8 4 3\n\"\"\") == \"\"\"7 8 3\n0 1 4\n6 0 5\n0 2 0\n\n\"\"\", \"Input sample 2\"\n\nassert solution(\"\"\"10 2 2\n\"\"\") == \"-1\", \"Input sample 3\"\n"
    },
    {
        "number": 910,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 910,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"3 2 2\") == \"-1\"\nassert solution(\"8 4 3\") == \"7 8 3\"\nassert solution(\"10 2 2\") == \"7 8 3\""
    },
    {
        "number": 910,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('8 2 2') == '7 8 3'\nassert solution('3 2 2') == '0 1 4'\nassert solution('10 2 2') == '-1'\nassert solution('10 3 3') == '7 8 9'\nassert solution('1 3 4') == '0 1 4'\n"
    },
    {
        "number": 910,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"8 4 3\\n3 2 2\\n0 1 4\\n6 0 5\\n0 2 0\") == \"-1\"\nassert solution(\"10 2 2\\n7 8 3\\n0 1 4\\n6 0 5\\n0 2 0\") == \"7 8 3\\n0 1 4\\n6 0 5\\n0 2 0\"\n\n\n\"\"\""
    },
    {
        "number": 910,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''3 2 2''') == '''0 3'''\nassert solution('''8 4 3''') == '''7 8 3'''\n\n\n-----\n\n\n\n\n\"\"\"\nimport sys"
    },
    {
        "number": 910,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 910,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(input()) == \"-1\"\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 911,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"Tie\"\nassert solution(\"3 2\") == \"Limak\"\nassert solution(\"3 6\") == \"Radewoosh\"\nassert solution(\"8 1\") == \"Tie\"\nassert solution(\"10 20 30 40 50 60 70 80\") == \"Limak\"\n"
    },
    {
        "number": 911,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('3 2\\n50 85 250\\n10 15 25') == 'Limak'\nassert solution('3 6\\n50 85 250\\n10 15 25') == 'Radewoosh'\nassert solution('8 1\\n10 20 30 40 50 60 70 80\\n8 10 58 63 71 72 75 76') == 'Tie'\nassert solution('3 4\\n1 1 1 1 1 1 1\\n1 1 1 1 1 1 1\\n1 1 1 1 1 1 1') == 'Limak'\nassert solution('3 4\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1') == 'Radewoosh'\n"
    },
    {
        "number": 911,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1\\n3\\n5') == 'Limak'\nassert solution('2\\n4\\n5') == 'Radewoosh'\nassert solution('2\\n2\\n2') == 'Tie'\nassert solution('1\\n1\\n1') == 'Tie'\n\n\n\n\n\n\"\"\"\n"
    },
    {
        "number": 911,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('3 2\\n50 85 250\\n10 15 25\\n') == 'Limak'\nassert solution('3 6\\n50 85 250\\n10 15 25\\n') == 'Radewoosh'\nassert solution('8 1\\n10 20 30 40 50 60 70 80\\n8 10 58 63 71 72 75 76\\n') == 'Tie'\n\n\n\"\"\""
    },
    {
        "number": 911,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('3 2\\n50 85 250\\n10 15 25') == 'Limak'\nassert solution('3 6\\n50 85 250\\n10 15 25') == 'Radewoosh'\nassert solution('8 1\\n10 20 30 40 50 60 70 80\\n8 10 58 63 71 72 75 76\\n') == 'Tie'\n\n\n\"\"\""
    },
    {
        "number": 911,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(input()) == \"Radewoosh\"\nassert solution(input()) == \"Limak\"\nassert solution(input()) == \"Tie\"\n\n'''"
    },
    {
        "number": 911,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"3 2\\n50 85 250\\n10 15 25\") == \"Limak\"\nassert solution(\"3 6\\n50 85 250\\n10 15 25\") == \"Radewoosh\"\nassert solution(\"8 1\\n10 20 30 40 50 60 70 80\\n8 10 58 63 71 72 75 76\") == \"Tie\"\nassert solution(\"5 3\\n10 11 15 13 14\\n15 16 17 18 19\\n15 17 19 18 18\") == \"Limak\"\nassert solution(\"8 1\\n10 20 30 40 50 60 70 80\\n8 10 58 63 71 72 75 76\") == \"Limak\"\n"
    },
    {
        "number": 911,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"3 2\\n50 85 250\\n10 15 25\\n\") == \"Limak\"\nassert solution(\"3 6\\n50 85 250\\n10 15 25\\n\") == \"Radewoosh\"\nassert solution(\"8 1\\n10 20 30 40 50 60 70 80\\n8 10 58 63 71 72 75 76\\n\") == \"Tie\"\nassert solution(\"7 11\\n10 1 2 3 4 5 6 7\\n8 9 10 11 12 13 14 15\\n\") == \"Limak\"\nassert solution(\"10 8\\n10 10 10 10 10 10 10 10\\n10 10 10 10 10 10 10 10\\n10 10 10 10 10 10 10 10\\n10 10 10 10 10 10 10 10\\n10 10 10 10 10 10 10 10\\n10 10 10 10 10 10 10 10\\n10 10 10 10 10 10 10 10\\n10 10 10 10 10 10 10 10\\n10 10 10 10 10 10 10 10\\n10 10 10 10 10 10 10 10\\n10 10 10 10 10 10 10 10\\n10 10 10 10 10 10 10 10\\n10 10 10 10 10 10 10 10\\n10 10 10 10 10 10 10 10\\n10 10 10 10 10 10 10 10\\n10 10 10 10 10 10 10 10\\n10 10 10 10 10 10 10 10\\n10 10 10 10 10 10 10 10\\n10 10 10 10 10 10 10 10\\n10 10 10 10 10 10 10 10\\n10 10 10 10 10 10 10 10\\n10 10 10 10 10 10 10 10\\n10 10 10 10 10 10 10 10\\n10 10 10 10 10 10 10 10\\n10 10 10 10 10 10 10 10\\n10 10 10 10 10 10 10 10\\n10 10 10 10 10 10 10 10\\n10 10 10 10 10 10 10 10\\n10 10 10 10 10 10 10 10\\n10 10 10 10 10 10 10 10\\n10 10 10 10 10 10 10 10\\n10 10 10 10 10 10 10 10\\n10 10 10 10 10 10 10 10\\n10 10 10 10 10 10 10 10\\n10 10 10 10 10 10 10 10\\n10 10 10 10 10 10 10 10\\n10 10 10 10 10 10 10 10\\n10 10 10 10 10 10 10 10\\n10 10 10 10 10 10 10 10\\n10 10 10 10 10 10 10 10\\n10 10 10 10 10 10 10 10\\n10 10 10 10 10 10 10 10\\n10 10 10 10 10 10 10 10\\n10 10 10 10 10 10 10 10\\n10 10 10 10 10 10 10 10\\n10 10 10 10 10 10 10 10\\n10 10 10 10 10 10 10 10\\n10 10 10 10 10 10 10 10\\n10 10 10 10 10 10 10 10\\n10 10 10 10 10 10 10 10\\n10 10 10 10 10 10 10 10\\n10 10 10 10 10 10 10 10\\n10 10 10 10 10 10 10 10\\n10 10 10 10 10 10 10 10\\n10 10 10 10 10 10 10 10\\n10 10 10 10 10 10 10 10\\n10 10 10 10 10 10 10 10\\n10 10 10 10 10 10 10 10\\n10 10 10 10 10 10 10 10\\n10 10 10 10 10 10 10 10\\n10 10 10 10 10 10 10 10\\n10 10 10 10 10 10 10 10\\n10 10 10 10 10 10 10 10\\n10 10 10 10 10 10 10 10\\n10 10 10 10 10 10 10 10\\n10 10 10 10 10 10 10 10\\n10 10 10 10 10 10 10 10\\n10 10 10 10 10 10 10 10\\n10 10 10 10 10 10 10 10\\n10 10 10 10 10 10 10 10\\n10 10 10 10 10 10 10 10\\n10 10 10 10 10 10 10 10\\n10 10 10 10 10 10 10 10\\n10 10 10 10 10 10 10 10\\n10 10 10 10 10 10 10 10\\n10 10 10 10 10 10 10 10\\n10 10 10 10 10 10 10 10\\n10 10 10 10 10 10 10 10\\n10 10 10 10 10 10 10 10\\n10 10 10 10 10 10 10 10\\n10 10 10 10 10 10 10 10\\n10 10 10 10 10 10 10 10\\n10 10 10 10 10 10 10 10\\n10 10 10 10 10 10 10 10"
    },
    {
        "number": 911,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(input(\"\")) == 'Limak'\nassert solution(input(\"3 2\\n50 85 250\\n10 15 25\")) == 'Radewoosh'\nassert solution(input(\"3 6\\n50 85 250\\n10 15 25\")) == 'Tie'\nassert solution(input(\"8 1\\n10 20 30 40 50 60 70 80\")) == 'Limak'\nassert solution(input(\"8 10 58 63 71 72 75 76\\n8 10 58 63 71 72 75 76\")) == 'Radewoosh'\n"
    },
    {
        "number": 911,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1 2') == 'Limak'\nassert solution('2 1') == 'Limak'\nassert solution('1 2 3 4 5 6 7 8') == 'Tie'\n\n\n\n>>> solution('2 2')\n'Limak'\n>>> solution('2 1')\n'Limak'\n>>> solution('1 2 3 4 5 6 7 8')\n'Tie'\n\n\"\"\""
    },
    {
        "number": 912,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == result\n\"\"\"\n"
    },
    {
        "number": 912,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''5\n5 2 3\n1 2 3\n4 3 3\n4 1 2\n10 2 6\n1 2 3 4 5 7\n2 1 1\n2\n100 76 8\n76 75 36 67 41 74 10 77''') == \"2\"\nassert solution('''5\n5 2 3\n1 2 3\n4 3 3\n4 1 2\n10 2 6\n1 2 3 4 5 7\n2 1 1\n2\n100 76 8\n76 75 36 67 41 74 10 77''') == \"0\"\nassert solution('''5\n5 2 3\n1 2 3\n4 3 3\n4 1 2\n10 2 6\n1 2 3 4 5 7\n2 1 1\n2\n100 76 8\n76 75 36 67 41 74 10 77''') == \"4\"\n\n'''\n"
    },
    {
        "number": 912,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''5\n5 2 3\n1 2 3\n4 3 3\n4 1 2\n10 2 6\n1 2 3 4 5 7\n2 1 1\n2\n100 76 8\n76 75 36 67 41 74 10 77\n''') == '2'\n'''\n"
    },
    {
        "number": 912,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1 2 3') == '2'\nassert solution('2 1 1') == '0'\nassert solution('4 3 3') == '4'\nassert solution('10 2 6') == '2'\n\n\n-----Best Practice-----\n"
    },
    {
        "number": 912,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''5\n5 2 3\n1 2 3\n4 3 3\n4 1 2\n10 2 6\n1 2 3 4 5 7\n2 1 1\n2''') == '2'\nassert solution('''5\n5 2 3\n1 2 3\n4 3 3\n4 1 2\n10 2 6\n1 2 3 4 5 7\n2 1 1\n2''') == '0'\nassert solution('''1\n1 1 1\n1''') == '1'\n'''"
    },
    {
        "number": 912,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''5 2 3\n1 2 3\n4 3 3\n4 1 2\n10 2 6\n1 2 3 4 5 7\n2 1 1\n2''') == '2'\nassert solution('''100 76 8\n76 75 36 67 41 74 10 77\n\n''') == '0'\n"
    },
    {
        "number": 912,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''5\n5 2 3\n1 2 3\n4 3 3\n4 1 2\n10 2 6\n1 2 3 4 5 7\n2 1 1\n2\n100 76 8\n76 75 36 67 41 74 10 77\n''') == '2'\n\nassert solution('''5\n5 2 3\n1 2 3\n4 3 3\n4 1 2\n10 2 6\n1 2 3 4 5 7\n2 1 1\n2\n100 76 8\n76 75 36 67 41 74 10 77\n''') == '0'\n\nassert solution('''5\n5 2 3\n1 2 3\n4 3 3\n4 1 2\n10 2 6\n1 2 3 4 5 7\n2 1 1\n2\n100 76 8\n76 75 36 67 41 74 10 77\n''') == '4'\n\nassert solution('''5\n5 2 3\n1 2 3\n4 3 3\n4 1 2\n10 2 6\n1 2 3 4 5 7\n2 1 1\n2\n100 76 8\n76 75 36 67 41 74 10 77\n''') == '2'\n\nassert solution('''5\n5 2 3\n1 2 3\n4 3 3\n4 1 2\n10 2 6\n1 2 3 4 5 7\n2 1 1\n2\n100 76 8\n76 75 36 67 41 74 10 77\n''') == '0'"
    },
    {
        "number": 912,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\n'''5\n5 2 3\n1 2 3\n4 3 3\n4 1 2\n10 2 6\n1 2 3 4 5 7\n2 1 1\n2\n100 76 8\n76 75 36 67 41 74 10 77\n'''\n) == '2'\n\n\nassert solution(\n'''1\n1 2 3\n1\n1 2 3\n'''\n) == '0'\n\n\nassert solution(\n'''1\n1\n1\n1\n1\n'''\n) == '0'\n\n\nassert solution(\n'''10\n5 2 3\n1 2 3\n4 3 3\n4 1 2\n10 2 6\n1 2 3 4 5 7\n2 1 1\n2\n100 76 8\n76 75 36 67 41 74 10 77\n'''\n) == '4'\n\n\nassert solution(\n'''1\n1000 903 111\n'''\n) == '0'\n"
    },
    {
        "number": 912,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''5\n5 2 3\n1 2 3\n4 3 3\n4 1 2\n10 2 6\n1 2 3 4 5 7\n2 1 1\n2\n100 76 8\n76 75 36 67 41 74 10 77\n''') == '2'\n\nassert solution('''5\n5 2 3\n1 2 3\n4 3 3\n4 1 2\n10 2 6\n1 2 3 4 5 7\n2 1 1\n2\n0 0 0 0 0 0\n''') == '0'\n\nassert solution('''5\n5 2 3\n1 2 3\n4 3 3\n4 1 2\n10 2 6\n1 2 3 4 5 7\n2 1 1\n2\n0 0 0 0 0 0\n''') == '0'\n\nassert solution('''5\n5 2 3\n1 2 3\n4 3 3\n4 1 2\n10 2 6\n1 2 3 4 5 7\n2 1 1\n2\n0 0 0 0 0 0\n''') == '0'\n\nassert solution('''5\n5 2 3\n1 2 3\n4 3 3\n4 1 2\n10 2 6\n1 2 3 4 5 7\n2 1 1\n2\n0 0 0 0 0 0\n''') == '0'"
    },
    {
        "number": 912,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('5\\n5 2 3\\n1 2 3\\n4 3 3\\n4 1 2\\n10 2 6\\n1 2 3 4 5 7\\n2 1 1\\n2\\n100 76 8\\n76 75 36 67 41 74 10 77') == '2\\n0\\n4\\n0\\n2'\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 913,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"\") == -1\nassert solution(\"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 913,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('1\\n1\\n1\\n1\\n1') == '1'\nassert solution('2\\n1 1\\n1 0') == '3'\nassert solution('2\\n0 1\\n0 0') == '-1'\nassert solution('4\\n1 1 1 1\\n1 1 1 1') == '4'\nassert solution('9\\n1 0 0 0 0 0 0 0 1\\n0 1 1 0 1 1 1 1 0') == '4'\n\n\"\"\"\n"
    },
    {
        "number": 913,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''5\n1 1 1 0 0\n0 1 1 1 1\n''') == \"3\"\nassert solution('''3\n0 0 0\n0 0 0\n''') == \"-1\"\nassert solution('''9\n1 0 0 0 0 0 0 0 1\n0 1 1 0 1 1 1 1 0\n''') == \"4\"\n'''"
    },
    {
        "number": 913,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 1 1 0 0\\n0 1 1 1 1 1\\n\") == \"3\"\nassert solution(\"4\\n1 1 1 1 1\\n1 1 1 1 1\\n\") == \"-1\"\nassert solution(\"9\\n1 0 0 0 0 0 0 0 1\\n0 1 1 0 1 1 1 1 0\\n\") == \"4\"\nassert solution(\"9\\n1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1\\n\") == \"-1\"\n\"\"\""
    },
    {
        "number": 913,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\n\"\"\"\n5\n1 1 1 0 0\n0 1 1 1 1\n\"\"\"\n) == \"4\"\n\nassert solution(\n\"\"\"\n3\n0 0 0\n0 0 0\n\"\"\"\n) == \"-1\"\n\nassert solution(\n\"\"\"\n4\n1 1 1 1\n1 1 1 1\n\"\"\"\n) == \"4\"\n\nassert solution(\n\"\"\"\n9\n1 0 0 0 0 0 0 0 1\n0 1 1 0 1 1 1 1 0\n\"\"\"\n) == \"4\"\n\nassert solution(\n\"\"\"\n0\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1"
    },
    {
        "number": 913,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('3\\n1 1 1 0 0\\n0 1 1 1 1 1\\n') == '3'\nassert solution('3\\n1 1 1 0 0\\n0 1 1 1 1 1\\n') == '3'\nassert solution('4\\n1 1 1 1 1\\n1 1 1 1 1\\n') == '-1'\nassert solution('9\\n1 0 0 0 0 0 0 0 1\\n0 1 1 0 1 1 1 1 0\\n') == '4'\nassert solution('9\\n1 0 0 0 0 0 0 0 1\\n0 1 1 0 1 1 1 1 0\\n') == '-1'\n"
    },
    {
        "number": 913,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''\n5\n1 1 1 0 0\n0 1 1 1 1\n''') == '3'\n\nassert solution('''\n3\n0 0 0\n0 0 0\n''') == '-1'\n\nassert solution('''\n9\n1 0 0 0 0 0 0 0 1\n0 1 1 0 1 1 1 1 0\n''') == '4'\n\n'''"
    },
    {
        "number": 913,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('3\\n1 1 1 0 0\\n0 1 1 1 1 1\\n') == '3'\nassert solution('2\\n0 0 0\\n0 0 0\\n') == '-1'\nassert solution('3\\n1 1 1 1\\n1 1 1 1\\n') == '4'\nassert solution('4\\n1 1 1 1 1\\n1 1 1 1 1\\n') == '-1'\nassert solution('9\\n1 0 0 0 0 0 0 0 1\\n0 1 1 0 1 1 1 1 0\\n') == '4'\n"
    },
    {
        "number": 913,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('5\\n1 1 1 0 0\\n0 1 1 1 1 1\\n') == '3'\nassert solution('3\\n0 0 0\\n0 0 0\\n') == '-1'\nassert solution('9\\n1 0 0 0 0 0 0 0 1\\n0 1 1 0 1 1 1 1 0\\n') == '4'\nassert solution('4\\n1 1 1 1\\n1 1 1 1\\n') == '-1'\nassert solution('9\\n1 0 0 0 0 0 0 0 1\\n0 1 1 0 1 1 1 1 0\\n') == '4'\n"
    },
    {
        "number": 913,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''5\n1 1 1 0 0\n0 1 1 1 1\n''') == '3'\nassert solution('''3\n0 0 0\n0 0 0\n''') == '-1'\nassert solution('''9\n1 0 0 0 0 0 0 0 1\n0 1 1 0 1 1 1 1 0\n''') == '4'\nassert solution('''4\n1 1 1 1\n1 1 1 1\n''') == '-1'\n"
    },
    {
        "number": 914,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''banana\n4\n''') == '2\\nbaan'\n\nassert solution('''banana\n3\n''') == '3\\nnab'\n\nassert solution('''banana\n2\n''') == '-1'\n\nassert solution('''apple\n5\n''') == '1\\naap'\n\nassert solution('''abcd\n2\n''') == '-1'"
    },
    {
        "number": 914,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"banana\") == \"baan\"\nassert solution(\"banana\") == \"baan\"\nassert solution(\"banana\") == \"baan\"\nassert solution(\"banana\") == \"baan\"\nassert solution(\"banana\") == \"baan\"\n"
    },
    {
        "number": 914,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 914,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('bab') == 'bba'\nassert solution('bab') == 'bba'\nassert solution('bab') == 'bba'\nassert solution('bab') == 'bba'\n"
    },
    {
        "number": 914,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n\nfrom sys import stdin,stdout\nimport re\n"
    },
    {
        "number": 914,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''banana''') == ''\nassert solution('''banana'''\n    '''4''') == '''2\nbaan'''\nassert solution('''banana'''\n    '''3''') == '''-1'''"
    },
    {
        "number": 914,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 914,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"banana\") == \"baan\"\nassert solution(\"banana\") == \"baan\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == -1\nassert solution(\"aaaaaa\") == -1\n"
    },
    {
        "number": 914,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"banana\") == \"baan\"\nassert solution(\"banana\") == \"baan\"\nassert solution(\"banana\") == \"baan\"\nassert solution(\"banana\") == \"baan\"\nassert solution(\"banana\") == \"baan\"\n"
    },
    {
        "number": 914,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"banana\") == \"baan\"\nassert solution(\"banana\") == \"baan\"\nassert solution(\"banana\") == \"baan\"\nassert solution(\"banana\") == \"baan\"\nassert solution(\"banana\") == \"baan\"\n"
    },
    {
        "number": 915,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdin[2:-2]\nprint(solution(stdin))\n\"\"\"\n\nimport sys\n\nk = int(sys.stdin.readline().strip())"
    },
    {
        "number": 915,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('codeforces') == 'codeforces'\nassert solution('codeforcesisawesome') == 'codeforcesss'\nassert solution('codeforcesisawesomeisawesome') == 'codeforcesss'\nassert solution('codeforcesisawesomeisawesomeisawesome') == 'codeforcesss'\n"
    },
    {
        "number": 915,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"codeforces\") == \"codeforces\"\nassert solution(\"codeforcesisawesome\") == \"codeforcessisawesome\"\nassert solution(\"codeforcesisawesomecodeforcesisawesome\") == \"codeforcessisawesomecodeforcesisawesome\"\nassert solution(\"codeforces\") == \"codeforces\"\nassert solution(\"codeforcesisawesome\") == \"codeforcessisawesome\"\n"
    },
    {
        "number": 915,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdin\nprint('test_passed')"
    },
    {
        "number": 915,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdin[:1]+'c'+stdin[1:2]+'o'+stdin[2:3]+'f'+stdin[3:4]+'or'+stdin[4:5]+'f'+stdin[5:6]+'o'+stdin[6:7]+'r'+stdin[7:8]+'s'+stdin[8:]\nassert solution(stdin) == stdin[:1]+'c'+stdin[1:2]+'o'+stdin[2:3]+'f'+stdin[3:4]+'or'+stdin[4:5]+'f'+stdin[5:6]+'o'+stdin[6:7]+'r'+stdin[7:8]+'s'+stdin[8:]\nassert solution(stdin) == stdin[:1]+'c'+stdin[1:2]+'o'+stdin[2:3]+'f'+stdin[3:4]+'or'+stdin[4:5]+'f'+stdin[5:6]+'o'+stdin[6:7]+'r'+stdin[7:8]+'s'+stdin[8:]\nassert solution(stdin) == stdin[:1]+'c'+stdin[1:2]+'o'+stdin[2:3]+'f'+stdin[3:4]+'or'+stdin[4:5]+'f'+stdin[5:6]+'o'+stdin[6:7]+'r'+stdin[7:8]+'s'+stdin[8:]\nassert solution(stdin) == stdin[:1]+'c'+stdin[1:2]+'o'+stdin[2:3]+'f'+stdin[3:4]+'or'+stdin[4:5]+'f'+stdin[5:6]+'o'+stdin[6:7]+'r'+stdin[7:8]+'s'+stdin[8:]\n"
    },
    {
        "number": 915,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''1\n''') == 'codeforces'\nassert solution('''2\n''') == 'codeforcess'\nassert solution('''3\n''') == 'codeforces'\nassert solution('''4\n''') == 'codeforces'\nassert solution('''5\n''') == 'codeforces'\n"
    },
    {
        "number": 915,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"0\") == \"\"\nassert solution(\"2\") == \"\"\nassert solution(\"3\") == \"\"\nassert solution(\"1\") == \"codeforces\"\n"
    },
    {
        "number": 915,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('codeforces') == 'codeforces'\nassert solution('codeforcesisawesome') == 'codeforcesss'\nassert solution('codeforcesisawesomeisawesome') == 'codeforcesss'\nassert solution('codeforcesisawesomeisawesomeisawesome') == 'codeforcesss'\n"
    },
    {
        "number": 915,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''1''') == ''\nassert solution('''3''') == ''\nassert solution('''9''') == ''\nassert solution('''12''') == ''\nassert solution('''123456789''') == ''\n"
    },
    {
        "number": 915,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdin\n\n\n\"\"\"\n\nimport sys\nsys.setrecursionlimit(1500)"
    },
    {
        "number": 916,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"3\\n2 2 3\") == \"1\\n\"\nassert solution(\"3\\n1 1\\n\") == \"0\\n\"\nassert solution(\"3\\n1 2 3\\n1 1\\n\") == \"0\\n\"\nassert solution(\"3\\n1 2 3\\n1 1\\n\") == \"1\\n\"\nassert solution(\"3\\n7 2 2 5 4 3 1 1\\n1 1 1 4 4 5 6\\n\") == \"4\\n\"\n\n\n\n\"\"\""
    },
    {
        "number": 916,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''3\n2 2 3\n1 1\n''') == '0'\n\nassert solution('''3\n1 2 3\n1 1\n''') == '1'\n\nassert solution('''3\n1 2 3\n1 1\n''') == '0'\n\nassert solution('''8\n7 2 2 5 4 3 1 1\n1 1 1 4 4 5 6\n''') == '4'\n"
    },
    {
        "number": 916,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('3\\n2 2 3\\n1 1') == '1'\nassert solution('8\\n7 2 2 5 4 3 1 1\\n1 1 1 4 4 5 6\\n') == '4'\nassert solution('3\\n1 2 3\\n1 1\\n') == '0'\nassert solution('8\\n7 2 2 5 4 3 1 1\\n1 1 1 4 4 5 6\\n') == '0'\nassert solution('8\\n7 2 2 5 4 3 1 1\\n1 1 1 4 4 5 6\\n') == '0'\n"
    },
    {
        "number": 916,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''\n3\n2 2 3\n1 1\n''') == '1'\n\nassert solution('''\n8\n7 2 2 5 4 3 1 1\n1 1 1 4 4 5 6\n''') == '0'\n"
    },
    {
        "number": 916,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('3\\n2 2 3\\n1 1\\n') == '1'\nassert solution('3\\n1 1\\n') == '0'\nassert solution('3\\n1 2 3\\n1 1\\n') == '1'"
    },
    {
        "number": 916,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''3\n2 2 3\n1 1\n''') == '1'\n\nassert solution('''8\n7 2 2 5 4 3 1 1\n1 1 1 4 4 5 6\n''') == '4'\n\nassert solution('''2\n5 4\n5 4\n''') == '0'\n\nassert solution('''3\n1 2 3\n1 1\n''') == '0'\n\nassert solution('''2\n5 4\n5 1\n''') == '1'"
    },
    {
        "number": 916,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('1\\n1\\n') == '0'\nassert solution('2\\n1\\n') == '1'\nassert solution('3\\n2\\n') == '1'\nassert solution('4\\n2\\n') == '2'\nassert solution('5\\n2\\n') == '3'\n"
    },
    {
        "number": 916,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1\\n2\\n') == '1'\nassert solution('3\\n1 2 3\\n1 1\\n') == '0'\nassert solution('2\\n1 2\\n1 1\\n') == '0'\nassert solution('4\\n1 2 2 3\\n1 1 1 4\\n') == '4'\nassert solution('7\\n2 2 2 5 4 3 1 1\\n1 1 1 4 4 5 6\\n') == '4'\n"
    },
    {
        "number": 916,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"\"\nassert solution(\"2\") == \"\"\nassert solution(\"3\") == \"\"\nassert solution(\"4\") == \"\"\n"
    },
    {
        "number": 916,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"3\\n2 2 3\\n1 1\\n\") == \"1\"\nassert solution(\"3\\n2 2 3\\n1 1\\n\") == \"0\"\nassert solution(\"8\\n7 2 2 5 4 3 1 1\\n1 1 1 4 4 5 6\\n\") == \"4\"\n\n'''\n\n'''"
    },
    {
        "number": 917,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == answer()\n"
    },
    {
        "number": 917,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('3 10 2') == '14'\nassert solution('4 10 2') == '262'\nassert solution('4 10 2') == '262'\nassert solution('4 10 2') == '262'\nassert solution('4 10 2') == '262'\n"
    },
    {
        "number": 917,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdin\nassert solution('3 10 2') == '14'\nassert solution('4 10 2') == '262'\n\n\n\"\"\"\n\nfrom __future__ import annotations\n\nfrom typing import Iterator, List, Tuple\n\nNumber = int\nNumberList = List[Number]\n\nNumberList2 = List[Tuple[Number, Number]]\n"
    },
    {
        "number": 917,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('2 3 2\\n1 1 1\\n2 2 3\\n3 3 2\\n\\n') == '14'\nassert solution('3 3 3\\n1 1 1\\n2 2 3\\n3 3 2\\n\\n') == '262'\nassert solution('4 10 2\\n2 3 8\\n3 4 7\\n\\n') == '262'\nassert solution('2 1 3\\n1 1 3\\n2 2 3\\n3 3 2\\n\\n') == '6'\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 917,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"3 3 3\") == \"14\"\nassert solution(\"4 10 2\") == \"262\"\n\n\n\n\"\"\""
    },
    {
        "number": 917,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('4 10 2') == '262'\nassert solution('2 3 8') == '14'\nassert solution('3 3 2') == '262'\nassert solution('1 1 1') == '0'\nassert solution('2 2 3') == '14'\n"
    },
    {
        "number": 917,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"3 10 2\\n1 1 1\\n2 2 3\\n3 3 2\") == \"14\"\nassert solution(\"4 10 2\\n2 3 8\\n3 4 7\\n4 2 3\") == \"262\"\nassert solution(\"3 5 2\\n1 1 1\\n1 1 1\") == \"8\"\nassert solution(\"1 1 1\\n1 1 1\") == \"1\"\nassert solution(\"1 1 1\\n1 1 1\\n1 1 1\") == \"2\"\n"
    },
    {
        "number": 917,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''3 3 3''') == '14'\nassert solution('''4 10 2''') == '262'\nassert solution('''3 2 8''') == '262'\nassert solution('''2 3 7''') == '262'\nassert solution('''2 3 2''') == '140'\n"
    },
    {
        "number": 917,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''3 2 3''') == '14'\nassert solution('''4 10 2''') == '262'\nassert solution('''3 3 2''') == '14'\nassert solution('''4 10 2''') == '262'\nassert solution('''7 19 0''') == '262'\n"
    },
    {
        "number": 917,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == expected\n\"\"\"\n\nimport sys\nfrom math import sqrt"
    },
    {
        "number": 918,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"5 2\\nIvanov 1 763\\nAndreev 2 800\\nPetrov 1 595\\nSidorov 1 790\\nSemenov 2 503\") == \"Sidorov Ivanov\\nAndreev Semenov\"\nassert solution(\"5 2\\nIvanov 1 800\\nAndreev 2 763\\nPetrov 1 800\\nSidorov 1 800\\nSemenov 2 503\") == \"?\\nAndreev Semenov\"\nassert solution(\"5 2\\nIvanov 1 800\\nAndreev 2 763\\nPetrov 1 800\\nSidorov 1 800\\nSemenov 2 503\\nSamov 2 400\") == \"?\\n?\\n?\\n?\\n?\"\n\"\"\""
    },
    {
        "number": 918,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"3 2\\nIvanov 1 800\\nAndreev 2 800\\nPetrov 1 800\\nSidorov 1 800\\nSemenov 2 503\") == 'Sidorov Ivanov\\nAndreev Semenov\\n'\nassert solution(\"5 2\\nIvanov 1 800\\nAndreev 2 763\\nPetrov 1 800\\nSidorov 1 800\\nSemenov 2 503\") == '?\\nAndreev Semenov\\n'\nassert solution(\"2 2\\nIvanov 1 800\\nAndreev 2 800\\nSemenov 1 800\\nSidorov 1 800\") == '?\\n?'\n\n\n\n'''\n"
    },
    {
        "number": 918,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''5 2\nIvanov 1 800\nAndreev 2 763\nPetrov 1 800\nSidorov 1 800\nSemenov 2 503''') == '''Sidorov Ivanov\nAndreev Semenov'''\nassert solution('''5 2\nIvanov 1 800\nAndreev 2 763\nPetrov 1 800\nSidorov 1 800\nSemenov 2 503\nSemenov 2 503''') == '''?\nAndreev Semenov'''\nassert solution('''5 2\nIvanov 1 800\nAndreev 2 800\nPetrov 1 800\nSidorov 1 800\nSemenov 2 503\nSemenov 2 503''') == '''Sidorov Ivanov\nAndreev Semenov'''\nassert solution('''5 2\nIvanov 1 800\nAndreev 2 800\nPetrov 1 800\nSidorov 1 800\nSemenov 2 503\nSemenov 2 503\nSemenov 2 503''') == '''?\nSemenov Semenov\nAndreev Semenov'''\nassert solution('''5 2\nIvanov 1 800\nAndreev 2 800\nPetrov 1 800\nSidorov 1 800\nSemenov 2 503\nSemenov 2 503\nSemenov 2 503\nSemenov 2 503''') == '''?\n?\n?'''\n"
    },
    {
        "number": 918,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''5 2\nIvanov 1 763\nAndreev 2 800\nPetrov 1 595\nSidorov 1 790\nSemenov 2 503\n''') == 'Sidorov Ivanov\\nAndreev Semenov\\n'\nassert solution('''5 2\nIvanov 1 763\nAndreev 2 800\nPetrov 1 595\nSidorov 1 790\nSemenov 2 503\n''') == '?\\nAndreev Semenov\\n'\nassert solution('''5 2\nIvanov 1 800\nAndreev 2 763\nPetrov 1 800\nSidorov 1 800\nSemenov 2 503\n''') == '?\\n?\\n'\nassert solution('''5 2\nIvanov 1 800\nAndreev 2 763\nPetrov 1 800\nSidorov 1 800\nSemenov 2 503\n''') == '?\\n?\\n'\nassert solution('''5 2\nIvanov 1 800\nAndreev 2 763\nPetrov 1 800\nSidorov 1 800\nSemenov 2 503\n''') == '?\\n?\\n'\n'''\n'''\n"
    },
    {
        "number": 918,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('5 2\\nIvanov 1 763\\nAndreev 2 800\\nPetrov 1 800\\nSidorov 1 800\\nSemenov 2 503') == 'Sidorov Ivanov\\nAndreev Semenov'\nassert solution('5 2\\nIvanov 1 800\\nAndreev 2 763\\nPetrov 1 800\\nSidorov 1 800\\nSemenov 2 503') == '?\\nAndreev Semenov'\nassert solution('5 2\\nIvanov 1 800\\nAndreev 2 763\\nPetrov 1 800\\nSidorov 1 804\\nSemenov 2 503') == 'Semenov Ivanov'\nassert solution('5 2\\nIvanov 1 800\\nAndreev 2 763\\nPetrov 1 800\\nSidorov 1 800\\nSemenov 2 503') == '?\\nAndreev Semenov'\nassert solution('5 2\\nIvanov 1 800\\nAndreev 2 763\\nPetrov 1 800\\nSidorov 1 800\\nSemenov 2 503') == '?\\nAndreev Semenov'\n"
    },
    {
        "number": 918,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"\n5 2\nIvanov 1 763\nAndreev 2 800\nPetrov 1 595\nSidorov 1 790\nSemenov 2 503\n\"\"\") == \"\"\"\nSidorov Ivanov\nAndreev Semenov\n\"\"\"\n"
    },
    {
        "number": 918,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''5 2\nIvanov 1 800\nAndreev 2 763\nPetrov 1 800\nSidorov 1 800\nSemenov 2 503\n''') == 'Sidorov Ivanov'\n\nassert solution('''5 2\nIvanov 1 763\nAndreev 2 800\nPetrov 1 800\nSidorov 1 800\nSemenov 2 503\n''') == 'Andreev Semenov'\n\nassert solution('''5 2\nIvanov 1 800\nAndreev 2 763\nPetrov 1 800\nSidorov 1 800\nSemenov 2 503\n''') == '?'\n\nassert solution('''5 2\nIvanov 1 763\nAndreev 2 800\nPetrov 1 790\nSidorov 1 800\nSemenov 2 503\n''') == 'Ivanov Semenov'\n\nassert solution('''5 2\nIvanov 1 800\nAndreev 2 763\nPetrov 1 800\nSidorov 1 790\nSemenov 2 503\n''') == 'Andreev Semenov'"
    },
    {
        "number": 918,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(input) == output\n"
    },
    {
        "number": 918,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''5 2\nIvanov 1 800\nAndreev 2 763\nPetrov 1 800\nSidorov 1 800\nSemenov 2 503''') == 'Sidorov Ivanov'\nassert solution('''5 2\nIvanov 1 800\nAndreev 2 763\nPetrov 1 800\nSidorov 1 800\nSemenov 2 503\nIvanov 1 800\nSemenov 2 503''') == '?'\nassert solution('''5 2\nIvanov 1 800\nAndreev 2 763\nPetrov 1 800\nSidorov 1 800\nSemenov 2 503\nIvanov 1 800\nSemenov 2 503''') == 'Andreev Semenov'\nassert solution('''5 3\nIvanov 1 800\nAndreev 2 763\nPetrov 1 800\nSidorov 1 800\nSemenov 2 503\nIvanov 1 800\nSemenov 2 503''') == 'Sidorov Ivanov'\nassert solution('''5 3\nIvanov 1 800\nAndreev 2 763\nPetrov 1 800\nSidorov 1 800\nSemenov 2 503\nIvanov 1 800\nSemenov 2 503''') == '?'\n"
    },
    {
        "number": 918,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('5 2\\nIvanov 1 763\\nAndreev 2 800\\nPetrov 1 800\\nSidorov 1 800\\nSemenov 2 503') == 'Sidorov Ivanov\\nAndreev Semenov\\n'\n\nassert solution('5 2\\nIvanov 1 800\\nAndreev 2 763\\nPetrov 1 800\\nSidorov 1 800\\nSemenov 2 503') == '?\\nAndreev Semenov\\n'\n\nassert solution('5 2\\nIvanov 1 763\\nAndreev 2 800\\nPetrov 1 595\\nSidorov 1 790\\nSemenov 2 503') == '?\\nAndreev Semenov\\n'\n\nassert solution('5 2\\nIvanov 1 763\\nAndreev 2 800\\nPetrov 1 595\\nSidorov 1 790\\nSemenov 2 503\\nPetrov 1 595') == '?\\nSemenov Ivanov\\n'\n\nassert solution('5 2\\nIvanov 1 763\\nAndreev 2 800\\nPetrov 1 790\\nSemenov 2 503\\nSemenov 1 790\\nSemenov 2 503') == '?\\nSemenov Ivanov\\n'"
    },
    {
        "number": 919,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('2 2\\nproblem\\n') == '-1'\nassert solution('5 3\\nxyabd\\n') == '29'\nassert solution('7 4\\nabaabbaaabbb\\n') == '34'\nassert solution('2 2\\nab\\n') == '-1'\nassert solution('12 1\\nabaabbaaabbb\\n') == '1'\n"
    },
    {
        "number": 919,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('5 3\\nxyabd\\n') == '29'\nassert solution('7 4\\nproblem\\n') == '34'\nassert solution('2 2\\nab\\n') == '-1'\nassert solution('10 1\\nabcdefgh\\n') == '-1'\n\n\n\"\"\"\n\nN, K = map(int, stdin.readline().split())\n\nS = stdin.readline().strip()\n\nstage_set = set()\n\nmin_weight = -1\n\nfor i in range(N):\n    stage = S[i]\n    stage_weight = ord(stage) - ord('a') + 1\n    stage_set.add(stage)\n    if len(stage_set) == K:\n        min_weight = stage_weight if min_weight == -1 else min(stage_weight, min_weight)\n    \n    elif len(stage_set) > K:\n        stage_set.remove(S[i - 1])\n    \n    if i == N - 1:\n        break\n    stage = S[i + 1]\n    stage_weight = ord(stage) - ord('a') + 1\n    stage_set.add(stage)\n    if len(stage_set) == K:\n        min_weight = stage_weight if min_weight == -1 else min(stage_weight, min_weight)\n    \n    elif len(stage_set) > K:\n        stage_set.remove(S[i])\n\n    if i == N - 2:\n        break"
    },
    {
        "number": 919,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"1 5\") == \"0\"\nassert solution(\"1 5\") == \"-1\"\nassert solution(\"2 4\") == \"1\"\nassert solution(\"1 10\") == \"-1\"\nassert solution(\"1 5\") == \"29\"\n"
    },
    {
        "number": 919,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('ab') == 'ab'\nassert solution('ba') == 'ba'\nassert solution('baa') == 'baa'\nassert solution('baab') == 'baab'\n"
    },
    {
        "number": 919,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 919,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('5 3\\nxyabd\\n') == '29'\nassert solution('7 4\\nproblem\\n') == '34'\nassert solution('12 1\\nabaabbaaabbb\\n') == '1'"
    },
    {
        "number": 919,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('4 2\\nab') == '1'\nassert solution('12 1\\nabaabbaaabbb') == '34'\nassert solution('12 1\\nbaabaabbaaabbb') == '-1'\nassert solution('4 1\\nab') == '-1'\nassert solution('4 1\\nbaaab') == '-1'\n"
    },
    {
        "number": 919,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1 2\\nab') == '1'\nassert solution('1 1\\nab') == '-1'\nassert solution('1 1\\nabc') == '-1'\nassert solution('1 1\\nabcab') == '2'\nassert solution('1 1\\nabcabcd') == '-1'\n"
    },
    {
        "number": 919,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('2\\n1') == '-1'\nassert solution('3\\n2') == '-1'\nassert solution('6\\n2') == '-1'\nassert solution('10\\n1') == '-1'\nassert solution('7\\n3') == '3'\n"
    },
    {
        "number": 919,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('5 3\\nxyabd\\n') == '29'\nassert solution('7 4\\nproblem\\n') == '34'\nassert solution('2 2\\nab\\n') == '-1'\nassert solution('12 1\\nabaabbaaabbb\\n') == '1'\nassert solution('1 1\\nbaa\\n') == '0'\n"
    },
    {
        "number": 920,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('') == '-1'\nassert solution('1') == '1 -1 -1'\nassert solution('10') == '1 5 5'\nassert solution('10') == '1 5 5'\nassert solution('10') == '1 5 5'\n"
    },
    {
        "number": 920,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(input()) == output\n\n\"\"\"\n\nimport sys\n\nfrom collections import deque\nfrom typing import NamedTuple"
    },
    {
        "number": 920,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 920,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''10''') == '''1 5 5'''\nassert solution('''6 6 7 7''') == '''3 4 6'''\nassert solution('''5 8 6 6''') == '''-1'''\nassert solution('''9 9 9 9''') == '''-1'''\n"
    },
    {
        "number": 920,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 920,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"input/0\") == \"3 4 6\"\nassert solution(\"input/1\") == \"-1\"\nassert solution(\"input/2\") == \"4 6 6\"\nassert solution(\"input/3\") == \"1 5 5\"\nassert solution(\"input/4\") == \"-1\"\n"
    },
    {
        "number": 920,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''10''') == '1 5 5'\nassert solution('''5 6 5 6''') == '3 4 6'\nassert solution('''6 6 7 7''') == '3 4 6'\nassert solution('''9 9 9 9''') == '-1'\nassert solution('''4 4 4 4''') == '-1'\n"
    },
    {
        "number": 920,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"10\") == \"1 5 5\"\nassert solution(\"5\") == \"3 4 6\"\nassert solution(\"10\") == \"3 4 6\"\nassert solution(\"5\") == \"3 4 6\"\nassert solution(\"0\") == \"-1\"\n"
    },
    {
        "number": 920,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\n'''10\n5 6 5 6\n6 6 7 7\n5 8 6 6\n9 9 9 9\n'''\n) == '1 5 5'\n\nassert solution(\n'''10\n6 6 6 6\n7 7 7 7\n4 4 4 4\n8 8 8 8\n'''\n) == '3 4 6'"
    },
    {
        "number": 920,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''10''') == '1 5 5'\nassert solution('''1''') == '-1'\nassert solution('''5''') == '3 4 6'\nassert solution('''5''') == '-1'\nassert solution('''10''') == '1 5 5'\n"
    },
    {
        "number": 921,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\n\"\"\"\n2 10\n8 7\n\"\"\"\n    ) == \"\"\"6 4 \n\"\"\"\n\nassert solution(\n\"\"\"\n4 4\n1 1 1 1\n\"\"\"\n    ) == \"\"\"1 1 1 1 \n\"\"\"\n\nassert solution(\n\"\"\"\n3 10\n9 8 10\n\"\"\"\n    ) == \"\"\"-1\n\"\"\"\n"
    },
    {
        "number": 921,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('1 1 1 1') == '1 1 1 1'\nassert solution('2 10') == '6 4'\nassert solution('4 4') == '1 1 1 1'\nassert solution('3 10') == '-1'\nassert solution('8 7') == '6 4'\n"
    },
    {
        "number": 921,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdin\n'''\n"
    },
    {
        "number": 921,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\n\n\n\n\"\"\"\n"
    },
    {
        "number": 921,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''8 7\n8 7\n''') == '6 4'\nassert solution('''4 4\n1 1 1 1\n''') == '1 1 1 1'\nassert solution('''3 10\n9 8 10\n''') == '-1'\nassert solution('''7 10\n10 9 8 7\n''') == '1 1 1 1'\nassert solution('''5 5\n4 3 2 1\n''') == '-1'\n"
    },
    {
        "number": 921,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('2 10\\n8 7\\n') == '6 4\\n'\nassert solution('2 10\\n9 8 10\\n') == '-1\\n'\nassert solution('3 10\\n9 8 10\\n') == '1 1 1 1\\n'\nassert solution('4 4\\n1 1 1 1\\n') == '1 1 1 1\\n'\nassert solution('3 10\\n9 8 10\\n') == '-1\\n'\n"
    },
    {
        "number": 921,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"2 10\\n8 7\\n\") == \"6 4\\n\"\nassert solution(\"4 4\\n1 1 1 1\\n\") == \"1 1 1 1\\n\"\nassert solution(\"3 10\\n9 8 10\\n\") == \"-1\\n\"\nassert solution(\"5 7\\n1 1 1 1 1 1 1\\n\") == \"1 1 1 1 1 1 1\\n\"\nassert solution(\"3 5\\n1 1 1 1\\n\") == \"-1\\n\"\n"
    },
    {
        "number": 921,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 921,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''3 4\n1 1 1 1''') == '1 1 1 1'\nassert solution('''3 10\n8 7\n''') == '6 4'\nassert solution('''3 5\n1 1 1 1\n''') == '1 1 1 1'\nassert solution('''3 5\n1 1 1 1\n''') == '1 1 1 1'\nassert solution('''3 5\n1 1 1 1\n''') == '1 1 1 1'\n"
    },
    {
        "number": 921,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n2 10\n8 7\n\"\"\") == \"\"\"\n6 4 \n\"\"\"\n\nassert solution(\n\"\"\"\n4 4\n1 1 1 1\n\"\"\") == \"\"\"\n1 1 1 1 \n\"\"\"\n\nassert solution(\n\"\"\"\n3 10\n9 8 10\n\"\"\") == \"\"\"\n-1\n\"\"\"\n\nassert solution(\n\"\"\"\n1 10\n1 1 1 1\n\"\"\") == \"\"\"\n1 1 1 1 \n\"\"\"\n\nassert solution(\n\"\"\"\n2 10\n8 7\n\"\"\") == \"\"\"\n6 4 \n\"\"\""
    },
    {
        "number": 922,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''2 8''') == '''3 3 \n'''\nassert solution('''1 3''') == '''4 \n'''\nassert solution('''2 3''') == '''0 1 \n'''\nassert solution('''2 3''') == '''0 1 \n'''\nassert solution('''2 3''') == '''0 1 \n'''\n"
    },
    {
        "number": 922,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"2 8\\n4 4\") == \"3 3\"\nassert solution(\"1 3\\n5\") == \"4\"\nassert solution(\"2 3\\n2 3\") == \"0 1\"\nassert solution(\"2 3\\n3 3\") == \"0 0\"\nassert solution(\"2 3\\n3 2\") == \"0 1\"\n"
    },
    {
        "number": 922,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1 3\\n5') == '3'\nassert solution('2 8\\n4 4\\n') == '3 3'\nassert solution('2 3\\n2 3\\n') == '0 1'\nassert solution('1 3\\n5\\n') == '4'\nassert solution('2 3\\n2 3\\n') == '0 1'\n"
    },
    {
        "number": 922,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"\"\"2 8\n4 4\n\"\"\") == \"3 3\"\nassert solution(\"\"\"1 3\n5\n\"\"\") == \"4\"\nassert solution(\"\"\"2 3\n2 3\n\"\"\") == \"0 1\"\nassert solution(\"\"\"2 4\n2 3\n\"\"\") == \"0 0\"\nassert solution(\"\"\"3 3\n3 2\n\"\"\") == \"2 1\"\n"
    },
    {
        "number": 922,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('2 8\\n4 4\\n') == '3 3'\nassert solution('1 3\\n5\\n') == '4'\nassert solution('2 3\\n2 3\\n') == '0 1'\nassert solution('2 3\\n2 3\\n') == '0 1'\nassert solution('2 3\\n2 3\\n') == '0 1'\n"
    },
    {
        "number": 922,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1 3') == '4'\nassert solution('2 3') == '0 1'\nassert solution('1 2') == '3'\nassert solution('3 3') == '0 1'\nassert solution('2 3') == '0 1'\n"
    },
    {
        "number": 922,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''1 10''') == '1'\nassert solution('''2 9''') == '2'\nassert solution('''2 9''') == '0 1'\nassert solution('''3 4''') == '0 1'\nassert solution('''3 9''') == '0 1'\n"
    },
    {
        "number": 922,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n"
    },
    {
        "number": 922,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('8 2\\n4 4\\n') == '3 3'\nassert solution('1 3\\n5\\n') == '4'\nassert solution('2 3\\n2 3\\n') == '0 1'\nassert solution('2 3\\n2 3\\n') == '0 1'\nassert solution('3 3\\n3 3\\n') == '0 0'\n"
    },
    {
        "number": 922,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('2 8\\n4 4\\n') == '3 3\\n'\nassert solution('1 3\\n5\\n') == '4\\n'\nassert solution('2 3\\n2 3\\n') == '0 1\\n'\nassert solution('3 3\\n2 3\\n') == '0 1\\n'\nassert solution('3 3\\n3 3\\n') == '0 0\\n'\n"
    },
    {
        "number": 923,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"\"\"3\n1 0 0\n\"\"\") == \"Yes\"\nassert solution(\"\"\"5\n4 2 1 4 3\n\"\"\") == \"Yes\"\nassert solution(\"\"\"4\n0 2 3 1\n\"\"\") == \"No\"\n\n\n\"\"\""
    },
    {
        "number": 923,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('1 0 0') == 'Yes'\nassert solution('5') == 'Yes'\nassert solution('4 2 1 4 3') == 'Yes'\nassert solution('0 2 3 1') == 'No'\nassert solution('4 1 0 4 3') == 'No'\n"
    },
    {
        "number": 923,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 0 0\") == \"No\"\nassert solution(\"3\\n4 2 1 4 3\") == \"Yes\"\nassert solution(\"5\\n4 2 1 4 3\") == \"No\"\nassert solution(\"5\\n0 2 3 1\") == \"Yes\""
    },
    {
        "number": 923,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('2\\n2 2 1') == 'Yes'\nassert solution('1\\n1') == 'No'\n"
    },
    {
        "number": 923,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1\\n3\\n') == 'Yes'\nassert solution('2\\n4\\n') == 'No'\nassert solution('2\\n0\\n1') == 'No'\nassert solution('2\\n1 1\\n') == 'No'\nassert solution('2\\n1 1\\n') == 'No'\n"
    },
    {
        "number": 923,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"\n3\n1 0 0\n\"\"\") == \"Yes\"\nassert solution(\n\"\"\"\n5\n4 2 1 4 3\n\"\"\") == \"Yes\"\nassert solution(\n\"\"\"\n4\n0 2 3 1\n\"\"\") == \"No\"\nassert solution(\n\"\"\"\n8\n7 4 5 3 2 6 8 0\n\"\"\") == \"Yes\"\nassert solution(\n\"\"\"\n4\n1 0 3 2\n\"\"\") == \"No\"\n"
    },
    {
        "number": 923,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''3\n1 0 0\n''') == 'Yes'\nassert solution('''5\n4 2 1 4 3\n''') == 'Yes'\nassert solution('''4\n0 2 3 1\n''') == 'No'\n\n'''\n\nfrom functools import reduce\nfrom operator import mul"
    },
    {
        "number": 923,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('0\\n5\\n5') == 'Yes'\nassert solution('0\\n5\\n5') == 'No'\nassert solution('0\\n5\\n5') == 'Yes'\nassert solution('0\\n5\\n5') == 'No'\nassert solution('0\\n5\\n5') == 'Yes'\n"
    },
    {
        "number": 923,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 0 0\\n\") == \"Yes\"\nassert solution(\"4\\n4 2 1 4 3\\n\") == \"Yes\"\nassert solution(\"5\\n4 2 1 4 3\\n\") == \"No\"\nassert solution(\"10\\n5 5 5 5 5 5 5 5 5 5\\n\") == \"Yes\"\nassert solution(\"20\\n
    },
    {
        "number": 923,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('inputs/example') == 'Yes'\nassert solution('inputs/stolp_input') == 'No'\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 924,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"0 2 5\") == 2\nassert solution(\"0 1 3\") == 1\nassert solution(\"0 1 3\") == 1\nassert solution(\"0 2 5\") == 2\nassert solution(\"0 1 3\") == 1\n"
    },
    {
        "number": 924,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('0 2 5') == '2'\nassert solution('1 3 5') == '1'\nassert solution('0 1 3') == '1'\nassert solution('2 3 6') == '1'\nassert solution('0 0 0') == '0'\n"
    },
    {
        "number": 924,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"0 1 3\") == \"1\"\nassert solution(\"0 1 3\") == \"1\"\nassert solution(\"0 1 3\") == \"1\"\n\nassert solution(\"0 2 5\") == \"2\"\nassert solution(\"0 2 5\") == \"2\"\n"
    },
    {
        "number": 924,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''0 2 5''') == 2\nassert solution('''0 1 3''') == 1\nassert solution('''0 1 3''') == 1\nassert solution('''0 2 3''') == 1\nassert solution('''1 3 5''') == 1\n"
    },
    {
        "number": 924,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('0 2 5') == '2'\nassert solution('1 3 5') == '2'\nassert solution('0 1 3') == '1'\nassert solution('2 3 6') == '1'\nassert solution('0 2 1') == '1'\n"
    },
    {
        "number": 924,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''0 2 5''') == 2\nassert solution('''1 3 5''') == 1\nassert solution('''0 1 3''') == 1\nassert solution('''2 3 6''') == 1\n'''"
    },
    {
        "number": 924,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''0 2 5\n1 3 5''') == 2\nassert solution('''0 1 3\n2 3 6''') == 1\nassert solution('''0 0 0\n5 5 5''') == 0\nassert solution('''0 0 0\n0 0 0''') == 0\nassert solution('''0 1 3\n2 3 6''') == 1\n"
    },
    {
        "number": 924,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"0 1 3\\n2 3 6\") == \"2\"\nassert solution(\"0 2 5\\n1 3 5\") == \"2\"\nassert solution(\"0 1 3\\n2 3 6\") == \"1\"\nassert solution(\"0 2 3\\n1 3 5\") == \"1\"\nassert solution(\"0 1 3\\n2 3 6\") == \"1\"\n"
    },
    {
        "number": 924,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''0 2 5''') == '2'\nassert solution('''1 3 5''') == '1'\nassert solution('''0 1 3''') == '1'\nassert solution('''2 3 6''') == '1'\nassert solution('''0 0 10''') == '1'\n"
    },
    {
        "number": 924,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''0 2 5''') == '2'\nassert solution('''1 3 5''') == '1'\nassert solution('''0 1 3''') == '1'\nassert solution('''2 3 6''') == '1'\nassert solution('''1 2 3''') == '1'\n"
    },
    {
        "number": 925,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('') == '0'\nassert solution('9') == '9'\nassert solution('09') == '9'\nassert solution('098') == '9'\nassert solution('099') == '9'\n"
    },
    {
        "number": 925,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('89') == '2'\nassert solution('00') == '4'\nassert solution('73') == '15'\nassert solution('09') == '9'\nassert solution('09') == '9'\n"
    },
    {
        "number": 925,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('89') == '2'\nassert solution('00') == '4'\nassert solution('73') == '15'\nassert solution('73') == '15'\n"
    },
    {
        "number": 925,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('89') == '2'\nassert solution('00') == '4'\nassert solution('73') == '15'\n\nprint('Test is OK')\n"
    },
    {
        "number": 925,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"89\") == \"2\"\nassert solution(\"00\") == \"4\"\nassert solution(\"73\") == \"15\"\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 925,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('89') == '2'\nassert solution('00') == '4'\nassert solution('73') == '15'\n\"\"\"\n"
    },
    {
        "number": 925,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('08') == '4'\nassert solution('00') == '4'\nassert solution('73') == '15'\nassert solution('73') == '15'\nassert solution('67') == '7'\n"
    },
    {
        "number": 925,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('89') == '2'\nassert solution('00') == '4'\nassert solution('73') == '15'\n\"\"\""
    },
    {
        "number": 925,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('73') == 15\nassert solution('00') == 4\nassert solution('90') == 2\nassert solution('93') == 12\nassert solution('98') == 1\n"
    },
    {
        "number": 925,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('89') == '2'\nassert solution('00') == '4'\nassert solution('73') == '15'\nassert solution('73') == '15'\n"
    },
    {
        "number": 926,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\naa\\nb\\nbb\\nc\\ncc\\ndd\\nee\\nf\\nff') == '1\\n1\\n'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\naa\\nb\\nbb\\nc\\ncc\\ndd\\nee\\nf\\nff') == '1\\n1\\n'\nassert solution('2\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\naa\\nb\\nbb\\nc\\ncc\\ndd\\nee\\nf\\nff') == '1\\n1\\n'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\naa\\nb\\nbb\\nc\\ncc\\ndd\\nee\\nf\\nff') == '1\\n1\\n'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\naa\\nb\\nbb\\nc\\ncc\\ndd\\nee\\nf\\nff') == '1\\n1\\n'\n"
    },
    {
        "number": 926,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == solution(stdin)"
    },
    {
        "number": 926,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('4\\n2\\n1\\n3') == '1\\n1'\nassert solution('10\\n7\\n8\\n1\\n4\\n2\\n3\\n5\\n9') == '1\\n1'\nassert solution('4\\n2\\n1\\n3') == '1\\n1'\nassert solution('10\\n7\\n8\\n1\\n4\\n2\\n3\\n5\\n9') == '1\\n1'\nassert solution('4\\n2\\n1\\n3') == '1\\n1'\n"
    },
    {
        "number": 926,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('10 2 2') == '1 1'\nassert solution('5 5 5') == '1 2'\nassert solution('5 5 3') == '1 3'\nassert solution('4 4 4') == '1 1'\nassert solution('3 2 4') == '1 5'\n"
    },
    {
        "number": 926,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('5\\n5 5 5\\n3 2 4\\n1 4 1\\n2 1 3\\n3 2 4\\n3 3 4\\n') == '1\\n1\\n'\nassert solution('7\\n10 7 8\\n5 10 3\\n4 2 6\\n5 5 5\\n10 2 8\\n4 2 1\\n7 7 7\\n') == '2\\n1 5\\n'\nassert solution('4\\n4 4 4\\n4 4 4\\n4 4 4\\n4 4 4\\n4 4 4\\n4 4 4\\n') == '4\\n4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4"
    },
    {
        "number": 926,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('5\\n5\\n5\\n5\\n5') == '1\\n1\\n1\\n1\\n1'\nassert solution('5\\n5\\n5\\n5\\n5\\n5\\n5') == '1\\n1\\n1\\n1\\n1'\nassert solution('5\\n5\\n5\\n5\\n5\\n5\\n5\\n5') == '1\\n1\\n1\\n1\\n1'\nassert solution('5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5') == '1\\n1\\n1\\n1\\n1\\n1\\n1'\nassert solution('5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5') == '1\\n1\\n1\\n1\\n1\\n1\\n1'\n"
    },
    {
        "number": 926,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == expected\nprint(solution(stdin))\n\"\"\"\n\nfrom itertools import combinations\n\nn = int(input())\n\nstones = []\nfor _ in range(n):\n    a, b, c = [int(i) for i in input().split()]\n    stones.append((a, b, c))"
    },
    {
        "number": 926,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('6\\n6 6 6\\n5 5 5\\n3 2 4\\n1 4 1\\n2 1 3\\n3 2 4\\n3 3 4\\n') == '2'\nassert solution('7\\n7 7 7\\n10 7 8\\n5 10 3\\n4 2 6\\n5 5 5\\n10 2 8\\n4 2 1\\n7 7 7\\n') == '1 5'\n\n\n\"\"\"\n\nimport sys\nfrom itertools import combinations"
    },
    {
        "number": 926,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('2 4 1') == '1'\nassert solution('3 2 4') == '1'\nassert solution('3 2 4 5') == '1'\nassert solution('3 2 4 1') == '2'\nassert solution('3 2 4 1 5') == '1 5'\n"
    },
    {
        "number": 926,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == answer(stdin)\n"
    },
    {
        "number": 927,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"5 4\\n3 7 8 4\") == \"777773\"\nassert solution(\"10 10\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 927,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 927,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('20 4\\n3 7 8 4') == '777773'\nassert solution('10 4\\n9 8 7 6 5') == '999999999'\nassert solution('1000 5\\n3 4 5 7 8 9') == '999999999'\nassert solution('1000 6\\n3 4 5 7 8 9') == '9999999999'\nassert solution('1000 7\\n3 4 5 7 8 9') == '999999999'\n"
    },
    {
        "number": 927,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('0 1 1 1 1 1') == '11111'\nassert solution('3 2 1 4 4 2 1 3 4') == '5125'\nassert solution('4 2 1 1 4 4 2 1 3 4') == '5125'\nassert solution('5 1 1 4 4 2 1 1 3 4') == '554433'\n"
    },
    {
        "number": 927,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"3 7 8 4\") == \"777773\"\nassert solution(\"2 5 5 4\") == \"234555\"\nassert solution(\"1 2 3 4 5\") == \"234555\"\nassert solution(\"1 2 3 4 5 6 7 8 9\") == \"2345556789\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10\") == \"234555678910\"\n"
    },
    {
        "number": 927,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"1 2 3 4 5 6 7 8 9\") == \"12346578\"\nassert solution(\"2 1 3 4 5 6 7 8 9\") == \"61742032\"\nassert solution(\"3 4 5 6 7 8 9 10\") == \"83974143\"\nassert solution(\"4 4 4 4 4 4 4 4\") == \"1\"\nassert solution(\"5 2 3 3 1\") == \"235987\"\n"
    },
    {
        "number": 927,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('3 7 8 4') == '777773'\n\"\"\"\n"
    },
    {
        "number": 927,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdin.split()[1]\n"
    },
    {
        "number": 927,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"20 4\\n3 7 8 4\") == \"777773\"\nassert solution(\"5 9\\n4 2 5 1\") == \"5875\"\nassert solution(\"1 4\\n3 3 2\") == \"99\"\nassert solution(\"3 4\\n3 3 2\") == \"6\"\nassert solution(\"4 3\\n3 2 1\") == \"9\"\n"
    },
    {
        "number": 927,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('2 10\\n3 8 4\\n') == '777773'\nassert solution('1 10\\n1 1 1 1\\n') == '777776'\nassert solution('2 10\\n3 7 8 4\\n') == '777773'\nassert solution('2 10\\n4 7 4 2\\n') == '777774'\nassert solution('2 10\\n7 8 6 5 4\\n') == '777776'\n"
    },
    {
        "number": 928,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 928,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('1 2 3 4 5 6') == '6'\nassert solution('1 2 3 4 5') == '1'\nassert solution('1 2 3 4') == '1'\nassert solution('1 2 3 4 5 6') == '1'\nassert solution('1 2 3 4 5') == '2'\n"
    },
    {
        "number": 928,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('4 10\\n6 1 2 7') == '2'\nassert solution('5 10\\n1 2 3 4 5') == '4'\nassert solution('5 10\\n1 2 3 4 5\\n2 4 5 1 4') == '1'\nassert solution('5 10\\n1 2 3 4 5\\n2 4 5 1 4\\n3 4 5 1 4') == '2'\nassert solution('5 10\\n1 2 3 4 5\\n2 4 5 1 4\\n3 4 5 1 4\\n4 5 1 4') == '3'\n"
    },
    {
        "number": 928,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == '2'"
    },
    {
        "number": 928,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1 2 3 4 5 6 7 8 9 10') == '2'\nassert solution('1 1 1 1 1 1 1 1 1 1') == '7'\nassert solution('1 1 1 1 1 1 1 1 1 1') == '5'\nassert solution('2 2 2 2 2 2 2 2 2') == '1'\nassert solution('2 2 2 2 2 2 2 2 2') == '5'\n"
    },
    {
        "number": 928,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('4 10') == '2'\nassert solution('6 1 2 7') == '2'\nassert solution('6 1 2 2') == '0'\nassert solution('6 1 2 2 8') == '1'\nassert solution('6 1 2 2 8 9') == '2'\n"
    },
    {
        "number": 928,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1 1') == '1'\nassert solution('1 1 2 3') == '0'\nassert solution('1 1 2 3 4') == '0'\nassert solution('1 1 2 3 4 5') == '3'\n"
    },
    {
        "number": 928,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"4 10\\n6 1 2 7\\n\") == \"2\"\nassert solution(\"4 10\\n6 1 2 10\\n\") == \"0\"\nassert solution(\"1 5 2 2 2 2 4\\n3 2 3 4\\n\") == \"0\"\nassert solution(\"1 1 1 1 1 1 1\\n1\\n\") == \"1\"\nassert solution(\"1 1 1 1 1 1 1\\n1\\n\") == \"1\"\n"
    },
    {
        "number": 928,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('5 10\\n6 1 2 7\\n') == '2'\nassert solution('4 10\\n6 1 2 7\\n') == '2'\nassert solution('5 10\\n6 1 2 7\\n') == '2'\nassert solution('4 10\\n6 1 2 7\\n') == '2'\nassert solution('4 10\\n6 1 2 7\\n') == '2'\n"
    },
    {
        "number": 928,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1 1') == '1'\nassert solution('1 1 2 3') == '0'\nassert solution('1 1 2 3 4') == '1'\nassert solution('1 1 2 3 4 5') == '2'\n"
    },
    {
        "number": 929,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('2 3\\n1 2 3\\n0 1 1') == '3\\n2 2 2 3\\n1 1 1 2'\n\"\"\"\n"
    },
    {
        "number": 929,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == expected\n"
    },
    {
        "number": 929,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''2 3\n1 2 3\n0 1 1\n''') == '3'\nassert solution('''10 5\n5 4 3 2 1 6 7 8 9\n9 7 1 2 6 8 5 4 3\n''') == '9'\nassert solution('''10 5\n3 4 3 2 1 6 7 8 9\n1 2 6 7 8 9 3 4 5\n''') == '3'\nassert solution('''10 5\n7 8 9 1 2 3 4 5 6\n2 3 4 5 6 7 8 9 1\n''') == '8'\nassert solution('''10 5\n4 1 1 2 1 1 1 1 1\n1 2 3 4 4 1 1 1 1\n''') == '9'\n"
    },
    {
        "number": 929,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(open('tests/sample', 'r').read()) == open('tests/sample_expected', 'r').read()\nassert solution(open('tests/sample2', 'r').read()) == open('tests/sample2_expected', 'r').read()\nassert solution(open('tests/sample3', 'r').read()) == open('tests/sample3_expected', 'r').read()\nassert solution(open('tests/sample4', 'r').read()) == open('tests/sample4_expected', 'r').read()\nassert solution(open('tests/sample5', 'r').read()) == open('tests/sample5_expected', 'r').read()\n"
    },
    {
        "number": 929,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1 2 3\\n0 1 1') == '3\\n2 2 2 3'\nassert solution('1 2 3\\n0 1 1') == '3\\n1 1 1 2'\nassert solution('2 3\\n1 2 3\\n0 1 1') == '3\\n1 1 1 2'\nassert solution('2 3\\n1 2 3\\n0 1 1') == '3\\n1 1 1 2'\nassert solution('1 1 1\\n1 1 1') == '0'\n"
    },
    {
        "number": 929,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('2 3\\n1 2 3\\n0 1 1') == '3\\n2 2 2 3\\n1 1 1 2\\n1 3 1 2'\nassert solution('3 2\\n1 2 3\\n0 1 1') == '3\\n2 2 2 3\\n1 1 1 2\\n1 3 1 2'\nassert solution('3 3\\n0 1 1\\n1 2 3\\n0 2 1') == '3\\n2 2 2 3\\n1 1 1 2\\n1 3 1 2'\nassert solution('2 3\\n1 2 3\\n0 1 1\\n0 2 1') == '2\\n1 1 1 2\\n2 2 2 3\\n2 1 1 2'\nassert solution('3 2\\n1 2 3\\n0 1 1\\n1 1 1') == '2\\n2 2 2 3\\n1 1 1 2\\n1 3 1 2'\n"
    },
    {
        "number": 929,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == expected\nprint(solution(stdin))\n\"\"\""
    },
    {
        "number": 929,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == expected\n\"\"\"\nfrom collections import defaultdict\n\nH, W = map(int, input().split())\ncoins = []\nfor _ in range(H):\n    coins.append(tuple(map(int, input().split())))\n\nrows = defaultdict(int)\ncols = defaultdict(int)\n\nfor i in range(H):\n    for j in range(W):\n        rows[i] += coins[i][j]\n        cols[j] += coins[i][j]\n\nrows = sorted(rows.items(), key=lambda x: x[0])\ncols = sorted(cols.items(), key=lambda x: x[0])\n\nn = 0\nfor i in range(H):\n    for j in range(W):\n        if rows[i][1] % 2 == 0 and cols[j][1] % 2 == 0:\n            n += 1\n            print(f'{n} {rows[i][0]} {cols[j][0]} {rows[i][0] + 1} {cols[j][0] + 1}')\n            break\n"
    },
    {
        "number": 929,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('0') == ''\nassert solution('1') == '1 1 1 1'\nassert solution('2') == '2 2 2 2'\nassert solution('3') == '2 2 2 3'\n"
    },
    {
        "number": 929,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 930,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('3 2') == '10'\nassert solution('4 2') == '8'\nassert solution('9 2') == '10'\nassert solution('10 2') == '4'\nassert solution('10 7') == '0'\n"
    },
    {
        "number": 930,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(input(\"\")) == output\n"
    },
    {
        "number": 930,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''3 2''') == '10'\nassert solution('''3 2''') == '10'\nassert solution('''3 2''') == '10'\nassert solution('''3 2''') == '10'\nassert solution('''3 2''') == '10'\n"
    },
    {
        "number": 930,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"3 2\") == \"10\"\nassert solution(\"3 5\") == \"2\"\nassert solution(\"3 4\") == \"12\"\nassert solution(\"2 2\") == \"1\"\nassert solution(\"1 1\") == \"0\"\n"
    },
    {
        "number": 930,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\n'''3 2'''\n    ) == '10'\n\nassert solution(\n'''3 3'''\n    ) == '8'\n\nassert solution(\n'''3 2'''\n    ) == '10'\n\nassert solution(\n'''10 1000'''\n    ) == '1750'\n\nassert solution(\n'''1000 1'''\n    ) == '2'"
    },
    {
        "number": 930,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\n    '3 2'\n) == '10'\n'''\n"
    },
    {
        "number": 930,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 930,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('3 2') == '10'\n\"\"\""
    },
    {
        "number": 930,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"3 2\") == \"10\"\n\"\"\"\n\"\"\"\n0 1 2 3 4 5 6 7 8 9\n3 1 2 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1"
    },
    {
        "number": 930,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('3 2') == '10'\nassert solution('2 1') == '10'\nassert solution('10 1') == '10'\nassert solution('2 10') == '0'\nassert solution('1 2') == '0'\n"
    },
    {
        "number": 931,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n"
    },
    {
        "number": 931,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('3 3 3 1 1 9\\n1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n3 1\\n3 2\\n3 3') == '1 3\\n1 2\\n1 1\\n2 3\\n2 2\\n2 1\\n3 3\\n3 2\\n3 1'\n\"\"\"\n"
    },
    {
        "number": 931,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == expected\nprint(solution(stdin))\n\n\"\"\""
    },
    {
        "number": 931,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"3 3 3 1 1 9\\n1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n3 1\\n3 2\\n3 3\\n\\n\") == \"1 3\\n1 2\\n1 1\\n2 3\\n2 2\\n2 1\\n3 3\\n3 2\\n3 1\\n\"\nassert solution(\"3 3 3 1 1 9\\n1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n3 1\\n3 2\\n3 3\\n\\n\") == \"1 3\\n1 2\\n1 1\\n2 3\\n2 2\\n2 1\\n3 3\\n3 2\\n3 1\\n\"\nassert solution(\"3 3 3 1 1 9\\n1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n3 1\\n3 2\\n3 3\\n\\n\") == \"1 3\\n1 2\\n1 1\\n2 3\\n2 2\\n2 1\\n3 3\\n3 2\\n3 1\\n\"\nassert solution(\"3 3 3 1 1 9\\n1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n3 1\\n3 2\\n3 3\\n\\n\") == \"1 3\\n1 2\\n1 1\\n2 3\\n2 2\\n2 1\\n3 3\\n3 2\\n3 1\\n\"\nassert solution(\"3 3 3 1 1 9\\n1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n3 1\\n3 2\\n3 3\\n\\n\") == \"1 3\\n1 2\\n1 1\\n2 3\\n2 2\\n2 1\\n3 3\\n3 2\\n3 1\\n\"\n"
    },
    {
        "number": 931,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"3 3 3 1 1 9\\n1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n3 1\\n3 2\\n3 3\") == \"1 3\\n1 2\\n1 1\\n2 3\\n2 2\\n2 1\\n3 3\\n3 2\\n3 1\"\n\n\"\"\"\nimport sys\n"
    },
    {
        "number": 931,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == expected\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 931,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n3 3 3 1 1 9\n1 1\n1 2\n1 3\n2 1\n2 2\n2 3\n3 1\n3 2\n3 3\n\"\"\".strip()) == \"\"\"\n1 3\n1 2\n1 1\n2 3\n2 2\n2 1\n3 3\n3 2\n3 1\n\"\"\"\n"
    },
    {
        "number": 931,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"\"\"3 3 3 1 1 9\"\"\") == \"\"\"1 3\n1 2\n1 1\n2 3\n2 2\n2 1\n3 3\n3 2\n3 1\"\"\"\n"
    },
    {
        "number": 931,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n\nimport sys"
    },
    {
        "number": 931,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == expected\n\"\"\"\n"
    },
    {
        "number": 932,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"1 0\\n0 0\") == \"NO\"\nassert solution(\"2 2\\n1 0\\n0 0\") == \"NO\"\nassert solution(\"2 3\\n1 1 1\\n1 1 1\") == \"YES\"\nassert solution(\"2 3\\n0 1 0\\n1 1 1\") == \"YES\"\nassert solution(\"4 5\\n1 0 0 1 0\\n1 0 0 1 0\\n0 0 1 1 0\\n0 0 1 1 0\") == \"YES\"\n"
    },
    {
        "number": 932,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''2 2\n1 0\n0 0''') == 'NO'\nassert solution('''2 3\n1 1 1\n1 1 1''') == 'YES'\nassert solution('''2 3\n0 1 0\n1 1 1''') == 'YES'\nassert solution('''3 2\n1 1 1\n1 1 1\n1 1 1''') == 'NO'\nassert solution('''3 2\n0 0 1\n1 1 1\n1 1 1''') == 'YES'\n"
    },
    {
        "number": 932,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''2 2''') == 'NO'\nassert solution('''2 3\n1 1 1\n1 1 1''') == 'YES'\nassert solution('''2 3\n0 1 0\n1 1 1''') == 'YES'\nassert solution('''7 3\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1''') == 'YES'\nassert solution('''8 3\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1''') == 'NO'\n"
    },
    {
        "number": 932,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''2 2''') == 'NO'\nassert solution('''2 3''') == 'YES'\nassert solution('''2 3''') == 'YES'\nassert solution('''5 5\n0 0 0 1 0\n0 0 0 1 0\n0 0 0 1 0\n0 0 0 0 0\n0 0 0 0 0''') == 'YES'\nassert solution('''5 4\n1 0 0 0\n1 0 0 0\n0 0 0 0\n1 0 0 0\n0 0 0 0''') == 'NO'\n"
    },
    {
        "number": 932,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(input()) == 'YES'\n\"\"\"\n"
    },
    {
        "number": 932,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''2 2\n1 0\n0 0''') == 'NO'\nassert solution('''2 3\n1 1 1\n1 1 1''') == 'YES'\nassert solution('''2 3\n0 1 0\n1 1 1''') == 'YES'\nassert solution('''2 3\n1 0 0\n0 0 0''') == 'NO'\nassert solution('''3 3\n1 1 1\n1 1 1\n1 1 1''') == 'YES'\n"
    },
    {
        "number": 932,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"2 2\\n1 0\\n0 0\") == \"NO\"\nassert solution(\"2 3\\n1 1 1\\n1 1 1\") == \"YES\"\nassert solution(\"2 3\\n0 1 0\\n1 1 1\") == \"YES\\n0 0 0\\n0 1 0\"\nassert solution(\"3 3\\n1 1 1\\n1 1 1\\n1 1 1\") == \"YES\\n1 1 1\\n1 1 1\\n1 1 1\"\nassert solution(\"3 3\\n0 1 0\\n1 1 1\\n1 1 1\") == \"YES\\n0 0 0\\n0 1 0\\n1 1 1\"\n"
    },
    {
        "number": 932,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''2 2\n1 0\n0 0''') == 'NO'\nassert solution('''2 3\n1 1 1\n1 1 1\n''') == 'YES'\nassert solution('''1 1\n1 1\n''') == 'NO'\nassert solution('''2 1\n0 1\n0 1\n''') == 'YES'\nassert solution('''3 3\n1 1 1\n1 1 1\n0 1 1\n''') == 'YES'\n"
    },
    {
        "number": 932,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\n'''2 2\n1 0\n0 0''') == 'NO'\nassert solution(\n'''2 3\n1 1 1\n1 1 1''') == 'YES'\nassert solution(\n'''3 2\n0 1 0\n1 1 1\n1 0 1''') == 'YES'\nassert solution(\n'''3 3\n0 1 0\n1 1 1\n1 0 1''') == 'NO'\nassert solution(\n'''4 1\n1''') == 'NO'\n"
    },
    {
        "number": 932,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 933,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == \"hello\"\n\"\"\"\n"
    },
    {
        "number": 933,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == 'heloo'\nassert solution('helloo') == 'hello'\nassert solution('woooooow') == 'woow'\nassert solution('helloo') == 'hello'\n\"\"\"\n"
    },
    {
        "number": 933,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('hello') == 'hello'\nassert solution('wooooooow') == 'woow'\nassert solution('helloo') == 'hello'\nassert solution('wooooooow') == 'woow'\nassert solution('helloo') == 'hello'\n"
    },
    {
        "number": 933,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('helloo') == 'hello'\nassert solution('wooooooow') == 'woow'\n\n\n'''"
    },
    {
        "number": 933,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('hello') == 'hello'\nassert solution('helloo') == 'hello'\nassert solution('woooooow') == 'woow'\nassert solution('wwaaaaaa') == 'waa'\nassert solution('helloo') == 'hello'\n"
    },
    {
        "number": 933,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == \"hello\"\nassert solution(stdin) == \"woooooow\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 933,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"helloo\") == \"hello\"\nassert solution(\"woooooow\") == \"woow\"\nassert solution(\"Wooooooooooooooow\") == \"Woow\"\nassert solution(\"z\") == \"\"\nassert solution(\"\") == \"\"\n"
    },
    {
        "number": 933,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"helloo\") == \"hello\"\nassert solution(\"woooooow\") == \"woow\"\n\n\n\"\"\""
    },
    {
        "number": 933,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('helloo') == 'hello'\nassert solution('woooooow') == 'woow'\nprint('Test passed')"
    },
    {
        "number": 933,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"helloo\") == \"hello\"\nassert solution(\"wooooooow\") == \"woow\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 934,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('AS') == \"YES\"\nassert solution('2H') == \"NO\"\nassert solution('4D') == \"YES\"\nassert solution('AD') == \"YES\"\n\n\n\"\"\"\n"
    },
    {
        "number": 934,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''AS\n2H 4C TH JH AD''') == \"YES\"\nassert solution('''2H\n3D 4C AC KD AS''') == \"NO\"\nassert solution('''4D\nAS AC AD AH 5H''') == \"YES\"\nassert solution('''2H\n3D 4C AC KD AS''') == \"NO\"\nassert solution('''2H\n3D 4C AC KD AS''') == \"NO\"\n"
    },
    {
        "number": 934,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('AS') == 'YES'\nassert solution('2H') == 'NO'\nassert solution('4D') == 'YES'\nassert solution('6D') == 'NO'\nassert solution('AC') == 'YES'\n"
    },
    {
        "number": 934,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''AS\n2H 4C TH JH AD\n''') == 'YES'\n\nassert solution('''2H\n3D 4C AC KD AS\n''') == 'NO'\n\nassert solution('''4D\nAS AC AD AH 5H\n''') == 'YES'\n\nassert solution('''5H\nAS AC AD AH 5H\n''') == 'YES'\n\n\n\"\"\"\nimport sys\nimport numpy as np\n\nnum_of_cards = int(sys.stdin.readline().strip())\ncard_on_table = sys.stdin.readline().strip()\ncard_in_hand = [sys.stdin.readline().strip() for _ in range(5)]\n\ntable_rank = card_on_table[0]\ntable_suit = card_on_table[1]\n\nhand_rank = [card[0] for card in card_in_hand]\nhand_suit = [card[1] for card in card_in_hand]\n\nhand_rank = np.array(hand_rank)\nhand_suit = np.array(hand_suit)\n\nhand_rank_dic = {'2': 0, '3': 1, '4': 2, '5': 3, '6': 4, '7': 5, '8': 6, '9': 7, 'T': 8, 'J': 9, 'Q': 10, 'K': 11, 'A': 12}\nhand_suit_dic = {'D': 0, 'C': 1, 'S': 2, 'H': 3}\n\nhand_rank_array = np.zeros((13, 3))\nhand_suit_array = np.zeros((4, 3))\nfor i in range(13):\n    hand_rank_array[i][0] = hand_rank_dic[hand_rank[i]]\n    hand_rank_array[i][1] = hand_rank_dic[hand_rank[i]]\n    hand_rank_array[i][2] = hand_rank_dic[hand_rank[i]]\nfor i in range(4):\n    hand_suit_array[i][0] = hand_suit_dic[hand_suit[i]]\n    hand_suit_array[i][1] = hand_suit_dic[hand_suit[i]]\n    hand_suit_array[i][2] = hand_suit_dic[hand_suit[i]]\n\nhand_rank_array = np.reshape(hand_rank_array, (13, 1, 3))\nhand_suit_array = np.reshape(hand_suit_array, (1, 4, 3))\n\nsuit_array = np.zeros((13, 3))\nfor i in range(13):\n    suit_array[i][0] = table_suit\n    suit_array[i][1] = table_suit\n    suit_array[i][2] = table_suit\n\nrank_array = np.zeros((13, 3))\nfor i in range(13):\n    rank_array[i][0] = table_rank\n    rank_array[i][1] = table_rank\n    rank_array[i][2] = table_rank\n\nrank_array = np.reshape(rank_array, (13, 1, 3))\nsuit_array = np.reshape(suit_array, (1, 13, 3))\n\nis_possible = False\nfor i in range(13):\n    for j in range(4):\n        if rank_array[i][0][0] == hand_rank_array[i][0][0] and rank_array[i][0][1] == hand_rank_array[i][0][1] and rank_array[i][0][2] == hand_rank_array[i][0][2] and suit_array[0][i][0] == hand_suit_array[0][0][0] and suit_array[0][i][1] == hand_suit_array[0][0][1] and suit_array[0][i][2] == hand_suit_array[0][0][2]:\n            is_possible = True"
    },
    {
        "number": 934,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"AS\") == \"YES\"\nassert solution(\"2H 4C TH JH AD\") == \"YES\"\nassert solution(\"2H\") == \"NO\"\nassert solution(\"4D\") == \"YES\"\nassert solution(\"4D\") == \"NO\"\n"
    },
    {
        "number": 934,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"2H 4C TH JH AD\") == \"YES\"\nassert solution(\"2H\") == \"NO\"\nassert solution(\"4D AS AC AD AH 5H\") == \"YES\"\n\n\n\"\"\""
    },
    {
        "number": 934,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\n'''\n2H 4C TH JH AD\n''') == 'YES'\n\nassert solution(\n'''\n2H\n3D 4C AC KD AS\n''') == 'NO'\n\nassert solution(\n'''\n4D\nAS AC AD AH 5H\n''') == 'YES'\n\nassert solution(\n'''\n3H 3D 3C 2D 4D AS\n''') == 'YES'\n\nassert solution(\n'''\n4C 4H 4S 3D 4D 5H 7C\n''') == 'NO'"
    },
    {
        "number": 934,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == 'YES'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 934,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('AS') == \"YES\"\nassert solution('2H') == \"NO\"\nassert solution('2H 4C TH JH AD') == \"YES\"\nassert solution('2H') == \"NO\"\nassert solution('4D') == \"YES\"\n"
    },
    {
        "number": 934,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"AS\") == \"YES\"\nassert solution(\"2H\") == \"NO\"\nassert solution(\"4D\") == \"YES\"\nassert solution(\"3D\") == \"NO\"\nassert solution(\"5H\") == \"YES\"\n"
    },
    {
        "number": 935,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"2 2\") == \"Akshat\"\nassert solution(\"2 3\") == \"Malvika\"\nassert solution(\"3 3\") == \"Akshat\"\n\n\n\n-----My Analysis-----\n\nThe function is always called with two arguments.\n\n- The first line is the number of rows and columns in the grid.\n- The second line is the number of intersection points.\n- There is a space between the two lines.\n\nSo the first line is just the number of rows and the second line is the number of intersection points.\n\nI used two for loops to iterate over the lines in the grid.\n\nI used an if-else statement to check if the number of intersections is 0. If it is, print \"Malvika\". Otherwise, I used another for loop to iterate over the intersections.\n\nI used an if-else statement to check if the number of intersections is 1. If it is, I printed the correct winner.\n\nIf it is not 1, I used another for loop to iterate over the intersections.\n\nI used a while loop to iterate over the intersections.\n\nI used a for loop to iterate over the intersections.\n\nI used a for loop to iterate over the intersections.\n\n\n-----Best Solution-----\n"
    },
    {
        "number": 935,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('2 3') == 'Malvika'\nassert solution('2 2') == 'Malvika'\nassert solution('3 3') == 'Akshat'\n"
    },
    {
        "number": 935,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''2 2''') == \"Malvika\"\nassert solution('''2 3''') == \"Malvika\"\nassert solution('''3 3''') == \"Akshat\"\nassert solution('''3 3''') == \"Akshat\"\nassert solution('''7 5''') == \"Malvika\"\n"
    },
    {
        "number": 935,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"2 2\") == \"Malvika\"\nassert solution(\"2 3\") == \"Malvika\"\nassert solution(\"3 3\") == \"Akshat\"\n"
    },
    {
        "number": 935,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"1 2\") == \"Malvika\"\nassert solution(\"2 3\") == \"Malvika\"\nassert solution(\"3 3\") == \"Akshat\"\nassert solution(\"1 1\") == \"Malvika\"\nassert solution(\"3 5\") == \"Malvika\"\n"
    },
    {
        "number": 935,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"1 2\") == \"Akshat\"\nassert solution(\"2 3\") == \"Malvika\"\nassert solution(\"3 3\") == \"Akshat\"\nassert solution(\"2 1\") == \"Malvika\"\nassert solution(\"1 1\") == \"Akshat\"\n"
    },
    {
        "number": 935,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('4 4') == 'Akshat'\nassert solution('2 2') == 'Malvika'\nassert solution('3 3') == 'Akshat'\nassert solution('2 3') == 'Malvika'\nassert solution('3 4') == 'Malvika'\n"
    },
    {
        "number": 935,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('4 4') == 'Malvika'\nassert solution('3 3') == 'Akshat'\nassert solution('2 2') == 'Malvika'\nassert solution('1 1') == 'Malvika'\n\n\n\"\"\"\n\nimport sys\nfrom collections import deque"
    },
    {
        "number": 935,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"2 2\") == \"Malvika\"\nassert solution(\"2 3\") == \"Malvika\"\nassert solution(\"3 3\") == \"Akshat\""
    },
    {
        "number": 935,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('2 2') == 'Malvika'\nassert solution('2 3') == 'Malvika'\nassert solution('3 3') == 'Akshat'"
    },
    {
        "number": 936,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('5') == '2'\nassert solution('9') == '3'\nassert solution('100 200 300 200 100 300 300 100 200') == '300'\nassert solution('2') == '2'\nassert solution('1') == '1'\n"
    },
    {
        "number": 936,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('1\\n1') == '1'\nassert solution('5\\n1 3 2 2 1') == '2'\nassert solution('9\\n100 200 300 200 100 300 300 100 200') == '300'\n"
    },
    {
        "number": 936,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"1\"\nassert solution(\"1 2 3\") == \"1\"\nassert solution(\"1 2 2\") == \"2\"\nassert solution(\"1 2 1\") == \"2\"\n"
    },
    {
        "number": 936,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('2\\n2 2\\n') == '2'\nassert solution('3\\n3 1\\n3 3') == '3'\nassert solution('10\\n1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1') == '1'\nassert solution('10\\n1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1') == '2'"
    },
    {
        "number": 936,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''5''') == '2'\nassert solution('''9''') == '300'\nassert solution('''100 200 300 200 100 300 300 100 200''') == '300'"
    },
    {
        "number": 936,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('5\\n1 3 2 2 1') == '2'\nassert solution('9\\n100 200 300 200 100 300 300 100 200') == '300'\nassert solution('9\\n100 200 300 100 300 300 100 200') == '300'\nassert solution('9\\n100 200 300 100 300 300 100 200') == '300'\nassert solution('9\\n100 200 300 100 300 300 100 200') == '300'\n"
    },
    {
        "number": 936,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 936,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"5\") == \"\"\nassert solution(\"1 3 2 2 1\") == \"2\"\nassert solution(\"9\\n100 200 300 200 100 300 300 100 200\") == \"300\"\nassert solution(\"3\\n1 2 3\") == \"2\"\n"
    },
    {
        "number": 936,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 936,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1\\n1') == '1'\nassert solution('2\\n1 2\\n') == '1'\nassert solution('2\\n1 2\\n3 4\\n') == '3'\nassert solution('2\\n1 2\\n3 4\\n5 6\\n') == '3'\nassert solution('3\\n1 2 3\\n2 3 1\\n') == '1'\n"
    },
    {
        "number": 937,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(input) == 16\n\"\"\"\n"
    },
    {
        "number": 937,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''6 3\n1 3 5 2 5 4\n1 1 0 1 0 0\n''') == '16'\n\nassert solution('''6 3\n2 4 6 3 4 5\n2 2 0 2 0 0\n''') == '12'\n'''\n"
    },
    {
        "number": 937,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''6 3\n1 3 5 2 5 4\n1 1 0 1 0 0\n''') == '16'\n\nassert solution('''10 3\n7 5 3 2 4 1 1\n1 1 0 1 0 0\n''') == '6'\n'''\n"
    },
    {
        "number": 937,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''6 3\n1 3 5 2 5 4\n1 1 0 1 0 0\n''') == '16'\nassert solution('''1 1\n0 1 0\n''') == '1'\nassert solution('''1 1\n1 1\n''') == '1'\nassert solution('''1 1\n0 1 0\n''') == '1'\nassert solution('''1 1\n0 1 1\n''') == '1'\n"
    },
    {
        "number": 937,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1\\n3\\n1 3 5 2 5 4') == '16'\nassert solution('2\\n2\\n0 0') == '2'\nassert solution('6\\n3\\n1 3 5 2 5 4') == '16'\nassert solution('6\\n4\\n1 3 5 2 5 4') == '20'\nassert solution('4\\n4\\n0 0 0 0') == '0'\n"
    },
    {
        "number": 937,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(input) == '16'\n"
    },
    {
        "number": 937,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('1\\n5 2\\n2 3 4 5') == '16'\n\"\"\"\n"
    },
    {
        "number": 937,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''6 3\n1 3 5 2 5 4\n1 1 0 1 0 0\n''') == '16'\n'''\n"
    },
    {
        "number": 937,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\n6 3\n1 3 5 2 5 4\n1 1 0 1 0 0\n\"\"\") == \"16\"\n"
    },
    {
        "number": 937,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(input()) == '16'\n\"\"\"\n"
    },
    {
        "number": 938,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''3 3''') == '''1\n3 \n2\n2 1 '''\nassert solution('''9 12''') == '''2\n3 6\n4\n1 2 4 5'''\n"
    },
    {
        "number": 938,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 938,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1 1') == '1'\nassert solution('3 3') == '3'\nassert solution('9 12') == '2'\nassert solution('10 10') == '1'\nassert solution('1 1') == '1'\n"
    },
    {
        "number": 938,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1 1') == '0 1'\nassert solution('2 3') == '1 2'\nassert solution('3 3') == '0'\nassert solution('9 12') == '2 3 6'\nassert solution('9 12') == '2 3 6'"
    },
    {
        "number": 938,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('10 5') == '2 4'\nassert solution('10 3') == '2 3 6'\nassert solution('5 11') == '4'\nassert solution('100 110') == '0'\nassert solution('100 100') == '0 0'\n"
    },
    {
        "number": 938,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"3 3\n\"\"\") == '1\\n3\\n2\\n2 1\\n\"\"\")\nassert solution(\n\"\"\"9 12\n\"\"\") == '2\\n3 6\\n4\\n1 2 4 5\\n\"\"\")\n"
    },
    {
        "number": 938,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('3 3') == '2\\n3 6\\n4\\n1 2 4 5'\nassert solution('9 12') == '2\\n3 6\\n4\\n1 2 4 5'\nassert solution('3 5') == '3\\n3'\nassert solution('10 17') == '3\\n3 4 6'\nassert solution('11 22') == '3\\n4\\n5'\n"
    },
    {
        "number": 938,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('3 3') == '1\\n3\\n2\\n2 1\\n'\nassert solution('9 12') == '2\\n3 6\\n4\\n1 2 4 5\\n'\nassert solution('2 3') == '1\\n3\\n2\\n2 1\\n'\nassert solution('9 12') == '2\\n3 6\\n4\\n1 2 4 5\\n'\nassert solution('3 4') == '0\\n3\\n2\\n2 1\\n'\n"
    },
    {
        "number": 938,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdin\n'''\n\nfrom sys import stdin, stdout\n\na, b = map(int, stdin.readline().split())\nstdout.write(str(max(a, b)) + '\\n')\nstdout.write(str(a) + '\\n')\n\nfor i in range(a, -1, -1):\n    stdout.write(str(i) +'')\n    if i <= a:\n        break\n\nb -= a\nstdout.write('\\n')\n\nfor i in range(b, -1, -1):\n    stdout.write(str(i) +'')\n    if i <= b:\n        break\n"
    },
    {
        "number": 938,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('3 3') == '1\\n3\\n2\\n2 1\\n'\nassert solution('9 12') == '2\\n3 6\\n4\\n1 2 4 5\\n'\nassert solution('5 7') == '0\\n7\\n5\\n0 1 2 3 4 5 6 7\\n'\nassert solution('6 10') == '1\\n9\\n1 2 3 4 5 6 7 8 9\\n'\nassert solution('8 12') == '2\\n9\\n4 8 3 7 2 6 1 5\\n'\n"
    },
    {
        "number": 939,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''7 3\n1 2 3\n1 4 5\n4 6 7\n''') == '1 1 1 2 2 2 3 3 3'\nassert solution('''9 3\n3 6 9\n2 5 8\n1 4 7\n''') == '1 1 1 2 2 2 3 3 3 3 3'\nassert solution('''5 2\n4 1 5\n3 1 2\n''') == '2 3 1 1 3'\nassert solution('''10 2\n9 5 8\n1 2 3\n4 6 7\n5 9 10\n2 4 8\n3 5 7\n6 9 11\n7 8 9\n9 10 8\n''') == '2 1 1 2 2 1 1 1 1 3 3 3 3 3 3 3 3 3'\nassert solution('''20 7\n19 4 19 1 19 2 19 3 19 4 19 5 19 6 19 7 19 8 19 9 19 10 19 11 19 12 19 13 19 14 19 15 19 16 19 17 19 18 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19"
    },
    {
        "number": 939,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"1 2 3\\n1 4 5\") == \"1 2 3 3 2 2 1\"\nassert solution(\"7 3\\n1 2 3\\n1 4 5\") == \"1 1 1 2 2 2 3 3 3\"\nassert solution(\"9 3\\n3 6 9\\n2 5 8\\n1 4 7\") == \"1 1 1 2 2 2 3 3 3\"\nassert solution(\"5 2\\n4 1 5\\n3 1 2\") == \"2 3 1 1 3\"\nassert solution(\"3 3\\n1 1 1\\n2 2 2\") == \"1 1 1 2 2 2 2\"\n"
    },
    {
        "number": 939,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''3 3\n1 2 3\n1 4 5\n4 6 7''') == '1 2 3 3 2 2 1'\nassert solution('''9 3\n3 6 9\n2 5 8\n1 4 7\n''') == '1 1 1 2 2 2 3 3 3'\nassert solution('''5 2\n4 1 5\n3 1 2\n''') == '2 3 1 1 3'\n"
    },
    {
        "number": 939,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 939,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"1 2 3\\n1 4 5\\n4 6 7\") == \"1 2 3 3 2 2 1\"\nassert solution(\"1 2 3\\n1 4 5\\n4 6 7\\n3 4 5\") == \"2 1 1 3 3 2 1\"\nassert solution(\"9 3\\n3 6 9\\n2 5 8\\n1 4 7\") == \"1 1 1 2 2 2 3 3 3\"\nassert solution(\"5 2\\n4 1 5\\n3 1 2\") == \"2 3 1 1 3\"\n\n\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 939,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 939,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''3 3\n1 2 3\n1 4 5\n4 6 7''') == '1 1 1 2 2 2 3 3 3'\nassert solution('''7 2\n3 6 9\n2 5 8\n1 4 7''') == '1 1 1 2 2 2 3 3 3'\nassert solution('''9 3\n3 6 9\n2 5 8\n1 4 7\n4 5 6\n7 6 8\n7 8 9''') == '1 1 1 2 2 2 3 3 3'\nassert solution('''9 3\n2 1 9\n1 8 4\n2 7 3\n4 5 6\n7 6 8\n7 8 9''') == '1 1 1 2 2 2 3 3 3'\nassert solution('''9 3\n2 1 9\n1 8 4\n2 7 3\n4 5 6\n7 6 8\n7 8 9\n2 6 9''') == '1 1 1 2 2 2 3 3 3'\n"
    },
    {
        "number": 939,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout"
    },
    {
        "number": 939,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1 2 3 4') == '2 3 4 3 2 1'\nassert solution('1 4 5') == '1 4 5 4 3 2 1'\nassert solution('4 6 7') == '4 6 7 3 2 1'\nassert solution('1 2 3 4') == '2 3 4 3 2 1'\nassert solution('1 4 7') == '1 4 7 3 2 1'\n"
    },
    {
        "number": 939,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"7 3\") == \"1 2 3 3 2 2 1\"\nassert solution(\"9 3\") == \"1 1 1 2 2 2 3 3 3 3\"\nassert solution(\"5 2\") == \"2 3 1 1 3\"\n\nfrom unittest import TestCase\n\nclass TestSolution(TestCase):\n    def test(self):\n        pass"
    },
    {
        "number": 940,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('3 4 5') == '0'\nassert solution('2 5 3') == '1'\nassert solution('100 10 10') == '81'\nassert solution('100 10 10') == '81'\n"
    },
    {
        "number": 940,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == expected\n"
    },
    {
        "number": 940,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('3 4 5') == '0'\nassert solution('2 5 3') == '1'\nassert solution('100 10 10') == '81'\nassert solution('100 10 1') == '81'\nassert solution('100 10 100') == '81'\n\"\"\"\n"
    },
    {
        "number": 940,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('3 4 5') == '0'\nassert solution('2 5 3') == '1'\nassert solution('100 10 10') == '81'\nassert solution('100 10 10\\n100 10 10') == '81'\nassert solution('2 5 3\\n3 4 5') == '1'\n"
    },
    {
        "number": 940,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('3 4 5') == '0'\nassert solution('2 5 3') == '1'\nassert solution('100 10 10') == '81'\nassert solution('33 33 33') == '81'\nassert solution('100 10 10') == '81'\n"
    },
    {
        "number": 940,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('3 4 5') == '0'\nassert solution('2 5 3') == '1'\nassert solution('100 10 10') == '81'\nassert solution('100 10 10') == '81'\nassert solution('100 10 10') == '81'\n"
    },
    {
        "number": 940,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\n"
    },
    {
        "number": 940,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n"
    },
    {
        "number": 940,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''3 4 5''') == '0'\nassert solution('''2 5 3''') == '1'\nassert solution('''100 10 10''') == '81'\nassert solution('''100 10 10''') == '81'\nassert solution('''100 10 10''') == '81'\n"
    },
    {
        "number": 940,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('3 4 5') == '0'\nassert solution('2 5 3') == '1'\nassert solution('100 10 10') == '81'\n"
    },
    {
        "number": 941,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('13 3') == 'even'\nassert solution('10 9') == 'odd'\nassert solution('99 5') == 'odd'\nassert solution('32 92 85 74 4') == 'odd'\nassert solution('2') == 'even'\n"
    },
    {
        "number": 941,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('1\\n0') == 'even'\nassert solution('2\\n1 0') == 'odd'\nassert solution('2\\n2 1 0') == 'even'\nassert solution('3\\n1 1 1 1') == 'odd'\nassert solution('3\\n2 3 4') == 'even'\n"
    },
    {
        "number": 941,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('11') == 'odd'\nassert solution('11 9') == 'odd'\nassert solution('99 1 2 3 4 5 6 7 8 9') == 'odd'\nassert solution('99 3 2 1') == 'odd'\nassert solution('1 0') == 'even'\n"
    },
    {
        "number": 941,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"5 2\\n3 2 7\") == \"even\"\nassert solution(\"99 5\\n32 92 85 74 4\") == \"odd\"\nassert solution(\"2 2\\n1 0\") == \"even\"\nassert solution(\"13 3\\n3 2 7\") == \"even\""
    },
    {
        "number": 941,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('5 3\\n3 2 7') == 'odd'\nassert solution('13 3\\n3 2 7') == 'even'\nassert solution('10 9\\n1 2 3 4 5 6 7 8 9') == 'odd'\nassert solution('99 5\\n32 92 85 74 4') == 'odd'\nassert solution('2 2\\n1 0') == 'even'\n"
    },
    {
        "number": 941,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('13 3') == 'even'\nassert solution('10 9') == 'odd'\nassert solution('2 2') == 'even'\nassert solution('99 5') == 'odd'\nassert solution('32 92 85 74 4') == 'odd'\n"
    },
    {
        "number": 941,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('17 3') == 'even'\nassert solution('10 9') == 'odd'\nassert solution('99 5') == 'odd'\nassert solution('2 2') == 'even'\nassert solution('32 92 85 74 4') == 'odd'\n"
    },
    {
        "number": 941,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1 2 3\\n13 0') == 'odd'\nassert solution('2 1 3\\n3 0') == 'even'\nassert solution('3 1 3\\n3 0') == 'odd'\nassert solution('4 1 3\\n3 0') == 'even'\nassert solution('5 1 3\\n3 0') == 'odd'\n"
    },
    {
        "number": 941,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1 2 3 4 5 6 7 8 9') == 'odd'\nassert solution('7 3 17 11') == 'even'\nassert solution('1 2 3 4 5 6 7 8 9') == 'odd'\nassert solution('99 5 87 45 73 42 95') == 'odd'\nassert solution('2 2') == 'even'\n"
    },
    {
        "number": 941,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"13 3\") == \"even\"\nassert solution(\"10 9\") == \"odd\"\nassert solution(\"2 2\") == \"even\"\nassert solution(\"99 5\") == \"odd\"\nassert solution(\"32 92 85 74 4\") == \"odd\"\n"
    },
    {
        "number": 942,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n"
    },
    {
        "number": 942,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == \"Possible\"\n\"\"\"\n"
    },
    {
        "number": 942,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('3\\n0 0 0') == 'Possible\\n1 1 1'\nassert solution('3\\n0 0 0\\n1 1 2 2 2') == 'Possible\\n1 1 2 2 2'\nassert solution('5\\n3 3 2 2 2\\n0 1 2 2 2') == 'Possible\\n1 1 2 2 2'\nassert solution('5\\n3 3 2 2 2\\n1 1 1 1 1 1') == 'Possible\\n1 1 1 1 1'\nassert solution('5\\n3 3 2 2 2\\n1 1 1 1 1\\n1 1 1 1 1') == 'Possible\\n1 1 1 1 1'\n"
    },
    {
        "number": 942,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == 'Possible'\nassert solution(stdin) == 'Possible'\nassert solution(stdin) == 'Possible'\nassert solution(stdin) == 'Possible'\nassert solution(stdin) == 'Possible'\n"
    },
    {
        "number": 942,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdin\n\"\"\""
    },
    {
        "number": 942,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''3''') == \"Possible\"\nassert solution('''5''') == \"Possible\"\nassert solution('''3 1 2 3 3''') == \"Possible\"\nassert solution('''4''') == \"Possible\"\nassert solution('''0 0 0''') == \"Impossible\"\n"
    },
    {
        "number": 942,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"\"\"3\"\"\") == \"Possible\"\nassert solution(\"\"\"5\"\"\") == \"Possible\"\nassert solution(\"\"\"0 0 0\"\"\") == \"Impossible\"\nassert solution(\"\"\"3 2 1\"\"\") == \"Possible\"\nassert solution(\"\"\"5 3 2 2 2\"\"\") == \"Possible\"\n"
    },
    {
        "number": 942,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('') == 'Possible'\nassert solution('1') == 'Possible'\nassert solution('1 1 1') == 'Possible'\nassert solution('2 2') == 'Possible'\nassert solution('3 3 2 2') == 'Possible'\n"
    },
    {
        "number": 942,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''0\n''') == 'Possible'\nassert solution('''2\n0 1\n2 0\n''') == 'Possible'\nassert solution('''1\n0\n''') == 'Possible'\nassert solution('''3\n1 2\n2 1 3\n1 3\n''') == 'Possible'\nassert solution('''10\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n''') == 'Possible'\n"
    },
    {
        "number": 942,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('2\\n1\\n') == 'Impossible'\nassert solution('1\\n1\\n') == 'Possible'\nassert solution('5\\n1 1 2 2 2\\n') == 'Possible'\nassert solution('1\\n1\\n') == 'Possible'\nassert solution('4\\n0 1 2 3\\n') == 'Possible'\n"
    },
    {
        "number": 943,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1 2 3') == 6\nassert solution('999 999 999') == 3999999996\nassert solution('999 999 999 1') == 3999999996\nassert solution('999 999 999 9') == 3999999996\nassert solution('999 999 999 9 9') == 3999999996\n"
    },
    {
        "number": 943,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('1 2 3') == '6'\nassert solution('999999999 999999999 999999999 999999999') == '3999999996'\nassert solution('9999999999 9999999999999') == '3999999996'\nassert solution('99999999999999999999999999') == '3999999996'\nassert solution('1 2 3') == '6'\n\n\n\"\"\"\n"
    },
    {
        "number": 943,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1 2 3 4') == '6'\nassert solution('1 2 3 4 5') == '15'\nassert solution('1 2 3 4 5 6 7 8 9') == '45'\nassert solution('1 2 3 4 5 6 7 8 9 100') == '45'\nassert solution('1 2 3 4 5 6 7 8 9 1000 1001 1002 1003') == '45'\n"
    },
    {
        "number": 943,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(input(\"\")) == \"6\"\n\"\"\""
    },
    {
        "number": 943,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1 2 3\\n') == '6'\nassert solution('5\\n999999999 999999999 999999999 999999999 999999999\\n') == '3999999996'\nassert solution('1 2 3\\n4 5 6\\n') == '12'\nassert solution('1 2 3\\n4\\n') == '6'\nassert solution('1 2 3\\n4\\n5 6\\n') == '12'\n"
    },
    {
        "number": 943,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n') == '6'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n') == '3999999996'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n') == '3999999996'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n') == '3999999996'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n') == '3999999996'\n"
    },
    {
        "number": 943,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('1\\n2\\n3') == '6'\nassert solution('4\\n1 2 3 4') == '10'\nassert solution('5\\n999999999 999999999 999999999 999999999') == '3999999996'\nassert solution('1\\n2\\n3') == '6'\nassert solution('4\\n1 2 3 4') == '10'\n"
    },
    {
        "number": 943,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('3\\n1 2 3') == '6'\nassert solution('5\\n1 2 3 4 5') == '3999999996'\nassert solution('1000\\n999999999 999999999 999999999 999999999') == '3999999996'\n\n\n-----\n\nInp: 4\n1 2 3 4\n\nOut: 7\n\nInp: 1\n1\n\nOut: 1\n\nInp: 100\n1 2 3 4 5\n\nOut: 11\n\nInp: 1000\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\n\nOut: 2056\n\nInp: 1000\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\n\nOut: 2056\n\n\"\"\""
    },
    {
        "number": 943,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('3\\n1 2 3') == '6'\nassert solution('5\\n999999999 999999999 999999999 999999999 999999999') == '3999999996'\nassert solution('1\\n1') == '2'\n"
    },
    {
        "number": 943,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 944,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\n    '4\\n'\n    '1 2\\n'\n    '3 4\\n'\n    '3 2\\n'\n    ) == '2\\n' \\\n        + '2 2 1\\n' \\\n        + '1 3\\n'\n\n\"\"\"\n"
    },
    {
        "number": 944,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n"
    },
    {
        "number": 944,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('4') == '2'\nassert solution('6') == '3'\nassert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('7') == '5'\n"
    },
    {
        "number": 944,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\n'''\n"
    },
    {
        "number": 944,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 944,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == \"2 1 1\"\n\n\n\"\"\"\n\n\"\"\"\n1)\nThe easiest approach is to sort the input.\n\n2)\nThe other approach is to do a BFS (or DFS) on the input and set each city to be visited only once.\n\n3)\nAfter sorting the input you can start from the city with the smallest ID, and visit it and its neighbours.\nYou can assume that the city with the smallest ID is one that you haven't visited yet.\n\"\"\"\n"
    },
    {
        "number": 944,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''\n4\n1 2\n3 4\n3 2\n''') == '2'\n\nassert solution('''\n6\n3 4\n5 4\n3 2\n1 3\n4 6\n''') == '3'\nassert solution('''\n1\n1\n1\n1\n1\n1\n''') == '1'\n'''\n"
    },
    {
        "number": 944,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('4\\n1 2\\n3 4\\n3 2\\n') == '2'\nassert solution('6\\n3 4\\n5 4\\n3 2\\n1 3\\n4 6\\n') == '3'\nassert solution('3\\n3 4\\n5 4\\n3 2\\n1 3\\n4 6\\n') == '1'\nassert solution('8\\n3 4\\n5 4\\n3 2\\n1 3\\n4 6\\n1 5\\n3 4\\n') == '2'\nassert solution('8\\n3 4\\n5 4\\n3 2\\n1 3\\n4 6\\n1 5\\n3 4\\n1 3\\n5 4\\n') == '2'\n"
    },
    {
        "number": 944,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 2\\n3 4\\n3 2\\n\") == \"2\"\nassert solution(\"6\\n3 4\\n5 4\\n3 2\\n1 3\\n4 6\\n\") == \"3\"\nassert solution(\"4\\n1 2\\n3 4\\n3 2\\n\") == \"2\"\n\n\n\"\"\"\nn = int(input())\na = [[int(x) for x in input().split()] for i in range(n - 1)]\nr = len(a)\nd = [0] * n\nfor i in range(r):\n    for j in range(n):\n        if a[i][0] == j:\n            d[a[i][1] - 1] += 1\n        if a[i][1] == j:\n            d[a[i][0] - 1] += 1\nprint(d.index(max(d)) + 1)\nfor i in range(r):\n    print(d[a[i][0] - 1], end=\" \")\n    print(*a[i][1:], sep=\"\")\n"
    },
    {
        "number": 944,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"\"\"4\n1 2\n3 4\n3 2\n\"\"\") == \"\"\"2\n2 2 1\n1 3\n\"\"\"\n\nassert solution(\"\"\"6\n3 4\n5 4\n3 2\n1 3\n4 6\n\"\"\") == \"\"\"3\n1 1 \n2 2 3 \n2 4 5 \n\"\"\"\nassert solution(\"\"\"2\n1 1\n\"\"\") == \"\"\"2\n1 1\n\"\"\"\n"
    },
    {
        "number": 945,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''1\n-1\n-1''') == 'no'\nassert solution('''1\n1\n''') == 'yes'\nassert solution('''1\n-1\n0\n''') == 'yes'\nassert solution('''1\n-1\n1\n''') == 'no'\nassert solution('''1\n0\n1\n''') == 'no'\n"
    },
    {
        "number": 945,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"0 10 5 15\"\"\"\n) == \"yes\"\n\nassert solution(\n\"\"\"0 15 5 10\"\"\"\n) == \"no\"\n\nassert solution(\n\"\"\"0 10 5 15\"\"\"\n) == \"no\"\n\nassert solution(\n\"\"\"0 15 5 10\"\"\"\n) == \"no\"\n\nassert solution(\n\"\"\"0 15 5 10\"\"\"\n) == \"no\""
    },
    {
        "number": 945,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"4\\n0 10 5 15\\n\") == \"no\"\nassert solution(\"4\\n0 15 5 10\\n\") == \"yes\"\nassert solution(\"2\\n0 1\\n\") == \"no\"\nassert solution(\"2\\n0 1\\n\") == \"no\"\nassert solution(\"2\\n0 2\\n\") == \"no\"\n"
    },
    {
        "number": 945,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"1 2 3 4\\n-1 -2 -3 -4\") == \"no\"\nassert solution(\"1 2 3 4\\n1 2 3 4\") == \"yes\"\nassert solution(\"1 2 3 4\\n1 2 3 4\") == \"yes\"\nassert solution(\"1 2 3 4\\n1 2 3 4\") == \"yes\"\nassert solution(\"1 2 3 4\\n1 2 3 4\") == \"yes\"\n"
    },
    {
        "number": 945,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''4\n0 10 5 15''') == 'yes'\nassert solution('''4\n0 15 5 10''') == 'no'\nassert solution('''5\n0 3 1 8 6''') == 'yes'\nassert solution('''5\n0 1 2 3 4''') == 'no'\nassert solution('''6\n0 4 1 2 3 4 5''') == 'yes'\n"
    },
    {
        "number": 945,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''4\n0 10 5 15\n''') == 'yes'\nassert solution('''4\n0 15 5 10\n''') == 'no'\nassert solution('''4\n0 5 5 0\n''') == 'no'\nassert solution('''3\n1 2 3\n''') == 'no'\nassert solution('''2\n1 2\n''') == 'yes'\n"
    },
    {
        "number": 945,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"4\\n0 10 5 15\") == \"yes\"\nassert solution(\"4\\n0 15 5 10\") == \"no\"\n\n\n\n'''\n\nN = int(input())\nX = list(map(int, input().split()))"
    },
    {
        "number": 945,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"no\"\nassert solution(\"\") == \"no\"\nassert solution(\"0 10 5 15\") == \"yes\"\nassert solution(\"0 15 5 10\") == \"no\"\nassert solution(\"0 10 5 15 0 10 5 15\") == \"yes\"\n"
    },
    {
        "number": 945,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('0 10 5 15') == 'yes'\nassert solution('0 15 5 10') == 'no'\nassert solution('0 10 10 10') == 'yes'\nassert solution('0 15 5 10') == 'no'\nassert solution('0 10 10 10') == 'yes'\n"
    },
    {
        "number": 945,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == expected\n\"\"\""
    },
    {
        "number": 946,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('0 0 1\\n') == 'HARD'\nassert solution('1\\n0\\n') == 'EASY'\nassert solution('1\\n1\\n') == 'HARD'\nassert solution('2\\n0\\n0\\n') == 'HARD'\nassert solution('1\\n0\\n0\\n') == 'EASY'\n"
    },
    {
        "number": 946,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('3\\n0 0 1') == 'HARD'\nassert solution('1\\n0') == 'EASY'\nassert solution('1\\n1') == 'EASY'\nassert solution('2\\n0 0') == 'EASY'\nassert solution('2\\n0 0 1') == 'HARD'\n"
    },
    {
        "number": 946,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('3') == 'HARD'\nassert solution('1') == 'EASY'\nassert solution('0 0 1') == 'HARD'\nassert solution('0 1 0') == 'EASY'\nassert solution('0 0 0') == 'EASY'\n"
    },
    {
        "number": 946,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''0\n0\n1\n1''') == 'EASY'\nassert solution('''1\n0\n0\n1''') == 'EASY'\nassert solution('''0\n0\n0\n0\n1''') == 'EASY'\nassert solution('''0\n1\n1\n1\n0''') == 'HARD'\nassert solution('''1\n1\n0\n1\n1''') == 'HARD'\n"
    },
    {
        "number": 946,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('0 0 1') == 'HARD'\nassert solution('0') == 'EASY'\nassert solution('0 0 1 0 1') == 'EASY'\nassert solution('0 0 1 1 0') == 'HARD'\nassert solution('0 0 1 0 1 0 0') == 'EASY'\n"
    },
    {
        "number": 946,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''3\n0 0 1''') == 'HARD'\nassert solution('''1\n0''') == 'EASY'\nassert solution('''1\n0\n1\n1\n1\n0''') == 'HARD'\nassert solution('''1\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n"
    },
    {
        "number": 946,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"\n3\n0 0 1\n\"\"\") == \"HARD\"\nassert solution(\n\"\"\"\n1\n0\n\"\"\") == \"EASY\"\nprint(\"Tests passed successfully.\")\n"
    },
    {
        "number": 946,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 946,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1\\n0') == 'EASY'\nassert solution('2\\n0 0 1') == 'HARD'\nassert solution('1\\n1') == 'HARD'\nassert solution('3\\n0 0 1 0') == 'EASY'\nassert solution('5\\n0 0 1 0 0') == 'EASY'\n"
    },
    {
        "number": 946,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('3\\n0 0 1\\n') == 'HARD'\nassert solution('1\\n0\\n') == 'EASY'\n'''\n"
    },
    {
        "number": 947,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1"
    },
    {
        "number": 947,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''4\n2\n2\n2\n4\n1\n1\n1\n1\n2\n1\n1\n2\n1\n1\n2\n1\n1\n1\n1\n2\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n2\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n2\n1\n2\n1\n1\n1\n1\n1\n1\n1\n2\n1\n1\n1\n1\n1\n1\n1\n1\n1\n2\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n2\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1"
    },
    {
        "number": 947,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2"
    },
    {
        "number": 947,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('3\\n4\\n6\\n9\\n') == '2 2\\n3 3\\n3 6'\nassert solution('1\\n3\\n2\\n4\\n') == '1 3\\n2 2'\nassert solution('2\\n4\\n6\\n9\\n') == '3 3\\n3 6'\nassert solution('10\\n1\\n10\\n10\\n') == '1 1'\nassert solution('5\\n5\\n5\\n5\\n') == '5 5'\n"
    },
    {
        "number": 947,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('4\\n6\\n9\\n') == '2 2\\n3 3\\n3 6'\nassert solution('3\\n4\\n6\\n') == '1 3\\n2 2'\nassert solution('1\\n5\\n9\\n') == '1 5\\n2 4'\nassert solution('3\\n3\\n6\\n') == '3 3'\nassert solution('2\\n1\\n7\\n') == '2 2'\n"
    },
    {
        "number": 947,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''3\n4\n6\n9''') == '2 2'\nassert solution('''5\n1\n2\n3\n4\n5''') == '3 3'\nassert solution('''1\n2\n3\n4\n5\n6\n7\n8\n9\n10''') == '3 3'\nassert solution('''2\n8\n7\n4\n3\n2\n1''') == '2 2'\nassert solution('''7\n11\n10\n13\n17\n15\n16\n18''') == '3 3'\n"
    },
    {
        "number": 947,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('2\\n4\\n6\\n9\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10"
    },
    {
        "number": 947,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 947,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"3\") == \"\"\nassert solution(\"3\\n3\") == \"\"\nassert solution(\"3\\n3\\n3\") == \"\"\nassert solution(\"3\\n2\\n3\") == \"1 2\"\n"
    },
    {
        "number": 947,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == ''\n\"\"\"\n\nimport sys"
    },
    {
        "number": 948,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('4 4\\n'\n    'xxxx\\n'\n    'xfax\\n'\n    'xcex\\n'\n    'xxxx\\n') == '1'\n\nassert solution('4 2\\n'\n    'xx\\n'\n    'cf\\n'\n    'ae\\n'\n    'xx\\n') == '1'\n\nassert solution('2 3\\n'\n    'fac\\n'\n    'cef\\n') == '2'\n\nassert solution('1 4\\n'\n    'face\\n'\n    '') == '0'\n\nassert solution('1 2\\n'\n    'a1\\n'\n    'a2\\n'\n    'a3\\n'\n    'a4\\n') == '0'\n\nprint(\"Passed all tests...\")\n"
    },
    {
        "number": 948,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('4 2\\nxx\\ncf\\nae\\nxx\\n') == '1\\n'\nassert solution('4 1\\nxxxx\\n') == '0\\n'\nassert solution('5 2\\nace\\nace\\nace\\nace\\n') == '1\\n'\nassert solution('1 1\\nface\\n') == '0\\n'\nassert solution('1 4\\nface\\nface\\nface\\nface\\n') == '2\\n'\n"
    },
    {
        "number": 948,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"4 4\\nxxxx\\nxfax\\nxcex\\nxxxx\\n\") == \"1\\n\"\nassert solution(\"4 2\\nxx\\ncf\\nae\\nxx\\n\") == \"1\\n\"\nassert solution(\"1 4\\nface\\n\") == \"0\\n\"\nassert solution(\"2 3\\nfac\\ncef\\n\") == \"2\\n\"\nassert solution(\"10 10\\nx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx\\nxx"
    },
    {
        "number": 948,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''4 4\nxx\nxfax\nxcex\nxxxx\n''') == '1'\nassert solution('''4 2\nfac\ncef\n''') == '1'\nassert solution('''2 3\nfac\ncef\n''') == '2'\nassert solution('''1 4\nface\n''') == '0'\n\n\n-----Best Practice-----"
    },
    {
        "number": 948,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('4 4\\nxx\\nxx\\nxx\\nxx\\n') == '1'\nassert solution('4 2\\nxx\\nxx\\nxx\\nxx\\n') == '1'\nassert solution('1 4\\nface\\n') == '0'\nassert solution('2 3\\nfac\\ncef\\n') == '2'\nassert solution('2 4\\nc\\nce\\ncf\\n') == '2'\n"
    },
    {
        "number": 948,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''4 4\nxxxx\nxfax\nxcex\nxxxx\n''') == '1'\n\nassert solution('''4 2\nfac\ncef\n''') == '1'\n\nassert solution('''2 3\nface\ncef\n''') == '2'\n\nassert solution('''1 4\nface\n''') == '0'\n"
    },
    {
        "number": 948,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('4 4\\nxxxx\\nxfax\\nxcex\\nxxxx\\n') == '1\\n'\nassert solution('4 2\\nxx\\ncf\\nae\\nxx\\n') == '1\\n'\nassert solution('2 3\\nfac\\ncef\\n') == '2\\n'\nassert solution('1 4\\nface\\n') == '0\\n'\nassert solution('1 1\\nf') == '0\\n'\n"
    },
    {
        "number": 948,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 948,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''4 4\n    xxxx\n    xfax\n    xcex\n    xxxx''') == '1'\nassert solution('''4 2\n    xx\n    cf\n    ae\n    xx\n''') == '1'\nassert solution('''2 3\n    fac\n    cef\n''') == '2'\nassert solution('''1 4\n    face\n''') == '0'\nassert solution('''2 1\n    f\n    x\n    a\n    x\n    x\n''') == '0'\n"
    },
    {
        "number": 948,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(input) == ''\nassert solution(input) == ''\nassert solution(input) == ''\nassert solution(input) == ''\nassert solution(input) == ''\n"
    },
    {
        "number": 949,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''1 2''') == '1'\nassert solution('''61803398874989484820458683436563811772030917980576 61803398874989484820458683436563811772030917980576''') == '61803398874989484820458683436563811772030917980576'\n'''\n"
    },
    {
        "number": 949,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('1 2') == '1'\nassert solution('61803398874989484820458683436563811772030917980576 61803398874989484820458683436563811772030917980576') == '61803398874989484820458683436563811772030917980576'\nassert solution('12 40') == '1'\nassert solution('1000000001 10000000001') == '1'\nassert solution('10 2') == '1'\n"
    },
    {
        "number": 949,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1 2') == '1'\nassert solution('61803398874989484820458683436563811772030917980576 61803398874989484820458683436563811772030917980576') == '61803398874989484820458683436563811772030917980576'\nprint(solution(stdin))\n\"\"\"\n"
    },
    {
        "number": 949,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(input()) == output\n\"\"\"\n"
    },
    {
        "number": 949,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1 2') == '1'\nassert solution('61803398874989484820458683436563811772030917980576 61803398874989484820458683436563811772030917980576') == '61803398874989484820458683436563811772030917980576'\n"
    },
    {
        "number": 949,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"1 2\") == \"1\"\nassert solution(\"61803398874989484820458683436563811772030917980576 61803398874989484820458683436563811772030917980576\") == \"61803398874989484820458683436563811772030917980576\"\n\n\"\"\""
    },
    {
        "number": 949,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"1 2\") == \"1\"\nassert solution(\"61803398874989484820458683436563811772030917980576 61803398874989484820458683436563811772030917980576\") == \"61803398874989484820458683436563811772030917980576\"\n"
    },
    {
        "number": 949,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''1 2''') == '1'\nassert solution('''1 2''') == '1'\nassert solution('''61803398874989484820458683436563811772030917980576 61803398874989484820458683436563811772030917980576''') == '61803398874989484820458683436563811772030917980576'"
    },
    {
        "number": 949,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''1 2''') == 1\nassert solution('''61803398874989484820458683436563811772030917980576 61803398874989484820458683436563811772030917980576''') == 61803398874989484820458683436563811772030917980576\n"
    },
    {
        "number": 949,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\n'''1 2'''\n) == '1'\nassert solution(\n'''61803398874989484820458683436563811772030917980576 61803398874989484820458683436563811772030917980576'''\n) == '61803398874989484820458683436563811772030917980576'\n"
    },
    {
        "number": 950,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == expected\n\"\"\"\n\nfrom typing import List, Tuple\nfrom itertools import count"
    },
    {
        "number": 950,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdin\n\"\"\"\n"
    },
    {
        "number": 950,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('123 456'\n           '456789'\n           '1**2'\n           'a3*0'\n           'c4**'\n           '*a1c&'\n           '&q2w*'\n           '#a3c#'\n           '*&#*&'\n           ) == '123'\nassert solution('1 2 3 4 5'\n           '6 7 8 9'\n           '*&#*&'\n           '#a3c#'\n           '*&#*&'\n           ) == '123'\nassert solution('123 456'\n           '456789'\n           '1**2'\n           'a3*0'\n           'c4**'\n           '*a1c&'\n           '&q2w*'\n           '#a3c#'\n           '*&#*&'\n           ) == '123'\n'''\n"
    },
    {
        "number": 950,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('5 4\\n1**2\\na3*0\\nc4**\\n#a3c#\\n*a1c&\\&q2w*\\n#a3c#\\n*&#*&') == '1'\nassert solution('5 5\\n#*&#*\\na1c&\\n&q2w*\\n#a3c#\\n*&#*&\\n#a3c#\\n*&#*&\\n#a3c#\\n*&#*&\\n#a3c#\\n*&#*&\\n#a3c#\\n*&#*&\\n#a3c#\\n*&#*&') == '3'"
    },
    {
        "number": 950,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == expected\n\n\"\"\""
    },
    {
        "number": 950,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(input) == output\n"
    },
    {
        "number": 950,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''3 4\n1**2\na3*0\nc4**\n\n''') == '1'\nassert solution('''5 5\n"
    },
    {
        "number": 950,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('3 4\\n1**2\\na3*0\\nc4**\\n') == '1'\nassert solution('5 5\\n#*&#*\\n*a1c&\\n&q2w*\\n#a3c#\\n*&#*&\\n') == '3'\nassert solution('8 3\\n##*#*#\\n#####\\n#####\\n#####\\n#####\\n#**#*#\\n') == '2'\n\"\"\"\nimport sys\nstdin = sys.stdin\n"
    },
    {
        "number": 950,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"a\") == \"a\"\nassert solution(\"a b\") == \"a\"\nassert solution(\"a b c\") == \"a\"\nassert solution(\"a b c d\") == \"a\"\n"
    },
    {
        "number": 950,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == '3'\n\n\"\"\"\n"
    },
    {
        "number": 951,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('3\\n11\\n') == '1'\nassert solution('3\\n99\\n') == '0'"
    },
    {
        "number": 951,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('3\\n11') == '1'\nassert solution('3\\n99') == '0'\nassert solution('3\\n123456789') == '0'\nassert solution('3\\n9') == '0'\nassert solution('3\\n8') == '0'\n"
    },
    {
        "number": 951,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('3\\n11') == '1'\nassert solution('3\\n99') == '0'\nassert solution('3\\n123') == '1'\nassert solution('3\\n1134') == '2'\nassert solution('3\\n1111') == '1'\n"
    },
    {
        "number": 951,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''3''') == '1'\nassert solution('''99''') == '0'\nassert solution('''999999999''') == '9'\nassert solution('''1''') == '0'\nassert solution('''999''') == '999'\n"
    },
    {
        "number": 951,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('3\\n11\\n') == '1'\nassert solution('3\\n99\\n') == '0'\nassert solution('3\\n12345\\n') == '0'\nassert solution('3\\n876\\n') == '1'\nassert solution('3\\n999\\n') == '2'\n"
    },
    {
        "number": 951,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('3\\n11\\n') == '1'\nassert solution('3\\n99\\n') == '0'"
    },
    {
        "number": 951,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''3\n11\n''') == '1'\nassert solution('''3\n99\n''') == '0'\nassert solution('''3\n999\n''') == '9'\nassert solution('''3\n9\n''') == '1'\nassert solution('''3\n99999\n''') == '9'"
    },
    {
        "number": 951,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 951,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('2') == '1'\nassert solution('1') == '0'\nassert solution('12') == '1'\nassert solution('99') == '0'\nassert solution('999') == '0'\n"
    },
    {
        "number": 951,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"\\n\") == \"\"\nassert solution(\"1\") == \"\"\nassert solution(\"1\\n\") == \"\"\nassert solution(\"1\\n1\") == \"\"\n"
    },
    {
        "number": 952,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"5 6\") == \"2 2\"\nassert solution(\"5 7\") == \"3 3\"\nassert solution(\"2 5 7\") == \"3 4 7\"\nassert solution(\"2 5 7\") == \"3 4 7\"\n\"\"\"\n"
    },
    {
        "number": 952,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == expected\n\"\"\"\n\nimport sys\n\nn, m = map(int, sys.stdin.readline().split())\n\nroads = [0] * (n + 1)\n\nfor _ in range(m):\n    u, v, c = map(int, sys.stdin.readline().split())\n    roads[u] += c\n    roads[v] -= c\n\ncan_reverse = True\n\nfor i in range(1, n + 1):\n    if roads[i]!= 0:\n        can_reverse = False\n        break"
    },
    {
        "number": 952,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"5 6\\n2 1 1\\n5 2 6\\n2 3 2\\n3 4 3\\n4 5 5\\n1 5 4\") == \"2 2\\n1 3\"\nassert solution(\"5 7\\n2 1 5\\n3 2 3\\n1 3 3\\n2 4 1\\n4 3 5\\n5 4 1\\n1 5 3\") == \"3 3\\n3 4 7\"\nassert solution(\"5 9\\n2 1 6\\n3 2 3\\n1 3 5\\n2 4 2\\n4 5 7\\n5 6 2\\n1 6 4\") == \"3 4 7\"\nassert solution(\"5 7\\n2 1 5\\n3 2 3\\n1 3 2\\n2 4 1\\n4 3 5\\n5 4 1\\n1 5 3\") == \"3 4 7\"\nassert solution(\"5 6\\n2 1 5\\n3 2 3\\n1 3 4\\n2 4 5\\n1 5 3\") == \"2 2\"\n"
    },
    {
        "number": 952,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"6 7\") == \"3 3\"\nassert solution(\"5 7\") == \"3 4 7\"\nassert solution(\"4 1\") == \"2 1\"\nassert solution(\"5 6\") == \"2 2\"\nassert solution(\"5 7\") == \"3 3\"\n"
    },
    {
        "number": 952,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('3 3\\n3 4 7\\n1 5 3\\n2 6 2\\n5 7 1') == '3 3\\n3 4 7\\n1 5 3\\n2 6 2'\n\"\"\"\n"
    },
    {
        "number": 952,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == result_correct\n\nIf you are reading this in the REPL you will get\n> python3 solution.py < solution_test.py\nRUNNING solution_test.py...\nOK\n------\n\nThis is a test case we're running internally for checking your solution:\n\n> python3 solution_test.py\nRunning solution_test.py\nOK\n------\n>..\n>,\n------\n> timeit solution_test.py\nNo asserts, no print statements, no side effects, timeit gets the best of both worlds:\n0.00200000000000001\n------\n>\n------\n>\n------\n> exit()\n------\n\nIf your solution passes the internal tests, you will get no complaints from the checker, and the final grades will be the most out of 10.\n\n-----\n\"\"\"\n"
    },
    {
        "number": 952,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''5 6\n2 1 1\n5 2 6\n2 3 2\n3 4 3\n4 5 5\n1 5 4''') == '2 2\\n1 3'\n\nassert solution('''5 7\n2 1 5\n3 2 3\n1 3 3\n2 4 1\n4 3 5\n5 4 1\n1 5 3''') == '3 3\\n3 4 7'\n\n'''\n\nn,m = map(int,stdin.split())\nroads = [set() for _ in range(n)]\n\nfor _ in range(m):\n    u,v,c = map(int,stdin.split())\n    roads[u-1].add(v-1)\n    roads[v-1].add(u-1)\n\nk = 0\nfor i in range(n):\n    roads[i].discard(i)\n    if len(roads[i]) == 1:\n        k += 1\n\nfor i in range(n):\n    if len(roads[i]) == 1:\n        roads[i].clear()\n        k -= 1\n\nroads = list(filter(None,roads))\n\nroads.sort(key=lambda x: len(x))"
    },
    {
        "number": 952,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"5 6\") == \"2 2\"\nassert solution(\"5 7\") == \"3 3\"\nassert solution(\"5 7\\n1 3 2\\n1 4 3\\n2 4 1\\n4 3 5\\n5 4 1\\n1 5 3\\n\") == \"3 3\\n3 4 7\\n\"\n\n\n-----Contest\n\n8.2B\n\n\"\"\"\n"
    },
    {
        "number": 952,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"3 1\") == \"1 2 3\"\nassert solution(\"2 3 1\") == \"1 2 3\"\nassert solution(\"2 3 2\") == \"1 2 3\"\nassert solution(\"2 1 1\") == \"1 2 3\"\nassert solution(\"3 2 3\") == \"1 2 3\"\n"
    },
    {
        "number": 952,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"2 3\") == \"3 4 7\"\nassert solution(\"2 3\") == \"3 4 7\"\nassert solution(\"2 3\") == \"3 4 7\"\nassert solution(\"2 3\") == \"3 4 7\"\nassert solution(\"2 3\") == \"3 4 7\"\n"
    },
    {
        "number": 953,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('5\\n5 4 2 3 6 7 1\\n0001001\\n0000000\\n0000010\\n1000001\\n0000000\\n0010000\\n1001000') == '1 2 4 3 6 7 5'\nassert solution('5\\n4 2 1 5 3\\n00100\\n00011\\n10010\\n01101\\n01010\\n') == '1 2 3 4 5'\n\n-----Auxiliary Space-----\n\nO(n)\n\n\"\"\""
    },
    {
        "number": 953,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 953,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == expected\n"
    },
    {
        "number": 953,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"7\\n5 2 4 3 6 7 1\\n0001001\\n0000000\\n0000010\\n1000001\\n0000000\\n0010000\\n1001000\") == \"1 2 4 3 6 7 5\"\nassert solution(\"5\\n4 2 1 5 3\\n00100\\n00011\\n10010\\n01101\") == \"1 2 3 4 5\"\n\"\"\"\n"
    },
    {
        "number": 953,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''7\n5 2 4 3 6 7 1\n0001001\n0000000\n0000010\n1000001\n0000000\n0010000\n1001000''') == '1 2 4 3 6 7 5'\nassert solution('''5\n4 2 1 5 3\n00100\n00011\n10010\n01101\n01010''') == '1 2 3 4 5'\n'''\n"
    },
    {
        "number": 953,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''7\n5 2 4 3 6 7 1\n0001001\n0000000\n0000010\n1000001\n0000000\n0010000\n1001000''') == '1 2 4 3 6 7 5'\nassert solution('''5\n4 2 1 5 3\n00100\n00011\n10010\n01101\n01010\n''') == '1 2 3 4 5'\nassert solution('''5\n4 2 1 5 3\n00100\n00011\n10010\n01101\n01010\n''') == '1 2 3 4 5'\nassert solution('''7\n7\n000000010111\n10000000101\n000000000101\n011100001101\n010000111010\n110100001101\n110100000110\n000010110111\n000010100010\n''') == '7 4 1 5 3 2 6 7'"
    },
    {
        "number": 953,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdin\n\n'''\n"
    },
    {
        "number": 953,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 953,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"7\") == \"1 2 4 3 6 7 5\"\nassert solution(\"5\") == \"1 2 3 4 5\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"5\") == \"1 2 3 4 5\"\n"
    },
    {
        "number": 953,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''7\n5 2 4 3 6 7 1\n0001001\n0000000\n0000010\n1000001\n0000000\n0010000\n1001000''') == '1 2 4 3 6 7 5'\nassert solution('''5\n4 2 1 5 3\n00100\n00011\n10010\n01101\n01010\n''') == '1 2 3 4 5'\nassert solution('''10\n9 8 7 6 5 4 3 2 1\n00010110100\n000000100100\n000100100010\n100100100100\n1000100100010\n100100100100\n1000100100010\n0000001000100\n00010010010010\n00010010010001\n00000010010010''') == '1 2 4 3 6 7 5'\nassert solution('''4\n2 1 5 4 3\n0001100\n0000010\n101000\n000003\n''') == '1 2 3 4'"
    },
    {
        "number": 954,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"abcd\") == 4\nassert solution(\"bbb\") == 1\nassert solution(\"yzyz\") == 2\nprint(\"Testcases passed successfully.\")\n\n\"\"\""
    },
    {
        "number": 954,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('ab') == 'bab'\nassert solution('abcd') == 'cdab'\nassert solution('abcdab') == 'cdabcd'\n"
    },
    {
        "number": 954,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('abcd') == 4\nassert solution('bbb') == 1\nassert solution('yzyz') == 2\nassert solution('zxyz') == 2\nassert solution('zyxw') == 2\n"
    },
    {
        "number": 954,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('abcd') == 4\nassert solution('bbb') == 1\nassert solution('yzyz') == 2\nassert solution('aaa') == 1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\"\"\""
    },
    {
        "number": 954,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('abcdef') == 4\nassert solution('bbb') == 1\nassert solution('yzyz') == 2\nassert solution('yzyz') == 2\nassert solution('abcdef') == 4\n"
    },
    {
        "number": 954,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"abcd\") == 4\nassert solution(\"bbb\") == 1\nassert solution(\"yzyz\") == 2\nassert solution(\"zxyz\") == 1\nassert solution(\"abcde\") == 1\n"
    },
    {
        "number": 954,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('abcd') == '4'\nassert solution('bbb') == '1'\nassert solution('yzyz') == '2'\nassert solution('zyzy') == '1'\nassert solution('nrrqmhqbxzs') == '3'\n"
    },
    {
        "number": 954,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"abcd\") == 4\nassert solution(\"bbb\") == 1\nassert solution(\"yzyz\") == 2\nassert solution(\"zyzy\") == 2"
    },
    {
        "number": 954,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"abcd\") == \"abcd\"\nassert solution(\"bbb\") == \"bbb\"\nassert solution(\"yzyz\") == \"yzyz\""
    },
    {
        "number": 954,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"abcd\") == 4\nassert solution(\"bbb\") == 1\nassert solution(\"yzyz\") == 2\nassert solution(\"abcdabcd\") == 0\nassert solution(\"abcdabce\") == 4\n"
    },
    {
        "number": 955,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 955,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('test') == '-1'\nassert solution('t5') == '-1'\nassert solution('t1') == '5'\nassert solution('t2') == '-1'\nassert solution('t3') == '-1'\n"
    },
    {
        "number": 955,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('5\\n2\\n15\\n4\\n10\\n9\\n15\\n16') == '-1'\nassert solution('10\\n15\\n16\\n10\\n15\\n16\\n10\\n15\\n16\\n10\\n15\\n16\\n') == '250'\nassert solution('1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\"
    },
    {
        "number": 955,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''\n4\n5 C\n6 B\n16 BAC\n4 A\n''') == '15'\nassert solution('''\n2\n10 AB\n15 BA\n\n''') == '-1'\nassert solution('''\n5\n10 A\n9 BC\n11 CA\n4 A\n5 B\n\n''') == '16'\nassert solution('''\n6\n100 A\n355 BCA\n150 BC\n160 AC\n180 B\n190 CA\n\n''') == '250'\n\n'''"
    },
    {
        "number": 955,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''10 A\n9 BC\n11 CA\n4 A\n5 B\n''') == '16'\nassert solution('''100 A\n355 BCA\n150 BC\n160 AC\n180 B\n190 CA\n''') == '250'\nassert solution('''5 BA\n11 CB\n''') == '16'\n\n\n-----\n\nhttps://www.codewars.com/kata/berland-shop-sells-juices-correctly\n\nI've got an idea about the Berland shop. A small group of simple people came to me yesterday to tell me what should I say to them if I should buy a certain type of juice.\n\nI've decided to keep a simple rules for the choice of fruits. In order to choose a particular fruit, it should contain an A, a B and a C. But the rules are simple. You can't choose more than one of those letters in a juice.\n\nFor example, if you want to buy a strawberry, you can't choose more than one A. But if you want to buy a raspberry, you can choose only one of A and B.\n\nGood luck! I'll help you to solve this problem!\n\nPlease help me to solve this task!\n\nWrite 5 lines of code to test the correctness of solution: Berland shop sells $n$ kinds of juices. Each juice has its price $c_i$. Each juice includes some set of vitamins in it. There are three types of vitamins: vitamin \"A\", vitamin \"B\" and vitamin \"C\". Each juice can contain one, two or all three types of vitamins in it.\n\nPetya knows that he needs all three types of vitamins to stay healthy. What is the minimum total price of juices that Petya has to buy to obtain all three vitamins? Petya obtains some vitamin if he buys at least one juice containing it and drinks it.\n\nInput\nThe first line contains a single integer $n$ $(1 \\le n \\le 1\\,000)$ \u2014 the number of juices.\n\nEach of the next $n$ lines contains an integer $c_i$ $(1 \\le c_i \\le 100\\,000)$ and a string $s_i$ \u2014 the price of the $i$-th juice and the vitamins it contains. String $s_i$ contains from $1$ to $3$ characters, and the only possible characters are \"A\", \"B\" and \"C\". It is guaranteed that each letter appears no more than once in each string $s_i$. The order of letters in strings $s_i$ is arbitrary.\n\nOutput\nIf Petya obtains all three vitamins, print -1. Otherwise print the minimum total price of juices that Petya has to buy to obtain all three vitamins.\n\n\n-----Input-----\n\n4\n5 C\n6 B\n16 BAC\n4 A\n\n-----Output-----\n\n15\n\n-----Input-----\n\n2\n10 AB\n15 BA\n\n-----Output-----\n\n-1\n\n-----Input-----\n\n5\n10 A\n9 BC\n11 CA\n4 A\n5 B\n\n-----Output-----\n\n13\n\n-----Input-----\n\n6\n100 A\n355 BCA\n150 BC\n160 AC\n180 B\n190 CA\n\n-----Output-----\n\n250\n\n-----Input-----\n\n2\n5 BA\n11 CB\n\n-----Output-----\n\n16\n\n-----"
    },
    {
        "number": 955,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 955,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''4\n5 C\n6 B\n16 BAC\n4 A''') == '15'\n\nassert solution('''2\n10 AB\n15 BA\n''') == '-1'\n\nassert solution('''5\n10 A\n9 BC\n11 CA\n4 A\n5 B\n''') == '13'\n\nassert solution('''6\n100 A\n355 BCA\n150 BC\n160 AC\n180 B\n190 CA\n''') == '250'\n\nassert solution('''6\n100 A\n355 BCA\n150 BC\n160 AC\n180 B\n190 CA\n10 B\n9 AC\n8 AC\n7 BC\n6 BC\n5 CA\n4 CA\n3 BC\n2 CA\n1 AC\n''') == '274'"
    },
    {
        "number": 955,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''4\n5 C\n6 B\n16 BAC\n4 A''') == '15'\nassert solution('''2\n10 AB\n15 BA\n\n''') == '-1'\nassert solution('''6\n100 A\n355 BCA\n150 BC\n160 AC\n180 B\n190 CA\n\n''') == '250'\n\nassert solution('''5\n10 A\n9 BC\n11 CA\n4 A\n5 B\n\n''') == '16'\nassert solution('''3\n8 BA\n10 BC\n11 CB\n\n''') == '-1'\n"
    },
    {
        "number": 955,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100\") == \"25\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100\") == \"25\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100\") == \"25\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100\") == \"25\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n"
    },
    {
        "number": 955,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('') == -1\nassert solution('5') == 15\nassert solution('10') == -1\nassert solution('16') == -1\nassert solution('6') == 15\n"
    },
    {
        "number": 956,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''5 51\n10 23\n23 42\n39 42\n10 39\n39 58\n''') == '10: 1 42\\n23: 1 39\\n39: 1 23\\n42: 1 10\\n58: 2 10 42\\n'\n\nassert solution('''5 100\n1 2\n1 3\n1 4\n2 3\n2 4\n''') == '1: 0\\n2: 0\\n3: 1 4\\n4: 1 3\\n'\n\nassert solution('''10 50\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4"
    },
    {
        "number": 956,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''5 51\n10 23\n23 42\n39 42\n10 39\n39 58\n''') == '''10: 1 42\n23: 1 39\n39: 1 23\n42: 1 10\n58: 2 10 42\n'''\nprint(solution('''5 100\n1 2\n1 3\n1 4\n2 3\n2 4\n'''))\nassert solution('''5 100\n1 2\n1 3\n1 4\n2 3\n2 4\n''') == '''1: 0\n2: 0\n3: 1 4\n4: 1 3\n'''\nprint(s"
    },
    {
        "number": 956,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"3 1\") == \"1: 0\"\nassert solution(\"3 2\") == \"2: 1\"\nassert solution(\"3 3\") == \"2: 0 1\"\nassert solution(\"3 4\") == \"1: 1\"\nassert solution(\"4 1\") == \"2: 0\"\n"
    },
    {
        "number": 956,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('5 51') == '10: 1 42\\n23: 1 39\\n39: 1 23\\n42: 1 10\\n58: 2 10 42'\nassert solution('5 100') == '1: 0\\n2: 0\\n3: 1 4\\n4: 1 3\\n5: 0'"
    },
    {
        "number": 956,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1 1\\n1 2\\n1 3\\n2 3\\n2 4\\n3 4\\n3 5') == '1: 1 2 3 4\\n2: 1 2 3\\n3: 1 3 4\\n4: 1 2 3\\n5: 2 3'\nassert solution('2 3\\n3 4\\n4 5\\n5 6') == '1: 2 3 4 5\\n2: 3 4 5\\n3: 4 5 6'\nassert solution('3 5\\n3 4\\n4 5') == '1: 3 4 5\\n2: 3 4\\n"
    },
    {
        "number": 956,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''5 51\n10 23\n23 42\n39 42\n10 39\n39 58''') == '10: 1 42\\n23: 1 39\\n39: 1 23\\n42: 1 10\\n58: 2 10 42\\n', '\u041a\u043e\u0434\u0438\u0440\u043e\u0432\u043a\u0430: utf-8'\nassert solution('''5 100\n1 2\n1 3\n1 4\n2 3\n2 4''') == '1: 0\\n2: 0\\n3: 1 4\\n4: 1 3\\n', '\u041a\u043e\u0434\u0438\u0440\u043e\u0432\u043a\u0430: ut"
    },
    {
        "number": 956,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n\nwith open('data/test_1.txt', 'r') as file:\n    data = [line.strip() for line in file]\n    expected = [\n        '10: 1 30',\n        '11: 1 31',\n        '13: 2 31',\n        '12: 1 30',\n        '14: 1 32',\n        '15: 2 33',\n        '16: 3 32',\n        '17: 1 30',\n        '18: 1 33',\n        '19: 1 33',\n    ]\n\n    assert expected == data"
    },
    {
        "number": 956,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''5 51\n10 23\n23 42\n39 42\n10 39\n39 58''') == \"\"\"10: 1 42\n23: 1 39\n39: 1 23\n42: 1 10\n58: 2 10 42\n\"\"\"\nassert solution('''5 100\n1 2\n1 3\n1 4\n2 3\n2 4''') == \"\"\"1: 0\n2: 0\n3: 1 4\n4: 1 3\n\"\"\"\nassert solution('''5 51\n10 23\n23 42\n39 42\n10 39\n39 58''') == \"\"\"10: 1 42\n23: 1 39\n39:"
    },
    {
        "number": 956,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''5 51\n10 23\n23 42\n39 42\n10 39\n39 58''') == '''10: 1 42\n23: 1 39\n39: 1 23\n42: 1 10\n58: 2 10 42'''\n\nassert solution('''5 100\n1 2\n1 3\n1 4\n2 3\n2 4''') == '''1: 0\n2: 0\n3: 1 4\n4: 1 3\n5: 2 10 42\n6: 3 10 42 43\n7: 4 10 42 43 44\n8: 5 10 42 43 44 45\n9: 6 10 42 43 44"
    },
    {
        "number": 956,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1\\n5\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n') == '10: 1 42\\n23: 1 39\\n39: 1 23\\n42: 1 10\\n58: 2 10 42'\nassert solution('5 100\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n') == '1: 0\\n2: 0\\n3: 1 4\\n4: 1 3\\n5: 1 2 3 4'\nassert solution('5 100\\n1 2\\n1 3\\n"
    },
    {
        "number": 957,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('abcheaibcdi') == 'YES'\nassert solution('hiedi') == 'NO'\nassert solution('hieidi') == 'YES'\nassert solution('hiedhcdi') == 'YES'\nassert solution('hiehcdi') == 'YES'\n"
    },
    {
        "number": 957,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"abcheaibcdi\") == \"YES\"\nassert solution(\"hiedi\") == \"NO\"\n\"\"\"\n\ns = stdin.strip()"
    },
    {
        "number": 957,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"abcheaibcdi\") == \"YES\"\nassert solution(\"hiedi\") == \"NO\"\n"
    },
    {
        "number": 957,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"abcheaibcdi\") == \"YES\"\nassert solution(\"hiedi\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 957,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('abcheaibcdi') == 'YES'\nassert solution('hiedi') == 'NO'\n\n\"\"\""
    },
    {
        "number": 957,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdin\n\"\"\"\n"
    },
    {
        "number": 957,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('abcde') == 'YES'\nassert solution('abcd') == 'NO'\nassert solution('bcde') == 'YES'\nassert solution('abcd') == 'NO'\nassert solution('abcd') == 'NO'\n"
    },
    {
        "number": 957,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('abcheaibcdi') == 'YES'\nassert solution('hiedi') == 'NO'\nassert solution('abcdi') == 'YES'\n\n\n\"\"\"\n"
    },
    {
        "number": 957,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('abcheaibcdi') == 'YES'\nassert solution('hiedi') == 'NO'\nassert solution('heidi') == 'YES'\nassert solution('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab') == 'YES'\nassert solution('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab') == 'YES'\n"
    },
    {
        "number": 957,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('') == 'YES'\nassert solution('a') == 'NO'\nassert solution('ab') == 'NO'\nassert solution('abheaibcdi') == 'YES'\nassert solution('hiedi') == 'NO'\n"
    },
    {
        "number": 958,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''4 26\nbear\n''') == 'roar'\nassert solution('''2 7\naf\n''') == 'db'\nassert solution('''3 1000\nhey\n''') == '-1'\nassert solution('''2 3\nhey\n''') == 'hey'\nassert solution('''1 4\nl2r\n''') == 'l2r'\n"
    },
    {
        "number": 958,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''4 26\nbear''') == 'roar'\nassert solution('''2 7\naf''') == 'db'\nassert solution('''3 1000\nhey''') == '-1'\n\nassert solution('''3 1\nabc''') == 'abc'\nassert solution('''2 1\nab''') == '-1'\n"
    },
    {
        "number": 958,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('') == '-1'\nassert solution('a') == '-1'\nassert solution('a' * 1000) == '-1'\nassert solution('abcd') == '-1'\nassert solution('abcd' * 1000) == '-1'\n"
    },
    {
        "number": 958,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdin\n\n'''\n\n\nfrom collections import Counter"
    },
    {
        "number": 958,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('bear') == 'roar'\nassert solution('hey') == 'db'\nassert solution('af') == 'db'\nassert solution('heyaf') == 'db'\nassert solution('a') == 'db'\n"
    },
    {
        "number": 958,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"1 2\", \"ab\") == \"a\"\nassert solution(\"2 1\", \"bc\") == \"b\"\nassert solution(\"2 1\", \"d\") == \"b\"\nassert solution(\"2 1\", \"d\") == \"b\"\nassert solution(\"1 2\", \"e\") == \"a\"\n"
    },
    {
        "number": 958,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('4 26\\nbear\\n') == 'roar'\nassert solution('2 7\\naf\\n') == 'db'\nassert solution('3 1000\\nhey\\n') == '-1'\nassert solution('2 3\\nabc\\n') == 'ab'\nassert solution('2 3\\nab\\n') == 'ab'\n"
    },
    {
        "number": 958,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('0') == '0'\nassert solution('4 26') == 'roar'\nassert solution('2 7') == 'db'\nassert solution('3 1000') == '-1'\nassert solution('4 26') == 'roar'\n"
    },
    {
        "number": 958,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('2 26\\nbear') == 'roar'\nassert solution('2 7\\naf') == 'db'\nassert solution('3 1000\\nhey') == '-1'\nassert solution('3 1\\nho') == '-1'\nassert solution('5 6\\ncat') == 'cat'\n"
    },
    {
        "number": 958,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('4 26\\nbear\\n') == 'roar'\nassert solution('2 7\\naf\\n') == 'db'\nassert solution('3 1000\\nhey\\n') == '-1'\nassert solution('3 1000\\naf\\n') == '-1'\nassert solution('2 7\\naf\\n') == 'db'\n"
    },
    {
        "number": 959,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"3 1 1000\") == \"2\"\nassert solution(\"4 4 100500\") == \"1\"\nassert solution(\"3 2 1\") == \"0\"\nassert solution(\"3 1 1\") == \"0\"\nassert solution(\"3 1 100000\") == \"1\"\n"
    },
    {
        "number": 959,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('3 1 1000') == '2'\nassert solution('4 4 100500') == '1'\nassert solution('3 4 6') == '1'\nassert solution('3 5 6') == '0'\nassert solution('4 4 1000') == '0'\n"
    },
    {
        "number": 959,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''3 1 1000\n011\n\n''') == '2'\nassert solution('''4 4 100500\n0110\n1010\n0101\n1001\n\n''') == '1'\n"
    },
    {
        "number": 959,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('2 3 1') == '1'\nassert solution('3 3 1') == '0'\nassert solution('2 3 1000') == '1'\nassert solution('4 4 100500') == '1'\nassert solution('3 2 1') == '0'\n"
    },
    {
        "number": 959,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('3 1 1000') == '2'\nassert solution('4 4 100500') == '1'\nassert solution('3 5 7 2') == '2'\nassert solution('2 3 5 2') == '2'\nassert solution('5 5 5') == '3'\n"
    },
    {
        "number": 959,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 959,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('3 1 1000\\n011\\n') == '2'\nassert solution('4 4 100500\\n0110\\n1010\\n0101\\n1001\\n') == '1'\nassert solution('1 1 1\\n1\\n') == '1'\nassert solution('2 2 2\\n0\\n0\\n0\\n0\\n') == '1'\nassert solution('3 3 4\\n10\\n11\\n00\\n00\\n00\\n00\\n00\\n') == '0'\n"
    },
    {
        "number": 959,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('3 1 1000') == '2'\nassert solution('4 4 100500') == '1'"
    },
    {
        "number": 959,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('3 1 1000') == '2'\nassert solution('4 4 100500') == '1'\nassert solution('4 4 100') == '0'\nassert solution('3 4 8') == '0'\nassert solution('2 3 4') == '0'\n"
    },
    {
        "number": 959,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 960,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('6 3\\n') == '11'\nassert solution('1 2\\n') == '3'\nassert solution('4 6\\n') == '10'\nassert solution('7 6\\n') == '19'\nassert solution('10 10\\n') == '23'\n"
    },
    {
        "number": 960,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''1 2''') == '3'\nassert solution('''2 3''') == '3'\nassert solution('''4 6''') == '10'\nassert solution('''6 3''') == '11'\nassert solution('''3 1''') == '1'\n"
    },
    {
        "number": 960,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('6 3') == '11'\nassert solution('1 2') == '3'\nassert solution('4 6') == '10'\n"
    },
    {
        "number": 960,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('6 3') == '11'\nassert solution('1 2') == '3'\nassert solution('4 6') == '10'\nassert solution('25 20') == '19'\nassert solution('100 100') == '99'\n"
    },
    {
        "number": 960,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == \"11\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"19\"\n\"\"\"\n"
    },
    {
        "number": 960,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('3 6') == '11'\nassert solution('1 2') == '3'\nassert solution('4 6') == '10'\nassert solution('6 2') == '10'\nassert solution('6 6') == '11'\n"
    },
    {
        "number": 960,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(input()) == '10'\nassert solution(input()) == '11'\nassert solution(input()) == '13'\nassert solution(input()) == '14'\nassert solution(input()) == '15'\n"
    },
    {
        "number": 960,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('6 3') == '11'\nassert solution('1 2') == '3'\nassert solution('4 6') == '10'\n\n\n-----\n\"\"\"\n"
    },
    {
        "number": 960,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == '11'\n\nassert solution(input()) == '11'\n\"\"\"\n"
    },
    {
        "number": 960,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''6 3''') == '11'\nassert solution('''1 2''') == '3'\nassert solution('''4 6''') == '10'\nassert solution('''10 50''') == '30'\nassert solution('''99 0''') == '0'\n\n\n\n\"\"\""
    },
    {
        "number": 961,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\n    '6\\n'\n    '4 4 2 5 2 3\\n'\n) == '14'\nassert solution(\n    '9\\n'\n    '5 1 3 1 5 2 4 2 5\\n'\n) == '9'\n"
    },
    {
        "number": 961,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''\n6\n4 4 2 5 2 3\n''') == '14'\n\nassert solution('''\n9\n5 1 3 1 5 2 4 2 5\n''') == '9'\n\nassert solution('''\n2\n4 4\n2 2\n''') == '6'\n\nassert solution('''\n4\n1 2 3 4\n4 4 4 4\n''') == '24'\n\nassert solution('''\n2\n1 1\n1 1\n''') == '0'"
    },
    {
        "number": 961,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdin\n\n\"\"\"\n"
    },
    {
        "number": 961,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\n'''6\n4 4 2 5 2 3\n''') == '14'\nassert solution(\n'''9\n5 1 3 1 5 2 4 2 5\n''') == '9'\nassert solution(\n'''2\n1 3\n''') == '1'\nassert solution(\n'''1\n3\n''') == '3'\nassert solution(\n'''1\n2\n''') == '2'\n"
    },
    {
        "number": 961,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('4\\n4 4 2 5 2 3\\n') == '14'\nassert solution('9\\n5 1 3 1 5 2 4 2 5\\n') == '9'\nassert solution('4\\n5 1 3 1 5 2 4 2 5\\n') == '9'\nassert solution('4\\n5 1 3 1 5 2 4 2 5\\n') == '9'\nassert solution('4\\n4 4 2 5 2 3\\n') == '14'\n"
    },
    {
        "number": 961,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1\\n0') == '1'\nassert solution('2\\n1 1') == '1'\nassert solution('3\\n0 0') == '0'\nassert solution('4\\n0 0 0 0') == '0'\nassert solution('5\\n0 0 0 0 0') == '0'\n"
    },
    {
        "number": 961,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('5\\n5 1 3 1 5 2 4 2 5') == '14'\nassert solution('5\\n5 1 3 1 5 2 4 2') == '9'\n"
    },
    {
        "number": 961,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('4\\n4\\n2\\n5\\n2\\n3') == '14'\nassert solution('9\\n5\\n1\\n3\\n1\\n5\\n2\\n4\\n2\\n5') == '9'\nassert solution('6\\n4\\n2\\n5\\n2\\3') == '14'\nassert solution('9\\n5\\n1\\n3\\n1\\n5\\n2\\4\\n2\\5') == '9'\n\"\"\"\n"
    },
    {
        "number": 961,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('4\\n4 4 2 5 2 3') == '14'\nassert solution('9\\n5 1 3 1 5 2 4 2 5') == '9'\nprint('All tests past')"
    },
    {
        "number": 961,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 1 1\\n\") == \"2\"\nassert solution(\"6\\n4 4 2 5 2 3\\n\") == \"14\"\nassert solution(\"9\\n5 1 3 1 5 2 4 2 5\\n\") == \"9\"\nassert solution(\"2\\n3\\n\") == \"3\"\nassert solution(\"2\\n3\\n3\\n\") == \"4\"\n"
    },
    {
        "number": 962,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''4 5\n1 2\n2 3\n2 4\n4 1\n4 3\n''') == '3\\n1\\n2\\n4\\n'\n\nassert solution('''1 2\n2 3\n2 4\n4 1\n4 3\n''') == '-1\\n'\n\nassert solution('''1 1\n2 2\n1 2\n''') == '1\\n1\\n'\n\nassert solution('''4 5\n1 2\n2 3\n2 4\n4 1\n1 3\n4 3\n1 4\n''') == '3\\n1\\n4\\n'\n\nassert solution('''5 4\n1 2\n1 3\n2 3\n3 4\n1 4\n4 2\n2 3\n3 1\n''') == '4\\n1\\n'"
    },
    {
        "number": 962,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('4 5\\n1 2\\n2 3\\n2 4\\n4 1\\n4 3\\n') == '3\\n1\\n2\\n4\\n'\n"
    },
    {
        "number": 962,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1 2\\n2 3\\n2 4') == '3\\n1\\n2'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100\\n101\\n102\\n103\\n104\\n105\\n106\\n107\\n108\\n109\\n110\\n111\\n112\\n113\\n114\\n115\\n116\\n117\\n118\\n119\\n120\\n121\\n122\\n123\\n124\\n125\\n126\\n127\\n128\\n129\\n130\\n131\\n132\\n133\\n134\\n135\\n136\\n137\\n138\\n139\\n140\\n141\\n142\\n143\\n144\\n145\\n146\\n147\\n148\\n149\\n150\\n151\\n152\\n153\\n154\\n155\\n156\\n157\\n158\\n159\\n160\\n161\\n162\\n163\\n164\\n165\\n166\\n167\\n168\\n169\\n170\\n171\\n172\\n173\\n174\\n175\\n176\\n177\\n178\\n179\\n180\\n181\\n182\\n183\\n184\\n185\\n186\\n187\\n188\\n189\\n190\\n191\\n192\\n193\\n194\\n195\\n196\\n197\\n198\\n199\\n200\\n201\\n202\\n203\\n204\\n205\\n206\\n207\\n208\\n209\\n210\\n211\\n212\\n213\\n214\\n215\\n216\\n217\\n218\\n219\\n220\\n221\\n222\\n223\\n224\\n225\\n226\\n227\\n228\\n229\\n230\\n231\\n232\\n233\\n234\\n235\\n236\\n237\\n238\\n239\\n240\\n241\\n242\\n243\\n244\\n245\\n246\\n247\\n248\\n249\\n250\\n251\\n252\\n253\\n254\\n255\\n256\\n257\\n258\\n259\\n260\\n261\\n262\\n263\\n264\\n265\\n266\\n267\\n268\\n269\\n270\\n271\\n272\\n273\\n274\\n275\\n276\\n277\\n278\\n279\\n280\\n281\\n282\\n283\\n284\\n285\\n286\\n287\\n288\\n289\\n290\\n291\\n292\\n293\\n294\\n295\\n296\\n297\\n298\\n299\\n300\\n301\\n302\\n303\\n304\\n305\\n306\\n307\\n308\\n309\\n310\\n311\\n312\\n313\\n314\\n315\\n316\\n317\\n318\\n319\\n320\\n321\\n322\\n323\\n324\\n325\\n326\\n327\\n328\\n329\\n330\\n331\\n332\\n333\\n334\\n335\\n336\\n337\\n338\\n339\\n340\\n341\\n342\\n343\\n344\\n345\\n346\\n347\\n348\\n349\\n350\\n351\\n352\\n353\\n354\\n355\\n356\\n357\\n358\\n359\\n360\\n361\\n362\\n363\\n364\\n365\\n366\\n367\\n368\\n369\\n370\\n371\\n372\\n373\\n374\\n375\\n376\\n377\\n378\\n379\\n380\\n381\\n382\\n383\\n384\\n385\\n386\\n387\\n388\\n389\\n390\\n391\\n392\\n393\\n394\\n395\\n396\\n397\\n398\\n399\\n400\\n401\\n402\\n403\\n404\\n405\\n406\\n407\\n408\\n409\\n410\\n411\\n412\\n413\\n414\\n415\\n416\\n417\\n418\\n419\\n420\\n421\\n422\\n423\\n424\\n425\\n426\\n427\\n428\\n429\\n430\\n431\\n432\\n433\\n434\\n435\\n436\\n437\\n438\\n439\\n440\\n441\\n442\\n443\\n444\\n445\\n446\\n447\\n448\\n449\\n450\\n451\\n452\\n453\\n454\\n455\\n456\\n457\\n458\\n459\\n460\\n461\\n462\\n463\\n464\\n465\\n466\\n467\\n468\\n469\\n470\\n471\\n472\\n473\\n474\\n475"
    },
    {
        "number": 962,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1 2\\n2 3\\n2 4\\n4 1\\n4 3') == '3\\n1\\n2\\n4'\nassert solution('2 3\\n2 4\\n4 1') == '3\\n1\\n2\\n4'\nassert solution('2 3\\n3 1') == '3\\n1\\n2\\n3'\nassert solution('2 3\\n3 1\\n2 4') == '3\\n1\\n2\\n3'\nassert solution('1 3\\n2 3') == '3\\n1\\n2'\n"
    },
    {
        "number": 962,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"4 5\\n1 2\\n2 3\\n2 4\\n4 1\\n4 3\") == \"3\\n1\\n2\\n4\"\nassert solution(\"4 5\\n1 2\\n2 3\\n2 4\\n4 1\\n4 3\") == \"-1\"\nassert solution(\"2 4\\n1 2\\n2 4\") == \"-1\"\nassert solution(\"3 4\\n1 2\\n1 3\\n2 3\") == \"-1\"\nassert solution(\"3 4\\n1 2\\n1 3\\n2 3\") == \"-1\"\n"
    },
    {
        "number": 962,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('4 5\\n1 2\\n2 3\\n2 4\\n4 1\\n4 3\\n') == '3\\n1\\n2\\n4\\n'\nassert solution('10 8\\n2 9\\n3 9\\n3 4\\n4 9\\n5 6\\n6 9\\n6 8\\n7 4\\n8 7\\n9 7\\n8 1\\n9 7\\n9 8\\n') == '2\\n1\\n5\\n9\\n8\\n'\nassert solution('10 8\\n1 1\\n2 1\\n3 1\\n3 4\\n4 1\\n5 6\\n6 1\\n6 8\\n7 4\\n8 7\\n9 7\\n8 1\\n9 7\\n9 8\\n') == '4\\n1\\n8\\n9\\n'\nassert solution('10 8\\n1 1\\n2 1\\n3 1\\n3 4\\n4 1\\n5 6\\n6 1\\n6 8\\n7 4\\n8 7\\n9 7\\n8 1\\n9 7\\n9 8\\n') == '1\\n1\\n2\\n9\\n8\\n'\nassert solution('10 8\\n1 1\\n2 1\\n3 1\\n3 4\\n4 1\\n5 6\\n6 1\\n6 8\\n7 4\\n8 7\\n9 7\\n8 1\\n9 7\\n9 8\\n') == '5\\n1\\n9\\n9\\n'\n"
    },
    {
        "number": 962,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('4 5\\n1 2\\n2 3\\n2 4\\n4 1\\n4 3') == '3\\n1\\n2\\n4'\nassert solution('2 3\\n1 2') == '-1'\nassert solution('1 2\\n1 2') == '1'\nassert solution('1 2\\n1 2\\n1 2') == '1'\nassert solution('1 2\\n1 2\\n1 2') == '1'\n"
    },
    {
        "number": 962,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''4 5\n1 2\n2 3\n2 4\n4 1\n4 3''') == '3'\nassert solution('''6 7\n1 2\n1 3\n2 3\n3 4\n4 5\n5 6\n6 7''') == '3'\nassert solution('''4 5\n1 2\n2 3\n2 4\n4 1\n4 3''') == '-1'\nassert solution('''3 2\n1 2\n2 1''') == '1'\nassert solution('''2 1\n1 2''') == '-1'\n"
    },
    {
        "number": 962,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1 2\\n2 3\\n2 4\\n4 1\\n4 3') == '3\\n1\\n2\\n4'\nassert solution('2 3\\n2 4\\n4 1') == '3\\n1\\n2\\n4'\nassert solution('2 2\\n1 2\\n1 2\\n1 2') == '-1'\nassert solution('1 2\\n2 3\\n2 4\\n4 1\\n4 3') == '3\\n1\\n2\\n4'\nassert solution('1 2\\n1 2\\n1 2\\n1 2') == '-1'\n"
    },
    {
        "number": 962,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('4 5') == '3\\n1\\n2\\n4'\nassert solution('5 4') == '-1'\nassert solution('5 4\\n1 2\\n2 3\\n2 4\\n4 1\\n4 3') == '3\\n1\\n2\\n4'\nassert solution('1 2\\n2 3') == '-1'\nassert solution('1 2\\n1 3\\n2 3') == '3\\n1\\n2'\n"
    },
    {
        "number": 963,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1 2') == '4'\nassert solution('5 2') == '4'\nassert solution('5 1') == '1'\nassert solution('10 1') == '1'\nassert solution('1000 1') == '1'\n"
    },
    {
        "number": 963,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"1 2\") == \"4\"\nassert solution(\"4 5\") == \"4\"\nassert solution(\"3 4\") == \"4\"\nassert solution(\"3 4 1\") == \"4\"\nassert solution(\"5 2\") == \"4\"\n"
    },
    {
        "number": 963,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 963,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('5 2') == '4'\n'''\n"
    },
    {
        "number": 963,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('5 2') == '4'\nassert solution('5 2') == '4'\nassert solution('5 4') == '2'\nassert solution('5 4') == '2'\nassert solution('10 10') == '857263612'\n"
    },
    {
        "number": 963,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"2 1\") == \"4\"\nassert solution(\"5 3\") == \"3\"\nassert solution(\"5 3\") == \"3\"\nassert solution(\"5 4\") == \"4\"\nassert solution(\"5 4\") == \"4\"\n"
    },
    {
        "number": 963,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"\\n\\n\") == \"\"\nassert solution(\"\\n\\n\\n\") == \"\"\nassert solution(\"\\n\\n\\n\\n\") == \"\"\nassert solution(\"1 1\\n3 4\\n\") == \"4\"\n"
    },
    {
        "number": 963,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 963,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('5 2') == '4'\nassert solution('5 3') == '2'\nassert solution('2 5') == '0'\nassert solution('6 5') == '0'\nassert solution('20 5') == '0'\n"
    },
    {
        "number": 963,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"4 3\\n1 1\\n2 2\\n1 1\\n2 1\\n1 1\\n1 1\\n1 1\\n2 1\") == \"4\"\nassert solution(\"3 2\\n1 1\\n1 1\\n1 1\\n1 1\") == \"1\"\nassert solution(\"3 2\\n1 1\\n1 1\\n2 1\\n1 1\") == \"1\"\nassert solution(\"5 10\\n5 8\\n1 4\\n3 9\\n2 5\\n4 5\\n3 9\\n2 5\\n4 9\\n4 6\") == \"20\"\nassert solution(\"2 3\\n1 1\\n2 1\") == \"0\"\n"
    },
    {
        "number": 964,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\n    \"5 1 2 5 5 2\"\n) == \"5\"\nassert solution(\n    \"4 4 2 6 4 2\"\n) == \"6\"\n"
    },
    {
        "number": 964,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('5 1 2 5 5 2') == '5'\nassert solution('4 4 2 6 4 2') == '6'"
    },
    {
        "number": 964,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdin\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 964,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"5 1 2 5 5 2\") == \"5\"\nassert solution(\"4 4 2 6 4 2\") == \"6\"\nassert solution(\"3 1 2 3 1 2\") == \"-1\"\n"
    },
    {
        "number": 964,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(input) == \"\"\nassert solution(input2) == \"6\"\nassert solution(input3) == \"0\"\nassert solution(input4) == \"7\"\nassert solution(input5) == \"1\"\n"
    },
    {
        "number": 964,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"5 1 2 5 5 2\") == \"5\"\nassert solution(\"4 4 2 6 4 2\") == \"6\"\nassert solution(\"1 1 1 1 1 1\") == \"-1\"\nassert solution(\"2 1 1 1 1 1\") == \"-1\"\nassert solution(\"2 2 1 1 1 1\") == \"-1\"\n"
    },
    {
        "number": 964,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"5 1 2 5 5 2\") == \"5\"\nassert solution(\"4 4 2 6 4 2\") == \"6\"\nassert solution(\"5 5 3 2 1\") == \"-1\"\nassert solution(\"4 4 1 1 1\") == \"-1\"\nassert solution(\"4 2 1 1 1\") == \"-1\"\n"
    },
    {
        "number": 964,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"5 1 2 5 5 2\") == \"5\"\nassert solution(\"4 4 2 6 4 2\") == \"6\"\nassert solution(\"3 6 7 4 7 3\") == \"-1\"\n"
    },
    {
        "number": 964,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 964,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''5 1 2 5 5 2''') == '5'\nassert solution('''4 4 2 6 4 2''') == '6'\nassert solution('''1 1 0 1 1 0''') == '2'\nassert solution('''1 2 2 1 2 1''') == '1'\nassert solution('''1 1 0 1 1 0''') == '2'\n"
    },
    {
        "number": 965,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('6\\nAFFAAA') == '4'\nassert solution('3\\nAFI') == '1'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 965,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('6\\nAFFAAA') == '4'\nassert solution('3\\nAFI') == '1'\nassert solution('5\\nAFFAAA') == '2'\nassert solution('3\\nAF') == '1'\nassert solution('7\\nAFFAFAI') == '0'\n"
    },
    {
        "number": 965,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"AFFAAA\") == \"4\"\nassert solution(\"AFI\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 965,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('6\\nAFFAAA') == '4'\nassert solution('3\\nAFI') == '1'\n\"\"\"\n"
    },
    {
        "number": 965,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('6\\nAFFAAA') == '4'\nassert solution('3\\nAFI') == '1'\nassert solution('4\\nAFFFAA') == '1'\nassert solution('2\\nAFFFAA') == '2'\nassert solution('2\\nAFI') == '0'\n"
    },
    {
        "number": 965,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdin\n\"\"\""
    },
    {
        "number": 965,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(SAMPLE_INPUT) == SAMPLE_OUTPUT\n\"\"\"\nimport sys\nfrom typing import Set\n\nsys.setrecursionlimit(1000)\n\n\nclass Player:\n    def __init__(self, status: str):\n        self.status = status\n"
    },
    {
        "number": 965,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('4\\nAFFAAA') == '1'\nassert solution('3\\nAFI') == '1'\nassert solution('3\\nAF') == '0'\nassert solution('3\\nAF') == '0'\nassert solution('3\\nAFFAA') == '4'\n"
    },
    {
        "number": 965,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('4\\nAFFAAA\\n') == '4'\nassert solution('3\\nAFI\\n') == '1'\n\n\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 965,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n\nfrom sys import stdin,stdout"
    },
    {
        "number": 966,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(1987) == \"2013\"\nassert solution(2013) == \"2014\"\nassert solution(2014) == \"2015\"\nassert solution(1985) == \"2006\"\nprint('Testcases passed')\n"
    },
    {
        "number": 966,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('1987') == '2013'\nassert solution('1380') == '1400'\nassert solution('2014') == '1401'\nassert solution('999') == '1000'\nassert solution('1000') == '1001'\n"
    },
    {
        "number": 966,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('87412') == '1219'\nassert solution('1989') == '2013'\nassert solution('198909') == '201301'\nassert solution('890909') == '910999'\nassert solution('89090909') == '910199'\n"
    },
    {
        "number": 966,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(1987) == '2013'\nassert solution(2013) == '2014'\nassert solution(1998) == '2013'\nassert solution(1986) == '2013'\n"
    },
    {
        "number": 966,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(1987) == '2013'\nassert solution(2013) == '2014'\nassert solution(1987) == '2013'\nassert solution(1986) == '1997'\nassert solution(1985) == '1994'\n"
    },
    {
        "number": 966,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(1987) == \"2013\"\nassert solution(1988) == \"2013\"\nassert solution(1989) == \"2014\"\nassert solution(1990) == \"2014\"\nassert solution(1991) == \"2014\"\n"
    },
    {
        "number": 966,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(1987) == 2013\nassert solution(2013) == 2014\nassert solution(12345) == 12345\nassert solution(2016) == 2016\nassert solution(1988) == 2018\n"
    },
    {
        "number": 966,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(input()) == ''\n"
    },
    {
        "number": 966,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('') == 'NO SOLUTION'\nassert solution('999') == 'NO SOLUTION'\nassert solution('891') == 'NO SOLUTION'\nassert solution('907') == 'NO SOLUTION'\nassert solution('999') == 'NO SOLUTION'\n"
    },
    {
        "number": 966,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(1987) == 2013\nassert solution(2013) == 2014\nassert solution(1440) == 1441\nassert solution(1985) == 1987\nassert solution(2010) == 2011\n"
    },
    {
        "number": 967,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('5\\n5 2 1 3 4') == '2'\nassert solution('3\\n1 2 3') == '0'\nassert solution('4\\n4 3 2 1') == '3'\nassert solution('\\n') == ''\nassert solution('3\\n1 2 3') == ''\n"
    },
    {
        "number": 967,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('5\\n5 2 1 3 4') == '2'\nassert solution('3\\n1 2 3') == '0'\nassert solution('4\\n4 3 2 1') == '3'"
    },
    {
        "number": 967,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''5\n5 2 1 3 4\n''') == '2'\nassert solution('''3\n1 2 3\n''') == '0'\nassert solution('''4\n4 3 2 1\n''') == '3'\nassert solution('''5\n5 2 1 3 4\n''') == '2'"
    },
    {
        "number": 967,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''5\n5 2 1 3 4''') == '2'\nassert solution('''3\n1 2 3''') == '0'\nassert solution('''4\n4 3 2 1''') == '3'\n"
    },
    {
        "number": 967,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('5\\n5 2 1 3 4') == '2'\nassert solution('3\\n1 2 3') == '0'\nassert solution('4\\n4 3 2 1') == '3'\n"
    },
    {
        "number": 967,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''5\n5 2 1 3 4''') == '2'\nassert solution('''3\n1 2 3''') == '0'\nassert solution('''4\n4 3 2 1''') == '3'\n'''"
    },
    {
        "number": 967,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''5\n5 2 1 3 4''') == '2'\nassert solution('''3\n1 2 3''') == '0'\nassert solution('''4\n4 3 2 1''') == '3'\nassert solution('''2\n1 2''') == '0'\nassert solution('''1\n2''') == '0'\n"
    },
    {
        "number": 967,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 967,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('5\\n5 2 1 3 4\\n') == '2'\nassert solution('3\\n1 2 3\\n') == '0'\nassert solution('4\\n4 3 2 1\\n') == '3'\nassert solution('2\\n2 1\\n') == '0'\nassert solution('1\\n1\\n') == '0'\n"
    },
    {
        "number": 967,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''5\n5 2 1 3 4\n''') == '2'\nassert solution('''3\n1 2 3\n''') == '0'\nassert solution('''4\n4 3 2 1\n''') == '3'"
    },
    {
        "number": 968,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''3\ngennady korotkevich\npetr mitrichev\ngaoyuan chen''') == 'NO'\n\nassert solution('''3\ngennady korotkevich\npetr mitrichev\ngaoyuan chen\n1 2 3''') == 'YES'\n\nassert solution('''3\ngennady korotkevich\npetr mitrichev\ngaoyuan chen\n2 1 3''') == 'YES'\n\nassert solution('''2\ngalileo galilei\nnicolaus copernicus\n2 1''') == 'NO'\n\nassert solution('''2\ngalileo galilei\nnicolaus copernicus\n2 1 2''') == 'YES'"
    },
    {
        "number": 968,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''3\ngennady korotkevich\npetr mitrichev\ngaoyuan chen\n1 2 3\n1 1 2\n''') == 'YES'\nassert solution('''3\ngalileo galilei\nnicolaus copernicus\n2 1\n2 1\n''') == 'NO'\nassert solution('''10\nrean schwarzer\nfei claussell\nalisa reinford\neliot craig\nlaura arseid\njusis albarea\nmachias regnitz\nsara valestin\nemma millstein\ngaius worzel\n1 2 3 4 5 6 7 8 9 10\n''') == 'YES'\nassert solution('''10\nrean schwarzer\nfei claussell\nalisa reinford\neliot craig\nlaura arseid\njusis albarea\nmachias regnitz\nsara valestin\nemma millstein\ngaius worzel\n2 4 9 6 5 7 1 3 8 10\n''') == 'NO'\nassert solution('''1\ngennady korotkevich\npetr mitrichev\ngaoyuan chen\n3 1 2\n1 1 2\n''') == 'NO'\n"
    },
    {
        "number": 968,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == \"YES\"\n\"\"\""
    },
    {
        "number": 968,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('gennady korotkevich\\npetr mitrichev\\ngaoyuan chen\\n1 2 3') == 'NO'\nassert solution('gennady korotkevich\\npetr mitrichev\\ngaoyuan chen\\n1 2 3\\n1 2 3') == 'YES'\nassert solution('galileo galilei\\nicolaus copernicus\\n2 1') == 'YES'\nassert solution('galileo galilei\\nicolaus copernicus\\n2 1\\n2 1') == 'YES'\nassert solution('rean schwarzer\\nfei claussell\\nalisa reinford\\neliot craig\\nlaura arseid\\njusis albarea\\nmachias regnitz\\nsara valestin\\nemma millstein\\ngaius worzel\\n2 4 9 6 5 7 1 3 8 10') == 'NO'\n"
    },
    {
        "number": 968,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"\"\"gennady korotkevich\npetr mitrichev\ngaoyuan chen\n\"\"\") == \"YES\"\nassert solution(\"\"\"gennady korotkevich\npetr mitrichev\ngaoyuan chen\n\"\"\") == \"NO\"\nassert solution(\"\"\"gennady korotkevich\npetr mitrichev\ngaoyuan chen\n\"\"\") == \"NO\"\nassert solution(\"\"\"galileo galilei\nnicolaus copernicus\n2 1\n\"\"\") == \"NO\"\nassert solution(\"\"\"galileo galilei\nnicolaus copernicus\n2 1\n\"\"\") == \"NO\"\n"
    },
    {
        "number": 968,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"YES\"\nassert solution(\"3\\n1 2\\n3 1\") == \"YES\"\nassert solution(\"2\\ngalileo galilei\\nnicolaus copernicus\\n2 1\") == \"YES\"\nassert solution(\"2\\ngalileo galilei\\nnicolaus copernicus\\n2 1\") == \"NO\"\nassert solution(\"3\\ngennady korotkevich\\npetr mitrichev\\ngaoyuan chen\\n1 2 3\\n3 1\") == \"YES\"\n"
    },
    {
        "number": 968,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''3\ngennady korotkevich\npetr mitrichev\ngaoyuan chen\n1 2 3\n''') == 'YES'\n\nassert solution('''3\ngennady korotkevich\npetr mitrichev\ngaoyuan chen\n3 1 2\n''') == 'NO'\n\nassert solution('''2\ngalileo galilei\nnicolaus copernicus\n2 1\n''') == 'YES'\n\nassert solution('''10\nrean schwarzer\nfei claussell\nalisa reinford\neliot craig\nlaura arseid\njusis albarea\nmachias regnitz\nsara valestin\nemma millstein\ngaius worzel\n1 2 3 4 5 6 7 8 9 10\n''') == 'NO'\n\nassert solution('''10\nrean schwarzer\nfei claussell\nalisa reinford\neliot craig\nlaura arseid\njusis albarea\nmachias regnitz\nsara valestin\nemma millstein\ngaius worzel\n2 4 9 6 5 7 1 3 8 10\n''') == 'YES'"
    },
    {
        "number": 968,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('gennady korotkevich\\npetr mitrichev\\ngaoyuan chen\\n1 2 3') == 'NO'\nassert solution('gennady korotkevich\\npetr mitrichev\\ngaoyuan chen\\n3 1 2') == 'NO'\nassert solution('galileo galilei\\nicolaus copernicus\\n2 1') == 'NO'\nassert solution('rean schwarzer\\nfei claussell\\nalisa reinford\\neliot craig\\nlaura arseid\\njusis albarea\\nmachias regnitz\\nsara valestin\\nemma millstein\\ngaius worzel\\n1 2 3 4 5 6 7 8 9 10') == 'YES'\nassert solution('rean schwarzer\\nfei claussell\\nalisa reinford\\neliot craig\\nlaura arseid\\njusis albarea\\nmachias regnitz\\nsara valestin\\nemma millstein\\ngaius worzel\\n2 4 9 6 5 7 1 3 8 10') == 'YES'\n"
    },
    {
        "number": 968,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1 2 3') == 'NO'\nassert solution('gennady korotkevich') == 'NO'\nassert solution('gennady korotkevich 2 1') == 'YES'\nassert solution('gennady korotkevich 3 1 2') == 'YES'\nassert solution('galileo galilei') == 'NO'\n"
    },
    {
        "number": 968,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"gennady korotkevich\\npetr mitrichev\\ngaoyuan chen\") == \"NO\"\nassert solution(\"gennady korotkevich\\npetr mitrichev\\ngaoyuan chen\\n3 1 2\") == \"YES\"\nassert solution(\"gennady korotkevich\\ngennady korotkevich\\ngennady korotkevich\") == \"NO\"\nassert solution(\"gennady korotkevich\\ngennady korotkevich\\ngennady korotkevich\\n3 1 2\") == \"YES\"\nassert solution(\"gennady korotkevich\\ngennady korotkevich\\ngennady korotkevich\\n3 1\") == \"NO\"\n"
    },
    {
        "number": 969,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('abc') == '2'\nassert solution('cbaabc') == '3 1'\nassert solution('ami') == '-1'\nassert solution('no') == '-1'\nassert solution('bb') == '-1'\n"
    },
    {
        "number": 969,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdin\n'''\n"
    },
    {
        "number": 969,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 969,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('') == None\nassert solution('abc') == None\nassert solution('abcba') == None\nassert solution('abcbba') == None\nassert solution('abcabc') == None\n"
    },
    {
        "number": 969,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"abc\") == \"2\"\nassert solution(\"cbaabc\") == \"3 1\"\nassert solution(\"ami\") == \"-1\"\n"
    },
    {
        "number": 969,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('abc') == '2'\nassert solution('cbaabc') == '3 1'\nassert solution('ami') == '-1'\nassert solution('no') == '-1'\n\n\n\"\"\"\n"
    },
    {
        "number": 969,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"abc\") == \"2\"\nassert solution(\"cbaabc\") == \"3\"\nassert solution(\"ayrat\") == \"3\"\nassert solution(\"ami\") == \"-1\"\n\n\n\n\"\"\"\n"
    },
    {
        "number": 969,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"ayrat\") == \"1 1\"\nassert solution(\"cba\") == \"3 1\"\nassert solution(\"abc\") == \"2 1\"\nassert solution(\"no\") == \"-1\"\nassert solution(\"ami\") == \"-1\"\n"
    },
    {
        "number": 969,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"abc\") == \"2\"\nassert solution(\"cbaabc\") == \"3 1\"\nassert solution(\"aaabrytaaa\") == \"3 1\"\nassert solution(\"ayrat\") == \"3 1\"\nassert solution(\"\") == \"-1\"\n\n'''"
    },
    {
        "number": 969,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"abc\") == \"cba\"\nassert solution(\"cbaabc\") == \"cba\"\nassert solution(\"ami\") == \"-1\"\nassert solution(\"no\") == \"-1\"\nassert solution(\"aaabrytaaa\") == \"6 5\"\n"
    },
    {
        "number": 970,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == answer_2\n\n--- 2.1 seconds ---"
    },
    {
        "number": 970,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(input) == output\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 970,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\n\nfrom collections import defaultdict\nfrom typing import Dict, List\n\nColoredPieces = Dict[str, int]"
    },
    {
        "number": 970,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('6\\n1 2 6\\n') == '2'\nassert solution('10\\n1 2 3 4 5\\n') == '10'\nassert solution('2\\n1 1\\n') == '1'\nassert solution('3\\n1 1 1\\n') == '2'\nassert solution('2\\n1 1\\n') == '1'\n"
    },
    {
        "number": 970,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"6\") == 2\nassert solution(\"10\") == 10\nassert solution(\"1 2 3 4 5\") == 10\nassert solution(\"1 2 2 3 3\") == 7\nassert solution(\"1 2 2 3 3 4\") == 4\n"
    },
    {
        "number": 970,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('2') == '1'\nassert solution('8') == '4'\nassert solution('4') == '1'\nassert solution('8') == '4'\nassert solution('6') == '2'\n"
    },
    {
        "number": 970,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('6\\n1 2 6') == '2'\nassert solution('10\\n1 2 3 4 5') == '10'\nassert solution('8\\n1 2 3 4 5 6 7 8') == '4'\n\n\"\"\""
    },
    {
        "number": 970,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == expected\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 970,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('6\\n1 2 6\\n') == '2'\nassert solution('10\\n1 2 3 4 5\\n') == '10'\n"
    },
    {
        "number": 970,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"6\\n1 2 6\") == \"2\"\nassert solution(\"10\\n1 2 3 4 5\") == \"10\"\n\"\"\"\n"
    },
    {
        "number": 971,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''2 7 10''') == '1'\nassert solution('''1 5 10''') == '0'\nassert solution('''3 10 10''') == '1'\nassert solution('''5 7 7''') == '0'\n\n'''\nimport sys\nfrom collections import deque"
    },
    {
        "number": 971,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"3 7 10\") == \"1\"\nassert solution(\"1 5 10\") == \"0\"\nassert solution(\"3 10 10\") == \"1\"\nassert solution(\"1 1 1\") == \"0\"\n\n\n\"\"\"\n"
    },
    {
        "number": 971,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"1 3 5\") == \"1\"\nassert solution(\"2 5 10\") == \"0\"\nassert solution(\"1 1 1\") == \"0\"\nassert solution(\"3 10 10\") == \"1\"\nassert solution(\"1 5 10\") == \"1\"\n"
    },
    {
        "number": 971,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''2 7 10''') == '1'\nassert solution('''1 5 10''') == '0'\nassert solution('''3 10 10''') == '1'\nassert solution('''1 1 1''') == '0'\nassert solution('''1''') == '0'\n'''\n    n, b, d = [int(x) for x in stdin.split()]\n\n    waste = 0\n    max_size = 0\n\n    for i in range(n):\n        a = int(stdin.readline())\n        if a > d:\n            waste += 1\n        elif a > max_size:\n            max_size = a\n\n    return str(waste)"
    },
    {
        "number": 971,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"2 7 10\") == \"1\"\nassert solution(\"5 6\") == \"0\"\nassert solution(\"1 1 1\") == \"0\"\nassert solution(\"3 10 10\") == \"1\"\nassert solution(\"1 5 10\") == \"0\"\n"
    },
    {
        "number": 971,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1 1 1\\n1') == '0'\nassert solution('2 7 10\\n5 6') == '1'\nassert solution('3 10 10\\n5 7 7') == '1'\nassert solution('1 1 1\\n1') == '0'\nassert solution('1 1 1\\n1') == '0'\n"
    },
    {
        "number": 971,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"3 10 10\\n5 7 7\") == \"1\"\nassert solution(\"1 1 1\\n1\") == \"0\"\nassert solution(\"2 7 10\\n5 6\") == \"1\"\nassert solution(\"2 6 10\\n5 6\") == \"0\"\nassert solution(\"3 10 10\\n5 7 7\") == \"1\"\n"
    },
    {
        "number": 971,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1 1 1\") == 0\nassert solution(\"2 7 10\") == 1\nassert solution(\"3 10 10\") == 0\nassert solution(\"1 5 10\") == 1\n"
    },
    {
        "number": 971,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('2 7 10\\n5 6') == '1'\nassert solution('1 5 10\\n7') == '0'\nassert solution('3 10 10\\n5 7 7') == '1'\nassert solution('1 1 1\\n1') == '0'\n"
    },
    {
        "number": 971,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''2 7 10''') == '''1'''\nassert solution('''1 5 10''') == '''0'''\nassert solution('''3 10 10''') == '''1'''\nassert solution('''1 1 1''') == '''0'''\n\n\n\n\"\"\"\n"
    },
    {
        "number": 972,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution
    },
    {
        "number": 972,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 972,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''\\\n3 1\nBB\nBB\nW\n''') == \"YES\"\n\nassert solution('''\\\n2 4\nWBB\nBBW\n''') == \"NO\"\n\nassert solution('''\\\n1 1\nB\n''') == \"YES\"\n\nassert solution('''\\\n1 1\nW\n''') == \"YES\"\n\nassert solution('''\\\n4 1\n
    },
    {
        "number": 972,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == ''\n"
    },
    {
        "number": 972,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 972,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('WWBW') == 'NO'\nassert solution('BWWW') == 'YES'\nassert solution('WWWB') == 'YES'\n"
    },
    {
        "number": 972,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n3 4\nWWBW\nBWWW\nWWWB\n\"\"\".strip()) == \"NO\"\nassert solution(\"\"\"\n1 1\nB\nB\nB\n\"\"\".strip()) == \"YES\"\nprint(solution(\"\"\"\n1 1\nB\nB\nB\n\"\"\".strip()))\n"
    },
    {
        "number": 972,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(input()) == output"
    },
    {
        "number": 972,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''WWBW\nBWWW\nWWWB''') == 'NO'\nassert solution
    },
    {
        "number": 972,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"0 0\") == \"NO\"\nassert solution(\"1 1\") == \"YES\"\nassert solution(\"3 1\") == \"NO\"\nassert solution(\"1 2\") == \"YES\"\nassert solution(\"3 4\") == \"NO\"\n"
    },
    {
        "number": 973,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''6 6\n..S...\n..S.W.\n.S....\n..W...\n...W..\n......''') == 'Yes'\nassert solution('''1 2\nSW''') == 'No'\nassert solution('''5 5\n.S...\n...S.\nS....\n...S.\n.S...''') == 'Yes'\nassert solution('''5 5\n.S...\n...S.\nS....\n...S.\n.S...''') == 'Yes'\nassert solution('''5 5\n.S...\n...S.\nS....\n...S.\n.S...''') == 'Yes'\n"
    },
    {
        "number": 973,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('6 6\\n..S...\\n..S.W.\\n.S....\\n..W...\\n...W..\\n......') == 'Yes\\n..SD..\\n..SDW.\\n.SD...\\n.DW...\\nDD.W..\\n......'\nassert solution('1 2\\nSW') == 'No'\nassert solution('5 5\\n.S...\\n...S.\\nS....\\n...S.\\n.S...') == 'Yes\\n.S...\\n...S.\\nS.D..\\n...S.\\n.S...'\nassert solution('1 2\\n..S...\\n..S.W.\\n.S....\\n..W...\\n...W..\\n......') == 'No'\nassert solution('1 2\\n..S...\\n..S.W.\\n.S....\\n..W...\\n...W..\\n......') == 'No'\n"
    },
    {
        "number": 973,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\n'''\n"
    },
    {
        "number": 973,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''6 6\n..S...\n..S.W.\n.S....\n..W...\n...W..\n......''') == 'Yes'\nassert solution('''5 5\n.S...\n...S.\nS....\n...S.\n.S...\n''') == 'Yes'\nassert solution('''1 2\nSW''') == 'No'\nassert solution('''5 5\n.S...\n...S.\nS....\n...S.\n.S...\n''') == 'Yes'\n\n\n\"\"\"\nimport sys"
    },
    {
        "number": 973,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"2\\n2\\n\") == \"No\"\nassert solution(\"5 5\\n.S...\\n...S.\\nS....\\n...S.\\n.S...\\n\") == \"Yes\\n.S...\\n...S.\\nS.D..\\n...S.\\n.S...\\n\"\nassert solution(\"7 4\\n.SS...\\n...S.\\n.SS.S.\\n...S.\\n.SS.S.\\nSS.S.S\\n\") == \"No\"\nassert solution(\"7 4\\n.SS...\\n...S.\\n.SS.S.\\n...S.\\n.SS.S.\\nSS.S.S\\n\") == \"Yes\\n.SS.S.\\nSS.S.S\\n.SS.S.\\n...S.\\n.SS.S.\\n.SS.S.\\n\"\nassert solution(\"7 4\\n.SS...\\n...S.\\n.SS.S.\\n...S.\\n.SS.S.\\nSS.S.S\\n\") == \"Yes\\n.SS.S.\\nSS.S.S\\n.SS.S.\\n...S.\\n.SS.S.\\n.SS.S.\\n\"\n"
    },
    {
        "number": 973,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('2 2') == 'No'\nassert solution('6 6') == 'Yes'\nassert solution('1 2') == 'No'\nassert solution('5 5') == 'Yes'\nassert solution('3 3') == 'No'\n"
    },
    {
        "number": 973,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('6 6\\n..S...\\n..S.W.\\n.S....\\n..W...\\n...W..\\n......') == 'Yes'\nassert solution('1 2\\nSW\\n') == 'No'\nassert solution('5 5\\n.S...\\n...S.\\nS....\\n...S.\\n.S...\\n') == 'Yes'\nassert solution('4 3\\n...S\\n..S.\\n...S\\n...S') == 'Yes'\nassert solution('6 6\\n.S...\\n..S.W.\\n.S....\\n..W...\\n...W..\\n......') == 'Yes'\n"
    },
    {
        "number": 973,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''6 6\n..S...\n..S.W.\n.S....\n..W...\n...W..\n......''') == 'Yes'\nassert solution('''1 2\nSW''') == 'No'\nassert solution('''5 5\n.S...\n...S.\nS....\n...S.\n.S...\n''') == 'Yes'\nassert solution('''5 5\n.S...\n...S.\nS....\n...S.\n.S...\n''') == 'Yes'\nassert solution('''5 5\n.S...\n...S.\nS....\n...S.\n.S...\n''') == 'Yes'\n"
    },
    {
        "number": 973,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('6 6\\n..S...\\n..S.W.\\n.S....\\n..W...\\n...W..\\n......') == 'No'\nassert solution('1 2\\nSW') == 'No'\nassert solution('5 5\\n.S...\\n...S.\\nS....\\n...S.\\n.S...') == 'Yes'\nassert solution('5 5\\n.S...\\n...S.\\nS....\\n...S.\\n.S...') == 'Yes'\nassert solution('5 5\\n.S...\\n...S.\\nS....\\n...S.\\n..S...') == 'Yes'\n"
    },
    {
        "number": 973,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''6 6\n..S...\n..S.W.\n.S....\n..W...\n...W..\n......''') == 'Yes'\nassert solution('''1 2\nSW''') == 'No'\nassert solution('''5 5\n.S...\n...S.\nS....\n...S.\n.S...\n''') == 'Yes'\nassert solution('''5 4\n.S...\n...S.\nS....\n...S.\n.S...''') == 'Yes'\nassert solution('''4 4\n....\n....\n....\n....\n.S.S\n''') == 'No'\n"
    },
    {
        "number": 974,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"2\\nadd 3\\nremove\\nadd 1\\nremove\\nadd 1\\nremove\\nadd 1\\nremove\\nadd 1\\nremove\\nadd 2\\nadd 2\\nremove\\nadd 2\\nremove\\nremove\\nadd 2\\nremove\\nremove\\nadd 1\\nremove\\nadd 1\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nadd 1\\nremove\\nadd 1\\nremove\\nadd 1\\nremove\\nadd 1\\nremove\\nadd 1\\nremove\\nadd 1\\nremove\\nremove\\nremove\\nremove\\nremove\\nadd 1\\nremove\\nadd 1\\nremove\\nadd 1\\nremove\\nadd 1\\nremove\\nremove\\nremove\\nadd 1\\nremove\\nadd 1\\nremove\\nadd 1\\nremove\\nadd 1\\nremove\\nremove\\nremove\\nadd 1\\nremove\\nadd 1\\nremove\\nadd 1\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\"
    },
    {
        "number": 974,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"3\") == \"\"\nassert solution(\"3\\na\\nb\\nc\") == \"\"\nassert solution(\"3\\na\\nb\\nc\\na\\na\") == \"\"\nassert solution(\"3\\na\\nb\\nc\\na\\na\\na\") == \"\"\n"
    },
    {
        "number": 974,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('3') == ''\nassert solution('3\\nadd 1\\nremove') == '1'\nassert solution('3\\nadd 2\\nremove\\nadd 3\\nremove') == '1'\nassert solution('3\\nadd 2\\nadd 1\\nremove\\nadd 3\\nremove\\nremove') == '1'\n"
    },
    {
        "number": 974,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1\\nadd 1\\nremove\\n1\\nadd 2\\nremove\\n2\\nadd 3\\nremove\\n3\\nadd 4\\nremove\\n4\\nadd 5\\nremove\\n5\\nadd 6\\nremove\\n6\\nadd 7\\nremove\\n7\\nremove\\n7\\nadd 8\\nremove\\n8\\nadd 9\\nremove\\n9\\nremove\\n9\\nremove\\n9\\nadd 10\\nremove\\n10\\nadd 11\\nremove\\n11\\nremove\\n11\\nadd 12\\nremove\\n12\\nremove\\n12\\nremove\\n12\\nremove\\n') == '2'\nassert solution('3\\nadd 1\\nremove\\n3\\nadd 2\\nremove\\n2\\nadd 3\\nremove\\n3\\nremove\\nremove\\nadd 4\\nremove\\n4\\nadd 5\\nremove\\n5\\nadd 6\\nremove\\n6\\nadd 7\\nremove\\n7\\nremove\\nremove\\nadd 8\\nremove\\n8\\nadd 9\\nremove\\n9\\nremove\\nremove\\nadd 10\\nremove\\n10\\nadd 11\\nremove\\n11\\nremove\\nremove\\nadd 12\\nremove\\n12\\nremove\\nremove\\nadd 13\\nremove\\n13\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\n') == '3'\nassert solution('2\\nadd 1\\nremove\\n1\\nadd 2\\nremove\\n2\\nadd 3\\nremove\\n3\\nremove\\nremove\\nadd 4\\nremove\\n4\\nadd 5\\nremove\\n5\\nadd 6\\nremove\\n6\\nadd 7\\nremove\\n7\\nremove\\nremove\\nadd 8\\nremove\\n8\\nadd 9\\nremove\\n9\\nremove\\nremove\\nadd 10\\nremove\\n10\\nadd 11\\nremove\\n11\\nremove\\nremove\\nadd 12\\nremove\\n12\\nremove\\nremove\\nadd 13\\nremove\\n13\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\n') == '3'\nassert solution('7\\nadd 3\\nadd 2\\nadd 1\\nremove\\n1\\nadd 4\\nremove\\n4\\nadd 5\\nremove\\n5\\nadd 6\\nremove\\n6\\nadd 7\\nremove\\n7\\nremove\\nremove\\nadd 8\\nremove\\n8\\nadd 9\\nremove\\n9\\nremove\\nremove\\nadd 10\\nremove\\n10\\nadd 11\\nremove\\n11\\nremove\\nremove\\nadd 12\\nremove\\n12\\nremove\\nremove\\nadd 13\\nremove\\n13\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\n') == '2'\nassert solution('3\\nadd 1\\nremove\\n1\\nadd 2\\nremove\\n2\\nadd 3\\nremove\\n3\\nremove\\nremove\\nadd 4\\nremove\\n4\\nadd 5\\nremove\\n5\\nadd 6\\nremove\\n6\\nadd 7\\nremove\\n7\\nremove\\nremove\\nadd 8\\nremove\\n8\\nadd 9\\nremove\\n9\\nremove\\nremove\\nadd 10\\nremove\\n10\\nadd 11\\nremove\\n11\\nremove\\nremove\\nadd 12\\nremove\\n12\\nremove\\nremove\\nadd 13\\nremove\\n13\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\n') == '3'\n"
    },
    {
        "number": 974,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('3\\nadd 1\\nremove\\nadd 2\\nadd 3\\nremove\\nremove\\nremove\\nadd 4\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nadd 6\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nadd 7\\nadd 5\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nadd 8\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nadd 9\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nadd 10\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\"
    },
    {
        "number": 974,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == expected\n\"\"\"\n"
    },
    {
        "number": 974,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"7\") == \"2\"\nassert solution(\"2 2\") == \"1\"\nassert solution(\"2 2\") == \"1\"\nassert solution(\"7 5 7\") == \"1\"\n"
    },
    {
        "number": 974,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('3') == '1'\nassert solution('4') == '2'\nassert solution('1') == '0'\nassert solution('3 2') == '1'\nassert solution('3 2 4') == '2'\n"
    },
    {
        "number": 974,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"3\\nadd 1\\nremove\\nadd 2\\nadd 3\\nremove\\nremove\") == \"1\"\nassert solution(\"7\\nadd 3\\nadd 2\\nadd 1\\nremove\\nadd 4\\nremove\\nremove\\nremove\\nadd 6\\nadd 7\\nadd 5\\nremove\\nremove\\nremove\") == \"2\"\n"
    },
    {
        "number": 974,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('2\\nadd 1\\nremove\\nadd 2\\nadd 3\\nremove\\nremove\\nadd 4\\nremove\\nremove\\nremove\\nadd 6\\nadd 7\\nadd 5\\nremove\\nremove\\nremove') == '1'\nassert solution('4\\nadd 1\\nremove\\nadd 2\\nadd 3\\nremove\\nremove\\nadd 4\\nremove\\nremove\\nremove\\nadd 6\\nadd 7\\nadd 5\\nremove\\nremove\\nremove') == '2'\nassert solution('8\\nadd 1\\nremove\\nadd 2\\nadd 3\\nremove\\nremove\\nremove\\nadd 4\\nremove\\nremove\\nremove\\nadd 6\\nadd 7\\nadd 5\\nremove\\nremove\\nremove') == '2'\nassert solution('7\\nadd 1\\nremove\\nadd 2\\nadd 3\\nremove\\nremove\\nremove\\nadd 4\\nremove\\nremove\\nremove\\nadd 6\\nadd 7\\nadd 5\\nremove\\nremove\\nremove') == '2'\nassert solution('10\\nadd 1\\nremove\\nadd 2\\nadd 3\\nremove\\nremove\\nremove\\nadd 4\\nremove\\nremove\\nremove\\nadd 6\\nadd 7\\nadd 5\\nremove\\nremove\\nremove') == '3'\n"
    },
    {
        "number": 975,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''3''') == '''0'''\nassert solution('''2''') == '''2'''\nassert solution('''88''') == '''0'''\nassert solution('''00''') == '''0'''\nassert solution('''123''') == '''2'''\n"
    },
    {
        "number": 975,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == expected\n\n\"\"\"\n\nn = int(input())\ns = input()\nm = input()"
    },
    {
        "number": 975,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('') == '0'\nassert solution('3') == '0'\nassert solution('123') == '2'\nassert solution('12345678901234567890123456789012345678901234567890123456789012345678901234567890') == '0'\nassert solution('88') == '2'\n"
    },
    {
        "number": 975,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1\\n1\\n2') == '0\\n2'\nassert solution('2\\n1\\n2') == '0\\n2'\nassert solution('1\\n2\\n1') == '2\\n0'\nassert solution('2\\n2\\n2') == '2\\n2'\n\n\n>>> ================================ RESTART ================================\n>>> \n= RESTART: C:\\Users\\burh\\Documents\\CPEG 484\\Assignment 1\\assignment1.py\nEnter the number of digits in the cards Sherlock and Moriarty are going to use: 3\nEnter the number of digits in the cards Sherlock and Moriarty are going to use: 3\nEnter the number of digits in the cards Sherlock and Moriarty are going to use: 3\nEnter the number of digits in the cards Sherlock and Moriarty are going to use: 3\nEnter the number of digits in the cards Sherlock and Moriarty are going to use: 3\nEnter the number of digits in the cards Sherlock and Moriarty are going to use: 3\nEnter the number of digits in the cards Sherlock and Moriarty are going to use: 3\nEnter the number of digits in the cards Sherlock and Moriarty are going to use: 3\nEnter the number of digits in the cards Sherlock and Moriarty are going to use: 3\nEnter the number of digits in the cards Sherlock and Moriarty are going to use: 3\nEnter the number of digits in the cards Sherlock and Moriarty are going to use: 3\nEnter the number of digits in the cards Sherlock and Moriarty are going to use: 3\nEnter the number of digits in the cards Sherlock and Moriarty are going to use: 3\nEnter the number of digits in the cards Sherlock and Moriarty are going to use: 3\nEnter the number of digits in the cards Sherlock and Moriarty are going to use: 3\nEnter the number of digits in the cards Sherlock and Moriarty are going to use: 3\nEnter the number of digits in the cards Sherlock and Moriarty are going to use: 3\nEnter the number of digits in the cards Sherlock and Moriarty are going to use: 3\nEnter the number of digits in the cards Sherlock and Moriarty are going to use: 3\nEnter the number of digits in the cards Sherlock and Moriarty are going to use: 3\nEnter the number of digits in the cards Sherlock and Moriarty are going to use: 3\nEnter the number of digits in the cards Sherlock and Moriarty are going to use: 3\nEnter the number of digits in the cards Sherlock and Moriarty are going to use: 3\nEnter the number of digits in the cards Sherlock and Moriarty are going to use: 3\nEnter the number of digits in the cards Sherlock and Moriarty are going to use: 3\nEnter the number of digits in the cards Sherlock and Moriarty are going to use: 3\nEnter the number of digits in the cards Sherlock and Moriarty are going to use: 3\nEnter the number of digits in the cards Sherlock and Moriarty are going to use: 3\nEnter the number of digits in the cards Sherlock and Moriarty are going to use: 3\nEnter the number of digits in the cards Sherlock and Moriarty are going to use: 3\nEnter the number of digits in the cards Sherlock and Moriarty are going to use: 3\nEnter the number of digits in the cards Sherlock and Moriarty are going to use: 3\nEnter the number of digits in the cards Sherlock and Moriarty are going to use: 3\nEnter the number of digits in the cards Sherlock and Moriarty are going to use: 3\nEnter the number of digits in the cards Sherlock and Moriarty are going to use: 3\nEnter the number of digits in the cards Sherlock and Moriarty are going to use: 3\nEnter the number of digits in the cards Sherlock and Moriarty are going to use: 3\nEnter the number of digits in the cards Sherlock and Moriarty are going to use: 3\nEnter the number of digits in the cards Sherlock and Moriarty are going to use: 3\nEnter the number of digits in the cards Sherlock and Moriarty are going to use: 3\nEnter the number of digits in the cards Sherlock and Moriarty are going to use: 3\nEnter the number of digits in the cards Sherlock and Moriarty are going to use: 3\nEnter the number of digits in the cards Sherlock and Moriarty are going to use: 3\nEnter the number of digits in the cards Sherlock and Moriarty are going to use: 3\nEnter the number of digits in the cards Sherlock and Moriarty are going to use: 3\nEnter the number of digits in the cards Sherlock and Moriarty are going to use: 3\nEnter the number of digits in the cards Sherlock and Moriarty are going to use: 3\nEnter the number of digits in the cards Sherlock and Moriarty are going to use: 3\nEnter the number of digits in the cards Sherlock and Moriarty are going to use: 3\nEnter the number of digits in the cards Sherlock and Moriarty are going to use: 3\nEnter the number of digits in the cards Sherlock and Moriarty are going to use: 3\nEnter the number of digits in the cards Sherlock and Moriarty are going to use: 3\nEnter the number of digits in the cards Sherlock and Moriarty are going to use: 3\nEnter the number of digits in the cards Sherlock and Moriarty are going to use: 3\nEnter the number of digits in the cards Sherlock and Moriarty are going to use: 3\nEnter the number of digits in the cards Sherlock and Moriarty are going to use: 3\nEnter the number of digits in the cards Sherlock and Moriarty are going to use: 3\nEnter the number of digits in the cards Sherlock and Moriarty are going to use: 3\nEnter the number of digits in the cards Sherlock and Moriarty are going to use: 3\nEnter the number of digits in the cards Sherlock and Moriarty are going to use: 3\nEnter the number of digits in the cards Sherlock and Moriarty are going to use: 3\nEnter the number of digits in the cards Sherlock and Moriarty are going to use: 3\nEnter the number of digits in the cards Sherlock and Moriarty are going to use: 3\nEnter the number of digits in the cards Sherlock and Moriarty are going to use: 3\nEnter the number of digits in the cards Sherlock and Moriarty are going to use: 3\nEnter the number of digits in the cards Sherlock and Moriarty are going to use: 3\nEnter the number of digits in the cards Sherlock and Moriarty are going to use: 3\nEnter the number of digits in the cards Sherlock and Moriarty are going to use: 3\nEnter the number of digits in the cards Sherlock and Moriarty are going to use: 3\nEnter the number of digits in the cards Sherlock and Moriarty are going to use: 3\nEnter the number of digits in the cards Sherlock and Moriarty are going to use: 3\nEnter the number of digits in the cards Sherlock and Moriarty are going to use: 3\nEnter the number of digits in the cards Sherlock and Moriarty are going"
    },
    {
        "number": 975,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''3\n123\n321''') == \"0\"\nassert solution('''2\n88\n00''') == \"2\"\nassert solution('''4\n1111\n3333''') == \"0\"\nassert solution('''5\n7777\n5555''') == \"2\"\nassert solution('''6\n9090\n9090''') == \"0\"\n"
    },
    {
        "number": 975,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('123') == '0'\nassert solution('321') == '2'\n"
    },
    {
        "number": 975,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''3''') == '0'\nassert solution('''123''') == '0'\nassert solution('''321''') == '2'\n\n\n\n'''\n"
    },
    {
        "number": 975,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 975,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('3\\n123\\n321\\n') == '0\\n2'\nassert solution('2\\n88\\n00\\n') == '2\\n0'\n\n\"\"\"\n"
    },
    {
        "number": 975,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('123') == '0'\nassert solution('321') == '2'\nassert solution('88') == '0'\nassert solution('00') == '2'\nassert solution('00') == '0'\n"
    },
    {
        "number": 976,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"2 3\") == \"6\"\nassert solution(\"1 1\") == \"100000\"\nassert solution(\"2 3\") == \"6\"\nassert solution(\"1 1\") == \"100000\"\nassert solution(\"3 4\") == \"4\"\n"
    },
    {
        "number": 976,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"2 3\\n5 6\\n10 12\") == \"6\"\nassert solution(\"1 1\\n1 100000\") == \"100000\"\n"
    },
    {
        "number": 976,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''2 3\n5 6\n10 12''') == '6'\nassert solution('''1 1\n1 100000\n''') == '100000'\n"
    },
    {
        "number": 976,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('2 3') == '6'\nassert solution('5 6') == '6'\nassert solution('10 12') == '100000'\nassert solution('10 50') == '100000'\n\n\n\"\"\"\n\nimport sys\n\nn, x = map(int, sys.stdin.readline().split())\nbest_moments = [0] * n\nfor i in range(n):\n    best_moments[i] = list(map(int, sys.stdin.readline().split()))\n\ndp = [0] * (n + 1)\nfor i in range(n):\n    dp[i + 1] = max(dp[i], best_moments[i][1] - (i + 1))\n\nfor i in range(n - 1, -1, -1):\n    dp[i] = max(dp[i + 1], best_moments[i][0] - (i + 1))\n\nprint(dp[0])\n"
    },
    {
        "number": 976,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(input()) == ''\n\n\n\"\"\"\n"
    },
    {
        "number": 976,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''2 3\n5 6\n10 12''') == '6'\nassert solution('''1 1\n1 100000\n''') == '100000'"
    },
    {
        "number": 976,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"2 3\") == \"6\"\nassert solution(\"1 1\") == \"100000\"\n\"\"\"\n"
    },
    {
        "number": 976,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"1 1\\n1 100000\\n\") == \"100000\"\nassert solution(\"2 3\\n5 6\\n10 12\\n\") == \"6\"\nassert solution(\"1 1\\n1 100000\\n\") == \"100000\"\n\"\"\"\n"
    },
    {
        "number": 976,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('2 3\\n5 6\\n10 12\\n') == '6'\nassert solution('1 1\\n1 100000\\n') == '100000'\nassert solution('5 2\\n4 6\\n8 10\\n12 14\\n16 18\\n20 22\\n24 26\\n28 30\\n32 34\\n36 38\\n40 42\\n44 46\\n48 50\\n52 54\\n56 58\\n60 62\\n64 66\\n68 70\\n72 74\\n76 78\\n80 82\\n84 86\\n88 90\\n92 94\\n96 98\\n') == '86739'\nassert solution('2 1\\n4 10\\n16 22\\n34 38\\n56 70\\n76 90\\n') == '86739'\nassert solution('2 1\\n4 10\\n16 22\\n34 38\\n56 70\\n76 90\\n') == '86739'\n"
    },
    {
        "number": 976,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('2 3\\n5 6\\n10 12') == '6'\nassert solution('1 1\\n1 100000') == '100000'\nassert solution('1 2\\n1 100000') == '1'\nassert solution('1 2\\n1 2') == '1'\nassert solution('1 2\\n1 2\\n1 2') == '1'\n"
    },
    {
        "number": 977,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('3 2\\n3 4 5\\n') == '1\\n3\\n'\nassert solution('4 3\\n2 3 5 6\\n') == '2\\n3 4\\n'\nassert solution('4 3\\n9 1 1 1\\n') == '0\\n'\nassert solution('5 3\\n1 1 1 1 1\\n') == '0\\n'\nassert solution('5 3\\n1 2 3 4 5\\n') == '0\\n'\n"
    },
    {
        "number": 977,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('2 3\\n3 4 5') == '1\\n3\\n'\nassert solution('3 2\\n3 4 5') == '0\\n'\nassert solution('4 3\\n2 3 5 6') == '2\\n3 4\\n'\nassert solution('4 3\\n9 1 1 1') == '0\\n'\n\n\n\n\n\nimport sys\nn, k = [int(i) for i in sys.stdin.readline().split()]\nkmers = [''.join(i) for i in zip(*[sys.stdin.readline().strip() for j in range(n)])]\nkmers_set = set(kmers)\nprint(len([x for x in kmers if k == x.count('A')]))\nprint(*sorted([x for x in kmers_set if k == x.count('A')]), sep = '\\n')\n"
    },
    {
        "number": 977,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''3 2''') == '1\\n3\\n'\nassert solution('''4 3''') == '0\\n3\\n4\\n'\nassert solution('''4 3\n    9 1 1 1''') == '2\\n3\\n4\\n'\nassert solution('''7 5\n    11 3 7 2''') == '1\\n3\\n5\\n6\\n7\\n'\nassert solution('''1 9\n    19 1 2 9''') == '0\\n'\n"
    },
    {
        "number": 977,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\n\nfrom fractions import Fraction\nfrom math import sqrt\nfrom functools import lru_cache\n\n@lru_cache(maxsize=None)\n"
    },
    {
        "number": 977,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''3 2''') == '1\\n3\\n'\nassert solution('''4 3''') == '2\\n3 4\\n'\nassert solution('''4 3''') == '0\\n3 4\\n'\nassert solution('''9 1 1 1''') == '0\\n3 4\\n'\n\n\n\n\n\n\n-----\n\nThis is the hard version of the problem. You must get all the correct permutations. The constraints on $n$ and $a_i$ are different from the easy version. You can make hacks only if all versions of the problem are solved.\n\nThe difficulty of this version is much harder than the previous versions. You must solve it without knowing $p$, but you should know that the solution is unique.  You should also know that, if $p$ is prime, $p = 2$ and $p = 3$ are good, but you can't tell which is good. It is too much difficult to know if the number $p$ is prime or not, and it is much easier to find all permutations if $p$ is prime. It is much easier to find all permutations if $p$ is prime, and it is much easier to find all permutations if $p$ is prime.\n\n\n-----Input-----\n\nIn the first line, there are two integers $n$ and $p \\le n \\le 2000$ and $p$ is prime (it has exactly two divisors $1$ and $p$). It is guaranteed, that the number $p$ is prime (it has exactly two divisors $1$ and $p$).\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ $(1 \\le a_i \\le 2000)$.\n\n\n-----Output-----\n\nPrint the number of good permutations $P$, where $P$ is a permutation and is in ascending order. The output cannot be more than $10^5$.\n\n-----Examples-----\nInput\n3 2\n3 4 5\n\nOutput\n1\n3\n\nInput\n4 3\n2 3 5 6\n\nOutput\n2\n3 4\n\nInput\n4 3\n9 1 1 1\n\nOutput\n0\n\n\n\n\n-----Note-----\n\nIn the first test, $p=2$.  If $x \\le 2$, there are no valid permutations for Yuzu. So $f(x)=0$ for all $x \\le 2$. The number $0$ is divisible by $2$, so all integers $x \\leq 2$ are not good.  If $x = 3$, $\\{1,2,3\\}$ is the only valid permutation for Yuzu. So $f(3)=1$, so the number $3$ is good.  If $x = 4$, $\\{1,2,3\\}, \\{1,3,2\\}, \\{2,1,3\\}, \\{2,3,1\\}$ are all valid permutations for Yuzu. So $f(4)=4$, so the number $4$ is not good.  If $x \\ge 5$, all $6$ permutations are valid for Yuzu. So $f(x)=6$ for all $x \\ge 5$, so all integers $x \\ge 5$ are not good. \n\nIn the third test, for all positive integers $x$ the value $f(x)$ is divisible by $p = 3$."
    },
    {
        "number": 977,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('3 2') == '1\\n3\\n'\nassert solution('4 3') == '0\\n3\\n4\\n'\nassert solution('4 3') == '0\\n3\\n4\\n'\nassert solution('9 1 1 1') == '0\\n'\nassert solution('1 1 1 1') == '0\\n'\n\n\n-----Alternate Solutions (Shorter)-----"
    },
    {
        "number": 977,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('1 2 3') == '1'\nassert solution('1 2 3 4') == '1'\nassert solution('1 2 3 4 5') == '1'\nassert solution('1 2 3 4 5 6') == '1'\nassert solution('1 2 3 4 5 6 7') == '1'\n"
    },
    {
        "number": 977,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1 2 3 4') == '0\\n3 4\\n'\nassert solution('4 3 5 6') == '2\\n3 4\\n'\nassert solution('9 1 1 1') == '0\\n9\\n'\nassert solution('10 20 30 40') == '1\\n10 20 30 40\\n'\n"
    },
    {
        "number": 977,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('3 2') == '1\\n3'\nassert solution('4 3') == '2\\n3 4'\nassert solution('4 3') == '2\\n3 4'\nassert solution('4 3') == '2\\n3 4'\nassert solution('4 3') == '2\\n3 4'\n"
    },
    {
        "number": 977,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('2\\n3') == '1\\n3'\nassert solution('2\\n4') == '0'\nassert solution('2\\n5') == '2'\nassert solution('2\\n6') == '0'\nassert solution('2\\n7') == '2'\n"
    },
    {
        "number": 978,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('') == 'YES'\nassert solution('\\n') == 'YES'\nassert solution('5\\n....\\n.2..\\n.2..\\n') == 'YES'\nassert solution('2\\n..1.\\n.1..\\n.1..\\n') == 'NO'\nassert solution('4\\n.135\\n.1247\\n.3468\\n.5789\\n') == 'YES'\n"
    },
    {
        "number": 978,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"4\\n.1349\\n1247\\n3468\\n5789\") == \"YES\"\nassert solution(\"2\\n.123\\n.1234\\n.1234\\n\") == \"NO\"\nassert solution(\"1\\n.1\\n.2\\n.2\\n\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 978,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''1''') == 'YES'\nassert solution('''5''') == 'YES'\nassert solution('''1''') == 'NO'\nassert solution('''2''') == 'NO'\nassert solution('''3''') == 'YES'\n"
    },
    {
        "number": 978,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1\\n.135') == \"YES\"\nassert solution('1\\n.135\\n1247\\n3468\\n5789') == \"YES\"\nassert solution('1\\n..1.\\n1111\\n..1.\\n..1.\\n') == \"YES\"\nassert solution('1\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\n.1.\\"
    },
    {
        "number": 978,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1\\n.135') == 'YES'\nassert solution('2\\n.2..') == 'NO'\nassert solution('3\\n.1...') == 'NO'\nassert solution('4\\n.1...') == 'YES'\nassert solution('5\\n....') == 'YES'\n"
    },
    {
        "number": 978,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"YES\"\nassert solution(\"6\") == \"NO\"\nassert solution(\"1\") == \"YES\"\nassert solution(\"5\") == \"NO\"\nassert solution(\"3\") == \"NO\"\n"
    },
    {
        "number": 978,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''1''') == 'YES'\nassert solution('''5''') == 'YES'\nassert solution('''1\n.135\n1247\n3468\n5789''') == 'YES'\nassert solution('''1\n....\n12.1\n.2..\n.2..\n''') == 'NO'\nassert solution('''5\n..1.\n1111\n..1.\n..1.\n''') == 'NO'\n"
    },
    {
        "number": 978,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 978,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1\\n.135\\n1247\\n3468\\n5789\\n') == 'YES'\nassert solution('1\\n.1234567\\n234876\\n3456879\\n789876\\n') == 'NO'\n\"\"\"\n"
    },
    {
        "number": 978,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''1\n.135\n1247\n3468\n5789''') == 'YES'\nassert solution('''5\n..1.\n1111\n..1.\n..1.\n''') == 'YES'\nassert solution('''1\n....\n12.1\n.2..\n.2..\n''') == 'NO'\nassert solution('''5\n....\n.2.\n.2..\n.2..\n''') == 'NO'\nassert solution('''1\n..\n1\n..\n1\n''') == 'YES'\n"
    },
    {
        "number": 979,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('2 10\\n8 5\\n') == '3'\nassert solution('3 12\\n1 4 5\\n') == '0'\nassert solution('3 7\\n1 4 9\\n') == '1'"
    },
    {
        "number": 979,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''2 10\n8 5\n''') == '3'\nassert solution('''3 12\n1 4 5\n''') == '0'\nassert solution('''3 7\n1 4 9\n''') == '1'\nassert solution('''3 1\n7\n''') == '7'\n\nprint(solution('''8 39\n85\n'''))"
    },
    {
        "number": 979,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"2 10\\n8 5\") == \"3\"\nassert solution(\"3 12\\n1 4 5\") == \"0\"\nassert solution(\"3 7\\n1 4 9\") == \"1\"\n"
    },
    {
        "number": 979,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('4 2') == '3'\nassert solution('2 3') == '3'\nassert solution('2 3') == '3'\nassert solution('2 3') == '3'\nassert solution('2 3') == '3'\n"
    },
    {
        "number": 979,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('8 5\\n8 5') == '3'\nassert solution('3 12\\n1 4 9') == '0'\nassert solution('3 7\\n1 4 9') == '1'\nassert solution('3 7\\n1 4 9') == '1'\nassert solution('3 7\\n1 4 9') == '1'\n"
    },
    {
        "number": 979,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1 1') == '0'\nassert solution('1 1\\n1 2\\n2 3') == '0'\nassert solution('2 10\\n8 5\\n') == '3'\nassert solution('3 12\\n1 4 5\\n') == '0'\nassert solution('3 7\\n1 4 9\\n') == '1'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 979,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''2 10\n8 5\n''') == '3'\n\nassert solution('''3 12\n1 4 5\n''') == '0'\n\nassert solution('''3 7\n1 4 9\n''') == '1'\n'''\n"
    },
    {
        "number": 979,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''2 10\n8 5''') == '3'\nassert solution('''3 12\n1 4 5''') == '0'\nassert solution('''3 7\n1 4 9''') == '1'\nprint(\"All set? Click 'Check' to earn cool rewards!\")\n"
    },
    {
        "number": 979,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''2 10\n8 5''') == '3'\nassert solution('''3 12\n1 4 5''') == '0'\nassert solution('''3 7\n1 4 9''') == '1'\nassert solution('''3 12\n1 4 5''') == '1'\nassert solution('''3 6\n1 4 5''') == '0'"
    },
    {
        "number": 979,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('3 10\\n1 4 5\\n') == '3'\nassert solution('3 7\\n1 4 9\\n') == '1'\nassert solution('3 12\\n1 4 9\\n') == '0'\nassert solution('3 7\\n1 4 9\\n') == '1'\nassert solution('3 7\\n1 4 9\\n') == '1'\n"
    },
    {
        "number": 980,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == result\n\"\"\"\n\nimport sys\nfrom typing import List\n"
    },
    {
        "number": 980,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''3 4\nabac\ncaab\nacba''') == 'acab'\nassert solution('''5 4\nkbbu\nkbub\nubkb''') == 'kbub'\nassert solution('''3 4\nkbbu\nkbub\nubkb''') == '-1'\nassert solution('''5 4\nabcd\ndcba\nacbd\ndbca\nzzzz''') == '-1'"
    },
    {
        "number": 980,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''3 4\nabac\ncaab\nacba''') == 'acab'\nassert solution('''5 4\nkbbu\nkbub\nubkb''') == 'kbub'\nassert solution('''3 4\nkbbu\nkbub\nubkb''') == '-1'\n"
    },
    {
        "number": 980,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == expected\n"
    },
    {
        "number": 980,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('abac') == 'acab'\nassert solution('kbbu') == 'kbub'\nassert solution('kbub') == '-1'\nassert solution('kkkbbb') == '-1'\nassert solution('kkbbb') == '-1'\n"
    },
    {
        "number": 980,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('3\\n4\\nabac\\ncaab\\nacba') == 'acab'\nassert solution('3\\n4\\nkbbu\\nkbub\\nubkb') == 'kbub'\nassert solution('5\\n4\\nabcd\\ndcba\\nacbd\\ndbca') == '-1'\n\n\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 980,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100\\n101\\n102\\n103\\n104\\n105\\n106\\n107\\n108\\n109\\n110\\n111\\n112\\n113\\n114\\n115\\n116\\n117\\n118\\n119\\n120\\n121\\n122\\n123\\n124\\n125\\n126\\n127\\n128\\n129\\n130\\n131\\n132\\n133\\n134\\n135\\n136\\n137\\n138\\n139\\n140\\n141\\n142\\n143\\n144\\n145\\n146\\n147\\n148\\n149\\n150\\n151\\n152\\n153\\n154\\n155\\n156\\n157\\n158\\n159\\n160\\n161\\n162\\n163\\n164\\n165\\n166\\n167\\n168\\n169\\n170\\n171\\n172\\n173\\n174\\n175\\n176\\n177\\n178\\n179\\n180\\n181\\n182\\n183\\n184\\n185\\n186\\n187\\n188\\n189\\n190\\n191\\n192\\n193\\n194\\n195\\n196\\n197\\n198\\n199\\n200\\n201\\n202\\n203\\n204\\n205\\n206\\n207\\n208\\n209\\n210\\n211\\n212\\n213\\n214\\n215\\n216\\n217\\n218\\n219\\n220\\n221\\n222\\n223\\n224\\n225\\n226\\n227\\n228\\n229\\n230\\n231\\n232\\n233\\n234\\n235\\n236\\n237\\n238\\n239\\n240\\n241\\n242\\n243\\n244\\n245\\n246\\n247\\n248\\n249\\n250\\n251\\n252\\n253\\n254\\n255\\n256\\n257\\n258\\n259\\n260\\n261\\n262\\n263\\n264\\n265\\n266\\n267\\n268\\n269\\n270\\n271\\n272\\n273\\n274\\n275\\n276\\n277\\n278\\n279\\n280\\n281\\n282\\n283\\n284\\n285\\n286\\n287\\n288\\n289\\n290\\n291\\n292\\n293\\n294\\n295\\n296\\n297\\n298\\n299\\n300\\n301\\n302\\n303\\n304\\n305\\n306\\n307\\n308\\n309\\n310\\n311\\n312\\n313\\n314\\n315\\n316\\n317\\n318\\n319\\n320\\n321\\n322\\n323\\n324\\n325\\n326\\n327\\n328\\n329\\n330\\n331\\n332\\n333\\n334\\n335\\n336\\n337\\n338\\n339\\n340\\n341\\n342\\n343\\n344\\n345\\n346\\n347\\n348\\n349\\n350\\n351\\n352\\n353\\n354\\n355\\n356\\n357\\n358\\n359\\n360\\n361\\n362\\n363\\n364\\n365\\n366\\n367\\n368\\n369\\n370\\n371\\n372\\n373\\n374\\n375\\n376\\n377\\n378\\n379\\n380\\n381\\n382\\n383\\n384\\n385\\n386\\n387\\n388\\n389\\n390\\n391\\n392\\n393\\n394\\n395\\n396\\n397\\n398\\n399\\n400\\n401\\n402\\n403\\n404\\n405\\n406\\n407\\n408\\n409\\n410\\n411\\n412\\n413\\n414\\n415\\n416\\n417\\n418\\n419\\n420\\n421\\n422\\n423\\n424\\n425\\n426\\n427\\n428\\n429\\n430\\n431\\n432\\n433\\n434\\n435\\n436\\n437\\n438\\n439\\n440\\n441\\n442\\n443\\n444\\n445\\n446\\n447\\n448\\n449\\n450\\n451\\n452\\n453\\n454\\n455\\n456\\n457\\n458\\n459\\n460\\n461\\n462\\n463\\n464\\n465\\n466\\n467\\n468\\n469\\n470\\n471\\n472\\n473\\n474\\n475\\n476\\n477\\n478\\n479\\n480\\n481\\n482\\n483\\n484\\n485\\n486\\n487\\n488\\n489\\n490\\n491\\n492\\n493\\n494\\n495\\n496\\n497\\n498\\n499\\n500\\n')\nassert solution('2\\n3\\n4\\n5\\n6') == '6'\nassert solution('3\\n4\\n5\\n6') == '-1'\nassert solution('4\\n5\\n6') == '-1'\nassert solution('6\\n5\\n"
    },
    {
        "number": 980,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('abac') == 'acab'\nassert solution('kbbu') == 'kbub'\nassert solution('kbub') == 'kbub'\nassert solution('abcd') == '-1'\nassert solution('dcba') == '-1'\n"
    },
    {
        "number": 980,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''3 4\nabac\ncaab\nacba''') == 'acab'\nassert solution('''3 4\nkbbu\nkbub\nubkb''') == 'kbub'\nassert solution('''5 4\nabcd\ndcba\nacbd\ndbca\nzzzz''') == '-1'\nassert solution('''5 4\nabcd\ndcba\nacbd\ndbca\nkkkk''') == '-1'\nassert solution('''7 2\nzxxz\nzxxz\nzzzzz\nzxxz\nzxxz\nzxxz\nzxxz''') == 'zxxz'\n"
    },
    {
        "number": 980,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('abac') == 'acab'\nassert solution('kbbu') == 'kbub'\nassert solution('kbub') == '-1'\nassert solution('baa') == 'bab'\nassert solution('baab') == 'baba'\n"
    },
    {
        "number": 981,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''5\n5 4 3 2 1 2 3 4 5''') == \"55555\"\nassert solution('''2\n9 11 1 12 5 8 9 10 6''') == \"33\"\nassert solution('''0\n1 1 1 1 1 1 1 1 1''') == \"-1\"\nassert solution('''1\n1 1 1 1 1 1 1 1 1''') == \"1\"\nassert solution('''5\n5 4 3 2 1 2 3 4 5''') == \"55555\"\n"
    },
    {
        "number": 981,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('2') == '1'\nassert solution('5') == '55555'\nassert solution('9 11 1 12 5 8 9 10 6') == '33'\nassert solution('0') == '-1'\nassert solution('9 11 1 12 5 8 9 10 6') == '33'\n"
    },
    {
        "number": 981,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"0\\n5\") == \"55555\"\nassert solution(\"2\\n9 11 1 12 5 8 9 10 6\") == \"33\"\nassert solution(\"3\\n1 1 1 1 1 1 1 1 1\") == \"-\"\nassert solution(\"4\\n4 4 4 4 4 4 4 4 4\") == \"4\"\nassert solution(\"4\\n1 2 3 4 5 6 7 8 9\") == \"4\"\n"
    },
    {
        "number": 981,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''5\n5 4 3 2 1 2 3 4 5''') == \"55555\"\nassert solution('''2\n9 11 1 12 5 8 9 10 6''') == \"33\"\nassert solution('''0''') == \"-1\"\nassert solution('''1\n1 1 1 1 1 1 1 1 1''') == \"1\"\nassert solution('''9\n9 8 7 6 5 4 3 2 1''') == \"9\"\n"
    },
    {
        "number": 981,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdin.strip()\n"
    },
    {
        "number": 981,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"0\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"5\") == \"5555\"\nassert solution(\"10\") == \"11111\"\nassert solution(\"50\") == \"55555\"\n"
    },
    {
        "number": 981,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''5''') == '55555'\nassert solution('''9 11 1 12 5 8 9 10 6''') == '33'\nassert solution('''0''') == '-1'\nassert solution('''1 1 1 1 1 1 1 1 1''') == '-1'\nassert solution('''9 11 1 12 5 8 9 10 6''') == '33'\n"
    },
    {
        "number": 981,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('2\\n1 2 1 2 2 1') == '2222'\nassert solution('2\\n2 1 2 1 2 1') == '1'\nassert solution('2\\n1 1 1 1 1 1 1') == '-1'\nassert solution('3\\n1 1 1 1 1 1 1') == '-1'\nassert solution('3\\n2 2 2 2 2 2 2') == '55555'\n"
    },
    {
        "number": 981,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1\\n1 1 1 1 1 1 1 1 1') == '55555'\nassert solution('2\\n9 11 1 12 5 8 9 10 6') == '33'\nassert solution('5\\n5 4 3 2 1 2 3 4 5') == '55555'\nassert solution('0\\n1 1 1 1 1 1 1 1 1') == '-1'\nassert solution('10\\n9 11 1 12 5 8 9 10 6') == '55555'\n"
    },
    {
        "number": 981,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('2') == '-1'\nassert solution('5') == '55555'\nassert solution('9 11 1 12 5 8 9 10 6') == '33'\nassert solution('0') == '-1'\nassert solution('1 1 1 1 1 1 1 1 1') == '-1'"
    },
    {
        "number": 982,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('3\\n1 2\\n120 150\\n') == 'NO'\nassert solution('3\\n1 2\\n10 20\\n100 200\\n') == 'YES'\nassert solution('3\\n1 2\\n5 10\\n100 100\\n') == 'YES'\nassert solution('3\\n1 2\\n4 100\\n100 100\\n') == 'NO'\nassert solution('3\\n1 2\\n1 1\\n1 1\\n') == 'YES'\n"
    },
    {
        "number": 982,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"\"\nassert solution(\"1 1\") == \"YES\"\nassert solution(\"3 2\") == \"YES\"\nassert solution(\"3 4\") == \"NO\"\n"
    },
    {
        "number": 982,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1 2\") == \"NO\"\nassert solution(\"1 2 3\") == \"NO\"\nassert solution(\"1 2 4\") == \"YES\"\nassert solution(\"1 2 3\") == \"NO\"\n"
    },
    {
        "number": 982,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''3\n3 4\n1 2\n120 150\n''') == 'YES'\n\nassert solution('''3\n1 2\n1 2\n1 2\n1 2\n1 2\n''') == 'NO'\n\nassert solution('''2\n1 2\n120 150\n''') == 'YES'\n\nassert solution('''3\n1 2\n1 2\n1 2\n''') == 'NO'\n\nassert solution('''3\n2 3\n1 2\n1 2\n1 2\n1 2\n''') == 'YES'"
    },
    {
        "number": 982,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\n\nfrom typing import Tuple\nfrom sys import stdin"
    },
    {
        "number": 982,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('hi') == 'hi'\nassert solution('Hello') == 'Hello'\nassert solution('Hi') == 'Hi'\nassert solution('A') == 'YES'\nassert solution('B') == 'NO'\n"
    },
    {
        "number": 982,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('2\\n4 5') == 'YES'\nassert solution('3\\n4 4') == 'YES'\nassert solution('3\\n1 1') == 'YES'\nassert solution('3\\n1 1') == 'YES'\nassert solution('3\\n1 1') == 'YES'\n"
    },
    {
        "number": 982,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 982,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''2\n1 1''') == 'NO'\nassert solution('''1\n2 1''') == 'YES'\nassert solution('''2\n2 2''') == 'NO'\nassert solution('''2\n3 2''') == 'NO'\nassert solution('''2\n6 5''') == 'YES'\n"
    },
    {
        "number": 982,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('2\\n3 3\\n1 2\\n2 1\\n3 1') == 'YES'\nassert solution('2\\n4 2\\n1 2\\n2 1\\n3 1\\n4 1') == 'YES'\nassert solution('2\\n4 2\\n1 2\\n2 1\\n3 1\\n4 1\\n5 1') == 'YES'\nassert solution('2\\n4 2\\n1 2\\n2 1\\n3 1\\n4 1\\n5 1\\n6 1') == 'NO'\nassert solution('2\\n4 2\\n1 2\\n2 1\\n3 1\\n4 1\\n5 1\\n6 1\\n7 1') == 'NO'\n"
    },
    {
        "number": 983,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\n\"5 1 2 3\\n1 2 3 4 5\\n\") == \"30\"\nassert solution(\n\"5 1 2 -3\\n-1 -2 -3 -4 -5\\n\") == \"12\"\n\nTest: python solution.py\nInput\n5 3 2 1\n1 2 3 4 5\n\nOutput\n22\n\nTest: python solution.py\nInput\n5 1 2 3\n1 2 3 4 5\n\nOutput\n30\n\nTest: python solution.py\nInput\n5 1 2 3\n1 2 3 4 5\n\nOutput\n12\n\"\"\"\n"
    },
    {
        "number": 983,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('5 1 2 3') == '30'\nassert solution('5 1 2 -3') == '12'\nassert solution('5 1 2 3') == '30'\nassert solution('5 1 2 -3') == '12'\nassert solution('5 1 2 3') == '30'\n"
    },
    {
        "number": 983,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('5 1 2 3') == '30'\nassert solution('5 1 2 -3') == '12'\n\n\n\nPython3\n-----"
    },
    {
        "number": 983,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\n    \"5 1 2 3\"\n    \"1 2 3 4 5\"\n) == \"30\"\n\nassert solution(\n    \"5 1 2 -3\"\n    \"-1 -2 -3 -4 -5\"\n) == \"12\"\n\nassert solution(\n    \"5 1 2 3\"\n    \"1 2 3 4 5\"\n) == \"30\"\n\nassert solution(\n    \"5 1 2 -3\"\n    \"-1 -2 -3 -4 -5\"\n) == \"12\"\n\nassert solution(\n    \"5 1 2 3\"\n    \"1 2 3 4 5\"\n) == \"30\""
    },
    {
        "number": 983,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"2 1 2 3\") == \"30\"\nassert solution(\"5 1 2 3\") == \"30\"\nassert solution(\"5 1 2 -3\") == \"12\"\nassert solution(\"5 1 2 3 4 5\") == \"30\"\nassert solution(\"1 2 3 4 5\") == \"30\"\n"
    },
    {
        "number": 983,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\n\n\n\n\"\"\"\n"
    },
    {
        "number": 983,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('2 1 2 3') == '30'\nassert solution('5 1 2 3') == '30'\nassert solution('5 1 2 -3') == '12'\nassert solution('5 1 2 3 4 5') == '30'\nassert solution('5 1 2 -3 4 -5') == '12'\n"
    },
    {
        "number": 983,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout"
    },
    {
        "number": 983,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == expected\n\"\"\"\n"
    },
    {
        "number": 983,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n\n\"\"\"\n  :type p: int\n  :type q: int\n  :type r: int\n  :type a: List[int]\n  :rtype: int\n\"\"\""
    },
    {
        "number": 984,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"4\\n-1 -1\\n1 2 3\\n-1 -1\\n2 -1 -1\\n1 -1 -1\") == \"2\\n\"\nassert solution(\"5\\n2 -1 -1\\n1 1 3\\n2 -1 -1\\n5 -1 -1\\n2 -1 -1\\n4 -1 -1\") == \"1\\n\"\nassert solution(\"8\\n6 2 3\\n3 4 5\\n12 6 7\\n1 -1 8\\n4 -1 -1\\n5 -1 -1\\n14 -1 -1\\n2 -1 -1\") == \"1\\n\"\nassert solution(\"10\\n6 2 3\\n3 4 5\\n12 6 7\\n1 -1 8\\n4 -1 -1\\n5 -1 -1\\n14 -1 -1\\n2 -1 -1\") == \"0\\n\"\nassert solution(\"15\\n15 -1 -1\\n10 1 3\\n5 -1 -1\\n5 -1 -1\\n14 -1 -1\\n2 -1 -1\\n8 -1 -1\\n5 -1 -1\\n1 -1 -1\") == \"0\\n\"\n"
    },
    {
        "number": 984,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('3\\n15 -1 -1\\n10 1 3\\n5 -1 -1') == '2'\nassert solution('3\\n3 1 3\\n2 1 -1\\n3 -1 -1\\n7 -1 -1') == '1'\nassert solution('10\\n6 2 3\\n3 4 5\\n12 6 7\\n1 -1 8\\n4 -1 -1\\n5 -1 -1\\n14 -1 -1\\n2 -1 -1') == '1'\nassert solution('7\\n1 2 3\\n4 5 6\\n7 8 9\\n8 -1 -1\\n9 -1 -1\\n10 -1 -1\\n11 -1 -1') == '2'\nassert solution('7\\n6 2 3\\n5 1 -1\\n4 -1 -1\\n3 -1 -1\\n2 -1 -1') == '0'\n"
    },
    {
        "number": 984,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"8\\n6 2 3\\n3 4 5\\n12 6 7\\n1 -1 8\\n4 -1 -1\\n5 -1 -1\\n14 -1 -1\\n2 -1 -1\\n\") == \"1\"\nassert solution(\"3\\n15 -1 -1\\n10 1 3\\n5 -1 -1\\n\") == \"2\"\nassert solution(\"3\\n15 -1 -1\\n10 1 3\\n5 -1 -1\\n\") == \"2\"\nassert solution(\"3\\n15 -1 -1\\n10 1 3\\n5 -1 -1\\n\") == \"2\"\nassert solution(\"3\\n15 -1 -1\\n10 1 3\\n5 -1 -1\\n\") == \"2\"\n"
    },
    {
        "number": 984,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('0\\n') == '0'\nassert solution('1\\n') == '0'\nassert solution('2\\n') == '0'\nassert solution('3\\n') == '0'\nassert solution('4\\n') == '0'\n"
    },
    {
        "number": 984,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"1\\n2\\n3\\n4\") == \"4\"\nassert solution(\"1\\n2\\n3\\n4\\n5\") == \"5\"\nassert solution(\"2\\n4\\n5\\n6\\n8\") == \"3\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\") == \"2\"\nassert solution(\"2\\n4\\n5\\n6\\n7\") == \"2\"\n"
    },
    {
        "number": 984,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"1\\n1\\n1\") == \"0\\n\"\nassert solution(\"2\\n2\\n2\") == \"0\\n\"\nassert solution(\"2\\n1\\n2\\n2\\n1\") == \"0\\n\"\nassert solution(\"5\\n3\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\") == \"5\\n\"\nassert solution(\"7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\") == \"7\\n\"\n"
    },
    {
        "number": 984,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"2 3 4 5\") == \"1\"\nassert solution(\"2 3 3 2\") == \"1\"\nassert solution(\"2 3 4 4 2\") == \"1\"\nassert solution(\"2 4 5 1 3\") == \"1\"\nassert solution(\"4 3 1 2 3 4\") == \"2\"\n"
    },
    {
        "number": 984,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''3\n15 -1 -1\n10 1 3\n5 -1 -1''') == '2'\n\nassert solution('''8\n6 2 3\n3 4 5\n12 6 7\n1 -1 8\n4 -1 -1\n5 -1 -1\n14 -1 -1\n2 -1 -1''') == '1'\n'''\n'''\n"
    },
    {
        "number": 984,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"3\") == \"\"\nassert solution(\"4\") == \"1\"\nassert solution(\"9\") == \"0\"\nassert solution(\"10\") == \"1\"\n"
    },
    {
        "number": 984,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"9 3 2\\n8 1 4\\n5 4 4\\n\") == \"2\"\nassert solution(\"3 3 2\\n1 0 3\\n2 -1 -1\\n5 -1 -1\\n\") == \"0\"\nassert solution(\"3 3 2\\n1 0 3\\n2 -1 -1\\n5 -1 -1\\n\") == \"0\"\nassert solution(\"9 3 2\\n8 1 4\\n5 4 4\\n\") == \"2\"\nassert solution(\"9 3 2\\n8 1 4\\n5 4 4\\n\") == \"2\"\n"
    },
    {
        "number": 985,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1\\n1\\n1\\n2\\n1') == '1'\nassert solution('1\\n1\\n2\\n3\\n3\\n1') == '4'\nassert solution('1\\n2\\n2\\n3\\n3\\n1') == '1'\nassert solution('1\\n1\\n1\\n1\\n1\\n1') == '1'\nassert solution('1\\n2\\n3\\n4\\n4\\n3') == '0'\n"
    },
    {
        "number": 985,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('3\\n1 1\\n2 3\\n3 5\\n5 1\\n5 5') == 0\nassert solution('5\\n1 1\\n2 3\\n3 5\\n4 5\\n5 1\\n4 3\\n2 1\\n1 1') == 6\nassert solution('5\\n1 1\\n2 3\\n3 5\\n4 5\\n5 1\\n4 3\\n2 1\\n1 1') == 6\nassert solution('2\\n2 2\\n1 1') == 2\nassert solution('2\\n1 2\\n1 1') == 0\n"
    },
    {
        "number": 985,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''\n5\n1 1\n1 5\n3 3\n5 1\n5 5\n''') == '6'\n'''\nassert solution('''\n3\n1 1\n2 3\n3 5\n''') == '0'\n'''\nassert solution('''\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000"
    },
    {
        "number": 985,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1 1\\n1 5\\n3 3\\n5 1\\n5 5') == '6'\nassert solution('1 1\\n2 3\\n3 5\\n5 1\\n5 5') == '0'\nassert solution('3 3\\n1 1\\n2 3\\n3 5\\n5 1\\n5 5') == '0'\nassert solution('1 1\\n2 3\\n3 5\\n5 1') == '0'\nassert solution('2 2\\n1 1') == '2'\n"
    },
    {
        "number": 985,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''5''') == '6'\nassert solution('''1 1\n1 5\n3 3\n5 1\n5 5''') == '6'\nassert solution('''3''') == '0'\nassert solution('''1 1\n2 3\n3 5\n''') == '0'\nassert solution('''1 1\n1 5\n3 3\n5 1\n5 5''') == '0'\n"
    },
    {
        "number": 985,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 3\\n2 5\\n2 1\\n5 1\\n5 5\\n\") == \"6\"\nassert solution(\"4\\n1 3\\n2 5\\n1 5\\n5 1\\n5 5\\n\") == \"0\"\nassert solution(\"5\\n1 1\\n2 3\\n3 5\\n4 5\\n4 5\\n\") == \"4\"\nassert solution(\"4\\n1 3\\n2 5\\n2 1\\n5 1\\n5 5\\n\") == \"4\"\nassert solution(\"5\\n1 1\\n2 3\\n3 5\\n4 5\\n4 5\\n\") == \"0\"\n"
    },
    {
        "number": 985,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('5') == '6'\nassert solution('3') == '0'\nassert solution('1') == '0'\nassert solution('2 3') == '1'\nassert solution('3 3') == '0'\n"
    },
    {
        "number": 985,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1 1\\n1 5\\n3 3\\n5 1\\n5 5') == '6'\nassert solution('1 1\\n2 3\\n3 5\\n5 1\\n5 5') == '0'\nassert solution('5\\n2 1\\n1 2\\n1 5\\n5 5\\n5 2') == '3'\nassert solution('2\\n1 1\\n1 5\\n5 1') == '0'\nassert solution('3\\n1 1\\n1 5\\n5 1') == '0'\n"
    },
    {
        "number": 985,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1 1\\n1 5\\n3 3\\n5 1\\n5 5') == '6'\nassert solution('3\\n1 1\\n2 3\\n3 5') == '0'\nassert solution('5\\n1 1\\n2 3\\n3 5\\n4 4') == '1'\nassert solution('1\\n2\\n1') == '0'\nassert solution('1 2\\n3 4') == '0'\n"
    },
    {
        "number": 985,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('5\\n1 1\\n1 5\\n3 3\\n5 1\\n5 5\\n2 4\\n2 5\\n3 4\\n3 5\\n4 5') == '6'\nassert solution('1\\n1\\n1') == '0'\nassert solution('3\\n1 1\\n2 3\\n3 5\\n5 1\\n5 5') == '0'\n\n\n\"\"\"\n"
    },
    {
        "number": 986,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"\"\"4 80\n1 2 2 1\"\"\") == \"2\"\nassert solution(\"\"\"4 1\n1 2 2 1\"\"\") == \"3\"\nassert solution(\"\"\"4 2\n1 2 3 1\"\"\") == \"3\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 986,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 986,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('4 80\\n1 2 2 1\\n') == '2'\nassert solution('4 1\\n1 2 2 1\\n') == '3'\nassert solution('4 2\\n1 2 3 1\\n') == '3'\nassert solution('10 32 15 18 13 19 12 16 17 11 10\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\\n') == '24'\nassert solution('10 30 19 18 17 16 15 14 13 12 11 10\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\\n') == '36'\n"
    },
    {
        "number": 986,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''4 80\n1 2 2 1''') == '2'\nassert solution('''4 1\n1 2 2 1''') == '3'\nassert solution('''4 2\n1 2 3 1''') == '3'\n"
    },
    {
        "number": 986,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"4 8\") == \"\"\nassert solution(\"1 2 2 1\") == \"\"\nassert solution(\"1 2 2 1\") == \"\"\nassert solution(\"1 2 2 1\") == \"\"\n"
    },
    {
        "number": 986,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n1 2 3 1\\n\") == \"3\"\nassert solution(\"4 4\\n1 2 3 4 1\\n\") == \"4\"\nassert solution(\"1 1\\n\") == \"0\"\nassert solution(\"1 2 2 3\\n\") == \"4\"\n\"\"\""
    },
    {
        "number": 986,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''4 80\n1 2 2 1''') == '2'\nassert solution('''4 1\n1 2 2 1''') == '3'\nassert solution('''4 2\n1 2 3 1''') == '3'\nassert solution('''4 2\n1 2 2 1''') == '3'\nassert solution('''4 2\n1 2 3 1''') == '4'\n"
    },
    {
        "number": 986,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == expected\n\"\"\"\nfrom collections import Counter\nimport sys\n\nn, k = map(int, sys.stdin.readline().strip().split())\na = [int(x) - 1 for x in sys.stdin.readline().strip().split()]"
    },
    {
        "number": 986,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 986,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n"
    },
    {
        "number": 987,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1 2 3 4 5 6 7 8 9\\n1 4\\n4 7\\n2 5\\n5 8\\n3 6\\n6 9') == '7 8 9 4 5 6 1 2 3'"
    },
    {
        "number": 987,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''1 2 3 4 5 6 7 8 9\n1 4\n4 7\n2 5\n5 8\n3 6\n6 9''') == '7 8 9 4 5 6 1 2 3'\n'''"
    },
    {
        "number": 987,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(input(\"\")) == \"\"\n\"\"\"\n\n__author__ = 'Hua'\nfrom collections import deque\n"
    },
    {
        "number": 987,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1 2 3 4 5 6 7 8 9\\n1 4\\n4 7\\n2 5\\n5 8\\n3 6\\n6 9\\n') == '7 8 9 4 5 6 1 2 3'\n"
    },
    {
        "number": 987,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''9 6\n1 2 3 4 5 6 7 8 9\n1 4\n4 7\n2 5\n5 8\n3 6\n6 9''') == '7 8 9 4 5 6 1 2 3'\n\nassert solution('''4 7\n1 2 3 4 5 6 7 8 9\n1 4\n4 7\n2 5\n5 8\n3 6''') == '3 4 5 6 1 7 2 8 9'\n\nassert solution('''8 8\n2 3 4 5 6 7 8 9 1\n2 4\n4 7\n2 5\n5 8\n3 6\n6 9\n1 7\n7 8''') == '1 2 3 4 5 6 7 8 9'\n\nassert solution('''7 9\n1 2 3 4 5 6 7 8 9 1\n2 4\n4 7\n2 5\n5 8\n3 6\n6 9\n1 7\n7 8''') == '1 7 5 8 2 3 4 6 9'\n\nassert solution('''1\n2 3 4 5 6 7 8 9''') == '2 3 4 5 6 7 8 9'"
    },
    {
        "number": 987,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1 2 3 4 5 6 7 8 9\\n1 4\\n4 7\\n2 5\\n5 8\\n3 6\\n6 9') == '7 8 9 4 5 6 1 2 3'\n\"\"\"\n"
    },
    {
        "number": 987,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n''') == '7 8 9 4 5 6 1 2 3'\n"
    },
    {
        "number": 987,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 987,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''9 6\n1 2 3 4 5 6 7 8 9\n1 4\n4 7\n2 5\n5 8\n3 6\n6 9''') == '7 8 9 4 5 6 1 2 3'\n\nassert solution('''5 2\n3 5\n1 4\n5 6\n5 7\n5 8\n5 9\n5 10\n5 11''') == '3 2 1 5 4 5 6 7 8 9 10 11'\n\nassert solution('''5 2\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n1 11''') == '1 2 1 3 4 5 6 7 8 9 10 11'\n\nassert solution('''5 3\n1 2 3 4 5\n1 3\n1 5\n1 4\n1 7\n1 6\n1 8\n1 9\n1 10\n1 11''') == '1 2 3 1 4 5 6 7 8 9 10 11'\n\nassert solution('''5 5\n1 2 3 4 5\n1 3\n1 5\n1 4\n1 7\n1 6\n1 8\n1 9\n1 10\n1 11''') == '1 2 3 4 1 5 6 7 8 9 10 11'"
    },
    {
        "number": 987,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1 2 3 4 5 6 7 8 9\\n1 4\\n4 7\\n2 5\\n5 8\\n3 6\\n6 9') == '7 8 9 4 5 6 1 2 3'\n\"\"\"\n"
    },
    {
        "number": 988,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('..-**-**\\n**-**-**\\n**-**-**\\n..-**-**\\n..-**-**\\n..-**-**') == '..-**-**\\n**-**-**\\n..-**-**\\n**-P-**\\n..-**-**\\n..-**-**'\nassert solution('**-**-**\\n**-**-**\\n**-**-**\\n**-**-**\\n**-**-**\\n**-**-**') == '**-**-**\\n**-**-**\\n**-P-**\\n**-**-**\\n**-**-**'\nassert solution('**-**-*.\\n*.-*.-**\\n**-**-**\\n**-**-**\\n..-**-..\\n..-**-..\\n') == '**-**-*.\\n*.-*P-**\\n**-**-**\\n**-**-**\\n..-**-..\\n..-**-..\\n'\nassert solution('**-**-*.\\n*.-*P-**\\n**-**-**\\n**-**-**\\n..-**-..\\n..-**-..\\n') == '**-**-*.\\n*.-*P-**\\n**-**-**\\n**-**-**\\n..-**-..\\n..-**-..\\n'\nassert solution('*-**-*..\\n*-**-*..\\n*-**-*..\\n*-**-*..\\n*-**-*..\\n*-**-*..') == '*-**-*..\\n*-**-*..\\n*-P-*..\\n*-**-*..\\n*-**-*..\\n'\n"
    },
    {
        "number": 988,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('..-**-..\\n..-**-..\\n..-**-..\\n..-**-..\\n..-**-..\\n..-**-..') == '..-**-..\\n..-**-..\\n..-P.-..\\n..-..-..\\n..-..-..'\nassert solution('**-**-**\\n**-**-**\\n..-**-.*\\n**-**-**\\n..-..-..\\n..-**-..') == '**-**-**\\n**-**-**\\n..-P.-..\\n**-**-**\\n..-..-..'\nassert solution('**-**-*.\\n*.-*.-**\\n**-**-**\\n**-**-**\\n..-..-..\\n..-**-..') == '**-**-*.\\n*.-*P-**\\n**-**-**\\n**-**-**\\n..-..-..\\n..-**-..'\n"
    },
    {
        "number": 988,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''**-**-**\n*.-*.-**\n**-**-**\n**-**-**\n..-..-..\n..-**-..\n''') == '''**-**-**\n*.-*P-**\n**-**-**\n**-**-**\n..-..-..\n..-**-..'''\n\nassert solution('''**-**-*.\n*.-*.-**\n**-**-**\n**-**-**\n..-..-..\n..-**-..\n''') == '''**-**-*.\n*.-*P-**\n**-**-**\n**-**-**\n..-..-..\n..-**-..'''\n\nassert solution('''**-**-**\n*.-*.-**\n**-**-**\n**-**-**\n..-..-..\n..-**-..\n''') == '''**-**-**\n*.-*P-**\n**-**-**\n**-**-**\n..-..-..\n..-**-..'''\n\nassert solution('''**-**-*.\n*.-*.-**\n**-**-**\n**-**-**\n..-..-..\n..-**-..\n''') == '''**-**-*.\n*.-*P-**\n**-**-**\n**-**-**\n..-..-..\n..-**-..'''\n\nassert solution('''**-**-**\n*.-*.-**\n**-**-**\n**-**-**\n..-..-..\n..-**-..\n''') == '''**-**-**\n*.-*P-**\n**-**-**\n**-**-**\n..-..-..\n..-**-..'''"
    },
    {
        "number": 988,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('.-**-.*') == '**-**-*'\nassert solution('**-**-**') == '**-**-**'\nassert solution('**-**-..') == '**-P.-..'\nassert solution('**-**-..') == '**-**-..'\nassert solution('**-**-..') == '**-**-..'\n"
    },
    {
        "number": 988,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"..-**-..\") == \"..-**-..\"\nassert solution(\"**-**-**\") == \"**-**-**\"\nassert solution(\"**-**-**\") == \"**-**-**\"\nassert solution(\"..-**-.*\") == \"..-P-..\"\nassert solution(\"**-**-**\") == \"**-**-**\"\n"
    },
    {
        "number": 988,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('..-**-..') == '..-**-..'\nassert solution('**-**-**') == '**-**-**'\nassert solution('**-**-..') == '**-**-..'\nassert solution('**-**-..') == '**-**-..'\nassert solution('**-**-..') == '**-**-..'\n"
    },
    {
        "number": 988,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('..-**-..') == '..-**-..'\nassert solution('**-**-..') == '**-**-..'\nassert solution('**-**-..') == '**-**-..'\nassert solution('**-**-..') == '**-**-..'\nassert solution('..-**-..') == '..-**-..'\n"
    },
    {
        "number": 988,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('..-**-**\\n**-**-**\\n**-**-**\\n**-**-**\\n**-**-**\\n**-**-**') == '**-**-**\\n**-**-**\\n**-P-**-**\\n**-**-**\\n**-**-**\\n**-**-**'\n\nassert solution('**-**-*.\\n*.-*P-**\\n**-**-**\\n**-**-**\\n..-..-..\\n..-**-..') == '**-**-*.\\n*.-*P-**\\n**-**-**\\n**-**-**\\n..-P.-..\\n..-**-..'\n\n\n\"\"\"\n"
    },
    {
        "number": 988,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('**-**-.*') == '**-**-.*'\nassert solution('**-**-**') == '**-**-**'\nassert solution('**-**-*') == '**-**-*'\nassert solution('*.-*.-**') == '*.-*P-**'\nassert solution('**-**-**') == '**-**-**'\n"
    },
    {
        "number": 988,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\n'''..-**-..\n..-**-..\n..-..-..\n..-..-..\n..-..-..\n..-..-..\n''') == '''..-**-..\n..-**-..\n..-P.-..\n..-..-..\n..-..-..\n..-..-..\n'''\nassert solution(\n'''**-**-**\n**-**-**\n..-**-.*\n**-**-**\n..-..-..\n..-**-..\n''') == '''**-**-**\n**-**-**\n..-P.-..\n**-**-**\n..-..-..\n..-**-..\n'''\nassert solution(\n'''**-**-**\n**-**-**\n..-**-.*\n**-**-**\n..-..-..\n..-**-..\n''') == '''**-**-**\n**-**-**\n..-P.-..\n**-**-**\n..-..-..\n..-**-..\n'''\nassert solution(\n'''**-**-**\n**-**-**\n..-**-.*\n**-**-**\n..-..-..\n..-**-..\n''') == '''**-**-**\n**-**-**\n..-P.-..\n**-**-**\n..-..-..\n..-**-..\n'''\nassert solution(\n'''**-**-**\n**-**-**\n..-**-.*\n**-**-**\n..-..-..\n..-**-..\n''') == '''**-**-**\n**-**-**\n..-P.-..\n**-**-**\n..-..-..\n..-**-..\n'''\n"
    },
    {
        "number": 989,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"\"\nassert solution(\"2\") == \"\"\nassert solution(\"3\") == \"\"\nassert solution(\"4\") == \"\"\n"
    },
    {
        "number": 989,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('4 5\\n3 1 7 5\\n') == '2'\nassert solution('3 10\\n100 100 100\\n') == '0'\nassert solution('10 9\\n4 5 5 7 5 4 5 2 4 3\\n') == '1'\n\n\n-----Best Practice-----"
    },
    {
        "number": 989,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('4 5') == '2'\nassert solution('3 1 7 5') == '2'\nassert solution('3 10') == '0'\nassert solution('100 100 100') == '0'\nassert solution('4 5') == '2'\n"
    },
    {
        "number": 989,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdin\n\"\"\"\nfrom sys import stdin\nfrom functools import lru_cache\n\nn, k = map(int, stdin.readline().split())\na = list(map(int, stdin.readline().split()))\n\n@lru_cache(maxsize=None)\n"
    },
    {
        "number": 989,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"6 1\") == \"2\"\nassert solution(\"2 10\") == \"0\"\nassert solution(\"10 9\") == \"0\"\nassert solution(\"5 5\") == \"0\"\nassert solution(\"3 1 7 5\") == \"2\"\n"
    },
    {
        "number": 989,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 989,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 989,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1\\n1') == '0'\nassert solution('1\\n1\\n1\\n1') == '0'\nassert solution('1\\n1\\n1\\n1\\n1') == '0'\nassert solution('1\\n1\\n1\\n1\\n1\\n1') == '0'\nassert solution('1\\n1\\n1\\n1\\n1\\n1\\n1') == '0'\n"
    },
    {
        "number": 989,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('4 5\\n3 1 7 5\\n') == '2'\nassert solution('3 10\\n100 100 100\\n') == '0'\nassert solution('10 9\\n4 5 5 7 5 4 5 2 4 3\\n') == '1'\n\"\"\"\n"
    },
    {
        "number": 989,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == \"\"\n\n\"\"\"\n"
    },
    {
        "number": 990,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1 2\") == \"\"\nassert solution(\"1\") == \"\"\nassert solution(\"1 3\") == \"\"\nassert solution(\"2 3\") == \"\"\n"
    },
    {
        "number": 990,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"2\\n1 2\") == \"3\"\nassert solution(\"3\\n1 2\\n1 3\") == \"3\"\nassert solution(\"3\\n1 2\\n2 3\") == \"2\"\nassert solution(\"3\\n1 2\\n2 3\\n1 3\") == \"2\"\nassert solution(\"5\\n1 2\\n2 3\\n3 4\\n4 5\") == \"0\"\n"
    },
    {
        "number": 990,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 990,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('3\\n1 2\\n2 3\\n1\\n1 3\\n') == '3'\nassert solution('3\\n1 2\\n2 3\\n1\\n1 3\\n') == '3'\nassert solution('3\\n1 2\\n2 3\\n1\\n1 3\\n') == '3'\nassert solution('3\\n1 2\\n2 3\\n1\\n1 3\\n') == '3'\nassert solution('3\\n1 2\\n2 3\\n1\\n1 3\\n') == '3'\n"
    },
    {
        "number": 990,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''\n3\n1 2\n2 3\n1\n1 3\n''') == '3'\n\nassert solution('''\n5\n1 2\n2 3\n1\n1 3\n''') == '10'\n\nassert solution('''\n5\n1 2\n2 3\n2 3\n1\n2 3\n''') == '15'\n\nassert solution('''\n6\n1 2\n2 3\n1\n1 3\n2 4\n2 5\n''') == '100'\n\nassert solution('''\n4\n1 2\n2 3\n3 4\n4 5\n''') == '92'"
    },
    {
        "number": 990,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''\n3\n1 2\n2 3\n1\n1 3\n''') == '3'\nassert solution('''\n3\n1 2\n2 3\n1\n1 3\n''') == '3'\nassert solution('''\n3\n1 2\n2 3\n1\n2 3\n''') == '3'\nassert solution('''\n3\n1 2\n2 3\n2\n1 3\n''') == '2'\nassert solution('''\n3\n1 2\n2 3\n2\n1 3\n''') == '2'\n"
    },
    {
        "number": 990,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"1 2\\n2 3\\n1\\n1 3\\n\") == \"3\"\nassert solution(\"1 2\\n2 3\\n1\\n1 3\\n\") == \"3\"\nassert solution(\"1 2\\n2 3\\n1\\n1 3\\n\") == \"3\"\nassert solution(\"1 2\\n2 3\\n1\\n1 3\\n\") == \"3\"\nassert solution(\"1 2\\n2 3\\n1\\n1 3\\n\") == \"3\"\n"
    },
    {
        "number": 990,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 2\\n2 3\\n1\\n1 3\\n\") == \"3\"\nassert solution(\"4\\n1 2\\n2 3\\n3 4\\n1\\n2\\n1 3\\n\") == \"1\"\nassert solution(\"3\\n2 2\\n1 1\\n1 3\\n\") == \"2\"\nassert solution(\"4\\n1 1\\n2 1\\n1 2\\n2 3\\n\") == \"4\"\nassert solution(\"3\\n1 1\\n2 1\\n1 3\\n\") == \"4\"\n"
    },
    {
        "number": 990,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(open(\"1.in\", \"r\").read()) == \"1\"\nassert solution(open(\"2.in\", \"r\").read()) == \"10\"\nassert solution(open(\"3.in\", \"r\").read()) == \"18\"\nassert solution(open(\"4.in\", \"r\").read()) == \"86\"\nassert solution(open(\"5.in\", \"r\").read()) == \"241\"\n"
    },
    {
        "number": 990,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''\\\n3\n1 2\n2 3\n1\n1 3\n''') == '3'\nassert solution('''\\\n3\n1 2\n2 3\n1\n1 3\n''') == '3'\nassert solution('''\\\n5\n1 2\n2 4\n3 4\n4 5\n1\n2 4\n''') == '3'\nassert solution('''\\\n5\n1 2\n2 4\n3 4\n4 5\n1\n2 4\n''') == '3'\nassert solution('''\\\n5\n1 2\n2 4\n3 4\n4 5\n1\n1 3\n2\n2 3\n1\n1 3\n''') == '2'\n"
    },
    {
        "number": 991,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"1\\n1\\n1\") == \"1\"\nassert solution(\"1\\n2\\n1\") == \"2\"\nassert solution(\"1\\n2\\n1\\n2\") == \"2\"\nassert solution(\"1\\n1\\n1\\n1\") == \"2\"\nassert solution(\"1\\n1\\n1\\n1\\n1\\n1\\n1\") == \"2\"\n"
    },
    {
        "number": 991,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\n    \"3 2 1\\n1 2 1 2\\n1 3 2 4\\n1 11\\n1 2\\n2 5\") == \"2\\n14\"\nassert solution(\n    \"3 2 1\\n1 2 1 2\\n1 3 2 4\\n1 11\\n1 2\\n2 5\\n3 4 3 4\\n1 4 1 4 4\\n1 5 2 5 2\\n1 7 1 1 1\\n1 8 1 1 1\\n1 9 1 1 1\\n1 10 1 1 1\\n1 11 1 1 1\\n1 12 1 1 1\\n1 13 1 1 1\\n1 14 1 1 1\") == \"2\\n14\"\nassert solution(\n    \"2 3 1\\n1 2 1 2\\n1 3 2 4\\n1 11\\n1 2\\n2 5\") == \"2\\n14\""
    },
    {
        "number": 991,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''1 2 1 2\n1 3 2 4\n1 11\n1 2\n2 5''') == '2'\nassert solution('''2 3 1 1\n1 2 1 2\n1 3 2 4\n1 11\n1 2\n2 5''') == '14'\nassert solution('''3 2 1\n1 2 1 2\n1 3 2 4\n1 11\n1 2\n2 5''') == '2'\n\n'''\nLets assume that we have a railway network consisting of N cities numbered 1 to N.\nThe railway network is given by two vectors of size N-1. Each vector of size M. The i-th element of each vector is the bidirectional time in minutes between cities i and i+1.\nThe bidirectional time is a real number.\nAt the exchange counter in city i, you can get C_i silver coins for 1 gold coin.\nThe transaction takes D_i minutes for each silver coin you give.\nFind the minimum time needed to travel from City 1 to City t.\n\nThe railway network is shown in the figure below.\nIn this figure, each city is labeled as follows:\n - The first line: the ID number i of the city (i for City i)\n - The second line: C_i / D_i\n\nYou can travel from City 1 to City 2 in 2 minutes, as follows:\n - Use the 1-st railroad to move from City 1 to City 2 in 2 minutes.\n\nYou can travel from City 1 to City 3 in 14 minutes, as follows:\n - Use the 1-st railroad to move from City 1 to City 2 in 2 minutes.\n - At the exchange counter in City 2, exchange 3 gold coins for 3 silver coins in 6 minutes.\n - Use the 1-st railroad to move from City 2 to City 1 in 2 minutes.\n - Use the 2-nd railroad to move from City 1 to City 3 in 4 minutes.\n\nThe answer is the minimum time needed to travel from City 1 to City t.\n\nInput:\nThe first line of the input contains T denoting the number of test cases.\nThe first line of each test case contains three space-separated integers N M S.\nN is the number of cities.\nM is the number of railways.\nThe next M lines of the test case each describe a railway in the form of a pair of two space-separated integers U_i V_i A_i B_i.\nEach of the U_i, V_i, A_i, B_i are distinct positive integers and denote the ID numbers of cities i and i+1.\nThe next line contains a single integer C denoting the number of silver coins.\nThe next line contains a single integer D denoting the number of minutes.\nOutput:\nFor each test case, output a single line containing the answer.\n\nConstraints:\n1 \\leq T \\leq 10^3\n1 \\leq N \\leq 10^5\n1 \\leq M \\leq 100\n0 \\leq S \\leq 10^9\n1 \\leq A_i \\leq 50\n1 \\leq B_i,C_i,D_i \\leq 10^9\n1 \\leq U_i < V_i \\leq N\nEach city t=2,...,N can be reached from City 1 with some number of railroads.\nEach value of A_i, B_i, D_i can be positive and small enough to fit in a 32 bit integer.\n\nInput:\n10\n10 10 1 1\n2 5 1 2\n3 2 1 2\n3 2 1 2\n1 11\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2"
    },
    {
        "number": 991,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\n    '3 2 1\\n1 2 1 2\\n1 3 2 4\\n1 11\\n1 2\\n2 5') == '2\\n14\\n'\n\nprint(solution(input()))\n"
    },
    {
        "number": 991,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"3 2 1\\n1 2 1 2\\n1 3 2 4\\n1 11\\n1 2\\n2 5\") == \"2\\n14\"\nassert solution(\"3 2 1\\n1 2 1 2\\n1 3 2 4\\n1 11\\n1 2\\n2 5\") == \"2\\n14\"\nassert solution(\"2 2 1\\n1 2 1 2\\n1 2 1 2\") == \"2\\n10\"\nassert solution(\"1 2 1 2\\n1 2 1 2\") == \"2\\n10\"\nassert solution(\"2 2 1\\n1 2 1 2\\n1 2 1 2\") == \"2\\n10\"\n"
    },
    {
        "number": 991,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"1 2 1 2\") == \"2\"\nassert solution(\"1 3 2 4\") == \"14\"\nassert solution(\"1 11\") == \"2\"\nassert solution(\"1 2\") == \"14\"\nassert solution(\"2 5\") == \"2\"\n"
    },
    {
        "number": 991,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('1 2 1 2\\n1 3 2 4\\n1 11\\n1 2\\n2 5') == '2\\n14'\n\"\"\"\n"
    },
    {
        "number": 991,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\n'''3 2 1\n1 2 1 2\n1 3 2 4\n1 11\n1 2\n2 5\n''') == '2'\nassert solution(\n'''3 2 1\n1 2 1 2\n1 3 2 4\n1 11\n1 2\n2 5\n''') == '14'\nassert solution(\n'''6 6 2\n1 2 1 2 1 2\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1"
    },
    {
        "number": 991,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''3 2 1\n1 2 1 2\n1 3 2 4\n1 11\n1 2\n2 5''') == '2'\nassert solution('''4 7 4\n1 2 4\n1 3 2\n1 4 4\n2 4 2\n1 5 2\n1 6 2\n2 5 2\n2 6 2\n2 7 2\n1 6\n1 5\n2 7\n2 5\n2 4\n2 3\n2 6\n2 5\n2 7\n2 6\n2 4\n1 6\n1 5\n2 7\n2 5\n2 4\n2 3\n2 6\n2 5\n2 7\n2 6\n2 4\n2 3\n1 6\n1 5\n2 7\n2 5\n2 4\n2 3''') == '10'\nassert solution('''6 7 3\n1 2 2\n1 3 3\n1 4 2\n1 5 1\n1 6 1\n1 7 2\n2 4 3\n2 5 3\n2 6 3\n2 7 3\n2 5 2\n2 6 2\n2 7 2\n2 5 1\n2 6 1\n2 7 1\n1 6\n1 5\n2 7\n2 5\n2 4\n2 3''') == '32'\n\n\"\"\"\nAn interesting problem. Not even sure how to solve it.\n\"\"\""
    },
    {
        "number": 991,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n3 2 1\n1 2 1 2\n1 3 2 4\n1 11\n1 2\n2 5\n\"\"\") == \"\"\"\n2\n14\n\"\"\"\n"
    },
    {
        "number": 992,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1 4') == '6'\nassert solution('2 4') == '6'\nassert solution('3 4') == '5'\nassert solution('4 1') == '5'\nassert solution('4 2') == '5'\n"
    },
    {
        "number": 992,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\n'''3 4\n2 2 4'''\n) == '6'\nassert solution(\n'''6 5\n1 1 1 1 1 1'''\n) == '7'\nassert solution(\n'''30 50\n
    },
    {
        "number": 992,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''3 4\n2 2 4''') == '6'\nassert solution('''1 5\n1 1 1 1 1''') == '4'\nassert solution('''2 4\n2 2 4''') == '6'\nassert solution('''1 5\n1 1 1 1 1''') == '4'\nassert solution('''3 4\n2 2 4''') == '6'\n"
    },
    {
        "number": 992,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 992,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\n    '3 4\\n2 2 4'\n) == '6'\n\"\"\"\n\nN, S = stdin.strip().split(' ')\nN, S = int(N), int(S)\nA = [int(x) for x in stdin.strip().split(' ')]"
    },
    {
        "number": 992,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\n'''2 4\n2 2 4''') == '6'\n"
    },
    {
        "number": 992,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"3 4\\n2 2 4\") == \"6\"\nassert solution(\"3 4\\n2 2 4\") == \"6\"\nassert solution(\"3 4\\n1 2 4\") == \"3\"\nassert solution(\"3 4\\n1 2 4\") == \"3\"\nassert solution(\"3 4\\n1 2 4\") == \"3\"\n"
    },
    {
        "number": 992,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1 2\\n3 4') == '6'\n\"\"\"\n\nfrom __future__ import annotations\n\nT = int(input())\nN, S = map(int, input().split())\nA = list(map(int, input().split()))"
    },
    {
        "number": 992,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"2 2 4\") == \"6\"\nassert solution(\"3 4\") == \"0\"\nassert solution(\"1 2 2\") == \"1\"\nassert solution(\"1 1 1\") == \"5\"\nassert solution(\"1 1 2\") == \"5\"\n"
    },
    {
        "number": 992,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1 2') == '0'\nassert solution('2 1') == '0'\nassert solution('1 2 3') == '1'\nassert solution('1 2 3 4') == '2'\nassert solution('1 2 3 4 5') == '6'\n\"\"\"\n"
    },
    {
        "number": 993,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == expected\n"
    },
    {
        "number": 993,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('3 2\\n4 1 5') == '3'\nassert solution('3 2\\n4 1 5\\n1 1') == '3'\nassert solution('3 2\\n4 1 5\\n1 1\\n1 2') == '3'\nassert solution('3 2\\n4 1 5\\n1 1\\n1 2\\n1 1') == '3'\nassert solution('3 2\\n4 1 5\\n1 1\\n1 2\\n1 1\\n1 2') == '3'\n"
    },
    {
        "number": 993,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 993,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"1 2\") == \"3\"\nassert solution(\"1 2 3\") == \"1\"\nassert solution(\"1 2 3 4\") == \"0\"\nassert solution(\"3 4 1 2 3\") == \"2\"\nassert solution(\"10 10 10 10\") == \"4\"\n"
    },
    {
        "number": 993,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('4 1 5') == '3'\nassert solution('3 2') == '1'\nassert solution('4 3') == '1'\nassert solution('1 2') == '1'\nassert solution('4 5') == '3'\n"
    },
    {
        "number": 993,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('3 2\\n4 1 5') == '3'\nassert solution('3 2\\n2 2') == '0'\nassert solution('3 2\\n4 2') == '1'\nassert solution('3 2\\n5 2') == '2'\nassert solution('3 2\\n4 3') == '1'\n"
    },
    {
        "number": 993,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('4 1 5') == '3'\nassert solution('2 2') == '1'\nassert solution('4 2') == '1'\nassert solution('2 3') == '2'\nassert solution('5 5') == '0'\n"
    },
    {
        "number": 993,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 993,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('4 2') == '3'\nassert solution('2 2') == '0'\nassert solution('2 3') == '1'\nassert solution('3 2') == '1'\nassert solution('3 3') == '2'\n"
    },
    {
        "number": 993,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"3 2\") == \"3\"\nassert solution(\"4 1 5\") == \"3\"\nassert solution(\"3 2\") == \"3\"\nassert solution(\"9 7\") == \"5\"\n"
    },
    {
        "number": 994,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('8 2\\n2 0\\n7 0\\n') == '2'\nassert solution('8 3\\n2 0\\n7 0\\n8 3\\n') == 'IMPOSSIBLE'\nassert solution('8 3\\n2 0\\n7 0\\n8 3\\n') == 'IMPOSSIBLE'\nassert solution('8 3\\n2 0\\n7 0\\n8 3\\n') == 'IMPOSSIBLE'\nassert solution('8 3\\n2 0\\n7 0\\n8 3\\n') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 994,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('8 2') == '2'\nassert solution('8 3') == 'IMPOSSIBLE'\nassert solution('2 2') == '2'\nassert solution('3 2') == 'IMPOSSIBLE'\nassert solution('5 4') == 'IMPOSSIBLE'\n\n\n\n\n\n###"
    },
    {
        "number": 994,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\n    '''\n8 2\n2 0\n7 0\n''') == '2'\n\nassert solution(\n    '''\n8 3\n2 0\n7 0\n8 3\n''') == 'IMPOSSIBLE'\n\nassert solution(\n    '''\n5 1\n0 0\n1 1\n2 2\n3 3\n''') == '2'\n\nassert solution(\n    '''\n5 2\n2 0\n7 0\n8 3\n''') == 'IMPOSSIBLE'\n\nassert solution(\n    '''\n5 2\n0 0\n1 1\n3 3\n4 4\n''') == '4'"
    },
    {
        "number": 994,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('8 2\\n2 0\\n7 0') == '2'\nassert solution('8 3\\n2 0\\n7 0\\n8 3') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 994,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('8 3\\n2 0\\n7 0\\n8 3\\n') == 'IMPOSSIBLE'\nassert solution('2 3\\n0 0\\n7 0\\n8 3\\n') == '2'\nassert solution('5 5\\n0 0\\n1 0\\n2 0\\n4 0\\n4 0\\n3 4\\n') == 'IMPOSSIBLE'\nassert solution('3 2\\n1 1\\n2 0\\n') == 'IMPOSSIBLE'\nassert solution('5 5\\n0 0\\n1 0\\n2 0\\n4 0\\n4 0\\n3 4\\n') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 994,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('2 3\\n1 0\\n8 3\\n1 0\\n1 0\\n') == 'IMPOSSIBLE'\nassert solution('1 2\\n1 0\\n2 0\\n1 0\\n1 0\\n') == '2'\nassert solution('1 2\\n1 0\\n2 0\\n1 0\\n1 0\\n') == 'IMPOSSIBLE'\nassert solution('1 2\\n1 0\\n2 0\\n2 0\\n1 0\\n1 0\\n') == 'IMPOSSIBLE'\nassert solution('1 2\\n1 0\\n2 0\\n1 1\\n1 0\\n2 0\\n1 0\\n1 0\\n') == '2'\n"
    },
    {
        "number": 994,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(input_1) == output_1\nassert solution(input_2) == output_2\nassert solution(input_3) == output_3\nassert solution(input_4) == output_4\nassert solution(input_5) == output_5"
    },
    {
        "number": 994,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''8 2\n2 0\n7 0''') == '2'\n\nassert solution('''8 3\n2 0\n7 0\n8 3\n''') == 'IMPOSSIBLE'\n\nassert solution('''8 10\n2 0\n7 0\n8 3\n2 0\n8 0\n7 0\n8 3\n''') == 'IMPOSSIBLE'\n\nassert solution('''8 10\n2 0\n7 0\n8 3\n2 0\n8 0\n7 0\n8 3\n''') == '9'\n\nassert solution('''8 5\n2 0\n7 0\n8 3\n2 0\n8 0\n7 0\n8 3\n''') == '9'"
    },
    {
        "number": 994,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''8 2\n2 0\n7 0''') == '2'\nassert solution('''8 3\n2 0\n7 0\n8 3\n''') == 'IMPOSSIBLE'\nassert solution('''8 4\n2 0\n7 0\n8 3\n9 2\n''') == 'IMPOSSIBLE'\nassert solution('''4 1\n3\n1\n1\n2\n''') == 'IMPOSSIBLE'\nassert solution('''5 2\n2 0\n3 1\n3 2\n3 3\n4 1\n''') == '3'\n"
    },
    {
        "number": 994,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('2 3\\n2 0\\n7 0\\n8 3') == 'IMPOSSIBLE'\nassert solution('2 3\\n2 0\\n7 0\\n8 5') == '5'\nassert solution('2 3\\n2 0\\n7 0\\n8 5\\n5 4\\n7 1\\n3 3\\n4 4') == '5'\n"
    },
    {
        "number": 995,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''5\n5 -4 2 1 8''') == '5 5 3 2 0'\nassert solution('''1\n0''') == '1'\nassert solution('''0''') == '1'\nassert solution('''5''') == '1 1 1 1 1'\nassert solution('''5\n-4 2 1 8''') == '5 5 3 2 0'\n"
    },
    {
        "number": 995,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 995,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''5 5''') == '''3 0'''\nassert solution('''5 -4 2 1 8''') == '''5 5 3 2 0'''\nassert solution('''0''') == '''1'''\nassert solution('''5''') == '''0'''\nassert solution('''5 -4 2 1 8''') == '''5 5 3 2 0'''\n"
    },
    {
        "number": 995,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\n'''5 5\n5 -4 2 1 8''') == '3 0'\nassert solution(\n'''5\n5 -4 2 1 8''') == '5 5 3 2 0'\nassert solution(\n'''1\n0''') == '1'\nprint('Test cases passed')\n"
    },
    {
        "number": 995,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 995,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\n'''5\n5 -4 2 1 8'''\n    ) == '5 5 3 2 0'\nassert solution(\n'''5\n5 -4 2 1 8'''\n    ) == '5 5 3 2 0'\nassert solution(\n'''3\n-1 2 -3'''\n    ) == '0 0 0'\nassert solution(\n'''2\n-1'''\n    ) == '0'\nassert solution(\n'''3\n-1 2 -3'''\n    ) == '0 0 0'\n"
    },
    {
        "number": 995,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('1\\n0') == '1'\nassert solution('5\\n5 -4 2 1 8') == '5 5 3 2 0'\nassert solution('3\\n5 -4 2 1 8') == '5 5 3 2 0'\nassert solution('5\\n5 -4 2 1 8') == '5 5 3 2 0'\nassert solution('1\\n0') == '1'\n"
    },
    {
        "number": 995,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1') == 1\nassert solution('2') == 1\nassert solution('3') == 2\nassert solution('4') == 3\nassert solution('5') == 5\n"
    },
    {
        "number": 995,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"3\\n-2 1 3 -2\") == \"3 0\"\nassert solution(\"3\\n1 1 -2 1 -2\") == \"0 1\"\nassert solution(\"3\\n-2 1 -2 1 -2\") == \"3 0\"\nassert solution(\"3\\n-2 1 -2 1 -2\") == \"3 0\"\n"
    },
    {
        "number": 995,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"\"\nassert solution(\"1 1\") == \"\"\nassert solution(\"-1 -1\") == \"\"\nassert solution(\"1 -1 -1 1\") == \"\"\n"
    },
    {
        "number": 996,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1 1 10') == 0\nassert solution('2 2 3') == 2\nassert solution('3 3 3') == 19\nassert solution('1 1 10\\n1 1 10\\n111\\n111\\n111') == 19\n"
    },
    {
        "number": 996,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"2 3 3\") == \"2\"\nassert solution(\"1 1 10\") == \"0\"\nassert solution(\"3 3 3\") == \"19\"\nassert solution(\"2 2 3\") == \"0\"\nassert solution(\"3 3 3\") == \"19\"\n"
    },
    {
        "number": 996,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 996,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('2 2 3\\n000\\n000\\n') == '2'\nassert solution('3 3 3\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111\\n111"
    },
    {
        "number": 996,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('2 2 3') == '2'\nassert solution('3 3 3') == '19'\nassert solution('1 1 10') == '0'\nassert solution('3 3 3') == '19'\nassert solution('1 1 10') == '0'\n"
    },
    {
        "number": 996,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\n'''"
    },
    {
        "number": 996,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('0 2 3') == '2'\nassert solution('3 3 3') == '19'\nassert solution('1 1 10') == '0'\nassert solution('3 3 3') == '0'\nassert solution('0 1 10') == '0'\n"
    },
    {
        "number": 996,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 996,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''2 2 3''') == '2'\nassert solution('''3 3 3''') == '19'\nassert solution('''1 1 10''') == '0'\nassert solution('''1 1 100''') == '0'\nassert solution('''1 1 100000''') == '0'\n"
    },
    {
        "number": 996,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 997,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"aba,123;1a;0\") == \"123,0\"\nassert solution(\"1;;01,a0,\") == \"1,01,a0,\"\nassert solution(\"1\") == \"1\"\nassert solution(\"a\") == \"-\"\nassert solution(\"\") == \"-\"\n"
    },
    {
        "number": 997,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"aba,123;1a;0\") == \"123,0\"\nassert solution(\"1;;01,a0,\") == \"1\"\nassert solution(\"1\") == \"1\"\nassert solution(\"a\") == \"-\\n\"\nassert solution(\"a,1,b,2,3,4\") == \"-\\n\"\n"
    },
    {
        "number": 997,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"aba,123;1a;0\") == \"123,0\"\nassert solution(\"1;;01,a0,\") == \"1\"\nassert solution(\"a\") == \"\"\nassert solution(\"\") == \"-\"\n\n\"\"\"\n"
    },
    {
        "number": 997,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''aba,123;1a;0''') == '''\"123,0\"\n\"aba,1a\"'''\nassert solution('''1;;01,a0,''') == '''\"1\"\n\",01,a0,\"'''\nassert solution('''1''') == '''-'''\nassert solution('''a''') == '''-'''\n\nassert solution('''aba,123;1a;0''') == '''\"123,0\"\n\"aba,1a\"'''\n"
    },
    {
        "number": 997,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"aba,123;1a;0\") == \"123,0\"\nassert solution(\"1;;01,a0,\") == \"1\"\nassert solution(\"a\") == \"-1\"\nassert solution(\"\") == \"-1\"\nassert solution(\"aba\") == \"-1\"\n"
    },
    {
        "number": 997,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"1,a,2;b,c,3;d,e,4\") == \"1,a,2,b,c,3,d,e,4\"\nassert solution(\";;;\") == \",\"\nassert solution(\"0,1;2,3;4,5,6\") == \"0,1,2,3,4,5,6\"\nassert solution(\"a,b,c,d,e\") == \"a,b,c,d,e\"\nassert solution(\"\") == \"\"\n"
    },
    {
        "number": 997,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 997,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"aba,123;1a;0\") == \"123,0\"\nassert solution(\"1;;01,a0,\") == \"1\"\nassert solution(\"1\") == \"\"\nassert solution(\"a\") == \"-\", \"\"\nassert solution(\"ab\") == \"ab\", \"\"\n"
    },
    {
        "number": 997,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('aba,123;1a;0') == '\"123,0\"\\n\"aba,1a\"'\nassert solution('1;;01,a0,') == '\"1\"\\n\",01,a0,\"'\nassert solution('a') == '-'\nassert solution('1') == '\"1\"'\nassert solution('1,0') == '\",0\"'\n"
    },
    {
        "number": 997,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"aba,123;1a;0\") == \"123,0\"\nassert solution(\"1;;01,a0,\") == \"1\"\nassert solution(\"1\") == \"-\"\nassert solution(\"a\") == \"-\"\n\"\"\"\nimport sys"
    },
    {
        "number": 998,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''3 5''') == '3'\nassert solution('''2 4''') == '3'\nassert solution('''1 1''') == '0'\nassert solution
    },
    {
        "number": 998,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"1 1\") == \"0\"\nassert solution(\"2 4\") == \"3 1 3\"\nassert solution(\"3 5\") == \"3\"\nassert solution(\"2 4\") == \"3 1 3\"\nassert solution(\"1 1\") == \"0\"\n"
    },
    {
        "number": 998,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('3 5') == '3\\n6 1 3'\nassert solution('2 4') == '3\\n1 3 1'\nassert solution('1 1') == '0'\nassert solution('1 1 1 1') == '1 1 1 1'\nassert solution('3 4') == '3\\n1 3 1'\n"
    },
    {
        "number": 998,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('3 5') == '3'\nassert solution('2 4') == '3'\nassert solution('1 1') == '0'\nassert solution('2 2') == '1'\nassert solution('1 1') == '0'\n\n\"\"\"\n"
    },
    {
        "number": 998,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(input_stream) == output_stream\n"
    },
    {
        "number": 998,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n"
    },
    {
        "number": 998,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n\n\"\"\"\nBelow is the algorithm.\n1. Define a function:\n    - fn(n, x)\n        - fn returns the array with XOR equal to x.\n    - fn(n, x) = [ a,b,c,d,e,f,g,h ]\n2. Define the logic:\n    - (a) we can have any number of 1's in the array.\n    - (b) if we do not have any 1's in the array, we can have any number of 0's.\n    - (c) if we have no 0's or 1's, we can have the remaining digits of the number.\n3. Define the main function:\n    - main():\n        - n, x = map(int, stdin.split())\n        - return fn(n, x)\n4. Print the result:\n    - result = main()\n    - print(result)\n5. Define a helper function:\n    - return fn(n, x)\n6. Define the time complexity:\n    - O(n)\n7. Define the space complexity:\n    - O(n)\n8. Test the algorithm:\n    - try:\n        - assert solution(stdin) == stdout\n    - except AssertionError as e:\n        - raise AssertionError(e)\n\"\"\"\n"
    },
    {
        "number": 998,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('3 5') == '3'\nassert solution('2 4') == '3'\nassert solution('1 1') == '0'\nassert solution('10 1024') == '0'\n\n\n\n\n\n\"\"\"\n"
    },
    {
        "number": 998,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"5 4\\n\") == \"3\"\nassert solution(\"1 1\\n\") == \"0\"\nassert solution(\"3 5\\n\") == \"3\"\nassert solution(\"2 4\\n\") == \"3\"\nassert solution(\"1 1\\n\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 998,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('3 5') == '3'\nassert solution('2 4') == '3 1 3'\nassert solution('1 1') == '0'\nassert solution('2 4') == '3 1 3'\nassert solution('2 2') == '0'\n"
    },
    {
        "number": 999,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1 5\\n2 6\\n2 3\\n2') == '3'\nassert solution('2\\n2 4\\n1 4') == '0'\nassert solution('3\\n1 5\\n2 6\\n3 7\\n2') == '0'\nassert solution('3\\n1 5\\n2 6\\n3 7\\n2\\n2 4') == '0'\nassert solution('3\\n1 5\\n2 6\\n3 7\\n2\\n2 4\\n1 4') == '0'\n"
    },
    {
        "number": 999,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('3\\n1 5\\n2 6\\n2 3\\n2\\n2 4\\n6 8') == '3'\nassert solution('3\\n1 5\\n2 6\\n3 7\\n2\\n2 4\\n1 4') == '0'\nassert solution('3\\n1 5\\n2 6\\n2 3\\n3 7\\n2\\n2 4\\n1 4') == '0'\nassert solution('3\\n1 5\\n2 6\\n3 7\\n2\\n2 4\\n1 4') == '0'\nassert solution('3\\n1 5\\n2 6\\n2 3\\n3 7\\n2\\n2 4\\n1 4') == '0'\n\n\n\"\"\"\n"
    },
    {
        "number": 999,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"\"\"3\n1 5\n2 6\n2 3\n2\n2 4\n6 8\"\"\") == \"3\"\nassert solution(\"\"\"3\n1 5\n2 6\n3 7\n2\n2 4\n1 4\n\"\"\") == \"0\"\nassert solution(\"\"\"3\n1 5\n2 6\n3 7\n2\n2 4\n6 8\n\"\"\") == \"0\"\nassert solution(\"\"\"3\n1 5\n2 6\n3 7\n4\n2 4\n6 8\n\"\"\") == \"0\"\nassert solution(\"\"\"3\n1 5\n2 6\n3 7\n4\n2 4\n5 8\n\"\"\") == \"3\"\n"
    },
    {
        "number": 999,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == '0'\n"
    },
    {
        "number": 999,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"1 2\\n1 3\\n2 4\\n2 5\") == \"0\"\nassert solution(\"1 5\\n2 6\\n2 3\\n2 4\\n2 5\") == \"3\"\nassert solution(\"1 5\\n2 6\\n3 7\\n2 4\\n2 5\") == \"0\"\nassert solution(\"1 5\\n2 6\\n3 7\\n2 4\\n2 5\") == \"0\"\nassert solution(\"1 2\\n1 3\\n2 4\\n2 5\") == \"0\"\n"
    },
    {
        "number": 999,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"1 5\") == \"3\"\nassert solution(\"2 6\") == \"3\"\nassert solution(\"2 3\") == \"0\"\nassert solution(\"2\") == \"0\"\n"
    },
    {
        "number": 999,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n"
    },
    {
        "number": 999,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(input(\"\")) == \"10\"\n\"\"\"\n"
    },
    {
        "number": 999,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"\"\"3\n1 5\n2 6\n2 3\n2\n2 4\n1 4\"\"\") == \"0\"\n\nassert solution(\"\"\"3\n1 5\n2 6\n3 7\n2\n2 4\n1 4\"\"\") == \"3\"\n\nassert solution(\"\"\"4\n1 3\n2 4\n2 3\n2\n2 1\n1 3\n1 2\n3 2\n3 2\n3 2\n1 3\n1 2\n3 2\"\"\") == \"3\"\n\nassert solution(\"\"\"5\n1 3\n2 4\n2 3\n2\n2 1\n1 3\n1 2\n3 2\n3 2\n3 2\n1 3\n1 2\n3 2\"\"\") == \"1\"\n\nassert solution(\"\"\"10\n1 3\n2 4\n2 3\n2\n2 1\n1 3\n1 2\n3 2\n3 2\n3 2\n3 2\n1 3\n1 2\n3 2\"\"\") == \"0\""
    },
    {
        "number": 999,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 1000,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdin\n\nIn the third example, Sasha can buy $1$ liters of fuel in the first city, drive to the second city, spend $1$ liter of fuel on it, then buy $1$ liters of fuel in the second city and then spend $1$ liter of fuel in the third city. The answer is $1+1+1=3$.\n\"\"\"\n"
    },
    {
        "number": 1000,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(input()) == \"4\"\n\nassert solution(input()) == \"6\""
    },
    {
        "number": 1000,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 1000,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('4 2') == '4'\nassert solution('7 6') == '6'\n\n\n-----Best Practice-----"
    },
    {
        "number": 1000,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1 2') == '4'\nassert solution('7 6') == '6'\nassert solution('15 6') == '13'\nassert solution('100 100') == '0'\n\"\"\"\n"
    },
    {
        "number": 1000,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\n'''4 2''') == '4'\nassert solution(\n'''7 6''') == '6'\nassert solution(\n'''20 100''') == '19999'\nassert solution(\n'''10 500''') == '4999'"
    },
    {
        "number": 1000,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''4 2''') == '4'\nassert solution('''7 6''') == '6'\nassert solution('''8 9''') == '9'\nassert solution('''500 10''') == '500'\nassert solution('''5100 100''') == '5100'\n"
    },
    {
        "number": 1000,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('4 2') == '4'\nassert solution('7 6') == '6'\nassert solution('1 100') == '100'\nassert solution('2 15') == '11'\nassert solution('2 1') == '1'\n"
    },
    {
        "number": 1000,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('3 2') == '1'\nassert solution('4 6') == '6'"
    },
    {
        "number": 1000,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 1001,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('3\\n2 4 8') == '14'\nassert solution('4\\n1 -7 -2 3') == '-3'\nassert solution('4\\n1 7 4 -2') == '4'\nassert solution('5\\n2 -8 -7 -6 -5') == '0'\n"
    },
    {
        "number": 1001,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('3\\n2 4 8') == '14'\nassert solution('4\\n1 -7 -2 3') == '-3'\n\n\n\"\"\"\n"
    },
    {
        "number": 1001,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''\n1\n1 -1 -1\n''') == '0'\nassert solution('''\n2\n2 4 8\n''') == '14'\nassert solution('''\n3\n1 -7 -2 3\n''') == '-3'\nassert solution('''\n4\n1 -7 -2 3 4\n''') == '-3'\nassert solution('''\n6\n1 -3 -2 3 2 -1\n''') == '3'\n"
    },
    {
        "number": 1001,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\n    '''3'''\n) == '14'\nassert solution(\n    '''4'''\n) == '-3'\nassert solution(\n    '''1 -7 -2 3'''\n) == '-3'\nassert solution(\n    '''1 -7 -2 -3'''\n) == '14'\nassert solution(\n    '''2 4 8'''\n) == '14'\n"
    },
    {
        "number": 1001,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"3\\n2 4 8\\n\") == \"14\"\nassert solution(\"4\\n1 -7 -2 3\\n\") == \"-3\"\nassert solution(\"4\\n-7 -2 3\\n\") == \"-3\"\nassert solution(\"4\\n1 -7 -2 3\\n\") == \"-3\"\nassert solution(\"4\\n1 1 2 3\\n\") == \"-4\"\n"
    },
    {
        "number": 1001,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdin\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 1001,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 -7 -2 3\") == \"-3\"\nassert solution(\"3\\n2 4 8\") == \"14\"\nassert solution(\"5\\n1 -7 -2 3 4 -5\") == \"0\"\nassert solution(\"10\\n1 -7 -2 3 4 -5 6 -8 -10 -9 -11 -13 -15 -17 -19 -21\") == \"36\"\nassert solution(\"1\\n1\") == \"0\"\n"
    },
    {
        "number": 1001,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"14\"\nassert solution(\"4\") == \"-3\"\nassert solution(\"2 4 8\") == \"14\"\nassert solution(\"1 -7 -2 3\") == \"-3\"\nassert solution(\"1 -7 -2\") == \"-3\"\n"
    },
    {
        "number": 1001,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"1\"\nassert solution(\"3\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"4\") == \"3\"\n"
    },
    {
        "number": 1001,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 -7 -2 3\") == \"14\"\nassert solution(\"5\\n-4 -1 -1 -3\") == \"-4\"\nassert solution(\"10\\n-3 -1 -4 -2 -5 -6 -7 -8 -9 -10\") == \"8\""
    },
    {
        "number": 1002,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 1002,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 1002,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''3 30\n2 2 1''') == '5'\nassert solution('''3 20\n2 1 1''') == '-1'\nassert solution('''3 60\n1 1 1''') == '-1'\nassert solution('''3 1\n1 1 1''') == '0'\nassert solution('''1 10\n1 1 1''') == '1'\n"
    },
    {
        "number": 1002,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('3 30') == '5'\nassert solution('3 20') == '-1'\nassert solution('2 1 1') == '-1'\nassert solution('3 2 1') == '1'\nassert solution('2 1 1') == '-1'\n"
    },
    {
        "number": 1002,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(input(\"\")) == \"5\"\nassert solution(input(\"\")) == \"-1\"\nassert solution(input(\"\")) == \"5\"\nassert solution(input(\"\")) == \"5\"\nassert solution(input(\"\")) == \"5\"\n"
    },
    {
        "number": 1002,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('3 30') == '5'\nassert solution('3 30') == '-1'\nassert solution('5 20') == '-1'\nassert solution('2 1 1') == '-1'\nassert solution('3 5') == '-1'\n"
    },
    {
        "number": 1002,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('3 30\\n2 2 1') == '5'\nassert solution('3 20\\n2 1 1') == '-1'\nassert solution('3 40\\n2 1 1') == '-1'\nassert solution('3 40\\n2 1 1') == '-1'\nassert solution('3 40\\n2 1 1') == '-1'\n"
    },
    {
        "number": 1002,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 1002,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('3 30') == '5'\nassert solution('3 20') == '-1'\nassert solution('1 1 1') == '-1'\nassert solution('1 2 1') == '-1'\nassert solution('1 1 1') == '-1'\n"
    },
    {
        "number": 1002,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('3 30\\n2 2 1\\n') == '5'\nassert solution('3 20\\n2 1 1\\n') == '-1'\nassert solution('3 30\\n2 1 1\\n') == '-1'\nassert solution('3 30\\n2 1 1\\n') == '-1'\n\n\n-----Similar Problems-----\n\nhttps://www.hackerrank.com/challenges/sock-merchant/problem\nhttps://www.hackerrank.com/challenges/the-birthday-bar/problem\nhttps://www.hackerrank.com/challenges/ctci-bfs-shortest-reach/problem\nhttps://www.hackerrank.com/challenges/electronics-shop/problem\nhttps://www.hackerrank.com/challenges/minimum-time-required/problem\nhttps://www.hackerrank.com/challenges/hamming-distance/problem\nhttps://www.hackerrank.com/challenges/lightbulb-change/problem\nhttps://www.hackerrank.com/challenges/jumping-on-the-clouds/problem\nhttps://www.hackerrank.com/challenges/repeated-string/problem\nhttps://www.hackerrank.com/challenges/smallest-multiple-of-five/problem\nhttps://www.hackerrank.com/challenges/kangaroo/problem\nhttps://www.hackerrank.com/challenges/minimum-swaps-2/problem\nhttps://www.hackerrank.com/challenges/time-conversion/problem\nhttps://www.hackerrank.com/challenges/sock-merchant/problem\nhttps://www.hackerrank.com/challenges/camelcase/problem\nhttps://www.hackerrank.com/challenges/strange-advertising/problem\nhttps://www.hackerrank.com/challenges/statistics-median/problem\nhttps://www.hackerrank.com/challenges/new-year-chaos/problem\nhttps://www.hackerrank.com/challenges/sherlock-and-the-beast/problem\nhttps://www.hackerrank.com/challenges/toeplitz-matrix/problem\nhttps://www.hackerrank.com/challenges/matrix-diagonal-sum/problem\nhttps://www.hackerrank.com/challenges/data-structures-queue/problem\nhttps://www.hackerrank.com/challenges/jumping-on-the-clouds/problem\nhttps://www.hackerrank.com/challenges/zigzag-index-ii/problem\n\n\"\"\"\n"
    },
    {
        "number": 1003,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('2 2') == '3'\nassert solution('9 3') == '13'\nassert solution('3 2') == '1'\nassert solution('1 2') == '0'\nassert solution('0 3') == '0'\n"
    },
    {
        "number": 1003,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('2 2') == '3'\nassert solution('9 3') == '13'\n"
    },
    {
        "number": 1003,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('2 2') == '3'\nassert solution('9 3') == '13'\nassert solution('4 7') == '5'\nassert solution('6 5') == '6'\nassert solution('2 4') == '3'\n"
    },
    {
        "number": 1003,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('3 2') == '13'\nassert solution('9 3') == '13'\nassert solution('9 2') == '13'\nassert solution('3 4') == '5'\nassert solution('8 4') == '7'\n"
    },
    {
        "number": 1003,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('2 2') == '3'\nassert solution('9 3') == '13'\nassert solution('1 1') == '0'\nassert solution('9 9') == '0'\nassert solution('7 2') == '5'\n"
    },
    {
        "number": 1003,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\n"
    },
    {
        "number": 1003,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('2 2') == '3'\nassert solution('9 3') == '13'\nassert solution('1 10') == '10'\nassert solution('2 5') == '6'\nassert solution('1000 10000') == '4001'\n"
    },
    {
        "number": 1003,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('3 2') == '13'\nassert solution('9 3') == '13'\nassert solution('10 10') == '20'\nassert solution('100 100') == '500'\nassert solution('1000 1000') == '5000'\n"
    },
    {
        "number": 1003,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('2 2') == '3'\nassert solution('9 3') == '13'\nassert solution('5 10') == '5'\nassert solution('5 9') == '10'\nassert solution('10 7') == '10'\n"
    },
    {
        "number": 1003,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('2 3') == '13'\nassert solution('9 3') == '13'\nassert solution('9 4') == '13'\nassert solution('9 8') == '13'\nassert solution('9 6') == '13'\n"
    },
    {
        "number": 1004,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('2\\n-5 5 -5 -5 -2') == '-1\\n2\\n2 4\\n2'\nassert solution('3\\n-8 1 1') == '-1'\nassert solution('6\\n2 5 -5 5 -5 -2') == '1\\n2 6\\n2 4 2'\nassert solution('6\\n2 5 -5 5 -5 -2') == '-1'\nassert solution('3\\n-8 1 1') == '-1'\n"
    },
    {
        "number": 1004,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''6\n1 7 -7 3 -1 -3\n''') == '1'\n\nassert solution('''8\n1 -1 1 2 -1 -2 3 -3\n''') == '2'\n\nassert solution('''6\n2 5 -5 5 -5 -2\n''') == '-1'\n\nassert solution('''3\n-8 1 1\n''') == '-1'\n\nassert solution('''3\n-8 1 1\n''') == '-1'"
    },
    {
        "number": 1004,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1,7,-7,3,-1,-3') == '1'\nassert solution('2, -2, 3, -3') == '2'\nassert solution('2,5,-5,5,-5,-2') == '2'\nassert solution('-4,4') == '-1'\nassert solution('4') == '-1'\n"
    },
    {
        "number": 1004,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1 2 3 4 5 6 7 8\") == \"-1\"\nassert solution(\"1 2 3 4 5 6 7 8 9\") == \"-1\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10\") == \"-1\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10 11\") == \"-1\"\n"
    },
    {
        "number": 1004,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('6\\n1 7 -7 3 -1 -3\\n') == '1\\n6\\n'\nassert solution('8\\n1 -1 1 2 -1 -2 3 -3\\n') == '2\\n2 6\\n'\nassert solution('6\\n2 5 -5 5 -5 -2\\n') == '-1\\n'\nassert solution('3\\n-8 1 1\\n') == '-1\\n'\nassert solution('3\\n-8 1 1\\n') == '-1\\n'\n"
    },
    {
        "number": 1004,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1 2 3 4 5 6 7 8 9 10') == '1 2 3 4 5 6 7 8 9 10'\nassert solution('-1 -2 -3 -4 -5 -6 -7 -8 -9 -10') == '-1 -2 -3 -4 -5 -6 -7 -8 -9 -10'\nassert solution('-5 -2 -4 -3 -1 -1 1 1 2 1 2 -3') == '-1 -2 -3 -4 -5 -6 -7 -8 -9 -10'\nassert solution('1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10 10') == '1 2 3 4 5 6 7 8 9 10'\nassert solution('-5 -1 -1 -2 -2 -3 -3 -4 -4 -5 -5') == '-1 -2 -3 -4 -5'\n"
    },
    {
        "number": 1004,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('1 1 1') == '-1'\nassert solution('1 -1 1') == '-1'\nassert solution('1 1 1') == '-1'\nassert solution('1 -1 1') == '-1'\nassert solution('1 1 -1') == '-1'\n"
    },
    {
        "number": 1004,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1 2 3 5\\n-4 -1 2 -1 3 -1 -1\\n-1 -1 -1 -1 -1 -1') == '-1'\nassert solution('1 2 3 4\\n-4 -1 -1 1 2 3 4\\n-1 1 1 1 -1 -1 -1 -1\\n-1 -1 -1 -1 -1 -1 -1') == '-1'\nassert solution('1 2 3 4\\n-4 -1 -1 1 2 3 4\\n-1 1 1 1 -1 -1 -1 -1\\n-1 -1 -1 -1 -1 -1 -1') == '-1'\nassert solution('1 2 3 4\\n-4 -1 -1 1 2 3 4\\n-1 1 1 1 -1 -1 -1 -1\\n-1 -1 -1 -1 -1 -1 -1') == '-1'\nassert solution('1 2 3 4\\n-4 -1 -1 1 2 3 4\\n-1 1 1 1 -1 -1 -1 -1\\n-1 -1 -1 -1 -1 -1 -1') == '-1'\n"
    },
    {
        "number": 1004,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1 2 3\\n2\\n') == '2\\n2 1\\n'\nassert solution('2\\n1\\n') == '-1\\n'\nassert solution('2\\n1 1\\n') == '-1\\n'\nassert solution('3\\n1 2 3\\n1\\n') == '3\\n1 2\\n1 3\\n'\nassert solution('3\\n1 2 3\\n1\\n2\\n') == '-1\\n'\n"
    },
    {
        "number": 1004,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('6\\n1 7 -7 3 -1 -3') == '1\\n6'\nassert solution('8\\n1 -1 1 2 -1 -2 3 -3') == '2\\n2 6'\nassert solution('6\\n2 5 -5 5 -5 -2') == '-1'\nassert solution('3\\n-8 1 1') == '-1'\n\"\"\"\nfrom collections import Counter\n"
    },
    {
        "number": 1005,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == expected\n\n\"\"\"\n\nfrom sys import stdin,stdout\nfrom collections import defaultdict\n"
    },
    {
        "number": 1005,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n\n'''\n"
    },
    {
        "number": 1005,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '4'\nassert solution('5') == '5'\n"
    },
    {
        "number": 1005,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('2\\n1 1\\n2 2\\n3 3') == '2\\n'\nassert solution('2\\n5 2\\n5 2') == '1\\n'\nassert solution('2\\n2 4\\n1 2\\n1 2') == '4\\n'\nassert solution('2\\n2 4\\n1 2\\n1 2') == '4\\n'\nassert solution('3\\n5 2\\n5 2') == '2\\n'\n"
    },
    {
        "number": 1005,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''\n5 2 2\n1 2 1 2 1\n9 3 3\n3 3 3 2 2 2 1 1 1 1\n4 10 4\n10 8 6 4\n16 9 8\n3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3\n''') == '2\\n1\\n4'\nassert solution('''\n3 2 2\n1 2 1 2 1\n3 3 3\n3 3 3 2 2 2 1 1 1 1\n4 10 4\n10 8 6 4\n16 9 8\n3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3\n''') == '2\\n1\\n4'\nassert solution('''\n6 3 3\n1 2 1 2 1 3\n6 6 6\n3 3 3 2 2 2 1 1 1 1\n4 10 4\n10 8 6 4\n16 9 8\n3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3\n''') == '4\\n1\\n4'\nassert solution('''\n6 3 3\n1 2 1 2 1 3\n6 6 6\n3 3 3 2 2 2 1 1 1 1\n4 10 4\n10 8 6 4\n16 9 8\n3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3\n''') == '4\\n1\\n4'\nassert solution('''\n5 2 2\n1 2 1 2 1\n5 5 5\n3 3 3 2 2 2 1 1 1 1\n4 10 4\n10 8 6 4\n16 9 8\n3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3\n''') == '4\\n1\\n4'\n"
    },
    {
        "number": 1005,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''\\\n4\n5 2 2\n1 2 1 2 1\n9 3 3\n3 3 3 2 2 2 1 1 1\n4 10 4\n10 8 6 4\n16 9 8\n3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3\n''') == '2\\n1\\n4'\nassert solution('''\\\n5\n1 2 1\n2 3 2\n3 4 3\n4 5 4\n5 6 5\n''') == '0'\nassert solution('''\\\n5\n4 4 4\n5 4 4\n4 4 4\n5 4 4\n4 4 4\n''') == '2\\n2\\n3'\nassert solution('''\\\n5\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n''') == '0'\nassert solution('''\\\n5\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n''') == '2\\n2\\n2'\n"
    },
    {
        "number": 1005,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\n\"\"\""
    },
    {
        "number": 1005,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''4\n5 2 2\n1 2 1 2 1\n9 3 3\n3 3 3 2 2 2 1 1 1 1\n4 10 4\n10 8 6 4\n16 9 8\n3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3''') == '''2\n1\n4\n5'''\n\nassert solution('''7\n17 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1\n7 6 5 4 3 2 1 8 9 10 11 12 13 14 15 16 17\n4 3 2 1 8 9 10 11 12 13 14 15 16 17 18 19\n3 2 1 8 9 10 11 12 13 14 15 16 17 18 19 20\n2 1 8 9 10 11 12 13 14 15 16 17 18 19 20 21\n1 1 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22\n1 1 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23\n1 1 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24''') == '''1\n1\n1\n2\n3\n4\n5\n6\n7'''\n\nassert solution('''8\n17 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1\n7 6 5 4 3 2 1 8 9 10 11 12 13 14 15 16 17\n4 3 2 1 8 9 10 11 12 13 14 15 16 17 18 19\n3 2 1 8 9 10 11 12 13 14 15 16 17 18 19 20\n2 1 8 9 10 11 12 13 14 15 16 17 18 19 20 21\n1 1 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22\n1 1 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23\n1 1 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24\n1 1 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25''') == '''1\n1\n2\n2\n3\n4\n5\n6\n7'''\n\nassert solution('''9\n17 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1\n7 6 5 4 3 2 1 8 9 10 11 12 13 14 15 16 17\n4 3 2 1 8 9 10 11 12 13 14 15 16 17 18 19\n3 2 1 8 9 10 11 12 13 14 15 16 17 18 19 20\n2 1 8 9 10 11 12 13 14 15 16 17 18 19 20 21\n1 1 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22\n1 1 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23\n1 1 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24\n1 1 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25''') == '''1\n1\n2\n2\n3\n4\n5\n6\n7'''\n\nassert solution('''9\n17 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1\n7 6 5 4 3 2 1 8 9 10 11 12 13 14 15 16 17\n4 3 2 1 8 9 10 11 12 13 14 15 16 17 18 19\n3 2 1 8 9 10 11 12 13 14 15 16 17 18 19 20\n2 1 8 9 10 11 12 13 14 15 16 17 18 19 20 21\n1 1 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22\n1 1 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23\n1 1 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24\n1 1 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25''') == '''1\n1\n2\n2\n3\n4\n5\n6\n7'''"
    },
    {
        "number": 1005,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1\\n1 2 1 2 1\\n9 3 3\\n3 3 3 2 2 2 1 1 1 1') == '2\\n1\\n4'\nassert solution('2\\n5 2 2\\n1 2 1 2 1\\n9 3 3\\n3 3 3 2 2 2 1 1 1 1') == '2\\n1\\n4'\nassert solution('3\\n9 3 3\\n3 3 3 2 2 2 1 1 1 1\\n4 10 4\\n10 8 6 4\\n16 9 8\\n3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3\\n4 10 4\\n10 8 6 4\\n16 9 8\\n3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3') == '2\\n1\\n4\\n5'\n\n\"\"\""
    },
    {
        "number": 1005,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1\\n1\\n1\\n1') == '1'\nassert solution('1\\n1\\n1\\n1') == '1'\nassert solution('1\\n1\\n1\\n1') == '1'\nassert solution('1\\n1\\n1\\n1') == '1'\nassert solution('1\\n1\\n1\\n1') == '1'\n"
    },
    {
        "number": 1006,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"5\") == \"YES\"\nassert solution(\"6\") == \"NO\"\nassert solution(\"3\") == \"YES\"\n\n\n-----Binary Search-----\n\n-----Test-----\n\n-----Solution-----\n"
    },
    {
        "number": 1006,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"5\") == \"YES\"\nassert solution(\"6\") == \"YES\"\nassert solution(\"4\") == \"NO\"\nassert solution(\"3\") == \"YES\"\nassert solution(\"#\") == \"YES\"\n"
    },
    {
        "number": 1006,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''\n4\n####\n####\n####\n####\n''') == \"YES\"\nassert solution('''\n6\n.#....\n####..\n.####.\n.#.##.\n######\n.#..#.\n\n''') == \"NO\"\nassert solution('''\n3\n...\n...\n...\n''') == \"YES\"\nassert solution('''\n5\n.#...\n####.\n.####\n.####\n######\n''') == \"YES\"\nassert solution('''\n6\n.#....\n####..\n.####.\n.#.##.\n######\n.#..#.\n''') == \"NO\"\n"
    },
    {
        "number": 1006,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('') == 'NO'\nassert solution('5') == 'NO'\nassert solution('6') == 'NO'\nassert solution('3') == 'YES'\nassert solution('4') == 'NO'\n"
    },
    {
        "number": 1006,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''3\n.#...\n####.\n.####\n...#.\n.....''') == 'NO'\nassert solution('''5\n.#....\n####..\n.####.\n.#.##.\n######\n.#..#.\n''') == 'YES'\nassert solution('''6\n.#..#.\n######\n.####.\n.####.\n######\n.#..#.\n''') == 'NO'\nassert solution('''4\n####\n####\n####\n####\n''') == 'NO'\nassert solution('''3\n...\n...\n...\n''') == 'YES'\n"
    },
    {
        "number": 1006,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('3\\n...\\n...\\n...') == 'YES'\nassert solution('2\\n..\\n..\\n') == 'NO'\nassert solution('6\\n.#....\\n####..\\n.####.\\n.#.##.\\n######\\n.#..#.\\n') == 'YES'\nassert solution('6\\n.#...\\n####.\\n.####\\n.####\\n####.\\n.#...\\n') == 'NO'\n\"\"\"\n"
    },
    {
        "number": 1006,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"5\\n.#...\\n####.\\n.####\\n...#.\\n.....\\n\") == \"YES\"\nassert solution(\"4\\n####\\n####\\n####\\n####\\n####\\n####\\n####\\n\") == \"NO\"\nassert solution(\"6\\n.#....\\n####..\\n.####.\\n.####.\\n######\\n.#..#.\\n\") == \"YES\"\nassert solution(\"6\\n.#..#.\\n######\\n.####.\\n.####.\\n######\\n.#..#.\\n\") == \"NO\"\nassert solution(\"3\\n...\\n...\\n...\\n\") == \"YES\"\n"
    },
    {
        "number": 1006,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('') == 'NO'\nassert solution('3') == 'NO'\nassert solution('1') == 'YES'\nassert solution('3\\n.#...\\n####.\\n.####\\n...#.\\n.....\\n') == 'YES'\nassert solution('5\\n.#...\\n####.\\n.####\\n...#.\\n.....\\n') == 'NO'\n"
    },
    {
        "number": 1006,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('5') == 'YES'\nassert solution('3') == 'NO'\nassert solution('4') == 'NO'\nassert solution('6') == 'YES'\nassert solution('7') == 'NO'\n"
    },
    {
        "number": 1006,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''5''') == 'YES'\nassert solution('''4''') == 'NO'\nassert solution('''6''') == 'YES'\nassert solution('''3''') == 'YES'\nassert solution('''16''') == 'NO'\n"
    },
    {
        "number": 1007,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"2 100\") == \"33\"\nassert solution(\"5 30\") == \"15\"\nassert solution(\"5 100\") == \"5\"\nassert solution(\"1 100\") == \"1\"\nassert solution(\"1 1\") == \"0\"\n"
    },
    {
        "number": 1007,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''2 100''') == '33'\nassert solution('''5 30''') == '15'\nassert solution('''1 11''') == '10'\nassert solution('''2 2''') == '0'\nassert solution('''1 2''') == '1'\n"
    },
    {
        "number": 1007,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('2 100') == '33'\nassert solution('5 30') == '15'\nprint(solution(stdin))\n"
    },
    {
        "number": 1007,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"1 10\") == \"5\"\nassert solution(\"1 100\") == \"33\"\nassert solution(\"1 30\") == \"15\"\nassert solution(\"5 30\") == \"15\"\nassert solution(\"5 30\") == \"15\"\n"
    },
    {
        "number": 1007,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('2 100\\n') == '33'\nassert solution('5 30\\n') == '15'\nassert solution('5 10\\n') == '5'\nassert solution('3 5\\n') == '3'\nassert solution('3 4\\n') == '0'\n"
    },
    {
        "number": 1007,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\n'''2 100'''\n) == '33'\n\nassert solution(\n'''5 30'''\n) == '15'\n"
    },
    {
        "number": 1007,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('2 100') == '33'\nassert solution('5 30') == '15'\n\"\"\"\n"
    },
    {
        "number": 1007,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''2 100''') == '33'\nassert solution('''5 30''') == '15'\nprint(solution('''7 40'''))\n"
    },
    {
        "number": 1007,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 1007,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('2 100') == '33'\nassert solution('5 30') == '15'"
    },
    {
        "number": 1008,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('') == None\nassert solution('abbbaa') == 'YES'\nassert solution('saba') == 'NO'\nassert solution('saddastavvat') == 'YES'\n\n\n\"\"\""
    },
    {
        "number": 1008,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"saba\") == \"NO\"\nassert solution(\"saddastavvat\") == \"YES\"\nassert solution(\"vat\") == \"YES\"\nassert solution(\"rotac\") == \"YES\"\nassert solution(\"mrs\") == \"NO\"\n"
    },
    {
        "number": 1008,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"saba\") == \"NO\"\nassert solution(\"saddastavvat\") == \"YES\"\nassert solution(\"saddastavvats\") == \"NO\"\nassert solution(\"saddastavvatsavvats\") == \"NO\"\n\"\"\""
    },
    {
        "number": 1008,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('saddastavvat') == 'YES'\nassert solution('saba') == 'NO'\nassert solution('canada') == 'YES'\nassert solution('aaaaaaaaaaaaaaaaaaaaaab') == 'YES'\nassert solution('aaaaaaaaaaaaaaaaaaaaaab') == 'NO'\n"
    },
    {
        "number": 1008,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('saba') == 'NO'\nassert solution('saddastavvat') == 'YES'\nassert solution('iubajwuvijwrsfjmwlk') == 'NO'\nassert solution('iubajwuvijwrsfjmwlk') == 'NO'\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 1008,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdin\n\"\"\"\n"
    },
    {
        "number": 1008,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"saba\") == \"NO\"\nassert solution(\"saddastavvat\") == \"YES\"\nassert solution(\"\"\n\n\"\"\"\n\nfrom typing import Tuple\n"
    },
    {
        "number": 1008,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('sabasad') == 'NO'\nassert solution('saddastavvat') == 'YES'\n"
    },
    {
        "number": 1008,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"saba\") == \"NO\"\nassert solution(\"saddastavvat\") == \"YES\"\nassert solution(\"hrsg\") == \"NO\"\nassert solution(\"hrsgdgh\") == \"YES\"\nassert solution(\"babab\") == \"YES\"\n"
    },
    {
        "number": 1008,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('a') == 'NO'\nassert solution('aaba') == 'YES'\nassert solution('aba') == 'NO'\nassert solution('saba') == 'YES'\nassert solution('saddastavvat') == 'YES'\n"
    },
    {
        "number": 1009,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('2 1\\n2 5') == '7'\nassert solution('4 3\\n2 3 5 9\\n') == '9'\nassert solution('3 2\\n3 5 7\\n') == '8'\n\n\"\"\""
    },
    {
        "number": 1009,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 1009,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n\nn, k = [int(x) for x in stdin.split()]\ns = sorted([int(x) for x in stdin.split()])"
    },
    {
        "number": 1009,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n"
    },
    {
        "number": 1009,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"2 1\") == \"7\"\nassert solution(\"4 3\") == \"9\"\nassert solution(\"3 2\") == \"8\"\nassert solution(\"2 2\") == \"8\"\nassert solution(\"6 5\") == \"7\"\n"
    },
    {
        "number": 1009,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == \"\"\n\n\n\"\"\"\n"
    },
    {
        "number": 1009,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('2 1') == '7'\nassert solution('4 3') == '9'\nassert solution('3 2') == '8'\n\n\"\"\"\n"
    },
    {
        "number": 1009,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n'''\n"
    },
    {
        "number": 1009,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''2 1\n2 5\n''') == '7'\n\nassert solution('''4 3\n2 3 5 9\n''') == '9'\n"
    },
    {
        "number": 1009,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 1010,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1 0 1 0 1') == '4'\nassert solution('1 0 1 1') == '0'\nassert solution('1 0 1 0 1') == '1'\nassert solution('1 0 1 0 1 0 1 0 1') == '1'\nassert solution('1 0 1 0 1 0 1 0 1 0 1') == '1'\n"
    },
    {
        "number": 1010,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''3''') == '1'\nassert solution('''5''') == '4'\nassert solution('''2 2 2''') == '2'\nassert solution('''3 3 3''') == '6'\nassert solution('''7 7 7''') == '49'\n"
    },
    {
        "number": 1010,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''3\n0 1 0\n\n''') == '1'\nassert solution('''5\n1 0 1 0 1\n\n''') == '4'\n"
    },
    {
        "number": 1010,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"1 1 0\\n1 0 1\\n1 0 1\\n1 1 0\") == \"1\\n1\\n1\\n1\"\nassert solution(\"2 1 0\\n2 0 1\\n2 0 1\\n2 1 0\") == \"4\"\nassert solution(\"3 1 0\\n3 0 1\\n3 0 1\\n3 1 0\") == \"6\"\nassert solution(\"4 1 0\\n4 0 1\\n4 0 1\\n4 1 0\") == \"8\"\nassert solution(\"5 1 0\\n5 0 1\\n5 0 1\\n5 1 0\") == \"10\"\n"
    },
    {
        "number": 1010,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('3\\n0 1 0\\n') == '1\\n'\nassert solution('5\\n1 0 1 0 1\\n') == '4\\n'\nassert solution('5\\n1 0 1 0 1\\n') == '4\\n'\nassert solution('5\\n1 0 1 0 1\\n') == '4\\n'\nassert solution('5\\n1 0 1 0 1\\n') == '4\\n'\n"
    },
    {
        "number": 1010,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3\n0 1 0\n\"\"\") == \"1\"\nassert solution(\"\"\"\n5\n1 0 1 0 1\n\"\"\") == \"4\"\n\nassert solution(\"\"\"\n1\n1\n\"\"\") == \"1\"\nassert solution(\"\"\"\n2\n1 1\n\"\"\") == \"0\"\nassert solution(\"\"\"\n10\n0 1 0 0 1 0 1 0 1\n\"\"\") == \"0\"\n"
    },
    {
        "number": 1010,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1 2 3\") == \"\"\nassert solution(\"1 2 1\") == \"1\"\nassert solution(\"1 0 0 1 0\") == \"2\"\nassert solution(\"1 1 1\") == \"2\"\n"
    },
    {
        "number": 1010,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\n    \"\"\"\n3\n0 1 0\n\n\"\"\"\n    ) == '1'\n\nassert solution(\n    \"\"\"\n5\n1 0 1 0 1\n\n\"\"\"\n    ) == '4'\n"
    },
    {
        "number": 1010,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''3''') == '''1'''\nassert solution('''5''') == '''4'''\nassert solution('''1 0 1 0 1''') == '''4'''\nassert solution('''1 0 1 0 1 0 1 0 1''') == '''8'''\nassert solution('''1 0 1 0 1 0 1 0 1 0 1 0 1 0 1''') == '''16'''\n"
    },
    {
        "number": 1010,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''3\n0 1 0\n''') == '1'\n\nassert solution('''5\n1 0 1 0 1\n''') == '4'\n"
    },
    {
        "number": 1011,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 1011,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == \"15:10\"\n"
    },
    {
        "number": 1011,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20') == '15:10'\nassert solution('3\\n1 2 3\\n2\\n5 6\\n') == '6:4'\nassert solution('3\\n1 2 3\\n2\\n5 6\\n7 8 9\\n10 11 12\\n13 14 15\\n16 17 18 19\\n20 21 22 23\\n24 25 26\\n27 28 29 30') == '25:20'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100\\n101\\n102\\n103\\n104\\n105\\n106\\n107\\n108\\n109\\n110\\n111\\n112\\n113\\n114\\n115\\n116\\n117\\n118\\n119\\n120\\n121\\n122\\n123\\n124\\n125\\n126\\n127\\n128\\n129\\n130\\n131\\n132\\n133\\n134\\n135\\n136\\n137\\n138\\n139\\n140\\n141\\n142\\n143\\n144\\n145\\n146\\n147\\n148\\n149\\n150\\n151\\n152\\n153\\n154\\n155\\n156\\n157\\n158\\n159\\n160\\n161\\n162\\n163\\n164\\n165\\n166\\n167\\n168\\n169\\n170\\n171\\n172\\n173\\n174\\n175\\n176\\n177\\n178\\n179\\n180\\n181\\n182\\n183\\n184\\n185\\n186\\n187\\n188\\n189\\n190\\n191\\n192\\n193\\n194\\n195\\n196\\n197\\n198\\n199\\n200\\n201\\n202\\n203\\n204\\n205\\n206\\n207\\n208\\n209\\n210\\n211\\n212\\n213\\n214\\n215\\n216\\n217\\n218\\n219\\n220\\n221\\n222\\n223\\n224\\n225\\n226\\n227\\n228\\n229\\n230\\n231\\n232\\n233\\n234\\n235\\n236\\n237\\n238\\n239\\n240\\n241\\n242\\n243\\n244\\n245\\n246\\n247\\n248\\n249\\n250\\n251\\n252\\n253\\n254\\n255\\n256\\n257\\n258\\n259\\n260\\n261\\n262\\n263\\n264\\n265\\n266\\n267\\n268\\n269\\n270\\n271\\n272\\n273\\n274\\n275\\n276\\n277\\n278\\n279\\n280\\n281\\n282\\n283\\n284\\n285\\n286\\n287\\n288\\n289\\n290\\n291\\n292\\n293\\n294\\n295\\n296\\n297\\n298\\n299\\n300\\n301\\n302\\n303\\n304\\n305\\n306\\n307\\n308\\n309\\n310\\n311\\n312\\n313\\n314\\n315\\n316\\n317\\n318\\n319\\n320\\n321\\n322\\n323\\n324\\n325\\n326\\n327\\n328\\n329\\n330\\n331\\n332\\n333\\n334\\n335\\n336\\n337\\n338\\n339\\n340\\n341\\n342\\n343\\n344\\n345\\n346\\n347\\n348\\n349\\n350\\n351\\n352\\n353\\n354\\n355\\n356\\n357\\n358\\n359\\n360\\n361\\n362\\n363\\n364\\n365\\n366\\n367\\n368\\n369\\n370\\n371\\n372\\n373\\n374\\n375\\n376\\n377\\n378\\n379\\n380\\n381\\n382\\n383\\n384\\n385\\n386\\n387\\n388\\n389\\n390\\n391\\n392\\n393\\n394\\n395\\n396\\n397\\n398\\n399\\n400\\n401\\n402\\n403\\n404\\n405\\n406\\n407\\n408\\n409\\n410\\n411\\n412\\n413\\n414\\n415\\n416\\n417\\n418\\n419\\n420\\n421\\n422\\n423\\n424\\n425\\n426\\n427\\n428\\n429\\n430\\n431\\n432\\n433\\n434\\n435\\n436\\n437\\n438\\n439\\n440\\n441\\n442\\n443\\n444\\n445\\n446\\n447\\n448\\n449\\n450\\n451\\n452\\n453\\n454\\n455\\n456\\n457\\n458\\n459\\n460\\n461\\n462\\n463\\n464\\n465\\n466\\n467\\n468\\n469\\n470\\n471\\n472\\n473\\n474\\n475\\n476\\n477\\n478\\n479\\n480\\n481\\n482\\n483\\n484\\n485\\n486\\n487\\n488\\n489\\n490\\n491\\n492\\n493\\n494\\n495\\n496\\n497\\n498\\n499\\n500"
    },
    {
        "number": 1011,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''1 2 3\n2\n5 6''') == '9:6'\nassert solution('''1 2 3\n2\n5 6\n\n2\n1 2 3''') == '15:10'\nassert solution('''2\n2\n2\n2\n2\n2\n\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2"
    },
    {
        "number": 1011,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n') == '9:10'\nassert solution('5\\n6\\n7\\n8\\n9\\n10\\n') == '15:10'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n') == '15:10'\nassert solution('2\\n5\\n6\\n7\\n8\\n9\\n10\\n') == '15:10'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n') == '15:10'\n"
    },
    {
        "number": 1011,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''3\n1 2 3\n2\n5 6\n''') == '9:6'\nassert solution('''3\n1 2 3\n2\n5 6\n''') == '15:10'\nassert solution('''5\n6 7 8 9 10\n5\n1 2 3 4 5\n''') == '15:10'\nassert solution('''2\n1 2\n2\n1 1\n''') == '1:1'\nassert solution('''6\n1 2 3 4 5 6\n5\n1 2 3 4 5\n''') == '9:6'\n"
    },
    {
        "number": 1011,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''1 2 3\n2\n5 6\n''') == '9:6'\nassert solution('''1 2 3\n2\n5 6\n''') == '15:10'\n\n'''\n"
    },
    {
        "number": 1011,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''1 2 3''') == '9:6'\nassert solution('''2\n1 2 3''') == '3:6'\nassert solution('''2\n5 6 7 8 9 10''') == '15:10'\nassert solution('''1\n1 2 3''') == '0:1'\nassert solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '45:36'\n"
    },
    {
        "number": 1011,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''3\n1 2 3\n2\n5 6\n''') == '9:6'\nassert solution('''3\n1 2 3\n2\n5 6\n''') == '15:10'\nassert solution('''5\n6 7 8 9 10\n5\n1 2 3 4 5\n''') == '15:10'\nassert solution('''1\n2 3 4\n2\n5 6\n''') == '6:2'\nassert solution('''2\n5 6 7\n5\n1 2 3 4 5\n''') == '15:10'\n"
    },
    {
        "number": 1011,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1 2 3') == '1:2'\nassert solution('1 2 3 4 5') == '0:1'\nassert solution('1 2 3 4 5 6') == '6:5'\nassert solution('1 2 3 4 5 6 7') == '6:5'\nassert solution('1 2 3 4 5 6 7 8') == '6:5'\n"
    },
    {
        "number": 1012,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdin"
    },
    {
        "number": 1012,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"aa\") == \"abaacba\"\nassert solution(\"abacaba\") == \"abaacba\"\nassert solution(\"xdd\") == \"xdd\"\nassert solution(\"ababacaba\") == \"abaacba\"\nassert solution(\"ababacaba\") == \"abaacba\"\n"
    },
    {
        "number": 1012,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''3\naa\nabacaba\nxdd''') == '-1'\nassert solution('''2\nba\nba\n''') == 'abaacba'\nassert solution('''1\naa\n''') == 'abaacba'\nassert solution('''3\nab\nabc\n''') == 'abaacba'\nassert solution('''1\nab\n''') == 'abaacba'\n"
    },
    {
        "number": 1012,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''\n3\naa\nabacaba\nxdd\n''') == '-1'\nassert solution('''\n3\nababaca\nabcabaa\nxdd\n''') == 'abaacba'\nassert solution('''\n3\nbaacaba\nabcabaa\nxdd\n''') == '-1'\n'''\n"
    },
    {
        "number": 1012,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 1012,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''\n3\naa\nabacaba\nxdd\n''') == '-1'\nassert solution('''\n3\nababaca\nabcabaa\nxdd\n''') == 'abaacba'\nassert solution('''\n3\nbaacaba\nabcabaa\nxdd\n''') == 'xdd'\nassert solution('''\n3\nbbbba\nbbaa\nbbaa\n''') == 'bbbaa'\nassert solution('''\n3\nbbaa\nbbaa\nbbaa\n''') == 'bbaa'\n"
    },
    {
        "number": 1012,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''3\naa\nabacaba\nxdd''') == '-1\\nabaacba\\nxdd'\nassert solution('''3\nababaca\nabcabaa\nxdd''') == 'abaacba\\nxdd'\nassert solution('''3\nababacab\nabacaba\nxdd''') == 'abaacab\\nxdd'\nassert solution('''3\nbba\nbaacaba\nxbdd''') == 'bba\\nxdd'\nassert solution('''3\nbba\nbaacaba\nxbdd''') == 'bba\\nxdd'\n"
    },
    {
        "number": 1012,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(''.join(open('test_input.txt').readlines())) == ''.join(open('test_output.txt').readlines())\n"
    },
    {
        "number": 1012,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdin\n\n\n\"\"\"\n\"\"\"\n"
    },
    {
        "number": 1012,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('ab') == 'a'\nassert solution('aba') == 'ab'\nassert solution('abacaba') == 'aba'\nassert solution('aa') == 'a'\nassert solution('abacaba') == 'aba'\n"
    },
    {
        "number": 1013,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\n'''\n"
    },
    {
        "number": 1013,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == expected_output\nprint(solution(stdin))\n\"\"\"\n\nimport sys\n\nn, m = [int(i) for i in sys.stdin.readline().split()]\npairs = [tuple(int(i) for i in sys.stdin.readline().split()) for _ in range(m)]"
    },
    {
        "number": 1013,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1 2 3') == '2'\nassert solution('0 0 0') == '4'\nassert solution('0 0 1') == '2'\nassert solution('0 0 0') == '4'\nassert solution('0 0 1') == '2'\n"
    },
    {
        "number": 1013,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''3 3\n0 0 0\n0 1 0\n0 0 0''') == \"4\"\nassert solution('''4 3\n0 0 0\n0 0 1\n1 0 0\n0 0 0''') == \"2\"\nassert solution('''3 4\n1 0 0\n0 0 1\n0 1 0\n1 0 0''') == \"2\"\n\n\n\n---"
    },
    {
        "number": 1013,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''\n3 3\n0 0 0\n0 1 0\n0 0 0\n''') == '4'\nassert solution('''\n4 3\n0 0 0\n0 0 1\n1 0 0\n0 0 0\n''') == '2'\nassert solution('''\n5 6\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n''') == '8'\n"
    },
    {
        "number": 1013,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''3 3\n0 0 0\n0 1 0\n0 0 0''') == '4'\nassert solution('''4 3\n0 0 0\n0 0 1\n1 0 0\n0 0 0''') == '2'\nassert solution('''10 10\n1 1 1\n0 1 1\n0 0 1\n0 0 0\n0 0 0\n0 1 1\n1 0 0\n0 0 0\n0 0 1\n0 0 1''') == '10'\nassert solution('''6 5\n1 1 1\n1 0 1\n1 1 1\n0 0 1\n0 1 1\n1 1 1''') == '7'\nassert solution('''10 10\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 0 1\n1 1 1\n1 0 1\n0 0 1\n0 0 1\n0 0 1''') == '5'\n"
    },
    {
        "number": 1013,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"\"\"3 3\n0 0 0\n0 1 0\n0 0 0\"\"\") == \"2\"\nassert solution(\"\"\"4 3\n0 0 0\n0 0 1\n1 0 0\n0 0 0\"\"\") == \"4\"\nassert solution(\"\"\"5 4\n0 0 0 0 0\n0 0 1 0 0\n0 0 0 0 0\n0 1 0 0 0\n0 0 0 0 0\"\"\") == \"8\"\nassert solution(\"\"\"6 6\n0 0 0 0 0 0 0\n0 0 1 0 0 0 0\n0 0 0 0 0 0 0\n0 1 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\"\"\") == \"13\"\nassert solution(\"\"\"7 7\n0 0 0 0 0 0 0 0\n0 0 1 0 0 0 0 0\n0 0 0 0 0 0 0 0\n0 1 0 0 0 0 0 0\n0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0\"\"\") == \"22\"\n"
    },
    {
        "number": 1013,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1\\n0\\n1') == '1'\nassert solution('1\\n0\\n1\\n0\\n0\\n0') == '0'\nassert solution('2\\n1\\n0\\n0\\n0\\n0\\n0') == '2'\nassert solution('3\\n2\\n1\\n0\\n0\\n1\\n0') == '4'\n"
    },
    {
        "number": 1013,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''\n3 3\n0 0 0\n0 1 0\n0 0 0\n''') == '4'\nassert solution('''\n4 3\n0 0 0\n0 0 1\n1 0 0\n0 0 0\n''') == '2'\nassert solution('''\n5 3\n0 0 0\n0 1 0\n0 0 0\n0 0 0\n0 1 0\n''') == '4'\nassert solution('''\n10 10\n0 0 0\n0 0 1\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 1 0\n0 1 0\n''') == '3'\n\n\n-----Alternate Solutions (Another Approach)-----"
    },
    {
        "number": 1013,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('3 3\\n0 0 0\\n0 1 0\\n0 0 0') == '4'\nassert solution('4 3\\n0 0 0\\n0 0 1\\n1 0 0\\n0 0 0') == '2'\nassert solution('3 3\\n0 0 0\\n0 0 1\\n1 0 0\\n0 0 0') == '2'\nassert solution('7 7\\n0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0') == '5'\n\n\n\"\"\"\n"
    },
    {
        "number": 1014,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"white\"\nassert solution(\"3\") == \"black\"\n\"\"\"\n"
    },
    {
        "number": 1014,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('2') == 'white'\nassert solution('3') == 'black'\nassert solution('3') == 'black'\nassert solution('4') == 'white'\nassert solution('5') == 'white'\n"
    },
    {
        "number": 1014,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''2''') == 'white'\nassert solution('''3''') == 'black'\nassert solution('''4''') == 'black'\nassert solution('''5''') == 'black'\nassert solution('''6''') == 'white'\n"
    },
    {
        "number": 1014,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('') == \"white\"\nassert solution('2') == \"white\"\nassert solution('3') == \"black\"\nassert solution('4') == \"white\"\nassert solution('5') == \"black\"\n"
    },
    {
        "number": 1014,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"5\") == \"white\"\nassert solution(\"2\") == \"white\"\nassert solution(\"3\") == \"black\"\nassert solution(\"4\") == \"black\"\nassert solution(\"6\") == \"black\"\n"
    },
    {
        "number": 1014,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('2') == 'white'\nassert solution('3') == 'black'\nassert solution('4') == 'black'\nassert solution('5') == 'white'\nassert solution('6') == 'black'\n"
    },
    {
        "number": 1014,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(input()) == ''\n'''\n"
    },
    {
        "number": 1014,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"black\"\nassert solution(\"2\") == \"white\"\nassert solution(\"10\") == \"black\"\nassert solution(\"10\") == \"black\"\nassert solution(\"8\") == \"white\"\n"
    },
    {
        "number": 1014,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"5\") == \"white\"\nassert solution(\"3\") == \"black\"\nassert solution(\"2\") == \"black\"\nassert solution(\"10\") == \"black\"\nassert solution(\"10\") == \"white\"\n"
    },
    {
        "number": 1014,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"white\"\nassert solution(\"3\") == \"black\"\n\n\"\"\""
    },
    {
        "number": 1015,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(input()) == output"
    },
    {
        "number": 1015,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''\n5\n1 0 0 0 1\n''') == '0 2 3 3 3 3 3 3 3 3 3'\nassert solution('''\n12\n0 0 0 0 1 1 1 1 0 1 1 0\n
    },
    {
        "number": 1015,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('5') == '0 2 3 3 3 3 3 3 3 3'\nassert solution('12') == '9 12 13 14 14 14 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15"
    },
    {
        "number": 1015,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"1\\n2\") == \"0\"\nassert solution(\"2\\n1\") == \"1\"\nassert solution(\"5\\n1 0 0 0 1\") == \"0 2 3 3 3 3 3 3 3 3\"\nassert solution(\"3\\n0 0 0 1 1 1\") == \"9 12 13 14 14 14 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15"
    },
    {
        "number": 1015,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''5\n1 0 0 0 1''') == '0 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3'\nassert solution('''12\n0 0 0 0 1 1 1 1 0 1 1 0''') == '9 12 13 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14"
    },
    {
        "number": 1015,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('3\\n1 0 0\\n') == '3'\nassert solution('5\\n1 0 0 0 1\\n') == '9'\nassert solution('10\\n0 0 0 0 1 0 0 0 0 0 1 0\\n') == '14'\nassert solution('12\\n0 0 0 0 1 1 1 1 0 1 1 0\\n') == '29'\nassert solution('16\\n0 0 0 0 1 1 1 1 0 1 1 0 1 1 1 1 1 1\\n') == '81'\n"
    },
    {
        "number": 1015,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"1\\n0\\n0\") == \"0\"\nassert solution(\"5\\n1 0 0 0 1\") == \"0 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3"
    },
    {
        "number": 1015,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('5\\n1 0 0 0 1') == '0 2 3 3 3 3 3 3 3 3 3'\nassert solution('5\\n0 0 0 0 1') == '9 12 13 14 14 14 14 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15"
    },
    {
        "number": 1015,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 0 0 0 1\\n\") == \"0 2 3 3 3 3 3 3 3 3 3\"\nassert solution(\"12\\n0 0 0 0 1 1 1 1 0 1 1 0\\n
    },
    {
        "number": 1015,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('5\\n1 0 0 0 1\\n') == '0 2 3 3 3 3 3 3 3 3 3'\nassert solution('12\\n0 0 0 0 1 1 1 1 0 1 1 0\\n
    },
    {
        "number": 1016,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1 0\\n2 1\\n3 2\\n4 3') == '4'\nassert solution('2 1\\n1 2\\n3 2') == '4'\nassert solution('1 0\\n2 1\\n3 2\\n4 3') == '4'\nassert solution('1 0\\n2 1\\n3 2\\n4 3\\n5 4') == '8'\nassert solution('1 0\\n2 1\\n3 2\\n4 3\\n5 4\\n6 4') == '16'\n"
    },
    {
        "number": 1016,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == answer()\n\"\"\"\n"
    },
    {
        "number": 1016,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == result\n\"\"\"\nfrom typing import List\nimport sys\nsys.path.append(\"../../../\")\nfrom utils.standard_input import *"
    },
    {
        "number": 1016,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''1 0''') == '1'\nassert solution('''1 0''') == '1'\nassert solution('''2 1''') == '2'\nassert solution('''3 2''') == '4'\n"
    },
    {
        "number": 1016,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1 0') == '1'\nassert solution('2 1') == '2'\nassert solution('3 2') == '4'\nassert solution('1 2\\n2 3') == '2'\nassert solution('1 3\\n2 2') == '4'\n"
    },
    {
        "number": 1016,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1 0') == '1'\nassert solution('2 1') == '2'\nassert solution('3 2') == '4'\nassert solution('1 2\\n1 3') == '2'\nassert solution('2 3\\n1 2\\n3 2') == '4'\n"
    },
    {
        "number": 1016,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('2 1') == '2'\nassert solution('3 2') == '4'\nassert solution('3 3') == '6'\nassert solution('4 4') == '8'\nassert solution('5 5') == '10'\n"
    },
    {
        "number": 1016,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1 0') == '1'\nassert solution('2 1') == '2'\nassert solution('3 2') == '4'\nassert solution('1 2') == '2'\nassert solution('2 3') == '4'\n"
    },
    {
        "number": 1016,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"2 1\\n1 2\\n\") == \"2\"\nassert solution(\"3 2\\n1 2\\n2 3\\n\") == \"4\"\nassert solution(\"3 2\\n1 2\\n2 3\\n3 4\\n\") == \"8\"\nassert solution(\"4 2\\n1 2\\n2 3\\n3 4\\n4 5\\n\") == \"16\"\nassert solution(\"5 2\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n\") == \"32\"\n"
    },
    {
        "number": 1016,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''1 0''') == '1'\nassert solution('''2 1''') == '2'\nassert solution('''3 2''') == '4'\nassert solution('''2 1\n1 2\n2 3''') == '4'\nassert solution('''3 2\n1 2\n2 3''') == '4'\n"
    },
    {
        "number": 1017,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '3'\nassert solution('5') == '2'\n"
    },
    {
        "number": 1017,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('4') == '3'\nassert solution('5') == '2'\nassert solution('7') == '2'\nassert solution('2') == '1'\nassert solution('7') == '2'\n"
    },
    {
        "number": 1017,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\n    \"1\"\n) == \"1\"\nassert solution(\n    \"2\"\n) == \"1\"\nassert solution(\n    \"3\"\n) == \"2\"\nassert solution(\n    \"4\"\n) == \"3\"\nassert solution(\n    \"5\"\n) == \"4\"\n"
    },
    {
        "number": 1017,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('') == 0\nassert solution('0') == 0\nassert solution('1') == 1\nassert solution('2') == 1\nassert solution('3') == 2\n"
    },
    {
        "number": 1017,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '3'\nassert solution('5') == '4'\n"
    },
    {
        "number": 1017,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"3\"\nassert solution(\"10\") == \"5\"\n"
    },
    {
        "number": 1017,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdin\n\n\"\"\"\n"
    },
    {
        "number": 1017,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '3'\nassert solution('5') == '2'\n"
    },
    {
        "number": 1017,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(1) == 1\nassert solution(2) == 1\nassert solution(3) == 2\nassert solution(4) == 3\nassert solution(5) == 2\n"
    },
    {
        "number": 1017,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('') == 0\nassert solution('1') == 1\nassert solution('2') == 2\nassert solution('3') == 1\nassert solution('4') == 2\n"
    },
    {
        "number": 1018,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('3') == '2'\nassert solution('5') == '5'\nassert solution('3 3 3') == '2'\nassert solution('5 4 5 4 4') == '5'\nassert solution('7') == '8'\n"
    },
    {
        "number": 1018,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"3\n3 3 3\n\"\"\") == \"2\"\n\nassert solution(\n\"\"\"5\n5 4 5 4 4\n\"\"\") == \"5\"\n\nassert solution(\n\"\"\"10\n3 7 8 10 17 18 19 19\n\"\"\") == \"3\"\n"
    },
    {
        "number": 1018,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1 3 3') == '2'\nassert solution('5 4 5 4 4') == '5'\nassert solution('5 5 5 5 5 5') == '1'\nassert solution('3 3 3') == '2'\nassert solution('1 1 1') == '0'\n"
    },
    {
        "number": 1018,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(input('')) == expected(input(''))\n'''\n"
    },
    {
        "number": 1018,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''3\n3 3 3''') == '2'\nassert solution('''5\n5 4 5 4 4''') == '5'\nassert solution('''1\n1''') == '0'\nassert solution('''2\n1''') == '0'\nassert solution('''1\n2''') == '1'\n"
    },
    {
        "number": 1018,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''3\n3 3 3''') == '2'\nassert solution('''5\n5 4 5 4 4''') == '5'\nassert solution('''2\n1''') == '1'\nassert solution('''10\n9 8 7 6 5 4 3 2 1''') == '8'\nassert solution('''20\n19 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1''') == '17'\n"
    },
    {
        "number": 1018,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('1\\n3 3 3') == '2'\nassert solution('5\\n5 4 5 4 4') == '5'\nassert solution('5\\n6 4 5 4 4') == '5'\nassert solution('5\\n7 4 5 4 4') == '5'\nassert solution('5\\n8 4 5 4 4') == '5'\n"
    },
    {
        "number": 1018,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1 2 2 2 1') == 2\nassert solution('2 1 2 2 1') == 1\nassert solution('1 1 1 1 1') == 0\nassert solution('2 3 3 2 1') == 1\nassert solution('1 1 1 1 1') == 0\n"
    },
    {
        "number": 1018,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1\\n1\\n1\\n1\\n1') == '2'\nassert solution('3\\n3\\n3\\n3\\n3') == '2'\nassert solution('5\\n4\\n5\\n4\\n4') == '5'\nassert solution('5\\n5\\n5\\n5\\n5') == '1'\nassert solution('7\\n6\\n7\\n6\\n6') == '5'\n"
    },
    {
        "number": 1018,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('3\\n3 3 3') == '2'\nassert solution('5\\n5 4 5 4 4') == '5'\nassert solution('5\\n5 4 5 4 4\\n1 1 1 1 1 1') == '1'\nassert solution('5\\n5 4 5 4 4\\n1 1 1 1 1 1\\n1 1 1 1 1 1') == '1'\nassert solution('10\\n5 3 4 5 6 7 8 9 10') == '6'\n"
    },
    {
        "number": 1019,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''3''') == '1 2'\nassert solution('''4''') == '1 3'\nassert solution('''12''') == '5 7'\nassert solution('''1''') == '1 1'\nassert solution('''2''') == '1 2'\n"
    },
    {
        "number": 1019,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('3\\n') == '1 2'\nassert solution('4\\n') == '1 3'\nassert solution('12\\n') == '5 7'\nassert solution('2\\n') == '1 2'\nassert solution('7\\n') == '3 5'\n"
    },
    {
        "number": 1019,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('3') == '1 2'\nassert solution('4') == '1 3'\nassert solution('12') == '5 7'\n\nprint(solution(stdin))"
    },
    {
        "number": 1019,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('3') == '1 2'\nassert solution('4') == '1 3'\nassert solution('12') == '5 7'\n\nassert solution('123456789') == '5 7'\nassert solution
    },
    {
        "number": 1019,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('3') == '1 2'\nassert solution('4') == '1 3'\nassert solution('12') == '5 7'\nassert solution('15') == '5 10'\nassert solution('999') == '5 45'\n"
    },
    {
        "number": 1019,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"1 2\"\nassert solution(\"4\") == \"1 3\"\nassert solution(\"12\") == \"5 7\"\nassert solution(\"10\") == \"10 1\"\nassert solution(\"100\") == \"10 100\""
    },
    {
        "number": 1019,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('3') == '1 2'\nassert solution('4') == '1 3'\nassert solution('12') == '5 7'\nprint(\"Tests passed successfully.\")\n"
    },
    {
        "number": 1019,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('3') == '1 2'\nassert solution('4') == '1 3'\nassert solution('12') == '5 7'\nassert solution('16') == '1 4'\nassert solution('17') == '1 5'\n"
    },
    {
        "number": 1019,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1 2') == '1 2'\nassert solution('3') == '1 3'\nassert solution('4') == '1 2'\nassert solution('12') == '5 7'\nassert solution('12345') == '2345 1'\n"
    },
    {
        "number": 1019,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('12') == '5 7'\nassert solution('3') == '1 2'\nassert solution('4') == '1 3'\nassert solution('1') == '1 1'\nassert solution('2') == '1 2'\n"
    },
    {
        "number": 1020,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('7 9 1') == '28'\nassert solution('3 3 1') == '8'\nassert solution('7 9 2') == '40'\n\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 1020,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('3 3 1') == '8'\nassert solution('7 9 1') == '28'\nassert solution('7 9 2') == '40'\nassert solution('6 7 4') == '32'\nassert solution('1000000 1000000 1000000') == '1024000000'\n"
    },
    {
        "number": 1020,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('3 3 1') == '8'\nassert solution('7 9 1') == '28'\nassert solution('7 9 2') == '40'\n\n\"\"\""
    },
    {
        "number": 1020,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == \"8\"\nassert solution(stdin) == \"28\"\nassert solution(stdin) == \"40\"\n\n\n-----Template------"
    },
    {
        "number": 1020,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''3 3 1''') == '8'\nassert solution('''7 9 1''') == '28'\nassert solution('''7 9 2''') == '40'"
    },
    {
        "number": 1020,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(input()) == \"\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 1020,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"7 9 1\") == \"28\"\nassert solution(\"3 3 1\") == \"8\"\nassert solution(\"7 9 2\") == \"40\"\n\n\n\n\n\"\"\"\n\n\nfrom math import ceil\n"
    },
    {
        "number": 1020,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('3 3 1') == '8'\nassert solution('7 9 1') == '28'\nassert solution('7 9 2') == '40'\nassert solution('3 3 2') == '36'\nassert solution('3 3 3') == '72'\n"
    },
    {
        "number": 1020,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('3 3 1') == '8'\nassert solution('7 9 1') == '28'\nassert solution('7 9 2') == '40'\n\n\n\"\"\"\n"
    },
    {
        "number": 1020,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('3 3 1') == '8'\nassert solution('7 9 1') == '28'\nassert solution('7 9 2') == '40'\nprint(\"The first test is completed\")\n"
    },
    {
        "number": 1021,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('5\\n7 2 4 12\\n7 15 10 12\\n') == 'Yes'\nassert solution('3\\n4 4 4\\n1 2 3\\n') == 'No'\n\"\"\"\n\nfrom sys import stdin, stdout\n"
    },
    {
        "number": 1021,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 1021,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdin\n\"\"\"\nfrom functools import reduce\nn = int(input())\nc = list(map(int, input().split()))\nt = list(map(int, input().split()))"
    },
    {
        "number": 1021,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('7 2 4 12\\n7 15 10 12\\n') == 'Yes'\nassert solution('3\\n4 4 4\\n1 2 3\\n') == 'No'\nassert solution('2\\n2 2 2\\n1 2 1\\n') == 'Yes'\n\n\"\"\"\n\nfrom itertools import combinations"
    },
    {
        "number": 1021,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''\n4\n7 2 4 12\n7 15 10 12\n''') == 'Yes'\n\nassert solution('''\n3\n4 4 4\n1 2 3\n''') == 'No'\n\nassert solution('''\n1\n1\n1\n''') == 'Yes'\n\nassert solution('''\n10\n2 3 4 5 6 7 8 9 10\n5 5 5 5 5 5 5 5 5 5\n''') == 'No'\n\nassert solution('''\n7\n2 4 3 4 5 6 7 10\n7 15 10 12\n''') == 'No'\n'''\n"
    },
    {
        "number": 1021,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('4\\n7 2 4 12\\n7 15 10 12\\n') == 'Yes\\n'\nassert solution('3\\n4 4 4\\n1 2 3\\n') == 'No\\n'\n\"\"\"\n"
    },
    {
        "number": 1021,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"4\\n7 2 4 12\\n7 15 10 12\") == \"Yes\"\nassert solution(\"3\\n4 4 4\\n1 2 3\") == \"No\"\n\n\"\"\"\n"
    },
    {
        "number": 1021,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('4\\n7 2 4 12\\n7 15 10 12\\n') == 'Yes'\nassert solution('3\\n4 4 4\\n1 2 3\\n') == 'No'\nassert solution('3\\n3 3 3\\n1 1 1\\n') == 'Yes'\nassert solution('3\\n1 1 1\\n1 1 1\\n') == 'No'\nassert solution('3\\n1 1 1\\n1 1 1\\n1 1 1\\n') == 'Yes'\n"
    },
    {
        "number": 1021,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1\\n7 2 4 12\\n7 15 10 12') == 'Yes'\nassert solution('1\\n4 4 4\\n1 2 3') == 'No'\nassert solution('3\\n4 4 4\\n1 2 3') == 'Yes'\nassert solution('2\\n4 4 4\\n1 2 3') == 'Yes'\nassert solution('2\\n4 4 4\\n1 2 3') == 'No'\n"
    },
    {
        "number": 1021,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''4\n7 2 4 12''') == 'Yes'\nassert solution('''3\n4 4 4''') == 'No'\nassert solution('''7\n1 2 3''') == 'No'\nassert solution('''5\n0 1 2 3 4 5''') == 'No'\nassert solution('''5\n4 4 4 4 4''') == 'Yes'\n"
    },
    {
        "number": 1022,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(input_string) == output_string\n\nprint(solution(input_string))\n\"\"\"\n"
    },
    {
        "number": 1022,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 1022,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('5\\n0 0 1 1 2\\n2 0 1 0 0') == 'YES\\n1 3 1 2 1'\nassert solution('5\\n0 0 1 1 2\\n2 0 1 0 0') == 'NO'\nassert solution('3\\n0 0 0\\n0 0 0') == 'YES\\n1 1 1'\nassert solution('3\\n0 0 0\\n0 0 0') == 'NO'\nassert solution('5\\n0 0 1 1 2\\n2 0 1 0 0') == 'NO'\n"
    },
    {
        "number": 1022,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('0\\n0 0 1 1 2') == 'YES\\n1 3 1 2 1'\nassert solution('3\\n0 0 2 0\\n0 0 1 1') == 'YES\\n1 1 1 1'\nassert solution('3\\n0 0 2 0\\n0 0 1 1') == 'NO'\n\"\"\"\n"
    },
    {
        "number": 1022,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1\\n1\\n0') == 'YES\\n1 1 1'\nassert solution('1\\n2\\n1\\n0') == 'NO'\nassert solution('1\\n2\\n2\\n1') == 'NO'\nassert solution('2\\n0\\n1\\n1') == 'YES\\n1 1 1'\nassert solution('1\\n1\\n0\\n2\\n1') == 'YES\\n1 2 1'\n"
    },
    {
        "number": 1022,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 1022,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('4\\n0 0 0 0\\n0 0 0 0') == 'YES\\n2 3 1 1 2 1'\nassert solution('5\\n0 0 1 1 2 2\\n2 0 1 0 0 0') == 'NO'\nassert solution('2\\n0 0\\n0 0') == 'YES\\n1 1'"
    },
    {
        "number": 1022,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdin\n\"\"\"\n"
    },
    {
        "number": 1022,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 1022,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('5\\n0 0 1 1 2\\n2 0 1 0 0') == 'YES\\n1 3 1 2 1\\n'\nassert solution('4\\n0 0 2 0\\n1 1 1 1\\n') == 'NO\\n'\nassert solution('3\\n0 0 0\\n0 0 0\\n') == 'YES\\n1 1 1\\n'\nassert solution('2\\n0 0 0\\n1 1 1\\n') == 'NO\\n'\nassert solution('1\\n0 0 0\\n1 1 1\\n') == 'YES\\n1 1 1\\n'\n"
    },
    {
        "number": 1023,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1 2 3 4 5\\n1 2 3 4 5') == '11'\nassert solution('4 5 1 1 2\\n1 3 5 7\\n1 2 3 9 10') == '11'\nassert solution('2 2 4 4 2\\n1 10\\n10 20\\n') == '1000000003'\n\n\n\n\"\"\""
    },
    {
        "number": 1023,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == \"1000000003\"\n\"\"\"\n"
    },
    {
        "number": 1023,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\n\"\"\""
    },
    {
        "number": 1023,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == result\n\n\"\"\"\n\nfrom collections import deque\nfrom sys import stdin, stdout\nfrom math import ceil"
    },
    {
        "number": 1023,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\n'''\n3 3 1 1 2\n1 3 5 7\n1 2 3 9 10\n''') == '1000000003'\nassert solution(\n'''\n4 5 1 1 2\n1 3 5 7\n1 2 3 9 10\n''') == '-1'\nassert solution(\n'''\n2 2 4 4 2\n1 10\n10 20\n''') == '1000000003'\n\nassert solution(\n'''\n4 3 2 3 1\n1 999999998 999999999 1000000000\n3 4 1000000000\n''') == '1000000003'\n\nassert solution(\n'''\n2 2 4 4 2\n1 10\n10 20\n''') == '1000000003'\n"
    },
    {
        "number": 1023,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('4 5 1 1 2\\n1 3 5 7\\n1 2 3 9 10\\n') == '11'\nassert solution('2 2 4 4 2\\n1 10\\n10 20\\n') == '-1'\nassert solution('4 3 2 3 1\\n1 999999998 999999999 1000000000\\n3 4 1000000000\\n') == '1000000003'\n"
    },
    {
        "number": 1023,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"\"\"4 5 1 1 2\n1 3 5 7\n1 2 3 9 10\n\"\"\") == \"11\"\nassert solution(\"\"\"2 2 4 4 2\n1 10\n10 20\n\"\"\") == \"1000000003\"\nassert solution(\"\"\"4 3 2 3 1\n1 999999998 999999999 1000000000\n3 4 1000000000\n\"\"\") == \"-1\"\n\n\"\"\""
    },
    {
        "number": 1023,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"4 5 1 1 2\") == \"11\"\nassert solution(\"2 2 4 4 2\") == \"1000000003\"\nassert solution(\"4 3 2 3 1\") == \"1000000003\"\nassert solution(\"10000000000\") == \"-1\"\nassert solution(\"100000000000\") == \"-1\"\n"
    },
    {
        "number": 1023,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('4 5 1 1 2\\n1 3 5 7\\n1 2 3 9 10\\n') == '11'\nassert solution('2 2 4 4 2\\n1 10\\n10 20\\n') == '-1'\nassert solution('4 3 2 3 1\\n1 999999998 999999999 1000000000\\n3 4 1000000000\\n') == '1000000003'\nassert solution('2 2 4 4 2\\n1 999999998 999999999 1000000000\\n3 4 1000000000\\n') == '-1'\nassert solution('4 3 2 3 1\\n1 999999998 999999999 1000000000\\n3 4 1000000000\\n') == '1000000003'\n"
    },
    {
        "number": 1023,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''\\\n4 5 1 1 2\n1 3 5 7\n1 2 3 9 10\n''') == '11'\n\nassert solution('''\\\n2 2 4 4 2\n1 10\n10 20\n''') == '-1'\n\nassert solution('''\\\n4 3 2 3 1\n1 999999998 999999999 1000000000\n3 4 1000000000\n''') == '1000000003'\n\nassert solution('''\\\n4 3 2 3 1\n1 999999998 999999999 1000000000\n1000000001 9999999999 10000000000\n3 4 1000000000\n''') == '-1'\n\nassert solution('''\\\n5 5 1 1 2\n1 3 5 7\n1 2 3 9 10\n''') == '11'"
    },
    {
        "number": 1024,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('2 3 1') == '1.916666666666666666666666666667'\n"
    },
    {
        "number": 1024,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == '1.916666666666666666666666666667'\n\"\"\"\n\n\"\"\"\n\n\"\"\"\nfrom math import factorial\nfrom itertools import combinations\nfrom functools import reduce\nfrom operator import mul\n\nn = int(input())\np = [int(i) for i in input().split()]"
    },
    {
        "number": 1024,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('2 3 1') == '1.916666666666666666666666666667'\nassert solution('2 3 1\\n1 3 2') == '1.916666666666666666666666666667'\nassert solution('1\\n1') == '0'\nassert solution('3\\n1 2 3') == '1.916666666666666666666666666667'\nassert solution('10\\n1 2 3 4 5 6 7 8 9 10') == '1.916666666666666666666666666667'\n"
    },
    {
        "number": 1024,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == '2.33333333333333333333333333'\n"
    },
    {
        "number": 1024,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1 2 3') == '1.9'\nassert solution('2 3 1') == '0'\nassert solution('3 1 2') == '0'\nassert solution('3 2 1') == '0'\nassert solution
    },
    {
        "number": 1024,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5') == 1.916666666666666666666666666667\nassert solution('1\\n2\\n3\\n4\\n5\\n6') == 0.0\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7') == 0.0\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8') == 0.0\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n9') == 1.0\n"
    },
    {
        "number": 1024,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3\") == \"2\"\nassert solution(\"2 3 1\") == \"2\"\nassert solution(\"3 1 2\") == \"1\"\n\n\"\"\"\n\nimport sys\nfrom collections import Counter"
    },
    {
        "number": 1024,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"1 1\") == \"0\"\nassert solution(\"1 1 3\") == \"0\"\nassert solution(\"2 1\") == \"1\"\nassert solution(\"1 1 1\") == \"0\"\nassert solution(\"1 2 1\") == \"1\"\n"
    },
    {
        "number": 1024,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('3\\n2 3 1') == '1.916666666666666666666666666667'\n'''\n"
    },
    {
        "number": 1024,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''3\n2 3 1''') == '1.916666666666666666666666666667'\nassert solution('''1\n1\n2\n3\n4''') == '0.0625'\nassert solution('''1\n1\n2\n4\n3''') == '1.5'\nassert solution('''1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n''') == '1.5'\nassert solution('''1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n''') == '1.5'\n"
    },
    {
        "number": 1025,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''4\n0 0\n1 1\n2 0\n2 2''') == '3'\nassert solution('''3\n0 0\n1 1\n2 0''') == '1'\nassert solution('''1\n1 1\n''') == '0'\n"
    },
    {
        "number": 1025,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('4\\n0 0\\n1 1\\n2 0\\n2 2\\n') == '3\\n'\nassert solution('1\\n1 1\\n') == '0\\n'\nassert solution('3\\n0 0\\n1 1\\n2 0\\n') == '1\\n'\nassert solution('3\\n0 0\\n1 1\\n2 0\\n2 2\\n') == '1\\n'\nassert solution('1\\n1 1\\n') == '0\\n'\n"
    },
    {
        "number": 1025,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('3\\n0 0\\n1 1\\n2 0\\n2 2') == '3'\nassert solution('1\\n1 1\\n') == '0'\nassert solution('3\\n0 0\\n1 1\\n2 0\\n2 2\\n3 3') == '1'\nassert solution('3\\n0 0\\n0 0\\n1 1\\n2 0\\n2 2\\n3 3') == '0'\nassert solution('3\\n0 0\\n0 0\\n1 1\\n2 0\\n2 2\\n3 3') == '1'\n"
    },
    {
        "number": 1025,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"4\") == \"3\"\nassert solution(\"3\") == \"1\"\nassert solution(\"1\") == \"0\"\nassert solution(\"2 1\") == \"0\"\nassert solution(\"2 2\") == \"0\"\n"
    },
    {
        "number": 1025,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 1025,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''\n    3\n    0 0\n    1 1\n    2 0\n''') == '3'\n\nassert solution('''\n    3\n    0 0\n    1 1\n    2 0\n    2 2\n''') == '1'\n\nassert solution('''\n    1\n    1 1\n''') == '0'\n\nassert solution('''\n    2\n    0 0\n    1 1\n''') == '0'\n\nassert solution('''\n    5\n    0 0\n    1 1\n    2 0\n    2 2\n    3 0\n''') == '3'"
    },
    {
        "number": 1025,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''\n    4\n    0 0\n    1 1\n    2 0\n    2 2\n''') == '3'\nassert solution('''\n    3\n    0 0\n    1 1\n    2 0\n''') == '1'\nassert solution('''\n    1\n    1 1\n''') == '0'\n\n'''\n"
    },
    {
        "number": 1025,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(input('')) == ''\n\n'''"
    },
    {
        "number": 1025,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 1025,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('0\\n1\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\"
    },
    {
        "number": 1026,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''\n1\n3\n''') == '3'\nassert solution('''\n7\n8 9 26 11 12 29 14\n''') == '55'\nassert solution('''\n6\n10 7 1 9 10 15\n''') == '26'\nassert solution('''\n8\n4 8 3 6 7 9 4 4\n''') == '55'\n"
    },
    {
        "number": 1026,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('3\\n1 2 3') == '2'\nassert solution('6\\n1 2 3 4 5 6') == '55'\nassert solution('7\\n3 4 3 3 4 4') == '55'\nassert solution('8\\n3 4 3 4 4 5 6 7 8') == '55'\nassert solution('9\\n3 4 3 4 4 5 6 7 8 9') == '55'\n"
    },
    {
        "number": 1026,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1\\n4\\n2\\n3') == '6'\nassert solution('2\\n1\\n3\\n3\\n5') == '9'\nassert solution('3\\n1\\n2\\n1\\n1\\n4\\n1\\n4') == '10'\nassert solution('4\\n1\\n2\\n1\\n1\\n3\\n1\\n2') == '11'\nassert solution('5\\n1\\n1\\n1\\n1\\n1\\n1\\n1') == '12'\n"
    },
    {
        "number": 1026,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1\\n6\\n3\\n4\\n2\\n6\\n1\\n5\\n4\\n6\\n2\\n5\\n4\\n7\\n1') == '26'\nassert solution('1\\n4\\n3\\n6\\n2\\n5\\n1\\n4\\n7\\n3\\n5\\n2\\n6\\n3\\n4\\n5\\n6\\n2\\n4\\n3\\n5\\n7\\n1') == '55'\nassert solution('1\\n4\\n3\\n6\\n2\\n5\\n1\\n3\\n7\\n3\\n5\\n2\\n6\\n3\\n4\\n5\\n6\\n2\\n4\\n3\\n5\\n7\\n1') == '55'\nassert solution('1\\n4\\n3\\n6\\n2\\n5\\n1\\n4\\n7\\n3\\n5\\n2\\n6\\n3\\n4\\n5\\n6\\n2\\n4\\n3\\n5\\n7\\n1') == '55'\nassert solution('1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n"
    },
    {
        "number": 1026,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('6\\n10 7 1 9 10 15\\n') == '26'\nassert solution('1\\n400000\\n') == '400000'\nassert solution('7\\n8 9 26 11 12 29 14\\n') == '55'\n"
    },
    {
        "number": 1026,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1\\n400000') == '400000'\nassert solution('1\\n1') == '1'\nassert solution('2\\n1112\\n1414\\n1313\\n1919') == '100000'\nassert solution('7\\n10\\n11\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19') == '600000'\nassert solution('8\\n29\\n26\\n25\\n24\\n23\\n22\\n21\\n20\\n19\\n18\\n17\\n16\\n15\\n14\\n13\\n12\\n11\\n10') == '500000'\n"
    },
    {
        "number": 1026,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('6\\n10 7 1 9 10 15') == '26'\nassert solution('1\\n400000') == '400000'\nassert solution('7\\n8 9 26 11 12 29 14') == '55'\nassert solution('7\\n8 9 26 11 12 29 14\\n4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26') == '23'\n"
    },
    {
        "number": 1026,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('6\\n10 7 1 9 10 15\\n') == 26\nassert solution('1\\n400000\\n') == 400000\nassert solution('7\\n8 9 26 11 12 29 14\\n') == 55"
    },
    {
        "number": 1026,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1\\n1') == '1'\nassert solution('2\\n1') == '1'\nassert solution('3\\n1') == '1'\nassert solution('4\\n1') == '1'\nassert solution('5\\n1') == '1'\n"
    },
    {
        "number": 1026,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 1027,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdin[0]\n"
    },
    {
        "number": 1027,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('0 1 1 0 0 0 0 0 0 7 0 0 0 0') == '4'\nassert solution('5 1 1 1 1 0 0 0 0 0 0 0 0 0') == '8'\nassert solution('5 1 1 1 1 1 1 1 1 1 1 1 1 1') == '9'\nassert solution('5 1 1 1 1 1 1 1 1 1 1 1 1 1') == '9'\nassert solution('5 1 1 1 1 1 1 1 1 1 1 1 1 1') == '9'\n"
    },
    {
        "number": 1027,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('0 1 1 0 0 0 0 0 0 7 0 0 0 0') == '4'\nassert solution('5 1 1 1 1 0 0 0 0 0 0 0 0 0') == '8'\nassert solution('0 1 1 1 1 0 0 0 0 0 0 0 0 0') == '8'\nassert solution('2 2 2 1 1 2 2 1 1 1 1 1 1 1') == '18'\nassert solution('2 2 2 1 1 2 2 1 1 1 1 1 1 1') == '18'\n"
    },
    {
        "number": 1027,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('0 1 1 0 0 0 0 0 0 7 0 0 0 0') == '4'\nassert solution('5 1 1 1 1 0 0 0 0 0 0 0 0 0') == '8'\nassert solution('5 1 1 1 1 0 0 0 0 0 0 0 0 0') == '8'\nassert solution('5 1 1 1 1 0 0 0 0 0 0 0 0 0') == '8'\nassert solution('5 1 1 1 1 0 0 0 0 0 0 0 0 0') == '8'\n"
    },
    {
        "number": 1027,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == '4'\n\n'''\n"
    },
    {
        "number": 1027,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"0 1 1 0 0 0 0 0 0 7 0 0 0 0\") == 4\nassert solution(\"5 1 1 1 1 0 0 0 0 0 0 0 0 0\") == 8\nassert solution(\"5 1 1 1 1 0 0 0 0 0 0 0 0 0\") == 8\nassert solution(\"0 1 1 0 0 0 0 0 0 7 0 0 0 0\") == 4\nassert solution(\"0 1 1 0 0 0 0 0 0 7 0 0 0 0\") == 4\n"
    },
    {
        "number": 1027,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('0 1 1 0 0 0 0 0 0 7 0 0 0 0') == '4'\nassert solution('5 1 1 1 1 0 0 0 0 0 0 0 0 0') == '8'\nassert solution('1 1 1 1 1 0 0 0 0 0 0 0 0 0') == '8'\nassert solution('4 5 3 0 0 0 2 3 0 1 6 4 2 0 0') == '2'\nassert solution('1 1 1 1 1 0 0 0 0 0 0 0 0 0') == '8'\n"
    },
    {
        "number": 1027,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''0 1 1 0 0 0 0 0 0 7 0 0 0 0''') == '4'\nassert solution('''5 1 1 1 1 0 0 0 0 0 0 0 0 0''') == '8'\nassert solution('''0 1 1 0 0 0 0 0 0 0 0 0 0 0''') == '4'\nassert solution('''1 1 0 0 0 0 0 0 0 0 0 0 0 0''') == '0'\nassert solution('''5 1 1 1 1 0 0 0 0 0 0 0 0 0''') == '8'\n"
    },
    {
        "number": 1027,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('0 1 1 0 0 0 0 0 0 7 0 0 0 0') == '4'\nassert solution('5 1 1 1 1 0 0 0 0 0 0 0 0 0') == '8'\nassert solution('5 1 1 1 1 0 0 0 0 0 0 0 0 0') == '8'\nassert solution('5 1 1 1 1 0 0 0 0 0 0 0 0 0') == '8'\nassert solution('5 1 1 1 1 0 0 0 0 0 0 0 0 0') == '8'\n"
    },
    {
        "number": 1027,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\n'''0 1 1 0 0 0 0 0 0 7 0 0 0 0'''\n) == '4'\n\nassert solution(\n'''5 1 1 1 1 0 0 0 0 0 0 0 0 0'''\n) == '8'\nassert solution(\n'''9 1 1 1 1 1 1 1 1 1 1 1 1 1'''\n) == '10'\n"
    },
    {
        "number": 1028,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\n    '''5 1'''\n) == '10 10'\n\nassert solution(\n    '''3 2'''\n) == '1 1'\n\nassert solution(\n    '''6 3'''\n) == '3 6'\n"
    },
    {
        "number": 1028,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('5 1') == '10 10'\nassert solution('3 2') == '1 1'\nassert solution('6 3') == '3 6'"
    },
    {
        "number": 1028,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1 3') == '1 1'\nassert solution('1 1') == '1 1'\nassert solution('2 2') == '1 1'\nassert solution('5 4') == '2 4'\nassert solution('10 10') == '10 10'\n\n\"\"\"\n"
    },
    {
        "number": 1028,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"3 1\") == \"1 1\"\nassert solution(\"3 2\") == \"1 1\"\nassert solution(\"6 3\") == \"3 6\"\nassert solution(\"5 1\") == \"10 10\"\nassert solution(\"7 3\") == \"7 7\"\n"
    },
    {
        "number": 1028,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''5 1''') == '10 10'\nassert solution('''3 2''') == '1 1'\nassert solution('''6 3''') == '3 6'\n\n-----Solution (Python)-----\n\nfrom sys import stdin, stdout\nn, m = map(int, stdin.readline().split())\nstdout.write(str(min(n*(n-1)//2, m*(m-1)//2)) +'' + str(max(n*(n-1)//2, m*(m-1)//2)))"
    },
    {
        "number": 1028,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('5 1') == '10 10'\nassert solution('3 2') == '1 1'\nassert solution('6 3') == '3 6'"
    },
    {
        "number": 1028,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('5 1') == '10 10'\nassert solution('3 2') == '1 1'\nassert solution('6 3') == '3 6'\n'''\n"
    },
    {
        "number": 1028,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('10 1') == '10 10'\nassert solution('3 2') == '1 1'\nassert solution('6 3') == '3 6'\nassert solution('12 5') == '4 8'\nassert solution('5 4') == '1 1'\n"
    },
    {
        "number": 1028,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('5 1') == '10 10'\nassert solution('3 2') == '1 1'\nassert solution('6 3') == '3 6'\nassert solution('1 5') == '1 1'\nassert solution('2 4') == '1 1'\n"
    },
    {
        "number": 1028,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('5 1') == '10 10'\nassert solution('3 2') == '1 1'\nassert solution('6 3') == '3 6'\n"
    },
    {
        "number": 1029,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('955') == '4'\nassert solution('9555') == '4'\nassert solution('10000000005') == '4'\nassert solution('998') == '1'\nassert solution('999999999') == '1'\n"
    },
    {
        "number": 1029,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"9555\") == \"4\"\nassert solution(\"10000000005\") == \"2\"\nassert solution(\"800101\") == \"3\"\nassert solution(\"45\") == \"1\"\nassert solution(\"19992000\") == \"1\"\n"
    },
    {
        "number": 1029,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('9555') == '4'\nassert solution('10000000005') == '2'\nassert solution('800101') == '3'\nassert solution('45') == '1'\nassert solution('19992000') == '1'\n"
    },
    {
        "number": 1029,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('9555') == '4'\nassert solution('10000000005') == '2'\nassert solution('19992000') == '1'\nassert solution('310200') == '2'\nassert solution('45') == '1'\n"
    },
    {
        "number": 1029,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('9555') == '4'\nassert solution('10000000005') == '4'\nassert solution('800101') == '3'\nassert solution('19992000') == '1'\nassert solution('310200') == '2'\n"
    },
    {
        "number": 1029,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"9555\") == \"4\"\nassert solution(\"10000000005\") == \"4\"\nassert solution(\"800101\") == \"3\"\nassert solution(\"19992000\") == \"1\"\nassert solution(\"310200\") == \"2\"\n"
    },
    {
        "number": 1029,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(input()) == output\n"
    },
    {
        "number": 1029,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"9555\") == \"4\"\nassert solution(\"10000000005\") == \"2\"\nassert solution(\"800101\") == \"3\"\nassert solution(\"45\") == \"1\"\nassert solution(\"19992000\") == \"1\"\n"
    },
    {
        "number": 1029,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"9555\") == \"4\"\nassert solution(\"10000000005\") == \"2\"\nassert solution(\"800101\") == \"3\"\nassert solution(\"45\") == \"1\"\nassert solution(\"19992000\") == \"1\"\n"
    },
    {
        "number": 1029,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('9555') == '4'\nassert solution('10000000005') == '2'\nassert solution('19992000') == '1'\nassert solution('310200') == '2'\nassert solution('45') == '1'\n"
    },
    {
        "number": 1030,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''17 5 2''') == '''<< 3 4 (5) 6 7 >>'''\nassert solution('''6 5 2''') == '''(1) 2 3 >>'''\nassert solution('''6 1 2''') == '''1 (2) 3 4 >>'''\nassert solution('''6 2 2''') == '''1 2 3 4 5 6 >>'''\nassert solution('''9 6 3''') == '''<< 3 4 5 (6) 7 8 9 >>'''\n"
    },
    {
        "number": 1030,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"17 5 2\") == \"<< 3 4 (5) 6 7 >>\"\nassert solution(\"6 5 2\") == \"<< 3 4 (5) 6      >>\"\nassert solution(\"6 1 2\") == \"(1) 2 3 >>\"\nassert solution(\"6 2 2\") == \"1 (2) 3 4 >>\"\nassert solution(\"9 6 3\") == \"<< 3 4 5 (6) 7 8 9 >>\"\n"
    },
    {
        "number": 1030,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1') == '(1)'\nassert solution('1 2 3') == '(1) 2 3'\nassert solution('1 2 3 4') == '(1) 2 3 4'\nassert solution('1 2 3 4 5') == '(1) 2 3 4 5'\n"
    },
    {
        "number": 1030,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"17 5 2\") == \"<< 3 4 (5) 6 7 >>\"\nassert solution(\"6 5 2\") == \"<< 3 4 (5) 6 \nInput=\"6 5 2\"\nassert solution(Input) == \"1 (2) 3 4 >>\"\n"
    },
    {
        "number": 1030,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"1 2 3\") == \"(1) 2 3\"\nassert solution(\"3 4 5\") == \"1 (2) 3 4 5\"\nassert solution(\"6 7 8 9\") == \"1 2 3 4 5 6 7 8 9\"\nassert solution(\"1 2 3\") == \"1 2 3\"\nassert solution(\"9 6 3\") == \"1 (2) 3 4 5 6 7 8 9\"\n"
    },
    {
        "number": 1030,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\n\"17 5 2\") == '<< 3 4 (5) 6 7 >>'\nassert solution(\n\"6 5 2\") == '<< 3 4 (5) 6 >>'\nassert solution(\n\"6 1 2\") == '1 (2) 3 >>'\nassert solution(\n\"6 2 2\") == '1 2 3 4 >>'\nassert solution(\n\"9 6 3\") == '<< 3 4 5 (6) 7 8 9 >>'\n"
    },
    {
        "number": 1030,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''17 5 2''') == '''<< 3 4 (5) 6 7 >>'''\nassert solution('''6 5 2''') == '''<< 3 4 (5) 6 \n'''\nassert solution('''6 1 2''') == '''(1) 2 3 >>'''\nassert solution('''9 6 3''') == '''<< 3 4 5 (6) 7 8 9 \n'''\nassert solution('''10 6 3''') == '''<< 3 4 5 (6) 7 8 9 >>\n'''\n"
    },
    {
        "number": 1030,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"17 5 2\") == \"<< 3 4 (5) 6 7 >>\"\nassert solution(\"6 5 2\") == \"<< 3 4 (5) 6 \nInput\":\n    \"6 5 2\n\nOutput\":\n    1 (2) 3 4 >>\n"
    },
    {
        "number": 1030,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1 1 1') == '(1)', 'Example 1'\nassert solution('5 2 2') == '1 (2) 3 4 5', 'Example 2'\nassert solution('6 1 2') == '1 (2) 3 4 5 6', 'Example 3'\nassert solution('6 2 2') == '1 (2) 3 4 5 6', 'Example 4'\nassert solution('7 2 1') == '1 (2) 3 4 5 6 7', 'Example 5'\n"
    },
    {
        "number": 1030,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('2 3 2') == '1 4\\n3\\n1 4'\nassert solution('6 3 2') == '1 3 4 5 6 7 8 9\\n3\\n1 4 5 6\\n6\\n1 3 4 5 6 7 8 9'\nassert solution('9 6 3') == '1 2 3 4 5 6 7 8 9\\n3\\n1 4 5 6\\n6\\n1 3 4 5 6 7 8 9'\nassert solution('10 6 3') == '1 2 3 4 5 6 7 8 9 10\\n3\\n1 4 5 6\\n6\\n1 3 4 5 6 7 8 9 10'\nassert solution('8 5 4') == '1 2 3 4 5 6 7 8\\n3\\n1 4 5 6\\n6\\n1 3 4 5 6 7 8'\n"
    },
    {
        "number": 1031,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1') ==' \\n'\nassert solution('12') =='  \\n'\nassert solution('1\\n2') =='1 \\n 2 \\n'\nassert solution('2\\n1') =='1 \\n 2 \\n'\n"
    },
    {
        "number": 1031,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''5\n3 1 2 5 1\n''') == '\\n /\\\\     \n / \\\\ / \\\\    \n/  \\\\    /  \n\\\\ / \\\\ / \n\\\\ /  \\\\ / \n/ \\\\    /  \n\\\\    /\n / \\\\\n/   \\\\\n\\\\ /\n\\\\/\n'''\n\n'''\n    / \\\n   /   \\\n  /     \\\n /       \\\n/         \\\n/         \\\n\\\\         \\\n \\\\         \\\n  \\\\         \\\n   \\\\         \\\n    \\\\         \\\n     \\\\         \\\n      \\\\         \\\n       \\\\         \\\n        \\\\         \\\n         \\\\         \\\n          \\\\         \\\n           \\\\         \\\n            \\\\         \\\n             \\\\         \\\n              \\\\         \\\n               \\\\         \\\n                \\\\         \\\n                 \\\\         \\\n                  \\\\         \\\n                   \\\\         \\\n                    \\\\         \\\n                     \\\\         \\\n                      \\\\         \\\n                       \\\\         \\\n                        \\\\         \\\n                         \\\\         \\\n                          \\\\         \\\n                           \\\\         \\\n                            \\\\         \\\n                             \\\\         \\\n                              \\\\         \\\n                               \\\\         \\\n                                 \\\\         \\\n                                  \\\\         \\\n                                    \\\\         \\\n                                     \\\\         \\\n                                      \\\\         \\\n                                       \\\\         \\\n                                        \\\\         \\\n                                         \\\\         \\\n                                          \\\\         \\\n                                           \\\\         \\\n                                            \\\\         \\\n                                           / \\\\         \\\n                                          /   \\\\         \\\n                                          /     \\\\         \\\n                                         /       \\\\         \\\n                                        /         \\\\         \\\n                                       /           \\\\         \\\n                                      /             \\\\         \\\n                                     /               \\\\         \\\n                                    /                 \\\\         \\\n                                   /                   \\\\         \\\n                                  /                     \\\\         \\\n                                 /                       \\\\         \\\n                                /                         \\\\         \\\n                              /                            \\\\         \\\n                             /                             \\\\         \\\n                            /                              \\\\         \\\n                           /                               \\\\         \\\n                          /                                 \\\\         \\\n                        /                                            \\\n                       /                                           \\\n                      /                                           \\\n                     /                                           \\\n                    /                                           \\\n                   /                                           \\\n                  /                                           \\\n                 /                                           \\\n                /                                           \\\n               /                                           \\\n              /                                           \\\n             /                                           \\\n            /                                           \\\n           /                                           \\\n          /                                           \\\n         /                                           \\\n        /                                           \\\n       /                                           \\\n      /                                           \\\n     /                                           \\\n    /                                           \\\n   /                                           \\\n  /                                           \\\n /                                           \\\n/                                           \\\n\\\\                                           \\\n \\\\                                           \\\n  \\\\                                           \\\n   \\\\                                           \\\n    \\\\                                           \\\n     \\\\                                           \\\n      \\\\                                           \\\n       \\\\                                           \\\n        \\\\                                           \\\n         \\\\                                           \\\n          \\\\                                           \\\n           \\\\                                           \\\n            \\\\                                           \\\n             \\\\                                           \\\n              \\\\                                           \\\n               \\\\                                           \\\n                \\\\                                           \\\n                 \\\\                                           \\\n                  \\\\                                           \\\n                   \\\\                                           \\\n                    \\\\                                           \\\n                     \\\\                                           \\\n                      \\\\                                           \\\n                       \\\\                                           \\\n                        \\\\                                           \\\n                         \\\\                                           \\\n                          \\\\                                           \\\n                           \\\\                                           \\\n                            \\\\                                           \\\n                             \\\\                                           \\\n                              \\\\                                           \\\n                               \\\\                                           \\\n                                 \\\\                                           \\\n                                  \\\\                                           \\\n                                    \\\\                                           \\\n                                     \\\\                                           \\\n                                      \\\\                                           \\\n                                       \\\\                                           \\\n                                        \\\\                                           \\\n                                         \\\\                                           \\\n                                          \\\\                                           \\\n                                           \\\\                                           \\\n                                           / \\\\                                           \\\n                                          /   \\\\                                           \\\n                                          /     \\\\                                           \\\n                                         /       \\\\                                           \\\n                                        /         \\\\                                           \\\n                                       /           \\\\                                           \\\n                                      /             \\\\                                           \\\n                                     /               \\\\                                           \\\n                                    /                 \\\\                                           \\\n                                   /                   \\\\                                           \\\n                                  /                     \\\\                                           \\\n                                 /                       \\\\                                           \\\n                                 /                         \\\\                                           \\\n                              /                            \\\\                                           \\\n                             /                             \\\\                                           \\\n                            /                              \\\\                                           \\\n                           /                               \\\\                                           \\\n                          /                                 \\\\                                           \\\n                        /                                            \\                                           \\\n                       /                                           \\\n                      /                                           \\\n                     /                                           \\\n                    /                                           \\\n                   /                                           \\\n                  /                                           \\\n                 /                                           \\\n                /                                           \\\n               /                                           \\\n              /                                           \\\n             /                                           \\\n            /                                           \\\n           /                                           \\\n          /                                           \\\n         /                                           \\\n        /                                           \\\n       /                                           \\\n      /                                           \\\n     /                                           \\\n    /                                           \\\n   /                                           \\"
    },
    {
        "number": 1031,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1 0 1 0') =='/ \\\\\\n \\\\ \\n  \\ '\nassert solution('2 0 1 0') =='/ \\\\\\n / \\n / \\n'\nassert solution('3 0 1 0') =='/ \\\\\\n / \\n / \\n \\\\ \\n \\\\ \\n'\nassert solution('4 0 1 0') =='/ \\\\\\n / \\n / \\n / \\\\\\n'\nassert solution('5 0 1 0') =='/ \\\\\\n / \\n / \\n / \\\\\\n \\\\ \\n'\n"
    },
    {
        "number": 1031,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1\\n2') =='/ \\    '\nassert solution('3\\n1 2 5 1') =='/ \\ / \\    '\nassert solution('4\\n1 1 1 1') ==' / \\ / \\    '\nassert solution('5\\n3 1 2 5 1') =='/ \\ / \\ / \\    '\nassert solution('6\\n5 1 2 5 1 3') == '/ \\ / \\ / \\ / \\ / \\    '\n"
    },
    {
        "number": 1031,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 1031,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('3 1 2 5 1') =='/\\\\             /\\\\ \\n      / \\\\ / \\\\      /  \\\\ \\n     /   \\\\   \\\\   \\\\ \\n    /    \\\\    \\\\     \\\\ \\n    \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\     \\\\ \\n     \\\\    \\\\    \\\\"
    },
    {
        "number": 1031,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''1\n1\n1\n1\n
    },
    {
        "number": 1031,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"\n3\n1 5 1\n\"\"\") == \"\"\"\n     / \\     \n   / \\ /   \\    \n  /       \\   \n /         \\  \n          \\ / \n\"\"\"\nassert solution(\n\"\"\"\n5\n3 1 2 5 1\n\"\"\") == \"\"\"\n     / \\     \n   / \\ /   \\    \n  /       \\   \n /         \\  \n          \\ / \n\"\"\"\nassert solution(\n\"\"\"\n3\n1 5 1\n\"\"\") == \"\"\"\n     / \\     \n   / \\ /   \\    \n  /       \\   \n /         \\  \n          \\ / \n\"\"\"\nassert solution(\n\"\"\"\n5\n3 1 2 5 1\n\"\"\") == \"\"\"\n     / \\     \n   / \\ /   \\    \n  /       \\   \n /         \\  \n          \\ / \n\"\"\"\nassert solution(\n\"\"\"\n4\n4 1 2 3\n\"\"\") == \"\"\"\n/ \\     \n  \\    \n   \\   \n    \\  \n     \\ /\n\"\"\"\n"
    },
    {
        "number": 1031,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(input()) == \"\"\"/ \\     \n  \\    \n   \\   \n    \\  \n     \\ /\n\"\"\"\n"
    },
    {
        "number": 1031,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('5\\n3 1 2 5 1') == '/\\\\\\n \\\\\\\\n   \\\\\\n     /\\n /  \\\\\\n\\\\   /'\nassert solution('3\\n1 5 1') =='/\\n  \\\\\\n   \\n   \\n   \\n   \\n   '\nassert solution('4\\n4 1 3 1') =='/\\\\\\n  /\\\\\\n / /\\\\\\n/ /  \\\\\\n\\\\ \\\\  /\\n \\\\ \\\\/ '"
    },
    {
        "number": 1032,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1 2 3\\n3 4 5') == '1\\n3'\nassert solution('2 3 5 6\\n9 1 1 1') == '2\\n3 4\\n'\nassert solution('4 3\\n2 3 5 6') == '1\\n3\\n'\nassert solution('3 2\\n1000000000 1 999999999') == '1\\n999999999\\n'\nassert solution('4 3\\n9 1 1 1') == '0\\n'\n"
    },
    {
        "number": 1032,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == '1\\n3\\n'\nassert solution(stdin) == '0\\n'\nassert solution(stdin) == '4\\n'\nassert solution(stdin) == '6\\n'\nassert solution(stdin) == '1\\n'\n"
    },
    {
        "number": 1032,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"2 2\") == \"0\"\nassert solution(\"3 2\") == \"1\"\nassert solution(\"4 3\") == \"2\"\nassert solution(\"9 1 1 1\") == \"0\"\nassert solution(\"1000000000 1 999999999\") == \"1\"\n"
    },
    {
        "number": 1032,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == ''\n\n\n\"\"\"\n\nimport sys\nfrom math import gcd\nsys.setrecursionlimit(10**6)"
    },
    {
        "number": 1032,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''3 2\n3 4 5''') == '1'\nassert solution('''4 3\n2 3 5 6''') == '2'\nassert solution('''4 3\n9 1 1 1''') == '0'\nassert solution('''3 2\n1000000000 1 999999999''') == '1'\nassert solution('''4 3\n1000000000 1 999999999''') == '0'\n"
    },
    {
        "number": 1032,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''3 2\n3 4 5\n''') == '1\\n3\\n'\nassert solution('''4 3\n2 3 5 6\n''') == '2\\n3 4\\n'\nassert solution('''4 3\n9 1 1 1\n''') == '0\\n'\nassert solution('''3 2\n1000000000 1 999999999\n''') == '1\\n999999998\\n'"
    },
    {
        "number": 1032,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdin\n\n\"\"\"\n\nn, p = map(int, stdin.split())\na = list(map(int, stdin.split()))"
    },
    {
        "number": 1032,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"3 2\\n3 4 5\") == \"1\\n3\\n\"\nassert solution(\"4 3\\n2 3 5 6\") == \"2\\n3 4\\n\"\nassert solution(\"4 3\\n9 1 1 1\") == \"0\\n\"\n\n\n-----\n\nThe hard version of the problem is about finding all good permutations. It is impossible to find the number of good permutations if the number of candidates is limited to say, say $n$ and $a_{i}$ is limited to say, say $a_{n}$ because $a_{i} \\le n$, that's why it is not interesting. The number of good permutations is going to be $n!/(n-n)!$\n\nSo, how to find all good permutations?\n\nThere is a very elegant solution that is called the Catalan number. The Catalan number is the number of ways to make a binary tree from an empty set. The binary tree with $n$ nodes has $2^n$ leaf nodes.\n\nThe idea is to use dynamic programming. We use the same idea as the above solution for the number of good permutations for the following formula:\n\n$f(x) = \\left(\\sum_{i=1}^{n} f(x-i) \\right) * n!/(n-i)!$\n\nThe solution is implemented as the following algorithm:\n\n1. We make a recursive function called $C(x)$.\n2. $C(x)$ has two parts: the part $f(x)$ and the part $n!/(n-x)!$\n3. $f(x)$ has the two parts in the following way:\n    $f(x) = \\sum_{i=1}^{x-1} f(x-i)$\n    $f(x) = \\sum_{i=0}^{x-1} f(x-i)$\n    $f(x) = \\sum_{i=1}^{x-1} f(x-i)$\n    $f(x) = \\sum_{i=1}^{x-1} f(x-i)$\n4. $n!/(n-x)!$ has the two parts in the following way:\n    $n!/(n-x)! = n!/(n-x)! \\cdot (n-x)!$\n    $n!/(n-x)! = n!/(n-x)! \\cdot (n-x)!$\n    $n!/(n-x)! = n!/(n-x)! \\cdot (n-x)!$\n    $n!/(n-x)! = n!/(n-x)! \\cdot (n-x)!$\n    $n!/(n-x)! = n!/(n-x)! \\cdot (n-x)!$\n5. $f(x) = \\sum_{i=1}^{x-1} f(x-i) * (n-x)!/(n-x-i)!$\n6. $f(x) = \\sum_{i=1}^{x-1} f(x-i) * (n-x)!/(n-x-i)!$\n7. $f(x) = \\sum_{i=1}^{x-1} f(x-i) * (n-x)!/(n-x-i)!$\n8. $f(x) = \\sum_{i=1}^{x-1} f(x-i) * (n-x)!/(n-x-i)!$\n9. $f(x) = \\sum_{i=1}^{x-1} f(x-i) * (n-x)!/(n-x-i)!$\n10. $f(x) = \\sum_{i=1}^{x-1} f(x-i) * (n-x)!/(n-x-i)!$\n11. $f(x) = \\sum_{i=1}^{x-1} f(x-i) * (n-x)!/(n-x-i)!$\n12. $f(x) = \\sum_{i=1}^{x-1} f(x-i) * (n-x)!/(n-x-i)!$\n13. $f(x) = \\sum_{i=1}^{x-1} f(x-i) * (n-x)!/(n-x-i)!$\n14. $f(x) = \\"
    },
    {
        "number": 1032,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1\\n' + '1\\n') == '1'\nassert solution('1\\n' + '2\\n') == '0'\nassert solution('1\\n' + '9\\n') == '0'\nassert solution('1\\n' + '100\\n') == '0'\nassert solution('1\\n' + '100000\\n') == '1'\n"
    },
    {
        "number": 1032,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1 2') == '0'\nassert solution('3 2') == '1 3'\nassert solution('4 3') == '2'\nassert solution('4 5') == '2 3'\nassert solution('1000000000 1 999999999') == '1 999999998'\n"
    },
    {
        "number": 1033,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == \"\"\"[3, 2, 1, 0]\n[2, 1, 1, 1, 0]\n[1, 0, 1, 2, 1]\"\"\"\n"
    },
    {
        "number": 1033,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == '3'\n\"\"\"\n"
    },
    {
        "number": 1033,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"1\\n5\") == \"3\\n\"\nassert solution(\"2\\n4\") == \"3\\n\"\nassert solution(\"3\\n2\") == \"1\\n\"\nassert solution(\"3\\n3\") == \"1\\n\"\nassert solution(\"5\\n5\") == \"1\\n\"\n"
    },
    {
        "number": 1033,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('5 2') == '3'\nassert solution('6 8') == '3'\nassert solution('1 1') == '1'\nassert solution('2 2') == '2'\nassert solution('3 3') == '1'\n"
    },
    {
        "number": 1033,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == ''\n"
    },
    {
        "number": 1033,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == expected\n"
    },
    {
        "number": 1033,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == expected\n\"\"\"\n\nimport sys"
    },
    {
        "number": 1033,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('5 2') == '3'\nassert solution('6 8') == '3'\nassert solution('6 9') == '3'\nassert solution('6 10') == '3'\nassert solution('6 100') == '3'\n"
    },
    {
        "number": 1033,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"5 2\") == \"3\"\nassert solution(\"6 8\") == \"3\"\nassert solution(\"6 8\") == \"3\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"1 1\") == \"1\"\n"
    },
    {
        "number": 1033,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == '3'\n"
    },
    {
        "number": 1034,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('2 2 2 8\\n4 6\\n1 5\\n3 8') == '19\\n17\\n15\\n14\\n13\\n12\\n10\\n8'"
    },
    {
        "number": 1034,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('2 2 2 8\\n4 6\\n1 5\\n3 8') == '19\\n17\\n15\\n14\\n13\\n12\\n10\\n8'\nprint('All set! Click \"Check\" to earn cool rewards!')\n"
    },
    {
        "number": 1034,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('2 2 2 8') == '19\\n17\\n15\\n14\\n13\\n12\\n10\\n8'\nassert solution('1 1 1 1') == '10\\n9\\n8\\n7\\n6\\n5\\n4\\n3\\n2\\n1'\nassert solution('4 6') == '19\\n17\\n15\\n14\\n13\\n12\\n10\\n8'\nassert solution('1 5') == '4\\n3\\n2\\n1'\nassert solution('3 8') == '19\\n17\\n15\\n14\\n13\\n12\\n10\\n8'\n"
    },
    {
        "number": 1034,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''2 2 2 8\n4 6\n1 5\n3 8''') == '19\\n17\\n15\\n14\\n13\\n12\\n10\\n8'\nassert solution('''2 2 2 8\n4 6\n1 5\n3 8\n3 4\n1 2\n1 3\n2 3\n1 2\n1 3\n1 4\n2 4\n1 3\n2 3\n2 4\n1 4\n1 3\n1 4\n2 3\n2 4\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n2 11\n2 12\n2 13\n2 14\n2 15\n2 16\n3 17\n4 18\n4 19\n4 20\n4 21\n4 22\n4 23\n4 24\n4 25\n4 26\n4 27\n4 28\n4 29\n4 30\n4 31\n4 32\n4 33\n4 34\n4 35\n4 36\n5 37\n5 38\n5 39\n5 40\n5 41\n5 42\n5 43\n5 44\n5 45\n5 46\n5 47\n5 48\n5 49\n5 50\n5 51\n5 52\n5 53\n5 54\n5 55\n5 56\n5 57\n5 58\n5 59\n5 60\n5 61\n5 62\n5 63\n5 64\n5 65\n5 66\n5 67\n5 68\n5 69\n5 70\n5 71\n5 72\n5 73\n5 74\n5 75\n5 76\n5 77\n5 78\n5 79\n5 80\n5 81\n5 82\n5 83\n5 84\n5 85\n5 86\n5 87\n5 88\n5 89\n5 90\n5 91\n5 92\n5 93\n5 94\n5 95\n5 96\n5 97\n5 98\n5 99\n5 100\n6 101\n6 102\n6 103\n6 104\n6 105\n6 106\n6 107\n6 108\n6 109\n6 110\n6 111\n6 112\n6 113\n6 114\n6 115\n6 116\n6 117\n6 118\n6 119\n6 120\n6 121\n6 122\n6 123\n6 124\n6 125\n6 126\n6 127\n6 128\n6 129\n6 130\n6 131\n6 132\n6 133\n6 134\n6 135\n6 136\n6 137\n6 138\n6 139\n6 140\n6 141\n6 142\n6 143\n6 144\n6 145\n6 146\n6 147\n6 148\n6 149\n6 150\n6 151\n6 152\n6 153\n6 154\n6 155\n6 156\n6 157\n6 158\n6 159\n6 160\n6 161\n6 162\n6 163\n6 164\n6 165\n6 166\n6 167\n6 168\n6 169\n6 170\n6 171\n6 172\n6 173\n6 174\n6 175\n6 176\n6 177\n6 178\n6 179\n6 180\n6 181\n6 182\n6 183\n6 184\n6 185\n6 186\n6 187\n6 188\n6 189\n6 190\n6 191\n6 192\n6 193\n6 194\n6 195\n6 196\n6 197\n6 198\n6 199\n6 200\n7 201\n7 202\n7 203\n7 204\n7 205\n7 206\n7 207\n7 208\n7 209\n7 210\n7 211\n7 212\n7 213\n7 214\n7 215\n7 216\n7 217\n7 218\n7 219\n7 220\n7 221\n7 222\n7 223\n7 224\n7 225\n7 226\n7 227\n7 228\n7 229\n7 230\n7 231\n7 232\n7 233\n7 234\n7 235\n7 236\n7 237\n7 238\n7 239\n7 240\n7 241\n7 242\n7 243\n7 244\n7 245\n7 246\n7 247\n7 248\n7 249\n7 250\n7 251\n7 252\n7 253\n7 254\n7 255\n7 256\n7 257\n7 258\n7 259\n7 260\n7 261\n7 262\n7 263\n7 264\n7 265\n7 266\n7 267\n7 268\n7 269\n7 270\n7 271\n7 272\n7 273\n7 274\n7 275\n7 276\n7 277\n7 278\n7 279\n7 280\n7 281\n7 282\n7 283\n7 284\n7 285\n7 286\n7 287\n7 288\n7 289\n7 290\n7 291\n7 292\n7 293\n7 294\n7 295\n7 296\n7 297\n7 298\n7 299\n7 300\n7 301\n7 302\n7 303\n7 304\n7 305\n7 306\n7 307\n7 308\n7 309\n7 310\n7 311\n7 312\n7 313\n7 314\n7 315\n7 316\n7 317\n7 318\n7 319\n7 320\n7 321\n7 322\n7 323\n7 324\n7 325\n7 326\n7 327\n7 328\n7 329\n7 330\n7 331\n7 332\n7 333\n7 334\n7 335\n7 336\n7 337\n7 338\n7 339\n7 340\n7 341\n7 342\n7 343\n7 344\n7 345\n7 346\n7 347\n7 348\n7 349\n7 350\n7 351\n7 352\n7 353\n7 354\n7 355\n7 356\n7 357\n7 358\n7 359\n7 360\n7 361\n7 362\n7 363\n7 364\n7 365\n7 366\n7 367\n7 368\n7 369\n7 370\n7 371\n7 372\n7 373\n7 374\n7 375\n7 376\n7 377\n7 378\n7 379\n7 380\n7 381\n7 382\n7 383\n7 384\n7 385\n7 386\n7 387\n7 388\n7 389\n7 390\n7 39"
    },
    {
        "number": 1034,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"4 2 2 8\") == \"19\\n17\\n15\\n14\\n13\\n12\\n10\\n8\"\nassert solution(\"1 1 1 8\") == \"19\\n17\\n15\\n14\\n13\\n12\\n10\\n8\"\nassert solution(\"2 2 2 8\") == \"19\\n17\\n15\\n14\\n13\\n12\\n10\\n8\"\nassert solution(\"2 2 2 3\") == \"0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\"\nassert solution(\"2 2 2 4\") == \"0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\"\n"
    },
    {
        "number": 1034,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 1034,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''2 2 2 8\n4 6\n1 5\n3 8''') == '19\\n17\\n15\\n14\\n13\\n12\\n10\\n8'\nassert solution('''1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1''') == '''1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1'''\nassert solution('''2 2 2 4\n4 6\n1 5\n3 8\n4 7\n3 6\n1 5\n3 8\n4 7\n3 6\n1 5\n3 8\n4 7\n3 6''') == '''19\\n17\\n15\\n14\\n13\\n12\\n10\\n8'''\n\n'''\n"
    },
    {
        "number": 1034,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3 4\") == \"4\"\nassert solution(\"1 2 3\") == \"1\"\nassert solution(\"1 2 3 4 5\") == \"5\"\nassert solution(\"5 5 5 5\") == \"0\"\nassert solution(\"5 5 5 5 7\") == \"0\"\n"
    },
    {
        "number": 1034,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''2 2 2 8\n4 6\n1 5\n3 8''') == '19\\n17\\n15\\n14\\n13\\n12\\n10\\n8'\n"
    },
    {
        "number": 1034,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"4 1 1 8\") == \"10\"\nassert solution(\"2 2 2 8\") == \"19\"\nassert solution(\"3 1 1 4\") == \"14\"\nassert solution(\"1 1 1 8\") == \"17\"\nassert solution(\"2 3 2 1\") == \"16\"\n"
    },
    {
        "number": 1035,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''12 18''') == '3'\nassert solution('''12 4''') == '3'\nassert solution('''12 5''') == '3'\nassert solution('''12 4 10''') == '3'\nassert solution('''1 1''') == '1'\n"
    },
    {
        "number": 1035,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('12 18') == '3'\nassert solution('1 1') == '1'\nassert solution('1 1') == '2'\nassert solution('1 1') == '3'\nassert solution('2 2') == '1'\n"
    },
    {
        "number": 1035,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1 2') == '3'\nassert solution('1 10') == '3'\nassert solution('10 100') == '3'\nassert solution('10 100') == '3'\nassert solution('1 10') == '3'\n"
    },
    {
        "number": 1035,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"2 3\") == \"3\"\nassert solution(\"18 3\") == \"3\"\nassert solution(\"10 24\") == \"3\"\nassert solution(\"17 5\") == \"5\"\nassert solution(\"100 100\") == \"5\"\n"
    },
    {
        "number": 1035,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 1035,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''12 18''') == '3'\nassert solution('''10 10''') == '2'\nassert solution('''100000 100000''') == '8'\nassert solution('''1000000 100000000''') == '2'\nassert solution('''10 100000''') == '2'\n"
    },
    {
        "number": 1035,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"1 1\") == 1\nassert solution(\"2 3\") == 3\nassert solution(\"3 3\") == 3\nassert solution(\"3 2\") == 1\nassert solution(\"6 3\") == 3\n"
    },
    {
        "number": 1035,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('12 18') == '3'\nassert solution('1 1') == '1'\nassert solution('10 10') == '1'\nassert solution('10 10') == '1'\nassert solution('100 100') == '1'\n"
    },
    {
        "number": 1035,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('12 18') == '3'\nassert solution('2 2') == '0'\nassert solution('30 24') == '3'\nassert solution('4 6') == '2'\nassert solution('3 5') == '1'\n"
    },
    {
        "number": 1035,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''12 18''') == '3'\n'''\n\"\"\"\n"
    },
    {
        "number": 1036,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''3 2\nRPS''') == 'P'\nassert solution('''3 2\nRPS''') == 'P'\nassert solution('''1 2\nH''') == 'H'\nassert solution('''3 2\nH''') == 'H'\nassert solution('''1 2\nS''') == 'S'\n"
    },
    {
        "number": 1036,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('RPS') == 'P'\nassert solution('RPSP') == 'P'\nassert solution('RPSRS') == 'S'\nassert solution('RPSPPRS') == 'S'\nassert solution('PPRRPSPS') == 'P'\n"
    },
    {
        "number": 1036,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 1036,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"RPS\") == \"P\"\nassert solution(\"RPS\") == \"P\"\nassert solution(\"RPS\") == \"P\"\nassert solution(\"RPS\") == \"P\"\nassert solution(\"RPS\") == \"P\"\n"
    },
    {
        "number": 1036,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"1 2\") == \"P\"\nassert solution(\"RPS\") == \"P\"\nassert solution(\"RP\") == \"R\"\nassert solution(\"RS\") == \"P\"\nassert solution(\"RPSRS\") == \"P\"\n"
    },
    {
        "number": 1036,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == 'P'"
    },
    {
        "number": 1036,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''3 2\nRPS\n''') == 'P'\nassert solution('''3 2\nRPS\n''') == 'P'\nassert solution('''3 2\nRPSR\n''') == 'R'\nassert solution('''3 2\nRPSP\n''') == 'P'\nassert solution('''3 2\nRPSSP\n''') == 'S'\n"
    },
    {
        "number": 1036,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"RPS\") == \"P\"\nassert solution(\"RPSRPSRPS\") == \"P\"\nassert solution(\"RPS\") == \"P\"\nassert solution(\"RPSRPS\") == \"P\"\nassert solution(\"RPSRPSRPS\") == \"P\"\n"
    },
    {
        "number": 1036,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"3 2\") == \"P\"\nassert solution(\"RPS\") == \"P\"\nassert solution(\"RPSSRRS\") == \"P\"\nassert solution(\"RPSPP\") == \"P\"\nassert solution(\"RPSS\") == \"P\"\n"
    },
    {
        "number": 1036,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"RPS\") == \"P\"\nassert solution(\"RPS\") == \"P\"\nassert solution(\"RPS\") == \"P\"\nassert solution(\"RPS\") == \"P\"\nassert solution(\"RPS\") == \"P\"\n"
    },
    {
        "number": 1037,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == expected\n"
    },
    {
        "number": 1037,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''4\n1 3 4 2''') == '20'\n\n'''\n\n'''\n"
    },
    {
        "number": 1037,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 1037,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"1 3 4 2\") == \"20\""
    },
    {
        "number": 1037,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''4\n1 3 4 2''') == '20'\nassert solution('''2\n1 2''') == '0'\nassert solution('''1\n1''') == '0'\nassert solution('''2\n1 2''') == '0'\nassert solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '55'\n"
    },
    {
        "number": 1037,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1 3 4 2') == '20'\nassert solution('1 5 2 4 3') == '40'\nassert solution('3 2 3 4 1') == '60'\nassert solution('5 2 2 4 1') == '80'\nassert solution('7 2 1 8 4 5 9 3') == '92'\n"
    },
    {
        "number": 1037,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('2\\n1 3 4 2') == '20'\nassert solution('3\\n1 3 4 2') == '13'\nassert solution('3\\n2 3 4 1') == '13'\nassert solution('6\\n1 2 4 3 4 3 5 6') == '54'\nassert solution('10\\n1 2 4 3 4 3 5 6 7 8 9 10') == '274'\n"
    },
    {
        "number": 1037,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"\n4\n1 3 4 2\n\"\"\") == '20'\nassert solution(\n\"\"\"\n5\n2 3 4 2 6\n\"\"\") == '40'\nassert solution(\n\"\"\"\n10\n9 9 9 9 9 9 9 9 9 9 9\n\"\"\") == '100'\n"
    },
    {
        "number": 1037,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1 3 4 2') == '20'\nassert solution('1 2 1') == '1'\nassert solution('1 2 3 4') == '1'\nassert solution('1 2 3 4 5') == '1'\nassert solution('1 3 4 2') == '20'\n"
    },
    {
        "number": 1037,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == expected\nprint(solution(stdin))\n\"\"\"\n"
    },
    {
        "number": 1038,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(input(\"\")) == \"\"\n\"\"\"\n"
    },
    {
        "number": 1038,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"2 4\") == \"5\"\nassert solution(\"3 5\") == \"8\"\nassert solution(\"1 2\") == \"3\"\nassert solution(\"1 10\") == \"11\"\n\n\"\"\""
    },
    {
        "number": 1038,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('2 4') == '5'\nassert solution('0 1') == '1'\nassert solution('1 1') == '0'\nassert solution('0 0') == '0'\n\nprint('Testcases passed')\n"
    },
    {
        "number": 1038,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('2 4') == '5'\nassert solution('2 4') == '5'\nassert solution('2 4') == '5'\n"
    },
    {
        "number": 1038,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('2 4\\n') == '5'\nassert solution('-1 0\\n') == '-1'\nassert solution('1 5\\n') == '0'\nassert solution('1 1\\n') == '0'\nassert solution('0 10\\n') == '10'\n"
    },
    {
        "number": 1038,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == \"5\"\n"
    },
    {
        "number": 1038,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"2 4\") == 5\nassert solution(\"2 4\") == 5\nassert solution(\"1 2\") == 3\nassert solution(\"1 2\") == 3\nassert solution(\"1 2\") == 3\n"
    },
    {
        "number": 1038,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('2 4\\n') == '5'\nassert solution('1 1\\n') == '0'\nassert solution('3 5\\n') == '6'\nassert solution('0 0\\n') == '0'\nassert solution('1 0\\n') == '1'\n"
    },
    {
        "number": 1038,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('2 4') == '5'\nassert solution('2 3') == '6'\nassert solution('2 3') == '6'\nassert solution('1 1') == '0'\nassert solution('0 1') == '1'\n"
    },
    {
        "number": 1038,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('2 4') == '5'\nassert solution('3 5') == '6'\nassert solution('1 5') == '6'\nassert solution('2 2') == '0'\nassert solution('0 0') == '0'\n"
    },
    {
        "number": 1039,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('3\\n1 2 1\\n1 3 1\\n2 4 1\\n3 5 1\\n3 1\\n2 4\\n2 3\\n4 5') == '3\\n2\\n4'\nassert solution('3\\n1 2 1\\n1 3 1\\n2 4 1\\n3 5 1\\n3 1\\n2 4\\n2 3\\n4 5') == '3\\n2\\n4'\nassert solution('3\\n1 2 1\\n1 3 1\\n2 4 1\\n3 5 1\\n3 1\\n2 4\\n2 3\\n4 5\\n4 1') == '3\\n2\\n4'\nassert solution('3\\n1 2 1\\n1 3 1\\n2 4 1\\n3 5 1\\n3 1\\n2 4\\n2 3\\n4 5\\n4 1') == '3\\n2\\n4'\nassert solution('3\\n1 2 1\\n1 3 1\\n2 4 1\\n3 5 1\\n3 1\\n2 4\\n2 3\\n4 5\\n4 1') == '3\\n2\\n4'\n"
    },
    {
        "number": 1039,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"5\n1 2 1\n1 3 1\n2 4 1\n3 5 1\n3 1\n2 4\n2 3\n4 5\n\"\"\") == \"\"\"3\n2\n4\"\"\"\n\nassert solution(\n\"\"\"10\n1 2 1\n1 3 1\n2 4 1\n3 5 1\n3 1\n2 4\n2 3\n4 5\n4 6\n4 7\n4 8\n4 9\n9 10\n\"\"\") == \"\"\"2\n3\n4\n5\n6\n7\n8\n9\n10\"\"\"\n\nassert solution(\n\"\"\"100\n1 2 1\n1 3 1\n2 4 1\n3 5 1\n3 1\n2 4\n2 3\n4 5\n4 6\n4 7\n4 8\n4 9\n9 10\n99 11\n99 12\n99 13\n99 14\n99 15\n99 16\n99 17\n99 18\n99 19\n99 20\n99 21\n99 22\n99 23\n99 24\n99 25\n99 26\n99 27\n99 28\n99 29\n99 30\n99 31\n99 32\n99 33\n99 34\n99 35\n99 36\n99 37\n99 38\n99 39\n99 40\n99 41\n99 42\n99 43\n99 44\n99 45\n99 46\n99 47\n99 48\n99 49\n99 50\n99 51\n99 52\n99 53\n99 54\n99 55\n99 56\n99 57\n99 58\n99 59\n99 60\n99 61\n99 62\n99 63\n99 64\n99 65\n99 66\n99 67\n99 68\n99 69\n99 70\n99 71\n99 72\n99 73\n99 74\n99 75\n99 76\n99 77\n99 78\n99 79\n99 80\n99 81\n99 82\n99 83\n99 84\n99 85\n99 86\n99 87\n99 88\n99 89\n99 90\n99 91\n99 92\n99 93\n99 94\n99 95\n99 96\n99 97\n99 98\n99 99\n99 100\n\"\"\") == \"\"\"100\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n99\n"
    },
    {
        "number": 1039,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''5\n1 2 1\n1 3 1\n2 4 1\n3 5 1\n3 1\n2 4\n2 3\n4 5''') == '''3\n2\n4\n'''\nassert solution('''10\n1 2 1\n1 3 1\n2 4 1\n3 5 1\n3 1\n2 4\n2 3\n4 5\n4 3\n5 6\n5 3\n6 7\n6 3''') == '''10\n7\n8\n'''\nassert solution('''10\n1 2 1\n1 3 1\n2 4 1\n3 5 1\n3 1\n2 4\n2 3\n4 5\n4 3\n5 6\n5 3\n6 7\n6 3''') == '''5\n8\n9\n10\n11\n'''\n"
    },
    {
        "number": 1039,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"1 2 1\\n1 3 1\\n2 4 1\\n3 5 1\\n3 1\\n2 4\") == \"3\\n2\\n4\"\n\"\"\"\n"
    },
    {
        "number": 1039,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 1039,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\n'''5\n1 2 1\n1 3 1\n2 4 1\n3 5 1\n3 1\n2 4\n2 3\n4 5\n''') == '''3\n2\n4\n'''\nassert solution(\n'''5\n1 2 1\n1 3 1\n2 4 1\n3 5 1\n3 1\n2 4\n2 3\n4 5\n''') == '''2\n4\n'''\n"
    },
    {
        "number": 1039,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"1\\n1 2 1\\n1 3 1\\n2 4 1\\n3 5 1\\n3 1\\n2 4\\n2 3\\n4 5\") == \"3\\n2\\n4\"\nassert solution(\"2\\n1 2 1\\n1 3 1\\n2 4 1\\n3 5 1\\n3 1\\n2 4\\n2 3\\n4 5\") == \"2\\n4\\n3\"\nassert solution(\"5\\n1 2 1\\n1 3 1\\n2 4 1\\n3 5 1\\n3 1\\n2 4\\n2 3\\n4 5\") == \"4\\n1\\n2\"\n\"\"\"\n\nfrom sys import stdin, stdout\nimport math\n"
    },
    {
        "number": 1039,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''5\n1 2 1\n1 3 1\n2 4 1\n3 5 1\n3 1\n2 4\n2 3\n4 5''') == '3\\n2\\n4'\nassert solution('''7\n1 2 1\n1 3 1\n2 4 1\n3 5 1\n3 1\n2 4\n2 3\n4 5\n4 3''') == '3\\n2\\n4'\nassert solution('''6\n1 2 1\n1 3 1\n2 4 1\n3 5 1\n3 1\n2 4\n2 3\n4 5\n4 3''') == '3\\n2\\n4'\nassert solution('''5\n1 2 1\n1 3 1\n2 4 1\n3 5 1\n3 1\n2 4\n2 3\n4 5''') == '3\\n2\\n4'\nassert solution('''7\n1 2 1\n1 3 1\n2 4 1\n3 5 1\n3 1\n2 4\n2 3\n4 5\n4 3''') == '3\\n2\\n4'\n"
    },
    {
        "number": 1039,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''\n5\n1 2 1\n1 3 1\n2 4 1\n3 5 1\n3 1\n2 4\n2 3\n4 5\n''') == '''3\n2\n4'''\n"
    },
    {
        "number": 1039,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == expected\nprint(solution(stdin))\n\n\"\"\"\n\n\"\"\"\nThe distance between two vertices of a tree T is defined as the number of edges that traverse between them.\n\nFor example, the distance between vertices 1 and 2 in a tree T is the number of edges that traverse between them.\n\nThe tree T is given as a pair of vertices v_i and v_j that are connected by an edge (u, v) where u is in v_i and v is in v_j.\n\nThere is an undirected edge from vertex u to vertex v (represented as u to v) if and only if the distance between v and u is even.\n\nYou are also given an integer k. A valid path is a path that uses each vertex at most k times.\n\nFor example, a valid path in a tree T is any path that uses vertices in the tree T (excluding the root) exactly once.\n\nYou are also given a tree T. The root of T is the vertex 1, and there is a directed edge (1, 2) from the root to each vertex of the tree.\n\nReturn the number of valid paths from the root to each vertex.\n\nNote that the vertices may be visited multiple times. A valid path is a path that uses each vertex at least once. A valid path is different from a string that can be permuted to the same string, since a string can be permuted to form a valid path but not necessarily the same string.\n\nInput:\n    The first line contains two space-separated integers N and Q (1\u2264N\u226410^5, 1\u2264Q\u226410^5).\n    The next line contains N\u22121 integers u, v, c (1\u2264u, v\u2264N\u22121, 1\u2264c\u226410^9).\n    The next Q lines each contain two space-separated integers x and y (1\u2264x, y\u2264N\u22121), where the first vertex is x and the second vertex is y.\n\nOutput:\n    For each query, print the number of valid paths from the root to each vertex in an integer on a new line.\n\nConstraints:\n    3\u2264N\u226410^5 \n    1\u2264a_i,b_i\u2264N (1\u2264i\u2264N-1) \n    1\u2264c_i\u226410^9 (1\u2264i\u2264N-1) \n    The given graph is a tree.\n    1\u2264Q\u226410^5 \n    1\u2264K\u2264N \n    1\u2264x_j,y_j\u2264N (1\u2264j\u2264Q) \n    x_j\u2260y_j (1\u2264j\u2264Q) \n    x_j\u2260K,y_j\u2260K (1\u2264j\u2264Q) \n\nSample Input:\n5\n1 2 1\n1 3 1\n2 4 1\n3 5 1\n3 1\n2 4\n2 3\n4 5\n\nSample Output:\n3\n2\n4\n\nExplanation:\nA path from vertex 1 to vertex 2 is 1 step.\nA path from vertex 1 to vertex 3 is 1+1=2 steps.\nA path from vertex 2 to vertex 4 is 1+1+1=3 steps.\nA path from vertex 3 to vertex 5 is 1+1+1+1=4 steps.\nA path from vertex 1 to vertex 3 is 1+1+1+1=4 steps.\nA path from vertex 2 to vertex 4 is 1+1+1+1+1=5 steps.\nA path from vertex 3 to vertex 4 is 1+1+1+1+1=5 steps.\nA path from vertex 2 to vertex 3 is 1+1+1+1+1+1=6 steps.\nA path from vertex 1 to vertex 4 is 1+1+1+1+1+1+1=7 steps.\nA path from vertex 2 to vertex 3 is 1+1+1+1+1+1+1+1=8 steps.\nA path from vertex 4 to vertex 1 is 1+1+1+1+1+1+1+1+1=9 steps.\nA path from vertex 2 to vertex 3 is 1+1+1+1+1+1+1+1+1+1=10 steps.\nA path from vertex 4 to vertex 1 is 1+1+1+1+1+1+1+1+1+1=11 steps.\n\"\"\""
    },
    {
        "number": 1040,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('icefox') == 'ice'\nassert solution('icefox') == 'ice'\nassert solution('ice') == 'ice'\nassert solution('ice') == 'ice'\nassert solution('ice') == 'ice'\n"
    },
    {
        "number": 1040,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdin\n\"\"\"\n"
    },
    {
        "number": 1040,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"icefox\") == \"ice\"\nassert solution(\"icefoxtfoxtoo\") == \"icefoxt\"\nassert solution(\"icefoxtfoxtfoxtoo\") == \"icefoxtfoxt\"\nassert solution(\"icfoxtfoxtfoxtfoo\") == \"icfoxtfoxt\"\nassert solution(\"icefoxtfoxtfoxtfoxtoo\") == \"icefoxtfoxtfoxt\"\n"
    },
    {
        "number": 1040,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('icefox') == 'ice'\nassert solution('ice') == ''\nassert solution('ice') == ''\nassert solution('icefoxfoxfox') == 'icefox'\nassert solution('icefoxfoxfox') == 'icefox'\n"
    },
    {
        "number": 1040,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('icefox') == 'ice'\nassert solution('frodo') == 'frodo'\nassert solution('ifrodo') == 'ifrodo'\nassert solution('eeeeeefrodo') == 'eee'\nassert solution('dceb') == ''\n\"\"\"\n"
    },
    {
        "number": 1040,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdin.replace('fox', '')\n'''\n"
    },
    {
        "number": 1040,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdin[:-4] + \"ice\"\n\n\"\"\"\n\n\"\"\"\nTest case:\n\nTest case 1:\n\n\"\"\"\n\n\"\"\"\nTest case 2:\n\n\"\"\"\n\n\"\"\"\nTest case 3:\n\n\"\"\"\n\n\"\"\"\nTest case 4:\n\n\"\"\"\n\n\"\"\"\nTest case 5:\n\n\"\"\"\n\n\"\"\"\nTest case 6:\n\n\"\"\"\n\n\"\"\"\nTest case 7:\n\n\"\"\"\n\n\"\"\"\nTest case 8:\n\n\"\"\"\n\n\"\"\"\nTest case 9:\n\n\"\"\"\n\n\"\"\"\nTest case 10:\n\n\"\"\"\n\n\"\"\"\nTest case 11:\n\n\"\"\"\n\n\"\"\"\nTest case 12:\n\n\"\"\"\n\n\"\"\"\nTest case 13:\n\n\"\"\"\n\n\"\"\"\nTest case 14:\n\n\"\"\"\n\n\"\"\"\nTest case 15:\n\n\"\"\"\n\n\"\"\"\nTest case 16:\n\n\"\"\"\n\n\"\"\"\nTest case 17:\n\n\"\"\"\n\n\"\"\"\nTest case 18:\n\n\"\"\"\n\n\"\"\"\nTest case 19:\n\n\"\"\"\n\n\"\"\"\nTest case 20:\n\n\"\"\"\n"
    },
    {
        "number": 1040,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('icefox') == 'ice'\nassert solution('icea') == 'ice'\nassert solution('ice') == ''\nassert solution('ice') == ''\nassert solution('ice') == ''\n"
    },
    {
        "number": 1040,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('icefox') == 'ice'\nassert solution('foxice') == 'fox'\nassert solution('ice') == ''\nassert solution('foxfoxfoxfox') == ''\nassert solution('icefoxfoxfoxfox') == 'ice'\n"
    },
    {
        "number": 1040,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('icefox') == 'ice'\nprint(solution('icefox'))\n"
    },
    {
        "number": 1041,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"314159\") == \"YES\"\nassert solution(\"0\") == \"NO\"\nassert solution(\"00100000100000110000000001100\") == \"YES\"\nassert solution(\"1234\") == \"NO\"\n"
    },
    {
        "number": 1041,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('314159') == 'NO'\nassert solution('10000000') == 'YES'\nassert solution('100000') == 'NO'\nassert solution('0000') == 'NO'\nassert solution('31415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679') == 'YES'\n"
    },
    {
        "number": 1041,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdin\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 1041,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('314159') == 'YES'\nassert solution('000100000100000110000000001100') == 'YES'\nassert solution('6') == 'NO'\n\n\n\n\n\"\"\"\n"
    },
    {
        "number": 1041,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdin\n\n'''\n"
    },
    {
        "number": 1041,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''30''') == 'YES'\nassert solution('''314159''') == 'NO'\nassert solution('''6''') == 'YES'\nassert solution('''314159''') == 'NO'\nassert solution('''314159''') == 'NO'\n"
    },
    {
        "number": 1041,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('6\\n314159') == 'NO'\nassert solution('30\\n000100000100000110000000001100') == 'YES'\nassert solution('30\\n010000000100001010000000001100') == 'YES'\nassert solution('30\\n010000000100000110000000001100') == 'YES'\nassert solution('30\\n010000010000000110000000001100') == 'YES'\n"
    },
    {
        "number": 1041,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == \"YES\"\n\"\"\"\nimport sys"
    },
    {
        "number": 1041,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('314159') == 'YES'\nassert solution('1234567890') == 'YES'\nassert solution('11111111') == 'NO'\nassert solution('567890123456789012345678901234567890') == 'YES'\nassert solution('01234567890') == 'NO'\n"
    },
    {
        "number": 1041,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\n    '314159'\n    ) == 'YES'\n\nassert solution(\n    '00100010001001100000100000110000000001100'\n    ) == 'YES'\n\nassert solution(\n    '123456789'\n    ) == 'NO'\n\nassert solution(\n    '123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890'\n    ) == 'YES'\n\nassert solution(\n    '123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890'\n    ) == 'NO'"
    },
    {
        "number": 1042,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 1042,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('3 9') == '3'\nassert solution('5 8') == '0'\nassert solution('5 4') == '3'\nassert solution('3 3') == '1'\nassert solution('2 2') == '1'\n"
    },
    {
        "number": 1042,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdin\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 1042,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\n    \"3 9\\n\"\n) == \"3\"\n\"\"\"\n"
    },
    {
        "number": 1042,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('3 9\\n') == '3'\nassert solution('5 8\\n') == '0'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 1042,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(input()) == output()\n"
    },
    {
        "number": 1042,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('3 9') == '3'\nassert solution('5 8') == '0'\nassert solution('3 9') == '3'\nassert solution('5 8') == '0'\nassert solution('3 5') == '3'\n"
    },
    {
        "number": 1042,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == '3'\n\"\"\"\n"
    },
    {
        "number": 1042,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(input()) == output()\n\n\"\"\"\n\n\"\"\"\n\u6d4b\u8bd5\u7528\u4f8b\uff1a\n\n3 9\n\n3\n\n5 8\n\n\"\"\""
    },
    {
        "number": 1042,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''3 9\n''') == '3'\nassert solution('''5 8\n''') == '0'\nassert solution('''3 9\n3 8\n''') == '0'\nassert solution('''5 8\n3 9\n5 9\n''') == '0'\nassert solution('''5 8\n7 8\n3 9\n5 9\n''') == '0'\n"
    },
    {
        "number": 1043,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\n'''\n4\n3 9 1 -1\n''') == '0'\nassert solution(\n'''\n8\n11 -1 13 19 24 7 17 5\n''') == '12'\nassert solution(\n'''\n2\n1 -1\n''') == '0'\nassert solution(\n'''\n2\n1 1\n''') == '0'\nassert solution(\n'''\n5\n1 1 1 1 1\n''') == '0'\n"
    },
    {
        "number": 1043,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('4\\n3 9 1 -1') == '0'\nassert solution('8\\n11 -1 13 19 24 7 17 5') == '12'\nassert solution('8\\n-1 13 19 24 7 17 5') == '12'\nassert solution('8\\n-1 13 19 24 7 17 5') == '12'\nassert solution('8\\n-1 13 19 24 7 17 5') == '12'\n"
    },
    {
        "number": 1043,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"4\\n3 9 1 -1\") == \"0\"\nassert solution(\"8\\n11 -1 13 19 24 7 17 5\") == \"12\"\nassert solution(\"8\\n1 -1 13 19 24 7 17 5\") == \"5\"\nassert solution(\"8\\n1 -1 13 19 24 7 17 5\") == \"5\"\nassert solution(\"8\\n1 -1 13 19 24 7 17 5\") == \"5\"\n"
    },
    {
        "number": 1043,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"3 4\") == \"0\"\nassert solution(\"1 2 1\") == \"1\"\nassert solution(\"2 2 1\") == \"2\"\nassert solution(\"2 2 2\") == \"2\"\nassert solution(\"2 2 2 2\") == \"4\"\n"
    },
    {
        "number": 1043,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == \"\"\n"
    },
    {
        "number": 1043,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''4''') == '0'\nassert solution('''3 9 1 -1''') == '0'\nassert solution('''8''') == '0'\nassert solution('''11 -1 13 19 24 7 17 5''') == '12'\nassert solution('''20''') == '0'\n"
    },
    {
        "number": 1043,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('4\\n3 9 1 -1\\n') == '0\\n'\nassert solution('8\\n11 -1 13 19 24 7 17 5\\n') == '12\\n'\n\n\n\"\"\"\n\nn = int(input())\na = list(map(int,input().split()))"
    },
    {
        "number": 1043,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50') == '0'\nassert solution
    },
    {
        "number": 1043,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('8\\n11 -1 13 19 24 7 17 5') == '0'\nassert solution('8\\n11 -1 13 19 24 7 17 5\\n') == '0'\nassert solution('6\\n11 -1 13 19 24 7 17 5') == '10'\nassert solution('6\\n11 -1 13 19 24 7 17 5\\n') == '10'\nassert solution('4\\n3 9 1 -1') == '0'\n"
    },
    {
        "number": 1043,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1 2\\n') == '0'\nassert solution('8 -1 13 19 24 7 17 5\\n') == '12'\nassert solution('8 11 -1 13 19 24 7 17 5\\n') == '12'\nassert solution('8 11 -1 13 19 24 7 17 5\\n') == '12'\nassert solution('8 11 -1 13 19 24 7 17 5\\n') == '12'\n"
    },
    {
        "number": 1044,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n3\n1 2 3\n\"\"\") == \"2\"\nassert solution(\"\"\"\n5\n1 1 5 1 1\n\"\"\") == \"2\"\nassert solution(\"\"\"\n1\n1\n\"\"\") == \"1\"\nassert solution(\"\"\"\n1\n1\n1\n1\n1\n\"\"\") == \"2\"\nassert solution(\"\"\"\n5\n1 1 5 1 1\n\"\"\") == \"2\"\n"
    },
    {
        "number": 1044,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 2 3 4\") == 2\nassert solution(\"3\\n1 1 5 1\") == 1\nassert solution(\"5\\n1 1 5 1 1\") == 2\nassert solution(\"5\\n1 1 5 1 1\") == 2\nassert solution(\"5\\n1 1 5 1 1\") == 2\n"
    },
    {
        "number": 1044,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('5 1 2 3') == '1'\nassert solution('1 1 5 1 1') == '2'\nassert solution('2 1 2 2 2') == '2'\nassert solution('1 1 1 1 1') == '1'\n"
    },
    {
        "number": 1044,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''3\n1 2 3\n''') == '2'\nassert solution('''5\n1 1 5 1 1\n''') == '2'\nassert solution('''5\n1 1 5 1 1\n''') == '2'\nassert solution('''5\n1 1 5 1 1\n''') == '2'\nassert solution('''5\n1 1 5 1 1\n''') == '2'\n"
    },
    {
        "number": 1044,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(input) == output\n"
    },
    {
        "number": 1044,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1\\n1\\n') == '1'\nassert solution('2\\n2\\n') == '2'\nassert solution('3\\n1\\n') == '2'\nassert solution('4\\n1\\n') == '2'\nassert solution('5\\n1\\n') == '2'"
    },
    {
        "number": 1044,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('3\\n1 2 3\\n') == '2'\nassert solution('5\\n1 1 5 1 1\\n') == '2'\nassert solution('1\\n1\\n') == '2'\nassert solution('1\\n5\\n') == '2'\nassert solution('1\\n5\\n1\\n') == '2'\n"
    },
    {
        "number": 1044,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('4\\n2\\n1\\n3\\n') == '2'\nassert solution('3\\n3\\n1\\n2\\n3\\n1') == '1'\nassert solution('5\\n2\\n1\\n1\\n2') == '1'\nassert solution('5\\n3\\n1\\n1\\n2') == '1'\nassert solution('3\\n2\\n1\\n2\\n3\\n1') == '2'\n"
    },
    {
        "number": 1044,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('3\\n1 2 3') == '2'\nassert solution('5\\n1 1 5 1 1') == '2'\nassert solution('1\\n1') == '2'\nassert solution('7\\n1 1 5 1 1 1 1') == '2'"
    },
    {
        "number": 1044,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"1\\n1\") == \"2\"\nassert solution(\"2\\n1\") == \"1\"\nassert solution(\"1\\n2\") == \"2\"\nassert solution(\"3\\n3\") == \"1\"\nassert solution(\"1\\n3\") == \"2\"\n"
    },
    {
        "number": 1045,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(input()) == output(input())\n'''\n'''\nTests:\n    >>> solution(input())\n    4\n    >>> solution(input())\n    5\n    >>> solution(input())\n    6\n    >>> solution(input())\n    7\n    >>> solution(input())\n    8\n    >>> solution(input())\n    9\n    >>> solution(input())\n    10\n    >>> solution(input())\n    11\n    >>> solution(input())\n    12\n    >>> solution(input())\n    13\n    >>> solution(input())\n    14\n    >>> solution(input())\n    15\n    >>> solution(input())\n    16\n    >>> solution(input())\n    17\n    >>> solution(input())\n    18\n    >>> solution(input())\n    19\n    >>> solution(input())\n    20\n    >>> solution(input())\n    21\n    >>> solution(input())\n    22\n    >>> solution(input())\n    23\n    >>> solution(input())\n    24\n    >>> solution(input())\n    25\n'''\n'''\nKey Point:\n    To get the maximum height of a pyramid, the height of a pyramid must be\n    greater than the height of the i - 1 pyramid.\n    When a pyramid is constructed, its height is the sum of the heights of its\n    levels.\n    To get the height of the i-th pyramid, we need to get the height of the\n    (i - 1) -th pyramid, plus the height of the i-th level of the pyramid.\n'''"
    },
    {
        "number": 1045,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(input()) == '4'\n\n'''\n"
    },
    {
        "number": 1045,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(input()) == str(2)\n\n\"\"\"\n\nimport sys\nsys.stdin = open(\"test.txt\")"
    },
    {
        "number": 1045,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1\\n') == '1'\nassert solution('25\\n') == '4'\nassert solution('7') == '5'\n\n\n\"\"\"\n"
    },
    {
        "number": 1045,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(1) == 1\nassert solution(25) == 4\n\n\n\nimport sys\n"
    },
    {
        "number": 1045,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"25\") == \"4\"\nassert solution(\"0\") == \"0\"\nassert solution(\"2\") == \"1\"\nassert solution(\"100\") == \"101\"\n"
    },
    {
        "number": 1045,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('1') == '1'\nassert solution('25') == '4'\nassert solution('1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\"
    },
    {
        "number": 1045,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('25') == '4'\n\n'''\n"
    },
    {
        "number": 1045,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1') == '1'\nassert solution('25') == '4'\nassert solution('1\\n25') == '4'\n\n\n\"\"\"\n"
    },
    {
        "number": 1045,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1') == '1'\nassert solution('25') == '4'"
    },
    {
        "number": 1046,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''0 1 7 1 7 10''') == '2'\nassert solution('''0 0 0''') == '-1'\nassert solution('''1 1 1''') == '0'\nassert solution('''1 1 1 1 1 1 1 1 1''') == '-1'\nassert solution('''0 0 0 0 0 0 0 0''') == '0'\n"
    },
    {
        "number": 1046,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\n'''\n6\n0 1 7 1 7 10\n''') == '2'\n\nassert solution(\n'''\n3\n1 1 1\n''') == '-1'\n\nassert solution(\n'''\n1\n0\n''') == '0'\n\nassert solution(\n'''\n0\n1\n''') == '0'\n\nassert solution(\n'''\n5\n1 2 3 4 5\n''') == '4'\n"
    },
    {
        "number": 1046,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1 1 1') == '0'\nassert solution('1 1 1 1') == '0'\nassert solution('2 2 2') == '2'\nassert solution('2 2 1') == '2'\nassert solution('3 3 3') == '-1'\n"
    },
    {
        "number": 1046,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('7\\n0 1 7 1 7 10') == '2'\nassert solution('7\\n0 1 7 1 7 10\\n0 1 7 1\\n0 1 7') == '-1'\nassert solution('3\\n1 1 1') == '-1'\nassert solution('1\\n0') == '0'\n\"\"\"\n"
    },
    {
        "number": 1046,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('0 1 7 1 7 10') == '2'\nassert solution('1 1 1') == '-1'\nassert solution('1 1 1') == '-1'\nassert solution('0 0 0 0 0 0 0') == '0'\nassert solution('0 0 0 0 0 0 0') == '-1'\n"
    },
    {
        "number": 1046,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 1046,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('0 1 7 1 7 10\\n6\\n0 1 7 1 7 10') == '2'\nassert solution('1 1 1\\n1\\n0\\n') == '-1'\nassert solution('1 1 1\\n1\\n0\\n') == '-1'\n\n\n-----\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.read()\n\nN = int(input.split('\\n')[0])\nid_list = list(map(int, input.split('\\n')[1].split()))\n\nnum = 0\n\nfor i in range(0, N):\n    for j in range(i+1, N):\n        if id_list[i] == id_list[j] or id_list[i] == 0 or id_list[j] == 0:\n            continue\n        else:\n            num += 1\n\nprint(num)"
    },
    {
        "number": 1046,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('6\\n0 1 7 1 7 10\\n') == '2'\nassert solution('3\\n1 1 1\\n') == '-1'\nassert solution('1\\n0\\n') == '0'\nassert solution('0\\n0\\n') == '0'\nassert solution('0\\n0\\n') == '0'\n"
    },
    {
        "number": 1046,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('0 1 7 1 7 10') == 2\nassert solution('1 1 1') == -1\nassert solution('2 2 2') == 0\nassert solution('3 3 3') == -1\nassert solution('4 4 4') == -1\n"
    },
    {
        "number": 1046,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdin\n\n\"\"\"\n"
    },
    {
        "number": 1047,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''9''') == '9'\nassert solution('''32''') == '3'"
    },
    {
        "number": 1047,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''9''') == '9'\nassert solution('''10''') == '3'\nassert solution('''3''') == '1'\nassert solution('''4''') == '1'\nassert solution('''10''') == '3'\n"
    },
    {
        "number": 1047,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''9\n''') == '9'\nassert solution('''101\n''') == '1'\nassert solution('''55\n''') == '1'\nassert solution('''10010101\n''') == '3'\nassert solution('''100001\n''') == '4'\n"
    },
    {
        "number": 1047,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('2') == \"1 1\"\nassert solution('11') == \"1 1 1 1 1 1 1 1 1 1\"\nassert solution
    },
    {
        "number": 1047,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"0\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution
    },
    {
        "number": 1047,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"\n9\n\"\"\") == '9'\nassert solution(\n\"\"\"\n32\n\"\"\") == '3'\nassert solution(\n\"\"\"\n9\n\"\"\") == '9'\nassert solution(\n\"\"\"\n10101\n\"\"\") == '8'\nassert solution(\n\"\"\"\n0\n\"\"\") == '1'\n"
    },
    {
        "number": 1047,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('9\\n') == '9'\nassert solution('32\\n') == '3'"
    },
    {
        "number": 1047,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('9') == '9'\nassert solution('32') == '3'\n"
    },
    {
        "number": 1047,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('9') == '9'\nassert solution('32') == '3'\nassert solution('0') == '0'\nassert solution('1') == '1'\nassert solution('101') == '1'\n"
    },
    {
        "number": 1047,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''\n9\n''') == '9'\nassert solution('''\n32\n''') == '3'\n"
    },
    {
        "number": 1048,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('LDUR') == '4'\nassert solution('RRRRUU') == '0'\nassert solution('LLRRRR') == '4'\nassert solution('LLLLLLLL') == '0'\nassert solution('LLLLLLLLLLLLLLLLL') == '4'\n"
    },
    {
        "number": 1048,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('U') == 'U'\nassert solution('UU') == 'U'\nassert solution('UUU') == 'U'\nassert solution('RRRUU') == 'U'\n"
    },
    {
        "number": 1048,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"0\"\nassert solution(\"3\") == \"0\"\nassert solution(\"4\") == \"3\"\nassert solution(\"5\") == \"3\"\n"
    },
    {
        "number": 1048,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 1048,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1') == '0'\nassert solution('LLR') == '4'\nassert solution('LLRLLRLR') == '4'\nassert solution('RRDD') == '2'\nassert solution('LLRRRRRLLRRRRRRRLLRRRRRRRRLLRLRRRLLRRRRRRRRRDDDDLLRLLLLRRLLRRRLLRLLLLLLRRRRRRRRRRRRRRRRRRRRRLLRLRRRLLLRRRLRLLRRRRRRRRRRRRRRRLLRLLRRLRLRLRLLRLLRLLRRLLLLRRLRRLRLRLLRRLRLRRLRLRRRRRRRLLLLLLRRRRRRRRRRRRRRRRRRRLLLLLLRLLRRRRRLRRRLLRRRLRRLLRRRLRRRRLLRRLRRLLRLLRRLRRLLRRLLRRLLRRLRLLLLLRRRLRRLLLLLLLLRRLRRLLRRLLRLRRRLRLLRRLLRLLRRLLLLLLRRLLRLLLLRRLLRRRRRLRLLRLRLLRRLLRRLLRLRRRLRLLRLRRLRRLLRRLRLRRLLRRRRRRLLRRRLRLLRLRRLRRRRLLLLRRLLRLRLRRLLRLRRLRRRLRLRLLRLRRLRRLLLRLRLRRLRRLLRLRRLRLRLLRRRRLLRRRRRRRRRLLRRRLRLRRRRLLRLRRLRRLLRRLLRRLLRRRLRRRRLLRRLLRRRLRRRLRLLRRLRRLLRRLLRRRLRLRRLLRRLLRRRLRRLLRLRRLLRRLLRRLLRRRRLLRRLLRRRLRRLLRRLLRRLLRRLLRRLLRLRRLLRRLLRRLLRRLLRRLLRRLRRLRRLLRRLLRRLLRRRRRRLLRRLRLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLRRLLRRRLRRLLRRLLRRLLRRLLRRLLRLRRLLRRRRLLRRLRRLRRLLRRLLRRLLRRLLRRLRRLLRRLLRRLLRRLLRRRLRRLRRLLRRLRRLRRLLRRLRRLLRRLLRRLLRRLLRRLRRLLRRLLRLRRLLRRRRLLRRLLRRLLRRLLRRLLRRLRRLLRRRLRRLLRRLRRLLRRRRLLRLRRLLRLRRLLRRLLRRLLRLRRLLRRLLRRLLRRLLRRLLRRLRRLLRRLLRRLLRRLLRRLLRRLRRLLRRLLRRLLRRLLRRLLRRLRRLLRRLLRRLLRRLLRRLLRRLRRLLRRLLRRLLRRLLRRLLRRLRRLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLRRLLRRLLRRLRRLLRRLLRRLRRLLRRLLRRLLRRLLRRLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLRRLLRRLLRRLLRRLRRLLRRLLRRLLRRLLRRLLRRLLRRLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLRRLLRRLLRRLLRRLLRRLLRRLRRLLRRLLRRLLRRLLRRLRRLLRRLLRRLLRRLLRRLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLRRLLRRLLRRLLRRLLRRLLRRLRRLLRRLLRRLLRRLLRRLLRRLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLRRLLRRLLRRLLRRLLRRLLRRLLRRLRRLLRRLLRRLLRRLLRRLLRRLLRRLLRRLRRLLRRLLRRLLRRLLRRLLRRLRRLLRRLLRRLLRRLLRRLLRRLRRLLRRLLRRLLRRLLRRLLRRLRRLLRRLLRRLLRRLLRRLLRRLLRRLRRLLRRLLRRLLRRLLRRLRRLLRRLLRRLLRRLLRRLRRLLRRLLRRLLRRLLRRLRRLLRRLLRRLLRRLLRRLLRRLRRLLRRLLRRLLRRLLRRLLRRLRRLLRRLLRRLLRRLLRRLRRLLRRLLRRLLRRLLRRLLRRLRRLLRRLLRRLLRRLLRRLRRLLRRLLRRLLRRLLRRLRRLLRRLLRRLLRRLLRRLRRLLRRLLRRLLRRLLRRLRRLLRRLLRRLLRRLRRLLRRLLRRLLRRLLRRLRRLLRRLLRRLLRRLLRRLLRRLRRLLRRLLRRLLRRLLRRLRRLLRRLLRRLLRRLRRLLRRLLRRLLRRLRRLLRRLLRRLLRRLLRRLRRLLRRLLRRLLRRLRRLLRRLLRRLLRRLLRRLLRRLRRLLRRLLRRLLRRLRRLLRRLLRRLLRRLLRRLRRLLRRLLRRLLRRLLRRLLRRLLRRLRRLLRRLLRRLLRRLLRRLRRLLRRLLRRLLRRLLRRLRRLLRRLLRRLLRRLLRRLLRRLRRLLRRLLRRLLRRLLRRLRRLLRRLLRRLLRRLLRRLRRLLRRLLRRLLRRLLRRLRRLLRRLLRRLLRRLLRRLRRLLRRLLRRLLRRLLRRLRRLLRRLLRRLLRRLRRLLRRLLRRLLRRLLRRLRRLLRRLLRRLLRRLLRRLRRLLRRLLRRLLRRLLRRLLRRLLRRLRRLLRRLLRRLLRRLRRLLRRLLRRLLRRLLRRLRRLLRRLLRRLLRRLRRLLRRLLRRLLRRLLRRLRRLLRRLLRRLLRRLRRLLRRLLRRLLRRLRRLLRRLLRRLLRRLRRLLRRLLRRLLRRLRRLLRRLLRRLLRRLRRLLRRLLRRLLRRLRRLLRRLLRRLLRRLLRRLRRLLRRLLRRLLRRLLRRLRRLLRRLLRRLRRLLRRLLRRLLRRLRRLLRRLLRRLLRRLRRLLRRLLRRLLRRLRRLLRRLLRRLLRRLRRLLRRLLRRLLRRLRRLLRRLLRRLLRRLRRLLRRLLRRLLRRLRRLLRRLLRRLLRRLRRLLRRLLRRLLRRLRRLLRRLLRRLLRRLRRLLRRLLRRLLRRLRRLLRRLLRRLLRRLRRLLRRLLRRLLRRLRRLLRRLLRRLLRRLRRLLRRLLRRLLRRLRRLLRRLLRRLLRRLRRLLRRLLRRLLRRLRRLLRRLLRRLLRRLRRLLRRLLRRLLRRLRRLLRRLLRRLLRRLRRLLRRLLRRLLRRLRRLLRRLLRRLLR"
    },
    {
        "number": 1048,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('UDDDUDDUUUU') == 4\nassert solution('RRRRRRRUUUUU') == 0\nassert solution('UDLRRLUDLRRLD') == 4\nassert solution('RUDDDUDDUUUU') == 3\nassert solution('LRDRRLUDDRUDLDUDDUU') == 9\n"
    },
    {
        "number": 1048,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('L') == '0'\nassert solution('LL') == '2'\nassert solution('RLRLRLRLLRLLRLRRRRLLRLLRLRRLLLRRLL') == '8'\nassert solution('RRLLRLLRRLRL') == '0'\nassert solution('LLRLLRLLRRLL') == '1'\n"
    },
    {
        "number": 1048,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"UDLRRU\") == 4\nassert solution(\"LLRUU\") == 0\nassert solution(\"UUDRRRDDLD\") == 5\nassert solution(\"LLRRRR\") == 4\nassert solution(\"UUDRRRLRLLRRRDDDLLRRDDRUDDLLRUDDDRUDUD\") == 14\n"
    },
    {
        "number": 1048,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"L\") == \"0\"\nassert solution(\"LR\") == \"2\"\nassert solution(\"RRRUU\") == \"4\"\nassert solution(\"LLRRRR\") == \"0\"\n"
    },
    {
        "number": 1048,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"LDRRLRUUR\") == 4\nassert solution(\"LDRRLRUUR\") == 4\nassert solution(\"RDRRUUDRR\") == 4\nassert solution(\"RDRRUUUD\") == 1\nassert solution(\"UDLRDRURDR\") == 4\n"
    },
    {
        "number": 1049,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''2 1\n10\n00\n\n''') == '2'\nassert solution('''4 1\n1101\n1111\n0110\n1011\n1111\n\n''') == '2'\nassert solution('''4 5\n1101\n1111\n0110\n1011\n1111\n\n''') == '2'\n"
    },
    {
        "number": 1049,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('2 2\\n10\\n00\\n') == '2'\nassert solution('4 1\\n0100\\n1111\\n0110\\n1011\\n1111\\n') == '1'\nassert solution('4 5\\n1101\\n1111\\n0110\\n1011\\n1111\\n') == '2'\nassert solution('4 5\\n1011\\n1011\\n1011\\n1011\\n1011\\n') == '3'\nassert solution('4 5\\n1101\\n1101\\n1101\\n1101\\n1101\\n') == '3'\n"
    },
    {
        "number": 1049,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''2 1\n10\n00\n''') == '2'\nassert solution('''4 5\n1101\n1111\n0110\n1011\n1111\n''') == '2'\nassert solution('''2 2\n10\n00\n''') == '1'\nassert solution('''4 1\n0100\n''') == '1'\nassert solution('''4 5\n1101\n1111\n0110\n1011\n1111\n''') == '2'\n"
    },
    {
        "number": 1049,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('2 1\\n10\\n00') == '2'\nassert solution('4 1\\n1101\\n1111\\n0110\\n1011\\n1111') == '2'\nassert solution('5 2\\n10001\\n00100\\n00101\\n111101\\n111010') == '3'\nassert solution('4 2\\n110011\\n001100\\n111001\\n111111\\n001111') == '2'\nassert solution('5 3\\n110100\\n1110101\\n1110100\\n1110101\\n1110100') == '2'\n"
    },
    {
        "number": 1049,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''2 2\n10\n00''') == '2'\nassert solution('''4 1\n0100\n\n1111\n0110\n1011\n1111''') == '1'\nassert solution('''4 5\n1101\n1111\n0110\n1011\n1111''') == '2'\n'''\n"
    },
    {
        "number": 1049,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''2 2\n10\n00''') == '2'\nassert solution('''4 1\n0100\n''') == '1'\nassert solution('''4 5\n1101\n1111\n0110\n1011\n1111\n''') == '2'\n'''\n"
    },
    {
        "number": 1049,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"2 2\\n10\\n00\") == \"2\"\nassert solution(\"4 1\\n0100\\n1111\\n0110\\n1011\\n1111\\n\") == \"1\"\nassert solution(\"5 3\\n1000000\\n001000\\n101001\\n101011\\n101110\\n\") == \"2\"\nassert solution(\"4 4\\n000101\\n000111\\n000111\\n000111\\n\") == \"0\"\nassert solution(\"5 5\\n00010000\\n00000110\\n00001100\\n00001110\\n00011000\\n\") == \"3\"\n"
    },
    {
        "number": 1049,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"10\\n00\") == \"1\"\nassert solution(\"4 1\\n0100\") == \"1\"\nassert solution(\"4 5\\n1101\\n1111\\n0110\\n1011\\n1111\") == \"2\"\nassert solution(\"10\\n100\") == \"0\"\nassert solution(\"4 1\\n1010\") == \"0\"\n"
    },
    {
        "number": 1049,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('3 1\\n01\\n01\\n01\\n01\\n01\\n01\\n01\\n01') == '2'\nassert solution('3 2\\n01\\n00\\n00\\n00\\n00\\n00\\n00\\n00') == '1'\nassert solution('4 2\\n0101\\n1010\\n1010\\n1010\\n1010\\n1010\\n1010\\n1010') == '2'\nassert solution('4 3\\n1010\\n1011\\n1010\\n1011\\n1010\\n1010\\n1010\\n1011') == '1'\nassert solution('4 4\\n1010\\n1010\\n1010\\n1010\\n1010\\n1010\\n1010\\n1010') == '1'\n"
    },
    {
        "number": 1049,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''2 2\n10\n00\n\n''') == '2'\n\nassert solution('''4 1\n0100\n\n''') == '1'\n\nassert solution('''4 5\n1101\n1111\n0110\n1011\n1111\n\n''') == '2'\n\nassert solution('''7 6\n00001\n000011\n0000111\n0001111\n00001111\n0010001\n1000111\n\n''') == '5'\n\nassert solution('''8 6\n011011\n011111\n0000111\n0001111\n00001111\n0010001\n1000111\n00001111\n0001111\n\n''') == '6'"
    },
    {
        "number": 1050,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 1050,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('3 1 3') == \"No\"\nassert solution('5 1 3') == \"Yes\"\nassert solution('8 4 5') == \"No\"\nassert solution('8 5 10') == \"Yes\"\nassert solution('4 3 2') == \"No\"\n"
    },
    {
        "number": 1050,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('5 8 6') == 'Yes'\nassert solution('3 9 3') == 'Yes'\nassert solution('8 5 20') == 'No'\nassert solution('10 1 1') == 'No'\nassert solution('2 2 2') == 'No'\n"
    },
    {
        "number": 1050,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('5 8 6') == 'Yes'\nassert solution('3 9 3') == 'Yes'\nassert solution('8 5 20') == 'No'\nassert solution('9 9 3') == 'No'\nassert solution('8 3 2') == 'No'\n"
    },
    {
        "number": 1050,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('5 8 6') == 'Yes'\nassert solution('3 9 3') == 'Yes'\nassert solution('8 5 20') == 'No'\nassert solution('8 5 3') == 'No'\nassert solution('8 5 2') == 'No'\n"
    },
    {
        "number": 1050,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdin\n\"\"\"\n"
    },
    {
        "number": 1050,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('5 8 6') == 'Yes'\nassert solution('3 9 3') == 'Yes'\nassert solution('8 5 20') == 'No'\n\n\n\n-----\n\nMITx: 6.00.2x\nCourse: 6.00.2x\nTeacher: Steven J. Bethard\n\"\"\"\n"
    },
    {
        "number": 1050,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('5 8 6') == 'Yes'\nassert solution('3 9 3') == 'Yes'\nassert solution('8 5 20') == 'No'\nassert solution('5 3 2') == 'No'\nassert solution('8 5 9') == 'No'\n"
    },
    {
        "number": 1050,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('5 8 6') == 'Yes'\nassert solution('3 9 3') == 'Yes'\nassert solution('8 5 20') == 'No'\n\n\n\"\"\"\n"
    },
    {
        "number": 1050,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('5 8 6') == 'Yes'\nassert solution('3 9 3') == 'Yes'\nassert solution('8 5 20') == 'No'\n"
    },
    {
        "number": 1051,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('2 3 4 5 6 7 8 9 10 11 12 14 15 16 17 18 19 20 21 22 23 24 25 26 28') == '0'\nassert solution('15 16 17 18 19 20 21 22 23 24 25 26') == '1'\nassert solution('14 15') == '67'\nassert solution('0 1') == '0'\nassert solution('14 15 92') == '67'\n"
    },
    {
        "number": 1051,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''25\n2 3 4 5 6 7 8 9 10 11 12 14 15 16 17 18 19 20 21 22 23 24 25 26 28\n''') == '3'\nassert solution('''5\n16 23 8 15 4\n''') == '0'\nassert solution('''3\n14 15 92\n''') == '67'\nassert solution('''3\n14 15 92\n''') == '67'\nassert solution('''5\nn''') == '0'\n"
    },
    {
        "number": 1051,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('25\\n2 3 4 5 6 7 8 9 10 11 12 14 15 16 17 18 19 20 21 22 23 24 25 26 28') == '3'\nassert solution('5\\n16 23 8 15 4') == '0'\nassert solution('3\\n14 15 92') == '67'\n"
    },
    {
        "number": 1051,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1\\n13\\n27') == '3'\nassert solution('2\\n8\\n4\\n14\\n9\\n5') == '0'\nassert solution('3\\n4\\n5\\n6') == '0'\nassert solution('3\\n4\\n5\\n6\\n7') == '0'\nassert solution('2\\n7\\n5\\n4\\n3') == '0'\n"
    },
    {
        "number": 1051,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('25\\n2 3 4 5 6 7 8 9 10 11 12 14 15 16 17 18 19 20 21 22 23 24 25 26 28\\n') == '3'\nassert solution('5\\n16 23 8 15 4\\n') == '0'\nassert solution('3\\n14 15 92\\n') == '67'\n'''\n\nfrom typing import List\n"
    },
    {
        "number": 1051,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('25') == '3'\nassert solution('5') == '0'\nassert solution('16 23 8 15 4') == '67'\nassert solution('14 15 92') == '0'\nassert solution('14 15 92') == '0'\n"
    },
    {
        "number": 1051,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('4\\n1 2 3 4') == '0'\nassert solution('5\\n2 3 4 5 6 7 8 9 10 11 12 14 15 16 17 18 19 20 21 22 23 24 25 26 28') == '3'\nassert solution('5\\n16 23 8 15 4') == '0'\nassert solution('5\\n16 23 8 15 4') == '0'\nassert solution('5\\n16 23 8 15 4') == '0'\n"
    },
    {
        "number": 1051,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == '3'\nassert solution(stdin) == '0'\nassert solution(stdin) == '67'\nassert solution(stdin) == '3'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 1051,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('5\\n16 23 8 15 4') == '3'\nassert solution('3\\n14 15 92') == '0'\nassert solution('3\\n
    },
    {
        "number": 1051,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n\nfrom sys import stdin, stdout\nfrom collections import Counter\n"
    },
    {
        "number": 1052,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == \"\"\"[Finished in 0.1s]\"\"\"\n\nassert solution(stdin) == \"\"\"[Finished in 0.1s]\"\"\"\n"
    },
    {
        "number": 1052,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == expected"
    },
    {
        "number": 1052,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"4 1\") == \"1\"\nassert solution(\"4 2\") == \"7\"\nassert solution(\"5 3\") == \"31\"\nassert solution(\"5 4\") == \"76\"\n\nprint('all tests passed successfully')\n\n\"\"\""
    },
    {
        "number": 1052,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''4 1''') == '1'\nassert solution('''4 2''') == '7'\nassert solution('''5 3''') == '31'\nassert solution('''5 4''') == '76'\nassert solution('''1000000 10000000''') == '1'\n"
    },
    {
        "number": 1052,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"4 1\") == \"1\"\nassert solution(\"4 2\") == \"7\"\nassert solution(\"5 3\") == \"31\"\nassert solution(\"5 4\") == \"76\"\nassert solution(\"9 9\") == \"18\"\n"
    },
    {
        "number": 1052,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\n'''\n4 1\n'''\n    ) == '1'\n\nassert solution(\n'''\n4 2\n'''\n    ) == '7'\n\nassert solution(\n'''\n5 3\n'''\n    ) == '31'\n\nassert solution(\n'''\n5 4\n'''\n    ) == '76'\n\nassert solution(\n'''\n5 1\n'''\n    ) == '1'"
    },
    {
        "number": 1052,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\n\"2 1\"\n) == \"1\"\nassert solution(\n\"3 4\"\n) == \"31\"\nassert solution(\n\"5 3\"\n) == \"76\"\nassert solution(\n\"5 4\"\n) == \"76\"\nassert solution(\n\"6 5\"\n) == \"144\"\n"
    },
    {
        "number": 1052,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('4 1') == '1'\nassert solution('4 2') == '7'\nassert solution('5 3') == '31'\nassert solution('5 4') == '76'"
    },
    {
        "number": 1052,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1 2') == '1'\nassert solution('4 1') == '1'\nassert solution('4 2') == '7'\nassert solution('5 3') == '31'\nassert solution('5 4') == '76'\n"
    },
    {
        "number": 1052,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdin"
    },
    {
        "number": 1053,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('2\\n') == '1'\nassert solution('3\\n') == '2'\nassert solution('4\\n') == '3'\nassert solution('5\\n') == '7'\nassert solution('6\\n') == '9'\n"
    },
    {
        "number": 1053,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('4') == '4'\nassert solution('4\\n2\\n2\\n2') == '4'\nassert solution('5\\n4\\n3\\n1\\n0\\n1') == '2'\nassert solution('3\\n2\\n3\\n0\\n2\\n1') == '3'\nassert solution('10\\n6\\n10\\n0\\n10\\n10\\n6\\n6\\n10') == '7'\n"
    },
    {
        "number": 1053,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''4''') == '4'\n\nassert solution('''\n3\n4\n6\n3\n''') == '6'\n\nassert solution('''\n2\n4\n4\n''') == '0'\n\nassert solution('''\n2\n3\n3\n''') == '2'\n\n\nassert solution('''\n10\n''') == '0'\n"
    },
    {
        "number": 1053,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('4\\n') == '4'\nassert solution('6\\n') == '6'\nassert solution('7\\n') == '7'\nassert solution('10\\n') == '4'\nassert solution('12\\n') == '4'\n"
    },
    {
        "number": 1053,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('0\\n4') == '4'\nassert solution('1\\n4') == '3'\nassert solution('1\\n8') == '7'\nassert solution('4\\n4') == '0'\nassert solution('4\\n8') == '7'\n"
    },
    {
        "number": 1053,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"5\") == \"1\"\nassert solution(\"4\") == \"1\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"2\"\n"
    },
    {
        "number": 1053,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''3\n4\n5\n6\n7\n8\n9\n10''') == '4'\nassert solution('''3\n3\n4\n5\n6\n7\n8\n9\n10''') == '1'\nassert solution('''3\n4\n5\n6\n7\n8\n9\n10''') == '1'\nassert solution('''4\n4\n5\n6\n7\n8\n9\n10''') == '4'\nassert solution('''10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10''') == '4'\n"
    },
    {
        "number": 1053,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''\n4\n''') == \"4\"\n\nassert solution('''\n6\n''') == \"6\"\n\nassert solution('''\n10\n''') == \"0\"\n\nassert solution('''\n10\n3\n''') == \"4\"\n\nassert solution('''\n10\n3\n4\n''') == \"5\""
    },
    {
        "number": 1053,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"0\") == \"0\"\nassert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"1\"\n"
    },
    {
        "number": 1053,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''4''') == '4'\nassert solution('''3''') == '3'\nassert solution('''12''') == '12'\nassert solution('''100''') == '0'\n'''\n"
    },
    {
        "number": 1054,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('0 0\\n2 2') == '4'\nassert solution('0 0\\n0 3') == '9'\nassert solution('0 0\\n1 1\\n2 2') == '1'\nassert solution('2 2\\n1 1') == '1'\nassert solution('2 2\\n0 0') == '2'\n"
    },
    {
        "number": 1054,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''0 0\n2 2''') == '4'\nassert solution('''0 0\n0 3''') == '9'\nassert solution('''1 0\n0 2\n3 1\n2 2''') == '2'\nassert solution('''1 0\n2 2\n2 0\n3 2\n3 1''') == '5'\nassert solution('''1 0\n1 0\n2 2\n3 3''') == '3'\n"
    },
    {
        "number": 1054,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('0 0\\n2 2') == '4'\nassert solution('0 0\\n0 3') == '9'\nassert solution('0 0\\n-1 2') == '0'\nassert solution('0 0\\n1 2') == '1'\nassert solution('0 0\\n2 1') == '1'\n"
    },
    {
        "number": 1054,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''0 0\n2 2''') == '4'\nassert solution('''2\n0 0\n0 3''') == '9'\nassert solution('''3\n1 1\n0 0\n0 1\n0 2''') == '8'\nassert solution('''5\n2 1\n0 1\n1 1\n2 0\n1 3''') == '16'\nassert solution('''10\n0 0\n2 2\n4 4\n6 6\n8 8\n10 10\n8 10\n5 6\n5 3\n2 1''') == '26'\n"
    },
    {
        "number": 1054,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''0 0\n2 2''') == \"4\"\nassert solution('''0 0\n0 3\n2 3''') == \"9\"\nassert solution('''2\n0 0\n0 3\n2 3''') == \"9\"\nassert solution('''2\n0 0\n0 2\n3 2\n2 0\n1 1''') == \"9\"\nassert solution('''2\n0 0\n0 1\n1 2\n1 0\n1 1''') == \"5\"\n"
    },
    {
        "number": 1054,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''0 0\n2 2''') == '4'\nassert solution('''0 0\n0 3''') == '9'\nassert solution('''1 1\n1 1''') == '2'\nassert solution('''0 0\n3 2''') == '5'\nassert solution('''0 0\n0 0\n1 0''') == '0'\n"
    },
    {
        "number": 1054,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"1 2\") == \"4\"\nassert solution(\"0 0\") == \"0\"\nassert solution(\"2 2\") == \"4\"\nassert solution(\"0 3\") == \"9\"\nassert solution(\"-3 -2\") == \"2\"\n"
    },
    {
        "number": 1054,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''0 0\n2 2\n''') == '9'\nassert solution('''0 0\n2 2\n''') == '9'\nassert solution('''3\n1 1\n2 2\n0 3\n''') == '9'\nassert solution('''3\n1 1\n2 2\n0 3\n''') == '9'\nassert solution('''3\n0 0\n2 2\n0 3\n''') == '9'\n"
    },
    {
        "number": 1054,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('0 0\\n2 2\\n') == '4'\nassert solution('0 0\\n0 3\\n') == '9'\nassert solution('0 0\\n-1 0\\n0 -1\\n') == '0'\nassert solution('0 0\\n0 0\\n0 0\\n0 0\\n') == '0'\nassert solution('0 0\\n0 0\\n0 0\\n0 0\\n') == '0'\n"
    },
    {
        "number": 1054,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''0 0''') == '0'\nassert solution('''1 1''') == '1'\nassert solution('''0 0''') == '0'\nassert solution('''2 2''') == '4'\nassert solution('''3 3''') == '9'\n"
    },
    {
        "number": 1055,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 2 2 4\\n\") == \"4\"\nassert solution(\"8\\n11 12 1 2 13 14 3 4\\n\") == \"2\"\nassert solution(\"4\\n7 6 5 4\\n\") == \"1\"\n"
    },
    {
        "number": 1055,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''\n4\n1 2 2 4\n''') == '4'\n\nassert solution('''\n8\n11 12 1 2 13 14 3 4\n''') == '2'\n\nassert solution('''\n4\n7 6 5 4\n''') == '1'\n\nassert solution('''\n1\n1\n''') == '1'\n\nassert solution('''\n4\n1 2 2 4\n''') == '4'\n'''\n"
    },
    {
        "number": 1055,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''4''') == '4'\nassert solution('''8''') == '1'\nassert solution('''4\n1 2 2 4''') == '4'\nassert solution('''8\n11 12 1 2 13 14 3 4''') == '2'\nassert solution('''4\n7 6 5 4''') == '1'"
    },
    {
        "number": 1055,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('3') == '2'\nassert solution('4') == '2'\nassert solution('5') == '1'\n"
    },
    {
        "number": 1055,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(input()) == output\n"
    },
    {
        "number": 1055,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 2 2 4\") == \"4\"\nassert solution(\"8\\n11 12 1 2 13 14 3 4\") == \"2\"\nassert solution(\"4\\n7 6 5 4\") == \"1\"\nassert solution(\"4\\n7 6 5 4 6 2\") == \"1\"\n\n\n-----Better Solutions-----"
    },
    {
        "number": 1055,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == ''\n\n\"\"\""
    },
    {
        "number": 1055,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('4\\n1 2 2 4') == '4'\nassert solution('8\\n11 12 1 2 13 14 3 4') == '2'\nassert solution('4\\n7 6 5 4') == '1'\n"
    },
    {
        "number": 1055,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 2 2 4\") == \"4\"\nassert solution(\"8\\n11 12 1 2 13 14 3 4\") == \"2\"\nassert solution(\"4\\n7 6 5 4\") == \"1\"\n\n\"\"\"\n\nimport math\nimport sys\n"
    },
    {
        "number": 1055,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('4\\n1 2 2 4') == '4'\nassert solution('8\\n11 12 1 2 13 14 3 4') == '2'\nassert solution('4\\n7 6 5 4') == '1'\nassert solution('7\\n1 2 3 4 5 6 7') == '1'\nassert solution('8\\n1 2 1 2 3 4 5 6 7') == '2'\n"
    },
    {
        "number": 1056,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0''') == '33.0476190476'\n\nassert solution('''0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 3 0 0 4 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 4 0 0 0 0\n3 0 0 0 0 0 0 0 0 0\n4 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 9''') == '20.2591405923'\n\n'''\n\n'''\nTest.describe(\"Sample Tests\")"
    },
    {
        "number": 1056,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0''') == '32.99999999999999'\nassert solution('''0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0''') == '15.89473684210526'\nassert solution('''0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0''') == '15.89473684210526'\nassert solution(''"
    },
    {
        "number": 1056,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"0 0 0 0 0 0 0 0 0 0\") == \"33.0476190476\"\nassert solution(\"0 0 0 0 0 0 0 0 0 0\") == \"20.2591405923\"\nassert solution(\"0 0 0 0 0 0 0 0 0 0\") == \"15.9047592939\"\n\n\n\n\"\"\"\n\nfrom math import log10, floor\n"
    },
    {
        "number": 1056,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\") == \"9.269908168987\"\nassert solution(\"0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\") == \"30.56434782236\"\nassert solution(\"0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\") == \"9.025462360852\"\nassert solution(\"0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\"
    },
    {
        "number": 1056,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n''') == '25.0'\nassert solution('''0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n''') == '26.0'\nassert solution('''0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n''') == '30.0'\nassert solution('''0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 1056,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0''') == '20.2591405923'\nassert solution('''0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0''') == '15.9047592939'\nassert solution('''0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0''') == '10.000000000'\nassert solution('''0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0"
    },
    {
        "number": 1056,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"0 0 0 0 0 0 0 0 0 0\") == \"33.0476190476\"\nassert solution(\"0 0 0 0 0 0 0 0 0 0\") == \"33.0476190476\"\nassert solution(\"0 0 0 0 0 0 0 0 0 0\") == \"33.0476190476\"\nassert solution(\"0 0 0 0 0 0 0 0 0 0\") == \"33.0476190476\"\nassert solution(\"0 0 0 0 0 0 0 0 0 0\") == \"33.0476190476\"\n"
    },
    {
        "number": 1056,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0') == '33.0476190476'\nassert solution('0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 6 6 6 6 6 6 0 0 0\\n1 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n') == '20.2591405923'\nassert solution('0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 6 6 6 6 6 6 0 0 0\\n1 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n') == '15.9047592939'\n\n\n\n\n\n'''\n"
    },
    {
        "number": 1056,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\n"
    },
    {
        "number": 1056,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0''') == '20.2591405923'\nassert solution('''0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 3 0 0 4 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 4 0 0 0 0\n0 0 3 0 0 0 0 0 0 0\n0 0 4 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 9''') == '15.9047592939'\nassert solution('''0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n6 6 6 6 6 6 6 0 0 0\n1 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n''') == '14.24462890625'\nassert solution('''0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0"
    },
    {
        "number": 1057,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('abaa') == '6'\nassert solution('aacdeee') == '6'\nassert solution('az') == '3'\nassert solution('ab') == '1'\n"
    },
    {
        "number": 1057,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"abaa\") == \"6\"\nassert solution(\"aacdeee\") == \"6\"\nassert solution(\"az\") == \"3\"\nassert solution(\"aacdeee\") == \"6\"\nassert solution(\"az\") == \"3\"\n"
    },
    {
        "number": 1057,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"abaa\") == 6\nassert solution(\"aacdeee\") == 6\nassert solution(\"az\") == 3\nassert solution(\"a\") == 1\nassert solution(\"aacdeee\") == 6\n"
    },
    {
        "number": 1057,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('abaa') == 6\nassert solution('az') == 3\nassert solution('aacdeee') == 6\nassert solution('az') == 3\nassert solution('aacdeee') == 6\n"
    },
    {
        "number": 1057,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == answer\n"
    },
    {
        "number": 1057,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('a') == 'a'\nassert solution('ab') == 'ab'\nassert solution('abcd') == 'ac'\nassert solution('abcdef') == 'abc'\nassert solution('abcdefghi') == 'abc'\n"
    },
    {
        "number": 1057,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"abaa\") == \"6\"\nassert solution(\"aacdeee\") == \"6\"\nassert solution(\"az\") == \"3\"\nassert solution(\"bx\") == \"3\"\nassert solution(\"exxmpl\") == \"3\"\n"
    },
    {
        "number": 1057,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('') == 0\nassert solution('a') == 1\nassert solution('abc') == 3\nassert solution('abcd') == 3\nassert solution('abcde') == 3\n"
    },
    {
        "number": 1057,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"abaa\") == \"6\"\nassert solution(\"aacdeee\") == \"6\"\nassert solution(\"az\") == \"3\"\nassert solution(\"aacdeee\") == \"6\"\nassert solution(\"az\") == \"3\"\n"
    },
    {
        "number": 1057,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('codeforces') == 'cdof'\nassert solution('coder') == 'co'\nassert solution('cdof') == 'dof'\nassert solution('cdee') == 'de'\nassert solution('cdeee') == 'de'\n"
    },
    {
        "number": 1058,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == \"6\"\n\"\"\"\n"
    },
    {
        "number": 1058,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('1 1') == '0'\nassert solution('2 1') == '1'\nassert solution('3 1') == '2'\nassert solution('4 1') == '3'\nassert solution('5 1') == '4'\n"
    },
    {
        "number": 1058,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''2\n1 1000 1\n2 500 2\n3 250 3\n4 125 4\n''') == '300000'\nassert solution('''4\n1 1000 1\n2 500 2\n3 250 3\n4 125 4\n''') == '1000'\nassert solution('''6\n2 1 4\n1 2 4\n3 4 4\n2 8 3\n3 16 3\n1 32 2\n''') == '63'\n\nassert solution('''7\n1 100000 1\n2 500 2\n3 250 3\n4 125 4\n''') == '300000'\nassert solution('''7\n1 100000 1\n2 500 2\n3 250 3\n4 125 4\n''') == '300000'\n"
    },
    {
        "number": 1058,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''6\n2 1 4\n1 2 4\n3 4 4\n2 8 3\n3 16 3\n1 32 2''') == '63'\nassert solution('''7\n1 100000 1\n1 100000 2\n1 100000 2\n4 50000 3\n3 50000 4\n4 50000 4\n3 50000 3\n''') == '300000'\nassert solution('''4\n1 1000 1\n2 500 2\n3 250 3\n4 125 4\n''') == '1000'\nassert solution('''5\n1 1\n1 1\n1 1\n1 1\n1 1\n''') == '3'\nassert solution('''10\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n''') == '3'\n"
    },
    {
        "number": 1058,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''1 2 4\n1 2 4\n3 4 4\n2 8 3\n3 16 3\n1 32 2''') == '63'\nassert solution('''1 100000 1\n1 100000 2\n1 100000 2\n4 50000 3\n3 50000 4\n4 50000 4\n3 50000 3''') == '300000'\nassert solution('''1 1000 1\n2 500 2\n3 250 3\n4 125 4''') == '1000'\n\n'''\n"
    },
    {
        "number": 1058,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == ''\n"
    },
    {
        "number": 1058,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == '64'\nassert solution('2 1 4') == '63'\nassert solution('1 2 4') == '63'\nassert solution('3 4 4') == '63'\nassert solution('2 8 3') == '63'\n"
    },
    {
        "number": 1058,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1\\n3\\n2\\n2\\n1\\n2\\n3\\n3\\n1\\n2\\n2\\n2') == '3'\nassert solution('2\\n2\\n2\\n2\\n2\\n1\\n1\\n2\\n2\\n3') == '2'\nassert solution('2\\n2\\n2\\n2\\n3\\n1\\n1\\n3\\n2\\n3') == '2'\nassert solution('4\\n2\\n2\\n2\\n3\\n1\\n1\\n1\\n1\\n1') == '50000'\nassert solution('4\\n2\\n2\\n2\\n3\\n1\\n1\\n1\\n1\\n1') == '50000'\n"
    },
    {
        "number": 1058,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('6\\n2 1 4\\n1 2 4\\n3 4 4\\n2 8 3\\n3 16 3\\n1 32 2\\n') == '63'\nassert solution('7\\n1 100000 1\\n1 100000 2\\n1 100000 2\\n4 50000 3\\n3 50000 4\\n4 50000 4\\n3 50000 3') == '300000'\nassert solution('4\\n1 1000 1\\n2 500 2\\n3 250 3\\n4 125 4\\n') == '1000'\n"
    },
    {
        "number": 1058,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n6\n2 1 4\n1 2 4\n3 4 4\n2 8 3\n3 16 3\n1 32 2\n\"\"\") == '63'\n\nassert solution(\n\"\"\"\n7\n1 100000 1\n1 100000 2\n1 100000 2\n4 50000 3\n3 50000 4\n4 50000 4\n3 50000 3\n\"\"\") == '300000'"
    },
    {
        "number": 1059,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('7') == '-1'\nassert solution('36') == 'agoeuioaeiruuimaeoieauoweouoiaouimae'\nassert solution('6') == 'agoeuioaeiruuimaeoieauoweouoiaouimae'\nassert solution('5') == 'aeuioaeiruuimaeoieauoweouoiaouim'\nassert solution('4') == 'aeeuiioaeiruuimaeoieauoweouoiaou'\n"
    },
    {
        "number": 1059,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''7''') == '-1'\nassert solution('''36''') == 'agoeuioaeiruuimaeoieauoweouoiaouimae'\nassert solution('''36''') == 'agoeuioaeiruuimaeoieauoweouoiaouimae'\nassert solution('''36''') == 'agoeuioaeiruuimaeoieauoweouoiaouimae'\nassert solution('''36''') == 'agoeuioaeiruuimaeoieauoweouoiaouimae'\n"
    },
    {
        "number": 1059,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('0') == ''\nassert solution('0x') == ''\nassert solution('1') == 'a'\nassert solution('1x') == ''\n"
    },
    {
        "number": 1059,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('7') == '-1'\nassert solution('36') == 'agoeuioaeiruuimaeoieauoweouoiaouimae'\nassert solution('3') == 'in'\nassert solution('50') == 'all'\nassert solution('20') == 'io'\n"
    },
    {
        "number": 1059,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('7') == '-1'\nassert solution('36') == 'agoeuioaeiruuimaeoieauoweouoiaouimae'\nassert solution('36') == 'agoeuioaeiruuimaeoieauoweouoiaouimae'\n\n-----How is it optimal?-----\nThe number $k$ of vowels in English is $26$.\n\nTherefore, if we write $26$ rows of $26$ columns (we can't use $26$ rows and $26$ columns, since the alphabet is a single cycle of $26$ characters) of vowels, then there are at least $26*26$ different ways to fill the entire grid, namely $26^26$ ways to write the letters that we want, each of them consisting of 26 different characters.\n\nIn fact, since each character is contained in the alphabet, we also have to consider that the vowels appear in the rows and columns, and in the same order, so in the previous example, we have to write 26 vowels, each of them containing 26 characters in the alphabet.\n\nTherefore, the approach is to consider the DP problem in a recursive manner.\n\nAlgorithm:\n\nLet $dp(k)$ be the number of different ways to fill the grid of $k$ vowels.\n\nFor $i \\in [1, k]$, let $n$ be the number of rows, and $m$ be the number of columns. We have a choice for every cell $[i,j]$ of the grid. Either we fill the cell with a vowel, or we don't.\n\nIf we are at the end of the row, we take the last cell of the previous row and add it to the result.\n\nIf we are at the end of the column, we take the last cell of the last row and add it to the result.\n\nIf the current cell is a vowel, we add the row and the column to the result.\n\nNow, if the previous cell is a vowel, we take the last cell of the last row and add it to the result.\n\nIf the previous cell is not a vowel, we take the last cell of the last row and add it to the result.\n\nIf the current cell is not a vowel and the previous cell is a vowel, we take the last cell of the last row and add it to the result.\n\nNow, if the current cell is not a vowel and the previous cell is not a vowel, we take the last cell of the last row and add it to the result.\n\n-----Alternate Approach-----\n\nHere, we can consider the column-wise first.\n\nIf the current cell is a vowel, we add it to the result.\n\nIf the previous cell is a vowel, we add it to the result.\n\nIf the current cell is not a vowel and the previous cell is a vowel, we add it to the result.\n\nIf the current cell is not a vowel and the previous cell is not a vowel, we add it to the result.\n\nIf the current cell is not a vowel and the previous cell is a vowel, we add it to the result.\n\nIf the current cell is not a vowel and the previous cell is not a vowel, we add it to the result.\n\nIf the current cell is a vowel, we add the previous cell to the result.\n\nIf the previous cell is a vowel, we add the current cell to the result.\n\nIf the previous cell is not a vowel, we add the current cell to the result.\n\nIf the current cell is not a vowel and the previous cell is a vowel, we add the current cell to the result.\n\nIf the current cell is not a vowel and the previous cell is not a vowel, we add the current cell to the result.\n\nSince every cell has at least one vowel, the result can be increased by the number of possibilities of each cell (except for the last cell).\n\nIf the current cell is a vowel, we can add the previous cell to the result as well.\n\nIf the current cell is not a vowel, we can add the previous cell to the result.\n\nIf the previous cell is a vowel, we can add the current cell to the result.\n\nIf the previous cell is not a vowel, we can add the current cell to the result.\n\nIf the previous cell is a vowel, we can add the current cell to the result.\n\nIf the previous cell is not a vowel, we can add the current cell to the result.\n\nIf the previous cell is a vowel, we can add the current cell to the result.\n\nIf the previous cell is not a vowel, we can add the current cell to the result.\n\nIf the previous cell is a vowel, we can add the current cell to the result.\n\nIf the previous cell is not a vowel, we can add the current cell to the result.\n\nThus, the result is the sum of the possibilities of each cell, including the first cell (which is always the last cell of the previous row).\n\n------Further Reading:------\n\nMy implementation is based on the approach described in the following article:\nhttps://leetcode.com/problems/number-of-ways-to-fill-the-grid/discuss/570465/Java-DP-solution-using-explanation\n\nMy implementation is based on the article:\nhttps://leetcode.com/problems/number-of-ways-to-fill-the-grid/discuss/571041/C%2B%2B-DP-solution\n\nMy code is based on the approach described in the following article:\nhttps://leetcode.com/problems/number-of-ways-to-fill-the-grid/discuss/571047/C%2B%2B-DP-solution\n\nMy code is based on the article:\nhttps://leetcode.com/problems/number-of-ways-to-fill-the-grid/discuss/571047/C%2B%2B-DP-solution\n\nMy code is based on the article:\nhttps://leetcode.com/problems/number-of-ways-to-fill-the-grid/discuss/571047/C%2B%2B-DP-solution\n\n-----Hint-----\n\nAlgorithm:\n\nAlgorithm:\n\nAlgorithm:\n\n\"\"\"\n"
    },
    {
        "number": 1059,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('7') == '-1'\nassert solution('36') == 'agoeuioaeiruuimaeoieauoweouoiaouimae'\nassert solution('10') == 'abihiouiioaiuouoiiaouiahiouaouoi'\nassert solution('100') == 'aibeiouiioueiouaiuiooioueiaouaouoi'\n'''\n\nimport sys"
    },
    {
        "number": 1059,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('') == -1\nassert solution('36') == 'agoeuioaeiruuimaeoieauoweouoiaouimae'\nassert solution('7') == '-1'\nassert solution('1') == '-1'\nassert solution('10') == '-1'\n"
    },
    {
        "number": 1059,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1') == '-1'\nassert solution('7') == 'agoeuioaeiruuimaeoieauoweouoiaouimae'\nassert solution('36') == 'agoeuioaeiruuimaeoieauoweouoiaouimae'\nassert solution('45') == '-1'\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 1059,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''7''') == '-1'\nassert solution('''36''') == 'agoeuioaeiruuimaeoieauoweouoiaouimae'\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 1059,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('') == '-1'\nassert solution('42') == '-1'\nassert solution('7') == '-1'\nassert solution('36') == 'agoeuioaeiruuimaeoieauoweouoiaouimae'\nassert solution('53') == 'agoeuioaeiruuimaeoieauoweouoiaouimae'\n"
    },
    {
        "number": 1060,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"8\\n3 4 6 8 10 18 21 24\") == \"3\"\nassert solution(\"8\\n8 10 16 22 22 16 24\") == \"2\"\nassert solution(\"8\\n3 4 6 8 10 18 21 24\") == \"3\"\nassert solution(\"8\\n9 10 15 19 21 22 19 22 19 22 22 19 22\") == \"2\"\nassert solution(\"8\\n9 10 15 19 21 22 19 22 19 22 22 19 22\") == \"2\"\n"
    },
    {
        "number": 1060,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('3 4 6 8 10 18 21 24\\n') == '3'\n\"\"\"\nfrom collections import deque\n\nN = int(input())\nA = list(map(int, input().split()))\nA.sort()\n\nqueue = deque([])\nvisited = set()\n\nfor i in A:\n    if i in visited:\n        continue\n\n    visited.add(i)\n    for j in A:\n        if j in visited:\n            continue\n\n        if i % j == 0 or j % i == 0:\n            queue.append(j)\n\n    while queue:\n        queue.popleft()\n\nprint(len(queue))\n"
    },
    {
        "number": 1060,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == 3\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 1060,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"8\\n3 4 6 8 10 18 21 24\\n\") == \"3\"\nassert solution(\"8\\n3 4 6 8 10 19 21 24\\n\") == \"4\"\nassert solution(\"8\\n3 4 6 8 10 19 20 24\\n\") == \"4\"\nassert solution(\"8\\n3 4 6 8 10 19 21 24\\n\") == \"4\"\nassert solution(\"8\\n3 4 6 8 10 19 21 24\\n\") == \"4\"\n"
    },
    {
        "number": 1060,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('3 4 6 8 10 18 21 24') == '3'\nassert solution('1 2 3 4') == '1'\nassert solution('1 2 3 4 5') == '2'\nassert solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24') == '2'\nassert solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99') == '2'\n"
    },
    {
        "number": 1060,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('8\\n3 4 6 8 10 18 21 24') == 3\nassert solution('8\\n3 4 6 8 10 18 21 24\\n') == 3\nassert solution('8\\n3 4 6 8 10 18 21 24\\n' * 1000) == 3\nassert solution('8\\n3 4 6 8 10 18 21 24\\n' * 10000) == 3\nassert solution('8\\n3 4 6 8 10 18 21 24\\n' * 100000) == 3\n\n\n'''\n\n\nimport sys\n"
    },
    {
        "number": 1060,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''8\n3 4 6 8 10 18 21 24\n''') == '3'\nassert solution('''4\n1 2 3 4\n''') == '4'\nassert solution('''4\n5 7\n''') == '0'\nassert solution('''4\n2\n1 2 3\n''') == '0'\nassert solution('''4\n3 1 2\n''') == '2'\n"
    },
    {
        "number": 1060,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"8\\n3 4 6 8 10 18 21 24\\n\") == \"3\"\nassert solution(\"10\\n1 2 3 4 5 6 7 8 9 10\\n\") == \"3\"\nassert solution(\"10\\n1 2 3 4 5 6 7 8 9 10\\n\") == \"3\"\nassert solution(\"10\\n1 2 3 4 5 6 7 8 9 10\\n\") == \"3\"\nassert solution(\"10\\n1 2 3 4 5 6 7 8 9 10\\n\") == \"3\"\n"
    },
    {
        "number": 1060,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"8\\n3 4 6 8 10 18 21 24\\n\") == \"3\"\n\nassert solution(\"5\\n1 2 3 4 5\\n\") == \"2\"\n\nassert solution(\"5\\n1 2 3 4 5\\n3 4 5 6 7 8\\n\") == \"2\"\n\nassert solution(\"6\\n2 3 4 5 6 7\\n1 2 3 4 5 6\\n\") == \"3\"\n\nassert solution(\"4\\n1 2 3 4\\n1 2 3\\n1 2\\n\") == \"2\""
    },
    {
        "number": 1060,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"3 4 6 8 10 18 21 24\") == \"3\"\nassert solution(\"2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26\") == \"5\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26\") == \"5\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26\") == \"5\"\n"
    },
    {
        "number": 1061,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\") == \"3\"\nassert solution(\"0 0 0 0 0\\n0 0 0 0 0\\n0 1 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n\") == \"1\"\nassert solution(\"0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n\") == \"1\"\nassert solution(\"0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n\") == \"1\"\nassert solution(\"0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n\") == \"1\"\n\n\n\nimport sys"
    },
    {
        "number": 1061,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('0 0 0 0 0') == '3'\nassert solution('0 0 0 0 1') == '1'\nassert solution('0 0 0 0 0') == '1'\nassert solution('0 0 0 0 0') == '1'\nassert solution('0 0 0 0 0') == '1'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 1061,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('0 0 0 0 0') == '3'\nassert solution('0 0 0 0 1') == '1'\nassert solution('0 0 0 0 0') == '1'\nassert solution('0 0 0 0 0') == '1'\nassert solution('0 0 0 0 0') == '1'\n"
    },
    {
        "number": 1061,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"0 0 0 0 0\\n0 0 0 0 0\\n0 1 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\") == \"3\"\nassert solution(\"0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n\") == \"1\"\nassert solution(\"1 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n\") == \"1\"\n\n\n\"\"\""
    },
    {
        "number": 1061,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"0 0 0 0 0\") == \"3\"\nassert solution(\"0 0 0 0 1\") == \"1\"\nassert solution(\"0 0 0 0 0\") == \"0\"\nassert solution(\"0 0 0 0 0\") == \"0\"\nassert solution(\"0 0 0 0 0\") == \"0\"\n"
    },
    {
        "number": 1061,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''0 0 0 0 0\n0 0 0 0 0\n0 1 0 0 0\n0 0 0 0 0\n0 0 0 0 0''') == '3'\nassert solution('''0 0 0 0 0\n0 0 0 0 0\n0 1 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n''') == '1'\nprint('solution: PASSED')"
    },
    {
        "number": 1061,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('0 0 0 0 0\\n0 0 0 0 0\\n0 1 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n') == '3'\nassert solution('0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n') == '1'\nassert solution('0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n') == '0'\nassert solution('0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n') == '5'\nassert solution('0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n') == '5'\n"
    },
    {
        "number": 1061,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"\"\"0 0 0 0 0\n0 0 0 0 0\n0 1 0 0 0\n0 0 0 0 0\n0 0 0 0 0\"\"\") == \"1\"\nassert solution(\"\"\"0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\"\"\") == \"3\"\nassert solution(\"\"\"0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\"\"\") == \"1\"\nassert solution(\"\"\"0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\"\"\") == \"2\"\nassert solution(\"\"\"0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\"\"\") == \"4\"\n"
    },
    {
        "number": 1061,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"\"\"0 0 0 0 0\n0 0 0 0 1\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n\"\"\") == \"1\"\nassert solution(\"\"\"0 0 0 0 0\n0 0 0 0 1\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n\"\"\") == \"3\"\nassert solution(\"\"\"0 0 0 0 0\n0 0 0 0 0\n0 1 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n\"\"\") == \"1\"\nassert solution(\"\"\"0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n\"\"\") == \"1\"\nassert solution(\"\"\"0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n\"\"\") == \"1\"\n"
    },
    {
        "number": 1061,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''0 0 0 0 0\n0 0 0 0 1\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n''') == '1'\nassert solution('''0 0 0 0 0\n0 0 0 0 0\n0 1 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n''') == '3'\nassert solution('''0 0 0 0 0\n0 0 0 0 0\n0 0 1 0 0\n0 0 0 0 0\n0 0 0 0 0\n''') == '4'\nassert solution('''0 0 0 0 0\n0 0 0 0 0\n0 0 1 0 0\n0 0 0 0 0\n0 0 0 0 0\n''') == '2'\nassert solution('''0 0 0 0 0\n0 0 0 0 0\n0 0 1 0 0\n0 0 0 0 0\n0 0 0 0 0\n''') == '5'\n"
    },
    {
        "number": 1062,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\n'''9\npergament\npermanent\n''') == '1'\n\nassert solution(\n'''6\nwookie\ncookie\n''') == '1'\n\nassert solution(\n'''4\npetr\negor\n''') == '2'"
    },
    {
        "number": 1062,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"9\\npergament\\npermanent\\n\") == \"1\\n4 6\"\nassert solution(\"6\\nwookie\\ncookie\\n\") == \"1\\n-1 -1\"\nassert solution(\"6\\ndouble\\nbundle\\n\") == \"2\\n4 1\""
    },
    {
        "number": 1062,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1\\n3') == '1'\nassert solution('1\\n2') == '2'\nassert solution('2\\n1') == '2'\nassert solution('1\\n1') == '-1'\nassert solution('1\\n2\\n3') == '-1'\n"
    },
    {
        "number": 1062,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('permanent\\npergament\\n') == '1\\n4 6'\nassert solution('wookie\\ncookie\\n') == '1 -1'\nassert solution('double\\nbundle\\n') == '2\\n4 1'\nassert solution('double\\nbundle\\n') == '2\\n4 1'\nassert solution('double\\nbundle\\n') == '2\\n4 1'\n"
    },
    {
        "number": 1062,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"6\\ndouble\\nbundle\") == \"2\\n4 1\"\nassert solution(\"6\\nwookie\\ncookie\") == \"-1 -1\"\nassert solution(\"5\\negor\") == \"-1 -1\"\nassert solution(\"9\\npermanent\\negor\") == \"1\"\nassert solution(\"9\\npermanent\\nwookie\") == \"2\"\n"
    },
    {
        "number": 1062,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''9\npergament\npermanent\n''') == '1'\nassert solution('''6\nwookie\ncookie\n''') == '1'\nassert solution('''4\npetr\negor\n''') == '2'\nassert solution('''6\ndouble\nbundle\n''') == '2'\nassert solution('''5\nqwerty\n123\n''') == '-1'\n"
    },
    {
        "number": 1062,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"pergament\\negor\\npermanent\") == \"1\\n4 6\\n\"\nassert solution(\"wookie\\ncookie\\n\") == \"1\\n-1 -1\\n\"\nassert solution(\"double\\nbundle\") == \"2\\n4 1\\n\"\nassert solution(\"petr\\negor\\n\") == \"2\\n1 2\\n\"\n\"\"\"\n"
    },
    {
        "number": 1062,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''9\npergament\npermanent''') == '1'\nassert solution('''6\nwookie\ncookie''') == '1'\nassert solution('''4\npetr\negor''') == '2'\nassert solution('''6\ndouble\nbundle''') == '2'\nassert solution('''4\ndouble\nbundle''') == '4'\n"
    },
    {
        "number": 1062,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''9\npergament\npermanent''') == '1'\n\nassert solution('''6\nwookie\ncookie''') == '1'\n\nassert solution('''4\npetr\negor''') == '2'\n\nassert solution('''6\ndouble\nbundle''') == '2'\n'''\n"
    },
    {
        "number": 1062,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''9\npergament\npermanent''') == '1'\nassert solution('''6\nwookie\ncookie''') == '1'\nassert solution('''4\npetr\negor''') == '2'\nassert solution('''6\ndouble\nbundle''') == '2'\nassert solution('''4\nboo\nbrr\n''') == '1'\n"
    },
    {
        "number": 1063,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''2\n1?\n''') == 'YES\\n1\\n2\\n'\nassert solution('''3\n?\n18\n1?\n''') == 'NO\\n'\nassert solution('''5\n12224\n12??5\n12226\n?0000\n?00000\n''') == 'YES\\n12224\\n12225\\n12226\\n20000\\n100000\\n'\nassert solution('''7\n????????\n1234567\n123?4567\n?12345\n?123?45\n123?45\n123?45\n?12345\n''') == 'YES\\n1234567\\n12345678\\n1234567\\n1234567\\n1234567\\n1234567\\n1234567\\n'\nassert solution('''8\n????????\n1234567\n123?4567\n?12345\n?123?45\n123?45\n123?45\n?12345\n123?45\n''') == 'NO\\n'\n"
    },
    {
        "number": 1063,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('??') == 'NO'\nassert solution('1??') == 'NO'\nassert solution('2??') == 'NO'\nassert solution('12??') == 'NO'\nassert solution('22??') == 'NO'\n"
    },
    {
        "number": 1063,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''3''') == 'YES'\nassert solution('''?''') == 'NO'\nassert solution('''9''') == 'YES'\nassert solution('''123456789''') == 'NO'\nassert solution('''???''') == 'NO'\n"
    },
    {
        "number": 1063,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''3\n?\n18\n1?\n''') == 'YES\\n1\\n18\\n19\\n'\nassert solution('''2\n??\n?\n''') == 'NO\\n'\nassert solution('''5\n12224\n12??5\n12226\n?0000\n?00000\n''') == 'YES\\n12224\\n12225\\n12226\\n20000\\n100000\\n'\n"
    },
    {
        "number": 1063,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('1\\n') == 'YES'\nassert solution('2\\n') == 'NO'\nassert solution('3\\n') == 'YES'\nassert solution('4\\n') == 'YES'\nassert solution('5\\n') == 'NO'\n"
    },
    {
        "number": 1063,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''3\n?\n18\n1?''') == 'YES\\n1\\n18\\n19\\n'\nassert solution('''2\n??\n?''') == 'NO\\n'\nassert solution('''5\n12224\n12??5\n12226\n?0000\n?00000''') == 'YES\\n12224\\n12225\\n12226\\n20000\\n100000\\n'\nprint(solution('''100\n?\n?'''))"
    },
    {
        "number": 1063,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('') == 'NO'\nassert solution('1') == 'NO'\nassert solution('1?') == 'NO'\nassert solution('12') == 'NO'\nassert solution('12?') == 'NO'\n"
    },
    {
        "number": 1063,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"NO\"\nassert solution(\"???\") == \"NO\"\nassert solution(\"2??\") == \"NO\"\nassert solution(\"123??\") == \"NO\"\nassert solution(\"1234??\") == \"NO\"\n"
    },
    {
        "number": 1063,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''\n3\n?\n18\n1?\n''') == 'YES\\n1\\n18\\n19\\n'\nassert solution('''\n2\n??\n?\n''') == 'NO\\n'\nassert solution('''\n5\n12224\n12??5\n12226\n?0000\n?00000\n''') == 'YES\\n12224\\n12225\\n12226\\n20000\\n100000\\n'\n"
    },
    {
        "number": 1063,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('??') == 'NO'\nassert solution('1?') == 'NO'\nassert solution('??1') == 'NO'\nassert solution('??000') == 'NO'\nassert solution('??00') == 'NO'\n"
    },
    {
        "number": 1064,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''6 2 3''') == '6'\nassert solution('''4 3 4''') == '1000'\nassert solution('''5 1 5''') == '-1'\nassert solution('''7 4 3''') == '-1'\nassert solution('''8 3 4''') == '-1'\n"
    },
    {
        "number": 1064,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 1064,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdin"
    },
    {
        "number": 1064,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1\\n5\\n2') == '2'\nassert solution('2\\n10\\n100') == '1000'\nassert solution('1\\n3\\n3') == '3'\nassert solution('2\\n1 2 3\\n1 10 100 1000') == '1000'\nassert solution('7\\n4 3 4 3 3\\n3 14 15') == '-1'\n"
    },
    {
        "number": 1064,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"\"\"6 2 3\"\"\") == \"6\"\nassert solution(\"\"\"4 3 4\"\"\") == \"1000\"\nassert solution(\"\"\"5 1 5\"\"\") == \"-1\"\nassert solution(\"\"\"7 4 3\"\"\") == \"-1\"\nassert solution(\"\"\"11 7 5\"\"\") == \"-1\"\n"
    },
    {
        "number": 1064,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"6 2 3\\n1 3\\n1 2 3\\n\") == \"6\"\nassert solution(\"4 3 4\\n1 2 3\\n1 10 100 1000\\n\") == \"1000\"\nassert solution(\"7 4 3\\n2 4 5 6\\n3 14 15\\n\") == \"1000\"\n"
    },
    {
        "number": 1064,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''6 2 3\n1 3\n1 2 3\n''') == '6'\nassert solution('''4 3 4\n1 2 3\n1 10 100 1000\n''') == '1000'\nassert solution('''5 1 5\n0\n3 3 3 3 3\n''') == '-1'\nassert solution('''7 4 3\n2 4 5 6\n3 14 15\n''') == '-1'\nassert solution('''8 2 4\n2 4 5 6\n3 14 15\n0\n2 4 5 6\n2 4 5 6\n0\n3 4 5 6\n2 4 5 6\n''') == '-1'\n"
    },
    {
        "number": 1064,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"\"\"6 2 3\"\"\") == \"6\"\nassert solution(\"\"\"4 3 4\"\"\") == \"1000\"\nassert solution(\"\"\"5 1 5\"\"\") == \"-1\"\nassert solution(\"\"\"7 4 3\"\"\") == \"-1\"\nassert solution(\"\"\"7 4 3\"\"\") == \"-1\"\n"
    },
    {
        "number": 1064,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdin"
    },
    {
        "number": 1064,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''6 2 3''') == '6'\nassert solution('''4 3 4''') == '1000'\nassert solution('''5 1 5''') == '-1'\nassert solution('''7 4 3''') == '-1'\n"
    },
    {
        "number": 1065,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('20 4 5 2') == '8'\nassert solution('30 9 4 1') == '4'\n\n\n\n\"\"\"\n\nfrom sys import stdin, stdout\nfrom math import gcd"
    },
    {
        "number": 1065,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('20 4 5 2') == '8'\nassert solution('30 9 4 1') == '4'\nassert solution('30 7 4 1') == '7'\nassert solution('30 5 4 1') == '5'\nassert solution('30 3 4 1') == '3'\n"
    },
    {
        "number": 1065,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('20 4 5 2') == '8'\nassert solution('30 9 4 1') == '4'\nassert solution('20 4 5 2') == '8'\nassert solution('30 9 4 1') == '4'"
    },
    {
        "number": 1065,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == '4'\n"
    },
    {
        "number": 1065,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''20 4 5 2''') == '8'\nassert solution('''30 9 4 1''') == '4'\nassert solution('''30 9 4 1''') == '4'\nassert solution('''30 9 4 1''') == '4'\nassert solution('''30 9 4 1''') == '4'\n"
    },
    {
        "number": 1065,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''30 9 4 1''') == '4'\nassert solution('''20 4 5 2''') == '8'\nassert solution('''30 9 4 1''') == '4'\nassert solution
    },
    {
        "number": 1065,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 1065,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''20 4 5 2''') == '8'\nassert solution('''30 9 4 1''') == '4'\nassert solution('''100 100 100 1''') == '1'\nassert solution('''2 0 5 2''') == '4'\n\n\n\"\"\"\n\n\nfrom math import ceil, floor"
    },
    {
        "number": 1065,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''20 4 5 2''') == '8'\nassert solution('''30 9 4 1''') == '4'\nassert solution('''40 14 25 2''') == '19'\nassert solution('''20 15 10 1''') == '2'\nassert solution('''10 10 4 2''') == '5'\n"
    },
    {
        "number": 1065,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('10 10 20 1') == '4'\nassert solution('30 9 4 1') == '4'\nassert solution('40 22 10 2') == '8'\nassert solution('10 40 22 10 2') == '8'\nassert solution('20 25 9 2') == '8'\n"
    },
    {
        "number": 1066,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 1066,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''10 3\n''') == '5'\nassert solution('''7 7\n''') == '6'\nassert solution('''1 3\n''') == '5'\n'''\n"
    },
    {
        "number": 1066,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''10 3''') == '5'\nassert solution('''7 7''') == '6'\n\nprint(\"Testcases passed successfully!\")\n'''\n"
    },
    {
        "number": 1066,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"2 2\") == \"3\"\nassert solution(\"3 5\") == \"1\"\nassert solution(\"5 7\") == \"2\"\nassert solution(\"6 4\") == \"3\"\nassert solution(\"5 7\") == \"1\"\n"
    },
    {
        "number": 1066,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"1\"\nassert solution(\"4\") == \"1\"\nassert solution(\"4 4\") == \"1\"\nassert solution(\"100 1000\") == \"1\"\n"
    },
    {
        "number": 1066,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('10 3') == '5'\nassert solution('7 7') == '6'\nassert solution('5 10') == '4'\nassert solution('5 7') == '3'\nassert solution('3 5') == '1'\n"
    },
    {
        "number": 1066,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('10 3') == '5'\nassert solution('7 7') == '6'\nassert solution('1 10') == '11'\nassert solution('7 10') == '8'\n\"\"\"\n"
    },
    {
        "number": 1066,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('10 3') == '5'\nassert solution('7 7') == '6'\n\n\n'''\n"
    },
    {
        "number": 1066,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''10 3''') == '5'\nassert solution('''7 7''') == '6'\nassert solution('''1000000000 10000000''') == '1000000000'\nassert solution('''10000000 10000000''') == '10000000'\nassert solution('''1000000000 1000000000''') == '10000000'\n"
    },
    {
        "number": 1066,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''10 3''') == '5'\nassert solution('''7 7''') == '6'\nprint('Test passed')\n'''\n"
    },
    {
        "number": 1067,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1\\n-1\\n-1\\n-1\\n-1') == 2\nassert solution('4\\n0 0 0 0') == 4\nassert solution('5\\n-5 -3 5 3 0') == 13\nassert solution('2\\n0 0') == 0\n\n\n>>> import os\n>>> import sys\n>>> sys.path.append(os.path.abspath('..'))\n>>> from utils import fast_input\n>>> solution = lambda: fast_input(int, os.path.basename(__file__))[1]\n>>> solution()\n2\n\"\"\"\nfrom functools import lru_cache\n\n@lru_cache(maxsize=None)\n"
    },
    {
        "number": 1067,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('0 0 0 0\\n' +\n                '0 0 0 0\\n') == '4'\nassert solution('4\\n' +\n                '-5 -3 5 3 0\\n') == '13'\nassert solution('5\\n' +\n                '-5 -3 5 3 0\\n') == '13'\nassert solution('5\\n' +\n                '1 1 1 1 1\\n') == '1'\nassert solution('5\\n' +\n                '1 1 1 1 1\\n') == '1'\n"
    },
    {
        "number": 1067,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('5\\n-5 -3 5 3 0') == '13'\nassert solution('4\\n0 0 0 0') == '4'\nassert solution('2\\n-1 1') == '2'\nassert solution('3\\n0 0 0') == '4'\nassert solution('3\\n1 1 1') == '2'\n"
    },
    {
        "number": 1067,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''2\n-1 1''') == '2'\nassert solution('''4\n0 0 0 0''') == '4'\nassert solution('''5\n-5 -3 5 3 0''') == '13'"
    },
    {
        "number": 1067,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('5\\n-5 -3 5 3 0\\n') == '13'\nassert solution('3\\n0 0 0 0\\n') == '4'\nassert solution('1\\n-1\\n') == '2'\nassert solution('1\\n1\\n') == '1'\nassert solution('2\\n-3 4\\n') == '13'\n"
    },
    {
        "number": 1067,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\n    \"2\\n\" +\n    \"-1 1\\n\"\n) == \"2\"\nassert solution(\n    \"4\\n\" +\n    \"0 0 0 0\\n\"\n) == \"4\"\nassert solution(\n    \"5\\n\" +\n    \"-5 -3 5 3 0\\n\"\n) == \"13\"\nassert solution(\n    \"10\\n\" +\n    \"1 2 3 4 5 6 7 8 9 10\\n\"\n) == \"6\"\nassert solution(\n    \"10\\n\" +\n    \"-5 -3 5 3 0\\n\"\n) == \"6\"\n"
    },
    {
        "number": 1067,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('2\\n-1 1') == '2'\nassert solution('4\\n0 0 0 0') == '4'\nassert solution('5\\n-5 -3 5 3 0') == '13'\n\n\"\"\""
    },
    {
        "number": 1067,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1\\n1') == '2'\nassert solution('1\\n-1') == '2'\nassert solution('1\\n-1\\n-1') == '2'\nassert solution('1\\n-1\\n-1\\n-1') == '2'\nassert solution('2\\n1\\n-1') == '2'\n"
    },
    {
        "number": 1067,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\n'''\n2\n-1 1\n''') == '2'\n\nassert solution(\n'''\n4\n0 0 0 0\n''') == '4'\n\nassert solution(\n'''\n5\n-5 -3 5 3 0\n''') == '13'\n\nassert solution(\n'''\n6\n0 0 0 0 0 0\n''') == '23'\n\nassert solution(\n'''\n7\n-100000 -1 -100000 0 0 0 0 0\n''') == '3'"
    },
    {
        "number": 1067,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('0\\n') == '0'\nassert solution('0\\n') == '0'\nassert solution('1\\n') == '1'\nassert solution('1\\n') == '1'\nassert solution('2\\n') == '2'\n"
    },
    {
        "number": 1068,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"123\") == \"123\"\nassert solution(\"099\") == \"0+9=9\"\nassert solution(\"199100\") == \"1+99=100\"\nassert solution(\"123123123456456456579579579\") == \"123123123+456456456=579579579\"\n"
    },
    {
        "number": 1068,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"123\") == \"123\"\nassert solution(\"123+\") == \"123++\"\nassert solution(\"123+456\") == \"123+456\"\nassert solution(\"123+4=5\") == \"123+4=5\"\nassert solution(\"1+2=3\") == \"1+2=3\"\n"
    },
    {
        "number": 1068,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('12345678') == '12345678'\nassert solution('01234567') == '01234567'\nassert solution('99') == '999'\nassert solution('0123456789') == '0123456789'\n"
    },
    {
        "number": 1068,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('12345168') == '123+45=168'\nassert solution('099') == '0+9=9'\nassert solution('199100') == '1+99=100'\nassert solution('123123123456456456579579579') == '123123123+456456456=579579579'\nprint(solution(stdin))"
    },
    {
        "number": 1068,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('12345678') == '123+456=789'\nassert solution('099') == '9+99=0'\nassert solution('199100') == '1+99=100'\nassert solution('123123123456456456579579579') == '123123123+456456456=579579579'\nassert solution('123123123456456456579579579') == '123123123+456456456=579579579'\n"
    },
    {
        "number": 1068,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"12345168\") == \"123+45=168\"\nassert solution(\"099\") == \"0+9=9\"\nassert solution(\"199100\") == \"1+99=100\"\nassert solution(\"123123123456456456579579579\") == \"123123123+456456456=579579579\"\nprint(\"All tests passed successfully.\")\n"
    },
    {
        "number": 1068,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('12345') == '12345'\nassert solution('099') == '0+9=9'\nassert solution('199100') == '1+99=100'\nassert solution('123123123456456456579579579') == '123123123+456456456=579579579'\nprint('Testcases passed')\n"
    },
    {
        "number": 1068,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('123') == '123'\nassert solution('123456789') == '12345+6789'\nassert solution('1234567890') == '1234567890'\nassert solution('099') == '0+9=9'\nassert solution('199100') == '1+99=100'\n"
    },
    {
        "number": 1068,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('12345') == '1+2+3+5=5'\nassert solution('12345678') == '1+2+3+5+6+8=18'\nassert solution('12345678987654321') == '1+2+3+5+6+7+8+9+0+2+3+4+5+6+7+8=89'\nassert solution('9089') == '9+0+9=9'\nassert solution('908988') == '9+8+9+8+8=98'\n"
    },
    {
        "number": 1068,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(12345678) == '123+456=678'\nassert solution(099) == '0+9=9'\nassert solution(199100) == '1+99=100'\nassert solution(123123123456456456579579579) == '123123123+456456456=579579579'\nassert solution(12345678901234567890123456789012345678901234567890123456789012345678901234567890) == '12345678901234567890123456789012345678901234567890123456789012345678901234567890'"
    },
    {
        "number": 1069,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(4) == 4\n\"\"\"\n\nimport sys"
    },
    {
        "number": 1069,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(4) == 4\nassert solution(124356983594583453458888889) == 0\n\n\"\"\"\n\nn = int(input())"
    },
    {
        "number": 1069,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(input()) == output\n\n'''\n"
    },
    {
        "number": 1069,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"4\") == \"4\"\nassert solution(\"124356983594583453458888889\") == \"0\"\nassert solution(\"\") == \"0\"\n\n-----\n\nInput\n12121212312312\n\nOutput\n12121212312312\n\n-----\n\nInput\n123456789123456789123456789\n\nOutput\n0\n\n-----\n\nInput\n8\n\nOutput\n15\n\n-----\n\nInput\n12\n\n\nOutput\n0\n\n-----\n\nInput\n123456789123456789123456789\n\nOutput\n15\n\n-----\n\nInput\n1234567890\n\nOutput\n15\n\n-----\n\nInput\n2\n\nOutput\n2\n\n-----\n\nInput\n1\n\nOutput\n1\n\n-----\n\nInput\n10\n\nOutput\n1\n\n-----\n\nInput\n123456789\n\nOutput\n15\n\n-----\n\"\"\""
    },
    {
        "number": 1069,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('4') == '0'\nassert solution('124356983594583453458888889') == '0'\n\n\n\n\"\"\""
    },
    {
        "number": 1069,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"124356983594583453458888889\") == 0\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 1069,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"4\") == \"4\"\nassert solution(\"124356983594583453458888889\") == \"0\"\n\n\n\n\"\"\""
    },
    {
        "number": 1069,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''4''') == '4'\n\n[Image]\n\"\"\""
    },
    {
        "number": 1069,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdin\n\n\"\"\""
    },
    {
        "number": 1069,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"4\") == \"4\"\nassert solution(\"124356983594583453458888889\") == \"0\"\nassert solution(\"4000000000\") == \"4\"\nassert solution(\"7123456789012345678901234567890\") == \"0\"\nassert solution(\"15123456789012345678901234567890\") == \"0\"\n"
    },
    {
        "number": 1070,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1 2 3 3 2 1 2 2') == '4'\nassert solution('8 3\\n1 2 3 3 2 1 2 2') == '4'\nassert solution('8 5\\n1 2 3 3 4 1 4 2 3') == '4'\nassert solution('8 5\\n1 2 3 3 4 1 4 2 3') == '4'\nassert solution('8 5\\n1 2 3 3 4 1 4 2 3') == '4'\n"
    },
    {
        "number": 1070,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n\n\n'''\n"
    },
    {
        "number": 1070,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"1\\n3\") == \"1\"\nassert solution(\"2\\n1\") == \"0\"\nassert solution(\"2\\n1\") == \"0\"\nassert solution(\"2\\n2\") == \"1\"\nassert solution(\"3\\n1\") == \"0\"\n"
    },
    {
        "number": 1070,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('8 3\\n1 2 3 3 2 1 2 2') == '4'"
    },
    {
        "number": 1070,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == '4'\n\n'''\n"
    },
    {
        "number": 1070,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('8 3\\n1 2 3 3 2 1 2 2') == '4'\n\"\"\""
    },
    {
        "number": 1070,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('8 3') == '4'\nassert solution('1 2 3 3 2 1 2 2') == '4'\n\"\"\"\n\n\"\"\"\n=== Code ===\n\"\"\"\n"
    },
    {
        "number": 1070,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('8 3\\n1 2 3 3 2 1 2 2\\n') == '4'\nassert solution('2 2\\n1 2\\n') == '1'\nassert solution('4 2\\n1 2 3 4\\n') == '2'\nassert solution('8 3\\n1 2 3 3 2 1 2 2\\n') == '4'\nassert solution('6 2\\n1 2 3 4 5 6\\n') == '1'\n"
    },
    {
        "number": 1070,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\n"
    },
    {
        "number": 1070,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('8 3') == '4'\nassert solution('1 2 3 3 2 1 2 2') == '4'\nassert solution('1 2 3 4 5 6 7 8') == '4'\nassert solution('1 2 3 3 2 1 2 2') == '4'\nassert solution('1 2 3 3 2 1 2 2') == '4'\n"
    },
    {
        "number": 1071,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 1071,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"1 1 1\\n1 1 1\\n4\\n\") == \"YES\"\nassert solution(\"1 1 3\\n2 3 4\\n2\\n\") == \"YES\"\nassert solution(\"1 0 0\\n1 0 0\\n1\\n\") == \"NO\"\nassert solution(\"1 0 0\\n1 0 0\\n0\\n\") == \"NO\"\nassert solution(\"1 1 3\\n1 1 3\\n0\\n\") == \"NO\"\n"
    },
    {
        "number": 1071,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1 1 3\\n1 1 1\\n1') == 'YES'\nassert solution('1 0 0\\n1 0 0\\n1') == 'NO'\nassert solution('1 0 0\\n1 1 1\\n1') == 'NO'\nassert solution('1 1 3\\n1 1 3\\n1') == 'YES'\nassert solution('1 1 3\\n2 3 4\\n2') == 'NO'\n"
    },
    {
        "number": 1071,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''1 1 1\n1 1 1\n4''') == 'YES'\nassert solution('''1 0 0\n1 0 0\n1''') == 'NO'\nassert solution('''1 1 3\n2 3 4\n2''') == 'YES'\nassert solution('''1 1 1\n2 3 4\n2''') == 'NO'\nassert solution('''1 1 1\n2 3 4\n5\n''') == 'NO'\n"
    },
    {
        "number": 1071,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"\"\"1 1 1\"\"\") == \"YES\"\nassert solution(\"\"\"1 1 1\"\"\") == \"YES\"\nassert solution(\"\"\"1 1 1\n1 1 1\"\"\") == \"YES\"\nassert solution(\"\"\"1 1 1\n2 3 4\"\"\") == \"NO\"\nassert solution(\"\"\"1 0 0\n1 0 0\n1\"\"\") == \"NO\"\n"
    },
    {
        "number": 1071,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''1 1 1''') == 'YES'\nassert solution('''1 1 1''') == 'YES'\nassert solution('''1 1 1''') == 'YES'\n\nassert solution('''1 1 1''') == 'NO'\nassert solution('''1 1 1''') == 'NO'\n"
    },
    {
        "number": 1071,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('1 1 1') == 'YES'\nassert solution('1 1 3') == 'NO'\nassert solution('1 0 0') == 'NO'\nassert solution('1 0 0') == 'NO'\nassert solution('1 1 1') == 'YES'\n"
    },
    {
        "number": 1071,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"1 1 1\") == \"YES\"\nassert solution(\"1 1 1\") == \"YES\"\nassert solution(\"1 1 1\") == \"NO\"\nassert solution(\"1 1 3\") == \"YES\"\nassert solution(\"1 0 0\") == \"YES\"\n"
    },
    {
        "number": 1071,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''1 1 1''') == 'YES'\nassert solution('''1 1 1''') == 'NO'\nassert solution('''1 1 3''') == 'YES'\nassert solution('''2 3 4''') == 'YES'\nassert solution('''2 3 4''') == 'NO'\n"
    },
    {
        "number": 1071,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"1 1 1\") == \"YES\"\nassert solution(\"1 1 1\") == \"YES\"\nassert solution(\"1 0 0\") == \"NO\"\nassert solution(\"1 0 0\") == \"NO\"\nassert solution(\"1 0 0\") == \"NO\"\n"
    },
    {
        "number": 1072,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('codeforces') == '0'\nassert solution('case') == '2'\nassert solution('care') == '4'\nassert solution('test') == '5'\nassert solution('code') == '6'\n"
    },
    {
        "number": 1072,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"acd\\nefg\\nhijk\") == 0\nassert solution(\"edfg\\nhijk\") == 2\nassert solution(\"codeforces\\nte\") == 0\nassert solution(\"code\\nforc\\nesco\\ndefo\\nrces\") == 4\nassert solution(\"case\\ncare\\ntest\\ncode\\n\") == 2\n"
    },
    {
        "number": 1072,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('codeforces') == '0'\nassert solution('case') == '2'\nassert solution('care') == '4'\nassert solution('test') == '2'\nassert solution('code') == '4'\n"
    },
    {
        "number": 1072,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\""
    },
    {
        "number": 1072,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('codeforces') == '0'\nassert solution('case') == '2'\nassert solution('care') == '4'\nassert solution('test') == '4'\nassert solution('code') == '4'"
    },
    {
        "number": 1072,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('codeforces') == '0'\nassert solution('case') == '2'\nassert solution('care') == '2'\nassert solution('test') == '3'\nassert solution('code') == '4'\n"
    },
    {
        "number": 1072,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\n    '''1 10\ncodeforces'''\n    ) == '0'\n\nassert solution(\n    '''4 4\ncase\ncare\ntest\ncode\n'''\n    ) == '2'\n\nassert solution(\n    '''5 4\ncode\nforc\nesco\n"
    },
    {
        "number": 1072,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('codeforces') == '0'\nassert solution('code') == '2'\nassert solution('case') == '2'\nassert solution('care') == '0'\nassert solution('test') == '2'\n"
    },
    {
        "number": 1072,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1 10\\ncodeforces') == '0'\nassert solution('4 4\\ncase\\ncare\\ntest\\ncode') == '2'\nassert solution('5 4\\ncode\\nforc\\nesco\\ndefo\\nrces') == '4'\nassert solution('5 6\\nacbde\\nfghi\\njklmn\\nsz\\nz\\na') == '3'\nassert solution('3 4\\nabc\\ndef\\nghi\\njkl\\nmn\\no\\npqr') == '3'"
    },
    {
        "number": 1072,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('codeforces') == 0\nassert solution('case') == 2\nassert solution('care') == 2\nassert solution('code') == 4\nassert solution('forc') == 4\n"
    },
    {
        "number": 1073,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('') == 0\nassert solution('RRR') == 0\nassert solution('UU') == 1\nassert solution('LLLL') == 0\nassert solution('LURDL') == 1\n"
    },
    {
        "number": 1073,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('URLLDR') == ''\nassert solution('DLUU') == ''\nassert solution('RLRLRLR') == ''\nassert solution('RRRRRR') == ''\n"
    },
    {
        "number": 1073,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"UR\") == \"U\"\nassert solution(\"LL\") == \"L\"\nassert solution(\"LLR\") == \"LRL\"\nassert solution(\"DRR\") == \"DRR\"\n"
    },
    {
        "number": 1073,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 1073,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"URLLDR\") == 2\nassert solution(\"DLUU\") == 0\nassert solution(\"RLRLRLR\") == 12\nassert solution(\"LULU\") == 12\nassert solution(\"LLLL\") == 24\n"
    },
    {
        "number": 1073,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"URLLDR\") == 2\nassert solution(\"DLUU\") == 0\nassert solution(\"RLRLRLR\") == 12\nassert solution(\"RRRRDDD\") == 6\nassert solution(\"UUUUUUUU\") == 4\n"
    },
    {
        "number": 1073,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"RRUU\") == \"4\"\nassert solution(\"RRRDRUD\") == \"15\"\nassert solution(\"LLLLRRRRDDRDDRRUDUDUDUDUDUD\") == \"180\"\nassert solution
    },
    {
        "number": 1073,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"RRDDD\") == 1\nassert solution(\"LLDRLDRRL\") == 1\nassert solution(\"LLRUULLRDDD\") == 1\nassert solution(\"RDRRRDDRR\") == 1\nassert solution(\"LDRRRDDUULRUDDUDDLLR\") == 4\n"
    },
    {
        "number": 1073,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('6\\nURLLDR') == '2'\nassert solution('4\\nDLUU') == '0'\nassert solution('7\\nRLRLRLR') == '12'\nassert solution('6\\nRLLDDD') == '0'\n\n\n-----\n\nResult\n\nWhen a test is submitted, the program will run your code and count the number of tests that pass and the number that fail.\n\nYou do not need to submit the solutions, however, they are important to familiarize yourself with the correct syntax for the solution.\n\nIf your submission takes too long, you will receive a time-out error.\n\nYou can take advantage of that to improve your score.\n\n\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 1073,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\n    \"\"\"URLLDR\n    \"\"\"\n) == '2'\n\nassert solution(\n    \"\"\"DLUU\n    \"\"\"\n) == '0'\n\nassert solution(\n    \"\"\"RLRLRLR\n    \"\"\"\n) == '12'\n"
    },
    {
        "number": 1074,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(129) == 1\n\"\"\"\n"
    },
    {
        "number": 1074,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\n    \"\"\"129\"\"\"\n) == \"\"\"1\"\"\"\n"
    },
    {
        "number": 1074,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('129') == '1'\n"
    },
    {
        "number": 1074,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(input()) == '1'\n\"\"\"\n"
    },
    {
        "number": 1074,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(129) == 1\nassert solution(1553) == 3\nassert solution(0) == 0\nassert solution(127) == 7\nassert solution(5) == 0\n"
    },
    {
        "number": 1074,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\nfrom math import ceil, log10\nfrom functools import reduce"
    },
    {
        "number": 1074,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('129') == '1'\n\"\"\"\n\nimport sys\n\nMAX_INT = 1_000_000\n"
    },
    {
        "number": 1074,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''129''') == '1'\nassert solution('''0''') == '0'\nassert solution('''1''') == '1'\nassert solution('''5''') == '1'\nassert solution('''10''') == '2'\n"
    },
    {
        "number": 1074,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('129') == '1'\nassert solution('3') == '-1'\nassert solution('1') == '1'\nassert solution('2') == '-1'\nassert solution('5') == '2'\n"
    },
    {
        "number": 1074,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"129\") == \"1\"\nassert solution(\"10000\") == \"0\"\nassert solution(\"-500\") == \"-1\"\nassert solution(\"100\") == \"1\"\nassert solution(\"-1\") == \"-1\"\n"
    },
    {
        "number": 1075,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('2\\n') == '0 1 0'\nassert solution('3\\n') == '-1'\nassert solution('4\\n') == '0 1 3 2 0'\nassert solution('16\\n') == '0 1 2 4 9 3 6 13 10 5 11 7 15 14 12 8 0'\n"
    },
    {
        "number": 1075,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''2''') == '0 1 0'\nassert solution('''3''') == '-1'\nassert solution('''4''') == '0 1 3 2 0'\nassert solution('''16''') == '0 1 2 4 9 3 6 13 10 5 11 7 15 14 12 8 0'\nassert solution('''1000''') == '0 1 2 4 9 3 6 13 10 5 11 7 15 14 12 8 0'\n"
    },
    {
        "number": 1075,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('2') == '0 1 0'\nassert solution('3') == '-1'\nassert solution('4') == '0 1 3 2 0'\nassert solution('16') == '0 1 2 4 9 3 6 13 10 5 11 7 15 14 12 8 0'\nassert solution('1') == '-1'\n"
    },
    {
        "number": 1075,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"0\") == \"0\"\nassert solution(\"2\") == \"0 1 0\"\nassert solution(\"3\") == \"-1\"\nassert solution(\"4\") == \"0 1 3 2 0\"\nassert solution(\"16\") == \"0 1 2 4 9 3 6 13 10 5 11 7 15 14 12 8 0\"\n"
    },
    {
        "number": 1075,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"-1\"\nassert solution(\"2\") == \"0 1 0\"\nassert solution(\"3\") == \"-1\"\nassert solution(\"4\") == \"0 1 3 2 0\"\nassert solution(\"16\") == \"0 1 2 4 9 3 6 13 10 5 11 7 15 14 12 8 0\"\n"
    },
    {
        "number": 1075,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''2''') == '0 1 0'\nassert solution('''3''') == '-1'\nassert solution('''4''') == '0 1 3 2 0'\nassert solution('''16''') == '0 1 2 4 9 3 6 13 10 5 11 7 15 14 12 8 0'\n"
    },
    {
        "number": 1075,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('0 1 2 3') == '0 1 2 3'\nassert solution('0 0') == '0'\nassert solution('0 1 0') == '0 0'\nassert solution('1 1') == '-1'\nassert solution('1 0') == '-1'\n"
    },
    {
        "number": 1075,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('') == '0 1 0'\nassert solution('2') == '0 1 0'\nassert solution('3') == '-1'\nassert solution('4') == '0 1 3 2 0'\nassert solution('16') == '0 1 2 4 9 3 6 13 10 5 11 7 15 14 12 8 0'\n"
    },
    {
        "number": 1075,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(2) == \"0 1 0\"\nassert solution(3) == \"0 1 0\"\nassert solution(4) == \"0 1 3 2 0\"\nassert solution(5) == \"0 1 3 2 0\"\nassert solution(6) == \"0 1 2 4 9 3 6 13 10 5 11 7 15 14 12 8 0\"\n"
    },
    {
        "number": 1075,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(1) == 0\nassert solution(2) == 0\nassert solution(3) == -1\nassert solution(4) == 0\nassert solution(5) == -1\n"
    },
    {
        "number": 1076,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdin.split()[2]\n\"\"\"\n\nimport sys\nsys.path.append('..')\nfrom utils.standard_input import *"
    },
    {
        "number": 1076,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('2 1') == '5'\nassert solution('3 2') == '332748127'\nassert solution('14 9') == '969862773'\n\n\n'''\n\n'''\n"
    },
    {
        "number": 1076,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('2 1') == '5'\nassert solution('3 2') == '332748127'\nassert solution('14 9') == '969862773'\n"
    },
    {
        "number": 1076,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('2 1') == '5'\nassert solution('3 2') == '332748127'\nassert solution('14 9') == '969862773'\n"
    },
    {
        "number": 1076,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == '332748127'\n\"\"\""
    },
    {
        "number": 1076,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == \"\"\n\n\"\"\""
    },
    {
        "number": 1076,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('2 1') == '5'\nassert solution('3 2') == '332748127'\nassert solution('14 9') == '969862773'"
    },
    {
        "number": 1076,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('2 1') == '5'\nassert solution('3 2') == '332748127'\nassert solution('14 9') == '969862773'\nassert solution('14 14') == '289070825024'\nassert solution('14 7') == '6770518638549'\n"
    },
    {
        "number": 1076,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('2 1') == '5'\nassert solution('3 2') == '332748127'\nassert solution('14 9') == '969862773'\n\n\"\"\"\n\n\"\"\"\n\n>>> from solutions.kyu_7.kyu_7_number_of_seconds_before_the_game_ends import solution\n>>> answer = solution('2 1')\n>>> answer\n'5'\n>>> answer = solution('3 2')\n>>> answer\n'332748127'\n>>> answer = solution('14 9')\n>>> answer\n'969862773'\n>>> answer = solution('1323334455556777888899')\n>>> answer\n'5565693400166050581220467025632'\n\n\"\"\""
    },
    {
        "number": 1076,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"1 2\\n\") == \"5\"\nassert solution(\"2 1\\n\") == \"332748127\"\nassert solution(\"3 2\\n\") == \"969862773\"\nassert solution(\"14 9\\n\") == \"969862773\"\n\"\"\"\n"
    },
    {
        "number": 1077,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"3 2\\n1 2 3\\n\") == \"2 1\\n1 2 1 2\"\nassert solution(\"7 3\\n1 3 2 2 2 2 1\\n\") == \"2 1\\n1 3 3 2 2 2 1\"\nassert solution(\"7 3\\n1 1000000000 100 7 1000000000\\n\") == \"2 1\\n1 3 3 2 2 2 1\"\n\n\n\"\"\""
    },
    {
        "number": 1077,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"4 2\n1 2 3 2\n\"\"\") == \"\"\"2 1\"\"\"\n\nassert solution(\n\"\"\"7 3\n1 3 2 2 2 2 1\n\"\"\") == \"\"\"1 4\n1 2 3 4\"\"\"\n\nassert solution(\n\"\"\"7 4\n1 1000000000 7 1000000000\n\"\"\") == \"\"\"2 1\n1 3 3 2 2 2 1\"\"\"\n"
    },
    {
        "number": 1077,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''4 2\n1 2 3 2''') == '2 1'\nassert solution('''7 3\n1 3 2 2 2 2 1''') == '2 1'\nassert solution('''4 4\n1000000000 100 7 1000000000''') == '1 4'\nassert solution('''7 4\n1 3 2 2 2 2 1''') == '1 2 3 4'\n"
    },
    {
        "number": 1077,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''4 2\n1 2 3 2''') == '1 4'\nassert solution('''7 3\n1 3 2 2 2 2 1''') == '1 4'\nassert solution('''4 4\n1000000000 100 7 1000000000''') == '1 4'\n\n\n'''\n"
    },
    {
        "number": 1077,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''4 2\n1 2 3 2\n''') == \"2 1\"\nassert solution('''7 3\n1 3 2 2 2 2 1\n''') == \"2 1\"\n\nassert solution('''4 4\n1000000000 100 7 1000000000\n''') == \"1 4\"\nassert solution('''7 4\n1 100000000 7 1 1000000000\n''') == \"1 2 3 4\"\n\nassert solution('''10 9\n99999 99999 7 99999 7 99999 7 99999 7 99999 7 99999 7 99999 7\n''') == \"1 2 3 4 5 6 7 8 9 10\"\n"
    },
    {
        "number": 1077,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1 1 1 1 1\") == \"\"\nassert solution(\"1 2 3 4 5 6\") == \"\"\nassert solution(\"1 3 4 5 6 7\") == \"\"\nassert solution(\"1 10 5 10 5 10 5 10 5 10 5 10 5 10 5 10 5\") == \"\"\n"
    },
    {
        "number": 1077,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 1077,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\n\nfrom sys import stdin, stdout\nfrom itertools import permutations"
    },
    {
        "number": 1077,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"4 2\\n1 2 3 2\\n\") == \"2 1\\n1 2 1 2\\n\"\nassert solution(\"7 3\\n1 3 2 2 2 2 1\\n\") == \"2 1\\n1 3 3 2 2 2 1\\n\"\nassert solution(\"4 4\\n1000000000 100 7 1000000000\\n\") == \"1 4\\n1 2 3 4\\n\"\n\n'''"
    },
    {
        "number": 1077,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\n\nn,m = [int(x) for x in stdin.split()]"
    },
    {
        "number": 1078,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('3\\n10\\n-5\\n-5\\n') == '5\\n-2\\n-3'\nassert solution('7\\n-7\\n-29\\n0\\n3\\n24\\n-29\\n38') == '-3\\n-15\\n0\\n2\\n12\\n-15\\n19'\nassert solution('10\\n-7\\n-29\\n0\\n3\\n24\\n-29\\n38') == '-3\\n-15\\n0\\n2\\n12\\n-15\\n19'\nassert solution('7\\n-7\\n-29\\n0\\n3\\n24\\n-29\\n38') == '-3\\n-15\\n0\\n2\\n12\\n-15\\n19'"
    },
    {
        "number": 1078,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n"
    },
    {
        "number": 1078,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('3\\n10\\n-5\\n-5\\n') == '5\\n-2\\n-3\\n'\nassert solution('7\\n-7\\n-29\\n0\\n3\\n24\\n-29\\n38\\n') == '-3\\n-15\\n0\\n2\\n12\\n-15\\n19\\n'\nassert solution('4\\n-14\\n-27\\n0\\n1\\n-1\\n-10\\n') == '-2\\n-3\\n0\\n1\\n-2\\n-3\\n'\n\n\n\n\n\"\"\"\n"
    },
    {
        "number": 1078,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(input()) == output\nfor line in input().splitlines():\n    assert int(solution(line)) == int(output)\n\"\"\"\n\nn = int(input())\nsum = 0\nfor _ in range(n):\n    a = int(input())\n    if a % 2 == 0:\n        sum += a // 2\n    else:\n        sum += (a + 1) // 2\n"
    },
    {
        "number": 1078,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''3\n10\n-5\n-5\n''') == '5\\n-2\\n-3\\n'\nassert solution('''7\n-7\n-29\n0\n3\n24\n-29\n38\n''') == '-3\\n-15\\n0\\n2\\n12\\n-15\\n19\\n'\nassert solution('''4\n10\n-5\n-5\n-10\n-5\n''') == '-5\\n-5\\n-5\\n-5\\n'\nassert solution('''7\n-7\n-29\n0\n3\n24\n-29\n38\n''') == '-5\\n-3\\n-5\\n-3\\n-3\\n-3\\n-5\\n'\nassert solution('''10\n100\n-20\n0\n5\n-5\n-10\n0\n5\n-20\n0\n5\n''') == '-3\\n-15\\n0\\n5\\n-3\\n-5\\n-5\\n-5\\n-3\\n'\n"
    },
    {
        "number": 1078,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''3\n-7\n-29\n0\n3\n24\n-29\n38''') == '-3 -15 0 2 12 -15 19'\n'''\n\n'''\n\nimport sys"
    },
    {
        "number": 1078,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 1078,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('4\\n10\\n-5\\n-5\\n') == '5\\n-2\\n-3'\nassert solution('7\\n-7\\n-29\\n0\\n3\\n24\\n-29\\n38\\n') == '-3\\n-15\\n0\\n2\\n12\\n-15\\n19'\nassert solution('1\\n40\\n10\\n-5\\n-5\\n') == '-3\\n-15\\n0\\n2\\n12\\n-15\\n19'\nassert solution('3\\n10\\n-5\\n-5\\n') == '5\\n-2\\n-3'\nassert solution('7\\n-7\\n-29\\n0\\n3\\n24\\n-29\\n38\\n') == '-3\\n-15\\n0\\n2\\n12\\n-15\\n19'\n"
    },
    {
        "number": 1078,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\n'''\n3\n10\n-5\n-5\n''') == '5 -2 -3'\n\nassert solution(\n'''\n7\n-7\n-29\n0\n3\n24\n-29\n38\n''') == '-3 -15 0 2 12 -15 19'\n"
    },
    {
        "number": 1078,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"4\\n-2\\n4\\n7\\n4\\n\") == \"3\\n-2\\n2\"\nassert solution(\"3\\n-1\\n0\\n1\") == \"0\\n1\\n2\"\nassert solution(\"1\\n1\\n1\\n1\") == \"1\"\nassert solution(\"2\\n2\\n2\\n2\") == \"0\"\nassert solution(\"2\\n0\\n1\\n0\") == \"1\"\n"
    },
    {
        "number": 1079,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('10') == 1\nassert solution('111') == 2\nassert solution('1101101') == 4\nassert solution('1000000000') == 5\nassert solution('1234567890123456789012345678901234567890') == 10\n"
    },
    {
        "number": 1079,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('10') == '1'\nassert solution('111') == '2'\nassert solution('1101101') == '4'\nassert solution('10001101') == '7'\nassert solution('10000000000000000') == '1'\n"
    },
    {
        "number": 1079,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"10\") == 1\nassert solution(\"111\") == 2\nassert solution(\"1101101\") == 4\nassert solution(\"1\") == 1\nassert solution(\"0\") == 1\n"
    },
    {
        "number": 1079,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('11') == 1\nassert solution('111') == 2\nassert solution('1101101') == 4\nassert solution('10011110110100000111110111010000') == 4\nassert solution('1') == 1\n"
    },
    {
        "number": 1079,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('10') == 1\nassert solution('111') == 2\nassert solution('1101101') == 4\nassert solution('10000101') == 5\nassert solution('1010100101101') == 7\n"
    },
    {
        "number": 1079,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''10''') == 1\nassert solution('''1101101''') == 4\nassert solution('''1101111''') == 1\nassert solution('''110110110010111''') == 2\nassert solution('''110110110101111''') == 2\n"
    },
    {
        "number": 1079,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"10\") == \"1\"\nassert solution(\"11101\") == \"4\"\nassert solution(\"111111111111\") == \"25\"\nassert solution(\"1101101\") == \"4\"\nassert solution(\"1111111111\") == \"50\"\n"
    },
    {
        "number": 1079,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('') == None\nassert solution('10') == 1\nassert solution('1101101') == 4\nassert solution('11000111011101110110101101011101101001000101') == 17\nassert solution('111111101011111110111111101110110101010101111100111') == 4\n"
    },
    {
        "number": 1079,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('0') == ''\nassert solution('1') == ''\nassert solution('11') == '1'\nassert solution('1101') == '4'\n"
    },
    {
        "number": 1079,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('10') == '1'\nassert solution('1101101') == '4'\nassert solution('111111') == '5'\nassert solution('111111101') == '9'\nassert solution('111111110') == '11'\n"
    },
    {
        "number": 1080,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1') == \"YES\"\nassert solution('1\\n1') == \"NO\"\nassert solution('2\\n1\\n2') == \"NO\"\nassert solution('2\\n2\\n2') == \"YES\"\nassert solution('3\\n2\\n2') == \"YES\"\n"
    },
    {
        "number": 1080,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"NO\"\nassert solution(\"1 2\") == \"NO\"\nassert solution(\"1 2 3\") == \"NO\"\nassert solution(\"1 1 2 2\") == \"YES\"\n"
    },
    {
        "number": 1080,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 1080,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdin\n\n\"\"\"\n\n\"\"\"\n\"\"\"\nfrom sys import stdin, stdout\ninput = stdin.readline\n\nn = int(input())\na = [int(x) for x in input().split()]\n\na_dict = {}\nfor i in a:\n    if i in a_dict:\n        a_dict[i] += 1\n    else:\n        a_dict[i] = 1\n\nfor i in a_dict:\n    if a_dict[i] % 2:\n        stdout.write('NO\\n')\n        break\n    else:\n        a_dict[i] //= 2\n        stdout.write('YES\\n')\n"
    },
    {
        "number": 1080,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 1080,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == expected\n\n'''\n\nn = int(input())\narr = list(map(int, input().split()))\n\nfor i in range(n):\n    for j in range(i + 1, n):\n        if arr[i]!= arr[j]:\n            arr[j] -= 1\n            arr[i] -= 1\n            if arr[i] == 0 or arr[j] == 0:\n                break"
    },
    {
        "number": 1080,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''4\n1 1 2 2''') == 'YES'\nassert solution('''6\n1 2 3 4 5 6''') == 'NO'\n'''"
    },
    {
        "number": 1080,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1\\n1\\n1\\n1') == \"YES\"\nassert solution('1\\n1\\n1\\n1') == \"NO\"\nassert solution('4\\n1 1 2 2') == \"YES\"\nassert solution('6\\n1 2 3 4 5 6') == \"NO\"\nassert solution('4\\n2 1 1 1') == \"YES\"\n"
    },
    {
        "number": 1080,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('2\\n1 2') == 'YES'\nassert solution('1\\n1') == 'NO'\n"
    },
    {
        "number": 1080,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('') is None\nassert solution('1') == 'YES'\nassert solution('1 2') == 'YES'\nassert solution('1 2 2') == 'YES'\nassert solution('1 2 3') == 'NO'\n"
    },
    {
        "number": 1081,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(5) == \"YES\"\nassert solution(13) == \"NO\"\nassert solution(24) == \"NO\"\nassert solution(46) == \"YES\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 1081,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"5\") == \"YES\"\nassert solution(\"13\") == \"NO\"\nassert solution(\"24\") == \"NO\"\nassert solution(\"46\") == \"YES\"\n"
    },
    {
        "number": 1081,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(input()) == \"YES\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"YES\"\nassert solution(input()) == \"YES\"\n"
    },
    {
        "number": 1081,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"5\") == \"YES\"\nassert solution(\"13\") == \"NO\"\nassert solution(\"24\") == \"NO\"\nassert solution(\"46\") == \"YES\"\n\nprint(\"All set\")"
    },
    {
        "number": 1081,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"NO\"\nassert solution(\"\") == \"NO\"\nassert solution(\"5\") == \"YES\"\nassert solution(\"5\\n5\\n5\\n5\\n5\") == \"YES\"\nassert solution(\"5\\n5\\n5\\n5\\n5\\n5\") == \"NO\"\n"
    },
    {
        "number": 1081,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('3') == 'YES'\nassert solution('5') == 'YES'\nassert solution('13') == 'NO'\nassert solution('24') == 'NO'\nassert solution('46') == 'YES'\n"
    },
    {
        "number": 1081,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(4) == \"YES\"\nassert solution(5) == \"YES\"\nassert solution(13) == \"NO\"\nassert solution(24) == \"NO\"\nassert solution(46) == \"NO\"\nprint(solution(int(input())))\n"
    },
    {
        "number": 1081,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"5\") == \"\"\nassert solution(\"13\") == \"\"\nassert solution(\"24\") == \"\"\nassert solution(\"46\") == \"\""
    },
    {
        "number": 1081,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5\\n') == 'YES'\nassert solution('1\\n2\\n3\\n4\\n6\\n') == 'NO'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n') == 'NO'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n') == 'NO'\nassert solution('0\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n') == 'NO'\n"
    },
    {
        "number": 1081,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('3') == \"NO\"\nassert solution('5') == \"YES\"\nassert solution('24') == \"NO\"\nassert solution('46') == \"YES\"\nassert solution('13') == \"NO\"\n"
    },
    {
        "number": 1082,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 1 1 1\\n\") == \"15\"\nassert solution(\"4\\n2 2 2 2\\n\") == \"7\"\nassert solution(\"5\\n1 2 4 5 8\\n\") == \"7\"\nassert solution(\"1\\n1\\n\") == \"1\"\nassert solution(\"5\\n1 2 4 5 8\\n\") == \"7\"\n"
    },
    {
        "number": 1082,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''5\n1 2 4 5 8''') == '15'\nassert solution('''4\n1 1 1 1''') == '7'\nassert solution('''4\n2 2 2 2''') == '7'\nassert solution('''5\n1 2 4 5 8''') == '15'\nassert solution('''4\n1 1 1 1''') == '7'\n"
    },
    {
        "number": 1082,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''4\n1 1 1 1\n''') == '15'\nassert solution('''4\n2 2 2 2\n''') == '7'\nassert solution('''5\n1 2 4 5 8\n''') == '7'\n'''\n"
    },
    {
        "number": 1082,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''4\n1 1 1 1\n''') == '15'\n\nassert solution('''4\n2 2 2 2\n''') == '7'\n\nassert solution('''5\n1 2 4 5 8\n''') == '7'\n\nassert solution('''10\n1 1 1 1 1 1 1 1 1 1 1\n''') == '15'\n\nprint(solution('''1000\n2 2 2 2 2 2 2 2 2 2 2\n'''))\n"
    },
    {
        "number": 1082,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(input()) == ''\n'''\n\n'''\nNote:\n1. n = 4, a = [1, 1, 1, 1]\n2. n = 4, a = [2, 2, 2, 2]\n3. n = 5, a = [1, 2, 4, 5, 8]\n4. n = 4, a = [1, 2, 4, 5]\n5. n = 2, a = [1, 2]\n6. n = 1, a = [1]\n7. n = 1, a = [1]\n8. n = 1, a = [1]\n'''\n\nn = int(input())\na = list(map(int, input().split()))\n\nmod = 1000000007\n\n'''\nComplexity:\nTime: O(n)\nSpace: O(n)\n'''"
    },
    {
        "number": 1082,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"\n4\n1 1 1 1\n\"\"\"\n) == '15'\n\nassert solution(\n\"\"\"\n4\n2 2 2 2\n\"\"\"\n) == '7'\n\nassert solution(\n\"\"\"\n5\n1 2 4 5 8\n\"\"\"\n) == '7'\n"
    },
    {
        "number": 1082,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('4\\n1 1 1 1\\n') == '15'\nassert solution('4\\n2 2 2 2\\n') == '7'\nassert solution('5\\n1 2 4 5 8\\n') == '7'\n\n\n\"\"\""
    },
    {
        "number": 1082,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('1 1 1 1') == '15'\nassert solution('2 2 2 2') == '7'\nassert solution('4 4 4 4') == '7'\nassert solution('5 5 5 5') == '1'\nassert solution('8 8 8 8') == '7'\n"
    },
    {
        "number": 1082,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdin"
    },
    {
        "number": 1082,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 1083,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('2\\n1 1') == '1\\n2 1'\nassert solution('2\\n1 1') == '1\\n2 1'\nassert solution('3\\n2 2\\n3 3') == '0\\n2\\n2 2\\n2 3'\nassert solution('3\\n3 3\\n2 2') == '1\\n2\\n1'\nassert solution('4\\n4 4\\n4 4\\n1 2\\n3 4') == '0\\n2\\n1'\n"
    },
    {
        "number": 1083,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''4''') == '0'\nassert solution('''2''') == '1'\nassert solution('''6''') == '3'\nassert solution('''10''') == '7'\nassert solution('''100''') == '99'\n"
    },
    {
        "number": 1083,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('2') == '1 1'\nassert solution('4') == '0'\nassert solution('4\\n1 2 3 4') == '1 4'\nassert solution('3\\n2 1 3') == '1 2 3'\nassert solution('1\\n4') == '0'\n"
    },
    {
        "number": 1083,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''\n2\n''') == '1'\nassert solution('''\n1\n1\n''') == '0'\nassert solution('''\n4\n2 1 4\n''') == '0'\nassert solution('''\n6\n1 2 1 1 1 1\n''') == '1'\nassert solution('''\n3\n1 2 3\n''') == '1'\n"
    },
    {
        "number": 1083,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('4\\n') == '0\\n2 1 4'\nassert solution('2\\n') == '1\\n1 1'\nassert solution('\\n') == '\\n'\n"
    },
    {
        "number": 1083,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('4\\n') == '0\\n2 1 4'\nassert solution('2\\n') == '1\\n1 1'\nassert solution('2\\n1 2\\n') == '0\\n2 1 2'\nassert solution('4\\n1 4\\n2 3\\n3 4\\n') == '0\\n3\\n2 2'\nassert solution('3\\n1 2\\n1 3\\n1 4\\n') == '0\\n1\\n2 2'\n"
    },
    {
        "number": 1083,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''4''') == '0'\nassert solution('''2''') == '1'\nassert solution('''3''') == '1'\nassert solution('''6''') == '2'\nassert solution('''123''') == '0'\n"
    },
    {
        "number": 1083,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"4\") == \"0\\n2 1 4\"\nassert solution(\"2\") == \"1\\n1 1\""
    },
    {
        "number": 1083,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''4''') == '0\\n2 1 4'\nassert solution('''2''') == '1\\n1 1'\nassert solution('''10''') == '3\\n4 4 4 4 4 4 4 4 4 4'\nassert solution('''100''') == '22\\n
    },
    {
        "number": 1083,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''4\n''') == '0'\nassert solution('''2\n''') == '1'\nassert solution('''\n''') == '1'\nassert solution('''\n3\n''') == '1'\nassert solution('''\n6\n''') == '1'\n"
    },
    {
        "number": 1084,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"5 8\") == \"Yes\"\nassert solution(\"5 5\") == \"No\"\nassert solution(\"5 9\") == \"No\"\n\n\n-----Solution Summary-----\n\n* The first sample of the test case is the wrong setup, since the leftmost column and the bottom row cannot be chosen in one operation.\n* The second sample is the wrong setup, since the center row cannot be chosen in one operation, and the last column cannot be chosen in one operation.\n* The third sample is the wrong setup, since the center row cannot be chosen in one operation, and the leftmost column cannot be chosen in one operation.\n* As we can see, it is impossible to achieve the desired setup, and so the output is No.\n* The other two samples are similar to the previous ones, but they are achievable anyway.\n* The forth and fifth sample is a correct setup, as you can choose the same row and column in different ways.\n\n\n\"\"\""
    },
    {
        "number": 1084,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\n\"5 8\\n\"\n\".#.#..#.\\n\"\n\".....#..\\n\"\n\".#.#..#.\\n\"\n\"#.#....#\\n\"\n\".....#..\\n\"\n) == \"Yes\"\n\nassert solution(\n\"5 5\\n\"\n\".#..\\n\"\n\".#..\\n\"\n\"####\\n\"\n\"..#..\\n\"\n\"..#..\\n\"\n) == \"No\"\n\n\n\n\"\"\"\n\n\"\"\"\n    1. Given a target grid, and a sequence of operations, if every cell is colour is black, then return \"Yes\".\n\n    2. Given a target grid, and a sequence of operations, if every cell is colour is white, then return \"No\".\n\n    3. We call target grid if every cell is black or every cell is white.\n\n    4. We call operation sequence if every operation is:\n        - Selecting a subset of rows, and every row is selected once.\n        - Selecting a subset of columns, and every column is selected once.\n        - Colourting the intersection of a row and a column, and the intersection is coloured black.\n\n    5. target grid will be read into a 2d array, so we can treat the array as a grid.\n\n    6. We treat every operation as a list of 2-tuples (2-tuple has the first item as the row index, and the second item as the column index).\n\n    7. For each operation, if the current row index is in the operation and the current column index is in the operation, then the current cell is coloured black.\n\n    8. If we reach the end of the operation list, then it means we've reached the target grid.\n\n    9. If the current row index and column index are in the target grid, then we need to check whether the current cell is black or white, and we cannot use the operation twice.\n\n    10. We need to check whether the current cell is black or white, and we cannot use the operation twice.\n\n    11. We use the algorithm described in page 8, and we use a matrix to record the current state of the grid.\n\n    12. The goal is to check whether the current state matches the target grid, and we use the following algorithm:\n        - If the current state matches the target grid, return \"Yes\", and finish.\n        - If the current state is not the target grid, start backtracking from the end.\n\n    13. The time complexity of the solution is O(n * m), where n is the number of rows and m is the number of columns.\n\n\"\"\""
    },
    {
        "number": 1084,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"5 8\\n.#.#..#.\\n.....#..\\n.#.#..#.\\n#.#....#\\n.....#..\\n\") == \"Yes\"\nassert solution(\"5 5\\n..#..\\n..#..\\n#####\\n..#..\\n..#..\\n\") == \"No\"\nassert solution(\"5 9\\n........#\\n#........\\n..##.#...\\n.......#.\\n....#.#.#\\n\") == \"No\"\n\n\n\"\"\""
    },
    {
        "number": 1084,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''5 8\n.#.#..#.\n.....#..\n.#.#..#.\n"
    },
    {
        "number": 1084,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('5 8\\n#.#.#..#.\\n.....#..\\n.#.#..#.\\n#.#....#\\n.....#..\\n\\n') == 'Yes'\nassert solution('5 5\\n..#..\\n..#..\\n#####\\n..#..\\n..#..\\n') == 'No'\nassert solution('5 9\\n........#\\n#........\\n..##.#...\\n.......#.\\n....#.#.#\\n\\n') == 'No'\nassert solution('5 9\\n........#\\n#.........\\n..##.#...\\n.......#.\\n....#.#.#\\n\\n') == 'No'\nassert solution('5 9\\n........#\\n#.........\\n..##.#...\\n.......#.\\n....#.#.#\\n\\n') == 'No'\n"
    },
    {
        "number": 1084,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"5 8\\n.#.#..#.\\n.....#..\\n.#.#..#.\\n#.#....#\\n.....#..\\n\") == \"Yes\"\nassert solution(\"5 5\\n..#..\\n..#..\\n#####\\n..#..\\n..#..\\n\") == \"No\"\nassert solution(\"5 9\\n........#\\n#........\\n..##.#...\\n.......#.\\n....#.#.#\\n\") == \"No\"\nassert solution(\"5 9\\n........#\\n#........\\n..##.#...\\n.......#.\\n....#.#.#\\n.###...##\") == \"Yes\"\nassert solution(\"5 9\\n..#..\\n..#..\\n..#..\\n.#...#.\\n#.###...\\n.#...#.#\\n#..#.###\") == \"No\"\n"
    },
    {
        "number": 1084,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"3 3\\n.##.\\n.#.#\\n###.\") == \"Yes\"\nassert solution(\"3 3\\n.#.#\\n.#.#\\n###.\") == \"No\"\nassert solution(\"3 4\\n.###.\\n.#.#\\n##.#\\n###.\") == \"Yes\"\nassert solution(\"5 4\\n...#.\\n....#\\n##..#\\n#.#.#\\n###.#\") == \"Yes\"\nassert solution(\"5 5\\n.#.#.\\n.#.#.\\n.###.\\n....#\\n#....\\n.#.#.\\n###.#\") == \"No\"\n\n\n\"\"\""
    },
    {
        "number": 1084,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"2 4\\n#.#..\\n....\\n.#.#.\\n#.#..\\n.#.#.\\n\") == \"No\"\nassert solution(\"2 4\\n.#.\\n.#.\\n.##\\n.#.\\n.#.\\n\") == \"Yes\"\nassert solution(\"3 3\\n.#.\\n.#.\\n.#.\\n.##\\n.#.\\n\") == \"Yes\"\nassert solution(\"5 5\\n.#.\\n.#.\\n.##\\n.#.\\n.#.\\n\") == \"Yes\"\nassert solution(\"6 6\\n.#.#.\\n.#.#.\\n.#.#.\\n.##..\\n.#.#.\\n\") == \"No\"\n"
    },
    {
        "number": 1084,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"3 3\\n.\\n#\\n###\") == \"Yes\"\nassert solution(\"3 3\\n..#\\n#.#\\n###\") == \"No\"\nassert solution(\"4 3\\n.##\\n###\\n#..\\n##.\") == \"Yes\"\nassert solution(\"5 5\\n....#\\n##..\\n#.#.#\\n##....\\n#.....\\n###...\\n####..\") == \"No\"\nassert solution(\"5 6\\n.#.#.\\n#....\\n##..\\n#.#.#\\n##....\\n#.....\\n###...\") == \"No\"\n"
    },
    {
        "number": 1084,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"5 8\") == \"Yes\"\nassert solution(\"5 5\") == \"No\"\nassert solution(\"5 9\") == \"No\"\nassert solution(\"0 9\") == \"Yes\"\nassert solution(\"5 1\") == \"No\"\n"
    },
    {
        "number": 1085,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''6''') == '3'\nassert solution('''1''') == '0'\nassert solution('''10''') == '0'\nassert solution('''100''') == '0'\nassert solution('''1000''') == '0'\n"
    },
    {
        "number": 1085,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdin"
    },
    {
        "number": 1085,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"6\") == \"3\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"3\"\nassert solution(\"5\") == \"2\"\n"
    },
    {
        "number": 1085,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(input()) == stdout\n"
    },
    {
        "number": 1085,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('12') == '1'\nassert solution('3') == '3'\nassert solution('6') == '6'\nassert solution('9') == '3'\nassert solution('36') == '3'\n"
    },
    {
        "number": 1085,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"4\") == \"1\"\nassert solution(\"10\") == \"0\"\nassert solution(\"50\") == \"2\"\nassert solution(\"500\") == \"6\"\nassert solution(\"5000\") == \"14\"\n"
    },
    {
        "number": 1085,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('6') == '3'\nassert solution('10') == '3'\nassert solution('16') == '2'\nassert solution('100') == '20'\nassert solution('1000') == '16'\n"
    },
    {
        "number": 1085,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('4') == '2'\nassert solution('10') == '2'\nassert solution('100') == '7'\nassert solution('1000') == '128'\nassert solution('10000') == '8'\n"
    },
    {
        "number": 1085,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('6') == '3'\nassert solution('2') == '1'\nassert solution('10') == '1'\nassert solution('20') == '2'\nassert solution('30') == '3'\n"
    },
    {
        "number": 1085,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('2') == '3'\nassert solution('3') == '6'\nassert solution('4') == '2'\nassert solution('6') == '1'\nassert solution('10') == '5'\n"
    },
    {
        "number": 1086,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\n\n-----\n"
    },
    {
        "number": 1086,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(input_) == output_\n"
    },
    {
        "number": 1086,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('2 2\\n1 2\\n3 4\\n3 4\\n2 1\\n') == '0'\nassert solution('2 2\\n1 2\\n3 4\\n3 4\\n2 1\\n') == '0'\nassert solution('4 4\\n1 2\\n3 4\\n3 4\\n1 1\\n') == '1'\nassert solution('4 4\\n1 2\\n3 4\\n3 4\\n1 1\\n') == '3'\nassert solution('4 4\\n1 2\\n3 4\\n3 4\\n1 1\\n') == '1'\n"
    },
    {
        "number": 1086,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''2 2\n1 2\n3 4\n3 4\n2 1''') == '0'\nassert solution('''2 2\n1 2\n3 4\n3 4\n2 1''') == '7'\nassert solution('''2 2\n1 1\n1 1\n2 1\n1 1\n1 1\n1 1\n1 1\n1 1''') == '1'\nassert solution('''2 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1''') == '6'\nassert solution('''6 6\n1 2\n2 2\n3 3\n4 4\n5 5\n6 6\n1 2\n1 2\n3 4\n3 4\n3 4''') == '1'\n"
    },
    {
        "number": 1086,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''2 2\n1 2\n3 4\n3 4''') == '0'\nassert solution('''2 2\n1 2\n3 4\n3 4''') == '0'\nassert solution('''2 2\n1 2\n3 4\n3 4\n2 1''') == '0'\nassert solution('''2 1\n1 2\n3 4\n3 4''') == '0'\nassert solution('''2 2\n1 2\n1 2\n3 4\n3 4''') == '0'\n"
    },
    {
        "number": 1086,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 1086,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\n    '2 2\\n1 2\\n3 4\\n3 4'\n) == '0'\nassert solution(\n    '2 2\\n1 2\\n3 4\\n3 4'\n) == '0'\nassert solution(\n    '2 2\\n1 2\\n3 4\\n3 4'\n) == '0'\nassert solution(\n    '2 2\\n1 2\\n3 4\\n3 4'\n) == '0'\nassert solution(\n    '2 2\\n1 2\\n3 4\\n3 4'\n) == '0'\n"
    },
    {
        "number": 1086,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''\n2 2\n1 2\n3 4\n3 4\n2 1\n''') == '0'\nassert solution('''\n3 3\n1 2 1\n2 3 1\n1 3 3\n''') == '1'\nassert solution('''\n3 3\n1 2 1\n2 3 2\n1 3 3\n''') == '3'\nassert solution('''\n3 3\n1 2 1\n2 3 1\n1 3 3\n''') == '3'\nassert solution('''\n3 3\n1 2 1\n2 3 1\n3 1 3\n''') == '3'\n"
    },
    {
        "number": 1086,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\n'''2 2\n1 2\n3 4'''\n    ) == '0'\nassert solution(\n'''3 3\n6 7 8\n1 2 4 5\n6 3 2 1'''\n    ) == '2'\nassert solution(\n'''3 3\n6 7 8\n4 3 2 1'''\n    ) == '4'\nassert solution(\n'''4 3\n7 6 5 4\n2 3 4 1\n1 2 3 4'''\n    ) == '3'\nassert solution(\n'''5 4\n8 7 6 5 4\n3 4 2 1 8\n6 7 3 4 5\n2 3 4 5 6'''\n    ) == '2'\n"
    },
    {
        "number": 1086,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\n'''\n2 2\n1 2\n3 4\n3 4\n2 1\n''') == '0'\nassert solution(\n'''\n5 10\n0 2\n6 0\n0 4\n0 0\n0 0\n1 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n''') == '10'\nassert solution(\n'''\n3 3\n1 3\n1 1\n2 2\n3 2\n1 1\n2 1\n1 1\n''') == '1'\nassert solution(\n'''\n10 7\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n''') == '3'\nassert solution(\n'''\n8 3\n1 3\n1 1\n2 2\n3 2\n1 1\n2 1\n1 1\n''') == '2'\n"
    },
    {
        "number": 1087,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('3 7\\n1 6 3') == '14'\nassert solution('3 7\\n1 1 1') == '1'\n"
    },
    {
        "number": 1087,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(input()) == output()\n"
    },
    {
        "number": 1087,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('''3 7\n1 6 3''') == \"14\"\n'''\nWhat if we want to find the maximum value of f, but we know that f(X) = (X XOR A_1) + (X XOR A_2) +... + (X XOR A_N)?\nSuppose f(X) = (X XOR A_1) + (X XOR A_2) +... + (X XOR A_N) = 0.\nWe can rewrite it as (X OR A_1) + (X OR A_2) +... + (X OR A_N) = 0.\nFrom the equation above, we can find that (X AND A_1) = 0 and (X AND A_2) = 0 and so on.\nIf A_i is a number between 0 and 10^12, then the i-th bit of (X AND A_i) is 1 iff (X AND A_i) has 1 in the i-th bit, and 0 otherwise.\nGiven A_1, A_2,..., A_N, your task is to find the maximum value of f(X) for all possible values of X between 0 and K, and print the maximum value as the answer.\n\n-----Input-----\nThe first line contains a single integer T denoting the number of test cases.\nThe next T lines each contain a single integer K.\nThe next line contains T integers A_1, A_2,..., A_N.\n\n-----Output-----\nFor each test case, print a single integer denoting the maximum value of f(X).\n'''\n"
    },
    {
        "number": 1087,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('3 7\\n1 6 3\\n') == '14'"
    },
    {
        "number": 1087,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''3 7\n1 6 3''') == '14'\nassert solution('''1000000000 1000000000''') == '0'\nassert solution('''100000 30''') == '30'\nassert solution('''100000 30''') == '30'\nassert solution('''100000 30''') == '30'\n"
    },
    {
        "number": 1087,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdin\n"
    },
    {
        "number": 1087,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''3 7\n1 6 3''') == '14'\nassert solution('''3 7\n1 6 3''') == '14'\nassert solution('''3 7\n3 7 3''') == '0'\nassert solution('''3 7\n7 7 7''') == '0'\nassert solution('''3 7\n7 7 6''') == '0'\n"
    },
    {
        "number": 1087,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''3 7\n1 6 3''') == '14'\n\nassert solution('''3 2\n1 2 3''') == '1'\n\nassert solution('''8 5\n4 2 1 5 2 4 1 3''') == '6'\n\nassert solution('''10 15\n4 2 1 5 2 4 1 3''') == '12'\n\nassert solution('''8 12\n4 2 1 5 2 4 1 3''') == '20'\n"
    },
    {
        "number": 1087,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''3 7\n1 6 3''') == '14'\n'''\nimport sys"
    },
    {
        "number": 1087,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('1 2') == '1'\nassert solution('3 7') == '14'\nprint(solution(stdin.read()))\n"
    },
    {
        "number": 1088,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"3 13\\n3 2 7\\n4 8 9\\n1 6 5\") == \"12\"\nassert solution(\"3 13\\n3 2 7\\n4 8 9\\n1 6 5\\n6 1 5\\n8 4 9\\n2 3 7\") == \"12\"\nassert solution(\"3 13\\n3 2 7\\n4 8 9\\n1 6 5\\n2 2 1\\n6 1 5\\n8 4 9\\n2 3 7\") == \"12\"\nassert solution(\"3 13\\n3 2 7\\n4 8 9\\n1 6 5\\n1 2 1\\n6 1 5\\n8 4 9\\n2 3 7\") == \"12\"\nassert solution(\"3 13\\n3 2 7\\n4 8 9\\n1 6 5\\n1 2 1\\n8 4 9\\n2 3 7\") == \"12\"\n"
    },
    {
        "number": 1088,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"3 13\\n3 2 7\\n4 8 9\\n1 6 5\") == \"12\"\nassert solution(\"3 13\\n3 2 7\\n4 8 9\\n1 6 5\") == \"12\" # too slow\nassert solution(\"3 13\\n3 2 7\\n4 8 9\\n1 6 5\") == \"12\" # too slow\nassert solution(\"2 1\\n1 1\") == \"0\"\nassert solution(\"3 2\\n1 2\") == \"0\"\n"
    },
    {
        "number": 1088,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"3 13\\n3 2 7\\n4 8 9\\n1 6 5\") == \"12\"\n\"\"\"\n"
    },
    {
        "number": 1088,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('1\\n1') == '1'\nassert solution('2\\n2') == '1'\nassert solution('1\\n1\\n1') == '1'\nassert solution('2\\n2\\n1') == '1'\nassert solution('1\\n1\\n2') == '1'\n"
    },
    {
        "number": 1088,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 1088,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('1 2 3 4\\n1 2 3 4\\n2 3 4 1\\n3 4 1 2\\n4 1 2 3\\n1 2 3 4') == '8'\n"
    },
    {
        "number": 1088,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(\"3 13\") == \"12\"\n\"\"\"\n"
    },
    {
        "number": 1088,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"3 13\") == \"12\"\nassert solution(\"3 2 7\") == \"12\"\nassert solution(\"4 8 9\") == \"12\"\nassert solution(\"1 6 5\") == \"12\"\nassert solution(\"3 9 2\") == \"12\"\n"
    },
    {
        "number": 1088,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('3 13') == '12'\nassert solution('4 8 9') == '12'\nassert solution('3 2 7') == '12'\nassert solution('1 6 5') == '12'\n\nassert solution('3 13') == '12'\n"
    },
    {
        "number": 1088,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('3 13') == '12'\nassert solution('3 13') == '12'\nassert solution('3 13') == '12'\nassert solution('3 13') == '12'\nassert solution('3 13') == '12'\n"
    },
    {
        "number": 1089,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('3 3 4') == \"8\"\nassert solution('1 1 2') == \"1\"\nassert solution('2 2 2') == \"0\"\nassert solution('1 1 2') == \"1\"\nassert solution('1 2 2') == \"1\"\n"
    },
    {
        "number": 1089,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('2 2 2') == '8'\nassert solution('1 2 2') == '8'\nassert solution('2 2 1') == '6'\nassert solution('2 1 2') == '6'\nassert solution('3 2 2') == '12'\n"
    },
    {
        "number": 1089,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 1089,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"1 2 3\") == \"6\"\nassert solution(\"2 2 2\") == \"8\"\nassert solution(\"2 3 1\") == \"6\"\nassert solution(\"3 1 1\") == \"6\"\nassert solution(\"10 10 10\") == \"276\"\n"
    },
    {
        "number": 1089,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('2 2 2') == '8'\nassert solution('3 3 3') == '7'\nassert solution('3 3 3') == '6'\nassert solution('3 4 5') == '7'\nassert solution('3 4 5') == '8'\n"
    },
    {
        "number": 1089,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('2 2 2') == '8'\nassert solution('2 2 1') == '1'\nassert solution('2 1 1') == '1'\nassert solution('3 3 3') == '6'\nassert solution('4 5 1') == '8'\n"
    },
    {
        "number": 1089,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('2 2 2') == '8'\nassert solution('3 2 2') == '18'\nassert solution('3 4 3') == '6'\nassert solution('3 4 2') == '10'\nassert solution('3 4 1') == '10'\n"
    },
    {
        "number": 1089,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('2 2 2') == '8'\nassert solution('2 2 2') == '8'\nassert solution('2 2 2') == '8'\nassert solution('2 2 2') == '8'\nassert solution('1 1 1') == '1'\n"
    },
    {
        "number": 1089,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('2 2 2') == '8'\nassert solution('2 2 1') == '3'\nassert solution('2 10 100') == '63'\nassert solution('2 3 1') == '4'\nassert solution('3 3 3') == '2'\n"
    },
    {
        "number": 1089,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('2 2 2') == '8'\nassert solution('2 2 1') == '6'\nassert solution('2 2 2') == '8'\nassert solution('1 1 1') == '0'\nassert solution('3 2 2') == '2'\n"
    },
    {
        "number": 1090,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1 2') == '0'\nassert solution('LRLRRL') == '3'\nassert solution('RLRLLL') == '3'\nassert solution('LLLLLL') == '5'\nassert solution('LLLLLLLL') == '6'\n"
    },
    {
        "number": 1090,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('LRLRLR') == '3'\nassert solution('RLLLLRR') == '4'\nassert solution('LRLRLL') == '4'\nassert solution('LLLLRRR') == '5'\nassert solution('LRLRLLL') == '5'\n"
    },
    {
        "number": 1090,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('6 1') == '3'\nassert solution('5 4') == '4'\nassert solution('6 3') == '0'\nassert solution('6 10') == '5'\nassert solution('6 10') == '5'\n"
    },
    {
        "number": 1090,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('LRLRRL') == '3'\nassert solution('RRRLLR') == '1'\nassert solution('RLRLLRLLRLLRRLLRLLLLRRRLLRLRRRRL') == '4'\nassert solution('LLLLRRLLLRRLLRL') == '4'\nassert solution('RRRRLRRLRLLRLLRL') == '3'\n"
    },
    {
        "number": 1090,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('2 1', 'LRLRLR') == '3'\nassert solution('3 1', 'LRLRLR') == '4'\nassert solution('4 1', 'LRLRLR') == '4'\nassert solution('5 3', 'LRLRLR') == '4'\nassert solution('5 4', 'LRLRLR') == '5'\n"
    },
    {
        "number": 1090,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('3 1') == '3'\nassert solution('6 1') == '3'\nassert solution('LRLRLL') == '3'\nassert solution('LLLRRRL') == '3'\nassert solution('RLLRLLRLLRRL') == '3'\n"
    },
    {
        "number": 1090,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('6 1') == '3'\nassert solution('6 1LRLRRL') == '3'\nassert solution('3 3') == '1'\nassert solution('6 3') == '1'\nassert solution('3 5') == '2'\n"
    },
    {
        "number": 1090,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"6 1\\nLLLRRL\") == \"3\"\nassert solution(\"8 1\\nLLLLLLLLLLR\") == \"5\"\nassert solution(\"10 2\\nLLLLLLLLRRLL\") == \"6\"\nassert solution(\"10 2\\nLLLLLLRRLLLL\") == \"2\"\nassert solution(\"10 2\\nRRLLLLLLRLLL\") == \"3\"\n"
    },
    {
        "number": 1090,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"LLLRRR\") == \"3\"\nassert solution(\"LLRLLR\") == \"4\"\nassert solution(\"RRRLLR\") == \"3\"\nassert solution(\"RLLLLR\") == \"4\"\nassert solution(\"RLRLLL\") == \"4\"\n"
    },
    {
        "number": 1090,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('6 1\\nLRLRRL') == '3'\nassert solution('6 3\\nLRLRL') == '2'\nassert solution('1 1\\nL') == '1'\nassert solution('6 2\\nLRLR') == '2'\nassert solution('6 4\\nLRLRLR') == '3'\n"
    },
    {
        "number": 1091,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''2\n5 7''') == '2 5'\nassert solution('''3\n10 2 8''') == '1 8'\nassert solution('''6\n3 8 2 9 4 14''') == '6 9'\nassert solution('''3\n10 2 8''') == '1 8'\nassert solution('''6\n3 8 2 9 4 14''') == '6 9'\n"
    },
    {
        "number": 1091,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('3\\n2 1\\n') == '2 1\\n'\nassert solution('3\\n2 1\\n') == '2 1\\n'\nassert solution('3\\n2 1\\n') == '2 1\\n'\nassert solution('3\\n2 1\\n') == '2 1\\n'\nassert solution('3\\n2 1\\n') == '2 1\\n'\n"
    },
    {
        "number": 1091,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution('1\\n1\\n') == '1 1'\nassert solution('1\\n1\\n') == '1 1'\nassert solution('1\\n1\\n') == '1 1'\nassert solution('1\\n1\\n') == '1 1'\nassert solution('1\\n1\\n') == '1 1'\n"
    },
    {
        "number": 1091,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('4\\n5 10 9 8') == '2 5'\nassert solution('2\\n5 10') == '1 8'\nassert solution('2\\n3 9 8') == '2 8'\nassert solution('4\\n3 9 8 10 4 14') == '1 8'\nassert solution('1\\n5') == '1 5'\n"
    },
    {
        "number": 1091,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''5 7''') == '1 8'\nassert solution('''3 8 2 9 4 14''') == '1 8'\nassert solution('''10 2 8''') == '1 8'\nassert solution('''1 2 3 4 5 6 7 8''') == '1 8'\nassert solution('''10 10 10 10 10 10''') == '1 10'\n"
    },
    {
        "number": 1091,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''5\n7\n5 7''') == '5 7'\nassert solution('''3\n10 2 8''') == '1 8'\nassert solution('''6\n3 8 2 9 4 14''') == '6 9'\nassert solution('''2\n1 2''') == '1 2'\nassert solution('''2\n10 2 8''') == '1 8'\n"
    },
    {
        "number": 1091,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('1\\n2\\n3\\n4') == '2 3'\nassert solution('2\\n3\\n4\\n5') == '1 2'\nassert solution('2\\n4\\n5\\n6') == '3 6'\nassert solution('4\\n3\\n2\\n1') == '2 4'\nassert solution('5\\n3\\n2\\n1') == '1 3'\n"
    },
    {
        "number": 1091,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('2\\n5 7') == '2 5'\nassert solution('3\\n10 2 8') == '1 8'\nassert solution('6\\n3 8 2 9 4 14') == '6 9'\nassert solution('7\\n7 2 2 4 9 7 10') == '7 2'\nassert solution('8\\n6 1 2 3 4 5 6 7 8') == '1 8'\n"
    },
    {
        "number": 1091,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''2\n5 7\n''') == '2 5'\nassert solution('''3\n10 2 8\n''') == '1 8'\nassert solution('''6\n3 8 2 9 4 14\n''') == '6 9'\n"
    },
    {
        "number": 1091,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"\") == ''\nassert solution(\"\\n\") == ''\nassert solution(\"1\") == '1\\n'\nassert solution(\"\\n1\") == '1\\n'\nassert solution(\"1\\n\") == '1\\n'\n"
    },
    {
        "number": 1092,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution(\"3 1\") == \"1\"\nassert solution(\"4 2\") == \"2\"\nassert solution(\"11 2\") == \"6720\""
    },
    {
        "number": 1092,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\n'''\n3 1\n1\n''') == '1'\n\nassert solution(\n'''\n4 2\n1 4\n''') == '2'\n\nassert solution(\n'''\n11 2\n4 8\n''') == '6720'\n\nprint('Test case passed')\n"
    },
    {
        "number": 1092,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"2 2\") == \"1\"\nassert solution(\"3 3\") == \"6\"\nassert solution(\"4 4\") == \"1\"\nassert solution(\"5 5\") == \"2\"\n"
    },
    {
        "number": 1092,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"2 2\") == \"1\"\nassert solution(\"3 1\") == \"1\"\nassert solution(\"3 2\") == \"2\"\nassert solution(\"4 1\") == \"1\"\n"
    },
    {
        "number": 1092,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''3 1\n1\n''') == '1'\nassert solution('''4 2\n1 4\n''') == '2'\nassert solution('''11 2\n4 8\n''') == '6720'\nassert solution('''7 1\n5\n''') == '10'\n\nassert solution('''30 3\n1 5\n2 4\n3 6\n''') == '25'\n"
    },
    {
        "number": 1092,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"1 2\\n1 4\") == \"2\"\nassert solution(\"4 2\\n1 4\") == \"2\"\nassert solution(\"11 2\\n4 8\") == \"6720\"\nassert solution(\"11 2\\n1 4\") == \"2\"\nassert solution(\"11 2\\n4 8\") == \"6720\"\n"
    },
    {
        "number": 1092,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 1092,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"5\"\nassert solution(\"5\") == \"5\"\n"
    },
    {
        "number": 1092,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == '6720'\n\nprint('Passed!')"
    },
    {
        "number": 1092,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"3 1\") == \"1\"\nassert solution(\"4 2\") == \"2\"\nassert solution(\"3 10\") == \"6\"\nassert solution(\"2 2\") == \"1\"\n"
    },
    {
        "number": 1093,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution\ufffd"
    },
    {
        "number": 1093,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution\ufffd"
    },
    {
        "number": 1093,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution\ufffd"
    },
    {
        "number": 1093,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution\ufffd"
    },
    {
        "number": 1093,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution\ufffd"
    },
    {
        "number": 1093,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution\ufffd"
    },
    {
        "number": 1093,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution\ufffd"
    },
    {
        "number": 1093,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution\ufffd"
    },
    {
        "number": 1093,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution\ufffd"
    },
    {
        "number": 1093,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution\ufffd"
    },
    {
        "number": 1094,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('''4\nalex\nivan\nroman\nivan''') == \"ivan\\nroman\\nalex\"\nassert solution('''8\nalina\nmaria\nekaterina\ndarya\ndarya\nekaterina\nmaria\nalina''') == \"alina\\nmaria\\nekaterina\\ndarya\"\n\n'''"
    },
    {
        "number": 1094,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''4\nalex\nivan\nroman\nivan''') == 'ivan\\nroman\\nalex\\n'\nassert solution('''8\nalina\nmaria\nekaterina\ndarya\ndarya\nekaterina\nmaria\nalina\n''') == 'alina\\nmaria\\nekaterina\\ndarya\\ndarya\\nekaterina\\nmaria\\n'\nassert solution('''4\nalina\nmaria\nekaterina\ndarya\n''') == 'alina\\nmaria\\nekaterina\\ndarya\\n'\nassert solution('''8\nalina\nmaria\nekaterina\ndarya\ndarya\nekaterina\nmaria\nalina\n''') == 'alina\\nmaria\\nekaterina\\ndarya\\ndarya\\nekaterina\\nmaria\\n'\nassert solution('''8\nalina\nmaria\nekaterina\ndarya\ndarya\nekaterina\nmaria\nalina\n''') == 'alina\\nmaria\\nekaterina\\ndarya\\ndarya\\nekaterina\\nmaria\\n'\n"
    },
    {
        "number": 1094,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"4\\nalex\\nivan\\nroman\\nivan\\n\") == \"ivan\\nroman\\nalex\\n\"\nassert solution(\"8\\nalina\\nmaria\\neeaterina\\ndarya\\nekaterina\\nmaria\\nalina\\n\") == \"alina\\nmaria\\nekaterina\\ndarya\\n\"\n\"\"\"\nfrom collections import defaultdict\n"
    },
    {
        "number": 1094,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''alex\nivan\nroman\nivan\n''') == 'ivan\\nroman\\nalex'\nassert solution('''alina\nmaria\nekaterina\ndarya\ndarya\nekaterina\nmaria\nalina\n''') == 'alina\\nmaria\\nekaterina\\ndarya'\nassert solution('''ekaterina\ndarya\nalina\n''') == 'ekaterina\\ndarya\\nalina'\nassert solution('''alex\nmaria\ndarya\nalina\n''') == 'alex\\nmaria\\ndarya\\nalina'\nassert solution('''alex\nmaria\nekaterina\ndarya\nalina\n''') == 'alex\\nmaria\\nekaterina\\ndarya\\nalina'\n"
    },
    {
        "number": 1094,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''4\nalex\nivan\nroman\nivan''') == 'ivan roman ivan'\nassert solution('''8\nalina\nmaria\nekaterina\ndarya\ndarya\nekaterina\nmaria\nalina''') == 'alina maria ekaterina darya'\n\n'''"
    },
    {
        "number": 1094,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('''4\nalex\nivan\nroman\nivan\n''') == \"ivan roman ivan\"\nassert solution('''8\nalina\nmaria\nekaterina\ndarya\ndarya\nekaterina\nmaria\nalina\n''') == \"alina maria ekaterina darya\"\nassert solution('''5\na\nb\nc\nd\ne\n''') == \"a b c d e\"\nassert solution('''1\na\n''') == \"a\"\nassert solution('''2\na\n''') == \"a\"\n"
    },
    {
        "number": 1094,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''\n4\nalex\nivan\nroman\nivan\n''') == 'ivan'\n\nassert solution('''\n8\nalina\nmaria\nekaterina\ndarya\ndarya\nekaterina\nmaria\nalina\n''') == 'alina'\n'''\n"
    },
    {
        "number": 1094,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''4\nalex\nivan\nroman\nivan''') == 'ivan'\nassert solution('''8\nalina\nmaria\nekaterina\ndarya\ndarya\nekaterina\nmaria\nalina''') == 'alina'\n'''\n"
    },
    {
        "number": 1094,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('''4\nalex\nivan\nroman\nivan\n''') == 'ivan\\nroman\\nalex'\nassert solution('''8\nalina\nmaria\nekaterina\ndarya\ndarya\nekaterina\nmaria\nalina\n''') == 'alina\\nmaria\\nekaterina\\ndarya'\n\n\"\"\"\n\n\nfrom typing import List\n"
    },
    {
        "number": 1094,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('4\\nalex\\nivan\\nroman\\nivan\\n') == 'ivan\\nroman\\nalex'\nassert solution('8\\nalina\\nmaria\\nekaterina\\ndarya\\ndarya\\nekaterina\\nmaria\\namrata') == 'amrata\\ndarya\\nekaterina\\nmaria\\nalina\\n'\n\n\n\n\"\"\""
    },
    {
        "number": 1095,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('3 1\\n1 5 6\\n1 3\\n3\\n') == '3'\n\nassert solution('2 2\\n2 4\\n2 4\\n') == '2'\n\nassert solution('2 2\\n1 1\\n1 1\\n') == '1'\n\nassert solution('3 1\\n1 4\\n2 4\\n3\\n') == '1'\n\nassert solution('3 1\\n1 4\\n3\\n4\\n') == '2'"
    },
    {
        "number": 1095,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(''.join(stdin.split())) == '3'\n\n'''\n"
    },
    {
        "number": 1095,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(stdin) == expected\n\"\"\""
    },
    {
        "number": 1095,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdin\n\n-----Test-----\n\n- stdin -\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n"
    },
    {
        "number": 1095,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdin\n\n\"\"\"\n\nimport sys\nfrom bisect import bisect_left, bisect_right"
    },
    {
        "number": 1095,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"3 1\\n1 5 6\\n1 3\\n3\") == \"3\"\nassert solution(\"3 1\\n1 3\\n3\") == \"3\"\nassert solution(\"3 1\\n1 3\\n3\") == \"3\"\nassert solution(\"3 2\\n2 3\\n1 2\") == \"3\"\nassert solution(\"3 2\\n2 3\\n1 2\") == \"3\"\n"
    },
    {
        "number": 1095,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('1\\n1\\n1\\n2\\n3') == 3\nassert solution('1\\n2\\n3\\n4\\n5\\n6') == 2\nassert solution('2\\n4\\n5\\n6\\n7\\n8\\n9') == 3\nassert solution('2\\n4\\n6\\n7\\n8\\n9\\n10\\n11\\n12') == 3\nassert solution('2\\n4\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14') == 4\n"
    },
    {
        "number": 1095,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution(input) == \"3\"\nassert solution(input2) == \"0\"\nassert solution(input3) == \"1\"\nassert solution(input4) == \"3\"\nassert solution(input5) == \"2\"\n"
    },
    {
        "number": 1095,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution('3 1\\n1 5 6\\n1 3\\n3') == '3'\nassert solution('5 3\\n0 1 2 3 4') == '2'\nassert solution('5 3\\n0 1 2 3 4\\n3 0\\n0') == '3'\nassert solution('3 4\\n1 2 3 4\\n4 2\\n0') == '4'\nassert solution('5 3\\n0 1 2 3 4\\n1 0\\n1') == '4'\n"
    },
    {
        "number": 1095,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''3 1\n1 5 6\n1 3\n3''') == '3'\nassert solution('''2 2\n1 5\n3\n1\n''') == '1'\nassert solution('''10 10\n1 1\n1 2\n2\n1\n''') == '5'\nassert solution('''10 10\n1 1\n1 2\n2\n1\n''') == '1'\nassert solution('''3 2\n1 5\n3\n3\n1\n''') == '5'\n"
    },
    {
        "number": 1096,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('e4') == 8\nassert solution('g1') == 0\nassert solution('f1') == 0\nassert solution('g8') == 4\nassert solution('g6') == 2\n"
    },
    {
        "number": 1096,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution(\"e4\") == 8\nassert solution(\"d4\") == -1\nassert solution(\"c8\") == 4\nassert solution(\"a2\") == -1\nassert solution(\"h4\") == 5\n"
    },
    {
        "number": 1096,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"e4\") == 8\nassert solution(\"c8\") == 0\nassert solution(\"d2\") == 2\nassert solution(\"e7\") == 2\nassert solution(\"f2\") == 3\n"
    },
    {
        "number": 1096,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''e4''') == 8\nassert solution('''d4''') == 4\nassert solution('''a4''') == 0\nassert solution('''c3''') == 3\nassert solution('''a8''') == 0\n"
    },
    {
        "number": 1096,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution(\"e4\") == 8\nassert solution(\"e5\") == 16\nassert solution(\"e6\") == 19\nassert solution(\"e7\") == 22\nassert solution(\"e8\") == 24\n"
    },
    {
        "number": 1096,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution('e4') == 8\nassert solution('b2') == 4\nassert solution('d1') == 0\nassert solution('e7') == 0\nassert solution('f1') == 0\n"
    },
    {
        "number": 1096,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('''e4''') == '8'\nassert solution('''f3''') == '-1'\nassert solution('''d5''') == '0'\nassert solution('''c8''') == '3'\nassert solution('''a1''') == '-1'\n"
    },
    {
        "number": 1096,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('e4') == 8\n'''\n"
    },
    {
        "number": 1096,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(\"e4\") == 8"
    },
    {
        "number": 1096,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('e4') == 8\nassert solution('e8') == -1\nassert solution('c2') == 2\nassert solution('e1') == 2\nassert solution('f3') == -1\n"
    },
    {
        "number": 1097,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert solution('1\\n1') == '1'\nassert solution('1\\n1\\n1') == '1'\nassert solution('1\\n1\\n1\\n1') == '1'\nassert solution('5\\n2 3 2 1\\n1 2 2') == '5'\nassert solution('5\\n2 3 2 1\\n1 2 2\\n1 4 1\\n1 5 1\\n2 1 4\\n1 1 1') == '-1'\n"
    },
    {
        "number": 1097,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert solution('''7 3 3\n2 3 1''') == '7'\nassert solution('''14 5 6\n4 4 2 2 1''') == '14'\nassert solution('''8 5 7\n1 4 1 4 1''') == '8'\nassert solution('''7 2 3\n5 2 1''') == '7'\nassert solution('''7 2 3\n4 2 1''') == '-1'\n"
    },
    {
        "number": 1097,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3\\n4\\n\") == \"4\\n1 3\\n2 3\\n1 3\"\nassert solution(\"1 2 3\\n4\\n\") == \"-1\"\nassert solution(\"1 2 3\\n1 2 1\\n\") == \"2\\n1 2 3\\n1 2 3\"\nassert solution(\"1 2 3\\n1 2 1\\n\") == \"2\\n1 2 3\\n1 2 3\"\nassert solution(\"2 3 1\\n2 2 1\\n\") == \"2\\n1 3\\n1 3\"\n"
    },
    {
        "number": 1097,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert solution('''7 3 3\n2 3 1''') == '7\\n1 3\\n2 1\\n2 6\\n2 4\\n7 4\\n3 5\\n5 1\\n3 7\\n2 6\\n5 9'\nassert solution('''14 5 6\n4 4 2 2 1''') == '14\\n3 1\\n1 4\\n11 6\\n1 2\\n10 13\\n6 10\\n10 12\\n14 12\\n8 4\\n5 1\\n3 7\\n2 6\\n5 9'\nassert solution('''3 1 1\n2\n''') == '-1'\nassert solution('''14 5 6\n4 4 2 2 1''') == '-1'\nassert solution('''6 6 6\n3\n''') == '-1'\n"
    },
    {
        "number": 1097,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert solution('''7 3 3''') == '7'\nassert solution('''14 5 6''') == '14'\nassert solution('''4 4 2 2 1''') == '14'\n"
    },
    {
        "number": 1097,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert solution(\"7 3 3\") == \"7\"\nassert solution(\"14 5 6\") == \"14\"\nassert solution(\"4 4 2 2 1\") == \"14\"\nassert solution(\"7 3 3\") == \"-1\"\nassert solution(\"1 2\") == \"1 2\"\n"
    },
    {
        "number": 1097,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert solution('1 1 1') == '1'\nassert solution('1 2 3') == '1'\nassert solution('1 2 3 4 5') == '1 2 3'\nassert solution('1 2 3 4 5 6') == '1'\nassert solution('1 2 3 4 5 6 7') == '1'\n"
    },
    {
        "number": 1097,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert solution('''7 3 3''') == '7'\nassert solution('''2 3 1''') == '7'\nassert solution('''14 5 6''') == '14'\nassert solution('''4 4 2 2 1''') == '14'\n\nassert solution('''2 3 1''') == '7'\n"
    },
    {
        "number": 1097,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 1097,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert solution('''5 3 1''') == '1'\nassert solution('''6 4 3''') == '-1'\nassert solution('''7 4 3''') == '7'\nassert solution('''15 5 3''') == '5'\nassert solution('''10 5 3''') == '-1'\n"
    }
]