[
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('][]') == -1\nassert solution('][][]') == -1\nassert solution('[[:||:]]') == 4\nassert solution('[[:|:]]') == 4\nassert solution('[[:|:][:|:]]') == 6\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('[::]') == 4\nassert solution('[:||:]') == 6\nassert solution('[:|||:]') == 7\nassert solution('[:||:|:||:]') == -1\nassert solution('[:||:|:|||:]') == -1\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"[a:b:|]\") == \"4\"\nassert solution(\"]:[|:\") == -1\nassert solution(\"]:[|:|:\") == -1\nassert solution(\"][\") == -1\nassert solution(\"]]]\") == -1\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"[a:b:|]\") == \"4\"\nassert solution(\"]:[|:]\") == \"-1\"\nassert solution(\"[|]\") == \"-1\"\nassert solution(\"[a:|]\") == \"1\"\nassert solution(\"[]\") == \"-1\"\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"[a:b:|]\") == \"4\"\nassert solution(\"]:[|:]\") == \"-1\"\nassert solution(\"]:[|:\") == \"-1\"\nassert solution(\"]:[|]\") == \"-1\"\nassert solution(\"][|:\") == \"-1\"\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(':|:') == '-1'\nassert solution(']:[:|:') == '-1'\nassert solution(':|:):|:') == '-1'\nassert solution(']:]:]|]:') == '-1'\n\nassert solution(':|:):|:') == '5'\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"][][||][\") == 4\nassert solution(\"]:[||:\") == -1\nassert solution(\"]:[|:\") == -1\nassert solution(\"]:[|||:\") == -1\nassert solution(\"][:|:\") == -1\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"[a:b:|]\") == 4\nassert solution(\"[:]\") == -1\nassert solution(\"[a:b:|]\") == 4\nassert solution(\"]:[|:]\") == -1\nassert solution(\"[|]\") == 1\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('[a:b:|]') == '4'\nassert solution('[:|]') == '2'\nassert solution('[|:]') == '-1'\nassert solution('[:]') == '0'\nassert solution('[:|:|]') == '-1'\n\n\"\"\""
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"[a:b:]\" == 4)\nassert solution(\"[]:[:|||:\" == -1)\n\"\"\""
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"100\") == \"99\"\nassert solution(\"48\") == \"48\"\nassert solution(\"521\") == \"499\"\n\n\"\"\""
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(521) == 499\n\"\"\""
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"100\") == \"99\"\nassert solution(\"48\") == \"48\"\n\"\"\"\n\n\nfrom collections import deque\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(100) == 99\nassert solution(48) == 48\nassert solution(521) == 499\n\"\"\"\n\nx = int(stdin.readline().strip())\n\nmax_sum = 0\nmax_int = 0\nfor i in range(1, x+1):\n    s = 0\n    for d in str(i):\n        s += int(d)\n    if s > max_sum:\n        max_sum = s\n        max_int = i\n\nprint(max_int)\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"100\") == \"99\"\nassert solution(\"48\") == \"48\"\nassert solution(\"521\") == \"499\"\n\nprint(\"Try to solve the lab3-task1.py\")\n\n\n\n------2nd attempt------\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('100') == '99'\nassert solution('48') == '48'\nassert solution('521') == '499'\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('100') == '99'\n\nassert solution('48') == '48'\nassert solution('521') == '499'\n\"\"\"\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('100') == '99'\nassert solution('48') == '48'\nassert solution('521') == '499'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('521') == '499'\nassert solution('100') == '99'\nassert solution('48') == '48'\nassert solution('1') == '1'"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(123) == \"9\"\nassert solution(7) == \"7\"\nassert solution(100) == \"99\"\nassert solution(100) == \"99\"\nassert solution(49) == \"49\"\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(12) == 0\nassert solution(12345) == 0\nassert solution(3) == 2\nassert solution(123456) == 4\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\") == \"1\"\nassert solution(\"201\") == \"99\"\nassert solution(\"4000\") == \"1000\"\nprint(\"It is all good. Let's check it now\")\n\"\"\""
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4') == '1'\nassert solution('201') == '99'\nassert solution('4000') == '1000'\n\nprint('Success')"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4') == '1'\nassert solution('201') == '99'\nassert solution('4000') == '1000'"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4') == '1'\nassert solution('201') == '99'\nassert solution('4000') == '1000'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\") == \"1\"\nassert solution(\"201\") == \"99\"\nassert solution(\"4000\") == \"1000\"\n\n\n\n\"\"\"\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4') == '1'\nassert solution('201') == '99'\nassert solution('4000') == '1000'\n\"\"\"\n\nimport sys\nimport os\nimport time\nimport re\nimport numpy as np\nfrom collections import defaultdict"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4') == '1'\nassert solution('201') == '99'\nassert solution('4000') == '1000'\n\"\"\"\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''4''') == '1'\nassert solution('''201''') == '99'\nassert solution('''4000''') == '1000'\n\"\"\"\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4') == '1'\nassert solution('201') == '99'\nassert solution('4000') == '1000'\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1 1') == '1'\nassert solution('2 2') == '1'\nassert solution('2 2\\n3 4') == '2'\nassert solution('3 2\\n4 5\\n5 6') == '3'\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 5\\n1 4\\n4 5\\n5 6\\n6 7\\n3 5\\n\") == \"7\"\nassert solution(\"4 3\\n1 1\\n2 2\\n2 3\\n3 4\\n\") == \"2\"\nassert solution(\"4 4\\n1 1\\n2 2\\n2 3\\n3 4\\n\") == \"3\"\nassert solution(\"5 5\\n2 3\\n1 1\\n2 2\\n3 3\\n4 4\\n\") == \"3\"\nassert solution(\"5 5\\n2 3\\n1 1\\n2 2\\n3 3\\n4 4\\n\") == \"3\"\n\nprint(\"Successfully solved quadratic problem!\")\n\"\"\""
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"7 5\n1 4\n4 5\n5 6\n6 7\n3 5\n\"\"\") == '7'\n\nassert solution(\"\"\"4 3\n1 1\n2 2\n2 3\n3 4\n\"\"\") == '2'\n\n\"\"\"\n7 5\n1 4\n4 5\n5 6\n6 7\n3 5\n\"\"\"\nassert solution(stdin) == \"7\"\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''7 5\n1 4\n4 5\n5 6\n6 7\n3 5''') == '7'\n\nassert solution('''4 4\n1 1\n2 2\n2 3\n3 4''') == '2'\n\nprint('Success')\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4') == '7'\n\"\"\""
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 3\\n1 1\\n2 2\\n2 3\\n3 4\\n') == '2', 'Test 1'\nassert solution('7 5\\n1 4\\n4 5\\n5 6\\n6 7\\n3 5\\n') == '7', 'Test 2'\nassert solution('5 3\\n1 1\\n2 2\\n3 4\\n') == '2', 'Test 3'\nassert solution('7 5\\n1 4\\n5 6\\n6 7\\n4 7\\n') == '3', 'Test 4'\nassert solution('3 4\\n1 1\\n2 2\\n3 4\\n') == '2', 'Test 5'\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('4 4') == '3'\nassert solution('4 5') == '4'\nassert solution('5 6') == '4'\nassert solution('6 7') == '5'\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3\\n1 1\\n2 2\\n2 3\\n3 4') == '3', 'Test 1 failed'\nassert solution('7 5\\n1 4\\n4 5\\n5 6\\n6 7\\n3 5') == '7', 'Test 2 failed'\nassert solution('4 4\\n1 1\\n2 2\\n2 3\\n3 4') == '2', 'Test 3 failed'\n\nprint('All tests passed')\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 5\\n1 4\\n4 5\\n5 6\\n6 7\\n3 5\") == \"7\"\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"11 23\") == \"2\"\nassert solution(\"01 07\") == \"0\"\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"11 23\") == 2\nassert solution(\"01 07\") == 0\n\nassert solution(11) == 2\nassert solution(1) == 0\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"11 23\") == 2\nassert solution(\"01 07\") == 0\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"11 23\") == \"2\"\nassert solution(\"01 07\") == \"0\"\n\"\"\""
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"11 23\") == 2\nassert solution(\"01 07\") == 0\n\n\"\"\"\n\nfrom math import ceil"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"11 23\") == 2\nassert solution(\"01 07\") == 0\nassert solution(\"12 40\") == 0\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3,11,23') == '2'\nassert solution('5,01,07') == '0'\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('11 23') == '2'\nassert solution('01 07') == '0'\nassert solution('12 24') == '1'\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"13:07\") == \"2\"\nassert solution(\"01:07\") == \"0\""
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"11 23\") == 2\nassert solution(\"01 07\") == 0\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6 3 2 4') == 5\nassert solution('6 3 1 3') == 1\nassert solution('5 2 1 5') == 0\n\"\"\"\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 3 2 4\") == \"5\"\nassert solution(\"6 3 1 3\") == \"1\"\nassert solution(\"5 2 1 5\") == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 1 1 5\") == 1\nassert solution(\"4 2 1 5\") == 0\n\"\"\"\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6 3 2 4') == '5'\n\"\"\""
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''6 3 2 4''') == '5'\nassert solution('''6 3 1 3''') == '1'\nassert solution('''5 2 1 5''') == '0'\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6 3 2 4') == '5'\nassert solution('6 3 1 3') == '1'\nassert solution('5 2 1 5') == '0'\n\n\"\"\"\n\nn, pos, l, r = map(int, input().split())\ntabs = [i for i in range(1, n + 1)]\nprint(min(tabs[pos - 1], max(tabs[:pos])) if l == r else min(tabs[pos], max(tabs[pos + 1:])) if l < r else 0)\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3 1 4\") == \"1\"\nassert solution(\"6 3 1 3\") == \"0\"\nassert solution(\"5 2 1 5\") == \"0\"\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 3 2 4\") == \"5\"\nassert solution(\"6 3 1 3\") == \"1\"\nassert solution(\"5 2 1 5\") == \"0\"\n\"\"\"\nfrom math import inf"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6 3 2 4') == 5\n\nassert solution('5 2 1 5') == 0\n\n\"\"\"\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3 2 1 5\") == \"1\"\nassert solution(\"6 3 1 3\") == \"1\"\nassert solution(\"5 2 1 5\") == \"0\""
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n5 10\\n8 2\\n1 4\\n4 10\") == \"2\"\nassert solution(\"1\\n5 10\\n8 2\\n1 4\\n4 10\") == \"3\"\nassert solution(\"1\\n5 10\\n8 2\\n1 4\\n4 10\") == \"3\"\n\n\"\"\"\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 10\\n6 3\\n8 2\\n1 4\\n4 10\\n4 1\\n3 2\\n2 6\\n1 100\\n2 15\\n10 11\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == expected_value"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n3 10\n6 3\n8 2\n1 4\n4 10\n4 1\n3 2\n2 6\n1 100\n2 15\n10 11\n14 100\n''') == '2'\nassert solution('''\n3 10\n6 3\n8 2\n1 4\n4 10\n4 1\n3 2\n2 6\n1 100\n2 15\n10 11\n14 100\n''') == '3'\nassert solution('''\n3 10\n6 3\n8 2\n1 4\n4 10\n4 1\n3 2\n2 6\n1 100\n2 15\n10 11\n14 100\n''') == '-1'\n\n\n'''\n\nGiven the number of heads, what is the minimum number of blows to defeat Zmei Gorynich?\n\nZmei Gorynich has $x$ heads initially. You can deal $n$ types of blows. If you deal a blow of the $i$-th type, you decrease the number of heads by $min(d_i, curX)$, there $curX$ is the current number of heads. But if after this blow Zmei Gorynich has at least one head, he grows $h_i$ new heads. If $curX = 0$ then Zmei Gorynich is defeated.\n\nYou can deal each blow any number of times, in any order.\n\nFor example, if $curX = 10$, $d = 7$, $h = 10$ then the number of heads changes to $13$ (you cut $7$ heads off, but then Zmei grows $10$ new ones), but if $curX = 10$, $d = 11$, $h = 100$ then number of heads changes to $0$ and Zmei Gorynich is considered defeated.\n\nCalculate the minimum number of blows to defeat Zmei Gorynich!\n\nYou have to answer $t$ independent queries.\n\n-----Input-----\n\nThe first line contains one integer $t$ ($1 \\le t \\le 100$) \u2013 the number of queries.\n\nThe first line of each query contains two integers $n$ and $x$ ($1 \\le n \\le 100$, $1 \\le x \\le 10^9$) \u2014 the number of possible types of blows and the number of heads Zmei initially has, respectively.\n\nThe following $n$ lines of each query contain the descriptions of types of blows you can deal. The $i$-th line contains two integers $d_i$ and $h_i$ ($1 \\le d_i, h_i \\le 10^9$) \u2014 the description of the $i$-th blow.\n\n\n-----Output-----\n\nFor each query print the minimum number of blows you have to deal to defeat Zmei Gorynich. \n\nIf Zmei Gorynuch cannot be defeated print $-1$.\n\n\n-----Example-----\nInput\n3\n3 10\n6 3\n8 2\n1 4\n4 10\n4 1\n3 2\n2 6\n1 100\n2 15\n10 11\n14 100\n\nOutput\n2\n3\n-1\n\n\n-----Note-----\n\nIn the first query you can deal the first blow (after that the number of heads changes to $10 - 6 + 3 = 7$), and then deal the second blow.\n\nIn the second query you just deal the first blow three times, and Zmei is defeated. \n\nIn third query you can not defeat Zmei Gorynuch. Maybe it's better to convince it to stop fighting?\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(str(input())) == str(output())\n\"\"\"\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n10\\n6 3\\n8 2\\n1 4\\n4 10\\n4 1\\n3 2\\n2 6\\n1 100\\n2 15\\n10 11\") == \"2\"\nassert solution(\"3\\n10\\n6 3\\n8 2\\n1 4\\n4 10\\n4 1\\n3 2\\n2 6\\n1 100\\n2 15\") == \"3\"\nassert solution(\"3\\n10\\n6 3\\n8 2\\n1 4\\n4 10\\n4 1\\n3 2\\n2 6\") == \"-1\"\n\n\"\"\""
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 10\\n6 3\\n8 2\\n1 4\\n4 10\\n4 1\\n3 2\\n2 6\\n1 100\\n2 15\\n10 11\\n14 100\") == \"2\"\nassert solution(\"5 10\\n5 5\\n4 4\\n2 10\\n4 1\\n3 2\\n2 6\\n1 100\\n2 15\\n10 11\\n14 100\") == \"3\"\nassert solution(\"5 10\\n4 1\\n3 2\\n2 6\\n1 100\\n2 15\\n10 11\\n14 100\") == \"-1\"\nassert solution(\"5 10\\n4 1\\n3 2\\n2 6\\n1 100\\n2 15\\n10 11\\n14 100\") == \"-1\"\n\n\n\n\n\n\n\n-----Problem-----\n\n\n\n\n\n-----Solutions-----\n\n\n\n-----Test 1-----\n\nInput\n\n3\n3 10\n6 3\n8 2\n1 4\n4 10\n4 1\n3 2\n2 6\n1 100\n2 15\n10 11\n14 100\n\nOutput\n\n2\n3\n-1\n\n\n\n-----Test 2-----\n\nInput\n\n5\n5 10\n5 5\n4 4\n2 10\n4 1\n3 2\n2 6\n1 100\n2 15\n10 11\n14 100\n\nOutput\n\n3\n-1\n-1\n\n\n\n-----Test 3-----\n\nInput\n\n4\n5 10\n5 5\n4 4\n2 10\n4 1\n3 2\n2 6\n1 100\n2 15\n10 11\n14 100\n\nOutput\n\n-1\n3\n-1\n-1\n\n\n\n-----Test 4-----\n\nInput\n\n5\n10 10\n6 5\n8 2\n1 4\n4 10\n4 1\n3 2\n2 6\n1 100\n2 15\n10 11\n14 100\n\nOutput\n\n2\n3\n-1\n-1\n-1\n\n\n\n-----Test 5-----\n\nInput\n\n1\n5 10\n\nOutput\n\n2\n\"\"\"\n\n\n\n\"\"\"\n\u0412 \u0441\u0442\u0440\u043e\u0447\u043a\u0443 \u0441\u043e \u0441\u043b\u043e\u0432\u043e\u043c \"\u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c\" \u043f\u043e\u043f\u0440\u043e\u0441\u0438\u043b\u0438 \u043f\u043e\u043d\u044f\u0442\u044c, \u0447\u0442\u043e \u0442\u0430\u043a\u043e\u0435 \"\u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434\"? \u0422\u0430\u043a \u0447\u0442\u043e \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043d\u0435\u0433\u043e.\n\n\u041c\u0435\u0442\u043e\u0434 \"\u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438\" \u0432 \u043f\u0438\u0442\u043e\u043d\u0435 \u0441\u0442\u0440\u043e\u044f\u0442\u0441\u044f \u0441 \u0440\u0430\u0437\u043d\u044b\u043c\u0438 \u0441\u043f\u043e\u0441\u043e\u0431\u0430\u043c\u0438.\n\n\u041a\u043e\u043d\u0435\u0447\u043d\u043e, \u043e\u043d\u0438 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0442 \u043f\u0440\u043e\u0447\u0438\u0442\u0430\u0442\u044c \u0444\u0430\u0439\u043b\u044b \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u043b\u044c\u043d\u043e\u0433\u043e \u0444\u043e\u0440\u043c\u0430\u0442\u0430, \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u0444\u0430\u0439\u043b\u044b \u0440\u0430\u0437\u043d\u043e\u0433\u043e \u0444\u043e\u0440\u043c\u0430\u0442\u0430, \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0444\u0430\u0439\u043b\u044b \u0432 \u0440\u0430\u0437\u043d\u043e\u043c \u0444\u043e\u0440\u043c\u0430\u0442\u0435. \u0412 \u043f\u0438\u0442\u043e\u043d\u0435 \u043e\u043d\u0438 \u043e\u0431\u044b\u0447\u043d\u043e \u043d\u0430\u0437\u044b\u0432\u0430\u044e\u0442\u0441\u044f \"\u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f\u043c\u0438\". \u0412 \u0447\u0435\u043c \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0430? \u041f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e \u043e\u043d\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0434\u043b\u044f \u0437\u0430\u043f\u0438\u0441\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u043b\u044c\u043d\u044b\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432.\n\n\u0410 \u0435\u0449\u0435 \u043e\u043d\u0438 \u043e\u0431\u044b\u0447\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0434\u043b\u044f \u043e\u0442\u043a\u0440\u044b\u0442\u0438\u044f \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u0444\u0430\u0439\u043b\u043e\u0432. \u0418 \u043e\u043d\u0438 \u0442\u0430\u043a\u0436\u0435 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u044e\u0442\u0441\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c.\n\n\u0412 \u0447\u0435\u043c \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u0430\u044f \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0430? \u0415\u0441\u043b\u0438 \u0432\u044b \u0445\u043e\u0442\u0438\u0442\u0435 \u043f\u0440\u043e\u0447\u0438\u0442\u0430\u0442\u044c \u0444\u0430\u0439\u043b, \u0438 \u0435\u0433\u043e \u043d\u0435 \u0445\u043e\u0442\u0438\u0442\u0435 \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u0438\u043b\u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0432 \u0434\u0440\u0443\u0433\u043e\u043c \u0444\u043e\u0440\u043c\u0430\u0442\u0435, \u043d\u043e \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f \u043e\u0442\u043a\u0440\u044b\u0442\u0438\u044f, \u0442\u043e \u044d\u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u043f\u0440\u0438\u0432\u0435\u0441\u0442\u0438 \u043a \u0442\u0440\u0443\u0434\u043d\u043e\u0441\u0442\u044f\u043c \u0434\u043b\u044f \u043a\u043e\u0434\u0430. \u041a\u0430\u043a \u0431\u044b \u0432\u044b \u0442\u0430\u043a\u043e\u0435 \u043d\u0435 \u0434\u0435\u043b\u0430\u043b\u0438, \u043d\u043e \u043d\u0435 \u0441\u0442\u0435\u0441\u043d\u0438\u0442\u0435\u0441\u044c. \u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 10\\n6 3\\n8 2\\n1 4\\n4 10\\n4 1\\n3 2\\n2 6\\n1 100\\n2 15\\n10 11\\n14 100\") == '2'\nassert solution(\"1 100\\n1 1\") == '-1'\nassert solution(\"1 10\\n5 5\\n1 3\\n5 10\\n3 4\\n4 10\\n5 8\\n5 10\\n2 5\") == '-1'\nassert solution(\"1 10\\n5 5\\n1 3\\n5 10\\n3 4\\n4 10\\n5 8\\n5 10\\n2 5\") == '3'\nassert solution(\"1 10\\n5 5\\n1 3\\n5 10\\n3 4\\n4 10\\n5 8\\n5 10\\n2 5\") == '3'\n\n-----\n\n\u0412\u0430\u043c \u0434\u0430\u0435\u0442\u0441\u044f \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0439 \u0444\u0430\u0439\u043b, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0439 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043f\u043e \u043f\u0440\u043e\u0444\u0435\u0441\u0441\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0439 \u0438\u0433\u0440\u0435. \u041f\u0440\u0430\u0432\u0438\u043b\u0430 \u043f\u0440\u043e\u0444\u0435\u0441\u0441\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0439 \u0438\u0433\u0440\u044b \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u0432 \u0444\u0430\u0439\u043b\u0435.\n\n\u0424\u0430\u0439\u043b \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u0442\u0440\u043e\u043a, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0438\u0445 \u0438\u0437 \u0437\u0430\u043f\u044f\u0442\u043e\u0439 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u0438 \u0434\u0432\u043e\u0435\u0442\u043e\u0447\u0438\u044f \u2014 \u043f\u0440\u0430\u0432\u0438\u043b\u0430 \u043f\u0440\u043e\u0444\u0435\u0441\u0441\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0439 \u0438\u0433\u0440\u044b. \u041f\u0435\u0440\u0432\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0432\u0441\u0435\u0433\u043e \u043e\u0434\u043d\u043e \u0447\u0438\u0441\u043b\u043e n \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u0430\u0432\u0438\u043b. \u0421\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 n \u0441\u0442\u0440\u043e\u043a \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442 \u043f\u0440\u0430\u0432\u0438\u043b\u0430 \u0438\u0433\u0440\u044b, \u043a\u0430\u0436\u0434\u0430\u044f \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u043f\u0440\u0430\u0432\u0438\u043b\u0430 \u0438 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0433\u043e \u043e\u0442\u0432\u0435\u0442\u0430. \u0412 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442\u0441\u044f \u0432\u0430\u0448\u0435 \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u0435. \u0412\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u043e\u0442\u0432\u0435\u0442\u0438\u0442\u044c \u043d\u0430 \u044d\u0442\u043e\u0442 \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0438 \u043d\u0430\u0439\u0442\u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u0430\u0432\u0438\u043b, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u044b \u0434\u0430\u043b\u0438 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442.\n\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0434\u0430\u043d\u043e \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e t (1 \\le t \\le 100) \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u0430\u0448\u0438\u0445 \u043e\u0442\u0432\u0435\u0442\u043e\u0432. \u0412 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 t \u0441\u0442\u0440\u043e\u043a\u0430\u0445 \u0434\u0430\u043d\u043e \u0432\u0430\u0448\u0435 \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0438 \u0432\u0441\u0435 \u043f\u0440\u0430\u0432\u0438\u043b\u0430. \u0412 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0434\u0430\u043d\u043e \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e n (1 \\le n \\le 100) \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u0430\u0432\u0438\u043b \u0438\u0433\u0440\u044b.\n\n\u0412\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u0432\u044b\u0432\u0435\u0441\u0442\u0438 n \u0447\u0438\u0441\u0435\u043b \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0445 \u0437\u0430\u043f\u044f\u0442\u043e\u0439 \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u0430\u0432\u0438\u043b \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u044b \u0434\u0430\u043b\u0438 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442. \u0415\u0441\u043b\u0438 \u0432\u044b \u043d\u0435 \u0434\u0430\u043b\u0438 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442 \u043d\u0430 \u0432\u0441\u0435 \u043f\u0440\u0430\u0432\u0438\u043b\u0430, \u0432\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u0432\u044b\u0432\u0435\u0441\u0442\u0438 -1.\n\n\u041f\u0440\u0438\u043c\u0435\u0440:\n\n3\n6 3\n8 2\n1 4\n4 10\n4 1\n3 2\n2 6\n1 100\n2 15\n10 11\n14 100\n\u0412\u0430\u0448\u0435 \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u0435: \u0435\u0441\u043b\u0438 \u0432\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u0431\u044b\u043b\u043e \u0438\u0433\u0440\u0430\u0442\u044c \u043d\u0430 \u043f\u0440\u0430\u0432\u0438\u043b\u0430\u0445, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0434\u0430\u043b\u0438 \u0432\u0435\u0440\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442, \u0442\u043e \u0441\u0430\u043c\u0438 \u0432\u044b\u0431\u0435\u0440\u0438\u0442\u0435"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 3\\n8 2\\n1 4\\n4 10\\n4 1\\n3 2\\n2 6\") == 2\nassert solution(\"6 3\\n8 2\\n1 4\\n4 10\\n4 1\\n3 2\") == -1\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n10\\n6 3\\n8 2\\n1 4\\n4 10\\n4 1\\n3 2\\n2 6\\n1 100\\n2 15\\n10 11\\n14 100') == '2'\nassert solution('3\\n7 10\\n6 3\\n8 2\\n1 4\\n4 10\\n4 1\\n3 2\\n2 6\\n1 100\\n2 15\\n10 11\\n14 100') == '-1'\n"
    }
]